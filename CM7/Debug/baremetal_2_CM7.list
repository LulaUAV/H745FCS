
baremetal_2_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000138a8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000564  08013b48  08013b48  00023b48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080140ac  080140ac  00030354  2**0
                  CONTENTS
  4 .ARM          00000008  080140ac  080140ac  000240ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080140b4  080140b4  00030354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080140b4  080140b4  000240b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080140bc  080140bc  000240bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000354  24000000  080140c4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ddc  24000354  08014418  00030354  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  24002130  08014418  00032130  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030354  2**0
                  CONTENTS, READONLY
 12 .debug_info   00035b35  00000000  00000000  00030382  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006b49  00000000  00000000  00065eb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002270  00000000  00000000  0006ca00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000022e0  00000000  00000000  0006ec70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000dd76  00000000  00000000  00070f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003408e  00000000  00000000  0007ecc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001a15ed  00000000  00000000  000b2d54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00254341  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009bb4  00000000  00000000  00254394  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000010f6  00000000  00000000  0025df48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000354 	.word	0x24000354
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08013b30 	.word	0x08013b30

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000358 	.word	0x24000358
 80002dc:	08013b30 	.word	0x08013b30

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000698:	4b3f      	ldr	r3, [pc, #252]	; (8000798 <SystemInit+0x104>)
 800069a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069e:	4a3e      	ldr	r2, [pc, #248]	; (8000798 <SystemInit+0x104>)
 80006a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a8:	4b3b      	ldr	r3, [pc, #236]	; (8000798 <SystemInit+0x104>)
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	4a3a      	ldr	r2, [pc, #232]	; (8000798 <SystemInit+0x104>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006b4:	4b39      	ldr	r3, [pc, #228]	; (800079c <SystemInit+0x108>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f003 030f 	and.w	r3, r3, #15
 80006bc:	2b06      	cmp	r3, #6
 80006be:	d807      	bhi.n	80006d0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006c0:	4b36      	ldr	r3, [pc, #216]	; (800079c <SystemInit+0x108>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f023 030f 	bic.w	r3, r3, #15
 80006c8:	4a34      	ldr	r2, [pc, #208]	; (800079c <SystemInit+0x108>)
 80006ca:	f043 0307 	orr.w	r3, r3, #7
 80006ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006d0:	4b33      	ldr	r3, [pc, #204]	; (80007a0 <SystemInit+0x10c>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a32      	ldr	r2, [pc, #200]	; (80007a0 <SystemInit+0x10c>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006dc:	4b30      	ldr	r3, [pc, #192]	; (80007a0 <SystemInit+0x10c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006e2:	4b2f      	ldr	r3, [pc, #188]	; (80007a0 <SystemInit+0x10c>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	492e      	ldr	r1, [pc, #184]	; (80007a0 <SystemInit+0x10c>)
 80006e8:	4b2e      	ldr	r3, [pc, #184]	; (80007a4 <SystemInit+0x110>)
 80006ea:	4013      	ands	r3, r2
 80006ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ee:	4b2b      	ldr	r3, [pc, #172]	; (800079c <SystemInit+0x108>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d007      	beq.n	800070a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006fa:	4b28      	ldr	r3, [pc, #160]	; (800079c <SystemInit+0x108>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f023 030f 	bic.w	r3, r3, #15
 8000702:	4a26      	ldr	r2, [pc, #152]	; (800079c <SystemInit+0x108>)
 8000704:	f043 0307 	orr.w	r3, r3, #7
 8000708:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800070a:	4b25      	ldr	r3, [pc, #148]	; (80007a0 <SystemInit+0x10c>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000710:	4b23      	ldr	r3, [pc, #140]	; (80007a0 <SystemInit+0x10c>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000716:	4b22      	ldr	r3, [pc, #136]	; (80007a0 <SystemInit+0x10c>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800071c:	4b20      	ldr	r3, [pc, #128]	; (80007a0 <SystemInit+0x10c>)
 800071e:	4a22      	ldr	r2, [pc, #136]	; (80007a8 <SystemInit+0x114>)
 8000720:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000722:	4b1f      	ldr	r3, [pc, #124]	; (80007a0 <SystemInit+0x10c>)
 8000724:	4a21      	ldr	r2, [pc, #132]	; (80007ac <SystemInit+0x118>)
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000728:	4b1d      	ldr	r3, [pc, #116]	; (80007a0 <SystemInit+0x10c>)
 800072a:	4a21      	ldr	r2, [pc, #132]	; (80007b0 <SystemInit+0x11c>)
 800072c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800072e:	4b1c      	ldr	r3, [pc, #112]	; (80007a0 <SystemInit+0x10c>)
 8000730:	2200      	movs	r2, #0
 8000732:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000734:	4b1a      	ldr	r3, [pc, #104]	; (80007a0 <SystemInit+0x10c>)
 8000736:	4a1e      	ldr	r2, [pc, #120]	; (80007b0 <SystemInit+0x11c>)
 8000738:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800073a:	4b19      	ldr	r3, [pc, #100]	; (80007a0 <SystemInit+0x10c>)
 800073c:	2200      	movs	r2, #0
 800073e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000740:	4b17      	ldr	r3, [pc, #92]	; (80007a0 <SystemInit+0x10c>)
 8000742:	4a1b      	ldr	r2, [pc, #108]	; (80007b0 <SystemInit+0x11c>)
 8000744:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000746:	4b16      	ldr	r3, [pc, #88]	; (80007a0 <SystemInit+0x10c>)
 8000748:	2200      	movs	r2, #0
 800074a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800074c:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <SystemInit+0x10c>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a13      	ldr	r2, [pc, #76]	; (80007a0 <SystemInit+0x10c>)
 8000752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000756:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000758:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <SystemInit+0x10c>)
 800075a:	2200      	movs	r2, #0
 800075c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800075e:	4b15      	ldr	r3, [pc, #84]	; (80007b4 <SystemInit+0x120>)
 8000760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000762:	4a14      	ldr	r2, [pc, #80]	; (80007b4 <SystemInit+0x120>)
 8000764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000768:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800076a:	4b13      	ldr	r3, [pc, #76]	; (80007b8 <SystemInit+0x124>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4b13      	ldr	r3, [pc, #76]	; (80007bc <SystemInit+0x128>)
 8000770:	4013      	ands	r3, r2
 8000772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000776:	d202      	bcs.n	800077e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000778:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <SystemInit+0x12c>)
 800077a:	2201      	movs	r2, #1
 800077c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800077e:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <SystemInit+0x130>)
 8000780:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000784:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000786:	4b04      	ldr	r3, [pc, #16]	; (8000798 <SystemInit+0x104>)
 8000788:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800078c:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800078e:	bf00      	nop
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	e000ed00 	.word	0xe000ed00
 800079c:	52002000 	.word	0x52002000
 80007a0:	58024400 	.word	0x58024400
 80007a4:	eaf6ed7f 	.word	0xeaf6ed7f
 80007a8:	02020200 	.word	0x02020200
 80007ac:	01ff0000 	.word	0x01ff0000
 80007b0:	01010280 	.word	0x01010280
 80007b4:	580000c0 	.word	0x580000c0
 80007b8:	5c001000 	.word	0x5c001000
 80007bc:	ffff0000 	.word	0xffff0000
 80007c0:	51008108 	.word	0x51008108
 80007c4:	52004000 	.word	0x52004000

080007c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007ce:	4b1d      	ldr	r3, [pc, #116]	; (8000844 <MX_DMA_Init+0x7c>)
 80007d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007d4:	4a1b      	ldr	r2, [pc, #108]	; (8000844 <MX_DMA_Init+0x7c>)
 80007d6:	f043 0301 	orr.w	r3, r3, #1
 80007da:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80007de:	4b19      	ldr	r3, [pc, #100]	; (8000844 <MX_DMA_Init+0x7c>)
 80007e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007e4:	f003 0301 	and.w	r3, r3, #1
 80007e8:	607b      	str	r3, [r7, #4]
 80007ea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007ec:	4b15      	ldr	r3, [pc, #84]	; (8000844 <MX_DMA_Init+0x7c>)
 80007ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007f2:	4a14      	ldr	r2, [pc, #80]	; (8000844 <MX_DMA_Init+0x7c>)
 80007f4:	f043 0302 	orr.w	r3, r3, #2
 80007f8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80007fc:	4b11      	ldr	r3, [pc, #68]	; (8000844 <MX_DMA_Init+0x7c>)
 80007fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000802:	f003 0302 	and.w	r3, r3, #2
 8000806:	603b      	str	r3, [r7, #0]
 8000808:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 1, 0);
 800080a:	2200      	movs	r2, #0
 800080c:	2101      	movs	r1, #1
 800080e:	2010      	movs	r0, #16
 8000810:	f001 fe6b 	bl	80024ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000814:	2010      	movs	r0, #16
 8000816:	f001 fe82 	bl	800251e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 1, 0);
 800081a:	2200      	movs	r2, #0
 800081c:	2101      	movs	r1, #1
 800081e:	2011      	movs	r0, #17
 8000820:	f001 fe63 	bl	80024ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000824:	2011      	movs	r0, #17
 8000826:	f001 fe7a 	bl	800251e <HAL_NVIC_EnableIRQ>

  /* DMA2_Stream7 Interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 1, 0);
 800082a:	2200      	movs	r2, #0
 800082c:	2101      	movs	r1, #1
 800082e:	2046      	movs	r0, #70	; 0x46
 8000830:	f001 fe5b 	bl	80024ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000834:	2046      	movs	r0, #70	; 0x46
 8000836:	f001 fe72 	bl	800251e <HAL_NVIC_EnableIRQ>

}
 800083a:	bf00      	nop
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	58024400 	.word	0x58024400

08000848 <MX_GPIO_Init>:
/** Configure pins
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b088      	sub	sp, #32
 800084c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800084e:	4b37      	ldr	r3, [pc, #220]	; (800092c <MX_GPIO_Init+0xe4>)
 8000850:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000854:	4a35      	ldr	r2, [pc, #212]	; (800092c <MX_GPIO_Init+0xe4>)
 8000856:	f043 0320 	orr.w	r3, r3, #32
 800085a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800085e:	4b33      	ldr	r3, [pc, #204]	; (800092c <MX_GPIO_Init+0xe4>)
 8000860:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000864:	f003 0320 	and.w	r3, r3, #32
 8000868:	61fb      	str	r3, [r7, #28]
 800086a:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800086c:	4b2f      	ldr	r3, [pc, #188]	; (800092c <MX_GPIO_Init+0xe4>)
 800086e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000872:	4a2e      	ldr	r2, [pc, #184]	; (800092c <MX_GPIO_Init+0xe4>)
 8000874:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000878:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800087c:	4b2b      	ldr	r3, [pc, #172]	; (800092c <MX_GPIO_Init+0xe4>)
 800087e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000886:	61bb      	str	r3, [r7, #24]
 8000888:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088a:	4b28      	ldr	r3, [pc, #160]	; (800092c <MX_GPIO_Init+0xe4>)
 800088c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000890:	4a26      	ldr	r2, [pc, #152]	; (800092c <MX_GPIO_Init+0xe4>)
 8000892:	f043 0301 	orr.w	r3, r3, #1
 8000896:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800089a:	4b24      	ldr	r3, [pc, #144]	; (800092c <MX_GPIO_Init+0xe4>)
 800089c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008a0:	f003 0301 	and.w	r3, r3, #1
 80008a4:	617b      	str	r3, [r7, #20]
 80008a6:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008a8:	4b20      	ldr	r3, [pc, #128]	; (800092c <MX_GPIO_Init+0xe4>)
 80008aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ae:	4a1f      	ldr	r2, [pc, #124]	; (800092c <MX_GPIO_Init+0xe4>)
 80008b0:	f043 0310 	orr.w	r3, r3, #16
 80008b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008b8:	4b1c      	ldr	r3, [pc, #112]	; (800092c <MX_GPIO_Init+0xe4>)
 80008ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008be:	f003 0310 	and.w	r3, r3, #16
 80008c2:	613b      	str	r3, [r7, #16]
 80008c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c6:	4b19      	ldr	r3, [pc, #100]	; (800092c <MX_GPIO_Init+0xe4>)
 80008c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008cc:	4a17      	ldr	r2, [pc, #92]	; (800092c <MX_GPIO_Init+0xe4>)
 80008ce:	f043 0302 	orr.w	r3, r3, #2
 80008d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008d6:	4b15      	ldr	r3, [pc, #84]	; (800092c <MX_GPIO_Init+0xe4>)
 80008d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008dc:	f003 0302 	and.w	r3, r3, #2
 80008e0:	60fb      	str	r3, [r7, #12]
 80008e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e4:	4b11      	ldr	r3, [pc, #68]	; (800092c <MX_GPIO_Init+0xe4>)
 80008e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ea:	4a10      	ldr	r2, [pc, #64]	; (800092c <MX_GPIO_Init+0xe4>)
 80008ec:	f043 0304 	orr.w	r3, r3, #4
 80008f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008f4:	4b0d      	ldr	r3, [pc, #52]	; (800092c <MX_GPIO_Init+0xe4>)
 80008f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008fa:	f003 0304 	and.w	r3, r3, #4
 80008fe:	60bb      	str	r3, [r7, #8]
 8000900:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000902:	4b0a      	ldr	r3, [pc, #40]	; (800092c <MX_GPIO_Init+0xe4>)
 8000904:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000908:	4a08      	ldr	r2, [pc, #32]	; (800092c <MX_GPIO_Init+0xe4>)
 800090a:	f043 0308 	orr.w	r3, r3, #8
 800090e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000912:	4b06      	ldr	r3, [pc, #24]	; (800092c <MX_GPIO_Init+0xe4>)
 8000914:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000918:	f003 0308 	and.w	r3, r3, #8
 800091c:	607b      	str	r3, [r7, #4]
 800091e:	687b      	ldr	r3, [r7, #4]

  // Set LED Ports
  GPIO_Port_Config();
 8000920:	f000 f806 	bl	8000930 <GPIO_Port_Config>

}
 8000924:	bf00      	nop
 8000926:	3720      	adds	r7, #32
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	58024400 	.word	0x58024400

08000930 <GPIO_Port_Config>:

/* USER CODE BEGIN 2 */
void GPIO_Port_Config(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b086      	sub	sp, #24
 8000934:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
 8000942:	611a      	str	r2, [r3, #16]

  // Configure GPIO Pin Output Level:
  //LEDS
  HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_RESET);
 8000944:	2200      	movs	r2, #0
 8000946:	2180      	movs	r1, #128	; 0x80
 8000948:	4827      	ldr	r0, [pc, #156]	; (80009e8 <GPIO_Port_Config+0xb8>)
 800094a:	f004 fe93 	bl	8005674 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = LED_A_Pin;
 800094e:	2380      	movs	r3, #128	; 0x80
 8000950:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000952:	2301      	movs	r3, #1
 8000954:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095a:	2300      	movs	r3, #0
 800095c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_A_GPIO_Port, &GPIO_InitStruct);
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	4619      	mov	r1, r3
 8000962:	4821      	ldr	r0, [pc, #132]	; (80009e8 <GPIO_Port_Config+0xb8>)
 8000964:	f004 fcd6 	bl	8005314 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8000968:	2200      	movs	r2, #0
 800096a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800096e:	481e      	ldr	r0, [pc, #120]	; (80009e8 <GPIO_Port_Config+0xb8>)
 8000970:	f004 fe80 	bl	8005674 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = LED_B_Pin;
 8000974:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000978:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097a:	2301      	movs	r3, #1
 800097c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2300      	movs	r3, #0
 8000984:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_B_GPIO_Port, &GPIO_InitStruct);
 8000986:	1d3b      	adds	r3, r7, #4
 8000988:	4619      	mov	r1, r3
 800098a:	4817      	ldr	r0, [pc, #92]	; (80009e8 <GPIO_Port_Config+0xb8>)
 800098c:	f004 fcc2 	bl	8005314 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_RESET);
 8000990:	2200      	movs	r2, #0
 8000992:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000996:	4815      	ldr	r0, [pc, #84]	; (80009ec <GPIO_Port_Config+0xbc>)
 8000998:	f004 fe6c 	bl	8005674 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = LED_C_Pin;
 800099c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a2:	2301      	movs	r3, #1
 80009a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_C_GPIO_Port, &GPIO_InitStruct);
 80009ae:	1d3b      	adds	r3, r7, #4
 80009b0:	4619      	mov	r1, r3
 80009b2:	480e      	ldr	r0, [pc, #56]	; (80009ec <GPIO_Port_Config+0xbc>)
 80009b4:	f004 fcae 	bl	8005314 <HAL_GPIO_Init>


  HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_RESET);
 80009b8:	2200      	movs	r2, #0
 80009ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009be:	480b      	ldr	r0, [pc, #44]	; (80009ec <GPIO_Port_Config+0xbc>)
 80009c0:	f004 fe58 	bl	8005674 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = LED_D_Pin;
 80009c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009c8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ca:	2301      	movs	r3, #1
 80009cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d2:	2300      	movs	r3, #0
 80009d4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_D_GPIO_Port, &GPIO_InitStruct);
 80009d6:	1d3b      	adds	r3, r7, #4
 80009d8:	4619      	mov	r1, r3
 80009da:	4804      	ldr	r0, [pc, #16]	; (80009ec <GPIO_Port_Config+0xbc>)
 80009dc:	f004 fc9a 	bl	8005314 <HAL_GPIO_Init>

}
 80009e0:	bf00      	nop
 80009e2:	3718      	adds	r7, #24
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	58021000 	.word	0x58021000
 80009ec:	58021400 	.word	0x58021400

080009f0 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80009f4:	4b1b      	ldr	r3, [pc, #108]	; (8000a64 <MX_I2C2_Init+0x74>)
 80009f6:	4a1c      	ldr	r2, [pc, #112]	; (8000a68 <MX_I2C2_Init+0x78>)
 80009f8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 80009fa:	4b1a      	ldr	r3, [pc, #104]	; (8000a64 <MX_I2C2_Init+0x74>)
 80009fc:	4a1b      	ldr	r2, [pc, #108]	; (8000a6c <MX_I2C2_Init+0x7c>)
 80009fe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000a00:	4b18      	ldr	r3, [pc, #96]	; (8000a64 <MX_I2C2_Init+0x74>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a06:	4b17      	ldr	r3, [pc, #92]	; (8000a64 <MX_I2C2_Init+0x74>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a0c:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <MX_I2C2_Init+0x74>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a12:	4b14      	ldr	r3, [pc, #80]	; (8000a64 <MX_I2C2_Init+0x74>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a18:	4b12      	ldr	r3, [pc, #72]	; (8000a64 <MX_I2C2_Init+0x74>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a1e:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <MX_I2C2_Init+0x74>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a24:	4b0f      	ldr	r3, [pc, #60]	; (8000a64 <MX_I2C2_Init+0x74>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a2a:	480e      	ldr	r0, [pc, #56]	; (8000a64 <MX_I2C2_Init+0x74>)
 8000a2c:	f004 fe96 	bl	800575c <HAL_I2C_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000a36:	f000 fa75 	bl	8000f24 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	4809      	ldr	r0, [pc, #36]	; (8000a64 <MX_I2C2_Init+0x74>)
 8000a3e:	f005 fda2 	bl	8006586 <HAL_I2CEx_ConfigAnalogFilter>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000a48:	f000 fa6c 	bl	8000f24 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	4805      	ldr	r0, [pc, #20]	; (8000a64 <MX_I2C2_Init+0x74>)
 8000a50:	f005 fde4 	bl	800661c <HAL_I2CEx_ConfigDigitalFilter>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000a5a:	f000 fa63 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	24000370 	.word	0x24000370
 8000a68:	40005800 	.word	0x40005800
 8000a6c:	307075b1 	.word	0x307075b1

08000a70 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b0b8      	sub	sp, #224	; 0xe0
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a78:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a88:	f107 0310 	add.w	r3, r7, #16
 8000a8c:	22bc      	movs	r2, #188	; 0xbc
 8000a8e:	2100      	movs	r1, #0
 8000a90:	4618      	mov	r0, r3
 8000a92:	f010 fbeb 	bl	801126c <memset>
  if(i2cHandle->Instance==I2C2)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4a2d      	ldr	r2, [pc, #180]	; (8000b50 <HAL_I2C_MspInit+0xe0>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d152      	bne.n	8000b46 <HAL_I2C_MspInit+0xd6>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000aa0:	2308      	movs	r3, #8
 8000aa2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000aaa:	f107 0310 	add.w	r3, r7, #16
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f008 f822 	bl	8008af8 <HAL_RCCEx_PeriphCLKConfig>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000aba:	f000 fa33 	bl	8000f24 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000abe:	4b25      	ldr	r3, [pc, #148]	; (8000b54 <HAL_I2C_MspInit+0xe4>)
 8000ac0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac4:	4a23      	ldr	r2, [pc, #140]	; (8000b54 <HAL_I2C_MspInit+0xe4>)
 8000ac6:	f043 0302 	orr.w	r3, r3, #2
 8000aca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ace:	4b21      	ldr	r3, [pc, #132]	; (8000b54 <HAL_I2C_MspInit+0xe4>)
 8000ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad4:	f003 0302 	and.w	r3, r3, #2
 8000ad8:	60fb      	str	r3, [r7, #12]
 8000ada:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000adc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ae0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ae4:	2312      	movs	r3, #18
 8000ae6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aea:	2301      	movs	r3, #1
 8000aec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af0:	2300      	movs	r3, #0
 8000af2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000af6:	2304      	movs	r3, #4
 8000af8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000afc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000b00:	4619      	mov	r1, r3
 8000b02:	4815      	ldr	r0, [pc, #84]	; (8000b58 <HAL_I2C_MspInit+0xe8>)
 8000b04:	f004 fc06 	bl	8005314 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000b08:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <HAL_I2C_MspInit+0xe4>)
 8000b0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b0e:	4a11      	ldr	r2, [pc, #68]	; (8000b54 <HAL_I2C_MspInit+0xe4>)
 8000b10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b14:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000b18:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <HAL_I2C_MspInit+0xe4>)
 8000b1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b22:	60bb      	str	r3, [r7, #8]
 8000b24:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2100      	movs	r1, #0
 8000b2a:	2021      	movs	r0, #33	; 0x21
 8000b2c:	f001 fcdd 	bl	80024ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000b30:	2021      	movs	r0, #33	; 0x21
 8000b32:	f001 fcf4 	bl	800251e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8000b36:	2200      	movs	r2, #0
 8000b38:	2100      	movs	r1, #0
 8000b3a:	2022      	movs	r0, #34	; 0x22
 8000b3c:	f001 fcd5 	bl	80024ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8000b40:	2022      	movs	r0, #34	; 0x22
 8000b42:	f001 fcec 	bl	800251e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000b46:	bf00      	nop
 8000b48:	37e0      	adds	r7, #224	; 0xe0
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40005800 	.word	0x40005800
 8000b54:	58024400 	.word	0x58024400
 8000b58:	58020400 	.word	0x58020400
 8000b5c:	00000000 	.word	0x00000000

08000b60 <_Z18SystemClock_Configv>:
///**
//  * @brief System Clock Configuration
//  * @retval None
//  */
void SystemClock_Config(void)
{
 8000b60:	b510      	push	{r4, lr}
 8000b62:	b09e      	sub	sp, #120	; 0x78
  // Defective warning for missing initialiser member
  RCC_OscInitTypeDef RCC_OscInitStruct = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
 8000b64:	224c      	movs	r2, #76	; 0x4c
 8000b66:	2100      	movs	r1, #0
 8000b68:	a80a      	add	r0, sp, #40	; 0x28
 8000b6a:	f010 fb7f 	bl	801126c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0,0,0,0,0,0,0,0};
 8000b6e:	2220      	movs	r2, #32
 8000b70:	2100      	movs	r1, #0
 8000b72:	a802      	add	r0, sp, #8
 8000b74:	f010 fb7a 	bl	801126c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000b78:	2002      	movs	r0, #2
 8000b7a:	f006 ff77 	bl	8007a6c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b7e:	4a32      	ldr	r2, [pc, #200]	; (8000c48 <_Z18SystemClock_Configv+0xe8>)
 8000b80:	2100      	movs	r1, #0
 8000b82:	4b32      	ldr	r3, [pc, #200]	; (8000c4c <_Z18SystemClock_Configv+0xec>)
 8000b84:	9101      	str	r1, [sp, #4]
 8000b86:	6991      	ldr	r1, [r2, #24]
 8000b88:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8000b8c:	6191      	str	r1, [r2, #24]
 8000b8e:	6991      	ldr	r1, [r2, #24]
 8000b90:	f401 4140 	and.w	r1, r1, #49152	; 0xc000
 8000b94:	9101      	str	r1, [sp, #4]
 8000b96:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000b98:	f041 0101 	orr.w	r1, r1, #1
 8000b9c:	62d9      	str	r1, [r3, #44]	; 0x2c
 8000b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ba0:	f003 0301 	and.w	r3, r3, #1
 8000ba4:	9301      	str	r3, [sp, #4]
 8000ba6:	9b01      	ldr	r3, [sp, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ba8:	6993      	ldr	r3, [r2, #24]
 8000baa:	049b      	lsls	r3, r3, #18
 8000bac:	d5fc      	bpl.n	8000ba8 <_Z18SystemClock_Configv+0x48>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000bae:	4a28      	ldr	r2, [pc, #160]	; (8000c50 <_Z18SystemClock_Configv+0xf0>)
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000bb0:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000bb2:	243c      	movs	r4, #60	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = 15;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bb4:	a80a      	add	r0, sp, #40	; 0x28
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000bb6:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8000bb8:	f023 0303 	bic.w	r3, r3, #3
 8000bbc:	f043 0302 	orr.w	r3, r3, #2
 8000bc0:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bc2:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000bc4:	2200      	movs	r2, #0
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000bc6:	9110      	str	r1, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000bc8:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000bca:	210c      	movs	r1, #12
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000bcc:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bce:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000bd0:	9416      	str	r4, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000bd2:	921c      	str	r2, [sp, #112]	; 0x70
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000bd4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8000c30 <_Z18SystemClock_Configv+0xd0>
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bd8:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = 15;
 8000bdc:	230f      	movs	r3, #15
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000bde:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000be2:	e9cd 121a 	strd	r1, r2, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLQ = 15;
 8000be6:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000be8:	f006 ffaa 	bl	8007b40 <HAL_RCC_OscConfig>
 8000bec:	b108      	cbz	r0, 8000bf2 <_Z18SystemClock_Configv+0x92>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bee:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <_Z18SystemClock_Configv+0x90>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bf2:	ed9f 7b11 	vldr	d7, [pc, #68]	; 8000c38 <_Z18SystemClock_Configv+0xd8>
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2308      	movs	r3, #8
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000bfa:	a802      	add	r0, sp, #8
 8000bfc:	2104      	movs	r1, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bfe:	ed8d 7b02 	vstr	d7, [sp, #8]
 8000c02:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8000c40 <_Z18SystemClock_Configv+0xe0>
 8000c06:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8000c0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c0e:	2340      	movs	r3, #64	; 0x40
 8000c10:	ed8d 7b06 	vstr	d7, [sp, #24]
 8000c14:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c18:	f007 fba0 	bl	800835c <HAL_RCC_ClockConfig>
 8000c1c:	b108      	cbz	r0, 8000c22 <_Z18SystemClock_Configv+0xc2>
 8000c1e:	b672      	cpsid	i
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <_Z18SystemClock_Configv+0xc0>
  HAL_PWREx_EnableUSBVoltageDetector();
 8000c22:	f006 ff7d 	bl	8007b20 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8000c26:	b01e      	add	sp, #120	; 0x78
 8000c28:	bd10      	pop	{r4, pc}
 8000c2a:	bf00      	nop
 8000c2c:	f3af 8000 	nop.w
 8000c30:	00000021 	.word	0x00000021
 8000c34:	00010000 	.word	0x00010000
 8000c38:	0000003f 	.word	0x0000003f
 8000c3c:	00000003 	.word	0x00000003
 8000c40:	00000040 	.word	0x00000040
 8000c44:	00000040 	.word	0x00000040
 8000c48:	58024800 	.word	0x58024800
 8000c4c:	58000400 	.word	0x58000400
 8000c50:	58024400 	.word	0x58024400

08000c54 <main>:
{
 8000c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000c58:	2400      	movs	r4, #0
{
 8000c5a:	b09d      	sub	sp, #116	; 0x74
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000c5c:	2501      	movs	r5, #1
	  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000c5e:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8000c62:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  HAL_MPU_Disable();
 8000c66:	f001 fc75 	bl	8002554 <HAL_MPU_Disable>
    MPU_InitStruct.BaseAddress = 0x24000000;
 8000c6a:	f04f 5210 	mov.w	r2, #603979776	; 0x24000000
    MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000c6e:	4ba0      	ldr	r3, [pc, #640]	; (8000ef0 <main+0x29c>)
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c70:	a80b      	add	r0, sp, #44	; 0x2c
    MPU_InitStruct.BaseAddress = 0x24000000;
 8000c72:	920c      	str	r2, [sp, #48]	; 0x30
    MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000c74:	930d      	str	r3, [sp, #52]	; 0x34
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000c76:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
    MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000c7a:	940e      	str	r4, [sp, #56]	; 0x38
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c7c:	f001 fca2 	bl	80025c4 <HAL_MPU_ConfigRegion>
    MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8000c80:	4a9c      	ldr	r2, [pc, #624]	; (8000ef4 <main+0x2a0>)
 8000c82:	f44f 7380 	mov.w	r3, #256	; 0x100
    MPU_InitStruct.BaseAddress = 0x38000000;
 8000c86:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c8a:	a80b      	add	r0, sp, #44	; 0x2c
    MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000c8c:	f88d 502d 	strb.w	r5, [sp, #45]	; 0x2d
    MPU_InitStruct.BaseAddress = 0x38000000;
 8000c90:	910c      	str	r1, [sp, #48]	; 0x30
    MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8000c92:	e9cd 230d 	strd	r2, r3, [sp, #52]	; 0x34
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c96:	f001 fc95 	bl	80025c4 <HAL_MPU_ConfigRegion>
    HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000c9a:	2004      	movs	r0, #4
 8000c9c:	f001 fc72 	bl	8002584 <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000ca0:	4a95      	ldr	r2, [pc, #596]	; (8000ef8 <main+0x2a4>)
 8000ca2:	6953      	ldr	r3, [r2, #20]
 8000ca4:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
 8000ca8:	d111      	bne.n	8000cce <main+0x7a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000caa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000cae:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000cb2:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000cb6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000cba:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000cbe:	6953      	ldr	r3, [r2, #20]
 8000cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000cc6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000cca:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000cce:	488a      	ldr	r0, [pc, #552]	; (8000ef8 <main+0x2a4>)
 8000cd0:	6943      	ldr	r3, [r0, #20]
 8000cd2:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8000cd6:	d124      	bne.n	8000d22 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000cd8:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000cdc:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000ce0:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000ce4:	f643 76e0 	movw	r6, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000ce8:	f3c5 344e 	ubfx	r4, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000cec:	f3c5 05c9 	ubfx	r5, r5, #3, #10
 8000cf0:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000cf2:	ea04 0106 	and.w	r1, r4, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000cf6:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000cf8:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000cfc:	3b01      	subs	r3, #1
 8000cfe:	1c5f      	adds	r7, r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000d00:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 8000d04:	d1f8      	bne.n	8000cf8 <main+0xa4>
    } while(sets-- != 0U);
 8000d06:	3c20      	subs	r4, #32
 8000d08:	f114 0f20 	cmn.w	r4, #32
 8000d0c:	d1f1      	bne.n	8000cf2 <main+0x9e>
 8000d0e:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000d12:	6943      	ldr	r3, [r0, #20]
 8000d14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d18:	6143      	str	r3, [r0, #20]
 8000d1a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000d1e:	f3bf 8f6f 	isb	sy
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000d22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000d26:	4d75      	ldr	r5, [pc, #468]	; (8000efc <main+0x2a8>)
 8000d28:	e002      	b.n	8000d30 <main+0xdc>
 8000d2a:	3b01      	subs	r3, #1
 8000d2c:	f000 80dc 	beq.w	8000ee8 <main+0x294>
 8000d30:	682c      	ldr	r4, [r5, #0]
 8000d32:	f414 4400 	ands.w	r4, r4, #32768	; 0x8000
 8000d36:	d1f8      	bne.n	8000d2a <main+0xd6>
  HAL_Init();
 8000d38:	f001 fa3a 	bl	80021b0 <HAL_Init>
  SystemClock_Config();
 8000d3c:	f7ff ff10 	bl	8000b60 <_Z18SystemClock_Configv>
  __HAL_RCC_HSEM_CLK_ENABLE();
 8000d40:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
HAL_HSEM_FastTake(HSEM_BOOT);
 8000d44:	4620      	mov	r0, r4
  __HAL_RCC_HSEM_CLK_ENABLE();
 8000d46:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d4a:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8000d4e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8000d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d56:	930a      	str	r3, [sp, #40]	; 0x28
 8000d58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
HAL_HSEM_FastTake(HSEM_BOOT);
 8000d5a:	f004 fca5 	bl	80056a8 <HAL_HSEM_FastTake>
HAL_HSEM_Release(HSEM_BOOT,0);
 8000d5e:	4621      	mov	r1, r4
 8000d60:	4620      	mov	r0, r4
 8000d62:	f004 fcbb 	bl	80056dc <HAL_HSEM_Release>
 8000d66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000d6a:	4964      	ldr	r1, [pc, #400]	; (8000efc <main+0x2a8>)
 8000d6c:	e002      	b.n	8000d74 <main+0x120>
 8000d6e:	3b01      	subs	r3, #1
 8000d70:	f000 80bc 	beq.w	8000eec <main+0x298>
 8000d74:	680a      	ldr	r2, [r1, #0]
 8000d76:	0412      	lsls	r2, r2, #16
 8000d78:	d5f9      	bpl.n	8000d6e <main+0x11a>
  MX_GPIO_Init();
 8000d7a:	f7ff fd65 	bl	8000848 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d7e:	f7ff fd23 	bl	80007c8 <MX_DMA_Init>
  MX_UART4_Init();
 8000d82:	f001 f801 	bl	8001d88 <MX_UART4_Init>
  MX_I2C2_Init();
 8000d86:	f7ff fe33 	bl	80009f0 <MX_I2C2_Init>
  MX_TIM1_Init();
 8000d8a:	f000 fe55 	bl	8001a38 <MX_TIM1_Init>
  MX_UART7_Init();
 8000d8e:	f001 f843 	bl	8001e18 <MX_UART7_Init>
  MX_USB_DEVICE_Init();
 8000d92:	f00f fca5 	bl	80106e0 <MX_USB_DEVICE_Init>
  DWT_Init();
 8000d96:	f000 f8fb 	bl	8000f90 <_Z8DWT_Initv>
  __HAL_UART_ENABLE_IT(&huart4, UART_IT_IDLE);
 8000d9a:	4859      	ldr	r0, [pc, #356]	; (8000f00 <main+0x2ac>)
  HAL_UART_Receive_DMA(&huart4, sbus_buffer, SBUS_PACKET_LEN);
 8000d9c:	2219      	movs	r2, #25
 8000d9e:	4959      	ldr	r1, [pc, #356]	; (8000f04 <main+0x2b0>)
  __HAL_UART_ENABLE_IT(&huart4, UART_IT_IDLE);
 8000da0:	6804      	ldr	r4, [r0, #0]
 8000da2:	6823      	ldr	r3, [r4, #0]
 8000da4:	f043 0310 	orr.w	r3, r3, #16
 8000da8:	6023      	str	r3, [r4, #0]
  HAL_UART_Receive_DMA(&huart4, sbus_buffer, SBUS_PACKET_LEN);
 8000daa:	f00a fe0f 	bl	800b9cc <HAL_UART_Receive_DMA>
  HAL_NVIC_SetPriority(HSEM1_IRQn, 0, 0);
 8000dae:	2200      	movs	r2, #0
 8000db0:	207d      	movs	r0, #125	; 0x7d
 8000db2:	4611      	mov	r1, r2
 8000db4:	f001 fb99 	bl	80024ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM1_IRQn);
 8000db8:	207d      	movs	r0, #125	; 0x7d
 8000dba:	f001 fbb0 	bl	800251e <HAL_NVIC_EnableIRQ>
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ACC));
 8000dbe:	2002      	movs	r0, #2
 8000dc0:	f004 fca0 	bl	8005704 <HAL_HSEM_ActivateNotification>
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_MAG));
 8000dc4:	2008      	movs	r0, #8
 8000dc6:	f004 fc9d 	bl	8005704 <HAL_HSEM_ActivateNotification>
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_GPS));
 8000dca:	2020      	movs	r0, #32
 8000dcc:	f004 fc9a 	bl	8005704 <HAL_HSEM_ActivateNotification>
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_BARO));
 8000dd0:	2010      	movs	r0, #16
 8000dd2:	f004 fc97 	bl	8005704 <HAL_HSEM_ActivateNotification>
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_GYRO));
 8000dd6:	2004      	movs	r0, #4
 8000dd8:	f004 fc94 	bl	8005704 <HAL_HSEM_ActivateNotification>
  while (!CDC_Class_Init_Ok());
 8000ddc:	f00f fcc6 	bl	801076c <CDC_Class_Init_Ok>
 8000de0:	2800      	cmp	r0, #0
 8000de2:	d0fb      	beq.n	8000ddc <main+0x188>
  Serializer serializer;
 8000de4:	a80b      	add	r0, sp, #44	; 0x2c
 8000de6:	4e48      	ldr	r6, [pc, #288]	; (8000f08 <main+0x2b4>)
 8000de8:	4f48      	ldr	r7, [pc, #288]	; (8000f0c <main+0x2b8>)
 8000dea:	ad08      	add	r5, sp, #32
 8000dec:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8000f18 <main+0x2c4>
 8000df0:	f000 fad6 	bl	80013a0 <_ZN10SerializerC1Ev>
  HAL_Delay(1000);
 8000df4:	f8df 811c 	ldr.w	r8, [pc, #284]	; 8000f14 <main+0x2c0>
 8000df8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dfc:	f8df a120 	ldr.w	sl, [pc, #288]	; 8000f20 <main+0x2cc>
 8000e00:	f001 fa68 	bl	80022d4 <HAL_Delay>
	  	  sensors.ReadRawData();
 8000e04:	4c42      	ldr	r4, [pc, #264]	; (8000f10 <main+0x2bc>)
	  if((HAL_GetTick() - usb_timer) >= USB_UPDATE_RATE_MS)
 8000e06:	f001 fa59 	bl	80022bc <HAL_GetTick>
 8000e0a:	6833      	ldr	r3, [r6, #0]
 8000e0c:	1ac0      	subs	r0, r0, r3
 8000e0e:	2806      	cmp	r0, #6
 8000e10:	d9f9      	bls.n	8000e06 <main+0x1b2>
	  	  sensors.ReadRawData();
 8000e12:	4620      	mov	r0, r4
		  gps = sensors.GetGpsData();
 8000e14:	f8df b104 	ldr.w	fp, [pc, #260]	; 8000f1c <main+0x2c8>
	  	  sensors.ReadRawData();
 8000e18:	f000 f9a8 	bl	800116c <_ZN10SensorData11ReadRawDataEv>
		  acc = sensors.GetAccData();
 8000e1c:	4620      	mov	r0, r4
 8000e1e:	f000 fa3f 	bl	80012a0 <_ZN10SensorData10GetAccDataEv>
		  gyro = sensors.GetGyroData();
 8000e22:	4620      	mov	r0, r4
		  acc = sensors.GetAccData();
 8000e24:	ed87 0a00 	vstr	s0, [r7]
 8000e28:	edc7 0a01 	vstr	s1, [r7, #4]
 8000e2c:	ed87 1a02 	vstr	s2, [r7, #8]
		  gyro = sensors.GetGyroData();
 8000e30:	f000 fa44 	bl	80012bc <_ZN10SensorData11GetGyroDataEv>
		  mag = sensors.GetMagData();
 8000e34:	4620      	mov	r0, r4
		  gyro = sensors.GetGyroData();
 8000e36:	ed89 0a00 	vstr	s0, [r9]
 8000e3a:	edc9 0a01 	vstr	s1, [r9, #4]
 8000e3e:	ed89 1a02 	vstr	s2, [r9, #8]
		  mag = sensors.GetMagData();
 8000e42:	f000 fa49 	bl	80012d8 <_ZN10SensorData10GetMagDataEv>
		  gps = sensors.GetGpsData();
 8000e46:	4621      	mov	r1, r4
 8000e48:	4668      	mov	r0, sp
		  mag = sensors.GetMagData();
 8000e4a:	ed88 0a00 	vstr	s0, [r8]
 8000e4e:	edc8 0a01 	vstr	s1, [r8, #4]
 8000e52:	ed88 1a02 	vstr	s2, [r8, #8]
		  gps = sensors.GetGpsData();
 8000e56:	f000 fa59 	bl	800130c <_ZN10SensorData10GetGpsDataEv>
 8000e5a:	46ec      	mov	ip, sp
 8000e5c:	f8dc 0000 	ldr.w	r0, [ip]
 8000e60:	f10c 0c10 	add.w	ip, ip, #16
 8000e64:	f85c 1c0c 	ldr.w	r1, [ip, #-12]
 8000e68:	46de      	mov	lr, fp
 8000e6a:	f85c 2c08 	ldr.w	r2, [ip, #-8]
 8000e6e:	f10b 0b10 	add.w	fp, fp, #16
 8000e72:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8000e76:	45ac      	cmp	ip, r5
 8000e78:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000e7c:	d1ee      	bne.n	8000e5c <main+0x208>
 8000e7e:	882a      	ldrh	r2, [r5, #0]
		  baro = sensors.GetBaroData();
 8000e80:	4620      	mov	r0, r4
		  gps = sensors.GetGpsData();
 8000e82:	78ab      	ldrb	r3, [r5, #2]
 8000e84:	f8ab 2000 	strh.w	r2, [fp]
 8000e88:	f88b 3002 	strb.w	r3, [fp, #2]
		  baro = sensors.GetBaroData();
 8000e8c:	f000 fa32 	bl	80012f4 <_ZN10SensorData11GetBaroDataEv>
		   serializer.SendData(acc);
 8000e90:	4639      	mov	r1, r7
 8000e92:	a80b      	add	r0, sp, #44	; 0x2c
		  baro = sensors.GetBaroData();
 8000e94:	ed8a 0a00 	vstr	s0, [sl]
 8000e98:	edca 0a01 	vstr	s1, [sl, #4]
		   serializer.SendData(acc);
 8000e9c:	f000 fb34 	bl	8001508 <_ZN10Serializer8SendDataERK9accelData>
		   delay_us(500);
 8000ea0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ea4:	f000 f886 	bl	8000fb4 <_Z8delay_usm>
		   serializer.SendData(mag);
 8000ea8:	491a      	ldr	r1, [pc, #104]	; (8000f14 <main+0x2c0>)
 8000eaa:	a80b      	add	r0, sp, #44	; 0x2c
 8000eac:	f000 fad6 	bl	800145c <_ZN10Serializer8SendDataERK7magData>
		   delay_us(500);
 8000eb0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000eb4:	f000 f87e 	bl	8000fb4 <_Z8delay_usm>
		   serializer.SendData(gyro);
 8000eb8:	4917      	ldr	r1, [pc, #92]	; (8000f18 <main+0x2c4>)
 8000eba:	a80b      	add	r0, sp, #44	; 0x2c
 8000ebc:	f000 fa78 	bl	80013b0 <_ZN10Serializer8SendDataERK8gyroData>
		   delay_us(500);
 8000ec0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ec4:	f000 f876 	bl	8000fb4 <_Z8delay_usm>
		   serializer.SendData(gps);
 8000ec8:	4914      	ldr	r1, [pc, #80]	; (8000f1c <main+0x2c8>)
 8000eca:	a80b      	add	r0, sp, #44	; 0x2c
 8000ecc:	f000 fbb4 	bl	8001638 <_ZN10Serializer8SendDataERK7gpsData>
 		   delay_us(500);
 8000ed0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ed4:	f000 f86e 	bl	8000fb4 <_Z8delay_usm>
		   serializer.SendData(baro);
 8000ed8:	4911      	ldr	r1, [pc, #68]	; (8000f20 <main+0x2cc>)
 8000eda:	a80b      	add	r0, sp, #44	; 0x2c
 8000edc:	f000 fb6a 	bl	80015b4 <_ZN10Serializer8SendDataERK8baroData>
		usb_timer = HAL_GetTick();
 8000ee0:	f001 f9ec 	bl	80022bc <HAL_GetTick>
 8000ee4:	6030      	str	r0, [r6, #0]
 8000ee6:	e78e      	b.n	8000e06 <main+0x1b2>
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee8:	b672      	cpsid	i
  while (1)
 8000eea:	e7fe      	b.n	8000eea <main+0x296>
 8000eec:	b672      	cpsid	i
 8000eee:	e7fe      	b.n	8000eee <main+0x29a>
 8000ef0:	03000012 	.word	0x03000012
 8000ef4:	0301000f 	.word	0x0301000f
 8000ef8:	e000ed00 	.word	0xe000ed00
 8000efc:	58024400 	.word	0x58024400
 8000f00:	240005a8 	.word	0x240005a8
 8000f04:	2400053c 	.word	0x2400053c
 8000f08:	240004a8 	.word	0x240004a8
 8000f0c:	240003bc 	.word	0x240003bc
 8000f10:	24000430 	.word	0x24000430
 8000f14:	24000424 	.word	0x24000424
 8000f18:	24000418 	.word	0x24000418
 8000f1c:	240003f4 	.word	0x240003f4
 8000f20:	240003c8 	.word	0x240003c8

08000f24 <Error_Handler>:
 8000f24:	b672      	cpsid	i
 8000f26:	e7fe      	b.n	8000f26 <Error_Handler+0x2>

08000f28 <HAL_UART_RxCpltCallback>:
  /* USER CODE END Error_Handler_Debug */
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  if (huart->Instance == UART4)
 8000f28:	4b0b      	ldr	r3, [pc, #44]	; (8000f58 <HAL_UART_RxCpltCallback+0x30>)
 8000f2a:	6802      	ldr	r2, [r0, #0]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d000      	beq.n	8000f32 <HAL_UART_RxCpltCallback+0xa>
 8000f30:	4770      	bx	lr
  {
    if(sbus_buffer[0] != SBUS_HEADER)
 8000f32:	490a      	ldr	r1, [pc, #40]	; (8000f5c <HAL_UART_RxCpltCallback+0x34>)
 8000f34:	780b      	ldrb	r3, [r1, #0]
 8000f36:	2b0f      	cmp	r3, #15
 8000f38:	d00a      	beq.n	8000f50 <HAL_UART_RxCpltCallback+0x28>
{
 8000f3a:	b510      	push	{r4, lr}
    {
      HAL_UART_DMAStop(&huart4);
 8000f3c:	4c08      	ldr	r4, [pc, #32]	; (8000f60 <HAL_UART_RxCpltCallback+0x38>)
 8000f3e:	4620      	mov	r0, r4
 8000f40:	f00a fd8a 	bl	800ba58 <HAL_UART_DMAStop>
      __HAL_UART_ENABLE_IT(&huart4, UART_IT_IDLE);
 8000f44:	6822      	ldr	r2, [r4, #0]
 8000f46:	6813      	ldr	r3, [r2, #0]
 8000f48:	f043 0310 	orr.w	r3, r3, #16
 8000f4c:	6013      	str	r3, [r2, #0]
    {
    	frkskyRC.UpdateSbus(sbus_buffer);
    }
  }

}
 8000f4e:	bd10      	pop	{r4, pc}
    	frkskyRC.UpdateSbus(sbus_buffer);
 8000f50:	4804      	ldr	r0, [pc, #16]	; (8000f64 <HAL_UART_RxCpltCallback+0x3c>)
 8000f52:	f000 b84b 	b.w	8000fec <_ZN14SbusController10UpdateSbusEPh>
 8000f56:	bf00      	nop
 8000f58:	40004c00 	.word	0x40004c00
 8000f5c:	2400053c 	.word	0x2400053c
 8000f60:	240005a8 	.word	0x240005a8
 8000f64:	240003d0 	.word	0x240003d0

08000f68 <_GLOBAL__sub_I_sensors>:
}
 8000f68:	b508      	push	{r3, lr}
SensorData sensors;
 8000f6a:	4804      	ldr	r0, [pc, #16]	; (8000f7c <_GLOBAL__sub_I_sensors+0x14>)
 8000f6c:	f000 f8e6 	bl	800113c <_ZN10SensorDataC1Ev>
SbusController frkskyRC;
 8000f70:	4803      	ldr	r0, [pc, #12]	; (8000f80 <_GLOBAL__sub_I_sensors+0x18>)
}
 8000f72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
SbusController frkskyRC;
 8000f76:	f000 b835 	b.w	8000fe4 <_ZN14SbusControllerC1Ev>
 8000f7a:	bf00      	nop
 8000f7c:	24000430 	.word	0x24000430
 8000f80:	240003d0 	.word	0x240003d0

08000f84 <_GLOBAL__sub_D_sensors>:
 8000f84:	4801      	ldr	r0, [pc, #4]	; (8000f8c <_GLOBAL__sub_D_sensors+0x8>)
 8000f86:	f000 b82f 	b.w	8000fe8 <_ZN14SbusControllerD1Ev>
 8000f8a:	bf00      	nop
 8000f8c:	240003d0 	.word	0x240003d0

08000f90 <_Z8DWT_Initv>:



void DWT_Init(void)
{
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000f90:	4906      	ldr	r1, [pc, #24]	; (8000fac <_Z8DWT_Initv+0x1c>)
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000f92:	4a07      	ldr	r2, [pc, #28]	; (8000fb0 <_Z8DWT_Initv+0x20>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000f94:	f8d1 30fc 	ldr.w	r3, [r1, #252]	; 0xfc
 8000f98:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f9c:	f8c1 30fc 	str.w	r3, [r1, #252]	; 0xfc
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000fa0:	6813      	ldr	r3, [r2, #0]
 8000fa2:	f043 0301 	orr.w	r3, r3, #1
 8000fa6:	6013      	str	r3, [r2, #0]
}
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	e000ed00 	.word	0xe000ed00
 8000fb0:	e0001000 	.word	0xe0001000

08000fb4 <_Z8delay_usm>:

 void delay_us(uint32_t us)
{
  uint32_t us_count_tic =  us * (SystemCoreClock / 1000000U);
 8000fb4:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <_Z8delay_usm+0x24>)
  DWT->CYCCNT = 0U;
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	4a08      	ldr	r2, [pc, #32]	; (8000fdc <_Z8delay_usm+0x28>)
  uint32_t us_count_tic =  us * (SystemCoreClock / 1000000U);
 8000fba:	681b      	ldr	r3, [r3, #0]
{
 8000fbc:	b410      	push	{r4}
  uint32_t us_count_tic =  us * (SystemCoreClock / 1000000U);
 8000fbe:	4c08      	ldr	r4, [pc, #32]	; (8000fe0 <_Z8delay_usm+0x2c>)
  DWT->CYCCNT = 0U;
 8000fc0:	6051      	str	r1, [r2, #4]
  uint32_t us_count_tic =  us * (SystemCoreClock / 1000000U);
 8000fc2:	fba4 4303 	umull	r4, r3, r4, r3
 8000fc6:	0c9b      	lsrs	r3, r3, #18
 8000fc8:	fb03 f000 	mul.w	r0, r3, r0
  while(DWT->CYCCNT < us_count_tic);
 8000fcc:	6853      	ldr	r3, [r2, #4]
 8000fce:	4283      	cmp	r3, r0
 8000fd0:	d3fc      	bcc.n	8000fcc <_Z8delay_usm+0x18>
}
 8000fd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	24000000 	.word	0x24000000
 8000fdc:	e0001000 	.word	0xe0001000
 8000fe0:	431bde83 	.word	0x431bde83

08000fe4 <_ZN14SbusControllerC1Ev>:
#include <sbus.h>

SbusController::SbusController()
{

}
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop

08000fe8 <_ZN14SbusControllerD1Ev>:

SbusController::~SbusController()
{

}
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <_ZN14SbusController10UpdateSbusEPh>:

void SbusController::UpdateSbus(uint8_t *buf)
{
	sbus_channel.channel1 = (buf[1] >> 0 | (buf[2] << 8)) & 0x07FF;
 8000fec:	f8b1 3001 	ldrh.w	r3, [r1, #1]
	else
	{
	  channel_17 = 0;
	}
	// Failsafe
	failsafe_status = SBUS_SIGNAL_OK;
 8000ff0:	2200      	movs	r2, #0
	sbus_channel.channel1 = (buf[1] >> 0 | (buf[2] << 8)) & 0x07FF;
 8000ff2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000ff6:	8083      	strh	r3, [r0, #4]
	sbus_channel.channel2 = (buf[2] >> 3 | (buf[3] << 5)) & 0x07FF;
 8000ff8:	78cb      	ldrb	r3, [r1, #3]
 8000ffa:	f891 c002 	ldrb.w	ip, [r1, #2]
 8000ffe:	015b      	lsls	r3, r3, #5
 8001000:	ea43 03dc 	orr.w	r3, r3, ip, lsr #3
 8001004:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001008:	80c3      	strh	r3, [r0, #6]
	sbus_channel.channel3 = (buf[3] >> 6 | (buf[4] << 2) | buf[5] << 10) & 0x07FF;
 800100a:	794b      	ldrb	r3, [r1, #5]
 800100c:	f891 c004 	ldrb.w	ip, [r1, #4]
 8001010:	029b      	lsls	r3, r3, #10
 8001012:	ea43 038c 	orr.w	r3, r3, ip, lsl #2
 8001016:	f891 c003 	ldrb.w	ip, [r1, #3]
 800101a:	ea43 139c 	orr.w	r3, r3, ip, lsr #6
 800101e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001022:	8103      	strh	r3, [r0, #8]
	sbus_channel.channel4 = (buf[5] >> 1 | (buf[6] << 7)) & 0x07FF;
 8001024:	798b      	ldrb	r3, [r1, #6]
 8001026:	f891 c005 	ldrb.w	ip, [r1, #5]
 800102a:	01db      	lsls	r3, r3, #7
 800102c:	ea43 035c 	orr.w	r3, r3, ip, lsr #1
 8001030:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001034:	8143      	strh	r3, [r0, #10]
	sbus_channel.channel5 = (buf[6] >> 4 | (buf[7] << 4)) & 0x07FF;
 8001036:	79cb      	ldrb	r3, [r1, #7]
 8001038:	f891 c006 	ldrb.w	ip, [r1, #6]
 800103c:	011b      	lsls	r3, r3, #4
 800103e:	ea43 131c 	orr.w	r3, r3, ip, lsr #4
 8001042:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001046:	8183      	strh	r3, [r0, #12]
	sbus_channel.channel6 = (buf[7] >> 7 | (buf[8] << 1) | buf[9] << 9) & 0x07FF;
 8001048:	7a4b      	ldrb	r3, [r1, #9]
 800104a:	f891 c008 	ldrb.w	ip, [r1, #8]
 800104e:	025b      	lsls	r3, r3, #9
 8001050:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
 8001054:	f891 c007 	ldrb.w	ip, [r1, #7]
 8001058:	ea43 13dc 	orr.w	r3, r3, ip, lsr #7
 800105c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001060:	81c3      	strh	r3, [r0, #14]
	sbus_channel.channel7 = (buf[9] >> 2 | (buf[10] << 6)) & 0x07FF;
 8001062:	7a8b      	ldrb	r3, [r1, #10]
 8001064:	f891 c009 	ldrb.w	ip, [r1, #9]
 8001068:	019b      	lsls	r3, r3, #6
 800106a:	ea43 039c 	orr.w	r3, r3, ip, lsr #2
 800106e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001072:	8203      	strh	r3, [r0, #16]
	sbus_channel.channel8 = (buf[10] >> 5 | (buf[11] << 3)) & 0x07FF;
 8001074:	7acb      	ldrb	r3, [r1, #11]
 8001076:	f891 c00a 	ldrb.w	ip, [r1, #10]
 800107a:	00db      	lsls	r3, r3, #3
 800107c:	ea43 135c 	orr.w	r3, r3, ip, lsr #5
 8001080:	8243      	strh	r3, [r0, #18]
	sbus_channel.channel9 = (buf[12] << 0 | (buf[13] << 8)) & 0x07FF;
 8001082:	898b      	ldrh	r3, [r1, #12]
 8001084:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001088:	8283      	strh	r3, [r0, #20]
	sbus_channel.channel10 = (buf[13] >> 3 | (buf[14] << 5)) & 0x07FF;
 800108a:	7b8b      	ldrb	r3, [r1, #14]
 800108c:	f891 c00d 	ldrb.w	ip, [r1, #13]
 8001090:	015b      	lsls	r3, r3, #5
 8001092:	ea43 03dc 	orr.w	r3, r3, ip, lsr #3
 8001096:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800109a:	82c3      	strh	r3, [r0, #22]
	sbus_channel.channel11 = (buf[14] >> 6 | (buf[15] << 2) | buf[16] << 10) & 0x07FF;
 800109c:	7c0b      	ldrb	r3, [r1, #16]
 800109e:	f891 c00f 	ldrb.w	ip, [r1, #15]
 80010a2:	029b      	lsls	r3, r3, #10
 80010a4:	ea43 038c 	orr.w	r3, r3, ip, lsl #2
 80010a8:	f891 c00e 	ldrb.w	ip, [r1, #14]
 80010ac:	ea43 139c 	orr.w	r3, r3, ip, lsr #6
 80010b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010b4:	8303      	strh	r3, [r0, #24]
	sbus_channel.channel12 = (buf[16] >> 1 | (buf[17] << 7)) & 0x07FF;
 80010b6:	7c4b      	ldrb	r3, [r1, #17]
 80010b8:	f891 c010 	ldrb.w	ip, [r1, #16]
 80010bc:	01db      	lsls	r3, r3, #7
 80010be:	ea43 035c 	orr.w	r3, r3, ip, lsr #1
 80010c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010c6:	8343      	strh	r3, [r0, #26]
	sbus_channel.channel13 = (buf[17] >> 4 | (buf[18] << 4)) & 0x07FF;
 80010c8:	7c8b      	ldrb	r3, [r1, #18]
 80010ca:	f891 c011 	ldrb.w	ip, [r1, #17]
 80010ce:	011b      	lsls	r3, r3, #4
 80010d0:	ea43 131c 	orr.w	r3, r3, ip, lsr #4
 80010d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010d8:	8383      	strh	r3, [r0, #28]
	sbus_channel.channel14 = (buf[18] >> 7 | (buf[19] << 1) | buf[20] << 9) & 0x07FF;
 80010da:	7d0b      	ldrb	r3, [r1, #20]
 80010dc:	f891 c013 	ldrb.w	ip, [r1, #19]
 80010e0:	025b      	lsls	r3, r3, #9
 80010e2:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
 80010e6:	f891 c012 	ldrb.w	ip, [r1, #18]
 80010ea:	ea43 13dc 	orr.w	r3, r3, ip, lsr #7
 80010ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010f2:	83c3      	strh	r3, [r0, #30]
	sbus_channel.channel15 = (buf[20] >> 2 | (buf[21] << 6)) & 0x07FF;
 80010f4:	7d4b      	ldrb	r3, [r1, #21]
 80010f6:	f891 c014 	ldrb.w	ip, [r1, #20]
 80010fa:	019b      	lsls	r3, r3, #6
 80010fc:	ea43 039c 	orr.w	r3, r3, ip, lsr #2
 8001100:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001104:	8403      	strh	r3, [r0, #32]
	sbus_channel.channel16 = (buf[21] >> 5 | (buf[22] << 3)) & 0x07FF;
 8001106:	7d8b      	ldrb	r3, [r1, #22]
 8001108:	f891 c015 	ldrb.w	ip, [r1, #21]
 800110c:	00db      	lsls	r3, r3, #3
 800110e:	ea43 135c 	orr.w	r3, r3, ip, lsr #5
 8001112:	8443      	strh	r3, [r0, #34]	; 0x22
	if (buf[24] & (1 << 0))
 8001114:	7e0b      	ldrb	r3, [r1, #24]
 8001116:	f003 0301 	and.w	r3, r3, #1
 800111a:	8003      	strh	r3, [r0, #0]
	if (buf[24] & (1 << 1))
 800111c:	7e0b      	ldrb	r3, [r1, #24]
	failsafe_status = SBUS_SIGNAL_OK;
 800111e:	7082      	strb	r2, [r0, #2]
	if (buf[24] & (1 << 1))
 8001120:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001124:	8003      	strh	r3, [r0, #0]
	if (buf[24] & (1 << 2))
 8001126:	7e0b      	ldrb	r3, [r1, #24]
 8001128:	075a      	lsls	r2, r3, #29
 800112a:	d502      	bpl.n	8001132 <_ZN14SbusController10UpdateSbusEPh+0x146>
	{
	  failsafe_status = SBUS_SIGNAL_LOST;
 800112c:	2301      	movs	r3, #1
 800112e:	7083      	strb	r3, [r0, #2]
	}

	if (buf[24] & (1 << 3))
 8001130:	7e0b      	ldrb	r3, [r1, #24]
 8001132:	071b      	lsls	r3, r3, #28
 8001134:	d501      	bpl.n	800113a <_ZN14SbusController10UpdateSbusEPh+0x14e>
	{
	  failsafe_status = SBUS_SIGNAL_FAILSAFE;
 8001136:	2301      	movs	r3, #1
 8001138:	7083      	strb	r3, [r0, #2]
	}
}
 800113a:	4770      	bx	lr

0800113c <_ZN10SensorDataC1Ev>:





SensorData::SensorData()
 800113c:	490a      	ldr	r1, [pc, #40]	; (8001168 <_ZN10SensorDataC1Ev+0x2c>)
{

	accel_timer = 0;
 800113e:	2200      	movs	r2, #0
SensorData::SensorData()
 8001140:	b410      	push	{r4}
 8001142:	f04f 5460 	mov.w	r4, #939524096	; 0x38000000
	gyro_timer = 0;
	gps_timer = 0;
	mag_timer = 0;
	baro_timer = 0;
 8001146:	6742      	str	r2, [r0, #116]	; 0x74
SensorData::SensorData()
 8001148:	e9c0 4100 	strd	r4, r1, [r0]
 800114c:	3420      	adds	r4, #32
 800114e:	3120      	adds	r1, #32
 8001150:	e9c0 4102 	strd	r4, r1, [r0, #8]
 8001154:	3110      	adds	r1, #16

}
 8001156:	f85d 4b04 	ldr.w	r4, [sp], #4
	gyro_timer = 0;
 800115a:	e9c0 2219 	strd	r2, r2, [r0, #100]	; 0x64
	mag_timer = 0;
 800115e:	e9c0 221b 	strd	r2, r2, [r0, #108]	; 0x6c
SensorData::SensorData()
 8001162:	6101      	str	r1, [r0, #16]
}
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	38000010 	.word	0x38000010

0800116c <_ZN10SensorData11ReadRawDataEv>:

void SensorData::ReadRawData()
{
 800116c:	b538      	push	{r3, r4, r5, lr}
 800116e:	4604      	mov	r4, r0
	}
}

void SensorData::ReadAcc()
{
	if((HAL_GetTick() - accel_timer) >= ACC_UPDATE_RATE_MS)
 8001170:	f001 f8a4 	bl	80022bc <HAL_GetTick>
 8001174:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001176:	1ac0      	subs	r0, r0, r3
 8001178:	2809      	cmp	r0, #9
 800117a:	d872      	bhi.n	8001262 <_ZN10SensorData11ReadRawDataEv+0xf6>
	}
}

void SensorData::ReadGyro()
{
	if((HAL_GetTick() - gyro_timer) >= GYRO_UPDATE_RATE_MS)
 800117c:	f001 f89e 	bl	80022bc <HAL_GetTick>
 8001180:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8001182:	1ac0      	subs	r0, r0, r3
 8001184:	2809      	cmp	r0, #9
 8001186:	d858      	bhi.n	800123a <_ZN10SensorData11ReadRawDataEv+0xce>
	if((HAL_GetTick() - mag_timer) >= MAG_UPDATE_RATE_MS)
 8001188:	f001 f898 	bl	80022bc <HAL_GetTick>
 800118c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800118e:	1ac0      	subs	r0, r0, r3
 8001190:	2809      	cmp	r0, #9
 8001192:	d83e      	bhi.n	8001212 <_ZN10SensorData11ReadRawDataEv+0xa6>
	if((HAL_GetTick() - gps_timer) >= GPS_UPDATE_RATE_MS)
 8001194:	f001 f892 	bl	80022bc <HAL_GetTick>
 8001198:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800119a:	1ac0      	subs	r0, r0, r3
 800119c:	2863      	cmp	r0, #99	; 0x63
 800119e:	d818      	bhi.n	80011d2 <_ZN10SensorData11ReadRawDataEv+0x66>
}


void SensorData::ReadBaro()
{
	if((HAL_GetTick() - baro_timer) >= BARO_UPDATE_RATE_MS)
 80011a0:	f001 f88c 	bl	80022bc <HAL_GetTick>
 80011a4:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80011a6:	1ac0      	subs	r0, r0, r3
 80011a8:	2825      	cmp	r0, #37	; 0x25
 80011aa:	d800      	bhi.n	80011ae <_ZN10SensorData11ReadRawDataEv+0x42>
}
 80011ac:	bd38      	pop	{r3, r4, r5, pc}
	{
		baro_notify = 0;
 80011ae:	4d37      	ldr	r5, [pc, #220]	; (800128c <_ZN10SensorData11ReadRawDataEv+0x120>)
 80011b0:	2300      	movs	r3, #0
		HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_BARO));
 80011b2:	2010      	movs	r0, #16
		baro_notify = 0;
 80011b4:	602b      	str	r3, [r5, #0]
		HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_BARO));
 80011b6:	f004 faa5 	bl	8005704 <HAL_HSEM_ActivateNotification>
		while(baro_notify == 0){}
 80011ba:	682b      	ldr	r3, [r5, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d0fc      	beq.n	80011ba <_ZN10SensorData11ReadRawDataEv+0x4e>
		baro_values.baro_altitude = baro_values_m7->baro_altitude;
 80011c0:	68e3      	ldr	r3, [r4, #12]
 80011c2:	685a      	ldr	r2, [r3, #4]
		baro_values.baro_pressure = baro_values_m7->baro_pressure;
 80011c4:	681b      	ldr	r3, [r3, #0]
		baro_values.baro_altitude = baro_values_m7->baro_altitude;
 80011c6:	6562      	str	r2, [r4, #84]	; 0x54
		baro_values.baro_pressure = baro_values_m7->baro_pressure;
 80011c8:	6523      	str	r3, [r4, #80]	; 0x50
		baro_timer = HAL_GetTick();
 80011ca:	f001 f877 	bl	80022bc <HAL_GetTick>
 80011ce:	6760      	str	r0, [r4, #116]	; 0x74
}
 80011d0:	bd38      	pop	{r3, r4, r5, pc}
		gps_notify = 0;
 80011d2:	4d2f      	ldr	r5, [pc, #188]	; (8001290 <_ZN10SensorData11ReadRawDataEv+0x124>)
 80011d4:	2300      	movs	r3, #0
		HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_GPS));
 80011d6:	2020      	movs	r0, #32
		gps_notify = 0;
 80011d8:	602b      	str	r3, [r5, #0]
		HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_GPS));
 80011da:	f004 fa93 	bl	8005704 <HAL_HSEM_ActivateNotification>
		while(gps_notify == 0){}
 80011de:	682b      	ldr	r3, [r5, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d0fc      	beq.n	80011de <_ZN10SensorData11ReadRawDataEv+0x72>
		gps_values.gps_latitude = gps_values_m7->gps_latitude;
 80011e4:	6923      	ldr	r3, [r4, #16]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	6162      	str	r2, [r4, #20]
		gps_values.gps_longitude = gps_values_m7->gps_longitude;
 80011ea:	685a      	ldr	r2, [r3, #4]
 80011ec:	61a2      	str	r2, [r4, #24]
		gps_values.gps_altitude = gps_values_m7->gps_altitude;
 80011ee:	689a      	ldr	r2, [r3, #8]
 80011f0:	61e2      	str	r2, [r4, #28]
		gps_values.gps_velocity_x = gps_values_m7->gps_velocity_x;
 80011f2:	68da      	ldr	r2, [r3, #12]
 80011f4:	6222      	str	r2, [r4, #32]
		gps_values.gps_velocity_y = gps_values_m7->gps_velocity_y;
 80011f6:	691a      	ldr	r2, [r3, #16]
 80011f8:	6262      	str	r2, [r4, #36]	; 0x24
		gps_values.gps_velocity_z = gps_values_m7->gps_velocity_z;
 80011fa:	695a      	ldr	r2, [r3, #20]
 80011fc:	62a2      	str	r2, [r4, #40]	; 0x28
		gps_values.gps_satellites = gps_values_m7->gps_satellites;
 80011fe:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8001202:	f884 2036 	strb.w	r2, [r4, #54]	; 0x36
		gps_values.iTOW = gps_values_m7->iTOW;
 8001206:	69da      	ldr	r2, [r3, #28]
 8001208:	6322      	str	r2, [r4, #48]	; 0x30
		gps_values.magDec = gps_values_m7->magDec;
 800120a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800120e:	86a3      	strh	r3, [r4, #52]	; 0x34
}
 8001210:	e7c6      	b.n	80011a0 <_ZN10SensorData11ReadRawDataEv+0x34>
		mag_notify = 0;
 8001212:	4d20      	ldr	r5, [pc, #128]	; (8001294 <_ZN10SensorData11ReadRawDataEv+0x128>)
 8001214:	2300      	movs	r3, #0
		HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_MAG));
 8001216:	2008      	movs	r0, #8
		mag_notify = 0;
 8001218:	602b      	str	r3, [r5, #0]
		HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_MAG));
 800121a:	f004 fa73 	bl	8005704 <HAL_HSEM_ActivateNotification>
		while(mag_notify == 0){}
 800121e:	682b      	ldr	r3, [r5, #0]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d0fc      	beq.n	800121e <_ZN10SensorData11ReadRawDataEv+0xb2>
		mag_values.x = mag_values_m7->x;
 8001224:	68a3      	ldr	r3, [r4, #8]
 8001226:	6819      	ldr	r1, [r3, #0]
		mag_values.y = mag_values_m7->y;
 8001228:	685a      	ldr	r2, [r3, #4]
		mag_values.z = mag_values_m7->z;
 800122a:	689b      	ldr	r3, [r3, #8]
		mag_values.x = mag_values_m7->x;
 800122c:	65a1      	str	r1, [r4, #88]	; 0x58
		mag_values.y = mag_values_m7->y;
 800122e:	65e2      	str	r2, [r4, #92]	; 0x5c
		mag_values.z = mag_values_m7->z;
 8001230:	6623      	str	r3, [r4, #96]	; 0x60
		mag_timer = HAL_GetTick();
 8001232:	f001 f843 	bl	80022bc <HAL_GetTick>
 8001236:	66e0      	str	r0, [r4, #108]	; 0x6c
}
 8001238:	e7ac      	b.n	8001194 <_ZN10SensorData11ReadRawDataEv+0x28>
		gyro_notify = 0;
 800123a:	4d17      	ldr	r5, [pc, #92]	; (8001298 <_ZN10SensorData11ReadRawDataEv+0x12c>)
 800123c:	2300      	movs	r3, #0
		HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_GYRO));
 800123e:	2004      	movs	r0, #4
		gyro_notify = 0;
 8001240:	602b      	str	r3, [r5, #0]
		HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_GYRO));
 8001242:	f004 fa5f 	bl	8005704 <HAL_HSEM_ActivateNotification>
		while(gyro_notify == 0){}
 8001246:	682b      	ldr	r3, [r5, #0]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d0fc      	beq.n	8001246 <_ZN10SensorData11ReadRawDataEv+0xda>
		gyro_values.x = gyro_values_m7->x;
 800124c:	6863      	ldr	r3, [r4, #4]
 800124e:	6819      	ldr	r1, [r3, #0]
		gyro_values.y = gyro_values_m7->y;
 8001250:	685a      	ldr	r2, [r3, #4]
		gyro_values.z = gyro_values_m7->z;
 8001252:	689b      	ldr	r3, [r3, #8]
		gyro_values.x = gyro_values_m7->x;
 8001254:	6461      	str	r1, [r4, #68]	; 0x44
		gyro_values.y = gyro_values_m7->y;
 8001256:	64a2      	str	r2, [r4, #72]	; 0x48
		gyro_values.z = gyro_values_m7->z;
 8001258:	64e3      	str	r3, [r4, #76]	; 0x4c
		gyro_timer = HAL_GetTick();
 800125a:	f001 f82f 	bl	80022bc <HAL_GetTick>
 800125e:	66a0      	str	r0, [r4, #104]	; 0x68
}
 8001260:	e792      	b.n	8001188 <_ZN10SensorData11ReadRawDataEv+0x1c>
		acc_notify = 0;
 8001262:	4d0e      	ldr	r5, [pc, #56]	; (800129c <_ZN10SensorData11ReadRawDataEv+0x130>)
 8001264:	2300      	movs	r3, #0
		HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ACC));
 8001266:	2002      	movs	r0, #2
		acc_notify = 0;
 8001268:	602b      	str	r3, [r5, #0]
		HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ACC));
 800126a:	f004 fa4b 	bl	8005704 <HAL_HSEM_ActivateNotification>
		while(acc_notify == 0){}
 800126e:	682b      	ldr	r3, [r5, #0]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d0fc      	beq.n	800126e <_ZN10SensorData11ReadRawDataEv+0x102>
		acc_values.x = acc_values_m7->x;
 8001274:	6823      	ldr	r3, [r4, #0]
 8001276:	6819      	ldr	r1, [r3, #0]
		acc_values.y = acc_values_m7->y;
 8001278:	685a      	ldr	r2, [r3, #4]
		acc_values.z = acc_values_m7->z;
 800127a:	689b      	ldr	r3, [r3, #8]
		acc_values.x = acc_values_m7->x;
 800127c:	63a1      	str	r1, [r4, #56]	; 0x38
		acc_values.y = acc_values_m7->y;
 800127e:	63e2      	str	r2, [r4, #60]	; 0x3c
		acc_values.z = acc_values_m7->z;
 8001280:	6423      	str	r3, [r4, #64]	; 0x40
		accel_timer = HAL_GetTick();
 8001282:	f001 f81b 	bl	80022bc <HAL_GetTick>
 8001286:	6660      	str	r0, [r4, #100]	; 0x64
}
 8001288:	e778      	b.n	800117c <_ZN10SensorData11ReadRawDataEv+0x10>
 800128a:	bf00      	nop
 800128c:	2400052c 	.word	0x2400052c
 8001290:	24000530 	.word	0x24000530
 8001294:	24000538 	.word	0x24000538
 8001298:	24000534 	.word	0x24000534
 800129c:	24000528 	.word	0x24000528

080012a0 <_ZN10SensorData10GetAccDataEv>:
}



accelData SensorData::GetAccData()
{
 80012a0:	b088      	sub	sp, #32
	return acc_values;
 80012a2:	3038      	adds	r0, #56	; 0x38
 80012a4:	ab08      	add	r3, sp, #32
 80012a6:	c807      	ldmia	r0, {r0, r1, r2}
 80012a8:	e903 0007 	stmdb	r3, {r0, r1, r2}
}
 80012ac:	eddd 0a06 	vldr	s1, [sp, #24]
 80012b0:	ed9d 1a07 	vldr	s2, [sp, #28]
 80012b4:	ed9d 0a05 	vldr	s0, [sp, #20]
 80012b8:	b008      	add	sp, #32
 80012ba:	4770      	bx	lr

080012bc <_ZN10SensorData11GetGyroDataEv>:
gyroData SensorData::GetGyroData()
{
 80012bc:	b088      	sub	sp, #32
	return gyro_values;
 80012be:	3044      	adds	r0, #68	; 0x44
 80012c0:	ab08      	add	r3, sp, #32
 80012c2:	c807      	ldmia	r0, {r0, r1, r2}
 80012c4:	e903 0007 	stmdb	r3, {r0, r1, r2}
}
 80012c8:	eddd 0a06 	vldr	s1, [sp, #24]
 80012cc:	ed9d 1a07 	vldr	s2, [sp, #28]
 80012d0:	ed9d 0a05 	vldr	s0, [sp, #20]
 80012d4:	b008      	add	sp, #32
 80012d6:	4770      	bx	lr

080012d8 <_ZN10SensorData10GetMagDataEv>:
magData  SensorData::GetMagData()
{
 80012d8:	b088      	sub	sp, #32
	return mag_values;
 80012da:	3058      	adds	r0, #88	; 0x58
 80012dc:	ab08      	add	r3, sp, #32
 80012de:	c807      	ldmia	r0, {r0, r1, r2}
 80012e0:	e903 0007 	stmdb	r3, {r0, r1, r2}
}
 80012e4:	eddd 0a06 	vldr	s1, [sp, #24]
 80012e8:	ed9d 1a07 	vldr	s2, [sp, #28]
 80012ec:	ed9d 0a05 	vldr	s0, [sp, #20]
 80012f0:	b008      	add	sp, #32
 80012f2:	4770      	bx	lr

080012f4 <_ZN10SensorData11GetBaroDataEv>:
baroData SensorData::GetBaroData()
{
 80012f4:	b084      	sub	sp, #16
	return baro_values;
 80012f6:	3050      	adds	r0, #80	; 0x50
 80012f8:	ab04      	add	r3, sp, #16
 80012fa:	c803      	ldmia	r0, {r0, r1}
 80012fc:	e903 0003 	stmdb	r3, {r0, r1}
}
 8001300:	eddd 0a03 	vldr	s1, [sp, #12]
 8001304:	ed9d 0a02 	vldr	s0, [sp, #8]
 8001308:	b004      	add	sp, #16
 800130a:	4770      	bx	lr

0800130c <_ZN10SensorData10GetGpsDataEv>:
gpsData SensorData::GetGpsData()
{
 800130c:	b570      	push	{r4, r5, r6, lr}
	return gps_values;
 800130e:	4684      	mov	ip, r0
{
 8001310:	4606      	mov	r6, r0
	return gps_values;
 8001312:	f101 0514 	add.w	r5, r1, #20
 8001316:	f101 0434 	add.w	r4, r1, #52	; 0x34
 800131a:	46ae      	mov	lr, r5
 800131c:	f10c 0c10 	add.w	ip, ip, #16
 8001320:	3510      	adds	r5, #16
 8001322:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8001326:	45a6      	cmp	lr, r4
 8001328:	f84c 0c10 	str.w	r0, [ip, #-16]
 800132c:	f84c 1c0c 	str.w	r1, [ip, #-12]
 8001330:	f84c 2c08 	str.w	r2, [ip, #-8]
 8001334:	f84c 3c04 	str.w	r3, [ip, #-4]
 8001338:	d1ef      	bne.n	800131a <_ZN10SensorData10GetGpsDataEv+0xe>
 800133a:	882a      	ldrh	r2, [r5, #0]
}
 800133c:	4630      	mov	r0, r6
	return gps_values;
 800133e:	78ab      	ldrb	r3, [r5, #2]
 8001340:	f8ac 2000 	strh.w	r2, [ip]
 8001344:	f88c 3002 	strb.w	r3, [ip, #2]
}
 8001348:	bd70      	pop	{r4, r5, r6, pc}
 800134a:	bf00      	nop

0800134c <HAL_HSEM_FreeCallback>:
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
	if(SemMask == SEM_MASK_ACC)
 800134c:	2802      	cmp	r0, #2
 800134e:	d00b      	beq.n	8001368 <HAL_HSEM_FreeCallback+0x1c>
	{
		acc_notify = 1;
	}
	if(SemMask == SEM_MASK_GYRO)
 8001350:	2804      	cmp	r0, #4
 8001352:	d103      	bne.n	800135c <HAL_HSEM_FreeCallback+0x10>
	{
		gyro_notify = 1;
 8001354:	4b0d      	ldr	r3, [pc, #52]	; (800138c <HAL_HSEM_FreeCallback+0x40>)
 8001356:	2201      	movs	r2, #1
 8001358:	601a      	str	r2, [r3, #0]
	}
	if(SemMask == SEM_MASK_BARO)
	{
		baro_notify = 1;
	}
	if(SemMask == SEM_MASK_GPS)
 800135a:	4770      	bx	lr
	if(SemMask == SEM_MASK_MAG)
 800135c:	2808      	cmp	r0, #8
 800135e:	d107      	bne.n	8001370 <HAL_HSEM_FreeCallback+0x24>
		mag_notify = 1;
 8001360:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <HAL_HSEM_FreeCallback+0x44>)
 8001362:	2201      	movs	r2, #1
 8001364:	601a      	str	r2, [r3, #0]
	if(SemMask == SEM_MASK_GPS)
 8001366:	4770      	bx	lr
		acc_notify = 1;
 8001368:	4b0a      	ldr	r3, [pc, #40]	; (8001394 <HAL_HSEM_FreeCallback+0x48>)
 800136a:	2201      	movs	r2, #1
 800136c:	601a      	str	r2, [r3, #0]
	if(SemMask == SEM_MASK_GPS)
 800136e:	4770      	bx	lr
	if(SemMask == SEM_MASK_BARO)
 8001370:	2810      	cmp	r0, #16
 8001372:	d103      	bne.n	800137c <HAL_HSEM_FreeCallback+0x30>
		baro_notify = 1;
 8001374:	4b08      	ldr	r3, [pc, #32]	; (8001398 <HAL_HSEM_FreeCallback+0x4c>)
 8001376:	2201      	movs	r2, #1
 8001378:	601a      	str	r2, [r3, #0]
	if(SemMask == SEM_MASK_GPS)
 800137a:	4770      	bx	lr
 800137c:	2820      	cmp	r0, #32
 800137e:	d103      	bne.n	8001388 <HAL_HSEM_FreeCallback+0x3c>
	{
		gps_notify = 1;
 8001380:	4b06      	ldr	r3, [pc, #24]	; (800139c <HAL_HSEM_FreeCallback+0x50>)
 8001382:	2201      	movs	r2, #1
 8001384:	601a      	str	r2, [r3, #0]
	}
}
 8001386:	4770      	bx	lr
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	24000534 	.word	0x24000534
 8001390:	24000538 	.word	0x24000538
 8001394:	24000528 	.word	0x24000528
 8001398:	2400052c 	.word	0x2400052c
 800139c:	24000530 	.word	0x24000530

080013a0 <_ZN10SerializerC1Ev>:
		usb_timer(0),
		acc_timer(0),
		gyro_timer(0),
		gps_timer(0),
		mag_timer(0),
		baro_timer(0)
 80013a0:	2200      	movs	r2, #0
 80013a2:	e9c0 2200 	strd	r2, r2, [r0]
 80013a6:	e9c0 2202 	strd	r2, r2, [r0, #8]
 80013aa:	e9c0 2204 	strd	r2, r2, [r0, #16]
{

}
 80013ae:	4770      	bx	lr

080013b0 <_ZN10Serializer8SendDataERK8gyroData>:
//{
//	return 0;
//}

void Serializer::SendData(const gyroData& data)
{
 80013b0:	b410      	push	{r4}
 80013b2:	460a      	mov	r2, r1
 80013b4:	b085      	sub	sp, #20
 80013b6:	4603      	mov	r3, r0
	 uint8_t frame[sizeof(data)];
	 std::memcpy(frame, (uint8_t*)&data, sizeof(data));
 80013b8:	6808      	ldr	r0, [r1, #0]
 80013ba:	6892      	ldr	r2, [r2, #8]
 80013bc:	ac01      	add	r4, sp, #4
 80013be:	6849      	ldr	r1, [r1, #4]
	std::memcpy(m_data_packet.data, &data[0], len);
 80013c0:	f10d 0c04 	add.w	ip, sp, #4
	 std::memcpy(frame, (uint8_t*)&data, sizeof(data));
 80013c4:	c407      	stmia	r4!, {r0, r1, r2}
	m_data_packet.preamble[0] = UART_PREAMBLE_1;
 80013c6:	4a23      	ldr	r2, [pc, #140]	; (8001454 <_ZN10Serializer8SendDataERK8gyroData+0xa4>)
        crc8 = crc_table[crc8 ^ data[i]];
 80013c8:	4c23      	ldr	r4, [pc, #140]	; (8001458 <_ZN10Serializer8SendDataERK8gyroData+0xa8>)
	m_data_packet.preamble[0] = UART_PREAMBLE_1;
 80013ca:	619a      	str	r2, [r3, #24]
	std::memcpy(m_data_packet.data, &data[0], len);
 80013cc:	e8bc 0007 	ldmia.w	ip!, {r0, r1, r2}
 80013d0:	61d8      	str	r0, [r3, #28]
        crc8 = crc_table[crc8 ^ data[i]];
 80013d2:	7f18      	ldrb	r0, [r3, #28]
	std::memcpy(m_data_packet.data, &data[0], len);
 80013d4:	6219      	str	r1, [r3, #32]
        crc8 = crc_table[crc8 ^ data[i]];
 80013d6:	f080 005c 	eor.w	r0, r0, #92	; 0x5c
	std::memcpy(m_data_packet.data, &data[0], len);
 80013da:	625a      	str	r2, [r3, #36]	; 0x24
        crc8 = crc_table[crc8 ^ data[i]];
 80013dc:	7f59      	ldrb	r1, [r3, #29]
 80013de:	5c22      	ldrb	r2, [r4, r0]
 80013e0:	f893 c01e 	ldrb.w	ip, [r3, #30]
 80013e4:	404a      	eors	r2, r1
 80013e6:	7fd8      	ldrb	r0, [r3, #31]
 80013e8:	5ca1      	ldrb	r1, [r4, r2]
 80013ea:	ea81 010c 	eor.w	r1, r1, ip
 80013ee:	f893 c020 	ldrb.w	ip, [r3, #32]
 80013f2:	5c62      	ldrb	r2, [r4, r1]
 80013f4:	f893 1021 	ldrb.w	r1, [r3, #33]	; 0x21
 80013f8:	4042      	eors	r2, r0
 80013fa:	5ca0      	ldrb	r0, [r4, r2]
 80013fc:	ea80 000c 	eor.w	r0, r0, ip
 8001400:	f893 c022 	ldrb.w	ip, [r3, #34]	; 0x22
 8001404:	5c22      	ldrb	r2, [r4, r0]
 8001406:	f893 0023 	ldrb.w	r0, [r3, #35]	; 0x23
 800140a:	404a      	eors	r2, r1
 800140c:	5ca1      	ldrb	r1, [r4, r2]
 800140e:	ea81 010c 	eor.w	r1, r1, ip
 8001412:	f893 c024 	ldrb.w	ip, [r3, #36]	; 0x24
 8001416:	5c62      	ldrb	r2, [r4, r1]
	CDC_Transmit_FS((uint8_t*)&m_data_packet, sizeof(m_data_packet));
 8001418:	2129      	movs	r1, #41	; 0x29
        crc8 = crc_table[crc8 ^ data[i]];
 800141a:	4042      	eors	r2, r0
 800141c:	5ca0      	ldrb	r0, [r4, r2]
 800141e:	ea80 000c 	eor.w	r0, r0, ip
 8001422:	f893 c025 	ldrb.w	ip, [r3, #37]	; 0x25
 8001426:	5c22      	ldrb	r2, [r4, r0]
 8001428:	ea82 020c 	eor.w	r2, r2, ip
 800142c:	f893 c027 	ldrb.w	ip, [r3, #39]	; 0x27
 8001430:	5ca0      	ldrb	r0, [r4, r2]
 8001432:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8001436:	4050      	eors	r0, r2
 8001438:	5c22      	ldrb	r2, [r4, r0]
	CDC_Transmit_FS((uint8_t*)&m_data_packet, sizeof(m_data_packet));
 800143a:	f103 0018 	add.w	r0, r3, #24
        crc8 = crc_table[crc8 ^ data[i]];
 800143e:	ea82 020c 	eor.w	r2, r2, ip
	m_data_packet.crc = crc_val;
 8001442:	5ca2      	ldrb	r2, [r4, r2]
 8001444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	 SendDataPacket(sensor_cmd_code_t::SENSOR_COMMAND_GYRO, frame, sizeof(frame)/sizeof(frame[0]));
}
 8001448:	b005      	add	sp, #20
 800144a:	f85d 4b04 	ldr.w	r4, [sp], #4
	CDC_Transmit_FS((uint8_t*)&m_data_packet, sizeof(m_data_packet));
 800144e:	f00f ba61 	b.w	8010914 <CDC_Transmit_FS>
 8001452:	bf00      	nop
 8001454:	0c207f7e 	.word	0x0c207f7e
 8001458:	08013ba0 	.word	0x08013ba0

0800145c <_ZN10Serializer8SendDataERK7magData>:

void Serializer::SendData(const magData& data)
{
 800145c:	b410      	push	{r4}
 800145e:	460a      	mov	r2, r1
 8001460:	b085      	sub	sp, #20
 8001462:	4603      	mov	r3, r0
      uint8_t frame[sizeof(data)];
      std::memcpy(frame, (uint8_t*)&data, sizeof(data));
 8001464:	6808      	ldr	r0, [r1, #0]
 8001466:	6892      	ldr	r2, [r2, #8]
 8001468:	ac01      	add	r4, sp, #4
 800146a:	6849      	ldr	r1, [r1, #4]
	std::memcpy(m_data_packet.data, &data[0], len);
 800146c:	f10d 0c04 	add.w	ip, sp, #4
      std::memcpy(frame, (uint8_t*)&data, sizeof(data));
 8001470:	c407      	stmia	r4!, {r0, r1, r2}
	m_data_packet.preamble[0] = UART_PREAMBLE_1;
 8001472:	4a23      	ldr	r2, [pc, #140]	; (8001500 <_ZN10Serializer8SendDataERK7magData+0xa4>)
        crc8 = crc_table[crc8 ^ data[i]];
 8001474:	4c23      	ldr	r4, [pc, #140]	; (8001504 <_ZN10Serializer8SendDataERK7magData+0xa8>)
	m_data_packet.preamble[0] = UART_PREAMBLE_1;
 8001476:	619a      	str	r2, [r3, #24]
	std::memcpy(m_data_packet.data, &data[0], len);
 8001478:	e8bc 0007 	ldmia.w	ip!, {r0, r1, r2}
 800147c:	61d8      	str	r0, [r3, #28]
        crc8 = crc_table[crc8 ^ data[i]];
 800147e:	7f18      	ldrb	r0, [r3, #28]
	std::memcpy(m_data_packet.data, &data[0], len);
 8001480:	6219      	str	r1, [r3, #32]
        crc8 = crc_table[crc8 ^ data[i]];
 8001482:	f080 0008 	eor.w	r0, r0, #8
	std::memcpy(m_data_packet.data, &data[0], len);
 8001486:	625a      	str	r2, [r3, #36]	; 0x24
        crc8 = crc_table[crc8 ^ data[i]];
 8001488:	7f59      	ldrb	r1, [r3, #29]
 800148a:	5c22      	ldrb	r2, [r4, r0]
 800148c:	f893 c01e 	ldrb.w	ip, [r3, #30]
 8001490:	404a      	eors	r2, r1
 8001492:	7fd8      	ldrb	r0, [r3, #31]
 8001494:	5ca1      	ldrb	r1, [r4, r2]
 8001496:	ea81 010c 	eor.w	r1, r1, ip
 800149a:	f893 c020 	ldrb.w	ip, [r3, #32]
 800149e:	5c62      	ldrb	r2, [r4, r1]
 80014a0:	f893 1021 	ldrb.w	r1, [r3, #33]	; 0x21
 80014a4:	4042      	eors	r2, r0
 80014a6:	5ca0      	ldrb	r0, [r4, r2]
 80014a8:	ea80 000c 	eor.w	r0, r0, ip
 80014ac:	f893 c022 	ldrb.w	ip, [r3, #34]	; 0x22
 80014b0:	5c22      	ldrb	r2, [r4, r0]
 80014b2:	f893 0023 	ldrb.w	r0, [r3, #35]	; 0x23
 80014b6:	404a      	eors	r2, r1
 80014b8:	5ca1      	ldrb	r1, [r4, r2]
 80014ba:	ea81 010c 	eor.w	r1, r1, ip
 80014be:	f893 c024 	ldrb.w	ip, [r3, #36]	; 0x24
 80014c2:	5c62      	ldrb	r2, [r4, r1]
	CDC_Transmit_FS((uint8_t*)&m_data_packet, sizeof(m_data_packet));
 80014c4:	2129      	movs	r1, #41	; 0x29
        crc8 = crc_table[crc8 ^ data[i]];
 80014c6:	4042      	eors	r2, r0
 80014c8:	5ca0      	ldrb	r0, [r4, r2]
 80014ca:	ea80 000c 	eor.w	r0, r0, ip
 80014ce:	f893 c025 	ldrb.w	ip, [r3, #37]	; 0x25
 80014d2:	5c22      	ldrb	r2, [r4, r0]
 80014d4:	ea82 020c 	eor.w	r2, r2, ip
 80014d8:	f893 c027 	ldrb.w	ip, [r3, #39]	; 0x27
 80014dc:	5ca0      	ldrb	r0, [r4, r2]
 80014de:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 80014e2:	4050      	eors	r0, r2
 80014e4:	5c22      	ldrb	r2, [r4, r0]
	CDC_Transmit_FS((uint8_t*)&m_data_packet, sizeof(m_data_packet));
 80014e6:	f103 0018 	add.w	r0, r3, #24
        crc8 = crc_table[crc8 ^ data[i]];
 80014ea:	ea82 020c 	eor.w	r2, r2, ip
	m_data_packet.crc = crc_val;
 80014ee:	5ca2      	ldrb	r2, [r4, r2]
 80014f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      SendDataPacket(sensor_cmd_code_t::SENSOR_COMMAND_MAG, frame, sizeof(frame)/sizeof(frame[0]));
}
 80014f4:	b005      	add	sp, #20
 80014f6:	f85d 4b04 	ldr.w	r4, [sp], #4
	CDC_Transmit_FS((uint8_t*)&m_data_packet, sizeof(m_data_packet));
 80014fa:	f00f ba0b 	b.w	8010914 <CDC_Transmit_FS>
 80014fe:	bf00      	nop
 8001500:	0c247f7e 	.word	0x0c247f7e
 8001504:	08013ba0 	.word	0x08013ba0

08001508 <_ZN10Serializer8SendDataERK9accelData>:

void Serializer::SendData(const accelData& data)
{
 8001508:	b410      	push	{r4}
 800150a:	460a      	mov	r2, r1
 800150c:	b085      	sub	sp, #20
 800150e:	4603      	mov	r3, r0
	  uint8_t frame[sizeof(data)];
	  std::memcpy(frame, (uint8_t*)&data, sizeof(data));
 8001510:	6808      	ldr	r0, [r1, #0]
 8001512:	6892      	ldr	r2, [r2, #8]
 8001514:	ac01      	add	r4, sp, #4
 8001516:	6849      	ldr	r1, [r1, #4]
	std::memcpy(m_data_packet.data, &data[0], len);
 8001518:	f10d 0c04 	add.w	ip, sp, #4
	  std::memcpy(frame, (uint8_t*)&data, sizeof(data));
 800151c:	c407      	stmia	r4!, {r0, r1, r2}
	m_data_packet.preamble[0] = UART_PREAMBLE_1;
 800151e:	4a23      	ldr	r2, [pc, #140]	; (80015ac <_ZN10Serializer8SendDataERK9accelData+0xa4>)
        crc8 = crc_table[crc8 ^ data[i]];
 8001520:	4c23      	ldr	r4, [pc, #140]	; (80015b0 <_ZN10Serializer8SendDataERK9accelData+0xa8>)
	m_data_packet.preamble[0] = UART_PREAMBLE_1;
 8001522:	619a      	str	r2, [r3, #24]
	std::memcpy(m_data_packet.data, &data[0], len);
 8001524:	e8bc 0007 	ldmia.w	ip!, {r0, r1, r2}
 8001528:	61d8      	str	r0, [r3, #28]
        crc8 = crc_table[crc8 ^ data[i]];
 800152a:	7f18      	ldrb	r0, [r3, #28]
	std::memcpy(m_data_packet.data, &data[0], len);
 800152c:	6219      	str	r1, [r3, #32]
        crc8 = crc_table[crc8 ^ data[i]];
 800152e:	f080 0049 	eor.w	r0, r0, #73	; 0x49
	std::memcpy(m_data_packet.data, &data[0], len);
 8001532:	625a      	str	r2, [r3, #36]	; 0x24
        crc8 = crc_table[crc8 ^ data[i]];
 8001534:	7f59      	ldrb	r1, [r3, #29]
 8001536:	5c22      	ldrb	r2, [r4, r0]
 8001538:	f893 c01e 	ldrb.w	ip, [r3, #30]
 800153c:	404a      	eors	r2, r1
 800153e:	7fd8      	ldrb	r0, [r3, #31]
 8001540:	5ca1      	ldrb	r1, [r4, r2]
 8001542:	ea81 010c 	eor.w	r1, r1, ip
 8001546:	f893 c020 	ldrb.w	ip, [r3, #32]
 800154a:	5c62      	ldrb	r2, [r4, r1]
 800154c:	f893 1021 	ldrb.w	r1, [r3, #33]	; 0x21
 8001550:	4042      	eors	r2, r0
 8001552:	5ca0      	ldrb	r0, [r4, r2]
 8001554:	ea80 000c 	eor.w	r0, r0, ip
 8001558:	f893 c022 	ldrb.w	ip, [r3, #34]	; 0x22
 800155c:	5c22      	ldrb	r2, [r4, r0]
 800155e:	f893 0023 	ldrb.w	r0, [r3, #35]	; 0x23
 8001562:	404a      	eors	r2, r1
 8001564:	5ca1      	ldrb	r1, [r4, r2]
 8001566:	ea81 010c 	eor.w	r1, r1, ip
 800156a:	f893 c024 	ldrb.w	ip, [r3, #36]	; 0x24
 800156e:	5c62      	ldrb	r2, [r4, r1]
	CDC_Transmit_FS((uint8_t*)&m_data_packet, sizeof(m_data_packet));
 8001570:	2129      	movs	r1, #41	; 0x29
        crc8 = crc_table[crc8 ^ data[i]];
 8001572:	4042      	eors	r2, r0
 8001574:	5ca0      	ldrb	r0, [r4, r2]
 8001576:	ea80 000c 	eor.w	r0, r0, ip
 800157a:	f893 c025 	ldrb.w	ip, [r3, #37]	; 0x25
 800157e:	5c22      	ldrb	r2, [r4, r0]
 8001580:	ea82 020c 	eor.w	r2, r2, ip
 8001584:	f893 c027 	ldrb.w	ip, [r3, #39]	; 0x27
 8001588:	5ca0      	ldrb	r0, [r4, r2]
 800158a:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800158e:	4050      	eors	r0, r2
 8001590:	5c22      	ldrb	r2, [r4, r0]
	CDC_Transmit_FS((uint8_t*)&m_data_packet, sizeof(m_data_packet));
 8001592:	f103 0018 	add.w	r0, r3, #24
        crc8 = crc_table[crc8 ^ data[i]];
 8001596:	ea82 020c 	eor.w	r2, r2, ip
	m_data_packet.crc = crc_val;
 800159a:	5ca2      	ldrb	r2, [r4, r2]
 800159c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	  SendDataPacket(sensor_cmd_code_t::SENSOR_COMMAND_ACC, frame, sizeof(frame)/sizeof(frame[0]));

}
 80015a0:	b005      	add	sp, #20
 80015a2:	f85d 4b04 	ldr.w	r4, [sp], #4
	CDC_Transmit_FS((uint8_t*)&m_data_packet, sizeof(m_data_packet));
 80015a6:	f00f b9b5 	b.w	8010914 <CDC_Transmit_FS>
 80015aa:	bf00      	nop
 80015ac:	0c217f7e 	.word	0x0c217f7e
 80015b0:	08013ba0 	.word	0x08013ba0

080015b4 <_ZN10Serializer8SendDataERK8baroData>:

void Serializer::SendData(const baroData& data)
{
 80015b4:	b530      	push	{r4, r5, lr}
 80015b6:	b083      	sub	sp, #12
 80015b8:	4604      	mov	r4, r0
	  uint8_t frame[sizeof(data)];
	  std::memcpy(frame, (uint8_t*)&data, sizeof(data));
 80015ba:	6808      	ldr	r0, [r1, #0]
 80015bc:	466b      	mov	r3, sp
 80015be:	6849      	ldr	r1, [r1, #4]
	std::memcpy(m_data_packet.data, &data[0], len);
 80015c0:	466a      	mov	r2, sp
	m_data_packet.preamble[0] = UART_PREAMBLE_1;
 80015c2:	4d1b      	ldr	r5, [pc, #108]	; (8001630 <_ZN10Serializer8SendDataERK8baroData+0x7c>)
	  std::memcpy(frame, (uint8_t*)&data, sizeof(data));
 80015c4:	c303      	stmia	r3!, {r0, r1}
	std::memcpy(m_data_packet.data, &data[0], len);
 80015c6:	ca03      	ldmia	r2!, {r0, r1}
        crc8 = crc_table[crc8 ^ data[i]];
 80015c8:	4b1a      	ldr	r3, [pc, #104]	; (8001634 <_ZN10Serializer8SendDataERK8baroData+0x80>)
	std::memcpy(m_data_packet.data, &data[0], len);
 80015ca:	61e0      	str	r0, [r4, #28]
        crc8 = crc_table[crc8 ^ data[i]];
 80015cc:	7f22      	ldrb	r2, [r4, #28]
 80015ce:	f894 c01d 	ldrb.w	ip, [r4, #29]
 80015d2:	f082 027f 	eor.w	r2, r2, #127	; 0x7f
	std::memcpy(m_data_packet.data, &data[0], len);
 80015d6:	6221      	str	r1, [r4, #32]
        crc8 = crc_table[crc8 ^ data[i]];
 80015d8:	7fa1      	ldrb	r1, [r4, #30]
 80015da:	5c98      	ldrb	r0, [r3, r2]
	m_data_packet.preamble[0] = UART_PREAMBLE_1;
 80015dc:	61a5      	str	r5, [r4, #24]
        crc8 = crc_table[crc8 ^ data[i]];
 80015de:	ea80 000c 	eor.w	r0, r0, ip
 80015e2:	f894 c01f 	ldrb.w	ip, [r4, #31]
 80015e6:	5c1a      	ldrb	r2, [r3, r0]
 80015e8:	f894 0020 	ldrb.w	r0, [r4, #32]
 80015ec:	404a      	eors	r2, r1
 80015ee:	5c99      	ldrb	r1, [r3, r2]
 80015f0:	ea81 010c 	eor.w	r1, r1, ip
 80015f4:	f894 c021 	ldrb.w	ip, [r4, #33]	; 0x21
 80015f8:	5c5a      	ldrb	r2, [r3, r1]
 80015fa:	4042      	eors	r2, r0
 80015fc:	5c98      	ldrb	r0, [r3, r2]
 80015fe:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
 8001602:	ea80 000c 	eor.w	r0, r0, ip
 8001606:	f894 c023 	ldrb.w	ip, [r4, #35]	; 0x23
 800160a:	5c19      	ldrb	r1, [r3, r0]
	CDC_Transmit_FS((uint8_t*)&m_data_packet, sizeof(m_data_packet));
 800160c:	f104 0018 	add.w	r0, r4, #24
        crc8 = crc_table[crc8 ^ data[i]];
 8001610:	4051      	eors	r1, r2
 8001612:	5c5a      	ldrb	r2, [r3, r1]
	CDC_Transmit_FS((uint8_t*)&m_data_packet, sizeof(m_data_packet));
 8001614:	2129      	movs	r1, #41	; 0x29
        crc8 = crc_table[crc8 ^ data[i]];
 8001616:	ea82 020c 	eor.w	r2, r2, ip
	m_data_packet.crc = crc_val;
 800161a:	5c9b      	ldrb	r3, [r3, r2]
 800161c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
	CDC_Transmit_FS((uint8_t*)&m_data_packet, sizeof(m_data_packet));
 8001620:	f00f f978 	bl	8010914 <CDC_Transmit_FS>
	  SendDataPacket(sensor_cmd_code_t::SENSOR_COMMAND_BARO, frame, sizeof(frame)/sizeof(frame[0]));
	  baro_timer = HAL_GetTick();
 8001624:	f000 fe4a 	bl	80022bc <HAL_GetTick>
 8001628:	6160      	str	r0, [r4, #20]

}
 800162a:	b003      	add	sp, #12
 800162c:	bd30      	pop	{r4, r5, pc}
 800162e:	bf00      	nop
 8001630:	08237f7e 	.word	0x08237f7e
 8001634:	08013ba0 	.word	0x08013ba0

08001638 <_ZN10Serializer8SendDataERK7gpsData>:

void Serializer::SendData(const gpsData& data)
{
 8001638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800163a:	b08b      	sub	sp, #44	; 0x2c
 800163c:	468c      	mov	ip, r1
 800163e:	4604      	mov	r4, r0
	 uint8_t frame[sizeof(data)];
	 std::memcpy(frame, (uint8_t*)&data, sizeof(data));
 8001640:	f101 0520 	add.w	r5, r1, #32
 8001644:	ae01      	add	r6, sp, #4
 8001646:	f8dc 0000 	ldr.w	r0, [ip]
 800164a:	f10c 0c10 	add.w	ip, ip, #16
 800164e:	f85c 1c0c 	ldr.w	r1, [ip, #-12]
 8001652:	46b6      	mov	lr, r6
 8001654:	f85c 2c08 	ldr.w	r2, [ip, #-8]
 8001658:	3610      	adds	r6, #16
 800165a:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 800165e:	45ac      	cmp	ip, r5
 8001660:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8001664:	d1ef      	bne.n	8001646 <_ZN10Serializer8SendDataERK7gpsData+0xe>
 8001666:	f8bc 3000 	ldrh.w	r3, [ip]
	std::memcpy(m_data_packet.data, &data[0], len);
 800166a:	ad01      	add	r5, sp, #4
	 std::memcpy(frame, (uint8_t*)&data, sizeof(data));
 800166c:	f89c 2002 	ldrb.w	r2, [ip, #2]
 8001670:	f104 0718 	add.w	r7, r4, #24
 8001674:	8033      	strh	r3, [r6, #0]
	std::memcpy(m_data_packet.data, &data[0], len);
 8001676:	f104 0e1c 	add.w	lr, r4, #28
	 std::memcpy(frame, (uint8_t*)&data, sizeof(data));
 800167a:	70b2      	strb	r2, [r6, #2]
	std::memcpy(m_data_packet.data, &data[0], len);
 800167c:	ae09      	add	r6, sp, #36	; 0x24
	m_data_packet.preamble[0] = UART_PREAMBLE_1;
 800167e:	4b17      	ldr	r3, [pc, #92]	; (80016dc <_ZN10Serializer8SendDataERK7gpsData+0xa4>)
 8001680:	61a3      	str	r3, [r4, #24]
	std::memcpy(m_data_packet.data, &data[0], len);
 8001682:	46ac      	mov	ip, r5
 8001684:	f10e 0e10 	add.w	lr, lr, #16
 8001688:	3510      	adds	r5, #16
 800168a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800168e:	45b4      	cmp	ip, r6
 8001690:	f84e 0c10 	str.w	r0, [lr, #-16]
 8001694:	f84e 1c0c 	str.w	r1, [lr, #-12]
 8001698:	f84e 2c08 	str.w	r2, [lr, #-8]
 800169c:	f84e 3c04 	str.w	r3, [lr, #-4]
 80016a0:	d1ef      	bne.n	8001682 <_ZN10Serializer8SendDataERK7gpsData+0x4a>
 80016a2:	882a      	ldrh	r2, [r5, #0]
 80016a4:	78ab      	ldrb	r3, [r5, #2]
 80016a6:	f104 053e 	add.w	r5, r4, #62	; 0x3e
 80016aa:	f8ae 2000 	strh.w	r2, [lr]
 80016ae:	463a      	mov	r2, r7
 80016b0:	f88e 3002 	strb.w	r3, [lr, #2]
 80016b4:	237d      	movs	r3, #125	; 0x7d
 80016b6:	480a      	ldr	r0, [pc, #40]	; (80016e0 <_ZN10Serializer8SendDataERK7gpsData+0xa8>)
        crc8 = crc_table[crc8 ^ data[i]];
 80016b8:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80016bc:	404b      	eors	r3, r1
    for (i = 0; i < len; i++)
 80016be:	42aa      	cmp	r2, r5
        crc8 = crc_table[crc8 ^ data[i]];
 80016c0:	5cc3      	ldrb	r3, [r0, r3]
    for (i = 0; i < len; i++)
 80016c2:	d1f9      	bne.n	80016b8 <_ZN10Serializer8SendDataERK7gpsData+0x80>
	CDC_Transmit_FS((uint8_t*)&m_data_packet, sizeof(m_data_packet));
 80016c4:	2129      	movs	r1, #41	; 0x29
	m_data_packet.crc = crc_val;
 80016c6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
	CDC_Transmit_FS((uint8_t*)&m_data_packet, sizeof(m_data_packet));
 80016ca:	4638      	mov	r0, r7
 80016cc:	f00f f922 	bl	8010914 <CDC_Transmit_FS>
	 SendDataPacket(sensor_cmd_code_t::SENSOR_COMMAND_GPS, frame, sizeof(frame)/sizeof(frame[0]));
	  gps_timer = HAL_GetTick();
 80016d0:	f000 fdf4 	bl	80022bc <HAL_GetTick>
 80016d4:	60e0      	str	r0, [r4, #12]
}
 80016d6:	b00b      	add	sp, #44	; 0x2c
 80016d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016da:	bf00      	nop
 80016dc:	23227f7e 	.word	0x23227f7e
 80016e0:	08013ba0 	.word	0x08013ba0

080016e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ea:	4b0a      	ldr	r3, [pc, #40]	; (8001714 <HAL_MspInit+0x30>)
 80016ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016f0:	4a08      	ldr	r2, [pc, #32]	; (8001714 <HAL_MspInit+0x30>)
 80016f2:	f043 0302 	orr.w	r3, r3, #2
 80016f6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80016fa:	4b06      	ldr	r3, [pc, #24]	; (8001714 <HAL_MspInit+0x30>)
 80016fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001700:	f003 0302 	and.w	r3, r3, #2
 8001704:	607b      	str	r3, [r7, #4]
 8001706:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001708:	bf00      	nop
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	58024400 	.word	0x58024400

08001718 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800171c:	e7fe      	b.n	800171c <NMI_Handler+0x4>

0800171e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800171e:	b480      	push	{r7}
 8001720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001722:	e7fe      	b.n	8001722 <HardFault_Handler+0x4>

08001724 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001728:	e7fe      	b.n	8001728 <MemManage_Handler+0x4>

0800172a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800172a:	b480      	push	{r7}
 800172c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800172e:	e7fe      	b.n	800172e <BusFault_Handler+0x4>

08001730 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001734:	e7fe      	b.n	8001734 <UsageFault_Handler+0x4>

08001736 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001736:	b480      	push	{r7}
 8001738:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001752:	b480      	push	{r7}
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001764:	f000 fd96 	bl	8002294 <HAL_IncTick>

  HAL_SYSTICK_IRQHandler();
 8001768:	f000 ff70 	bl	800264c <HAL_SYSTICK_IRQHandler>

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800176c:	bf00      	nop
 800176e:	bd80      	pop	{r7, pc}

08001770 <DMA2_Stream7_IRQHandler>:
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32h7xx.s).                    */
/******************************************************************************/

void DMA2_Stream7_IRQHandler(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001774:	4802      	ldr	r0, [pc, #8]	; (8001780 <DMA2_Stream7_IRQHandler+0x10>)
 8001776:	f002 faa1 	bl	8003cbc <HAL_DMA_IRQHandler>
}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	240007b8 	.word	0x240007b8

08001784 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 8001788:	4802      	ldr	r0, [pc, #8]	; (8001794 <DMA1_Stream5_IRQHandler+0x10>)
 800178a:	f002 fa97 	bl	8003cbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	240006c8 	.word	0x240006c8

08001798 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_tx);
 800179c:	4802      	ldr	r0, [pc, #8]	; (80017a8 <DMA1_Stream6_IRQHandler+0x10>)
 800179e:	f002 fa8d 	bl	8003cbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	24000740 	.word	0x24000740

080017ac <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017b0:	4802      	ldr	r0, [pc, #8]	; (80017bc <TIM1_BRK_IRQHandler+0x10>)
 80017b2:	f009 f83b 	bl	800a82c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	2400055c 	.word	0x2400055c

080017c0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017c4:	4802      	ldr	r0, [pc, #8]	; (80017d0 <TIM1_UP_IRQHandler+0x10>)
 80017c6:	f009 f831 	bl	800a82c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	2400055c 	.word	0x2400055c

080017d4 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017d8:	4802      	ldr	r0, [pc, #8]	; (80017e4 <TIM1_TRG_COM_IRQHandler+0x10>)
 80017da:	f009 f827 	bl	800a82c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	2400055c 	.word	0x2400055c

080017e8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017ec:	4802      	ldr	r0, [pc, #8]	; (80017f8 <TIM1_CC_IRQHandler+0x10>)
 80017ee:	f009 f81d 	bl	800a82c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	2400055c 	.word	0x2400055c

080017fc <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001800:	4802      	ldr	r0, [pc, #8]	; (800180c <I2C2_EV_IRQHandler+0x10>)
 8001802:	f004 f83b 	bl	800587c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	24000370 	.word	0x24000370

08001810 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001814:	4802      	ldr	r0, [pc, #8]	; (8001820 <I2C2_ER_IRQHandler+0x10>)
 8001816:	f004 f84b 	bl	80058b0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	24000370 	.word	0x24000370

08001824 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001828:	4802      	ldr	r0, [pc, #8]	; (8001834 <SDMMC1_IRQHandler+0x10>)
 800182a:	f008 fccd 	bl	800a1c8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	240004ac 	.word	0x240004ac

08001838 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
  if(__HAL_UART_GET_IT_SOURCE(&huart4, UART_IT_IDLE))
 800183c:	4b0c      	ldr	r3, [pc, #48]	; (8001870 <UART4_IRQHandler+0x38>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0310 	and.w	r3, r3, #16
 8001846:	2b00      	cmp	r3, #0
 8001848:	d00c      	beq.n	8001864 <UART4_IRQHandler+0x2c>
  {
     HAL_UART_Receive_DMA(&huart4, sbus_buffer, SBUS_PACKET_LEN);
 800184a:	2219      	movs	r2, #25
 800184c:	4909      	ldr	r1, [pc, #36]	; (8001874 <UART4_IRQHandler+0x3c>)
 800184e:	4808      	ldr	r0, [pc, #32]	; (8001870 <UART4_IRQHandler+0x38>)
 8001850:	f00a f8bc 	bl	800b9cc <HAL_UART_Receive_DMA>
    __HAL_UART_DISABLE_IT(&huart4, UART_IT_IDLE);
 8001854:	4b06      	ldr	r3, [pc, #24]	; (8001870 <UART4_IRQHandler+0x38>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	4b05      	ldr	r3, [pc, #20]	; (8001870 <UART4_IRQHandler+0x38>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f022 0210 	bic.w	r2, r2, #16
 8001862:	601a      	str	r2, [r3, #0]
  }
  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001864:	4802      	ldr	r0, [pc, #8]	; (8001870 <UART4_IRQHandler+0x38>)
 8001866:	f00a f967 	bl	800bb38 <HAL_UART_IRQHandler>

  /* USER CODE END UART4_IRQn 1 */
}
 800186a:	bf00      	nop
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	240005a8 	.word	0x240005a8
 8001874:	2400053c 	.word	0x2400053c

08001878 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 800187c:	4802      	ldr	r0, [pc, #8]	; (8001888 <UART7_IRQHandler+0x10>)
 800187e:	f00a f95b 	bl	800bb38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	24000638 	.word	0x24000638

0800188c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001890:	4802      	ldr	r0, [pc, #8]	; (800189c <OTG_FS_IRQHandler+0x10>)
 8001892:	f005 f866 	bl	8006962 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	24001d18 	.word	0x24001d18

080018a0 <HSEM1_IRQHandler>:

/* USER CODE BEGIN 1 */
void HSEM1_IRQHandler(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
//    uint32_t status_reg = HSEM_COMMON->MISR;
//    HSEM_COMMON->ICR = (status_reg);
//    NVIC_ClearPendingIRQ(HSEM1_IRQn);
//
//    lock_unlock_callback(status_reg);
	HAL_HSEM_IRQHandler();
 80018a4:	f003 ff40 	bl	8005728 <HAL_HSEM_IRQHandler>
}
 80018a8:	bf00      	nop
 80018aa:	bd80      	pop	{r7, pc}

080018ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
	return 1;
 80018b0:	2301      	movs	r3, #1
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <_kill>:

int _kill(int pid, int sig)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80018c6:	f00f fc89 	bl	80111dc <__errno>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2216      	movs	r2, #22
 80018ce:	601a      	str	r2, [r3, #0]
	return -1;
 80018d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}

080018dc <_exit>:

void _exit (int status)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80018e4:	f04f 31ff 	mov.w	r1, #4294967295
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f7ff ffe7 	bl	80018bc <_kill>
	while (1) {}		/* Make sure we hang here */
 80018ee:	e7fe      	b.n	80018ee <_exit+0x12>

080018f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	60b9      	str	r1, [r7, #8]
 80018fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018fc:	2300      	movs	r3, #0
 80018fe:	617b      	str	r3, [r7, #20]
 8001900:	e00a      	b.n	8001918 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001902:	f3af 8000 	nop.w
 8001906:	4601      	mov	r1, r0
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	1c5a      	adds	r2, r3, #1
 800190c:	60ba      	str	r2, [r7, #8]
 800190e:	b2ca      	uxtb	r2, r1
 8001910:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	3301      	adds	r3, #1
 8001916:	617b      	str	r3, [r7, #20]
 8001918:	697a      	ldr	r2, [r7, #20]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	429a      	cmp	r2, r3
 800191e:	dbf0      	blt.n	8001902 <_read+0x12>
	}

return len;
 8001920:	687b      	ldr	r3, [r7, #4]
}
 8001922:	4618      	mov	r0, r3
 8001924:	3718      	adds	r7, #24
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	b086      	sub	sp, #24
 800192e:	af00      	add	r7, sp, #0
 8001930:	60f8      	str	r0, [r7, #12]
 8001932:	60b9      	str	r1, [r7, #8]
 8001934:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001936:	2300      	movs	r3, #0
 8001938:	617b      	str	r3, [r7, #20]
 800193a:	e009      	b.n	8001950 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	1c5a      	adds	r2, r3, #1
 8001940:	60ba      	str	r2, [r7, #8]
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	4618      	mov	r0, r3
 8001946:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	3301      	adds	r3, #1
 800194e:	617b      	str	r3, [r7, #20]
 8001950:	697a      	ldr	r2, [r7, #20]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	429a      	cmp	r2, r3
 8001956:	dbf1      	blt.n	800193c <_write+0x12>
	}
	return len;
 8001958:	687b      	ldr	r3, [r7, #4]
}
 800195a:	4618      	mov	r0, r3
 800195c:	3718      	adds	r7, #24
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <_close>:

int _close(int file)
{
 8001962:	b480      	push	{r7}
 8001964:	b083      	sub	sp, #12
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
	return -1;
 800196a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800196e:	4618      	mov	r0, r3
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800197a:	b480      	push	{r7}
 800197c:	b083      	sub	sp, #12
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
 8001982:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800198a:	605a      	str	r2, [r3, #4]
	return 0;
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr

0800199a <_isatty>:

int _isatty(int file)
{
 800199a:	b480      	push	{r7}
 800199c:	b083      	sub	sp, #12
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
	return 1;
 80019a2:	2301      	movs	r3, #1
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
	return 0;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3714      	adds	r7, #20
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
	...

080019cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019d4:	4a14      	ldr	r2, [pc, #80]	; (8001a28 <_sbrk+0x5c>)
 80019d6:	4b15      	ldr	r3, [pc, #84]	; (8001a2c <_sbrk+0x60>)
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019e0:	4b13      	ldr	r3, [pc, #76]	; (8001a30 <_sbrk+0x64>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d102      	bne.n	80019ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019e8:	4b11      	ldr	r3, [pc, #68]	; (8001a30 <_sbrk+0x64>)
 80019ea:	4a12      	ldr	r2, [pc, #72]	; (8001a34 <_sbrk+0x68>)
 80019ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ee:	4b10      	ldr	r3, [pc, #64]	; (8001a30 <_sbrk+0x64>)
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4413      	add	r3, r2
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d207      	bcs.n	8001a0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019fc:	f00f fbee 	bl	80111dc <__errno>
 8001a00:	4603      	mov	r3, r0
 8001a02:	220c      	movs	r2, #12
 8001a04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a06:	f04f 33ff 	mov.w	r3, #4294967295
 8001a0a:	e009      	b.n	8001a20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a0c:	4b08      	ldr	r3, [pc, #32]	; (8001a30 <_sbrk+0x64>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a12:	4b07      	ldr	r3, [pc, #28]	; (8001a30 <_sbrk+0x64>)
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4413      	add	r3, r2
 8001a1a:	4a05      	ldr	r2, [pc, #20]	; (8001a30 <_sbrk+0x64>)
 8001a1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3718      	adds	r7, #24
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	24080000 	.word	0x24080000
 8001a2c:	00000400 	.word	0x00000400
 8001a30:	24000558 	.word	0x24000558
 8001a34:	24002130 	.word	0x24002130

08001a38 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b0a4      	sub	sp, #144	; 0x90
 8001a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a3e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001a42:	2200      	movs	r2, #0
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	605a      	str	r2, [r3, #4]
 8001a48:	609a      	str	r2, [r3, #8]
 8001a4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a4c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	605a      	str	r2, [r3, #4]
 8001a56:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a58:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]
 8001a66:	611a      	str	r2, [r3, #16]
 8001a68:	615a      	str	r2, [r3, #20]
 8001a6a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a70:	222c      	movs	r2, #44	; 0x2c
 8001a72:	2100      	movs	r1, #0
 8001a74:	4618      	mov	r0, r3
 8001a76:	f00f fbf9 	bl	801126c <memset>
  RCC_ClkInitTypeDef clk_init_struct = {0};
 8001a7a:	1d3b      	adds	r3, r7, #4
 8001a7c:	2220      	movs	r2, #32
 8001a7e:	2100      	movs	r1, #0
 8001a80:	4618      	mov	r0, r3
 8001a82:	f00f fbf3 	bl	801126c <memset>


  /* USER CODE BEGIN TIM1_Init 1 */

  uint32_t latency = 0;
 8001a86:	2300      	movs	r3, #0
 8001a88:	603b      	str	r3, [r7, #0]
  uint32_t timer_clock_frequency = 0;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t timer_prescaler = 0;
 8001a90:	2300      	movs	r3, #0
 8001a92:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  /* USER CODE END TIM1_Init 1 */

  HAL_RCC_GetClockConfig(&clk_init_struct, &latency);
 8001a96:	463a      	mov	r2, r7
 8001a98:	1d3b      	adds	r3, r7, #4
 8001a9a:	4611      	mov	r1, r2
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f006 ffe9 	bl	8008a74 <HAL_RCC_GetClockConfig>

  if(clk_init_struct.APB1CLKDivider == RCC_HCLK_DIV1)
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d104      	bne.n	8001ab2 <MX_TIM1_Init+0x7a>
  {
    timer_clock_frequency = HAL_RCC_GetPCLK1Freq();
 8001aa8:	f006 ffb8 	bl	8008a1c <HAL_RCC_GetPCLK1Freq>
 8001aac:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 8001ab0:	e005      	b.n	8001abe <MX_TIM1_Init+0x86>
  }

  else
  {
    timer_clock_frequency = HAL_RCC_GetPCLK1Freq() * 2;
 8001ab2:	f006 ffb3 	bl	8008a1c <HAL_RCC_GetPCLK1Freq>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  }

  timer_prescaler = (timer_clock_frequency / (TIMER_PRESCALER_MAX_VALUE * TIMER_FREQUENCY_RANGE_MIN)) +1;
 8001abe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ac2:	4a5f      	ldr	r2, [pc, #380]	; (8001c40 <MX_TIM1_Init+0x208>)
 8001ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac8:	0c9b      	lsrs	r3, r3, #18
 8001aca:	3301      	adds	r3, #1
 8001acc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  htim1.Instance = TIM1;
 8001ad0:	4b5c      	ldr	r3, [pc, #368]	; (8001c44 <MX_TIM1_Init+0x20c>)
 8001ad2:	4a5d      	ldr	r2, [pc, #372]	; (8001c48 <MX_TIM1_Init+0x210>)
 8001ad4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = (timer_prescaler - 1);
 8001ad6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ada:	3b01      	subs	r3, #1
 8001adc:	4a59      	ldr	r2, [pc, #356]	; (8001c44 <MX_TIM1_Init+0x20c>)
 8001ade:	6053      	str	r3, [r2, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ae0:	4b58      	ldr	r3, [pc, #352]	; (8001c44 <MX_TIM1_Init+0x20c>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = ((timer_clock_frequency / (timer_prescaler * TIMER_FREQUENCY)) - 1);
 8001ae6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001aea:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001aee:	fb02 f303 	mul.w	r3, r2, r3
 8001af2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001afa:	3b01      	subs	r3, #1
 8001afc:	4a51      	ldr	r2, [pc, #324]	; (8001c44 <MX_TIM1_Init+0x20c>)
 8001afe:	60d3      	str	r3, [r2, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b00:	4b50      	ldr	r3, [pc, #320]	; (8001c44 <MX_TIM1_Init+0x20c>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b06:	4b4f      	ldr	r3, [pc, #316]	; (8001c44 <MX_TIM1_Init+0x20c>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b0c:	4b4d      	ldr	r3, [pc, #308]	; (8001c44 <MX_TIM1_Init+0x20c>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b12:	484c      	ldr	r0, [pc, #304]	; (8001c44 <MX_TIM1_Init+0x20c>)
 8001b14:	f008 fdd2 	bl	800a6bc <HAL_TIM_Base_Init>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_TIM1_Init+0xea>
  {
    Error_Handler();
 8001b1e:	f7ff fa01 	bl	8000f24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b26:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b28:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4845      	ldr	r0, [pc, #276]	; (8001c44 <MX_TIM1_Init+0x20c>)
 8001b30:	f009 f8ac 	bl	800ac8c <HAL_TIM_ConfigClockSource>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8001b3a:	f7ff f9f3 	bl	8000f24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b3e:	4841      	ldr	r0, [pc, #260]	; (8001c44 <MX_TIM1_Init+0x20c>)
 8001b40:	f008 fe13 	bl	800a76a <HAL_TIM_PWM_Init>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001b4a:	f7ff f9eb 	bl	8000f24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	66fb      	str	r3, [r7, #108]	; 0x6c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b52:	2300      	movs	r3, #0
 8001b54:	673b      	str	r3, [r7, #112]	; 0x70
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b56:	2300      	movs	r3, #0
 8001b58:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b5a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4838      	ldr	r0, [pc, #224]	; (8001c44 <MX_TIM1_Init+0x20c>)
 8001b62:	f009 fdbf 	bl	800b6e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8001b6c:	f7ff f9da 	bl	8000f24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b70:	2360      	movs	r3, #96	; 0x60
 8001b72:	653b      	str	r3, [r7, #80]	; 0x50
  sConfigOC.Pulse = 50;
 8001b74:	2332      	movs	r3, #50	; 0x32
 8001b76:	657b      	str	r3, [r7, #84]	; 0x54
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b80:	2300      	movs	r3, #0
 8001b82:	663b      	str	r3, [r7, #96]	; 0x60
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b84:	2300      	movs	r3, #0
 8001b86:	667b      	str	r3, [r7, #100]	; 0x64
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b8c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001b90:	2200      	movs	r2, #0
 8001b92:	4619      	mov	r1, r3
 8001b94:	482b      	ldr	r0, [pc, #172]	; (8001c44 <MX_TIM1_Init+0x20c>)
 8001b96:	f008 ff69 	bl	800aa6c <HAL_TIM_PWM_ConfigChannel>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <MX_TIM1_Init+0x16c>
  {
    Error_Handler();
 8001ba0:	f7ff f9c0 	bl	8000f24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ba4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001ba8:	2204      	movs	r2, #4
 8001baa:	4619      	mov	r1, r3
 8001bac:	4825      	ldr	r0, [pc, #148]	; (8001c44 <MX_TIM1_Init+0x20c>)
 8001bae:	f008 ff5d 	bl	800aa6c <HAL_TIM_PWM_ConfigChannel>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <MX_TIM1_Init+0x184>
  {
    Error_Handler();
 8001bb8:	f7ff f9b4 	bl	8000f24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001bbc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001bc0:	2208      	movs	r2, #8
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	481f      	ldr	r0, [pc, #124]	; (8001c44 <MX_TIM1_Init+0x20c>)
 8001bc6:	f008 ff51 	bl	800aa6c <HAL_TIM_PWM_ConfigChannel>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <MX_TIM1_Init+0x19c>
  {
    Error_Handler();
 8001bd0:	f7ff f9a8 	bl	8000f24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001bd4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001bd8:	220c      	movs	r2, #12
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4819      	ldr	r0, [pc, #100]	; (8001c44 <MX_TIM1_Init+0x20c>)
 8001bde:	f008 ff45 	bl	800aa6c <HAL_TIM_PWM_ConfigChannel>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <MX_TIM1_Init+0x1b4>
  {
    Error_Handler();
 8001be8:	f7ff f99c 	bl	8000f24 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001bec:	2300      	movs	r3, #0
 8001bee:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.DeadTime = 0;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	637b      	str	r3, [r7, #52]	; 0x34
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c04:	63bb      	str	r3, [r7, #56]	; 0x38
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001c06:	2300      	movs	r3, #0
 8001c08:	63fb      	str	r3, [r7, #60]	; 0x3c
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	643b      	str	r3, [r7, #64]	; 0x40
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001c0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c12:	647b      	str	r3, [r7, #68]	; 0x44
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001c14:	2300      	movs	r3, #0
 8001c16:	64bb      	str	r3, [r7, #72]	; 0x48
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c20:	4619      	mov	r1, r3
 8001c22:	4808      	ldr	r0, [pc, #32]	; (8001c44 <MX_TIM1_Init+0x20c>)
 8001c24:	f009 fde6 	bl	800b7f4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <MX_TIM1_Init+0x1fa>
  {
    Error_Handler();
 8001c2e:	f7ff f979 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001c32:	4804      	ldr	r0, [pc, #16]	; (8001c44 <MX_TIM1_Init+0x20c>)
 8001c34:	f000 f84a 	bl	8001ccc <HAL_TIM_MspPostInit>

}
 8001c38:	bf00      	nop
 8001c3a:	3790      	adds	r7, #144	; 0x90
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	66673335 	.word	0x66673335
 8001c44:	2400055c 	.word	0x2400055c
 8001c48:	40010000 	.word	0x40010000

08001c4c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a1a      	ldr	r2, [pc, #104]	; (8001cc4 <HAL_TIM_Base_MspInit+0x78>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d12e      	bne.n	8001cbc <HAL_TIM_Base_MspInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c5e:	4b1a      	ldr	r3, [pc, #104]	; (8001cc8 <HAL_TIM_Base_MspInit+0x7c>)
 8001c60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c64:	4a18      	ldr	r2, [pc, #96]	; (8001cc8 <HAL_TIM_Base_MspInit+0x7c>)
 8001c66:	f043 0301 	orr.w	r3, r3, #1
 8001c6a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001c6e:	4b16      	ldr	r3, [pc, #88]	; (8001cc8 <HAL_TIM_Base_MspInit+0x7c>)
 8001c70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c74:	f003 0301 	and.w	r3, r3, #1
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	2100      	movs	r1, #0
 8001c80:	2018      	movs	r0, #24
 8001c82:	f000 fc32 	bl	80024ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8001c86:	2018      	movs	r0, #24
 8001c88:	f000 fc49 	bl	800251e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	2100      	movs	r1, #0
 8001c90:	2019      	movs	r0, #25
 8001c92:	f000 fc2a 	bl	80024ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001c96:	2019      	movs	r0, #25
 8001c98:	f000 fc41 	bl	800251e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	201a      	movs	r0, #26
 8001ca2:	f000 fc22 	bl	80024ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8001ca6:	201a      	movs	r0, #26
 8001ca8:	f000 fc39 	bl	800251e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001cac:	2200      	movs	r2, #0
 8001cae:	2100      	movs	r1, #0
 8001cb0:	201b      	movs	r0, #27
 8001cb2:	f000 fc1a 	bl	80024ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001cb6:	201b      	movs	r0, #27
 8001cb8:	f000 fc31 	bl	800251e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001cbc:	bf00      	nop
 8001cbe:	3710      	adds	r7, #16
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40010000 	.word	0x40010000
 8001cc8:	58024400 	.word	0x58024400

08001ccc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b08a      	sub	sp, #40	; 0x28
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd4:	f107 0314 	add.w	r3, r7, #20
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	605a      	str	r2, [r3, #4]
 8001cde:	609a      	str	r2, [r3, #8]
 8001ce0:	60da      	str	r2, [r3, #12]
 8001ce2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a23      	ldr	r2, [pc, #140]	; (8001d78 <HAL_TIM_MspPostInit+0xac>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d13f      	bne.n	8001d6e <HAL_TIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cee:	4b23      	ldr	r3, [pc, #140]	; (8001d7c <HAL_TIM_MspPostInit+0xb0>)
 8001cf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cf4:	4a21      	ldr	r2, [pc, #132]	; (8001d7c <HAL_TIM_MspPostInit+0xb0>)
 8001cf6:	f043 0310 	orr.w	r3, r3, #16
 8001cfa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cfe:	4b1f      	ldr	r3, [pc, #124]	; (8001d7c <HAL_TIM_MspPostInit+0xb0>)
 8001d00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d04:	f003 0310 	and.w	r3, r3, #16
 8001d08:	613b      	str	r3, [r7, #16]
 8001d0a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d0c:	4b1b      	ldr	r3, [pc, #108]	; (8001d7c <HAL_TIM_MspPostInit+0xb0>)
 8001d0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d12:	4a1a      	ldr	r2, [pc, #104]	; (8001d7c <HAL_TIM_MspPostInit+0xb0>)
 8001d14:	f043 0301 	orr.w	r3, r3, #1
 8001d18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d1c:	4b17      	ldr	r3, [pc, #92]	; (8001d7c <HAL_TIM_MspPostInit+0xb0>)
 8001d1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	60fb      	str	r3, [r7, #12]
 8001d28:	68fb      	ldr	r3, [r7, #12]
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8001d2a:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8001d2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d30:	2302      	movs	r3, #2
 8001d32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d34:	2300      	movs	r3, #0
 8001d36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d40:	f107 0314 	add.w	r3, r7, #20
 8001d44:	4619      	mov	r1, r3
 8001d46:	480e      	ldr	r0, [pc, #56]	; (8001d80 <HAL_TIM_MspPostInit+0xb4>)
 8001d48:	f003 fae4 	bl	8005314 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001d4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d52:	2302      	movs	r3, #2
 8001d54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d56:	2300      	movs	r3, #0
 8001d58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d62:	f107 0314 	add.w	r3, r7, #20
 8001d66:	4619      	mov	r1, r3
 8001d68:	4806      	ldr	r0, [pc, #24]	; (8001d84 <HAL_TIM_MspPostInit+0xb8>)
 8001d6a:	f003 fad3 	bl	8005314 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001d6e:	bf00      	nop
 8001d70:	3728      	adds	r7, #40	; 0x28
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40010000 	.word	0x40010000
 8001d7c:	58024400 	.word	0x58024400
 8001d80:	58021000 	.word	0x58021000
 8001d84:	58020000 	.word	0x58020000

08001d88 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart7_rx;
DMA_HandleTypeDef hdma_uart7_tx;
DMA_HandleTypeDef hdma_uart4_rx;
/* UART4 init function */
void MX_UART4_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001d8c:	4b1f      	ldr	r3, [pc, #124]	; (8001e0c <MX_UART4_Init+0x84>)
 8001d8e:	4a20      	ldr	r2, [pc, #128]	; (8001e10 <MX_UART4_Init+0x88>)
 8001d90:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 100000;
 8001d92:	4b1e      	ldr	r3, [pc, #120]	; (8001e0c <MX_UART4_Init+0x84>)
 8001d94:	4a1f      	ldr	r2, [pc, #124]	; (8001e14 <MX_UART4_Init+0x8c>)
 8001d96:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_9B;
 8001d98:	4b1c      	ldr	r3, [pc, #112]	; (8001e0c <MX_UART4_Init+0x84>)
 8001d9a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d9e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_2;
 8001da0:	4b1a      	ldr	r3, [pc, #104]	; (8001e0c <MX_UART4_Init+0x84>)
 8001da2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001da6:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 8001da8:	4b18      	ldr	r3, [pc, #96]	; (8001e0c <MX_UART4_Init+0x84>)
 8001daa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dae:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_RX;
 8001db0:	4b16      	ldr	r3, [pc, #88]	; (8001e0c <MX_UART4_Init+0x84>)
 8001db2:	2204      	movs	r2, #4
 8001db4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001db6:	4b15      	ldr	r3, [pc, #84]	; (8001e0c <MX_UART4_Init+0x84>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dbc:	4b13      	ldr	r3, [pc, #76]	; (8001e0c <MX_UART4_Init+0x84>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001dc2:	4b12      	ldr	r3, [pc, #72]	; (8001e0c <MX_UART4_Init+0x84>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV4;
 8001dc8:	4b10      	ldr	r3, [pc, #64]	; (8001e0c <MX_UART4_Init+0x84>)
 8001dca:	2202      	movs	r2, #2
 8001dcc:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dce:	4b0f      	ldr	r3, [pc, #60]	; (8001e0c <MX_UART4_Init+0x84>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001dd4:	480d      	ldr	r0, [pc, #52]	; (8001e0c <MX_UART4_Init+0x84>)
 8001dd6:	f009 fda9 	bl	800b92c <HAL_UART_Init>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <MX_UART4_Init+0x5c>
  {
    Error_Handler();
 8001de0:	f7ff f8a0 	bl	8000f24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001de4:	2100      	movs	r1, #0
 8001de6:	4809      	ldr	r0, [pc, #36]	; (8001e0c <MX_UART4_Init+0x84>)
 8001de8:	f00b fa8c 	bl	800d304 <HAL_UARTEx_SetRxFifoThreshold>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <MX_UART4_Init+0x6e>
  {
    Error_Handler();
 8001df2:	f7ff f897 	bl	8000f24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001df6:	4805      	ldr	r0, [pc, #20]	; (8001e0c <MX_UART4_Init+0x84>)
 8001df8:	f00b fa0d 	bl	800d216 <HAL_UARTEx_DisableFifoMode>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <MX_UART4_Init+0x7e>
  {
    Error_Handler();
 8001e02:	f7ff f88f 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001e06:	bf00      	nop
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	240005a8 	.word	0x240005a8
 8001e10:	40004c00 	.word	0x40004c00
 8001e14:	000186a0 	.word	0x000186a0

08001e18 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001e1c:	4b22      	ldr	r3, [pc, #136]	; (8001ea8 <MX_UART7_Init+0x90>)
 8001e1e:	4a23      	ldr	r2, [pc, #140]	; (8001eac <MX_UART7_Init+0x94>)
 8001e20:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 921600;
 8001e22:	4b21      	ldr	r3, [pc, #132]	; (8001ea8 <MX_UART7_Init+0x90>)
 8001e24:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8001e28:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001e2a:	4b1f      	ldr	r3, [pc, #124]	; (8001ea8 <MX_UART7_Init+0x90>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001e30:	4b1d      	ldr	r3, [pc, #116]	; (8001ea8 <MX_UART7_Init+0x90>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001e36:	4b1c      	ldr	r3, [pc, #112]	; (8001ea8 <MX_UART7_Init+0x90>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001e3c:	4b1a      	ldr	r3, [pc, #104]	; (8001ea8 <MX_UART7_Init+0x90>)
 8001e3e:	220c      	movs	r2, #12
 8001e40:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e42:	4b19      	ldr	r3, [pc, #100]	; (8001ea8 <MX_UART7_Init+0x90>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e48:	4b17      	ldr	r3, [pc, #92]	; (8001ea8 <MX_UART7_Init+0x90>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e4e:	4b16      	ldr	r3, [pc, #88]	; (8001ea8 <MX_UART7_Init+0x90>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e54:	4b14      	ldr	r3, [pc, #80]	; (8001ea8 <MX_UART7_Init+0x90>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e5a:	4b13      	ldr	r3, [pc, #76]	; (8001ea8 <MX_UART7_Init+0x90>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001e60:	4811      	ldr	r0, [pc, #68]	; (8001ea8 <MX_UART7_Init+0x90>)
 8001e62:	f009 fd63 	bl	800b92c <HAL_UART_Init>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8001e6c:	f7ff f85a 	bl	8000f24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e70:	2100      	movs	r1, #0
 8001e72:	480d      	ldr	r0, [pc, #52]	; (8001ea8 <MX_UART7_Init+0x90>)
 8001e74:	f00b fa08 	bl	800d288 <HAL_UARTEx_SetTxFifoThreshold>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8001e7e:	f7ff f851 	bl	8000f24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e82:	2100      	movs	r1, #0
 8001e84:	4808      	ldr	r0, [pc, #32]	; (8001ea8 <MX_UART7_Init+0x90>)
 8001e86:	f00b fa3d 	bl	800d304 <HAL_UARTEx_SetRxFifoThreshold>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8001e90:	f7ff f848 	bl	8000f24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8001e94:	4804      	ldr	r0, [pc, #16]	; (8001ea8 <MX_UART7_Init+0x90>)
 8001e96:	f00b f9be 	bl	800d216 <HAL_UARTEx_DisableFifoMode>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8001ea0:	f7ff f840 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001ea4:	bf00      	nop
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	24000638 	.word	0x24000638
 8001eac:	40007800 	.word	0x40007800

08001eb0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b0ba      	sub	sp, #232	; 0xe8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	605a      	str	r2, [r3, #4]
 8001ec2:	609a      	str	r2, [r3, #8]
 8001ec4:	60da      	str	r2, [r3, #12]
 8001ec6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ec8:	f107 0318 	add.w	r3, r7, #24
 8001ecc:	22bc      	movs	r2, #188	; 0xbc
 8001ece:	2100      	movs	r1, #0
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f00f f9cb 	bl	801126c <memset>
  if(uartHandle->Instance==UART4)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a95      	ldr	r2, [pc, #596]	; (8002130 <HAL_UART_MspInit+0x280>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d179      	bne.n	8001fd4 <HAL_UART_MspInit+0x124>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001eea:	f107 0318 	add.w	r3, r7, #24
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f006 fe02 	bl	8008af8 <HAL_RCCEx_PeriphCLKConfig>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001efa:	f7ff f813 	bl	8000f24 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001efe:	4b8d      	ldr	r3, [pc, #564]	; (8002134 <HAL_UART_MspInit+0x284>)
 8001f00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f04:	4a8b      	ldr	r2, [pc, #556]	; (8002134 <HAL_UART_MspInit+0x284>)
 8001f06:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001f0a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001f0e:	4b89      	ldr	r3, [pc, #548]	; (8002134 <HAL_UART_MspInit+0x284>)
 8001f10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f18:	617b      	str	r3, [r7, #20]
 8001f1a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f1c:	4b85      	ldr	r3, [pc, #532]	; (8002134 <HAL_UART_MspInit+0x284>)
 8001f1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f22:	4a84      	ldr	r2, [pc, #528]	; (8002134 <HAL_UART_MspInit+0x284>)
 8001f24:	f043 0301 	orr.w	r3, r3, #1
 8001f28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f2c:	4b81      	ldr	r3, [pc, #516]	; (8002134 <HAL_UART_MspInit+0x284>)
 8001f2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	613b      	str	r3, [r7, #16]
 8001f38:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f40:	2302      	movs	r3, #2
 8001f42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f46:	2300      	movs	r3, #0
 8001f48:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001f52:	2308      	movs	r3, #8
 8001f54:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f58:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	4876      	ldr	r0, [pc, #472]	; (8002138 <HAL_UART_MspInit+0x288>)
 8001f60:	f003 f9d8 	bl	8005314 <HAL_GPIO_Init>

    /*UART4 RX Init
     *
     */

    hdma_uart4_rx.Instance = DMA2_Stream7;
 8001f64:	4b75      	ldr	r3, [pc, #468]	; (800213c <HAL_UART_MspInit+0x28c>)
 8001f66:	4a76      	ldr	r2, [pc, #472]	; (8002140 <HAL_UART_MspInit+0x290>)
 8001f68:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8001f6a:	4b74      	ldr	r3, [pc, #464]	; (800213c <HAL_UART_MspInit+0x28c>)
 8001f6c:	223f      	movs	r2, #63	; 0x3f
 8001f6e:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f70:	4b72      	ldr	r3, [pc, #456]	; (800213c <HAL_UART_MspInit+0x28c>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f76:	4b71      	ldr	r3, [pc, #452]	; (800213c <HAL_UART_MspInit+0x28c>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f7c:	4b6f      	ldr	r3, [pc, #444]	; (800213c <HAL_UART_MspInit+0x28c>)
 8001f7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f82:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f84:	4b6d      	ldr	r3, [pc, #436]	; (800213c <HAL_UART_MspInit+0x28c>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f8a:	4b6c      	ldr	r3, [pc, #432]	; (800213c <HAL_UART_MspInit+0x28c>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8001f90:	4b6a      	ldr	r3, [pc, #424]	; (800213c <HAL_UART_MspInit+0x28c>)
 8001f92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f96:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001f98:	4b68      	ldr	r3, [pc, #416]	; (800213c <HAL_UART_MspInit+0x28c>)
 8001f9a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f9e:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fa0:	4b66      	ldr	r3, [pc, #408]	; (800213c <HAL_UART_MspInit+0x28c>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	625a      	str	r2, [r3, #36]	; 0x24

    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001fa6:	4865      	ldr	r0, [pc, #404]	; (800213c <HAL_UART_MspInit+0x28c>)
 8001fa8:	f000 fb5e 	bl	8002668 <HAL_DMA_Init>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <HAL_UART_MspInit+0x106>
    {
      Error_Handler();
 8001fb2:	f7fe ffb7 	bl	8000f24 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle, hdmarx, hdma_uart4_rx);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a60      	ldr	r2, [pc, #384]	; (800213c <HAL_UART_MspInit+0x28c>)
 8001fba:	67da      	str	r2, [r3, #124]	; 0x7c
 8001fbc:	4a5f      	ldr	r2, [pc, #380]	; (800213c <HAL_UART_MspInit+0x28c>)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6393      	str	r3, [r2, #56]	; 0x38
    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	2034      	movs	r0, #52	; 0x34
 8001fc8:	f000 fa8f 	bl	80024ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001fcc:	2034      	movs	r0, #52	; 0x34
 8001fce:	f000 faa6 	bl	800251e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
}
 8001fd2:	e0a9      	b.n	8002128 <HAL_UART_MspInit+0x278>
  else if(uartHandle->Instance==UART7)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a5a      	ldr	r2, [pc, #360]	; (8002144 <HAL_UART_MspInit+0x294>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	f040 80a4 	bne.w	8002128 <HAL_UART_MspInit+0x278>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fea:	f107 0318 	add.w	r3, r7, #24
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f006 fd82 	bl	8008af8 <HAL_RCCEx_PeriphCLKConfig>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <HAL_UART_MspInit+0x14e>
      Error_Handler();
 8001ffa:	f7fe ff93 	bl	8000f24 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8001ffe:	4b4d      	ldr	r3, [pc, #308]	; (8002134 <HAL_UART_MspInit+0x284>)
 8002000:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002004:	4a4b      	ldr	r2, [pc, #300]	; (8002134 <HAL_UART_MspInit+0x284>)
 8002006:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800200a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800200e:	4b49      	ldr	r3, [pc, #292]	; (8002134 <HAL_UART_MspInit+0x284>)
 8002010:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002014:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002018:	60fb      	str	r3, [r7, #12]
 800201a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800201c:	4b45      	ldr	r3, [pc, #276]	; (8002134 <HAL_UART_MspInit+0x284>)
 800201e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002022:	4a44      	ldr	r2, [pc, #272]	; (8002134 <HAL_UART_MspInit+0x284>)
 8002024:	f043 0320 	orr.w	r3, r3, #32
 8002028:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800202c:	4b41      	ldr	r3, [pc, #260]	; (8002134 <HAL_UART_MspInit+0x284>)
 800202e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002032:	f003 0320 	and.w	r3, r3, #32
 8002036:	60bb      	str	r3, [r7, #8]
 8002038:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800203a:	23c0      	movs	r3, #192	; 0xc0
 800203c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002040:	2302      	movs	r3, #2
 8002042:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002046:	2300      	movs	r3, #0
 8002048:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800204c:	2300      	movs	r3, #0
 800204e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8002052:	2307      	movs	r3, #7
 8002054:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002058:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800205c:	4619      	mov	r1, r3
 800205e:	483a      	ldr	r0, [pc, #232]	; (8002148 <HAL_UART_MspInit+0x298>)
 8002060:	f003 f958 	bl	8005314 <HAL_GPIO_Init>
    hdma_uart7_rx.Instance = DMA1_Stream5;
 8002064:	4b39      	ldr	r3, [pc, #228]	; (800214c <HAL_UART_MspInit+0x29c>)
 8002066:	4a3a      	ldr	r2, [pc, #232]	; (8002150 <HAL_UART_MspInit+0x2a0>)
 8002068:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Request = DMA_REQUEST_UART7_RX;
 800206a:	4b38      	ldr	r3, [pc, #224]	; (800214c <HAL_UART_MspInit+0x29c>)
 800206c:	224f      	movs	r2, #79	; 0x4f
 800206e:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002070:	4b36      	ldr	r3, [pc, #216]	; (800214c <HAL_UART_MspInit+0x29c>)
 8002072:	2200      	movs	r2, #0
 8002074:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002076:	4b35      	ldr	r3, [pc, #212]	; (800214c <HAL_UART_MspInit+0x29c>)
 8002078:	2200      	movs	r2, #0
 800207a:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 800207c:	4b33      	ldr	r3, [pc, #204]	; (800214c <HAL_UART_MspInit+0x29c>)
 800207e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002082:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002084:	4b31      	ldr	r3, [pc, #196]	; (800214c <HAL_UART_MspInit+0x29c>)
 8002086:	2200      	movs	r2, #0
 8002088:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800208a:	4b30      	ldr	r3, [pc, #192]	; (800214c <HAL_UART_MspInit+0x29c>)
 800208c:	2200      	movs	r2, #0
 800208e:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_NORMAL;
 8002090:	4b2e      	ldr	r3, [pc, #184]	; (800214c <HAL_UART_MspInit+0x29c>)
 8002092:	2200      	movs	r2, #0
 8002094:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002096:	4b2d      	ldr	r3, [pc, #180]	; (800214c <HAL_UART_MspInit+0x29c>)
 8002098:	2200      	movs	r2, #0
 800209a:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800209c:	4b2b      	ldr	r3, [pc, #172]	; (800214c <HAL_UART_MspInit+0x29c>)
 800209e:	2200      	movs	r2, #0
 80020a0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 80020a2:	482a      	ldr	r0, [pc, #168]	; (800214c <HAL_UART_MspInit+0x29c>)
 80020a4:	f000 fae0 	bl	8002668 <HAL_DMA_Init>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <HAL_UART_MspInit+0x202>
      Error_Handler();
 80020ae:	f7fe ff39 	bl	8000f24 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart7_rx);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a25      	ldr	r2, [pc, #148]	; (800214c <HAL_UART_MspInit+0x29c>)
 80020b6:	67da      	str	r2, [r3, #124]	; 0x7c
 80020b8:	4a24      	ldr	r2, [pc, #144]	; (800214c <HAL_UART_MspInit+0x29c>)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart7_tx.Instance = DMA1_Stream6;
 80020be:	4b25      	ldr	r3, [pc, #148]	; (8002154 <HAL_UART_MspInit+0x2a4>)
 80020c0:	4a25      	ldr	r2, [pc, #148]	; (8002158 <HAL_UART_MspInit+0x2a8>)
 80020c2:	601a      	str	r2, [r3, #0]
    hdma_uart7_tx.Init.Request = DMA_REQUEST_UART7_TX;
 80020c4:	4b23      	ldr	r3, [pc, #140]	; (8002154 <HAL_UART_MspInit+0x2a4>)
 80020c6:	2250      	movs	r2, #80	; 0x50
 80020c8:	605a      	str	r2, [r3, #4]
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020ca:	4b22      	ldr	r3, [pc, #136]	; (8002154 <HAL_UART_MspInit+0x2a4>)
 80020cc:	2240      	movs	r2, #64	; 0x40
 80020ce:	609a      	str	r2, [r3, #8]
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020d0:	4b20      	ldr	r3, [pc, #128]	; (8002154 <HAL_UART_MspInit+0x2a4>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	60da      	str	r2, [r3, #12]
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 80020d6:	4b1f      	ldr	r3, [pc, #124]	; (8002154 <HAL_UART_MspInit+0x2a4>)
 80020d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020dc:	611a      	str	r2, [r3, #16]
    hdma_uart7_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020de:	4b1d      	ldr	r3, [pc, #116]	; (8002154 <HAL_UART_MspInit+0x2a4>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	615a      	str	r2, [r3, #20]
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020e4:	4b1b      	ldr	r3, [pc, #108]	; (8002154 <HAL_UART_MspInit+0x2a4>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	619a      	str	r2, [r3, #24]
    hdma_uart7_tx.Init.Mode = DMA_NORMAL;
 80020ea:	4b1a      	ldr	r3, [pc, #104]	; (8002154 <HAL_UART_MspInit+0x2a4>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	61da      	str	r2, [r3, #28]
    hdma_uart7_tx.Init.Priority = DMA_PRIORITY_LOW;
 80020f0:	4b18      	ldr	r3, [pc, #96]	; (8002154 <HAL_UART_MspInit+0x2a4>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	621a      	str	r2, [r3, #32]
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020f6:	4b17      	ldr	r3, [pc, #92]	; (8002154 <HAL_UART_MspInit+0x2a4>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 80020fc:	4815      	ldr	r0, [pc, #84]	; (8002154 <HAL_UART_MspInit+0x2a4>)
 80020fe:	f000 fab3 	bl	8002668 <HAL_DMA_Init>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <HAL_UART_MspInit+0x25c>
      Error_Handler();
 8002108:	f7fe ff0c 	bl	8000f24 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart7_tx);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a11      	ldr	r2, [pc, #68]	; (8002154 <HAL_UART_MspInit+0x2a4>)
 8002110:	679a      	str	r2, [r3, #120]	; 0x78
 8002112:	4a10      	ldr	r2, [pc, #64]	; (8002154 <HAL_UART_MspInit+0x2a4>)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8002118:	2200      	movs	r2, #0
 800211a:	2100      	movs	r1, #0
 800211c:	2052      	movs	r0, #82	; 0x52
 800211e:	f000 f9e4 	bl	80024ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8002122:	2052      	movs	r0, #82	; 0x52
 8002124:	f000 f9fb 	bl	800251e <HAL_NVIC_EnableIRQ>
}
 8002128:	bf00      	nop
 800212a:	37e8      	adds	r7, #232	; 0xe8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	40004c00 	.word	0x40004c00
 8002134:	58024400 	.word	0x58024400
 8002138:	58020000 	.word	0x58020000
 800213c:	240007b8 	.word	0x240007b8
 8002140:	400204b8 	.word	0x400204b8
 8002144:	40007800 	.word	0x40007800
 8002148:	58021400 	.word	0x58021400
 800214c:	240006c8 	.word	0x240006c8
 8002150:	40020088 	.word	0x40020088
 8002154:	24000740 	.word	0x24000740
 8002158:	400200a0 	.word	0x400200a0

0800215c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800215c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002194 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002160:	f7fe fa98 	bl	8000694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002164:	480c      	ldr	r0, [pc, #48]	; (8002198 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002166:	490d      	ldr	r1, [pc, #52]	; (800219c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002168:	4a0d      	ldr	r2, [pc, #52]	; (80021a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800216a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800216c:	e002      	b.n	8002174 <LoopCopyDataInit>

0800216e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800216e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002170:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002172:	3304      	adds	r3, #4

08002174 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002174:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002176:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002178:	d3f9      	bcc.n	800216e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800217a:	4a0a      	ldr	r2, [pc, #40]	; (80021a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800217c:	4c0a      	ldr	r4, [pc, #40]	; (80021a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800217e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002180:	e001      	b.n	8002186 <LoopFillZerobss>

08002182 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002182:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002184:	3204      	adds	r2, #4

08002186 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002186:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002188:	d3fb      	bcc.n	8002182 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800218a:	f00f f82d 	bl	80111e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800218e:	f7fe fd61 	bl	8000c54 <main>
  bx  lr
 8002192:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002194:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002198:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800219c:	24000354 	.word	0x24000354
  ldr r2, =_sidata
 80021a0:	080140c4 	.word	0x080140c4
  ldr r2, =_sbss
 80021a4:	24000354 	.word	0x24000354
  ldr r4, =_ebss
 80021a8:	24002130 	.word	0x24002130

080021ac <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021ac:	e7fe      	b.n	80021ac <ADC3_IRQHandler>
	...

080021b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021b6:	2003      	movs	r0, #3
 80021b8:	f000 f98c 	bl	80024d4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80021bc:	f006 fa84 	bl	80086c8 <HAL_RCC_GetSysClockFreq>
 80021c0:	4602      	mov	r2, r0
 80021c2:	4b15      	ldr	r3, [pc, #84]	; (8002218 <HAL_Init+0x68>)
 80021c4:	699b      	ldr	r3, [r3, #24]
 80021c6:	0a1b      	lsrs	r3, r3, #8
 80021c8:	f003 030f 	and.w	r3, r3, #15
 80021cc:	4913      	ldr	r1, [pc, #76]	; (800221c <HAL_Init+0x6c>)
 80021ce:	5ccb      	ldrb	r3, [r1, r3]
 80021d0:	f003 031f 	and.w	r3, r3, #31
 80021d4:	fa22 f303 	lsr.w	r3, r2, r3
 80021d8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80021da:	4b0f      	ldr	r3, [pc, #60]	; (8002218 <HAL_Init+0x68>)
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	f003 030f 	and.w	r3, r3, #15
 80021e2:	4a0e      	ldr	r2, [pc, #56]	; (800221c <HAL_Init+0x6c>)
 80021e4:	5cd3      	ldrb	r3, [r2, r3]
 80021e6:	f003 031f 	and.w	r3, r3, #31
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	fa22 f303 	lsr.w	r3, r2, r3
 80021f0:	4a0b      	ldr	r2, [pc, #44]	; (8002220 <HAL_Init+0x70>)
 80021f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80021f4:	4a0b      	ldr	r2, [pc, #44]	; (8002224 <HAL_Init+0x74>)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021fa:	2000      	movs	r0, #0
 80021fc:	f000 f814 	bl	8002228 <HAL_InitTick>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e002      	b.n	8002210 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800220a:	f7ff fa6b 	bl	80016e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800220e:	2300      	movs	r3, #0
}
 8002210:	4618      	mov	r0, r3
 8002212:	3708      	adds	r7, #8
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	58024400 	.word	0x58024400
 800221c:	08013b90 	.word	0x08013b90
 8002220:	24000004 	.word	0x24000004
 8002224:	24000000 	.word	0x24000000

08002228 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002230:	4b15      	ldr	r3, [pc, #84]	; (8002288 <HAL_InitTick+0x60>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d101      	bne.n	800223c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e021      	b.n	8002280 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800223c:	4b13      	ldr	r3, [pc, #76]	; (800228c <HAL_InitTick+0x64>)
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	4b11      	ldr	r3, [pc, #68]	; (8002288 <HAL_InitTick+0x60>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	4619      	mov	r1, r3
 8002246:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800224a:	fbb3 f3f1 	udiv	r3, r3, r1
 800224e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002252:	4618      	mov	r0, r3
 8002254:	f000 f971 	bl	800253a <HAL_SYSTICK_Config>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e00e      	b.n	8002280 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2b0f      	cmp	r3, #15
 8002266:	d80a      	bhi.n	800227e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002268:	2200      	movs	r2, #0
 800226a:	6879      	ldr	r1, [r7, #4]
 800226c:	f04f 30ff 	mov.w	r0, #4294967295
 8002270:	f000 f93b 	bl	80024ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002274:	4a06      	ldr	r2, [pc, #24]	; (8002290 <HAL_InitTick+0x68>)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800227a:	2300      	movs	r3, #0
 800227c:	e000      	b.n	8002280 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
}
 8002280:	4618      	mov	r0, r3
 8002282:	3708      	adds	r7, #8
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	2400000c 	.word	0x2400000c
 800228c:	24000000 	.word	0x24000000
 8002290:	24000008 	.word	0x24000008

08002294 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002298:	4b06      	ldr	r3, [pc, #24]	; (80022b4 <HAL_IncTick+0x20>)
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	461a      	mov	r2, r3
 800229e:	4b06      	ldr	r3, [pc, #24]	; (80022b8 <HAL_IncTick+0x24>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4413      	add	r3, r2
 80022a4:	4a04      	ldr	r2, [pc, #16]	; (80022b8 <HAL_IncTick+0x24>)
 80022a6:	6013      	str	r3, [r2, #0]
}
 80022a8:	bf00      	nop
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	2400000c 	.word	0x2400000c
 80022b8:	24000830 	.word	0x24000830

080022bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  return uwTick;
 80022c0:	4b03      	ldr	r3, [pc, #12]	; (80022d0 <HAL_GetTick+0x14>)
 80022c2:	681b      	ldr	r3, [r3, #0]
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	24000830 	.word	0x24000830

080022d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022dc:	f7ff ffee 	bl	80022bc <HAL_GetTick>
 80022e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ec:	d005      	beq.n	80022fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022ee:	4b0a      	ldr	r3, [pc, #40]	; (8002318 <HAL_Delay+0x44>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	461a      	mov	r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	4413      	add	r3, r2
 80022f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022fa:	bf00      	nop
 80022fc:	f7ff ffde 	bl	80022bc <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	68fa      	ldr	r2, [r7, #12]
 8002308:	429a      	cmp	r2, r3
 800230a:	d8f7      	bhi.n	80022fc <HAL_Delay+0x28>
  {
  }
}
 800230c:	bf00      	nop
 800230e:	bf00      	nop
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	2400000c 	.word	0x2400000c

0800231c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002320:	4b03      	ldr	r3, [pc, #12]	; (8002330 <HAL_GetREVID+0x14>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	0c1b      	lsrs	r3, r3, #16
}
 8002326:	4618      	mov	r0, r3
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr
 8002330:	5c001000 	.word	0x5c001000

08002334 <__NVIC_SetPriorityGrouping>:
{
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f003 0307 	and.w	r3, r3, #7
 8002342:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002344:	4b0b      	ldr	r3, [pc, #44]	; (8002374 <__NVIC_SetPriorityGrouping+0x40>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800234a:	68ba      	ldr	r2, [r7, #8]
 800234c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002350:	4013      	ands	r3, r2
 8002352:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800235c:	4b06      	ldr	r3, [pc, #24]	; (8002378 <__NVIC_SetPriorityGrouping+0x44>)
 800235e:	4313      	orrs	r3, r2
 8002360:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002362:	4a04      	ldr	r2, [pc, #16]	; (8002374 <__NVIC_SetPriorityGrouping+0x40>)
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	60d3      	str	r3, [r2, #12]
}
 8002368:	bf00      	nop
 800236a:	3714      	adds	r7, #20
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr
 8002374:	e000ed00 	.word	0xe000ed00
 8002378:	05fa0000 	.word	0x05fa0000

0800237c <__NVIC_GetPriorityGrouping>:
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002380:	4b04      	ldr	r3, [pc, #16]	; (8002394 <__NVIC_GetPriorityGrouping+0x18>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	0a1b      	lsrs	r3, r3, #8
 8002386:	f003 0307 	and.w	r3, r3, #7
}
 800238a:	4618      	mov	r0, r3
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr
 8002394:	e000ed00 	.word	0xe000ed00

08002398 <__NVIC_EnableIRQ>:
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	4603      	mov	r3, r0
 80023a0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80023a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	db0b      	blt.n	80023c2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023aa:	88fb      	ldrh	r3, [r7, #6]
 80023ac:	f003 021f 	and.w	r2, r3, #31
 80023b0:	4907      	ldr	r1, [pc, #28]	; (80023d0 <__NVIC_EnableIRQ+0x38>)
 80023b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023b6:	095b      	lsrs	r3, r3, #5
 80023b8:	2001      	movs	r0, #1
 80023ba:	fa00 f202 	lsl.w	r2, r0, r2
 80023be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80023c2:	bf00      	nop
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	e000e100 	.word	0xe000e100

080023d4 <__NVIC_SetPriority>:
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	4603      	mov	r3, r0
 80023dc:	6039      	str	r1, [r7, #0]
 80023de:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80023e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	db0a      	blt.n	80023fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	b2da      	uxtb	r2, r3
 80023ec:	490c      	ldr	r1, [pc, #48]	; (8002420 <__NVIC_SetPriority+0x4c>)
 80023ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023f2:	0112      	lsls	r2, r2, #4
 80023f4:	b2d2      	uxtb	r2, r2
 80023f6:	440b      	add	r3, r1
 80023f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80023fc:	e00a      	b.n	8002414 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	b2da      	uxtb	r2, r3
 8002402:	4908      	ldr	r1, [pc, #32]	; (8002424 <__NVIC_SetPriority+0x50>)
 8002404:	88fb      	ldrh	r3, [r7, #6]
 8002406:	f003 030f 	and.w	r3, r3, #15
 800240a:	3b04      	subs	r3, #4
 800240c:	0112      	lsls	r2, r2, #4
 800240e:	b2d2      	uxtb	r2, r2
 8002410:	440b      	add	r3, r1
 8002412:	761a      	strb	r2, [r3, #24]
}
 8002414:	bf00      	nop
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr
 8002420:	e000e100 	.word	0xe000e100
 8002424:	e000ed00 	.word	0xe000ed00

08002428 <NVIC_EncodePriority>:
{
 8002428:	b480      	push	{r7}
 800242a:	b089      	sub	sp, #36	; 0x24
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f003 0307 	and.w	r3, r3, #7
 800243a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	f1c3 0307 	rsb	r3, r3, #7
 8002442:	2b04      	cmp	r3, #4
 8002444:	bf28      	it	cs
 8002446:	2304      	movcs	r3, #4
 8002448:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	3304      	adds	r3, #4
 800244e:	2b06      	cmp	r3, #6
 8002450:	d902      	bls.n	8002458 <NVIC_EncodePriority+0x30>
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	3b03      	subs	r3, #3
 8002456:	e000      	b.n	800245a <NVIC_EncodePriority+0x32>
 8002458:	2300      	movs	r3, #0
 800245a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800245c:	f04f 32ff 	mov.w	r2, #4294967295
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	fa02 f303 	lsl.w	r3, r2, r3
 8002466:	43da      	mvns	r2, r3
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	401a      	ands	r2, r3
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002470:	f04f 31ff 	mov.w	r1, #4294967295
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	fa01 f303 	lsl.w	r3, r1, r3
 800247a:	43d9      	mvns	r1, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002480:	4313      	orrs	r3, r2
}
 8002482:	4618      	mov	r0, r3
 8002484:	3724      	adds	r7, #36	; 0x24
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
	...

08002490 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	3b01      	subs	r3, #1
 800249c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024a0:	d301      	bcc.n	80024a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024a2:	2301      	movs	r3, #1
 80024a4:	e00f      	b.n	80024c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024a6:	4a0a      	ldr	r2, [pc, #40]	; (80024d0 <SysTick_Config+0x40>)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	3b01      	subs	r3, #1
 80024ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024ae:	210f      	movs	r1, #15
 80024b0:	f04f 30ff 	mov.w	r0, #4294967295
 80024b4:	f7ff ff8e 	bl	80023d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024b8:	4b05      	ldr	r3, [pc, #20]	; (80024d0 <SysTick_Config+0x40>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024be:	4b04      	ldr	r3, [pc, #16]	; (80024d0 <SysTick_Config+0x40>)
 80024c0:	2207      	movs	r2, #7
 80024c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	e000e010 	.word	0xe000e010

080024d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f7ff ff29 	bl	8002334 <__NVIC_SetPriorityGrouping>
}
 80024e2:	bf00      	nop
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b086      	sub	sp, #24
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	4603      	mov	r3, r0
 80024f2:	60b9      	str	r1, [r7, #8]
 80024f4:	607a      	str	r2, [r7, #4]
 80024f6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80024f8:	f7ff ff40 	bl	800237c <__NVIC_GetPriorityGrouping>
 80024fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	68b9      	ldr	r1, [r7, #8]
 8002502:	6978      	ldr	r0, [r7, #20]
 8002504:	f7ff ff90 	bl	8002428 <NVIC_EncodePriority>
 8002508:	4602      	mov	r2, r0
 800250a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800250e:	4611      	mov	r1, r2
 8002510:	4618      	mov	r0, r3
 8002512:	f7ff ff5f 	bl	80023d4 <__NVIC_SetPriority>
}
 8002516:	bf00      	nop
 8002518:	3718      	adds	r7, #24
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b082      	sub	sp, #8
 8002522:	af00      	add	r7, sp, #0
 8002524:	4603      	mov	r3, r0
 8002526:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002528:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff ff33 	bl	8002398 <__NVIC_EnableIRQ>
}
 8002532:	bf00      	nop
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800253a:	b580      	push	{r7, lr}
 800253c:	b082      	sub	sp, #8
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f7ff ffa4 	bl	8002490 <SysTick_Config>
 8002548:	4603      	mov	r3, r0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
	...

08002554 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002558:	f3bf 8f5f 	dmb	sy
}
 800255c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800255e:	4b07      	ldr	r3, [pc, #28]	; (800257c <HAL_MPU_Disable+0x28>)
 8002560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002562:	4a06      	ldr	r2, [pc, #24]	; (800257c <HAL_MPU_Disable+0x28>)
 8002564:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002568:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800256a:	4b05      	ldr	r3, [pc, #20]	; (8002580 <HAL_MPU_Disable+0x2c>)
 800256c:	2200      	movs	r2, #0
 800256e:	605a      	str	r2, [r3, #4]
}
 8002570:	bf00      	nop
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	e000ed00 	.word	0xe000ed00
 8002580:	e000ed90 	.word	0xe000ed90

08002584 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800258c:	4a0b      	ldr	r2, [pc, #44]	; (80025bc <HAL_MPU_Enable+0x38>)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f043 0301 	orr.w	r3, r3, #1
 8002594:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002596:	4b0a      	ldr	r3, [pc, #40]	; (80025c0 <HAL_MPU_Enable+0x3c>)
 8002598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259a:	4a09      	ldr	r2, [pc, #36]	; (80025c0 <HAL_MPU_Enable+0x3c>)
 800259c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025a0:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80025a2:	f3bf 8f4f 	dsb	sy
}
 80025a6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80025a8:	f3bf 8f6f 	isb	sy
}
 80025ac:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80025ae:	bf00      	nop
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	e000ed90 	.word	0xe000ed90
 80025c0:	e000ed00 	.word	0xe000ed00

080025c4 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	785a      	ldrb	r2, [r3, #1]
 80025d0:	4b1d      	ldr	r3, [pc, #116]	; (8002648 <HAL_MPU_ConfigRegion+0x84>)
 80025d2:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d029      	beq.n	8002630 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80025dc:	4a1a      	ldr	r2, [pc, #104]	; (8002648 <HAL_MPU_ConfigRegion+0x84>)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	7b1b      	ldrb	r3, [r3, #12]
 80025e8:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	7adb      	ldrb	r3, [r3, #11]
 80025ee:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80025f0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	7a9b      	ldrb	r3, [r3, #10]
 80025f6:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80025f8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	7b5b      	ldrb	r3, [r3, #13]
 80025fe:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002600:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	7b9b      	ldrb	r3, [r3, #14]
 8002606:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002608:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	7bdb      	ldrb	r3, [r3, #15]
 800260e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002610:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	7a5b      	ldrb	r3, [r3, #9]
 8002616:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002618:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	7a1b      	ldrb	r3, [r3, #8]
 800261e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002620:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	7812      	ldrb	r2, [r2, #0]
 8002626:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002628:	4a07      	ldr	r2, [pc, #28]	; (8002648 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800262a:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800262c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800262e:	e005      	b.n	800263c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8002630:	4b05      	ldr	r3, [pc, #20]	; (8002648 <HAL_MPU_ConfigRegion+0x84>)
 8002632:	2200      	movs	r2, #0
 8002634:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8002636:	4b04      	ldr	r3, [pc, #16]	; (8002648 <HAL_MPU_ConfigRegion+0x84>)
 8002638:	2200      	movs	r2, #0
 800263a:	611a      	str	r2, [r3, #16]
}
 800263c:	bf00      	nop
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr
 8002648:	e000ed90 	.word	0xe000ed90

0800264c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8002650:	f000 f802 	bl	8002658 <HAL_SYSTICK_Callback>
}
 8002654:	bf00      	nop
 8002656:	bd80      	pop	{r7, pc}

08002658 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800265c:	bf00      	nop
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
	...

08002668 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b086      	sub	sp, #24
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002670:	f7ff fe24 	bl	80022bc <HAL_GetTick>
 8002674:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d101      	bne.n	8002680 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e316      	b.n	8002cae <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a66      	ldr	r2, [pc, #408]	; (8002820 <HAL_DMA_Init+0x1b8>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d04a      	beq.n	8002720 <HAL_DMA_Init+0xb8>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a65      	ldr	r2, [pc, #404]	; (8002824 <HAL_DMA_Init+0x1bc>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d045      	beq.n	8002720 <HAL_DMA_Init+0xb8>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a63      	ldr	r2, [pc, #396]	; (8002828 <HAL_DMA_Init+0x1c0>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d040      	beq.n	8002720 <HAL_DMA_Init+0xb8>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a62      	ldr	r2, [pc, #392]	; (800282c <HAL_DMA_Init+0x1c4>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d03b      	beq.n	8002720 <HAL_DMA_Init+0xb8>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a60      	ldr	r2, [pc, #384]	; (8002830 <HAL_DMA_Init+0x1c8>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d036      	beq.n	8002720 <HAL_DMA_Init+0xb8>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a5f      	ldr	r2, [pc, #380]	; (8002834 <HAL_DMA_Init+0x1cc>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d031      	beq.n	8002720 <HAL_DMA_Init+0xb8>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a5d      	ldr	r2, [pc, #372]	; (8002838 <HAL_DMA_Init+0x1d0>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d02c      	beq.n	8002720 <HAL_DMA_Init+0xb8>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a5c      	ldr	r2, [pc, #368]	; (800283c <HAL_DMA_Init+0x1d4>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d027      	beq.n	8002720 <HAL_DMA_Init+0xb8>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a5a      	ldr	r2, [pc, #360]	; (8002840 <HAL_DMA_Init+0x1d8>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d022      	beq.n	8002720 <HAL_DMA_Init+0xb8>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a59      	ldr	r2, [pc, #356]	; (8002844 <HAL_DMA_Init+0x1dc>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d01d      	beq.n	8002720 <HAL_DMA_Init+0xb8>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a57      	ldr	r2, [pc, #348]	; (8002848 <HAL_DMA_Init+0x1e0>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d018      	beq.n	8002720 <HAL_DMA_Init+0xb8>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a56      	ldr	r2, [pc, #344]	; (800284c <HAL_DMA_Init+0x1e4>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d013      	beq.n	8002720 <HAL_DMA_Init+0xb8>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a54      	ldr	r2, [pc, #336]	; (8002850 <HAL_DMA_Init+0x1e8>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d00e      	beq.n	8002720 <HAL_DMA_Init+0xb8>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a53      	ldr	r2, [pc, #332]	; (8002854 <HAL_DMA_Init+0x1ec>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d009      	beq.n	8002720 <HAL_DMA_Init+0xb8>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a51      	ldr	r2, [pc, #324]	; (8002858 <HAL_DMA_Init+0x1f0>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d004      	beq.n	8002720 <HAL_DMA_Init+0xb8>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a50      	ldr	r2, [pc, #320]	; (800285c <HAL_DMA_Init+0x1f4>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d101      	bne.n	8002724 <HAL_DMA_Init+0xbc>
 8002720:	2301      	movs	r3, #1
 8002722:	e000      	b.n	8002726 <HAL_DMA_Init+0xbe>
 8002724:	2300      	movs	r3, #0
 8002726:	2b00      	cmp	r3, #0
 8002728:	f000 813b 	beq.w	80029a2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2202      	movs	r2, #2
 8002738:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a37      	ldr	r2, [pc, #220]	; (8002820 <HAL_DMA_Init+0x1b8>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d04a      	beq.n	80027dc <HAL_DMA_Init+0x174>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a36      	ldr	r2, [pc, #216]	; (8002824 <HAL_DMA_Init+0x1bc>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d045      	beq.n	80027dc <HAL_DMA_Init+0x174>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a34      	ldr	r2, [pc, #208]	; (8002828 <HAL_DMA_Init+0x1c0>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d040      	beq.n	80027dc <HAL_DMA_Init+0x174>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a33      	ldr	r2, [pc, #204]	; (800282c <HAL_DMA_Init+0x1c4>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d03b      	beq.n	80027dc <HAL_DMA_Init+0x174>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a31      	ldr	r2, [pc, #196]	; (8002830 <HAL_DMA_Init+0x1c8>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d036      	beq.n	80027dc <HAL_DMA_Init+0x174>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a30      	ldr	r2, [pc, #192]	; (8002834 <HAL_DMA_Init+0x1cc>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d031      	beq.n	80027dc <HAL_DMA_Init+0x174>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a2e      	ldr	r2, [pc, #184]	; (8002838 <HAL_DMA_Init+0x1d0>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d02c      	beq.n	80027dc <HAL_DMA_Init+0x174>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a2d      	ldr	r2, [pc, #180]	; (800283c <HAL_DMA_Init+0x1d4>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d027      	beq.n	80027dc <HAL_DMA_Init+0x174>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a2b      	ldr	r2, [pc, #172]	; (8002840 <HAL_DMA_Init+0x1d8>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d022      	beq.n	80027dc <HAL_DMA_Init+0x174>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a2a      	ldr	r2, [pc, #168]	; (8002844 <HAL_DMA_Init+0x1dc>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d01d      	beq.n	80027dc <HAL_DMA_Init+0x174>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a28      	ldr	r2, [pc, #160]	; (8002848 <HAL_DMA_Init+0x1e0>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d018      	beq.n	80027dc <HAL_DMA_Init+0x174>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a27      	ldr	r2, [pc, #156]	; (800284c <HAL_DMA_Init+0x1e4>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d013      	beq.n	80027dc <HAL_DMA_Init+0x174>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a25      	ldr	r2, [pc, #148]	; (8002850 <HAL_DMA_Init+0x1e8>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d00e      	beq.n	80027dc <HAL_DMA_Init+0x174>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a24      	ldr	r2, [pc, #144]	; (8002854 <HAL_DMA_Init+0x1ec>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d009      	beq.n	80027dc <HAL_DMA_Init+0x174>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a22      	ldr	r2, [pc, #136]	; (8002858 <HAL_DMA_Init+0x1f0>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d004      	beq.n	80027dc <HAL_DMA_Init+0x174>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a21      	ldr	r2, [pc, #132]	; (800285c <HAL_DMA_Init+0x1f4>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d108      	bne.n	80027ee <HAL_DMA_Init+0x186>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f022 0201 	bic.w	r2, r2, #1
 80027ea:	601a      	str	r2, [r3, #0]
 80027ec:	e007      	b.n	80027fe <HAL_DMA_Init+0x196>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f022 0201 	bic.w	r2, r2, #1
 80027fc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80027fe:	e02f      	b.n	8002860 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002800:	f7ff fd5c 	bl	80022bc <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b05      	cmp	r3, #5
 800280c:	d928      	bls.n	8002860 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2220      	movs	r2, #32
 8002812:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2203      	movs	r2, #3
 8002818:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e246      	b.n	8002cae <HAL_DMA_Init+0x646>
 8002820:	40020010 	.word	0x40020010
 8002824:	40020028 	.word	0x40020028
 8002828:	40020040 	.word	0x40020040
 800282c:	40020058 	.word	0x40020058
 8002830:	40020070 	.word	0x40020070
 8002834:	40020088 	.word	0x40020088
 8002838:	400200a0 	.word	0x400200a0
 800283c:	400200b8 	.word	0x400200b8
 8002840:	40020410 	.word	0x40020410
 8002844:	40020428 	.word	0x40020428
 8002848:	40020440 	.word	0x40020440
 800284c:	40020458 	.word	0x40020458
 8002850:	40020470 	.word	0x40020470
 8002854:	40020488 	.word	0x40020488
 8002858:	400204a0 	.word	0x400204a0
 800285c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1c8      	bne.n	8002800 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002876:	697a      	ldr	r2, [r7, #20]
 8002878:	4b83      	ldr	r3, [pc, #524]	; (8002a88 <HAL_DMA_Init+0x420>)
 800287a:	4013      	ands	r3, r2
 800287c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002886:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002892:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800289e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a1b      	ldr	r3, [r3, #32]
 80028a4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80028a6:	697a      	ldr	r2, [r7, #20]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b0:	2b04      	cmp	r3, #4
 80028b2:	d107      	bne.n	80028c4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028bc:	4313      	orrs	r3, r2
 80028be:	697a      	ldr	r2, [r7, #20]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80028c4:	4b71      	ldr	r3, [pc, #452]	; (8002a8c <HAL_DMA_Init+0x424>)
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	4b71      	ldr	r3, [pc, #452]	; (8002a90 <HAL_DMA_Init+0x428>)
 80028ca:	4013      	ands	r3, r2
 80028cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028d0:	d328      	bcc.n	8002924 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	2b28      	cmp	r3, #40	; 0x28
 80028d8:	d903      	bls.n	80028e2 <HAL_DMA_Init+0x27a>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	2b2e      	cmp	r3, #46	; 0x2e
 80028e0:	d917      	bls.n	8002912 <HAL_DMA_Init+0x2aa>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	2b3e      	cmp	r3, #62	; 0x3e
 80028e8:	d903      	bls.n	80028f2 <HAL_DMA_Init+0x28a>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	2b42      	cmp	r3, #66	; 0x42
 80028f0:	d90f      	bls.n	8002912 <HAL_DMA_Init+0x2aa>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	2b46      	cmp	r3, #70	; 0x46
 80028f8:	d903      	bls.n	8002902 <HAL_DMA_Init+0x29a>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	2b48      	cmp	r3, #72	; 0x48
 8002900:	d907      	bls.n	8002912 <HAL_DMA_Init+0x2aa>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	2b4e      	cmp	r3, #78	; 0x4e
 8002908:	d905      	bls.n	8002916 <HAL_DMA_Init+0x2ae>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	2b52      	cmp	r3, #82	; 0x52
 8002910:	d801      	bhi.n	8002916 <HAL_DMA_Init+0x2ae>
 8002912:	2301      	movs	r3, #1
 8002914:	e000      	b.n	8002918 <HAL_DMA_Init+0x2b0>
 8002916:	2300      	movs	r3, #0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d003      	beq.n	8002924 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002922:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	697a      	ldr	r2, [r7, #20]
 800292a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	f023 0307 	bic.w	r3, r3, #7
 800293a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002940:	697a      	ldr	r2, [r7, #20]
 8002942:	4313      	orrs	r3, r2
 8002944:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294a:	2b04      	cmp	r3, #4
 800294c:	d117      	bne.n	800297e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002952:	697a      	ldr	r2, [r7, #20]
 8002954:	4313      	orrs	r3, r2
 8002956:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800295c:	2b00      	cmp	r3, #0
 800295e:	d00e      	beq.n	800297e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f002 fb4d 	bl	8005000 <DMA_CheckFifoParam>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d008      	beq.n	800297e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2240      	movs	r2, #64	; 0x40
 8002970:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2201      	movs	r2, #1
 8002976:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e197      	b.n	8002cae <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	697a      	ldr	r2, [r7, #20]
 8002984:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f002 fa88 	bl	8004e9c <DMA_CalcBaseAndBitshift>
 800298c:	4603      	mov	r3, r0
 800298e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002994:	f003 031f 	and.w	r3, r3, #31
 8002998:	223f      	movs	r2, #63	; 0x3f
 800299a:	409a      	lsls	r2, r3
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	609a      	str	r2, [r3, #8]
 80029a0:	e0cd      	b.n	8002b3e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a3b      	ldr	r2, [pc, #236]	; (8002a94 <HAL_DMA_Init+0x42c>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d022      	beq.n	80029f2 <HAL_DMA_Init+0x38a>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a39      	ldr	r2, [pc, #228]	; (8002a98 <HAL_DMA_Init+0x430>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d01d      	beq.n	80029f2 <HAL_DMA_Init+0x38a>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a38      	ldr	r2, [pc, #224]	; (8002a9c <HAL_DMA_Init+0x434>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d018      	beq.n	80029f2 <HAL_DMA_Init+0x38a>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a36      	ldr	r2, [pc, #216]	; (8002aa0 <HAL_DMA_Init+0x438>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d013      	beq.n	80029f2 <HAL_DMA_Init+0x38a>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a35      	ldr	r2, [pc, #212]	; (8002aa4 <HAL_DMA_Init+0x43c>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d00e      	beq.n	80029f2 <HAL_DMA_Init+0x38a>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a33      	ldr	r2, [pc, #204]	; (8002aa8 <HAL_DMA_Init+0x440>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d009      	beq.n	80029f2 <HAL_DMA_Init+0x38a>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a32      	ldr	r2, [pc, #200]	; (8002aac <HAL_DMA_Init+0x444>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d004      	beq.n	80029f2 <HAL_DMA_Init+0x38a>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a30      	ldr	r2, [pc, #192]	; (8002ab0 <HAL_DMA_Init+0x448>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d101      	bne.n	80029f6 <HAL_DMA_Init+0x38e>
 80029f2:	2301      	movs	r3, #1
 80029f4:	e000      	b.n	80029f8 <HAL_DMA_Init+0x390>
 80029f6:	2300      	movs	r3, #0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	f000 8097 	beq.w	8002b2c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a24      	ldr	r2, [pc, #144]	; (8002a94 <HAL_DMA_Init+0x42c>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d021      	beq.n	8002a4c <HAL_DMA_Init+0x3e4>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a22      	ldr	r2, [pc, #136]	; (8002a98 <HAL_DMA_Init+0x430>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d01c      	beq.n	8002a4c <HAL_DMA_Init+0x3e4>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a21      	ldr	r2, [pc, #132]	; (8002a9c <HAL_DMA_Init+0x434>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d017      	beq.n	8002a4c <HAL_DMA_Init+0x3e4>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a1f      	ldr	r2, [pc, #124]	; (8002aa0 <HAL_DMA_Init+0x438>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d012      	beq.n	8002a4c <HAL_DMA_Init+0x3e4>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a1e      	ldr	r2, [pc, #120]	; (8002aa4 <HAL_DMA_Init+0x43c>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d00d      	beq.n	8002a4c <HAL_DMA_Init+0x3e4>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a1c      	ldr	r2, [pc, #112]	; (8002aa8 <HAL_DMA_Init+0x440>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d008      	beq.n	8002a4c <HAL_DMA_Init+0x3e4>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a1b      	ldr	r2, [pc, #108]	; (8002aac <HAL_DMA_Init+0x444>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d003      	beq.n	8002a4c <HAL_DMA_Init+0x3e4>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a19      	ldr	r2, [pc, #100]	; (8002ab0 <HAL_DMA_Init+0x448>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2202      	movs	r2, #2
 8002a5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002a66:	697a      	ldr	r2, [r7, #20]
 8002a68:	4b12      	ldr	r3, [pc, #72]	; (8002ab4 <HAL_DMA_Init+0x44c>)
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	2b40      	cmp	r3, #64	; 0x40
 8002a74:	d020      	beq.n	8002ab8 <HAL_DMA_Init+0x450>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	2b80      	cmp	r3, #128	; 0x80
 8002a7c:	d102      	bne.n	8002a84 <HAL_DMA_Init+0x41c>
 8002a7e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002a82:	e01a      	b.n	8002aba <HAL_DMA_Init+0x452>
 8002a84:	2300      	movs	r3, #0
 8002a86:	e018      	b.n	8002aba <HAL_DMA_Init+0x452>
 8002a88:	fe10803f 	.word	0xfe10803f
 8002a8c:	5c001000 	.word	0x5c001000
 8002a90:	ffff0000 	.word	0xffff0000
 8002a94:	58025408 	.word	0x58025408
 8002a98:	5802541c 	.word	0x5802541c
 8002a9c:	58025430 	.word	0x58025430
 8002aa0:	58025444 	.word	0x58025444
 8002aa4:	58025458 	.word	0x58025458
 8002aa8:	5802546c 	.word	0x5802546c
 8002aac:	58025480 	.word	0x58025480
 8002ab0:	58025494 	.word	0x58025494
 8002ab4:	fffe000f 	.word	0xfffe000f
 8002ab8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	68d2      	ldr	r2, [r2, #12]
 8002abe:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002ac0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002ac8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002ad0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002ad8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	69db      	ldr	r3, [r3, #28]
 8002ade:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002ae0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a1b      	ldr	r3, [r3, #32]
 8002ae6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002ae8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002aea:	697a      	ldr	r2, [r7, #20]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	697a      	ldr	r2, [r7, #20]
 8002af6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	461a      	mov	r2, r3
 8002afe:	4b6e      	ldr	r3, [pc, #440]	; (8002cb8 <HAL_DMA_Init+0x650>)
 8002b00:	4413      	add	r3, r2
 8002b02:	4a6e      	ldr	r2, [pc, #440]	; (8002cbc <HAL_DMA_Init+0x654>)
 8002b04:	fba2 2303 	umull	r2, r3, r2, r3
 8002b08:	091b      	lsrs	r3, r3, #4
 8002b0a:	009a      	lsls	r2, r3, #2
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f002 f9c3 	bl	8004e9c <DMA_CalcBaseAndBitshift>
 8002b16:	4603      	mov	r3, r0
 8002b18:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b1e:	f003 031f 	and.w	r3, r3, #31
 8002b22:	2201      	movs	r2, #1
 8002b24:	409a      	lsls	r2, r3
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	605a      	str	r2, [r3, #4]
 8002b2a:	e008      	b.n	8002b3e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2240      	movs	r2, #64	; 0x40
 8002b30:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2203      	movs	r2, #3
 8002b36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e0b7      	b.n	8002cae <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a5f      	ldr	r2, [pc, #380]	; (8002cc0 <HAL_DMA_Init+0x658>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d072      	beq.n	8002c2e <HAL_DMA_Init+0x5c6>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a5d      	ldr	r2, [pc, #372]	; (8002cc4 <HAL_DMA_Init+0x65c>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d06d      	beq.n	8002c2e <HAL_DMA_Init+0x5c6>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a5c      	ldr	r2, [pc, #368]	; (8002cc8 <HAL_DMA_Init+0x660>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d068      	beq.n	8002c2e <HAL_DMA_Init+0x5c6>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a5a      	ldr	r2, [pc, #360]	; (8002ccc <HAL_DMA_Init+0x664>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d063      	beq.n	8002c2e <HAL_DMA_Init+0x5c6>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a59      	ldr	r2, [pc, #356]	; (8002cd0 <HAL_DMA_Init+0x668>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d05e      	beq.n	8002c2e <HAL_DMA_Init+0x5c6>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a57      	ldr	r2, [pc, #348]	; (8002cd4 <HAL_DMA_Init+0x66c>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d059      	beq.n	8002c2e <HAL_DMA_Init+0x5c6>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a56      	ldr	r2, [pc, #344]	; (8002cd8 <HAL_DMA_Init+0x670>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d054      	beq.n	8002c2e <HAL_DMA_Init+0x5c6>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a54      	ldr	r2, [pc, #336]	; (8002cdc <HAL_DMA_Init+0x674>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d04f      	beq.n	8002c2e <HAL_DMA_Init+0x5c6>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a53      	ldr	r2, [pc, #332]	; (8002ce0 <HAL_DMA_Init+0x678>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d04a      	beq.n	8002c2e <HAL_DMA_Init+0x5c6>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a51      	ldr	r2, [pc, #324]	; (8002ce4 <HAL_DMA_Init+0x67c>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d045      	beq.n	8002c2e <HAL_DMA_Init+0x5c6>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a50      	ldr	r2, [pc, #320]	; (8002ce8 <HAL_DMA_Init+0x680>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d040      	beq.n	8002c2e <HAL_DMA_Init+0x5c6>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a4e      	ldr	r2, [pc, #312]	; (8002cec <HAL_DMA_Init+0x684>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d03b      	beq.n	8002c2e <HAL_DMA_Init+0x5c6>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a4d      	ldr	r2, [pc, #308]	; (8002cf0 <HAL_DMA_Init+0x688>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d036      	beq.n	8002c2e <HAL_DMA_Init+0x5c6>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a4b      	ldr	r2, [pc, #300]	; (8002cf4 <HAL_DMA_Init+0x68c>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d031      	beq.n	8002c2e <HAL_DMA_Init+0x5c6>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a4a      	ldr	r2, [pc, #296]	; (8002cf8 <HAL_DMA_Init+0x690>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d02c      	beq.n	8002c2e <HAL_DMA_Init+0x5c6>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a48      	ldr	r2, [pc, #288]	; (8002cfc <HAL_DMA_Init+0x694>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d027      	beq.n	8002c2e <HAL_DMA_Init+0x5c6>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a47      	ldr	r2, [pc, #284]	; (8002d00 <HAL_DMA_Init+0x698>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d022      	beq.n	8002c2e <HAL_DMA_Init+0x5c6>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a45      	ldr	r2, [pc, #276]	; (8002d04 <HAL_DMA_Init+0x69c>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d01d      	beq.n	8002c2e <HAL_DMA_Init+0x5c6>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a44      	ldr	r2, [pc, #272]	; (8002d08 <HAL_DMA_Init+0x6a0>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d018      	beq.n	8002c2e <HAL_DMA_Init+0x5c6>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a42      	ldr	r2, [pc, #264]	; (8002d0c <HAL_DMA_Init+0x6a4>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d013      	beq.n	8002c2e <HAL_DMA_Init+0x5c6>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a41      	ldr	r2, [pc, #260]	; (8002d10 <HAL_DMA_Init+0x6a8>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d00e      	beq.n	8002c2e <HAL_DMA_Init+0x5c6>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a3f      	ldr	r2, [pc, #252]	; (8002d14 <HAL_DMA_Init+0x6ac>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d009      	beq.n	8002c2e <HAL_DMA_Init+0x5c6>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a3e      	ldr	r2, [pc, #248]	; (8002d18 <HAL_DMA_Init+0x6b0>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d004      	beq.n	8002c2e <HAL_DMA_Init+0x5c6>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a3c      	ldr	r2, [pc, #240]	; (8002d1c <HAL_DMA_Init+0x6b4>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d101      	bne.n	8002c32 <HAL_DMA_Init+0x5ca>
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e000      	b.n	8002c34 <HAL_DMA_Init+0x5cc>
 8002c32:	2300      	movs	r3, #0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d032      	beq.n	8002c9e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f002 fa5d 	bl	80050f8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	2b80      	cmp	r3, #128	; 0x80
 8002c44:	d102      	bne.n	8002c4c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685a      	ldr	r2, [r3, #4]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c54:	b2d2      	uxtb	r2, r2
 8002c56:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002c60:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d010      	beq.n	8002c8c <HAL_DMA_Init+0x624>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	2b08      	cmp	r3, #8
 8002c70:	d80c      	bhi.n	8002c8c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f002 fada 	bl	800522c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002c88:	605a      	str	r2, [r3, #4]
 8002c8a:	e008      	b.n	8002c9e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3718      	adds	r7, #24
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	a7fdabf8 	.word	0xa7fdabf8
 8002cbc:	cccccccd 	.word	0xcccccccd
 8002cc0:	40020010 	.word	0x40020010
 8002cc4:	40020028 	.word	0x40020028
 8002cc8:	40020040 	.word	0x40020040
 8002ccc:	40020058 	.word	0x40020058
 8002cd0:	40020070 	.word	0x40020070
 8002cd4:	40020088 	.word	0x40020088
 8002cd8:	400200a0 	.word	0x400200a0
 8002cdc:	400200b8 	.word	0x400200b8
 8002ce0:	40020410 	.word	0x40020410
 8002ce4:	40020428 	.word	0x40020428
 8002ce8:	40020440 	.word	0x40020440
 8002cec:	40020458 	.word	0x40020458
 8002cf0:	40020470 	.word	0x40020470
 8002cf4:	40020488 	.word	0x40020488
 8002cf8:	400204a0 	.word	0x400204a0
 8002cfc:	400204b8 	.word	0x400204b8
 8002d00:	58025408 	.word	0x58025408
 8002d04:	5802541c 	.word	0x5802541c
 8002d08:	58025430 	.word	0x58025430
 8002d0c:	58025444 	.word	0x58025444
 8002d10:	58025458 	.word	0x58025458
 8002d14:	5802546c 	.word	0x5802546c
 8002d18:	58025480 	.word	0x58025480
 8002d1c:	58025494 	.word	0x58025494

08002d20 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
 8002d2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d101      	bne.n	8002d3c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e226      	b.n	800318a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d101      	bne.n	8002d4a <HAL_DMA_Start_IT+0x2a>
 8002d46:	2302      	movs	r3, #2
 8002d48:	e21f      	b.n	800318a <HAL_DMA_Start_IT+0x46a>
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	f040 820a 	bne.w	8003174 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2202      	movs	r2, #2
 8002d64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a68      	ldr	r2, [pc, #416]	; (8002f14 <HAL_DMA_Start_IT+0x1f4>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d04a      	beq.n	8002e0e <HAL_DMA_Start_IT+0xee>
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a66      	ldr	r2, [pc, #408]	; (8002f18 <HAL_DMA_Start_IT+0x1f8>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d045      	beq.n	8002e0e <HAL_DMA_Start_IT+0xee>
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a65      	ldr	r2, [pc, #404]	; (8002f1c <HAL_DMA_Start_IT+0x1fc>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d040      	beq.n	8002e0e <HAL_DMA_Start_IT+0xee>
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a63      	ldr	r2, [pc, #396]	; (8002f20 <HAL_DMA_Start_IT+0x200>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d03b      	beq.n	8002e0e <HAL_DMA_Start_IT+0xee>
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a62      	ldr	r2, [pc, #392]	; (8002f24 <HAL_DMA_Start_IT+0x204>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d036      	beq.n	8002e0e <HAL_DMA_Start_IT+0xee>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a60      	ldr	r2, [pc, #384]	; (8002f28 <HAL_DMA_Start_IT+0x208>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d031      	beq.n	8002e0e <HAL_DMA_Start_IT+0xee>
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a5f      	ldr	r2, [pc, #380]	; (8002f2c <HAL_DMA_Start_IT+0x20c>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d02c      	beq.n	8002e0e <HAL_DMA_Start_IT+0xee>
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a5d      	ldr	r2, [pc, #372]	; (8002f30 <HAL_DMA_Start_IT+0x210>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d027      	beq.n	8002e0e <HAL_DMA_Start_IT+0xee>
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a5c      	ldr	r2, [pc, #368]	; (8002f34 <HAL_DMA_Start_IT+0x214>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d022      	beq.n	8002e0e <HAL_DMA_Start_IT+0xee>
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a5a      	ldr	r2, [pc, #360]	; (8002f38 <HAL_DMA_Start_IT+0x218>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d01d      	beq.n	8002e0e <HAL_DMA_Start_IT+0xee>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a59      	ldr	r2, [pc, #356]	; (8002f3c <HAL_DMA_Start_IT+0x21c>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d018      	beq.n	8002e0e <HAL_DMA_Start_IT+0xee>
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a57      	ldr	r2, [pc, #348]	; (8002f40 <HAL_DMA_Start_IT+0x220>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d013      	beq.n	8002e0e <HAL_DMA_Start_IT+0xee>
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a56      	ldr	r2, [pc, #344]	; (8002f44 <HAL_DMA_Start_IT+0x224>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d00e      	beq.n	8002e0e <HAL_DMA_Start_IT+0xee>
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a54      	ldr	r2, [pc, #336]	; (8002f48 <HAL_DMA_Start_IT+0x228>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d009      	beq.n	8002e0e <HAL_DMA_Start_IT+0xee>
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a53      	ldr	r2, [pc, #332]	; (8002f4c <HAL_DMA_Start_IT+0x22c>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d004      	beq.n	8002e0e <HAL_DMA_Start_IT+0xee>
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a51      	ldr	r2, [pc, #324]	; (8002f50 <HAL_DMA_Start_IT+0x230>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d108      	bne.n	8002e20 <HAL_DMA_Start_IT+0x100>
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f022 0201 	bic.w	r2, r2, #1
 8002e1c:	601a      	str	r2, [r3, #0]
 8002e1e:	e007      	b.n	8002e30 <HAL_DMA_Start_IT+0x110>
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f022 0201 	bic.w	r2, r2, #1
 8002e2e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	68b9      	ldr	r1, [r7, #8]
 8002e36:	68f8      	ldr	r0, [r7, #12]
 8002e38:	f001 fe84 	bl	8004b44 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a34      	ldr	r2, [pc, #208]	; (8002f14 <HAL_DMA_Start_IT+0x1f4>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d04a      	beq.n	8002edc <HAL_DMA_Start_IT+0x1bc>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a33      	ldr	r2, [pc, #204]	; (8002f18 <HAL_DMA_Start_IT+0x1f8>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d045      	beq.n	8002edc <HAL_DMA_Start_IT+0x1bc>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a31      	ldr	r2, [pc, #196]	; (8002f1c <HAL_DMA_Start_IT+0x1fc>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d040      	beq.n	8002edc <HAL_DMA_Start_IT+0x1bc>
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a30      	ldr	r2, [pc, #192]	; (8002f20 <HAL_DMA_Start_IT+0x200>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d03b      	beq.n	8002edc <HAL_DMA_Start_IT+0x1bc>
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a2e      	ldr	r2, [pc, #184]	; (8002f24 <HAL_DMA_Start_IT+0x204>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d036      	beq.n	8002edc <HAL_DMA_Start_IT+0x1bc>
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a2d      	ldr	r2, [pc, #180]	; (8002f28 <HAL_DMA_Start_IT+0x208>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d031      	beq.n	8002edc <HAL_DMA_Start_IT+0x1bc>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a2b      	ldr	r2, [pc, #172]	; (8002f2c <HAL_DMA_Start_IT+0x20c>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d02c      	beq.n	8002edc <HAL_DMA_Start_IT+0x1bc>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a2a      	ldr	r2, [pc, #168]	; (8002f30 <HAL_DMA_Start_IT+0x210>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d027      	beq.n	8002edc <HAL_DMA_Start_IT+0x1bc>
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a28      	ldr	r2, [pc, #160]	; (8002f34 <HAL_DMA_Start_IT+0x214>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d022      	beq.n	8002edc <HAL_DMA_Start_IT+0x1bc>
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a27      	ldr	r2, [pc, #156]	; (8002f38 <HAL_DMA_Start_IT+0x218>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d01d      	beq.n	8002edc <HAL_DMA_Start_IT+0x1bc>
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a25      	ldr	r2, [pc, #148]	; (8002f3c <HAL_DMA_Start_IT+0x21c>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d018      	beq.n	8002edc <HAL_DMA_Start_IT+0x1bc>
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a24      	ldr	r2, [pc, #144]	; (8002f40 <HAL_DMA_Start_IT+0x220>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d013      	beq.n	8002edc <HAL_DMA_Start_IT+0x1bc>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a22      	ldr	r2, [pc, #136]	; (8002f44 <HAL_DMA_Start_IT+0x224>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d00e      	beq.n	8002edc <HAL_DMA_Start_IT+0x1bc>
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a21      	ldr	r2, [pc, #132]	; (8002f48 <HAL_DMA_Start_IT+0x228>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d009      	beq.n	8002edc <HAL_DMA_Start_IT+0x1bc>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a1f      	ldr	r2, [pc, #124]	; (8002f4c <HAL_DMA_Start_IT+0x22c>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d004      	beq.n	8002edc <HAL_DMA_Start_IT+0x1bc>
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a1e      	ldr	r2, [pc, #120]	; (8002f50 <HAL_DMA_Start_IT+0x230>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d101      	bne.n	8002ee0 <HAL_DMA_Start_IT+0x1c0>
 8002edc:	2301      	movs	r3, #1
 8002ede:	e000      	b.n	8002ee2 <HAL_DMA_Start_IT+0x1c2>
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d036      	beq.n	8002f54 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f023 021e 	bic.w	r2, r3, #30
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f042 0216 	orr.w	r2, r2, #22
 8002ef8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d03e      	beq.n	8002f80 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f042 0208 	orr.w	r2, r2, #8
 8002f10:	601a      	str	r2, [r3, #0]
 8002f12:	e035      	b.n	8002f80 <HAL_DMA_Start_IT+0x260>
 8002f14:	40020010 	.word	0x40020010
 8002f18:	40020028 	.word	0x40020028
 8002f1c:	40020040 	.word	0x40020040
 8002f20:	40020058 	.word	0x40020058
 8002f24:	40020070 	.word	0x40020070
 8002f28:	40020088 	.word	0x40020088
 8002f2c:	400200a0 	.word	0x400200a0
 8002f30:	400200b8 	.word	0x400200b8
 8002f34:	40020410 	.word	0x40020410
 8002f38:	40020428 	.word	0x40020428
 8002f3c:	40020440 	.word	0x40020440
 8002f40:	40020458 	.word	0x40020458
 8002f44:	40020470 	.word	0x40020470
 8002f48:	40020488 	.word	0x40020488
 8002f4c:	400204a0 	.word	0x400204a0
 8002f50:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f023 020e 	bic.w	r2, r3, #14
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f042 020a 	orr.w	r2, r2, #10
 8002f66:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d007      	beq.n	8002f80 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f042 0204 	orr.w	r2, r2, #4
 8002f7e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a83      	ldr	r2, [pc, #524]	; (8003194 <HAL_DMA_Start_IT+0x474>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d072      	beq.n	8003070 <HAL_DMA_Start_IT+0x350>
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a82      	ldr	r2, [pc, #520]	; (8003198 <HAL_DMA_Start_IT+0x478>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d06d      	beq.n	8003070 <HAL_DMA_Start_IT+0x350>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a80      	ldr	r2, [pc, #512]	; (800319c <HAL_DMA_Start_IT+0x47c>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d068      	beq.n	8003070 <HAL_DMA_Start_IT+0x350>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a7f      	ldr	r2, [pc, #508]	; (80031a0 <HAL_DMA_Start_IT+0x480>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d063      	beq.n	8003070 <HAL_DMA_Start_IT+0x350>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a7d      	ldr	r2, [pc, #500]	; (80031a4 <HAL_DMA_Start_IT+0x484>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d05e      	beq.n	8003070 <HAL_DMA_Start_IT+0x350>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a7c      	ldr	r2, [pc, #496]	; (80031a8 <HAL_DMA_Start_IT+0x488>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d059      	beq.n	8003070 <HAL_DMA_Start_IT+0x350>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a7a      	ldr	r2, [pc, #488]	; (80031ac <HAL_DMA_Start_IT+0x48c>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d054      	beq.n	8003070 <HAL_DMA_Start_IT+0x350>
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a79      	ldr	r2, [pc, #484]	; (80031b0 <HAL_DMA_Start_IT+0x490>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d04f      	beq.n	8003070 <HAL_DMA_Start_IT+0x350>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a77      	ldr	r2, [pc, #476]	; (80031b4 <HAL_DMA_Start_IT+0x494>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d04a      	beq.n	8003070 <HAL_DMA_Start_IT+0x350>
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a76      	ldr	r2, [pc, #472]	; (80031b8 <HAL_DMA_Start_IT+0x498>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d045      	beq.n	8003070 <HAL_DMA_Start_IT+0x350>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a74      	ldr	r2, [pc, #464]	; (80031bc <HAL_DMA_Start_IT+0x49c>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d040      	beq.n	8003070 <HAL_DMA_Start_IT+0x350>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a73      	ldr	r2, [pc, #460]	; (80031c0 <HAL_DMA_Start_IT+0x4a0>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d03b      	beq.n	8003070 <HAL_DMA_Start_IT+0x350>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a71      	ldr	r2, [pc, #452]	; (80031c4 <HAL_DMA_Start_IT+0x4a4>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d036      	beq.n	8003070 <HAL_DMA_Start_IT+0x350>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a70      	ldr	r2, [pc, #448]	; (80031c8 <HAL_DMA_Start_IT+0x4a8>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d031      	beq.n	8003070 <HAL_DMA_Start_IT+0x350>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a6e      	ldr	r2, [pc, #440]	; (80031cc <HAL_DMA_Start_IT+0x4ac>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d02c      	beq.n	8003070 <HAL_DMA_Start_IT+0x350>
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a6d      	ldr	r2, [pc, #436]	; (80031d0 <HAL_DMA_Start_IT+0x4b0>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d027      	beq.n	8003070 <HAL_DMA_Start_IT+0x350>
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a6b      	ldr	r2, [pc, #428]	; (80031d4 <HAL_DMA_Start_IT+0x4b4>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d022      	beq.n	8003070 <HAL_DMA_Start_IT+0x350>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a6a      	ldr	r2, [pc, #424]	; (80031d8 <HAL_DMA_Start_IT+0x4b8>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d01d      	beq.n	8003070 <HAL_DMA_Start_IT+0x350>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a68      	ldr	r2, [pc, #416]	; (80031dc <HAL_DMA_Start_IT+0x4bc>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d018      	beq.n	8003070 <HAL_DMA_Start_IT+0x350>
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a67      	ldr	r2, [pc, #412]	; (80031e0 <HAL_DMA_Start_IT+0x4c0>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d013      	beq.n	8003070 <HAL_DMA_Start_IT+0x350>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a65      	ldr	r2, [pc, #404]	; (80031e4 <HAL_DMA_Start_IT+0x4c4>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d00e      	beq.n	8003070 <HAL_DMA_Start_IT+0x350>
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a64      	ldr	r2, [pc, #400]	; (80031e8 <HAL_DMA_Start_IT+0x4c8>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d009      	beq.n	8003070 <HAL_DMA_Start_IT+0x350>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a62      	ldr	r2, [pc, #392]	; (80031ec <HAL_DMA_Start_IT+0x4cc>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d004      	beq.n	8003070 <HAL_DMA_Start_IT+0x350>
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a61      	ldr	r2, [pc, #388]	; (80031f0 <HAL_DMA_Start_IT+0x4d0>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d101      	bne.n	8003074 <HAL_DMA_Start_IT+0x354>
 8003070:	2301      	movs	r3, #1
 8003072:	e000      	b.n	8003076 <HAL_DMA_Start_IT+0x356>
 8003074:	2300      	movs	r3, #0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d01a      	beq.n	80030b0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d007      	beq.n	8003098 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003092:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003096:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800309c:	2b00      	cmp	r3, #0
 800309e:	d007      	beq.n	80030b0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030ae:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a37      	ldr	r2, [pc, #220]	; (8003194 <HAL_DMA_Start_IT+0x474>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d04a      	beq.n	8003150 <HAL_DMA_Start_IT+0x430>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a36      	ldr	r2, [pc, #216]	; (8003198 <HAL_DMA_Start_IT+0x478>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d045      	beq.n	8003150 <HAL_DMA_Start_IT+0x430>
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a34      	ldr	r2, [pc, #208]	; (800319c <HAL_DMA_Start_IT+0x47c>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d040      	beq.n	8003150 <HAL_DMA_Start_IT+0x430>
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a33      	ldr	r2, [pc, #204]	; (80031a0 <HAL_DMA_Start_IT+0x480>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d03b      	beq.n	8003150 <HAL_DMA_Start_IT+0x430>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a31      	ldr	r2, [pc, #196]	; (80031a4 <HAL_DMA_Start_IT+0x484>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d036      	beq.n	8003150 <HAL_DMA_Start_IT+0x430>
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a30      	ldr	r2, [pc, #192]	; (80031a8 <HAL_DMA_Start_IT+0x488>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d031      	beq.n	8003150 <HAL_DMA_Start_IT+0x430>
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a2e      	ldr	r2, [pc, #184]	; (80031ac <HAL_DMA_Start_IT+0x48c>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d02c      	beq.n	8003150 <HAL_DMA_Start_IT+0x430>
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a2d      	ldr	r2, [pc, #180]	; (80031b0 <HAL_DMA_Start_IT+0x490>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d027      	beq.n	8003150 <HAL_DMA_Start_IT+0x430>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a2b      	ldr	r2, [pc, #172]	; (80031b4 <HAL_DMA_Start_IT+0x494>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d022      	beq.n	8003150 <HAL_DMA_Start_IT+0x430>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a2a      	ldr	r2, [pc, #168]	; (80031b8 <HAL_DMA_Start_IT+0x498>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d01d      	beq.n	8003150 <HAL_DMA_Start_IT+0x430>
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a28      	ldr	r2, [pc, #160]	; (80031bc <HAL_DMA_Start_IT+0x49c>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d018      	beq.n	8003150 <HAL_DMA_Start_IT+0x430>
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a27      	ldr	r2, [pc, #156]	; (80031c0 <HAL_DMA_Start_IT+0x4a0>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d013      	beq.n	8003150 <HAL_DMA_Start_IT+0x430>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a25      	ldr	r2, [pc, #148]	; (80031c4 <HAL_DMA_Start_IT+0x4a4>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d00e      	beq.n	8003150 <HAL_DMA_Start_IT+0x430>
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a24      	ldr	r2, [pc, #144]	; (80031c8 <HAL_DMA_Start_IT+0x4a8>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d009      	beq.n	8003150 <HAL_DMA_Start_IT+0x430>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a22      	ldr	r2, [pc, #136]	; (80031cc <HAL_DMA_Start_IT+0x4ac>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d004      	beq.n	8003150 <HAL_DMA_Start_IT+0x430>
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a21      	ldr	r2, [pc, #132]	; (80031d0 <HAL_DMA_Start_IT+0x4b0>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d108      	bne.n	8003162 <HAL_DMA_Start_IT+0x442>
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f042 0201 	orr.w	r2, r2, #1
 800315e:	601a      	str	r2, [r3, #0]
 8003160:	e012      	b.n	8003188 <HAL_DMA_Start_IT+0x468>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f042 0201 	orr.w	r2, r2, #1
 8003170:	601a      	str	r2, [r3, #0]
 8003172:	e009      	b.n	8003188 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003182:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003188:	7dfb      	ldrb	r3, [r7, #23]
}
 800318a:	4618      	mov	r0, r3
 800318c:	3718      	adds	r7, #24
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	40020010 	.word	0x40020010
 8003198:	40020028 	.word	0x40020028
 800319c:	40020040 	.word	0x40020040
 80031a0:	40020058 	.word	0x40020058
 80031a4:	40020070 	.word	0x40020070
 80031a8:	40020088 	.word	0x40020088
 80031ac:	400200a0 	.word	0x400200a0
 80031b0:	400200b8 	.word	0x400200b8
 80031b4:	40020410 	.word	0x40020410
 80031b8:	40020428 	.word	0x40020428
 80031bc:	40020440 	.word	0x40020440
 80031c0:	40020458 	.word	0x40020458
 80031c4:	40020470 	.word	0x40020470
 80031c8:	40020488 	.word	0x40020488
 80031cc:	400204a0 	.word	0x400204a0
 80031d0:	400204b8 	.word	0x400204b8
 80031d4:	58025408 	.word	0x58025408
 80031d8:	5802541c 	.word	0x5802541c
 80031dc:	58025430 	.word	0x58025430
 80031e0:	58025444 	.word	0x58025444
 80031e4:	58025458 	.word	0x58025458
 80031e8:	5802546c 	.word	0x5802546c
 80031ec:	58025480 	.word	0x58025480
 80031f0:	58025494 	.word	0x58025494

080031f4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b086      	sub	sp, #24
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80031fc:	f7ff f85e 	bl	80022bc <HAL_GetTick>
 8003200:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d101      	bne.n	800320c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e2dc      	b.n	80037c6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003212:	b2db      	uxtb	r3, r3
 8003214:	2b02      	cmp	r3, #2
 8003216:	d008      	beq.n	800322a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2280      	movs	r2, #128	; 0x80
 800321c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e2cd      	b.n	80037c6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a76      	ldr	r2, [pc, #472]	; (8003408 <HAL_DMA_Abort+0x214>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d04a      	beq.n	80032ca <HAL_DMA_Abort+0xd6>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a74      	ldr	r2, [pc, #464]	; (800340c <HAL_DMA_Abort+0x218>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d045      	beq.n	80032ca <HAL_DMA_Abort+0xd6>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a73      	ldr	r2, [pc, #460]	; (8003410 <HAL_DMA_Abort+0x21c>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d040      	beq.n	80032ca <HAL_DMA_Abort+0xd6>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a71      	ldr	r2, [pc, #452]	; (8003414 <HAL_DMA_Abort+0x220>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d03b      	beq.n	80032ca <HAL_DMA_Abort+0xd6>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a70      	ldr	r2, [pc, #448]	; (8003418 <HAL_DMA_Abort+0x224>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d036      	beq.n	80032ca <HAL_DMA_Abort+0xd6>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a6e      	ldr	r2, [pc, #440]	; (800341c <HAL_DMA_Abort+0x228>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d031      	beq.n	80032ca <HAL_DMA_Abort+0xd6>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a6d      	ldr	r2, [pc, #436]	; (8003420 <HAL_DMA_Abort+0x22c>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d02c      	beq.n	80032ca <HAL_DMA_Abort+0xd6>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a6b      	ldr	r2, [pc, #428]	; (8003424 <HAL_DMA_Abort+0x230>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d027      	beq.n	80032ca <HAL_DMA_Abort+0xd6>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a6a      	ldr	r2, [pc, #424]	; (8003428 <HAL_DMA_Abort+0x234>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d022      	beq.n	80032ca <HAL_DMA_Abort+0xd6>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a68      	ldr	r2, [pc, #416]	; (800342c <HAL_DMA_Abort+0x238>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d01d      	beq.n	80032ca <HAL_DMA_Abort+0xd6>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a67      	ldr	r2, [pc, #412]	; (8003430 <HAL_DMA_Abort+0x23c>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d018      	beq.n	80032ca <HAL_DMA_Abort+0xd6>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a65      	ldr	r2, [pc, #404]	; (8003434 <HAL_DMA_Abort+0x240>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d013      	beq.n	80032ca <HAL_DMA_Abort+0xd6>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a64      	ldr	r2, [pc, #400]	; (8003438 <HAL_DMA_Abort+0x244>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d00e      	beq.n	80032ca <HAL_DMA_Abort+0xd6>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a62      	ldr	r2, [pc, #392]	; (800343c <HAL_DMA_Abort+0x248>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d009      	beq.n	80032ca <HAL_DMA_Abort+0xd6>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a61      	ldr	r2, [pc, #388]	; (8003440 <HAL_DMA_Abort+0x24c>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d004      	beq.n	80032ca <HAL_DMA_Abort+0xd6>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a5f      	ldr	r2, [pc, #380]	; (8003444 <HAL_DMA_Abort+0x250>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d101      	bne.n	80032ce <HAL_DMA_Abort+0xda>
 80032ca:	2301      	movs	r3, #1
 80032cc:	e000      	b.n	80032d0 <HAL_DMA_Abort+0xdc>
 80032ce:	2300      	movs	r3, #0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d013      	beq.n	80032fc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f022 021e 	bic.w	r2, r2, #30
 80032e2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	695a      	ldr	r2, [r3, #20]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032f2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	617b      	str	r3, [r7, #20]
 80032fa:	e00a      	b.n	8003312 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f022 020e 	bic.w	r2, r2, #14
 800330a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a3c      	ldr	r2, [pc, #240]	; (8003408 <HAL_DMA_Abort+0x214>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d072      	beq.n	8003402 <HAL_DMA_Abort+0x20e>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a3a      	ldr	r2, [pc, #232]	; (800340c <HAL_DMA_Abort+0x218>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d06d      	beq.n	8003402 <HAL_DMA_Abort+0x20e>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a39      	ldr	r2, [pc, #228]	; (8003410 <HAL_DMA_Abort+0x21c>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d068      	beq.n	8003402 <HAL_DMA_Abort+0x20e>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a37      	ldr	r2, [pc, #220]	; (8003414 <HAL_DMA_Abort+0x220>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d063      	beq.n	8003402 <HAL_DMA_Abort+0x20e>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a36      	ldr	r2, [pc, #216]	; (8003418 <HAL_DMA_Abort+0x224>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d05e      	beq.n	8003402 <HAL_DMA_Abort+0x20e>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a34      	ldr	r2, [pc, #208]	; (800341c <HAL_DMA_Abort+0x228>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d059      	beq.n	8003402 <HAL_DMA_Abort+0x20e>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a33      	ldr	r2, [pc, #204]	; (8003420 <HAL_DMA_Abort+0x22c>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d054      	beq.n	8003402 <HAL_DMA_Abort+0x20e>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a31      	ldr	r2, [pc, #196]	; (8003424 <HAL_DMA_Abort+0x230>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d04f      	beq.n	8003402 <HAL_DMA_Abort+0x20e>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a30      	ldr	r2, [pc, #192]	; (8003428 <HAL_DMA_Abort+0x234>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d04a      	beq.n	8003402 <HAL_DMA_Abort+0x20e>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a2e      	ldr	r2, [pc, #184]	; (800342c <HAL_DMA_Abort+0x238>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d045      	beq.n	8003402 <HAL_DMA_Abort+0x20e>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a2d      	ldr	r2, [pc, #180]	; (8003430 <HAL_DMA_Abort+0x23c>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d040      	beq.n	8003402 <HAL_DMA_Abort+0x20e>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a2b      	ldr	r2, [pc, #172]	; (8003434 <HAL_DMA_Abort+0x240>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d03b      	beq.n	8003402 <HAL_DMA_Abort+0x20e>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a2a      	ldr	r2, [pc, #168]	; (8003438 <HAL_DMA_Abort+0x244>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d036      	beq.n	8003402 <HAL_DMA_Abort+0x20e>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a28      	ldr	r2, [pc, #160]	; (800343c <HAL_DMA_Abort+0x248>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d031      	beq.n	8003402 <HAL_DMA_Abort+0x20e>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a27      	ldr	r2, [pc, #156]	; (8003440 <HAL_DMA_Abort+0x24c>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d02c      	beq.n	8003402 <HAL_DMA_Abort+0x20e>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a25      	ldr	r2, [pc, #148]	; (8003444 <HAL_DMA_Abort+0x250>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d027      	beq.n	8003402 <HAL_DMA_Abort+0x20e>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a24      	ldr	r2, [pc, #144]	; (8003448 <HAL_DMA_Abort+0x254>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d022      	beq.n	8003402 <HAL_DMA_Abort+0x20e>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a22      	ldr	r2, [pc, #136]	; (800344c <HAL_DMA_Abort+0x258>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d01d      	beq.n	8003402 <HAL_DMA_Abort+0x20e>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a21      	ldr	r2, [pc, #132]	; (8003450 <HAL_DMA_Abort+0x25c>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d018      	beq.n	8003402 <HAL_DMA_Abort+0x20e>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a1f      	ldr	r2, [pc, #124]	; (8003454 <HAL_DMA_Abort+0x260>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d013      	beq.n	8003402 <HAL_DMA_Abort+0x20e>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a1e      	ldr	r2, [pc, #120]	; (8003458 <HAL_DMA_Abort+0x264>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d00e      	beq.n	8003402 <HAL_DMA_Abort+0x20e>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a1c      	ldr	r2, [pc, #112]	; (800345c <HAL_DMA_Abort+0x268>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d009      	beq.n	8003402 <HAL_DMA_Abort+0x20e>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a1b      	ldr	r2, [pc, #108]	; (8003460 <HAL_DMA_Abort+0x26c>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d004      	beq.n	8003402 <HAL_DMA_Abort+0x20e>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a19      	ldr	r2, [pc, #100]	; (8003464 <HAL_DMA_Abort+0x270>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d132      	bne.n	8003468 <HAL_DMA_Abort+0x274>
 8003402:	2301      	movs	r3, #1
 8003404:	e031      	b.n	800346a <HAL_DMA_Abort+0x276>
 8003406:	bf00      	nop
 8003408:	40020010 	.word	0x40020010
 800340c:	40020028 	.word	0x40020028
 8003410:	40020040 	.word	0x40020040
 8003414:	40020058 	.word	0x40020058
 8003418:	40020070 	.word	0x40020070
 800341c:	40020088 	.word	0x40020088
 8003420:	400200a0 	.word	0x400200a0
 8003424:	400200b8 	.word	0x400200b8
 8003428:	40020410 	.word	0x40020410
 800342c:	40020428 	.word	0x40020428
 8003430:	40020440 	.word	0x40020440
 8003434:	40020458 	.word	0x40020458
 8003438:	40020470 	.word	0x40020470
 800343c:	40020488 	.word	0x40020488
 8003440:	400204a0 	.word	0x400204a0
 8003444:	400204b8 	.word	0x400204b8
 8003448:	58025408 	.word	0x58025408
 800344c:	5802541c 	.word	0x5802541c
 8003450:	58025430 	.word	0x58025430
 8003454:	58025444 	.word	0x58025444
 8003458:	58025458 	.word	0x58025458
 800345c:	5802546c 	.word	0x5802546c
 8003460:	58025480 	.word	0x58025480
 8003464:	58025494 	.word	0x58025494
 8003468:	2300      	movs	r3, #0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d007      	beq.n	800347e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003478:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800347c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a6d      	ldr	r2, [pc, #436]	; (8003638 <HAL_DMA_Abort+0x444>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d04a      	beq.n	800351e <HAL_DMA_Abort+0x32a>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a6b      	ldr	r2, [pc, #428]	; (800363c <HAL_DMA_Abort+0x448>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d045      	beq.n	800351e <HAL_DMA_Abort+0x32a>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a6a      	ldr	r2, [pc, #424]	; (8003640 <HAL_DMA_Abort+0x44c>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d040      	beq.n	800351e <HAL_DMA_Abort+0x32a>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a68      	ldr	r2, [pc, #416]	; (8003644 <HAL_DMA_Abort+0x450>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d03b      	beq.n	800351e <HAL_DMA_Abort+0x32a>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a67      	ldr	r2, [pc, #412]	; (8003648 <HAL_DMA_Abort+0x454>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d036      	beq.n	800351e <HAL_DMA_Abort+0x32a>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a65      	ldr	r2, [pc, #404]	; (800364c <HAL_DMA_Abort+0x458>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d031      	beq.n	800351e <HAL_DMA_Abort+0x32a>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a64      	ldr	r2, [pc, #400]	; (8003650 <HAL_DMA_Abort+0x45c>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d02c      	beq.n	800351e <HAL_DMA_Abort+0x32a>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a62      	ldr	r2, [pc, #392]	; (8003654 <HAL_DMA_Abort+0x460>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d027      	beq.n	800351e <HAL_DMA_Abort+0x32a>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a61      	ldr	r2, [pc, #388]	; (8003658 <HAL_DMA_Abort+0x464>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d022      	beq.n	800351e <HAL_DMA_Abort+0x32a>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a5f      	ldr	r2, [pc, #380]	; (800365c <HAL_DMA_Abort+0x468>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d01d      	beq.n	800351e <HAL_DMA_Abort+0x32a>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a5e      	ldr	r2, [pc, #376]	; (8003660 <HAL_DMA_Abort+0x46c>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d018      	beq.n	800351e <HAL_DMA_Abort+0x32a>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a5c      	ldr	r2, [pc, #368]	; (8003664 <HAL_DMA_Abort+0x470>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d013      	beq.n	800351e <HAL_DMA_Abort+0x32a>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a5b      	ldr	r2, [pc, #364]	; (8003668 <HAL_DMA_Abort+0x474>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d00e      	beq.n	800351e <HAL_DMA_Abort+0x32a>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a59      	ldr	r2, [pc, #356]	; (800366c <HAL_DMA_Abort+0x478>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d009      	beq.n	800351e <HAL_DMA_Abort+0x32a>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a58      	ldr	r2, [pc, #352]	; (8003670 <HAL_DMA_Abort+0x47c>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d004      	beq.n	800351e <HAL_DMA_Abort+0x32a>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a56      	ldr	r2, [pc, #344]	; (8003674 <HAL_DMA_Abort+0x480>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d108      	bne.n	8003530 <HAL_DMA_Abort+0x33c>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f022 0201 	bic.w	r2, r2, #1
 800352c:	601a      	str	r2, [r3, #0]
 800352e:	e007      	b.n	8003540 <HAL_DMA_Abort+0x34c>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f022 0201 	bic.w	r2, r2, #1
 800353e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003540:	e013      	b.n	800356a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003542:	f7fe febb 	bl	80022bc <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	2b05      	cmp	r3, #5
 800354e:	d90c      	bls.n	800356a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2220      	movs	r2, #32
 8003554:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2203      	movs	r2, #3
 8003562:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e12d      	b.n	80037c6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1e5      	bne.n	8003542 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a2f      	ldr	r2, [pc, #188]	; (8003638 <HAL_DMA_Abort+0x444>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d04a      	beq.n	8003616 <HAL_DMA_Abort+0x422>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a2d      	ldr	r2, [pc, #180]	; (800363c <HAL_DMA_Abort+0x448>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d045      	beq.n	8003616 <HAL_DMA_Abort+0x422>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a2c      	ldr	r2, [pc, #176]	; (8003640 <HAL_DMA_Abort+0x44c>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d040      	beq.n	8003616 <HAL_DMA_Abort+0x422>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a2a      	ldr	r2, [pc, #168]	; (8003644 <HAL_DMA_Abort+0x450>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d03b      	beq.n	8003616 <HAL_DMA_Abort+0x422>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a29      	ldr	r2, [pc, #164]	; (8003648 <HAL_DMA_Abort+0x454>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d036      	beq.n	8003616 <HAL_DMA_Abort+0x422>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a27      	ldr	r2, [pc, #156]	; (800364c <HAL_DMA_Abort+0x458>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d031      	beq.n	8003616 <HAL_DMA_Abort+0x422>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a26      	ldr	r2, [pc, #152]	; (8003650 <HAL_DMA_Abort+0x45c>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d02c      	beq.n	8003616 <HAL_DMA_Abort+0x422>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a24      	ldr	r2, [pc, #144]	; (8003654 <HAL_DMA_Abort+0x460>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d027      	beq.n	8003616 <HAL_DMA_Abort+0x422>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a23      	ldr	r2, [pc, #140]	; (8003658 <HAL_DMA_Abort+0x464>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d022      	beq.n	8003616 <HAL_DMA_Abort+0x422>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a21      	ldr	r2, [pc, #132]	; (800365c <HAL_DMA_Abort+0x468>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d01d      	beq.n	8003616 <HAL_DMA_Abort+0x422>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a20      	ldr	r2, [pc, #128]	; (8003660 <HAL_DMA_Abort+0x46c>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d018      	beq.n	8003616 <HAL_DMA_Abort+0x422>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a1e      	ldr	r2, [pc, #120]	; (8003664 <HAL_DMA_Abort+0x470>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d013      	beq.n	8003616 <HAL_DMA_Abort+0x422>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a1d      	ldr	r2, [pc, #116]	; (8003668 <HAL_DMA_Abort+0x474>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d00e      	beq.n	8003616 <HAL_DMA_Abort+0x422>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a1b      	ldr	r2, [pc, #108]	; (800366c <HAL_DMA_Abort+0x478>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d009      	beq.n	8003616 <HAL_DMA_Abort+0x422>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a1a      	ldr	r2, [pc, #104]	; (8003670 <HAL_DMA_Abort+0x47c>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d004      	beq.n	8003616 <HAL_DMA_Abort+0x422>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a18      	ldr	r2, [pc, #96]	; (8003674 <HAL_DMA_Abort+0x480>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d101      	bne.n	800361a <HAL_DMA_Abort+0x426>
 8003616:	2301      	movs	r3, #1
 8003618:	e000      	b.n	800361c <HAL_DMA_Abort+0x428>
 800361a:	2300      	movs	r3, #0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d02b      	beq.n	8003678 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003624:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800362a:	f003 031f 	and.w	r3, r3, #31
 800362e:	223f      	movs	r2, #63	; 0x3f
 8003630:	409a      	lsls	r2, r3
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	609a      	str	r2, [r3, #8]
 8003636:	e02a      	b.n	800368e <HAL_DMA_Abort+0x49a>
 8003638:	40020010 	.word	0x40020010
 800363c:	40020028 	.word	0x40020028
 8003640:	40020040 	.word	0x40020040
 8003644:	40020058 	.word	0x40020058
 8003648:	40020070 	.word	0x40020070
 800364c:	40020088 	.word	0x40020088
 8003650:	400200a0 	.word	0x400200a0
 8003654:	400200b8 	.word	0x400200b8
 8003658:	40020410 	.word	0x40020410
 800365c:	40020428 	.word	0x40020428
 8003660:	40020440 	.word	0x40020440
 8003664:	40020458 	.word	0x40020458
 8003668:	40020470 	.word	0x40020470
 800366c:	40020488 	.word	0x40020488
 8003670:	400204a0 	.word	0x400204a0
 8003674:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800367c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003682:	f003 031f 	and.w	r3, r3, #31
 8003686:	2201      	movs	r2, #1
 8003688:	409a      	lsls	r2, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a4f      	ldr	r2, [pc, #316]	; (80037d0 <HAL_DMA_Abort+0x5dc>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d072      	beq.n	800377e <HAL_DMA_Abort+0x58a>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a4d      	ldr	r2, [pc, #308]	; (80037d4 <HAL_DMA_Abort+0x5e0>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d06d      	beq.n	800377e <HAL_DMA_Abort+0x58a>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a4c      	ldr	r2, [pc, #304]	; (80037d8 <HAL_DMA_Abort+0x5e4>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d068      	beq.n	800377e <HAL_DMA_Abort+0x58a>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a4a      	ldr	r2, [pc, #296]	; (80037dc <HAL_DMA_Abort+0x5e8>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d063      	beq.n	800377e <HAL_DMA_Abort+0x58a>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a49      	ldr	r2, [pc, #292]	; (80037e0 <HAL_DMA_Abort+0x5ec>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d05e      	beq.n	800377e <HAL_DMA_Abort+0x58a>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a47      	ldr	r2, [pc, #284]	; (80037e4 <HAL_DMA_Abort+0x5f0>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d059      	beq.n	800377e <HAL_DMA_Abort+0x58a>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a46      	ldr	r2, [pc, #280]	; (80037e8 <HAL_DMA_Abort+0x5f4>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d054      	beq.n	800377e <HAL_DMA_Abort+0x58a>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a44      	ldr	r2, [pc, #272]	; (80037ec <HAL_DMA_Abort+0x5f8>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d04f      	beq.n	800377e <HAL_DMA_Abort+0x58a>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a43      	ldr	r2, [pc, #268]	; (80037f0 <HAL_DMA_Abort+0x5fc>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d04a      	beq.n	800377e <HAL_DMA_Abort+0x58a>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a41      	ldr	r2, [pc, #260]	; (80037f4 <HAL_DMA_Abort+0x600>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d045      	beq.n	800377e <HAL_DMA_Abort+0x58a>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a40      	ldr	r2, [pc, #256]	; (80037f8 <HAL_DMA_Abort+0x604>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d040      	beq.n	800377e <HAL_DMA_Abort+0x58a>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a3e      	ldr	r2, [pc, #248]	; (80037fc <HAL_DMA_Abort+0x608>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d03b      	beq.n	800377e <HAL_DMA_Abort+0x58a>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a3d      	ldr	r2, [pc, #244]	; (8003800 <HAL_DMA_Abort+0x60c>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d036      	beq.n	800377e <HAL_DMA_Abort+0x58a>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a3b      	ldr	r2, [pc, #236]	; (8003804 <HAL_DMA_Abort+0x610>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d031      	beq.n	800377e <HAL_DMA_Abort+0x58a>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a3a      	ldr	r2, [pc, #232]	; (8003808 <HAL_DMA_Abort+0x614>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d02c      	beq.n	800377e <HAL_DMA_Abort+0x58a>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a38      	ldr	r2, [pc, #224]	; (800380c <HAL_DMA_Abort+0x618>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d027      	beq.n	800377e <HAL_DMA_Abort+0x58a>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a37      	ldr	r2, [pc, #220]	; (8003810 <HAL_DMA_Abort+0x61c>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d022      	beq.n	800377e <HAL_DMA_Abort+0x58a>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a35      	ldr	r2, [pc, #212]	; (8003814 <HAL_DMA_Abort+0x620>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d01d      	beq.n	800377e <HAL_DMA_Abort+0x58a>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a34      	ldr	r2, [pc, #208]	; (8003818 <HAL_DMA_Abort+0x624>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d018      	beq.n	800377e <HAL_DMA_Abort+0x58a>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a32      	ldr	r2, [pc, #200]	; (800381c <HAL_DMA_Abort+0x628>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d013      	beq.n	800377e <HAL_DMA_Abort+0x58a>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a31      	ldr	r2, [pc, #196]	; (8003820 <HAL_DMA_Abort+0x62c>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d00e      	beq.n	800377e <HAL_DMA_Abort+0x58a>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a2f      	ldr	r2, [pc, #188]	; (8003824 <HAL_DMA_Abort+0x630>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d009      	beq.n	800377e <HAL_DMA_Abort+0x58a>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a2e      	ldr	r2, [pc, #184]	; (8003828 <HAL_DMA_Abort+0x634>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d004      	beq.n	800377e <HAL_DMA_Abort+0x58a>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a2c      	ldr	r2, [pc, #176]	; (800382c <HAL_DMA_Abort+0x638>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d101      	bne.n	8003782 <HAL_DMA_Abort+0x58e>
 800377e:	2301      	movs	r3, #1
 8003780:	e000      	b.n	8003784 <HAL_DMA_Abort+0x590>
 8003782:	2300      	movs	r3, #0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d015      	beq.n	80037b4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003790:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003796:	2b00      	cmp	r3, #0
 8003798:	d00c      	beq.n	80037b4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037a8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80037b2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3718      	adds	r7, #24
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	40020010 	.word	0x40020010
 80037d4:	40020028 	.word	0x40020028
 80037d8:	40020040 	.word	0x40020040
 80037dc:	40020058 	.word	0x40020058
 80037e0:	40020070 	.word	0x40020070
 80037e4:	40020088 	.word	0x40020088
 80037e8:	400200a0 	.word	0x400200a0
 80037ec:	400200b8 	.word	0x400200b8
 80037f0:	40020410 	.word	0x40020410
 80037f4:	40020428 	.word	0x40020428
 80037f8:	40020440 	.word	0x40020440
 80037fc:	40020458 	.word	0x40020458
 8003800:	40020470 	.word	0x40020470
 8003804:	40020488 	.word	0x40020488
 8003808:	400204a0 	.word	0x400204a0
 800380c:	400204b8 	.word	0x400204b8
 8003810:	58025408 	.word	0x58025408
 8003814:	5802541c 	.word	0x5802541c
 8003818:	58025430 	.word	0x58025430
 800381c:	58025444 	.word	0x58025444
 8003820:	58025458 	.word	0x58025458
 8003824:	5802546c 	.word	0x5802546c
 8003828:	58025480 	.word	0x58025480
 800382c:	58025494 	.word	0x58025494

08003830 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d101      	bne.n	8003842 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e237      	b.n	8003cb2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b02      	cmp	r3, #2
 800384c:	d004      	beq.n	8003858 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2280      	movs	r2, #128	; 0x80
 8003852:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e22c      	b.n	8003cb2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a5c      	ldr	r2, [pc, #368]	; (80039d0 <HAL_DMA_Abort_IT+0x1a0>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d04a      	beq.n	80038f8 <HAL_DMA_Abort_IT+0xc8>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a5b      	ldr	r2, [pc, #364]	; (80039d4 <HAL_DMA_Abort_IT+0x1a4>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d045      	beq.n	80038f8 <HAL_DMA_Abort_IT+0xc8>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a59      	ldr	r2, [pc, #356]	; (80039d8 <HAL_DMA_Abort_IT+0x1a8>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d040      	beq.n	80038f8 <HAL_DMA_Abort_IT+0xc8>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a58      	ldr	r2, [pc, #352]	; (80039dc <HAL_DMA_Abort_IT+0x1ac>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d03b      	beq.n	80038f8 <HAL_DMA_Abort_IT+0xc8>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a56      	ldr	r2, [pc, #344]	; (80039e0 <HAL_DMA_Abort_IT+0x1b0>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d036      	beq.n	80038f8 <HAL_DMA_Abort_IT+0xc8>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a55      	ldr	r2, [pc, #340]	; (80039e4 <HAL_DMA_Abort_IT+0x1b4>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d031      	beq.n	80038f8 <HAL_DMA_Abort_IT+0xc8>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a53      	ldr	r2, [pc, #332]	; (80039e8 <HAL_DMA_Abort_IT+0x1b8>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d02c      	beq.n	80038f8 <HAL_DMA_Abort_IT+0xc8>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a52      	ldr	r2, [pc, #328]	; (80039ec <HAL_DMA_Abort_IT+0x1bc>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d027      	beq.n	80038f8 <HAL_DMA_Abort_IT+0xc8>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a50      	ldr	r2, [pc, #320]	; (80039f0 <HAL_DMA_Abort_IT+0x1c0>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d022      	beq.n	80038f8 <HAL_DMA_Abort_IT+0xc8>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a4f      	ldr	r2, [pc, #316]	; (80039f4 <HAL_DMA_Abort_IT+0x1c4>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d01d      	beq.n	80038f8 <HAL_DMA_Abort_IT+0xc8>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a4d      	ldr	r2, [pc, #308]	; (80039f8 <HAL_DMA_Abort_IT+0x1c8>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d018      	beq.n	80038f8 <HAL_DMA_Abort_IT+0xc8>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a4c      	ldr	r2, [pc, #304]	; (80039fc <HAL_DMA_Abort_IT+0x1cc>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d013      	beq.n	80038f8 <HAL_DMA_Abort_IT+0xc8>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a4a      	ldr	r2, [pc, #296]	; (8003a00 <HAL_DMA_Abort_IT+0x1d0>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d00e      	beq.n	80038f8 <HAL_DMA_Abort_IT+0xc8>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a49      	ldr	r2, [pc, #292]	; (8003a04 <HAL_DMA_Abort_IT+0x1d4>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d009      	beq.n	80038f8 <HAL_DMA_Abort_IT+0xc8>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a47      	ldr	r2, [pc, #284]	; (8003a08 <HAL_DMA_Abort_IT+0x1d8>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d004      	beq.n	80038f8 <HAL_DMA_Abort_IT+0xc8>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a46      	ldr	r2, [pc, #280]	; (8003a0c <HAL_DMA_Abort_IT+0x1dc>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d101      	bne.n	80038fc <HAL_DMA_Abort_IT+0xcc>
 80038f8:	2301      	movs	r3, #1
 80038fa:	e000      	b.n	80038fe <HAL_DMA_Abort_IT+0xce>
 80038fc:	2300      	movs	r3, #0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	f000 8086 	beq.w	8003a10 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2204      	movs	r2, #4
 8003908:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a2f      	ldr	r2, [pc, #188]	; (80039d0 <HAL_DMA_Abort_IT+0x1a0>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d04a      	beq.n	80039ac <HAL_DMA_Abort_IT+0x17c>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a2e      	ldr	r2, [pc, #184]	; (80039d4 <HAL_DMA_Abort_IT+0x1a4>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d045      	beq.n	80039ac <HAL_DMA_Abort_IT+0x17c>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a2c      	ldr	r2, [pc, #176]	; (80039d8 <HAL_DMA_Abort_IT+0x1a8>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d040      	beq.n	80039ac <HAL_DMA_Abort_IT+0x17c>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a2b      	ldr	r2, [pc, #172]	; (80039dc <HAL_DMA_Abort_IT+0x1ac>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d03b      	beq.n	80039ac <HAL_DMA_Abort_IT+0x17c>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a29      	ldr	r2, [pc, #164]	; (80039e0 <HAL_DMA_Abort_IT+0x1b0>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d036      	beq.n	80039ac <HAL_DMA_Abort_IT+0x17c>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a28      	ldr	r2, [pc, #160]	; (80039e4 <HAL_DMA_Abort_IT+0x1b4>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d031      	beq.n	80039ac <HAL_DMA_Abort_IT+0x17c>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a26      	ldr	r2, [pc, #152]	; (80039e8 <HAL_DMA_Abort_IT+0x1b8>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d02c      	beq.n	80039ac <HAL_DMA_Abort_IT+0x17c>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a25      	ldr	r2, [pc, #148]	; (80039ec <HAL_DMA_Abort_IT+0x1bc>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d027      	beq.n	80039ac <HAL_DMA_Abort_IT+0x17c>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a23      	ldr	r2, [pc, #140]	; (80039f0 <HAL_DMA_Abort_IT+0x1c0>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d022      	beq.n	80039ac <HAL_DMA_Abort_IT+0x17c>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a22      	ldr	r2, [pc, #136]	; (80039f4 <HAL_DMA_Abort_IT+0x1c4>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d01d      	beq.n	80039ac <HAL_DMA_Abort_IT+0x17c>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a20      	ldr	r2, [pc, #128]	; (80039f8 <HAL_DMA_Abort_IT+0x1c8>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d018      	beq.n	80039ac <HAL_DMA_Abort_IT+0x17c>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a1f      	ldr	r2, [pc, #124]	; (80039fc <HAL_DMA_Abort_IT+0x1cc>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d013      	beq.n	80039ac <HAL_DMA_Abort_IT+0x17c>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a1d      	ldr	r2, [pc, #116]	; (8003a00 <HAL_DMA_Abort_IT+0x1d0>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d00e      	beq.n	80039ac <HAL_DMA_Abort_IT+0x17c>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a1c      	ldr	r2, [pc, #112]	; (8003a04 <HAL_DMA_Abort_IT+0x1d4>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d009      	beq.n	80039ac <HAL_DMA_Abort_IT+0x17c>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a1a      	ldr	r2, [pc, #104]	; (8003a08 <HAL_DMA_Abort_IT+0x1d8>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d004      	beq.n	80039ac <HAL_DMA_Abort_IT+0x17c>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a19      	ldr	r2, [pc, #100]	; (8003a0c <HAL_DMA_Abort_IT+0x1dc>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d108      	bne.n	80039be <HAL_DMA_Abort_IT+0x18e>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f022 0201 	bic.w	r2, r2, #1
 80039ba:	601a      	str	r2, [r3, #0]
 80039bc:	e178      	b.n	8003cb0 <HAL_DMA_Abort_IT+0x480>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f022 0201 	bic.w	r2, r2, #1
 80039cc:	601a      	str	r2, [r3, #0]
 80039ce:	e16f      	b.n	8003cb0 <HAL_DMA_Abort_IT+0x480>
 80039d0:	40020010 	.word	0x40020010
 80039d4:	40020028 	.word	0x40020028
 80039d8:	40020040 	.word	0x40020040
 80039dc:	40020058 	.word	0x40020058
 80039e0:	40020070 	.word	0x40020070
 80039e4:	40020088 	.word	0x40020088
 80039e8:	400200a0 	.word	0x400200a0
 80039ec:	400200b8 	.word	0x400200b8
 80039f0:	40020410 	.word	0x40020410
 80039f4:	40020428 	.word	0x40020428
 80039f8:	40020440 	.word	0x40020440
 80039fc:	40020458 	.word	0x40020458
 8003a00:	40020470 	.word	0x40020470
 8003a04:	40020488 	.word	0x40020488
 8003a08:	400204a0 	.word	0x400204a0
 8003a0c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f022 020e 	bic.w	r2, r2, #14
 8003a1e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a6c      	ldr	r2, [pc, #432]	; (8003bd8 <HAL_DMA_Abort_IT+0x3a8>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d04a      	beq.n	8003ac0 <HAL_DMA_Abort_IT+0x290>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a6b      	ldr	r2, [pc, #428]	; (8003bdc <HAL_DMA_Abort_IT+0x3ac>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d045      	beq.n	8003ac0 <HAL_DMA_Abort_IT+0x290>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a69      	ldr	r2, [pc, #420]	; (8003be0 <HAL_DMA_Abort_IT+0x3b0>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d040      	beq.n	8003ac0 <HAL_DMA_Abort_IT+0x290>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a68      	ldr	r2, [pc, #416]	; (8003be4 <HAL_DMA_Abort_IT+0x3b4>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d03b      	beq.n	8003ac0 <HAL_DMA_Abort_IT+0x290>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a66      	ldr	r2, [pc, #408]	; (8003be8 <HAL_DMA_Abort_IT+0x3b8>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d036      	beq.n	8003ac0 <HAL_DMA_Abort_IT+0x290>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a65      	ldr	r2, [pc, #404]	; (8003bec <HAL_DMA_Abort_IT+0x3bc>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d031      	beq.n	8003ac0 <HAL_DMA_Abort_IT+0x290>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a63      	ldr	r2, [pc, #396]	; (8003bf0 <HAL_DMA_Abort_IT+0x3c0>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d02c      	beq.n	8003ac0 <HAL_DMA_Abort_IT+0x290>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a62      	ldr	r2, [pc, #392]	; (8003bf4 <HAL_DMA_Abort_IT+0x3c4>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d027      	beq.n	8003ac0 <HAL_DMA_Abort_IT+0x290>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a60      	ldr	r2, [pc, #384]	; (8003bf8 <HAL_DMA_Abort_IT+0x3c8>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d022      	beq.n	8003ac0 <HAL_DMA_Abort_IT+0x290>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a5f      	ldr	r2, [pc, #380]	; (8003bfc <HAL_DMA_Abort_IT+0x3cc>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d01d      	beq.n	8003ac0 <HAL_DMA_Abort_IT+0x290>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a5d      	ldr	r2, [pc, #372]	; (8003c00 <HAL_DMA_Abort_IT+0x3d0>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d018      	beq.n	8003ac0 <HAL_DMA_Abort_IT+0x290>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a5c      	ldr	r2, [pc, #368]	; (8003c04 <HAL_DMA_Abort_IT+0x3d4>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d013      	beq.n	8003ac0 <HAL_DMA_Abort_IT+0x290>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a5a      	ldr	r2, [pc, #360]	; (8003c08 <HAL_DMA_Abort_IT+0x3d8>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d00e      	beq.n	8003ac0 <HAL_DMA_Abort_IT+0x290>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a59      	ldr	r2, [pc, #356]	; (8003c0c <HAL_DMA_Abort_IT+0x3dc>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d009      	beq.n	8003ac0 <HAL_DMA_Abort_IT+0x290>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a57      	ldr	r2, [pc, #348]	; (8003c10 <HAL_DMA_Abort_IT+0x3e0>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d004      	beq.n	8003ac0 <HAL_DMA_Abort_IT+0x290>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a56      	ldr	r2, [pc, #344]	; (8003c14 <HAL_DMA_Abort_IT+0x3e4>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d108      	bne.n	8003ad2 <HAL_DMA_Abort_IT+0x2a2>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f022 0201 	bic.w	r2, r2, #1
 8003ace:	601a      	str	r2, [r3, #0]
 8003ad0:	e007      	b.n	8003ae2 <HAL_DMA_Abort_IT+0x2b2>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f022 0201 	bic.w	r2, r2, #1
 8003ae0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a3c      	ldr	r2, [pc, #240]	; (8003bd8 <HAL_DMA_Abort_IT+0x3a8>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d072      	beq.n	8003bd2 <HAL_DMA_Abort_IT+0x3a2>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a3a      	ldr	r2, [pc, #232]	; (8003bdc <HAL_DMA_Abort_IT+0x3ac>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d06d      	beq.n	8003bd2 <HAL_DMA_Abort_IT+0x3a2>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a39      	ldr	r2, [pc, #228]	; (8003be0 <HAL_DMA_Abort_IT+0x3b0>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d068      	beq.n	8003bd2 <HAL_DMA_Abort_IT+0x3a2>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a37      	ldr	r2, [pc, #220]	; (8003be4 <HAL_DMA_Abort_IT+0x3b4>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d063      	beq.n	8003bd2 <HAL_DMA_Abort_IT+0x3a2>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a36      	ldr	r2, [pc, #216]	; (8003be8 <HAL_DMA_Abort_IT+0x3b8>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d05e      	beq.n	8003bd2 <HAL_DMA_Abort_IT+0x3a2>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a34      	ldr	r2, [pc, #208]	; (8003bec <HAL_DMA_Abort_IT+0x3bc>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d059      	beq.n	8003bd2 <HAL_DMA_Abort_IT+0x3a2>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a33      	ldr	r2, [pc, #204]	; (8003bf0 <HAL_DMA_Abort_IT+0x3c0>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d054      	beq.n	8003bd2 <HAL_DMA_Abort_IT+0x3a2>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a31      	ldr	r2, [pc, #196]	; (8003bf4 <HAL_DMA_Abort_IT+0x3c4>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d04f      	beq.n	8003bd2 <HAL_DMA_Abort_IT+0x3a2>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a30      	ldr	r2, [pc, #192]	; (8003bf8 <HAL_DMA_Abort_IT+0x3c8>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d04a      	beq.n	8003bd2 <HAL_DMA_Abort_IT+0x3a2>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a2e      	ldr	r2, [pc, #184]	; (8003bfc <HAL_DMA_Abort_IT+0x3cc>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d045      	beq.n	8003bd2 <HAL_DMA_Abort_IT+0x3a2>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a2d      	ldr	r2, [pc, #180]	; (8003c00 <HAL_DMA_Abort_IT+0x3d0>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d040      	beq.n	8003bd2 <HAL_DMA_Abort_IT+0x3a2>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a2b      	ldr	r2, [pc, #172]	; (8003c04 <HAL_DMA_Abort_IT+0x3d4>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d03b      	beq.n	8003bd2 <HAL_DMA_Abort_IT+0x3a2>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a2a      	ldr	r2, [pc, #168]	; (8003c08 <HAL_DMA_Abort_IT+0x3d8>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d036      	beq.n	8003bd2 <HAL_DMA_Abort_IT+0x3a2>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a28      	ldr	r2, [pc, #160]	; (8003c0c <HAL_DMA_Abort_IT+0x3dc>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d031      	beq.n	8003bd2 <HAL_DMA_Abort_IT+0x3a2>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a27      	ldr	r2, [pc, #156]	; (8003c10 <HAL_DMA_Abort_IT+0x3e0>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d02c      	beq.n	8003bd2 <HAL_DMA_Abort_IT+0x3a2>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a25      	ldr	r2, [pc, #148]	; (8003c14 <HAL_DMA_Abort_IT+0x3e4>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d027      	beq.n	8003bd2 <HAL_DMA_Abort_IT+0x3a2>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a24      	ldr	r2, [pc, #144]	; (8003c18 <HAL_DMA_Abort_IT+0x3e8>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d022      	beq.n	8003bd2 <HAL_DMA_Abort_IT+0x3a2>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a22      	ldr	r2, [pc, #136]	; (8003c1c <HAL_DMA_Abort_IT+0x3ec>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d01d      	beq.n	8003bd2 <HAL_DMA_Abort_IT+0x3a2>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a21      	ldr	r2, [pc, #132]	; (8003c20 <HAL_DMA_Abort_IT+0x3f0>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d018      	beq.n	8003bd2 <HAL_DMA_Abort_IT+0x3a2>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a1f      	ldr	r2, [pc, #124]	; (8003c24 <HAL_DMA_Abort_IT+0x3f4>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d013      	beq.n	8003bd2 <HAL_DMA_Abort_IT+0x3a2>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a1e      	ldr	r2, [pc, #120]	; (8003c28 <HAL_DMA_Abort_IT+0x3f8>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d00e      	beq.n	8003bd2 <HAL_DMA_Abort_IT+0x3a2>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a1c      	ldr	r2, [pc, #112]	; (8003c2c <HAL_DMA_Abort_IT+0x3fc>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d009      	beq.n	8003bd2 <HAL_DMA_Abort_IT+0x3a2>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a1b      	ldr	r2, [pc, #108]	; (8003c30 <HAL_DMA_Abort_IT+0x400>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d004      	beq.n	8003bd2 <HAL_DMA_Abort_IT+0x3a2>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a19      	ldr	r2, [pc, #100]	; (8003c34 <HAL_DMA_Abort_IT+0x404>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d132      	bne.n	8003c38 <HAL_DMA_Abort_IT+0x408>
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e031      	b.n	8003c3a <HAL_DMA_Abort_IT+0x40a>
 8003bd6:	bf00      	nop
 8003bd8:	40020010 	.word	0x40020010
 8003bdc:	40020028 	.word	0x40020028
 8003be0:	40020040 	.word	0x40020040
 8003be4:	40020058 	.word	0x40020058
 8003be8:	40020070 	.word	0x40020070
 8003bec:	40020088 	.word	0x40020088
 8003bf0:	400200a0 	.word	0x400200a0
 8003bf4:	400200b8 	.word	0x400200b8
 8003bf8:	40020410 	.word	0x40020410
 8003bfc:	40020428 	.word	0x40020428
 8003c00:	40020440 	.word	0x40020440
 8003c04:	40020458 	.word	0x40020458
 8003c08:	40020470 	.word	0x40020470
 8003c0c:	40020488 	.word	0x40020488
 8003c10:	400204a0 	.word	0x400204a0
 8003c14:	400204b8 	.word	0x400204b8
 8003c18:	58025408 	.word	0x58025408
 8003c1c:	5802541c 	.word	0x5802541c
 8003c20:	58025430 	.word	0x58025430
 8003c24:	58025444 	.word	0x58025444
 8003c28:	58025458 	.word	0x58025458
 8003c2c:	5802546c 	.word	0x5802546c
 8003c30:	58025480 	.word	0x58025480
 8003c34:	58025494 	.word	0x58025494
 8003c38:	2300      	movs	r3, #0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d028      	beq.n	8003c90 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c4c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c52:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c58:	f003 031f 	and.w	r3, r3, #31
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	409a      	lsls	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003c6c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00c      	beq.n	8003c90 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c84:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003c8e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d003      	beq.n	8003cb0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3710      	adds	r7, #16
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop

08003cbc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b08a      	sub	sp, #40	; 0x28
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003cc8:	4b67      	ldr	r3, [pc, #412]	; (8003e68 <HAL_DMA_IRQHandler+0x1ac>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a67      	ldr	r2, [pc, #412]	; (8003e6c <HAL_DMA_IRQHandler+0x1b0>)
 8003cce:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd2:	0a9b      	lsrs	r3, r3, #10
 8003cd4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cda:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ce0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003ce2:	6a3b      	ldr	r3, [r7, #32]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a5f      	ldr	r2, [pc, #380]	; (8003e70 <HAL_DMA_IRQHandler+0x1b4>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d04a      	beq.n	8003d8e <HAL_DMA_IRQHandler+0xd2>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a5d      	ldr	r2, [pc, #372]	; (8003e74 <HAL_DMA_IRQHandler+0x1b8>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d045      	beq.n	8003d8e <HAL_DMA_IRQHandler+0xd2>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a5c      	ldr	r2, [pc, #368]	; (8003e78 <HAL_DMA_IRQHandler+0x1bc>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d040      	beq.n	8003d8e <HAL_DMA_IRQHandler+0xd2>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a5a      	ldr	r2, [pc, #360]	; (8003e7c <HAL_DMA_IRQHandler+0x1c0>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d03b      	beq.n	8003d8e <HAL_DMA_IRQHandler+0xd2>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a59      	ldr	r2, [pc, #356]	; (8003e80 <HAL_DMA_IRQHandler+0x1c4>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d036      	beq.n	8003d8e <HAL_DMA_IRQHandler+0xd2>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a57      	ldr	r2, [pc, #348]	; (8003e84 <HAL_DMA_IRQHandler+0x1c8>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d031      	beq.n	8003d8e <HAL_DMA_IRQHandler+0xd2>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a56      	ldr	r2, [pc, #344]	; (8003e88 <HAL_DMA_IRQHandler+0x1cc>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d02c      	beq.n	8003d8e <HAL_DMA_IRQHandler+0xd2>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a54      	ldr	r2, [pc, #336]	; (8003e8c <HAL_DMA_IRQHandler+0x1d0>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d027      	beq.n	8003d8e <HAL_DMA_IRQHandler+0xd2>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a53      	ldr	r2, [pc, #332]	; (8003e90 <HAL_DMA_IRQHandler+0x1d4>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d022      	beq.n	8003d8e <HAL_DMA_IRQHandler+0xd2>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a51      	ldr	r2, [pc, #324]	; (8003e94 <HAL_DMA_IRQHandler+0x1d8>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d01d      	beq.n	8003d8e <HAL_DMA_IRQHandler+0xd2>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a50      	ldr	r2, [pc, #320]	; (8003e98 <HAL_DMA_IRQHandler+0x1dc>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d018      	beq.n	8003d8e <HAL_DMA_IRQHandler+0xd2>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a4e      	ldr	r2, [pc, #312]	; (8003e9c <HAL_DMA_IRQHandler+0x1e0>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d013      	beq.n	8003d8e <HAL_DMA_IRQHandler+0xd2>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a4d      	ldr	r2, [pc, #308]	; (8003ea0 <HAL_DMA_IRQHandler+0x1e4>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d00e      	beq.n	8003d8e <HAL_DMA_IRQHandler+0xd2>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a4b      	ldr	r2, [pc, #300]	; (8003ea4 <HAL_DMA_IRQHandler+0x1e8>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d009      	beq.n	8003d8e <HAL_DMA_IRQHandler+0xd2>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a4a      	ldr	r2, [pc, #296]	; (8003ea8 <HAL_DMA_IRQHandler+0x1ec>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d004      	beq.n	8003d8e <HAL_DMA_IRQHandler+0xd2>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a48      	ldr	r2, [pc, #288]	; (8003eac <HAL_DMA_IRQHandler+0x1f0>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d101      	bne.n	8003d92 <HAL_DMA_IRQHandler+0xd6>
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e000      	b.n	8003d94 <HAL_DMA_IRQHandler+0xd8>
 8003d92:	2300      	movs	r3, #0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	f000 842b 	beq.w	80045f0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d9e:	f003 031f 	and.w	r3, r3, #31
 8003da2:	2208      	movs	r2, #8
 8003da4:	409a      	lsls	r2, r3
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	4013      	ands	r3, r2
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	f000 80a2 	beq.w	8003ef4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a2e      	ldr	r2, [pc, #184]	; (8003e70 <HAL_DMA_IRQHandler+0x1b4>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d04a      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x194>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a2d      	ldr	r2, [pc, #180]	; (8003e74 <HAL_DMA_IRQHandler+0x1b8>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d045      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x194>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a2b      	ldr	r2, [pc, #172]	; (8003e78 <HAL_DMA_IRQHandler+0x1bc>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d040      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x194>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a2a      	ldr	r2, [pc, #168]	; (8003e7c <HAL_DMA_IRQHandler+0x1c0>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d03b      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x194>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a28      	ldr	r2, [pc, #160]	; (8003e80 <HAL_DMA_IRQHandler+0x1c4>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d036      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x194>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a27      	ldr	r2, [pc, #156]	; (8003e84 <HAL_DMA_IRQHandler+0x1c8>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d031      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x194>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a25      	ldr	r2, [pc, #148]	; (8003e88 <HAL_DMA_IRQHandler+0x1cc>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d02c      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x194>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a24      	ldr	r2, [pc, #144]	; (8003e8c <HAL_DMA_IRQHandler+0x1d0>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d027      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x194>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a22      	ldr	r2, [pc, #136]	; (8003e90 <HAL_DMA_IRQHandler+0x1d4>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d022      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x194>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a21      	ldr	r2, [pc, #132]	; (8003e94 <HAL_DMA_IRQHandler+0x1d8>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d01d      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x194>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a1f      	ldr	r2, [pc, #124]	; (8003e98 <HAL_DMA_IRQHandler+0x1dc>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d018      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x194>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a1e      	ldr	r2, [pc, #120]	; (8003e9c <HAL_DMA_IRQHandler+0x1e0>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d013      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x194>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a1c      	ldr	r2, [pc, #112]	; (8003ea0 <HAL_DMA_IRQHandler+0x1e4>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d00e      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x194>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a1b      	ldr	r2, [pc, #108]	; (8003ea4 <HAL_DMA_IRQHandler+0x1e8>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d009      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x194>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a19      	ldr	r2, [pc, #100]	; (8003ea8 <HAL_DMA_IRQHandler+0x1ec>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d004      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x194>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a18      	ldr	r2, [pc, #96]	; (8003eac <HAL_DMA_IRQHandler+0x1f0>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d12f      	bne.n	8003eb0 <HAL_DMA_IRQHandler+0x1f4>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0304 	and.w	r3, r3, #4
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	bf14      	ite	ne
 8003e5e:	2301      	movne	r3, #1
 8003e60:	2300      	moveq	r3, #0
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	e02e      	b.n	8003ec4 <HAL_DMA_IRQHandler+0x208>
 8003e66:	bf00      	nop
 8003e68:	24000000 	.word	0x24000000
 8003e6c:	1b4e81b5 	.word	0x1b4e81b5
 8003e70:	40020010 	.word	0x40020010
 8003e74:	40020028 	.word	0x40020028
 8003e78:	40020040 	.word	0x40020040
 8003e7c:	40020058 	.word	0x40020058
 8003e80:	40020070 	.word	0x40020070
 8003e84:	40020088 	.word	0x40020088
 8003e88:	400200a0 	.word	0x400200a0
 8003e8c:	400200b8 	.word	0x400200b8
 8003e90:	40020410 	.word	0x40020410
 8003e94:	40020428 	.word	0x40020428
 8003e98:	40020440 	.word	0x40020440
 8003e9c:	40020458 	.word	0x40020458
 8003ea0:	40020470 	.word	0x40020470
 8003ea4:	40020488 	.word	0x40020488
 8003ea8:	400204a0 	.word	0x400204a0
 8003eac:	400204b8 	.word	0x400204b8
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0308 	and.w	r3, r3, #8
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	bf14      	ite	ne
 8003ebe:	2301      	movne	r3, #1
 8003ec0:	2300      	moveq	r3, #0
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d015      	beq.n	8003ef4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f022 0204 	bic.w	r2, r2, #4
 8003ed6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003edc:	f003 031f 	and.w	r3, r3, #31
 8003ee0:	2208      	movs	r2, #8
 8003ee2:	409a      	lsls	r2, r3
 8003ee4:	6a3b      	ldr	r3, [r7, #32]
 8003ee6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eec:	f043 0201 	orr.w	r2, r3, #1
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ef8:	f003 031f 	and.w	r3, r3, #31
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	fa22 f303 	lsr.w	r3, r2, r3
 8003f02:	f003 0301 	and.w	r3, r3, #1
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d06e      	beq.n	8003fe8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a69      	ldr	r2, [pc, #420]	; (80040b4 <HAL_DMA_IRQHandler+0x3f8>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d04a      	beq.n	8003faa <HAL_DMA_IRQHandler+0x2ee>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a67      	ldr	r2, [pc, #412]	; (80040b8 <HAL_DMA_IRQHandler+0x3fc>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d045      	beq.n	8003faa <HAL_DMA_IRQHandler+0x2ee>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a66      	ldr	r2, [pc, #408]	; (80040bc <HAL_DMA_IRQHandler+0x400>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d040      	beq.n	8003faa <HAL_DMA_IRQHandler+0x2ee>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a64      	ldr	r2, [pc, #400]	; (80040c0 <HAL_DMA_IRQHandler+0x404>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d03b      	beq.n	8003faa <HAL_DMA_IRQHandler+0x2ee>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a63      	ldr	r2, [pc, #396]	; (80040c4 <HAL_DMA_IRQHandler+0x408>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d036      	beq.n	8003faa <HAL_DMA_IRQHandler+0x2ee>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a61      	ldr	r2, [pc, #388]	; (80040c8 <HAL_DMA_IRQHandler+0x40c>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d031      	beq.n	8003faa <HAL_DMA_IRQHandler+0x2ee>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a60      	ldr	r2, [pc, #384]	; (80040cc <HAL_DMA_IRQHandler+0x410>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d02c      	beq.n	8003faa <HAL_DMA_IRQHandler+0x2ee>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a5e      	ldr	r2, [pc, #376]	; (80040d0 <HAL_DMA_IRQHandler+0x414>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d027      	beq.n	8003faa <HAL_DMA_IRQHandler+0x2ee>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a5d      	ldr	r2, [pc, #372]	; (80040d4 <HAL_DMA_IRQHandler+0x418>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d022      	beq.n	8003faa <HAL_DMA_IRQHandler+0x2ee>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a5b      	ldr	r2, [pc, #364]	; (80040d8 <HAL_DMA_IRQHandler+0x41c>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d01d      	beq.n	8003faa <HAL_DMA_IRQHandler+0x2ee>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a5a      	ldr	r2, [pc, #360]	; (80040dc <HAL_DMA_IRQHandler+0x420>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d018      	beq.n	8003faa <HAL_DMA_IRQHandler+0x2ee>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a58      	ldr	r2, [pc, #352]	; (80040e0 <HAL_DMA_IRQHandler+0x424>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d013      	beq.n	8003faa <HAL_DMA_IRQHandler+0x2ee>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a57      	ldr	r2, [pc, #348]	; (80040e4 <HAL_DMA_IRQHandler+0x428>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d00e      	beq.n	8003faa <HAL_DMA_IRQHandler+0x2ee>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a55      	ldr	r2, [pc, #340]	; (80040e8 <HAL_DMA_IRQHandler+0x42c>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d009      	beq.n	8003faa <HAL_DMA_IRQHandler+0x2ee>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a54      	ldr	r2, [pc, #336]	; (80040ec <HAL_DMA_IRQHandler+0x430>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d004      	beq.n	8003faa <HAL_DMA_IRQHandler+0x2ee>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a52      	ldr	r2, [pc, #328]	; (80040f0 <HAL_DMA_IRQHandler+0x434>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d10a      	bne.n	8003fc0 <HAL_DMA_IRQHandler+0x304>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	695b      	ldr	r3, [r3, #20]
 8003fb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	bf14      	ite	ne
 8003fb8:	2301      	movne	r3, #1
 8003fba:	2300      	moveq	r3, #0
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	e003      	b.n	8003fc8 <HAL_DMA_IRQHandler+0x30c>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d00d      	beq.n	8003fe8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fd0:	f003 031f 	and.w	r3, r3, #31
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	409a      	lsls	r2, r3
 8003fd8:	6a3b      	ldr	r3, [r7, #32]
 8003fda:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe0:	f043 0202 	orr.w	r2, r3, #2
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fec:	f003 031f 	and.w	r3, r3, #31
 8003ff0:	2204      	movs	r2, #4
 8003ff2:	409a      	lsls	r2, r3
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	f000 808f 	beq.w	800411c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a2c      	ldr	r2, [pc, #176]	; (80040b4 <HAL_DMA_IRQHandler+0x3f8>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d04a      	beq.n	800409e <HAL_DMA_IRQHandler+0x3e2>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a2a      	ldr	r2, [pc, #168]	; (80040b8 <HAL_DMA_IRQHandler+0x3fc>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d045      	beq.n	800409e <HAL_DMA_IRQHandler+0x3e2>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a29      	ldr	r2, [pc, #164]	; (80040bc <HAL_DMA_IRQHandler+0x400>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d040      	beq.n	800409e <HAL_DMA_IRQHandler+0x3e2>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a27      	ldr	r2, [pc, #156]	; (80040c0 <HAL_DMA_IRQHandler+0x404>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d03b      	beq.n	800409e <HAL_DMA_IRQHandler+0x3e2>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a26      	ldr	r2, [pc, #152]	; (80040c4 <HAL_DMA_IRQHandler+0x408>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d036      	beq.n	800409e <HAL_DMA_IRQHandler+0x3e2>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a24      	ldr	r2, [pc, #144]	; (80040c8 <HAL_DMA_IRQHandler+0x40c>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d031      	beq.n	800409e <HAL_DMA_IRQHandler+0x3e2>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a23      	ldr	r2, [pc, #140]	; (80040cc <HAL_DMA_IRQHandler+0x410>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d02c      	beq.n	800409e <HAL_DMA_IRQHandler+0x3e2>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a21      	ldr	r2, [pc, #132]	; (80040d0 <HAL_DMA_IRQHandler+0x414>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d027      	beq.n	800409e <HAL_DMA_IRQHandler+0x3e2>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a20      	ldr	r2, [pc, #128]	; (80040d4 <HAL_DMA_IRQHandler+0x418>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d022      	beq.n	800409e <HAL_DMA_IRQHandler+0x3e2>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a1e      	ldr	r2, [pc, #120]	; (80040d8 <HAL_DMA_IRQHandler+0x41c>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d01d      	beq.n	800409e <HAL_DMA_IRQHandler+0x3e2>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a1d      	ldr	r2, [pc, #116]	; (80040dc <HAL_DMA_IRQHandler+0x420>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d018      	beq.n	800409e <HAL_DMA_IRQHandler+0x3e2>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a1b      	ldr	r2, [pc, #108]	; (80040e0 <HAL_DMA_IRQHandler+0x424>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d013      	beq.n	800409e <HAL_DMA_IRQHandler+0x3e2>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a1a      	ldr	r2, [pc, #104]	; (80040e4 <HAL_DMA_IRQHandler+0x428>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d00e      	beq.n	800409e <HAL_DMA_IRQHandler+0x3e2>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a18      	ldr	r2, [pc, #96]	; (80040e8 <HAL_DMA_IRQHandler+0x42c>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d009      	beq.n	800409e <HAL_DMA_IRQHandler+0x3e2>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a17      	ldr	r2, [pc, #92]	; (80040ec <HAL_DMA_IRQHandler+0x430>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d004      	beq.n	800409e <HAL_DMA_IRQHandler+0x3e2>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a15      	ldr	r2, [pc, #84]	; (80040f0 <HAL_DMA_IRQHandler+0x434>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d12a      	bne.n	80040f4 <HAL_DMA_IRQHandler+0x438>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0302 	and.w	r3, r3, #2
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	bf14      	ite	ne
 80040ac:	2301      	movne	r3, #1
 80040ae:	2300      	moveq	r3, #0
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	e023      	b.n	80040fc <HAL_DMA_IRQHandler+0x440>
 80040b4:	40020010 	.word	0x40020010
 80040b8:	40020028 	.word	0x40020028
 80040bc:	40020040 	.word	0x40020040
 80040c0:	40020058 	.word	0x40020058
 80040c4:	40020070 	.word	0x40020070
 80040c8:	40020088 	.word	0x40020088
 80040cc:	400200a0 	.word	0x400200a0
 80040d0:	400200b8 	.word	0x400200b8
 80040d4:	40020410 	.word	0x40020410
 80040d8:	40020428 	.word	0x40020428
 80040dc:	40020440 	.word	0x40020440
 80040e0:	40020458 	.word	0x40020458
 80040e4:	40020470 	.word	0x40020470
 80040e8:	40020488 	.word	0x40020488
 80040ec:	400204a0 	.word	0x400204a0
 80040f0:	400204b8 	.word	0x400204b8
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2300      	movs	r3, #0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d00d      	beq.n	800411c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004104:	f003 031f 	and.w	r3, r3, #31
 8004108:	2204      	movs	r2, #4
 800410a:	409a      	lsls	r2, r3
 800410c:	6a3b      	ldr	r3, [r7, #32]
 800410e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004114:	f043 0204 	orr.w	r2, r3, #4
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004120:	f003 031f 	and.w	r3, r3, #31
 8004124:	2210      	movs	r2, #16
 8004126:	409a      	lsls	r2, r3
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	4013      	ands	r3, r2
 800412c:	2b00      	cmp	r3, #0
 800412e:	f000 80a6 	beq.w	800427e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a85      	ldr	r2, [pc, #532]	; (800434c <HAL_DMA_IRQHandler+0x690>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d04a      	beq.n	80041d2 <HAL_DMA_IRQHandler+0x516>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a83      	ldr	r2, [pc, #524]	; (8004350 <HAL_DMA_IRQHandler+0x694>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d045      	beq.n	80041d2 <HAL_DMA_IRQHandler+0x516>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a82      	ldr	r2, [pc, #520]	; (8004354 <HAL_DMA_IRQHandler+0x698>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d040      	beq.n	80041d2 <HAL_DMA_IRQHandler+0x516>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a80      	ldr	r2, [pc, #512]	; (8004358 <HAL_DMA_IRQHandler+0x69c>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d03b      	beq.n	80041d2 <HAL_DMA_IRQHandler+0x516>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a7f      	ldr	r2, [pc, #508]	; (800435c <HAL_DMA_IRQHandler+0x6a0>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d036      	beq.n	80041d2 <HAL_DMA_IRQHandler+0x516>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a7d      	ldr	r2, [pc, #500]	; (8004360 <HAL_DMA_IRQHandler+0x6a4>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d031      	beq.n	80041d2 <HAL_DMA_IRQHandler+0x516>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a7c      	ldr	r2, [pc, #496]	; (8004364 <HAL_DMA_IRQHandler+0x6a8>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d02c      	beq.n	80041d2 <HAL_DMA_IRQHandler+0x516>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a7a      	ldr	r2, [pc, #488]	; (8004368 <HAL_DMA_IRQHandler+0x6ac>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d027      	beq.n	80041d2 <HAL_DMA_IRQHandler+0x516>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a79      	ldr	r2, [pc, #484]	; (800436c <HAL_DMA_IRQHandler+0x6b0>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d022      	beq.n	80041d2 <HAL_DMA_IRQHandler+0x516>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a77      	ldr	r2, [pc, #476]	; (8004370 <HAL_DMA_IRQHandler+0x6b4>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d01d      	beq.n	80041d2 <HAL_DMA_IRQHandler+0x516>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a76      	ldr	r2, [pc, #472]	; (8004374 <HAL_DMA_IRQHandler+0x6b8>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d018      	beq.n	80041d2 <HAL_DMA_IRQHandler+0x516>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a74      	ldr	r2, [pc, #464]	; (8004378 <HAL_DMA_IRQHandler+0x6bc>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d013      	beq.n	80041d2 <HAL_DMA_IRQHandler+0x516>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a73      	ldr	r2, [pc, #460]	; (800437c <HAL_DMA_IRQHandler+0x6c0>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d00e      	beq.n	80041d2 <HAL_DMA_IRQHandler+0x516>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a71      	ldr	r2, [pc, #452]	; (8004380 <HAL_DMA_IRQHandler+0x6c4>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d009      	beq.n	80041d2 <HAL_DMA_IRQHandler+0x516>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a70      	ldr	r2, [pc, #448]	; (8004384 <HAL_DMA_IRQHandler+0x6c8>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d004      	beq.n	80041d2 <HAL_DMA_IRQHandler+0x516>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a6e      	ldr	r2, [pc, #440]	; (8004388 <HAL_DMA_IRQHandler+0x6cc>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d10a      	bne.n	80041e8 <HAL_DMA_IRQHandler+0x52c>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0308 	and.w	r3, r3, #8
 80041dc:	2b00      	cmp	r3, #0
 80041de:	bf14      	ite	ne
 80041e0:	2301      	movne	r3, #1
 80041e2:	2300      	moveq	r3, #0
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	e009      	b.n	80041fc <HAL_DMA_IRQHandler+0x540>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0304 	and.w	r3, r3, #4
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	bf14      	ite	ne
 80041f6:	2301      	movne	r3, #1
 80041f8:	2300      	moveq	r3, #0
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d03e      	beq.n	800427e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004204:	f003 031f 	and.w	r3, r3, #31
 8004208:	2210      	movs	r2, #16
 800420a:	409a      	lsls	r2, r3
 800420c:	6a3b      	ldr	r3, [r7, #32]
 800420e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d018      	beq.n	8004250 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d108      	bne.n	800423e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004230:	2b00      	cmp	r3, #0
 8004232:	d024      	beq.n	800427e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	4798      	blx	r3
 800423c:	e01f      	b.n	800427e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004242:	2b00      	cmp	r3, #0
 8004244:	d01b      	beq.n	800427e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	4798      	blx	r3
 800424e:	e016      	b.n	800427e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800425a:	2b00      	cmp	r3, #0
 800425c:	d107      	bne.n	800426e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f022 0208 	bic.w	r2, r2, #8
 800426c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004272:	2b00      	cmp	r3, #0
 8004274:	d003      	beq.n	800427e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004282:	f003 031f 	and.w	r3, r3, #31
 8004286:	2220      	movs	r2, #32
 8004288:	409a      	lsls	r2, r3
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	4013      	ands	r3, r2
 800428e:	2b00      	cmp	r3, #0
 8004290:	f000 8110 	beq.w	80044b4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a2c      	ldr	r2, [pc, #176]	; (800434c <HAL_DMA_IRQHandler+0x690>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d04a      	beq.n	8004334 <HAL_DMA_IRQHandler+0x678>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a2b      	ldr	r2, [pc, #172]	; (8004350 <HAL_DMA_IRQHandler+0x694>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d045      	beq.n	8004334 <HAL_DMA_IRQHandler+0x678>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a29      	ldr	r2, [pc, #164]	; (8004354 <HAL_DMA_IRQHandler+0x698>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d040      	beq.n	8004334 <HAL_DMA_IRQHandler+0x678>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a28      	ldr	r2, [pc, #160]	; (8004358 <HAL_DMA_IRQHandler+0x69c>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d03b      	beq.n	8004334 <HAL_DMA_IRQHandler+0x678>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a26      	ldr	r2, [pc, #152]	; (800435c <HAL_DMA_IRQHandler+0x6a0>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d036      	beq.n	8004334 <HAL_DMA_IRQHandler+0x678>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a25      	ldr	r2, [pc, #148]	; (8004360 <HAL_DMA_IRQHandler+0x6a4>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d031      	beq.n	8004334 <HAL_DMA_IRQHandler+0x678>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a23      	ldr	r2, [pc, #140]	; (8004364 <HAL_DMA_IRQHandler+0x6a8>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d02c      	beq.n	8004334 <HAL_DMA_IRQHandler+0x678>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a22      	ldr	r2, [pc, #136]	; (8004368 <HAL_DMA_IRQHandler+0x6ac>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d027      	beq.n	8004334 <HAL_DMA_IRQHandler+0x678>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a20      	ldr	r2, [pc, #128]	; (800436c <HAL_DMA_IRQHandler+0x6b0>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d022      	beq.n	8004334 <HAL_DMA_IRQHandler+0x678>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a1f      	ldr	r2, [pc, #124]	; (8004370 <HAL_DMA_IRQHandler+0x6b4>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d01d      	beq.n	8004334 <HAL_DMA_IRQHandler+0x678>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a1d      	ldr	r2, [pc, #116]	; (8004374 <HAL_DMA_IRQHandler+0x6b8>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d018      	beq.n	8004334 <HAL_DMA_IRQHandler+0x678>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a1c      	ldr	r2, [pc, #112]	; (8004378 <HAL_DMA_IRQHandler+0x6bc>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d013      	beq.n	8004334 <HAL_DMA_IRQHandler+0x678>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a1a      	ldr	r2, [pc, #104]	; (800437c <HAL_DMA_IRQHandler+0x6c0>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d00e      	beq.n	8004334 <HAL_DMA_IRQHandler+0x678>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a19      	ldr	r2, [pc, #100]	; (8004380 <HAL_DMA_IRQHandler+0x6c4>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d009      	beq.n	8004334 <HAL_DMA_IRQHandler+0x678>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a17      	ldr	r2, [pc, #92]	; (8004384 <HAL_DMA_IRQHandler+0x6c8>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d004      	beq.n	8004334 <HAL_DMA_IRQHandler+0x678>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a16      	ldr	r2, [pc, #88]	; (8004388 <HAL_DMA_IRQHandler+0x6cc>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d12b      	bne.n	800438c <HAL_DMA_IRQHandler+0x6d0>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0310 	and.w	r3, r3, #16
 800433e:	2b00      	cmp	r3, #0
 8004340:	bf14      	ite	ne
 8004342:	2301      	movne	r3, #1
 8004344:	2300      	moveq	r3, #0
 8004346:	b2db      	uxtb	r3, r3
 8004348:	e02a      	b.n	80043a0 <HAL_DMA_IRQHandler+0x6e4>
 800434a:	bf00      	nop
 800434c:	40020010 	.word	0x40020010
 8004350:	40020028 	.word	0x40020028
 8004354:	40020040 	.word	0x40020040
 8004358:	40020058 	.word	0x40020058
 800435c:	40020070 	.word	0x40020070
 8004360:	40020088 	.word	0x40020088
 8004364:	400200a0 	.word	0x400200a0
 8004368:	400200b8 	.word	0x400200b8
 800436c:	40020410 	.word	0x40020410
 8004370:	40020428 	.word	0x40020428
 8004374:	40020440 	.word	0x40020440
 8004378:	40020458 	.word	0x40020458
 800437c:	40020470 	.word	0x40020470
 8004380:	40020488 	.word	0x40020488
 8004384:	400204a0 	.word	0x400204a0
 8004388:	400204b8 	.word	0x400204b8
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0302 	and.w	r3, r3, #2
 8004396:	2b00      	cmp	r3, #0
 8004398:	bf14      	ite	ne
 800439a:	2301      	movne	r3, #1
 800439c:	2300      	moveq	r3, #0
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	f000 8087 	beq.w	80044b4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043aa:	f003 031f 	and.w	r3, r3, #31
 80043ae:	2220      	movs	r2, #32
 80043b0:	409a      	lsls	r2, r3
 80043b2:	6a3b      	ldr	r3, [r7, #32]
 80043b4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	2b04      	cmp	r3, #4
 80043c0:	d139      	bne.n	8004436 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f022 0216 	bic.w	r2, r2, #22
 80043d0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	695a      	ldr	r2, [r3, #20]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043e0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d103      	bne.n	80043f2 <HAL_DMA_IRQHandler+0x736>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d007      	beq.n	8004402 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f022 0208 	bic.w	r2, r2, #8
 8004400:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004406:	f003 031f 	and.w	r3, r3, #31
 800440a:	223f      	movs	r2, #63	; 0x3f
 800440c:	409a      	lsls	r2, r3
 800440e:	6a3b      	ldr	r3, [r7, #32]
 8004410:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2201      	movs	r2, #1
 800441e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004426:	2b00      	cmp	r3, #0
 8004428:	f000 834a 	beq.w	8004ac0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	4798      	blx	r3
          }
          return;
 8004434:	e344      	b.n	8004ac0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d018      	beq.n	8004476 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d108      	bne.n	8004464 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004456:	2b00      	cmp	r3, #0
 8004458:	d02c      	beq.n	80044b4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	4798      	blx	r3
 8004462:	e027      	b.n	80044b4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004468:	2b00      	cmp	r3, #0
 800446a:	d023      	beq.n	80044b4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	4798      	blx	r3
 8004474:	e01e      	b.n	80044b4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004480:	2b00      	cmp	r3, #0
 8004482:	d10f      	bne.n	80044a4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f022 0210 	bic.w	r2, r2, #16
 8004492:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d003      	beq.n	80044b4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	f000 8306 	beq.w	8004aca <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044c2:	f003 0301 	and.w	r3, r3, #1
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	f000 8088 	beq.w	80045dc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2204      	movs	r2, #4
 80044d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a7a      	ldr	r2, [pc, #488]	; (80046c4 <HAL_DMA_IRQHandler+0xa08>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d04a      	beq.n	8004574 <HAL_DMA_IRQHandler+0x8b8>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a79      	ldr	r2, [pc, #484]	; (80046c8 <HAL_DMA_IRQHandler+0xa0c>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d045      	beq.n	8004574 <HAL_DMA_IRQHandler+0x8b8>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a77      	ldr	r2, [pc, #476]	; (80046cc <HAL_DMA_IRQHandler+0xa10>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d040      	beq.n	8004574 <HAL_DMA_IRQHandler+0x8b8>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a76      	ldr	r2, [pc, #472]	; (80046d0 <HAL_DMA_IRQHandler+0xa14>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d03b      	beq.n	8004574 <HAL_DMA_IRQHandler+0x8b8>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a74      	ldr	r2, [pc, #464]	; (80046d4 <HAL_DMA_IRQHandler+0xa18>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d036      	beq.n	8004574 <HAL_DMA_IRQHandler+0x8b8>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a73      	ldr	r2, [pc, #460]	; (80046d8 <HAL_DMA_IRQHandler+0xa1c>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d031      	beq.n	8004574 <HAL_DMA_IRQHandler+0x8b8>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a71      	ldr	r2, [pc, #452]	; (80046dc <HAL_DMA_IRQHandler+0xa20>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d02c      	beq.n	8004574 <HAL_DMA_IRQHandler+0x8b8>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a70      	ldr	r2, [pc, #448]	; (80046e0 <HAL_DMA_IRQHandler+0xa24>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d027      	beq.n	8004574 <HAL_DMA_IRQHandler+0x8b8>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a6e      	ldr	r2, [pc, #440]	; (80046e4 <HAL_DMA_IRQHandler+0xa28>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d022      	beq.n	8004574 <HAL_DMA_IRQHandler+0x8b8>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a6d      	ldr	r2, [pc, #436]	; (80046e8 <HAL_DMA_IRQHandler+0xa2c>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d01d      	beq.n	8004574 <HAL_DMA_IRQHandler+0x8b8>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a6b      	ldr	r2, [pc, #428]	; (80046ec <HAL_DMA_IRQHandler+0xa30>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d018      	beq.n	8004574 <HAL_DMA_IRQHandler+0x8b8>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a6a      	ldr	r2, [pc, #424]	; (80046f0 <HAL_DMA_IRQHandler+0xa34>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d013      	beq.n	8004574 <HAL_DMA_IRQHandler+0x8b8>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a68      	ldr	r2, [pc, #416]	; (80046f4 <HAL_DMA_IRQHandler+0xa38>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d00e      	beq.n	8004574 <HAL_DMA_IRQHandler+0x8b8>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a67      	ldr	r2, [pc, #412]	; (80046f8 <HAL_DMA_IRQHandler+0xa3c>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d009      	beq.n	8004574 <HAL_DMA_IRQHandler+0x8b8>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a65      	ldr	r2, [pc, #404]	; (80046fc <HAL_DMA_IRQHandler+0xa40>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d004      	beq.n	8004574 <HAL_DMA_IRQHandler+0x8b8>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a64      	ldr	r2, [pc, #400]	; (8004700 <HAL_DMA_IRQHandler+0xa44>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d108      	bne.n	8004586 <HAL_DMA_IRQHandler+0x8ca>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f022 0201 	bic.w	r2, r2, #1
 8004582:	601a      	str	r2, [r3, #0]
 8004584:	e007      	b.n	8004596 <HAL_DMA_IRQHandler+0x8da>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f022 0201 	bic.w	r2, r2, #1
 8004594:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	3301      	adds	r3, #1
 800459a:	60fb      	str	r3, [r7, #12]
 800459c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800459e:	429a      	cmp	r2, r3
 80045a0:	d307      	bcc.n	80045b2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0301 	and.w	r3, r3, #1
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d1f2      	bne.n	8004596 <HAL_DMA_IRQHandler+0x8da>
 80045b0:	e000      	b.n	80045b4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80045b2:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0301 	and.w	r3, r3, #1
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d004      	beq.n	80045d4 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2203      	movs	r2, #3
 80045ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80045d2:	e003      	b.n	80045dc <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	f000 8272 	beq.w	8004aca <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	4798      	blx	r3
 80045ee:	e26c      	b.n	8004aca <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a43      	ldr	r2, [pc, #268]	; (8004704 <HAL_DMA_IRQHandler+0xa48>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d022      	beq.n	8004640 <HAL_DMA_IRQHandler+0x984>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a42      	ldr	r2, [pc, #264]	; (8004708 <HAL_DMA_IRQHandler+0xa4c>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d01d      	beq.n	8004640 <HAL_DMA_IRQHandler+0x984>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a40      	ldr	r2, [pc, #256]	; (800470c <HAL_DMA_IRQHandler+0xa50>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d018      	beq.n	8004640 <HAL_DMA_IRQHandler+0x984>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a3f      	ldr	r2, [pc, #252]	; (8004710 <HAL_DMA_IRQHandler+0xa54>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d013      	beq.n	8004640 <HAL_DMA_IRQHandler+0x984>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a3d      	ldr	r2, [pc, #244]	; (8004714 <HAL_DMA_IRQHandler+0xa58>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d00e      	beq.n	8004640 <HAL_DMA_IRQHandler+0x984>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a3c      	ldr	r2, [pc, #240]	; (8004718 <HAL_DMA_IRQHandler+0xa5c>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d009      	beq.n	8004640 <HAL_DMA_IRQHandler+0x984>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a3a      	ldr	r2, [pc, #232]	; (800471c <HAL_DMA_IRQHandler+0xa60>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d004      	beq.n	8004640 <HAL_DMA_IRQHandler+0x984>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a39      	ldr	r2, [pc, #228]	; (8004720 <HAL_DMA_IRQHandler+0xa64>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d101      	bne.n	8004644 <HAL_DMA_IRQHandler+0x988>
 8004640:	2301      	movs	r3, #1
 8004642:	e000      	b.n	8004646 <HAL_DMA_IRQHandler+0x98a>
 8004644:	2300      	movs	r3, #0
 8004646:	2b00      	cmp	r3, #0
 8004648:	f000 823f 	beq.w	8004aca <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004658:	f003 031f 	and.w	r3, r3, #31
 800465c:	2204      	movs	r2, #4
 800465e:	409a      	lsls	r2, r3
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	4013      	ands	r3, r2
 8004664:	2b00      	cmp	r3, #0
 8004666:	f000 80cd 	beq.w	8004804 <HAL_DMA_IRQHandler+0xb48>
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	f003 0304 	and.w	r3, r3, #4
 8004670:	2b00      	cmp	r3, #0
 8004672:	f000 80c7 	beq.w	8004804 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800467a:	f003 031f 	and.w	r3, r3, #31
 800467e:	2204      	movs	r2, #4
 8004680:	409a      	lsls	r2, r3
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d049      	beq.n	8004724 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d109      	bne.n	80046ae <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800469e:	2b00      	cmp	r3, #0
 80046a0:	f000 8210 	beq.w	8004ac4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046ac:	e20a      	b.n	8004ac4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	f000 8206 	beq.w	8004ac4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046c0:	e200      	b.n	8004ac4 <HAL_DMA_IRQHandler+0xe08>
 80046c2:	bf00      	nop
 80046c4:	40020010 	.word	0x40020010
 80046c8:	40020028 	.word	0x40020028
 80046cc:	40020040 	.word	0x40020040
 80046d0:	40020058 	.word	0x40020058
 80046d4:	40020070 	.word	0x40020070
 80046d8:	40020088 	.word	0x40020088
 80046dc:	400200a0 	.word	0x400200a0
 80046e0:	400200b8 	.word	0x400200b8
 80046e4:	40020410 	.word	0x40020410
 80046e8:	40020428 	.word	0x40020428
 80046ec:	40020440 	.word	0x40020440
 80046f0:	40020458 	.word	0x40020458
 80046f4:	40020470 	.word	0x40020470
 80046f8:	40020488 	.word	0x40020488
 80046fc:	400204a0 	.word	0x400204a0
 8004700:	400204b8 	.word	0x400204b8
 8004704:	58025408 	.word	0x58025408
 8004708:	5802541c 	.word	0x5802541c
 800470c:	58025430 	.word	0x58025430
 8004710:	58025444 	.word	0x58025444
 8004714:	58025458 	.word	0x58025458
 8004718:	5802546c 	.word	0x5802546c
 800471c:	58025480 	.word	0x58025480
 8004720:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	f003 0320 	and.w	r3, r3, #32
 800472a:	2b00      	cmp	r3, #0
 800472c:	d160      	bne.n	80047f0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a7f      	ldr	r2, [pc, #508]	; (8004930 <HAL_DMA_IRQHandler+0xc74>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d04a      	beq.n	80047ce <HAL_DMA_IRQHandler+0xb12>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a7d      	ldr	r2, [pc, #500]	; (8004934 <HAL_DMA_IRQHandler+0xc78>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d045      	beq.n	80047ce <HAL_DMA_IRQHandler+0xb12>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a7c      	ldr	r2, [pc, #496]	; (8004938 <HAL_DMA_IRQHandler+0xc7c>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d040      	beq.n	80047ce <HAL_DMA_IRQHandler+0xb12>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a7a      	ldr	r2, [pc, #488]	; (800493c <HAL_DMA_IRQHandler+0xc80>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d03b      	beq.n	80047ce <HAL_DMA_IRQHandler+0xb12>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a79      	ldr	r2, [pc, #484]	; (8004940 <HAL_DMA_IRQHandler+0xc84>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d036      	beq.n	80047ce <HAL_DMA_IRQHandler+0xb12>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a77      	ldr	r2, [pc, #476]	; (8004944 <HAL_DMA_IRQHandler+0xc88>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d031      	beq.n	80047ce <HAL_DMA_IRQHandler+0xb12>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a76      	ldr	r2, [pc, #472]	; (8004948 <HAL_DMA_IRQHandler+0xc8c>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d02c      	beq.n	80047ce <HAL_DMA_IRQHandler+0xb12>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a74      	ldr	r2, [pc, #464]	; (800494c <HAL_DMA_IRQHandler+0xc90>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d027      	beq.n	80047ce <HAL_DMA_IRQHandler+0xb12>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a73      	ldr	r2, [pc, #460]	; (8004950 <HAL_DMA_IRQHandler+0xc94>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d022      	beq.n	80047ce <HAL_DMA_IRQHandler+0xb12>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a71      	ldr	r2, [pc, #452]	; (8004954 <HAL_DMA_IRQHandler+0xc98>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d01d      	beq.n	80047ce <HAL_DMA_IRQHandler+0xb12>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a70      	ldr	r2, [pc, #448]	; (8004958 <HAL_DMA_IRQHandler+0xc9c>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d018      	beq.n	80047ce <HAL_DMA_IRQHandler+0xb12>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a6e      	ldr	r2, [pc, #440]	; (800495c <HAL_DMA_IRQHandler+0xca0>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d013      	beq.n	80047ce <HAL_DMA_IRQHandler+0xb12>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a6d      	ldr	r2, [pc, #436]	; (8004960 <HAL_DMA_IRQHandler+0xca4>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d00e      	beq.n	80047ce <HAL_DMA_IRQHandler+0xb12>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a6b      	ldr	r2, [pc, #428]	; (8004964 <HAL_DMA_IRQHandler+0xca8>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d009      	beq.n	80047ce <HAL_DMA_IRQHandler+0xb12>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a6a      	ldr	r2, [pc, #424]	; (8004968 <HAL_DMA_IRQHandler+0xcac>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d004      	beq.n	80047ce <HAL_DMA_IRQHandler+0xb12>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a68      	ldr	r2, [pc, #416]	; (800496c <HAL_DMA_IRQHandler+0xcb0>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d108      	bne.n	80047e0 <HAL_DMA_IRQHandler+0xb24>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f022 0208 	bic.w	r2, r2, #8
 80047dc:	601a      	str	r2, [r3, #0]
 80047de:	e007      	b.n	80047f0 <HAL_DMA_IRQHandler+0xb34>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f022 0204 	bic.w	r2, r2, #4
 80047ee:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	f000 8165 	beq.w	8004ac4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004802:	e15f      	b.n	8004ac4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004808:	f003 031f 	and.w	r3, r3, #31
 800480c:	2202      	movs	r2, #2
 800480e:	409a      	lsls	r2, r3
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	4013      	ands	r3, r2
 8004814:	2b00      	cmp	r3, #0
 8004816:	f000 80c5 	beq.w	80049a4 <HAL_DMA_IRQHandler+0xce8>
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	f003 0302 	and.w	r3, r3, #2
 8004820:	2b00      	cmp	r3, #0
 8004822:	f000 80bf 	beq.w	80049a4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800482a:	f003 031f 	and.w	r3, r3, #31
 800482e:	2202      	movs	r2, #2
 8004830:	409a      	lsls	r2, r3
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d018      	beq.n	8004872 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d109      	bne.n	800485e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800484e:	2b00      	cmp	r3, #0
 8004850:	f000 813a 	beq.w	8004ac8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800485c:	e134      	b.n	8004ac8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004862:	2b00      	cmp	r3, #0
 8004864:	f000 8130 	beq.w	8004ac8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004870:	e12a      	b.n	8004ac8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	f003 0320 	and.w	r3, r3, #32
 8004878:	2b00      	cmp	r3, #0
 800487a:	f040 8089 	bne.w	8004990 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a2b      	ldr	r2, [pc, #172]	; (8004930 <HAL_DMA_IRQHandler+0xc74>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d04a      	beq.n	800491e <HAL_DMA_IRQHandler+0xc62>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a29      	ldr	r2, [pc, #164]	; (8004934 <HAL_DMA_IRQHandler+0xc78>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d045      	beq.n	800491e <HAL_DMA_IRQHandler+0xc62>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a28      	ldr	r2, [pc, #160]	; (8004938 <HAL_DMA_IRQHandler+0xc7c>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d040      	beq.n	800491e <HAL_DMA_IRQHandler+0xc62>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a26      	ldr	r2, [pc, #152]	; (800493c <HAL_DMA_IRQHandler+0xc80>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d03b      	beq.n	800491e <HAL_DMA_IRQHandler+0xc62>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a25      	ldr	r2, [pc, #148]	; (8004940 <HAL_DMA_IRQHandler+0xc84>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d036      	beq.n	800491e <HAL_DMA_IRQHandler+0xc62>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a23      	ldr	r2, [pc, #140]	; (8004944 <HAL_DMA_IRQHandler+0xc88>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d031      	beq.n	800491e <HAL_DMA_IRQHandler+0xc62>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a22      	ldr	r2, [pc, #136]	; (8004948 <HAL_DMA_IRQHandler+0xc8c>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d02c      	beq.n	800491e <HAL_DMA_IRQHandler+0xc62>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a20      	ldr	r2, [pc, #128]	; (800494c <HAL_DMA_IRQHandler+0xc90>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d027      	beq.n	800491e <HAL_DMA_IRQHandler+0xc62>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a1f      	ldr	r2, [pc, #124]	; (8004950 <HAL_DMA_IRQHandler+0xc94>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d022      	beq.n	800491e <HAL_DMA_IRQHandler+0xc62>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a1d      	ldr	r2, [pc, #116]	; (8004954 <HAL_DMA_IRQHandler+0xc98>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d01d      	beq.n	800491e <HAL_DMA_IRQHandler+0xc62>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a1c      	ldr	r2, [pc, #112]	; (8004958 <HAL_DMA_IRQHandler+0xc9c>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d018      	beq.n	800491e <HAL_DMA_IRQHandler+0xc62>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a1a      	ldr	r2, [pc, #104]	; (800495c <HAL_DMA_IRQHandler+0xca0>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d013      	beq.n	800491e <HAL_DMA_IRQHandler+0xc62>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a19      	ldr	r2, [pc, #100]	; (8004960 <HAL_DMA_IRQHandler+0xca4>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d00e      	beq.n	800491e <HAL_DMA_IRQHandler+0xc62>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a17      	ldr	r2, [pc, #92]	; (8004964 <HAL_DMA_IRQHandler+0xca8>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d009      	beq.n	800491e <HAL_DMA_IRQHandler+0xc62>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a16      	ldr	r2, [pc, #88]	; (8004968 <HAL_DMA_IRQHandler+0xcac>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d004      	beq.n	800491e <HAL_DMA_IRQHandler+0xc62>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a14      	ldr	r2, [pc, #80]	; (800496c <HAL_DMA_IRQHandler+0xcb0>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d128      	bne.n	8004970 <HAL_DMA_IRQHandler+0xcb4>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f022 0214 	bic.w	r2, r2, #20
 800492c:	601a      	str	r2, [r3, #0]
 800492e:	e027      	b.n	8004980 <HAL_DMA_IRQHandler+0xcc4>
 8004930:	40020010 	.word	0x40020010
 8004934:	40020028 	.word	0x40020028
 8004938:	40020040 	.word	0x40020040
 800493c:	40020058 	.word	0x40020058
 8004940:	40020070 	.word	0x40020070
 8004944:	40020088 	.word	0x40020088
 8004948:	400200a0 	.word	0x400200a0
 800494c:	400200b8 	.word	0x400200b8
 8004950:	40020410 	.word	0x40020410
 8004954:	40020428 	.word	0x40020428
 8004958:	40020440 	.word	0x40020440
 800495c:	40020458 	.word	0x40020458
 8004960:	40020470 	.word	0x40020470
 8004964:	40020488 	.word	0x40020488
 8004968:	400204a0 	.word	0x400204a0
 800496c:	400204b8 	.word	0x400204b8
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f022 020a 	bic.w	r2, r2, #10
 800497e:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004994:	2b00      	cmp	r3, #0
 8004996:	f000 8097 	beq.w	8004ac8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049a2:	e091      	b.n	8004ac8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049a8:	f003 031f 	and.w	r3, r3, #31
 80049ac:	2208      	movs	r2, #8
 80049ae:	409a      	lsls	r2, r3
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	4013      	ands	r3, r2
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	f000 8088 	beq.w	8004aca <HAL_DMA_IRQHandler+0xe0e>
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	f003 0308 	and.w	r3, r3, #8
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	f000 8082 	beq.w	8004aca <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a41      	ldr	r2, [pc, #260]	; (8004ad0 <HAL_DMA_IRQHandler+0xe14>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d04a      	beq.n	8004a66 <HAL_DMA_IRQHandler+0xdaa>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a3f      	ldr	r2, [pc, #252]	; (8004ad4 <HAL_DMA_IRQHandler+0xe18>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d045      	beq.n	8004a66 <HAL_DMA_IRQHandler+0xdaa>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a3e      	ldr	r2, [pc, #248]	; (8004ad8 <HAL_DMA_IRQHandler+0xe1c>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d040      	beq.n	8004a66 <HAL_DMA_IRQHandler+0xdaa>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a3c      	ldr	r2, [pc, #240]	; (8004adc <HAL_DMA_IRQHandler+0xe20>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d03b      	beq.n	8004a66 <HAL_DMA_IRQHandler+0xdaa>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a3b      	ldr	r2, [pc, #236]	; (8004ae0 <HAL_DMA_IRQHandler+0xe24>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d036      	beq.n	8004a66 <HAL_DMA_IRQHandler+0xdaa>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a39      	ldr	r2, [pc, #228]	; (8004ae4 <HAL_DMA_IRQHandler+0xe28>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d031      	beq.n	8004a66 <HAL_DMA_IRQHandler+0xdaa>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a38      	ldr	r2, [pc, #224]	; (8004ae8 <HAL_DMA_IRQHandler+0xe2c>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d02c      	beq.n	8004a66 <HAL_DMA_IRQHandler+0xdaa>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a36      	ldr	r2, [pc, #216]	; (8004aec <HAL_DMA_IRQHandler+0xe30>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d027      	beq.n	8004a66 <HAL_DMA_IRQHandler+0xdaa>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a35      	ldr	r2, [pc, #212]	; (8004af0 <HAL_DMA_IRQHandler+0xe34>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d022      	beq.n	8004a66 <HAL_DMA_IRQHandler+0xdaa>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a33      	ldr	r2, [pc, #204]	; (8004af4 <HAL_DMA_IRQHandler+0xe38>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d01d      	beq.n	8004a66 <HAL_DMA_IRQHandler+0xdaa>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a32      	ldr	r2, [pc, #200]	; (8004af8 <HAL_DMA_IRQHandler+0xe3c>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d018      	beq.n	8004a66 <HAL_DMA_IRQHandler+0xdaa>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a30      	ldr	r2, [pc, #192]	; (8004afc <HAL_DMA_IRQHandler+0xe40>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d013      	beq.n	8004a66 <HAL_DMA_IRQHandler+0xdaa>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a2f      	ldr	r2, [pc, #188]	; (8004b00 <HAL_DMA_IRQHandler+0xe44>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d00e      	beq.n	8004a66 <HAL_DMA_IRQHandler+0xdaa>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a2d      	ldr	r2, [pc, #180]	; (8004b04 <HAL_DMA_IRQHandler+0xe48>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d009      	beq.n	8004a66 <HAL_DMA_IRQHandler+0xdaa>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a2c      	ldr	r2, [pc, #176]	; (8004b08 <HAL_DMA_IRQHandler+0xe4c>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d004      	beq.n	8004a66 <HAL_DMA_IRQHandler+0xdaa>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a2a      	ldr	r2, [pc, #168]	; (8004b0c <HAL_DMA_IRQHandler+0xe50>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d108      	bne.n	8004a78 <HAL_DMA_IRQHandler+0xdbc>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f022 021c 	bic.w	r2, r2, #28
 8004a74:	601a      	str	r2, [r3, #0]
 8004a76:	e007      	b.n	8004a88 <HAL_DMA_IRQHandler+0xdcc>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f022 020e 	bic.w	r2, r2, #14
 8004a86:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a8c:	f003 031f 	and.w	r3, r3, #31
 8004a90:	2201      	movs	r2, #1
 8004a92:	409a      	lsls	r2, r3
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d009      	beq.n	8004aca <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	4798      	blx	r3
 8004abe:	e004      	b.n	8004aca <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004ac0:	bf00      	nop
 8004ac2:	e002      	b.n	8004aca <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ac4:	bf00      	nop
 8004ac6:	e000      	b.n	8004aca <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ac8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004aca:	3728      	adds	r7, #40	; 0x28
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	40020010 	.word	0x40020010
 8004ad4:	40020028 	.word	0x40020028
 8004ad8:	40020040 	.word	0x40020040
 8004adc:	40020058 	.word	0x40020058
 8004ae0:	40020070 	.word	0x40020070
 8004ae4:	40020088 	.word	0x40020088
 8004ae8:	400200a0 	.word	0x400200a0
 8004aec:	400200b8 	.word	0x400200b8
 8004af0:	40020410 	.word	0x40020410
 8004af4:	40020428 	.word	0x40020428
 8004af8:	40020440 	.word	0x40020440
 8004afc:	40020458 	.word	0x40020458
 8004b00:	40020470 	.word	0x40020470
 8004b04:	40020488 	.word	0x40020488
 8004b08:	400204a0 	.word	0x400204a0
 8004b0c:	400204b8 	.word	0x400204b8

08004b10 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b1e:	b2db      	uxtb	r3, r3
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	370c      	adds	r7, #12
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b087      	sub	sp, #28
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	607a      	str	r2, [r7, #4]
 8004b50:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b56:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b5c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a7f      	ldr	r2, [pc, #508]	; (8004d60 <DMA_SetConfig+0x21c>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d072      	beq.n	8004c4e <DMA_SetConfig+0x10a>
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a7d      	ldr	r2, [pc, #500]	; (8004d64 <DMA_SetConfig+0x220>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d06d      	beq.n	8004c4e <DMA_SetConfig+0x10a>
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a7c      	ldr	r2, [pc, #496]	; (8004d68 <DMA_SetConfig+0x224>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d068      	beq.n	8004c4e <DMA_SetConfig+0x10a>
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a7a      	ldr	r2, [pc, #488]	; (8004d6c <DMA_SetConfig+0x228>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d063      	beq.n	8004c4e <DMA_SetConfig+0x10a>
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a79      	ldr	r2, [pc, #484]	; (8004d70 <DMA_SetConfig+0x22c>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d05e      	beq.n	8004c4e <DMA_SetConfig+0x10a>
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a77      	ldr	r2, [pc, #476]	; (8004d74 <DMA_SetConfig+0x230>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d059      	beq.n	8004c4e <DMA_SetConfig+0x10a>
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a76      	ldr	r2, [pc, #472]	; (8004d78 <DMA_SetConfig+0x234>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d054      	beq.n	8004c4e <DMA_SetConfig+0x10a>
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a74      	ldr	r2, [pc, #464]	; (8004d7c <DMA_SetConfig+0x238>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d04f      	beq.n	8004c4e <DMA_SetConfig+0x10a>
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a73      	ldr	r2, [pc, #460]	; (8004d80 <DMA_SetConfig+0x23c>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d04a      	beq.n	8004c4e <DMA_SetConfig+0x10a>
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a71      	ldr	r2, [pc, #452]	; (8004d84 <DMA_SetConfig+0x240>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d045      	beq.n	8004c4e <DMA_SetConfig+0x10a>
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a70      	ldr	r2, [pc, #448]	; (8004d88 <DMA_SetConfig+0x244>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d040      	beq.n	8004c4e <DMA_SetConfig+0x10a>
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a6e      	ldr	r2, [pc, #440]	; (8004d8c <DMA_SetConfig+0x248>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d03b      	beq.n	8004c4e <DMA_SetConfig+0x10a>
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a6d      	ldr	r2, [pc, #436]	; (8004d90 <DMA_SetConfig+0x24c>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d036      	beq.n	8004c4e <DMA_SetConfig+0x10a>
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a6b      	ldr	r2, [pc, #428]	; (8004d94 <DMA_SetConfig+0x250>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d031      	beq.n	8004c4e <DMA_SetConfig+0x10a>
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a6a      	ldr	r2, [pc, #424]	; (8004d98 <DMA_SetConfig+0x254>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d02c      	beq.n	8004c4e <DMA_SetConfig+0x10a>
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a68      	ldr	r2, [pc, #416]	; (8004d9c <DMA_SetConfig+0x258>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d027      	beq.n	8004c4e <DMA_SetConfig+0x10a>
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a67      	ldr	r2, [pc, #412]	; (8004da0 <DMA_SetConfig+0x25c>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d022      	beq.n	8004c4e <DMA_SetConfig+0x10a>
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a65      	ldr	r2, [pc, #404]	; (8004da4 <DMA_SetConfig+0x260>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d01d      	beq.n	8004c4e <DMA_SetConfig+0x10a>
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a64      	ldr	r2, [pc, #400]	; (8004da8 <DMA_SetConfig+0x264>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d018      	beq.n	8004c4e <DMA_SetConfig+0x10a>
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a62      	ldr	r2, [pc, #392]	; (8004dac <DMA_SetConfig+0x268>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d013      	beq.n	8004c4e <DMA_SetConfig+0x10a>
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a61      	ldr	r2, [pc, #388]	; (8004db0 <DMA_SetConfig+0x26c>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d00e      	beq.n	8004c4e <DMA_SetConfig+0x10a>
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a5f      	ldr	r2, [pc, #380]	; (8004db4 <DMA_SetConfig+0x270>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d009      	beq.n	8004c4e <DMA_SetConfig+0x10a>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a5e      	ldr	r2, [pc, #376]	; (8004db8 <DMA_SetConfig+0x274>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d004      	beq.n	8004c4e <DMA_SetConfig+0x10a>
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a5c      	ldr	r2, [pc, #368]	; (8004dbc <DMA_SetConfig+0x278>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d101      	bne.n	8004c52 <DMA_SetConfig+0x10e>
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e000      	b.n	8004c54 <DMA_SetConfig+0x110>
 8004c52:	2300      	movs	r3, #0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d00d      	beq.n	8004c74 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c5c:	68fa      	ldr	r2, [r7, #12]
 8004c5e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004c60:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d004      	beq.n	8004c74 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c6e:	68fa      	ldr	r2, [r7, #12]
 8004c70:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004c72:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a39      	ldr	r2, [pc, #228]	; (8004d60 <DMA_SetConfig+0x21c>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d04a      	beq.n	8004d14 <DMA_SetConfig+0x1d0>
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a38      	ldr	r2, [pc, #224]	; (8004d64 <DMA_SetConfig+0x220>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d045      	beq.n	8004d14 <DMA_SetConfig+0x1d0>
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a36      	ldr	r2, [pc, #216]	; (8004d68 <DMA_SetConfig+0x224>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d040      	beq.n	8004d14 <DMA_SetConfig+0x1d0>
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a35      	ldr	r2, [pc, #212]	; (8004d6c <DMA_SetConfig+0x228>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d03b      	beq.n	8004d14 <DMA_SetConfig+0x1d0>
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a33      	ldr	r2, [pc, #204]	; (8004d70 <DMA_SetConfig+0x22c>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d036      	beq.n	8004d14 <DMA_SetConfig+0x1d0>
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a32      	ldr	r2, [pc, #200]	; (8004d74 <DMA_SetConfig+0x230>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d031      	beq.n	8004d14 <DMA_SetConfig+0x1d0>
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a30      	ldr	r2, [pc, #192]	; (8004d78 <DMA_SetConfig+0x234>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d02c      	beq.n	8004d14 <DMA_SetConfig+0x1d0>
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a2f      	ldr	r2, [pc, #188]	; (8004d7c <DMA_SetConfig+0x238>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d027      	beq.n	8004d14 <DMA_SetConfig+0x1d0>
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a2d      	ldr	r2, [pc, #180]	; (8004d80 <DMA_SetConfig+0x23c>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d022      	beq.n	8004d14 <DMA_SetConfig+0x1d0>
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a2c      	ldr	r2, [pc, #176]	; (8004d84 <DMA_SetConfig+0x240>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d01d      	beq.n	8004d14 <DMA_SetConfig+0x1d0>
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a2a      	ldr	r2, [pc, #168]	; (8004d88 <DMA_SetConfig+0x244>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d018      	beq.n	8004d14 <DMA_SetConfig+0x1d0>
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a29      	ldr	r2, [pc, #164]	; (8004d8c <DMA_SetConfig+0x248>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d013      	beq.n	8004d14 <DMA_SetConfig+0x1d0>
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a27      	ldr	r2, [pc, #156]	; (8004d90 <DMA_SetConfig+0x24c>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d00e      	beq.n	8004d14 <DMA_SetConfig+0x1d0>
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a26      	ldr	r2, [pc, #152]	; (8004d94 <DMA_SetConfig+0x250>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d009      	beq.n	8004d14 <DMA_SetConfig+0x1d0>
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a24      	ldr	r2, [pc, #144]	; (8004d98 <DMA_SetConfig+0x254>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d004      	beq.n	8004d14 <DMA_SetConfig+0x1d0>
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a23      	ldr	r2, [pc, #140]	; (8004d9c <DMA_SetConfig+0x258>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d101      	bne.n	8004d18 <DMA_SetConfig+0x1d4>
 8004d14:	2301      	movs	r3, #1
 8004d16:	e000      	b.n	8004d1a <DMA_SetConfig+0x1d6>
 8004d18:	2300      	movs	r3, #0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d059      	beq.n	8004dd2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d22:	f003 031f 	and.w	r3, r3, #31
 8004d26:	223f      	movs	r2, #63	; 0x3f
 8004d28:	409a      	lsls	r2, r3
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004d3c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	683a      	ldr	r2, [r7, #0]
 8004d44:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	2b40      	cmp	r3, #64	; 0x40
 8004d4c:	d138      	bne.n	8004dc0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	68ba      	ldr	r2, [r7, #8]
 8004d5c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004d5e:	e086      	b.n	8004e6e <DMA_SetConfig+0x32a>
 8004d60:	40020010 	.word	0x40020010
 8004d64:	40020028 	.word	0x40020028
 8004d68:	40020040 	.word	0x40020040
 8004d6c:	40020058 	.word	0x40020058
 8004d70:	40020070 	.word	0x40020070
 8004d74:	40020088 	.word	0x40020088
 8004d78:	400200a0 	.word	0x400200a0
 8004d7c:	400200b8 	.word	0x400200b8
 8004d80:	40020410 	.word	0x40020410
 8004d84:	40020428 	.word	0x40020428
 8004d88:	40020440 	.word	0x40020440
 8004d8c:	40020458 	.word	0x40020458
 8004d90:	40020470 	.word	0x40020470
 8004d94:	40020488 	.word	0x40020488
 8004d98:	400204a0 	.word	0x400204a0
 8004d9c:	400204b8 	.word	0x400204b8
 8004da0:	58025408 	.word	0x58025408
 8004da4:	5802541c 	.word	0x5802541c
 8004da8:	58025430 	.word	0x58025430
 8004dac:	58025444 	.word	0x58025444
 8004db0:	58025458 	.word	0x58025458
 8004db4:	5802546c 	.word	0x5802546c
 8004db8:	58025480 	.word	0x58025480
 8004dbc:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68ba      	ldr	r2, [r7, #8]
 8004dc6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	60da      	str	r2, [r3, #12]
}
 8004dd0:	e04d      	b.n	8004e6e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a29      	ldr	r2, [pc, #164]	; (8004e7c <DMA_SetConfig+0x338>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d022      	beq.n	8004e22 <DMA_SetConfig+0x2de>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a27      	ldr	r2, [pc, #156]	; (8004e80 <DMA_SetConfig+0x33c>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d01d      	beq.n	8004e22 <DMA_SetConfig+0x2de>
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a26      	ldr	r2, [pc, #152]	; (8004e84 <DMA_SetConfig+0x340>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d018      	beq.n	8004e22 <DMA_SetConfig+0x2de>
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a24      	ldr	r2, [pc, #144]	; (8004e88 <DMA_SetConfig+0x344>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d013      	beq.n	8004e22 <DMA_SetConfig+0x2de>
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a23      	ldr	r2, [pc, #140]	; (8004e8c <DMA_SetConfig+0x348>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d00e      	beq.n	8004e22 <DMA_SetConfig+0x2de>
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a21      	ldr	r2, [pc, #132]	; (8004e90 <DMA_SetConfig+0x34c>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d009      	beq.n	8004e22 <DMA_SetConfig+0x2de>
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a20      	ldr	r2, [pc, #128]	; (8004e94 <DMA_SetConfig+0x350>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d004      	beq.n	8004e22 <DMA_SetConfig+0x2de>
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a1e      	ldr	r2, [pc, #120]	; (8004e98 <DMA_SetConfig+0x354>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d101      	bne.n	8004e26 <DMA_SetConfig+0x2e2>
 8004e22:	2301      	movs	r3, #1
 8004e24:	e000      	b.n	8004e28 <DMA_SetConfig+0x2e4>
 8004e26:	2300      	movs	r3, #0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d020      	beq.n	8004e6e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e30:	f003 031f 	and.w	r3, r3, #31
 8004e34:	2201      	movs	r2, #1
 8004e36:	409a      	lsls	r2, r3
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	683a      	ldr	r2, [r7, #0]
 8004e42:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	2b40      	cmp	r3, #64	; 0x40
 8004e4a:	d108      	bne.n	8004e5e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68ba      	ldr	r2, [r7, #8]
 8004e5a:	60da      	str	r2, [r3, #12]
}
 8004e5c:	e007      	b.n	8004e6e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	68ba      	ldr	r2, [r7, #8]
 8004e64:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	60da      	str	r2, [r3, #12]
}
 8004e6e:	bf00      	nop
 8004e70:	371c      	adds	r7, #28
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop
 8004e7c:	58025408 	.word	0x58025408
 8004e80:	5802541c 	.word	0x5802541c
 8004e84:	58025430 	.word	0x58025430
 8004e88:	58025444 	.word	0x58025444
 8004e8c:	58025458 	.word	0x58025458
 8004e90:	5802546c 	.word	0x5802546c
 8004e94:	58025480 	.word	0x58025480
 8004e98:	58025494 	.word	0x58025494

08004e9c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b085      	sub	sp, #20
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a42      	ldr	r2, [pc, #264]	; (8004fb4 <DMA_CalcBaseAndBitshift+0x118>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d04a      	beq.n	8004f44 <DMA_CalcBaseAndBitshift+0xa8>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a41      	ldr	r2, [pc, #260]	; (8004fb8 <DMA_CalcBaseAndBitshift+0x11c>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d045      	beq.n	8004f44 <DMA_CalcBaseAndBitshift+0xa8>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a3f      	ldr	r2, [pc, #252]	; (8004fbc <DMA_CalcBaseAndBitshift+0x120>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d040      	beq.n	8004f44 <DMA_CalcBaseAndBitshift+0xa8>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a3e      	ldr	r2, [pc, #248]	; (8004fc0 <DMA_CalcBaseAndBitshift+0x124>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d03b      	beq.n	8004f44 <DMA_CalcBaseAndBitshift+0xa8>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a3c      	ldr	r2, [pc, #240]	; (8004fc4 <DMA_CalcBaseAndBitshift+0x128>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d036      	beq.n	8004f44 <DMA_CalcBaseAndBitshift+0xa8>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a3b      	ldr	r2, [pc, #236]	; (8004fc8 <DMA_CalcBaseAndBitshift+0x12c>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d031      	beq.n	8004f44 <DMA_CalcBaseAndBitshift+0xa8>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a39      	ldr	r2, [pc, #228]	; (8004fcc <DMA_CalcBaseAndBitshift+0x130>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d02c      	beq.n	8004f44 <DMA_CalcBaseAndBitshift+0xa8>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a38      	ldr	r2, [pc, #224]	; (8004fd0 <DMA_CalcBaseAndBitshift+0x134>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d027      	beq.n	8004f44 <DMA_CalcBaseAndBitshift+0xa8>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a36      	ldr	r2, [pc, #216]	; (8004fd4 <DMA_CalcBaseAndBitshift+0x138>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d022      	beq.n	8004f44 <DMA_CalcBaseAndBitshift+0xa8>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a35      	ldr	r2, [pc, #212]	; (8004fd8 <DMA_CalcBaseAndBitshift+0x13c>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d01d      	beq.n	8004f44 <DMA_CalcBaseAndBitshift+0xa8>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a33      	ldr	r2, [pc, #204]	; (8004fdc <DMA_CalcBaseAndBitshift+0x140>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d018      	beq.n	8004f44 <DMA_CalcBaseAndBitshift+0xa8>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a32      	ldr	r2, [pc, #200]	; (8004fe0 <DMA_CalcBaseAndBitshift+0x144>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d013      	beq.n	8004f44 <DMA_CalcBaseAndBitshift+0xa8>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a30      	ldr	r2, [pc, #192]	; (8004fe4 <DMA_CalcBaseAndBitshift+0x148>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d00e      	beq.n	8004f44 <DMA_CalcBaseAndBitshift+0xa8>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a2f      	ldr	r2, [pc, #188]	; (8004fe8 <DMA_CalcBaseAndBitshift+0x14c>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d009      	beq.n	8004f44 <DMA_CalcBaseAndBitshift+0xa8>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a2d      	ldr	r2, [pc, #180]	; (8004fec <DMA_CalcBaseAndBitshift+0x150>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d004      	beq.n	8004f44 <DMA_CalcBaseAndBitshift+0xa8>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a2c      	ldr	r2, [pc, #176]	; (8004ff0 <DMA_CalcBaseAndBitshift+0x154>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d101      	bne.n	8004f48 <DMA_CalcBaseAndBitshift+0xac>
 8004f44:	2301      	movs	r3, #1
 8004f46:	e000      	b.n	8004f4a <DMA_CalcBaseAndBitshift+0xae>
 8004f48:	2300      	movs	r3, #0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d024      	beq.n	8004f98 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	3b10      	subs	r3, #16
 8004f56:	4a27      	ldr	r2, [pc, #156]	; (8004ff4 <DMA_CalcBaseAndBitshift+0x158>)
 8004f58:	fba2 2303 	umull	r2, r3, r2, r3
 8004f5c:	091b      	lsrs	r3, r3, #4
 8004f5e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f003 0307 	and.w	r3, r3, #7
 8004f66:	4a24      	ldr	r2, [pc, #144]	; (8004ff8 <DMA_CalcBaseAndBitshift+0x15c>)
 8004f68:	5cd3      	ldrb	r3, [r2, r3]
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2b03      	cmp	r3, #3
 8004f74:	d908      	bls.n	8004f88 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	4b1f      	ldr	r3, [pc, #124]	; (8004ffc <DMA_CalcBaseAndBitshift+0x160>)
 8004f7e:	4013      	ands	r3, r2
 8004f80:	1d1a      	adds	r2, r3, #4
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	659a      	str	r2, [r3, #88]	; 0x58
 8004f86:	e00d      	b.n	8004fa4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	4b1b      	ldr	r3, [pc, #108]	; (8004ffc <DMA_CalcBaseAndBitshift+0x160>)
 8004f90:	4013      	ands	r3, r2
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	6593      	str	r3, [r2, #88]	; 0x58
 8004f96:	e005      	b.n	8004fa4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3714      	adds	r7, #20
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr
 8004fb4:	40020010 	.word	0x40020010
 8004fb8:	40020028 	.word	0x40020028
 8004fbc:	40020040 	.word	0x40020040
 8004fc0:	40020058 	.word	0x40020058
 8004fc4:	40020070 	.word	0x40020070
 8004fc8:	40020088 	.word	0x40020088
 8004fcc:	400200a0 	.word	0x400200a0
 8004fd0:	400200b8 	.word	0x400200b8
 8004fd4:	40020410 	.word	0x40020410
 8004fd8:	40020428 	.word	0x40020428
 8004fdc:	40020440 	.word	0x40020440
 8004fe0:	40020458 	.word	0x40020458
 8004fe4:	40020470 	.word	0x40020470
 8004fe8:	40020488 	.word	0x40020488
 8004fec:	400204a0 	.word	0x400204a0
 8004ff0:	400204b8 	.word	0x400204b8
 8004ff4:	aaaaaaab 	.word	0xaaaaaaab
 8004ff8:	08013ca0 	.word	0x08013ca0
 8004ffc:	fffffc00 	.word	0xfffffc00

08005000 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005000:	b480      	push	{r7}
 8005002:	b085      	sub	sp, #20
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005008:	2300      	movs	r3, #0
 800500a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	699b      	ldr	r3, [r3, #24]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d120      	bne.n	8005056 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005018:	2b03      	cmp	r3, #3
 800501a:	d858      	bhi.n	80050ce <DMA_CheckFifoParam+0xce>
 800501c:	a201      	add	r2, pc, #4	; (adr r2, 8005024 <DMA_CheckFifoParam+0x24>)
 800501e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005022:	bf00      	nop
 8005024:	08005035 	.word	0x08005035
 8005028:	08005047 	.word	0x08005047
 800502c:	08005035 	.word	0x08005035
 8005030:	080050cf 	.word	0x080050cf
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005038:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800503c:	2b00      	cmp	r3, #0
 800503e:	d048      	beq.n	80050d2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005044:	e045      	b.n	80050d2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800504a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800504e:	d142      	bne.n	80050d6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005054:	e03f      	b.n	80050d6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800505e:	d123      	bne.n	80050a8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005064:	2b03      	cmp	r3, #3
 8005066:	d838      	bhi.n	80050da <DMA_CheckFifoParam+0xda>
 8005068:	a201      	add	r2, pc, #4	; (adr r2, 8005070 <DMA_CheckFifoParam+0x70>)
 800506a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800506e:	bf00      	nop
 8005070:	08005081 	.word	0x08005081
 8005074:	08005087 	.word	0x08005087
 8005078:	08005081 	.word	0x08005081
 800507c:	08005099 	.word	0x08005099
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	73fb      	strb	r3, [r7, #15]
        break;
 8005084:	e030      	b.n	80050e8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800508a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800508e:	2b00      	cmp	r3, #0
 8005090:	d025      	beq.n	80050de <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005096:	e022      	b.n	80050de <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800509c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80050a0:	d11f      	bne.n	80050e2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80050a6:	e01c      	b.n	80050e2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ac:	2b02      	cmp	r3, #2
 80050ae:	d902      	bls.n	80050b6 <DMA_CheckFifoParam+0xb6>
 80050b0:	2b03      	cmp	r3, #3
 80050b2:	d003      	beq.n	80050bc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80050b4:	e018      	b.n	80050e8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	73fb      	strb	r3, [r7, #15]
        break;
 80050ba:	e015      	b.n	80050e8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d00e      	beq.n	80050e6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	73fb      	strb	r3, [r7, #15]
    break;
 80050cc:	e00b      	b.n	80050e6 <DMA_CheckFifoParam+0xe6>
        break;
 80050ce:	bf00      	nop
 80050d0:	e00a      	b.n	80050e8 <DMA_CheckFifoParam+0xe8>
        break;
 80050d2:	bf00      	nop
 80050d4:	e008      	b.n	80050e8 <DMA_CheckFifoParam+0xe8>
        break;
 80050d6:	bf00      	nop
 80050d8:	e006      	b.n	80050e8 <DMA_CheckFifoParam+0xe8>
        break;
 80050da:	bf00      	nop
 80050dc:	e004      	b.n	80050e8 <DMA_CheckFifoParam+0xe8>
        break;
 80050de:	bf00      	nop
 80050e0:	e002      	b.n	80050e8 <DMA_CheckFifoParam+0xe8>
        break;
 80050e2:	bf00      	nop
 80050e4:	e000      	b.n	80050e8 <DMA_CheckFifoParam+0xe8>
    break;
 80050e6:	bf00      	nop
    }
  }

  return status;
 80050e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3714      	adds	r7, #20
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr
 80050f6:	bf00      	nop

080050f8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b085      	sub	sp, #20
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a38      	ldr	r2, [pc, #224]	; (80051ec <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d022      	beq.n	8005156 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a36      	ldr	r2, [pc, #216]	; (80051f0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d01d      	beq.n	8005156 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a35      	ldr	r2, [pc, #212]	; (80051f4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d018      	beq.n	8005156 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a33      	ldr	r2, [pc, #204]	; (80051f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d013      	beq.n	8005156 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a32      	ldr	r2, [pc, #200]	; (80051fc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d00e      	beq.n	8005156 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a30      	ldr	r2, [pc, #192]	; (8005200 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d009      	beq.n	8005156 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a2f      	ldr	r2, [pc, #188]	; (8005204 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d004      	beq.n	8005156 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a2d      	ldr	r2, [pc, #180]	; (8005208 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d101      	bne.n	800515a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005156:	2301      	movs	r3, #1
 8005158:	e000      	b.n	800515c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800515a:	2300      	movs	r3, #0
 800515c:	2b00      	cmp	r3, #0
 800515e:	d01a      	beq.n	8005196 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	b2db      	uxtb	r3, r3
 8005166:	3b08      	subs	r3, #8
 8005168:	4a28      	ldr	r2, [pc, #160]	; (800520c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800516a:	fba2 2303 	umull	r2, r3, r2, r3
 800516e:	091b      	lsrs	r3, r3, #4
 8005170:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005172:	68fa      	ldr	r2, [r7, #12]
 8005174:	4b26      	ldr	r3, [pc, #152]	; (8005210 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005176:	4413      	add	r3, r2
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	461a      	mov	r2, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	4a24      	ldr	r2, [pc, #144]	; (8005214 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005184:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f003 031f 	and.w	r3, r3, #31
 800518c:	2201      	movs	r2, #1
 800518e:	409a      	lsls	r2, r3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005194:	e024      	b.n	80051e0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	b2db      	uxtb	r3, r3
 800519c:	3b10      	subs	r3, #16
 800519e:	4a1e      	ldr	r2, [pc, #120]	; (8005218 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80051a0:	fba2 2303 	umull	r2, r3, r2, r3
 80051a4:	091b      	lsrs	r3, r3, #4
 80051a6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	4a1c      	ldr	r2, [pc, #112]	; (800521c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d806      	bhi.n	80051be <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	4a1b      	ldr	r2, [pc, #108]	; (8005220 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d902      	bls.n	80051be <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	3308      	adds	r3, #8
 80051bc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80051be:	68fa      	ldr	r2, [r7, #12]
 80051c0:	4b18      	ldr	r3, [pc, #96]	; (8005224 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80051c2:	4413      	add	r3, r2
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	461a      	mov	r2, r3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	4a16      	ldr	r2, [pc, #88]	; (8005228 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80051d0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f003 031f 	and.w	r3, r3, #31
 80051d8:	2201      	movs	r2, #1
 80051da:	409a      	lsls	r2, r3
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	669a      	str	r2, [r3, #104]	; 0x68
}
 80051e0:	bf00      	nop
 80051e2:	3714      	adds	r7, #20
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr
 80051ec:	58025408 	.word	0x58025408
 80051f0:	5802541c 	.word	0x5802541c
 80051f4:	58025430 	.word	0x58025430
 80051f8:	58025444 	.word	0x58025444
 80051fc:	58025458 	.word	0x58025458
 8005200:	5802546c 	.word	0x5802546c
 8005204:	58025480 	.word	0x58025480
 8005208:	58025494 	.word	0x58025494
 800520c:	cccccccd 	.word	0xcccccccd
 8005210:	16009600 	.word	0x16009600
 8005214:	58025880 	.word	0x58025880
 8005218:	aaaaaaab 	.word	0xaaaaaaab
 800521c:	400204b8 	.word	0x400204b8
 8005220:	4002040f 	.word	0x4002040f
 8005224:	10008200 	.word	0x10008200
 8005228:	40020880 	.word	0x40020880

0800522c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800522c:	b480      	push	{r7}
 800522e:	b085      	sub	sp, #20
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	b2db      	uxtb	r3, r3
 800523a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d04a      	beq.n	80052d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2b08      	cmp	r3, #8
 8005246:	d847      	bhi.n	80052d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a25      	ldr	r2, [pc, #148]	; (80052e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d022      	beq.n	8005298 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a24      	ldr	r2, [pc, #144]	; (80052e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d01d      	beq.n	8005298 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a22      	ldr	r2, [pc, #136]	; (80052ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d018      	beq.n	8005298 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a21      	ldr	r2, [pc, #132]	; (80052f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d013      	beq.n	8005298 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a1f      	ldr	r2, [pc, #124]	; (80052f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d00e      	beq.n	8005298 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a1e      	ldr	r2, [pc, #120]	; (80052f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d009      	beq.n	8005298 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a1c      	ldr	r2, [pc, #112]	; (80052fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d004      	beq.n	8005298 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a1b      	ldr	r2, [pc, #108]	; (8005300 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d101      	bne.n	800529c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005298:	2301      	movs	r3, #1
 800529a:	e000      	b.n	800529e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800529c:	2300      	movs	r3, #0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d00a      	beq.n	80052b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	4b17      	ldr	r3, [pc, #92]	; (8005304 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80052a6:	4413      	add	r3, r2
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	461a      	mov	r2, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4a15      	ldr	r2, [pc, #84]	; (8005308 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80052b4:	671a      	str	r2, [r3, #112]	; 0x70
 80052b6:	e009      	b.n	80052cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80052b8:	68fa      	ldr	r2, [r7, #12]
 80052ba:	4b14      	ldr	r3, [pc, #80]	; (800530c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80052bc:	4413      	add	r3, r2
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	461a      	mov	r2, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a11      	ldr	r2, [pc, #68]	; (8005310 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80052ca:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	3b01      	subs	r3, #1
 80052d0:	2201      	movs	r2, #1
 80052d2:	409a      	lsls	r2, r3
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80052d8:	bf00      	nop
 80052da:	3714      	adds	r7, #20
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr
 80052e4:	58025408 	.word	0x58025408
 80052e8:	5802541c 	.word	0x5802541c
 80052ec:	58025430 	.word	0x58025430
 80052f0:	58025444 	.word	0x58025444
 80052f4:	58025458 	.word	0x58025458
 80052f8:	5802546c 	.word	0x5802546c
 80052fc:	58025480 	.word	0x58025480
 8005300:	58025494 	.word	0x58025494
 8005304:	1600963f 	.word	0x1600963f
 8005308:	58025940 	.word	0x58025940
 800530c:	1000823f 	.word	0x1000823f
 8005310:	40020940 	.word	0x40020940

08005314 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005314:	b480      	push	{r7}
 8005316:	b089      	sub	sp, #36	; 0x24
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800531e:	2300      	movs	r3, #0
 8005320:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005322:	4b89      	ldr	r3, [pc, #548]	; (8005548 <HAL_GPIO_Init+0x234>)
 8005324:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005326:	e194      	b.n	8005652 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	2101      	movs	r1, #1
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	fa01 f303 	lsl.w	r3, r1, r3
 8005334:	4013      	ands	r3, r2
 8005336:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	2b00      	cmp	r3, #0
 800533c:	f000 8186 	beq.w	800564c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	2b01      	cmp	r3, #1
 8005346:	d00b      	beq.n	8005360 <HAL_GPIO_Init+0x4c>
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	2b02      	cmp	r3, #2
 800534e:	d007      	beq.n	8005360 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005354:	2b11      	cmp	r3, #17
 8005356:	d003      	beq.n	8005360 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	2b12      	cmp	r3, #18
 800535e:	d130      	bne.n	80053c2 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	005b      	lsls	r3, r3, #1
 800536a:	2203      	movs	r2, #3
 800536c:	fa02 f303 	lsl.w	r3, r2, r3
 8005370:	43db      	mvns	r3, r3
 8005372:	69ba      	ldr	r2, [r7, #24]
 8005374:	4013      	ands	r3, r2
 8005376:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	68da      	ldr	r2, [r3, #12]
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	005b      	lsls	r3, r3, #1
 8005380:	fa02 f303 	lsl.w	r3, r2, r3
 8005384:	69ba      	ldr	r2, [r7, #24]
 8005386:	4313      	orrs	r3, r2
 8005388:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	69ba      	ldr	r2, [r7, #24]
 800538e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005396:	2201      	movs	r2, #1
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	fa02 f303 	lsl.w	r3, r2, r3
 800539e:	43db      	mvns	r3, r3
 80053a0:	69ba      	ldr	r2, [r7, #24]
 80053a2:	4013      	ands	r3, r2
 80053a4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	091b      	lsrs	r3, r3, #4
 80053ac:	f003 0201 	and.w	r2, r3, #1
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	fa02 f303 	lsl.w	r3, r2, r3
 80053b6:	69ba      	ldr	r2, [r7, #24]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	69ba      	ldr	r2, [r7, #24]
 80053c0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	68db      	ldr	r3, [r3, #12]
 80053c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	005b      	lsls	r3, r3, #1
 80053cc:	2203      	movs	r2, #3
 80053ce:	fa02 f303 	lsl.w	r3, r2, r3
 80053d2:	43db      	mvns	r3, r3
 80053d4:	69ba      	ldr	r2, [r7, #24]
 80053d6:	4013      	ands	r3, r2
 80053d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	689a      	ldr	r2, [r3, #8]
 80053de:	69fb      	ldr	r3, [r7, #28]
 80053e0:	005b      	lsls	r3, r3, #1
 80053e2:	fa02 f303 	lsl.w	r3, r2, r3
 80053e6:	69ba      	ldr	r2, [r7, #24]
 80053e8:	4313      	orrs	r3, r2
 80053ea:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	69ba      	ldr	r2, [r7, #24]
 80053f0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	2b02      	cmp	r3, #2
 80053f8:	d003      	beq.n	8005402 <HAL_GPIO_Init+0xee>
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	2b12      	cmp	r3, #18
 8005400:	d123      	bne.n	800544a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	08da      	lsrs	r2, r3, #3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	3208      	adds	r2, #8
 800540a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800540e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	f003 0307 	and.w	r3, r3, #7
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	220f      	movs	r2, #15
 800541a:	fa02 f303 	lsl.w	r3, r2, r3
 800541e:	43db      	mvns	r3, r3
 8005420:	69ba      	ldr	r2, [r7, #24]
 8005422:	4013      	ands	r3, r2
 8005424:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	691a      	ldr	r2, [r3, #16]
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	f003 0307 	and.w	r3, r3, #7
 8005430:	009b      	lsls	r3, r3, #2
 8005432:	fa02 f303 	lsl.w	r3, r2, r3
 8005436:	69ba      	ldr	r2, [r7, #24]
 8005438:	4313      	orrs	r3, r2
 800543a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800543c:	69fb      	ldr	r3, [r7, #28]
 800543e:	08da      	lsrs	r2, r3, #3
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	3208      	adds	r2, #8
 8005444:	69b9      	ldr	r1, [r7, #24]
 8005446:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	005b      	lsls	r3, r3, #1
 8005454:	2203      	movs	r2, #3
 8005456:	fa02 f303 	lsl.w	r3, r2, r3
 800545a:	43db      	mvns	r3, r3
 800545c:	69ba      	ldr	r2, [r7, #24]
 800545e:	4013      	ands	r3, r2
 8005460:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	f003 0203 	and.w	r2, r3, #3
 800546a:	69fb      	ldr	r3, [r7, #28]
 800546c:	005b      	lsls	r3, r3, #1
 800546e:	fa02 f303 	lsl.w	r3, r2, r3
 8005472:	69ba      	ldr	r2, [r7, #24]
 8005474:	4313      	orrs	r3, r2
 8005476:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	69ba      	ldr	r2, [r7, #24]
 800547c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005486:	2b00      	cmp	r3, #0
 8005488:	f000 80e0 	beq.w	800564c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800548c:	4b2f      	ldr	r3, [pc, #188]	; (800554c <HAL_GPIO_Init+0x238>)
 800548e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005492:	4a2e      	ldr	r2, [pc, #184]	; (800554c <HAL_GPIO_Init+0x238>)
 8005494:	f043 0302 	orr.w	r3, r3, #2
 8005498:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800549c:	4b2b      	ldr	r3, [pc, #172]	; (800554c <HAL_GPIO_Init+0x238>)
 800549e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80054a2:	f003 0302 	and.w	r3, r3, #2
 80054a6:	60fb      	str	r3, [r7, #12]
 80054a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80054aa:	4a29      	ldr	r2, [pc, #164]	; (8005550 <HAL_GPIO_Init+0x23c>)
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	089b      	lsrs	r3, r3, #2
 80054b0:	3302      	adds	r3, #2
 80054b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	f003 0303 	and.w	r3, r3, #3
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	220f      	movs	r2, #15
 80054c2:	fa02 f303 	lsl.w	r3, r2, r3
 80054c6:	43db      	mvns	r3, r3
 80054c8:	69ba      	ldr	r2, [r7, #24]
 80054ca:	4013      	ands	r3, r2
 80054cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a20      	ldr	r2, [pc, #128]	; (8005554 <HAL_GPIO_Init+0x240>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d052      	beq.n	800557c <HAL_GPIO_Init+0x268>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a1f      	ldr	r2, [pc, #124]	; (8005558 <HAL_GPIO_Init+0x244>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d031      	beq.n	8005542 <HAL_GPIO_Init+0x22e>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a1e      	ldr	r2, [pc, #120]	; (800555c <HAL_GPIO_Init+0x248>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d02b      	beq.n	800553e <HAL_GPIO_Init+0x22a>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4a1d      	ldr	r2, [pc, #116]	; (8005560 <HAL_GPIO_Init+0x24c>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d025      	beq.n	800553a <HAL_GPIO_Init+0x226>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a1c      	ldr	r2, [pc, #112]	; (8005564 <HAL_GPIO_Init+0x250>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d01f      	beq.n	8005536 <HAL_GPIO_Init+0x222>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4a1b      	ldr	r2, [pc, #108]	; (8005568 <HAL_GPIO_Init+0x254>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d019      	beq.n	8005532 <HAL_GPIO_Init+0x21e>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a1a      	ldr	r2, [pc, #104]	; (800556c <HAL_GPIO_Init+0x258>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d013      	beq.n	800552e <HAL_GPIO_Init+0x21a>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a19      	ldr	r2, [pc, #100]	; (8005570 <HAL_GPIO_Init+0x25c>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d00d      	beq.n	800552a <HAL_GPIO_Init+0x216>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a18      	ldr	r2, [pc, #96]	; (8005574 <HAL_GPIO_Init+0x260>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d007      	beq.n	8005526 <HAL_GPIO_Init+0x212>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a17      	ldr	r2, [pc, #92]	; (8005578 <HAL_GPIO_Init+0x264>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d101      	bne.n	8005522 <HAL_GPIO_Init+0x20e>
 800551e:	2309      	movs	r3, #9
 8005520:	e02d      	b.n	800557e <HAL_GPIO_Init+0x26a>
 8005522:	230a      	movs	r3, #10
 8005524:	e02b      	b.n	800557e <HAL_GPIO_Init+0x26a>
 8005526:	2308      	movs	r3, #8
 8005528:	e029      	b.n	800557e <HAL_GPIO_Init+0x26a>
 800552a:	2307      	movs	r3, #7
 800552c:	e027      	b.n	800557e <HAL_GPIO_Init+0x26a>
 800552e:	2306      	movs	r3, #6
 8005530:	e025      	b.n	800557e <HAL_GPIO_Init+0x26a>
 8005532:	2305      	movs	r3, #5
 8005534:	e023      	b.n	800557e <HAL_GPIO_Init+0x26a>
 8005536:	2304      	movs	r3, #4
 8005538:	e021      	b.n	800557e <HAL_GPIO_Init+0x26a>
 800553a:	2303      	movs	r3, #3
 800553c:	e01f      	b.n	800557e <HAL_GPIO_Init+0x26a>
 800553e:	2302      	movs	r3, #2
 8005540:	e01d      	b.n	800557e <HAL_GPIO_Init+0x26a>
 8005542:	2301      	movs	r3, #1
 8005544:	e01b      	b.n	800557e <HAL_GPIO_Init+0x26a>
 8005546:	bf00      	nop
 8005548:	58000080 	.word	0x58000080
 800554c:	58024400 	.word	0x58024400
 8005550:	58000400 	.word	0x58000400
 8005554:	58020000 	.word	0x58020000
 8005558:	58020400 	.word	0x58020400
 800555c:	58020800 	.word	0x58020800
 8005560:	58020c00 	.word	0x58020c00
 8005564:	58021000 	.word	0x58021000
 8005568:	58021400 	.word	0x58021400
 800556c:	58021800 	.word	0x58021800
 8005570:	58021c00 	.word	0x58021c00
 8005574:	58022000 	.word	0x58022000
 8005578:	58022400 	.word	0x58022400
 800557c:	2300      	movs	r3, #0
 800557e:	69fa      	ldr	r2, [r7, #28]
 8005580:	f002 0203 	and.w	r2, r2, #3
 8005584:	0092      	lsls	r2, r2, #2
 8005586:	4093      	lsls	r3, r2
 8005588:	69ba      	ldr	r2, [r7, #24]
 800558a:	4313      	orrs	r3, r2
 800558c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800558e:	4938      	ldr	r1, [pc, #224]	; (8005670 <HAL_GPIO_Init+0x35c>)
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	089b      	lsrs	r3, r3, #2
 8005594:	3302      	adds	r3, #2
 8005596:	69ba      	ldr	r2, [r7, #24]
 8005598:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	43db      	mvns	r3, r3
 80055a6:	69ba      	ldr	r2, [r7, #24]
 80055a8:	4013      	ands	r3, r2
 80055aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d003      	beq.n	80055c0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80055b8:	69ba      	ldr	r2, [r7, #24]
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	4313      	orrs	r3, r2
 80055be:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	69ba      	ldr	r2, [r7, #24]
 80055c4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	43db      	mvns	r3, r3
 80055d0:	69ba      	ldr	r2, [r7, #24]
 80055d2:	4013      	ands	r3, r2
 80055d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d003      	beq.n	80055ea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80055e2:	69ba      	ldr	r2, [r7, #24]
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	69ba      	ldr	r2, [r7, #24]
 80055ee:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80055f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	43db      	mvns	r3, r3
 80055fc:	69ba      	ldr	r2, [r7, #24]
 80055fe:	4013      	ands	r3, r2
 8005600:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800560a:	2b00      	cmp	r3, #0
 800560c:	d003      	beq.n	8005616 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800560e:	69ba      	ldr	r2, [r7, #24]
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	4313      	orrs	r3, r2
 8005614:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005616:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800561a:	69bb      	ldr	r3, [r7, #24]
 800561c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800561e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	43db      	mvns	r3, r3
 800562a:	69ba      	ldr	r2, [r7, #24]
 800562c:	4013      	ands	r3, r2
 800562e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005638:	2b00      	cmp	r3, #0
 800563a:	d003      	beq.n	8005644 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 800563c:	69ba      	ldr	r2, [r7, #24]
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	4313      	orrs	r3, r2
 8005642:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005644:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005648:	69bb      	ldr	r3, [r7, #24]
 800564a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	3301      	adds	r3, #1
 8005650:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	fa22 f303 	lsr.w	r3, r2, r3
 800565c:	2b00      	cmp	r3, #0
 800565e:	f47f ae63 	bne.w	8005328 <HAL_GPIO_Init+0x14>
  }
}
 8005662:	bf00      	nop
 8005664:	bf00      	nop
 8005666:	3724      	adds	r7, #36	; 0x24
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr
 8005670:	58000400 	.word	0x58000400

08005674 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	460b      	mov	r3, r1
 800567e:	807b      	strh	r3, [r7, #2]
 8005680:	4613      	mov	r3, r2
 8005682:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005684:	787b      	ldrb	r3, [r7, #1]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d003      	beq.n	8005692 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800568a:	887a      	ldrh	r2, [r7, #2]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005690:	e003      	b.n	800569a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005692:	887b      	ldrh	r3, [r7, #2]
 8005694:	041a      	lsls	r2, r3, #16
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	619a      	str	r2, [r3, #24]
}
 800569a:	bf00      	nop
 800569c:	370c      	adds	r7, #12
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr
	...

080056a8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80056b0:	4a08      	ldr	r2, [pc, #32]	; (80056d4 <HAL_HSEM_FastTake+0x2c>)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	3320      	adds	r3, #32
 80056b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056ba:	4a07      	ldr	r2, [pc, #28]	; (80056d8 <HAL_HSEM_FastTake+0x30>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d101      	bne.n	80056c4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80056c0:	2300      	movs	r3, #0
 80056c2:	e000      	b.n	80056c6 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	370c      	adds	r7, #12
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr
 80056d2:	bf00      	nop
 80056d4:	58026400 	.word	0x58026400
 80056d8:	80000300 	.word	0x80000300

080056dc <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80056e6:	4906      	ldr	r1, [pc, #24]	; (8005700 <HAL_HSEM_Release+0x24>)
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80056f4:	bf00      	nop
 80056f6:	370c      	adds	r7, #12
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr
 8005700:	58026400 	.word	0x58026400

08005704 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 800570c:	4b05      	ldr	r3, [pc, #20]	; (8005724 <HAL_HSEM_ActivateNotification+0x20>)
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	4904      	ldr	r1, [pc, #16]	; (8005724 <HAL_HSEM_ActivateNotification+0x20>)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4313      	orrs	r3, r2
 8005716:	600b      	str	r3, [r1, #0]
#endif
}
 8005718:	bf00      	nop
 800571a:	370c      	adds	r7, #12
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr
 8005724:	58026500 	.word	0x58026500

08005728 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b082      	sub	sp, #8
 800572c:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800572e:	4b0a      	ldr	r3, [pc, #40]	; (8005758 <HAL_HSEM_IRQHandler+0x30>)
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8005734:	4b08      	ldr	r3, [pc, #32]	; (8005758 <HAL_HSEM_IRQHandler+0x30>)
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	43db      	mvns	r3, r3
 800573c:	4906      	ldr	r1, [pc, #24]	; (8005758 <HAL_HSEM_IRQHandler+0x30>)
 800573e:	4013      	ands	r3, r2
 8005740:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8005742:	4a05      	ldr	r2, [pc, #20]	; (8005758 <HAL_HSEM_IRQHandler+0x30>)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f7fb fdff 	bl	800134c <HAL_HSEM_FreeCallback>
}
 800574e:	bf00      	nop
 8005750:	3708      	adds	r7, #8
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	58026500 	.word	0x58026500

0800575c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b082      	sub	sp, #8
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d101      	bne.n	800576e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e07f      	b.n	800586e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005774:	b2db      	uxtb	r3, r3
 8005776:	2b00      	cmp	r3, #0
 8005778:	d106      	bne.n	8005788 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f7fb f974 	bl	8000a70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2224      	movs	r2, #36	; 0x24
 800578c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f022 0201 	bic.w	r2, r2, #1
 800579e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	685a      	ldr	r2, [r3, #4]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80057ac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	689a      	ldr	r2, [r3, #8]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80057bc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d107      	bne.n	80057d6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	689a      	ldr	r2, [r3, #8]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80057d2:	609a      	str	r2, [r3, #8]
 80057d4:	e006      	b.n	80057e4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	689a      	ldr	r2, [r3, #8]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80057e2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	2b02      	cmp	r3, #2
 80057ea:	d104      	bne.n	80057f6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057f4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	6859      	ldr	r1, [r3, #4]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	4b1d      	ldr	r3, [pc, #116]	; (8005878 <HAL_I2C_Init+0x11c>)
 8005802:	430b      	orrs	r3, r1
 8005804:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	68da      	ldr	r2, [r3, #12]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005814:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	691a      	ldr	r2, [r3, #16]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	695b      	ldr	r3, [r3, #20]
 800581e:	ea42 0103 	orr.w	r1, r2, r3
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	699b      	ldr	r3, [r3, #24]
 8005826:	021a      	lsls	r2, r3, #8
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	430a      	orrs	r2, r1
 800582e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	69d9      	ldr	r1, [r3, #28]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6a1a      	ldr	r2, [r3, #32]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	430a      	orrs	r2, r1
 800583e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f042 0201 	orr.w	r2, r2, #1
 800584e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2220      	movs	r2, #32
 800585a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800586c:	2300      	movs	r3, #0
}
 800586e:	4618      	mov	r0, r3
 8005870:	3708      	adds	r7, #8
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	02008000 	.word	0x02008000

0800587c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b084      	sub	sp, #16
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	699b      	ldr	r3, [r3, #24]
 800588a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005898:	2b00      	cmp	r3, #0
 800589a:	d005      	beq.n	80058a8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058a0:	68ba      	ldr	r2, [r7, #8]
 80058a2:	68f9      	ldr	r1, [r7, #12]
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	4798      	blx	r3
  }
}
 80058a8:	bf00      	nop
 80058aa:	3710      	adds	r7, #16
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}

080058b0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b086      	sub	sp, #24
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	699b      	ldr	r3, [r3, #24]
 80058be:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	0a1b      	lsrs	r3, r3, #8
 80058cc:	f003 0301 	and.w	r3, r3, #1
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d010      	beq.n	80058f6 <HAL_I2C_ER_IRQHandler+0x46>
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	09db      	lsrs	r3, r3, #7
 80058d8:	f003 0301 	and.w	r3, r3, #1
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d00a      	beq.n	80058f6 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058e4:	f043 0201 	orr.w	r2, r3, #1
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058f4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	0a9b      	lsrs	r3, r3, #10
 80058fa:	f003 0301 	and.w	r3, r3, #1
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d010      	beq.n	8005924 <HAL_I2C_ER_IRQHandler+0x74>
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	09db      	lsrs	r3, r3, #7
 8005906:	f003 0301 	and.w	r3, r3, #1
 800590a:	2b00      	cmp	r3, #0
 800590c:	d00a      	beq.n	8005924 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005912:	f043 0208 	orr.w	r2, r3, #8
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005922:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	0a5b      	lsrs	r3, r3, #9
 8005928:	f003 0301 	and.w	r3, r3, #1
 800592c:	2b00      	cmp	r3, #0
 800592e:	d010      	beq.n	8005952 <HAL_I2C_ER_IRQHandler+0xa2>
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	09db      	lsrs	r3, r3, #7
 8005934:	f003 0301 	and.w	r3, r3, #1
 8005938:	2b00      	cmp	r3, #0
 800593a:	d00a      	beq.n	8005952 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005940:	f043 0202 	orr.w	r2, r3, #2
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005950:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005956:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f003 030b 	and.w	r3, r3, #11
 800595e:	2b00      	cmp	r3, #0
 8005960:	d003      	beq.n	800596a <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8005962:	68f9      	ldr	r1, [r7, #12]
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f000 fc77 	bl	8006258 <I2C_ITError>
  }
}
 800596a:	bf00      	nop
 800596c:	3718      	adds	r7, #24
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}

08005972 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005972:	b480      	push	{r7}
 8005974:	b083      	sub	sp, #12
 8005976:	af00      	add	r7, sp, #0
 8005978:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800597a:	bf00      	nop
 800597c:	370c      	adds	r7, #12
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr

08005986 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005986:	b480      	push	{r7}
 8005988:	b083      	sub	sp, #12
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800598e:	bf00      	nop
 8005990:	370c      	adds	r7, #12
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr

0800599a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800599a:	b480      	push	{r7}
 800599c:	b083      	sub	sp, #12
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
 80059a2:	460b      	mov	r3, r1
 80059a4:	70fb      	strb	r3, [r7, #3]
 80059a6:	4613      	mov	r3, r2
 80059a8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80059aa:	bf00      	nop
 80059ac:	370c      	adds	r7, #12
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr

080059b6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80059b6:	b480      	push	{r7}
 80059b8:	b083      	sub	sp, #12
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80059be:	bf00      	nop
 80059c0:	370c      	adds	r7, #12
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr

080059ca <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80059ca:	b480      	push	{r7}
 80059cc:	b083      	sub	sp, #12
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80059d2:	bf00      	nop
 80059d4:	370c      	adds	r7, #12
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr

080059de <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80059de:	b480      	push	{r7}
 80059e0:	b083      	sub	sp, #12
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80059e6:	bf00      	nop
 80059e8:	370c      	adds	r7, #12
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr

080059f2 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80059f2:	b580      	push	{r7, lr}
 80059f4:	b086      	sub	sp, #24
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	60f8      	str	r0, [r7, #12]
 80059fa:	60b9      	str	r1, [r7, #8]
 80059fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a02:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d101      	bne.n	8005a16 <I2C_Slave_ISR_IT+0x24>
 8005a12:	2302      	movs	r3, #2
 8005a14:	e0ec      	b.n	8005bf0 <I2C_Slave_ISR_IT+0x1fe>
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2201      	movs	r2, #1
 8005a1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	095b      	lsrs	r3, r3, #5
 8005a22:	f003 0301 	and.w	r3, r3, #1
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d009      	beq.n	8005a3e <I2C_Slave_ISR_IT+0x4c>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	095b      	lsrs	r3, r3, #5
 8005a2e:	f003 0301 	and.w	r3, r3, #1
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d003      	beq.n	8005a3e <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005a36:	6939      	ldr	r1, [r7, #16]
 8005a38:	68f8      	ldr	r0, [r7, #12]
 8005a3a:	f000 f9bf 	bl	8005dbc <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	091b      	lsrs	r3, r3, #4
 8005a42:	f003 0301 	and.w	r3, r3, #1
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d04d      	beq.n	8005ae6 <I2C_Slave_ISR_IT+0xf4>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	091b      	lsrs	r3, r3, #4
 8005a4e:	f003 0301 	and.w	r3, r3, #1
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d047      	beq.n	8005ae6 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d128      	bne.n	8005ab2 <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	2b28      	cmp	r3, #40	; 0x28
 8005a6a:	d108      	bne.n	8005a7e <I2C_Slave_ISR_IT+0x8c>
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a72:	d104      	bne.n	8005a7e <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005a74:	6939      	ldr	r1, [r7, #16]
 8005a76:	68f8      	ldr	r0, [r7, #12]
 8005a78:	f000 fb98 	bl	80061ac <I2C_ITListenCplt>
 8005a7c:	e032      	b.n	8005ae4 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	2b29      	cmp	r3, #41	; 0x29
 8005a88:	d10e      	bne.n	8005aa8 <I2C_Slave_ISR_IT+0xb6>
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005a90:	d00a      	beq.n	8005aa8 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	2210      	movs	r2, #16
 8005a98:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005a9a:	68f8      	ldr	r0, [r7, #12]
 8005a9c:	f000 fcd3 	bl	8006446 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005aa0:	68f8      	ldr	r0, [r7, #12]
 8005aa2:	f000 f92d 	bl	8005d00 <I2C_ITSlaveSeqCplt>
 8005aa6:	e01d      	b.n	8005ae4 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2210      	movs	r2, #16
 8005aae:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005ab0:	e096      	b.n	8005be0 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	2210      	movs	r2, #16
 8005ab8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005abe:	f043 0204 	orr.w	r2, r3, #4
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d004      	beq.n	8005ad6 <I2C_Slave_ISR_IT+0xe4>
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ad2:	f040 8085 	bne.w	8005be0 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ada:	4619      	mov	r1, r3
 8005adc:	68f8      	ldr	r0, [r7, #12]
 8005ade:	f000 fbbb 	bl	8006258 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005ae2:	e07d      	b.n	8005be0 <I2C_Slave_ISR_IT+0x1ee>
 8005ae4:	e07c      	b.n	8005be0 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	089b      	lsrs	r3, r3, #2
 8005aea:	f003 0301 	and.w	r3, r3, #1
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d030      	beq.n	8005b54 <I2C_Slave_ISR_IT+0x162>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	089b      	lsrs	r3, r3, #2
 8005af6:	f003 0301 	and.w	r3, r3, #1
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d02a      	beq.n	8005b54 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d018      	beq.n	8005b3a <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b12:	b2d2      	uxtb	r2, r2
 8005b14:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1a:	1c5a      	adds	r2, r3, #1
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b24:	3b01      	subs	r3, #1
 8005b26:	b29a      	uxth	r2, r3
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	3b01      	subs	r3, #1
 8005b34:	b29a      	uxth	r2, r3
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d14f      	bne.n	8005be4 <I2C_Slave_ISR_IT+0x1f2>
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005b4a:	d04b      	beq.n	8005be4 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005b4c:	68f8      	ldr	r0, [r7, #12]
 8005b4e:	f000 f8d7 	bl	8005d00 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005b52:	e047      	b.n	8005be4 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	08db      	lsrs	r3, r3, #3
 8005b58:	f003 0301 	and.w	r3, r3, #1
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d00a      	beq.n	8005b76 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	08db      	lsrs	r3, r3, #3
 8005b64:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d004      	beq.n	8005b76 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005b6c:	6939      	ldr	r1, [r7, #16]
 8005b6e:	68f8      	ldr	r0, [r7, #12]
 8005b70:	f000 f842 	bl	8005bf8 <I2C_ITAddrCplt>
 8005b74:	e037      	b.n	8005be6 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	085b      	lsrs	r3, r3, #1
 8005b7a:	f003 0301 	and.w	r3, r3, #1
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d031      	beq.n	8005be6 <I2C_Slave_ISR_IT+0x1f4>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	085b      	lsrs	r3, r3, #1
 8005b86:	f003 0301 	and.w	r3, r3, #1
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d02b      	beq.n	8005be6 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d018      	beq.n	8005bca <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9c:	781a      	ldrb	r2, [r3, #0]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba8:	1c5a      	adds	r2, r3, #1
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	3b01      	subs	r3, #1
 8005bb6:	b29a      	uxth	r2, r3
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bc0:	3b01      	subs	r3, #1
 8005bc2:	b29a      	uxth	r2, r3
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	851a      	strh	r2, [r3, #40]	; 0x28
 8005bc8:	e00d      	b.n	8005be6 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005bd0:	d002      	beq.n	8005bd8 <I2C_Slave_ISR_IT+0x1e6>
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d106      	bne.n	8005be6 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005bd8:	68f8      	ldr	r0, [r7, #12]
 8005bda:	f000 f891 	bl	8005d00 <I2C_ITSlaveSeqCplt>
 8005bde:	e002      	b.n	8005be6 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8005be0:	bf00      	nop
 8005be2:	e000      	b.n	8005be6 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8005be4:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005bee:	2300      	movs	r3, #0
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3718      	adds	r7, #24
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b084      	sub	sp, #16
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005c0e:	2b28      	cmp	r3, #40	; 0x28
 8005c10:	d16a      	bne.n	8005ce8 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	699b      	ldr	r3, [r3, #24]
 8005c18:	0c1b      	lsrs	r3, r3, #16
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	f003 0301 	and.w	r3, r3, #1
 8005c20:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	699b      	ldr	r3, [r3, #24]
 8005c28:	0c1b      	lsrs	r3, r3, #16
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005c30:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c3e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005c4c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	2b02      	cmp	r3, #2
 8005c54:	d138      	bne.n	8005cc8 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8005c56:	897b      	ldrh	r3, [r7, #10]
 8005c58:	09db      	lsrs	r3, r3, #7
 8005c5a:	b29a      	uxth	r2, r3
 8005c5c:	89bb      	ldrh	r3, [r7, #12]
 8005c5e:	4053      	eors	r3, r2
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	f003 0306 	and.w	r3, r3, #6
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d11c      	bne.n	8005ca4 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8005c6a:	897b      	ldrh	r3, [r7, #10]
 8005c6c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c72:	1c5a      	adds	r2, r3, #1
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c7c:	2b02      	cmp	r3, #2
 8005c7e:	d13b      	bne.n	8005cf8 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	2208      	movs	r2, #8
 8005c8c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005c96:	89ba      	ldrh	r2, [r7, #12]
 8005c98:	7bfb      	ldrb	r3, [r7, #15]
 8005c9a:	4619      	mov	r1, r3
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f7ff fe7c 	bl	800599a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005ca2:	e029      	b.n	8005cf8 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8005ca4:	893b      	ldrh	r3, [r7, #8]
 8005ca6:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005ca8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f000 fc0c 	bl	80064ca <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005cba:	89ba      	ldrh	r2, [r7, #12]
 8005cbc:	7bfb      	ldrb	r3, [r7, #15]
 8005cbe:	4619      	mov	r1, r3
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f7ff fe6a 	bl	800599a <HAL_I2C_AddrCallback>
}
 8005cc6:	e017      	b.n	8005cf8 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005cc8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f000 fbfc 	bl	80064ca <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005cda:	89ba      	ldrh	r2, [r7, #12]
 8005cdc:	7bfb      	ldrb	r3, [r7, #15]
 8005cde:	4619      	mov	r1, r3
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f7ff fe5a 	bl	800599a <HAL_I2C_AddrCallback>
}
 8005ce6:	e007      	b.n	8005cf8 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2208      	movs	r2, #8
 8005cee:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8005cf8:	bf00      	nop
 8005cfa:	3710      	adds	r7, #16
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b084      	sub	sp, #16
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	0b9b      	lsrs	r3, r3, #14
 8005d1c:	f003 0301 	and.w	r3, r3, #1
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d008      	beq.n	8005d36 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005d32:	601a      	str	r2, [r3, #0]
 8005d34:	e00d      	b.n	8005d52 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	0bdb      	lsrs	r3, r3, #15
 8005d3a:	f003 0301 	and.w	r3, r3, #1
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d007      	beq.n	8005d52 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005d50:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	2b29      	cmp	r3, #41	; 0x29
 8005d5c:	d112      	bne.n	8005d84 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2228      	movs	r2, #40	; 0x28
 8005d62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2221      	movs	r2, #33	; 0x21
 8005d6a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005d6c:	2101      	movs	r1, #1
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f000 fbab 	bl	80064ca <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f7ff fdf8 	bl	8005972 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005d82:	e017      	b.n	8005db4 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	2b2a      	cmp	r3, #42	; 0x2a
 8005d8e:	d111      	bne.n	8005db4 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2228      	movs	r2, #40	; 0x28
 8005d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2222      	movs	r2, #34	; 0x22
 8005d9c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005d9e:	2102      	movs	r1, #2
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f000 fb92 	bl	80064ca <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f7ff fde9 	bl	8005986 <HAL_I2C_SlaveRxCpltCallback>
}
 8005db4:	bf00      	nop
 8005db6:	3710      	adds	r7, #16
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}

08005dbc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b086      	sub	sp, #24
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005dd8:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	2220      	movs	r2, #32
 8005de0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005de2:	7bfb      	ldrb	r3, [r7, #15]
 8005de4:	2b21      	cmp	r3, #33	; 0x21
 8005de6:	d002      	beq.n	8005dee <I2C_ITSlaveCplt+0x32>
 8005de8:	7bfb      	ldrb	r3, [r7, #15]
 8005dea:	2b29      	cmp	r3, #41	; 0x29
 8005dec:	d108      	bne.n	8005e00 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005dee:	f248 0101 	movw	r1, #32769	; 0x8001
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 fb69 	bl	80064ca <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2221      	movs	r2, #33	; 0x21
 8005dfc:	631a      	str	r2, [r3, #48]	; 0x30
 8005dfe:	e00d      	b.n	8005e1c <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005e00:	7bfb      	ldrb	r3, [r7, #15]
 8005e02:	2b22      	cmp	r3, #34	; 0x22
 8005e04:	d002      	beq.n	8005e0c <I2C_ITSlaveCplt+0x50>
 8005e06:	7bfb      	ldrb	r3, [r7, #15]
 8005e08:	2b2a      	cmp	r3, #42	; 0x2a
 8005e0a:	d107      	bne.n	8005e1c <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005e0c:	f248 0102 	movw	r1, #32770	; 0x8002
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f000 fb5a 	bl	80064ca <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2222      	movs	r2, #34	; 0x22
 8005e1a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	685a      	ldr	r2, [r3, #4]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e2a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	6859      	ldr	r1, [r3, #4]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	4b80      	ldr	r3, [pc, #512]	; (8006038 <I2C_ITSlaveCplt+0x27c>)
 8005e38:	400b      	ands	r3, r1
 8005e3a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f000 fb02 	bl	8006446 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	0b9b      	lsrs	r3, r3, #14
 8005e46:	f003 0301 	and.w	r3, r3, #1
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d07a      	beq.n	8005f44 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005e5c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	f000 8111 	beq.w	800608a <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a73      	ldr	r2, [pc, #460]	; (800603c <I2C_ITSlaveCplt+0x280>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d059      	beq.n	8005f28 <I2C_ITSlaveCplt+0x16c>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a71      	ldr	r2, [pc, #452]	; (8006040 <I2C_ITSlaveCplt+0x284>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d053      	beq.n	8005f28 <I2C_ITSlaveCplt+0x16c>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a6f      	ldr	r2, [pc, #444]	; (8006044 <I2C_ITSlaveCplt+0x288>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d04d      	beq.n	8005f28 <I2C_ITSlaveCplt+0x16c>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a6d      	ldr	r2, [pc, #436]	; (8006048 <I2C_ITSlaveCplt+0x28c>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d047      	beq.n	8005f28 <I2C_ITSlaveCplt+0x16c>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a6b      	ldr	r2, [pc, #428]	; (800604c <I2C_ITSlaveCplt+0x290>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d041      	beq.n	8005f28 <I2C_ITSlaveCplt+0x16c>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a69      	ldr	r2, [pc, #420]	; (8006050 <I2C_ITSlaveCplt+0x294>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d03b      	beq.n	8005f28 <I2C_ITSlaveCplt+0x16c>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a67      	ldr	r2, [pc, #412]	; (8006054 <I2C_ITSlaveCplt+0x298>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d035      	beq.n	8005f28 <I2C_ITSlaveCplt+0x16c>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a65      	ldr	r2, [pc, #404]	; (8006058 <I2C_ITSlaveCplt+0x29c>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d02f      	beq.n	8005f28 <I2C_ITSlaveCplt+0x16c>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a63      	ldr	r2, [pc, #396]	; (800605c <I2C_ITSlaveCplt+0x2a0>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d029      	beq.n	8005f28 <I2C_ITSlaveCplt+0x16c>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a61      	ldr	r2, [pc, #388]	; (8006060 <I2C_ITSlaveCplt+0x2a4>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d023      	beq.n	8005f28 <I2C_ITSlaveCplt+0x16c>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a5f      	ldr	r2, [pc, #380]	; (8006064 <I2C_ITSlaveCplt+0x2a8>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d01d      	beq.n	8005f28 <I2C_ITSlaveCplt+0x16c>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a5d      	ldr	r2, [pc, #372]	; (8006068 <I2C_ITSlaveCplt+0x2ac>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d017      	beq.n	8005f28 <I2C_ITSlaveCplt+0x16c>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a5b      	ldr	r2, [pc, #364]	; (800606c <I2C_ITSlaveCplt+0x2b0>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d011      	beq.n	8005f28 <I2C_ITSlaveCplt+0x16c>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a59      	ldr	r2, [pc, #356]	; (8006070 <I2C_ITSlaveCplt+0x2b4>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d00b      	beq.n	8005f28 <I2C_ITSlaveCplt+0x16c>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a57      	ldr	r2, [pc, #348]	; (8006074 <I2C_ITSlaveCplt+0x2b8>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d005      	beq.n	8005f28 <I2C_ITSlaveCplt+0x16c>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a55      	ldr	r2, [pc, #340]	; (8006078 <I2C_ITSlaveCplt+0x2bc>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d105      	bne.n	8005f34 <I2C_ITSlaveCplt+0x178>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	e004      	b.n	8005f3e <I2C_ITSlaveCplt+0x182>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	8553      	strh	r3, [r2, #42]	; 0x2a
 8005f42:	e0a2      	b.n	800608a <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	0bdb      	lsrs	r3, r3, #15
 8005f48:	f003 0301 	and.w	r3, r3, #1
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	f000 809c 	beq.w	800608a <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005f60:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	f000 808f 	beq.w	800608a <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a32      	ldr	r2, [pc, #200]	; (800603c <I2C_ITSlaveCplt+0x280>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d059      	beq.n	800602c <I2C_ITSlaveCplt+0x270>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a30      	ldr	r2, [pc, #192]	; (8006040 <I2C_ITSlaveCplt+0x284>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d053      	beq.n	800602c <I2C_ITSlaveCplt+0x270>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a2e      	ldr	r2, [pc, #184]	; (8006044 <I2C_ITSlaveCplt+0x288>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d04d      	beq.n	800602c <I2C_ITSlaveCplt+0x270>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a2c      	ldr	r2, [pc, #176]	; (8006048 <I2C_ITSlaveCplt+0x28c>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d047      	beq.n	800602c <I2C_ITSlaveCplt+0x270>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a2a      	ldr	r2, [pc, #168]	; (800604c <I2C_ITSlaveCplt+0x290>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d041      	beq.n	800602c <I2C_ITSlaveCplt+0x270>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a28      	ldr	r2, [pc, #160]	; (8006050 <I2C_ITSlaveCplt+0x294>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d03b      	beq.n	800602c <I2C_ITSlaveCplt+0x270>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a26      	ldr	r2, [pc, #152]	; (8006054 <I2C_ITSlaveCplt+0x298>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d035      	beq.n	800602c <I2C_ITSlaveCplt+0x270>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a24      	ldr	r2, [pc, #144]	; (8006058 <I2C_ITSlaveCplt+0x29c>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d02f      	beq.n	800602c <I2C_ITSlaveCplt+0x270>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a22      	ldr	r2, [pc, #136]	; (800605c <I2C_ITSlaveCplt+0x2a0>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d029      	beq.n	800602c <I2C_ITSlaveCplt+0x270>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a20      	ldr	r2, [pc, #128]	; (8006060 <I2C_ITSlaveCplt+0x2a4>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d023      	beq.n	800602c <I2C_ITSlaveCplt+0x270>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a1e      	ldr	r2, [pc, #120]	; (8006064 <I2C_ITSlaveCplt+0x2a8>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d01d      	beq.n	800602c <I2C_ITSlaveCplt+0x270>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a1c      	ldr	r2, [pc, #112]	; (8006068 <I2C_ITSlaveCplt+0x2ac>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d017      	beq.n	800602c <I2C_ITSlaveCplt+0x270>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a1a      	ldr	r2, [pc, #104]	; (800606c <I2C_ITSlaveCplt+0x2b0>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d011      	beq.n	800602c <I2C_ITSlaveCplt+0x270>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a18      	ldr	r2, [pc, #96]	; (8006070 <I2C_ITSlaveCplt+0x2b4>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d00b      	beq.n	800602c <I2C_ITSlaveCplt+0x270>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a16      	ldr	r2, [pc, #88]	; (8006074 <I2C_ITSlaveCplt+0x2b8>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d005      	beq.n	800602c <I2C_ITSlaveCplt+0x270>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a14      	ldr	r2, [pc, #80]	; (8006078 <I2C_ITSlaveCplt+0x2bc>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d127      	bne.n	800607c <I2C_ITSlaveCplt+0x2c0>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	b29b      	uxth	r3, r3
 8006036:	e026      	b.n	8006086 <I2C_ITSlaveCplt+0x2ca>
 8006038:	fe00e800 	.word	0xfe00e800
 800603c:	40020010 	.word	0x40020010
 8006040:	40020028 	.word	0x40020028
 8006044:	40020040 	.word	0x40020040
 8006048:	40020058 	.word	0x40020058
 800604c:	40020070 	.word	0x40020070
 8006050:	40020088 	.word	0x40020088
 8006054:	400200a0 	.word	0x400200a0
 8006058:	400200b8 	.word	0x400200b8
 800605c:	40020410 	.word	0x40020410
 8006060:	40020428 	.word	0x40020428
 8006064:	40020440 	.word	0x40020440
 8006068:	40020458 	.word	0x40020458
 800606c:	40020470 	.word	0x40020470
 8006070:	40020488 	.word	0x40020488
 8006074:	400204a0 	.word	0x400204a0
 8006078:	400204b8 	.word	0x400204b8
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	b29b      	uxth	r3, r3
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	089b      	lsrs	r3, r3, #2
 800608e:	f003 0301 	and.w	r3, r3, #1
 8006092:	2b00      	cmp	r3, #0
 8006094:	d020      	beq.n	80060d8 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	f023 0304 	bic.w	r3, r3, #4
 800609c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a8:	b2d2      	uxtb	r2, r2
 80060aa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b0:	1c5a      	adds	r2, r3, #1
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d00c      	beq.n	80060d8 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060c2:	3b01      	subs	r3, #1
 80060c4:	b29a      	uxth	r2, r3
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	3b01      	subs	r3, #1
 80060d2:	b29a      	uxth	r2, r3
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060dc:	b29b      	uxth	r3, r3
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d005      	beq.n	80060ee <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060e6:	f043 0204 	orr.w	r2, r3, #4
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2200      	movs	r2, #0
 80060f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006100:	2b00      	cmp	r3, #0
 8006102:	d010      	beq.n	8006126 <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006108:	4619      	mov	r1, r3
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 f8a4 	bl	8006258 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006116:	b2db      	uxtb	r3, r3
 8006118:	2b28      	cmp	r3, #40	; 0x28
 800611a:	d141      	bne.n	80061a0 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800611c:	6979      	ldr	r1, [r7, #20]
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f000 f844 	bl	80061ac <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006124:	e03c      	b.n	80061a0 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800612a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800612e:	d014      	beq.n	800615a <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f7ff fde5 	bl	8005d00 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	4a1b      	ldr	r2, [pc, #108]	; (80061a8 <I2C_ITSlaveCplt+0x3ec>)
 800613a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2220      	movs	r2, #32
 8006140:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2200      	movs	r2, #0
 8006148:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2200      	movs	r2, #0
 800614e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f7ff fc2f 	bl	80059b6 <HAL_I2C_ListenCpltCallback>
}
 8006158:	e022      	b.n	80061a0 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006160:	b2db      	uxtb	r3, r3
 8006162:	2b22      	cmp	r3, #34	; 0x22
 8006164:	d10e      	bne.n	8006184 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2220      	movs	r2, #32
 800616a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2200      	movs	r2, #0
 8006178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f7ff fc02 	bl	8005986 <HAL_I2C_SlaveRxCpltCallback>
}
 8006182:	e00d      	b.n	80061a0 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2220      	movs	r2, #32
 8006188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2200      	movs	r2, #0
 8006190:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2200      	movs	r2, #0
 8006196:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f7ff fbe9 	bl	8005972 <HAL_I2C_SlaveTxCpltCallback>
}
 80061a0:	bf00      	nop
 80061a2:	3718      	adds	r7, #24
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	ffff0000 	.word	0xffff0000

080061ac <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b082      	sub	sp, #8
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	4a26      	ldr	r2, [pc, #152]	; (8006254 <I2C_ITListenCplt+0xa8>)
 80061ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2220      	movs	r2, #32
 80061c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	089b      	lsrs	r3, r3, #2
 80061dc:	f003 0301 	and.w	r3, r3, #1
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d022      	beq.n	800622a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ee:	b2d2      	uxtb	r2, r2
 80061f0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f6:	1c5a      	adds	r2, r3, #1
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006200:	2b00      	cmp	r3, #0
 8006202:	d012      	beq.n	800622a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006208:	3b01      	subs	r3, #1
 800620a:	b29a      	uxth	r2, r3
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006214:	b29b      	uxth	r3, r3
 8006216:	3b01      	subs	r3, #1
 8006218:	b29a      	uxth	r2, r3
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006222:	f043 0204 	orr.w	r2, r3, #4
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800622a:	f248 0103 	movw	r1, #32771	; 0x8003
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 f94b 	bl	80064ca <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	2210      	movs	r2, #16
 800623a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2200      	movs	r2, #0
 8006240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f7ff fbb6 	bl	80059b6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800624a:	bf00      	nop
 800624c:	3708      	adds	r7, #8
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
 8006252:	bf00      	nop
 8006254:	ffff0000 	.word	0xffff0000

08006258 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006268:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4a5d      	ldr	r2, [pc, #372]	; (80063ec <I2C_ITError+0x194>)
 8006276:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	431a      	orrs	r2, r3
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800628a:	7bfb      	ldrb	r3, [r7, #15]
 800628c:	2b28      	cmp	r3, #40	; 0x28
 800628e:	d005      	beq.n	800629c <I2C_ITError+0x44>
 8006290:	7bfb      	ldrb	r3, [r7, #15]
 8006292:	2b29      	cmp	r3, #41	; 0x29
 8006294:	d002      	beq.n	800629c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8006296:	7bfb      	ldrb	r3, [r7, #15]
 8006298:	2b2a      	cmp	r3, #42	; 0x2a
 800629a:	d10b      	bne.n	80062b4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800629c:	2103      	movs	r1, #3
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 f913 	bl	80064ca <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2228      	movs	r2, #40	; 0x28
 80062a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	4a50      	ldr	r2, [pc, #320]	; (80063f0 <I2C_ITError+0x198>)
 80062b0:	635a      	str	r2, [r3, #52]	; 0x34
 80062b2:	e011      	b.n	80062d8 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80062b4:	f248 0103 	movw	r1, #32771	; 0x8003
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f000 f906 	bl	80064ca <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	2b60      	cmp	r3, #96	; 0x60
 80062c8:	d003      	beq.n	80062d2 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2220      	movs	r2, #32
 80062ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2200      	movs	r2, #0
 80062d6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062dc:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d039      	beq.n	800635a <I2C_ITError+0x102>
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	2b11      	cmp	r3, #17
 80062ea:	d002      	beq.n	80062f2 <I2C_ITError+0x9a>
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	2b21      	cmp	r3, #33	; 0x21
 80062f0:	d133      	bne.n	800635a <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006300:	d107      	bne.n	8006312 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006310:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006316:	4618      	mov	r0, r3
 8006318:	f7fe fbfa 	bl	8004b10 <HAL_DMA_GetState>
 800631c:	4603      	mov	r3, r0
 800631e:	2b01      	cmp	r3, #1
 8006320:	d017      	beq.n	8006352 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006326:	4a33      	ldr	r2, [pc, #204]	; (80063f4 <I2C_ITError+0x19c>)
 8006328:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006336:	4618      	mov	r0, r3
 8006338:	f7fd fa7a 	bl	8003830 <HAL_DMA_Abort_IT>
 800633c:	4603      	mov	r3, r0
 800633e:	2b00      	cmp	r3, #0
 8006340:	d04d      	beq.n	80063de <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006346:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006348:	687a      	ldr	r2, [r7, #4]
 800634a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800634c:	4610      	mov	r0, r2
 800634e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006350:	e045      	b.n	80063de <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 f850 	bl	80063f8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006358:	e041      	b.n	80063de <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800635e:	2b00      	cmp	r3, #0
 8006360:	d039      	beq.n	80063d6 <I2C_ITError+0x17e>
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	2b12      	cmp	r3, #18
 8006366:	d002      	beq.n	800636e <I2C_ITError+0x116>
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	2b22      	cmp	r3, #34	; 0x22
 800636c:	d133      	bne.n	80063d6 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006378:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800637c:	d107      	bne.n	800638e <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800638c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006392:	4618      	mov	r0, r3
 8006394:	f7fe fbbc 	bl	8004b10 <HAL_DMA_GetState>
 8006398:	4603      	mov	r3, r0
 800639a:	2b01      	cmp	r3, #1
 800639c:	d017      	beq.n	80063ce <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063a2:	4a14      	ldr	r2, [pc, #80]	; (80063f4 <I2C_ITError+0x19c>)
 80063a4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2200      	movs	r2, #0
 80063aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063b2:	4618      	mov	r0, r3
 80063b4:	f7fd fa3c 	bl	8003830 <HAL_DMA_Abort_IT>
 80063b8:	4603      	mov	r3, r0
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d011      	beq.n	80063e2 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80063c8:	4610      	mov	r0, r2
 80063ca:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80063cc:	e009      	b.n	80063e2 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 f812 	bl	80063f8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80063d4:	e005      	b.n	80063e2 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 f80e 	bl	80063f8 <I2C_TreatErrorCallback>
  }
}
 80063dc:	e002      	b.n	80063e4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80063de:	bf00      	nop
 80063e0:	e000      	b.n	80063e4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80063e2:	bf00      	nop
}
 80063e4:	bf00      	nop
 80063e6:	3710      	adds	r7, #16
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}
 80063ec:	ffff0000 	.word	0xffff0000
 80063f0:	080059f3 	.word	0x080059f3
 80063f4:	0800648f 	.word	0x0800648f

080063f8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b082      	sub	sp, #8
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006406:	b2db      	uxtb	r3, r3
 8006408:	2b60      	cmp	r3, #96	; 0x60
 800640a:	d10e      	bne.n	800642a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2220      	movs	r2, #32
 8006410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2200      	movs	r2, #0
 8006418:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2200      	movs	r2, #0
 800641e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f7ff fadb 	bl	80059de <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006428:	e009      	b.n	800643e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2200      	movs	r2, #0
 8006434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f7ff fac6 	bl	80059ca <HAL_I2C_ErrorCallback>
}
 800643e:	bf00      	nop
 8006440:	3708      	adds	r7, #8
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}

08006446 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006446:	b480      	push	{r7}
 8006448:	b083      	sub	sp, #12
 800644a:	af00      	add	r7, sp, #0
 800644c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	699b      	ldr	r3, [r3, #24]
 8006454:	f003 0302 	and.w	r3, r3, #2
 8006458:	2b02      	cmp	r3, #2
 800645a:	d103      	bne.n	8006464 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	2200      	movs	r2, #0
 8006462:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	699b      	ldr	r3, [r3, #24]
 800646a:	f003 0301 	and.w	r3, r3, #1
 800646e:	2b01      	cmp	r3, #1
 8006470:	d007      	beq.n	8006482 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	699a      	ldr	r2, [r3, #24]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f042 0201 	orr.w	r2, r2, #1
 8006480:	619a      	str	r2, [r3, #24]
  }
}
 8006482:	bf00      	nop
 8006484:	370c      	adds	r7, #12
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr

0800648e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800648e:	b580      	push	{r7, lr}
 8006490:	b084      	sub	sp, #16
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800649a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d003      	beq.n	80064ac <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a8:	2200      	movs	r2, #0
 80064aa:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d003      	beq.n	80064bc <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064b8:	2200      	movs	r2, #0
 80064ba:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 80064bc:	68f8      	ldr	r0, [r7, #12]
 80064be:	f7ff ff9b 	bl	80063f8 <I2C_TreatErrorCallback>
}
 80064c2:	bf00      	nop
 80064c4:	3710      	adds	r7, #16
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}

080064ca <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80064ca:	b480      	push	{r7}
 80064cc:	b085      	sub	sp, #20
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	6078      	str	r0, [r7, #4]
 80064d2:	460b      	mov	r3, r1
 80064d4:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80064d6:	2300      	movs	r3, #0
 80064d8:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80064da:	887b      	ldrh	r3, [r7, #2]
 80064dc:	f003 0301 	and.w	r3, r3, #1
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d00f      	beq.n	8006504 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80064ea:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80064f8:	2b28      	cmp	r3, #40	; 0x28
 80064fa:	d003      	beq.n	8006504 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8006502:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006504:	887b      	ldrh	r3, [r7, #2]
 8006506:	f003 0302 	and.w	r3, r3, #2
 800650a:	2b00      	cmp	r3, #0
 800650c:	d00f      	beq.n	800652e <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8006514:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800651c:	b2db      	uxtb	r3, r3
 800651e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006522:	2b28      	cmp	r3, #40	; 0x28
 8006524:	d003      	beq.n	800652e <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800652c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800652e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006532:	2b00      	cmp	r3, #0
 8006534:	da03      	bge.n	800653e <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800653c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800653e:	887b      	ldrh	r3, [r7, #2]
 8006540:	2b10      	cmp	r3, #16
 8006542:	d103      	bne.n	800654c <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800654a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800654c:	887b      	ldrh	r3, [r7, #2]
 800654e:	2b20      	cmp	r3, #32
 8006550:	d103      	bne.n	800655a <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	f043 0320 	orr.w	r3, r3, #32
 8006558:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800655a:	887b      	ldrh	r3, [r7, #2]
 800655c:	2b40      	cmp	r3, #64	; 0x40
 800655e:	d103      	bne.n	8006568 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006566:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	6819      	ldr	r1, [r3, #0]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	43da      	mvns	r2, r3
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	400a      	ands	r2, r1
 8006578:	601a      	str	r2, [r3, #0]
}
 800657a:	bf00      	nop
 800657c:	3714      	adds	r7, #20
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr

08006586 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006586:	b480      	push	{r7}
 8006588:	b083      	sub	sp, #12
 800658a:	af00      	add	r7, sp, #0
 800658c:	6078      	str	r0, [r7, #4]
 800658e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006596:	b2db      	uxtb	r3, r3
 8006598:	2b20      	cmp	r3, #32
 800659a:	d138      	bne.n	800660e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	d101      	bne.n	80065aa <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80065a6:	2302      	movs	r3, #2
 80065a8:	e032      	b.n	8006610 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2201      	movs	r2, #1
 80065ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2224      	movs	r2, #36	; 0x24
 80065b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f022 0201 	bic.w	r2, r2, #1
 80065c8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80065d8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	6819      	ldr	r1, [r3, #0]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	683a      	ldr	r2, [r7, #0]
 80065e6:	430a      	orrs	r2, r1
 80065e8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f042 0201 	orr.w	r2, r2, #1
 80065f8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2220      	movs	r2, #32
 80065fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2200      	movs	r2, #0
 8006606:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800660a:	2300      	movs	r3, #0
 800660c:	e000      	b.n	8006610 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800660e:	2302      	movs	r3, #2
  }
}
 8006610:	4618      	mov	r0, r3
 8006612:	370c      	adds	r7, #12
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr

0800661c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800661c:	b480      	push	{r7}
 800661e:	b085      	sub	sp, #20
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800662c:	b2db      	uxtb	r3, r3
 800662e:	2b20      	cmp	r3, #32
 8006630:	d139      	bne.n	80066a6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006638:	2b01      	cmp	r3, #1
 800663a:	d101      	bne.n	8006640 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800663c:	2302      	movs	r3, #2
 800663e:	e033      	b.n	80066a8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2201      	movs	r2, #1
 8006644:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2224      	movs	r2, #36	; 0x24
 800664c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f022 0201 	bic.w	r2, r2, #1
 800665e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800666e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	021b      	lsls	r3, r3, #8
 8006674:	68fa      	ldr	r2, [r7, #12]
 8006676:	4313      	orrs	r3, r2
 8006678:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	68fa      	ldr	r2, [r7, #12]
 8006680:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f042 0201 	orr.w	r2, r2, #1
 8006690:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2220      	movs	r2, #32
 8006696:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80066a2:	2300      	movs	r3, #0
 80066a4:	e000      	b.n	80066a8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80066a6:	2302      	movs	r3, #2
  }
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3714      	adds	r7, #20
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr

080066b4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80066b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066b6:	b08f      	sub	sp, #60	; 0x3c
 80066b8:	af0a      	add	r7, sp, #40	; 0x28
 80066ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d101      	bne.n	80066c6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	e116      	b.n	80068f4 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d106      	bne.n	80066e6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f00a fa5f 	bl	8010ba4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2203      	movs	r2, #3
 80066ea:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d102      	bne.n	8006700 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4618      	mov	r0, r3
 8006706:	f007 f940 	bl	800d98a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	603b      	str	r3, [r7, #0]
 8006710:	687e      	ldr	r6, [r7, #4]
 8006712:	466d      	mov	r5, sp
 8006714:	f106 0410 	add.w	r4, r6, #16
 8006718:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800671a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800671c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800671e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006720:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006724:	e885 0003 	stmia.w	r5, {r0, r1}
 8006728:	1d33      	adds	r3, r6, #4
 800672a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800672c:	6838      	ldr	r0, [r7, #0]
 800672e:	f007 f80b 	bl	800d748 <USB_CoreInit>
 8006732:	4603      	mov	r3, r0
 8006734:	2b00      	cmp	r3, #0
 8006736:	d005      	beq.n	8006744 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2202      	movs	r2, #2
 800673c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	e0d7      	b.n	80068f4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	2100      	movs	r1, #0
 800674a:	4618      	mov	r0, r3
 800674c:	f007 f92e 	bl	800d9ac <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006750:	2300      	movs	r3, #0
 8006752:	73fb      	strb	r3, [r7, #15]
 8006754:	e04a      	b.n	80067ec <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006756:	7bfa      	ldrb	r2, [r7, #15]
 8006758:	6879      	ldr	r1, [r7, #4]
 800675a:	4613      	mov	r3, r2
 800675c:	00db      	lsls	r3, r3, #3
 800675e:	1a9b      	subs	r3, r3, r2
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	440b      	add	r3, r1
 8006764:	333d      	adds	r3, #61	; 0x3d
 8006766:	2201      	movs	r2, #1
 8006768:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800676a:	7bfa      	ldrb	r2, [r7, #15]
 800676c:	6879      	ldr	r1, [r7, #4]
 800676e:	4613      	mov	r3, r2
 8006770:	00db      	lsls	r3, r3, #3
 8006772:	1a9b      	subs	r3, r3, r2
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	440b      	add	r3, r1
 8006778:	333c      	adds	r3, #60	; 0x3c
 800677a:	7bfa      	ldrb	r2, [r7, #15]
 800677c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800677e:	7bfa      	ldrb	r2, [r7, #15]
 8006780:	7bfb      	ldrb	r3, [r7, #15]
 8006782:	b298      	uxth	r0, r3
 8006784:	6879      	ldr	r1, [r7, #4]
 8006786:	4613      	mov	r3, r2
 8006788:	00db      	lsls	r3, r3, #3
 800678a:	1a9b      	subs	r3, r3, r2
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	440b      	add	r3, r1
 8006790:	3342      	adds	r3, #66	; 0x42
 8006792:	4602      	mov	r2, r0
 8006794:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006796:	7bfa      	ldrb	r2, [r7, #15]
 8006798:	6879      	ldr	r1, [r7, #4]
 800679a:	4613      	mov	r3, r2
 800679c:	00db      	lsls	r3, r3, #3
 800679e:	1a9b      	subs	r3, r3, r2
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	440b      	add	r3, r1
 80067a4:	333f      	adds	r3, #63	; 0x3f
 80067a6:	2200      	movs	r2, #0
 80067a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80067aa:	7bfa      	ldrb	r2, [r7, #15]
 80067ac:	6879      	ldr	r1, [r7, #4]
 80067ae:	4613      	mov	r3, r2
 80067b0:	00db      	lsls	r3, r3, #3
 80067b2:	1a9b      	subs	r3, r3, r2
 80067b4:	009b      	lsls	r3, r3, #2
 80067b6:	440b      	add	r3, r1
 80067b8:	3344      	adds	r3, #68	; 0x44
 80067ba:	2200      	movs	r2, #0
 80067bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80067be:	7bfa      	ldrb	r2, [r7, #15]
 80067c0:	6879      	ldr	r1, [r7, #4]
 80067c2:	4613      	mov	r3, r2
 80067c4:	00db      	lsls	r3, r3, #3
 80067c6:	1a9b      	subs	r3, r3, r2
 80067c8:	009b      	lsls	r3, r3, #2
 80067ca:	440b      	add	r3, r1
 80067cc:	3348      	adds	r3, #72	; 0x48
 80067ce:	2200      	movs	r2, #0
 80067d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80067d2:	7bfa      	ldrb	r2, [r7, #15]
 80067d4:	6879      	ldr	r1, [r7, #4]
 80067d6:	4613      	mov	r3, r2
 80067d8:	00db      	lsls	r3, r3, #3
 80067da:	1a9b      	subs	r3, r3, r2
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	440b      	add	r3, r1
 80067e0:	3350      	adds	r3, #80	; 0x50
 80067e2:	2200      	movs	r2, #0
 80067e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80067e6:	7bfb      	ldrb	r3, [r7, #15]
 80067e8:	3301      	adds	r3, #1
 80067ea:	73fb      	strb	r3, [r7, #15]
 80067ec:	7bfa      	ldrb	r2, [r7, #15]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	429a      	cmp	r2, r3
 80067f4:	d3af      	bcc.n	8006756 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80067f6:	2300      	movs	r3, #0
 80067f8:	73fb      	strb	r3, [r7, #15]
 80067fa:	e044      	b.n	8006886 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80067fc:	7bfa      	ldrb	r2, [r7, #15]
 80067fe:	6879      	ldr	r1, [r7, #4]
 8006800:	4613      	mov	r3, r2
 8006802:	00db      	lsls	r3, r3, #3
 8006804:	1a9b      	subs	r3, r3, r2
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	440b      	add	r3, r1
 800680a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800680e:	2200      	movs	r2, #0
 8006810:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006812:	7bfa      	ldrb	r2, [r7, #15]
 8006814:	6879      	ldr	r1, [r7, #4]
 8006816:	4613      	mov	r3, r2
 8006818:	00db      	lsls	r3, r3, #3
 800681a:	1a9b      	subs	r3, r3, r2
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	440b      	add	r3, r1
 8006820:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8006824:	7bfa      	ldrb	r2, [r7, #15]
 8006826:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006828:	7bfa      	ldrb	r2, [r7, #15]
 800682a:	6879      	ldr	r1, [r7, #4]
 800682c:	4613      	mov	r3, r2
 800682e:	00db      	lsls	r3, r3, #3
 8006830:	1a9b      	subs	r3, r3, r2
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	440b      	add	r3, r1
 8006836:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800683a:	2200      	movs	r2, #0
 800683c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800683e:	7bfa      	ldrb	r2, [r7, #15]
 8006840:	6879      	ldr	r1, [r7, #4]
 8006842:	4613      	mov	r3, r2
 8006844:	00db      	lsls	r3, r3, #3
 8006846:	1a9b      	subs	r3, r3, r2
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	440b      	add	r3, r1
 800684c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006850:	2200      	movs	r2, #0
 8006852:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006854:	7bfa      	ldrb	r2, [r7, #15]
 8006856:	6879      	ldr	r1, [r7, #4]
 8006858:	4613      	mov	r3, r2
 800685a:	00db      	lsls	r3, r3, #3
 800685c:	1a9b      	subs	r3, r3, r2
 800685e:	009b      	lsls	r3, r3, #2
 8006860:	440b      	add	r3, r1
 8006862:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006866:	2200      	movs	r2, #0
 8006868:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800686a:	7bfa      	ldrb	r2, [r7, #15]
 800686c:	6879      	ldr	r1, [r7, #4]
 800686e:	4613      	mov	r3, r2
 8006870:	00db      	lsls	r3, r3, #3
 8006872:	1a9b      	subs	r3, r3, r2
 8006874:	009b      	lsls	r3, r3, #2
 8006876:	440b      	add	r3, r1
 8006878:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800687c:	2200      	movs	r2, #0
 800687e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006880:	7bfb      	ldrb	r3, [r7, #15]
 8006882:	3301      	adds	r3, #1
 8006884:	73fb      	strb	r3, [r7, #15]
 8006886:	7bfa      	ldrb	r2, [r7, #15]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	429a      	cmp	r2, r3
 800688e:	d3b5      	bcc.n	80067fc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	603b      	str	r3, [r7, #0]
 8006896:	687e      	ldr	r6, [r7, #4]
 8006898:	466d      	mov	r5, sp
 800689a:	f106 0410 	add.w	r4, r6, #16
 800689e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80068a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80068a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80068a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80068a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80068aa:	e885 0003 	stmia.w	r5, {r0, r1}
 80068ae:	1d33      	adds	r3, r6, #4
 80068b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80068b2:	6838      	ldr	r0, [r7, #0]
 80068b4:	f007 f8a4 	bl	800da00 <USB_DevInit>
 80068b8:	4603      	mov	r3, r0
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d005      	beq.n	80068ca <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2202      	movs	r2, #2
 80068c2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	e014      	b.n	80068f4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2200      	movs	r2, #0
 80068ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2201      	movs	r2, #1
 80068d6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d102      	bne.n	80068e8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f001 f892 	bl	8007a0c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4618      	mov	r0, r3
 80068ee:	f008 f924 	bl	800eb3a <USB_DevDisconnect>

  return HAL_OK;
 80068f2:	2300      	movs	r3, #0
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3714      	adds	r7, #20
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080068fc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b084      	sub	sp, #16
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006910:	2b01      	cmp	r3, #1
 8006912:	d101      	bne.n	8006918 <HAL_PCD_Start+0x1c>
 8006914:	2302      	movs	r3, #2
 8006916:	e020      	b.n	800695a <HAL_PCD_Start+0x5e>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2201      	movs	r2, #1
 800691c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006924:	2b01      	cmp	r3, #1
 8006926:	d109      	bne.n	800693c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800692c:	2b01      	cmp	r3, #1
 800692e:	d005      	beq.n	800693c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006934:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4618      	mov	r0, r3
 8006942:	f007 f811 	bl	800d968 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4618      	mov	r0, r3
 800694c:	f008 f8d4 	bl	800eaf8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006958:	2300      	movs	r3, #0
}
 800695a:	4618      	mov	r0, r3
 800695c:	3710      	adds	r7, #16
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}

08006962 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006962:	b590      	push	{r4, r7, lr}
 8006964:	b08d      	sub	sp, #52	; 0x34
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006970:	6a3b      	ldr	r3, [r7, #32]
 8006972:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4618      	mov	r0, r3
 800697a:	f008 f992 	bl	800eca2 <USB_GetMode>
 800697e:	4603      	mov	r3, r0
 8006980:	2b00      	cmp	r3, #0
 8006982:	f040 83ca 	bne.w	800711a <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4618      	mov	r0, r3
 800698c:	f008 f8f6 	bl	800eb7c <USB_ReadInterrupts>
 8006990:	4603      	mov	r3, r0
 8006992:	2b00      	cmp	r3, #0
 8006994:	f000 83c0 	beq.w	8007118 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4618      	mov	r0, r3
 800699e:	f008 f8ed 	bl	800eb7c <USB_ReadInterrupts>
 80069a2:	4603      	mov	r3, r0
 80069a4:	f003 0302 	and.w	r3, r3, #2
 80069a8:	2b02      	cmp	r3, #2
 80069aa:	d107      	bne.n	80069bc <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	695a      	ldr	r2, [r3, #20]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f002 0202 	and.w	r2, r2, #2
 80069ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4618      	mov	r0, r3
 80069c2:	f008 f8db 	bl	800eb7c <USB_ReadInterrupts>
 80069c6:	4603      	mov	r3, r0
 80069c8:	f003 0310 	and.w	r3, r3, #16
 80069cc:	2b10      	cmp	r3, #16
 80069ce:	d161      	bne.n	8006a94 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	699a      	ldr	r2, [r3, #24]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f022 0210 	bic.w	r2, r2, #16
 80069de:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80069e0:	6a3b      	ldr	r3, [r7, #32]
 80069e2:	6a1b      	ldr	r3, [r3, #32]
 80069e4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80069e6:	69bb      	ldr	r3, [r7, #24]
 80069e8:	f003 020f 	and.w	r2, r3, #15
 80069ec:	4613      	mov	r3, r2
 80069ee:	00db      	lsls	r3, r3, #3
 80069f0:	1a9b      	subs	r3, r3, r2
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	4413      	add	r3, r2
 80069fc:	3304      	adds	r3, #4
 80069fe:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006a00:	69bb      	ldr	r3, [r7, #24]
 8006a02:	0c5b      	lsrs	r3, r3, #17
 8006a04:	f003 030f 	and.w	r3, r3, #15
 8006a08:	2b02      	cmp	r3, #2
 8006a0a:	d124      	bne.n	8006a56 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006a0c:	69ba      	ldr	r2, [r7, #24]
 8006a0e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006a12:	4013      	ands	r3, r2
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d035      	beq.n	8006a84 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006a1c:	69bb      	ldr	r3, [r7, #24]
 8006a1e:	091b      	lsrs	r3, r3, #4
 8006a20:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006a22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	461a      	mov	r2, r3
 8006a2a:	6a38      	ldr	r0, [r7, #32]
 8006a2c:	f007 ff12 	bl	800e854 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	68da      	ldr	r2, [r3, #12]
 8006a34:	69bb      	ldr	r3, [r7, #24]
 8006a36:	091b      	lsrs	r3, r3, #4
 8006a38:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a3c:	441a      	add	r2, r3
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	699a      	ldr	r2, [r3, #24]
 8006a46:	69bb      	ldr	r3, [r7, #24]
 8006a48:	091b      	lsrs	r3, r3, #4
 8006a4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a4e:	441a      	add	r2, r3
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	619a      	str	r2, [r3, #24]
 8006a54:	e016      	b.n	8006a84 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8006a56:	69bb      	ldr	r3, [r7, #24]
 8006a58:	0c5b      	lsrs	r3, r3, #17
 8006a5a:	f003 030f 	and.w	r3, r3, #15
 8006a5e:	2b06      	cmp	r3, #6
 8006a60:	d110      	bne.n	8006a84 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006a68:	2208      	movs	r2, #8
 8006a6a:	4619      	mov	r1, r3
 8006a6c:	6a38      	ldr	r0, [r7, #32]
 8006a6e:	f007 fef1 	bl	800e854 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	699a      	ldr	r2, [r3, #24]
 8006a76:	69bb      	ldr	r3, [r7, #24]
 8006a78:	091b      	lsrs	r3, r3, #4
 8006a7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a7e:	441a      	add	r2, r3
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	699a      	ldr	r2, [r3, #24]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f042 0210 	orr.w	r2, r2, #16
 8006a92:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f008 f86f 	bl	800eb7c <USB_ReadInterrupts>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006aa4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006aa8:	d16e      	bne.n	8006b88 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f008 f875 	bl	800eba2 <USB_ReadDevAllOutEpInterrupt>
 8006ab8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8006aba:	e062      	b.n	8006b82 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006abe:	f003 0301 	and.w	r3, r3, #1
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d057      	beq.n	8006b76 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006acc:	b2d2      	uxtb	r2, r2
 8006ace:	4611      	mov	r1, r2
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f008 f89a 	bl	800ec0a <USB_ReadDevOutEPInterrupt>
 8006ad6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	f003 0301 	and.w	r3, r3, #1
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d00c      	beq.n	8006afc <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae4:	015a      	lsls	r2, r3, #5
 8006ae6:	69fb      	ldr	r3, [r7, #28]
 8006ae8:	4413      	add	r3, r2
 8006aea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aee:	461a      	mov	r2, r3
 8006af0:	2301      	movs	r3, #1
 8006af2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006af4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 fdde 	bl	80076b8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	f003 0308 	and.w	r3, r3, #8
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d00c      	beq.n	8006b20 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b08:	015a      	lsls	r2, r3, #5
 8006b0a:	69fb      	ldr	r3, [r7, #28]
 8006b0c:	4413      	add	r3, r2
 8006b0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b12:	461a      	mov	r2, r3
 8006b14:	2308      	movs	r3, #8
 8006b16:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006b18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 fed8 	bl	80078d0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	f003 0310 	and.w	r3, r3, #16
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d008      	beq.n	8006b3c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2c:	015a      	lsls	r2, r3, #5
 8006b2e:	69fb      	ldr	r3, [r7, #28]
 8006b30:	4413      	add	r3, r2
 8006b32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b36:	461a      	mov	r2, r3
 8006b38:	2310      	movs	r3, #16
 8006b3a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	f003 0320 	and.w	r3, r3, #32
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d008      	beq.n	8006b58 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b48:	015a      	lsls	r2, r3, #5
 8006b4a:	69fb      	ldr	r3, [r7, #28]
 8006b4c:	4413      	add	r3, r2
 8006b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b52:	461a      	mov	r2, r3
 8006b54:	2320      	movs	r3, #32
 8006b56:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d009      	beq.n	8006b76 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b64:	015a      	lsls	r2, r3, #5
 8006b66:	69fb      	ldr	r3, [r7, #28]
 8006b68:	4413      	add	r3, r2
 8006b6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b6e:	461a      	mov	r2, r3
 8006b70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006b74:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b78:	3301      	adds	r3, #1
 8006b7a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b7e:	085b      	lsrs	r3, r3, #1
 8006b80:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d199      	bne.n	8006abc <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f007 fff5 	bl	800eb7c <USB_ReadInterrupts>
 8006b92:	4603      	mov	r3, r0
 8006b94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b98:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006b9c:	f040 80c0 	bne.w	8006d20 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f008 f816 	bl	800ebd6 <USB_ReadDevAllInEpInterrupt>
 8006baa:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8006bac:	2300      	movs	r3, #0
 8006bae:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8006bb0:	e0b2      	b.n	8006d18 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb4:	f003 0301 	and.w	r3, r3, #1
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	f000 80a7 	beq.w	8006d0c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bc4:	b2d2      	uxtb	r2, r2
 8006bc6:	4611      	mov	r1, r2
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f008 f83c 	bl	800ec46 <USB_ReadDevInEPInterrupt>
 8006bce:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	f003 0301 	and.w	r3, r3, #1
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d057      	beq.n	8006c8a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bdc:	f003 030f 	and.w	r3, r3, #15
 8006be0:	2201      	movs	r2, #1
 8006be2:	fa02 f303 	lsl.w	r3, r2, r3
 8006be6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006be8:	69fb      	ldr	r3, [r7, #28]
 8006bea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	43db      	mvns	r3, r3
 8006bf4:	69f9      	ldr	r1, [r7, #28]
 8006bf6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006bfa:	4013      	ands	r3, r2
 8006bfc:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c00:	015a      	lsls	r2, r3, #5
 8006c02:	69fb      	ldr	r3, [r7, #28]
 8006c04:	4413      	add	r3, r2
 8006c06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	691b      	ldr	r3, [r3, #16]
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d132      	bne.n	8006c7e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006c18:	6879      	ldr	r1, [r7, #4]
 8006c1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c1c:	4613      	mov	r3, r2
 8006c1e:	00db      	lsls	r3, r3, #3
 8006c20:	1a9b      	subs	r3, r3, r2
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	440b      	add	r3, r1
 8006c26:	3348      	adds	r3, #72	; 0x48
 8006c28:	6819      	ldr	r1, [r3, #0]
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c2e:	4613      	mov	r3, r2
 8006c30:	00db      	lsls	r3, r3, #3
 8006c32:	1a9b      	subs	r3, r3, r2
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	4403      	add	r3, r0
 8006c38:	3344      	adds	r3, #68	; 0x44
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4419      	add	r1, r3
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c42:	4613      	mov	r3, r2
 8006c44:	00db      	lsls	r3, r3, #3
 8006c46:	1a9b      	subs	r3, r3, r2
 8006c48:	009b      	lsls	r3, r3, #2
 8006c4a:	4403      	add	r3, r0
 8006c4c:	3348      	adds	r3, #72	; 0x48
 8006c4e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d113      	bne.n	8006c7e <HAL_PCD_IRQHandler+0x31c>
 8006c56:	6879      	ldr	r1, [r7, #4]
 8006c58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c5a:	4613      	mov	r3, r2
 8006c5c:	00db      	lsls	r3, r3, #3
 8006c5e:	1a9b      	subs	r3, r3, r2
 8006c60:	009b      	lsls	r3, r3, #2
 8006c62:	440b      	add	r3, r1
 8006c64:	3350      	adds	r3, #80	; 0x50
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d108      	bne.n	8006c7e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6818      	ldr	r0, [r3, #0]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006c76:	461a      	mov	r2, r3
 8006c78:	2101      	movs	r1, #1
 8006c7a:	f008 f845 	bl	800ed08 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	4619      	mov	r1, r3
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f00a f82a 	bl	8010cde <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	f003 0308 	and.w	r3, r3, #8
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d008      	beq.n	8006ca6 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c96:	015a      	lsls	r2, r3, #5
 8006c98:	69fb      	ldr	r3, [r7, #28]
 8006c9a:	4413      	add	r3, r2
 8006c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	2308      	movs	r3, #8
 8006ca4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	f003 0310 	and.w	r3, r3, #16
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d008      	beq.n	8006cc2 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb2:	015a      	lsls	r2, r3, #5
 8006cb4:	69fb      	ldr	r3, [r7, #28]
 8006cb6:	4413      	add	r3, r2
 8006cb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	2310      	movs	r3, #16
 8006cc0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d008      	beq.n	8006cde <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cce:	015a      	lsls	r2, r3, #5
 8006cd0:	69fb      	ldr	r3, [r7, #28]
 8006cd2:	4413      	add	r3, r2
 8006cd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cd8:	461a      	mov	r2, r3
 8006cda:	2340      	movs	r3, #64	; 0x40
 8006cdc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	f003 0302 	and.w	r3, r3, #2
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d008      	beq.n	8006cfa <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cea:	015a      	lsls	r2, r3, #5
 8006cec:	69fb      	ldr	r3, [r7, #28]
 8006cee:	4413      	add	r3, r2
 8006cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	2302      	movs	r3, #2
 8006cf8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d003      	beq.n	8006d0c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006d04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 fc48 	bl	800759c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0e:	3301      	adds	r3, #1
 8006d10:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d14:	085b      	lsrs	r3, r3, #1
 8006d16:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	f47f af49 	bne.w	8006bb2 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4618      	mov	r0, r3
 8006d26:	f007 ff29 	bl	800eb7c <USB_ReadInterrupts>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d34:	d122      	bne.n	8006d7c <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006d36:	69fb      	ldr	r3, [r7, #28]
 8006d38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	69fa      	ldr	r2, [r7, #28]
 8006d40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d44:	f023 0301 	bic.w	r3, r3, #1
 8006d48:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d108      	bne.n	8006d66 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006d5c:	2100      	movs	r1, #0
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f000 fe78 	bl	8007a54 <HAL_PCDEx_LPM_Callback>
 8006d64:	e002      	b.n	8006d6c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f00a f830 	bl	8010dcc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	695a      	ldr	r2, [r3, #20]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006d7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4618      	mov	r0, r3
 8006d82:	f007 fefb 	bl	800eb7c <USB_ReadInterrupts>
 8006d86:	4603      	mov	r3, r0
 8006d88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d90:	d112      	bne.n	8006db8 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006d92:	69fb      	ldr	r3, [r7, #28]
 8006d94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	f003 0301 	and.w	r3, r3, #1
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	d102      	bne.n	8006da8 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f009 ffec 	bl	8010d80 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	695a      	ldr	r2, [r3, #20]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006db6:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f007 fedd 	bl	800eb7c <USB_ReadInterrupts>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006dc8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006dcc:	d121      	bne.n	8006e12 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	695a      	ldr	r2, [r3, #20]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8006ddc:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d111      	bne.n	8006e0c <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2201      	movs	r2, #1
 8006dec:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006df6:	089b      	lsrs	r3, r3, #2
 8006df8:	f003 020f 	and.w	r2, r3, #15
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006e02:	2101      	movs	r1, #1
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f000 fe25 	bl	8007a54 <HAL_PCDEx_LPM_Callback>
 8006e0a:	e002      	b.n	8006e12 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f009 ffb7 	bl	8010d80 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4618      	mov	r0, r3
 8006e18:	f007 feb0 	bl	800eb7c <USB_ReadInterrupts>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006e22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e26:	f040 80c7 	bne.w	8006fb8 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006e2a:	69fb      	ldr	r3, [r7, #28]
 8006e2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	69fa      	ldr	r2, [r7, #28]
 8006e34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e38:	f023 0301 	bic.w	r3, r3, #1
 8006e3c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	2110      	movs	r1, #16
 8006e44:	4618      	mov	r0, r3
 8006e46:	f006 ff39 	bl	800dcbc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e4e:	e056      	b.n	8006efe <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e52:	015a      	lsls	r2, r3, #5
 8006e54:	69fb      	ldr	r3, [r7, #28]
 8006e56:	4413      	add	r3, r2
 8006e58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006e62:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e66:	015a      	lsls	r2, r3, #5
 8006e68:	69fb      	ldr	r3, [r7, #28]
 8006e6a:	4413      	add	r3, r2
 8006e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e74:	0151      	lsls	r1, r2, #5
 8006e76:	69fa      	ldr	r2, [r7, #28]
 8006e78:	440a      	add	r2, r1
 8006e7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e7e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006e82:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e86:	015a      	lsls	r2, r3, #5
 8006e88:	69fb      	ldr	r3, [r7, #28]
 8006e8a:	4413      	add	r3, r2
 8006e8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e94:	0151      	lsls	r1, r2, #5
 8006e96:	69fa      	ldr	r2, [r7, #28]
 8006e98:	440a      	add	r2, r1
 8006e9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e9e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006ea2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea6:	015a      	lsls	r2, r3, #5
 8006ea8:	69fb      	ldr	r3, [r7, #28]
 8006eaa:	4413      	add	r3, r2
 8006eac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eb0:	461a      	mov	r2, r3
 8006eb2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006eb6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eba:	015a      	lsls	r2, r3, #5
 8006ebc:	69fb      	ldr	r3, [r7, #28]
 8006ebe:	4413      	add	r3, r2
 8006ec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ec8:	0151      	lsls	r1, r2, #5
 8006eca:	69fa      	ldr	r2, [r7, #28]
 8006ecc:	440a      	add	r2, r1
 8006ece:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ed2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006ed6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eda:	015a      	lsls	r2, r3, #5
 8006edc:	69fb      	ldr	r3, [r7, #28]
 8006ede:	4413      	add	r3, r2
 8006ee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ee8:	0151      	lsls	r1, r2, #5
 8006eea:	69fa      	ldr	r2, [r7, #28]
 8006eec:	440a      	add	r2, r1
 8006eee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ef2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006ef6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006efa:	3301      	adds	r3, #1
 8006efc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d3a3      	bcc.n	8006e50 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006f08:	69fb      	ldr	r3, [r7, #28]
 8006f0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f0e:	69db      	ldr	r3, [r3, #28]
 8006f10:	69fa      	ldr	r2, [r7, #28]
 8006f12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f16:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006f1a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d016      	beq.n	8006f52 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006f24:	69fb      	ldr	r3, [r7, #28]
 8006f26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f2e:	69fa      	ldr	r2, [r7, #28]
 8006f30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f34:	f043 030b 	orr.w	r3, r3, #11
 8006f38:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006f3c:	69fb      	ldr	r3, [r7, #28]
 8006f3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f44:	69fa      	ldr	r2, [r7, #28]
 8006f46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f4a:	f043 030b 	orr.w	r3, r3, #11
 8006f4e:	6453      	str	r3, [r2, #68]	; 0x44
 8006f50:	e015      	b.n	8006f7e <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006f52:	69fb      	ldr	r3, [r7, #28]
 8006f54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f58:	695a      	ldr	r2, [r3, #20]
 8006f5a:	69fb      	ldr	r3, [r7, #28]
 8006f5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f60:	4619      	mov	r1, r3
 8006f62:	f242 032b 	movw	r3, #8235	; 0x202b
 8006f66:	4313      	orrs	r3, r2
 8006f68:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006f6a:	69fb      	ldr	r3, [r7, #28]
 8006f6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f70:	691b      	ldr	r3, [r3, #16]
 8006f72:	69fa      	ldr	r2, [r7, #28]
 8006f74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f78:	f043 030b 	orr.w	r3, r3, #11
 8006f7c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006f7e:	69fb      	ldr	r3, [r7, #28]
 8006f80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	69fa      	ldr	r2, [r7, #28]
 8006f88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f8c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006f90:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6818      	ldr	r0, [r3, #0]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	691b      	ldr	r3, [r3, #16]
 8006f9a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	f007 feb0 	bl	800ed08 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	695a      	ldr	r2, [r3, #20]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006fb6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f007 fddd 	bl	800eb7c <USB_ReadInterrupts>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006fc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fcc:	d124      	bne.n	8007018 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f007 fe74 	bl	800ecc0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f006 fece 	bl	800dd7e <USB_GetDevSpeed>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681c      	ldr	r4, [r3, #0]
 8006fee:	f001 fce5 	bl	80089bc <HAL_RCC_GetHCLKFreq>
 8006ff2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006ff8:	b2db      	uxtb	r3, r3
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	4620      	mov	r0, r4
 8006ffe:	f006 fc11 	bl	800d824 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f009 fe93 	bl	8010d2e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	695a      	ldr	r2, [r3, #20]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8007016:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4618      	mov	r0, r3
 800701e:	f007 fdad 	bl	800eb7c <USB_ReadInterrupts>
 8007022:	4603      	mov	r3, r0
 8007024:	f003 0308 	and.w	r3, r3, #8
 8007028:	2b08      	cmp	r3, #8
 800702a:	d10a      	bne.n	8007042 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f009 fe70 	bl	8010d12 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	695a      	ldr	r2, [r3, #20]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f002 0208 	and.w	r2, r2, #8
 8007040:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4618      	mov	r0, r3
 8007048:	f007 fd98 	bl	800eb7c <USB_ReadInterrupts>
 800704c:	4603      	mov	r3, r0
 800704e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007052:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007056:	d10f      	bne.n	8007078 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8007058:	2300      	movs	r3, #0
 800705a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800705c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800705e:	b2db      	uxtb	r3, r3
 8007060:	4619      	mov	r1, r3
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f009 fed2 	bl	8010e0c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	695a      	ldr	r2, [r3, #20]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8007076:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4618      	mov	r0, r3
 800707e:	f007 fd7d 	bl	800eb7c <USB_ReadInterrupts>
 8007082:	4603      	mov	r3, r0
 8007084:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007088:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800708c:	d10f      	bne.n	80070ae <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800708e:	2300      	movs	r3, #0
 8007090:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007094:	b2db      	uxtb	r3, r3
 8007096:	4619      	mov	r1, r3
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f009 fea5 	bl	8010de8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	695a      	ldr	r2, [r3, #20]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80070ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4618      	mov	r0, r3
 80070b4:	f007 fd62 	bl	800eb7c <USB_ReadInterrupts>
 80070b8:	4603      	mov	r3, r0
 80070ba:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80070be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070c2:	d10a      	bne.n	80070da <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f009 feb3 	bl	8010e30 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	695a      	ldr	r2, [r3, #20]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80070d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4618      	mov	r0, r3
 80070e0:	f007 fd4c 	bl	800eb7c <USB_ReadInterrupts>
 80070e4:	4603      	mov	r3, r0
 80070e6:	f003 0304 	and.w	r3, r3, #4
 80070ea:	2b04      	cmp	r3, #4
 80070ec:	d115      	bne.n	800711a <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	f003 0304 	and.w	r3, r3, #4
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d002      	beq.n	8007106 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f009 fea3 	bl	8010e4c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	6859      	ldr	r1, [r3, #4]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	69ba      	ldr	r2, [r7, #24]
 8007112:	430a      	orrs	r2, r1
 8007114:	605a      	str	r2, [r3, #4]
 8007116:	e000      	b.n	800711a <HAL_PCD_IRQHandler+0x7b8>
      return;
 8007118:	bf00      	nop
    }
  }
}
 800711a:	3734      	adds	r7, #52	; 0x34
 800711c:	46bd      	mov	sp, r7
 800711e:	bd90      	pop	{r4, r7, pc}

08007120 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b082      	sub	sp, #8
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	460b      	mov	r3, r1
 800712a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007132:	2b01      	cmp	r3, #1
 8007134:	d101      	bne.n	800713a <HAL_PCD_SetAddress+0x1a>
 8007136:	2302      	movs	r3, #2
 8007138:	e013      	b.n	8007162 <HAL_PCD_SetAddress+0x42>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2201      	movs	r2, #1
 800713e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	78fa      	ldrb	r2, [r7, #3]
 8007146:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	78fa      	ldrb	r2, [r7, #3]
 8007150:	4611      	mov	r1, r2
 8007152:	4618      	mov	r0, r3
 8007154:	f007 fcaa 	bl	800eaac <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2200      	movs	r2, #0
 800715c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007160:	2300      	movs	r3, #0
}
 8007162:	4618      	mov	r0, r3
 8007164:	3708      	adds	r7, #8
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}

0800716a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800716a:	b580      	push	{r7, lr}
 800716c:	b084      	sub	sp, #16
 800716e:	af00      	add	r7, sp, #0
 8007170:	6078      	str	r0, [r7, #4]
 8007172:	4608      	mov	r0, r1
 8007174:	4611      	mov	r1, r2
 8007176:	461a      	mov	r2, r3
 8007178:	4603      	mov	r3, r0
 800717a:	70fb      	strb	r3, [r7, #3]
 800717c:	460b      	mov	r3, r1
 800717e:	803b      	strh	r3, [r7, #0]
 8007180:	4613      	mov	r3, r2
 8007182:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007184:	2300      	movs	r3, #0
 8007186:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007188:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800718c:	2b00      	cmp	r3, #0
 800718e:	da0f      	bge.n	80071b0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007190:	78fb      	ldrb	r3, [r7, #3]
 8007192:	f003 020f 	and.w	r2, r3, #15
 8007196:	4613      	mov	r3, r2
 8007198:	00db      	lsls	r3, r3, #3
 800719a:	1a9b      	subs	r3, r3, r2
 800719c:	009b      	lsls	r3, r3, #2
 800719e:	3338      	adds	r3, #56	; 0x38
 80071a0:	687a      	ldr	r2, [r7, #4]
 80071a2:	4413      	add	r3, r2
 80071a4:	3304      	adds	r3, #4
 80071a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2201      	movs	r2, #1
 80071ac:	705a      	strb	r2, [r3, #1]
 80071ae:	e00f      	b.n	80071d0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80071b0:	78fb      	ldrb	r3, [r7, #3]
 80071b2:	f003 020f 	and.w	r2, r3, #15
 80071b6:	4613      	mov	r3, r2
 80071b8:	00db      	lsls	r3, r3, #3
 80071ba:	1a9b      	subs	r3, r3, r2
 80071bc:	009b      	lsls	r3, r3, #2
 80071be:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80071c2:	687a      	ldr	r2, [r7, #4]
 80071c4:	4413      	add	r3, r2
 80071c6:	3304      	adds	r3, #4
 80071c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2200      	movs	r2, #0
 80071ce:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80071d0:	78fb      	ldrb	r3, [r7, #3]
 80071d2:	f003 030f 	and.w	r3, r3, #15
 80071d6:	b2da      	uxtb	r2, r3
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80071dc:	883a      	ldrh	r2, [r7, #0]
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	78ba      	ldrb	r2, [r7, #2]
 80071e6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	785b      	ldrb	r3, [r3, #1]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d004      	beq.n	80071fa <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	b29a      	uxth	r2, r3
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80071fa:	78bb      	ldrb	r3, [r7, #2]
 80071fc:	2b02      	cmp	r3, #2
 80071fe:	d102      	bne.n	8007206 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2200      	movs	r2, #0
 8007204:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800720c:	2b01      	cmp	r3, #1
 800720e:	d101      	bne.n	8007214 <HAL_PCD_EP_Open+0xaa>
 8007210:	2302      	movs	r3, #2
 8007212:	e00e      	b.n	8007232 <HAL_PCD_EP_Open+0xc8>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2201      	movs	r2, #1
 8007218:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	68f9      	ldr	r1, [r7, #12]
 8007222:	4618      	mov	r0, r3
 8007224:	f006 fdd0 	bl	800ddc8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2200      	movs	r2, #0
 800722c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8007230:	7afb      	ldrb	r3, [r7, #11]
}
 8007232:	4618      	mov	r0, r3
 8007234:	3710      	adds	r7, #16
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}

0800723a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800723a:	b580      	push	{r7, lr}
 800723c:	b084      	sub	sp, #16
 800723e:	af00      	add	r7, sp, #0
 8007240:	6078      	str	r0, [r7, #4]
 8007242:	460b      	mov	r3, r1
 8007244:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007246:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800724a:	2b00      	cmp	r3, #0
 800724c:	da0f      	bge.n	800726e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800724e:	78fb      	ldrb	r3, [r7, #3]
 8007250:	f003 020f 	and.w	r2, r3, #15
 8007254:	4613      	mov	r3, r2
 8007256:	00db      	lsls	r3, r3, #3
 8007258:	1a9b      	subs	r3, r3, r2
 800725a:	009b      	lsls	r3, r3, #2
 800725c:	3338      	adds	r3, #56	; 0x38
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	4413      	add	r3, r2
 8007262:	3304      	adds	r3, #4
 8007264:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2201      	movs	r2, #1
 800726a:	705a      	strb	r2, [r3, #1]
 800726c:	e00f      	b.n	800728e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800726e:	78fb      	ldrb	r3, [r7, #3]
 8007270:	f003 020f 	and.w	r2, r3, #15
 8007274:	4613      	mov	r3, r2
 8007276:	00db      	lsls	r3, r3, #3
 8007278:	1a9b      	subs	r3, r3, r2
 800727a:	009b      	lsls	r3, r3, #2
 800727c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	4413      	add	r3, r2
 8007284:	3304      	adds	r3, #4
 8007286:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2200      	movs	r2, #0
 800728c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800728e:	78fb      	ldrb	r3, [r7, #3]
 8007290:	f003 030f 	and.w	r3, r3, #15
 8007294:	b2da      	uxtb	r2, r3
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d101      	bne.n	80072a8 <HAL_PCD_EP_Close+0x6e>
 80072a4:	2302      	movs	r3, #2
 80072a6:	e00e      	b.n	80072c6 <HAL_PCD_EP_Close+0x8c>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2201      	movs	r2, #1
 80072ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	68f9      	ldr	r1, [r7, #12]
 80072b6:	4618      	mov	r0, r3
 80072b8:	f006 fe0e 	bl	800ded8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2200      	movs	r2, #0
 80072c0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80072c4:	2300      	movs	r3, #0
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3710      	adds	r7, #16
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}

080072ce <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80072ce:	b580      	push	{r7, lr}
 80072d0:	b086      	sub	sp, #24
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	60f8      	str	r0, [r7, #12]
 80072d6:	607a      	str	r2, [r7, #4]
 80072d8:	603b      	str	r3, [r7, #0]
 80072da:	460b      	mov	r3, r1
 80072dc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80072de:	7afb      	ldrb	r3, [r7, #11]
 80072e0:	f003 020f 	and.w	r2, r3, #15
 80072e4:	4613      	mov	r3, r2
 80072e6:	00db      	lsls	r3, r3, #3
 80072e8:	1a9b      	subs	r3, r3, r2
 80072ea:	009b      	lsls	r3, r3, #2
 80072ec:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80072f0:	68fa      	ldr	r2, [r7, #12]
 80072f2:	4413      	add	r3, r2
 80072f4:	3304      	adds	r3, #4
 80072f6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	687a      	ldr	r2, [r7, #4]
 80072fc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	683a      	ldr	r2, [r7, #0]
 8007302:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	2200      	movs	r2, #0
 8007308:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	2200      	movs	r2, #0
 800730e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007310:	7afb      	ldrb	r3, [r7, #11]
 8007312:	f003 030f 	and.w	r3, r3, #15
 8007316:	b2da      	uxtb	r2, r3
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	691b      	ldr	r3, [r3, #16]
 8007320:	2b01      	cmp	r3, #1
 8007322:	d102      	bne.n	800732a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800732a:	7afb      	ldrb	r3, [r7, #11]
 800732c:	f003 030f 	and.w	r3, r3, #15
 8007330:	2b00      	cmp	r3, #0
 8007332:	d109      	bne.n	8007348 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	6818      	ldr	r0, [r3, #0]
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	691b      	ldr	r3, [r3, #16]
 800733c:	b2db      	uxtb	r3, r3
 800733e:	461a      	mov	r2, r3
 8007340:	6979      	ldr	r1, [r7, #20]
 8007342:	f007 f8f1 	bl	800e528 <USB_EP0StartXfer>
 8007346:	e008      	b.n	800735a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	6818      	ldr	r0, [r3, #0]
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	691b      	ldr	r3, [r3, #16]
 8007350:	b2db      	uxtb	r3, r3
 8007352:	461a      	mov	r2, r3
 8007354:	6979      	ldr	r1, [r7, #20]
 8007356:	f006 fe9b 	bl	800e090 <USB_EPStartXfer>
  }

  return HAL_OK;
 800735a:	2300      	movs	r3, #0
}
 800735c:	4618      	mov	r0, r3
 800735e:	3718      	adds	r7, #24
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}

08007364 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007364:	b480      	push	{r7}
 8007366:	b083      	sub	sp, #12
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	460b      	mov	r3, r1
 800736e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007370:	78fb      	ldrb	r3, [r7, #3]
 8007372:	f003 020f 	and.w	r2, r3, #15
 8007376:	6879      	ldr	r1, [r7, #4]
 8007378:	4613      	mov	r3, r2
 800737a:	00db      	lsls	r3, r3, #3
 800737c:	1a9b      	subs	r3, r3, r2
 800737e:	009b      	lsls	r3, r3, #2
 8007380:	440b      	add	r3, r1
 8007382:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8007386:	681b      	ldr	r3, [r3, #0]
}
 8007388:	4618      	mov	r0, r3
 800738a:	370c      	adds	r7, #12
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr

08007394 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b086      	sub	sp, #24
 8007398:	af00      	add	r7, sp, #0
 800739a:	60f8      	str	r0, [r7, #12]
 800739c:	607a      	str	r2, [r7, #4]
 800739e:	603b      	str	r3, [r7, #0]
 80073a0:	460b      	mov	r3, r1
 80073a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80073a4:	7afb      	ldrb	r3, [r7, #11]
 80073a6:	f003 020f 	and.w	r2, r3, #15
 80073aa:	4613      	mov	r3, r2
 80073ac:	00db      	lsls	r3, r3, #3
 80073ae:	1a9b      	subs	r3, r3, r2
 80073b0:	009b      	lsls	r3, r3, #2
 80073b2:	3338      	adds	r3, #56	; 0x38
 80073b4:	68fa      	ldr	r2, [r7, #12]
 80073b6:	4413      	add	r3, r2
 80073b8:	3304      	adds	r3, #4
 80073ba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	687a      	ldr	r2, [r7, #4]
 80073c0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	683a      	ldr	r2, [r7, #0]
 80073c6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	2200      	movs	r2, #0
 80073cc:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	2201      	movs	r2, #1
 80073d2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80073d4:	7afb      	ldrb	r3, [r7, #11]
 80073d6:	f003 030f 	and.w	r3, r3, #15
 80073da:	b2da      	uxtb	r2, r3
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	691b      	ldr	r3, [r3, #16]
 80073e4:	2b01      	cmp	r3, #1
 80073e6:	d102      	bne.n	80073ee <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80073e8:	687a      	ldr	r2, [r7, #4]
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80073ee:	7afb      	ldrb	r3, [r7, #11]
 80073f0:	f003 030f 	and.w	r3, r3, #15
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d109      	bne.n	800740c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	6818      	ldr	r0, [r3, #0]
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	691b      	ldr	r3, [r3, #16]
 8007400:	b2db      	uxtb	r3, r3
 8007402:	461a      	mov	r2, r3
 8007404:	6979      	ldr	r1, [r7, #20]
 8007406:	f007 f88f 	bl	800e528 <USB_EP0StartXfer>
 800740a:	e008      	b.n	800741e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	6818      	ldr	r0, [r3, #0]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	691b      	ldr	r3, [r3, #16]
 8007414:	b2db      	uxtb	r3, r3
 8007416:	461a      	mov	r2, r3
 8007418:	6979      	ldr	r1, [r7, #20]
 800741a:	f006 fe39 	bl	800e090 <USB_EPStartXfer>
  }

  return HAL_OK;
 800741e:	2300      	movs	r3, #0
}
 8007420:	4618      	mov	r0, r3
 8007422:	3718      	adds	r7, #24
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}

08007428 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b084      	sub	sp, #16
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	460b      	mov	r3, r1
 8007432:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007434:	78fb      	ldrb	r3, [r7, #3]
 8007436:	f003 020f 	and.w	r2, r3, #15
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	429a      	cmp	r2, r3
 8007440:	d901      	bls.n	8007446 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007442:	2301      	movs	r3, #1
 8007444:	e050      	b.n	80074e8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007446:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800744a:	2b00      	cmp	r3, #0
 800744c:	da0f      	bge.n	800746e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800744e:	78fb      	ldrb	r3, [r7, #3]
 8007450:	f003 020f 	and.w	r2, r3, #15
 8007454:	4613      	mov	r3, r2
 8007456:	00db      	lsls	r3, r3, #3
 8007458:	1a9b      	subs	r3, r3, r2
 800745a:	009b      	lsls	r3, r3, #2
 800745c:	3338      	adds	r3, #56	; 0x38
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	4413      	add	r3, r2
 8007462:	3304      	adds	r3, #4
 8007464:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2201      	movs	r2, #1
 800746a:	705a      	strb	r2, [r3, #1]
 800746c:	e00d      	b.n	800748a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800746e:	78fa      	ldrb	r2, [r7, #3]
 8007470:	4613      	mov	r3, r2
 8007472:	00db      	lsls	r3, r3, #3
 8007474:	1a9b      	subs	r3, r3, r2
 8007476:	009b      	lsls	r3, r3, #2
 8007478:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	4413      	add	r3, r2
 8007480:	3304      	adds	r3, #4
 8007482:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2200      	movs	r2, #0
 8007488:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	2201      	movs	r2, #1
 800748e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007490:	78fb      	ldrb	r3, [r7, #3]
 8007492:	f003 030f 	and.w	r3, r3, #15
 8007496:	b2da      	uxtb	r2, r3
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80074a2:	2b01      	cmp	r3, #1
 80074a4:	d101      	bne.n	80074aa <HAL_PCD_EP_SetStall+0x82>
 80074a6:	2302      	movs	r3, #2
 80074a8:	e01e      	b.n	80074e8 <HAL_PCD_EP_SetStall+0xc0>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2201      	movs	r2, #1
 80074ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	68f9      	ldr	r1, [r7, #12]
 80074b8:	4618      	mov	r0, r3
 80074ba:	f007 fa23 	bl	800e904 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80074be:	78fb      	ldrb	r3, [r7, #3]
 80074c0:	f003 030f 	and.w	r3, r3, #15
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d10a      	bne.n	80074de <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6818      	ldr	r0, [r3, #0]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	691b      	ldr	r3, [r3, #16]
 80074d0:	b2d9      	uxtb	r1, r3
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80074d8:	461a      	mov	r2, r3
 80074da:	f007 fc15 	bl	800ed08 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2200      	movs	r2, #0
 80074e2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80074e6:	2300      	movs	r3, #0
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3710      	adds	r7, #16
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b084      	sub	sp, #16
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	460b      	mov	r3, r1
 80074fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80074fc:	78fb      	ldrb	r3, [r7, #3]
 80074fe:	f003 020f 	and.w	r2, r3, #15
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	429a      	cmp	r2, r3
 8007508:	d901      	bls.n	800750e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800750a:	2301      	movs	r3, #1
 800750c:	e042      	b.n	8007594 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800750e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007512:	2b00      	cmp	r3, #0
 8007514:	da0f      	bge.n	8007536 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007516:	78fb      	ldrb	r3, [r7, #3]
 8007518:	f003 020f 	and.w	r2, r3, #15
 800751c:	4613      	mov	r3, r2
 800751e:	00db      	lsls	r3, r3, #3
 8007520:	1a9b      	subs	r3, r3, r2
 8007522:	009b      	lsls	r3, r3, #2
 8007524:	3338      	adds	r3, #56	; 0x38
 8007526:	687a      	ldr	r2, [r7, #4]
 8007528:	4413      	add	r3, r2
 800752a:	3304      	adds	r3, #4
 800752c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2201      	movs	r2, #1
 8007532:	705a      	strb	r2, [r3, #1]
 8007534:	e00f      	b.n	8007556 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007536:	78fb      	ldrb	r3, [r7, #3]
 8007538:	f003 020f 	and.w	r2, r3, #15
 800753c:	4613      	mov	r3, r2
 800753e:	00db      	lsls	r3, r3, #3
 8007540:	1a9b      	subs	r3, r3, r2
 8007542:	009b      	lsls	r3, r3, #2
 8007544:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007548:	687a      	ldr	r2, [r7, #4]
 800754a:	4413      	add	r3, r2
 800754c:	3304      	adds	r3, #4
 800754e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2200      	movs	r2, #0
 8007554:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2200      	movs	r2, #0
 800755a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800755c:	78fb      	ldrb	r3, [r7, #3]
 800755e:	f003 030f 	and.w	r3, r3, #15
 8007562:	b2da      	uxtb	r2, r3
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800756e:	2b01      	cmp	r3, #1
 8007570:	d101      	bne.n	8007576 <HAL_PCD_EP_ClrStall+0x86>
 8007572:	2302      	movs	r3, #2
 8007574:	e00e      	b.n	8007594 <HAL_PCD_EP_ClrStall+0xa4>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2201      	movs	r2, #1
 800757a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	68f9      	ldr	r1, [r7, #12]
 8007584:	4618      	mov	r0, r3
 8007586:	f007 fa2b 	bl	800e9e0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2200      	movs	r2, #0
 800758e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007592:	2300      	movs	r3, #0
}
 8007594:	4618      	mov	r0, r3
 8007596:	3710      	adds	r7, #16
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}

0800759c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b08a      	sub	sp, #40	; 0x28
 80075a0:	af02      	add	r7, sp, #8
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80075b0:	683a      	ldr	r2, [r7, #0]
 80075b2:	4613      	mov	r3, r2
 80075b4:	00db      	lsls	r3, r3, #3
 80075b6:	1a9b      	subs	r3, r3, r2
 80075b8:	009b      	lsls	r3, r3, #2
 80075ba:	3338      	adds	r3, #56	; 0x38
 80075bc:	687a      	ldr	r2, [r7, #4]
 80075be:	4413      	add	r3, r2
 80075c0:	3304      	adds	r3, #4
 80075c2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	699a      	ldr	r2, [r3, #24]
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	695b      	ldr	r3, [r3, #20]
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d901      	bls.n	80075d4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80075d0:	2301      	movs	r3, #1
 80075d2:	e06c      	b.n	80076ae <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	695a      	ldr	r2, [r3, #20]
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	699b      	ldr	r3, [r3, #24]
 80075dc:	1ad3      	subs	r3, r2, r3
 80075de:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	689b      	ldr	r3, [r3, #8]
 80075e4:	69fa      	ldr	r2, [r7, #28]
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d902      	bls.n	80075f0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	689b      	ldr	r3, [r3, #8]
 80075ee:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80075f0:	69fb      	ldr	r3, [r7, #28]
 80075f2:	3303      	adds	r3, #3
 80075f4:	089b      	lsrs	r3, r3, #2
 80075f6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80075f8:	e02b      	b.n	8007652 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	695a      	ldr	r2, [r3, #20]
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	699b      	ldr	r3, [r3, #24]
 8007602:	1ad3      	subs	r3, r2, r3
 8007604:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	689b      	ldr	r3, [r3, #8]
 800760a:	69fa      	ldr	r2, [r7, #28]
 800760c:	429a      	cmp	r2, r3
 800760e:	d902      	bls.n	8007616 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	689b      	ldr	r3, [r3, #8]
 8007614:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007616:	69fb      	ldr	r3, [r7, #28]
 8007618:	3303      	adds	r3, #3
 800761a:	089b      	lsrs	r3, r3, #2
 800761c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	68d9      	ldr	r1, [r3, #12]
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	b2da      	uxtb	r2, r3
 8007626:	69fb      	ldr	r3, [r7, #28]
 8007628:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800762e:	b2db      	uxtb	r3, r3
 8007630:	9300      	str	r3, [sp, #0]
 8007632:	4603      	mov	r3, r0
 8007634:	6978      	ldr	r0, [r7, #20]
 8007636:	f007 f8cf 	bl	800e7d8 <USB_WritePacket>

    ep->xfer_buff  += len;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	68da      	ldr	r2, [r3, #12]
 800763e:	69fb      	ldr	r3, [r7, #28]
 8007640:	441a      	add	r2, r3
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	699a      	ldr	r2, [r3, #24]
 800764a:	69fb      	ldr	r3, [r7, #28]
 800764c:	441a      	add	r2, r3
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	015a      	lsls	r2, r3, #5
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	4413      	add	r3, r2
 800765a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800765e:	699b      	ldr	r3, [r3, #24]
 8007660:	b29b      	uxth	r3, r3
 8007662:	69ba      	ldr	r2, [r7, #24]
 8007664:	429a      	cmp	r2, r3
 8007666:	d809      	bhi.n	800767c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	699a      	ldr	r2, [r3, #24]
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007670:	429a      	cmp	r2, r3
 8007672:	d203      	bcs.n	800767c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	695b      	ldr	r3, [r3, #20]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d1be      	bne.n	80075fa <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	695a      	ldr	r2, [r3, #20]
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	699b      	ldr	r3, [r3, #24]
 8007684:	429a      	cmp	r2, r3
 8007686:	d811      	bhi.n	80076ac <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	f003 030f 	and.w	r3, r3, #15
 800768e:	2201      	movs	r2, #1
 8007690:	fa02 f303 	lsl.w	r3, r2, r3
 8007694:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800769c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	43db      	mvns	r3, r3
 80076a2:	6939      	ldr	r1, [r7, #16]
 80076a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076a8:	4013      	ands	r3, r2
 80076aa:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80076ac:	2300      	movs	r3, #0
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3720      	adds	r7, #32
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}
	...

080076b8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b086      	sub	sp, #24
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	333c      	adds	r3, #60	; 0x3c
 80076d0:	3304      	adds	r3, #4
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	015a      	lsls	r2, r3, #5
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	4413      	add	r3, r2
 80076de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076e2:	689b      	ldr	r3, [r3, #8]
 80076e4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	691b      	ldr	r3, [r3, #16]
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	f040 80a0 	bne.w	8007830 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	f003 0308 	and.w	r3, r3, #8
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d015      	beq.n	8007726 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	4a72      	ldr	r2, [pc, #456]	; (80078c8 <PCD_EP_OutXfrComplete_int+0x210>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	f240 80dd 	bls.w	80078be <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800770a:	2b00      	cmp	r3, #0
 800770c:	f000 80d7 	beq.w	80078be <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	015a      	lsls	r2, r3, #5
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	4413      	add	r3, r2
 8007718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800771c:	461a      	mov	r2, r3
 800771e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007722:	6093      	str	r3, [r2, #8]
 8007724:	e0cb      	b.n	80078be <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	f003 0320 	and.w	r3, r3, #32
 800772c:	2b00      	cmp	r3, #0
 800772e:	d009      	beq.n	8007744 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	015a      	lsls	r2, r3, #5
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	4413      	add	r3, r2
 8007738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800773c:	461a      	mov	r2, r3
 800773e:	2320      	movs	r3, #32
 8007740:	6093      	str	r3, [r2, #8]
 8007742:	e0bc      	b.n	80078be <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800774a:	2b00      	cmp	r3, #0
 800774c:	f040 80b7 	bne.w	80078be <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	4a5d      	ldr	r2, [pc, #372]	; (80078c8 <PCD_EP_OutXfrComplete_int+0x210>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d90f      	bls.n	8007778 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800775e:	2b00      	cmp	r3, #0
 8007760:	d00a      	beq.n	8007778 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	015a      	lsls	r2, r3, #5
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	4413      	add	r3, r2
 800776a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800776e:	461a      	mov	r2, r3
 8007770:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007774:	6093      	str	r3, [r2, #8]
 8007776:	e0a2      	b.n	80078be <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8007778:	6879      	ldr	r1, [r7, #4]
 800777a:	683a      	ldr	r2, [r7, #0]
 800777c:	4613      	mov	r3, r2
 800777e:	00db      	lsls	r3, r3, #3
 8007780:	1a9b      	subs	r3, r3, r2
 8007782:	009b      	lsls	r3, r3, #2
 8007784:	440b      	add	r3, r1
 8007786:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800778a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	0159      	lsls	r1, r3, #5
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	440b      	add	r3, r1
 8007794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007798:	691b      	ldr	r3, [r3, #16]
 800779a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800779e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	683a      	ldr	r2, [r7, #0]
 80077a4:	4613      	mov	r3, r2
 80077a6:	00db      	lsls	r3, r3, #3
 80077a8:	1a9b      	subs	r3, r3, r2
 80077aa:	009b      	lsls	r3, r3, #2
 80077ac:	4403      	add	r3, r0
 80077ae:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80077b2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80077b4:	6879      	ldr	r1, [r7, #4]
 80077b6:	683a      	ldr	r2, [r7, #0]
 80077b8:	4613      	mov	r3, r2
 80077ba:	00db      	lsls	r3, r3, #3
 80077bc:	1a9b      	subs	r3, r3, r2
 80077be:	009b      	lsls	r3, r3, #2
 80077c0:	440b      	add	r3, r1
 80077c2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80077c6:	6819      	ldr	r1, [r3, #0]
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	683a      	ldr	r2, [r7, #0]
 80077cc:	4613      	mov	r3, r2
 80077ce:	00db      	lsls	r3, r3, #3
 80077d0:	1a9b      	subs	r3, r3, r2
 80077d2:	009b      	lsls	r3, r3, #2
 80077d4:	4403      	add	r3, r0
 80077d6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4419      	add	r1, r3
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	683a      	ldr	r2, [r7, #0]
 80077e2:	4613      	mov	r3, r2
 80077e4:	00db      	lsls	r3, r3, #3
 80077e6:	1a9b      	subs	r3, r3, r2
 80077e8:	009b      	lsls	r3, r3, #2
 80077ea:	4403      	add	r3, r0
 80077ec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80077f0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d114      	bne.n	8007822 <PCD_EP_OutXfrComplete_int+0x16a>
 80077f8:	6879      	ldr	r1, [r7, #4]
 80077fa:	683a      	ldr	r2, [r7, #0]
 80077fc:	4613      	mov	r3, r2
 80077fe:	00db      	lsls	r3, r3, #3
 8007800:	1a9b      	subs	r3, r3, r2
 8007802:	009b      	lsls	r3, r3, #2
 8007804:	440b      	add	r3, r1
 8007806:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d108      	bne.n	8007822 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6818      	ldr	r0, [r3, #0]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800781a:	461a      	mov	r2, r3
 800781c:	2101      	movs	r1, #1
 800781e:	f007 fa73 	bl	800ed08 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	b2db      	uxtb	r3, r3
 8007826:	4619      	mov	r1, r3
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f009 fa3d 	bl	8010ca8 <HAL_PCD_DataOutStageCallback>
 800782e:	e046      	b.n	80078be <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	4a26      	ldr	r2, [pc, #152]	; (80078cc <PCD_EP_OutXfrComplete_int+0x214>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d124      	bne.n	8007882 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800783e:	2b00      	cmp	r3, #0
 8007840:	d00a      	beq.n	8007858 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	015a      	lsls	r2, r3, #5
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	4413      	add	r3, r2
 800784a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800784e:	461a      	mov	r2, r3
 8007850:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007854:	6093      	str	r3, [r2, #8]
 8007856:	e032      	b.n	80078be <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	f003 0320 	and.w	r3, r3, #32
 800785e:	2b00      	cmp	r3, #0
 8007860:	d008      	beq.n	8007874 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	015a      	lsls	r2, r3, #5
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	4413      	add	r3, r2
 800786a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800786e:	461a      	mov	r2, r3
 8007870:	2320      	movs	r3, #32
 8007872:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	b2db      	uxtb	r3, r3
 8007878:	4619      	mov	r1, r3
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f009 fa14 	bl	8010ca8 <HAL_PCD_DataOutStageCallback>
 8007880:	e01d      	b.n	80078be <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d114      	bne.n	80078b2 <PCD_EP_OutXfrComplete_int+0x1fa>
 8007888:	6879      	ldr	r1, [r7, #4]
 800788a:	683a      	ldr	r2, [r7, #0]
 800788c:	4613      	mov	r3, r2
 800788e:	00db      	lsls	r3, r3, #3
 8007890:	1a9b      	subs	r3, r3, r2
 8007892:	009b      	lsls	r3, r3, #2
 8007894:	440b      	add	r3, r1
 8007896:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d108      	bne.n	80078b2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6818      	ldr	r0, [r3, #0]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80078aa:	461a      	mov	r2, r3
 80078ac:	2100      	movs	r1, #0
 80078ae:	f007 fa2b 	bl	800ed08 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	b2db      	uxtb	r3, r3
 80078b6:	4619      	mov	r1, r3
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f009 f9f5 	bl	8010ca8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80078be:	2300      	movs	r3, #0
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	3718      	adds	r7, #24
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}
 80078c8:	4f54300a 	.word	0x4f54300a
 80078cc:	4f54310a 	.word	0x4f54310a

080078d0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b086      	sub	sp, #24
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	333c      	adds	r3, #60	; 0x3c
 80078e8:	3304      	adds	r3, #4
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	015a      	lsls	r2, r3, #5
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	4413      	add	r3, r2
 80078f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078fa:	689b      	ldr	r3, [r3, #8]
 80078fc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	4a15      	ldr	r2, [pc, #84]	; (8007958 <PCD_EP_OutSetupPacket_int+0x88>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d90e      	bls.n	8007924 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800790c:	2b00      	cmp	r3, #0
 800790e:	d009      	beq.n	8007924 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	015a      	lsls	r2, r3, #5
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	4413      	add	r3, r2
 8007918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800791c:	461a      	mov	r2, r3
 800791e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007922:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f009 f9ad 	bl	8010c84 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	4a0a      	ldr	r2, [pc, #40]	; (8007958 <PCD_EP_OutSetupPacket_int+0x88>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d90c      	bls.n	800794c <PCD_EP_OutSetupPacket_int+0x7c>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	691b      	ldr	r3, [r3, #16]
 8007936:	2b01      	cmp	r3, #1
 8007938:	d108      	bne.n	800794c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6818      	ldr	r0, [r3, #0]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007944:	461a      	mov	r2, r3
 8007946:	2101      	movs	r1, #1
 8007948:	f007 f9de 	bl	800ed08 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800794c:	2300      	movs	r3, #0
}
 800794e:	4618      	mov	r0, r3
 8007950:	3718      	adds	r7, #24
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}
 8007956:	bf00      	nop
 8007958:	4f54300a 	.word	0x4f54300a

0800795c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800795c:	b480      	push	{r7}
 800795e:	b085      	sub	sp, #20
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
 8007964:	460b      	mov	r3, r1
 8007966:	70fb      	strb	r3, [r7, #3]
 8007968:	4613      	mov	r3, r2
 800796a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007972:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007974:	78fb      	ldrb	r3, [r7, #3]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d107      	bne.n	800798a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800797a:	883b      	ldrh	r3, [r7, #0]
 800797c:	0419      	lsls	r1, r3, #16
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	68ba      	ldr	r2, [r7, #8]
 8007984:	430a      	orrs	r2, r1
 8007986:	629a      	str	r2, [r3, #40]	; 0x28
 8007988:	e028      	b.n	80079dc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007990:	0c1b      	lsrs	r3, r3, #16
 8007992:	68ba      	ldr	r2, [r7, #8]
 8007994:	4413      	add	r3, r2
 8007996:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007998:	2300      	movs	r3, #0
 800799a:	73fb      	strb	r3, [r7, #15]
 800799c:	e00d      	b.n	80079ba <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681a      	ldr	r2, [r3, #0]
 80079a2:	7bfb      	ldrb	r3, [r7, #15]
 80079a4:	3340      	adds	r3, #64	; 0x40
 80079a6:	009b      	lsls	r3, r3, #2
 80079a8:	4413      	add	r3, r2
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	0c1b      	lsrs	r3, r3, #16
 80079ae:	68ba      	ldr	r2, [r7, #8]
 80079b0:	4413      	add	r3, r2
 80079b2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80079b4:	7bfb      	ldrb	r3, [r7, #15]
 80079b6:	3301      	adds	r3, #1
 80079b8:	73fb      	strb	r3, [r7, #15]
 80079ba:	7bfa      	ldrb	r2, [r7, #15]
 80079bc:	78fb      	ldrb	r3, [r7, #3]
 80079be:	3b01      	subs	r3, #1
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d3ec      	bcc.n	800799e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80079c4:	883b      	ldrh	r3, [r7, #0]
 80079c6:	0418      	lsls	r0, r3, #16
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6819      	ldr	r1, [r3, #0]
 80079cc:	78fb      	ldrb	r3, [r7, #3]
 80079ce:	3b01      	subs	r3, #1
 80079d0:	68ba      	ldr	r2, [r7, #8]
 80079d2:	4302      	orrs	r2, r0
 80079d4:	3340      	adds	r3, #64	; 0x40
 80079d6:	009b      	lsls	r3, r3, #2
 80079d8:	440b      	add	r3, r1
 80079da:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80079dc:	2300      	movs	r3, #0
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3714      	adds	r7, #20
 80079e2:	46bd      	mov	sp, r7
 80079e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e8:	4770      	bx	lr

080079ea <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80079ea:	b480      	push	{r7}
 80079ec:	b083      	sub	sp, #12
 80079ee:	af00      	add	r7, sp, #0
 80079f0:	6078      	str	r0, [r7, #4]
 80079f2:	460b      	mov	r3, r1
 80079f4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	887a      	ldrh	r2, [r7, #2]
 80079fc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80079fe:	2300      	movs	r3, #0
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	370c      	adds	r7, #12
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr

08007a0c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b085      	sub	sp, #20
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2201      	movs	r2, #1
 8007a1e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2200      	movs	r2, #0
 8007a26:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	699b      	ldr	r3, [r3, #24]
 8007a2e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a3a:	4b05      	ldr	r3, [pc, #20]	; (8007a50 <HAL_PCDEx_ActivateLPM+0x44>)
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	68fa      	ldr	r2, [r7, #12]
 8007a40:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8007a42:	2300      	movs	r3, #0
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3714      	adds	r7, #20
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4e:	4770      	bx	lr
 8007a50:	10000003 	.word	0x10000003

08007a54 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b083      	sub	sp, #12
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	460b      	mov	r3, r1
 8007a5e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007a60:	bf00      	nop
 8007a62:	370c      	adds	r7, #12
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr

08007a6c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b084      	sub	sp, #16
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8007a74:	4b29      	ldr	r3, [pc, #164]	; (8007b1c <HAL_PWREx_ConfigSupply+0xb0>)
 8007a76:	68db      	ldr	r3, [r3, #12]
 8007a78:	f003 0307 	and.w	r3, r3, #7
 8007a7c:	2b06      	cmp	r3, #6
 8007a7e:	d00a      	beq.n	8007a96 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007a80:	4b26      	ldr	r3, [pc, #152]	; (8007b1c <HAL_PWREx_ConfigSupply+0xb0>)
 8007a82:	68db      	ldr	r3, [r3, #12]
 8007a84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a88:	687a      	ldr	r2, [r7, #4]
 8007a8a:	429a      	cmp	r2, r3
 8007a8c:	d001      	beq.n	8007a92 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	e040      	b.n	8007b14 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007a92:	2300      	movs	r3, #0
 8007a94:	e03e      	b.n	8007b14 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007a96:	4b21      	ldr	r3, [pc, #132]	; (8007b1c <HAL_PWREx_ConfigSupply+0xb0>)
 8007a98:	68db      	ldr	r3, [r3, #12]
 8007a9a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8007a9e:	491f      	ldr	r1, [pc, #124]	; (8007b1c <HAL_PWREx_ConfigSupply+0xb0>)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007aa6:	f7fa fc09 	bl	80022bc <HAL_GetTick>
 8007aaa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007aac:	e009      	b.n	8007ac2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007aae:	f7fa fc05 	bl	80022bc <HAL_GetTick>
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	1ad3      	subs	r3, r2, r3
 8007ab8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007abc:	d901      	bls.n	8007ac2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007abe:	2301      	movs	r3, #1
 8007ac0:	e028      	b.n	8007b14 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007ac2:	4b16      	ldr	r3, [pc, #88]	; (8007b1c <HAL_PWREx_ConfigSupply+0xb0>)
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007aca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ace:	d1ee      	bne.n	8007aae <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2b1e      	cmp	r3, #30
 8007ad4:	d008      	beq.n	8007ae8 <HAL_PWREx_ConfigSupply+0x7c>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2b2e      	cmp	r3, #46	; 0x2e
 8007ada:	d005      	beq.n	8007ae8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2b1d      	cmp	r3, #29
 8007ae0:	d002      	beq.n	8007ae8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2b2d      	cmp	r3, #45	; 0x2d
 8007ae6:	d114      	bne.n	8007b12 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8007ae8:	f7fa fbe8 	bl	80022bc <HAL_GetTick>
 8007aec:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8007aee:	e009      	b.n	8007b04 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007af0:	f7fa fbe4 	bl	80022bc <HAL_GetTick>
 8007af4:	4602      	mov	r2, r0
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	1ad3      	subs	r3, r2, r3
 8007afa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007afe:	d901      	bls.n	8007b04 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8007b00:	2301      	movs	r3, #1
 8007b02:	e007      	b.n	8007b14 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8007b04:	4b05      	ldr	r3, [pc, #20]	; (8007b1c <HAL_PWREx_ConfigSupply+0xb0>)
 8007b06:	68db      	ldr	r3, [r3, #12]
 8007b08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b10:	d1ee      	bne.n	8007af0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007b12:	2300      	movs	r3, #0
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3710      	adds	r7, #16
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}
 8007b1c:	58024800 	.word	0x58024800

08007b20 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8007b20:	b480      	push	{r7}
 8007b22:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8007b24:	4b05      	ldr	r3, [pc, #20]	; (8007b3c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007b26:	68db      	ldr	r3, [r3, #12]
 8007b28:	4a04      	ldr	r2, [pc, #16]	; (8007b3c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007b2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007b2e:	60d3      	str	r3, [r2, #12]
}
 8007b30:	bf00      	nop
 8007b32:	46bd      	mov	sp, r7
 8007b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b38:	4770      	bx	lr
 8007b3a:	bf00      	nop
 8007b3c:	58024800 	.word	0x58024800

08007b40 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b08c      	sub	sp, #48	; 0x30
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d101      	bne.n	8007b52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	e3fd      	b.n	800834e <HAL_RCC_OscConfig+0x80e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f003 0301 	and.w	r3, r3, #1
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	f000 8087 	beq.w	8007c6e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007b60:	4b99      	ldr	r3, [pc, #612]	; (8007dc8 <HAL_RCC_OscConfig+0x288>)
 8007b62:	691b      	ldr	r3, [r3, #16]
 8007b64:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007b68:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007b6a:	4b97      	ldr	r3, [pc, #604]	; (8007dc8 <HAL_RCC_OscConfig+0x288>)
 8007b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b6e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b72:	2b10      	cmp	r3, #16
 8007b74:	d007      	beq.n	8007b86 <HAL_RCC_OscConfig+0x46>
 8007b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b78:	2b18      	cmp	r3, #24
 8007b7a:	d110      	bne.n	8007b9e <HAL_RCC_OscConfig+0x5e>
 8007b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b7e:	f003 0303 	and.w	r3, r3, #3
 8007b82:	2b02      	cmp	r3, #2
 8007b84:	d10b      	bne.n	8007b9e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b86:	4b90      	ldr	r3, [pc, #576]	; (8007dc8 <HAL_RCC_OscConfig+0x288>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d06c      	beq.n	8007c6c <HAL_RCC_OscConfig+0x12c>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d168      	bne.n	8007c6c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	e3d7      	b.n	800834e <HAL_RCC_OscConfig+0x80e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ba6:	d106      	bne.n	8007bb6 <HAL_RCC_OscConfig+0x76>
 8007ba8:	4b87      	ldr	r3, [pc, #540]	; (8007dc8 <HAL_RCC_OscConfig+0x288>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a86      	ldr	r2, [pc, #536]	; (8007dc8 <HAL_RCC_OscConfig+0x288>)
 8007bae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007bb2:	6013      	str	r3, [r2, #0]
 8007bb4:	e02e      	b.n	8007c14 <HAL_RCC_OscConfig+0xd4>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d10c      	bne.n	8007bd8 <HAL_RCC_OscConfig+0x98>
 8007bbe:	4b82      	ldr	r3, [pc, #520]	; (8007dc8 <HAL_RCC_OscConfig+0x288>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a81      	ldr	r2, [pc, #516]	; (8007dc8 <HAL_RCC_OscConfig+0x288>)
 8007bc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007bc8:	6013      	str	r3, [r2, #0]
 8007bca:	4b7f      	ldr	r3, [pc, #508]	; (8007dc8 <HAL_RCC_OscConfig+0x288>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a7e      	ldr	r2, [pc, #504]	; (8007dc8 <HAL_RCC_OscConfig+0x288>)
 8007bd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007bd4:	6013      	str	r3, [r2, #0]
 8007bd6:	e01d      	b.n	8007c14 <HAL_RCC_OscConfig+0xd4>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007be0:	d10c      	bne.n	8007bfc <HAL_RCC_OscConfig+0xbc>
 8007be2:	4b79      	ldr	r3, [pc, #484]	; (8007dc8 <HAL_RCC_OscConfig+0x288>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a78      	ldr	r2, [pc, #480]	; (8007dc8 <HAL_RCC_OscConfig+0x288>)
 8007be8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007bec:	6013      	str	r3, [r2, #0]
 8007bee:	4b76      	ldr	r3, [pc, #472]	; (8007dc8 <HAL_RCC_OscConfig+0x288>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a75      	ldr	r2, [pc, #468]	; (8007dc8 <HAL_RCC_OscConfig+0x288>)
 8007bf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007bf8:	6013      	str	r3, [r2, #0]
 8007bfa:	e00b      	b.n	8007c14 <HAL_RCC_OscConfig+0xd4>
 8007bfc:	4b72      	ldr	r3, [pc, #456]	; (8007dc8 <HAL_RCC_OscConfig+0x288>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a71      	ldr	r2, [pc, #452]	; (8007dc8 <HAL_RCC_OscConfig+0x288>)
 8007c02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c06:	6013      	str	r3, [r2, #0]
 8007c08:	4b6f      	ldr	r3, [pc, #444]	; (8007dc8 <HAL_RCC_OscConfig+0x288>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a6e      	ldr	r2, [pc, #440]	; (8007dc8 <HAL_RCC_OscConfig+0x288>)
 8007c0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	685b      	ldr	r3, [r3, #4]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d013      	beq.n	8007c44 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c1c:	f7fa fb4e 	bl	80022bc <HAL_GetTick>
 8007c20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007c22:	e008      	b.n	8007c36 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007c24:	f7fa fb4a 	bl	80022bc <HAL_GetTick>
 8007c28:	4602      	mov	r2, r0
 8007c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c2c:	1ad3      	subs	r3, r2, r3
 8007c2e:	2b64      	cmp	r3, #100	; 0x64
 8007c30:	d901      	bls.n	8007c36 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007c32:	2303      	movs	r3, #3
 8007c34:	e38b      	b.n	800834e <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007c36:	4b64      	ldr	r3, [pc, #400]	; (8007dc8 <HAL_RCC_OscConfig+0x288>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d0f0      	beq.n	8007c24 <HAL_RCC_OscConfig+0xe4>
 8007c42:	e014      	b.n	8007c6e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c44:	f7fa fb3a 	bl	80022bc <HAL_GetTick>
 8007c48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007c4a:	e008      	b.n	8007c5e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007c4c:	f7fa fb36 	bl	80022bc <HAL_GetTick>
 8007c50:	4602      	mov	r2, r0
 8007c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c54:	1ad3      	subs	r3, r2, r3
 8007c56:	2b64      	cmp	r3, #100	; 0x64
 8007c58:	d901      	bls.n	8007c5e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007c5a:	2303      	movs	r3, #3
 8007c5c:	e377      	b.n	800834e <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007c5e:	4b5a      	ldr	r3, [pc, #360]	; (8007dc8 <HAL_RCC_OscConfig+0x288>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d1f0      	bne.n	8007c4c <HAL_RCC_OscConfig+0x10c>
 8007c6a:	e000      	b.n	8007c6e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f003 0302 	and.w	r3, r3, #2
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	f000 80ae 	beq.w	8007dd8 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007c7c:	4b52      	ldr	r3, [pc, #328]	; (8007dc8 <HAL_RCC_OscConfig+0x288>)
 8007c7e:	691b      	ldr	r3, [r3, #16]
 8007c80:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c84:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007c86:	4b50      	ldr	r3, [pc, #320]	; (8007dc8 <HAL_RCC_OscConfig+0x288>)
 8007c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c8a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007c8c:	6a3b      	ldr	r3, [r7, #32]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d007      	beq.n	8007ca2 <HAL_RCC_OscConfig+0x162>
 8007c92:	6a3b      	ldr	r3, [r7, #32]
 8007c94:	2b18      	cmp	r3, #24
 8007c96:	d13a      	bne.n	8007d0e <HAL_RCC_OscConfig+0x1ce>
 8007c98:	69fb      	ldr	r3, [r7, #28]
 8007c9a:	f003 0303 	and.w	r3, r3, #3
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d135      	bne.n	8007d0e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007ca2:	4b49      	ldr	r3, [pc, #292]	; (8007dc8 <HAL_RCC_OscConfig+0x288>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f003 0304 	and.w	r3, r3, #4
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d005      	beq.n	8007cba <HAL_RCC_OscConfig+0x17a>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	68db      	ldr	r3, [r3, #12]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d101      	bne.n	8007cba <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	e349      	b.n	800834e <HAL_RCC_OscConfig+0x80e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007cba:	f7fa fb2f 	bl	800231c <HAL_GetREVID>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	f241 0203 	movw	r2, #4099	; 0x1003
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d817      	bhi.n	8007cf8 <HAL_RCC_OscConfig+0x1b8>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	691b      	ldr	r3, [r3, #16]
 8007ccc:	2b40      	cmp	r3, #64	; 0x40
 8007cce:	d108      	bne.n	8007ce2 <HAL_RCC_OscConfig+0x1a2>
 8007cd0:	4b3d      	ldr	r3, [pc, #244]	; (8007dc8 <HAL_RCC_OscConfig+0x288>)
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007cd8:	4a3b      	ldr	r2, [pc, #236]	; (8007dc8 <HAL_RCC_OscConfig+0x288>)
 8007cda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007cde:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007ce0:	e07a      	b.n	8007dd8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ce2:	4b39      	ldr	r3, [pc, #228]	; (8007dc8 <HAL_RCC_OscConfig+0x288>)
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	691b      	ldr	r3, [r3, #16]
 8007cee:	031b      	lsls	r3, r3, #12
 8007cf0:	4935      	ldr	r1, [pc, #212]	; (8007dc8 <HAL_RCC_OscConfig+0x288>)
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007cf6:	e06f      	b.n	8007dd8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007cf8:	4b33      	ldr	r3, [pc, #204]	; (8007dc8 <HAL_RCC_OscConfig+0x288>)
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	691b      	ldr	r3, [r3, #16]
 8007d04:	061b      	lsls	r3, r3, #24
 8007d06:	4930      	ldr	r1, [pc, #192]	; (8007dc8 <HAL_RCC_OscConfig+0x288>)
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007d0c:	e064      	b.n	8007dd8 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	68db      	ldr	r3, [r3, #12]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d045      	beq.n	8007da2 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007d16:	4b2c      	ldr	r3, [pc, #176]	; (8007dc8 <HAL_RCC_OscConfig+0x288>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f023 0219 	bic.w	r2, r3, #25
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	68db      	ldr	r3, [r3, #12]
 8007d22:	4929      	ldr	r1, [pc, #164]	; (8007dc8 <HAL_RCC_OscConfig+0x288>)
 8007d24:	4313      	orrs	r3, r2
 8007d26:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d28:	f7fa fac8 	bl	80022bc <HAL_GetTick>
 8007d2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007d2e:	e008      	b.n	8007d42 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007d30:	f7fa fac4 	bl	80022bc <HAL_GetTick>
 8007d34:	4602      	mov	r2, r0
 8007d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d38:	1ad3      	subs	r3, r2, r3
 8007d3a:	2b02      	cmp	r3, #2
 8007d3c:	d901      	bls.n	8007d42 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8007d3e:	2303      	movs	r3, #3
 8007d40:	e305      	b.n	800834e <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007d42:	4b21      	ldr	r3, [pc, #132]	; (8007dc8 <HAL_RCC_OscConfig+0x288>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f003 0304 	and.w	r3, r3, #4
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d0f0      	beq.n	8007d30 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d4e:	f7fa fae5 	bl	800231c <HAL_GetREVID>
 8007d52:	4603      	mov	r3, r0
 8007d54:	f241 0203 	movw	r2, #4099	; 0x1003
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d817      	bhi.n	8007d8c <HAL_RCC_OscConfig+0x24c>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	691b      	ldr	r3, [r3, #16]
 8007d60:	2b40      	cmp	r3, #64	; 0x40
 8007d62:	d108      	bne.n	8007d76 <HAL_RCC_OscConfig+0x236>
 8007d64:	4b18      	ldr	r3, [pc, #96]	; (8007dc8 <HAL_RCC_OscConfig+0x288>)
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007d6c:	4a16      	ldr	r2, [pc, #88]	; (8007dc8 <HAL_RCC_OscConfig+0x288>)
 8007d6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d72:	6053      	str	r3, [r2, #4]
 8007d74:	e030      	b.n	8007dd8 <HAL_RCC_OscConfig+0x298>
 8007d76:	4b14      	ldr	r3, [pc, #80]	; (8007dc8 <HAL_RCC_OscConfig+0x288>)
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	691b      	ldr	r3, [r3, #16]
 8007d82:	031b      	lsls	r3, r3, #12
 8007d84:	4910      	ldr	r1, [pc, #64]	; (8007dc8 <HAL_RCC_OscConfig+0x288>)
 8007d86:	4313      	orrs	r3, r2
 8007d88:	604b      	str	r3, [r1, #4]
 8007d8a:	e025      	b.n	8007dd8 <HAL_RCC_OscConfig+0x298>
 8007d8c:	4b0e      	ldr	r3, [pc, #56]	; (8007dc8 <HAL_RCC_OscConfig+0x288>)
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	691b      	ldr	r3, [r3, #16]
 8007d98:	061b      	lsls	r3, r3, #24
 8007d9a:	490b      	ldr	r1, [pc, #44]	; (8007dc8 <HAL_RCC_OscConfig+0x288>)
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	604b      	str	r3, [r1, #4]
 8007da0:	e01a      	b.n	8007dd8 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007da2:	4b09      	ldr	r3, [pc, #36]	; (8007dc8 <HAL_RCC_OscConfig+0x288>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4a08      	ldr	r2, [pc, #32]	; (8007dc8 <HAL_RCC_OscConfig+0x288>)
 8007da8:	f023 0301 	bic.w	r3, r3, #1
 8007dac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dae:	f7fa fa85 	bl	80022bc <HAL_GetTick>
 8007db2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007db4:	e00a      	b.n	8007dcc <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007db6:	f7fa fa81 	bl	80022bc <HAL_GetTick>
 8007dba:	4602      	mov	r2, r0
 8007dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dbe:	1ad3      	subs	r3, r2, r3
 8007dc0:	2b02      	cmp	r3, #2
 8007dc2:	d903      	bls.n	8007dcc <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8007dc4:	2303      	movs	r3, #3
 8007dc6:	e2c2      	b.n	800834e <HAL_RCC_OscConfig+0x80e>
 8007dc8:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007dcc:	4b94      	ldr	r3, [pc, #592]	; (8008020 <HAL_RCC_OscConfig+0x4e0>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f003 0304 	and.w	r3, r3, #4
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d1ee      	bne.n	8007db6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f003 0310 	and.w	r3, r3, #16
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	f000 80a9 	beq.w	8007f38 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007de6:	4b8e      	ldr	r3, [pc, #568]	; (8008020 <HAL_RCC_OscConfig+0x4e0>)
 8007de8:	691b      	ldr	r3, [r3, #16]
 8007dea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007dee:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007df0:	4b8b      	ldr	r3, [pc, #556]	; (8008020 <HAL_RCC_OscConfig+0x4e0>)
 8007df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007df4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007df6:	69bb      	ldr	r3, [r7, #24]
 8007df8:	2b08      	cmp	r3, #8
 8007dfa:	d007      	beq.n	8007e0c <HAL_RCC_OscConfig+0x2cc>
 8007dfc:	69bb      	ldr	r3, [r7, #24]
 8007dfe:	2b18      	cmp	r3, #24
 8007e00:	d13a      	bne.n	8007e78 <HAL_RCC_OscConfig+0x338>
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	f003 0303 	and.w	r3, r3, #3
 8007e08:	2b01      	cmp	r3, #1
 8007e0a:	d135      	bne.n	8007e78 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007e0c:	4b84      	ldr	r3, [pc, #528]	; (8008020 <HAL_RCC_OscConfig+0x4e0>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d005      	beq.n	8007e24 <HAL_RCC_OscConfig+0x2e4>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	69db      	ldr	r3, [r3, #28]
 8007e1c:	2b80      	cmp	r3, #128	; 0x80
 8007e1e:	d001      	beq.n	8007e24 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8007e20:	2301      	movs	r3, #1
 8007e22:	e294      	b.n	800834e <HAL_RCC_OscConfig+0x80e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007e24:	f7fa fa7a 	bl	800231c <HAL_GetREVID>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	f241 0203 	movw	r2, #4099	; 0x1003
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d817      	bhi.n	8007e62 <HAL_RCC_OscConfig+0x322>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6a1b      	ldr	r3, [r3, #32]
 8007e36:	2b20      	cmp	r3, #32
 8007e38:	d108      	bne.n	8007e4c <HAL_RCC_OscConfig+0x30c>
 8007e3a:	4b79      	ldr	r3, [pc, #484]	; (8008020 <HAL_RCC_OscConfig+0x4e0>)
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007e42:	4a77      	ldr	r2, [pc, #476]	; (8008020 <HAL_RCC_OscConfig+0x4e0>)
 8007e44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e48:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007e4a:	e075      	b.n	8007f38 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007e4c:	4b74      	ldr	r3, [pc, #464]	; (8008020 <HAL_RCC_OscConfig+0x4e0>)
 8007e4e:	685b      	ldr	r3, [r3, #4]
 8007e50:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6a1b      	ldr	r3, [r3, #32]
 8007e58:	069b      	lsls	r3, r3, #26
 8007e5a:	4971      	ldr	r1, [pc, #452]	; (8008020 <HAL_RCC_OscConfig+0x4e0>)
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007e60:	e06a      	b.n	8007f38 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007e62:	4b6f      	ldr	r3, [pc, #444]	; (8008020 <HAL_RCC_OscConfig+0x4e0>)
 8007e64:	68db      	ldr	r3, [r3, #12]
 8007e66:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6a1b      	ldr	r3, [r3, #32]
 8007e6e:	061b      	lsls	r3, r3, #24
 8007e70:	496b      	ldr	r1, [pc, #428]	; (8008020 <HAL_RCC_OscConfig+0x4e0>)
 8007e72:	4313      	orrs	r3, r2
 8007e74:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007e76:	e05f      	b.n	8007f38 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	69db      	ldr	r3, [r3, #28]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d042      	beq.n	8007f06 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007e80:	4b67      	ldr	r3, [pc, #412]	; (8008020 <HAL_RCC_OscConfig+0x4e0>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4a66      	ldr	r2, [pc, #408]	; (8008020 <HAL_RCC_OscConfig+0x4e0>)
 8007e86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e8c:	f7fa fa16 	bl	80022bc <HAL_GetTick>
 8007e90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007e92:	e008      	b.n	8007ea6 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007e94:	f7fa fa12 	bl	80022bc <HAL_GetTick>
 8007e98:	4602      	mov	r2, r0
 8007e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e9c:	1ad3      	subs	r3, r2, r3
 8007e9e:	2b02      	cmp	r3, #2
 8007ea0:	d901      	bls.n	8007ea6 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8007ea2:	2303      	movs	r3, #3
 8007ea4:	e253      	b.n	800834e <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007ea6:	4b5e      	ldr	r3, [pc, #376]	; (8008020 <HAL_RCC_OscConfig+0x4e0>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d0f0      	beq.n	8007e94 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007eb2:	f7fa fa33 	bl	800231c <HAL_GetREVID>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	f241 0203 	movw	r2, #4099	; 0x1003
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d817      	bhi.n	8007ef0 <HAL_RCC_OscConfig+0x3b0>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6a1b      	ldr	r3, [r3, #32]
 8007ec4:	2b20      	cmp	r3, #32
 8007ec6:	d108      	bne.n	8007eda <HAL_RCC_OscConfig+0x39a>
 8007ec8:	4b55      	ldr	r3, [pc, #340]	; (8008020 <HAL_RCC_OscConfig+0x4e0>)
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007ed0:	4a53      	ldr	r2, [pc, #332]	; (8008020 <HAL_RCC_OscConfig+0x4e0>)
 8007ed2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007ed6:	6053      	str	r3, [r2, #4]
 8007ed8:	e02e      	b.n	8007f38 <HAL_RCC_OscConfig+0x3f8>
 8007eda:	4b51      	ldr	r3, [pc, #324]	; (8008020 <HAL_RCC_OscConfig+0x4e0>)
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6a1b      	ldr	r3, [r3, #32]
 8007ee6:	069b      	lsls	r3, r3, #26
 8007ee8:	494d      	ldr	r1, [pc, #308]	; (8008020 <HAL_RCC_OscConfig+0x4e0>)
 8007eea:	4313      	orrs	r3, r2
 8007eec:	604b      	str	r3, [r1, #4]
 8007eee:	e023      	b.n	8007f38 <HAL_RCC_OscConfig+0x3f8>
 8007ef0:	4b4b      	ldr	r3, [pc, #300]	; (8008020 <HAL_RCC_OscConfig+0x4e0>)
 8007ef2:	68db      	ldr	r3, [r3, #12]
 8007ef4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6a1b      	ldr	r3, [r3, #32]
 8007efc:	061b      	lsls	r3, r3, #24
 8007efe:	4948      	ldr	r1, [pc, #288]	; (8008020 <HAL_RCC_OscConfig+0x4e0>)
 8007f00:	4313      	orrs	r3, r2
 8007f02:	60cb      	str	r3, [r1, #12]
 8007f04:	e018      	b.n	8007f38 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007f06:	4b46      	ldr	r3, [pc, #280]	; (8008020 <HAL_RCC_OscConfig+0x4e0>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4a45      	ldr	r2, [pc, #276]	; (8008020 <HAL_RCC_OscConfig+0x4e0>)
 8007f0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f12:	f7fa f9d3 	bl	80022bc <HAL_GetTick>
 8007f16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007f18:	e008      	b.n	8007f2c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007f1a:	f7fa f9cf 	bl	80022bc <HAL_GetTick>
 8007f1e:	4602      	mov	r2, r0
 8007f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f22:	1ad3      	subs	r3, r2, r3
 8007f24:	2b02      	cmp	r3, #2
 8007f26:	d901      	bls.n	8007f2c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8007f28:	2303      	movs	r3, #3
 8007f2a:	e210      	b.n	800834e <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007f2c:	4b3c      	ldr	r3, [pc, #240]	; (8008020 <HAL_RCC_OscConfig+0x4e0>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d1f0      	bne.n	8007f1a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f003 0308 	and.w	r3, r3, #8
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d036      	beq.n	8007fb2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	695b      	ldr	r3, [r3, #20]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d019      	beq.n	8007f80 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007f4c:	4b34      	ldr	r3, [pc, #208]	; (8008020 <HAL_RCC_OscConfig+0x4e0>)
 8007f4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f50:	4a33      	ldr	r2, [pc, #204]	; (8008020 <HAL_RCC_OscConfig+0x4e0>)
 8007f52:	f043 0301 	orr.w	r3, r3, #1
 8007f56:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f58:	f7fa f9b0 	bl	80022bc <HAL_GetTick>
 8007f5c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007f5e:	e008      	b.n	8007f72 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007f60:	f7fa f9ac 	bl	80022bc <HAL_GetTick>
 8007f64:	4602      	mov	r2, r0
 8007f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f68:	1ad3      	subs	r3, r2, r3
 8007f6a:	2b02      	cmp	r3, #2
 8007f6c:	d901      	bls.n	8007f72 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8007f6e:	2303      	movs	r3, #3
 8007f70:	e1ed      	b.n	800834e <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007f72:	4b2b      	ldr	r3, [pc, #172]	; (8008020 <HAL_RCC_OscConfig+0x4e0>)
 8007f74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f76:	f003 0302 	and.w	r3, r3, #2
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d0f0      	beq.n	8007f60 <HAL_RCC_OscConfig+0x420>
 8007f7e:	e018      	b.n	8007fb2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007f80:	4b27      	ldr	r3, [pc, #156]	; (8008020 <HAL_RCC_OscConfig+0x4e0>)
 8007f82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f84:	4a26      	ldr	r2, [pc, #152]	; (8008020 <HAL_RCC_OscConfig+0x4e0>)
 8007f86:	f023 0301 	bic.w	r3, r3, #1
 8007f8a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f8c:	f7fa f996 	bl	80022bc <HAL_GetTick>
 8007f90:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007f92:	e008      	b.n	8007fa6 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007f94:	f7fa f992 	bl	80022bc <HAL_GetTick>
 8007f98:	4602      	mov	r2, r0
 8007f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9c:	1ad3      	subs	r3, r2, r3
 8007f9e:	2b02      	cmp	r3, #2
 8007fa0:	d901      	bls.n	8007fa6 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8007fa2:	2303      	movs	r3, #3
 8007fa4:	e1d3      	b.n	800834e <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007fa6:	4b1e      	ldr	r3, [pc, #120]	; (8008020 <HAL_RCC_OscConfig+0x4e0>)
 8007fa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007faa:	f003 0302 	and.w	r3, r3, #2
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d1f0      	bne.n	8007f94 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f003 0320 	and.w	r3, r3, #32
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d038      	beq.n	8008030 <HAL_RCC_OscConfig+0x4f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	699b      	ldr	r3, [r3, #24]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d019      	beq.n	8007ffa <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007fc6:	4b16      	ldr	r3, [pc, #88]	; (8008020 <HAL_RCC_OscConfig+0x4e0>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a15      	ldr	r2, [pc, #84]	; (8008020 <HAL_RCC_OscConfig+0x4e0>)
 8007fcc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007fd0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007fd2:	f7fa f973 	bl	80022bc <HAL_GetTick>
 8007fd6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007fd8:	e008      	b.n	8007fec <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007fda:	f7fa f96f 	bl	80022bc <HAL_GetTick>
 8007fde:	4602      	mov	r2, r0
 8007fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe2:	1ad3      	subs	r3, r2, r3
 8007fe4:	2b02      	cmp	r3, #2
 8007fe6:	d901      	bls.n	8007fec <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8007fe8:	2303      	movs	r3, #3
 8007fea:	e1b0      	b.n	800834e <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007fec:	4b0c      	ldr	r3, [pc, #48]	; (8008020 <HAL_RCC_OscConfig+0x4e0>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d0f0      	beq.n	8007fda <HAL_RCC_OscConfig+0x49a>
 8007ff8:	e01a      	b.n	8008030 <HAL_RCC_OscConfig+0x4f0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007ffa:	4b09      	ldr	r3, [pc, #36]	; (8008020 <HAL_RCC_OscConfig+0x4e0>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4a08      	ldr	r2, [pc, #32]	; (8008020 <HAL_RCC_OscConfig+0x4e0>)
 8008000:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008004:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008006:	f7fa f959 	bl	80022bc <HAL_GetTick>
 800800a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800800c:	e00a      	b.n	8008024 <HAL_RCC_OscConfig+0x4e4>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800800e:	f7fa f955 	bl	80022bc <HAL_GetTick>
 8008012:	4602      	mov	r2, r0
 8008014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008016:	1ad3      	subs	r3, r2, r3
 8008018:	2b02      	cmp	r3, #2
 800801a:	d903      	bls.n	8008024 <HAL_RCC_OscConfig+0x4e4>
        {
          return HAL_TIMEOUT;
 800801c:	2303      	movs	r3, #3
 800801e:	e196      	b.n	800834e <HAL_RCC_OscConfig+0x80e>
 8008020:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008024:	4b99      	ldr	r3, [pc, #612]	; (800828c <HAL_RCC_OscConfig+0x74c>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800802c:	2b00      	cmp	r3, #0
 800802e:	d1ee      	bne.n	800800e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f003 0304 	and.w	r3, r3, #4
 8008038:	2b00      	cmp	r3, #0
 800803a:	f000 8081 	beq.w	8008140 <HAL_RCC_OscConfig+0x600>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800803e:	4b94      	ldr	r3, [pc, #592]	; (8008290 <HAL_RCC_OscConfig+0x750>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4a93      	ldr	r2, [pc, #588]	; (8008290 <HAL_RCC_OscConfig+0x750>)
 8008044:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008048:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800804a:	f7fa f937 	bl	80022bc <HAL_GetTick>
 800804e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008050:	e008      	b.n	8008064 <HAL_RCC_OscConfig+0x524>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008052:	f7fa f933 	bl	80022bc <HAL_GetTick>
 8008056:	4602      	mov	r2, r0
 8008058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800805a:	1ad3      	subs	r3, r2, r3
 800805c:	2b64      	cmp	r3, #100	; 0x64
 800805e:	d901      	bls.n	8008064 <HAL_RCC_OscConfig+0x524>
      {
        return HAL_TIMEOUT;
 8008060:	2303      	movs	r3, #3
 8008062:	e174      	b.n	800834e <HAL_RCC_OscConfig+0x80e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008064:	4b8a      	ldr	r3, [pc, #552]	; (8008290 <HAL_RCC_OscConfig+0x750>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800806c:	2b00      	cmp	r3, #0
 800806e:	d0f0      	beq.n	8008052 <HAL_RCC_OscConfig+0x512>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	689b      	ldr	r3, [r3, #8]
 8008074:	2b01      	cmp	r3, #1
 8008076:	d106      	bne.n	8008086 <HAL_RCC_OscConfig+0x546>
 8008078:	4b84      	ldr	r3, [pc, #528]	; (800828c <HAL_RCC_OscConfig+0x74c>)
 800807a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800807c:	4a83      	ldr	r2, [pc, #524]	; (800828c <HAL_RCC_OscConfig+0x74c>)
 800807e:	f043 0301 	orr.w	r3, r3, #1
 8008082:	6713      	str	r3, [r2, #112]	; 0x70
 8008084:	e02d      	b.n	80080e2 <HAL_RCC_OscConfig+0x5a2>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	689b      	ldr	r3, [r3, #8]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d10c      	bne.n	80080a8 <HAL_RCC_OscConfig+0x568>
 800808e:	4b7f      	ldr	r3, [pc, #508]	; (800828c <HAL_RCC_OscConfig+0x74c>)
 8008090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008092:	4a7e      	ldr	r2, [pc, #504]	; (800828c <HAL_RCC_OscConfig+0x74c>)
 8008094:	f023 0301 	bic.w	r3, r3, #1
 8008098:	6713      	str	r3, [r2, #112]	; 0x70
 800809a:	4b7c      	ldr	r3, [pc, #496]	; (800828c <HAL_RCC_OscConfig+0x74c>)
 800809c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800809e:	4a7b      	ldr	r2, [pc, #492]	; (800828c <HAL_RCC_OscConfig+0x74c>)
 80080a0:	f023 0304 	bic.w	r3, r3, #4
 80080a4:	6713      	str	r3, [r2, #112]	; 0x70
 80080a6:	e01c      	b.n	80080e2 <HAL_RCC_OscConfig+0x5a2>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	689b      	ldr	r3, [r3, #8]
 80080ac:	2b05      	cmp	r3, #5
 80080ae:	d10c      	bne.n	80080ca <HAL_RCC_OscConfig+0x58a>
 80080b0:	4b76      	ldr	r3, [pc, #472]	; (800828c <HAL_RCC_OscConfig+0x74c>)
 80080b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080b4:	4a75      	ldr	r2, [pc, #468]	; (800828c <HAL_RCC_OscConfig+0x74c>)
 80080b6:	f043 0304 	orr.w	r3, r3, #4
 80080ba:	6713      	str	r3, [r2, #112]	; 0x70
 80080bc:	4b73      	ldr	r3, [pc, #460]	; (800828c <HAL_RCC_OscConfig+0x74c>)
 80080be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080c0:	4a72      	ldr	r2, [pc, #456]	; (800828c <HAL_RCC_OscConfig+0x74c>)
 80080c2:	f043 0301 	orr.w	r3, r3, #1
 80080c6:	6713      	str	r3, [r2, #112]	; 0x70
 80080c8:	e00b      	b.n	80080e2 <HAL_RCC_OscConfig+0x5a2>
 80080ca:	4b70      	ldr	r3, [pc, #448]	; (800828c <HAL_RCC_OscConfig+0x74c>)
 80080cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080ce:	4a6f      	ldr	r2, [pc, #444]	; (800828c <HAL_RCC_OscConfig+0x74c>)
 80080d0:	f023 0301 	bic.w	r3, r3, #1
 80080d4:	6713      	str	r3, [r2, #112]	; 0x70
 80080d6:	4b6d      	ldr	r3, [pc, #436]	; (800828c <HAL_RCC_OscConfig+0x74c>)
 80080d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080da:	4a6c      	ldr	r2, [pc, #432]	; (800828c <HAL_RCC_OscConfig+0x74c>)
 80080dc:	f023 0304 	bic.w	r3, r3, #4
 80080e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	689b      	ldr	r3, [r3, #8]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d015      	beq.n	8008116 <HAL_RCC_OscConfig+0x5d6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080ea:	f7fa f8e7 	bl	80022bc <HAL_GetTick>
 80080ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80080f0:	e00a      	b.n	8008108 <HAL_RCC_OscConfig+0x5c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80080f2:	f7fa f8e3 	bl	80022bc <HAL_GetTick>
 80080f6:	4602      	mov	r2, r0
 80080f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080fa:	1ad3      	subs	r3, r2, r3
 80080fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8008100:	4293      	cmp	r3, r2
 8008102:	d901      	bls.n	8008108 <HAL_RCC_OscConfig+0x5c8>
        {
          return HAL_TIMEOUT;
 8008104:	2303      	movs	r3, #3
 8008106:	e122      	b.n	800834e <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008108:	4b60      	ldr	r3, [pc, #384]	; (800828c <HAL_RCC_OscConfig+0x74c>)
 800810a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800810c:	f003 0302 	and.w	r3, r3, #2
 8008110:	2b00      	cmp	r3, #0
 8008112:	d0ee      	beq.n	80080f2 <HAL_RCC_OscConfig+0x5b2>
 8008114:	e014      	b.n	8008140 <HAL_RCC_OscConfig+0x600>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008116:	f7fa f8d1 	bl	80022bc <HAL_GetTick>
 800811a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800811c:	e00a      	b.n	8008134 <HAL_RCC_OscConfig+0x5f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800811e:	f7fa f8cd 	bl	80022bc <HAL_GetTick>
 8008122:	4602      	mov	r2, r0
 8008124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008126:	1ad3      	subs	r3, r2, r3
 8008128:	f241 3288 	movw	r2, #5000	; 0x1388
 800812c:	4293      	cmp	r3, r2
 800812e:	d901      	bls.n	8008134 <HAL_RCC_OscConfig+0x5f4>
        {
          return HAL_TIMEOUT;
 8008130:	2303      	movs	r3, #3
 8008132:	e10c      	b.n	800834e <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008134:	4b55      	ldr	r3, [pc, #340]	; (800828c <HAL_RCC_OscConfig+0x74c>)
 8008136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008138:	f003 0302 	and.w	r3, r3, #2
 800813c:	2b00      	cmp	r3, #0
 800813e:	d1ee      	bne.n	800811e <HAL_RCC_OscConfig+0x5de>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008144:	2b00      	cmp	r3, #0
 8008146:	f000 8101 	beq.w	800834c <HAL_RCC_OscConfig+0x80c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800814a:	4b50      	ldr	r3, [pc, #320]	; (800828c <HAL_RCC_OscConfig+0x74c>)
 800814c:	691b      	ldr	r3, [r3, #16]
 800814e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008152:	2b18      	cmp	r3, #24
 8008154:	f000 80bc 	beq.w	80082d0 <HAL_RCC_OscConfig+0x790>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800815c:	2b02      	cmp	r3, #2
 800815e:	f040 809d 	bne.w	800829c <HAL_RCC_OscConfig+0x75c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008162:	4b4a      	ldr	r3, [pc, #296]	; (800828c <HAL_RCC_OscConfig+0x74c>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4a49      	ldr	r2, [pc, #292]	; (800828c <HAL_RCC_OscConfig+0x74c>)
 8008168:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800816c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800816e:	f7fa f8a5 	bl	80022bc <HAL_GetTick>
 8008172:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008174:	e008      	b.n	8008188 <HAL_RCC_OscConfig+0x648>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008176:	f7fa f8a1 	bl	80022bc <HAL_GetTick>
 800817a:	4602      	mov	r2, r0
 800817c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800817e:	1ad3      	subs	r3, r2, r3
 8008180:	2b02      	cmp	r3, #2
 8008182:	d901      	bls.n	8008188 <HAL_RCC_OscConfig+0x648>
          {
            return HAL_TIMEOUT;
 8008184:	2303      	movs	r3, #3
 8008186:	e0e2      	b.n	800834e <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008188:	4b40      	ldr	r3, [pc, #256]	; (800828c <HAL_RCC_OscConfig+0x74c>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008190:	2b00      	cmp	r3, #0
 8008192:	d1f0      	bne.n	8008176 <HAL_RCC_OscConfig+0x636>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008194:	4b3d      	ldr	r3, [pc, #244]	; (800828c <HAL_RCC_OscConfig+0x74c>)
 8008196:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008198:	4b3e      	ldr	r3, [pc, #248]	; (8008294 <HAL_RCC_OscConfig+0x754>)
 800819a:	4013      	ands	r3, r2
 800819c:	687a      	ldr	r2, [r7, #4]
 800819e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80081a0:	687a      	ldr	r2, [r7, #4]
 80081a2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80081a4:	0112      	lsls	r2, r2, #4
 80081a6:	430a      	orrs	r2, r1
 80081a8:	4938      	ldr	r1, [pc, #224]	; (800828c <HAL_RCC_OscConfig+0x74c>)
 80081aa:	4313      	orrs	r3, r2
 80081ac:	628b      	str	r3, [r1, #40]	; 0x28
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081b2:	3b01      	subs	r3, #1
 80081b4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081bc:	3b01      	subs	r3, #1
 80081be:	025b      	lsls	r3, r3, #9
 80081c0:	b29b      	uxth	r3, r3
 80081c2:	431a      	orrs	r2, r3
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081c8:	3b01      	subs	r3, #1
 80081ca:	041b      	lsls	r3, r3, #16
 80081cc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80081d0:	431a      	orrs	r2, r3
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081d6:	3b01      	subs	r3, #1
 80081d8:	061b      	lsls	r3, r3, #24
 80081da:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80081de:	492b      	ldr	r1, [pc, #172]	; (800828c <HAL_RCC_OscConfig+0x74c>)
 80081e0:	4313      	orrs	r3, r2
 80081e2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80081e4:	4b29      	ldr	r3, [pc, #164]	; (800828c <HAL_RCC_OscConfig+0x74c>)
 80081e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081e8:	4a28      	ldr	r2, [pc, #160]	; (800828c <HAL_RCC_OscConfig+0x74c>)
 80081ea:	f023 0301 	bic.w	r3, r3, #1
 80081ee:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80081f0:	4b26      	ldr	r3, [pc, #152]	; (800828c <HAL_RCC_OscConfig+0x74c>)
 80081f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80081f4:	4b28      	ldr	r3, [pc, #160]	; (8008298 <HAL_RCC_OscConfig+0x758>)
 80081f6:	4013      	ands	r3, r2
 80081f8:	687a      	ldr	r2, [r7, #4]
 80081fa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80081fc:	00d2      	lsls	r2, r2, #3
 80081fe:	4923      	ldr	r1, [pc, #140]	; (800828c <HAL_RCC_OscConfig+0x74c>)
 8008200:	4313      	orrs	r3, r2
 8008202:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008204:	4b21      	ldr	r3, [pc, #132]	; (800828c <HAL_RCC_OscConfig+0x74c>)
 8008206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008208:	f023 020c 	bic.w	r2, r3, #12
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008210:	491e      	ldr	r1, [pc, #120]	; (800828c <HAL_RCC_OscConfig+0x74c>)
 8008212:	4313      	orrs	r3, r2
 8008214:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008216:	4b1d      	ldr	r3, [pc, #116]	; (800828c <HAL_RCC_OscConfig+0x74c>)
 8008218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800821a:	f023 0202 	bic.w	r2, r3, #2
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008222:	491a      	ldr	r1, [pc, #104]	; (800828c <HAL_RCC_OscConfig+0x74c>)
 8008224:	4313      	orrs	r3, r2
 8008226:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008228:	4b18      	ldr	r3, [pc, #96]	; (800828c <HAL_RCC_OscConfig+0x74c>)
 800822a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800822c:	4a17      	ldr	r2, [pc, #92]	; (800828c <HAL_RCC_OscConfig+0x74c>)
 800822e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008232:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008234:	4b15      	ldr	r3, [pc, #84]	; (800828c <HAL_RCC_OscConfig+0x74c>)
 8008236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008238:	4a14      	ldr	r2, [pc, #80]	; (800828c <HAL_RCC_OscConfig+0x74c>)
 800823a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800823e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008240:	4b12      	ldr	r3, [pc, #72]	; (800828c <HAL_RCC_OscConfig+0x74c>)
 8008242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008244:	4a11      	ldr	r2, [pc, #68]	; (800828c <HAL_RCC_OscConfig+0x74c>)
 8008246:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800824a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800824c:	4b0f      	ldr	r3, [pc, #60]	; (800828c <HAL_RCC_OscConfig+0x74c>)
 800824e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008250:	4a0e      	ldr	r2, [pc, #56]	; (800828c <HAL_RCC_OscConfig+0x74c>)
 8008252:	f043 0301 	orr.w	r3, r3, #1
 8008256:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008258:	4b0c      	ldr	r3, [pc, #48]	; (800828c <HAL_RCC_OscConfig+0x74c>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4a0b      	ldr	r2, [pc, #44]	; (800828c <HAL_RCC_OscConfig+0x74c>)
 800825e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008262:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008264:	f7fa f82a 	bl	80022bc <HAL_GetTick>
 8008268:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800826a:	e008      	b.n	800827e <HAL_RCC_OscConfig+0x73e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800826c:	f7fa f826 	bl	80022bc <HAL_GetTick>
 8008270:	4602      	mov	r2, r0
 8008272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008274:	1ad3      	subs	r3, r2, r3
 8008276:	2b02      	cmp	r3, #2
 8008278:	d901      	bls.n	800827e <HAL_RCC_OscConfig+0x73e>
          {
            return HAL_TIMEOUT;
 800827a:	2303      	movs	r3, #3
 800827c:	e067      	b.n	800834e <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800827e:	4b03      	ldr	r3, [pc, #12]	; (800828c <HAL_RCC_OscConfig+0x74c>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008286:	2b00      	cmp	r3, #0
 8008288:	d0f0      	beq.n	800826c <HAL_RCC_OscConfig+0x72c>
 800828a:	e05f      	b.n	800834c <HAL_RCC_OscConfig+0x80c>
 800828c:	58024400 	.word	0x58024400
 8008290:	58024800 	.word	0x58024800
 8008294:	fffffc0c 	.word	0xfffffc0c
 8008298:	ffff0007 	.word	0xffff0007
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800829c:	4b2e      	ldr	r3, [pc, #184]	; (8008358 <HAL_RCC_OscConfig+0x818>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a2d      	ldr	r2, [pc, #180]	; (8008358 <HAL_RCC_OscConfig+0x818>)
 80082a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80082a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082a8:	f7fa f808 	bl	80022bc <HAL_GetTick>
 80082ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80082ae:	e008      	b.n	80082c2 <HAL_RCC_OscConfig+0x782>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80082b0:	f7fa f804 	bl	80022bc <HAL_GetTick>
 80082b4:	4602      	mov	r2, r0
 80082b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b8:	1ad3      	subs	r3, r2, r3
 80082ba:	2b02      	cmp	r3, #2
 80082bc:	d901      	bls.n	80082c2 <HAL_RCC_OscConfig+0x782>
          {
            return HAL_TIMEOUT;
 80082be:	2303      	movs	r3, #3
 80082c0:	e045      	b.n	800834e <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80082c2:	4b25      	ldr	r3, [pc, #148]	; (8008358 <HAL_RCC_OscConfig+0x818>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d1f0      	bne.n	80082b0 <HAL_RCC_OscConfig+0x770>
 80082ce:	e03d      	b.n	800834c <HAL_RCC_OscConfig+0x80c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80082d0:	4b21      	ldr	r3, [pc, #132]	; (8008358 <HAL_RCC_OscConfig+0x818>)
 80082d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082d4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80082d6:	4b20      	ldr	r3, [pc, #128]	; (8008358 <HAL_RCC_OscConfig+0x818>)
 80082d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082da:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e0:	2b01      	cmp	r3, #1
 80082e2:	d031      	beq.n	8008348 <HAL_RCC_OscConfig+0x808>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	f003 0203 	and.w	r2, r3, #3
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80082ee:	429a      	cmp	r2, r3
 80082f0:	d12a      	bne.n	8008348 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	091b      	lsrs	r3, r3, #4
 80082f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80082fe:	429a      	cmp	r2, r3
 8008300:	d122      	bne.n	8008348 <HAL_RCC_OscConfig+0x808>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800830c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800830e:	429a      	cmp	r2, r3
 8008310:	d11a      	bne.n	8008348 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	0a5b      	lsrs	r3, r3, #9
 8008316:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800831e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008320:	429a      	cmp	r2, r3
 8008322:	d111      	bne.n	8008348 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	0c1b      	lsrs	r3, r3, #16
 8008328:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008330:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008332:	429a      	cmp	r2, r3
 8008334:	d108      	bne.n	8008348 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	0e1b      	lsrs	r3, r3, #24
 800833a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008342:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008344:	429a      	cmp	r2, r3
 8008346:	d001      	beq.n	800834c <HAL_RCC_OscConfig+0x80c>
      {
        return HAL_ERROR;
 8008348:	2301      	movs	r3, #1
 800834a:	e000      	b.n	800834e <HAL_RCC_OscConfig+0x80e>
      }
    }
  }
  return HAL_OK;
 800834c:	2300      	movs	r3, #0
}
 800834e:	4618      	mov	r0, r3
 8008350:	3730      	adds	r7, #48	; 0x30
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}
 8008356:	bf00      	nop
 8008358:	58024400 	.word	0x58024400

0800835c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b086      	sub	sp, #24
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d101      	bne.n	8008370 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800836c:	2301      	movs	r3, #1
 800836e:	e19c      	b.n	80086aa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008370:	4b8a      	ldr	r3, [pc, #552]	; (800859c <HAL_RCC_ClockConfig+0x240>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f003 030f 	and.w	r3, r3, #15
 8008378:	683a      	ldr	r2, [r7, #0]
 800837a:	429a      	cmp	r2, r3
 800837c:	d910      	bls.n	80083a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800837e:	4b87      	ldr	r3, [pc, #540]	; (800859c <HAL_RCC_ClockConfig+0x240>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f023 020f 	bic.w	r2, r3, #15
 8008386:	4985      	ldr	r1, [pc, #532]	; (800859c <HAL_RCC_ClockConfig+0x240>)
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	4313      	orrs	r3, r2
 800838c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800838e:	4b83      	ldr	r3, [pc, #524]	; (800859c <HAL_RCC_ClockConfig+0x240>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f003 030f 	and.w	r3, r3, #15
 8008396:	683a      	ldr	r2, [r7, #0]
 8008398:	429a      	cmp	r2, r3
 800839a:	d001      	beq.n	80083a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800839c:	2301      	movs	r3, #1
 800839e:	e184      	b.n	80086aa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f003 0304 	and.w	r3, r3, #4
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d010      	beq.n	80083ce <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	691a      	ldr	r2, [r3, #16]
 80083b0:	4b7b      	ldr	r3, [pc, #492]	; (80085a0 <HAL_RCC_ClockConfig+0x244>)
 80083b2:	699b      	ldr	r3, [r3, #24]
 80083b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80083b8:	429a      	cmp	r2, r3
 80083ba:	d908      	bls.n	80083ce <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80083bc:	4b78      	ldr	r3, [pc, #480]	; (80085a0 <HAL_RCC_ClockConfig+0x244>)
 80083be:	699b      	ldr	r3, [r3, #24]
 80083c0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	691b      	ldr	r3, [r3, #16]
 80083c8:	4975      	ldr	r1, [pc, #468]	; (80085a0 <HAL_RCC_ClockConfig+0x244>)
 80083ca:	4313      	orrs	r3, r2
 80083cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f003 0308 	and.w	r3, r3, #8
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d010      	beq.n	80083fc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	695a      	ldr	r2, [r3, #20]
 80083de:	4b70      	ldr	r3, [pc, #448]	; (80085a0 <HAL_RCC_ClockConfig+0x244>)
 80083e0:	69db      	ldr	r3, [r3, #28]
 80083e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80083e6:	429a      	cmp	r2, r3
 80083e8:	d908      	bls.n	80083fc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80083ea:	4b6d      	ldr	r3, [pc, #436]	; (80085a0 <HAL_RCC_ClockConfig+0x244>)
 80083ec:	69db      	ldr	r3, [r3, #28]
 80083ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	695b      	ldr	r3, [r3, #20]
 80083f6:	496a      	ldr	r1, [pc, #424]	; (80085a0 <HAL_RCC_ClockConfig+0x244>)
 80083f8:	4313      	orrs	r3, r2
 80083fa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f003 0310 	and.w	r3, r3, #16
 8008404:	2b00      	cmp	r3, #0
 8008406:	d010      	beq.n	800842a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	699a      	ldr	r2, [r3, #24]
 800840c:	4b64      	ldr	r3, [pc, #400]	; (80085a0 <HAL_RCC_ClockConfig+0x244>)
 800840e:	69db      	ldr	r3, [r3, #28]
 8008410:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008414:	429a      	cmp	r2, r3
 8008416:	d908      	bls.n	800842a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008418:	4b61      	ldr	r3, [pc, #388]	; (80085a0 <HAL_RCC_ClockConfig+0x244>)
 800841a:	69db      	ldr	r3, [r3, #28]
 800841c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	699b      	ldr	r3, [r3, #24]
 8008424:	495e      	ldr	r1, [pc, #376]	; (80085a0 <HAL_RCC_ClockConfig+0x244>)
 8008426:	4313      	orrs	r3, r2
 8008428:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f003 0320 	and.w	r3, r3, #32
 8008432:	2b00      	cmp	r3, #0
 8008434:	d010      	beq.n	8008458 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	69da      	ldr	r2, [r3, #28]
 800843a:	4b59      	ldr	r3, [pc, #356]	; (80085a0 <HAL_RCC_ClockConfig+0x244>)
 800843c:	6a1b      	ldr	r3, [r3, #32]
 800843e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008442:	429a      	cmp	r2, r3
 8008444:	d908      	bls.n	8008458 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008446:	4b56      	ldr	r3, [pc, #344]	; (80085a0 <HAL_RCC_ClockConfig+0x244>)
 8008448:	6a1b      	ldr	r3, [r3, #32]
 800844a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	69db      	ldr	r3, [r3, #28]
 8008452:	4953      	ldr	r1, [pc, #332]	; (80085a0 <HAL_RCC_ClockConfig+0x244>)
 8008454:	4313      	orrs	r3, r2
 8008456:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f003 0302 	and.w	r3, r3, #2
 8008460:	2b00      	cmp	r3, #0
 8008462:	d010      	beq.n	8008486 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	68da      	ldr	r2, [r3, #12]
 8008468:	4b4d      	ldr	r3, [pc, #308]	; (80085a0 <HAL_RCC_ClockConfig+0x244>)
 800846a:	699b      	ldr	r3, [r3, #24]
 800846c:	f003 030f 	and.w	r3, r3, #15
 8008470:	429a      	cmp	r2, r3
 8008472:	d908      	bls.n	8008486 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008474:	4b4a      	ldr	r3, [pc, #296]	; (80085a0 <HAL_RCC_ClockConfig+0x244>)
 8008476:	699b      	ldr	r3, [r3, #24]
 8008478:	f023 020f 	bic.w	r2, r3, #15
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	68db      	ldr	r3, [r3, #12]
 8008480:	4947      	ldr	r1, [pc, #284]	; (80085a0 <HAL_RCC_ClockConfig+0x244>)
 8008482:	4313      	orrs	r3, r2
 8008484:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f003 0301 	and.w	r3, r3, #1
 800848e:	2b00      	cmp	r3, #0
 8008490:	d055      	beq.n	800853e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008492:	4b43      	ldr	r3, [pc, #268]	; (80085a0 <HAL_RCC_ClockConfig+0x244>)
 8008494:	699b      	ldr	r3, [r3, #24]
 8008496:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	689b      	ldr	r3, [r3, #8]
 800849e:	4940      	ldr	r1, [pc, #256]	; (80085a0 <HAL_RCC_ClockConfig+0x244>)
 80084a0:	4313      	orrs	r3, r2
 80084a2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	685b      	ldr	r3, [r3, #4]
 80084a8:	2b02      	cmp	r3, #2
 80084aa:	d107      	bne.n	80084bc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80084ac:	4b3c      	ldr	r3, [pc, #240]	; (80085a0 <HAL_RCC_ClockConfig+0x244>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d121      	bne.n	80084fc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80084b8:	2301      	movs	r3, #1
 80084ba:	e0f6      	b.n	80086aa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	685b      	ldr	r3, [r3, #4]
 80084c0:	2b03      	cmp	r3, #3
 80084c2:	d107      	bne.n	80084d4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80084c4:	4b36      	ldr	r3, [pc, #216]	; (80085a0 <HAL_RCC_ClockConfig+0x244>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d115      	bne.n	80084fc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80084d0:	2301      	movs	r3, #1
 80084d2:	e0ea      	b.n	80086aa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	685b      	ldr	r3, [r3, #4]
 80084d8:	2b01      	cmp	r3, #1
 80084da:	d107      	bne.n	80084ec <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80084dc:	4b30      	ldr	r3, [pc, #192]	; (80085a0 <HAL_RCC_ClockConfig+0x244>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d109      	bne.n	80084fc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80084e8:	2301      	movs	r3, #1
 80084ea:	e0de      	b.n	80086aa <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80084ec:	4b2c      	ldr	r3, [pc, #176]	; (80085a0 <HAL_RCC_ClockConfig+0x244>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f003 0304 	and.w	r3, r3, #4
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d101      	bne.n	80084fc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80084f8:	2301      	movs	r3, #1
 80084fa:	e0d6      	b.n	80086aa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80084fc:	4b28      	ldr	r3, [pc, #160]	; (80085a0 <HAL_RCC_ClockConfig+0x244>)
 80084fe:	691b      	ldr	r3, [r3, #16]
 8008500:	f023 0207 	bic.w	r2, r3, #7
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	685b      	ldr	r3, [r3, #4]
 8008508:	4925      	ldr	r1, [pc, #148]	; (80085a0 <HAL_RCC_ClockConfig+0x244>)
 800850a:	4313      	orrs	r3, r2
 800850c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800850e:	f7f9 fed5 	bl	80022bc <HAL_GetTick>
 8008512:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008514:	e00a      	b.n	800852c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008516:	f7f9 fed1 	bl	80022bc <HAL_GetTick>
 800851a:	4602      	mov	r2, r0
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	1ad3      	subs	r3, r2, r3
 8008520:	f241 3288 	movw	r2, #5000	; 0x1388
 8008524:	4293      	cmp	r3, r2
 8008526:	d901      	bls.n	800852c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008528:	2303      	movs	r3, #3
 800852a:	e0be      	b.n	80086aa <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800852c:	4b1c      	ldr	r3, [pc, #112]	; (80085a0 <HAL_RCC_ClockConfig+0x244>)
 800852e:	691b      	ldr	r3, [r3, #16]
 8008530:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	685b      	ldr	r3, [r3, #4]
 8008538:	00db      	lsls	r3, r3, #3
 800853a:	429a      	cmp	r2, r3
 800853c:	d1eb      	bne.n	8008516 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f003 0302 	and.w	r3, r3, #2
 8008546:	2b00      	cmp	r3, #0
 8008548:	d010      	beq.n	800856c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	68da      	ldr	r2, [r3, #12]
 800854e:	4b14      	ldr	r3, [pc, #80]	; (80085a0 <HAL_RCC_ClockConfig+0x244>)
 8008550:	699b      	ldr	r3, [r3, #24]
 8008552:	f003 030f 	and.w	r3, r3, #15
 8008556:	429a      	cmp	r2, r3
 8008558:	d208      	bcs.n	800856c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800855a:	4b11      	ldr	r3, [pc, #68]	; (80085a0 <HAL_RCC_ClockConfig+0x244>)
 800855c:	699b      	ldr	r3, [r3, #24]
 800855e:	f023 020f 	bic.w	r2, r3, #15
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	68db      	ldr	r3, [r3, #12]
 8008566:	490e      	ldr	r1, [pc, #56]	; (80085a0 <HAL_RCC_ClockConfig+0x244>)
 8008568:	4313      	orrs	r3, r2
 800856a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800856c:	4b0b      	ldr	r3, [pc, #44]	; (800859c <HAL_RCC_ClockConfig+0x240>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f003 030f 	and.w	r3, r3, #15
 8008574:	683a      	ldr	r2, [r7, #0]
 8008576:	429a      	cmp	r2, r3
 8008578:	d214      	bcs.n	80085a4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800857a:	4b08      	ldr	r3, [pc, #32]	; (800859c <HAL_RCC_ClockConfig+0x240>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f023 020f 	bic.w	r2, r3, #15
 8008582:	4906      	ldr	r1, [pc, #24]	; (800859c <HAL_RCC_ClockConfig+0x240>)
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	4313      	orrs	r3, r2
 8008588:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800858a:	4b04      	ldr	r3, [pc, #16]	; (800859c <HAL_RCC_ClockConfig+0x240>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f003 030f 	and.w	r3, r3, #15
 8008592:	683a      	ldr	r2, [r7, #0]
 8008594:	429a      	cmp	r2, r3
 8008596:	d005      	beq.n	80085a4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008598:	2301      	movs	r3, #1
 800859a:	e086      	b.n	80086aa <HAL_RCC_ClockConfig+0x34e>
 800859c:	52002000 	.word	0x52002000
 80085a0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f003 0304 	and.w	r3, r3, #4
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d010      	beq.n	80085d2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	691a      	ldr	r2, [r3, #16]
 80085b4:	4b3f      	ldr	r3, [pc, #252]	; (80086b4 <HAL_RCC_ClockConfig+0x358>)
 80085b6:	699b      	ldr	r3, [r3, #24]
 80085b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80085bc:	429a      	cmp	r2, r3
 80085be:	d208      	bcs.n	80085d2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80085c0:	4b3c      	ldr	r3, [pc, #240]	; (80086b4 <HAL_RCC_ClockConfig+0x358>)
 80085c2:	699b      	ldr	r3, [r3, #24]
 80085c4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	691b      	ldr	r3, [r3, #16]
 80085cc:	4939      	ldr	r1, [pc, #228]	; (80086b4 <HAL_RCC_ClockConfig+0x358>)
 80085ce:	4313      	orrs	r3, r2
 80085d0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f003 0308 	and.w	r3, r3, #8
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d010      	beq.n	8008600 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	695a      	ldr	r2, [r3, #20]
 80085e2:	4b34      	ldr	r3, [pc, #208]	; (80086b4 <HAL_RCC_ClockConfig+0x358>)
 80085e4:	69db      	ldr	r3, [r3, #28]
 80085e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80085ea:	429a      	cmp	r2, r3
 80085ec:	d208      	bcs.n	8008600 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80085ee:	4b31      	ldr	r3, [pc, #196]	; (80086b4 <HAL_RCC_ClockConfig+0x358>)
 80085f0:	69db      	ldr	r3, [r3, #28]
 80085f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	695b      	ldr	r3, [r3, #20]
 80085fa:	492e      	ldr	r1, [pc, #184]	; (80086b4 <HAL_RCC_ClockConfig+0x358>)
 80085fc:	4313      	orrs	r3, r2
 80085fe:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f003 0310 	and.w	r3, r3, #16
 8008608:	2b00      	cmp	r3, #0
 800860a:	d010      	beq.n	800862e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	699a      	ldr	r2, [r3, #24]
 8008610:	4b28      	ldr	r3, [pc, #160]	; (80086b4 <HAL_RCC_ClockConfig+0x358>)
 8008612:	69db      	ldr	r3, [r3, #28]
 8008614:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008618:	429a      	cmp	r2, r3
 800861a:	d208      	bcs.n	800862e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800861c:	4b25      	ldr	r3, [pc, #148]	; (80086b4 <HAL_RCC_ClockConfig+0x358>)
 800861e:	69db      	ldr	r3, [r3, #28]
 8008620:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	699b      	ldr	r3, [r3, #24]
 8008628:	4922      	ldr	r1, [pc, #136]	; (80086b4 <HAL_RCC_ClockConfig+0x358>)
 800862a:	4313      	orrs	r3, r2
 800862c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f003 0320 	and.w	r3, r3, #32
 8008636:	2b00      	cmp	r3, #0
 8008638:	d010      	beq.n	800865c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	69da      	ldr	r2, [r3, #28]
 800863e:	4b1d      	ldr	r3, [pc, #116]	; (80086b4 <HAL_RCC_ClockConfig+0x358>)
 8008640:	6a1b      	ldr	r3, [r3, #32]
 8008642:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008646:	429a      	cmp	r2, r3
 8008648:	d208      	bcs.n	800865c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800864a:	4b1a      	ldr	r3, [pc, #104]	; (80086b4 <HAL_RCC_ClockConfig+0x358>)
 800864c:	6a1b      	ldr	r3, [r3, #32]
 800864e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	69db      	ldr	r3, [r3, #28]
 8008656:	4917      	ldr	r1, [pc, #92]	; (80086b4 <HAL_RCC_ClockConfig+0x358>)
 8008658:	4313      	orrs	r3, r2
 800865a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800865c:	f000 f834 	bl	80086c8 <HAL_RCC_GetSysClockFreq>
 8008660:	4602      	mov	r2, r0
 8008662:	4b14      	ldr	r3, [pc, #80]	; (80086b4 <HAL_RCC_ClockConfig+0x358>)
 8008664:	699b      	ldr	r3, [r3, #24]
 8008666:	0a1b      	lsrs	r3, r3, #8
 8008668:	f003 030f 	and.w	r3, r3, #15
 800866c:	4912      	ldr	r1, [pc, #72]	; (80086b8 <HAL_RCC_ClockConfig+0x35c>)
 800866e:	5ccb      	ldrb	r3, [r1, r3]
 8008670:	f003 031f 	and.w	r3, r3, #31
 8008674:	fa22 f303 	lsr.w	r3, r2, r3
 8008678:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800867a:	4b0e      	ldr	r3, [pc, #56]	; (80086b4 <HAL_RCC_ClockConfig+0x358>)
 800867c:	699b      	ldr	r3, [r3, #24]
 800867e:	f003 030f 	and.w	r3, r3, #15
 8008682:	4a0d      	ldr	r2, [pc, #52]	; (80086b8 <HAL_RCC_ClockConfig+0x35c>)
 8008684:	5cd3      	ldrb	r3, [r2, r3]
 8008686:	f003 031f 	and.w	r3, r3, #31
 800868a:	693a      	ldr	r2, [r7, #16]
 800868c:	fa22 f303 	lsr.w	r3, r2, r3
 8008690:	4a0a      	ldr	r2, [pc, #40]	; (80086bc <HAL_RCC_ClockConfig+0x360>)
 8008692:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008694:	4a0a      	ldr	r2, [pc, #40]	; (80086c0 <HAL_RCC_ClockConfig+0x364>)
 8008696:	693b      	ldr	r3, [r7, #16]
 8008698:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800869a:	4b0a      	ldr	r3, [pc, #40]	; (80086c4 <HAL_RCC_ClockConfig+0x368>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4618      	mov	r0, r3
 80086a0:	f7f9 fdc2 	bl	8002228 <HAL_InitTick>
 80086a4:	4603      	mov	r3, r0
 80086a6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80086a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	3718      	adds	r7, #24
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}
 80086b2:	bf00      	nop
 80086b4:	58024400 	.word	0x58024400
 80086b8:	08013b90 	.word	0x08013b90
 80086bc:	24000004 	.word	0x24000004
 80086c0:	24000000 	.word	0x24000000
 80086c4:	24000008 	.word	0x24000008

080086c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b089      	sub	sp, #36	; 0x24
 80086cc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80086ce:	4bb3      	ldr	r3, [pc, #716]	; (800899c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086d0:	691b      	ldr	r3, [r3, #16]
 80086d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80086d6:	2b18      	cmp	r3, #24
 80086d8:	f200 8155 	bhi.w	8008986 <HAL_RCC_GetSysClockFreq+0x2be>
 80086dc:	a201      	add	r2, pc, #4	; (adr r2, 80086e4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80086de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086e2:	bf00      	nop
 80086e4:	08008749 	.word	0x08008749
 80086e8:	08008987 	.word	0x08008987
 80086ec:	08008987 	.word	0x08008987
 80086f0:	08008987 	.word	0x08008987
 80086f4:	08008987 	.word	0x08008987
 80086f8:	08008987 	.word	0x08008987
 80086fc:	08008987 	.word	0x08008987
 8008700:	08008987 	.word	0x08008987
 8008704:	0800876f 	.word	0x0800876f
 8008708:	08008987 	.word	0x08008987
 800870c:	08008987 	.word	0x08008987
 8008710:	08008987 	.word	0x08008987
 8008714:	08008987 	.word	0x08008987
 8008718:	08008987 	.word	0x08008987
 800871c:	08008987 	.word	0x08008987
 8008720:	08008987 	.word	0x08008987
 8008724:	08008775 	.word	0x08008775
 8008728:	08008987 	.word	0x08008987
 800872c:	08008987 	.word	0x08008987
 8008730:	08008987 	.word	0x08008987
 8008734:	08008987 	.word	0x08008987
 8008738:	08008987 	.word	0x08008987
 800873c:	08008987 	.word	0x08008987
 8008740:	08008987 	.word	0x08008987
 8008744:	0800877b 	.word	0x0800877b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008748:	4b94      	ldr	r3, [pc, #592]	; (800899c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f003 0320 	and.w	r3, r3, #32
 8008750:	2b00      	cmp	r3, #0
 8008752:	d009      	beq.n	8008768 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008754:	4b91      	ldr	r3, [pc, #580]	; (800899c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	08db      	lsrs	r3, r3, #3
 800875a:	f003 0303 	and.w	r3, r3, #3
 800875e:	4a90      	ldr	r2, [pc, #576]	; (80089a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008760:	fa22 f303 	lsr.w	r3, r2, r3
 8008764:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8008766:	e111      	b.n	800898c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008768:	4b8d      	ldr	r3, [pc, #564]	; (80089a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800876a:	61bb      	str	r3, [r7, #24]
    break;
 800876c:	e10e      	b.n	800898c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800876e:	4b8d      	ldr	r3, [pc, #564]	; (80089a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008770:	61bb      	str	r3, [r7, #24]
    break;
 8008772:	e10b      	b.n	800898c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008774:	4b8c      	ldr	r3, [pc, #560]	; (80089a8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008776:	61bb      	str	r3, [r7, #24]
    break;
 8008778:	e108      	b.n	800898c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800877a:	4b88      	ldr	r3, [pc, #544]	; (800899c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800877c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800877e:	f003 0303 	and.w	r3, r3, #3
 8008782:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008784:	4b85      	ldr	r3, [pc, #532]	; (800899c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008788:	091b      	lsrs	r3, r3, #4
 800878a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800878e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008790:	4b82      	ldr	r3, [pc, #520]	; (800899c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008794:	f003 0301 	and.w	r3, r3, #1
 8008798:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800879a:	4b80      	ldr	r3, [pc, #512]	; (800899c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800879c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800879e:	08db      	lsrs	r3, r3, #3
 80087a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80087a4:	68fa      	ldr	r2, [r7, #12]
 80087a6:	fb02 f303 	mul.w	r3, r2, r3
 80087aa:	ee07 3a90 	vmov	s15, r3
 80087ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087b2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	f000 80e1 	beq.w	8008980 <HAL_RCC_GetSysClockFreq+0x2b8>
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	2b02      	cmp	r3, #2
 80087c2:	f000 8083 	beq.w	80088cc <HAL_RCC_GetSysClockFreq+0x204>
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	2b02      	cmp	r3, #2
 80087ca:	f200 80a1 	bhi.w	8008910 <HAL_RCC_GetSysClockFreq+0x248>
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d003      	beq.n	80087dc <HAL_RCC_GetSysClockFreq+0x114>
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	2b01      	cmp	r3, #1
 80087d8:	d056      	beq.n	8008888 <HAL_RCC_GetSysClockFreq+0x1c0>
 80087da:	e099      	b.n	8008910 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80087dc:	4b6f      	ldr	r3, [pc, #444]	; (800899c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f003 0320 	and.w	r3, r3, #32
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d02d      	beq.n	8008844 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80087e8:	4b6c      	ldr	r3, [pc, #432]	; (800899c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	08db      	lsrs	r3, r3, #3
 80087ee:	f003 0303 	and.w	r3, r3, #3
 80087f2:	4a6b      	ldr	r2, [pc, #428]	; (80089a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80087f4:	fa22 f303 	lsr.w	r3, r2, r3
 80087f8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	ee07 3a90 	vmov	s15, r3
 8008800:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008804:	693b      	ldr	r3, [r7, #16]
 8008806:	ee07 3a90 	vmov	s15, r3
 800880a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800880e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008812:	4b62      	ldr	r3, [pc, #392]	; (800899c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008816:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800881a:	ee07 3a90 	vmov	s15, r3
 800881e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008822:	ed97 6a02 	vldr	s12, [r7, #8]
 8008826:	eddf 5a61 	vldr	s11, [pc, #388]	; 80089ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800882a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800882e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008832:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008836:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800883a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800883e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8008842:	e087      	b.n	8008954 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	ee07 3a90 	vmov	s15, r3
 800884a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800884e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80089b0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008852:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008856:	4b51      	ldr	r3, [pc, #324]	; (800899c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800885a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800885e:	ee07 3a90 	vmov	s15, r3
 8008862:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008866:	ed97 6a02 	vldr	s12, [r7, #8]
 800886a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80089ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800886e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008872:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008876:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800887a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800887e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008882:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008886:	e065      	b.n	8008954 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	ee07 3a90 	vmov	s15, r3
 800888e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008892:	eddf 6a48 	vldr	s13, [pc, #288]	; 80089b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008896:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800889a:	4b40      	ldr	r3, [pc, #256]	; (800899c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800889c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800889e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088a2:	ee07 3a90 	vmov	s15, r3
 80088a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80088ae:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80089ac <HAL_RCC_GetSysClockFreq+0x2e4>
 80088b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80088ca:	e043      	b.n	8008954 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	ee07 3a90 	vmov	s15, r3
 80088d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088d6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80089b8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80088da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088de:	4b2f      	ldr	r3, [pc, #188]	; (800899c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088e6:	ee07 3a90 	vmov	s15, r3
 80088ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80088f2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80089ac <HAL_RCC_GetSysClockFreq+0x2e4>
 80088f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008902:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008906:	ee67 7a27 	vmul.f32	s15, s14, s15
 800890a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800890e:	e021      	b.n	8008954 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	ee07 3a90 	vmov	s15, r3
 8008916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800891a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80089b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800891e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008922:	4b1e      	ldr	r3, [pc, #120]	; (800899c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008926:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800892a:	ee07 3a90 	vmov	s15, r3
 800892e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008932:	ed97 6a02 	vldr	s12, [r7, #8]
 8008936:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80089ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800893a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800893e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008942:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008946:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800894a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800894e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008952:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008954:	4b11      	ldr	r3, [pc, #68]	; (800899c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008958:	0a5b      	lsrs	r3, r3, #9
 800895a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800895e:	3301      	adds	r3, #1
 8008960:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	ee07 3a90 	vmov	s15, r3
 8008968:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800896c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008970:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008974:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008978:	ee17 3a90 	vmov	r3, s15
 800897c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800897e:	e005      	b.n	800898c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8008980:	2300      	movs	r3, #0
 8008982:	61bb      	str	r3, [r7, #24]
    break;
 8008984:	e002      	b.n	800898c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8008986:	4b07      	ldr	r3, [pc, #28]	; (80089a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008988:	61bb      	str	r3, [r7, #24]
    break;
 800898a:	bf00      	nop
  }

  return sysclockfreq;
 800898c:	69bb      	ldr	r3, [r7, #24]
}
 800898e:	4618      	mov	r0, r3
 8008990:	3724      	adds	r7, #36	; 0x24
 8008992:	46bd      	mov	sp, r7
 8008994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008998:	4770      	bx	lr
 800899a:	bf00      	nop
 800899c:	58024400 	.word	0x58024400
 80089a0:	03d09000 	.word	0x03d09000
 80089a4:	003d0900 	.word	0x003d0900
 80089a8:	00f42400 	.word	0x00f42400
 80089ac:	46000000 	.word	0x46000000
 80089b0:	4c742400 	.word	0x4c742400
 80089b4:	4a742400 	.word	0x4a742400
 80089b8:	4b742400 	.word	0x4b742400

080089bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b082      	sub	sp, #8
 80089c0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80089c2:	f7ff fe81 	bl	80086c8 <HAL_RCC_GetSysClockFreq>
 80089c6:	4602      	mov	r2, r0
 80089c8:	4b10      	ldr	r3, [pc, #64]	; (8008a0c <HAL_RCC_GetHCLKFreq+0x50>)
 80089ca:	699b      	ldr	r3, [r3, #24]
 80089cc:	0a1b      	lsrs	r3, r3, #8
 80089ce:	f003 030f 	and.w	r3, r3, #15
 80089d2:	490f      	ldr	r1, [pc, #60]	; (8008a10 <HAL_RCC_GetHCLKFreq+0x54>)
 80089d4:	5ccb      	ldrb	r3, [r1, r3]
 80089d6:	f003 031f 	and.w	r3, r3, #31
 80089da:	fa22 f303 	lsr.w	r3, r2, r3
 80089de:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80089e0:	4b0a      	ldr	r3, [pc, #40]	; (8008a0c <HAL_RCC_GetHCLKFreq+0x50>)
 80089e2:	699b      	ldr	r3, [r3, #24]
 80089e4:	f003 030f 	and.w	r3, r3, #15
 80089e8:	4a09      	ldr	r2, [pc, #36]	; (8008a10 <HAL_RCC_GetHCLKFreq+0x54>)
 80089ea:	5cd3      	ldrb	r3, [r2, r3]
 80089ec:	f003 031f 	and.w	r3, r3, #31
 80089f0:	687a      	ldr	r2, [r7, #4]
 80089f2:	fa22 f303 	lsr.w	r3, r2, r3
 80089f6:	4a07      	ldr	r2, [pc, #28]	; (8008a14 <HAL_RCC_GetHCLKFreq+0x58>)
 80089f8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80089fa:	4a07      	ldr	r2, [pc, #28]	; (8008a18 <HAL_RCC_GetHCLKFreq+0x5c>)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008a00:	4b04      	ldr	r3, [pc, #16]	; (8008a14 <HAL_RCC_GetHCLKFreq+0x58>)
 8008a02:	681b      	ldr	r3, [r3, #0]
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3708      	adds	r7, #8
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}
 8008a0c:	58024400 	.word	0x58024400
 8008a10:	08013b90 	.word	0x08013b90
 8008a14:	24000004 	.word	0x24000004
 8008a18:	24000000 	.word	0x24000000

08008a1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008a20:	f7ff ffcc 	bl	80089bc <HAL_RCC_GetHCLKFreq>
 8008a24:	4602      	mov	r2, r0
 8008a26:	4b06      	ldr	r3, [pc, #24]	; (8008a40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008a28:	69db      	ldr	r3, [r3, #28]
 8008a2a:	091b      	lsrs	r3, r3, #4
 8008a2c:	f003 0307 	and.w	r3, r3, #7
 8008a30:	4904      	ldr	r1, [pc, #16]	; (8008a44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008a32:	5ccb      	ldrb	r3, [r1, r3]
 8008a34:	f003 031f 	and.w	r3, r3, #31
 8008a38:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	bd80      	pop	{r7, pc}
 8008a40:	58024400 	.word	0x58024400
 8008a44:	08013b90 	.word	0x08013b90

08008a48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008a4c:	f7ff ffb6 	bl	80089bc <HAL_RCC_GetHCLKFreq>
 8008a50:	4602      	mov	r2, r0
 8008a52:	4b06      	ldr	r3, [pc, #24]	; (8008a6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008a54:	69db      	ldr	r3, [r3, #28]
 8008a56:	0a1b      	lsrs	r3, r3, #8
 8008a58:	f003 0307 	and.w	r3, r3, #7
 8008a5c:	4904      	ldr	r1, [pc, #16]	; (8008a70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008a5e:	5ccb      	ldrb	r3, [r1, r3]
 8008a60:	f003 031f 	and.w	r3, r3, #31
 8008a64:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	bd80      	pop	{r7, pc}
 8008a6c:	58024400 	.word	0x58024400
 8008a70:	08013b90 	.word	0x08013b90

08008a74 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008a74:	b480      	push	{r7}
 8008a76:	b083      	sub	sp, #12
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
 8008a7c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	223f      	movs	r2, #63	; 0x3f
 8008a82:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008a84:	4b1a      	ldr	r3, [pc, #104]	; (8008af0 <HAL_RCC_GetClockConfig+0x7c>)
 8008a86:	691b      	ldr	r3, [r3, #16]
 8008a88:	f003 0207 	and.w	r2, r3, #7
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8008a90:	4b17      	ldr	r3, [pc, #92]	; (8008af0 <HAL_RCC_GetClockConfig+0x7c>)
 8008a92:	699b      	ldr	r3, [r3, #24]
 8008a94:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8008a9c:	4b14      	ldr	r3, [pc, #80]	; (8008af0 <HAL_RCC_GetClockConfig+0x7c>)
 8008a9e:	699b      	ldr	r3, [r3, #24]
 8008aa0:	f003 020f 	and.w	r2, r3, #15
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8008aa8:	4b11      	ldr	r3, [pc, #68]	; (8008af0 <HAL_RCC_GetClockConfig+0x7c>)
 8008aaa:	699b      	ldr	r3, [r3, #24]
 8008aac:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8008ab4:	4b0e      	ldr	r3, [pc, #56]	; (8008af0 <HAL_RCC_GetClockConfig+0x7c>)
 8008ab6:	69db      	ldr	r3, [r3, #28]
 8008ab8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8008ac0:	4b0b      	ldr	r3, [pc, #44]	; (8008af0 <HAL_RCC_GetClockConfig+0x7c>)
 8008ac2:	69db      	ldr	r3, [r3, #28]
 8008ac4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8008acc:	4b08      	ldr	r3, [pc, #32]	; (8008af0 <HAL_RCC_GetClockConfig+0x7c>)
 8008ace:	6a1b      	ldr	r3, [r3, #32]
 8008ad0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008ad8:	4b06      	ldr	r3, [pc, #24]	; (8008af4 <HAL_RCC_GetClockConfig+0x80>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f003 020f 	and.w	r2, r3, #15
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	601a      	str	r2, [r3, #0]
}
 8008ae4:	bf00      	nop
 8008ae6:	370c      	adds	r7, #12
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aee:	4770      	bx	lr
 8008af0:	58024400 	.word	0x58024400
 8008af4:	52002000 	.word	0x52002000

08008af8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b086      	sub	sp, #24
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008b00:	2300      	movs	r3, #0
 8008b02:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008b04:	2300      	movs	r3, #0
 8008b06:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d03f      	beq.n	8008b94 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b18:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008b1c:	d02a      	beq.n	8008b74 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008b1e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008b22:	d824      	bhi.n	8008b6e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008b24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b28:	d018      	beq.n	8008b5c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008b2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b2e:	d81e      	bhi.n	8008b6e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d003      	beq.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008b34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b38:	d007      	beq.n	8008b4a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008b3a:	e018      	b.n	8008b6e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b3c:	4ba3      	ldr	r3, [pc, #652]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b40:	4aa2      	ldr	r2, [pc, #648]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008b42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b46:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008b48:	e015      	b.n	8008b76 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	3304      	adds	r3, #4
 8008b4e:	2102      	movs	r1, #2
 8008b50:	4618      	mov	r0, r3
 8008b52:	f001 f9d5 	bl	8009f00 <RCCEx_PLL2_Config>
 8008b56:	4603      	mov	r3, r0
 8008b58:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008b5a:	e00c      	b.n	8008b76 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	3324      	adds	r3, #36	; 0x24
 8008b60:	2102      	movs	r1, #2
 8008b62:	4618      	mov	r0, r3
 8008b64:	f001 fa7e 	bl	800a064 <RCCEx_PLL3_Config>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008b6c:	e003      	b.n	8008b76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	75fb      	strb	r3, [r7, #23]
      break;
 8008b72:	e000      	b.n	8008b76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008b74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b76:	7dfb      	ldrb	r3, [r7, #23]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d109      	bne.n	8008b90 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008b7c:	4b93      	ldr	r3, [pc, #588]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008b7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b80:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b88:	4990      	ldr	r1, [pc, #576]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	650b      	str	r3, [r1, #80]	; 0x50
 8008b8e:	e001      	b.n	8008b94 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b90:	7dfb      	ldrb	r3, [r7, #23]
 8008b92:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d03d      	beq.n	8008c1c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ba4:	2b04      	cmp	r3, #4
 8008ba6:	d826      	bhi.n	8008bf6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008ba8:	a201      	add	r2, pc, #4	; (adr r2, 8008bb0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8008baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bae:	bf00      	nop
 8008bb0:	08008bc5 	.word	0x08008bc5
 8008bb4:	08008bd3 	.word	0x08008bd3
 8008bb8:	08008be5 	.word	0x08008be5
 8008bbc:	08008bfd 	.word	0x08008bfd
 8008bc0:	08008bfd 	.word	0x08008bfd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008bc4:	4b81      	ldr	r3, [pc, #516]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bc8:	4a80      	ldr	r2, [pc, #512]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008bca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008bce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008bd0:	e015      	b.n	8008bfe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	3304      	adds	r3, #4
 8008bd6:	2100      	movs	r1, #0
 8008bd8:	4618      	mov	r0, r3
 8008bda:	f001 f991 	bl	8009f00 <RCCEx_PLL2_Config>
 8008bde:	4603      	mov	r3, r0
 8008be0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008be2:	e00c      	b.n	8008bfe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	3324      	adds	r3, #36	; 0x24
 8008be8:	2100      	movs	r1, #0
 8008bea:	4618      	mov	r0, r3
 8008bec:	f001 fa3a 	bl	800a064 <RCCEx_PLL3_Config>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008bf4:	e003      	b.n	8008bfe <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	75fb      	strb	r3, [r7, #23]
      break;
 8008bfa:	e000      	b.n	8008bfe <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8008bfc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008bfe:	7dfb      	ldrb	r3, [r7, #23]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d109      	bne.n	8008c18 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008c04:	4b71      	ldr	r3, [pc, #452]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008c06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c08:	f023 0207 	bic.w	r2, r3, #7
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c10:	496e      	ldr	r1, [pc, #440]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008c12:	4313      	orrs	r3, r2
 8008c14:	650b      	str	r3, [r1, #80]	; 0x50
 8008c16:	e001      	b.n	8008c1c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c18:	7dfb      	ldrb	r3, [r7, #23]
 8008c1a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d042      	beq.n	8008cae <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c30:	d02b      	beq.n	8008c8a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8008c32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c36:	d825      	bhi.n	8008c84 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008c38:	2bc0      	cmp	r3, #192	; 0xc0
 8008c3a:	d028      	beq.n	8008c8e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008c3c:	2bc0      	cmp	r3, #192	; 0xc0
 8008c3e:	d821      	bhi.n	8008c84 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008c40:	2b80      	cmp	r3, #128	; 0x80
 8008c42:	d016      	beq.n	8008c72 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8008c44:	2b80      	cmp	r3, #128	; 0x80
 8008c46:	d81d      	bhi.n	8008c84 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d002      	beq.n	8008c52 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8008c4c:	2b40      	cmp	r3, #64	; 0x40
 8008c4e:	d007      	beq.n	8008c60 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8008c50:	e018      	b.n	8008c84 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c52:	4b5e      	ldr	r3, [pc, #376]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c56:	4a5d      	ldr	r2, [pc, #372]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008c58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c5c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008c5e:	e017      	b.n	8008c90 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	3304      	adds	r3, #4
 8008c64:	2100      	movs	r1, #0
 8008c66:	4618      	mov	r0, r3
 8008c68:	f001 f94a 	bl	8009f00 <RCCEx_PLL2_Config>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008c70:	e00e      	b.n	8008c90 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	3324      	adds	r3, #36	; 0x24
 8008c76:	2100      	movs	r1, #0
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f001 f9f3 	bl	800a064 <RCCEx_PLL3_Config>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008c82:	e005      	b.n	8008c90 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008c84:	2301      	movs	r3, #1
 8008c86:	75fb      	strb	r3, [r7, #23]
      break;
 8008c88:	e002      	b.n	8008c90 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8008c8a:	bf00      	nop
 8008c8c:	e000      	b.n	8008c90 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8008c8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c90:	7dfb      	ldrb	r3, [r7, #23]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d109      	bne.n	8008caa <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008c96:	4b4d      	ldr	r3, [pc, #308]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008c98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c9a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ca2:	494a      	ldr	r1, [pc, #296]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008ca4:	4313      	orrs	r3, r2
 8008ca6:	650b      	str	r3, [r1, #80]	; 0x50
 8008ca8:	e001      	b.n	8008cae <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008caa:	7dfb      	ldrb	r3, [r7, #23]
 8008cac:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d049      	beq.n	8008d4e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008cc0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008cc4:	d030      	beq.n	8008d28 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8008cc6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008cca:	d82a      	bhi.n	8008d22 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008ccc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008cd0:	d02c      	beq.n	8008d2c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8008cd2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008cd6:	d824      	bhi.n	8008d22 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008cd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008cdc:	d018      	beq.n	8008d10 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8008cde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008ce2:	d81e      	bhi.n	8008d22 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d003      	beq.n	8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8008ce8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008cec:	d007      	beq.n	8008cfe <HAL_RCCEx_PeriphCLKConfig+0x206>
 8008cee:	e018      	b.n	8008d22 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008cf0:	4b36      	ldr	r3, [pc, #216]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cf4:	4a35      	ldr	r2, [pc, #212]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008cf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008cfa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008cfc:	e017      	b.n	8008d2e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	3304      	adds	r3, #4
 8008d02:	2100      	movs	r1, #0
 8008d04:	4618      	mov	r0, r3
 8008d06:	f001 f8fb 	bl	8009f00 <RCCEx_PLL2_Config>
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008d0e:	e00e      	b.n	8008d2e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	3324      	adds	r3, #36	; 0x24
 8008d14:	2100      	movs	r1, #0
 8008d16:	4618      	mov	r0, r3
 8008d18:	f001 f9a4 	bl	800a064 <RCCEx_PLL3_Config>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008d20:	e005      	b.n	8008d2e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008d22:	2301      	movs	r3, #1
 8008d24:	75fb      	strb	r3, [r7, #23]
      break;
 8008d26:	e002      	b.n	8008d2e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008d28:	bf00      	nop
 8008d2a:	e000      	b.n	8008d2e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008d2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d2e:	7dfb      	ldrb	r3, [r7, #23]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d10a      	bne.n	8008d4a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008d34:	4b25      	ldr	r3, [pc, #148]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d38:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008d42:	4922      	ldr	r1, [pc, #136]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008d44:	4313      	orrs	r3, r2
 8008d46:	658b      	str	r3, [r1, #88]	; 0x58
 8008d48:	e001      	b.n	8008d4e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d4a:	7dfb      	ldrb	r3, [r7, #23]
 8008d4c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d04b      	beq.n	8008df2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008d60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008d64:	d030      	beq.n	8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8008d66:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008d6a:	d82a      	bhi.n	8008dc2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008d6c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008d70:	d02e      	beq.n	8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8008d72:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008d76:	d824      	bhi.n	8008dc2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008d78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d7c:	d018      	beq.n	8008db0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8008d7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d82:	d81e      	bhi.n	8008dc2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d003      	beq.n	8008d90 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008d88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008d8c:	d007      	beq.n	8008d9e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8008d8e:	e018      	b.n	8008dc2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d90:	4b0e      	ldr	r3, [pc, #56]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d94:	4a0d      	ldr	r2, [pc, #52]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008d96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d9a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008d9c:	e019      	b.n	8008dd2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	3304      	adds	r3, #4
 8008da2:	2100      	movs	r1, #0
 8008da4:	4618      	mov	r0, r3
 8008da6:	f001 f8ab 	bl	8009f00 <RCCEx_PLL2_Config>
 8008daa:	4603      	mov	r3, r0
 8008dac:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008dae:	e010      	b.n	8008dd2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	3324      	adds	r3, #36	; 0x24
 8008db4:	2100      	movs	r1, #0
 8008db6:	4618      	mov	r0, r3
 8008db8:	f001 f954 	bl	800a064 <RCCEx_PLL3_Config>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008dc0:	e007      	b.n	8008dd2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	75fb      	strb	r3, [r7, #23]
      break;
 8008dc6:	e004      	b.n	8008dd2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8008dc8:	bf00      	nop
 8008dca:	e002      	b.n	8008dd2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8008dcc:	58024400 	.word	0x58024400
      break;
 8008dd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008dd2:	7dfb      	ldrb	r3, [r7, #23]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d10a      	bne.n	8008dee <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008dd8:	4b99      	ldr	r3, [pc, #612]	; (8009040 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ddc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008de6:	4996      	ldr	r1, [pc, #600]	; (8009040 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008de8:	4313      	orrs	r3, r2
 8008dea:	658b      	str	r3, [r1, #88]	; 0x58
 8008dec:	e001      	b.n	8008df2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dee:	7dfb      	ldrb	r3, [r7, #23]
 8008df0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d032      	beq.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e02:	2b30      	cmp	r3, #48	; 0x30
 8008e04:	d01c      	beq.n	8008e40 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8008e06:	2b30      	cmp	r3, #48	; 0x30
 8008e08:	d817      	bhi.n	8008e3a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8008e0a:	2b20      	cmp	r3, #32
 8008e0c:	d00c      	beq.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8008e0e:	2b20      	cmp	r3, #32
 8008e10:	d813      	bhi.n	8008e3a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d016      	beq.n	8008e44 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8008e16:	2b10      	cmp	r3, #16
 8008e18:	d10f      	bne.n	8008e3a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e1a:	4b89      	ldr	r3, [pc, #548]	; (8009040 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e1e:	4a88      	ldr	r2, [pc, #544]	; (8009040 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008e20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e24:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008e26:	e00e      	b.n	8008e46 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	3304      	adds	r3, #4
 8008e2c:	2102      	movs	r1, #2
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f001 f866 	bl	8009f00 <RCCEx_PLL2_Config>
 8008e34:	4603      	mov	r3, r0
 8008e36:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008e38:	e005      	b.n	8008e46 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	75fb      	strb	r3, [r7, #23]
      break;
 8008e3e:	e002      	b.n	8008e46 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8008e40:	bf00      	nop
 8008e42:	e000      	b.n	8008e46 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8008e44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e46:	7dfb      	ldrb	r3, [r7, #23]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d109      	bne.n	8008e60 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008e4c:	4b7c      	ldr	r3, [pc, #496]	; (8009040 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008e4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e50:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e58:	4979      	ldr	r1, [pc, #484]	; (8009040 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008e5a:	4313      	orrs	r3, r2
 8008e5c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008e5e:	e001      	b.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e60:	7dfb      	ldrb	r3, [r7, #23]
 8008e62:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d047      	beq.n	8008f00 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008e78:	d030      	beq.n	8008edc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8008e7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008e7e:	d82a      	bhi.n	8008ed6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008e80:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008e84:	d02c      	beq.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8008e86:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008e8a:	d824      	bhi.n	8008ed6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008e8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e90:	d018      	beq.n	8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8008e92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e96:	d81e      	bhi.n	8008ed6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d003      	beq.n	8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8008e9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ea0:	d007      	beq.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8008ea2:	e018      	b.n	8008ed6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ea4:	4b66      	ldr	r3, [pc, #408]	; (8009040 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ea8:	4a65      	ldr	r2, [pc, #404]	; (8009040 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008eaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008eae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008eb0:	e017      	b.n	8008ee2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	3304      	adds	r3, #4
 8008eb6:	2100      	movs	r1, #0
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f001 f821 	bl	8009f00 <RCCEx_PLL2_Config>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008ec2:	e00e      	b.n	8008ee2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	3324      	adds	r3, #36	; 0x24
 8008ec8:	2100      	movs	r1, #0
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f001 f8ca 	bl	800a064 <RCCEx_PLL3_Config>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008ed4:	e005      	b.n	8008ee2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	75fb      	strb	r3, [r7, #23]
      break;
 8008eda:	e002      	b.n	8008ee2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8008edc:	bf00      	nop
 8008ede:	e000      	b.n	8008ee2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8008ee0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ee2:	7dfb      	ldrb	r3, [r7, #23]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d109      	bne.n	8008efc <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008ee8:	4b55      	ldr	r3, [pc, #340]	; (8009040 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008eea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008eec:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ef4:	4952      	ldr	r1, [pc, #328]	; (8009040 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008ef6:	4313      	orrs	r3, r2
 8008ef8:	650b      	str	r3, [r1, #80]	; 0x50
 8008efa:	e001      	b.n	8008f00 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008efc:	7dfb      	ldrb	r3, [r7, #23]
 8008efe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d049      	beq.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008f14:	d02e      	beq.n	8008f74 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8008f16:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008f1a:	d828      	bhi.n	8008f6e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008f1c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008f20:	d02a      	beq.n	8008f78 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8008f22:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008f26:	d822      	bhi.n	8008f6e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008f28:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008f2c:	d026      	beq.n	8008f7c <HAL_RCCEx_PeriphCLKConfig+0x484>
 8008f2e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008f32:	d81c      	bhi.n	8008f6e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008f34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f38:	d010      	beq.n	8008f5c <HAL_RCCEx_PeriphCLKConfig+0x464>
 8008f3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f3e:	d816      	bhi.n	8008f6e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d01d      	beq.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8008f44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f48:	d111      	bne.n	8008f6e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	3304      	adds	r3, #4
 8008f4e:	2101      	movs	r1, #1
 8008f50:	4618      	mov	r0, r3
 8008f52:	f000 ffd5 	bl	8009f00 <RCCEx_PLL2_Config>
 8008f56:	4603      	mov	r3, r0
 8008f58:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008f5a:	e012      	b.n	8008f82 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	3324      	adds	r3, #36	; 0x24
 8008f60:	2101      	movs	r1, #1
 8008f62:	4618      	mov	r0, r3
 8008f64:	f001 f87e 	bl	800a064 <RCCEx_PLL3_Config>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008f6c:	e009      	b.n	8008f82 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f6e:	2301      	movs	r3, #1
 8008f70:	75fb      	strb	r3, [r7, #23]
      break;
 8008f72:	e006      	b.n	8008f82 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008f74:	bf00      	nop
 8008f76:	e004      	b.n	8008f82 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008f78:	bf00      	nop
 8008f7a:	e002      	b.n	8008f82 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008f7c:	bf00      	nop
 8008f7e:	e000      	b.n	8008f82 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008f80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f82:	7dfb      	ldrb	r3, [r7, #23]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d109      	bne.n	8008f9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008f88:	4b2d      	ldr	r3, [pc, #180]	; (8009040 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008f8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f8c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f94:	492a      	ldr	r1, [pc, #168]	; (8009040 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008f96:	4313      	orrs	r3, r2
 8008f98:	650b      	str	r3, [r1, #80]	; 0x50
 8008f9a:	e001      	b.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f9c:	7dfb      	ldrb	r3, [r7, #23]
 8008f9e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d04d      	beq.n	8009048 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008fb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008fb6:	d02e      	beq.n	8009016 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8008fb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008fbc:	d828      	bhi.n	8009010 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fc2:	d02a      	beq.n	800901a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8008fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fc8:	d822      	bhi.n	8009010 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008fca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008fce:	d026      	beq.n	800901e <HAL_RCCEx_PeriphCLKConfig+0x526>
 8008fd0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008fd4:	d81c      	bhi.n	8009010 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008fd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fda:	d010      	beq.n	8008ffe <HAL_RCCEx_PeriphCLKConfig+0x506>
 8008fdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fe0:	d816      	bhi.n	8009010 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d01d      	beq.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8008fe6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008fea:	d111      	bne.n	8009010 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	3304      	adds	r3, #4
 8008ff0:	2101      	movs	r1, #1
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f000 ff84 	bl	8009f00 <RCCEx_PLL2_Config>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008ffc:	e012      	b.n	8009024 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	3324      	adds	r3, #36	; 0x24
 8009002:	2101      	movs	r1, #1
 8009004:	4618      	mov	r0, r3
 8009006:	f001 f82d 	bl	800a064 <RCCEx_PLL3_Config>
 800900a:	4603      	mov	r3, r0
 800900c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800900e:	e009      	b.n	8009024 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8009010:	2301      	movs	r3, #1
 8009012:	75fb      	strb	r3, [r7, #23]
      break;
 8009014:	e006      	b.n	8009024 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009016:	bf00      	nop
 8009018:	e004      	b.n	8009024 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800901a:	bf00      	nop
 800901c:	e002      	b.n	8009024 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800901e:	bf00      	nop
 8009020:	e000      	b.n	8009024 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009022:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009024:	7dfb      	ldrb	r3, [r7, #23]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d10c      	bne.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800902a:	4b05      	ldr	r3, [pc, #20]	; (8009040 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800902c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800902e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009038:	4901      	ldr	r1, [pc, #4]	; (8009040 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800903a:	4313      	orrs	r3, r2
 800903c:	658b      	str	r3, [r1, #88]	; 0x58
 800903e:	e003      	b.n	8009048 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8009040:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009044:	7dfb      	ldrb	r3, [r7, #23]
 8009046:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009050:	2b00      	cmp	r3, #0
 8009052:	d02f      	beq.n	80090b4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009058:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800905c:	d00e      	beq.n	800907c <HAL_RCCEx_PeriphCLKConfig+0x584>
 800905e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009062:	d814      	bhi.n	800908e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8009064:	2b00      	cmp	r3, #0
 8009066:	d015      	beq.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8009068:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800906c:	d10f      	bne.n	800908e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800906e:	4baf      	ldr	r3, [pc, #700]	; (800932c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009072:	4aae      	ldr	r2, [pc, #696]	; (800932c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009074:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009078:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800907a:	e00c      	b.n	8009096 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	3304      	adds	r3, #4
 8009080:	2101      	movs	r1, #1
 8009082:	4618      	mov	r0, r3
 8009084:	f000 ff3c 	bl	8009f00 <RCCEx_PLL2_Config>
 8009088:	4603      	mov	r3, r0
 800908a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800908c:	e003      	b.n	8009096 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800908e:	2301      	movs	r3, #1
 8009090:	75fb      	strb	r3, [r7, #23]
      break;
 8009092:	e000      	b.n	8009096 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8009094:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009096:	7dfb      	ldrb	r3, [r7, #23]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d109      	bne.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800909c:	4ba3      	ldr	r3, [pc, #652]	; (800932c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800909e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090a0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090a8:	49a0      	ldr	r1, [pc, #640]	; (800932c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80090aa:	4313      	orrs	r3, r2
 80090ac:	650b      	str	r3, [r1, #80]	; 0x50
 80090ae:	e001      	b.n	80090b4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090b0:	7dfb      	ldrb	r3, [r7, #23]
 80090b2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d032      	beq.n	8009126 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090c4:	2b03      	cmp	r3, #3
 80090c6:	d81b      	bhi.n	8009100 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80090c8:	a201      	add	r2, pc, #4	; (adr r2, 80090d0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80090ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090ce:	bf00      	nop
 80090d0:	08009107 	.word	0x08009107
 80090d4:	080090e1 	.word	0x080090e1
 80090d8:	080090ef 	.word	0x080090ef
 80090dc:	08009107 	.word	0x08009107
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090e0:	4b92      	ldr	r3, [pc, #584]	; (800932c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80090e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090e4:	4a91      	ldr	r2, [pc, #580]	; (800932c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80090e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80090ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80090ec:	e00c      	b.n	8009108 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	3304      	adds	r3, #4
 80090f2:	2102      	movs	r1, #2
 80090f4:	4618      	mov	r0, r3
 80090f6:	f000 ff03 	bl	8009f00 <RCCEx_PLL2_Config>
 80090fa:	4603      	mov	r3, r0
 80090fc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80090fe:	e003      	b.n	8009108 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009100:	2301      	movs	r3, #1
 8009102:	75fb      	strb	r3, [r7, #23]
      break;
 8009104:	e000      	b.n	8009108 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8009106:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009108:	7dfb      	ldrb	r3, [r7, #23]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d109      	bne.n	8009122 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800910e:	4b87      	ldr	r3, [pc, #540]	; (800932c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009112:	f023 0203 	bic.w	r2, r3, #3
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800911a:	4984      	ldr	r1, [pc, #528]	; (800932c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800911c:	4313      	orrs	r3, r2
 800911e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009120:	e001      	b.n	8009126 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009122:	7dfb      	ldrb	r3, [r7, #23]
 8009124:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800912e:	2b00      	cmp	r3, #0
 8009130:	f000 8086 	beq.w	8009240 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009134:	4b7e      	ldr	r3, [pc, #504]	; (8009330 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	4a7d      	ldr	r2, [pc, #500]	; (8009330 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800913a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800913e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009140:	f7f9 f8bc 	bl	80022bc <HAL_GetTick>
 8009144:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009146:	e009      	b.n	800915c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009148:	f7f9 f8b8 	bl	80022bc <HAL_GetTick>
 800914c:	4602      	mov	r2, r0
 800914e:	693b      	ldr	r3, [r7, #16]
 8009150:	1ad3      	subs	r3, r2, r3
 8009152:	2b64      	cmp	r3, #100	; 0x64
 8009154:	d902      	bls.n	800915c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8009156:	2303      	movs	r3, #3
 8009158:	75fb      	strb	r3, [r7, #23]
        break;
 800915a:	e005      	b.n	8009168 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800915c:	4b74      	ldr	r3, [pc, #464]	; (8009330 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009164:	2b00      	cmp	r3, #0
 8009166:	d0ef      	beq.n	8009148 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8009168:	7dfb      	ldrb	r3, [r7, #23]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d166      	bne.n	800923c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800916e:	4b6f      	ldr	r3, [pc, #444]	; (800932c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009170:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009178:	4053      	eors	r3, r2
 800917a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800917e:	2b00      	cmp	r3, #0
 8009180:	d013      	beq.n	80091aa <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009182:	4b6a      	ldr	r3, [pc, #424]	; (800932c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009186:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800918a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800918c:	4b67      	ldr	r3, [pc, #412]	; (800932c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800918e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009190:	4a66      	ldr	r2, [pc, #408]	; (800932c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009192:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009196:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009198:	4b64      	ldr	r3, [pc, #400]	; (800932c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800919a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800919c:	4a63      	ldr	r2, [pc, #396]	; (800932c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800919e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80091a2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80091a4:	4a61      	ldr	r2, [pc, #388]	; (800932c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80091b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091b4:	d115      	bne.n	80091e2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091b6:	f7f9 f881 	bl	80022bc <HAL_GetTick>
 80091ba:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80091bc:	e00b      	b.n	80091d6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80091be:	f7f9 f87d 	bl	80022bc <HAL_GetTick>
 80091c2:	4602      	mov	r2, r0
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	1ad3      	subs	r3, r2, r3
 80091c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d902      	bls.n	80091d6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80091d0:	2303      	movs	r3, #3
 80091d2:	75fb      	strb	r3, [r7, #23]
            break;
 80091d4:	e005      	b.n	80091e2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80091d6:	4b55      	ldr	r3, [pc, #340]	; (800932c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80091d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091da:	f003 0302 	and.w	r3, r3, #2
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d0ed      	beq.n	80091be <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80091e2:	7dfb      	ldrb	r3, [r7, #23]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d126      	bne.n	8009236 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80091ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80091f6:	d10d      	bne.n	8009214 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80091f8:	4b4c      	ldr	r3, [pc, #304]	; (800932c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80091fa:	691b      	ldr	r3, [r3, #16]
 80091fc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009206:	0919      	lsrs	r1, r3, #4
 8009208:	4b4a      	ldr	r3, [pc, #296]	; (8009334 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800920a:	400b      	ands	r3, r1
 800920c:	4947      	ldr	r1, [pc, #284]	; (800932c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800920e:	4313      	orrs	r3, r2
 8009210:	610b      	str	r3, [r1, #16]
 8009212:	e005      	b.n	8009220 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8009214:	4b45      	ldr	r3, [pc, #276]	; (800932c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009216:	691b      	ldr	r3, [r3, #16]
 8009218:	4a44      	ldr	r2, [pc, #272]	; (800932c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800921a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800921e:	6113      	str	r3, [r2, #16]
 8009220:	4b42      	ldr	r3, [pc, #264]	; (800932c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009222:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800922a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800922e:	493f      	ldr	r1, [pc, #252]	; (800932c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009230:	4313      	orrs	r3, r2
 8009232:	670b      	str	r3, [r1, #112]	; 0x70
 8009234:	e004      	b.n	8009240 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009236:	7dfb      	ldrb	r3, [r7, #23]
 8009238:	75bb      	strb	r3, [r7, #22]
 800923a:	e001      	b.n	8009240 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800923c:	7dfb      	ldrb	r3, [r7, #23]
 800923e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f003 0301 	and.w	r3, r3, #1
 8009248:	2b00      	cmp	r3, #0
 800924a:	f000 8085 	beq.w	8009358 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009252:	2b28      	cmp	r3, #40	; 0x28
 8009254:	d866      	bhi.n	8009324 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8009256:	a201      	add	r2, pc, #4	; (adr r2, 800925c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8009258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800925c:	08009339 	.word	0x08009339
 8009260:	08009325 	.word	0x08009325
 8009264:	08009325 	.word	0x08009325
 8009268:	08009325 	.word	0x08009325
 800926c:	08009325 	.word	0x08009325
 8009270:	08009325 	.word	0x08009325
 8009274:	08009325 	.word	0x08009325
 8009278:	08009325 	.word	0x08009325
 800927c:	08009301 	.word	0x08009301
 8009280:	08009325 	.word	0x08009325
 8009284:	08009325 	.word	0x08009325
 8009288:	08009325 	.word	0x08009325
 800928c:	08009325 	.word	0x08009325
 8009290:	08009325 	.word	0x08009325
 8009294:	08009325 	.word	0x08009325
 8009298:	08009325 	.word	0x08009325
 800929c:	08009313 	.word	0x08009313
 80092a0:	08009325 	.word	0x08009325
 80092a4:	08009325 	.word	0x08009325
 80092a8:	08009325 	.word	0x08009325
 80092ac:	08009325 	.word	0x08009325
 80092b0:	08009325 	.word	0x08009325
 80092b4:	08009325 	.word	0x08009325
 80092b8:	08009325 	.word	0x08009325
 80092bc:	08009339 	.word	0x08009339
 80092c0:	08009325 	.word	0x08009325
 80092c4:	08009325 	.word	0x08009325
 80092c8:	08009325 	.word	0x08009325
 80092cc:	08009325 	.word	0x08009325
 80092d0:	08009325 	.word	0x08009325
 80092d4:	08009325 	.word	0x08009325
 80092d8:	08009325 	.word	0x08009325
 80092dc:	08009339 	.word	0x08009339
 80092e0:	08009325 	.word	0x08009325
 80092e4:	08009325 	.word	0x08009325
 80092e8:	08009325 	.word	0x08009325
 80092ec:	08009325 	.word	0x08009325
 80092f0:	08009325 	.word	0x08009325
 80092f4:	08009325 	.word	0x08009325
 80092f8:	08009325 	.word	0x08009325
 80092fc:	08009339 	.word	0x08009339
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	3304      	adds	r3, #4
 8009304:	2101      	movs	r1, #1
 8009306:	4618      	mov	r0, r3
 8009308:	f000 fdfa 	bl	8009f00 <RCCEx_PLL2_Config>
 800930c:	4603      	mov	r3, r0
 800930e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009310:	e013      	b.n	800933a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	3324      	adds	r3, #36	; 0x24
 8009316:	2101      	movs	r1, #1
 8009318:	4618      	mov	r0, r3
 800931a:	f000 fea3 	bl	800a064 <RCCEx_PLL3_Config>
 800931e:	4603      	mov	r3, r0
 8009320:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009322:	e00a      	b.n	800933a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009324:	2301      	movs	r3, #1
 8009326:	75fb      	strb	r3, [r7, #23]
      break;
 8009328:	e007      	b.n	800933a <HAL_RCCEx_PeriphCLKConfig+0x842>
 800932a:	bf00      	nop
 800932c:	58024400 	.word	0x58024400
 8009330:	58024800 	.word	0x58024800
 8009334:	00ffffcf 	.word	0x00ffffcf
      break;
 8009338:	bf00      	nop
    }

    if(ret == HAL_OK)
 800933a:	7dfb      	ldrb	r3, [r7, #23]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d109      	bne.n	8009354 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009340:	4b96      	ldr	r3, [pc, #600]	; (800959c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009344:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800934c:	4993      	ldr	r1, [pc, #588]	; (800959c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800934e:	4313      	orrs	r3, r2
 8009350:	654b      	str	r3, [r1, #84]	; 0x54
 8009352:	e001      	b.n	8009358 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009354:	7dfb      	ldrb	r3, [r7, #23]
 8009356:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f003 0302 	and.w	r3, r3, #2
 8009360:	2b00      	cmp	r3, #0
 8009362:	d038      	beq.n	80093d6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009368:	2b05      	cmp	r3, #5
 800936a:	d821      	bhi.n	80093b0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800936c:	a201      	add	r2, pc, #4	; (adr r2, 8009374 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800936e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009372:	bf00      	nop
 8009374:	080093b7 	.word	0x080093b7
 8009378:	0800938d 	.word	0x0800938d
 800937c:	0800939f 	.word	0x0800939f
 8009380:	080093b7 	.word	0x080093b7
 8009384:	080093b7 	.word	0x080093b7
 8009388:	080093b7 	.word	0x080093b7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	3304      	adds	r3, #4
 8009390:	2101      	movs	r1, #1
 8009392:	4618      	mov	r0, r3
 8009394:	f000 fdb4 	bl	8009f00 <RCCEx_PLL2_Config>
 8009398:	4603      	mov	r3, r0
 800939a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800939c:	e00c      	b.n	80093b8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	3324      	adds	r3, #36	; 0x24
 80093a2:	2101      	movs	r1, #1
 80093a4:	4618      	mov	r0, r3
 80093a6:	f000 fe5d 	bl	800a064 <RCCEx_PLL3_Config>
 80093aa:	4603      	mov	r3, r0
 80093ac:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80093ae:	e003      	b.n	80093b8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80093b0:	2301      	movs	r3, #1
 80093b2:	75fb      	strb	r3, [r7, #23]
      break;
 80093b4:	e000      	b.n	80093b8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80093b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80093b8:	7dfb      	ldrb	r3, [r7, #23]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d109      	bne.n	80093d2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80093be:	4b77      	ldr	r3, [pc, #476]	; (800959c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80093c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093c2:	f023 0207 	bic.w	r2, r3, #7
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093ca:	4974      	ldr	r1, [pc, #464]	; (800959c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80093cc:	4313      	orrs	r3, r2
 80093ce:	654b      	str	r3, [r1, #84]	; 0x54
 80093d0:	e001      	b.n	80093d6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093d2:	7dfb      	ldrb	r3, [r7, #23]
 80093d4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f003 0304 	and.w	r3, r3, #4
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d03a      	beq.n	8009458 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093e8:	2b05      	cmp	r3, #5
 80093ea:	d821      	bhi.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0x938>
 80093ec:	a201      	add	r2, pc, #4	; (adr r2, 80093f4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80093ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093f2:	bf00      	nop
 80093f4:	08009437 	.word	0x08009437
 80093f8:	0800940d 	.word	0x0800940d
 80093fc:	0800941f 	.word	0x0800941f
 8009400:	08009437 	.word	0x08009437
 8009404:	08009437 	.word	0x08009437
 8009408:	08009437 	.word	0x08009437
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	3304      	adds	r3, #4
 8009410:	2101      	movs	r1, #1
 8009412:	4618      	mov	r0, r3
 8009414:	f000 fd74 	bl	8009f00 <RCCEx_PLL2_Config>
 8009418:	4603      	mov	r3, r0
 800941a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800941c:	e00c      	b.n	8009438 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	3324      	adds	r3, #36	; 0x24
 8009422:	2101      	movs	r1, #1
 8009424:	4618      	mov	r0, r3
 8009426:	f000 fe1d 	bl	800a064 <RCCEx_PLL3_Config>
 800942a:	4603      	mov	r3, r0
 800942c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800942e:	e003      	b.n	8009438 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009430:	2301      	movs	r3, #1
 8009432:	75fb      	strb	r3, [r7, #23]
      break;
 8009434:	e000      	b.n	8009438 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8009436:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009438:	7dfb      	ldrb	r3, [r7, #23]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d10a      	bne.n	8009454 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800943e:	4b57      	ldr	r3, [pc, #348]	; (800959c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009442:	f023 0207 	bic.w	r2, r3, #7
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800944c:	4953      	ldr	r1, [pc, #332]	; (800959c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800944e:	4313      	orrs	r3, r2
 8009450:	658b      	str	r3, [r1, #88]	; 0x58
 8009452:	e001      	b.n	8009458 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009454:	7dfb      	ldrb	r3, [r7, #23]
 8009456:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f003 0320 	and.w	r3, r3, #32
 8009460:	2b00      	cmp	r3, #0
 8009462:	d04b      	beq.n	80094fc <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800946a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800946e:	d02e      	beq.n	80094ce <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8009470:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009474:	d828      	bhi.n	80094c8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009476:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800947a:	d02a      	beq.n	80094d2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800947c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009480:	d822      	bhi.n	80094c8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009482:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009486:	d026      	beq.n	80094d6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8009488:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800948c:	d81c      	bhi.n	80094c8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800948e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009492:	d010      	beq.n	80094b6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8009494:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009498:	d816      	bhi.n	80094c8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800949a:	2b00      	cmp	r3, #0
 800949c:	d01d      	beq.n	80094da <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800949e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80094a2:	d111      	bne.n	80094c8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	3304      	adds	r3, #4
 80094a8:	2100      	movs	r1, #0
 80094aa:	4618      	mov	r0, r3
 80094ac:	f000 fd28 	bl	8009f00 <RCCEx_PLL2_Config>
 80094b0:	4603      	mov	r3, r0
 80094b2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80094b4:	e012      	b.n	80094dc <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	3324      	adds	r3, #36	; 0x24
 80094ba:	2102      	movs	r1, #2
 80094bc:	4618      	mov	r0, r3
 80094be:	f000 fdd1 	bl	800a064 <RCCEx_PLL3_Config>
 80094c2:	4603      	mov	r3, r0
 80094c4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80094c6:	e009      	b.n	80094dc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80094c8:	2301      	movs	r3, #1
 80094ca:	75fb      	strb	r3, [r7, #23]
      break;
 80094cc:	e006      	b.n	80094dc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80094ce:	bf00      	nop
 80094d0:	e004      	b.n	80094dc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80094d2:	bf00      	nop
 80094d4:	e002      	b.n	80094dc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80094d6:	bf00      	nop
 80094d8:	e000      	b.n	80094dc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80094da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80094dc:	7dfb      	ldrb	r3, [r7, #23]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d10a      	bne.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80094e2:	4b2e      	ldr	r3, [pc, #184]	; (800959c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80094e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094e6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094f0:	492a      	ldr	r1, [pc, #168]	; (800959c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80094f2:	4313      	orrs	r3, r2
 80094f4:	654b      	str	r3, [r1, #84]	; 0x54
 80094f6:	e001      	b.n	80094fc <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094f8:	7dfb      	ldrb	r3, [r7, #23]
 80094fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009504:	2b00      	cmp	r3, #0
 8009506:	d04d      	beq.n	80095a4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800950e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009512:	d02e      	beq.n	8009572 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8009514:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009518:	d828      	bhi.n	800956c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800951a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800951e:	d02a      	beq.n	8009576 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8009520:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009524:	d822      	bhi.n	800956c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009526:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800952a:	d026      	beq.n	800957a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800952c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009530:	d81c      	bhi.n	800956c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009532:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009536:	d010      	beq.n	800955a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8009538:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800953c:	d816      	bhi.n	800956c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800953e:	2b00      	cmp	r3, #0
 8009540:	d01d      	beq.n	800957e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8009542:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009546:	d111      	bne.n	800956c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	3304      	adds	r3, #4
 800954c:	2100      	movs	r1, #0
 800954e:	4618      	mov	r0, r3
 8009550:	f000 fcd6 	bl	8009f00 <RCCEx_PLL2_Config>
 8009554:	4603      	mov	r3, r0
 8009556:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009558:	e012      	b.n	8009580 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	3324      	adds	r3, #36	; 0x24
 800955e:	2102      	movs	r1, #2
 8009560:	4618      	mov	r0, r3
 8009562:	f000 fd7f 	bl	800a064 <RCCEx_PLL3_Config>
 8009566:	4603      	mov	r3, r0
 8009568:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800956a:	e009      	b.n	8009580 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800956c:	2301      	movs	r3, #1
 800956e:	75fb      	strb	r3, [r7, #23]
      break;
 8009570:	e006      	b.n	8009580 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009572:	bf00      	nop
 8009574:	e004      	b.n	8009580 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009576:	bf00      	nop
 8009578:	e002      	b.n	8009580 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800957a:	bf00      	nop
 800957c:	e000      	b.n	8009580 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800957e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009580:	7dfb      	ldrb	r3, [r7, #23]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d10c      	bne.n	80095a0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009586:	4b05      	ldr	r3, [pc, #20]	; (800959c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800958a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009594:	4901      	ldr	r1, [pc, #4]	; (800959c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009596:	4313      	orrs	r3, r2
 8009598:	658b      	str	r3, [r1, #88]	; 0x58
 800959a:	e003      	b.n	80095a4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800959c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095a0:	7dfb      	ldrb	r3, [r7, #23]
 80095a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d04b      	beq.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80095b6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80095ba:	d02e      	beq.n	800961a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80095bc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80095c0:	d828      	bhi.n	8009614 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80095c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095c6:	d02a      	beq.n	800961e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80095c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095cc:	d822      	bhi.n	8009614 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80095ce:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80095d2:	d026      	beq.n	8009622 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80095d4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80095d8:	d81c      	bhi.n	8009614 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80095da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80095de:	d010      	beq.n	8009602 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80095e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80095e4:	d816      	bhi.n	8009614 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d01d      	beq.n	8009626 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80095ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095ee:	d111      	bne.n	8009614 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	3304      	adds	r3, #4
 80095f4:	2100      	movs	r1, #0
 80095f6:	4618      	mov	r0, r3
 80095f8:	f000 fc82 	bl	8009f00 <RCCEx_PLL2_Config>
 80095fc:	4603      	mov	r3, r0
 80095fe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009600:	e012      	b.n	8009628 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	3324      	adds	r3, #36	; 0x24
 8009606:	2102      	movs	r1, #2
 8009608:	4618      	mov	r0, r3
 800960a:	f000 fd2b 	bl	800a064 <RCCEx_PLL3_Config>
 800960e:	4603      	mov	r3, r0
 8009610:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009612:	e009      	b.n	8009628 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009614:	2301      	movs	r3, #1
 8009616:	75fb      	strb	r3, [r7, #23]
      break;
 8009618:	e006      	b.n	8009628 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800961a:	bf00      	nop
 800961c:	e004      	b.n	8009628 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800961e:	bf00      	nop
 8009620:	e002      	b.n	8009628 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009622:	bf00      	nop
 8009624:	e000      	b.n	8009628 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009626:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009628:	7dfb      	ldrb	r3, [r7, #23]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d10a      	bne.n	8009644 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800962e:	4b9d      	ldr	r3, [pc, #628]	; (80098a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009632:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800963c:	4999      	ldr	r1, [pc, #612]	; (80098a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800963e:	4313      	orrs	r3, r2
 8009640:	658b      	str	r3, [r1, #88]	; 0x58
 8009642:	e001      	b.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009644:	7dfb      	ldrb	r3, [r7, #23]
 8009646:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f003 0308 	and.w	r3, r3, #8
 8009650:	2b00      	cmp	r3, #0
 8009652:	d01a      	beq.n	800968a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800965a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800965e:	d10a      	bne.n	8009676 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	3324      	adds	r3, #36	; 0x24
 8009664:	2102      	movs	r1, #2
 8009666:	4618      	mov	r0, r3
 8009668:	f000 fcfc 	bl	800a064 <RCCEx_PLL3_Config>
 800966c:	4603      	mov	r3, r0
 800966e:	2b00      	cmp	r3, #0
 8009670:	d001      	beq.n	8009676 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8009672:	2301      	movs	r3, #1
 8009674:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009676:	4b8b      	ldr	r3, [pc, #556]	; (80098a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800967a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009684:	4987      	ldr	r1, [pc, #540]	; (80098a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009686:	4313      	orrs	r3, r2
 8009688:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	f003 0310 	and.w	r3, r3, #16
 8009692:	2b00      	cmp	r3, #0
 8009694:	d01a      	beq.n	80096cc <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800969c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096a0:	d10a      	bne.n	80096b8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	3324      	adds	r3, #36	; 0x24
 80096a6:	2102      	movs	r1, #2
 80096a8:	4618      	mov	r0, r3
 80096aa:	f000 fcdb 	bl	800a064 <RCCEx_PLL3_Config>
 80096ae:	4603      	mov	r3, r0
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d001      	beq.n	80096b8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80096b4:	2301      	movs	r3, #1
 80096b6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80096b8:	4b7a      	ldr	r3, [pc, #488]	; (80098a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80096ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80096c6:	4977      	ldr	r1, [pc, #476]	; (80098a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80096c8:	4313      	orrs	r3, r2
 80096ca:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d034      	beq.n	8009742 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80096de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80096e2:	d01d      	beq.n	8009720 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80096e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80096e8:	d817      	bhi.n	800971a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d003      	beq.n	80096f6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80096ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096f2:	d009      	beq.n	8009708 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80096f4:	e011      	b.n	800971a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	3304      	adds	r3, #4
 80096fa:	2100      	movs	r1, #0
 80096fc:	4618      	mov	r0, r3
 80096fe:	f000 fbff 	bl	8009f00 <RCCEx_PLL2_Config>
 8009702:	4603      	mov	r3, r0
 8009704:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009706:	e00c      	b.n	8009722 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	3324      	adds	r3, #36	; 0x24
 800970c:	2102      	movs	r1, #2
 800970e:	4618      	mov	r0, r3
 8009710:	f000 fca8 	bl	800a064 <RCCEx_PLL3_Config>
 8009714:	4603      	mov	r3, r0
 8009716:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009718:	e003      	b.n	8009722 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800971a:	2301      	movs	r3, #1
 800971c:	75fb      	strb	r3, [r7, #23]
      break;
 800971e:	e000      	b.n	8009722 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8009720:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009722:	7dfb      	ldrb	r3, [r7, #23]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d10a      	bne.n	800973e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009728:	4b5e      	ldr	r3, [pc, #376]	; (80098a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800972a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800972c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009736:	495b      	ldr	r1, [pc, #364]	; (80098a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009738:	4313      	orrs	r3, r2
 800973a:	658b      	str	r3, [r1, #88]	; 0x58
 800973c:	e001      	b.n	8009742 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800973e:	7dfb      	ldrb	r3, [r7, #23]
 8009740:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800974a:	2b00      	cmp	r3, #0
 800974c:	d033      	beq.n	80097b6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009754:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009758:	d01c      	beq.n	8009794 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800975a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800975e:	d816      	bhi.n	800978e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8009760:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009764:	d003      	beq.n	800976e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8009766:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800976a:	d007      	beq.n	800977c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800976c:	e00f      	b.n	800978e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800976e:	4b4d      	ldr	r3, [pc, #308]	; (80098a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009772:	4a4c      	ldr	r2, [pc, #304]	; (80098a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009774:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009778:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800977a:	e00c      	b.n	8009796 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	3324      	adds	r3, #36	; 0x24
 8009780:	2101      	movs	r1, #1
 8009782:	4618      	mov	r0, r3
 8009784:	f000 fc6e 	bl	800a064 <RCCEx_PLL3_Config>
 8009788:	4603      	mov	r3, r0
 800978a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800978c:	e003      	b.n	8009796 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800978e:	2301      	movs	r3, #1
 8009790:	75fb      	strb	r3, [r7, #23]
      break;
 8009792:	e000      	b.n	8009796 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8009794:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009796:	7dfb      	ldrb	r3, [r7, #23]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d10a      	bne.n	80097b2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800979c:	4b41      	ldr	r3, [pc, #260]	; (80098a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800979e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80097aa:	493e      	ldr	r1, [pc, #248]	; (80098a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80097ac:	4313      	orrs	r3, r2
 80097ae:	654b      	str	r3, [r1, #84]	; 0x54
 80097b0:	e001      	b.n	80097b6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097b2:	7dfb      	ldrb	r3, [r7, #23]
 80097b4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d029      	beq.n	8009816 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d003      	beq.n	80097d2 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80097ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097ce:	d007      	beq.n	80097e0 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80097d0:	e00f      	b.n	80097f2 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097d2:	4b34      	ldr	r3, [pc, #208]	; (80098a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80097d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097d6:	4a33      	ldr	r2, [pc, #204]	; (80098a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80097d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80097dc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80097de:	e00b      	b.n	80097f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	3304      	adds	r3, #4
 80097e4:	2102      	movs	r1, #2
 80097e6:	4618      	mov	r0, r3
 80097e8:	f000 fb8a 	bl	8009f00 <RCCEx_PLL2_Config>
 80097ec:	4603      	mov	r3, r0
 80097ee:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80097f0:	e002      	b.n	80097f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80097f2:	2301      	movs	r3, #1
 80097f4:	75fb      	strb	r3, [r7, #23]
      break;
 80097f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80097f8:	7dfb      	ldrb	r3, [r7, #23]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d109      	bne.n	8009812 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80097fe:	4b29      	ldr	r3, [pc, #164]	; (80098a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009802:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800980a:	4926      	ldr	r1, [pc, #152]	; (80098a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800980c:	4313      	orrs	r3, r2
 800980e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009810:	e001      	b.n	8009816 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009812:	7dfb      	ldrb	r3, [r7, #23]
 8009814:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800981e:	2b00      	cmp	r3, #0
 8009820:	d00a      	beq.n	8009838 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	3324      	adds	r3, #36	; 0x24
 8009826:	2102      	movs	r1, #2
 8009828:	4618      	mov	r0, r3
 800982a:	f000 fc1b 	bl	800a064 <RCCEx_PLL3_Config>
 800982e:	4603      	mov	r3, r0
 8009830:	2b00      	cmp	r3, #0
 8009832:	d001      	beq.n	8009838 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8009834:	2301      	movs	r3, #1
 8009836:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009840:	2b00      	cmp	r3, #0
 8009842:	d033      	beq.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009848:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800984c:	d017      	beq.n	800987e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800984e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009852:	d811      	bhi.n	8009878 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8009854:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009858:	d013      	beq.n	8009882 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800985a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800985e:	d80b      	bhi.n	8009878 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8009860:	2b00      	cmp	r3, #0
 8009862:	d010      	beq.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8009864:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009868:	d106      	bne.n	8009878 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800986a:	4b0e      	ldr	r3, [pc, #56]	; (80098a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800986c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800986e:	4a0d      	ldr	r2, [pc, #52]	; (80098a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009870:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009874:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8009876:	e007      	b.n	8009888 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009878:	2301      	movs	r3, #1
 800987a:	75fb      	strb	r3, [r7, #23]
      break;
 800987c:	e004      	b.n	8009888 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800987e:	bf00      	nop
 8009880:	e002      	b.n	8009888 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8009882:	bf00      	nop
 8009884:	e000      	b.n	8009888 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8009886:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009888:	7dfb      	ldrb	r3, [r7, #23]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d10c      	bne.n	80098a8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800988e:	4b05      	ldr	r3, [pc, #20]	; (80098a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009892:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800989a:	4902      	ldr	r1, [pc, #8]	; (80098a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800989c:	4313      	orrs	r3, r2
 800989e:	654b      	str	r3, [r1, #84]	; 0x54
 80098a0:	e004      	b.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80098a2:	bf00      	nop
 80098a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098a8:	7dfb      	ldrb	r3, [r7, #23]
 80098aa:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d008      	beq.n	80098ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80098b8:	4b31      	ldr	r3, [pc, #196]	; (8009980 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80098ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098bc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098c4:	492e      	ldr	r1, [pc, #184]	; (8009980 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80098c6:	4313      	orrs	r3, r2
 80098c8:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d009      	beq.n	80098ea <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80098d6:	4b2a      	ldr	r3, [pc, #168]	; (8009980 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80098d8:	691b      	ldr	r3, [r3, #16]
 80098da:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80098e4:	4926      	ldr	r1, [pc, #152]	; (8009980 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80098e6:	4313      	orrs	r3, r2
 80098e8:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d008      	beq.n	8009908 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80098f6:	4b22      	ldr	r3, [pc, #136]	; (8009980 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80098f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098fa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009902:	491f      	ldr	r1, [pc, #124]	; (8009980 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009904:	4313      	orrs	r3, r2
 8009906:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009910:	2b00      	cmp	r3, #0
 8009912:	d00d      	beq.n	8009930 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009914:	4b1a      	ldr	r3, [pc, #104]	; (8009980 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009916:	691b      	ldr	r3, [r3, #16]
 8009918:	4a19      	ldr	r2, [pc, #100]	; (8009980 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800991a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800991e:	6113      	str	r3, [r2, #16]
 8009920:	4b17      	ldr	r3, [pc, #92]	; (8009980 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009922:	691a      	ldr	r2, [r3, #16]
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800992a:	4915      	ldr	r1, [pc, #84]	; (8009980 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800992c:	4313      	orrs	r3, r2
 800992e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	2b00      	cmp	r3, #0
 8009936:	da08      	bge.n	800994a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009938:	4b11      	ldr	r3, [pc, #68]	; (8009980 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800993a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800993c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009944:	490e      	ldr	r1, [pc, #56]	; (8009980 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009946:	4313      	orrs	r3, r2
 8009948:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009952:	2b00      	cmp	r3, #0
 8009954:	d009      	beq.n	800996a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009956:	4b0a      	ldr	r3, [pc, #40]	; (8009980 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800995a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009964:	4906      	ldr	r1, [pc, #24]	; (8009980 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009966:	4313      	orrs	r3, r2
 8009968:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800996a:	7dbb      	ldrb	r3, [r7, #22]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d101      	bne.n	8009974 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8009970:	2300      	movs	r3, #0
 8009972:	e000      	b.n	8009976 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8009974:	2301      	movs	r3, #1
}
 8009976:	4618      	mov	r0, r3
 8009978:	3718      	adds	r7, #24
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}
 800997e:	bf00      	nop
 8009980:	58024400 	.word	0x58024400

08009984 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009988:	f7ff f818 	bl	80089bc <HAL_RCC_GetHCLKFreq>
 800998c:	4602      	mov	r2, r0
 800998e:	4b06      	ldr	r3, [pc, #24]	; (80099a8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009990:	6a1b      	ldr	r3, [r3, #32]
 8009992:	091b      	lsrs	r3, r3, #4
 8009994:	f003 0307 	and.w	r3, r3, #7
 8009998:	4904      	ldr	r1, [pc, #16]	; (80099ac <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800999a:	5ccb      	ldrb	r3, [r1, r3]
 800999c:	f003 031f 	and.w	r3, r3, #31
 80099a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	bd80      	pop	{r7, pc}
 80099a8:	58024400 	.word	0x58024400
 80099ac:	08013b90 	.word	0x08013b90

080099b0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80099b0:	b480      	push	{r7}
 80099b2:	b089      	sub	sp, #36	; 0x24
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80099b8:	4ba1      	ldr	r3, [pc, #644]	; (8009c40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099bc:	f003 0303 	and.w	r3, r3, #3
 80099c0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80099c2:	4b9f      	ldr	r3, [pc, #636]	; (8009c40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099c6:	0b1b      	lsrs	r3, r3, #12
 80099c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80099cc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80099ce:	4b9c      	ldr	r3, [pc, #624]	; (8009c40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099d2:	091b      	lsrs	r3, r3, #4
 80099d4:	f003 0301 	and.w	r3, r3, #1
 80099d8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80099da:	4b99      	ldr	r3, [pc, #612]	; (8009c40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099de:	08db      	lsrs	r3, r3, #3
 80099e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80099e4:	693a      	ldr	r2, [r7, #16]
 80099e6:	fb02 f303 	mul.w	r3, r2, r3
 80099ea:	ee07 3a90 	vmov	s15, r3
 80099ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80099f6:	697b      	ldr	r3, [r7, #20]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	f000 8111 	beq.w	8009c20 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80099fe:	69bb      	ldr	r3, [r7, #24]
 8009a00:	2b02      	cmp	r3, #2
 8009a02:	f000 8083 	beq.w	8009b0c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009a06:	69bb      	ldr	r3, [r7, #24]
 8009a08:	2b02      	cmp	r3, #2
 8009a0a:	f200 80a1 	bhi.w	8009b50 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009a0e:	69bb      	ldr	r3, [r7, #24]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d003      	beq.n	8009a1c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009a14:	69bb      	ldr	r3, [r7, #24]
 8009a16:	2b01      	cmp	r3, #1
 8009a18:	d056      	beq.n	8009ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009a1a:	e099      	b.n	8009b50 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a1c:	4b88      	ldr	r3, [pc, #544]	; (8009c40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f003 0320 	and.w	r3, r3, #32
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d02d      	beq.n	8009a84 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009a28:	4b85      	ldr	r3, [pc, #532]	; (8009c40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	08db      	lsrs	r3, r3, #3
 8009a2e:	f003 0303 	and.w	r3, r3, #3
 8009a32:	4a84      	ldr	r2, [pc, #528]	; (8009c44 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009a34:	fa22 f303 	lsr.w	r3, r2, r3
 8009a38:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	ee07 3a90 	vmov	s15, r3
 8009a40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a44:	697b      	ldr	r3, [r7, #20]
 8009a46:	ee07 3a90 	vmov	s15, r3
 8009a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a52:	4b7b      	ldr	r3, [pc, #492]	; (8009c40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a5a:	ee07 3a90 	vmov	s15, r3
 8009a5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a62:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a66:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009c48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009a6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a7e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009a82:	e087      	b.n	8009b94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	ee07 3a90 	vmov	s15, r3
 8009a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a8e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009c4c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009a92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a96:	4b6a      	ldr	r3, [pc, #424]	; (8009c40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a9e:	ee07 3a90 	vmov	s15, r3
 8009aa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009aa6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009aaa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009c48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009aae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ab2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ab6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009aba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009abe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ac2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009ac6:	e065      	b.n	8009b94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009ac8:	697b      	ldr	r3, [r7, #20]
 8009aca:	ee07 3a90 	vmov	s15, r3
 8009ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ad2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009c50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009ad6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ada:	4b59      	ldr	r3, [pc, #356]	; (8009c40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ade:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ae2:	ee07 3a90 	vmov	s15, r3
 8009ae6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009aea:	ed97 6a03 	vldr	s12, [r7, #12]
 8009aee:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009c48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009af2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009af6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009afa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009afe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b06:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009b0a:	e043      	b.n	8009b94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009b0c:	697b      	ldr	r3, [r7, #20]
 8009b0e:	ee07 3a90 	vmov	s15, r3
 8009b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b16:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009c54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009b1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b1e:	4b48      	ldr	r3, [pc, #288]	; (8009c40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b26:	ee07 3a90 	vmov	s15, r3
 8009b2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b32:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009c48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009b36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009b4e:	e021      	b.n	8009b94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009b50:	697b      	ldr	r3, [r7, #20]
 8009b52:	ee07 3a90 	vmov	s15, r3
 8009b56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b5a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009c50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009b5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b62:	4b37      	ldr	r3, [pc, #220]	; (8009c40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b6a:	ee07 3a90 	vmov	s15, r3
 8009b6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b72:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b76:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009c48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009b7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b8e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009b92:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009b94:	4b2a      	ldr	r3, [pc, #168]	; (8009c40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b98:	0a5b      	lsrs	r3, r3, #9
 8009b9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b9e:	ee07 3a90 	vmov	s15, r3
 8009ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ba6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009baa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009bae:	edd7 6a07 	vldr	s13, [r7, #28]
 8009bb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009bb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009bba:	ee17 2a90 	vmov	r2, s15
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009bc2:	4b1f      	ldr	r3, [pc, #124]	; (8009c40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bc6:	0c1b      	lsrs	r3, r3, #16
 8009bc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009bcc:	ee07 3a90 	vmov	s15, r3
 8009bd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bd4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009bd8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009bdc:	edd7 6a07 	vldr	s13, [r7, #28]
 8009be0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009be4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009be8:	ee17 2a90 	vmov	r2, s15
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009bf0:	4b13      	ldr	r3, [pc, #76]	; (8009c40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bf4:	0e1b      	lsrs	r3, r3, #24
 8009bf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009bfa:	ee07 3a90 	vmov	s15, r3
 8009bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c16:	ee17 2a90 	vmov	r2, s15
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009c1e:	e008      	b.n	8009c32 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2200      	movs	r2, #0
 8009c24:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2200      	movs	r2, #0
 8009c2a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2200      	movs	r2, #0
 8009c30:	609a      	str	r2, [r3, #8]
}
 8009c32:	bf00      	nop
 8009c34:	3724      	adds	r7, #36	; 0x24
 8009c36:	46bd      	mov	sp, r7
 8009c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3c:	4770      	bx	lr
 8009c3e:	bf00      	nop
 8009c40:	58024400 	.word	0x58024400
 8009c44:	03d09000 	.word	0x03d09000
 8009c48:	46000000 	.word	0x46000000
 8009c4c:	4c742400 	.word	0x4c742400
 8009c50:	4a742400 	.word	0x4a742400
 8009c54:	4b742400 	.word	0x4b742400

08009c58 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009c58:	b480      	push	{r7}
 8009c5a:	b089      	sub	sp, #36	; 0x24
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009c60:	4ba1      	ldr	r3, [pc, #644]	; (8009ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c64:	f003 0303 	and.w	r3, r3, #3
 8009c68:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009c6a:	4b9f      	ldr	r3, [pc, #636]	; (8009ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c6e:	0d1b      	lsrs	r3, r3, #20
 8009c70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009c74:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009c76:	4b9c      	ldr	r3, [pc, #624]	; (8009ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c7a:	0a1b      	lsrs	r3, r3, #8
 8009c7c:	f003 0301 	and.w	r3, r3, #1
 8009c80:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009c82:	4b99      	ldr	r3, [pc, #612]	; (8009ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c86:	08db      	lsrs	r3, r3, #3
 8009c88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009c8c:	693a      	ldr	r2, [r7, #16]
 8009c8e:	fb02 f303 	mul.w	r3, r2, r3
 8009c92:	ee07 3a90 	vmov	s15, r3
 8009c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c9a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	f000 8111 	beq.w	8009ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009ca6:	69bb      	ldr	r3, [r7, #24]
 8009ca8:	2b02      	cmp	r3, #2
 8009caa:	f000 8083 	beq.w	8009db4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009cae:	69bb      	ldr	r3, [r7, #24]
 8009cb0:	2b02      	cmp	r3, #2
 8009cb2:	f200 80a1 	bhi.w	8009df8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009cb6:	69bb      	ldr	r3, [r7, #24]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d003      	beq.n	8009cc4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009cbc:	69bb      	ldr	r3, [r7, #24]
 8009cbe:	2b01      	cmp	r3, #1
 8009cc0:	d056      	beq.n	8009d70 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009cc2:	e099      	b.n	8009df8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009cc4:	4b88      	ldr	r3, [pc, #544]	; (8009ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	f003 0320 	and.w	r3, r3, #32
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d02d      	beq.n	8009d2c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009cd0:	4b85      	ldr	r3, [pc, #532]	; (8009ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	08db      	lsrs	r3, r3, #3
 8009cd6:	f003 0303 	and.w	r3, r3, #3
 8009cda:	4a84      	ldr	r2, [pc, #528]	; (8009eec <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009cdc:	fa22 f303 	lsr.w	r3, r2, r3
 8009ce0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	ee07 3a90 	vmov	s15, r3
 8009ce8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	ee07 3a90 	vmov	s15, r3
 8009cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cfa:	4b7b      	ldr	r3, [pc, #492]	; (8009ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d02:	ee07 3a90 	vmov	s15, r3
 8009d06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d0e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009d12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d26:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009d2a:	e087      	b.n	8009e3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009d2c:	697b      	ldr	r3, [r7, #20]
 8009d2e:	ee07 3a90 	vmov	s15, r3
 8009d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d36:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009d3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d3e:	4b6a      	ldr	r3, [pc, #424]	; (8009ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d46:	ee07 3a90 	vmov	s15, r3
 8009d4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d52:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009d56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d6a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009d6e:	e065      	b.n	8009e3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	ee07 3a90 	vmov	s15, r3
 8009d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d7a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009d7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d82:	4b59      	ldr	r3, [pc, #356]	; (8009ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d8a:	ee07 3a90 	vmov	s15, r3
 8009d8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d92:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d96:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009d9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009da2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009da6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009daa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009db2:	e043      	b.n	8009e3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	ee07 3a90 	vmov	s15, r3
 8009dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dbe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009efc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009dc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dc6:	4b48      	ldr	r3, [pc, #288]	; (8009ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dce:	ee07 3a90 	vmov	s15, r3
 8009dd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009dda:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009dde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009de2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009de6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009dea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009dee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009df2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009df6:	e021      	b.n	8009e3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009df8:	697b      	ldr	r3, [r7, #20]
 8009dfa:	ee07 3a90 	vmov	s15, r3
 8009dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e02:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009e06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e0a:	4b37      	ldr	r3, [pc, #220]	; (8009ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e12:	ee07 3a90 	vmov	s15, r3
 8009e16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e1e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009e22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e36:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009e3a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009e3c:	4b2a      	ldr	r3, [pc, #168]	; (8009ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e40:	0a5b      	lsrs	r3, r3, #9
 8009e42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e46:	ee07 3a90 	vmov	s15, r3
 8009e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009e52:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e56:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e62:	ee17 2a90 	vmov	r2, s15
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009e6a:	4b1f      	ldr	r3, [pc, #124]	; (8009ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e6e:	0c1b      	lsrs	r3, r3, #16
 8009e70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e74:	ee07 3a90 	vmov	s15, r3
 8009e78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009e80:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e84:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e90:	ee17 2a90 	vmov	r2, s15
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009e98:	4b13      	ldr	r3, [pc, #76]	; (8009ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e9c:	0e1b      	lsrs	r3, r3, #24
 8009e9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ea2:	ee07 3a90 	vmov	s15, r3
 8009ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009eaa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009eae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009eb2:	edd7 6a07 	vldr	s13, [r7, #28]
 8009eb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009eba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ebe:	ee17 2a90 	vmov	r2, s15
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009ec6:	e008      	b.n	8009eda <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2200      	movs	r2, #0
 8009ecc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	609a      	str	r2, [r3, #8]
}
 8009eda:	bf00      	nop
 8009edc:	3724      	adds	r7, #36	; 0x24
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee4:	4770      	bx	lr
 8009ee6:	bf00      	nop
 8009ee8:	58024400 	.word	0x58024400
 8009eec:	03d09000 	.word	0x03d09000
 8009ef0:	46000000 	.word	0x46000000
 8009ef4:	4c742400 	.word	0x4c742400
 8009ef8:	4a742400 	.word	0x4a742400
 8009efc:	4b742400 	.word	0x4b742400

08009f00 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b084      	sub	sp, #16
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
 8009f08:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009f0e:	4b53      	ldr	r3, [pc, #332]	; (800a05c <RCCEx_PLL2_Config+0x15c>)
 8009f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f12:	f003 0303 	and.w	r3, r3, #3
 8009f16:	2b03      	cmp	r3, #3
 8009f18:	d101      	bne.n	8009f1e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	e099      	b.n	800a052 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009f1e:	4b4f      	ldr	r3, [pc, #316]	; (800a05c <RCCEx_PLL2_Config+0x15c>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	4a4e      	ldr	r2, [pc, #312]	; (800a05c <RCCEx_PLL2_Config+0x15c>)
 8009f24:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009f28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f2a:	f7f8 f9c7 	bl	80022bc <HAL_GetTick>
 8009f2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009f30:	e008      	b.n	8009f44 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009f32:	f7f8 f9c3 	bl	80022bc <HAL_GetTick>
 8009f36:	4602      	mov	r2, r0
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	1ad3      	subs	r3, r2, r3
 8009f3c:	2b02      	cmp	r3, #2
 8009f3e:	d901      	bls.n	8009f44 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009f40:	2303      	movs	r3, #3
 8009f42:	e086      	b.n	800a052 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009f44:	4b45      	ldr	r3, [pc, #276]	; (800a05c <RCCEx_PLL2_Config+0x15c>)
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d1f0      	bne.n	8009f32 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009f50:	4b42      	ldr	r3, [pc, #264]	; (800a05c <RCCEx_PLL2_Config+0x15c>)
 8009f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f54:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	031b      	lsls	r3, r3, #12
 8009f5e:	493f      	ldr	r1, [pc, #252]	; (800a05c <RCCEx_PLL2_Config+0x15c>)
 8009f60:	4313      	orrs	r3, r2
 8009f62:	628b      	str	r3, [r1, #40]	; 0x28
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	685b      	ldr	r3, [r3, #4]
 8009f68:	3b01      	subs	r3, #1
 8009f6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	689b      	ldr	r3, [r3, #8]
 8009f72:	3b01      	subs	r3, #1
 8009f74:	025b      	lsls	r3, r3, #9
 8009f76:	b29b      	uxth	r3, r3
 8009f78:	431a      	orrs	r2, r3
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	68db      	ldr	r3, [r3, #12]
 8009f7e:	3b01      	subs	r3, #1
 8009f80:	041b      	lsls	r3, r3, #16
 8009f82:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009f86:	431a      	orrs	r2, r3
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	691b      	ldr	r3, [r3, #16]
 8009f8c:	3b01      	subs	r3, #1
 8009f8e:	061b      	lsls	r3, r3, #24
 8009f90:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009f94:	4931      	ldr	r1, [pc, #196]	; (800a05c <RCCEx_PLL2_Config+0x15c>)
 8009f96:	4313      	orrs	r3, r2
 8009f98:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009f9a:	4b30      	ldr	r3, [pc, #192]	; (800a05c <RCCEx_PLL2_Config+0x15c>)
 8009f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f9e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	695b      	ldr	r3, [r3, #20]
 8009fa6:	492d      	ldr	r1, [pc, #180]	; (800a05c <RCCEx_PLL2_Config+0x15c>)
 8009fa8:	4313      	orrs	r3, r2
 8009faa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009fac:	4b2b      	ldr	r3, [pc, #172]	; (800a05c <RCCEx_PLL2_Config+0x15c>)
 8009fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fb0:	f023 0220 	bic.w	r2, r3, #32
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	699b      	ldr	r3, [r3, #24]
 8009fb8:	4928      	ldr	r1, [pc, #160]	; (800a05c <RCCEx_PLL2_Config+0x15c>)
 8009fba:	4313      	orrs	r3, r2
 8009fbc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009fbe:	4b27      	ldr	r3, [pc, #156]	; (800a05c <RCCEx_PLL2_Config+0x15c>)
 8009fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fc2:	4a26      	ldr	r2, [pc, #152]	; (800a05c <RCCEx_PLL2_Config+0x15c>)
 8009fc4:	f023 0310 	bic.w	r3, r3, #16
 8009fc8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009fca:	4b24      	ldr	r3, [pc, #144]	; (800a05c <RCCEx_PLL2_Config+0x15c>)
 8009fcc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009fce:	4b24      	ldr	r3, [pc, #144]	; (800a060 <RCCEx_PLL2_Config+0x160>)
 8009fd0:	4013      	ands	r3, r2
 8009fd2:	687a      	ldr	r2, [r7, #4]
 8009fd4:	69d2      	ldr	r2, [r2, #28]
 8009fd6:	00d2      	lsls	r2, r2, #3
 8009fd8:	4920      	ldr	r1, [pc, #128]	; (800a05c <RCCEx_PLL2_Config+0x15c>)
 8009fda:	4313      	orrs	r3, r2
 8009fdc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009fde:	4b1f      	ldr	r3, [pc, #124]	; (800a05c <RCCEx_PLL2_Config+0x15c>)
 8009fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fe2:	4a1e      	ldr	r2, [pc, #120]	; (800a05c <RCCEx_PLL2_Config+0x15c>)
 8009fe4:	f043 0310 	orr.w	r3, r3, #16
 8009fe8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d106      	bne.n	8009ffe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009ff0:	4b1a      	ldr	r3, [pc, #104]	; (800a05c <RCCEx_PLL2_Config+0x15c>)
 8009ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ff4:	4a19      	ldr	r2, [pc, #100]	; (800a05c <RCCEx_PLL2_Config+0x15c>)
 8009ff6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009ffa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009ffc:	e00f      	b.n	800a01e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	2b01      	cmp	r3, #1
 800a002:	d106      	bne.n	800a012 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a004:	4b15      	ldr	r3, [pc, #84]	; (800a05c <RCCEx_PLL2_Config+0x15c>)
 800a006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a008:	4a14      	ldr	r2, [pc, #80]	; (800a05c <RCCEx_PLL2_Config+0x15c>)
 800a00a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a00e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a010:	e005      	b.n	800a01e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a012:	4b12      	ldr	r3, [pc, #72]	; (800a05c <RCCEx_PLL2_Config+0x15c>)
 800a014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a016:	4a11      	ldr	r2, [pc, #68]	; (800a05c <RCCEx_PLL2_Config+0x15c>)
 800a018:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a01c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a01e:	4b0f      	ldr	r3, [pc, #60]	; (800a05c <RCCEx_PLL2_Config+0x15c>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	4a0e      	ldr	r2, [pc, #56]	; (800a05c <RCCEx_PLL2_Config+0x15c>)
 800a024:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a028:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a02a:	f7f8 f947 	bl	80022bc <HAL_GetTick>
 800a02e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a030:	e008      	b.n	800a044 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a032:	f7f8 f943 	bl	80022bc <HAL_GetTick>
 800a036:	4602      	mov	r2, r0
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	1ad3      	subs	r3, r2, r3
 800a03c:	2b02      	cmp	r3, #2
 800a03e:	d901      	bls.n	800a044 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a040:	2303      	movs	r3, #3
 800a042:	e006      	b.n	800a052 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a044:	4b05      	ldr	r3, [pc, #20]	; (800a05c <RCCEx_PLL2_Config+0x15c>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d0f0      	beq.n	800a032 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a050:	7bfb      	ldrb	r3, [r7, #15]
}
 800a052:	4618      	mov	r0, r3
 800a054:	3710      	adds	r7, #16
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}
 800a05a:	bf00      	nop
 800a05c:	58024400 	.word	0x58024400
 800a060:	ffff0007 	.word	0xffff0007

0800a064 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b084      	sub	sp, #16
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
 800a06c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a06e:	2300      	movs	r3, #0
 800a070:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a072:	4b53      	ldr	r3, [pc, #332]	; (800a1c0 <RCCEx_PLL3_Config+0x15c>)
 800a074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a076:	f003 0303 	and.w	r3, r3, #3
 800a07a:	2b03      	cmp	r3, #3
 800a07c:	d101      	bne.n	800a082 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a07e:	2301      	movs	r3, #1
 800a080:	e099      	b.n	800a1b6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a082:	4b4f      	ldr	r3, [pc, #316]	; (800a1c0 <RCCEx_PLL3_Config+0x15c>)
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	4a4e      	ldr	r2, [pc, #312]	; (800a1c0 <RCCEx_PLL3_Config+0x15c>)
 800a088:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a08c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a08e:	f7f8 f915 	bl	80022bc <HAL_GetTick>
 800a092:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a094:	e008      	b.n	800a0a8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a096:	f7f8 f911 	bl	80022bc <HAL_GetTick>
 800a09a:	4602      	mov	r2, r0
 800a09c:	68bb      	ldr	r3, [r7, #8]
 800a09e:	1ad3      	subs	r3, r2, r3
 800a0a0:	2b02      	cmp	r3, #2
 800a0a2:	d901      	bls.n	800a0a8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a0a4:	2303      	movs	r3, #3
 800a0a6:	e086      	b.n	800a1b6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a0a8:	4b45      	ldr	r3, [pc, #276]	; (800a1c0 <RCCEx_PLL3_Config+0x15c>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d1f0      	bne.n	800a096 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a0b4:	4b42      	ldr	r3, [pc, #264]	; (800a1c0 <RCCEx_PLL3_Config+0x15c>)
 800a0b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0b8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	051b      	lsls	r3, r3, #20
 800a0c2:	493f      	ldr	r1, [pc, #252]	; (800a1c0 <RCCEx_PLL3_Config+0x15c>)
 800a0c4:	4313      	orrs	r3, r2
 800a0c6:	628b      	str	r3, [r1, #40]	; 0x28
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	685b      	ldr	r3, [r3, #4]
 800a0cc:	3b01      	subs	r3, #1
 800a0ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	689b      	ldr	r3, [r3, #8]
 800a0d6:	3b01      	subs	r3, #1
 800a0d8:	025b      	lsls	r3, r3, #9
 800a0da:	b29b      	uxth	r3, r3
 800a0dc:	431a      	orrs	r2, r3
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	68db      	ldr	r3, [r3, #12]
 800a0e2:	3b01      	subs	r3, #1
 800a0e4:	041b      	lsls	r3, r3, #16
 800a0e6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a0ea:	431a      	orrs	r2, r3
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	691b      	ldr	r3, [r3, #16]
 800a0f0:	3b01      	subs	r3, #1
 800a0f2:	061b      	lsls	r3, r3, #24
 800a0f4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a0f8:	4931      	ldr	r1, [pc, #196]	; (800a1c0 <RCCEx_PLL3_Config+0x15c>)
 800a0fa:	4313      	orrs	r3, r2
 800a0fc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a0fe:	4b30      	ldr	r3, [pc, #192]	; (800a1c0 <RCCEx_PLL3_Config+0x15c>)
 800a100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a102:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	695b      	ldr	r3, [r3, #20]
 800a10a:	492d      	ldr	r1, [pc, #180]	; (800a1c0 <RCCEx_PLL3_Config+0x15c>)
 800a10c:	4313      	orrs	r3, r2
 800a10e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a110:	4b2b      	ldr	r3, [pc, #172]	; (800a1c0 <RCCEx_PLL3_Config+0x15c>)
 800a112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a114:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	699b      	ldr	r3, [r3, #24]
 800a11c:	4928      	ldr	r1, [pc, #160]	; (800a1c0 <RCCEx_PLL3_Config+0x15c>)
 800a11e:	4313      	orrs	r3, r2
 800a120:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a122:	4b27      	ldr	r3, [pc, #156]	; (800a1c0 <RCCEx_PLL3_Config+0x15c>)
 800a124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a126:	4a26      	ldr	r2, [pc, #152]	; (800a1c0 <RCCEx_PLL3_Config+0x15c>)
 800a128:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a12c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a12e:	4b24      	ldr	r3, [pc, #144]	; (800a1c0 <RCCEx_PLL3_Config+0x15c>)
 800a130:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a132:	4b24      	ldr	r3, [pc, #144]	; (800a1c4 <RCCEx_PLL3_Config+0x160>)
 800a134:	4013      	ands	r3, r2
 800a136:	687a      	ldr	r2, [r7, #4]
 800a138:	69d2      	ldr	r2, [r2, #28]
 800a13a:	00d2      	lsls	r2, r2, #3
 800a13c:	4920      	ldr	r1, [pc, #128]	; (800a1c0 <RCCEx_PLL3_Config+0x15c>)
 800a13e:	4313      	orrs	r3, r2
 800a140:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a142:	4b1f      	ldr	r3, [pc, #124]	; (800a1c0 <RCCEx_PLL3_Config+0x15c>)
 800a144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a146:	4a1e      	ldr	r2, [pc, #120]	; (800a1c0 <RCCEx_PLL3_Config+0x15c>)
 800a148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a14c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d106      	bne.n	800a162 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a154:	4b1a      	ldr	r3, [pc, #104]	; (800a1c0 <RCCEx_PLL3_Config+0x15c>)
 800a156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a158:	4a19      	ldr	r2, [pc, #100]	; (800a1c0 <RCCEx_PLL3_Config+0x15c>)
 800a15a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a15e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a160:	e00f      	b.n	800a182 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	2b01      	cmp	r3, #1
 800a166:	d106      	bne.n	800a176 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a168:	4b15      	ldr	r3, [pc, #84]	; (800a1c0 <RCCEx_PLL3_Config+0x15c>)
 800a16a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a16c:	4a14      	ldr	r2, [pc, #80]	; (800a1c0 <RCCEx_PLL3_Config+0x15c>)
 800a16e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a172:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a174:	e005      	b.n	800a182 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a176:	4b12      	ldr	r3, [pc, #72]	; (800a1c0 <RCCEx_PLL3_Config+0x15c>)
 800a178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a17a:	4a11      	ldr	r2, [pc, #68]	; (800a1c0 <RCCEx_PLL3_Config+0x15c>)
 800a17c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a180:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a182:	4b0f      	ldr	r3, [pc, #60]	; (800a1c0 <RCCEx_PLL3_Config+0x15c>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	4a0e      	ldr	r2, [pc, #56]	; (800a1c0 <RCCEx_PLL3_Config+0x15c>)
 800a188:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a18c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a18e:	f7f8 f895 	bl	80022bc <HAL_GetTick>
 800a192:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a194:	e008      	b.n	800a1a8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a196:	f7f8 f891 	bl	80022bc <HAL_GetTick>
 800a19a:	4602      	mov	r2, r0
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	1ad3      	subs	r3, r2, r3
 800a1a0:	2b02      	cmp	r3, #2
 800a1a2:	d901      	bls.n	800a1a8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a1a4:	2303      	movs	r3, #3
 800a1a6:	e006      	b.n	800a1b6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a1a8:	4b05      	ldr	r3, [pc, #20]	; (800a1c0 <RCCEx_PLL3_Config+0x15c>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d0f0      	beq.n	800a196 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a1b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	3710      	adds	r7, #16
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}
 800a1be:	bf00      	nop
 800a1c0:	58024400 	.word	0x58024400
 800a1c4:	ffff0007 	.word	0xffff0007

0800a1c8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b084      	sub	sp, #16
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1d4:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d008      	beq.n	800a1f6 <HAL_SD_IRQHandler+0x2e>
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	f003 0308 	and.w	r3, r3, #8
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d003      	beq.n	800a1f6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	f000 f9ac 	bl	800a54c <SD_Read_IT>
 800a1f4:	e19a      	b.n	800a52c <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a200:	2b00      	cmp	r3, #0
 800a202:	f000 80ac 	beq.w	800a35e <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a20e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681a      	ldr	r2, [r3, #0]
 800a21a:	4b59      	ldr	r3, [pc, #356]	; (800a380 <HAL_SD_IRQHandler+0x1b8>)
 800a21c:	400b      	ands	r3, r1
 800a21e:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800a22e:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	68da      	ldr	r2, [r3, #12]
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a23e:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	f003 0308 	and.w	r3, r3, #8
 800a246:	2b00      	cmp	r3, #0
 800a248:	d038      	beq.n	800a2bc <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	f003 0302 	and.w	r3, r3, #2
 800a250:	2b00      	cmp	r3, #0
 800a252:	d104      	bne.n	800a25e <HAL_SD_IRQHandler+0x96>
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	f003 0320 	and.w	r3, r3, #32
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d011      	beq.n	800a282 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	4618      	mov	r0, r3
 800a264:	f003 f942 	bl	800d4ec <SDMMC_CmdStopTransfer>
 800a268:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d008      	beq.n	800a282 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	431a      	orrs	r2, r3
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	f000 f95b 	bl	800a538 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	4a3f      	ldr	r2, [pc, #252]	; (800a384 <HAL_SD_IRQHandler+0x1bc>)
 800a288:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	2201      	movs	r2, #1
 800a28e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2200      	movs	r2, #0
 800a296:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	f003 0301 	and.w	r3, r3, #1
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d104      	bne.n	800a2ac <HAL_SD_IRQHandler+0xe4>
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	f003 0302 	and.w	r3, r3, #2
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d003      	beq.n	800a2b4 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800a2ac:	6878      	ldr	r0, [r7, #4]
 800a2ae:	f004 fdc7 	bl	800ee40 <HAL_SD_RxCpltCallback>
 800a2b2:	e13b      	b.n	800a52c <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800a2b4:	6878      	ldr	r0, [r7, #4]
 800a2b6:	f004 fdb9 	bl	800ee2c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a2ba:	e137      	b.n	800a52c <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	f000 8132 	beq.w	800a52c <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	2200      	movs	r2, #0
 800a2de:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	f003 0302 	and.w	r3, r3, #2
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d104      	bne.n	800a2f4 <HAL_SD_IRQHandler+0x12c>
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	f003 0320 	and.w	r3, r3, #32
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d011      	beq.n	800a318 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	f003 f8f7 	bl	800d4ec <SDMMC_CmdStopTransfer>
 800a2fe:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d008      	beq.n	800a318 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	431a      	orrs	r2, r3
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f000 f910 	bl	800a538 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2201      	movs	r2, #1
 800a31c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2200      	movs	r2, #0
 800a324:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	f003 0310 	and.w	r3, r3, #16
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d104      	bne.n	800a33a <HAL_SD_IRQHandler+0x172>
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	f003 0320 	and.w	r3, r3, #32
 800a336:	2b00      	cmp	r3, #0
 800a338:	d002      	beq.n	800a340 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f004 fd76 	bl	800ee2c <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	f003 0301 	and.w	r3, r3, #1
 800a346:	2b00      	cmp	r3, #0
 800a348:	d105      	bne.n	800a356 <HAL_SD_IRQHandler+0x18e>
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	f003 0302 	and.w	r3, r3, #2
 800a350:	2b00      	cmp	r3, #0
 800a352:	f000 80eb 	beq.w	800a52c <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f004 fd72 	bl	800ee40 <HAL_SD_RxCpltCallback>
}
 800a35c:	e0e6      	b.n	800a52c <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a364:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d00d      	beq.n	800a388 <HAL_SD_IRQHandler+0x1c0>
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	f003 0308 	and.w	r3, r3, #8
 800a372:	2b00      	cmp	r3, #0
 800a374:	d008      	beq.n	800a388 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f000 f92e 	bl	800a5d8 <SD_Write_IT>
 800a37c:	e0d6      	b.n	800a52c <HAL_SD_IRQHandler+0x364>
 800a37e:	bf00      	nop
 800a380:	ffff3ec5 	.word	0xffff3ec5
 800a384:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a38e:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800a392:	2b00      	cmp	r3, #0
 800a394:	f000 809d 	beq.w	800a4d2 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a39e:	f003 0302 	and.w	r3, r3, #2
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d005      	beq.n	800a3b2 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3aa:	f043 0202 	orr.w	r2, r3, #2
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3b8:	f003 0308 	and.w	r3, r3, #8
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d005      	beq.n	800a3cc <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3c4:	f043 0208 	orr.w	r2, r3, #8
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3d2:	f003 0320 	and.w	r3, r3, #32
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d005      	beq.n	800a3e6 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3de:	f043 0220 	orr.w	r2, r3, #32
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3ec:	f003 0310 	and.w	r3, r3, #16
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d005      	beq.n	800a400 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3f8:	f043 0210 	orr.w	r2, r3, #16
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	4a4b      	ldr	r2, [pc, #300]	; (800a534 <HAL_SD_IRQHandler+0x36c>)
 800a406:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800a416:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	68da      	ldr	r2, [r3, #12]
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a426:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a436:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	68da      	ldr	r2, [r3, #12]
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a446:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	4618      	mov	r0, r3
 800a44e:	f003 f84d 	bl	800d4ec <SDMMC_CmdStopTransfer>
 800a452:	4602      	mov	r2, r0
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a458:	431a      	orrs	r2, r3
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	68da      	ldr	r2, [r3, #12]
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a46c:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a476:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	f003 0308 	and.w	r3, r3, #8
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d00a      	beq.n	800a498 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	2201      	movs	r2, #1
 800a486:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2200      	movs	r2, #0
 800a48e:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800a490:	6878      	ldr	r0, [r7, #4]
 800a492:	f000 f851 	bl	800a538 <HAL_SD_ErrorCallback>
}
 800a496:	e049      	b.n	800a52c <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d044      	beq.n	800a52c <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d040      	beq.n	800a52c <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800a4b8:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	2200      	movs	r2, #0
 800a4c0:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	2201      	movs	r2, #1
 800a4c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800a4ca:	6878      	ldr	r0, [r7, #4]
 800a4cc:	f000 f834 	bl	800a538 <HAL_SD_ErrorCallback>
}
 800a4d0:	e02c      	b.n	800a52c <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d025      	beq.n	800a52c <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4e8:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4f0:	f003 0304 	and.w	r3, r3, #4
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d10c      	bne.n	800a512 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	f003 0320 	and.w	r3, r3, #32
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d003      	beq.n	800a50a <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f000 f8d0 	bl	800a6a8 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800a508:	e010      	b.n	800a52c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800a50a:	6878      	ldr	r0, [r7, #4]
 800a50c:	f000 f8b8 	bl	800a680 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800a510:	e00c      	b.n	800a52c <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	f003 0320 	and.w	r3, r3, #32
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d003      	beq.n	800a524 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	f000 f8b9 	bl	800a694 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800a522:	e003      	b.n	800a52c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800a524:	6878      	ldr	r0, [r7, #4]
 800a526:	f000 f8a1 	bl	800a66c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800a52a:	e7ff      	b.n	800a52c <HAL_SD_IRQHandler+0x364>
 800a52c:	bf00      	nop
 800a52e:	3710      	adds	r7, #16
 800a530:	46bd      	mov	sp, r7
 800a532:	bd80      	pop	{r7, pc}
 800a534:	18000f3a 	.word	0x18000f3a

0800a538 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800a538:	b480      	push	{r7}
 800a53a:	b083      	sub	sp, #12
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800a540:	bf00      	nop
 800a542:	370c      	adds	r7, #12
 800a544:	46bd      	mov	sp, r7
 800a546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54a:	4770      	bx	lr

0800a54c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b086      	sub	sp, #24
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a558:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a55e:	2b1f      	cmp	r3, #31
 800a560:	d936      	bls.n	800a5d0 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800a562:	2300      	movs	r3, #0
 800a564:	617b      	str	r3, [r7, #20]
 800a566:	e027      	b.n	800a5b8 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	4618      	mov	r0, r3
 800a56e:	f002 ff55 	bl	800d41c <SDMMC_ReadFIFO>
 800a572:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	b2da      	uxtb	r2, r3
 800a578:	693b      	ldr	r3, [r7, #16]
 800a57a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a57c:	693b      	ldr	r3, [r7, #16]
 800a57e:	3301      	adds	r3, #1
 800a580:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	0a1b      	lsrs	r3, r3, #8
 800a586:	b2da      	uxtb	r2, r3
 800a588:	693b      	ldr	r3, [r7, #16]
 800a58a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a58c:	693b      	ldr	r3, [r7, #16]
 800a58e:	3301      	adds	r3, #1
 800a590:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	0c1b      	lsrs	r3, r3, #16
 800a596:	b2da      	uxtb	r2, r3
 800a598:	693b      	ldr	r3, [r7, #16]
 800a59a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a59c:	693b      	ldr	r3, [r7, #16]
 800a59e:	3301      	adds	r3, #1
 800a5a0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	0e1b      	lsrs	r3, r3, #24
 800a5a6:	b2da      	uxtb	r2, r3
 800a5a8:	693b      	ldr	r3, [r7, #16]
 800a5aa:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a5ac:	693b      	ldr	r3, [r7, #16]
 800a5ae:	3301      	adds	r3, #1
 800a5b0:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800a5b2:	697b      	ldr	r3, [r7, #20]
 800a5b4:	3301      	adds	r3, #1
 800a5b6:	617b      	str	r3, [r7, #20]
 800a5b8:	697b      	ldr	r3, [r7, #20]
 800a5ba:	2b07      	cmp	r3, #7
 800a5bc:	d9d4      	bls.n	800a568 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	693a      	ldr	r2, [r7, #16]
 800a5c2:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5c8:	f1a3 0220 	sub.w	r2, r3, #32
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800a5d0:	bf00      	nop
 800a5d2:	3718      	adds	r7, #24
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bd80      	pop	{r7, pc}

0800a5d8 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b086      	sub	sp, #24
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	69db      	ldr	r3, [r3, #28]
 800a5e4:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6a1b      	ldr	r3, [r3, #32]
 800a5ea:	2b1f      	cmp	r3, #31
 800a5ec:	d93a      	bls.n	800a664 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	617b      	str	r3, [r7, #20]
 800a5f2:	e02b      	b.n	800a64c <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800a5f4:	693b      	ldr	r3, [r7, #16]
 800a5f6:	781b      	ldrb	r3, [r3, #0]
 800a5f8:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a5fa:	693b      	ldr	r3, [r7, #16]
 800a5fc:	3301      	adds	r3, #1
 800a5fe:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800a600:	693b      	ldr	r3, [r7, #16]
 800a602:	781b      	ldrb	r3, [r3, #0]
 800a604:	021a      	lsls	r2, r3, #8
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	4313      	orrs	r3, r2
 800a60a:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a60c:	693b      	ldr	r3, [r7, #16]
 800a60e:	3301      	adds	r3, #1
 800a610:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800a612:	693b      	ldr	r3, [r7, #16]
 800a614:	781b      	ldrb	r3, [r3, #0]
 800a616:	041a      	lsls	r2, r3, #16
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	4313      	orrs	r3, r2
 800a61c:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a61e:	693b      	ldr	r3, [r7, #16]
 800a620:	3301      	adds	r3, #1
 800a622:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800a624:	693b      	ldr	r3, [r7, #16]
 800a626:	781b      	ldrb	r3, [r3, #0]
 800a628:	061a      	lsls	r2, r3, #24
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	4313      	orrs	r3, r2
 800a62e:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a630:	693b      	ldr	r3, [r7, #16]
 800a632:	3301      	adds	r3, #1
 800a634:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	f107 020c 	add.w	r2, r7, #12
 800a63e:	4611      	mov	r1, r2
 800a640:	4618      	mov	r0, r3
 800a642:	f002 fef8 	bl	800d436 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800a646:	697b      	ldr	r3, [r7, #20]
 800a648:	3301      	adds	r3, #1
 800a64a:	617b      	str	r3, [r7, #20]
 800a64c:	697b      	ldr	r3, [r7, #20]
 800a64e:	2b07      	cmp	r3, #7
 800a650:	d9d0      	bls.n	800a5f4 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	693a      	ldr	r2, [r7, #16]
 800a656:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	6a1b      	ldr	r3, [r3, #32]
 800a65c:	f1a3 0220 	sub.w	r2, r3, #32
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	621a      	str	r2, [r3, #32]
  }
}
 800a664:	bf00      	nop
 800a666:	3718      	adds	r7, #24
 800a668:	46bd      	mov	sp, r7
 800a66a:	bd80      	pop	{r7, pc}

0800a66c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800a66c:	b480      	push	{r7}
 800a66e:	b083      	sub	sp, #12
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800a674:	bf00      	nop
 800a676:	370c      	adds	r7, #12
 800a678:	46bd      	mov	sp, r7
 800a67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67e:	4770      	bx	lr

0800a680 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800a680:	b480      	push	{r7}
 800a682:	b083      	sub	sp, #12
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800a688:	bf00      	nop
 800a68a:	370c      	adds	r7, #12
 800a68c:	46bd      	mov	sp, r7
 800a68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a692:	4770      	bx	lr

0800a694 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800a694:	b480      	push	{r7}
 800a696:	b083      	sub	sp, #12
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800a69c:	bf00      	nop
 800a69e:	370c      	adds	r7, #12
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a6:	4770      	bx	lr

0800a6a8 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b083      	sub	sp, #12
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800a6b0:	bf00      	nop
 800a6b2:	370c      	adds	r7, #12
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ba:	4770      	bx	lr

0800a6bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b082      	sub	sp, #8
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d101      	bne.n	800a6ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a6ca:	2301      	movs	r3, #1
 800a6cc:	e049      	b.n	800a762 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a6d4:	b2db      	uxtb	r3, r3
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d106      	bne.n	800a6e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2200      	movs	r2, #0
 800a6de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	f7f7 fab2 	bl	8001c4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2202      	movs	r2, #2
 800a6ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681a      	ldr	r2, [r3, #0]
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	3304      	adds	r3, #4
 800a6f8:	4619      	mov	r1, r3
 800a6fa:	4610      	mov	r0, r2
 800a6fc:	f000 fbec 	bl	800aed8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2201      	movs	r2, #1
 800a704:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2201      	movs	r2, #1
 800a70c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2201      	movs	r2, #1
 800a714:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2201      	movs	r2, #1
 800a71c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2201      	movs	r2, #1
 800a724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2201      	movs	r2, #1
 800a72c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2201      	movs	r2, #1
 800a734:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2201      	movs	r2, #1
 800a73c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2201      	movs	r2, #1
 800a744:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2201      	movs	r2, #1
 800a74c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2201      	movs	r2, #1
 800a754:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2201      	movs	r2, #1
 800a75c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a760:	2300      	movs	r3, #0
}
 800a762:	4618      	mov	r0, r3
 800a764:	3708      	adds	r7, #8
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}

0800a76a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a76a:	b580      	push	{r7, lr}
 800a76c:	b082      	sub	sp, #8
 800a76e:	af00      	add	r7, sp, #0
 800a770:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d101      	bne.n	800a77c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a778:	2301      	movs	r3, #1
 800a77a:	e049      	b.n	800a810 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a782:	b2db      	uxtb	r3, r3
 800a784:	2b00      	cmp	r3, #0
 800a786:	d106      	bne.n	800a796 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2200      	movs	r2, #0
 800a78c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a790:	6878      	ldr	r0, [r7, #4]
 800a792:	f000 f841 	bl	800a818 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	2202      	movs	r2, #2
 800a79a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681a      	ldr	r2, [r3, #0]
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	3304      	adds	r3, #4
 800a7a6:	4619      	mov	r1, r3
 800a7a8:	4610      	mov	r0, r2
 800a7aa:	f000 fb95 	bl	800aed8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	2201      	movs	r2, #1
 800a7b2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	2201      	movs	r2, #1
 800a7ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2201      	movs	r2, #1
 800a7c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	2201      	movs	r2, #1
 800a7ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	2201      	movs	r2, #1
 800a7d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2201      	movs	r2, #1
 800a7da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2201      	movs	r2, #1
 800a7e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2201      	movs	r2, #1
 800a7ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	2201      	movs	r2, #1
 800a7f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2201      	movs	r2, #1
 800a7fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2201      	movs	r2, #1
 800a802:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2201      	movs	r2, #1
 800a80a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a80e:	2300      	movs	r3, #0
}
 800a810:	4618      	mov	r0, r3
 800a812:	3708      	adds	r7, #8
 800a814:	46bd      	mov	sp, r7
 800a816:	bd80      	pop	{r7, pc}

0800a818 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a818:	b480      	push	{r7}
 800a81a:	b083      	sub	sp, #12
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a820:	bf00      	nop
 800a822:	370c      	adds	r7, #12
 800a824:	46bd      	mov	sp, r7
 800a826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82a:	4770      	bx	lr

0800a82c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b082      	sub	sp, #8
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	691b      	ldr	r3, [r3, #16]
 800a83a:	f003 0302 	and.w	r3, r3, #2
 800a83e:	2b02      	cmp	r3, #2
 800a840:	d122      	bne.n	800a888 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	68db      	ldr	r3, [r3, #12]
 800a848:	f003 0302 	and.w	r3, r3, #2
 800a84c:	2b02      	cmp	r3, #2
 800a84e:	d11b      	bne.n	800a888 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	f06f 0202 	mvn.w	r2, #2
 800a858:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2201      	movs	r2, #1
 800a85e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	699b      	ldr	r3, [r3, #24]
 800a866:	f003 0303 	and.w	r3, r3, #3
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d003      	beq.n	800a876 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a86e:	6878      	ldr	r0, [r7, #4]
 800a870:	f000 fb14 	bl	800ae9c <HAL_TIM_IC_CaptureCallback>
 800a874:	e005      	b.n	800a882 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	f000 fb06 	bl	800ae88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a87c:	6878      	ldr	r0, [r7, #4]
 800a87e:	f000 fb17 	bl	800aeb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2200      	movs	r2, #0
 800a886:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	691b      	ldr	r3, [r3, #16]
 800a88e:	f003 0304 	and.w	r3, r3, #4
 800a892:	2b04      	cmp	r3, #4
 800a894:	d122      	bne.n	800a8dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	68db      	ldr	r3, [r3, #12]
 800a89c:	f003 0304 	and.w	r3, r3, #4
 800a8a0:	2b04      	cmp	r3, #4
 800a8a2:	d11b      	bne.n	800a8dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	f06f 0204 	mvn.w	r2, #4
 800a8ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	2202      	movs	r2, #2
 800a8b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	699b      	ldr	r3, [r3, #24]
 800a8ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d003      	beq.n	800a8ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	f000 faea 	bl	800ae9c <HAL_TIM_IC_CaptureCallback>
 800a8c8:	e005      	b.n	800a8d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	f000 fadc 	bl	800ae88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8d0:	6878      	ldr	r0, [r7, #4]
 800a8d2:	f000 faed 	bl	800aeb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2200      	movs	r2, #0
 800a8da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	691b      	ldr	r3, [r3, #16]
 800a8e2:	f003 0308 	and.w	r3, r3, #8
 800a8e6:	2b08      	cmp	r3, #8
 800a8e8:	d122      	bne.n	800a930 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	68db      	ldr	r3, [r3, #12]
 800a8f0:	f003 0308 	and.w	r3, r3, #8
 800a8f4:	2b08      	cmp	r3, #8
 800a8f6:	d11b      	bne.n	800a930 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	f06f 0208 	mvn.w	r2, #8
 800a900:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2204      	movs	r2, #4
 800a906:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	69db      	ldr	r3, [r3, #28]
 800a90e:	f003 0303 	and.w	r3, r3, #3
 800a912:	2b00      	cmp	r3, #0
 800a914:	d003      	beq.n	800a91e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a916:	6878      	ldr	r0, [r7, #4]
 800a918:	f000 fac0 	bl	800ae9c <HAL_TIM_IC_CaptureCallback>
 800a91c:	e005      	b.n	800a92a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a91e:	6878      	ldr	r0, [r7, #4]
 800a920:	f000 fab2 	bl	800ae88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a924:	6878      	ldr	r0, [r7, #4]
 800a926:	f000 fac3 	bl	800aeb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2200      	movs	r2, #0
 800a92e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	691b      	ldr	r3, [r3, #16]
 800a936:	f003 0310 	and.w	r3, r3, #16
 800a93a:	2b10      	cmp	r3, #16
 800a93c:	d122      	bne.n	800a984 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	68db      	ldr	r3, [r3, #12]
 800a944:	f003 0310 	and.w	r3, r3, #16
 800a948:	2b10      	cmp	r3, #16
 800a94a:	d11b      	bne.n	800a984 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	f06f 0210 	mvn.w	r2, #16
 800a954:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2208      	movs	r2, #8
 800a95a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	69db      	ldr	r3, [r3, #28]
 800a962:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a966:	2b00      	cmp	r3, #0
 800a968:	d003      	beq.n	800a972 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a96a:	6878      	ldr	r0, [r7, #4]
 800a96c:	f000 fa96 	bl	800ae9c <HAL_TIM_IC_CaptureCallback>
 800a970:	e005      	b.n	800a97e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	f000 fa88 	bl	800ae88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a978:	6878      	ldr	r0, [r7, #4]
 800a97a:	f000 fa99 	bl	800aeb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	2200      	movs	r2, #0
 800a982:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	691b      	ldr	r3, [r3, #16]
 800a98a:	f003 0301 	and.w	r3, r3, #1
 800a98e:	2b01      	cmp	r3, #1
 800a990:	d10e      	bne.n	800a9b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	68db      	ldr	r3, [r3, #12]
 800a998:	f003 0301 	and.w	r3, r3, #1
 800a99c:	2b01      	cmp	r3, #1
 800a99e:	d107      	bne.n	800a9b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	f06f 0201 	mvn.w	r2, #1
 800a9a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	f000 fa62 	bl	800ae74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	691b      	ldr	r3, [r3, #16]
 800a9b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9ba:	2b80      	cmp	r3, #128	; 0x80
 800a9bc:	d10e      	bne.n	800a9dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	68db      	ldr	r3, [r3, #12]
 800a9c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9c8:	2b80      	cmp	r3, #128	; 0x80
 800a9ca:	d107      	bne.n	800a9dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a9d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f000 ff94 	bl	800b904 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	691b      	ldr	r3, [r3, #16]
 800a9e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a9ea:	d10e      	bne.n	800aa0a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	68db      	ldr	r3, [r3, #12]
 800a9f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9f6:	2b80      	cmp	r3, #128	; 0x80
 800a9f8:	d107      	bne.n	800aa0a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800aa02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800aa04:	6878      	ldr	r0, [r7, #4]
 800aa06:	f000 ff87 	bl	800b918 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	691b      	ldr	r3, [r3, #16]
 800aa10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa14:	2b40      	cmp	r3, #64	; 0x40
 800aa16:	d10e      	bne.n	800aa36 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	68db      	ldr	r3, [r3, #12]
 800aa1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa22:	2b40      	cmp	r3, #64	; 0x40
 800aa24:	d107      	bne.n	800aa36 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800aa2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800aa30:	6878      	ldr	r0, [r7, #4]
 800aa32:	f000 fa47 	bl	800aec4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	691b      	ldr	r3, [r3, #16]
 800aa3c:	f003 0320 	and.w	r3, r3, #32
 800aa40:	2b20      	cmp	r3, #32
 800aa42:	d10e      	bne.n	800aa62 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	68db      	ldr	r3, [r3, #12]
 800aa4a:	f003 0320 	and.w	r3, r3, #32
 800aa4e:	2b20      	cmp	r3, #32
 800aa50:	d107      	bne.n	800aa62 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	f06f 0220 	mvn.w	r2, #32
 800aa5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800aa5c:	6878      	ldr	r0, [r7, #4]
 800aa5e:	f000 ff47 	bl	800b8f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aa62:	bf00      	nop
 800aa64:	3708      	adds	r7, #8
 800aa66:	46bd      	mov	sp, r7
 800aa68:	bd80      	pop	{r7, pc}
	...

0800aa6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b084      	sub	sp, #16
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	60f8      	str	r0, [r7, #12]
 800aa74:	60b9      	str	r1, [r7, #8]
 800aa76:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa7e:	2b01      	cmp	r3, #1
 800aa80:	d101      	bne.n	800aa86 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800aa82:	2302      	movs	r3, #2
 800aa84:	e0fd      	b.n	800ac82 <HAL_TIM_PWM_ConfigChannel+0x216>
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	2201      	movs	r2, #1
 800aa8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	2b14      	cmp	r3, #20
 800aa92:	f200 80f0 	bhi.w	800ac76 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800aa96:	a201      	add	r2, pc, #4	; (adr r2, 800aa9c <HAL_TIM_PWM_ConfigChannel+0x30>)
 800aa98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa9c:	0800aaf1 	.word	0x0800aaf1
 800aaa0:	0800ac77 	.word	0x0800ac77
 800aaa4:	0800ac77 	.word	0x0800ac77
 800aaa8:	0800ac77 	.word	0x0800ac77
 800aaac:	0800ab31 	.word	0x0800ab31
 800aab0:	0800ac77 	.word	0x0800ac77
 800aab4:	0800ac77 	.word	0x0800ac77
 800aab8:	0800ac77 	.word	0x0800ac77
 800aabc:	0800ab73 	.word	0x0800ab73
 800aac0:	0800ac77 	.word	0x0800ac77
 800aac4:	0800ac77 	.word	0x0800ac77
 800aac8:	0800ac77 	.word	0x0800ac77
 800aacc:	0800abb3 	.word	0x0800abb3
 800aad0:	0800ac77 	.word	0x0800ac77
 800aad4:	0800ac77 	.word	0x0800ac77
 800aad8:	0800ac77 	.word	0x0800ac77
 800aadc:	0800abf5 	.word	0x0800abf5
 800aae0:	0800ac77 	.word	0x0800ac77
 800aae4:	0800ac77 	.word	0x0800ac77
 800aae8:	0800ac77 	.word	0x0800ac77
 800aaec:	0800ac35 	.word	0x0800ac35
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	68b9      	ldr	r1, [r7, #8]
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	f000 fa88 	bl	800b00c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	699a      	ldr	r2, [r3, #24]
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	f042 0208 	orr.w	r2, r2, #8
 800ab0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	699a      	ldr	r2, [r3, #24]
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f022 0204 	bic.w	r2, r2, #4
 800ab1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	6999      	ldr	r1, [r3, #24]
 800ab22:	68bb      	ldr	r3, [r7, #8]
 800ab24:	691a      	ldr	r2, [r3, #16]
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	430a      	orrs	r2, r1
 800ab2c:	619a      	str	r2, [r3, #24]
      break;
 800ab2e:	e0a3      	b.n	800ac78 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	68b9      	ldr	r1, [r7, #8]
 800ab36:	4618      	mov	r0, r3
 800ab38:	f000 faf8 	bl	800b12c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	699a      	ldr	r2, [r3, #24]
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ab4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	699a      	ldr	r2, [r3, #24]
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ab5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	6999      	ldr	r1, [r3, #24]
 800ab62:	68bb      	ldr	r3, [r7, #8]
 800ab64:	691b      	ldr	r3, [r3, #16]
 800ab66:	021a      	lsls	r2, r3, #8
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	430a      	orrs	r2, r1
 800ab6e:	619a      	str	r2, [r3, #24]
      break;
 800ab70:	e082      	b.n	800ac78 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	68b9      	ldr	r1, [r7, #8]
 800ab78:	4618      	mov	r0, r3
 800ab7a:	f000 fb61 	bl	800b240 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	69da      	ldr	r2, [r3, #28]
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	f042 0208 	orr.w	r2, r2, #8
 800ab8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	69da      	ldr	r2, [r3, #28]
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	f022 0204 	bic.w	r2, r2, #4
 800ab9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	69d9      	ldr	r1, [r3, #28]
 800aba4:	68bb      	ldr	r3, [r7, #8]
 800aba6:	691a      	ldr	r2, [r3, #16]
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	430a      	orrs	r2, r1
 800abae:	61da      	str	r2, [r3, #28]
      break;
 800abb0:	e062      	b.n	800ac78 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	68b9      	ldr	r1, [r7, #8]
 800abb8:	4618      	mov	r0, r3
 800abba:	f000 fbc7 	bl	800b34c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	69da      	ldr	r2, [r3, #28]
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800abcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	69da      	ldr	r2, [r3, #28]
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800abdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	69d9      	ldr	r1, [r3, #28]
 800abe4:	68bb      	ldr	r3, [r7, #8]
 800abe6:	691b      	ldr	r3, [r3, #16]
 800abe8:	021a      	lsls	r2, r3, #8
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	430a      	orrs	r2, r1
 800abf0:	61da      	str	r2, [r3, #28]
      break;
 800abf2:	e041      	b.n	800ac78 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	68b9      	ldr	r1, [r7, #8]
 800abfa:	4618      	mov	r0, r3
 800abfc:	f000 fc0e 	bl	800b41c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	f042 0208 	orr.w	r2, r2, #8
 800ac0e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	f022 0204 	bic.w	r2, r2, #4
 800ac1e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	691a      	ldr	r2, [r3, #16]
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	430a      	orrs	r2, r1
 800ac30:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ac32:	e021      	b.n	800ac78 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	68b9      	ldr	r1, [r7, #8]
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f000 fc50 	bl	800b4e0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ac4e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ac5e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ac66:	68bb      	ldr	r3, [r7, #8]
 800ac68:	691b      	ldr	r3, [r3, #16]
 800ac6a:	021a      	lsls	r2, r3, #8
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	430a      	orrs	r2, r1
 800ac72:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ac74:	e000      	b.n	800ac78 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800ac76:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ac80:	2300      	movs	r3, #0
}
 800ac82:	4618      	mov	r0, r3
 800ac84:	3710      	adds	r7, #16
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bd80      	pop	{r7, pc}
 800ac8a:	bf00      	nop

0800ac8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b084      	sub	sp, #16
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
 800ac94:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac9c:	2b01      	cmp	r3, #1
 800ac9e:	d101      	bne.n	800aca4 <HAL_TIM_ConfigClockSource+0x18>
 800aca0:	2302      	movs	r3, #2
 800aca2:	e0db      	b.n	800ae5c <HAL_TIM_ConfigClockSource+0x1d0>
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2201      	movs	r2, #1
 800aca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2202      	movs	r2, #2
 800acb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	689b      	ldr	r3, [r3, #8]
 800acba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800acbc:	68fa      	ldr	r2, [r7, #12]
 800acbe:	4b69      	ldr	r3, [pc, #420]	; (800ae64 <HAL_TIM_ConfigClockSource+0x1d8>)
 800acc0:	4013      	ands	r3, r2
 800acc2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800acca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	68fa      	ldr	r2, [r7, #12]
 800acd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	4a63      	ldr	r2, [pc, #396]	; (800ae68 <HAL_TIM_ConfigClockSource+0x1dc>)
 800acda:	4293      	cmp	r3, r2
 800acdc:	f000 80a9 	beq.w	800ae32 <HAL_TIM_ConfigClockSource+0x1a6>
 800ace0:	4a61      	ldr	r2, [pc, #388]	; (800ae68 <HAL_TIM_ConfigClockSource+0x1dc>)
 800ace2:	4293      	cmp	r3, r2
 800ace4:	f200 80ae 	bhi.w	800ae44 <HAL_TIM_ConfigClockSource+0x1b8>
 800ace8:	4a60      	ldr	r2, [pc, #384]	; (800ae6c <HAL_TIM_ConfigClockSource+0x1e0>)
 800acea:	4293      	cmp	r3, r2
 800acec:	f000 80a1 	beq.w	800ae32 <HAL_TIM_ConfigClockSource+0x1a6>
 800acf0:	4a5e      	ldr	r2, [pc, #376]	; (800ae6c <HAL_TIM_ConfigClockSource+0x1e0>)
 800acf2:	4293      	cmp	r3, r2
 800acf4:	f200 80a6 	bhi.w	800ae44 <HAL_TIM_ConfigClockSource+0x1b8>
 800acf8:	4a5d      	ldr	r2, [pc, #372]	; (800ae70 <HAL_TIM_ConfigClockSource+0x1e4>)
 800acfa:	4293      	cmp	r3, r2
 800acfc:	f000 8099 	beq.w	800ae32 <HAL_TIM_ConfigClockSource+0x1a6>
 800ad00:	4a5b      	ldr	r2, [pc, #364]	; (800ae70 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ad02:	4293      	cmp	r3, r2
 800ad04:	f200 809e 	bhi.w	800ae44 <HAL_TIM_ConfigClockSource+0x1b8>
 800ad08:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ad0c:	f000 8091 	beq.w	800ae32 <HAL_TIM_ConfigClockSource+0x1a6>
 800ad10:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ad14:	f200 8096 	bhi.w	800ae44 <HAL_TIM_ConfigClockSource+0x1b8>
 800ad18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad1c:	f000 8089 	beq.w	800ae32 <HAL_TIM_ConfigClockSource+0x1a6>
 800ad20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad24:	f200 808e 	bhi.w	800ae44 <HAL_TIM_ConfigClockSource+0x1b8>
 800ad28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad2c:	d03e      	beq.n	800adac <HAL_TIM_ConfigClockSource+0x120>
 800ad2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad32:	f200 8087 	bhi.w	800ae44 <HAL_TIM_ConfigClockSource+0x1b8>
 800ad36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad3a:	f000 8085 	beq.w	800ae48 <HAL_TIM_ConfigClockSource+0x1bc>
 800ad3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad42:	d87f      	bhi.n	800ae44 <HAL_TIM_ConfigClockSource+0x1b8>
 800ad44:	2b70      	cmp	r3, #112	; 0x70
 800ad46:	d01a      	beq.n	800ad7e <HAL_TIM_ConfigClockSource+0xf2>
 800ad48:	2b70      	cmp	r3, #112	; 0x70
 800ad4a:	d87b      	bhi.n	800ae44 <HAL_TIM_ConfigClockSource+0x1b8>
 800ad4c:	2b60      	cmp	r3, #96	; 0x60
 800ad4e:	d050      	beq.n	800adf2 <HAL_TIM_ConfigClockSource+0x166>
 800ad50:	2b60      	cmp	r3, #96	; 0x60
 800ad52:	d877      	bhi.n	800ae44 <HAL_TIM_ConfigClockSource+0x1b8>
 800ad54:	2b50      	cmp	r3, #80	; 0x50
 800ad56:	d03c      	beq.n	800add2 <HAL_TIM_ConfigClockSource+0x146>
 800ad58:	2b50      	cmp	r3, #80	; 0x50
 800ad5a:	d873      	bhi.n	800ae44 <HAL_TIM_ConfigClockSource+0x1b8>
 800ad5c:	2b40      	cmp	r3, #64	; 0x40
 800ad5e:	d058      	beq.n	800ae12 <HAL_TIM_ConfigClockSource+0x186>
 800ad60:	2b40      	cmp	r3, #64	; 0x40
 800ad62:	d86f      	bhi.n	800ae44 <HAL_TIM_ConfigClockSource+0x1b8>
 800ad64:	2b30      	cmp	r3, #48	; 0x30
 800ad66:	d064      	beq.n	800ae32 <HAL_TIM_ConfigClockSource+0x1a6>
 800ad68:	2b30      	cmp	r3, #48	; 0x30
 800ad6a:	d86b      	bhi.n	800ae44 <HAL_TIM_ConfigClockSource+0x1b8>
 800ad6c:	2b20      	cmp	r3, #32
 800ad6e:	d060      	beq.n	800ae32 <HAL_TIM_ConfigClockSource+0x1a6>
 800ad70:	2b20      	cmp	r3, #32
 800ad72:	d867      	bhi.n	800ae44 <HAL_TIM_ConfigClockSource+0x1b8>
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d05c      	beq.n	800ae32 <HAL_TIM_ConfigClockSource+0x1a6>
 800ad78:	2b10      	cmp	r3, #16
 800ad7a:	d05a      	beq.n	800ae32 <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800ad7c:	e062      	b.n	800ae44 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6818      	ldr	r0, [r3, #0]
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	6899      	ldr	r1, [r3, #8]
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	685a      	ldr	r2, [r3, #4]
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	68db      	ldr	r3, [r3, #12]
 800ad8e:	f000 fc89 	bl	800b6a4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	689b      	ldr	r3, [r3, #8]
 800ad98:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ada0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	68fa      	ldr	r2, [r7, #12]
 800ada8:	609a      	str	r2, [r3, #8]
      break;
 800adaa:	e04e      	b.n	800ae4a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6818      	ldr	r0, [r3, #0]
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	6899      	ldr	r1, [r3, #8]
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	685a      	ldr	r2, [r3, #4]
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	68db      	ldr	r3, [r3, #12]
 800adbc:	f000 fc72 	bl	800b6a4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	689a      	ldr	r2, [r3, #8]
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800adce:	609a      	str	r2, [r3, #8]
      break;
 800add0:	e03b      	b.n	800ae4a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6818      	ldr	r0, [r3, #0]
 800add6:	683b      	ldr	r3, [r7, #0]
 800add8:	6859      	ldr	r1, [r3, #4]
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	68db      	ldr	r3, [r3, #12]
 800adde:	461a      	mov	r2, r3
 800ade0:	f000 fbe2 	bl	800b5a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	2150      	movs	r1, #80	; 0x50
 800adea:	4618      	mov	r0, r3
 800adec:	f000 fc3c 	bl	800b668 <TIM_ITRx_SetConfig>
      break;
 800adf0:	e02b      	b.n	800ae4a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	6818      	ldr	r0, [r3, #0]
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	6859      	ldr	r1, [r3, #4]
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	68db      	ldr	r3, [r3, #12]
 800adfe:	461a      	mov	r2, r3
 800ae00:	f000 fc01 	bl	800b606 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	2160      	movs	r1, #96	; 0x60
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	f000 fc2c 	bl	800b668 <TIM_ITRx_SetConfig>
      break;
 800ae10:	e01b      	b.n	800ae4a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6818      	ldr	r0, [r3, #0]
 800ae16:	683b      	ldr	r3, [r7, #0]
 800ae18:	6859      	ldr	r1, [r3, #4]
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	68db      	ldr	r3, [r3, #12]
 800ae1e:	461a      	mov	r2, r3
 800ae20:	f000 fbc2 	bl	800b5a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	2140      	movs	r1, #64	; 0x40
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	f000 fc1c 	bl	800b668 <TIM_ITRx_SetConfig>
      break;
 800ae30:	e00b      	b.n	800ae4a <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681a      	ldr	r2, [r3, #0]
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	4619      	mov	r1, r3
 800ae3c:	4610      	mov	r0, r2
 800ae3e:	f000 fc13 	bl	800b668 <TIM_ITRx_SetConfig>
        break;
 800ae42:	e002      	b.n	800ae4a <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800ae44:	bf00      	nop
 800ae46:	e000      	b.n	800ae4a <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800ae48:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2201      	movs	r2, #1
 800ae4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	2200      	movs	r2, #0
 800ae56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ae5a:	2300      	movs	r3, #0
}
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	3710      	adds	r7, #16
 800ae60:	46bd      	mov	sp, r7
 800ae62:	bd80      	pop	{r7, pc}
 800ae64:	ffceff88 	.word	0xffceff88
 800ae68:	00100040 	.word	0x00100040
 800ae6c:	00100030 	.word	0x00100030
 800ae70:	00100020 	.word	0x00100020

0800ae74 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ae74:	b480      	push	{r7}
 800ae76:	b083      	sub	sp, #12
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800ae7c:	bf00      	nop
 800ae7e:	370c      	adds	r7, #12
 800ae80:	46bd      	mov	sp, r7
 800ae82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae86:	4770      	bx	lr

0800ae88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ae88:	b480      	push	{r7}
 800ae8a:	b083      	sub	sp, #12
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ae90:	bf00      	nop
 800ae92:	370c      	adds	r7, #12
 800ae94:	46bd      	mov	sp, r7
 800ae96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9a:	4770      	bx	lr

0800ae9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ae9c:	b480      	push	{r7}
 800ae9e:	b083      	sub	sp, #12
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aea4:	bf00      	nop
 800aea6:	370c      	adds	r7, #12
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeae:	4770      	bx	lr

0800aeb0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aeb0:	b480      	push	{r7}
 800aeb2:	b083      	sub	sp, #12
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aeb8:	bf00      	nop
 800aeba:	370c      	adds	r7, #12
 800aebc:	46bd      	mov	sp, r7
 800aebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec2:	4770      	bx	lr

0800aec4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aec4:	b480      	push	{r7}
 800aec6:	b083      	sub	sp, #12
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aecc:	bf00      	nop
 800aece:	370c      	adds	r7, #12
 800aed0:	46bd      	mov	sp, r7
 800aed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed6:	4770      	bx	lr

0800aed8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800aed8:	b480      	push	{r7}
 800aeda:	b085      	sub	sp, #20
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
 800aee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	4a40      	ldr	r2, [pc, #256]	; (800afec <TIM_Base_SetConfig+0x114>)
 800aeec:	4293      	cmp	r3, r2
 800aeee:	d013      	beq.n	800af18 <TIM_Base_SetConfig+0x40>
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aef6:	d00f      	beq.n	800af18 <TIM_Base_SetConfig+0x40>
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	4a3d      	ldr	r2, [pc, #244]	; (800aff0 <TIM_Base_SetConfig+0x118>)
 800aefc:	4293      	cmp	r3, r2
 800aefe:	d00b      	beq.n	800af18 <TIM_Base_SetConfig+0x40>
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	4a3c      	ldr	r2, [pc, #240]	; (800aff4 <TIM_Base_SetConfig+0x11c>)
 800af04:	4293      	cmp	r3, r2
 800af06:	d007      	beq.n	800af18 <TIM_Base_SetConfig+0x40>
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	4a3b      	ldr	r2, [pc, #236]	; (800aff8 <TIM_Base_SetConfig+0x120>)
 800af0c:	4293      	cmp	r3, r2
 800af0e:	d003      	beq.n	800af18 <TIM_Base_SetConfig+0x40>
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	4a3a      	ldr	r2, [pc, #232]	; (800affc <TIM_Base_SetConfig+0x124>)
 800af14:	4293      	cmp	r3, r2
 800af16:	d108      	bne.n	800af2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	685b      	ldr	r3, [r3, #4]
 800af24:	68fa      	ldr	r2, [r7, #12]
 800af26:	4313      	orrs	r3, r2
 800af28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	4a2f      	ldr	r2, [pc, #188]	; (800afec <TIM_Base_SetConfig+0x114>)
 800af2e:	4293      	cmp	r3, r2
 800af30:	d01f      	beq.n	800af72 <TIM_Base_SetConfig+0x9a>
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af38:	d01b      	beq.n	800af72 <TIM_Base_SetConfig+0x9a>
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	4a2c      	ldr	r2, [pc, #176]	; (800aff0 <TIM_Base_SetConfig+0x118>)
 800af3e:	4293      	cmp	r3, r2
 800af40:	d017      	beq.n	800af72 <TIM_Base_SetConfig+0x9a>
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	4a2b      	ldr	r2, [pc, #172]	; (800aff4 <TIM_Base_SetConfig+0x11c>)
 800af46:	4293      	cmp	r3, r2
 800af48:	d013      	beq.n	800af72 <TIM_Base_SetConfig+0x9a>
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	4a2a      	ldr	r2, [pc, #168]	; (800aff8 <TIM_Base_SetConfig+0x120>)
 800af4e:	4293      	cmp	r3, r2
 800af50:	d00f      	beq.n	800af72 <TIM_Base_SetConfig+0x9a>
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	4a29      	ldr	r2, [pc, #164]	; (800affc <TIM_Base_SetConfig+0x124>)
 800af56:	4293      	cmp	r3, r2
 800af58:	d00b      	beq.n	800af72 <TIM_Base_SetConfig+0x9a>
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	4a28      	ldr	r2, [pc, #160]	; (800b000 <TIM_Base_SetConfig+0x128>)
 800af5e:	4293      	cmp	r3, r2
 800af60:	d007      	beq.n	800af72 <TIM_Base_SetConfig+0x9a>
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	4a27      	ldr	r2, [pc, #156]	; (800b004 <TIM_Base_SetConfig+0x12c>)
 800af66:	4293      	cmp	r3, r2
 800af68:	d003      	beq.n	800af72 <TIM_Base_SetConfig+0x9a>
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	4a26      	ldr	r2, [pc, #152]	; (800b008 <TIM_Base_SetConfig+0x130>)
 800af6e:	4293      	cmp	r3, r2
 800af70:	d108      	bne.n	800af84 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	68db      	ldr	r3, [r3, #12]
 800af7e:	68fa      	ldr	r2, [r7, #12]
 800af80:	4313      	orrs	r3, r2
 800af82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	695b      	ldr	r3, [r3, #20]
 800af8e:	4313      	orrs	r3, r2
 800af90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	68fa      	ldr	r2, [r7, #12]
 800af96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	689a      	ldr	r2, [r3, #8]
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	681a      	ldr	r2, [r3, #0]
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	4a10      	ldr	r2, [pc, #64]	; (800afec <TIM_Base_SetConfig+0x114>)
 800afac:	4293      	cmp	r3, r2
 800afae:	d00f      	beq.n	800afd0 <TIM_Base_SetConfig+0xf8>
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	4a12      	ldr	r2, [pc, #72]	; (800affc <TIM_Base_SetConfig+0x124>)
 800afb4:	4293      	cmp	r3, r2
 800afb6:	d00b      	beq.n	800afd0 <TIM_Base_SetConfig+0xf8>
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	4a11      	ldr	r2, [pc, #68]	; (800b000 <TIM_Base_SetConfig+0x128>)
 800afbc:	4293      	cmp	r3, r2
 800afbe:	d007      	beq.n	800afd0 <TIM_Base_SetConfig+0xf8>
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	4a10      	ldr	r2, [pc, #64]	; (800b004 <TIM_Base_SetConfig+0x12c>)
 800afc4:	4293      	cmp	r3, r2
 800afc6:	d003      	beq.n	800afd0 <TIM_Base_SetConfig+0xf8>
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	4a0f      	ldr	r2, [pc, #60]	; (800b008 <TIM_Base_SetConfig+0x130>)
 800afcc:	4293      	cmp	r3, r2
 800afce:	d103      	bne.n	800afd8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	691a      	ldr	r2, [r3, #16]
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2201      	movs	r2, #1
 800afdc:	615a      	str	r2, [r3, #20]
}
 800afde:	bf00      	nop
 800afe0:	3714      	adds	r7, #20
 800afe2:	46bd      	mov	sp, r7
 800afe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe8:	4770      	bx	lr
 800afea:	bf00      	nop
 800afec:	40010000 	.word	0x40010000
 800aff0:	40000400 	.word	0x40000400
 800aff4:	40000800 	.word	0x40000800
 800aff8:	40000c00 	.word	0x40000c00
 800affc:	40010400 	.word	0x40010400
 800b000:	40014000 	.word	0x40014000
 800b004:	40014400 	.word	0x40014400
 800b008:	40014800 	.word	0x40014800

0800b00c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b00c:	b480      	push	{r7}
 800b00e:	b087      	sub	sp, #28
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
 800b014:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6a1b      	ldr	r3, [r3, #32]
 800b01a:	f023 0201 	bic.w	r2, r3, #1
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	6a1b      	ldr	r3, [r3, #32]
 800b026:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	685b      	ldr	r3, [r3, #4]
 800b02c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	699b      	ldr	r3, [r3, #24]
 800b032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b034:	68fa      	ldr	r2, [r7, #12]
 800b036:	4b37      	ldr	r3, [pc, #220]	; (800b114 <TIM_OC1_SetConfig+0x108>)
 800b038:	4013      	ands	r3, r2
 800b03a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	f023 0303 	bic.w	r3, r3, #3
 800b042:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	68fa      	ldr	r2, [r7, #12]
 800b04a:	4313      	orrs	r3, r2
 800b04c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b04e:	697b      	ldr	r3, [r7, #20]
 800b050:	f023 0302 	bic.w	r3, r3, #2
 800b054:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	689b      	ldr	r3, [r3, #8]
 800b05a:	697a      	ldr	r2, [r7, #20]
 800b05c:	4313      	orrs	r3, r2
 800b05e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	4a2d      	ldr	r2, [pc, #180]	; (800b118 <TIM_OC1_SetConfig+0x10c>)
 800b064:	4293      	cmp	r3, r2
 800b066:	d00f      	beq.n	800b088 <TIM_OC1_SetConfig+0x7c>
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	4a2c      	ldr	r2, [pc, #176]	; (800b11c <TIM_OC1_SetConfig+0x110>)
 800b06c:	4293      	cmp	r3, r2
 800b06e:	d00b      	beq.n	800b088 <TIM_OC1_SetConfig+0x7c>
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	4a2b      	ldr	r2, [pc, #172]	; (800b120 <TIM_OC1_SetConfig+0x114>)
 800b074:	4293      	cmp	r3, r2
 800b076:	d007      	beq.n	800b088 <TIM_OC1_SetConfig+0x7c>
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	4a2a      	ldr	r2, [pc, #168]	; (800b124 <TIM_OC1_SetConfig+0x118>)
 800b07c:	4293      	cmp	r3, r2
 800b07e:	d003      	beq.n	800b088 <TIM_OC1_SetConfig+0x7c>
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	4a29      	ldr	r2, [pc, #164]	; (800b128 <TIM_OC1_SetConfig+0x11c>)
 800b084:	4293      	cmp	r3, r2
 800b086:	d10c      	bne.n	800b0a2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b088:	697b      	ldr	r3, [r7, #20]
 800b08a:	f023 0308 	bic.w	r3, r3, #8
 800b08e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	68db      	ldr	r3, [r3, #12]
 800b094:	697a      	ldr	r2, [r7, #20]
 800b096:	4313      	orrs	r3, r2
 800b098:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b09a:	697b      	ldr	r3, [r7, #20]
 800b09c:	f023 0304 	bic.w	r3, r3, #4
 800b0a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	4a1c      	ldr	r2, [pc, #112]	; (800b118 <TIM_OC1_SetConfig+0x10c>)
 800b0a6:	4293      	cmp	r3, r2
 800b0a8:	d00f      	beq.n	800b0ca <TIM_OC1_SetConfig+0xbe>
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	4a1b      	ldr	r2, [pc, #108]	; (800b11c <TIM_OC1_SetConfig+0x110>)
 800b0ae:	4293      	cmp	r3, r2
 800b0b0:	d00b      	beq.n	800b0ca <TIM_OC1_SetConfig+0xbe>
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	4a1a      	ldr	r2, [pc, #104]	; (800b120 <TIM_OC1_SetConfig+0x114>)
 800b0b6:	4293      	cmp	r3, r2
 800b0b8:	d007      	beq.n	800b0ca <TIM_OC1_SetConfig+0xbe>
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	4a19      	ldr	r2, [pc, #100]	; (800b124 <TIM_OC1_SetConfig+0x118>)
 800b0be:	4293      	cmp	r3, r2
 800b0c0:	d003      	beq.n	800b0ca <TIM_OC1_SetConfig+0xbe>
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	4a18      	ldr	r2, [pc, #96]	; (800b128 <TIM_OC1_SetConfig+0x11c>)
 800b0c6:	4293      	cmp	r3, r2
 800b0c8:	d111      	bne.n	800b0ee <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b0ca:	693b      	ldr	r3, [r7, #16]
 800b0cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b0d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b0d2:	693b      	ldr	r3, [r7, #16]
 800b0d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b0d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	695b      	ldr	r3, [r3, #20]
 800b0de:	693a      	ldr	r2, [r7, #16]
 800b0e0:	4313      	orrs	r3, r2
 800b0e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b0e4:	683b      	ldr	r3, [r7, #0]
 800b0e6:	699b      	ldr	r3, [r3, #24]
 800b0e8:	693a      	ldr	r2, [r7, #16]
 800b0ea:	4313      	orrs	r3, r2
 800b0ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	693a      	ldr	r2, [r7, #16]
 800b0f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	68fa      	ldr	r2, [r7, #12]
 800b0f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	685a      	ldr	r2, [r3, #4]
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	697a      	ldr	r2, [r7, #20]
 800b106:	621a      	str	r2, [r3, #32]
}
 800b108:	bf00      	nop
 800b10a:	371c      	adds	r7, #28
 800b10c:	46bd      	mov	sp, r7
 800b10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b112:	4770      	bx	lr
 800b114:	fffeff8f 	.word	0xfffeff8f
 800b118:	40010000 	.word	0x40010000
 800b11c:	40010400 	.word	0x40010400
 800b120:	40014000 	.word	0x40014000
 800b124:	40014400 	.word	0x40014400
 800b128:	40014800 	.word	0x40014800

0800b12c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b12c:	b480      	push	{r7}
 800b12e:	b087      	sub	sp, #28
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
 800b134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	6a1b      	ldr	r3, [r3, #32]
 800b13a:	f023 0210 	bic.w	r2, r3, #16
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	6a1b      	ldr	r3, [r3, #32]
 800b146:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	685b      	ldr	r3, [r3, #4]
 800b14c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	699b      	ldr	r3, [r3, #24]
 800b152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b154:	68fa      	ldr	r2, [r7, #12]
 800b156:	4b34      	ldr	r3, [pc, #208]	; (800b228 <TIM_OC2_SetConfig+0xfc>)
 800b158:	4013      	ands	r3, r2
 800b15a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b162:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	021b      	lsls	r3, r3, #8
 800b16a:	68fa      	ldr	r2, [r7, #12]
 800b16c:	4313      	orrs	r3, r2
 800b16e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b170:	697b      	ldr	r3, [r7, #20]
 800b172:	f023 0320 	bic.w	r3, r3, #32
 800b176:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	689b      	ldr	r3, [r3, #8]
 800b17c:	011b      	lsls	r3, r3, #4
 800b17e:	697a      	ldr	r2, [r7, #20]
 800b180:	4313      	orrs	r3, r2
 800b182:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	4a29      	ldr	r2, [pc, #164]	; (800b22c <TIM_OC2_SetConfig+0x100>)
 800b188:	4293      	cmp	r3, r2
 800b18a:	d003      	beq.n	800b194 <TIM_OC2_SetConfig+0x68>
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	4a28      	ldr	r2, [pc, #160]	; (800b230 <TIM_OC2_SetConfig+0x104>)
 800b190:	4293      	cmp	r3, r2
 800b192:	d10d      	bne.n	800b1b0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b194:	697b      	ldr	r3, [r7, #20]
 800b196:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b19a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	68db      	ldr	r3, [r3, #12]
 800b1a0:	011b      	lsls	r3, r3, #4
 800b1a2:	697a      	ldr	r2, [r7, #20]
 800b1a4:	4313      	orrs	r3, r2
 800b1a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b1a8:	697b      	ldr	r3, [r7, #20]
 800b1aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b1ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	4a1e      	ldr	r2, [pc, #120]	; (800b22c <TIM_OC2_SetConfig+0x100>)
 800b1b4:	4293      	cmp	r3, r2
 800b1b6:	d00f      	beq.n	800b1d8 <TIM_OC2_SetConfig+0xac>
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	4a1d      	ldr	r2, [pc, #116]	; (800b230 <TIM_OC2_SetConfig+0x104>)
 800b1bc:	4293      	cmp	r3, r2
 800b1be:	d00b      	beq.n	800b1d8 <TIM_OC2_SetConfig+0xac>
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	4a1c      	ldr	r2, [pc, #112]	; (800b234 <TIM_OC2_SetConfig+0x108>)
 800b1c4:	4293      	cmp	r3, r2
 800b1c6:	d007      	beq.n	800b1d8 <TIM_OC2_SetConfig+0xac>
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	4a1b      	ldr	r2, [pc, #108]	; (800b238 <TIM_OC2_SetConfig+0x10c>)
 800b1cc:	4293      	cmp	r3, r2
 800b1ce:	d003      	beq.n	800b1d8 <TIM_OC2_SetConfig+0xac>
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	4a1a      	ldr	r2, [pc, #104]	; (800b23c <TIM_OC2_SetConfig+0x110>)
 800b1d4:	4293      	cmp	r3, r2
 800b1d6:	d113      	bne.n	800b200 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b1d8:	693b      	ldr	r3, [r7, #16]
 800b1da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b1de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b1e0:	693b      	ldr	r3, [r7, #16]
 800b1e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b1e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	695b      	ldr	r3, [r3, #20]
 800b1ec:	009b      	lsls	r3, r3, #2
 800b1ee:	693a      	ldr	r2, [r7, #16]
 800b1f0:	4313      	orrs	r3, r2
 800b1f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b1f4:	683b      	ldr	r3, [r7, #0]
 800b1f6:	699b      	ldr	r3, [r3, #24]
 800b1f8:	009b      	lsls	r3, r3, #2
 800b1fa:	693a      	ldr	r2, [r7, #16]
 800b1fc:	4313      	orrs	r3, r2
 800b1fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	693a      	ldr	r2, [r7, #16]
 800b204:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	68fa      	ldr	r2, [r7, #12]
 800b20a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	685a      	ldr	r2, [r3, #4]
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	697a      	ldr	r2, [r7, #20]
 800b218:	621a      	str	r2, [r3, #32]
}
 800b21a:	bf00      	nop
 800b21c:	371c      	adds	r7, #28
 800b21e:	46bd      	mov	sp, r7
 800b220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b224:	4770      	bx	lr
 800b226:	bf00      	nop
 800b228:	feff8fff 	.word	0xfeff8fff
 800b22c:	40010000 	.word	0x40010000
 800b230:	40010400 	.word	0x40010400
 800b234:	40014000 	.word	0x40014000
 800b238:	40014400 	.word	0x40014400
 800b23c:	40014800 	.word	0x40014800

0800b240 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b240:	b480      	push	{r7}
 800b242:	b087      	sub	sp, #28
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
 800b248:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	6a1b      	ldr	r3, [r3, #32]
 800b24e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	6a1b      	ldr	r3, [r3, #32]
 800b25a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	685b      	ldr	r3, [r3, #4]
 800b260:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	69db      	ldr	r3, [r3, #28]
 800b266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b26e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	f023 0303 	bic.w	r3, r3, #3
 800b276:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	68fa      	ldr	r2, [r7, #12]
 800b27e:	4313      	orrs	r3, r2
 800b280:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b282:	697b      	ldr	r3, [r7, #20]
 800b284:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b288:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	689b      	ldr	r3, [r3, #8]
 800b28e:	021b      	lsls	r3, r3, #8
 800b290:	697a      	ldr	r2, [r7, #20]
 800b292:	4313      	orrs	r3, r2
 800b294:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	4a27      	ldr	r2, [pc, #156]	; (800b338 <TIM_OC3_SetConfig+0xf8>)
 800b29a:	4293      	cmp	r3, r2
 800b29c:	d003      	beq.n	800b2a6 <TIM_OC3_SetConfig+0x66>
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	4a26      	ldr	r2, [pc, #152]	; (800b33c <TIM_OC3_SetConfig+0xfc>)
 800b2a2:	4293      	cmp	r3, r2
 800b2a4:	d10d      	bne.n	800b2c2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b2a6:	697b      	ldr	r3, [r7, #20]
 800b2a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b2ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	68db      	ldr	r3, [r3, #12]
 800b2b2:	021b      	lsls	r3, r3, #8
 800b2b4:	697a      	ldr	r2, [r7, #20]
 800b2b6:	4313      	orrs	r3, r2
 800b2b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b2ba:	697b      	ldr	r3, [r7, #20]
 800b2bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b2c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	4a1c      	ldr	r2, [pc, #112]	; (800b338 <TIM_OC3_SetConfig+0xf8>)
 800b2c6:	4293      	cmp	r3, r2
 800b2c8:	d00f      	beq.n	800b2ea <TIM_OC3_SetConfig+0xaa>
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	4a1b      	ldr	r2, [pc, #108]	; (800b33c <TIM_OC3_SetConfig+0xfc>)
 800b2ce:	4293      	cmp	r3, r2
 800b2d0:	d00b      	beq.n	800b2ea <TIM_OC3_SetConfig+0xaa>
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	4a1a      	ldr	r2, [pc, #104]	; (800b340 <TIM_OC3_SetConfig+0x100>)
 800b2d6:	4293      	cmp	r3, r2
 800b2d8:	d007      	beq.n	800b2ea <TIM_OC3_SetConfig+0xaa>
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	4a19      	ldr	r2, [pc, #100]	; (800b344 <TIM_OC3_SetConfig+0x104>)
 800b2de:	4293      	cmp	r3, r2
 800b2e0:	d003      	beq.n	800b2ea <TIM_OC3_SetConfig+0xaa>
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	4a18      	ldr	r2, [pc, #96]	; (800b348 <TIM_OC3_SetConfig+0x108>)
 800b2e6:	4293      	cmp	r3, r2
 800b2e8:	d113      	bne.n	800b312 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b2ea:	693b      	ldr	r3, [r7, #16]
 800b2ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b2f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b2f2:	693b      	ldr	r3, [r7, #16]
 800b2f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b2f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	695b      	ldr	r3, [r3, #20]
 800b2fe:	011b      	lsls	r3, r3, #4
 800b300:	693a      	ldr	r2, [r7, #16]
 800b302:	4313      	orrs	r3, r2
 800b304:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b306:	683b      	ldr	r3, [r7, #0]
 800b308:	699b      	ldr	r3, [r3, #24]
 800b30a:	011b      	lsls	r3, r3, #4
 800b30c:	693a      	ldr	r2, [r7, #16]
 800b30e:	4313      	orrs	r3, r2
 800b310:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	693a      	ldr	r2, [r7, #16]
 800b316:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	68fa      	ldr	r2, [r7, #12]
 800b31c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	685a      	ldr	r2, [r3, #4]
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	697a      	ldr	r2, [r7, #20]
 800b32a:	621a      	str	r2, [r3, #32]
}
 800b32c:	bf00      	nop
 800b32e:	371c      	adds	r7, #28
 800b330:	46bd      	mov	sp, r7
 800b332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b336:	4770      	bx	lr
 800b338:	40010000 	.word	0x40010000
 800b33c:	40010400 	.word	0x40010400
 800b340:	40014000 	.word	0x40014000
 800b344:	40014400 	.word	0x40014400
 800b348:	40014800 	.word	0x40014800

0800b34c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b34c:	b480      	push	{r7}
 800b34e:	b087      	sub	sp, #28
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
 800b354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	6a1b      	ldr	r3, [r3, #32]
 800b35a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	6a1b      	ldr	r3, [r3, #32]
 800b366:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	685b      	ldr	r3, [r3, #4]
 800b36c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	69db      	ldr	r3, [r3, #28]
 800b372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b37a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b382:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	021b      	lsls	r3, r3, #8
 800b38a:	68fa      	ldr	r2, [r7, #12]
 800b38c:	4313      	orrs	r3, r2
 800b38e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b390:	693b      	ldr	r3, [r7, #16]
 800b392:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b396:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b398:	683b      	ldr	r3, [r7, #0]
 800b39a:	689b      	ldr	r3, [r3, #8]
 800b39c:	031b      	lsls	r3, r3, #12
 800b39e:	693a      	ldr	r2, [r7, #16]
 800b3a0:	4313      	orrs	r3, r2
 800b3a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	4a18      	ldr	r2, [pc, #96]	; (800b408 <TIM_OC4_SetConfig+0xbc>)
 800b3a8:	4293      	cmp	r3, r2
 800b3aa:	d00f      	beq.n	800b3cc <TIM_OC4_SetConfig+0x80>
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	4a17      	ldr	r2, [pc, #92]	; (800b40c <TIM_OC4_SetConfig+0xc0>)
 800b3b0:	4293      	cmp	r3, r2
 800b3b2:	d00b      	beq.n	800b3cc <TIM_OC4_SetConfig+0x80>
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	4a16      	ldr	r2, [pc, #88]	; (800b410 <TIM_OC4_SetConfig+0xc4>)
 800b3b8:	4293      	cmp	r3, r2
 800b3ba:	d007      	beq.n	800b3cc <TIM_OC4_SetConfig+0x80>
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	4a15      	ldr	r2, [pc, #84]	; (800b414 <TIM_OC4_SetConfig+0xc8>)
 800b3c0:	4293      	cmp	r3, r2
 800b3c2:	d003      	beq.n	800b3cc <TIM_OC4_SetConfig+0x80>
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	4a14      	ldr	r2, [pc, #80]	; (800b418 <TIM_OC4_SetConfig+0xcc>)
 800b3c8:	4293      	cmp	r3, r2
 800b3ca:	d109      	bne.n	800b3e0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b3cc:	697b      	ldr	r3, [r7, #20]
 800b3ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b3d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	695b      	ldr	r3, [r3, #20]
 800b3d8:	019b      	lsls	r3, r3, #6
 800b3da:	697a      	ldr	r2, [r7, #20]
 800b3dc:	4313      	orrs	r3, r2
 800b3de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	697a      	ldr	r2, [r7, #20]
 800b3e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	68fa      	ldr	r2, [r7, #12]
 800b3ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	685a      	ldr	r2, [r3, #4]
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	693a      	ldr	r2, [r7, #16]
 800b3f8:	621a      	str	r2, [r3, #32]
}
 800b3fa:	bf00      	nop
 800b3fc:	371c      	adds	r7, #28
 800b3fe:	46bd      	mov	sp, r7
 800b400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b404:	4770      	bx	lr
 800b406:	bf00      	nop
 800b408:	40010000 	.word	0x40010000
 800b40c:	40010400 	.word	0x40010400
 800b410:	40014000 	.word	0x40014000
 800b414:	40014400 	.word	0x40014400
 800b418:	40014800 	.word	0x40014800

0800b41c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b41c:	b480      	push	{r7}
 800b41e:	b087      	sub	sp, #28
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
 800b424:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	6a1b      	ldr	r3, [r3, #32]
 800b42a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	6a1b      	ldr	r3, [r3, #32]
 800b436:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	685b      	ldr	r3, [r3, #4]
 800b43c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b44a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	68fa      	ldr	r2, [r7, #12]
 800b452:	4313      	orrs	r3, r2
 800b454:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b456:	693b      	ldr	r3, [r7, #16]
 800b458:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b45c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	689b      	ldr	r3, [r3, #8]
 800b462:	041b      	lsls	r3, r3, #16
 800b464:	693a      	ldr	r2, [r7, #16]
 800b466:	4313      	orrs	r3, r2
 800b468:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	4a17      	ldr	r2, [pc, #92]	; (800b4cc <TIM_OC5_SetConfig+0xb0>)
 800b46e:	4293      	cmp	r3, r2
 800b470:	d00f      	beq.n	800b492 <TIM_OC5_SetConfig+0x76>
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	4a16      	ldr	r2, [pc, #88]	; (800b4d0 <TIM_OC5_SetConfig+0xb4>)
 800b476:	4293      	cmp	r3, r2
 800b478:	d00b      	beq.n	800b492 <TIM_OC5_SetConfig+0x76>
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	4a15      	ldr	r2, [pc, #84]	; (800b4d4 <TIM_OC5_SetConfig+0xb8>)
 800b47e:	4293      	cmp	r3, r2
 800b480:	d007      	beq.n	800b492 <TIM_OC5_SetConfig+0x76>
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	4a14      	ldr	r2, [pc, #80]	; (800b4d8 <TIM_OC5_SetConfig+0xbc>)
 800b486:	4293      	cmp	r3, r2
 800b488:	d003      	beq.n	800b492 <TIM_OC5_SetConfig+0x76>
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	4a13      	ldr	r2, [pc, #76]	; (800b4dc <TIM_OC5_SetConfig+0xc0>)
 800b48e:	4293      	cmp	r3, r2
 800b490:	d109      	bne.n	800b4a6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b492:	697b      	ldr	r3, [r7, #20]
 800b494:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b498:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	695b      	ldr	r3, [r3, #20]
 800b49e:	021b      	lsls	r3, r3, #8
 800b4a0:	697a      	ldr	r2, [r7, #20]
 800b4a2:	4313      	orrs	r3, r2
 800b4a4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	697a      	ldr	r2, [r7, #20]
 800b4aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	68fa      	ldr	r2, [r7, #12]
 800b4b0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b4b2:	683b      	ldr	r3, [r7, #0]
 800b4b4:	685a      	ldr	r2, [r3, #4]
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	693a      	ldr	r2, [r7, #16]
 800b4be:	621a      	str	r2, [r3, #32]
}
 800b4c0:	bf00      	nop
 800b4c2:	371c      	adds	r7, #28
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ca:	4770      	bx	lr
 800b4cc:	40010000 	.word	0x40010000
 800b4d0:	40010400 	.word	0x40010400
 800b4d4:	40014000 	.word	0x40014000
 800b4d8:	40014400 	.word	0x40014400
 800b4dc:	40014800 	.word	0x40014800

0800b4e0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b4e0:	b480      	push	{r7}
 800b4e2:	b087      	sub	sp, #28
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
 800b4e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	6a1b      	ldr	r3, [r3, #32]
 800b4ee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	6a1b      	ldr	r3, [r3, #32]
 800b4fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	685b      	ldr	r3, [r3, #4]
 800b500:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b50e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b510:	683b      	ldr	r3, [r7, #0]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	021b      	lsls	r3, r3, #8
 800b516:	68fa      	ldr	r2, [r7, #12]
 800b518:	4313      	orrs	r3, r2
 800b51a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b51c:	693b      	ldr	r3, [r7, #16]
 800b51e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b522:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b524:	683b      	ldr	r3, [r7, #0]
 800b526:	689b      	ldr	r3, [r3, #8]
 800b528:	051b      	lsls	r3, r3, #20
 800b52a:	693a      	ldr	r2, [r7, #16]
 800b52c:	4313      	orrs	r3, r2
 800b52e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	4a18      	ldr	r2, [pc, #96]	; (800b594 <TIM_OC6_SetConfig+0xb4>)
 800b534:	4293      	cmp	r3, r2
 800b536:	d00f      	beq.n	800b558 <TIM_OC6_SetConfig+0x78>
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	4a17      	ldr	r2, [pc, #92]	; (800b598 <TIM_OC6_SetConfig+0xb8>)
 800b53c:	4293      	cmp	r3, r2
 800b53e:	d00b      	beq.n	800b558 <TIM_OC6_SetConfig+0x78>
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	4a16      	ldr	r2, [pc, #88]	; (800b59c <TIM_OC6_SetConfig+0xbc>)
 800b544:	4293      	cmp	r3, r2
 800b546:	d007      	beq.n	800b558 <TIM_OC6_SetConfig+0x78>
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	4a15      	ldr	r2, [pc, #84]	; (800b5a0 <TIM_OC6_SetConfig+0xc0>)
 800b54c:	4293      	cmp	r3, r2
 800b54e:	d003      	beq.n	800b558 <TIM_OC6_SetConfig+0x78>
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	4a14      	ldr	r2, [pc, #80]	; (800b5a4 <TIM_OC6_SetConfig+0xc4>)
 800b554:	4293      	cmp	r3, r2
 800b556:	d109      	bne.n	800b56c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b558:	697b      	ldr	r3, [r7, #20]
 800b55a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b55e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b560:	683b      	ldr	r3, [r7, #0]
 800b562:	695b      	ldr	r3, [r3, #20]
 800b564:	029b      	lsls	r3, r3, #10
 800b566:	697a      	ldr	r2, [r7, #20]
 800b568:	4313      	orrs	r3, r2
 800b56a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	697a      	ldr	r2, [r7, #20]
 800b570:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	68fa      	ldr	r2, [r7, #12]
 800b576:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	685a      	ldr	r2, [r3, #4]
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	693a      	ldr	r2, [r7, #16]
 800b584:	621a      	str	r2, [r3, #32]
}
 800b586:	bf00      	nop
 800b588:	371c      	adds	r7, #28
 800b58a:	46bd      	mov	sp, r7
 800b58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b590:	4770      	bx	lr
 800b592:	bf00      	nop
 800b594:	40010000 	.word	0x40010000
 800b598:	40010400 	.word	0x40010400
 800b59c:	40014000 	.word	0x40014000
 800b5a0:	40014400 	.word	0x40014400
 800b5a4:	40014800 	.word	0x40014800

0800b5a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b5a8:	b480      	push	{r7}
 800b5aa:	b087      	sub	sp, #28
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	60f8      	str	r0, [r7, #12]
 800b5b0:	60b9      	str	r1, [r7, #8]
 800b5b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	6a1b      	ldr	r3, [r3, #32]
 800b5b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	6a1b      	ldr	r3, [r3, #32]
 800b5be:	f023 0201 	bic.w	r2, r3, #1
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	699b      	ldr	r3, [r3, #24]
 800b5ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b5cc:	693b      	ldr	r3, [r7, #16]
 800b5ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b5d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	011b      	lsls	r3, r3, #4
 800b5d8:	693a      	ldr	r2, [r7, #16]
 800b5da:	4313      	orrs	r3, r2
 800b5dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b5de:	697b      	ldr	r3, [r7, #20]
 800b5e0:	f023 030a 	bic.w	r3, r3, #10
 800b5e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b5e6:	697a      	ldr	r2, [r7, #20]
 800b5e8:	68bb      	ldr	r3, [r7, #8]
 800b5ea:	4313      	orrs	r3, r2
 800b5ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	693a      	ldr	r2, [r7, #16]
 800b5f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	697a      	ldr	r2, [r7, #20]
 800b5f8:	621a      	str	r2, [r3, #32]
}
 800b5fa:	bf00      	nop
 800b5fc:	371c      	adds	r7, #28
 800b5fe:	46bd      	mov	sp, r7
 800b600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b604:	4770      	bx	lr

0800b606 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b606:	b480      	push	{r7}
 800b608:	b087      	sub	sp, #28
 800b60a:	af00      	add	r7, sp, #0
 800b60c:	60f8      	str	r0, [r7, #12]
 800b60e:	60b9      	str	r1, [r7, #8]
 800b610:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	6a1b      	ldr	r3, [r3, #32]
 800b616:	f023 0210 	bic.w	r2, r3, #16
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	699b      	ldr	r3, [r3, #24]
 800b622:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	6a1b      	ldr	r3, [r3, #32]
 800b628:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b62a:	697b      	ldr	r3, [r7, #20]
 800b62c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b630:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	031b      	lsls	r3, r3, #12
 800b636:	697a      	ldr	r2, [r7, #20]
 800b638:	4313      	orrs	r3, r2
 800b63a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b63c:	693b      	ldr	r3, [r7, #16]
 800b63e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b642:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b644:	68bb      	ldr	r3, [r7, #8]
 800b646:	011b      	lsls	r3, r3, #4
 800b648:	693a      	ldr	r2, [r7, #16]
 800b64a:	4313      	orrs	r3, r2
 800b64c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	697a      	ldr	r2, [r7, #20]
 800b652:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	693a      	ldr	r2, [r7, #16]
 800b658:	621a      	str	r2, [r3, #32]
}
 800b65a:	bf00      	nop
 800b65c:	371c      	adds	r7, #28
 800b65e:	46bd      	mov	sp, r7
 800b660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b664:	4770      	bx	lr
	...

0800b668 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b668:	b480      	push	{r7}
 800b66a:	b085      	sub	sp, #20
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
 800b670:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	689b      	ldr	r3, [r3, #8]
 800b676:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b678:	68fa      	ldr	r2, [r7, #12]
 800b67a:	4b09      	ldr	r3, [pc, #36]	; (800b6a0 <TIM_ITRx_SetConfig+0x38>)
 800b67c:	4013      	ands	r3, r2
 800b67e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b680:	683a      	ldr	r2, [r7, #0]
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	4313      	orrs	r3, r2
 800b686:	f043 0307 	orr.w	r3, r3, #7
 800b68a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	68fa      	ldr	r2, [r7, #12]
 800b690:	609a      	str	r2, [r3, #8]
}
 800b692:	bf00      	nop
 800b694:	3714      	adds	r7, #20
 800b696:	46bd      	mov	sp, r7
 800b698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69c:	4770      	bx	lr
 800b69e:	bf00      	nop
 800b6a0:	ffcfff8f 	.word	0xffcfff8f

0800b6a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b6a4:	b480      	push	{r7}
 800b6a6:	b087      	sub	sp, #28
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	60f8      	str	r0, [r7, #12]
 800b6ac:	60b9      	str	r1, [r7, #8]
 800b6ae:	607a      	str	r2, [r7, #4]
 800b6b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	689b      	ldr	r3, [r3, #8]
 800b6b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b6b8:	697b      	ldr	r3, [r7, #20]
 800b6ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b6be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	021a      	lsls	r2, r3, #8
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	431a      	orrs	r2, r3
 800b6c8:	68bb      	ldr	r3, [r7, #8]
 800b6ca:	4313      	orrs	r3, r2
 800b6cc:	697a      	ldr	r2, [r7, #20]
 800b6ce:	4313      	orrs	r3, r2
 800b6d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	697a      	ldr	r2, [r7, #20]
 800b6d6:	609a      	str	r2, [r3, #8]
}
 800b6d8:	bf00      	nop
 800b6da:	371c      	adds	r7, #28
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e2:	4770      	bx	lr

0800b6e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b6e4:	b480      	push	{r7}
 800b6e6:	b085      	sub	sp, #20
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
 800b6ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b6f4:	2b01      	cmp	r3, #1
 800b6f6:	d101      	bne.n	800b6fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b6f8:	2302      	movs	r3, #2
 800b6fa:	e068      	b.n	800b7ce <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2201      	movs	r2, #1
 800b700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	2202      	movs	r2, #2
 800b708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	685b      	ldr	r3, [r3, #4]
 800b712:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	689b      	ldr	r3, [r3, #8]
 800b71a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	4a2e      	ldr	r2, [pc, #184]	; (800b7dc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b722:	4293      	cmp	r3, r2
 800b724:	d004      	beq.n	800b730 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	4a2d      	ldr	r2, [pc, #180]	; (800b7e0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b72c:	4293      	cmp	r3, r2
 800b72e:	d108      	bne.n	800b742 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b736:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	685b      	ldr	r3, [r3, #4]
 800b73c:	68fa      	ldr	r2, [r7, #12]
 800b73e:	4313      	orrs	r3, r2
 800b740:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b748:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	68fa      	ldr	r2, [r7, #12]
 800b750:	4313      	orrs	r3, r2
 800b752:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	68fa      	ldr	r2, [r7, #12]
 800b75a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	4a1e      	ldr	r2, [pc, #120]	; (800b7dc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b762:	4293      	cmp	r3, r2
 800b764:	d01d      	beq.n	800b7a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b76e:	d018      	beq.n	800b7a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	4a1b      	ldr	r2, [pc, #108]	; (800b7e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b776:	4293      	cmp	r3, r2
 800b778:	d013      	beq.n	800b7a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	4a1a      	ldr	r2, [pc, #104]	; (800b7e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b780:	4293      	cmp	r3, r2
 800b782:	d00e      	beq.n	800b7a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	4a18      	ldr	r2, [pc, #96]	; (800b7ec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b78a:	4293      	cmp	r3, r2
 800b78c:	d009      	beq.n	800b7a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	4a13      	ldr	r2, [pc, #76]	; (800b7e0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b794:	4293      	cmp	r3, r2
 800b796:	d004      	beq.n	800b7a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	4a14      	ldr	r2, [pc, #80]	; (800b7f0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b79e:	4293      	cmp	r3, r2
 800b7a0:	d10c      	bne.n	800b7bc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b7a2:	68bb      	ldr	r3, [r7, #8]
 800b7a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b7a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b7aa:	683b      	ldr	r3, [r7, #0]
 800b7ac:	689b      	ldr	r3, [r3, #8]
 800b7ae:	68ba      	ldr	r2, [r7, #8]
 800b7b0:	4313      	orrs	r3, r2
 800b7b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	68ba      	ldr	r2, [r7, #8]
 800b7ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2201      	movs	r2, #1
 800b7c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b7cc:	2300      	movs	r3, #0
}
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	3714      	adds	r7, #20
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d8:	4770      	bx	lr
 800b7da:	bf00      	nop
 800b7dc:	40010000 	.word	0x40010000
 800b7e0:	40010400 	.word	0x40010400
 800b7e4:	40000400 	.word	0x40000400
 800b7e8:	40000800 	.word	0x40000800
 800b7ec:	40000c00 	.word	0x40000c00
 800b7f0:	40001800 	.word	0x40001800

0800b7f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b7f4:	b480      	push	{r7}
 800b7f6:	b085      	sub	sp, #20
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
 800b7fc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b7fe:	2300      	movs	r3, #0
 800b800:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b808:	2b01      	cmp	r3, #1
 800b80a:	d101      	bne.n	800b810 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b80c:	2302      	movs	r3, #2
 800b80e:	e065      	b.n	800b8dc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2201      	movs	r2, #1
 800b814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	68db      	ldr	r3, [r3, #12]
 800b822:	4313      	orrs	r3, r2
 800b824:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	689b      	ldr	r3, [r3, #8]
 800b830:	4313      	orrs	r3, r2
 800b832:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	685b      	ldr	r3, [r3, #4]
 800b83e:	4313      	orrs	r3, r2
 800b840:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	4313      	orrs	r3, r2
 800b84e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	691b      	ldr	r3, [r3, #16]
 800b85a:	4313      	orrs	r3, r2
 800b85c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	695b      	ldr	r3, [r3, #20]
 800b868:	4313      	orrs	r3, r2
 800b86a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b876:	4313      	orrs	r3, r2
 800b878:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b880:	683b      	ldr	r3, [r7, #0]
 800b882:	699b      	ldr	r3, [r3, #24]
 800b884:	041b      	lsls	r3, r3, #16
 800b886:	4313      	orrs	r3, r2
 800b888:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	4a16      	ldr	r2, [pc, #88]	; (800b8e8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b890:	4293      	cmp	r3, r2
 800b892:	d004      	beq.n	800b89e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	4a14      	ldr	r2, [pc, #80]	; (800b8ec <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b89a:	4293      	cmp	r3, r2
 800b89c:	d115      	bne.n	800b8ca <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b8a4:	683b      	ldr	r3, [r7, #0]
 800b8a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8a8:	051b      	lsls	r3, r3, #20
 800b8aa:	4313      	orrs	r3, r2
 800b8ac:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b8b4:	683b      	ldr	r3, [r7, #0]
 800b8b6:	69db      	ldr	r3, [r3, #28]
 800b8b8:	4313      	orrs	r3, r2
 800b8ba:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b8c2:	683b      	ldr	r3, [r7, #0]
 800b8c4:	6a1b      	ldr	r3, [r3, #32]
 800b8c6:	4313      	orrs	r3, r2
 800b8c8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	68fa      	ldr	r2, [r7, #12]
 800b8d0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b8da:	2300      	movs	r3, #0
}
 800b8dc:	4618      	mov	r0, r3
 800b8de:	3714      	adds	r7, #20
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e6:	4770      	bx	lr
 800b8e8:	40010000 	.word	0x40010000
 800b8ec:	40010400 	.word	0x40010400

0800b8f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b8f0:	b480      	push	{r7}
 800b8f2:	b083      	sub	sp, #12
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b8f8:	bf00      	nop
 800b8fa:	370c      	adds	r7, #12
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b902:	4770      	bx	lr

0800b904 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b904:	b480      	push	{r7}
 800b906:	b083      	sub	sp, #12
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b90c:	bf00      	nop
 800b90e:	370c      	adds	r7, #12
 800b910:	46bd      	mov	sp, r7
 800b912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b916:	4770      	bx	lr

0800b918 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b918:	b480      	push	{r7}
 800b91a:	b083      	sub	sp, #12
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b920:	bf00      	nop
 800b922:	370c      	adds	r7, #12
 800b924:	46bd      	mov	sp, r7
 800b926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92a:	4770      	bx	lr

0800b92c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b082      	sub	sp, #8
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d101      	bne.n	800b93e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b93a:	2301      	movs	r3, #1
 800b93c:	e042      	b.n	800b9c4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b944:	2b00      	cmp	r3, #0
 800b946:	d106      	bne.n	800b956 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	2200      	movs	r2, #0
 800b94c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b950:	6878      	ldr	r0, [r7, #4]
 800b952:	f7f6 faad 	bl	8001eb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	2224      	movs	r2, #36	; 0x24
 800b95a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	681a      	ldr	r2, [r3, #0]
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	f022 0201 	bic.w	r2, r2, #1
 800b96c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b96e:	6878      	ldr	r0, [r7, #4]
 800b970:	f000 fbc6 	bl	800c100 <UART_SetConfig>
 800b974:	4603      	mov	r3, r0
 800b976:	2b01      	cmp	r3, #1
 800b978:	d101      	bne.n	800b97e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b97a:	2301      	movs	r3, #1
 800b97c:	e022      	b.n	800b9c4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b982:	2b00      	cmp	r3, #0
 800b984:	d002      	beq.n	800b98c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b986:	6878      	ldr	r0, [r7, #4]
 800b988:	f001 f924 	bl	800cbd4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	685a      	ldr	r2, [r3, #4]
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b99a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	689a      	ldr	r2, [r3, #8]
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b9aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	681a      	ldr	r2, [r3, #0]
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	f042 0201 	orr.w	r2, r2, #1
 800b9ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b9bc:	6878      	ldr	r0, [r7, #4]
 800b9be:	f001 f9ab 	bl	800cd18 <UART_CheckIdleState>
 800b9c2:	4603      	mov	r3, r0
}
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	3708      	adds	r7, #8
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	bd80      	pop	{r7, pc}

0800b9cc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b084      	sub	sp, #16
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	60f8      	str	r0, [r7, #12]
 800b9d4:	60b9      	str	r1, [r7, #8]
 800b9d6:	4613      	mov	r3, r2
 800b9d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9e0:	2b20      	cmp	r3, #32
 800b9e2:	d131      	bne.n	800ba48 <HAL_UART_Receive_DMA+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800b9e4:	68bb      	ldr	r3, [r7, #8]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d002      	beq.n	800b9f0 <HAL_UART_Receive_DMA+0x24>
 800b9ea:	88fb      	ldrh	r3, [r7, #6]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d101      	bne.n	800b9f4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800b9f0:	2301      	movs	r3, #1
 800b9f2:	e02a      	b.n	800ba4a <HAL_UART_Receive_DMA+0x7e>
    }

    __HAL_LOCK(huart);
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b9fa:	2b01      	cmp	r3, #1
 800b9fc:	d101      	bne.n	800ba02 <HAL_UART_Receive_DMA+0x36>
 800b9fe:	2302      	movs	r3, #2
 800ba00:	e023      	b.n	800ba4a <HAL_UART_Receive_DMA+0x7e>
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	2201      	movs	r2, #1
 800ba06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	4a0f      	ldr	r2, [pc, #60]	; (800ba54 <HAL_UART_Receive_DMA+0x88>)
 800ba16:	4293      	cmp	r3, r2
 800ba18:	d00e      	beq.n	800ba38 <HAL_UART_Receive_DMA+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	685b      	ldr	r3, [r3, #4]
 800ba20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d007      	beq.n	800ba38 <HAL_UART_Receive_DMA+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	681a      	ldr	r2, [r3, #0]
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800ba36:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800ba38:	88fb      	ldrh	r3, [r7, #6]
 800ba3a:	461a      	mov	r2, r3
 800ba3c:	68b9      	ldr	r1, [r7, #8]
 800ba3e:	68f8      	ldr	r0, [r7, #12]
 800ba40:	f001 fa36 	bl	800ceb0 <UART_Start_Receive_DMA>
 800ba44:	4603      	mov	r3, r0
 800ba46:	e000      	b.n	800ba4a <HAL_UART_Receive_DMA+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800ba48:	2302      	movs	r3, #2
  }
}
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	3710      	adds	r7, #16
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	bd80      	pop	{r7, pc}
 800ba52:	bf00      	nop
 800ba54:	58000c00 	.word	0x58000c00

0800ba58 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b084      	sub	sp, #16
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ba66:	60fb      	str	r3, [r7, #12]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba6e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	689b      	ldr	r3, [r3, #8]
 800ba76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba7a:	2b80      	cmp	r3, #128	; 0x80
 800ba7c:	d127      	bne.n	800bace <HAL_UART_DMAStop+0x76>
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	2b21      	cmp	r3, #33	; 0x21
 800ba82:	d124      	bne.n	800bace <HAL_UART_DMAStop+0x76>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	689a      	ldr	r2, [r3, #8]
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ba92:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d015      	beq.n	800bac8 <HAL_UART_DMAStop+0x70>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800baa0:	4618      	mov	r0, r3
 800baa2:	f7f7 fba7 	bl	80031f4 <HAL_DMA_Abort>
 800baa6:	4603      	mov	r3, r0
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d00d      	beq.n	800bac8 <HAL_UART_DMAStop+0x70>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bab0:	4618      	mov	r0, r3
 800bab2:	f7f9 f83b 	bl	8004b2c <HAL_DMA_GetError>
 800bab6:	4603      	mov	r3, r0
 800bab8:	2b20      	cmp	r3, #32
 800baba:	d105      	bne.n	800bac8 <HAL_UART_DMAStop+0x70>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2210      	movs	r2, #16
 800bac0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 800bac4:	2303      	movs	r3, #3
 800bac6:	e032      	b.n	800bb2e <HAL_UART_DMAStop+0xd6>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800bac8:	6878      	ldr	r0, [r7, #4]
 800baca:	f001 fa5f 	bl	800cf8c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	689b      	ldr	r3, [r3, #8]
 800bad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bad8:	2b40      	cmp	r3, #64	; 0x40
 800bada:	d127      	bne.n	800bb2c <HAL_UART_DMAStop+0xd4>
 800badc:	68bb      	ldr	r3, [r7, #8]
 800bade:	2b22      	cmp	r3, #34	; 0x22
 800bae0:	d124      	bne.n	800bb2c <HAL_UART_DMAStop+0xd4>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	689a      	ldr	r2, [r3, #8]
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800baf0:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d015      	beq.n	800bb26 <HAL_UART_DMAStop+0xce>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bafe:	4618      	mov	r0, r3
 800bb00:	f7f7 fb78 	bl	80031f4 <HAL_DMA_Abort>
 800bb04:	4603      	mov	r3, r0
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d00d      	beq.n	800bb26 <HAL_UART_DMAStop+0xce>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bb0e:	4618      	mov	r0, r3
 800bb10:	f7f9 f80c 	bl	8004b2c <HAL_DMA_GetError>
 800bb14:	4603      	mov	r3, r0
 800bb16:	2b20      	cmp	r3, #32
 800bb18:	d105      	bne.n	800bb26 <HAL_UART_DMAStop+0xce>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	2210      	movs	r2, #16
 800bb1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 800bb22:	2303      	movs	r3, #3
 800bb24:	e003      	b.n	800bb2e <HAL_UART_DMAStop+0xd6>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800bb26:	6878      	ldr	r0, [r7, #4]
 800bb28:	f001 fa4e 	bl	800cfc8 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800bb2c:	2300      	movs	r3, #0
}
 800bb2e:	4618      	mov	r0, r3
 800bb30:	3710      	adds	r7, #16
 800bb32:	46bd      	mov	sp, r7
 800bb34:	bd80      	pop	{r7, pc}
	...

0800bb38 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b088      	sub	sp, #32
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	69db      	ldr	r3, [r3, #28]
 800bb46:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	689b      	ldr	r3, [r3, #8]
 800bb56:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800bb58:	69fa      	ldr	r2, [r7, #28]
 800bb5a:	f640 030f 	movw	r3, #2063	; 0x80f
 800bb5e:	4013      	ands	r3, r2
 800bb60:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800bb62:	693b      	ldr	r3, [r7, #16]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d118      	bne.n	800bb9a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bb68:	69fb      	ldr	r3, [r7, #28]
 800bb6a:	f003 0320 	and.w	r3, r3, #32
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d013      	beq.n	800bb9a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bb72:	69bb      	ldr	r3, [r7, #24]
 800bb74:	f003 0320 	and.w	r3, r3, #32
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d104      	bne.n	800bb86 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bb7c:	697b      	ldr	r3, [r7, #20]
 800bb7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d009      	beq.n	800bb9a <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	f000 8282 	beq.w	800c094 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb94:	6878      	ldr	r0, [r7, #4]
 800bb96:	4798      	blx	r3
      }
      return;
 800bb98:	e27c      	b.n	800c094 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800bb9a:	693b      	ldr	r3, [r7, #16]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	f000 80ef 	beq.w	800bd80 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800bba2:	697a      	ldr	r2, [r7, #20]
 800bba4:	4b73      	ldr	r3, [pc, #460]	; (800bd74 <HAL_UART_IRQHandler+0x23c>)
 800bba6:	4013      	ands	r3, r2
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d105      	bne.n	800bbb8 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800bbac:	69ba      	ldr	r2, [r7, #24]
 800bbae:	4b72      	ldr	r3, [pc, #456]	; (800bd78 <HAL_UART_IRQHandler+0x240>)
 800bbb0:	4013      	ands	r3, r2
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	f000 80e4 	beq.w	800bd80 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bbb8:	69fb      	ldr	r3, [r7, #28]
 800bbba:	f003 0301 	and.w	r3, r3, #1
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d010      	beq.n	800bbe4 <HAL_UART_IRQHandler+0xac>
 800bbc2:	69bb      	ldr	r3, [r7, #24]
 800bbc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d00b      	beq.n	800bbe4 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	2201      	movs	r2, #1
 800bbd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bbda:	f043 0201 	orr.w	r2, r3, #1
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bbe4:	69fb      	ldr	r3, [r7, #28]
 800bbe6:	f003 0302 	and.w	r3, r3, #2
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d010      	beq.n	800bc10 <HAL_UART_IRQHandler+0xd8>
 800bbee:	697b      	ldr	r3, [r7, #20]
 800bbf0:	f003 0301 	and.w	r3, r3, #1
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d00b      	beq.n	800bc10 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	2202      	movs	r2, #2
 800bbfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc06:	f043 0204 	orr.w	r2, r3, #4
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bc10:	69fb      	ldr	r3, [r7, #28]
 800bc12:	f003 0304 	and.w	r3, r3, #4
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d010      	beq.n	800bc3c <HAL_UART_IRQHandler+0x104>
 800bc1a:	697b      	ldr	r3, [r7, #20]
 800bc1c:	f003 0301 	and.w	r3, r3, #1
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d00b      	beq.n	800bc3c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	2204      	movs	r2, #4
 800bc2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc32:	f043 0202 	orr.w	r2, r3, #2
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bc3c:	69fb      	ldr	r3, [r7, #28]
 800bc3e:	f003 0308 	and.w	r3, r3, #8
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d015      	beq.n	800bc72 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bc46:	69bb      	ldr	r3, [r7, #24]
 800bc48:	f003 0320 	and.w	r3, r3, #32
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d104      	bne.n	800bc5a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800bc50:	697a      	ldr	r2, [r7, #20]
 800bc52:	4b48      	ldr	r3, [pc, #288]	; (800bd74 <HAL_UART_IRQHandler+0x23c>)
 800bc54:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d00b      	beq.n	800bc72 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	2208      	movs	r2, #8
 800bc60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc68:	f043 0208 	orr.w	r2, r3, #8
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bc72:	69fb      	ldr	r3, [r7, #28]
 800bc74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d011      	beq.n	800bca0 <HAL_UART_IRQHandler+0x168>
 800bc7c:	69bb      	ldr	r3, [r7, #24]
 800bc7e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d00c      	beq.n	800bca0 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bc8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc96:	f043 0220 	orr.w	r2, r3, #32
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	f000 81f6 	beq.w	800c098 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bcac:	69fb      	ldr	r3, [r7, #28]
 800bcae:	f003 0320 	and.w	r3, r3, #32
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d011      	beq.n	800bcda <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bcb6:	69bb      	ldr	r3, [r7, #24]
 800bcb8:	f003 0320 	and.w	r3, r3, #32
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d104      	bne.n	800bcca <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bcc0:	697b      	ldr	r3, [r7, #20]
 800bcc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d007      	beq.n	800bcda <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d003      	beq.n	800bcda <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcd6:	6878      	ldr	r0, [r7, #4]
 800bcd8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bce0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	689b      	ldr	r3, [r3, #8]
 800bce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcec:	2b40      	cmp	r3, #64	; 0x40
 800bcee:	d004      	beq.n	800bcfa <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d031      	beq.n	800bd5e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bcfa:	6878      	ldr	r0, [r7, #4]
 800bcfc:	f001 f964 	bl	800cfc8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	689b      	ldr	r3, [r3, #8]
 800bd06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd0a:	2b40      	cmp	r3, #64	; 0x40
 800bd0c:	d123      	bne.n	800bd56 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	689a      	ldr	r2, [r3, #8]
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bd1c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d013      	beq.n	800bd4e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd2a:	4a14      	ldr	r2, [pc, #80]	; (800bd7c <HAL_UART_IRQHandler+0x244>)
 800bd2c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd32:	4618      	mov	r0, r3
 800bd34:	f7f7 fd7c 	bl	8003830 <HAL_DMA_Abort_IT>
 800bd38:	4603      	mov	r3, r0
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d017      	beq.n	800bd6e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd44:	687a      	ldr	r2, [r7, #4]
 800bd46:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800bd48:	4610      	mov	r0, r2
 800bd4a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd4c:	e00f      	b.n	800bd6e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bd4e:	6878      	ldr	r0, [r7, #4]
 800bd50:	f000 f9c0 	bl	800c0d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd54:	e00b      	b.n	800bd6e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bd56:	6878      	ldr	r0, [r7, #4]
 800bd58:	f000 f9bc 	bl	800c0d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd5c:	e007      	b.n	800bd6e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bd5e:	6878      	ldr	r0, [r7, #4]
 800bd60:	f000 f9b8 	bl	800c0d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	2200      	movs	r2, #0
 800bd68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800bd6c:	e194      	b.n	800c098 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd6e:	bf00      	nop
    return;
 800bd70:	e192      	b.n	800c098 <HAL_UART_IRQHandler+0x560>
 800bd72:	bf00      	nop
 800bd74:	10000001 	.word	0x10000001
 800bd78:	04000120 	.word	0x04000120
 800bd7c:	0800d17b 	.word	0x0800d17b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd84:	2b01      	cmp	r3, #1
 800bd86:	f040 810f 	bne.w	800bfa8 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800bd8a:	69fb      	ldr	r3, [r7, #28]
 800bd8c:	f003 0310 	and.w	r3, r3, #16
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	f000 8109 	beq.w	800bfa8 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800bd96:	69bb      	ldr	r3, [r7, #24]
 800bd98:	f003 0310 	and.w	r3, r3, #16
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	f000 8103 	beq.w	800bfa8 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	2210      	movs	r2, #16
 800bda8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	689b      	ldr	r3, [r3, #8]
 800bdb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bdb4:	2b40      	cmp	r3, #64	; 0x40
 800bdb6:	f040 80bb 	bne.w	800bf30 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	4a8f      	ldr	r2, [pc, #572]	; (800c000 <HAL_UART_IRQHandler+0x4c8>)
 800bdc2:	4293      	cmp	r3, r2
 800bdc4:	d059      	beq.n	800be7a <HAL_UART_IRQHandler+0x342>
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	4a8d      	ldr	r2, [pc, #564]	; (800c004 <HAL_UART_IRQHandler+0x4cc>)
 800bdce:	4293      	cmp	r3, r2
 800bdd0:	d053      	beq.n	800be7a <HAL_UART_IRQHandler+0x342>
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	4a8b      	ldr	r2, [pc, #556]	; (800c008 <HAL_UART_IRQHandler+0x4d0>)
 800bdda:	4293      	cmp	r3, r2
 800bddc:	d04d      	beq.n	800be7a <HAL_UART_IRQHandler+0x342>
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	4a89      	ldr	r2, [pc, #548]	; (800c00c <HAL_UART_IRQHandler+0x4d4>)
 800bde6:	4293      	cmp	r3, r2
 800bde8:	d047      	beq.n	800be7a <HAL_UART_IRQHandler+0x342>
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	4a87      	ldr	r2, [pc, #540]	; (800c010 <HAL_UART_IRQHandler+0x4d8>)
 800bdf2:	4293      	cmp	r3, r2
 800bdf4:	d041      	beq.n	800be7a <HAL_UART_IRQHandler+0x342>
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	4a85      	ldr	r2, [pc, #532]	; (800c014 <HAL_UART_IRQHandler+0x4dc>)
 800bdfe:	4293      	cmp	r3, r2
 800be00:	d03b      	beq.n	800be7a <HAL_UART_IRQHandler+0x342>
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	4a83      	ldr	r2, [pc, #524]	; (800c018 <HAL_UART_IRQHandler+0x4e0>)
 800be0a:	4293      	cmp	r3, r2
 800be0c:	d035      	beq.n	800be7a <HAL_UART_IRQHandler+0x342>
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	4a81      	ldr	r2, [pc, #516]	; (800c01c <HAL_UART_IRQHandler+0x4e4>)
 800be16:	4293      	cmp	r3, r2
 800be18:	d02f      	beq.n	800be7a <HAL_UART_IRQHandler+0x342>
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	4a7f      	ldr	r2, [pc, #508]	; (800c020 <HAL_UART_IRQHandler+0x4e8>)
 800be22:	4293      	cmp	r3, r2
 800be24:	d029      	beq.n	800be7a <HAL_UART_IRQHandler+0x342>
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	4a7d      	ldr	r2, [pc, #500]	; (800c024 <HAL_UART_IRQHandler+0x4ec>)
 800be2e:	4293      	cmp	r3, r2
 800be30:	d023      	beq.n	800be7a <HAL_UART_IRQHandler+0x342>
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	4a7b      	ldr	r2, [pc, #492]	; (800c028 <HAL_UART_IRQHandler+0x4f0>)
 800be3a:	4293      	cmp	r3, r2
 800be3c:	d01d      	beq.n	800be7a <HAL_UART_IRQHandler+0x342>
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	4a79      	ldr	r2, [pc, #484]	; (800c02c <HAL_UART_IRQHandler+0x4f4>)
 800be46:	4293      	cmp	r3, r2
 800be48:	d017      	beq.n	800be7a <HAL_UART_IRQHandler+0x342>
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	4a77      	ldr	r2, [pc, #476]	; (800c030 <HAL_UART_IRQHandler+0x4f8>)
 800be52:	4293      	cmp	r3, r2
 800be54:	d011      	beq.n	800be7a <HAL_UART_IRQHandler+0x342>
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	4a75      	ldr	r2, [pc, #468]	; (800c034 <HAL_UART_IRQHandler+0x4fc>)
 800be5e:	4293      	cmp	r3, r2
 800be60:	d00b      	beq.n	800be7a <HAL_UART_IRQHandler+0x342>
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	4a73      	ldr	r2, [pc, #460]	; (800c038 <HAL_UART_IRQHandler+0x500>)
 800be6a:	4293      	cmp	r3, r2
 800be6c:	d005      	beq.n	800be7a <HAL_UART_IRQHandler+0x342>
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	4a71      	ldr	r2, [pc, #452]	; (800c03c <HAL_UART_IRQHandler+0x504>)
 800be76:	4293      	cmp	r3, r2
 800be78:	d105      	bne.n	800be86 <HAL_UART_IRQHandler+0x34e>
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	685b      	ldr	r3, [r3, #4]
 800be82:	b29b      	uxth	r3, r3
 800be84:	e004      	b.n	800be90 <HAL_UART_IRQHandler+0x358>
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	685b      	ldr	r3, [r3, #4]
 800be8e:	b29b      	uxth	r3, r3
 800be90:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800be92:	893b      	ldrh	r3, [r7, #8]
 800be94:	2b00      	cmp	r3, #0
 800be96:	f000 8101 	beq.w	800c09c <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bea0:	893a      	ldrh	r2, [r7, #8]
 800bea2:	429a      	cmp	r2, r3
 800bea4:	f080 80fa 	bcs.w	800c09c <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	893a      	ldrh	r2, [r7, #8]
 800beac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800beb4:	69db      	ldr	r3, [r3, #28]
 800beb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800beba:	d02b      	beq.n	800bf14 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	681a      	ldr	r2, [r3, #0]
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800beca:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	689a      	ldr	r2, [r3, #8]
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	f022 0201 	bic.w	r2, r2, #1
 800beda:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	689a      	ldr	r2, [r3, #8]
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800beea:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	2220      	movs	r2, #32
 800bef0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	2200      	movs	r2, #0
 800bef8:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	681a      	ldr	r2, [r3, #0]
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	f022 0210 	bic.w	r2, r2, #16
 800bf08:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf0e:	4618      	mov	r0, r3
 800bf10:	f7f7 f970 	bl	80031f4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bf20:	b29b      	uxth	r3, r3
 800bf22:	1ad3      	subs	r3, r2, r3
 800bf24:	b29b      	uxth	r3, r3
 800bf26:	4619      	mov	r1, r3
 800bf28:	6878      	ldr	r0, [r7, #4]
 800bf2a:	f000 f8dd 	bl	800c0e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bf2e:	e0b5      	b.n	800c09c <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bf3c:	b29b      	uxth	r3, r3
 800bf3e:	1ad3      	subs	r3, r2, r3
 800bf40:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bf48:	b29b      	uxth	r3, r3
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	f000 80a8 	beq.w	800c0a0 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 800bf50:	897b      	ldrh	r3, [r7, #10]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	f000 80a4 	beq.w	800c0a0 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	681a      	ldr	r2, [r3, #0]
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800bf66:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	6899      	ldr	r1, [r3, #8]
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681a      	ldr	r2, [r3, #0]
 800bf72:	4b33      	ldr	r3, [pc, #204]	; (800c040 <HAL_UART_IRQHandler+0x508>)
 800bf74:	400b      	ands	r3, r1
 800bf76:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	2220      	movs	r2, #32
 800bf7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	2200      	movs	r2, #0
 800bf84:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	2200      	movs	r2, #0
 800bf8a:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	681a      	ldr	r2, [r3, #0]
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	f022 0210 	bic.w	r2, r2, #16
 800bf9a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bf9c:	897b      	ldrh	r3, [r7, #10]
 800bf9e:	4619      	mov	r1, r3
 800bfa0:	6878      	ldr	r0, [r7, #4]
 800bfa2:	f000 f8a1 	bl	800c0e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bfa6:	e07b      	b.n	800c0a0 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800bfa8:	69fb      	ldr	r3, [r7, #28]
 800bfaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d00d      	beq.n	800bfce <HAL_UART_IRQHandler+0x496>
 800bfb2:	697b      	ldr	r3, [r7, #20]
 800bfb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d008      	beq.n	800bfce <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800bfc4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800bfc6:	6878      	ldr	r0, [r7, #4]
 800bfc8:	f001 f907 	bl	800d1da <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bfcc:	e06b      	b.n	800c0a6 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800bfce:	69fb      	ldr	r3, [r7, #28]
 800bfd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d035      	beq.n	800c044 <HAL_UART_IRQHandler+0x50c>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800bfd8:	69bb      	ldr	r3, [r7, #24]
 800bfda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d104      	bne.n	800bfec <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800bfe2:	697b      	ldr	r3, [r7, #20]
 800bfe4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d02b      	beq.n	800c044 <HAL_UART_IRQHandler+0x50c>
  {
    if (huart->TxISR != NULL)
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d057      	beq.n	800c0a4 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bff8:	6878      	ldr	r0, [r7, #4]
 800bffa:	4798      	blx	r3
    }
    return;
 800bffc:	e052      	b.n	800c0a4 <HAL_UART_IRQHandler+0x56c>
 800bffe:	bf00      	nop
 800c000:	40020010 	.word	0x40020010
 800c004:	40020028 	.word	0x40020028
 800c008:	40020040 	.word	0x40020040
 800c00c:	40020058 	.word	0x40020058
 800c010:	40020070 	.word	0x40020070
 800c014:	40020088 	.word	0x40020088
 800c018:	400200a0 	.word	0x400200a0
 800c01c:	400200b8 	.word	0x400200b8
 800c020:	40020410 	.word	0x40020410
 800c024:	40020428 	.word	0x40020428
 800c028:	40020440 	.word	0x40020440
 800c02c:	40020458 	.word	0x40020458
 800c030:	40020470 	.word	0x40020470
 800c034:	40020488 	.word	0x40020488
 800c038:	400204a0 	.word	0x400204a0
 800c03c:	400204b8 	.word	0x400204b8
 800c040:	effffffe 	.word	0xeffffffe
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c044:	69fb      	ldr	r3, [r7, #28]
 800c046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d008      	beq.n	800c060 <HAL_UART_IRQHandler+0x528>
 800c04e:	69bb      	ldr	r3, [r7, #24]
 800c050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c054:	2b00      	cmp	r3, #0
 800c056:	d003      	beq.n	800c060 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800c058:	6878      	ldr	r0, [r7, #4]
 800c05a:	f001 f8a4 	bl	800d1a6 <UART_EndTransmit_IT>
    return;
 800c05e:	e022      	b.n	800c0a6 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c060:	69fb      	ldr	r3, [r7, #28]
 800c062:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c066:	2b00      	cmp	r3, #0
 800c068:	d008      	beq.n	800c07c <HAL_UART_IRQHandler+0x544>
 800c06a:	69bb      	ldr	r3, [r7, #24]
 800c06c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c070:	2b00      	cmp	r3, #0
 800c072:	d003      	beq.n	800c07c <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c074:	6878      	ldr	r0, [r7, #4]
 800c076:	f001 f8c4 	bl	800d202 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c07a:	e014      	b.n	800c0a6 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c07c:	69fb      	ldr	r3, [r7, #28]
 800c07e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c082:	2b00      	cmp	r3, #0
 800c084:	d00f      	beq.n	800c0a6 <HAL_UART_IRQHandler+0x56e>
 800c086:	69bb      	ldr	r3, [r7, #24]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	da0c      	bge.n	800c0a6 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c08c:	6878      	ldr	r0, [r7, #4]
 800c08e:	f001 f8ae 	bl	800d1ee <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c092:	e008      	b.n	800c0a6 <HAL_UART_IRQHandler+0x56e>
      return;
 800c094:	bf00      	nop
 800c096:	e006      	b.n	800c0a6 <HAL_UART_IRQHandler+0x56e>
    return;
 800c098:	bf00      	nop
 800c09a:	e004      	b.n	800c0a6 <HAL_UART_IRQHandler+0x56e>
      return;
 800c09c:	bf00      	nop
 800c09e:	e002      	b.n	800c0a6 <HAL_UART_IRQHandler+0x56e>
      return;
 800c0a0:	bf00      	nop
 800c0a2:	e000      	b.n	800c0a6 <HAL_UART_IRQHandler+0x56e>
    return;
 800c0a4:	bf00      	nop
  }
}
 800c0a6:	3720      	adds	r7, #32
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	bd80      	pop	{r7, pc}

0800c0ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c0ac:	b480      	push	{r7}
 800c0ae:	b083      	sub	sp, #12
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c0b4:	bf00      	nop
 800c0b6:	370c      	adds	r7, #12
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0be:	4770      	bx	lr

0800c0c0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c0c0:	b480      	push	{r7}
 800c0c2:	b083      	sub	sp, #12
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c0c8:	bf00      	nop
 800c0ca:	370c      	adds	r7, #12
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d2:	4770      	bx	lr

0800c0d4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c0d4:	b480      	push	{r7}
 800c0d6:	b083      	sub	sp, #12
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c0dc:	bf00      	nop
 800c0de:	370c      	adds	r7, #12
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e6:	4770      	bx	lr

0800c0e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c0e8:	b480      	push	{r7}
 800c0ea:	b083      	sub	sp, #12
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
 800c0f0:	460b      	mov	r3, r1
 800c0f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c0f4:	bf00      	nop
 800c0f6:	370c      	adds	r7, #12
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fe:	4770      	bx	lr

0800c100 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c100:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c104:	b092      	sub	sp, #72	; 0x48
 800c106:	af00      	add	r7, sp, #0
 800c108:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c10a:	2300      	movs	r3, #0
 800c10c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c110:	697b      	ldr	r3, [r7, #20]
 800c112:	689a      	ldr	r2, [r3, #8]
 800c114:	697b      	ldr	r3, [r7, #20]
 800c116:	691b      	ldr	r3, [r3, #16]
 800c118:	431a      	orrs	r2, r3
 800c11a:	697b      	ldr	r3, [r7, #20]
 800c11c:	695b      	ldr	r3, [r3, #20]
 800c11e:	431a      	orrs	r2, r3
 800c120:	697b      	ldr	r3, [r7, #20]
 800c122:	69db      	ldr	r3, [r3, #28]
 800c124:	4313      	orrs	r3, r2
 800c126:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c128:	697b      	ldr	r3, [r7, #20]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	681a      	ldr	r2, [r3, #0]
 800c12e:	4bbe      	ldr	r3, [pc, #760]	; (800c428 <UART_SetConfig+0x328>)
 800c130:	4013      	ands	r3, r2
 800c132:	697a      	ldr	r2, [r7, #20]
 800c134:	6812      	ldr	r2, [r2, #0]
 800c136:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c138:	430b      	orrs	r3, r1
 800c13a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c13c:	697b      	ldr	r3, [r7, #20]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	685b      	ldr	r3, [r3, #4]
 800c142:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c146:	697b      	ldr	r3, [r7, #20]
 800c148:	68da      	ldr	r2, [r3, #12]
 800c14a:	697b      	ldr	r3, [r7, #20]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	430a      	orrs	r2, r1
 800c150:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c152:	697b      	ldr	r3, [r7, #20]
 800c154:	699b      	ldr	r3, [r3, #24]
 800c156:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c158:	697b      	ldr	r3, [r7, #20]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	4ab3      	ldr	r2, [pc, #716]	; (800c42c <UART_SetConfig+0x32c>)
 800c15e:	4293      	cmp	r3, r2
 800c160:	d004      	beq.n	800c16c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c162:	697b      	ldr	r3, [r7, #20]
 800c164:	6a1b      	ldr	r3, [r3, #32]
 800c166:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c168:	4313      	orrs	r3, r2
 800c16a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c16c:	697b      	ldr	r3, [r7, #20]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	689a      	ldr	r2, [r3, #8]
 800c172:	4baf      	ldr	r3, [pc, #700]	; (800c430 <UART_SetConfig+0x330>)
 800c174:	4013      	ands	r3, r2
 800c176:	697a      	ldr	r2, [r7, #20]
 800c178:	6812      	ldr	r2, [r2, #0]
 800c17a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c17c:	430b      	orrs	r3, r1
 800c17e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c180:	697b      	ldr	r3, [r7, #20]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c186:	f023 010f 	bic.w	r1, r3, #15
 800c18a:	697b      	ldr	r3, [r7, #20]
 800c18c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c18e:	697b      	ldr	r3, [r7, #20]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	430a      	orrs	r2, r1
 800c194:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c196:	697b      	ldr	r3, [r7, #20]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	4aa6      	ldr	r2, [pc, #664]	; (800c434 <UART_SetConfig+0x334>)
 800c19c:	4293      	cmp	r3, r2
 800c19e:	d177      	bne.n	800c290 <UART_SetConfig+0x190>
 800c1a0:	4ba5      	ldr	r3, [pc, #660]	; (800c438 <UART_SetConfig+0x338>)
 800c1a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c1a8:	2b28      	cmp	r3, #40	; 0x28
 800c1aa:	d86d      	bhi.n	800c288 <UART_SetConfig+0x188>
 800c1ac:	a201      	add	r2, pc, #4	; (adr r2, 800c1b4 <UART_SetConfig+0xb4>)
 800c1ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1b2:	bf00      	nop
 800c1b4:	0800c259 	.word	0x0800c259
 800c1b8:	0800c289 	.word	0x0800c289
 800c1bc:	0800c289 	.word	0x0800c289
 800c1c0:	0800c289 	.word	0x0800c289
 800c1c4:	0800c289 	.word	0x0800c289
 800c1c8:	0800c289 	.word	0x0800c289
 800c1cc:	0800c289 	.word	0x0800c289
 800c1d0:	0800c289 	.word	0x0800c289
 800c1d4:	0800c261 	.word	0x0800c261
 800c1d8:	0800c289 	.word	0x0800c289
 800c1dc:	0800c289 	.word	0x0800c289
 800c1e0:	0800c289 	.word	0x0800c289
 800c1e4:	0800c289 	.word	0x0800c289
 800c1e8:	0800c289 	.word	0x0800c289
 800c1ec:	0800c289 	.word	0x0800c289
 800c1f0:	0800c289 	.word	0x0800c289
 800c1f4:	0800c269 	.word	0x0800c269
 800c1f8:	0800c289 	.word	0x0800c289
 800c1fc:	0800c289 	.word	0x0800c289
 800c200:	0800c289 	.word	0x0800c289
 800c204:	0800c289 	.word	0x0800c289
 800c208:	0800c289 	.word	0x0800c289
 800c20c:	0800c289 	.word	0x0800c289
 800c210:	0800c289 	.word	0x0800c289
 800c214:	0800c271 	.word	0x0800c271
 800c218:	0800c289 	.word	0x0800c289
 800c21c:	0800c289 	.word	0x0800c289
 800c220:	0800c289 	.word	0x0800c289
 800c224:	0800c289 	.word	0x0800c289
 800c228:	0800c289 	.word	0x0800c289
 800c22c:	0800c289 	.word	0x0800c289
 800c230:	0800c289 	.word	0x0800c289
 800c234:	0800c279 	.word	0x0800c279
 800c238:	0800c289 	.word	0x0800c289
 800c23c:	0800c289 	.word	0x0800c289
 800c240:	0800c289 	.word	0x0800c289
 800c244:	0800c289 	.word	0x0800c289
 800c248:	0800c289 	.word	0x0800c289
 800c24c:	0800c289 	.word	0x0800c289
 800c250:	0800c289 	.word	0x0800c289
 800c254:	0800c281 	.word	0x0800c281
 800c258:	2301      	movs	r3, #1
 800c25a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c25e:	e222      	b.n	800c6a6 <UART_SetConfig+0x5a6>
 800c260:	2304      	movs	r3, #4
 800c262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c266:	e21e      	b.n	800c6a6 <UART_SetConfig+0x5a6>
 800c268:	2308      	movs	r3, #8
 800c26a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c26e:	e21a      	b.n	800c6a6 <UART_SetConfig+0x5a6>
 800c270:	2310      	movs	r3, #16
 800c272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c276:	e216      	b.n	800c6a6 <UART_SetConfig+0x5a6>
 800c278:	2320      	movs	r3, #32
 800c27a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c27e:	e212      	b.n	800c6a6 <UART_SetConfig+0x5a6>
 800c280:	2340      	movs	r3, #64	; 0x40
 800c282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c286:	e20e      	b.n	800c6a6 <UART_SetConfig+0x5a6>
 800c288:	2380      	movs	r3, #128	; 0x80
 800c28a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c28e:	e20a      	b.n	800c6a6 <UART_SetConfig+0x5a6>
 800c290:	697b      	ldr	r3, [r7, #20]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	4a69      	ldr	r2, [pc, #420]	; (800c43c <UART_SetConfig+0x33c>)
 800c296:	4293      	cmp	r3, r2
 800c298:	d130      	bne.n	800c2fc <UART_SetConfig+0x1fc>
 800c29a:	4b67      	ldr	r3, [pc, #412]	; (800c438 <UART_SetConfig+0x338>)
 800c29c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c29e:	f003 0307 	and.w	r3, r3, #7
 800c2a2:	2b05      	cmp	r3, #5
 800c2a4:	d826      	bhi.n	800c2f4 <UART_SetConfig+0x1f4>
 800c2a6:	a201      	add	r2, pc, #4	; (adr r2, 800c2ac <UART_SetConfig+0x1ac>)
 800c2a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2ac:	0800c2c5 	.word	0x0800c2c5
 800c2b0:	0800c2cd 	.word	0x0800c2cd
 800c2b4:	0800c2d5 	.word	0x0800c2d5
 800c2b8:	0800c2dd 	.word	0x0800c2dd
 800c2bc:	0800c2e5 	.word	0x0800c2e5
 800c2c0:	0800c2ed 	.word	0x0800c2ed
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2ca:	e1ec      	b.n	800c6a6 <UART_SetConfig+0x5a6>
 800c2cc:	2304      	movs	r3, #4
 800c2ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2d2:	e1e8      	b.n	800c6a6 <UART_SetConfig+0x5a6>
 800c2d4:	2308      	movs	r3, #8
 800c2d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2da:	e1e4      	b.n	800c6a6 <UART_SetConfig+0x5a6>
 800c2dc:	2310      	movs	r3, #16
 800c2de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2e2:	e1e0      	b.n	800c6a6 <UART_SetConfig+0x5a6>
 800c2e4:	2320      	movs	r3, #32
 800c2e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2ea:	e1dc      	b.n	800c6a6 <UART_SetConfig+0x5a6>
 800c2ec:	2340      	movs	r3, #64	; 0x40
 800c2ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2f2:	e1d8      	b.n	800c6a6 <UART_SetConfig+0x5a6>
 800c2f4:	2380      	movs	r3, #128	; 0x80
 800c2f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2fa:	e1d4      	b.n	800c6a6 <UART_SetConfig+0x5a6>
 800c2fc:	697b      	ldr	r3, [r7, #20]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	4a4f      	ldr	r2, [pc, #316]	; (800c440 <UART_SetConfig+0x340>)
 800c302:	4293      	cmp	r3, r2
 800c304:	d130      	bne.n	800c368 <UART_SetConfig+0x268>
 800c306:	4b4c      	ldr	r3, [pc, #304]	; (800c438 <UART_SetConfig+0x338>)
 800c308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c30a:	f003 0307 	and.w	r3, r3, #7
 800c30e:	2b05      	cmp	r3, #5
 800c310:	d826      	bhi.n	800c360 <UART_SetConfig+0x260>
 800c312:	a201      	add	r2, pc, #4	; (adr r2, 800c318 <UART_SetConfig+0x218>)
 800c314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c318:	0800c331 	.word	0x0800c331
 800c31c:	0800c339 	.word	0x0800c339
 800c320:	0800c341 	.word	0x0800c341
 800c324:	0800c349 	.word	0x0800c349
 800c328:	0800c351 	.word	0x0800c351
 800c32c:	0800c359 	.word	0x0800c359
 800c330:	2300      	movs	r3, #0
 800c332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c336:	e1b6      	b.n	800c6a6 <UART_SetConfig+0x5a6>
 800c338:	2304      	movs	r3, #4
 800c33a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c33e:	e1b2      	b.n	800c6a6 <UART_SetConfig+0x5a6>
 800c340:	2308      	movs	r3, #8
 800c342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c346:	e1ae      	b.n	800c6a6 <UART_SetConfig+0x5a6>
 800c348:	2310      	movs	r3, #16
 800c34a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c34e:	e1aa      	b.n	800c6a6 <UART_SetConfig+0x5a6>
 800c350:	2320      	movs	r3, #32
 800c352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c356:	e1a6      	b.n	800c6a6 <UART_SetConfig+0x5a6>
 800c358:	2340      	movs	r3, #64	; 0x40
 800c35a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c35e:	e1a2      	b.n	800c6a6 <UART_SetConfig+0x5a6>
 800c360:	2380      	movs	r3, #128	; 0x80
 800c362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c366:	e19e      	b.n	800c6a6 <UART_SetConfig+0x5a6>
 800c368:	697b      	ldr	r3, [r7, #20]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	4a35      	ldr	r2, [pc, #212]	; (800c444 <UART_SetConfig+0x344>)
 800c36e:	4293      	cmp	r3, r2
 800c370:	d130      	bne.n	800c3d4 <UART_SetConfig+0x2d4>
 800c372:	4b31      	ldr	r3, [pc, #196]	; (800c438 <UART_SetConfig+0x338>)
 800c374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c376:	f003 0307 	and.w	r3, r3, #7
 800c37a:	2b05      	cmp	r3, #5
 800c37c:	d826      	bhi.n	800c3cc <UART_SetConfig+0x2cc>
 800c37e:	a201      	add	r2, pc, #4	; (adr r2, 800c384 <UART_SetConfig+0x284>)
 800c380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c384:	0800c39d 	.word	0x0800c39d
 800c388:	0800c3a5 	.word	0x0800c3a5
 800c38c:	0800c3ad 	.word	0x0800c3ad
 800c390:	0800c3b5 	.word	0x0800c3b5
 800c394:	0800c3bd 	.word	0x0800c3bd
 800c398:	0800c3c5 	.word	0x0800c3c5
 800c39c:	2300      	movs	r3, #0
 800c39e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3a2:	e180      	b.n	800c6a6 <UART_SetConfig+0x5a6>
 800c3a4:	2304      	movs	r3, #4
 800c3a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3aa:	e17c      	b.n	800c6a6 <UART_SetConfig+0x5a6>
 800c3ac:	2308      	movs	r3, #8
 800c3ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3b2:	e178      	b.n	800c6a6 <UART_SetConfig+0x5a6>
 800c3b4:	2310      	movs	r3, #16
 800c3b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3ba:	e174      	b.n	800c6a6 <UART_SetConfig+0x5a6>
 800c3bc:	2320      	movs	r3, #32
 800c3be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3c2:	e170      	b.n	800c6a6 <UART_SetConfig+0x5a6>
 800c3c4:	2340      	movs	r3, #64	; 0x40
 800c3c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3ca:	e16c      	b.n	800c6a6 <UART_SetConfig+0x5a6>
 800c3cc:	2380      	movs	r3, #128	; 0x80
 800c3ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3d2:	e168      	b.n	800c6a6 <UART_SetConfig+0x5a6>
 800c3d4:	697b      	ldr	r3, [r7, #20]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	4a1b      	ldr	r2, [pc, #108]	; (800c448 <UART_SetConfig+0x348>)
 800c3da:	4293      	cmp	r3, r2
 800c3dc:	d142      	bne.n	800c464 <UART_SetConfig+0x364>
 800c3de:	4b16      	ldr	r3, [pc, #88]	; (800c438 <UART_SetConfig+0x338>)
 800c3e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3e2:	f003 0307 	and.w	r3, r3, #7
 800c3e6:	2b05      	cmp	r3, #5
 800c3e8:	d838      	bhi.n	800c45c <UART_SetConfig+0x35c>
 800c3ea:	a201      	add	r2, pc, #4	; (adr r2, 800c3f0 <UART_SetConfig+0x2f0>)
 800c3ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3f0:	0800c409 	.word	0x0800c409
 800c3f4:	0800c411 	.word	0x0800c411
 800c3f8:	0800c419 	.word	0x0800c419
 800c3fc:	0800c421 	.word	0x0800c421
 800c400:	0800c44d 	.word	0x0800c44d
 800c404:	0800c455 	.word	0x0800c455
 800c408:	2300      	movs	r3, #0
 800c40a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c40e:	e14a      	b.n	800c6a6 <UART_SetConfig+0x5a6>
 800c410:	2304      	movs	r3, #4
 800c412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c416:	e146      	b.n	800c6a6 <UART_SetConfig+0x5a6>
 800c418:	2308      	movs	r3, #8
 800c41a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c41e:	e142      	b.n	800c6a6 <UART_SetConfig+0x5a6>
 800c420:	2310      	movs	r3, #16
 800c422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c426:	e13e      	b.n	800c6a6 <UART_SetConfig+0x5a6>
 800c428:	cfff69f3 	.word	0xcfff69f3
 800c42c:	58000c00 	.word	0x58000c00
 800c430:	11fff4ff 	.word	0x11fff4ff
 800c434:	40011000 	.word	0x40011000
 800c438:	58024400 	.word	0x58024400
 800c43c:	40004400 	.word	0x40004400
 800c440:	40004800 	.word	0x40004800
 800c444:	40004c00 	.word	0x40004c00
 800c448:	40005000 	.word	0x40005000
 800c44c:	2320      	movs	r3, #32
 800c44e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c452:	e128      	b.n	800c6a6 <UART_SetConfig+0x5a6>
 800c454:	2340      	movs	r3, #64	; 0x40
 800c456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c45a:	e124      	b.n	800c6a6 <UART_SetConfig+0x5a6>
 800c45c:	2380      	movs	r3, #128	; 0x80
 800c45e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c462:	e120      	b.n	800c6a6 <UART_SetConfig+0x5a6>
 800c464:	697b      	ldr	r3, [r7, #20]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	4acb      	ldr	r2, [pc, #812]	; (800c798 <UART_SetConfig+0x698>)
 800c46a:	4293      	cmp	r3, r2
 800c46c:	d176      	bne.n	800c55c <UART_SetConfig+0x45c>
 800c46e:	4bcb      	ldr	r3, [pc, #812]	; (800c79c <UART_SetConfig+0x69c>)
 800c470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c472:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c476:	2b28      	cmp	r3, #40	; 0x28
 800c478:	d86c      	bhi.n	800c554 <UART_SetConfig+0x454>
 800c47a:	a201      	add	r2, pc, #4	; (adr r2, 800c480 <UART_SetConfig+0x380>)
 800c47c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c480:	0800c525 	.word	0x0800c525
 800c484:	0800c555 	.word	0x0800c555
 800c488:	0800c555 	.word	0x0800c555
 800c48c:	0800c555 	.word	0x0800c555
 800c490:	0800c555 	.word	0x0800c555
 800c494:	0800c555 	.word	0x0800c555
 800c498:	0800c555 	.word	0x0800c555
 800c49c:	0800c555 	.word	0x0800c555
 800c4a0:	0800c52d 	.word	0x0800c52d
 800c4a4:	0800c555 	.word	0x0800c555
 800c4a8:	0800c555 	.word	0x0800c555
 800c4ac:	0800c555 	.word	0x0800c555
 800c4b0:	0800c555 	.word	0x0800c555
 800c4b4:	0800c555 	.word	0x0800c555
 800c4b8:	0800c555 	.word	0x0800c555
 800c4bc:	0800c555 	.word	0x0800c555
 800c4c0:	0800c535 	.word	0x0800c535
 800c4c4:	0800c555 	.word	0x0800c555
 800c4c8:	0800c555 	.word	0x0800c555
 800c4cc:	0800c555 	.word	0x0800c555
 800c4d0:	0800c555 	.word	0x0800c555
 800c4d4:	0800c555 	.word	0x0800c555
 800c4d8:	0800c555 	.word	0x0800c555
 800c4dc:	0800c555 	.word	0x0800c555
 800c4e0:	0800c53d 	.word	0x0800c53d
 800c4e4:	0800c555 	.word	0x0800c555
 800c4e8:	0800c555 	.word	0x0800c555
 800c4ec:	0800c555 	.word	0x0800c555
 800c4f0:	0800c555 	.word	0x0800c555
 800c4f4:	0800c555 	.word	0x0800c555
 800c4f8:	0800c555 	.word	0x0800c555
 800c4fc:	0800c555 	.word	0x0800c555
 800c500:	0800c545 	.word	0x0800c545
 800c504:	0800c555 	.word	0x0800c555
 800c508:	0800c555 	.word	0x0800c555
 800c50c:	0800c555 	.word	0x0800c555
 800c510:	0800c555 	.word	0x0800c555
 800c514:	0800c555 	.word	0x0800c555
 800c518:	0800c555 	.word	0x0800c555
 800c51c:	0800c555 	.word	0x0800c555
 800c520:	0800c54d 	.word	0x0800c54d
 800c524:	2301      	movs	r3, #1
 800c526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c52a:	e0bc      	b.n	800c6a6 <UART_SetConfig+0x5a6>
 800c52c:	2304      	movs	r3, #4
 800c52e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c532:	e0b8      	b.n	800c6a6 <UART_SetConfig+0x5a6>
 800c534:	2308      	movs	r3, #8
 800c536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c53a:	e0b4      	b.n	800c6a6 <UART_SetConfig+0x5a6>
 800c53c:	2310      	movs	r3, #16
 800c53e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c542:	e0b0      	b.n	800c6a6 <UART_SetConfig+0x5a6>
 800c544:	2320      	movs	r3, #32
 800c546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c54a:	e0ac      	b.n	800c6a6 <UART_SetConfig+0x5a6>
 800c54c:	2340      	movs	r3, #64	; 0x40
 800c54e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c552:	e0a8      	b.n	800c6a6 <UART_SetConfig+0x5a6>
 800c554:	2380      	movs	r3, #128	; 0x80
 800c556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c55a:	e0a4      	b.n	800c6a6 <UART_SetConfig+0x5a6>
 800c55c:	697b      	ldr	r3, [r7, #20]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	4a8f      	ldr	r2, [pc, #572]	; (800c7a0 <UART_SetConfig+0x6a0>)
 800c562:	4293      	cmp	r3, r2
 800c564:	d130      	bne.n	800c5c8 <UART_SetConfig+0x4c8>
 800c566:	4b8d      	ldr	r3, [pc, #564]	; (800c79c <UART_SetConfig+0x69c>)
 800c568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c56a:	f003 0307 	and.w	r3, r3, #7
 800c56e:	2b05      	cmp	r3, #5
 800c570:	d826      	bhi.n	800c5c0 <UART_SetConfig+0x4c0>
 800c572:	a201      	add	r2, pc, #4	; (adr r2, 800c578 <UART_SetConfig+0x478>)
 800c574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c578:	0800c591 	.word	0x0800c591
 800c57c:	0800c599 	.word	0x0800c599
 800c580:	0800c5a1 	.word	0x0800c5a1
 800c584:	0800c5a9 	.word	0x0800c5a9
 800c588:	0800c5b1 	.word	0x0800c5b1
 800c58c:	0800c5b9 	.word	0x0800c5b9
 800c590:	2300      	movs	r3, #0
 800c592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c596:	e086      	b.n	800c6a6 <UART_SetConfig+0x5a6>
 800c598:	2304      	movs	r3, #4
 800c59a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c59e:	e082      	b.n	800c6a6 <UART_SetConfig+0x5a6>
 800c5a0:	2308      	movs	r3, #8
 800c5a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5a6:	e07e      	b.n	800c6a6 <UART_SetConfig+0x5a6>
 800c5a8:	2310      	movs	r3, #16
 800c5aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5ae:	e07a      	b.n	800c6a6 <UART_SetConfig+0x5a6>
 800c5b0:	2320      	movs	r3, #32
 800c5b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5b6:	e076      	b.n	800c6a6 <UART_SetConfig+0x5a6>
 800c5b8:	2340      	movs	r3, #64	; 0x40
 800c5ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5be:	e072      	b.n	800c6a6 <UART_SetConfig+0x5a6>
 800c5c0:	2380      	movs	r3, #128	; 0x80
 800c5c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5c6:	e06e      	b.n	800c6a6 <UART_SetConfig+0x5a6>
 800c5c8:	697b      	ldr	r3, [r7, #20]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	4a75      	ldr	r2, [pc, #468]	; (800c7a4 <UART_SetConfig+0x6a4>)
 800c5ce:	4293      	cmp	r3, r2
 800c5d0:	d130      	bne.n	800c634 <UART_SetConfig+0x534>
 800c5d2:	4b72      	ldr	r3, [pc, #456]	; (800c79c <UART_SetConfig+0x69c>)
 800c5d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5d6:	f003 0307 	and.w	r3, r3, #7
 800c5da:	2b05      	cmp	r3, #5
 800c5dc:	d826      	bhi.n	800c62c <UART_SetConfig+0x52c>
 800c5de:	a201      	add	r2, pc, #4	; (adr r2, 800c5e4 <UART_SetConfig+0x4e4>)
 800c5e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5e4:	0800c5fd 	.word	0x0800c5fd
 800c5e8:	0800c605 	.word	0x0800c605
 800c5ec:	0800c60d 	.word	0x0800c60d
 800c5f0:	0800c615 	.word	0x0800c615
 800c5f4:	0800c61d 	.word	0x0800c61d
 800c5f8:	0800c625 	.word	0x0800c625
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c602:	e050      	b.n	800c6a6 <UART_SetConfig+0x5a6>
 800c604:	2304      	movs	r3, #4
 800c606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c60a:	e04c      	b.n	800c6a6 <UART_SetConfig+0x5a6>
 800c60c:	2308      	movs	r3, #8
 800c60e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c612:	e048      	b.n	800c6a6 <UART_SetConfig+0x5a6>
 800c614:	2310      	movs	r3, #16
 800c616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c61a:	e044      	b.n	800c6a6 <UART_SetConfig+0x5a6>
 800c61c:	2320      	movs	r3, #32
 800c61e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c622:	e040      	b.n	800c6a6 <UART_SetConfig+0x5a6>
 800c624:	2340      	movs	r3, #64	; 0x40
 800c626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c62a:	e03c      	b.n	800c6a6 <UART_SetConfig+0x5a6>
 800c62c:	2380      	movs	r3, #128	; 0x80
 800c62e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c632:	e038      	b.n	800c6a6 <UART_SetConfig+0x5a6>
 800c634:	697b      	ldr	r3, [r7, #20]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	4a5b      	ldr	r2, [pc, #364]	; (800c7a8 <UART_SetConfig+0x6a8>)
 800c63a:	4293      	cmp	r3, r2
 800c63c:	d130      	bne.n	800c6a0 <UART_SetConfig+0x5a0>
 800c63e:	4b57      	ldr	r3, [pc, #348]	; (800c79c <UART_SetConfig+0x69c>)
 800c640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c642:	f003 0307 	and.w	r3, r3, #7
 800c646:	2b05      	cmp	r3, #5
 800c648:	d826      	bhi.n	800c698 <UART_SetConfig+0x598>
 800c64a:	a201      	add	r2, pc, #4	; (adr r2, 800c650 <UART_SetConfig+0x550>)
 800c64c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c650:	0800c669 	.word	0x0800c669
 800c654:	0800c671 	.word	0x0800c671
 800c658:	0800c679 	.word	0x0800c679
 800c65c:	0800c681 	.word	0x0800c681
 800c660:	0800c689 	.word	0x0800c689
 800c664:	0800c691 	.word	0x0800c691
 800c668:	2302      	movs	r3, #2
 800c66a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c66e:	e01a      	b.n	800c6a6 <UART_SetConfig+0x5a6>
 800c670:	2304      	movs	r3, #4
 800c672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c676:	e016      	b.n	800c6a6 <UART_SetConfig+0x5a6>
 800c678:	2308      	movs	r3, #8
 800c67a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c67e:	e012      	b.n	800c6a6 <UART_SetConfig+0x5a6>
 800c680:	2310      	movs	r3, #16
 800c682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c686:	e00e      	b.n	800c6a6 <UART_SetConfig+0x5a6>
 800c688:	2320      	movs	r3, #32
 800c68a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c68e:	e00a      	b.n	800c6a6 <UART_SetConfig+0x5a6>
 800c690:	2340      	movs	r3, #64	; 0x40
 800c692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c696:	e006      	b.n	800c6a6 <UART_SetConfig+0x5a6>
 800c698:	2380      	movs	r3, #128	; 0x80
 800c69a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c69e:	e002      	b.n	800c6a6 <UART_SetConfig+0x5a6>
 800c6a0:	2380      	movs	r3, #128	; 0x80
 800c6a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c6a6:	697b      	ldr	r3, [r7, #20]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	4a3f      	ldr	r2, [pc, #252]	; (800c7a8 <UART_SetConfig+0x6a8>)
 800c6ac:	4293      	cmp	r3, r2
 800c6ae:	f040 80f8 	bne.w	800c8a2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c6b2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c6b6:	2b20      	cmp	r3, #32
 800c6b8:	dc46      	bgt.n	800c748 <UART_SetConfig+0x648>
 800c6ba:	2b02      	cmp	r3, #2
 800c6bc:	f2c0 8082 	blt.w	800c7c4 <UART_SetConfig+0x6c4>
 800c6c0:	3b02      	subs	r3, #2
 800c6c2:	2b1e      	cmp	r3, #30
 800c6c4:	d87e      	bhi.n	800c7c4 <UART_SetConfig+0x6c4>
 800c6c6:	a201      	add	r2, pc, #4	; (adr r2, 800c6cc <UART_SetConfig+0x5cc>)
 800c6c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6cc:	0800c74f 	.word	0x0800c74f
 800c6d0:	0800c7c5 	.word	0x0800c7c5
 800c6d4:	0800c757 	.word	0x0800c757
 800c6d8:	0800c7c5 	.word	0x0800c7c5
 800c6dc:	0800c7c5 	.word	0x0800c7c5
 800c6e0:	0800c7c5 	.word	0x0800c7c5
 800c6e4:	0800c767 	.word	0x0800c767
 800c6e8:	0800c7c5 	.word	0x0800c7c5
 800c6ec:	0800c7c5 	.word	0x0800c7c5
 800c6f0:	0800c7c5 	.word	0x0800c7c5
 800c6f4:	0800c7c5 	.word	0x0800c7c5
 800c6f8:	0800c7c5 	.word	0x0800c7c5
 800c6fc:	0800c7c5 	.word	0x0800c7c5
 800c700:	0800c7c5 	.word	0x0800c7c5
 800c704:	0800c777 	.word	0x0800c777
 800c708:	0800c7c5 	.word	0x0800c7c5
 800c70c:	0800c7c5 	.word	0x0800c7c5
 800c710:	0800c7c5 	.word	0x0800c7c5
 800c714:	0800c7c5 	.word	0x0800c7c5
 800c718:	0800c7c5 	.word	0x0800c7c5
 800c71c:	0800c7c5 	.word	0x0800c7c5
 800c720:	0800c7c5 	.word	0x0800c7c5
 800c724:	0800c7c5 	.word	0x0800c7c5
 800c728:	0800c7c5 	.word	0x0800c7c5
 800c72c:	0800c7c5 	.word	0x0800c7c5
 800c730:	0800c7c5 	.word	0x0800c7c5
 800c734:	0800c7c5 	.word	0x0800c7c5
 800c738:	0800c7c5 	.word	0x0800c7c5
 800c73c:	0800c7c5 	.word	0x0800c7c5
 800c740:	0800c7c5 	.word	0x0800c7c5
 800c744:	0800c7b7 	.word	0x0800c7b7
 800c748:	2b40      	cmp	r3, #64	; 0x40
 800c74a:	d037      	beq.n	800c7bc <UART_SetConfig+0x6bc>
 800c74c:	e03a      	b.n	800c7c4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c74e:	f7fd f919 	bl	8009984 <HAL_RCCEx_GetD3PCLK1Freq>
 800c752:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c754:	e03c      	b.n	800c7d0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c756:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c75a:	4618      	mov	r0, r3
 800c75c:	f7fd f928 	bl	80099b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c762:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c764:	e034      	b.n	800c7d0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c766:	f107 0318 	add.w	r3, r7, #24
 800c76a:	4618      	mov	r0, r3
 800c76c:	f7fd fa74 	bl	8009c58 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c770:	69fb      	ldr	r3, [r7, #28]
 800c772:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c774:	e02c      	b.n	800c7d0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c776:	4b09      	ldr	r3, [pc, #36]	; (800c79c <UART_SetConfig+0x69c>)
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	f003 0320 	and.w	r3, r3, #32
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d016      	beq.n	800c7b0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c782:	4b06      	ldr	r3, [pc, #24]	; (800c79c <UART_SetConfig+0x69c>)
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	08db      	lsrs	r3, r3, #3
 800c788:	f003 0303 	and.w	r3, r3, #3
 800c78c:	4a07      	ldr	r2, [pc, #28]	; (800c7ac <UART_SetConfig+0x6ac>)
 800c78e:	fa22 f303 	lsr.w	r3, r2, r3
 800c792:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c794:	e01c      	b.n	800c7d0 <UART_SetConfig+0x6d0>
 800c796:	bf00      	nop
 800c798:	40011400 	.word	0x40011400
 800c79c:	58024400 	.word	0x58024400
 800c7a0:	40007800 	.word	0x40007800
 800c7a4:	40007c00 	.word	0x40007c00
 800c7a8:	58000c00 	.word	0x58000c00
 800c7ac:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800c7b0:	4b9e      	ldr	r3, [pc, #632]	; (800ca2c <UART_SetConfig+0x92c>)
 800c7b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7b4:	e00c      	b.n	800c7d0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c7b6:	4b9e      	ldr	r3, [pc, #632]	; (800ca30 <UART_SetConfig+0x930>)
 800c7b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7ba:	e009      	b.n	800c7d0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c7bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c7c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7c2:	e005      	b.n	800c7d0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c7c8:	2301      	movs	r3, #1
 800c7ca:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c7ce:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c7d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	f000 81e0 	beq.w	800cb98 <UART_SetConfig+0xa98>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c7d8:	697b      	ldr	r3, [r7, #20]
 800c7da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7dc:	4a95      	ldr	r2, [pc, #596]	; (800ca34 <UART_SetConfig+0x934>)
 800c7de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c7e2:	461a      	mov	r2, r3
 800c7e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7e6:	fbb3 f3f2 	udiv	r3, r3, r2
 800c7ea:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c7ec:	697b      	ldr	r3, [r7, #20]
 800c7ee:	685a      	ldr	r2, [r3, #4]
 800c7f0:	4613      	mov	r3, r2
 800c7f2:	005b      	lsls	r3, r3, #1
 800c7f4:	4413      	add	r3, r2
 800c7f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7f8:	429a      	cmp	r2, r3
 800c7fa:	d305      	bcc.n	800c808 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c7fc:	697b      	ldr	r3, [r7, #20]
 800c7fe:	685b      	ldr	r3, [r3, #4]
 800c800:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c802:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c804:	429a      	cmp	r2, r3
 800c806:	d903      	bls.n	800c810 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800c808:	2301      	movs	r3, #1
 800c80a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c80e:	e1c3      	b.n	800cb98 <UART_SetConfig+0xa98>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c812:	2200      	movs	r2, #0
 800c814:	60bb      	str	r3, [r7, #8]
 800c816:	60fa      	str	r2, [r7, #12]
 800c818:	697b      	ldr	r3, [r7, #20]
 800c81a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c81c:	4a85      	ldr	r2, [pc, #532]	; (800ca34 <UART_SetConfig+0x934>)
 800c81e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c822:	b29b      	uxth	r3, r3
 800c824:	2200      	movs	r2, #0
 800c826:	603b      	str	r3, [r7, #0]
 800c828:	607a      	str	r2, [r7, #4]
 800c82a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c82e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c832:	f7f3 fdad 	bl	8000390 <__aeabi_uldivmod>
 800c836:	4602      	mov	r2, r0
 800c838:	460b      	mov	r3, r1
 800c83a:	4610      	mov	r0, r2
 800c83c:	4619      	mov	r1, r3
 800c83e:	f04f 0200 	mov.w	r2, #0
 800c842:	f04f 0300 	mov.w	r3, #0
 800c846:	020b      	lsls	r3, r1, #8
 800c848:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c84c:	0202      	lsls	r2, r0, #8
 800c84e:	6979      	ldr	r1, [r7, #20]
 800c850:	6849      	ldr	r1, [r1, #4]
 800c852:	0849      	lsrs	r1, r1, #1
 800c854:	2000      	movs	r0, #0
 800c856:	460c      	mov	r4, r1
 800c858:	4605      	mov	r5, r0
 800c85a:	eb12 0804 	adds.w	r8, r2, r4
 800c85e:	eb43 0905 	adc.w	r9, r3, r5
 800c862:	697b      	ldr	r3, [r7, #20]
 800c864:	685b      	ldr	r3, [r3, #4]
 800c866:	2200      	movs	r2, #0
 800c868:	469a      	mov	sl, r3
 800c86a:	4693      	mov	fp, r2
 800c86c:	4652      	mov	r2, sl
 800c86e:	465b      	mov	r3, fp
 800c870:	4640      	mov	r0, r8
 800c872:	4649      	mov	r1, r9
 800c874:	f7f3 fd8c 	bl	8000390 <__aeabi_uldivmod>
 800c878:	4602      	mov	r2, r0
 800c87a:	460b      	mov	r3, r1
 800c87c:	4613      	mov	r3, r2
 800c87e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c882:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c886:	d308      	bcc.n	800c89a <UART_SetConfig+0x79a>
 800c888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c88a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c88e:	d204      	bcs.n	800c89a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800c890:	697b      	ldr	r3, [r7, #20]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c896:	60da      	str	r2, [r3, #12]
 800c898:	e17e      	b.n	800cb98 <UART_SetConfig+0xa98>
        }
        else
        {
          ret = HAL_ERROR;
 800c89a:	2301      	movs	r3, #1
 800c89c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c8a0:	e17a      	b.n	800cb98 <UART_SetConfig+0xa98>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c8a2:	697b      	ldr	r3, [r7, #20]
 800c8a4:	69db      	ldr	r3, [r3, #28]
 800c8a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c8aa:	f040 80c7 	bne.w	800ca3c <UART_SetConfig+0x93c>
  {
    switch (clocksource)
 800c8ae:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c8b2:	2b20      	cmp	r3, #32
 800c8b4:	dc48      	bgt.n	800c948 <UART_SetConfig+0x848>
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	db7b      	blt.n	800c9b2 <UART_SetConfig+0x8b2>
 800c8ba:	2b20      	cmp	r3, #32
 800c8bc:	d879      	bhi.n	800c9b2 <UART_SetConfig+0x8b2>
 800c8be:	a201      	add	r2, pc, #4	; (adr r2, 800c8c4 <UART_SetConfig+0x7c4>)
 800c8c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8c4:	0800c94f 	.word	0x0800c94f
 800c8c8:	0800c957 	.word	0x0800c957
 800c8cc:	0800c9b3 	.word	0x0800c9b3
 800c8d0:	0800c9b3 	.word	0x0800c9b3
 800c8d4:	0800c95f 	.word	0x0800c95f
 800c8d8:	0800c9b3 	.word	0x0800c9b3
 800c8dc:	0800c9b3 	.word	0x0800c9b3
 800c8e0:	0800c9b3 	.word	0x0800c9b3
 800c8e4:	0800c96f 	.word	0x0800c96f
 800c8e8:	0800c9b3 	.word	0x0800c9b3
 800c8ec:	0800c9b3 	.word	0x0800c9b3
 800c8f0:	0800c9b3 	.word	0x0800c9b3
 800c8f4:	0800c9b3 	.word	0x0800c9b3
 800c8f8:	0800c9b3 	.word	0x0800c9b3
 800c8fc:	0800c9b3 	.word	0x0800c9b3
 800c900:	0800c9b3 	.word	0x0800c9b3
 800c904:	0800c97f 	.word	0x0800c97f
 800c908:	0800c9b3 	.word	0x0800c9b3
 800c90c:	0800c9b3 	.word	0x0800c9b3
 800c910:	0800c9b3 	.word	0x0800c9b3
 800c914:	0800c9b3 	.word	0x0800c9b3
 800c918:	0800c9b3 	.word	0x0800c9b3
 800c91c:	0800c9b3 	.word	0x0800c9b3
 800c920:	0800c9b3 	.word	0x0800c9b3
 800c924:	0800c9b3 	.word	0x0800c9b3
 800c928:	0800c9b3 	.word	0x0800c9b3
 800c92c:	0800c9b3 	.word	0x0800c9b3
 800c930:	0800c9b3 	.word	0x0800c9b3
 800c934:	0800c9b3 	.word	0x0800c9b3
 800c938:	0800c9b3 	.word	0x0800c9b3
 800c93c:	0800c9b3 	.word	0x0800c9b3
 800c940:	0800c9b3 	.word	0x0800c9b3
 800c944:	0800c9a5 	.word	0x0800c9a5
 800c948:	2b40      	cmp	r3, #64	; 0x40
 800c94a:	d02e      	beq.n	800c9aa <UART_SetConfig+0x8aa>
 800c94c:	e031      	b.n	800c9b2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c94e:	f7fc f865 	bl	8008a1c <HAL_RCC_GetPCLK1Freq>
 800c952:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c954:	e033      	b.n	800c9be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c956:	f7fc f877 	bl	8008a48 <HAL_RCC_GetPCLK2Freq>
 800c95a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c95c:	e02f      	b.n	800c9be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c95e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c962:	4618      	mov	r0, r3
 800c964:	f7fd f824 	bl	80099b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c96a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c96c:	e027      	b.n	800c9be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c96e:	f107 0318 	add.w	r3, r7, #24
 800c972:	4618      	mov	r0, r3
 800c974:	f7fd f970 	bl	8009c58 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c978:	69fb      	ldr	r3, [r7, #28]
 800c97a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c97c:	e01f      	b.n	800c9be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c97e:	4b2e      	ldr	r3, [pc, #184]	; (800ca38 <UART_SetConfig+0x938>)
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	f003 0320 	and.w	r3, r3, #32
 800c986:	2b00      	cmp	r3, #0
 800c988:	d009      	beq.n	800c99e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c98a:	4b2b      	ldr	r3, [pc, #172]	; (800ca38 <UART_SetConfig+0x938>)
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	08db      	lsrs	r3, r3, #3
 800c990:	f003 0303 	and.w	r3, r3, #3
 800c994:	4a25      	ldr	r2, [pc, #148]	; (800ca2c <UART_SetConfig+0x92c>)
 800c996:	fa22 f303 	lsr.w	r3, r2, r3
 800c99a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c99c:	e00f      	b.n	800c9be <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c99e:	4b23      	ldr	r3, [pc, #140]	; (800ca2c <UART_SetConfig+0x92c>)
 800c9a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9a2:	e00c      	b.n	800c9be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c9a4:	4b22      	ldr	r3, [pc, #136]	; (800ca30 <UART_SetConfig+0x930>)
 800c9a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9a8:	e009      	b.n	800c9be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c9aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c9ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9b0:	e005      	b.n	800c9be <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c9b6:	2301      	movs	r3, #1
 800c9b8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c9bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c9be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	f000 80e9 	beq.w	800cb98 <UART_SetConfig+0xa98>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c9c6:	697b      	ldr	r3, [r7, #20]
 800c9c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9ca:	4a1a      	ldr	r2, [pc, #104]	; (800ca34 <UART_SetConfig+0x934>)
 800c9cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c9d0:	461a      	mov	r2, r3
 800c9d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9d4:	fbb3 f3f2 	udiv	r3, r3, r2
 800c9d8:	005a      	lsls	r2, r3, #1
 800c9da:	697b      	ldr	r3, [r7, #20]
 800c9dc:	685b      	ldr	r3, [r3, #4]
 800c9de:	085b      	lsrs	r3, r3, #1
 800c9e0:	441a      	add	r2, r3
 800c9e2:	697b      	ldr	r3, [r7, #20]
 800c9e4:	685b      	ldr	r3, [r3, #4]
 800c9e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9ea:	b29b      	uxth	r3, r3
 800c9ec:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c9ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9f0:	2b0f      	cmp	r3, #15
 800c9f2:	d916      	bls.n	800ca22 <UART_SetConfig+0x922>
 800c9f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c9fa:	d212      	bcs.n	800ca22 <UART_SetConfig+0x922>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c9fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9fe:	b29b      	uxth	r3, r3
 800ca00:	f023 030f 	bic.w	r3, r3, #15
 800ca04:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ca06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca08:	085b      	lsrs	r3, r3, #1
 800ca0a:	b29b      	uxth	r3, r3
 800ca0c:	f003 0307 	and.w	r3, r3, #7
 800ca10:	b29a      	uxth	r2, r3
 800ca12:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ca14:	4313      	orrs	r3, r2
 800ca16:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800ca18:	697b      	ldr	r3, [r7, #20]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ca1e:	60da      	str	r2, [r3, #12]
 800ca20:	e0ba      	b.n	800cb98 <UART_SetConfig+0xa98>
      }
      else
      {
        ret = HAL_ERROR;
 800ca22:	2301      	movs	r3, #1
 800ca24:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ca28:	e0b6      	b.n	800cb98 <UART_SetConfig+0xa98>
 800ca2a:	bf00      	nop
 800ca2c:	03d09000 	.word	0x03d09000
 800ca30:	003d0900 	.word	0x003d0900
 800ca34:	08013ca8 	.word	0x08013ca8
 800ca38:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800ca3c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ca40:	2b20      	cmp	r3, #32
 800ca42:	dc49      	bgt.n	800cad8 <UART_SetConfig+0x9d8>
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	db7c      	blt.n	800cb42 <UART_SetConfig+0xa42>
 800ca48:	2b20      	cmp	r3, #32
 800ca4a:	d87a      	bhi.n	800cb42 <UART_SetConfig+0xa42>
 800ca4c:	a201      	add	r2, pc, #4	; (adr r2, 800ca54 <UART_SetConfig+0x954>)
 800ca4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca52:	bf00      	nop
 800ca54:	0800cadf 	.word	0x0800cadf
 800ca58:	0800cae7 	.word	0x0800cae7
 800ca5c:	0800cb43 	.word	0x0800cb43
 800ca60:	0800cb43 	.word	0x0800cb43
 800ca64:	0800caef 	.word	0x0800caef
 800ca68:	0800cb43 	.word	0x0800cb43
 800ca6c:	0800cb43 	.word	0x0800cb43
 800ca70:	0800cb43 	.word	0x0800cb43
 800ca74:	0800caff 	.word	0x0800caff
 800ca78:	0800cb43 	.word	0x0800cb43
 800ca7c:	0800cb43 	.word	0x0800cb43
 800ca80:	0800cb43 	.word	0x0800cb43
 800ca84:	0800cb43 	.word	0x0800cb43
 800ca88:	0800cb43 	.word	0x0800cb43
 800ca8c:	0800cb43 	.word	0x0800cb43
 800ca90:	0800cb43 	.word	0x0800cb43
 800ca94:	0800cb0f 	.word	0x0800cb0f
 800ca98:	0800cb43 	.word	0x0800cb43
 800ca9c:	0800cb43 	.word	0x0800cb43
 800caa0:	0800cb43 	.word	0x0800cb43
 800caa4:	0800cb43 	.word	0x0800cb43
 800caa8:	0800cb43 	.word	0x0800cb43
 800caac:	0800cb43 	.word	0x0800cb43
 800cab0:	0800cb43 	.word	0x0800cb43
 800cab4:	0800cb43 	.word	0x0800cb43
 800cab8:	0800cb43 	.word	0x0800cb43
 800cabc:	0800cb43 	.word	0x0800cb43
 800cac0:	0800cb43 	.word	0x0800cb43
 800cac4:	0800cb43 	.word	0x0800cb43
 800cac8:	0800cb43 	.word	0x0800cb43
 800cacc:	0800cb43 	.word	0x0800cb43
 800cad0:	0800cb43 	.word	0x0800cb43
 800cad4:	0800cb35 	.word	0x0800cb35
 800cad8:	2b40      	cmp	r3, #64	; 0x40
 800cada:	d02e      	beq.n	800cb3a <UART_SetConfig+0xa3a>
 800cadc:	e031      	b.n	800cb42 <UART_SetConfig+0xa42>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cade:	f7fb ff9d 	bl	8008a1c <HAL_RCC_GetPCLK1Freq>
 800cae2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cae4:	e033      	b.n	800cb4e <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cae6:	f7fb ffaf 	bl	8008a48 <HAL_RCC_GetPCLK2Freq>
 800caea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800caec:	e02f      	b.n	800cb4e <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800caee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800caf2:	4618      	mov	r0, r3
 800caf4:	f7fc ff5c 	bl	80099b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800caf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cafa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cafc:	e027      	b.n	800cb4e <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cafe:	f107 0318 	add.w	r3, r7, #24
 800cb02:	4618      	mov	r0, r3
 800cb04:	f7fd f8a8 	bl	8009c58 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cb08:	69fb      	ldr	r3, [r7, #28]
 800cb0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb0c:	e01f      	b.n	800cb4e <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cb0e:	4b2d      	ldr	r3, [pc, #180]	; (800cbc4 <UART_SetConfig+0xac4>)
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	f003 0320 	and.w	r3, r3, #32
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d009      	beq.n	800cb2e <UART_SetConfig+0xa2e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cb1a:	4b2a      	ldr	r3, [pc, #168]	; (800cbc4 <UART_SetConfig+0xac4>)
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	08db      	lsrs	r3, r3, #3
 800cb20:	f003 0303 	and.w	r3, r3, #3
 800cb24:	4a28      	ldr	r2, [pc, #160]	; (800cbc8 <UART_SetConfig+0xac8>)
 800cb26:	fa22 f303 	lsr.w	r3, r2, r3
 800cb2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cb2c:	e00f      	b.n	800cb4e <UART_SetConfig+0xa4e>
          pclk = (uint32_t) HSI_VALUE;
 800cb2e:	4b26      	ldr	r3, [pc, #152]	; (800cbc8 <UART_SetConfig+0xac8>)
 800cb30:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb32:	e00c      	b.n	800cb4e <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cb34:	4b25      	ldr	r3, [pc, #148]	; (800cbcc <UART_SetConfig+0xacc>)
 800cb36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb38:	e009      	b.n	800cb4e <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cb3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cb3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb40:	e005      	b.n	800cb4e <UART_SetConfig+0xa4e>
      default:
        pclk = 0U;
 800cb42:	2300      	movs	r3, #0
 800cb44:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800cb46:	2301      	movs	r3, #1
 800cb48:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800cb4c:	bf00      	nop
    }

    if (pclk != 0U)
 800cb4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d021      	beq.n	800cb98 <UART_SetConfig+0xa98>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cb54:	697b      	ldr	r3, [r7, #20]
 800cb56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb58:	4a1d      	ldr	r2, [pc, #116]	; (800cbd0 <UART_SetConfig+0xad0>)
 800cb5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cb5e:	461a      	mov	r2, r3
 800cb60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb62:	fbb3 f2f2 	udiv	r2, r3, r2
 800cb66:	697b      	ldr	r3, [r7, #20]
 800cb68:	685b      	ldr	r3, [r3, #4]
 800cb6a:	085b      	lsrs	r3, r3, #1
 800cb6c:	441a      	add	r2, r3
 800cb6e:	697b      	ldr	r3, [r7, #20]
 800cb70:	685b      	ldr	r3, [r3, #4]
 800cb72:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb76:	b29b      	uxth	r3, r3
 800cb78:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cb7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb7c:	2b0f      	cmp	r3, #15
 800cb7e:	d908      	bls.n	800cb92 <UART_SetConfig+0xa92>
 800cb80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb86:	d204      	bcs.n	800cb92 <UART_SetConfig+0xa92>
      {
        huart->Instance->BRR = usartdiv;
 800cb88:	697b      	ldr	r3, [r7, #20]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cb8e:	60da      	str	r2, [r3, #12]
 800cb90:	e002      	b.n	800cb98 <UART_SetConfig+0xa98>
      }
      else
      {
        ret = HAL_ERROR;
 800cb92:	2301      	movs	r3, #1
 800cb94:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cb98:	697b      	ldr	r3, [r7, #20]
 800cb9a:	2201      	movs	r2, #1
 800cb9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800cba0:	697b      	ldr	r3, [r7, #20]
 800cba2:	2201      	movs	r2, #1
 800cba4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cba8:	697b      	ldr	r3, [r7, #20]
 800cbaa:	2200      	movs	r2, #0
 800cbac:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800cbae:	697b      	ldr	r3, [r7, #20]
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800cbb4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800cbb8:	4618      	mov	r0, r3
 800cbba:	3748      	adds	r7, #72	; 0x48
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cbc2:	bf00      	nop
 800cbc4:	58024400 	.word	0x58024400
 800cbc8:	03d09000 	.word	0x03d09000
 800cbcc:	003d0900 	.word	0x003d0900
 800cbd0:	08013ca8 	.word	0x08013ca8

0800cbd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cbd4:	b480      	push	{r7}
 800cbd6:	b083      	sub	sp, #12
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbe0:	f003 0301 	and.w	r3, r3, #1
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d00a      	beq.n	800cbfe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	685b      	ldr	r3, [r3, #4]
 800cbee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	430a      	orrs	r2, r1
 800cbfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc02:	f003 0302 	and.w	r3, r3, #2
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d00a      	beq.n	800cc20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	685b      	ldr	r3, [r3, #4]
 800cc10:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	430a      	orrs	r2, r1
 800cc1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc24:	f003 0304 	and.w	r3, r3, #4
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d00a      	beq.n	800cc42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	685b      	ldr	r3, [r3, #4]
 800cc32:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	430a      	orrs	r2, r1
 800cc40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc46:	f003 0308 	and.w	r3, r3, #8
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d00a      	beq.n	800cc64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	685b      	ldr	r3, [r3, #4]
 800cc54:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	430a      	orrs	r2, r1
 800cc62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc68:	f003 0310 	and.w	r3, r3, #16
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d00a      	beq.n	800cc86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	689b      	ldr	r3, [r3, #8]
 800cc76:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	430a      	orrs	r2, r1
 800cc84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc8a:	f003 0320 	and.w	r3, r3, #32
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d00a      	beq.n	800cca8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	689b      	ldr	r3, [r3, #8]
 800cc98:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	430a      	orrs	r2, r1
 800cca6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d01a      	beq.n	800ccea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	685b      	ldr	r3, [r3, #4]
 800ccba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	430a      	orrs	r2, r1
 800ccc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ccce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ccd2:	d10a      	bne.n	800ccea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	685b      	ldr	r3, [r3, #4]
 800ccda:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	430a      	orrs	r2, r1
 800cce8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d00a      	beq.n	800cd0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	685b      	ldr	r3, [r3, #4]
 800ccfc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	430a      	orrs	r2, r1
 800cd0a:	605a      	str	r2, [r3, #4]
  }
}
 800cd0c:	bf00      	nop
 800cd0e:	370c      	adds	r7, #12
 800cd10:	46bd      	mov	sp, r7
 800cd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd16:	4770      	bx	lr

0800cd18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b086      	sub	sp, #24
 800cd1c:	af02      	add	r7, sp, #8
 800cd1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	2200      	movs	r2, #0
 800cd24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cd28:	f7f5 fac8 	bl	80022bc <HAL_GetTick>
 800cd2c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	f003 0308 	and.w	r3, r3, #8
 800cd38:	2b08      	cmp	r3, #8
 800cd3a:	d10e      	bne.n	800cd5a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cd3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cd40:	9300      	str	r3, [sp, #0]
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	2200      	movs	r2, #0
 800cd46:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cd4a:	6878      	ldr	r0, [r7, #4]
 800cd4c:	f000 f82f 	bl	800cdae <UART_WaitOnFlagUntilTimeout>
 800cd50:	4603      	mov	r3, r0
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d001      	beq.n	800cd5a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cd56:	2303      	movs	r3, #3
 800cd58:	e025      	b.n	800cda6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	f003 0304 	and.w	r3, r3, #4
 800cd64:	2b04      	cmp	r3, #4
 800cd66:	d10e      	bne.n	800cd86 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cd68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cd6c:	9300      	str	r3, [sp, #0]
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	2200      	movs	r2, #0
 800cd72:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800cd76:	6878      	ldr	r0, [r7, #4]
 800cd78:	f000 f819 	bl	800cdae <UART_WaitOnFlagUntilTimeout>
 800cd7c:	4603      	mov	r3, r0
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d001      	beq.n	800cd86 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cd82:	2303      	movs	r3, #3
 800cd84:	e00f      	b.n	800cda6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	2220      	movs	r2, #32
 800cd8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	2220      	movs	r2, #32
 800cd92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	2200      	movs	r2, #0
 800cd9a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	2200      	movs	r2, #0
 800cda0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cda4:	2300      	movs	r3, #0
}
 800cda6:	4618      	mov	r0, r3
 800cda8:	3710      	adds	r7, #16
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	bd80      	pop	{r7, pc}

0800cdae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cdae:	b580      	push	{r7, lr}
 800cdb0:	b084      	sub	sp, #16
 800cdb2:	af00      	add	r7, sp, #0
 800cdb4:	60f8      	str	r0, [r7, #12]
 800cdb6:	60b9      	str	r1, [r7, #8]
 800cdb8:	603b      	str	r3, [r7, #0]
 800cdba:	4613      	mov	r3, r2
 800cdbc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cdbe:	e062      	b.n	800ce86 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cdc0:	69bb      	ldr	r3, [r7, #24]
 800cdc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdc6:	d05e      	beq.n	800ce86 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cdc8:	f7f5 fa78 	bl	80022bc <HAL_GetTick>
 800cdcc:	4602      	mov	r2, r0
 800cdce:	683b      	ldr	r3, [r7, #0]
 800cdd0:	1ad3      	subs	r3, r2, r3
 800cdd2:	69ba      	ldr	r2, [r7, #24]
 800cdd4:	429a      	cmp	r2, r3
 800cdd6:	d302      	bcc.n	800cdde <UART_WaitOnFlagUntilTimeout+0x30>
 800cdd8:	69bb      	ldr	r3, [r7, #24]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d11d      	bne.n	800ce1a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	681a      	ldr	r2, [r3, #0]
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800cdec:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	689a      	ldr	r2, [r3, #8]
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	f022 0201 	bic.w	r2, r2, #1
 800cdfc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	2220      	movs	r2, #32
 800ce02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	2220      	movs	r2, #32
 800ce0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	2200      	movs	r2, #0
 800ce12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800ce16:	2303      	movs	r3, #3
 800ce18:	e045      	b.n	800cea6 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	f003 0304 	and.w	r3, r3, #4
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d02e      	beq.n	800ce86 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	69db      	ldr	r3, [r3, #28]
 800ce2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ce32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ce36:	d126      	bne.n	800ce86 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ce40:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	681a      	ldr	r2, [r3, #0]
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ce50:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	689a      	ldr	r2, [r3, #8]
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	f022 0201 	bic.w	r2, r2, #1
 800ce60:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	2220      	movs	r2, #32
 800ce66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	2220      	movs	r2, #32
 800ce6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	2220      	movs	r2, #32
 800ce76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	2200      	movs	r2, #0
 800ce7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800ce82:	2303      	movs	r3, #3
 800ce84:	e00f      	b.n	800cea6 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	69da      	ldr	r2, [r3, #28]
 800ce8c:	68bb      	ldr	r3, [r7, #8]
 800ce8e:	4013      	ands	r3, r2
 800ce90:	68ba      	ldr	r2, [r7, #8]
 800ce92:	429a      	cmp	r2, r3
 800ce94:	bf0c      	ite	eq
 800ce96:	2301      	moveq	r3, #1
 800ce98:	2300      	movne	r3, #0
 800ce9a:	b2db      	uxtb	r3, r3
 800ce9c:	461a      	mov	r2, r3
 800ce9e:	79fb      	ldrb	r3, [r7, #7]
 800cea0:	429a      	cmp	r2, r3
 800cea2:	d08d      	beq.n	800cdc0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cea4:	2300      	movs	r3, #0
}
 800cea6:	4618      	mov	r0, r3
 800cea8:	3710      	adds	r7, #16
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	bd80      	pop	{r7, pc}
	...

0800ceb0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b084      	sub	sp, #16
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	60f8      	str	r0, [r7, #12]
 800ceb8:	60b9      	str	r1, [r7, #8]
 800ceba:	4613      	mov	r3, r2
 800cebc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	68ba      	ldr	r2, [r7, #8]
 800cec2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	88fa      	ldrh	r2, [r7, #6]
 800cec8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	2200      	movs	r2, #0
 800ced0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	2222      	movs	r2, #34	; 0x22
 800ced8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d02c      	beq.n	800cf3e <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cee8:	4a25      	ldr	r2, [pc, #148]	; (800cf80 <UART_Start_Receive_DMA+0xd0>)
 800ceea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cef0:	4a24      	ldr	r2, [pc, #144]	; (800cf84 <UART_Start_Receive_DMA+0xd4>)
 800cef2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cef8:	4a23      	ldr	r2, [pc, #140]	; (800cf88 <UART_Start_Receive_DMA+0xd8>)
 800cefa:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf00:	2200      	movs	r2, #0
 800cf02:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	3324      	adds	r3, #36	; 0x24
 800cf0e:	4619      	mov	r1, r3
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf14:	461a      	mov	r2, r3
 800cf16:	88fb      	ldrh	r3, [r7, #6]
 800cf18:	f7f5 ff02 	bl	8002d20 <HAL_DMA_Start_IT>
 800cf1c:	4603      	mov	r3, r0
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d00d      	beq.n	800cf3e <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	2210      	movs	r2, #16
 800cf26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	2200      	movs	r2, #0
 800cf2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	2220      	movs	r2, #32
 800cf36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      return HAL_ERROR;
 800cf3a:	2301      	movs	r3, #1
 800cf3c:	e01c      	b.n	800cf78 <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	2200      	movs	r2, #0
 800cf42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	681a      	ldr	r2, [r3, #0]
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cf54:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	689a      	ldr	r2, [r3, #8]
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	f042 0201 	orr.w	r2, r2, #1
 800cf64:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	689a      	ldr	r2, [r3, #8]
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cf74:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800cf76:	2300      	movs	r3, #0
}
 800cf78:	4618      	mov	r0, r3
 800cf7a:	3710      	adds	r7, #16
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	bd80      	pop	{r7, pc}
 800cf80:	0800d02d 	.word	0x0800d02d
 800cf84:	0800d0c3 	.word	0x0800d0c3
 800cf88:	0800d0fb 	.word	0x0800d0fb

0800cf8c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800cf8c:	b480      	push	{r7}
 800cf8e:	b083      	sub	sp, #12
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	681a      	ldr	r2, [r3, #0]
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800cfa2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	689a      	ldr	r2, [r3, #8]
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800cfb2:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	2220      	movs	r2, #32
 800cfb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800cfbc:	bf00      	nop
 800cfbe:	370c      	adds	r7, #12
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc6:	4770      	bx	lr

0800cfc8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cfc8:	b480      	push	{r7}
 800cfca:	b083      	sub	sp, #12
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	681a      	ldr	r2, [r3, #0]
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800cfde:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	6899      	ldr	r1, [r3, #8]
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	681a      	ldr	r2, [r3, #0]
 800cfea:	4b0f      	ldr	r3, [pc, #60]	; (800d028 <UART_EndRxTransfer+0x60>)
 800cfec:	400b      	ands	r3, r1
 800cfee:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cff4:	2b01      	cmp	r3, #1
 800cff6:	d107      	bne.n	800d008 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	681a      	ldr	r2, [r3, #0]
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	f022 0210 	bic.w	r2, r2, #16
 800d006:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	2220      	movs	r2, #32
 800d00c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	2200      	movs	r2, #0
 800d014:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	2200      	movs	r2, #0
 800d01a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800d01c:	bf00      	nop
 800d01e:	370c      	adds	r7, #12
 800d020:	46bd      	mov	sp, r7
 800d022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d026:	4770      	bx	lr
 800d028:	effffffe 	.word	0xeffffffe

0800d02c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b084      	sub	sp, #16
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d038:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	69db      	ldr	r3, [r3, #28]
 800d03e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d042:	d02b      	beq.n	800d09c <UART_DMAReceiveCplt+0x70>
  {
    huart->RxXferCount = 0U;
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	2200      	movs	r2, #0
 800d048:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	681a      	ldr	r2, [r3, #0]
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d05a:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	689a      	ldr	r2, [r3, #8]
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	f022 0201 	bic.w	r2, r2, #1
 800d06a:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	689a      	ldr	r2, [r3, #8]
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d07a:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	2220      	movs	r2, #32
 800d080:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d088:	2b01      	cmp	r3, #1
 800d08a:	d107      	bne.n	800d09c <UART_DMAReceiveCplt+0x70>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	681a      	ldr	r2, [r3, #0]
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	f022 0210 	bic.w	r2, r2, #16
 800d09a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d0a0:	2b01      	cmp	r3, #1
 800d0a2:	d107      	bne.n	800d0b4 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d0aa:	4619      	mov	r1, r3
 800d0ac:	68f8      	ldr	r0, [r7, #12]
 800d0ae:	f7ff f81b 	bl	800c0e8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d0b2:	e002      	b.n	800d0ba <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800d0b4:	68f8      	ldr	r0, [r7, #12]
 800d0b6:	f7f3 ff37 	bl	8000f28 <HAL_UART_RxCpltCallback>
}
 800d0ba:	bf00      	nop
 800d0bc:	3710      	adds	r7, #16
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	bd80      	pop	{r7, pc}

0800d0c2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d0c2:	b580      	push	{r7, lr}
 800d0c4:	b084      	sub	sp, #16
 800d0c6:	af00      	add	r7, sp, #0
 800d0c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0ce:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d0d4:	2b01      	cmp	r3, #1
 800d0d6:	d109      	bne.n	800d0ec <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d0de:	085b      	lsrs	r3, r3, #1
 800d0e0:	b29b      	uxth	r3, r3
 800d0e2:	4619      	mov	r1, r3
 800d0e4:	68f8      	ldr	r0, [r7, #12]
 800d0e6:	f7fe ffff 	bl	800c0e8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d0ea:	e002      	b.n	800d0f2 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800d0ec:	68f8      	ldr	r0, [r7, #12]
 800d0ee:	f7fe ffe7 	bl	800c0c0 <HAL_UART_RxHalfCpltCallback>
}
 800d0f2:	bf00      	nop
 800d0f4:	3710      	adds	r7, #16
 800d0f6:	46bd      	mov	sp, r7
 800d0f8:	bd80      	pop	{r7, pc}

0800d0fa <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d0fa:	b580      	push	{r7, lr}
 800d0fc:	b086      	sub	sp, #24
 800d0fe:	af00      	add	r7, sp, #0
 800d100:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d106:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d108:	697b      	ldr	r3, [r7, #20]
 800d10a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d10e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d110:	697b      	ldr	r3, [r7, #20]
 800d112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d116:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d118:	697b      	ldr	r3, [r7, #20]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	689b      	ldr	r3, [r3, #8]
 800d11e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d122:	2b80      	cmp	r3, #128	; 0x80
 800d124:	d109      	bne.n	800d13a <UART_DMAError+0x40>
 800d126:	693b      	ldr	r3, [r7, #16]
 800d128:	2b21      	cmp	r3, #33	; 0x21
 800d12a:	d106      	bne.n	800d13a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d12c:	697b      	ldr	r3, [r7, #20]
 800d12e:	2200      	movs	r2, #0
 800d130:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800d134:	6978      	ldr	r0, [r7, #20]
 800d136:	f7ff ff29 	bl	800cf8c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d13a:	697b      	ldr	r3, [r7, #20]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	689b      	ldr	r3, [r3, #8]
 800d140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d144:	2b40      	cmp	r3, #64	; 0x40
 800d146:	d109      	bne.n	800d15c <UART_DMAError+0x62>
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	2b22      	cmp	r3, #34	; 0x22
 800d14c:	d106      	bne.n	800d15c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d14e:	697b      	ldr	r3, [r7, #20]
 800d150:	2200      	movs	r2, #0
 800d152:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800d156:	6978      	ldr	r0, [r7, #20]
 800d158:	f7ff ff36 	bl	800cfc8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d15c:	697b      	ldr	r3, [r7, #20]
 800d15e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d162:	f043 0210 	orr.w	r2, r3, #16
 800d166:	697b      	ldr	r3, [r7, #20]
 800d168:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d16c:	6978      	ldr	r0, [r7, #20]
 800d16e:	f7fe ffb1 	bl	800c0d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d172:	bf00      	nop
 800d174:	3718      	adds	r7, #24
 800d176:	46bd      	mov	sp, r7
 800d178:	bd80      	pop	{r7, pc}

0800d17a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d17a:	b580      	push	{r7, lr}
 800d17c:	b084      	sub	sp, #16
 800d17e:	af00      	add	r7, sp, #0
 800d180:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d186:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	2200      	movs	r2, #0
 800d18c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	2200      	movs	r2, #0
 800d194:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d198:	68f8      	ldr	r0, [r7, #12]
 800d19a:	f7fe ff9b 	bl	800c0d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d19e:	bf00      	nop
 800d1a0:	3710      	adds	r7, #16
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	bd80      	pop	{r7, pc}

0800d1a6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d1a6:	b580      	push	{r7, lr}
 800d1a8:	b082      	sub	sp, #8
 800d1aa:	af00      	add	r7, sp, #0
 800d1ac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	681a      	ldr	r2, [r3, #0]
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d1bc:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	2220      	movs	r2, #32
 800d1c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	2200      	movs	r2, #0
 800d1ca:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d1cc:	6878      	ldr	r0, [r7, #4]
 800d1ce:	f7fe ff6d 	bl	800c0ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d1d2:	bf00      	nop
 800d1d4:	3708      	adds	r7, #8
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	bd80      	pop	{r7, pc}

0800d1da <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d1da:	b480      	push	{r7}
 800d1dc:	b083      	sub	sp, #12
 800d1de:	af00      	add	r7, sp, #0
 800d1e0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d1e2:	bf00      	nop
 800d1e4:	370c      	adds	r7, #12
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ec:	4770      	bx	lr

0800d1ee <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d1ee:	b480      	push	{r7}
 800d1f0:	b083      	sub	sp, #12
 800d1f2:	af00      	add	r7, sp, #0
 800d1f4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d1f6:	bf00      	nop
 800d1f8:	370c      	adds	r7, #12
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d200:	4770      	bx	lr

0800d202 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d202:	b480      	push	{r7}
 800d204:	b083      	sub	sp, #12
 800d206:	af00      	add	r7, sp, #0
 800d208:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d20a:	bf00      	nop
 800d20c:	370c      	adds	r7, #12
 800d20e:	46bd      	mov	sp, r7
 800d210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d214:	4770      	bx	lr

0800d216 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d216:	b480      	push	{r7}
 800d218:	b085      	sub	sp, #20
 800d21a:	af00      	add	r7, sp, #0
 800d21c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d224:	2b01      	cmp	r3, #1
 800d226:	d101      	bne.n	800d22c <HAL_UARTEx_DisableFifoMode+0x16>
 800d228:	2302      	movs	r3, #2
 800d22a:	e027      	b.n	800d27c <HAL_UARTEx_DisableFifoMode+0x66>
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	2201      	movs	r2, #1
 800d230:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	2224      	movs	r2, #36	; 0x24
 800d238:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	681a      	ldr	r2, [r3, #0]
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	f022 0201 	bic.w	r2, r2, #1
 800d252:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d25a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	2200      	movs	r2, #0
 800d260:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	68fa      	ldr	r2, [r7, #12]
 800d268:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	2220      	movs	r2, #32
 800d26e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	2200      	movs	r2, #0
 800d276:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d27a:	2300      	movs	r3, #0
}
 800d27c:	4618      	mov	r0, r3
 800d27e:	3714      	adds	r7, #20
 800d280:	46bd      	mov	sp, r7
 800d282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d286:	4770      	bx	lr

0800d288 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d288:	b580      	push	{r7, lr}
 800d28a:	b084      	sub	sp, #16
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	6078      	str	r0, [r7, #4]
 800d290:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d298:	2b01      	cmp	r3, #1
 800d29a:	d101      	bne.n	800d2a0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d29c:	2302      	movs	r3, #2
 800d29e:	e02d      	b.n	800d2fc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	2201      	movs	r2, #1
 800d2a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	2224      	movs	r2, #36	; 0x24
 800d2ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	681a      	ldr	r2, [r3, #0]
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	f022 0201 	bic.w	r2, r2, #1
 800d2c6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	689b      	ldr	r3, [r3, #8]
 800d2ce:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	683a      	ldr	r2, [r7, #0]
 800d2d8:	430a      	orrs	r2, r1
 800d2da:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d2dc:	6878      	ldr	r0, [r7, #4]
 800d2de:	f000 f84f 	bl	800d380 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	68fa      	ldr	r2, [r7, #12]
 800d2e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	2220      	movs	r2, #32
 800d2ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	2200      	movs	r2, #0
 800d2f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d2fa:	2300      	movs	r3, #0
}
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	3710      	adds	r7, #16
 800d300:	46bd      	mov	sp, r7
 800d302:	bd80      	pop	{r7, pc}

0800d304 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d304:	b580      	push	{r7, lr}
 800d306:	b084      	sub	sp, #16
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
 800d30c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d314:	2b01      	cmp	r3, #1
 800d316:	d101      	bne.n	800d31c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d318:	2302      	movs	r3, #2
 800d31a:	e02d      	b.n	800d378 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	2201      	movs	r2, #1
 800d320:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	2224      	movs	r2, #36	; 0x24
 800d328:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	681a      	ldr	r2, [r3, #0]
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	f022 0201 	bic.w	r2, r2, #1
 800d342:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	689b      	ldr	r3, [r3, #8]
 800d34a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	683a      	ldr	r2, [r7, #0]
 800d354:	430a      	orrs	r2, r1
 800d356:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d358:	6878      	ldr	r0, [r7, #4]
 800d35a:	f000 f811 	bl	800d380 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	68fa      	ldr	r2, [r7, #12]
 800d364:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	2220      	movs	r2, #32
 800d36a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	2200      	movs	r2, #0
 800d372:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d376:	2300      	movs	r3, #0
}
 800d378:	4618      	mov	r0, r3
 800d37a:	3710      	adds	r7, #16
 800d37c:	46bd      	mov	sp, r7
 800d37e:	bd80      	pop	{r7, pc}

0800d380 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d380:	b480      	push	{r7}
 800d382:	b085      	sub	sp, #20
 800d384:	af00      	add	r7, sp, #0
 800d386:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d108      	bne.n	800d3a2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	2201      	movs	r2, #1
 800d394:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	2201      	movs	r2, #1
 800d39c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d3a0:	e031      	b.n	800d406 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d3a2:	2310      	movs	r3, #16
 800d3a4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d3a6:	2310      	movs	r3, #16
 800d3a8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	689b      	ldr	r3, [r3, #8]
 800d3b0:	0e5b      	lsrs	r3, r3, #25
 800d3b2:	b2db      	uxtb	r3, r3
 800d3b4:	f003 0307 	and.w	r3, r3, #7
 800d3b8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	689b      	ldr	r3, [r3, #8]
 800d3c0:	0f5b      	lsrs	r3, r3, #29
 800d3c2:	b2db      	uxtb	r3, r3
 800d3c4:	f003 0307 	and.w	r3, r3, #7
 800d3c8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d3ca:	7bbb      	ldrb	r3, [r7, #14]
 800d3cc:	7b3a      	ldrb	r2, [r7, #12]
 800d3ce:	4911      	ldr	r1, [pc, #68]	; (800d414 <UARTEx_SetNbDataToProcess+0x94>)
 800d3d0:	5c8a      	ldrb	r2, [r1, r2]
 800d3d2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d3d6:	7b3a      	ldrb	r2, [r7, #12]
 800d3d8:	490f      	ldr	r1, [pc, #60]	; (800d418 <UARTEx_SetNbDataToProcess+0x98>)
 800d3da:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d3dc:	fb93 f3f2 	sdiv	r3, r3, r2
 800d3e0:	b29a      	uxth	r2, r3
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d3e8:	7bfb      	ldrb	r3, [r7, #15]
 800d3ea:	7b7a      	ldrb	r2, [r7, #13]
 800d3ec:	4909      	ldr	r1, [pc, #36]	; (800d414 <UARTEx_SetNbDataToProcess+0x94>)
 800d3ee:	5c8a      	ldrb	r2, [r1, r2]
 800d3f0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d3f4:	7b7a      	ldrb	r2, [r7, #13]
 800d3f6:	4908      	ldr	r1, [pc, #32]	; (800d418 <UARTEx_SetNbDataToProcess+0x98>)
 800d3f8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d3fa:	fb93 f3f2 	sdiv	r3, r3, r2
 800d3fe:	b29a      	uxth	r2, r3
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d406:	bf00      	nop
 800d408:	3714      	adds	r7, #20
 800d40a:	46bd      	mov	sp, r7
 800d40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d410:	4770      	bx	lr
 800d412:	bf00      	nop
 800d414:	08013cc0 	.word	0x08013cc0
 800d418:	08013cc8 	.word	0x08013cc8

0800d41c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800d41c:	b480      	push	{r7}
 800d41e:	b083      	sub	sp, #12
 800d420:	af00      	add	r7, sp, #0
 800d422:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800d42a:	4618      	mov	r0, r3
 800d42c:	370c      	adds	r7, #12
 800d42e:	46bd      	mov	sp, r7
 800d430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d434:	4770      	bx	lr

0800d436 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800d436:	b480      	push	{r7}
 800d438:	b083      	sub	sp, #12
 800d43a:	af00      	add	r7, sp, #0
 800d43c:	6078      	str	r0, [r7, #4]
 800d43e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800d440:	683b      	ldr	r3, [r7, #0]
 800d442:	681a      	ldr	r2, [r3, #0]
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d44a:	2300      	movs	r3, #0
}
 800d44c:	4618      	mov	r0, r3
 800d44e:	370c      	adds	r7, #12
 800d450:	46bd      	mov	sp, r7
 800d452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d456:	4770      	bx	lr

0800d458 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800d458:	b480      	push	{r7}
 800d45a:	b085      	sub	sp, #20
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	6078      	str	r0, [r7, #4]
 800d460:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d462:	2300      	movs	r3, #0
 800d464:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800d466:	683b      	ldr	r3, [r7, #0]
 800d468:	681a      	ldr	r2, [r3, #0]
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800d46e:	683b      	ldr	r3, [r7, #0]
 800d470:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800d472:	683b      	ldr	r3, [r7, #0]
 800d474:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800d476:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800d478:	683b      	ldr	r3, [r7, #0]
 800d47a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800d47c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d47e:	683b      	ldr	r3, [r7, #0]
 800d480:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800d482:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800d484:	68fa      	ldr	r2, [r7, #12]
 800d486:	4313      	orrs	r3, r2
 800d488:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	68da      	ldr	r2, [r3, #12]
 800d48e:	4b06      	ldr	r3, [pc, #24]	; (800d4a8 <SDMMC_SendCommand+0x50>)
 800d490:	4013      	ands	r3, r2
 800d492:	68fa      	ldr	r2, [r7, #12]
 800d494:	431a      	orrs	r2, r3
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d49a:	2300      	movs	r3, #0
}
 800d49c:	4618      	mov	r0, r3
 800d49e:	3714      	adds	r7, #20
 800d4a0:	46bd      	mov	sp, r7
 800d4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a6:	4770      	bx	lr
 800d4a8:	fffee0c0 	.word	0xfffee0c0

0800d4ac <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800d4ac:	b480      	push	{r7}
 800d4ae:	b083      	sub	sp, #12
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	691b      	ldr	r3, [r3, #16]
 800d4b8:	b2db      	uxtb	r3, r3
}
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	370c      	adds	r7, #12
 800d4be:	46bd      	mov	sp, r7
 800d4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c4:	4770      	bx	lr

0800d4c6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800d4c6:	b480      	push	{r7}
 800d4c8:	b085      	sub	sp, #20
 800d4ca:	af00      	add	r7, sp, #0
 800d4cc:	6078      	str	r0, [r7, #4]
 800d4ce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	3314      	adds	r3, #20
 800d4d4:	461a      	mov	r2, r3
 800d4d6:	683b      	ldr	r3, [r7, #0]
 800d4d8:	4413      	add	r3, r2
 800d4da:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	681b      	ldr	r3, [r3, #0]
}
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	3714      	adds	r7, #20
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ea:	4770      	bx	lr

0800d4ec <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b088      	sub	sp, #32
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800d4f8:	230c      	movs	r3, #12
 800d4fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d4fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d500:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d502:	2300      	movs	r3, #0
 800d504:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d506:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d50a:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	68db      	ldr	r3, [r3, #12]
 800d510:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	68db      	ldr	r3, [r3, #12]
 800d51c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d524:	f107 0308 	add.w	r3, r7, #8
 800d528:	4619      	mov	r1, r3
 800d52a:	6878      	ldr	r0, [r7, #4]
 800d52c:	f7ff ff94 	bl	800d458 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800d530:	4a0b      	ldr	r2, [pc, #44]	; (800d560 <SDMMC_CmdStopTransfer+0x74>)
 800d532:	210c      	movs	r1, #12
 800d534:	6878      	ldr	r0, [r7, #4]
 800d536:	f000 f815 	bl	800d564 <SDMMC_GetCmdResp1>
 800d53a:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	68db      	ldr	r3, [r3, #12]
 800d540:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800d548:	69fb      	ldr	r3, [r7, #28]
 800d54a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d54e:	d101      	bne.n	800d554 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800d550:	2300      	movs	r3, #0
 800d552:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800d554:	69fb      	ldr	r3, [r7, #28]
}
 800d556:	4618      	mov	r0, r3
 800d558:	3720      	adds	r7, #32
 800d55a:	46bd      	mov	sp, r7
 800d55c:	bd80      	pop	{r7, pc}
 800d55e:	bf00      	nop
 800d560:	05f5e100 	.word	0x05f5e100

0800d564 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b088      	sub	sp, #32
 800d568:	af00      	add	r7, sp, #0
 800d56a:	60f8      	str	r0, [r7, #12]
 800d56c:	460b      	mov	r3, r1
 800d56e:	607a      	str	r2, [r7, #4]
 800d570:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800d572:	4b70      	ldr	r3, [pc, #448]	; (800d734 <SDMMC_GetCmdResp1+0x1d0>)
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	4a70      	ldr	r2, [pc, #448]	; (800d738 <SDMMC_GetCmdResp1+0x1d4>)
 800d578:	fba2 2303 	umull	r2, r3, r2, r3
 800d57c:	0a5a      	lsrs	r2, r3, #9
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	fb02 f303 	mul.w	r3, r2, r3
 800d584:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800d586:	69fb      	ldr	r3, [r7, #28]
 800d588:	1e5a      	subs	r2, r3, #1
 800d58a:	61fa      	str	r2, [r7, #28]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d102      	bne.n	800d596 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d590:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d594:	e0c9      	b.n	800d72a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d59a:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800d59c:	69ba      	ldr	r2, [r7, #24]
 800d59e:	4b67      	ldr	r3, [pc, #412]	; (800d73c <SDMMC_GetCmdResp1+0x1d8>)
 800d5a0:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d0ef      	beq.n	800d586 <SDMMC_GetCmdResp1+0x22>
 800d5a6:	69bb      	ldr	r3, [r7, #24]
 800d5a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d1ea      	bne.n	800d586 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5b4:	f003 0304 	and.w	r3, r3, #4
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d004      	beq.n	800d5c6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	2204      	movs	r2, #4
 800d5c0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d5c2:	2304      	movs	r3, #4
 800d5c4:	e0b1      	b.n	800d72a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5ca:	f003 0301 	and.w	r3, r3, #1
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d004      	beq.n	800d5dc <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	2201      	movs	r2, #1
 800d5d6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d5d8:	2301      	movs	r3, #1
 800d5da:	e0a6      	b.n	800d72a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	4a58      	ldr	r2, [pc, #352]	; (800d740 <SDMMC_GetCmdResp1+0x1dc>)
 800d5e0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d5e2:	68f8      	ldr	r0, [r7, #12]
 800d5e4:	f7ff ff62 	bl	800d4ac <SDMMC_GetCommandResponse>
 800d5e8:	4603      	mov	r3, r0
 800d5ea:	461a      	mov	r2, r3
 800d5ec:	7afb      	ldrb	r3, [r7, #11]
 800d5ee:	4293      	cmp	r3, r2
 800d5f0:	d001      	beq.n	800d5f6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d5f2:	2301      	movs	r3, #1
 800d5f4:	e099      	b.n	800d72a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d5f6:	2100      	movs	r1, #0
 800d5f8:	68f8      	ldr	r0, [r7, #12]
 800d5fa:	f7ff ff64 	bl	800d4c6 <SDMMC_GetResponse>
 800d5fe:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d600:	697a      	ldr	r2, [r7, #20]
 800d602:	4b50      	ldr	r3, [pc, #320]	; (800d744 <SDMMC_GetCmdResp1+0x1e0>)
 800d604:	4013      	ands	r3, r2
 800d606:	2b00      	cmp	r3, #0
 800d608:	d101      	bne.n	800d60e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800d60a:	2300      	movs	r3, #0
 800d60c:	e08d      	b.n	800d72a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d60e:	697b      	ldr	r3, [r7, #20]
 800d610:	2b00      	cmp	r3, #0
 800d612:	da02      	bge.n	800d61a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d614:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d618:	e087      	b.n	800d72a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d61a:	697b      	ldr	r3, [r7, #20]
 800d61c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d620:	2b00      	cmp	r3, #0
 800d622:	d001      	beq.n	800d628 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d624:	2340      	movs	r3, #64	; 0x40
 800d626:	e080      	b.n	800d72a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d628:	697b      	ldr	r3, [r7, #20]
 800d62a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d001      	beq.n	800d636 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d632:	2380      	movs	r3, #128	; 0x80
 800d634:	e079      	b.n	800d72a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d636:	697b      	ldr	r3, [r7, #20]
 800d638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d002      	beq.n	800d646 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d640:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d644:	e071      	b.n	800d72a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d646:	697b      	ldr	r3, [r7, #20]
 800d648:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d002      	beq.n	800d656 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d650:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d654:	e069      	b.n	800d72a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d656:	697b      	ldr	r3, [r7, #20]
 800d658:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d002      	beq.n	800d666 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d660:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d664:	e061      	b.n	800d72a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d666:	697b      	ldr	r3, [r7, #20]
 800d668:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d002      	beq.n	800d676 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d670:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d674:	e059      	b.n	800d72a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d676:	697b      	ldr	r3, [r7, #20]
 800d678:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d002      	beq.n	800d686 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d680:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d684:	e051      	b.n	800d72a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d686:	697b      	ldr	r3, [r7, #20]
 800d688:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d002      	beq.n	800d696 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d690:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d694:	e049      	b.n	800d72a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d696:	697b      	ldr	r3, [r7, #20]
 800d698:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d002      	beq.n	800d6a6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d6a0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d6a4:	e041      	b.n	800d72a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d6a6:	697b      	ldr	r3, [r7, #20]
 800d6a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d002      	beq.n	800d6b6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800d6b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d6b4:	e039      	b.n	800d72a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d6b6:	697b      	ldr	r3, [r7, #20]
 800d6b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d002      	beq.n	800d6c6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d6c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d6c4:	e031      	b.n	800d72a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d6c6:	697b      	ldr	r3, [r7, #20]
 800d6c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d002      	beq.n	800d6d6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d6d0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d6d4:	e029      	b.n	800d72a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d6d6:	697b      	ldr	r3, [r7, #20]
 800d6d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d002      	beq.n	800d6e6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d6e0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d6e4:	e021      	b.n	800d72a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d6e6:	697b      	ldr	r3, [r7, #20]
 800d6e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d002      	beq.n	800d6f6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d6f0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800d6f4:	e019      	b.n	800d72a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d6f6:	697b      	ldr	r3, [r7, #20]
 800d6f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d002      	beq.n	800d706 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d700:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d704:	e011      	b.n	800d72a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d706:	697b      	ldr	r3, [r7, #20]
 800d708:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d002      	beq.n	800d716 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d710:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d714:	e009      	b.n	800d72a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d716:	697b      	ldr	r3, [r7, #20]
 800d718:	f003 0308 	and.w	r3, r3, #8
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d002      	beq.n	800d726 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d720:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d724:	e001      	b.n	800d72a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d726:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d72a:	4618      	mov	r0, r3
 800d72c:	3720      	adds	r7, #32
 800d72e:	46bd      	mov	sp, r7
 800d730:	bd80      	pop	{r7, pc}
 800d732:	bf00      	nop
 800d734:	24000000 	.word	0x24000000
 800d738:	10624dd3 	.word	0x10624dd3
 800d73c:	00200045 	.word	0x00200045
 800d740:	002000c5 	.word	0x002000c5
 800d744:	fdffe008 	.word	0xfdffe008

0800d748 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d748:	b084      	sub	sp, #16
 800d74a:	b580      	push	{r7, lr}
 800d74c:	b084      	sub	sp, #16
 800d74e:	af00      	add	r7, sp, #0
 800d750:	6078      	str	r0, [r7, #4]
 800d752:	f107 001c 	add.w	r0, r7, #28
 800d756:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d75a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d75c:	2b01      	cmp	r3, #1
 800d75e:	d120      	bne.n	800d7a2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d764:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	68da      	ldr	r2, [r3, #12]
 800d770:	4b2a      	ldr	r3, [pc, #168]	; (800d81c <USB_CoreInit+0xd4>)
 800d772:	4013      	ands	r3, r2
 800d774:	687a      	ldr	r2, [r7, #4]
 800d776:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	68db      	ldr	r3, [r3, #12]
 800d77c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d784:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d786:	2b01      	cmp	r3, #1
 800d788:	d105      	bne.n	800d796 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	68db      	ldr	r3, [r3, #12]
 800d78e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d796:	6878      	ldr	r0, [r7, #4]
 800d798:	f001 fb14 	bl	800edc4 <USB_CoreReset>
 800d79c:	4603      	mov	r3, r0
 800d79e:	73fb      	strb	r3, [r7, #15]
 800d7a0:	e01a      	b.n	800d7d8 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	68db      	ldr	r3, [r3, #12]
 800d7a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d7ae:	6878      	ldr	r0, [r7, #4]
 800d7b0:	f001 fb08 	bl	800edc4 <USB_CoreReset>
 800d7b4:	4603      	mov	r3, r0
 800d7b6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800d7b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d106      	bne.n	800d7cc <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7c2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	639a      	str	r2, [r3, #56]	; 0x38
 800d7ca:	e005      	b.n	800d7d8 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800d7d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7da:	2b01      	cmp	r3, #1
 800d7dc:	d116      	bne.n	800d80c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d7e2:	b29a      	uxth	r2, r3
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d7ec:	4b0c      	ldr	r3, [pc, #48]	; (800d820 <USB_CoreInit+0xd8>)
 800d7ee:	4313      	orrs	r3, r2
 800d7f0:	687a      	ldr	r2, [r7, #4]
 800d7f2:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	689b      	ldr	r3, [r3, #8]
 800d7f8:	f043 0206 	orr.w	r2, r3, #6
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	689b      	ldr	r3, [r3, #8]
 800d804:	f043 0220 	orr.w	r2, r3, #32
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d80c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d80e:	4618      	mov	r0, r3
 800d810:	3710      	adds	r7, #16
 800d812:	46bd      	mov	sp, r7
 800d814:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d818:	b004      	add	sp, #16
 800d81a:	4770      	bx	lr
 800d81c:	ffbdffbf 	.word	0xffbdffbf
 800d820:	03ee0000 	.word	0x03ee0000

0800d824 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800d824:	b480      	push	{r7}
 800d826:	b087      	sub	sp, #28
 800d828:	af00      	add	r7, sp, #0
 800d82a:	60f8      	str	r0, [r7, #12]
 800d82c:	60b9      	str	r1, [r7, #8]
 800d82e:	4613      	mov	r3, r2
 800d830:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800d832:	79fb      	ldrb	r3, [r7, #7]
 800d834:	2b02      	cmp	r3, #2
 800d836:	d165      	bne.n	800d904 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800d838:	68bb      	ldr	r3, [r7, #8]
 800d83a:	4a41      	ldr	r2, [pc, #260]	; (800d940 <USB_SetTurnaroundTime+0x11c>)
 800d83c:	4293      	cmp	r3, r2
 800d83e:	d906      	bls.n	800d84e <USB_SetTurnaroundTime+0x2a>
 800d840:	68bb      	ldr	r3, [r7, #8]
 800d842:	4a40      	ldr	r2, [pc, #256]	; (800d944 <USB_SetTurnaroundTime+0x120>)
 800d844:	4293      	cmp	r3, r2
 800d846:	d202      	bcs.n	800d84e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800d848:	230f      	movs	r3, #15
 800d84a:	617b      	str	r3, [r7, #20]
 800d84c:	e062      	b.n	800d914 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800d84e:	68bb      	ldr	r3, [r7, #8]
 800d850:	4a3c      	ldr	r2, [pc, #240]	; (800d944 <USB_SetTurnaroundTime+0x120>)
 800d852:	4293      	cmp	r3, r2
 800d854:	d306      	bcc.n	800d864 <USB_SetTurnaroundTime+0x40>
 800d856:	68bb      	ldr	r3, [r7, #8]
 800d858:	4a3b      	ldr	r2, [pc, #236]	; (800d948 <USB_SetTurnaroundTime+0x124>)
 800d85a:	4293      	cmp	r3, r2
 800d85c:	d202      	bcs.n	800d864 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800d85e:	230e      	movs	r3, #14
 800d860:	617b      	str	r3, [r7, #20]
 800d862:	e057      	b.n	800d914 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800d864:	68bb      	ldr	r3, [r7, #8]
 800d866:	4a38      	ldr	r2, [pc, #224]	; (800d948 <USB_SetTurnaroundTime+0x124>)
 800d868:	4293      	cmp	r3, r2
 800d86a:	d306      	bcc.n	800d87a <USB_SetTurnaroundTime+0x56>
 800d86c:	68bb      	ldr	r3, [r7, #8]
 800d86e:	4a37      	ldr	r2, [pc, #220]	; (800d94c <USB_SetTurnaroundTime+0x128>)
 800d870:	4293      	cmp	r3, r2
 800d872:	d202      	bcs.n	800d87a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800d874:	230d      	movs	r3, #13
 800d876:	617b      	str	r3, [r7, #20]
 800d878:	e04c      	b.n	800d914 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800d87a:	68bb      	ldr	r3, [r7, #8]
 800d87c:	4a33      	ldr	r2, [pc, #204]	; (800d94c <USB_SetTurnaroundTime+0x128>)
 800d87e:	4293      	cmp	r3, r2
 800d880:	d306      	bcc.n	800d890 <USB_SetTurnaroundTime+0x6c>
 800d882:	68bb      	ldr	r3, [r7, #8]
 800d884:	4a32      	ldr	r2, [pc, #200]	; (800d950 <USB_SetTurnaroundTime+0x12c>)
 800d886:	4293      	cmp	r3, r2
 800d888:	d802      	bhi.n	800d890 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800d88a:	230c      	movs	r3, #12
 800d88c:	617b      	str	r3, [r7, #20]
 800d88e:	e041      	b.n	800d914 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800d890:	68bb      	ldr	r3, [r7, #8]
 800d892:	4a2f      	ldr	r2, [pc, #188]	; (800d950 <USB_SetTurnaroundTime+0x12c>)
 800d894:	4293      	cmp	r3, r2
 800d896:	d906      	bls.n	800d8a6 <USB_SetTurnaroundTime+0x82>
 800d898:	68bb      	ldr	r3, [r7, #8]
 800d89a:	4a2e      	ldr	r2, [pc, #184]	; (800d954 <USB_SetTurnaroundTime+0x130>)
 800d89c:	4293      	cmp	r3, r2
 800d89e:	d802      	bhi.n	800d8a6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800d8a0:	230b      	movs	r3, #11
 800d8a2:	617b      	str	r3, [r7, #20]
 800d8a4:	e036      	b.n	800d914 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800d8a6:	68bb      	ldr	r3, [r7, #8]
 800d8a8:	4a2a      	ldr	r2, [pc, #168]	; (800d954 <USB_SetTurnaroundTime+0x130>)
 800d8aa:	4293      	cmp	r3, r2
 800d8ac:	d906      	bls.n	800d8bc <USB_SetTurnaroundTime+0x98>
 800d8ae:	68bb      	ldr	r3, [r7, #8]
 800d8b0:	4a29      	ldr	r2, [pc, #164]	; (800d958 <USB_SetTurnaroundTime+0x134>)
 800d8b2:	4293      	cmp	r3, r2
 800d8b4:	d802      	bhi.n	800d8bc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800d8b6:	230a      	movs	r3, #10
 800d8b8:	617b      	str	r3, [r7, #20]
 800d8ba:	e02b      	b.n	800d914 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800d8bc:	68bb      	ldr	r3, [r7, #8]
 800d8be:	4a26      	ldr	r2, [pc, #152]	; (800d958 <USB_SetTurnaroundTime+0x134>)
 800d8c0:	4293      	cmp	r3, r2
 800d8c2:	d906      	bls.n	800d8d2 <USB_SetTurnaroundTime+0xae>
 800d8c4:	68bb      	ldr	r3, [r7, #8]
 800d8c6:	4a25      	ldr	r2, [pc, #148]	; (800d95c <USB_SetTurnaroundTime+0x138>)
 800d8c8:	4293      	cmp	r3, r2
 800d8ca:	d202      	bcs.n	800d8d2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800d8cc:	2309      	movs	r3, #9
 800d8ce:	617b      	str	r3, [r7, #20]
 800d8d0:	e020      	b.n	800d914 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800d8d2:	68bb      	ldr	r3, [r7, #8]
 800d8d4:	4a21      	ldr	r2, [pc, #132]	; (800d95c <USB_SetTurnaroundTime+0x138>)
 800d8d6:	4293      	cmp	r3, r2
 800d8d8:	d306      	bcc.n	800d8e8 <USB_SetTurnaroundTime+0xc4>
 800d8da:	68bb      	ldr	r3, [r7, #8]
 800d8dc:	4a20      	ldr	r2, [pc, #128]	; (800d960 <USB_SetTurnaroundTime+0x13c>)
 800d8de:	4293      	cmp	r3, r2
 800d8e0:	d802      	bhi.n	800d8e8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800d8e2:	2308      	movs	r3, #8
 800d8e4:	617b      	str	r3, [r7, #20]
 800d8e6:	e015      	b.n	800d914 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800d8e8:	68bb      	ldr	r3, [r7, #8]
 800d8ea:	4a1d      	ldr	r2, [pc, #116]	; (800d960 <USB_SetTurnaroundTime+0x13c>)
 800d8ec:	4293      	cmp	r3, r2
 800d8ee:	d906      	bls.n	800d8fe <USB_SetTurnaroundTime+0xda>
 800d8f0:	68bb      	ldr	r3, [r7, #8]
 800d8f2:	4a1c      	ldr	r2, [pc, #112]	; (800d964 <USB_SetTurnaroundTime+0x140>)
 800d8f4:	4293      	cmp	r3, r2
 800d8f6:	d202      	bcs.n	800d8fe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800d8f8:	2307      	movs	r3, #7
 800d8fa:	617b      	str	r3, [r7, #20]
 800d8fc:	e00a      	b.n	800d914 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800d8fe:	2306      	movs	r3, #6
 800d900:	617b      	str	r3, [r7, #20]
 800d902:	e007      	b.n	800d914 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800d904:	79fb      	ldrb	r3, [r7, #7]
 800d906:	2b00      	cmp	r3, #0
 800d908:	d102      	bne.n	800d910 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800d90a:	2309      	movs	r3, #9
 800d90c:	617b      	str	r3, [r7, #20]
 800d90e:	e001      	b.n	800d914 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800d910:	2309      	movs	r3, #9
 800d912:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	68db      	ldr	r3, [r3, #12]
 800d918:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	68da      	ldr	r2, [r3, #12]
 800d924:	697b      	ldr	r3, [r7, #20]
 800d926:	029b      	lsls	r3, r3, #10
 800d928:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800d92c:	431a      	orrs	r2, r3
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d932:	2300      	movs	r3, #0
}
 800d934:	4618      	mov	r0, r3
 800d936:	371c      	adds	r7, #28
 800d938:	46bd      	mov	sp, r7
 800d93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93e:	4770      	bx	lr
 800d940:	00d8acbf 	.word	0x00d8acbf
 800d944:	00e4e1c0 	.word	0x00e4e1c0
 800d948:	00f42400 	.word	0x00f42400
 800d94c:	01067380 	.word	0x01067380
 800d950:	011a499f 	.word	0x011a499f
 800d954:	01312cff 	.word	0x01312cff
 800d958:	014ca43f 	.word	0x014ca43f
 800d95c:	016e3600 	.word	0x016e3600
 800d960:	01a6ab1f 	.word	0x01a6ab1f
 800d964:	01e84800 	.word	0x01e84800

0800d968 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d968:	b480      	push	{r7}
 800d96a:	b083      	sub	sp, #12
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	689b      	ldr	r3, [r3, #8]
 800d974:	f043 0201 	orr.w	r2, r3, #1
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d97c:	2300      	movs	r3, #0
}
 800d97e:	4618      	mov	r0, r3
 800d980:	370c      	adds	r7, #12
 800d982:	46bd      	mov	sp, r7
 800d984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d988:	4770      	bx	lr

0800d98a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d98a:	b480      	push	{r7}
 800d98c:	b083      	sub	sp, #12
 800d98e:	af00      	add	r7, sp, #0
 800d990:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	689b      	ldr	r3, [r3, #8]
 800d996:	f023 0201 	bic.w	r2, r3, #1
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d99e:	2300      	movs	r3, #0
}
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	370c      	adds	r7, #12
 800d9a4:	46bd      	mov	sp, r7
 800d9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9aa:	4770      	bx	lr

0800d9ac <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	b082      	sub	sp, #8
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
 800d9b4:	460b      	mov	r3, r1
 800d9b6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	68db      	ldr	r3, [r3, #12]
 800d9bc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d9c4:	78fb      	ldrb	r3, [r7, #3]
 800d9c6:	2b01      	cmp	r3, #1
 800d9c8:	d106      	bne.n	800d9d8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	68db      	ldr	r3, [r3, #12]
 800d9ce:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	60da      	str	r2, [r3, #12]
 800d9d6:	e00b      	b.n	800d9f0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800d9d8:	78fb      	ldrb	r3, [r7, #3]
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d106      	bne.n	800d9ec <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	68db      	ldr	r3, [r3, #12]
 800d9e2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	60da      	str	r2, [r3, #12]
 800d9ea:	e001      	b.n	800d9f0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800d9ec:	2301      	movs	r3, #1
 800d9ee:	e003      	b.n	800d9f8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800d9f0:	2032      	movs	r0, #50	; 0x32
 800d9f2:	f7f4 fc6f 	bl	80022d4 <HAL_Delay>

  return HAL_OK;
 800d9f6:	2300      	movs	r3, #0
}
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	3708      	adds	r7, #8
 800d9fc:	46bd      	mov	sp, r7
 800d9fe:	bd80      	pop	{r7, pc}

0800da00 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800da00:	b084      	sub	sp, #16
 800da02:	b580      	push	{r7, lr}
 800da04:	b086      	sub	sp, #24
 800da06:	af00      	add	r7, sp, #0
 800da08:	6078      	str	r0, [r7, #4]
 800da0a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800da0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800da12:	2300      	movs	r3, #0
 800da14:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800da1a:	2300      	movs	r3, #0
 800da1c:	613b      	str	r3, [r7, #16]
 800da1e:	e009      	b.n	800da34 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800da20:	687a      	ldr	r2, [r7, #4]
 800da22:	693b      	ldr	r3, [r7, #16]
 800da24:	3340      	adds	r3, #64	; 0x40
 800da26:	009b      	lsls	r3, r3, #2
 800da28:	4413      	add	r3, r2
 800da2a:	2200      	movs	r2, #0
 800da2c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800da2e:	693b      	ldr	r3, [r7, #16]
 800da30:	3301      	adds	r3, #1
 800da32:	613b      	str	r3, [r7, #16]
 800da34:	693b      	ldr	r3, [r7, #16]
 800da36:	2b0e      	cmp	r3, #14
 800da38:	d9f2      	bls.n	800da20 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800da3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d11c      	bne.n	800da7a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da46:	685b      	ldr	r3, [r3, #4]
 800da48:	68fa      	ldr	r2, [r7, #12]
 800da4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800da4e:	f043 0302 	orr.w	r3, r3, #2
 800da52:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da58:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	601a      	str	r2, [r3, #0]
 800da78:	e005      	b.n	800da86 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da7e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800da8c:	461a      	mov	r2, r3
 800da8e:	2300      	movs	r3, #0
 800da90:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da98:	4619      	mov	r1, r3
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800daa0:	461a      	mov	r2, r3
 800daa2:	680b      	ldr	r3, [r1, #0]
 800daa4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800daa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daa8:	2b01      	cmp	r3, #1
 800daaa:	d10c      	bne.n	800dac6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800daac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d104      	bne.n	800dabc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800dab2:	2100      	movs	r1, #0
 800dab4:	6878      	ldr	r0, [r7, #4]
 800dab6:	f000 f949 	bl	800dd4c <USB_SetDevSpeed>
 800daba:	e008      	b.n	800dace <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800dabc:	2101      	movs	r1, #1
 800dabe:	6878      	ldr	r0, [r7, #4]
 800dac0:	f000 f944 	bl	800dd4c <USB_SetDevSpeed>
 800dac4:	e003      	b.n	800dace <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800dac6:	2103      	movs	r1, #3
 800dac8:	6878      	ldr	r0, [r7, #4]
 800daca:	f000 f93f 	bl	800dd4c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800dace:	2110      	movs	r1, #16
 800dad0:	6878      	ldr	r0, [r7, #4]
 800dad2:	f000 f8f3 	bl	800dcbc <USB_FlushTxFifo>
 800dad6:	4603      	mov	r3, r0
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d001      	beq.n	800dae0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800dadc:	2301      	movs	r3, #1
 800dade:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800dae0:	6878      	ldr	r0, [r7, #4]
 800dae2:	f000 f911 	bl	800dd08 <USB_FlushRxFifo>
 800dae6:	4603      	mov	r3, r0
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d001      	beq.n	800daf0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800daec:	2301      	movs	r3, #1
 800daee:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800daf6:	461a      	mov	r2, r3
 800daf8:	2300      	movs	r3, #0
 800dafa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800db02:	461a      	mov	r2, r3
 800db04:	2300      	movs	r3, #0
 800db06:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800db0e:	461a      	mov	r2, r3
 800db10:	2300      	movs	r3, #0
 800db12:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800db14:	2300      	movs	r3, #0
 800db16:	613b      	str	r3, [r7, #16]
 800db18:	e043      	b.n	800dba2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800db1a:	693b      	ldr	r3, [r7, #16]
 800db1c:	015a      	lsls	r2, r3, #5
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	4413      	add	r3, r2
 800db22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800db2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800db30:	d118      	bne.n	800db64 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800db32:	693b      	ldr	r3, [r7, #16]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d10a      	bne.n	800db4e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800db38:	693b      	ldr	r3, [r7, #16]
 800db3a:	015a      	lsls	r2, r3, #5
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	4413      	add	r3, r2
 800db40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db44:	461a      	mov	r2, r3
 800db46:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800db4a:	6013      	str	r3, [r2, #0]
 800db4c:	e013      	b.n	800db76 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800db4e:	693b      	ldr	r3, [r7, #16]
 800db50:	015a      	lsls	r2, r3, #5
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	4413      	add	r3, r2
 800db56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db5a:	461a      	mov	r2, r3
 800db5c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800db60:	6013      	str	r3, [r2, #0]
 800db62:	e008      	b.n	800db76 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800db64:	693b      	ldr	r3, [r7, #16]
 800db66:	015a      	lsls	r2, r3, #5
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	4413      	add	r3, r2
 800db6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db70:	461a      	mov	r2, r3
 800db72:	2300      	movs	r3, #0
 800db74:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800db76:	693b      	ldr	r3, [r7, #16]
 800db78:	015a      	lsls	r2, r3, #5
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	4413      	add	r3, r2
 800db7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db82:	461a      	mov	r2, r3
 800db84:	2300      	movs	r3, #0
 800db86:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800db88:	693b      	ldr	r3, [r7, #16]
 800db8a:	015a      	lsls	r2, r3, #5
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	4413      	add	r3, r2
 800db90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db94:	461a      	mov	r2, r3
 800db96:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800db9a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800db9c:	693b      	ldr	r3, [r7, #16]
 800db9e:	3301      	adds	r3, #1
 800dba0:	613b      	str	r3, [r7, #16]
 800dba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dba4:	693a      	ldr	r2, [r7, #16]
 800dba6:	429a      	cmp	r2, r3
 800dba8:	d3b7      	bcc.n	800db1a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dbaa:	2300      	movs	r3, #0
 800dbac:	613b      	str	r3, [r7, #16]
 800dbae:	e043      	b.n	800dc38 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800dbb0:	693b      	ldr	r3, [r7, #16]
 800dbb2:	015a      	lsls	r2, r3, #5
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	4413      	add	r3, r2
 800dbb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dbc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dbc6:	d118      	bne.n	800dbfa <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800dbc8:	693b      	ldr	r3, [r7, #16]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d10a      	bne.n	800dbe4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800dbce:	693b      	ldr	r3, [r7, #16]
 800dbd0:	015a      	lsls	r2, r3, #5
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	4413      	add	r3, r2
 800dbd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dbda:	461a      	mov	r2, r3
 800dbdc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800dbe0:	6013      	str	r3, [r2, #0]
 800dbe2:	e013      	b.n	800dc0c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800dbe4:	693b      	ldr	r3, [r7, #16]
 800dbe6:	015a      	lsls	r2, r3, #5
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	4413      	add	r3, r2
 800dbec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dbf0:	461a      	mov	r2, r3
 800dbf2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800dbf6:	6013      	str	r3, [r2, #0]
 800dbf8:	e008      	b.n	800dc0c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800dbfa:	693b      	ldr	r3, [r7, #16]
 800dbfc:	015a      	lsls	r2, r3, #5
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	4413      	add	r3, r2
 800dc02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc06:	461a      	mov	r2, r3
 800dc08:	2300      	movs	r3, #0
 800dc0a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800dc0c:	693b      	ldr	r3, [r7, #16]
 800dc0e:	015a      	lsls	r2, r3, #5
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	4413      	add	r3, r2
 800dc14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc18:	461a      	mov	r2, r3
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800dc1e:	693b      	ldr	r3, [r7, #16]
 800dc20:	015a      	lsls	r2, r3, #5
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	4413      	add	r3, r2
 800dc26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc2a:	461a      	mov	r2, r3
 800dc2c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800dc30:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dc32:	693b      	ldr	r3, [r7, #16]
 800dc34:	3301      	adds	r3, #1
 800dc36:	613b      	str	r3, [r7, #16]
 800dc38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc3a:	693a      	ldr	r2, [r7, #16]
 800dc3c:	429a      	cmp	r2, r3
 800dc3e:	d3b7      	bcc.n	800dbb0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc46:	691b      	ldr	r3, [r3, #16]
 800dc48:	68fa      	ldr	r2, [r7, #12]
 800dc4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dc4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dc52:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	2200      	movs	r2, #0
 800dc58:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800dc60:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800dc62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d105      	bne.n	800dc74 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	699b      	ldr	r3, [r3, #24]
 800dc6c:	f043 0210 	orr.w	r2, r3, #16
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	699a      	ldr	r2, [r3, #24]
 800dc78:	4b0e      	ldr	r3, [pc, #56]	; (800dcb4 <USB_DevInit+0x2b4>)
 800dc7a:	4313      	orrs	r3, r2
 800dc7c:	687a      	ldr	r2, [r7, #4]
 800dc7e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800dc80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d005      	beq.n	800dc92 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	699b      	ldr	r3, [r3, #24]
 800dc8a:	f043 0208 	orr.w	r2, r3, #8
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800dc92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc94:	2b01      	cmp	r3, #1
 800dc96:	d105      	bne.n	800dca4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	699a      	ldr	r2, [r3, #24]
 800dc9c:	4b06      	ldr	r3, [pc, #24]	; (800dcb8 <USB_DevInit+0x2b8>)
 800dc9e:	4313      	orrs	r3, r2
 800dca0:	687a      	ldr	r2, [r7, #4]
 800dca2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800dca4:	7dfb      	ldrb	r3, [r7, #23]
}
 800dca6:	4618      	mov	r0, r3
 800dca8:	3718      	adds	r7, #24
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dcb0:	b004      	add	sp, #16
 800dcb2:	4770      	bx	lr
 800dcb4:	803c3800 	.word	0x803c3800
 800dcb8:	40000004 	.word	0x40000004

0800dcbc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800dcbc:	b480      	push	{r7}
 800dcbe:	b085      	sub	sp, #20
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	6078      	str	r0, [r7, #4]
 800dcc4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800dcca:	683b      	ldr	r3, [r7, #0]
 800dccc:	019b      	lsls	r3, r3, #6
 800dcce:	f043 0220 	orr.w	r2, r3, #32
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	3301      	adds	r3, #1
 800dcda:	60fb      	str	r3, [r7, #12]
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	4a09      	ldr	r2, [pc, #36]	; (800dd04 <USB_FlushTxFifo+0x48>)
 800dce0:	4293      	cmp	r3, r2
 800dce2:	d901      	bls.n	800dce8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800dce4:	2303      	movs	r3, #3
 800dce6:	e006      	b.n	800dcf6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	691b      	ldr	r3, [r3, #16]
 800dcec:	f003 0320 	and.w	r3, r3, #32
 800dcf0:	2b20      	cmp	r3, #32
 800dcf2:	d0f0      	beq.n	800dcd6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800dcf4:	2300      	movs	r3, #0
}
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	3714      	adds	r7, #20
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd00:	4770      	bx	lr
 800dd02:	bf00      	nop
 800dd04:	00030d40 	.word	0x00030d40

0800dd08 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800dd08:	b480      	push	{r7}
 800dd0a:	b085      	sub	sp, #20
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800dd10:	2300      	movs	r3, #0
 800dd12:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	2210      	movs	r2, #16
 800dd18:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	3301      	adds	r3, #1
 800dd1e:	60fb      	str	r3, [r7, #12]
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	4a09      	ldr	r2, [pc, #36]	; (800dd48 <USB_FlushRxFifo+0x40>)
 800dd24:	4293      	cmp	r3, r2
 800dd26:	d901      	bls.n	800dd2c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800dd28:	2303      	movs	r3, #3
 800dd2a:	e006      	b.n	800dd3a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	691b      	ldr	r3, [r3, #16]
 800dd30:	f003 0310 	and.w	r3, r3, #16
 800dd34:	2b10      	cmp	r3, #16
 800dd36:	d0f0      	beq.n	800dd1a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800dd38:	2300      	movs	r3, #0
}
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	3714      	adds	r7, #20
 800dd3e:	46bd      	mov	sp, r7
 800dd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd44:	4770      	bx	lr
 800dd46:	bf00      	nop
 800dd48:	00030d40 	.word	0x00030d40

0800dd4c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800dd4c:	b480      	push	{r7}
 800dd4e:	b085      	sub	sp, #20
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	6078      	str	r0, [r7, #4]
 800dd54:	460b      	mov	r3, r1
 800dd56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd62:	681a      	ldr	r2, [r3, #0]
 800dd64:	78fb      	ldrb	r3, [r7, #3]
 800dd66:	68f9      	ldr	r1, [r7, #12]
 800dd68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dd6c:	4313      	orrs	r3, r2
 800dd6e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800dd70:	2300      	movs	r3, #0
}
 800dd72:	4618      	mov	r0, r3
 800dd74:	3714      	adds	r7, #20
 800dd76:	46bd      	mov	sp, r7
 800dd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd7c:	4770      	bx	lr

0800dd7e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800dd7e:	b480      	push	{r7}
 800dd80:	b087      	sub	sp, #28
 800dd82:	af00      	add	r7, sp, #0
 800dd84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800dd8a:	693b      	ldr	r3, [r7, #16]
 800dd8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd90:	689b      	ldr	r3, [r3, #8]
 800dd92:	f003 0306 	and.w	r3, r3, #6
 800dd96:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d102      	bne.n	800dda4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800dd9e:	2300      	movs	r3, #0
 800dda0:	75fb      	strb	r3, [r7, #23]
 800dda2:	e00a      	b.n	800ddba <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	2b02      	cmp	r3, #2
 800dda8:	d002      	beq.n	800ddb0 <USB_GetDevSpeed+0x32>
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	2b06      	cmp	r3, #6
 800ddae:	d102      	bne.n	800ddb6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ddb0:	2302      	movs	r3, #2
 800ddb2:	75fb      	strb	r3, [r7, #23]
 800ddb4:	e001      	b.n	800ddba <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ddb6:	230f      	movs	r3, #15
 800ddb8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ddba:	7dfb      	ldrb	r3, [r7, #23]
}
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	371c      	adds	r7, #28
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc6:	4770      	bx	lr

0800ddc8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ddc8:	b480      	push	{r7}
 800ddca:	b085      	sub	sp, #20
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	6078      	str	r0, [r7, #4]
 800ddd0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ddd6:	683b      	ldr	r3, [r7, #0]
 800ddd8:	781b      	ldrb	r3, [r3, #0]
 800ddda:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800dddc:	683b      	ldr	r3, [r7, #0]
 800ddde:	785b      	ldrb	r3, [r3, #1]
 800dde0:	2b01      	cmp	r3, #1
 800dde2:	d139      	bne.n	800de58 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ddea:	69da      	ldr	r2, [r3, #28]
 800ddec:	683b      	ldr	r3, [r7, #0]
 800ddee:	781b      	ldrb	r3, [r3, #0]
 800ddf0:	f003 030f 	and.w	r3, r3, #15
 800ddf4:	2101      	movs	r1, #1
 800ddf6:	fa01 f303 	lsl.w	r3, r1, r3
 800ddfa:	b29b      	uxth	r3, r3
 800ddfc:	68f9      	ldr	r1, [r7, #12]
 800ddfe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800de02:	4313      	orrs	r3, r2
 800de04:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800de06:	68bb      	ldr	r3, [r7, #8]
 800de08:	015a      	lsls	r2, r3, #5
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	4413      	add	r3, r2
 800de0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d153      	bne.n	800dec4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800de1c:	68bb      	ldr	r3, [r7, #8]
 800de1e:	015a      	lsls	r2, r3, #5
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	4413      	add	r3, r2
 800de24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de28:	681a      	ldr	r2, [r3, #0]
 800de2a:	683b      	ldr	r3, [r7, #0]
 800de2c:	689b      	ldr	r3, [r3, #8]
 800de2e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800de32:	683b      	ldr	r3, [r7, #0]
 800de34:	78db      	ldrb	r3, [r3, #3]
 800de36:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800de38:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800de3a:	68bb      	ldr	r3, [r7, #8]
 800de3c:	059b      	lsls	r3, r3, #22
 800de3e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800de40:	431a      	orrs	r2, r3
 800de42:	68bb      	ldr	r3, [r7, #8]
 800de44:	0159      	lsls	r1, r3, #5
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	440b      	add	r3, r1
 800de4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de4e:	4619      	mov	r1, r3
 800de50:	4b20      	ldr	r3, [pc, #128]	; (800ded4 <USB_ActivateEndpoint+0x10c>)
 800de52:	4313      	orrs	r3, r2
 800de54:	600b      	str	r3, [r1, #0]
 800de56:	e035      	b.n	800dec4 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800de5e:	69da      	ldr	r2, [r3, #28]
 800de60:	683b      	ldr	r3, [r7, #0]
 800de62:	781b      	ldrb	r3, [r3, #0]
 800de64:	f003 030f 	and.w	r3, r3, #15
 800de68:	2101      	movs	r1, #1
 800de6a:	fa01 f303 	lsl.w	r3, r1, r3
 800de6e:	041b      	lsls	r3, r3, #16
 800de70:	68f9      	ldr	r1, [r7, #12]
 800de72:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800de76:	4313      	orrs	r3, r2
 800de78:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800de7a:	68bb      	ldr	r3, [r7, #8]
 800de7c:	015a      	lsls	r2, r3, #5
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	4413      	add	r3, r2
 800de82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d119      	bne.n	800dec4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800de90:	68bb      	ldr	r3, [r7, #8]
 800de92:	015a      	lsls	r2, r3, #5
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	4413      	add	r3, r2
 800de98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de9c:	681a      	ldr	r2, [r3, #0]
 800de9e:	683b      	ldr	r3, [r7, #0]
 800dea0:	689b      	ldr	r3, [r3, #8]
 800dea2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800dea6:	683b      	ldr	r3, [r7, #0]
 800dea8:	78db      	ldrb	r3, [r3, #3]
 800deaa:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800deac:	430b      	orrs	r3, r1
 800deae:	431a      	orrs	r2, r3
 800deb0:	68bb      	ldr	r3, [r7, #8]
 800deb2:	0159      	lsls	r1, r3, #5
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	440b      	add	r3, r1
 800deb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800debc:	4619      	mov	r1, r3
 800debe:	4b05      	ldr	r3, [pc, #20]	; (800ded4 <USB_ActivateEndpoint+0x10c>)
 800dec0:	4313      	orrs	r3, r2
 800dec2:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800dec4:	2300      	movs	r3, #0
}
 800dec6:	4618      	mov	r0, r3
 800dec8:	3714      	adds	r7, #20
 800deca:	46bd      	mov	sp, r7
 800decc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded0:	4770      	bx	lr
 800ded2:	bf00      	nop
 800ded4:	10008000 	.word	0x10008000

0800ded8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ded8:	b480      	push	{r7}
 800deda:	b085      	sub	sp, #20
 800dedc:	af00      	add	r7, sp, #0
 800dede:	6078      	str	r0, [r7, #4]
 800dee0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800dee6:	683b      	ldr	r3, [r7, #0]
 800dee8:	781b      	ldrb	r3, [r3, #0]
 800deea:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800deec:	683b      	ldr	r3, [r7, #0]
 800deee:	785b      	ldrb	r3, [r3, #1]
 800def0:	2b01      	cmp	r3, #1
 800def2:	d161      	bne.n	800dfb8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800def4:	68bb      	ldr	r3, [r7, #8]
 800def6:	015a      	lsls	r2, r3, #5
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	4413      	add	r3, r2
 800defc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800df06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800df0a:	d11f      	bne.n	800df4c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800df0c:	68bb      	ldr	r3, [r7, #8]
 800df0e:	015a      	lsls	r2, r3, #5
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	4413      	add	r3, r2
 800df14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	68ba      	ldr	r2, [r7, #8]
 800df1c:	0151      	lsls	r1, r2, #5
 800df1e:	68fa      	ldr	r2, [r7, #12]
 800df20:	440a      	add	r2, r1
 800df22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800df26:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800df2a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800df2c:	68bb      	ldr	r3, [r7, #8]
 800df2e:	015a      	lsls	r2, r3, #5
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	4413      	add	r3, r2
 800df34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	68ba      	ldr	r2, [r7, #8]
 800df3c:	0151      	lsls	r1, r2, #5
 800df3e:	68fa      	ldr	r2, [r7, #12]
 800df40:	440a      	add	r2, r1
 800df42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800df46:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800df4a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800df54:	683b      	ldr	r3, [r7, #0]
 800df56:	781b      	ldrb	r3, [r3, #0]
 800df58:	f003 030f 	and.w	r3, r3, #15
 800df5c:	2101      	movs	r1, #1
 800df5e:	fa01 f303 	lsl.w	r3, r1, r3
 800df62:	b29b      	uxth	r3, r3
 800df64:	43db      	mvns	r3, r3
 800df66:	68f9      	ldr	r1, [r7, #12]
 800df68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800df6c:	4013      	ands	r3, r2
 800df6e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df76:	69da      	ldr	r2, [r3, #28]
 800df78:	683b      	ldr	r3, [r7, #0]
 800df7a:	781b      	ldrb	r3, [r3, #0]
 800df7c:	f003 030f 	and.w	r3, r3, #15
 800df80:	2101      	movs	r1, #1
 800df82:	fa01 f303 	lsl.w	r3, r1, r3
 800df86:	b29b      	uxth	r3, r3
 800df88:	43db      	mvns	r3, r3
 800df8a:	68f9      	ldr	r1, [r7, #12]
 800df8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800df90:	4013      	ands	r3, r2
 800df92:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800df94:	68bb      	ldr	r3, [r7, #8]
 800df96:	015a      	lsls	r2, r3, #5
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	4413      	add	r3, r2
 800df9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dfa0:	681a      	ldr	r2, [r3, #0]
 800dfa2:	68bb      	ldr	r3, [r7, #8]
 800dfa4:	0159      	lsls	r1, r3, #5
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	440b      	add	r3, r1
 800dfaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dfae:	4619      	mov	r1, r3
 800dfb0:	4b35      	ldr	r3, [pc, #212]	; (800e088 <USB_DeactivateEndpoint+0x1b0>)
 800dfb2:	4013      	ands	r3, r2
 800dfb4:	600b      	str	r3, [r1, #0]
 800dfb6:	e060      	b.n	800e07a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800dfb8:	68bb      	ldr	r3, [r7, #8]
 800dfba:	015a      	lsls	r2, r3, #5
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	4413      	add	r3, r2
 800dfc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dfca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dfce:	d11f      	bne.n	800e010 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800dfd0:	68bb      	ldr	r3, [r7, #8]
 800dfd2:	015a      	lsls	r2, r3, #5
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	4413      	add	r3, r2
 800dfd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	68ba      	ldr	r2, [r7, #8]
 800dfe0:	0151      	lsls	r1, r2, #5
 800dfe2:	68fa      	ldr	r2, [r7, #12]
 800dfe4:	440a      	add	r2, r1
 800dfe6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dfea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800dfee:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800dff0:	68bb      	ldr	r3, [r7, #8]
 800dff2:	015a      	lsls	r2, r3, #5
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	4413      	add	r3, r2
 800dff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	68ba      	ldr	r2, [r7, #8]
 800e000:	0151      	lsls	r1, r2, #5
 800e002:	68fa      	ldr	r2, [r7, #12]
 800e004:	440a      	add	r2, r1
 800e006:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e00a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e00e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e016:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e018:	683b      	ldr	r3, [r7, #0]
 800e01a:	781b      	ldrb	r3, [r3, #0]
 800e01c:	f003 030f 	and.w	r3, r3, #15
 800e020:	2101      	movs	r1, #1
 800e022:	fa01 f303 	lsl.w	r3, r1, r3
 800e026:	041b      	lsls	r3, r3, #16
 800e028:	43db      	mvns	r3, r3
 800e02a:	68f9      	ldr	r1, [r7, #12]
 800e02c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e030:	4013      	ands	r3, r2
 800e032:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e03a:	69da      	ldr	r2, [r3, #28]
 800e03c:	683b      	ldr	r3, [r7, #0]
 800e03e:	781b      	ldrb	r3, [r3, #0]
 800e040:	f003 030f 	and.w	r3, r3, #15
 800e044:	2101      	movs	r1, #1
 800e046:	fa01 f303 	lsl.w	r3, r1, r3
 800e04a:	041b      	lsls	r3, r3, #16
 800e04c:	43db      	mvns	r3, r3
 800e04e:	68f9      	ldr	r1, [r7, #12]
 800e050:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e054:	4013      	ands	r3, r2
 800e056:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800e058:	68bb      	ldr	r3, [r7, #8]
 800e05a:	015a      	lsls	r2, r3, #5
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	4413      	add	r3, r2
 800e060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e064:	681a      	ldr	r2, [r3, #0]
 800e066:	68bb      	ldr	r3, [r7, #8]
 800e068:	0159      	lsls	r1, r3, #5
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	440b      	add	r3, r1
 800e06e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e072:	4619      	mov	r1, r3
 800e074:	4b05      	ldr	r3, [pc, #20]	; (800e08c <USB_DeactivateEndpoint+0x1b4>)
 800e076:	4013      	ands	r3, r2
 800e078:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800e07a:	2300      	movs	r3, #0
}
 800e07c:	4618      	mov	r0, r3
 800e07e:	3714      	adds	r7, #20
 800e080:	46bd      	mov	sp, r7
 800e082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e086:	4770      	bx	lr
 800e088:	ec337800 	.word	0xec337800
 800e08c:	eff37800 	.word	0xeff37800

0800e090 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800e090:	b580      	push	{r7, lr}
 800e092:	b08a      	sub	sp, #40	; 0x28
 800e094:	af02      	add	r7, sp, #8
 800e096:	60f8      	str	r0, [r7, #12]
 800e098:	60b9      	str	r1, [r7, #8]
 800e09a:	4613      	mov	r3, r2
 800e09c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800e0a2:	68bb      	ldr	r3, [r7, #8]
 800e0a4:	781b      	ldrb	r3, [r3, #0]
 800e0a6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e0a8:	68bb      	ldr	r3, [r7, #8]
 800e0aa:	785b      	ldrb	r3, [r3, #1]
 800e0ac:	2b01      	cmp	r3, #1
 800e0ae:	f040 8163 	bne.w	800e378 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e0b2:	68bb      	ldr	r3, [r7, #8]
 800e0b4:	695b      	ldr	r3, [r3, #20]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d132      	bne.n	800e120 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e0ba:	69bb      	ldr	r3, [r7, #24]
 800e0bc:	015a      	lsls	r2, r3, #5
 800e0be:	69fb      	ldr	r3, [r7, #28]
 800e0c0:	4413      	add	r3, r2
 800e0c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e0c6:	691a      	ldr	r2, [r3, #16]
 800e0c8:	69bb      	ldr	r3, [r7, #24]
 800e0ca:	0159      	lsls	r1, r3, #5
 800e0cc:	69fb      	ldr	r3, [r7, #28]
 800e0ce:	440b      	add	r3, r1
 800e0d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e0d4:	4619      	mov	r1, r3
 800e0d6:	4ba5      	ldr	r3, [pc, #660]	; (800e36c <USB_EPStartXfer+0x2dc>)
 800e0d8:	4013      	ands	r3, r2
 800e0da:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e0dc:	69bb      	ldr	r3, [r7, #24]
 800e0de:	015a      	lsls	r2, r3, #5
 800e0e0:	69fb      	ldr	r3, [r7, #28]
 800e0e2:	4413      	add	r3, r2
 800e0e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e0e8:	691b      	ldr	r3, [r3, #16]
 800e0ea:	69ba      	ldr	r2, [r7, #24]
 800e0ec:	0151      	lsls	r1, r2, #5
 800e0ee:	69fa      	ldr	r2, [r7, #28]
 800e0f0:	440a      	add	r2, r1
 800e0f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e0f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e0fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e0fc:	69bb      	ldr	r3, [r7, #24]
 800e0fe:	015a      	lsls	r2, r3, #5
 800e100:	69fb      	ldr	r3, [r7, #28]
 800e102:	4413      	add	r3, r2
 800e104:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e108:	691a      	ldr	r2, [r3, #16]
 800e10a:	69bb      	ldr	r3, [r7, #24]
 800e10c:	0159      	lsls	r1, r3, #5
 800e10e:	69fb      	ldr	r3, [r7, #28]
 800e110:	440b      	add	r3, r1
 800e112:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e116:	4619      	mov	r1, r3
 800e118:	4b95      	ldr	r3, [pc, #596]	; (800e370 <USB_EPStartXfer+0x2e0>)
 800e11a:	4013      	ands	r3, r2
 800e11c:	610b      	str	r3, [r1, #16]
 800e11e:	e074      	b.n	800e20a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e120:	69bb      	ldr	r3, [r7, #24]
 800e122:	015a      	lsls	r2, r3, #5
 800e124:	69fb      	ldr	r3, [r7, #28]
 800e126:	4413      	add	r3, r2
 800e128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e12c:	691a      	ldr	r2, [r3, #16]
 800e12e:	69bb      	ldr	r3, [r7, #24]
 800e130:	0159      	lsls	r1, r3, #5
 800e132:	69fb      	ldr	r3, [r7, #28]
 800e134:	440b      	add	r3, r1
 800e136:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e13a:	4619      	mov	r1, r3
 800e13c:	4b8c      	ldr	r3, [pc, #560]	; (800e370 <USB_EPStartXfer+0x2e0>)
 800e13e:	4013      	ands	r3, r2
 800e140:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e142:	69bb      	ldr	r3, [r7, #24]
 800e144:	015a      	lsls	r2, r3, #5
 800e146:	69fb      	ldr	r3, [r7, #28]
 800e148:	4413      	add	r3, r2
 800e14a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e14e:	691a      	ldr	r2, [r3, #16]
 800e150:	69bb      	ldr	r3, [r7, #24]
 800e152:	0159      	lsls	r1, r3, #5
 800e154:	69fb      	ldr	r3, [r7, #28]
 800e156:	440b      	add	r3, r1
 800e158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e15c:	4619      	mov	r1, r3
 800e15e:	4b83      	ldr	r3, [pc, #524]	; (800e36c <USB_EPStartXfer+0x2dc>)
 800e160:	4013      	ands	r3, r2
 800e162:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800e164:	69bb      	ldr	r3, [r7, #24]
 800e166:	015a      	lsls	r2, r3, #5
 800e168:	69fb      	ldr	r3, [r7, #28]
 800e16a:	4413      	add	r3, r2
 800e16c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e170:	691a      	ldr	r2, [r3, #16]
 800e172:	68bb      	ldr	r3, [r7, #8]
 800e174:	6959      	ldr	r1, [r3, #20]
 800e176:	68bb      	ldr	r3, [r7, #8]
 800e178:	689b      	ldr	r3, [r3, #8]
 800e17a:	440b      	add	r3, r1
 800e17c:	1e59      	subs	r1, r3, #1
 800e17e:	68bb      	ldr	r3, [r7, #8]
 800e180:	689b      	ldr	r3, [r3, #8]
 800e182:	fbb1 f3f3 	udiv	r3, r1, r3
 800e186:	04d9      	lsls	r1, r3, #19
 800e188:	4b7a      	ldr	r3, [pc, #488]	; (800e374 <USB_EPStartXfer+0x2e4>)
 800e18a:	400b      	ands	r3, r1
 800e18c:	69b9      	ldr	r1, [r7, #24]
 800e18e:	0148      	lsls	r0, r1, #5
 800e190:	69f9      	ldr	r1, [r7, #28]
 800e192:	4401      	add	r1, r0
 800e194:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e198:	4313      	orrs	r3, r2
 800e19a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e19c:	69bb      	ldr	r3, [r7, #24]
 800e19e:	015a      	lsls	r2, r3, #5
 800e1a0:	69fb      	ldr	r3, [r7, #28]
 800e1a2:	4413      	add	r3, r2
 800e1a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e1a8:	691a      	ldr	r2, [r3, #16]
 800e1aa:	68bb      	ldr	r3, [r7, #8]
 800e1ac:	695b      	ldr	r3, [r3, #20]
 800e1ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e1b2:	69b9      	ldr	r1, [r7, #24]
 800e1b4:	0148      	lsls	r0, r1, #5
 800e1b6:	69f9      	ldr	r1, [r7, #28]
 800e1b8:	4401      	add	r1, r0
 800e1ba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e1be:	4313      	orrs	r3, r2
 800e1c0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800e1c2:	68bb      	ldr	r3, [r7, #8]
 800e1c4:	78db      	ldrb	r3, [r3, #3]
 800e1c6:	2b01      	cmp	r3, #1
 800e1c8:	d11f      	bne.n	800e20a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800e1ca:	69bb      	ldr	r3, [r7, #24]
 800e1cc:	015a      	lsls	r2, r3, #5
 800e1ce:	69fb      	ldr	r3, [r7, #28]
 800e1d0:	4413      	add	r3, r2
 800e1d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e1d6:	691b      	ldr	r3, [r3, #16]
 800e1d8:	69ba      	ldr	r2, [r7, #24]
 800e1da:	0151      	lsls	r1, r2, #5
 800e1dc:	69fa      	ldr	r2, [r7, #28]
 800e1de:	440a      	add	r2, r1
 800e1e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e1e4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800e1e8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800e1ea:	69bb      	ldr	r3, [r7, #24]
 800e1ec:	015a      	lsls	r2, r3, #5
 800e1ee:	69fb      	ldr	r3, [r7, #28]
 800e1f0:	4413      	add	r3, r2
 800e1f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e1f6:	691b      	ldr	r3, [r3, #16]
 800e1f8:	69ba      	ldr	r2, [r7, #24]
 800e1fa:	0151      	lsls	r1, r2, #5
 800e1fc:	69fa      	ldr	r2, [r7, #28]
 800e1fe:	440a      	add	r2, r1
 800e200:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e204:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e208:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800e20a:	79fb      	ldrb	r3, [r7, #7]
 800e20c:	2b01      	cmp	r3, #1
 800e20e:	d14b      	bne.n	800e2a8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e210:	68bb      	ldr	r3, [r7, #8]
 800e212:	691b      	ldr	r3, [r3, #16]
 800e214:	2b00      	cmp	r3, #0
 800e216:	d009      	beq.n	800e22c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e218:	69bb      	ldr	r3, [r7, #24]
 800e21a:	015a      	lsls	r2, r3, #5
 800e21c:	69fb      	ldr	r3, [r7, #28]
 800e21e:	4413      	add	r3, r2
 800e220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e224:	461a      	mov	r2, r3
 800e226:	68bb      	ldr	r3, [r7, #8]
 800e228:	691b      	ldr	r3, [r3, #16]
 800e22a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800e22c:	68bb      	ldr	r3, [r7, #8]
 800e22e:	78db      	ldrb	r3, [r3, #3]
 800e230:	2b01      	cmp	r3, #1
 800e232:	d128      	bne.n	800e286 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e234:	69fb      	ldr	r3, [r7, #28]
 800e236:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e23a:	689b      	ldr	r3, [r3, #8]
 800e23c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e240:	2b00      	cmp	r3, #0
 800e242:	d110      	bne.n	800e266 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e244:	69bb      	ldr	r3, [r7, #24]
 800e246:	015a      	lsls	r2, r3, #5
 800e248:	69fb      	ldr	r3, [r7, #28]
 800e24a:	4413      	add	r3, r2
 800e24c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	69ba      	ldr	r2, [r7, #24]
 800e254:	0151      	lsls	r1, r2, #5
 800e256:	69fa      	ldr	r2, [r7, #28]
 800e258:	440a      	add	r2, r1
 800e25a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e25e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e262:	6013      	str	r3, [r2, #0]
 800e264:	e00f      	b.n	800e286 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e266:	69bb      	ldr	r3, [r7, #24]
 800e268:	015a      	lsls	r2, r3, #5
 800e26a:	69fb      	ldr	r3, [r7, #28]
 800e26c:	4413      	add	r3, r2
 800e26e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	69ba      	ldr	r2, [r7, #24]
 800e276:	0151      	lsls	r1, r2, #5
 800e278:	69fa      	ldr	r2, [r7, #28]
 800e27a:	440a      	add	r2, r1
 800e27c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e284:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e286:	69bb      	ldr	r3, [r7, #24]
 800e288:	015a      	lsls	r2, r3, #5
 800e28a:	69fb      	ldr	r3, [r7, #28]
 800e28c:	4413      	add	r3, r2
 800e28e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	69ba      	ldr	r2, [r7, #24]
 800e296:	0151      	lsls	r1, r2, #5
 800e298:	69fa      	ldr	r2, [r7, #28]
 800e29a:	440a      	add	r2, r1
 800e29c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e2a0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e2a4:	6013      	str	r3, [r2, #0]
 800e2a6:	e133      	b.n	800e510 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e2a8:	69bb      	ldr	r3, [r7, #24]
 800e2aa:	015a      	lsls	r2, r3, #5
 800e2ac:	69fb      	ldr	r3, [r7, #28]
 800e2ae:	4413      	add	r3, r2
 800e2b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	69ba      	ldr	r2, [r7, #24]
 800e2b8:	0151      	lsls	r1, r2, #5
 800e2ba:	69fa      	ldr	r2, [r7, #28]
 800e2bc:	440a      	add	r2, r1
 800e2be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e2c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e2c6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e2c8:	68bb      	ldr	r3, [r7, #8]
 800e2ca:	78db      	ldrb	r3, [r3, #3]
 800e2cc:	2b01      	cmp	r3, #1
 800e2ce:	d015      	beq.n	800e2fc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800e2d0:	68bb      	ldr	r3, [r7, #8]
 800e2d2:	695b      	ldr	r3, [r3, #20]
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	f000 811b 	beq.w	800e510 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e2da:	69fb      	ldr	r3, [r7, #28]
 800e2dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e2e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e2e2:	68bb      	ldr	r3, [r7, #8]
 800e2e4:	781b      	ldrb	r3, [r3, #0]
 800e2e6:	f003 030f 	and.w	r3, r3, #15
 800e2ea:	2101      	movs	r1, #1
 800e2ec:	fa01 f303 	lsl.w	r3, r1, r3
 800e2f0:	69f9      	ldr	r1, [r7, #28]
 800e2f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e2f6:	4313      	orrs	r3, r2
 800e2f8:	634b      	str	r3, [r1, #52]	; 0x34
 800e2fa:	e109      	b.n	800e510 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e2fc:	69fb      	ldr	r3, [r7, #28]
 800e2fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e302:	689b      	ldr	r3, [r3, #8]
 800e304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d110      	bne.n	800e32e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e30c:	69bb      	ldr	r3, [r7, #24]
 800e30e:	015a      	lsls	r2, r3, #5
 800e310:	69fb      	ldr	r3, [r7, #28]
 800e312:	4413      	add	r3, r2
 800e314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	69ba      	ldr	r2, [r7, #24]
 800e31c:	0151      	lsls	r1, r2, #5
 800e31e:	69fa      	ldr	r2, [r7, #28]
 800e320:	440a      	add	r2, r1
 800e322:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e326:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e32a:	6013      	str	r3, [r2, #0]
 800e32c:	e00f      	b.n	800e34e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e32e:	69bb      	ldr	r3, [r7, #24]
 800e330:	015a      	lsls	r2, r3, #5
 800e332:	69fb      	ldr	r3, [r7, #28]
 800e334:	4413      	add	r3, r2
 800e336:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	69ba      	ldr	r2, [r7, #24]
 800e33e:	0151      	lsls	r1, r2, #5
 800e340:	69fa      	ldr	r2, [r7, #28]
 800e342:	440a      	add	r2, r1
 800e344:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e348:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e34c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800e34e:	68bb      	ldr	r3, [r7, #8]
 800e350:	68d9      	ldr	r1, [r3, #12]
 800e352:	68bb      	ldr	r3, [r7, #8]
 800e354:	781a      	ldrb	r2, [r3, #0]
 800e356:	68bb      	ldr	r3, [r7, #8]
 800e358:	695b      	ldr	r3, [r3, #20]
 800e35a:	b298      	uxth	r0, r3
 800e35c:	79fb      	ldrb	r3, [r7, #7]
 800e35e:	9300      	str	r3, [sp, #0]
 800e360:	4603      	mov	r3, r0
 800e362:	68f8      	ldr	r0, [r7, #12]
 800e364:	f000 fa38 	bl	800e7d8 <USB_WritePacket>
 800e368:	e0d2      	b.n	800e510 <USB_EPStartXfer+0x480>
 800e36a:	bf00      	nop
 800e36c:	e007ffff 	.word	0xe007ffff
 800e370:	fff80000 	.word	0xfff80000
 800e374:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e378:	69bb      	ldr	r3, [r7, #24]
 800e37a:	015a      	lsls	r2, r3, #5
 800e37c:	69fb      	ldr	r3, [r7, #28]
 800e37e:	4413      	add	r3, r2
 800e380:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e384:	691a      	ldr	r2, [r3, #16]
 800e386:	69bb      	ldr	r3, [r7, #24]
 800e388:	0159      	lsls	r1, r3, #5
 800e38a:	69fb      	ldr	r3, [r7, #28]
 800e38c:	440b      	add	r3, r1
 800e38e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e392:	4619      	mov	r1, r3
 800e394:	4b61      	ldr	r3, [pc, #388]	; (800e51c <USB_EPStartXfer+0x48c>)
 800e396:	4013      	ands	r3, r2
 800e398:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e39a:	69bb      	ldr	r3, [r7, #24]
 800e39c:	015a      	lsls	r2, r3, #5
 800e39e:	69fb      	ldr	r3, [r7, #28]
 800e3a0:	4413      	add	r3, r2
 800e3a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e3a6:	691a      	ldr	r2, [r3, #16]
 800e3a8:	69bb      	ldr	r3, [r7, #24]
 800e3aa:	0159      	lsls	r1, r3, #5
 800e3ac:	69fb      	ldr	r3, [r7, #28]
 800e3ae:	440b      	add	r3, r1
 800e3b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e3b4:	4619      	mov	r1, r3
 800e3b6:	4b5a      	ldr	r3, [pc, #360]	; (800e520 <USB_EPStartXfer+0x490>)
 800e3b8:	4013      	ands	r3, r2
 800e3ba:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800e3bc:	68bb      	ldr	r3, [r7, #8]
 800e3be:	695b      	ldr	r3, [r3, #20]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d123      	bne.n	800e40c <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800e3c4:	69bb      	ldr	r3, [r7, #24]
 800e3c6:	015a      	lsls	r2, r3, #5
 800e3c8:	69fb      	ldr	r3, [r7, #28]
 800e3ca:	4413      	add	r3, r2
 800e3cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e3d0:	691a      	ldr	r2, [r3, #16]
 800e3d2:	68bb      	ldr	r3, [r7, #8]
 800e3d4:	689b      	ldr	r3, [r3, #8]
 800e3d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e3da:	69b9      	ldr	r1, [r7, #24]
 800e3dc:	0148      	lsls	r0, r1, #5
 800e3de:	69f9      	ldr	r1, [r7, #28]
 800e3e0:	4401      	add	r1, r0
 800e3e2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e3e6:	4313      	orrs	r3, r2
 800e3e8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e3ea:	69bb      	ldr	r3, [r7, #24]
 800e3ec:	015a      	lsls	r2, r3, #5
 800e3ee:	69fb      	ldr	r3, [r7, #28]
 800e3f0:	4413      	add	r3, r2
 800e3f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e3f6:	691b      	ldr	r3, [r3, #16]
 800e3f8:	69ba      	ldr	r2, [r7, #24]
 800e3fa:	0151      	lsls	r1, r2, #5
 800e3fc:	69fa      	ldr	r2, [r7, #28]
 800e3fe:	440a      	add	r2, r1
 800e400:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e404:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e408:	6113      	str	r3, [r2, #16]
 800e40a:	e033      	b.n	800e474 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800e40c:	68bb      	ldr	r3, [r7, #8]
 800e40e:	695a      	ldr	r2, [r3, #20]
 800e410:	68bb      	ldr	r3, [r7, #8]
 800e412:	689b      	ldr	r3, [r3, #8]
 800e414:	4413      	add	r3, r2
 800e416:	1e5a      	subs	r2, r3, #1
 800e418:	68bb      	ldr	r3, [r7, #8]
 800e41a:	689b      	ldr	r3, [r3, #8]
 800e41c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e420:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800e422:	69bb      	ldr	r3, [r7, #24]
 800e424:	015a      	lsls	r2, r3, #5
 800e426:	69fb      	ldr	r3, [r7, #28]
 800e428:	4413      	add	r3, r2
 800e42a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e42e:	691a      	ldr	r2, [r3, #16]
 800e430:	8afb      	ldrh	r3, [r7, #22]
 800e432:	04d9      	lsls	r1, r3, #19
 800e434:	4b3b      	ldr	r3, [pc, #236]	; (800e524 <USB_EPStartXfer+0x494>)
 800e436:	400b      	ands	r3, r1
 800e438:	69b9      	ldr	r1, [r7, #24]
 800e43a:	0148      	lsls	r0, r1, #5
 800e43c:	69f9      	ldr	r1, [r7, #28]
 800e43e:	4401      	add	r1, r0
 800e440:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e444:	4313      	orrs	r3, r2
 800e446:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800e448:	69bb      	ldr	r3, [r7, #24]
 800e44a:	015a      	lsls	r2, r3, #5
 800e44c:	69fb      	ldr	r3, [r7, #28]
 800e44e:	4413      	add	r3, r2
 800e450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e454:	691a      	ldr	r2, [r3, #16]
 800e456:	68bb      	ldr	r3, [r7, #8]
 800e458:	689b      	ldr	r3, [r3, #8]
 800e45a:	8af9      	ldrh	r1, [r7, #22]
 800e45c:	fb01 f303 	mul.w	r3, r1, r3
 800e460:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e464:	69b9      	ldr	r1, [r7, #24]
 800e466:	0148      	lsls	r0, r1, #5
 800e468:	69f9      	ldr	r1, [r7, #28]
 800e46a:	4401      	add	r1, r0
 800e46c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e470:	4313      	orrs	r3, r2
 800e472:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800e474:	79fb      	ldrb	r3, [r7, #7]
 800e476:	2b01      	cmp	r3, #1
 800e478:	d10d      	bne.n	800e496 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800e47a:	68bb      	ldr	r3, [r7, #8]
 800e47c:	68db      	ldr	r3, [r3, #12]
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d009      	beq.n	800e496 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e482:	68bb      	ldr	r3, [r7, #8]
 800e484:	68d9      	ldr	r1, [r3, #12]
 800e486:	69bb      	ldr	r3, [r7, #24]
 800e488:	015a      	lsls	r2, r3, #5
 800e48a:	69fb      	ldr	r3, [r7, #28]
 800e48c:	4413      	add	r3, r2
 800e48e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e492:	460a      	mov	r2, r1
 800e494:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800e496:	68bb      	ldr	r3, [r7, #8]
 800e498:	78db      	ldrb	r3, [r3, #3]
 800e49a:	2b01      	cmp	r3, #1
 800e49c:	d128      	bne.n	800e4f0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e49e:	69fb      	ldr	r3, [r7, #28]
 800e4a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e4a4:	689b      	ldr	r3, [r3, #8]
 800e4a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d110      	bne.n	800e4d0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800e4ae:	69bb      	ldr	r3, [r7, #24]
 800e4b0:	015a      	lsls	r2, r3, #5
 800e4b2:	69fb      	ldr	r3, [r7, #28]
 800e4b4:	4413      	add	r3, r2
 800e4b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	69ba      	ldr	r2, [r7, #24]
 800e4be:	0151      	lsls	r1, r2, #5
 800e4c0:	69fa      	ldr	r2, [r7, #28]
 800e4c2:	440a      	add	r2, r1
 800e4c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e4c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e4cc:	6013      	str	r3, [r2, #0]
 800e4ce:	e00f      	b.n	800e4f0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800e4d0:	69bb      	ldr	r3, [r7, #24]
 800e4d2:	015a      	lsls	r2, r3, #5
 800e4d4:	69fb      	ldr	r3, [r7, #28]
 800e4d6:	4413      	add	r3, r2
 800e4d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	69ba      	ldr	r2, [r7, #24]
 800e4e0:	0151      	lsls	r1, r2, #5
 800e4e2:	69fa      	ldr	r2, [r7, #28]
 800e4e4:	440a      	add	r2, r1
 800e4e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e4ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e4ee:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e4f0:	69bb      	ldr	r3, [r7, #24]
 800e4f2:	015a      	lsls	r2, r3, #5
 800e4f4:	69fb      	ldr	r3, [r7, #28]
 800e4f6:	4413      	add	r3, r2
 800e4f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	69ba      	ldr	r2, [r7, #24]
 800e500:	0151      	lsls	r1, r2, #5
 800e502:	69fa      	ldr	r2, [r7, #28]
 800e504:	440a      	add	r2, r1
 800e506:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e50a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e50e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e510:	2300      	movs	r3, #0
}
 800e512:	4618      	mov	r0, r3
 800e514:	3720      	adds	r7, #32
 800e516:	46bd      	mov	sp, r7
 800e518:	bd80      	pop	{r7, pc}
 800e51a:	bf00      	nop
 800e51c:	fff80000 	.word	0xfff80000
 800e520:	e007ffff 	.word	0xe007ffff
 800e524:	1ff80000 	.word	0x1ff80000

0800e528 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800e528:	b480      	push	{r7}
 800e52a:	b087      	sub	sp, #28
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	60f8      	str	r0, [r7, #12]
 800e530:	60b9      	str	r1, [r7, #8]
 800e532:	4613      	mov	r3, r2
 800e534:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800e53a:	68bb      	ldr	r3, [r7, #8]
 800e53c:	781b      	ldrb	r3, [r3, #0]
 800e53e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e540:	68bb      	ldr	r3, [r7, #8]
 800e542:	785b      	ldrb	r3, [r3, #1]
 800e544:	2b01      	cmp	r3, #1
 800e546:	f040 80cd 	bne.w	800e6e4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e54a:	68bb      	ldr	r3, [r7, #8]
 800e54c:	695b      	ldr	r3, [r3, #20]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d132      	bne.n	800e5b8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e552:	693b      	ldr	r3, [r7, #16]
 800e554:	015a      	lsls	r2, r3, #5
 800e556:	697b      	ldr	r3, [r7, #20]
 800e558:	4413      	add	r3, r2
 800e55a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e55e:	691a      	ldr	r2, [r3, #16]
 800e560:	693b      	ldr	r3, [r7, #16]
 800e562:	0159      	lsls	r1, r3, #5
 800e564:	697b      	ldr	r3, [r7, #20]
 800e566:	440b      	add	r3, r1
 800e568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e56c:	4619      	mov	r1, r3
 800e56e:	4b98      	ldr	r3, [pc, #608]	; (800e7d0 <USB_EP0StartXfer+0x2a8>)
 800e570:	4013      	ands	r3, r2
 800e572:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e574:	693b      	ldr	r3, [r7, #16]
 800e576:	015a      	lsls	r2, r3, #5
 800e578:	697b      	ldr	r3, [r7, #20]
 800e57a:	4413      	add	r3, r2
 800e57c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e580:	691b      	ldr	r3, [r3, #16]
 800e582:	693a      	ldr	r2, [r7, #16]
 800e584:	0151      	lsls	r1, r2, #5
 800e586:	697a      	ldr	r2, [r7, #20]
 800e588:	440a      	add	r2, r1
 800e58a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e58e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e592:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e594:	693b      	ldr	r3, [r7, #16]
 800e596:	015a      	lsls	r2, r3, #5
 800e598:	697b      	ldr	r3, [r7, #20]
 800e59a:	4413      	add	r3, r2
 800e59c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5a0:	691a      	ldr	r2, [r3, #16]
 800e5a2:	693b      	ldr	r3, [r7, #16]
 800e5a4:	0159      	lsls	r1, r3, #5
 800e5a6:	697b      	ldr	r3, [r7, #20]
 800e5a8:	440b      	add	r3, r1
 800e5aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5ae:	4619      	mov	r1, r3
 800e5b0:	4b88      	ldr	r3, [pc, #544]	; (800e7d4 <USB_EP0StartXfer+0x2ac>)
 800e5b2:	4013      	ands	r3, r2
 800e5b4:	610b      	str	r3, [r1, #16]
 800e5b6:	e04e      	b.n	800e656 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e5b8:	693b      	ldr	r3, [r7, #16]
 800e5ba:	015a      	lsls	r2, r3, #5
 800e5bc:	697b      	ldr	r3, [r7, #20]
 800e5be:	4413      	add	r3, r2
 800e5c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5c4:	691a      	ldr	r2, [r3, #16]
 800e5c6:	693b      	ldr	r3, [r7, #16]
 800e5c8:	0159      	lsls	r1, r3, #5
 800e5ca:	697b      	ldr	r3, [r7, #20]
 800e5cc:	440b      	add	r3, r1
 800e5ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5d2:	4619      	mov	r1, r3
 800e5d4:	4b7f      	ldr	r3, [pc, #508]	; (800e7d4 <USB_EP0StartXfer+0x2ac>)
 800e5d6:	4013      	ands	r3, r2
 800e5d8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e5da:	693b      	ldr	r3, [r7, #16]
 800e5dc:	015a      	lsls	r2, r3, #5
 800e5de:	697b      	ldr	r3, [r7, #20]
 800e5e0:	4413      	add	r3, r2
 800e5e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5e6:	691a      	ldr	r2, [r3, #16]
 800e5e8:	693b      	ldr	r3, [r7, #16]
 800e5ea:	0159      	lsls	r1, r3, #5
 800e5ec:	697b      	ldr	r3, [r7, #20]
 800e5ee:	440b      	add	r3, r1
 800e5f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5f4:	4619      	mov	r1, r3
 800e5f6:	4b76      	ldr	r3, [pc, #472]	; (800e7d0 <USB_EP0StartXfer+0x2a8>)
 800e5f8:	4013      	ands	r3, r2
 800e5fa:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800e5fc:	68bb      	ldr	r3, [r7, #8]
 800e5fe:	695a      	ldr	r2, [r3, #20]
 800e600:	68bb      	ldr	r3, [r7, #8]
 800e602:	689b      	ldr	r3, [r3, #8]
 800e604:	429a      	cmp	r2, r3
 800e606:	d903      	bls.n	800e610 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800e608:	68bb      	ldr	r3, [r7, #8]
 800e60a:	689a      	ldr	r2, [r3, #8]
 800e60c:	68bb      	ldr	r3, [r7, #8]
 800e60e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e610:	693b      	ldr	r3, [r7, #16]
 800e612:	015a      	lsls	r2, r3, #5
 800e614:	697b      	ldr	r3, [r7, #20]
 800e616:	4413      	add	r3, r2
 800e618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e61c:	691b      	ldr	r3, [r3, #16]
 800e61e:	693a      	ldr	r2, [r7, #16]
 800e620:	0151      	lsls	r1, r2, #5
 800e622:	697a      	ldr	r2, [r7, #20]
 800e624:	440a      	add	r2, r1
 800e626:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e62a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e62e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e630:	693b      	ldr	r3, [r7, #16]
 800e632:	015a      	lsls	r2, r3, #5
 800e634:	697b      	ldr	r3, [r7, #20]
 800e636:	4413      	add	r3, r2
 800e638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e63c:	691a      	ldr	r2, [r3, #16]
 800e63e:	68bb      	ldr	r3, [r7, #8]
 800e640:	695b      	ldr	r3, [r3, #20]
 800e642:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e646:	6939      	ldr	r1, [r7, #16]
 800e648:	0148      	lsls	r0, r1, #5
 800e64a:	6979      	ldr	r1, [r7, #20]
 800e64c:	4401      	add	r1, r0
 800e64e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e652:	4313      	orrs	r3, r2
 800e654:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800e656:	79fb      	ldrb	r3, [r7, #7]
 800e658:	2b01      	cmp	r3, #1
 800e65a:	d11e      	bne.n	800e69a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e65c:	68bb      	ldr	r3, [r7, #8]
 800e65e:	691b      	ldr	r3, [r3, #16]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d009      	beq.n	800e678 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e664:	693b      	ldr	r3, [r7, #16]
 800e666:	015a      	lsls	r2, r3, #5
 800e668:	697b      	ldr	r3, [r7, #20]
 800e66a:	4413      	add	r3, r2
 800e66c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e670:	461a      	mov	r2, r3
 800e672:	68bb      	ldr	r3, [r7, #8]
 800e674:	691b      	ldr	r3, [r3, #16]
 800e676:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e678:	693b      	ldr	r3, [r7, #16]
 800e67a:	015a      	lsls	r2, r3, #5
 800e67c:	697b      	ldr	r3, [r7, #20]
 800e67e:	4413      	add	r3, r2
 800e680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	693a      	ldr	r2, [r7, #16]
 800e688:	0151      	lsls	r1, r2, #5
 800e68a:	697a      	ldr	r2, [r7, #20]
 800e68c:	440a      	add	r2, r1
 800e68e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e692:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e696:	6013      	str	r3, [r2, #0]
 800e698:	e092      	b.n	800e7c0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e69a:	693b      	ldr	r3, [r7, #16]
 800e69c:	015a      	lsls	r2, r3, #5
 800e69e:	697b      	ldr	r3, [r7, #20]
 800e6a0:	4413      	add	r3, r2
 800e6a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	693a      	ldr	r2, [r7, #16]
 800e6aa:	0151      	lsls	r1, r2, #5
 800e6ac:	697a      	ldr	r2, [r7, #20]
 800e6ae:	440a      	add	r2, r1
 800e6b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e6b4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e6b8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800e6ba:	68bb      	ldr	r3, [r7, #8]
 800e6bc:	695b      	ldr	r3, [r3, #20]
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d07e      	beq.n	800e7c0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e6c2:	697b      	ldr	r3, [r7, #20]
 800e6c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e6c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e6ca:	68bb      	ldr	r3, [r7, #8]
 800e6cc:	781b      	ldrb	r3, [r3, #0]
 800e6ce:	f003 030f 	and.w	r3, r3, #15
 800e6d2:	2101      	movs	r1, #1
 800e6d4:	fa01 f303 	lsl.w	r3, r1, r3
 800e6d8:	6979      	ldr	r1, [r7, #20]
 800e6da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e6de:	4313      	orrs	r3, r2
 800e6e0:	634b      	str	r3, [r1, #52]	; 0x34
 800e6e2:	e06d      	b.n	800e7c0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e6e4:	693b      	ldr	r3, [r7, #16]
 800e6e6:	015a      	lsls	r2, r3, #5
 800e6e8:	697b      	ldr	r3, [r7, #20]
 800e6ea:	4413      	add	r3, r2
 800e6ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e6f0:	691a      	ldr	r2, [r3, #16]
 800e6f2:	693b      	ldr	r3, [r7, #16]
 800e6f4:	0159      	lsls	r1, r3, #5
 800e6f6:	697b      	ldr	r3, [r7, #20]
 800e6f8:	440b      	add	r3, r1
 800e6fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e6fe:	4619      	mov	r1, r3
 800e700:	4b34      	ldr	r3, [pc, #208]	; (800e7d4 <USB_EP0StartXfer+0x2ac>)
 800e702:	4013      	ands	r3, r2
 800e704:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e706:	693b      	ldr	r3, [r7, #16]
 800e708:	015a      	lsls	r2, r3, #5
 800e70a:	697b      	ldr	r3, [r7, #20]
 800e70c:	4413      	add	r3, r2
 800e70e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e712:	691a      	ldr	r2, [r3, #16]
 800e714:	693b      	ldr	r3, [r7, #16]
 800e716:	0159      	lsls	r1, r3, #5
 800e718:	697b      	ldr	r3, [r7, #20]
 800e71a:	440b      	add	r3, r1
 800e71c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e720:	4619      	mov	r1, r3
 800e722:	4b2b      	ldr	r3, [pc, #172]	; (800e7d0 <USB_EP0StartXfer+0x2a8>)
 800e724:	4013      	ands	r3, r2
 800e726:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800e728:	68bb      	ldr	r3, [r7, #8]
 800e72a:	695b      	ldr	r3, [r3, #20]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d003      	beq.n	800e738 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800e730:	68bb      	ldr	r3, [r7, #8]
 800e732:	689a      	ldr	r2, [r3, #8]
 800e734:	68bb      	ldr	r3, [r7, #8]
 800e736:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e738:	693b      	ldr	r3, [r7, #16]
 800e73a:	015a      	lsls	r2, r3, #5
 800e73c:	697b      	ldr	r3, [r7, #20]
 800e73e:	4413      	add	r3, r2
 800e740:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e744:	691b      	ldr	r3, [r3, #16]
 800e746:	693a      	ldr	r2, [r7, #16]
 800e748:	0151      	lsls	r1, r2, #5
 800e74a:	697a      	ldr	r2, [r7, #20]
 800e74c:	440a      	add	r2, r1
 800e74e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e752:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e756:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800e758:	693b      	ldr	r3, [r7, #16]
 800e75a:	015a      	lsls	r2, r3, #5
 800e75c:	697b      	ldr	r3, [r7, #20]
 800e75e:	4413      	add	r3, r2
 800e760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e764:	691a      	ldr	r2, [r3, #16]
 800e766:	68bb      	ldr	r3, [r7, #8]
 800e768:	689b      	ldr	r3, [r3, #8]
 800e76a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e76e:	6939      	ldr	r1, [r7, #16]
 800e770:	0148      	lsls	r0, r1, #5
 800e772:	6979      	ldr	r1, [r7, #20]
 800e774:	4401      	add	r1, r0
 800e776:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e77a:	4313      	orrs	r3, r2
 800e77c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800e77e:	79fb      	ldrb	r3, [r7, #7]
 800e780:	2b01      	cmp	r3, #1
 800e782:	d10d      	bne.n	800e7a0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800e784:	68bb      	ldr	r3, [r7, #8]
 800e786:	68db      	ldr	r3, [r3, #12]
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d009      	beq.n	800e7a0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e78c:	68bb      	ldr	r3, [r7, #8]
 800e78e:	68d9      	ldr	r1, [r3, #12]
 800e790:	693b      	ldr	r3, [r7, #16]
 800e792:	015a      	lsls	r2, r3, #5
 800e794:	697b      	ldr	r3, [r7, #20]
 800e796:	4413      	add	r3, r2
 800e798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e79c:	460a      	mov	r2, r1
 800e79e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e7a0:	693b      	ldr	r3, [r7, #16]
 800e7a2:	015a      	lsls	r2, r3, #5
 800e7a4:	697b      	ldr	r3, [r7, #20]
 800e7a6:	4413      	add	r3, r2
 800e7a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	693a      	ldr	r2, [r7, #16]
 800e7b0:	0151      	lsls	r1, r2, #5
 800e7b2:	697a      	ldr	r2, [r7, #20]
 800e7b4:	440a      	add	r2, r1
 800e7b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e7ba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e7be:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e7c0:	2300      	movs	r3, #0
}
 800e7c2:	4618      	mov	r0, r3
 800e7c4:	371c      	adds	r7, #28
 800e7c6:	46bd      	mov	sp, r7
 800e7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7cc:	4770      	bx	lr
 800e7ce:	bf00      	nop
 800e7d0:	e007ffff 	.word	0xe007ffff
 800e7d4:	fff80000 	.word	0xfff80000

0800e7d8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800e7d8:	b480      	push	{r7}
 800e7da:	b089      	sub	sp, #36	; 0x24
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	60f8      	str	r0, [r7, #12]
 800e7e0:	60b9      	str	r1, [r7, #8]
 800e7e2:	4611      	mov	r1, r2
 800e7e4:	461a      	mov	r2, r3
 800e7e6:	460b      	mov	r3, r1
 800e7e8:	71fb      	strb	r3, [r7, #7]
 800e7ea:	4613      	mov	r3, r2
 800e7ec:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800e7f2:	68bb      	ldr	r3, [r7, #8]
 800e7f4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800e7f6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d123      	bne.n	800e846 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800e7fe:	88bb      	ldrh	r3, [r7, #4]
 800e800:	3303      	adds	r3, #3
 800e802:	089b      	lsrs	r3, r3, #2
 800e804:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800e806:	2300      	movs	r3, #0
 800e808:	61bb      	str	r3, [r7, #24]
 800e80a:	e018      	b.n	800e83e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800e80c:	79fb      	ldrb	r3, [r7, #7]
 800e80e:	031a      	lsls	r2, r3, #12
 800e810:	697b      	ldr	r3, [r7, #20]
 800e812:	4413      	add	r3, r2
 800e814:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e818:	461a      	mov	r2, r3
 800e81a:	69fb      	ldr	r3, [r7, #28]
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800e820:	69fb      	ldr	r3, [r7, #28]
 800e822:	3301      	adds	r3, #1
 800e824:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e826:	69fb      	ldr	r3, [r7, #28]
 800e828:	3301      	adds	r3, #1
 800e82a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e82c:	69fb      	ldr	r3, [r7, #28]
 800e82e:	3301      	adds	r3, #1
 800e830:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e832:	69fb      	ldr	r3, [r7, #28]
 800e834:	3301      	adds	r3, #1
 800e836:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800e838:	69bb      	ldr	r3, [r7, #24]
 800e83a:	3301      	adds	r3, #1
 800e83c:	61bb      	str	r3, [r7, #24]
 800e83e:	69ba      	ldr	r2, [r7, #24]
 800e840:	693b      	ldr	r3, [r7, #16]
 800e842:	429a      	cmp	r2, r3
 800e844:	d3e2      	bcc.n	800e80c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800e846:	2300      	movs	r3, #0
}
 800e848:	4618      	mov	r0, r3
 800e84a:	3724      	adds	r7, #36	; 0x24
 800e84c:	46bd      	mov	sp, r7
 800e84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e852:	4770      	bx	lr

0800e854 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800e854:	b480      	push	{r7}
 800e856:	b08b      	sub	sp, #44	; 0x2c
 800e858:	af00      	add	r7, sp, #0
 800e85a:	60f8      	str	r0, [r7, #12]
 800e85c:	60b9      	str	r1, [r7, #8]
 800e85e:	4613      	mov	r3, r2
 800e860:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800e866:	68bb      	ldr	r3, [r7, #8]
 800e868:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800e86a:	88fb      	ldrh	r3, [r7, #6]
 800e86c:	089b      	lsrs	r3, r3, #2
 800e86e:	b29b      	uxth	r3, r3
 800e870:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800e872:	88fb      	ldrh	r3, [r7, #6]
 800e874:	f003 0303 	and.w	r3, r3, #3
 800e878:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800e87a:	2300      	movs	r3, #0
 800e87c:	623b      	str	r3, [r7, #32]
 800e87e:	e014      	b.n	800e8aa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800e880:	69bb      	ldr	r3, [r7, #24]
 800e882:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e886:	681a      	ldr	r2, [r3, #0]
 800e888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e88a:	601a      	str	r2, [r3, #0]
    pDest++;
 800e88c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e88e:	3301      	adds	r3, #1
 800e890:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e894:	3301      	adds	r3, #1
 800e896:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e89a:	3301      	adds	r3, #1
 800e89c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e89e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8a0:	3301      	adds	r3, #1
 800e8a2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800e8a4:	6a3b      	ldr	r3, [r7, #32]
 800e8a6:	3301      	adds	r3, #1
 800e8a8:	623b      	str	r3, [r7, #32]
 800e8aa:	6a3a      	ldr	r2, [r7, #32]
 800e8ac:	697b      	ldr	r3, [r7, #20]
 800e8ae:	429a      	cmp	r2, r3
 800e8b0:	d3e6      	bcc.n	800e880 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800e8b2:	8bfb      	ldrh	r3, [r7, #30]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d01e      	beq.n	800e8f6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800e8b8:	2300      	movs	r3, #0
 800e8ba:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800e8bc:	69bb      	ldr	r3, [r7, #24]
 800e8be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e8c2:	461a      	mov	r2, r3
 800e8c4:	f107 0310 	add.w	r3, r7, #16
 800e8c8:	6812      	ldr	r2, [r2, #0]
 800e8ca:	601a      	str	r2, [r3, #0]
	
    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800e8cc:	693a      	ldr	r2, [r7, #16]
 800e8ce:	6a3b      	ldr	r3, [r7, #32]
 800e8d0:	b2db      	uxtb	r3, r3
 800e8d2:	00db      	lsls	r3, r3, #3
 800e8d4:	fa22 f303 	lsr.w	r3, r2, r3
 800e8d8:	b2da      	uxtb	r2, r3
 800e8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8dc:	701a      	strb	r2, [r3, #0]
      i++;
 800e8de:	6a3b      	ldr	r3, [r7, #32]
 800e8e0:	3301      	adds	r3, #1
 800e8e2:	623b      	str	r3, [r7, #32]
      pDest++;
 800e8e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8e6:	3301      	adds	r3, #1
 800e8e8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800e8ea:	8bfb      	ldrh	r3, [r7, #30]
 800e8ec:	3b01      	subs	r3, #1
 800e8ee:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800e8f0:	8bfb      	ldrh	r3, [r7, #30]
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d1ea      	bne.n	800e8cc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800e8f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e8f8:	4618      	mov	r0, r3
 800e8fa:	372c      	adds	r7, #44	; 0x2c
 800e8fc:	46bd      	mov	sp, r7
 800e8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e902:	4770      	bx	lr

0800e904 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e904:	b480      	push	{r7}
 800e906:	b085      	sub	sp, #20
 800e908:	af00      	add	r7, sp, #0
 800e90a:	6078      	str	r0, [r7, #4]
 800e90c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e912:	683b      	ldr	r3, [r7, #0]
 800e914:	781b      	ldrb	r3, [r3, #0]
 800e916:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e918:	683b      	ldr	r3, [r7, #0]
 800e91a:	785b      	ldrb	r3, [r3, #1]
 800e91c:	2b01      	cmp	r3, #1
 800e91e:	d12c      	bne.n	800e97a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e920:	68bb      	ldr	r3, [r7, #8]
 800e922:	015a      	lsls	r2, r3, #5
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	4413      	add	r3, r2
 800e928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	db12      	blt.n	800e958 <USB_EPSetStall+0x54>
 800e932:	68bb      	ldr	r3, [r7, #8]
 800e934:	2b00      	cmp	r3, #0
 800e936:	d00f      	beq.n	800e958 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800e938:	68bb      	ldr	r3, [r7, #8]
 800e93a:	015a      	lsls	r2, r3, #5
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	4413      	add	r3, r2
 800e940:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	68ba      	ldr	r2, [r7, #8]
 800e948:	0151      	lsls	r1, r2, #5
 800e94a:	68fa      	ldr	r2, [r7, #12]
 800e94c:	440a      	add	r2, r1
 800e94e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e952:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e956:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800e958:	68bb      	ldr	r3, [r7, #8]
 800e95a:	015a      	lsls	r2, r3, #5
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	4413      	add	r3, r2
 800e960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	68ba      	ldr	r2, [r7, #8]
 800e968:	0151      	lsls	r1, r2, #5
 800e96a:	68fa      	ldr	r2, [r7, #12]
 800e96c:	440a      	add	r2, r1
 800e96e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e972:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e976:	6013      	str	r3, [r2, #0]
 800e978:	e02b      	b.n	800e9d2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e97a:	68bb      	ldr	r3, [r7, #8]
 800e97c:	015a      	lsls	r2, r3, #5
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	4413      	add	r3, r2
 800e982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	db12      	blt.n	800e9b2 <USB_EPSetStall+0xae>
 800e98c:	68bb      	ldr	r3, [r7, #8]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d00f      	beq.n	800e9b2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800e992:	68bb      	ldr	r3, [r7, #8]
 800e994:	015a      	lsls	r2, r3, #5
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	4413      	add	r3, r2
 800e99a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	68ba      	ldr	r2, [r7, #8]
 800e9a2:	0151      	lsls	r1, r2, #5
 800e9a4:	68fa      	ldr	r2, [r7, #12]
 800e9a6:	440a      	add	r2, r1
 800e9a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e9ac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e9b0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800e9b2:	68bb      	ldr	r3, [r7, #8]
 800e9b4:	015a      	lsls	r2, r3, #5
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	4413      	add	r3, r2
 800e9ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	68ba      	ldr	r2, [r7, #8]
 800e9c2:	0151      	lsls	r1, r2, #5
 800e9c4:	68fa      	ldr	r2, [r7, #12]
 800e9c6:	440a      	add	r2, r1
 800e9c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e9cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e9d0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e9d2:	2300      	movs	r3, #0
}
 800e9d4:	4618      	mov	r0, r3
 800e9d6:	3714      	adds	r7, #20
 800e9d8:	46bd      	mov	sp, r7
 800e9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9de:	4770      	bx	lr

0800e9e0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e9e0:	b480      	push	{r7}
 800e9e2:	b085      	sub	sp, #20
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	6078      	str	r0, [r7, #4]
 800e9e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e9ee:	683b      	ldr	r3, [r7, #0]
 800e9f0:	781b      	ldrb	r3, [r3, #0]
 800e9f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e9f4:	683b      	ldr	r3, [r7, #0]
 800e9f6:	785b      	ldrb	r3, [r3, #1]
 800e9f8:	2b01      	cmp	r3, #1
 800e9fa:	d128      	bne.n	800ea4e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e9fc:	68bb      	ldr	r3, [r7, #8]
 800e9fe:	015a      	lsls	r2, r3, #5
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	4413      	add	r3, r2
 800ea04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	68ba      	ldr	r2, [r7, #8]
 800ea0c:	0151      	lsls	r1, r2, #5
 800ea0e:	68fa      	ldr	r2, [r7, #12]
 800ea10:	440a      	add	r2, r1
 800ea12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ea16:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ea1a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ea1c:	683b      	ldr	r3, [r7, #0]
 800ea1e:	78db      	ldrb	r3, [r3, #3]
 800ea20:	2b03      	cmp	r3, #3
 800ea22:	d003      	beq.n	800ea2c <USB_EPClearStall+0x4c>
 800ea24:	683b      	ldr	r3, [r7, #0]
 800ea26:	78db      	ldrb	r3, [r3, #3]
 800ea28:	2b02      	cmp	r3, #2
 800ea2a:	d138      	bne.n	800ea9e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ea2c:	68bb      	ldr	r3, [r7, #8]
 800ea2e:	015a      	lsls	r2, r3, #5
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	4413      	add	r3, r2
 800ea34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	68ba      	ldr	r2, [r7, #8]
 800ea3c:	0151      	lsls	r1, r2, #5
 800ea3e:	68fa      	ldr	r2, [r7, #12]
 800ea40:	440a      	add	r2, r1
 800ea42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ea46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ea4a:	6013      	str	r3, [r2, #0]
 800ea4c:	e027      	b.n	800ea9e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ea4e:	68bb      	ldr	r3, [r7, #8]
 800ea50:	015a      	lsls	r2, r3, #5
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	4413      	add	r3, r2
 800ea56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	68ba      	ldr	r2, [r7, #8]
 800ea5e:	0151      	lsls	r1, r2, #5
 800ea60:	68fa      	ldr	r2, [r7, #12]
 800ea62:	440a      	add	r2, r1
 800ea64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ea68:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ea6c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ea6e:	683b      	ldr	r3, [r7, #0]
 800ea70:	78db      	ldrb	r3, [r3, #3]
 800ea72:	2b03      	cmp	r3, #3
 800ea74:	d003      	beq.n	800ea7e <USB_EPClearStall+0x9e>
 800ea76:	683b      	ldr	r3, [r7, #0]
 800ea78:	78db      	ldrb	r3, [r3, #3]
 800ea7a:	2b02      	cmp	r3, #2
 800ea7c:	d10f      	bne.n	800ea9e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ea7e:	68bb      	ldr	r3, [r7, #8]
 800ea80:	015a      	lsls	r2, r3, #5
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	4413      	add	r3, r2
 800ea86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	68ba      	ldr	r2, [r7, #8]
 800ea8e:	0151      	lsls	r1, r2, #5
 800ea90:	68fa      	ldr	r2, [r7, #12]
 800ea92:	440a      	add	r2, r1
 800ea94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ea98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ea9c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800ea9e:	2300      	movs	r3, #0
}
 800eaa0:	4618      	mov	r0, r3
 800eaa2:	3714      	adds	r7, #20
 800eaa4:	46bd      	mov	sp, r7
 800eaa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaaa:	4770      	bx	lr

0800eaac <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800eaac:	b480      	push	{r7}
 800eaae:	b085      	sub	sp, #20
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	6078      	str	r0, [r7, #4]
 800eab4:	460b      	mov	r3, r1
 800eab6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	68fa      	ldr	r2, [r7, #12]
 800eac6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800eaca:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800eace:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ead6:	681a      	ldr	r2, [r3, #0]
 800ead8:	78fb      	ldrb	r3, [r7, #3]
 800eada:	011b      	lsls	r3, r3, #4
 800eadc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800eae0:	68f9      	ldr	r1, [r7, #12]
 800eae2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800eae6:	4313      	orrs	r3, r2
 800eae8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800eaea:	2300      	movs	r3, #0
}
 800eaec:	4618      	mov	r0, r3
 800eaee:	3714      	adds	r7, #20
 800eaf0:	46bd      	mov	sp, r7
 800eaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf6:	4770      	bx	lr

0800eaf8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800eaf8:	b480      	push	{r7}
 800eafa:	b085      	sub	sp, #20
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	68fa      	ldr	r2, [r7, #12]
 800eb0e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800eb12:	f023 0303 	bic.w	r3, r3, #3
 800eb16:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb1e:	685b      	ldr	r3, [r3, #4]
 800eb20:	68fa      	ldr	r2, [r7, #12]
 800eb22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800eb26:	f023 0302 	bic.w	r3, r3, #2
 800eb2a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800eb2c:	2300      	movs	r3, #0
}
 800eb2e:	4618      	mov	r0, r3
 800eb30:	3714      	adds	r7, #20
 800eb32:	46bd      	mov	sp, r7
 800eb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb38:	4770      	bx	lr

0800eb3a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800eb3a:	b480      	push	{r7}
 800eb3c:	b085      	sub	sp, #20
 800eb3e:	af00      	add	r7, sp, #0
 800eb40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	68fa      	ldr	r2, [r7, #12]
 800eb50:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800eb54:	f023 0303 	bic.w	r3, r3, #3
 800eb58:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb60:	685b      	ldr	r3, [r3, #4]
 800eb62:	68fa      	ldr	r2, [r7, #12]
 800eb64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800eb68:	f043 0302 	orr.w	r3, r3, #2
 800eb6c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800eb6e:	2300      	movs	r3, #0
}
 800eb70:	4618      	mov	r0, r3
 800eb72:	3714      	adds	r7, #20
 800eb74:	46bd      	mov	sp, r7
 800eb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb7a:	4770      	bx	lr

0800eb7c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800eb7c:	b480      	push	{r7}
 800eb7e:	b085      	sub	sp, #20
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	695b      	ldr	r3, [r3, #20]
 800eb88:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	699b      	ldr	r3, [r3, #24]
 800eb8e:	68fa      	ldr	r2, [r7, #12]
 800eb90:	4013      	ands	r3, r2
 800eb92:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800eb94:	68fb      	ldr	r3, [r7, #12]
}
 800eb96:	4618      	mov	r0, r3
 800eb98:	3714      	adds	r7, #20
 800eb9a:	46bd      	mov	sp, r7
 800eb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba0:	4770      	bx	lr

0800eba2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800eba2:	b480      	push	{r7}
 800eba4:	b085      	sub	sp, #20
 800eba6:	af00      	add	r7, sp, #0
 800eba8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ebb4:	699b      	ldr	r3, [r3, #24]
 800ebb6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ebbe:	69db      	ldr	r3, [r3, #28]
 800ebc0:	68ba      	ldr	r2, [r7, #8]
 800ebc2:	4013      	ands	r3, r2
 800ebc4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ebc6:	68bb      	ldr	r3, [r7, #8]
 800ebc8:	0c1b      	lsrs	r3, r3, #16
}
 800ebca:	4618      	mov	r0, r3
 800ebcc:	3714      	adds	r7, #20
 800ebce:	46bd      	mov	sp, r7
 800ebd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd4:	4770      	bx	lr

0800ebd6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ebd6:	b480      	push	{r7}
 800ebd8:	b085      	sub	sp, #20
 800ebda:	af00      	add	r7, sp, #0
 800ebdc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ebe8:	699b      	ldr	r3, [r3, #24]
 800ebea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ebf2:	69db      	ldr	r3, [r3, #28]
 800ebf4:	68ba      	ldr	r2, [r7, #8]
 800ebf6:	4013      	ands	r3, r2
 800ebf8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ebfa:	68bb      	ldr	r3, [r7, #8]
 800ebfc:	b29b      	uxth	r3, r3
}
 800ebfe:	4618      	mov	r0, r3
 800ec00:	3714      	adds	r7, #20
 800ec02:	46bd      	mov	sp, r7
 800ec04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec08:	4770      	bx	lr

0800ec0a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ec0a:	b480      	push	{r7}
 800ec0c:	b085      	sub	sp, #20
 800ec0e:	af00      	add	r7, sp, #0
 800ec10:	6078      	str	r0, [r7, #4]
 800ec12:	460b      	mov	r3, r1
 800ec14:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ec1a:	78fb      	ldrb	r3, [r7, #3]
 800ec1c:	015a      	lsls	r2, r3, #5
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	4413      	add	r3, r2
 800ec22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec26:	689b      	ldr	r3, [r3, #8]
 800ec28:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec30:	695b      	ldr	r3, [r3, #20]
 800ec32:	68ba      	ldr	r2, [r7, #8]
 800ec34:	4013      	ands	r3, r2
 800ec36:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ec38:	68bb      	ldr	r3, [r7, #8]
}
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	3714      	adds	r7, #20
 800ec3e:	46bd      	mov	sp, r7
 800ec40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec44:	4770      	bx	lr

0800ec46 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ec46:	b480      	push	{r7}
 800ec48:	b087      	sub	sp, #28
 800ec4a:	af00      	add	r7, sp, #0
 800ec4c:	6078      	str	r0, [r7, #4]
 800ec4e:	460b      	mov	r3, r1
 800ec50:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ec56:	697b      	ldr	r3, [r7, #20]
 800ec58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec5c:	691b      	ldr	r3, [r3, #16]
 800ec5e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ec60:	697b      	ldr	r3, [r7, #20]
 800ec62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec68:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ec6a:	78fb      	ldrb	r3, [r7, #3]
 800ec6c:	f003 030f 	and.w	r3, r3, #15
 800ec70:	68fa      	ldr	r2, [r7, #12]
 800ec72:	fa22 f303 	lsr.w	r3, r2, r3
 800ec76:	01db      	lsls	r3, r3, #7
 800ec78:	b2db      	uxtb	r3, r3
 800ec7a:	693a      	ldr	r2, [r7, #16]
 800ec7c:	4313      	orrs	r3, r2
 800ec7e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ec80:	78fb      	ldrb	r3, [r7, #3]
 800ec82:	015a      	lsls	r2, r3, #5
 800ec84:	697b      	ldr	r3, [r7, #20]
 800ec86:	4413      	add	r3, r2
 800ec88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec8c:	689b      	ldr	r3, [r3, #8]
 800ec8e:	693a      	ldr	r2, [r7, #16]
 800ec90:	4013      	ands	r3, r2
 800ec92:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ec94:	68bb      	ldr	r3, [r7, #8]
}
 800ec96:	4618      	mov	r0, r3
 800ec98:	371c      	adds	r7, #28
 800ec9a:	46bd      	mov	sp, r7
 800ec9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca0:	4770      	bx	lr

0800eca2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800eca2:	b480      	push	{r7}
 800eca4:	b083      	sub	sp, #12
 800eca6:	af00      	add	r7, sp, #0
 800eca8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	695b      	ldr	r3, [r3, #20]
 800ecae:	f003 0301 	and.w	r3, r3, #1
}
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	370c      	adds	r7, #12
 800ecb6:	46bd      	mov	sp, r7
 800ecb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecbc:	4770      	bx	lr
	...

0800ecc0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800ecc0:	b480      	push	{r7}
 800ecc2:	b085      	sub	sp, #20
 800ecc4:	af00      	add	r7, sp, #0
 800ecc6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ecd2:	681a      	ldr	r2, [r3, #0]
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ecda:	4619      	mov	r1, r3
 800ecdc:	4b09      	ldr	r3, [pc, #36]	; (800ed04 <USB_ActivateSetup+0x44>)
 800ecde:	4013      	ands	r3, r2
 800ece0:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ece8:	685b      	ldr	r3, [r3, #4]
 800ecea:	68fa      	ldr	r2, [r7, #12]
 800ecec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ecf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ecf4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ecf6:	2300      	movs	r3, #0
}
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	3714      	adds	r7, #20
 800ecfc:	46bd      	mov	sp, r7
 800ecfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed02:	4770      	bx	lr
 800ed04:	fffff800 	.word	0xfffff800

0800ed08 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800ed08:	b480      	push	{r7}
 800ed0a:	b087      	sub	sp, #28
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	60f8      	str	r0, [r7, #12]
 800ed10:	460b      	mov	r3, r1
 800ed12:	607a      	str	r2, [r7, #4]
 800ed14:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	333c      	adds	r3, #60	; 0x3c
 800ed1e:	3304      	adds	r3, #4
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ed24:	693b      	ldr	r3, [r7, #16]
 800ed26:	4a26      	ldr	r2, [pc, #152]	; (800edc0 <USB_EP0_OutStart+0xb8>)
 800ed28:	4293      	cmp	r3, r2
 800ed2a:	d90a      	bls.n	800ed42 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ed2c:	697b      	ldr	r3, [r7, #20]
 800ed2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ed38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ed3c:	d101      	bne.n	800ed42 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ed3e:	2300      	movs	r3, #0
 800ed40:	e037      	b.n	800edb2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ed42:	697b      	ldr	r3, [r7, #20]
 800ed44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed48:	461a      	mov	r2, r3
 800ed4a:	2300      	movs	r3, #0
 800ed4c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ed4e:	697b      	ldr	r3, [r7, #20]
 800ed50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed54:	691b      	ldr	r3, [r3, #16]
 800ed56:	697a      	ldr	r2, [r7, #20]
 800ed58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ed5c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ed60:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ed62:	697b      	ldr	r3, [r7, #20]
 800ed64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed68:	691b      	ldr	r3, [r3, #16]
 800ed6a:	697a      	ldr	r2, [r7, #20]
 800ed6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ed70:	f043 0318 	orr.w	r3, r3, #24
 800ed74:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ed76:	697b      	ldr	r3, [r7, #20]
 800ed78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed7c:	691b      	ldr	r3, [r3, #16]
 800ed7e:	697a      	ldr	r2, [r7, #20]
 800ed80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ed84:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800ed88:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ed8a:	7afb      	ldrb	r3, [r7, #11]
 800ed8c:	2b01      	cmp	r3, #1
 800ed8e:	d10f      	bne.n	800edb0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ed90:	697b      	ldr	r3, [r7, #20]
 800ed92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed96:	461a      	mov	r2, r3
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800ed9c:	697b      	ldr	r3, [r7, #20]
 800ed9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	697a      	ldr	r2, [r7, #20]
 800eda6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800edaa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800edae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800edb0:	2300      	movs	r3, #0
}
 800edb2:	4618      	mov	r0, r3
 800edb4:	371c      	adds	r7, #28
 800edb6:	46bd      	mov	sp, r7
 800edb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edbc:	4770      	bx	lr
 800edbe:	bf00      	nop
 800edc0:	4f54300a 	.word	0x4f54300a

0800edc4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800edc4:	b480      	push	{r7}
 800edc6:	b085      	sub	sp, #20
 800edc8:	af00      	add	r7, sp, #0
 800edca:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800edcc:	2300      	movs	r3, #0
 800edce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	3301      	adds	r3, #1
 800edd4:	60fb      	str	r3, [r7, #12]
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	4a13      	ldr	r2, [pc, #76]	; (800ee28 <USB_CoreReset+0x64>)
 800edda:	4293      	cmp	r3, r2
 800eddc:	d901      	bls.n	800ede2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800edde:	2303      	movs	r3, #3
 800ede0:	e01b      	b.n	800ee1a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	691b      	ldr	r3, [r3, #16]
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	daf2      	bge.n	800edd0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800edea:	2300      	movs	r3, #0
 800edec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	691b      	ldr	r3, [r3, #16]
 800edf2:	f043 0201 	orr.w	r2, r3, #1
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	3301      	adds	r3, #1
 800edfe:	60fb      	str	r3, [r7, #12]
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	4a09      	ldr	r2, [pc, #36]	; (800ee28 <USB_CoreReset+0x64>)
 800ee04:	4293      	cmp	r3, r2
 800ee06:	d901      	bls.n	800ee0c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ee08:	2303      	movs	r3, #3
 800ee0a:	e006      	b.n	800ee1a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	691b      	ldr	r3, [r3, #16]
 800ee10:	f003 0301 	and.w	r3, r3, #1
 800ee14:	2b01      	cmp	r3, #1
 800ee16:	d0f0      	beq.n	800edfa <USB_CoreReset+0x36>

  return HAL_OK;
 800ee18:	2300      	movs	r3, #0
}
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	3714      	adds	r7, #20
 800ee1e:	46bd      	mov	sp, r7
 800ee20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee24:	4770      	bx	lr
 800ee26:	bf00      	nop
 800ee28:	00030d40 	.word	0x00030d40

0800ee2c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ee2c:	b580      	push	{r7, lr}
 800ee2e:	b082      	sub	sp, #8
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800ee34:	f000 f80e 	bl	800ee54 <BSP_SD_WriteCpltCallback>
}
 800ee38:	bf00      	nop
 800ee3a:	3708      	adds	r7, #8
 800ee3c:	46bd      	mov	sp, r7
 800ee3e:	bd80      	pop	{r7, pc}

0800ee40 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ee40:	b580      	push	{r7, lr}
 800ee42:	b082      	sub	sp, #8
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800ee48:	f000 f810 	bl	800ee6c <BSP_SD_ReadCpltCallback>
}
 800ee4c:	bf00      	nop
 800ee4e:	3708      	adds	r7, #8
 800ee50:	46bd      	mov	sp, r7
 800ee52:	bd80      	pop	{r7, pc}

0800ee54 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800ee54:	b480      	push	{r7}
 800ee56:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800ee58:	4b03      	ldr	r3, [pc, #12]	; (800ee68 <BSP_SD_WriteCpltCallback+0x14>)
 800ee5a:	2201      	movs	r2, #1
 800ee5c:	601a      	str	r2, [r3, #0]
}
 800ee5e:	bf00      	nop
 800ee60:	46bd      	mov	sp, r7
 800ee62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee66:	4770      	bx	lr
 800ee68:	24000834 	.word	0x24000834

0800ee6c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800ee6c:	b480      	push	{r7}
 800ee6e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800ee70:	4b03      	ldr	r3, [pc, #12]	; (800ee80 <BSP_SD_ReadCpltCallback+0x14>)
 800ee72:	2201      	movs	r2, #1
 800ee74:	601a      	str	r2, [r3, #0]
}
 800ee76:	bf00      	nop
 800ee78:	46bd      	mov	sp, r7
 800ee7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee7e:	4770      	bx	lr
 800ee80:	24000838 	.word	0x24000838

0800ee84 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ee84:	b580      	push	{r7, lr}
 800ee86:	b084      	sub	sp, #16
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	6078      	str	r0, [r7, #4]
 800ee8c:	460b      	mov	r3, r1
 800ee8e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ee90:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800ee94:	f002 f9cc 	bl	8011230 <malloc>
 800ee98:	4603      	mov	r3, r0
 800ee9a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d105      	bne.n	800eeae <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	2200      	movs	r2, #0
 800eea6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800eeaa:	2302      	movs	r3, #2
 800eeac:	e066      	b.n	800ef7c <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	68fa      	ldr	r2, [r7, #12]
 800eeb2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	7c1b      	ldrb	r3, [r3, #16]
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d119      	bne.n	800eef2 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800eebe:	f44f 7300 	mov.w	r3, #512	; 0x200
 800eec2:	2202      	movs	r2, #2
 800eec4:	2181      	movs	r1, #129	; 0x81
 800eec6:	6878      	ldr	r0, [r7, #4]
 800eec8:	f002 f839 	bl	8010f3e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	2201      	movs	r2, #1
 800eed0:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800eed2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800eed6:	2202      	movs	r2, #2
 800eed8:	2101      	movs	r1, #1
 800eeda:	6878      	ldr	r0, [r7, #4]
 800eedc:	f002 f82f 	bl	8010f3e <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	2201      	movs	r2, #1
 800eee4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	2210      	movs	r2, #16
 800eeec:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800eef0:	e016      	b.n	800ef20 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800eef2:	2340      	movs	r3, #64	; 0x40
 800eef4:	2202      	movs	r2, #2
 800eef6:	2181      	movs	r1, #129	; 0x81
 800eef8:	6878      	ldr	r0, [r7, #4]
 800eefa:	f002 f820 	bl	8010f3e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	2201      	movs	r2, #1
 800ef02:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ef04:	2340      	movs	r3, #64	; 0x40
 800ef06:	2202      	movs	r2, #2
 800ef08:	2101      	movs	r1, #1
 800ef0a:	6878      	ldr	r0, [r7, #4]
 800ef0c:	f002 f817 	bl	8010f3e <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	2201      	movs	r2, #1
 800ef14:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	2210      	movs	r2, #16
 800ef1c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ef20:	2308      	movs	r3, #8
 800ef22:	2203      	movs	r2, #3
 800ef24:	2182      	movs	r1, #130	; 0x82
 800ef26:	6878      	ldr	r0, [r7, #4]
 800ef28:	f002 f809 	bl	8010f3e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	2201      	movs	r2, #1
 800ef30:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	2200      	movs	r2, #0
 800ef42:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	2200      	movs	r2, #0
 800ef4a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	7c1b      	ldrb	r3, [r3, #16]
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d109      	bne.n	800ef6a <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ef5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ef60:	2101      	movs	r1, #1
 800ef62:	6878      	ldr	r0, [r7, #4]
 800ef64:	f002 f8da 	bl	801111c <USBD_LL_PrepareReceive>
 800ef68:	e007      	b.n	800ef7a <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ef70:	2340      	movs	r3, #64	; 0x40
 800ef72:	2101      	movs	r1, #1
 800ef74:	6878      	ldr	r0, [r7, #4]
 800ef76:	f002 f8d1 	bl	801111c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ef7a:	2300      	movs	r3, #0
}
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	3710      	adds	r7, #16
 800ef80:	46bd      	mov	sp, r7
 800ef82:	bd80      	pop	{r7, pc}

0800ef84 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ef84:	b580      	push	{r7, lr}
 800ef86:	b084      	sub	sp, #16
 800ef88:	af00      	add	r7, sp, #0
 800ef8a:	6078      	str	r0, [r7, #4]
 800ef8c:	460b      	mov	r3, r1
 800ef8e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800ef90:	2300      	movs	r3, #0
 800ef92:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800ef94:	2181      	movs	r1, #129	; 0x81
 800ef96:	6878      	ldr	r0, [r7, #4]
 800ef98:	f001 fff7 	bl	8010f8a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	2200      	movs	r2, #0
 800efa0:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800efa2:	2101      	movs	r1, #1
 800efa4:	6878      	ldr	r0, [r7, #4]
 800efa6:	f001 fff0 	bl	8010f8a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	2200      	movs	r2, #0
 800efae:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800efb2:	2182      	movs	r1, #130	; 0x82
 800efb4:	6878      	ldr	r0, [r7, #4]
 800efb6:	f001 ffe8 	bl	8010f8a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	2200      	movs	r2, #0
 800efbe:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	2200      	movs	r2, #0
 800efc6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d00e      	beq.n	800eff2 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800efda:	685b      	ldr	r3, [r3, #4]
 800efdc:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800efe4:	4618      	mov	r0, r3
 800efe6:	f002 f92b 	bl	8011240 <free>
    pdev->pClassData = NULL;
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	2200      	movs	r2, #0
 800efee:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800eff2:	7bfb      	ldrb	r3, [r7, #15]
}
 800eff4:	4618      	mov	r0, r3
 800eff6:	3710      	adds	r7, #16
 800eff8:	46bd      	mov	sp, r7
 800effa:	bd80      	pop	{r7, pc}

0800effc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800effc:	b580      	push	{r7, lr}
 800effe:	b086      	sub	sp, #24
 800f000:	af00      	add	r7, sp, #0
 800f002:	6078      	str	r0, [r7, #4]
 800f004:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f00c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800f00e:	2300      	movs	r3, #0
 800f010:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800f012:	2300      	movs	r3, #0
 800f014:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800f016:	2300      	movs	r3, #0
 800f018:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f01a:	683b      	ldr	r3, [r7, #0]
 800f01c:	781b      	ldrb	r3, [r3, #0]
 800f01e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f022:	2b00      	cmp	r3, #0
 800f024:	d03a      	beq.n	800f09c <USBD_CDC_Setup+0xa0>
 800f026:	2b20      	cmp	r3, #32
 800f028:	f040 809a 	bne.w	800f160 <USBD_CDC_Setup+0x164>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800f02c:	683b      	ldr	r3, [r7, #0]
 800f02e:	88db      	ldrh	r3, [r3, #6]
 800f030:	2b00      	cmp	r3, #0
 800f032:	d029      	beq.n	800f088 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800f034:	683b      	ldr	r3, [r7, #0]
 800f036:	781b      	ldrb	r3, [r3, #0]
 800f038:	b25b      	sxtb	r3, r3
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	da11      	bge.n	800f062 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f044:	689b      	ldr	r3, [r3, #8]
 800f046:	683a      	ldr	r2, [r7, #0]
 800f048:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800f04a:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f04c:	683a      	ldr	r2, [r7, #0]
 800f04e:	88d2      	ldrh	r2, [r2, #6]
 800f050:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800f052:	6939      	ldr	r1, [r7, #16]
 800f054:	683b      	ldr	r3, [r7, #0]
 800f056:	88db      	ldrh	r3, [r3, #6]
 800f058:	461a      	mov	r2, r3
 800f05a:	6878      	ldr	r0, [r7, #4]
 800f05c:	f001 fabf 	bl	80105de <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800f060:	e085      	b.n	800f16e <USBD_CDC_Setup+0x172>
        hcdc->CmdOpCode = req->bRequest;
 800f062:	683b      	ldr	r3, [r7, #0]
 800f064:	785a      	ldrb	r2, [r3, #1]
 800f066:	693b      	ldr	r3, [r7, #16]
 800f068:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800f06c:	683b      	ldr	r3, [r7, #0]
 800f06e:	88db      	ldrh	r3, [r3, #6]
 800f070:	b2da      	uxtb	r2, r3
 800f072:	693b      	ldr	r3, [r7, #16]
 800f074:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800f078:	6939      	ldr	r1, [r7, #16]
 800f07a:	683b      	ldr	r3, [r7, #0]
 800f07c:	88db      	ldrh	r3, [r3, #6]
 800f07e:	461a      	mov	r2, r3
 800f080:	6878      	ldr	r0, [r7, #4]
 800f082:	f001 fad8 	bl	8010636 <USBD_CtlPrepareRx>
    break;
 800f086:	e072      	b.n	800f16e <USBD_CDC_Setup+0x172>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f08e:	689b      	ldr	r3, [r3, #8]
 800f090:	683a      	ldr	r2, [r7, #0]
 800f092:	7850      	ldrb	r0, [r2, #1]
 800f094:	2200      	movs	r2, #0
 800f096:	6839      	ldr	r1, [r7, #0]
 800f098:	4798      	blx	r3
    break;
 800f09a:	e068      	b.n	800f16e <USBD_CDC_Setup+0x172>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800f09c:	683b      	ldr	r3, [r7, #0]
 800f09e:	785b      	ldrb	r3, [r3, #1]
 800f0a0:	2b0b      	cmp	r3, #11
 800f0a2:	d852      	bhi.n	800f14a <USBD_CDC_Setup+0x14e>
 800f0a4:	a201      	add	r2, pc, #4	; (adr r2, 800f0ac <USBD_CDC_Setup+0xb0>)
 800f0a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0aa:	bf00      	nop
 800f0ac:	0800f0dd 	.word	0x0800f0dd
 800f0b0:	0800f159 	.word	0x0800f159
 800f0b4:	0800f14b 	.word	0x0800f14b
 800f0b8:	0800f14b 	.word	0x0800f14b
 800f0bc:	0800f14b 	.word	0x0800f14b
 800f0c0:	0800f14b 	.word	0x0800f14b
 800f0c4:	0800f14b 	.word	0x0800f14b
 800f0c8:	0800f14b 	.word	0x0800f14b
 800f0cc:	0800f14b 	.word	0x0800f14b
 800f0d0:	0800f14b 	.word	0x0800f14b
 800f0d4:	0800f107 	.word	0x0800f107
 800f0d8:	0800f131 	.word	0x0800f131
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f0e2:	b2db      	uxtb	r3, r3
 800f0e4:	2b03      	cmp	r3, #3
 800f0e6:	d107      	bne.n	800f0f8 <USBD_CDC_Setup+0xfc>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800f0e8:	f107 030c 	add.w	r3, r7, #12
 800f0ec:	2202      	movs	r2, #2
 800f0ee:	4619      	mov	r1, r3
 800f0f0:	6878      	ldr	r0, [r7, #4]
 800f0f2:	f001 fa74 	bl	80105de <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800f0f6:	e032      	b.n	800f15e <USBD_CDC_Setup+0x162>
        USBD_CtlError(pdev, req);
 800f0f8:	6839      	ldr	r1, [r7, #0]
 800f0fa:	6878      	ldr	r0, [r7, #4]
 800f0fc:	f001 f9fe 	bl	80104fc <USBD_CtlError>
        ret = USBD_FAIL;
 800f100:	2303      	movs	r3, #3
 800f102:	75fb      	strb	r3, [r7, #23]
      break;
 800f104:	e02b      	b.n	800f15e <USBD_CDC_Setup+0x162>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f10c:	b2db      	uxtb	r3, r3
 800f10e:	2b03      	cmp	r3, #3
 800f110:	d107      	bne.n	800f122 <USBD_CDC_Setup+0x126>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800f112:	f107 030f 	add.w	r3, r7, #15
 800f116:	2201      	movs	r2, #1
 800f118:	4619      	mov	r1, r3
 800f11a:	6878      	ldr	r0, [r7, #4]
 800f11c:	f001 fa5f 	bl	80105de <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800f120:	e01d      	b.n	800f15e <USBD_CDC_Setup+0x162>
        USBD_CtlError(pdev, req);
 800f122:	6839      	ldr	r1, [r7, #0]
 800f124:	6878      	ldr	r0, [r7, #4]
 800f126:	f001 f9e9 	bl	80104fc <USBD_CtlError>
        ret = USBD_FAIL;
 800f12a:	2303      	movs	r3, #3
 800f12c:	75fb      	strb	r3, [r7, #23]
      break;
 800f12e:	e016      	b.n	800f15e <USBD_CDC_Setup+0x162>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f136:	b2db      	uxtb	r3, r3
 800f138:	2b03      	cmp	r3, #3
 800f13a:	d00f      	beq.n	800f15c <USBD_CDC_Setup+0x160>
      {
        USBD_CtlError(pdev, req);
 800f13c:	6839      	ldr	r1, [r7, #0]
 800f13e:	6878      	ldr	r0, [r7, #4]
 800f140:	f001 f9dc 	bl	80104fc <USBD_CtlError>
        ret = USBD_FAIL;
 800f144:	2303      	movs	r3, #3
 800f146:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800f148:	e008      	b.n	800f15c <USBD_CDC_Setup+0x160>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800f14a:	6839      	ldr	r1, [r7, #0]
 800f14c:	6878      	ldr	r0, [r7, #4]
 800f14e:	f001 f9d5 	bl	80104fc <USBD_CtlError>
      ret = USBD_FAIL;
 800f152:	2303      	movs	r3, #3
 800f154:	75fb      	strb	r3, [r7, #23]
      break;
 800f156:	e002      	b.n	800f15e <USBD_CDC_Setup+0x162>
      break;
 800f158:	bf00      	nop
 800f15a:	e008      	b.n	800f16e <USBD_CDC_Setup+0x172>
      break;
 800f15c:	bf00      	nop
    }
    break;
 800f15e:	e006      	b.n	800f16e <USBD_CDC_Setup+0x172>

  default:
    USBD_CtlError(pdev, req);
 800f160:	6839      	ldr	r1, [r7, #0]
 800f162:	6878      	ldr	r0, [r7, #4]
 800f164:	f001 f9ca 	bl	80104fc <USBD_CtlError>
    ret = USBD_FAIL;
 800f168:	2303      	movs	r3, #3
 800f16a:	75fb      	strb	r3, [r7, #23]
    break;
 800f16c:	bf00      	nop
  }

  return (uint8_t)ret;
 800f16e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f170:	4618      	mov	r0, r3
 800f172:	3718      	adds	r7, #24
 800f174:	46bd      	mov	sp, r7
 800f176:	bd80      	pop	{r7, pc}

0800f178 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f178:	b580      	push	{r7, lr}
 800f17a:	b084      	sub	sp, #16
 800f17c:	af00      	add	r7, sp, #0
 800f17e:	6078      	str	r0, [r7, #4]
 800f180:	460b      	mov	r3, r1
 800f182:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f18a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f192:	2b00      	cmp	r3, #0
 800f194:	d101      	bne.n	800f19a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f196:	2303      	movs	r3, #3
 800f198:	e049      	b.n	800f22e <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f1a0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800f1a2:	78fa      	ldrb	r2, [r7, #3]
 800f1a4:	6879      	ldr	r1, [r7, #4]
 800f1a6:	4613      	mov	r3, r2
 800f1a8:	009b      	lsls	r3, r3, #2
 800f1aa:	4413      	add	r3, r2
 800f1ac:	009b      	lsls	r3, r3, #2
 800f1ae:	440b      	add	r3, r1
 800f1b0:	3318      	adds	r3, #24
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d029      	beq.n	800f20c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800f1b8:	78fa      	ldrb	r2, [r7, #3]
 800f1ba:	6879      	ldr	r1, [r7, #4]
 800f1bc:	4613      	mov	r3, r2
 800f1be:	009b      	lsls	r3, r3, #2
 800f1c0:	4413      	add	r3, r2
 800f1c2:	009b      	lsls	r3, r3, #2
 800f1c4:	440b      	add	r3, r1
 800f1c6:	3318      	adds	r3, #24
 800f1c8:	681a      	ldr	r2, [r3, #0]
 800f1ca:	78f9      	ldrb	r1, [r7, #3]
 800f1cc:	68f8      	ldr	r0, [r7, #12]
 800f1ce:	460b      	mov	r3, r1
 800f1d0:	00db      	lsls	r3, r3, #3
 800f1d2:	1a5b      	subs	r3, r3, r1
 800f1d4:	009b      	lsls	r3, r3, #2
 800f1d6:	4403      	add	r3, r0
 800f1d8:	3344      	adds	r3, #68	; 0x44
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	fbb2 f1f3 	udiv	r1, r2, r3
 800f1e0:	fb01 f303 	mul.w	r3, r1, r3
 800f1e4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d110      	bne.n	800f20c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800f1ea:	78fa      	ldrb	r2, [r7, #3]
 800f1ec:	6879      	ldr	r1, [r7, #4]
 800f1ee:	4613      	mov	r3, r2
 800f1f0:	009b      	lsls	r3, r3, #2
 800f1f2:	4413      	add	r3, r2
 800f1f4:	009b      	lsls	r3, r3, #2
 800f1f6:	440b      	add	r3, r1
 800f1f8:	3318      	adds	r3, #24
 800f1fa:	2200      	movs	r2, #0
 800f1fc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800f1fe:	78f9      	ldrb	r1, [r7, #3]
 800f200:	2300      	movs	r3, #0
 800f202:	2200      	movs	r2, #0
 800f204:	6878      	ldr	r0, [r7, #4]
 800f206:	f001 ff68 	bl	80110da <USBD_LL_Transmit>
 800f20a:	e00f      	b.n	800f22c <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 800f20c:	68bb      	ldr	r3, [r7, #8]
 800f20e:	2200      	movs	r2, #0
 800f210:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f21a:	691b      	ldr	r3, [r3, #16]
 800f21c:	68ba      	ldr	r2, [r7, #8]
 800f21e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800f222:	68ba      	ldr	r2, [r7, #8]
 800f224:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800f228:	78fa      	ldrb	r2, [r7, #3]
 800f22a:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800f22c:	2300      	movs	r3, #0
}
 800f22e:	4618      	mov	r0, r3
 800f230:	3710      	adds	r7, #16
 800f232:	46bd      	mov	sp, r7
 800f234:	bd80      	pop	{r7, pc}

0800f236 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f236:	b580      	push	{r7, lr}
 800f238:	b084      	sub	sp, #16
 800f23a:	af00      	add	r7, sp, #0
 800f23c:	6078      	str	r0, [r7, #4]
 800f23e:	460b      	mov	r3, r1
 800f240:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f248:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f250:	2b00      	cmp	r3, #0
 800f252:	d101      	bne.n	800f258 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f254:	2303      	movs	r3, #3
 800f256:	e015      	b.n	800f284 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800f258:	78fb      	ldrb	r3, [r7, #3]
 800f25a:	4619      	mov	r1, r3
 800f25c:	6878      	ldr	r0, [r7, #4]
 800f25e:	f001 ff7e 	bl	801115e <USBD_LL_GetRxDataSize>
 800f262:	4602      	mov	r2, r0
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f270:	68db      	ldr	r3, [r3, #12]
 800f272:	68fa      	ldr	r2, [r7, #12]
 800f274:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800f278:	68fa      	ldr	r2, [r7, #12]
 800f27a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800f27e:	4611      	mov	r1, r2
 800f280:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800f282:	2300      	movs	r3, #0
}
 800f284:	4618      	mov	r0, r3
 800f286:	3710      	adds	r7, #16
 800f288:	46bd      	mov	sp, r7
 800f28a:	bd80      	pop	{r7, pc}

0800f28c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800f28c:	b580      	push	{r7, lr}
 800f28e:	b084      	sub	sp, #16
 800f290:	af00      	add	r7, sp, #0
 800f292:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f29a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d015      	beq.n	800f2d2 <USBD_CDC_EP0_RxReady+0x46>
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800f2ac:	2bff      	cmp	r3, #255	; 0xff
 800f2ae:	d010      	beq.n	800f2d2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f2b6:	689b      	ldr	r3, [r3, #8]
 800f2b8:	68fa      	ldr	r2, [r7, #12]
 800f2ba:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800f2be:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800f2c0:	68fa      	ldr	r2, [r7, #12]
 800f2c2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800f2c6:	b292      	uxth	r2, r2
 800f2c8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	22ff      	movs	r2, #255	; 0xff
 800f2ce:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800f2d2:	2300      	movs	r3, #0
}
 800f2d4:	4618      	mov	r0, r3
 800f2d6:	3710      	adds	r7, #16
 800f2d8:	46bd      	mov	sp, r7
 800f2da:	bd80      	pop	{r7, pc}

0800f2dc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800f2dc:	b480      	push	{r7}
 800f2de:	b083      	sub	sp, #12
 800f2e0:	af00      	add	r7, sp, #0
 800f2e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	2243      	movs	r2, #67	; 0x43
 800f2e8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800f2ea:	4b03      	ldr	r3, [pc, #12]	; (800f2f8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800f2ec:	4618      	mov	r0, r3
 800f2ee:	370c      	adds	r7, #12
 800f2f0:	46bd      	mov	sp, r7
 800f2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f6:	4770      	bx	lr
 800f2f8:	24000098 	.word	0x24000098

0800f2fc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800f2fc:	b480      	push	{r7}
 800f2fe:	b083      	sub	sp, #12
 800f300:	af00      	add	r7, sp, #0
 800f302:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	2243      	movs	r2, #67	; 0x43
 800f308:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800f30a:	4b03      	ldr	r3, [pc, #12]	; (800f318 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800f30c:	4618      	mov	r0, r3
 800f30e:	370c      	adds	r7, #12
 800f310:	46bd      	mov	sp, r7
 800f312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f316:	4770      	bx	lr
 800f318:	24000054 	.word	0x24000054

0800f31c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800f31c:	b480      	push	{r7}
 800f31e:	b083      	sub	sp, #12
 800f320:	af00      	add	r7, sp, #0
 800f322:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	2243      	movs	r2, #67	; 0x43
 800f328:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800f32a:	4b03      	ldr	r3, [pc, #12]	; (800f338 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800f32c:	4618      	mov	r0, r3
 800f32e:	370c      	adds	r7, #12
 800f330:	46bd      	mov	sp, r7
 800f332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f336:	4770      	bx	lr
 800f338:	240000dc 	.word	0x240000dc

0800f33c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800f33c:	b480      	push	{r7}
 800f33e:	b083      	sub	sp, #12
 800f340:	af00      	add	r7, sp, #0
 800f342:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	220a      	movs	r2, #10
 800f348:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800f34a:	4b03      	ldr	r3, [pc, #12]	; (800f358 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800f34c:	4618      	mov	r0, r3
 800f34e:	370c      	adds	r7, #12
 800f350:	46bd      	mov	sp, r7
 800f352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f356:	4770      	bx	lr
 800f358:	24000010 	.word	0x24000010

0800f35c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800f35c:	b480      	push	{r7}
 800f35e:	b083      	sub	sp, #12
 800f360:	af00      	add	r7, sp, #0
 800f362:	6078      	str	r0, [r7, #4]
 800f364:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800f366:	683b      	ldr	r3, [r7, #0]
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d101      	bne.n	800f370 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800f36c:	2303      	movs	r3, #3
 800f36e:	e004      	b.n	800f37a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	683a      	ldr	r2, [r7, #0]
 800f374:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800f378:	2300      	movs	r3, #0
}
 800f37a:	4618      	mov	r0, r3
 800f37c:	370c      	adds	r7, #12
 800f37e:	46bd      	mov	sp, r7
 800f380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f384:	4770      	bx	lr

0800f386 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800f386:	b480      	push	{r7}
 800f388:	b087      	sub	sp, #28
 800f38a:	af00      	add	r7, sp, #0
 800f38c:	60f8      	str	r0, [r7, #12]
 800f38e:	60b9      	str	r1, [r7, #8]
 800f390:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f398:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800f39a:	697b      	ldr	r3, [r7, #20]
 800f39c:	68ba      	ldr	r2, [r7, #8]
 800f39e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800f3a2:	697b      	ldr	r3, [r7, #20]
 800f3a4:	687a      	ldr	r2, [r7, #4]
 800f3a6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800f3aa:	2300      	movs	r3, #0
}
 800f3ac:	4618      	mov	r0, r3
 800f3ae:	371c      	adds	r7, #28
 800f3b0:	46bd      	mov	sp, r7
 800f3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3b6:	4770      	bx	lr

0800f3b8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800f3b8:	b480      	push	{r7}
 800f3ba:	b085      	sub	sp, #20
 800f3bc:	af00      	add	r7, sp, #0
 800f3be:	6078      	str	r0, [r7, #4]
 800f3c0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f3c8:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	683a      	ldr	r2, [r7, #0]
 800f3ce:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800f3d2:	2300      	movs	r3, #0
}
 800f3d4:	4618      	mov	r0, r3
 800f3d6:	3714      	adds	r7, #20
 800f3d8:	46bd      	mov	sp, r7
 800f3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3de:	4770      	bx	lr

0800f3e0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800f3e0:	b580      	push	{r7, lr}
 800f3e2:	b084      	sub	sp, #16
 800f3e4:	af00      	add	r7, sp, #0
 800f3e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f3ee:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800f3f0:	2301      	movs	r3, #1
 800f3f2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d101      	bne.n	800f402 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f3fe:	2303      	movs	r3, #3
 800f400:	e01a      	b.n	800f438 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800f402:	68bb      	ldr	r3, [r7, #8]
 800f404:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d114      	bne.n	800f436 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800f40c:	68bb      	ldr	r3, [r7, #8]
 800f40e:	2201      	movs	r2, #1
 800f410:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800f414:	68bb      	ldr	r3, [r7, #8]
 800f416:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800f41e:	68bb      	ldr	r3, [r7, #8]
 800f420:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800f424:	68bb      	ldr	r3, [r7, #8]
 800f426:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800f42a:	2181      	movs	r1, #129	; 0x81
 800f42c:	6878      	ldr	r0, [r7, #4]
 800f42e:	f001 fe54 	bl	80110da <USBD_LL_Transmit>

    ret = USBD_OK;
 800f432:	2300      	movs	r3, #0
 800f434:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800f436:	7bfb      	ldrb	r3, [r7, #15]
}
 800f438:	4618      	mov	r0, r3
 800f43a:	3710      	adds	r7, #16
 800f43c:	46bd      	mov	sp, r7
 800f43e:	bd80      	pop	{r7, pc}

0800f440 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800f440:	b580      	push	{r7, lr}
 800f442:	b084      	sub	sp, #16
 800f444:	af00      	add	r7, sp, #0
 800f446:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f44e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f456:	2b00      	cmp	r3, #0
 800f458:	d101      	bne.n	800f45e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800f45a:	2303      	movs	r3, #3
 800f45c:	e016      	b.n	800f48c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	7c1b      	ldrb	r3, [r3, #16]
 800f462:	2b00      	cmp	r3, #0
 800f464:	d109      	bne.n	800f47a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f46c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f470:	2101      	movs	r1, #1
 800f472:	6878      	ldr	r0, [r7, #4]
 800f474:	f001 fe52 	bl	801111c <USBD_LL_PrepareReceive>
 800f478:	e007      	b.n	800f48a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f480:	2340      	movs	r3, #64	; 0x40
 800f482:	2101      	movs	r1, #1
 800f484:	6878      	ldr	r0, [r7, #4]
 800f486:	f001 fe49 	bl	801111c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f48a:	2300      	movs	r3, #0
}
 800f48c:	4618      	mov	r0, r3
 800f48e:	3710      	adds	r7, #16
 800f490:	46bd      	mov	sp, r7
 800f492:	bd80      	pop	{r7, pc}

0800f494 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800f494:	b580      	push	{r7, lr}
 800f496:	b086      	sub	sp, #24
 800f498:	af00      	add	r7, sp, #0
 800f49a:	60f8      	str	r0, [r7, #12]
 800f49c:	60b9      	str	r1, [r7, #8]
 800f49e:	4613      	mov	r3, r2
 800f4a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d101      	bne.n	800f4ac <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800f4a8:	2303      	movs	r3, #3
 800f4aa:	e025      	b.n	800f4f8 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d003      	beq.n	800f4be <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	2200      	movs	r2, #0
 800f4ba:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800f4be:	68fb      	ldr	r3, [r7, #12]
 800f4c0:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d003      	beq.n	800f4d0 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	2200      	movs	r2, #0
 800f4cc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800f4d0:	68bb      	ldr	r3, [r7, #8]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d003      	beq.n	800f4de <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	68ba      	ldr	r2, [r7, #8]
 800f4da:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	2201      	movs	r2, #1
 800f4e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	79fa      	ldrb	r2, [r7, #7]
 800f4ea:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800f4ec:	68f8      	ldr	r0, [r7, #12]
 800f4ee:	f001 fcbb 	bl	8010e68 <USBD_LL_Init>
 800f4f2:	4603      	mov	r3, r0
 800f4f4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800f4f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800f4f8:	4618      	mov	r0, r3
 800f4fa:	3718      	adds	r7, #24
 800f4fc:	46bd      	mov	sp, r7
 800f4fe:	bd80      	pop	{r7, pc}

0800f500 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800f500:	b580      	push	{r7, lr}
 800f502:	b084      	sub	sp, #16
 800f504:	af00      	add	r7, sp, #0
 800f506:	6078      	str	r0, [r7, #4]
 800f508:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f50a:	2300      	movs	r3, #0
 800f50c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800f50e:	683b      	ldr	r3, [r7, #0]
 800f510:	2b00      	cmp	r3, #0
 800f512:	d101      	bne.n	800f518 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800f514:	2303      	movs	r3, #3
 800f516:	e010      	b.n	800f53a <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	683a      	ldr	r2, [r7, #0]
 800f51c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f528:	f107 020e 	add.w	r2, r7, #14
 800f52c:	4610      	mov	r0, r2
 800f52e:	4798      	blx	r3
 800f530:	4602      	mov	r2, r0
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800f538:	2300      	movs	r3, #0
}
 800f53a:	4618      	mov	r0, r3
 800f53c:	3710      	adds	r7, #16
 800f53e:	46bd      	mov	sp, r7
 800f540:	bd80      	pop	{r7, pc}

0800f542 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800f542:	b580      	push	{r7, lr}
 800f544:	b082      	sub	sp, #8
 800f546:	af00      	add	r7, sp, #0
 800f548:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800f54a:	6878      	ldr	r0, [r7, #4]
 800f54c:	f001 fcdc 	bl	8010f08 <USBD_LL_Start>
 800f550:	4603      	mov	r3, r0
}
 800f552:	4618      	mov	r0, r3
 800f554:	3708      	adds	r7, #8
 800f556:	46bd      	mov	sp, r7
 800f558:	bd80      	pop	{r7, pc}

0800f55a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800f55a:	b480      	push	{r7}
 800f55c:	b083      	sub	sp, #12
 800f55e:	af00      	add	r7, sp, #0
 800f560:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f562:	2300      	movs	r3, #0
}
 800f564:	4618      	mov	r0, r3
 800f566:	370c      	adds	r7, #12
 800f568:	46bd      	mov	sp, r7
 800f56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f56e:	4770      	bx	lr

0800f570 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f570:	b580      	push	{r7, lr}
 800f572:	b084      	sub	sp, #16
 800f574:	af00      	add	r7, sp, #0
 800f576:	6078      	str	r0, [r7, #4]
 800f578:	460b      	mov	r3, r1
 800f57a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800f57c:	2303      	movs	r3, #3
 800f57e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f586:	2b00      	cmp	r3, #0
 800f588:	d009      	beq.n	800f59e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	78fa      	ldrb	r2, [r7, #3]
 800f594:	4611      	mov	r1, r2
 800f596:	6878      	ldr	r0, [r7, #4]
 800f598:	4798      	blx	r3
 800f59a:	4603      	mov	r3, r0
 800f59c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800f59e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5a0:	4618      	mov	r0, r3
 800f5a2:	3710      	adds	r7, #16
 800f5a4:	46bd      	mov	sp, r7
 800f5a6:	bd80      	pop	{r7, pc}

0800f5a8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f5a8:	b580      	push	{r7, lr}
 800f5aa:	b082      	sub	sp, #8
 800f5ac:	af00      	add	r7, sp, #0
 800f5ae:	6078      	str	r0, [r7, #4]
 800f5b0:	460b      	mov	r3, r1
 800f5b2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d007      	beq.n	800f5ce <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f5c4:	685b      	ldr	r3, [r3, #4]
 800f5c6:	78fa      	ldrb	r2, [r7, #3]
 800f5c8:	4611      	mov	r1, r2
 800f5ca:	6878      	ldr	r0, [r7, #4]
 800f5cc:	4798      	blx	r3
  }

  return USBD_OK;
 800f5ce:	2300      	movs	r3, #0
}
 800f5d0:	4618      	mov	r0, r3
 800f5d2:	3708      	adds	r7, #8
 800f5d4:	46bd      	mov	sp, r7
 800f5d6:	bd80      	pop	{r7, pc}

0800f5d8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f5d8:	b580      	push	{r7, lr}
 800f5da:	b084      	sub	sp, #16
 800f5dc:	af00      	add	r7, sp, #0
 800f5de:	6078      	str	r0, [r7, #4]
 800f5e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f5e8:	6839      	ldr	r1, [r7, #0]
 800f5ea:	4618      	mov	r0, r3
 800f5ec:	f000 ff4c 	bl	8010488 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	2201      	movs	r2, #1
 800f5f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800f5fe:	461a      	mov	r2, r3
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f60c:	f003 031f 	and.w	r3, r3, #31
 800f610:	2b02      	cmp	r3, #2
 800f612:	d01a      	beq.n	800f64a <USBD_LL_SetupStage+0x72>
 800f614:	2b02      	cmp	r3, #2
 800f616:	d822      	bhi.n	800f65e <USBD_LL_SetupStage+0x86>
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d002      	beq.n	800f622 <USBD_LL_SetupStage+0x4a>
 800f61c:	2b01      	cmp	r3, #1
 800f61e:	d00a      	beq.n	800f636 <USBD_LL_SetupStage+0x5e>
 800f620:	e01d      	b.n	800f65e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f628:	4619      	mov	r1, r3
 800f62a:	6878      	ldr	r0, [r7, #4]
 800f62c:	f000 fa20 	bl	800fa70 <USBD_StdDevReq>
 800f630:	4603      	mov	r3, r0
 800f632:	73fb      	strb	r3, [r7, #15]
      break;
 800f634:	e020      	b.n	800f678 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f63c:	4619      	mov	r1, r3
 800f63e:	6878      	ldr	r0, [r7, #4]
 800f640:	f000 fa84 	bl	800fb4c <USBD_StdItfReq>
 800f644:	4603      	mov	r3, r0
 800f646:	73fb      	strb	r3, [r7, #15]
      break;
 800f648:	e016      	b.n	800f678 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f650:	4619      	mov	r1, r3
 800f652:	6878      	ldr	r0, [r7, #4]
 800f654:	f000 fac3 	bl	800fbde <USBD_StdEPReq>
 800f658:	4603      	mov	r3, r0
 800f65a:	73fb      	strb	r3, [r7, #15]
      break;
 800f65c:	e00c      	b.n	800f678 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f664:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f668:	b2db      	uxtb	r3, r3
 800f66a:	4619      	mov	r1, r3
 800f66c:	6878      	ldr	r0, [r7, #4]
 800f66e:	f001 fcab 	bl	8010fc8 <USBD_LL_StallEP>
 800f672:	4603      	mov	r3, r0
 800f674:	73fb      	strb	r3, [r7, #15]
      break;
 800f676:	bf00      	nop
  }

  return ret;
 800f678:	7bfb      	ldrb	r3, [r7, #15]
}
 800f67a:	4618      	mov	r0, r3
 800f67c:	3710      	adds	r7, #16
 800f67e:	46bd      	mov	sp, r7
 800f680:	bd80      	pop	{r7, pc}

0800f682 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f682:	b580      	push	{r7, lr}
 800f684:	b086      	sub	sp, #24
 800f686:	af00      	add	r7, sp, #0
 800f688:	60f8      	str	r0, [r7, #12]
 800f68a:	460b      	mov	r3, r1
 800f68c:	607a      	str	r2, [r7, #4]
 800f68e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f690:	7afb      	ldrb	r3, [r7, #11]
 800f692:	2b00      	cmp	r3, #0
 800f694:	d138      	bne.n	800f708 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800f69c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f6a4:	2b03      	cmp	r3, #3
 800f6a6:	d14c      	bne.n	800f742 <USBD_LL_DataOutStage+0xc0>
    {
      if (pep->rem_length > pep->maxpacket)
 800f6a8:	693b      	ldr	r3, [r7, #16]
 800f6aa:	689a      	ldr	r2, [r3, #8]
 800f6ac:	693b      	ldr	r3, [r7, #16]
 800f6ae:	68db      	ldr	r3, [r3, #12]
 800f6b0:	429a      	cmp	r2, r3
 800f6b2:	d913      	bls.n	800f6dc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f6b4:	693b      	ldr	r3, [r7, #16]
 800f6b6:	689a      	ldr	r2, [r3, #8]
 800f6b8:	693b      	ldr	r3, [r7, #16]
 800f6ba:	68db      	ldr	r3, [r3, #12]
 800f6bc:	1ad2      	subs	r2, r2, r3
 800f6be:	693b      	ldr	r3, [r7, #16]
 800f6c0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800f6c2:	693b      	ldr	r3, [r7, #16]
 800f6c4:	68da      	ldr	r2, [r3, #12]
 800f6c6:	693b      	ldr	r3, [r7, #16]
 800f6c8:	689b      	ldr	r3, [r3, #8]
 800f6ca:	4293      	cmp	r3, r2
 800f6cc:	bf28      	it	cs
 800f6ce:	4613      	movcs	r3, r2
 800f6d0:	461a      	mov	r2, r3
 800f6d2:	6879      	ldr	r1, [r7, #4]
 800f6d4:	68f8      	ldr	r0, [r7, #12]
 800f6d6:	f000 ffcb 	bl	8010670 <USBD_CtlContinueRx>
 800f6da:	e032      	b.n	800f742 <USBD_LL_DataOutStage+0xc0>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f6e2:	691b      	ldr	r3, [r3, #16]
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d00b      	beq.n	800f700 <USBD_LL_DataOutStage+0x7e>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f6ee:	b2db      	uxtb	r3, r3
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800f6f0:	2b03      	cmp	r3, #3
 800f6f2:	d105      	bne.n	800f700 <USBD_LL_DataOutStage+0x7e>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f6fa:	691b      	ldr	r3, [r3, #16]
 800f6fc:	68f8      	ldr	r0, [r7, #12]
 800f6fe:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800f700:	68f8      	ldr	r0, [r7, #12]
 800f702:	f000 ffc6 	bl	8010692 <USBD_CtlSendStatus>
 800f706:	e01c      	b.n	800f742 <USBD_LL_DataOutStage+0xc0>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f70e:	699b      	ldr	r3, [r3, #24]
 800f710:	2b00      	cmp	r3, #0
 800f712:	d014      	beq.n	800f73e <USBD_LL_DataOutStage+0xbc>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f71a:	b2db      	uxtb	r3, r3
  else if ((pdev->pClass->DataOut != NULL) &&
 800f71c:	2b03      	cmp	r3, #3
 800f71e:	d10e      	bne.n	800f73e <USBD_LL_DataOutStage+0xbc>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f726:	699b      	ldr	r3, [r3, #24]
 800f728:	7afa      	ldrb	r2, [r7, #11]
 800f72a:	4611      	mov	r1, r2
 800f72c:	68f8      	ldr	r0, [r7, #12]
 800f72e:	4798      	blx	r3
 800f730:	4603      	mov	r3, r0
 800f732:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800f734:	7dfb      	ldrb	r3, [r7, #23]
 800f736:	2b00      	cmp	r3, #0
 800f738:	d003      	beq.n	800f742 <USBD_LL_DataOutStage+0xc0>
    {
      return ret;
 800f73a:	7dfb      	ldrb	r3, [r7, #23]
 800f73c:	e002      	b.n	800f744 <USBD_LL_DataOutStage+0xc2>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800f73e:	2303      	movs	r3, #3
 800f740:	e000      	b.n	800f744 <USBD_LL_DataOutStage+0xc2>
  }

  return USBD_OK;
 800f742:	2300      	movs	r3, #0
}
 800f744:	4618      	mov	r0, r3
 800f746:	3718      	adds	r7, #24
 800f748:	46bd      	mov	sp, r7
 800f74a:	bd80      	pop	{r7, pc}

0800f74c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f74c:	b580      	push	{r7, lr}
 800f74e:	b086      	sub	sp, #24
 800f750:	af00      	add	r7, sp, #0
 800f752:	60f8      	str	r0, [r7, #12]
 800f754:	460b      	mov	r3, r1
 800f756:	607a      	str	r2, [r7, #4]
 800f758:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f75a:	7afb      	ldrb	r3, [r7, #11]
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d16b      	bne.n	800f838 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	3314      	adds	r3, #20
 800f764:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f76c:	2b02      	cmp	r3, #2
 800f76e:	d156      	bne.n	800f81e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800f770:	693b      	ldr	r3, [r7, #16]
 800f772:	689a      	ldr	r2, [r3, #8]
 800f774:	693b      	ldr	r3, [r7, #16]
 800f776:	68db      	ldr	r3, [r3, #12]
 800f778:	429a      	cmp	r2, r3
 800f77a:	d914      	bls.n	800f7a6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f77c:	693b      	ldr	r3, [r7, #16]
 800f77e:	689a      	ldr	r2, [r3, #8]
 800f780:	693b      	ldr	r3, [r7, #16]
 800f782:	68db      	ldr	r3, [r3, #12]
 800f784:	1ad2      	subs	r2, r2, r3
 800f786:	693b      	ldr	r3, [r7, #16]
 800f788:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800f78a:	693b      	ldr	r3, [r7, #16]
 800f78c:	689b      	ldr	r3, [r3, #8]
 800f78e:	461a      	mov	r2, r3
 800f790:	6879      	ldr	r1, [r7, #4]
 800f792:	68f8      	ldr	r0, [r7, #12]
 800f794:	f000 ff3e 	bl	8010614 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f798:	2300      	movs	r3, #0
 800f79a:	2200      	movs	r2, #0
 800f79c:	2100      	movs	r1, #0
 800f79e:	68f8      	ldr	r0, [r7, #12]
 800f7a0:	f001 fcbc 	bl	801111c <USBD_LL_PrepareReceive>
 800f7a4:	e03b      	b.n	800f81e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800f7a6:	693b      	ldr	r3, [r7, #16]
 800f7a8:	68da      	ldr	r2, [r3, #12]
 800f7aa:	693b      	ldr	r3, [r7, #16]
 800f7ac:	689b      	ldr	r3, [r3, #8]
 800f7ae:	429a      	cmp	r2, r3
 800f7b0:	d11c      	bne.n	800f7ec <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800f7b2:	693b      	ldr	r3, [r7, #16]
 800f7b4:	685a      	ldr	r2, [r3, #4]
 800f7b6:	693b      	ldr	r3, [r7, #16]
 800f7b8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800f7ba:	429a      	cmp	r2, r3
 800f7bc:	d316      	bcc.n	800f7ec <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800f7be:	693b      	ldr	r3, [r7, #16]
 800f7c0:	685a      	ldr	r2, [r3, #4]
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f7c8:	429a      	cmp	r2, r3
 800f7ca:	d20f      	bcs.n	800f7ec <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f7cc:	2200      	movs	r2, #0
 800f7ce:	2100      	movs	r1, #0
 800f7d0:	68f8      	ldr	r0, [r7, #12]
 800f7d2:	f000 ff1f 	bl	8010614 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	2200      	movs	r2, #0
 800f7da:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f7de:	2300      	movs	r3, #0
 800f7e0:	2200      	movs	r2, #0
 800f7e2:	2100      	movs	r1, #0
 800f7e4:	68f8      	ldr	r0, [r7, #12]
 800f7e6:	f001 fc99 	bl	801111c <USBD_LL_PrepareReceive>
 800f7ea:	e018      	b.n	800f81e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f7f2:	68db      	ldr	r3, [r3, #12]
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d00b      	beq.n	800f810 <USBD_LL_DataInStage+0xc4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f7fe:	b2db      	uxtb	r3, r3
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800f800:	2b03      	cmp	r3, #3
 800f802:	d105      	bne.n	800f810 <USBD_LL_DataInStage+0xc4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f80a:	68db      	ldr	r3, [r3, #12]
 800f80c:	68f8      	ldr	r0, [r7, #12]
 800f80e:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f810:	2180      	movs	r1, #128	; 0x80
 800f812:	68f8      	ldr	r0, [r7, #12]
 800f814:	f001 fbd8 	bl	8010fc8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800f818:	68f8      	ldr	r0, [r7, #12]
 800f81a:	f000 ff4d 	bl	80106b8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800f824:	2b01      	cmp	r3, #1
 800f826:	d124      	bne.n	800f872 <USBD_LL_DataInStage+0x126>
    {
      (void)USBD_RunTestMode(pdev);
 800f828:	68f8      	ldr	r0, [r7, #12]
 800f82a:	f7ff fe96 	bl	800f55a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	2200      	movs	r2, #0
 800f832:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800f836:	e01c      	b.n	800f872 <USBD_LL_DataInStage+0x126>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f83e:	695b      	ldr	r3, [r3, #20]
 800f840:	2b00      	cmp	r3, #0
 800f842:	d014      	beq.n	800f86e <USBD_LL_DataInStage+0x122>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f84a:	b2db      	uxtb	r3, r3
  else if ((pdev->pClass->DataIn != NULL) &&
 800f84c:	2b03      	cmp	r3, #3
 800f84e:	d10e      	bne.n	800f86e <USBD_LL_DataInStage+0x122>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f856:	695b      	ldr	r3, [r3, #20]
 800f858:	7afa      	ldrb	r2, [r7, #11]
 800f85a:	4611      	mov	r1, r2
 800f85c:	68f8      	ldr	r0, [r7, #12]
 800f85e:	4798      	blx	r3
 800f860:	4603      	mov	r3, r0
 800f862:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800f864:	7dfb      	ldrb	r3, [r7, #23]
 800f866:	2b00      	cmp	r3, #0
 800f868:	d003      	beq.n	800f872 <USBD_LL_DataInStage+0x126>
    {
      return ret;
 800f86a:	7dfb      	ldrb	r3, [r7, #23]
 800f86c:	e002      	b.n	800f874 <USBD_LL_DataInStage+0x128>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800f86e:	2303      	movs	r3, #3
 800f870:	e000      	b.n	800f874 <USBD_LL_DataInStage+0x128>
  }

  return USBD_OK;
 800f872:	2300      	movs	r3, #0
}
 800f874:	4618      	mov	r0, r3
 800f876:	3718      	adds	r7, #24
 800f878:	46bd      	mov	sp, r7
 800f87a:	bd80      	pop	{r7, pc}

0800f87c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f87c:	b580      	push	{r7, lr}
 800f87e:	b082      	sub	sp, #8
 800f880:	af00      	add	r7, sp, #0
 800f882:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	2201      	movs	r2, #1
 800f888:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	2200      	movs	r2, #0
 800f890:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	2200      	movs	r2, #0
 800f898:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	2200      	movs	r2, #0
 800f89e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d009      	beq.n	800f8c0 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f8b2:	685b      	ldr	r3, [r3, #4]
 800f8b4:	687a      	ldr	r2, [r7, #4]
 800f8b6:	6852      	ldr	r2, [r2, #4]
 800f8b8:	b2d2      	uxtb	r2, r2
 800f8ba:	4611      	mov	r1, r2
 800f8bc:	6878      	ldr	r0, [r7, #4]
 800f8be:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f8c0:	2340      	movs	r3, #64	; 0x40
 800f8c2:	2200      	movs	r2, #0
 800f8c4:	2100      	movs	r1, #0
 800f8c6:	6878      	ldr	r0, [r7, #4]
 800f8c8:	f001 fb39 	bl	8010f3e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	2201      	movs	r2, #1
 800f8d0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	2240      	movs	r2, #64	; 0x40
 800f8d8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f8dc:	2340      	movs	r3, #64	; 0x40
 800f8de:	2200      	movs	r2, #0
 800f8e0:	2180      	movs	r1, #128	; 0x80
 800f8e2:	6878      	ldr	r0, [r7, #4]
 800f8e4:	f001 fb2b 	bl	8010f3e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	2201      	movs	r2, #1
 800f8ec:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	2240      	movs	r2, #64	; 0x40
 800f8f2:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800f8f4:	2300      	movs	r3, #0
}
 800f8f6:	4618      	mov	r0, r3
 800f8f8:	3708      	adds	r7, #8
 800f8fa:	46bd      	mov	sp, r7
 800f8fc:	bd80      	pop	{r7, pc}

0800f8fe <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f8fe:	b480      	push	{r7}
 800f900:	b083      	sub	sp, #12
 800f902:	af00      	add	r7, sp, #0
 800f904:	6078      	str	r0, [r7, #4]
 800f906:	460b      	mov	r3, r1
 800f908:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	78fa      	ldrb	r2, [r7, #3]
 800f90e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f910:	2300      	movs	r3, #0
}
 800f912:	4618      	mov	r0, r3
 800f914:	370c      	adds	r7, #12
 800f916:	46bd      	mov	sp, r7
 800f918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f91c:	4770      	bx	lr

0800f91e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800f91e:	b480      	push	{r7}
 800f920:	b083      	sub	sp, #12
 800f922:	af00      	add	r7, sp, #0
 800f924:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f92c:	b2da      	uxtb	r2, r3
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	2204      	movs	r2, #4
 800f938:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800f93c:	2300      	movs	r3, #0
}
 800f93e:	4618      	mov	r0, r3
 800f940:	370c      	adds	r7, #12
 800f942:	46bd      	mov	sp, r7
 800f944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f948:	4770      	bx	lr

0800f94a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800f94a:	b480      	push	{r7}
 800f94c:	b083      	sub	sp, #12
 800f94e:	af00      	add	r7, sp, #0
 800f950:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f958:	b2db      	uxtb	r3, r3
 800f95a:	2b04      	cmp	r3, #4
 800f95c:	d106      	bne.n	800f96c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800f964:	b2da      	uxtb	r2, r3
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800f96c:	2300      	movs	r3, #0
}
 800f96e:	4618      	mov	r0, r3
 800f970:	370c      	adds	r7, #12
 800f972:	46bd      	mov	sp, r7
 800f974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f978:	4770      	bx	lr

0800f97a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f97a:	b580      	push	{r7, lr}
 800f97c:	b082      	sub	sp, #8
 800f97e:	af00      	add	r7, sp, #0
 800f980:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f988:	b2db      	uxtb	r3, r3
 800f98a:	2b03      	cmp	r3, #3
 800f98c:	d10b      	bne.n	800f9a6 <USBD_LL_SOF+0x2c>
  {
    if (pdev->pClass->SOF != NULL)
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f994:	69db      	ldr	r3, [r3, #28]
 800f996:	2b00      	cmp	r3, #0
 800f998:	d005      	beq.n	800f9a6 <USBD_LL_SOF+0x2c>
    {
      pdev->pClass->SOF(pdev);
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f9a0:	69db      	ldr	r3, [r3, #28]
 800f9a2:	6878      	ldr	r0, [r7, #4]
 800f9a4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f9a6:	2300      	movs	r3, #0
}
 800f9a8:	4618      	mov	r0, r3
 800f9aa:	3708      	adds	r7, #8
 800f9ac:	46bd      	mov	sp, r7
 800f9ae:	bd80      	pop	{r7, pc}

0800f9b0 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800f9b0:	b480      	push	{r7}
 800f9b2:	b083      	sub	sp, #12
 800f9b4:	af00      	add	r7, sp, #0
 800f9b6:	6078      	str	r0, [r7, #4]
 800f9b8:	460b      	mov	r3, r1
 800f9ba:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800f9bc:	2300      	movs	r3, #0
}
 800f9be:	4618      	mov	r0, r3
 800f9c0:	370c      	adds	r7, #12
 800f9c2:	46bd      	mov	sp, r7
 800f9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9c8:	4770      	bx	lr

0800f9ca <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800f9ca:	b480      	push	{r7}
 800f9cc:	b083      	sub	sp, #12
 800f9ce:	af00      	add	r7, sp, #0
 800f9d0:	6078      	str	r0, [r7, #4]
 800f9d2:	460b      	mov	r3, r1
 800f9d4:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800f9d6:	2300      	movs	r3, #0
}
 800f9d8:	4618      	mov	r0, r3
 800f9da:	370c      	adds	r7, #12
 800f9dc:	46bd      	mov	sp, r7
 800f9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e2:	4770      	bx	lr

0800f9e4 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800f9e4:	b480      	push	{r7}
 800f9e6:	b083      	sub	sp, #12
 800f9e8:	af00      	add	r7, sp, #0
 800f9ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f9ec:	2300      	movs	r3, #0
}
 800f9ee:	4618      	mov	r0, r3
 800f9f0:	370c      	adds	r7, #12
 800f9f2:	46bd      	mov	sp, r7
 800f9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f8:	4770      	bx	lr

0800f9fa <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800f9fa:	b580      	push	{r7, lr}
 800f9fc:	b082      	sub	sp, #8
 800f9fe:	af00      	add	r7, sp, #0
 800fa00:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	2201      	movs	r2, #1
 800fa06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d009      	beq.n	800fa28 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa1a:	685b      	ldr	r3, [r3, #4]
 800fa1c:	687a      	ldr	r2, [r7, #4]
 800fa1e:	6852      	ldr	r2, [r2, #4]
 800fa20:	b2d2      	uxtb	r2, r2
 800fa22:	4611      	mov	r1, r2
 800fa24:	6878      	ldr	r0, [r7, #4]
 800fa26:	4798      	blx	r3
  }

  return USBD_OK;
 800fa28:	2300      	movs	r3, #0
}
 800fa2a:	4618      	mov	r0, r3
 800fa2c:	3708      	adds	r7, #8
 800fa2e:	46bd      	mov	sp, r7
 800fa30:	bd80      	pop	{r7, pc}

0800fa32 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800fa32:	b480      	push	{r7}
 800fa34:	b087      	sub	sp, #28
 800fa36:	af00      	add	r7, sp, #0
 800fa38:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800fa3e:	697b      	ldr	r3, [r7, #20]
 800fa40:	781b      	ldrb	r3, [r3, #0]
 800fa42:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800fa44:	697b      	ldr	r3, [r7, #20]
 800fa46:	3301      	adds	r3, #1
 800fa48:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800fa4a:	697b      	ldr	r3, [r7, #20]
 800fa4c:	781b      	ldrb	r3, [r3, #0]
 800fa4e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800fa50:	8a3b      	ldrh	r3, [r7, #16]
 800fa52:	021b      	lsls	r3, r3, #8
 800fa54:	b21a      	sxth	r2, r3
 800fa56:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800fa5a:	4313      	orrs	r3, r2
 800fa5c:	b21b      	sxth	r3, r3
 800fa5e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800fa60:	89fb      	ldrh	r3, [r7, #14]
}
 800fa62:	4618      	mov	r0, r3
 800fa64:	371c      	adds	r7, #28
 800fa66:	46bd      	mov	sp, r7
 800fa68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa6c:	4770      	bx	lr
	...

0800fa70 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fa70:	b580      	push	{r7, lr}
 800fa72:	b084      	sub	sp, #16
 800fa74:	af00      	add	r7, sp, #0
 800fa76:	6078      	str	r0, [r7, #4]
 800fa78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fa7a:	2300      	movs	r3, #0
 800fa7c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fa7e:	683b      	ldr	r3, [r7, #0]
 800fa80:	781b      	ldrb	r3, [r3, #0]
 800fa82:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fa86:	2b40      	cmp	r3, #64	; 0x40
 800fa88:	d005      	beq.n	800fa96 <USBD_StdDevReq+0x26>
 800fa8a:	2b40      	cmp	r3, #64	; 0x40
 800fa8c:	d853      	bhi.n	800fb36 <USBD_StdDevReq+0xc6>
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d00b      	beq.n	800faaa <USBD_StdDevReq+0x3a>
 800fa92:	2b20      	cmp	r3, #32
 800fa94:	d14f      	bne.n	800fb36 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa9c:	689b      	ldr	r3, [r3, #8]
 800fa9e:	6839      	ldr	r1, [r7, #0]
 800faa0:	6878      	ldr	r0, [r7, #4]
 800faa2:	4798      	blx	r3
 800faa4:	4603      	mov	r3, r0
 800faa6:	73fb      	strb	r3, [r7, #15]
    break;
 800faa8:	e04a      	b.n	800fb40 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800faaa:	683b      	ldr	r3, [r7, #0]
 800faac:	785b      	ldrb	r3, [r3, #1]
 800faae:	2b09      	cmp	r3, #9
 800fab0:	d83b      	bhi.n	800fb2a <USBD_StdDevReq+0xba>
 800fab2:	a201      	add	r2, pc, #4	; (adr r2, 800fab8 <USBD_StdDevReq+0x48>)
 800fab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fab8:	0800fb0d 	.word	0x0800fb0d
 800fabc:	0800fb21 	.word	0x0800fb21
 800fac0:	0800fb2b 	.word	0x0800fb2b
 800fac4:	0800fb17 	.word	0x0800fb17
 800fac8:	0800fb2b 	.word	0x0800fb2b
 800facc:	0800faeb 	.word	0x0800faeb
 800fad0:	0800fae1 	.word	0x0800fae1
 800fad4:	0800fb2b 	.word	0x0800fb2b
 800fad8:	0800fb03 	.word	0x0800fb03
 800fadc:	0800faf5 	.word	0x0800faf5
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800fae0:	6839      	ldr	r1, [r7, #0]
 800fae2:	6878      	ldr	r0, [r7, #4]
 800fae4:	f000 f9dc 	bl	800fea0 <USBD_GetDescriptor>
      break;
 800fae8:	e024      	b.n	800fb34 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800faea:	6839      	ldr	r1, [r7, #0]
 800faec:	6878      	ldr	r0, [r7, #4]
 800faee:	f000 fb41 	bl	8010174 <USBD_SetAddress>
      break;
 800faf2:	e01f      	b.n	800fb34 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800faf4:	6839      	ldr	r1, [r7, #0]
 800faf6:	6878      	ldr	r0, [r7, #4]
 800faf8:	f000 fb80 	bl	80101fc <USBD_SetConfig>
 800fafc:	4603      	mov	r3, r0
 800fafe:	73fb      	strb	r3, [r7, #15]
      break;
 800fb00:	e018      	b.n	800fb34 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800fb02:	6839      	ldr	r1, [r7, #0]
 800fb04:	6878      	ldr	r0, [r7, #4]
 800fb06:	f000 fc1f 	bl	8010348 <USBD_GetConfig>
      break;
 800fb0a:	e013      	b.n	800fb34 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800fb0c:	6839      	ldr	r1, [r7, #0]
 800fb0e:	6878      	ldr	r0, [r7, #4]
 800fb10:	f000 fc50 	bl	80103b4 <USBD_GetStatus>
      break;
 800fb14:	e00e      	b.n	800fb34 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800fb16:	6839      	ldr	r1, [r7, #0]
 800fb18:	6878      	ldr	r0, [r7, #4]
 800fb1a:	f000 fc7f 	bl	801041c <USBD_SetFeature>
      break;
 800fb1e:	e009      	b.n	800fb34 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800fb20:	6839      	ldr	r1, [r7, #0]
 800fb22:	6878      	ldr	r0, [r7, #4]
 800fb24:	f000 fc8e 	bl	8010444 <USBD_ClrFeature>
      break;
 800fb28:	e004      	b.n	800fb34 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800fb2a:	6839      	ldr	r1, [r7, #0]
 800fb2c:	6878      	ldr	r0, [r7, #4]
 800fb2e:	f000 fce5 	bl	80104fc <USBD_CtlError>
      break;
 800fb32:	bf00      	nop
    }
    break;
 800fb34:	e004      	b.n	800fb40 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800fb36:	6839      	ldr	r1, [r7, #0]
 800fb38:	6878      	ldr	r0, [r7, #4]
 800fb3a:	f000 fcdf 	bl	80104fc <USBD_CtlError>
    break;
 800fb3e:	bf00      	nop
  }

  return ret;
 800fb40:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb42:	4618      	mov	r0, r3
 800fb44:	3710      	adds	r7, #16
 800fb46:	46bd      	mov	sp, r7
 800fb48:	bd80      	pop	{r7, pc}
 800fb4a:	bf00      	nop

0800fb4c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fb4c:	b580      	push	{r7, lr}
 800fb4e:	b084      	sub	sp, #16
 800fb50:	af00      	add	r7, sp, #0
 800fb52:	6078      	str	r0, [r7, #4]
 800fb54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fb56:	2300      	movs	r3, #0
 800fb58:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fb5a:	683b      	ldr	r3, [r7, #0]
 800fb5c:	781b      	ldrb	r3, [r3, #0]
 800fb5e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fb62:	2b40      	cmp	r3, #64	; 0x40
 800fb64:	d005      	beq.n	800fb72 <USBD_StdItfReq+0x26>
 800fb66:	2b40      	cmp	r3, #64	; 0x40
 800fb68:	d82f      	bhi.n	800fbca <USBD_StdItfReq+0x7e>
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d001      	beq.n	800fb72 <USBD_StdItfReq+0x26>
 800fb6e:	2b20      	cmp	r3, #32
 800fb70:	d12b      	bne.n	800fbca <USBD_StdItfReq+0x7e>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fb78:	b2db      	uxtb	r3, r3
 800fb7a:	3b01      	subs	r3, #1
 800fb7c:	2b02      	cmp	r3, #2
 800fb7e:	d81d      	bhi.n	800fbbc <USBD_StdItfReq+0x70>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800fb80:	683b      	ldr	r3, [r7, #0]
 800fb82:	889b      	ldrh	r3, [r3, #4]
 800fb84:	b2db      	uxtb	r3, r3
 800fb86:	2b01      	cmp	r3, #1
 800fb88:	d813      	bhi.n	800fbb2 <USBD_StdItfReq+0x66>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fb90:	689b      	ldr	r3, [r3, #8]
 800fb92:	6839      	ldr	r1, [r7, #0]
 800fb94:	6878      	ldr	r0, [r7, #4]
 800fb96:	4798      	blx	r3
 800fb98:	4603      	mov	r3, r0
 800fb9a:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800fb9c:	683b      	ldr	r3, [r7, #0]
 800fb9e:	88db      	ldrh	r3, [r3, #6]
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d110      	bne.n	800fbc6 <USBD_StdItfReq+0x7a>
 800fba4:	7bfb      	ldrb	r3, [r7, #15]
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d10d      	bne.n	800fbc6 <USBD_StdItfReq+0x7a>
        {
          (void)USBD_CtlSendStatus(pdev);
 800fbaa:	6878      	ldr	r0, [r7, #4]
 800fbac:	f000 fd71 	bl	8010692 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800fbb0:	e009      	b.n	800fbc6 <USBD_StdItfReq+0x7a>
        USBD_CtlError(pdev, req);
 800fbb2:	6839      	ldr	r1, [r7, #0]
 800fbb4:	6878      	ldr	r0, [r7, #4]
 800fbb6:	f000 fca1 	bl	80104fc <USBD_CtlError>
      break;
 800fbba:	e004      	b.n	800fbc6 <USBD_StdItfReq+0x7a>

    default:
      USBD_CtlError(pdev, req);
 800fbbc:	6839      	ldr	r1, [r7, #0]
 800fbbe:	6878      	ldr	r0, [r7, #4]
 800fbc0:	f000 fc9c 	bl	80104fc <USBD_CtlError>
      break;
 800fbc4:	e000      	b.n	800fbc8 <USBD_StdItfReq+0x7c>
      break;
 800fbc6:	bf00      	nop
    }
    break;
 800fbc8:	e004      	b.n	800fbd4 <USBD_StdItfReq+0x88>

  default:
    USBD_CtlError(pdev, req);
 800fbca:	6839      	ldr	r1, [r7, #0]
 800fbcc:	6878      	ldr	r0, [r7, #4]
 800fbce:	f000 fc95 	bl	80104fc <USBD_CtlError>
    break;
 800fbd2:	bf00      	nop
  }

  return ret;
 800fbd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800fbd6:	4618      	mov	r0, r3
 800fbd8:	3710      	adds	r7, #16
 800fbda:	46bd      	mov	sp, r7
 800fbdc:	bd80      	pop	{r7, pc}

0800fbde <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fbde:	b580      	push	{r7, lr}
 800fbe0:	b084      	sub	sp, #16
 800fbe2:	af00      	add	r7, sp, #0
 800fbe4:	6078      	str	r0, [r7, #4]
 800fbe6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800fbe8:	2300      	movs	r3, #0
 800fbea:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800fbec:	683b      	ldr	r3, [r7, #0]
 800fbee:	889b      	ldrh	r3, [r3, #4]
 800fbf0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fbf2:	683b      	ldr	r3, [r7, #0]
 800fbf4:	781b      	ldrb	r3, [r3, #0]
 800fbf6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fbfa:	2b40      	cmp	r3, #64	; 0x40
 800fbfc:	d007      	beq.n	800fc0e <USBD_StdEPReq+0x30>
 800fbfe:	2b40      	cmp	r3, #64	; 0x40
 800fc00:	f200 8143 	bhi.w	800fe8a <USBD_StdEPReq+0x2ac>
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d00c      	beq.n	800fc22 <USBD_StdEPReq+0x44>
 800fc08:	2b20      	cmp	r3, #32
 800fc0a:	f040 813e 	bne.w	800fe8a <USBD_StdEPReq+0x2ac>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc14:	689b      	ldr	r3, [r3, #8]
 800fc16:	6839      	ldr	r1, [r7, #0]
 800fc18:	6878      	ldr	r0, [r7, #4]
 800fc1a:	4798      	blx	r3
 800fc1c:	4603      	mov	r3, r0
 800fc1e:	73fb      	strb	r3, [r7, #15]
    break;
 800fc20:	e138      	b.n	800fe94 <USBD_StdEPReq+0x2b6>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800fc22:	683b      	ldr	r3, [r7, #0]
 800fc24:	785b      	ldrb	r3, [r3, #1]
 800fc26:	2b03      	cmp	r3, #3
 800fc28:	d007      	beq.n	800fc3a <USBD_StdEPReq+0x5c>
 800fc2a:	2b03      	cmp	r3, #3
 800fc2c:	f300 8127 	bgt.w	800fe7e <USBD_StdEPReq+0x2a0>
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d07d      	beq.n	800fd30 <USBD_StdEPReq+0x152>
 800fc34:	2b01      	cmp	r3, #1
 800fc36:	d03c      	beq.n	800fcb2 <USBD_StdEPReq+0xd4>
 800fc38:	e121      	b.n	800fe7e <USBD_StdEPReq+0x2a0>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fc40:	b2db      	uxtb	r3, r3
 800fc42:	2b02      	cmp	r3, #2
 800fc44:	d002      	beq.n	800fc4c <USBD_StdEPReq+0x6e>
 800fc46:	2b03      	cmp	r3, #3
 800fc48:	d016      	beq.n	800fc78 <USBD_StdEPReq+0x9a>
 800fc4a:	e02c      	b.n	800fca6 <USBD_StdEPReq+0xc8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fc4c:	7bbb      	ldrb	r3, [r7, #14]
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d00d      	beq.n	800fc6e <USBD_StdEPReq+0x90>
 800fc52:	7bbb      	ldrb	r3, [r7, #14]
 800fc54:	2b80      	cmp	r3, #128	; 0x80
 800fc56:	d00a      	beq.n	800fc6e <USBD_StdEPReq+0x90>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800fc58:	7bbb      	ldrb	r3, [r7, #14]
 800fc5a:	4619      	mov	r1, r3
 800fc5c:	6878      	ldr	r0, [r7, #4]
 800fc5e:	f001 f9b3 	bl	8010fc8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800fc62:	2180      	movs	r1, #128	; 0x80
 800fc64:	6878      	ldr	r0, [r7, #4]
 800fc66:	f001 f9af 	bl	8010fc8 <USBD_LL_StallEP>
 800fc6a:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800fc6c:	e020      	b.n	800fcb0 <USBD_StdEPReq+0xd2>
          USBD_CtlError(pdev, req);
 800fc6e:	6839      	ldr	r1, [r7, #0]
 800fc70:	6878      	ldr	r0, [r7, #4]
 800fc72:	f000 fc43 	bl	80104fc <USBD_CtlError>
        break;
 800fc76:	e01b      	b.n	800fcb0 <USBD_StdEPReq+0xd2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800fc78:	683b      	ldr	r3, [r7, #0]
 800fc7a:	885b      	ldrh	r3, [r3, #2]
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d10e      	bne.n	800fc9e <USBD_StdEPReq+0xc0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800fc80:	7bbb      	ldrb	r3, [r7, #14]
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d00b      	beq.n	800fc9e <USBD_StdEPReq+0xc0>
 800fc86:	7bbb      	ldrb	r3, [r7, #14]
 800fc88:	2b80      	cmp	r3, #128	; 0x80
 800fc8a:	d008      	beq.n	800fc9e <USBD_StdEPReq+0xc0>
 800fc8c:	683b      	ldr	r3, [r7, #0]
 800fc8e:	88db      	ldrh	r3, [r3, #6]
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d104      	bne.n	800fc9e <USBD_StdEPReq+0xc0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800fc94:	7bbb      	ldrb	r3, [r7, #14]
 800fc96:	4619      	mov	r1, r3
 800fc98:	6878      	ldr	r0, [r7, #4]
 800fc9a:	f001 f995 	bl	8010fc8 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800fc9e:	6878      	ldr	r0, [r7, #4]
 800fca0:	f000 fcf7 	bl	8010692 <USBD_CtlSendStatus>

        break;
 800fca4:	e004      	b.n	800fcb0 <USBD_StdEPReq+0xd2>

      default:
        USBD_CtlError(pdev, req);
 800fca6:	6839      	ldr	r1, [r7, #0]
 800fca8:	6878      	ldr	r0, [r7, #4]
 800fcaa:	f000 fc27 	bl	80104fc <USBD_CtlError>
        break;
 800fcae:	bf00      	nop
      }
      break;
 800fcb0:	e0ea      	b.n	800fe88 <USBD_StdEPReq+0x2aa>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fcb8:	b2db      	uxtb	r3, r3
 800fcba:	2b02      	cmp	r3, #2
 800fcbc:	d002      	beq.n	800fcc4 <USBD_StdEPReq+0xe6>
 800fcbe:	2b03      	cmp	r3, #3
 800fcc0:	d016      	beq.n	800fcf0 <USBD_StdEPReq+0x112>
 800fcc2:	e02e      	b.n	800fd22 <USBD_StdEPReq+0x144>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fcc4:	7bbb      	ldrb	r3, [r7, #14]
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d00d      	beq.n	800fce6 <USBD_StdEPReq+0x108>
 800fcca:	7bbb      	ldrb	r3, [r7, #14]
 800fccc:	2b80      	cmp	r3, #128	; 0x80
 800fcce:	d00a      	beq.n	800fce6 <USBD_StdEPReq+0x108>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800fcd0:	7bbb      	ldrb	r3, [r7, #14]
 800fcd2:	4619      	mov	r1, r3
 800fcd4:	6878      	ldr	r0, [r7, #4]
 800fcd6:	f001 f977 	bl	8010fc8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800fcda:	2180      	movs	r1, #128	; 0x80
 800fcdc:	6878      	ldr	r0, [r7, #4]
 800fcde:	f001 f973 	bl	8010fc8 <USBD_LL_StallEP>
 800fce2:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800fce4:	e023      	b.n	800fd2e <USBD_StdEPReq+0x150>
          USBD_CtlError(pdev, req);
 800fce6:	6839      	ldr	r1, [r7, #0]
 800fce8:	6878      	ldr	r0, [r7, #4]
 800fcea:	f000 fc07 	bl	80104fc <USBD_CtlError>
        break;
 800fcee:	e01e      	b.n	800fd2e <USBD_StdEPReq+0x150>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800fcf0:	683b      	ldr	r3, [r7, #0]
 800fcf2:	885b      	ldrh	r3, [r3, #2]
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d119      	bne.n	800fd2c <USBD_StdEPReq+0x14e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800fcf8:	7bbb      	ldrb	r3, [r7, #14]
 800fcfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d004      	beq.n	800fd0c <USBD_StdEPReq+0x12e>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800fd02:	7bbb      	ldrb	r3, [r7, #14]
 800fd04:	4619      	mov	r1, r3
 800fd06:	6878      	ldr	r0, [r7, #4]
 800fd08:	f001 f97d 	bl	8011006 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800fd0c:	6878      	ldr	r0, [r7, #4]
 800fd0e:	f000 fcc0 	bl	8010692 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fd18:	689b      	ldr	r3, [r3, #8]
 800fd1a:	6839      	ldr	r1, [r7, #0]
 800fd1c:	6878      	ldr	r0, [r7, #4]
 800fd1e:	4798      	blx	r3
        }
        break;
 800fd20:	e004      	b.n	800fd2c <USBD_StdEPReq+0x14e>

      default:
        USBD_CtlError(pdev, req);
 800fd22:	6839      	ldr	r1, [r7, #0]
 800fd24:	6878      	ldr	r0, [r7, #4]
 800fd26:	f000 fbe9 	bl	80104fc <USBD_CtlError>
        break;
 800fd2a:	e000      	b.n	800fd2e <USBD_StdEPReq+0x150>
        break;
 800fd2c:	bf00      	nop
      }
      break;
 800fd2e:	e0ab      	b.n	800fe88 <USBD_StdEPReq+0x2aa>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fd36:	b2db      	uxtb	r3, r3
 800fd38:	2b02      	cmp	r3, #2
 800fd3a:	d002      	beq.n	800fd42 <USBD_StdEPReq+0x164>
 800fd3c:	2b03      	cmp	r3, #3
 800fd3e:	d032      	beq.n	800fda6 <USBD_StdEPReq+0x1c8>
 800fd40:	e097      	b.n	800fe72 <USBD_StdEPReq+0x294>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fd42:	7bbb      	ldrb	r3, [r7, #14]
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d007      	beq.n	800fd58 <USBD_StdEPReq+0x17a>
 800fd48:	7bbb      	ldrb	r3, [r7, #14]
 800fd4a:	2b80      	cmp	r3, #128	; 0x80
 800fd4c:	d004      	beq.n	800fd58 <USBD_StdEPReq+0x17a>
        {
          USBD_CtlError(pdev, req);
 800fd4e:	6839      	ldr	r1, [r7, #0]
 800fd50:	6878      	ldr	r0, [r7, #4]
 800fd52:	f000 fbd3 	bl	80104fc <USBD_CtlError>
          break;
 800fd56:	e091      	b.n	800fe7c <USBD_StdEPReq+0x29e>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fd58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	da0b      	bge.n	800fd78 <USBD_StdEPReq+0x19a>
 800fd60:	7bbb      	ldrb	r3, [r7, #14]
 800fd62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fd66:	4613      	mov	r3, r2
 800fd68:	009b      	lsls	r3, r3, #2
 800fd6a:	4413      	add	r3, r2
 800fd6c:	009b      	lsls	r3, r3, #2
 800fd6e:	3310      	adds	r3, #16
 800fd70:	687a      	ldr	r2, [r7, #4]
 800fd72:	4413      	add	r3, r2
 800fd74:	3304      	adds	r3, #4
 800fd76:	e00b      	b.n	800fd90 <USBD_StdEPReq+0x1b2>
              &pdev->ep_out[ep_addr & 0x7FU];
 800fd78:	7bbb      	ldrb	r3, [r7, #14]
 800fd7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fd7e:	4613      	mov	r3, r2
 800fd80:	009b      	lsls	r3, r3, #2
 800fd82:	4413      	add	r3, r2
 800fd84:	009b      	lsls	r3, r3, #2
 800fd86:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800fd8a:	687a      	ldr	r2, [r7, #4]
 800fd8c:	4413      	add	r3, r2
 800fd8e:	3304      	adds	r3, #4
 800fd90:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800fd92:	68bb      	ldr	r3, [r7, #8]
 800fd94:	2200      	movs	r2, #0
 800fd96:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800fd98:	68bb      	ldr	r3, [r7, #8]
 800fd9a:	2202      	movs	r2, #2
 800fd9c:	4619      	mov	r1, r3
 800fd9e:	6878      	ldr	r0, [r7, #4]
 800fda0:	f000 fc1d 	bl	80105de <USBD_CtlSendData>
        break;
 800fda4:	e06a      	b.n	800fe7c <USBD_StdEPReq+0x29e>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800fda6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	da11      	bge.n	800fdd2 <USBD_StdEPReq+0x1f4>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800fdae:	7bbb      	ldrb	r3, [r7, #14]
 800fdb0:	f003 020f 	and.w	r2, r3, #15
 800fdb4:	6879      	ldr	r1, [r7, #4]
 800fdb6:	4613      	mov	r3, r2
 800fdb8:	009b      	lsls	r3, r3, #2
 800fdba:	4413      	add	r3, r2
 800fdbc:	009b      	lsls	r3, r3, #2
 800fdbe:	440b      	add	r3, r1
 800fdc0:	3324      	adds	r3, #36	; 0x24
 800fdc2:	881b      	ldrh	r3, [r3, #0]
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d117      	bne.n	800fdf8 <USBD_StdEPReq+0x21a>
          {
            USBD_CtlError(pdev, req);
 800fdc8:	6839      	ldr	r1, [r7, #0]
 800fdca:	6878      	ldr	r0, [r7, #4]
 800fdcc:	f000 fb96 	bl	80104fc <USBD_CtlError>
            break;
 800fdd0:	e054      	b.n	800fe7c <USBD_StdEPReq+0x29e>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800fdd2:	7bbb      	ldrb	r3, [r7, #14]
 800fdd4:	f003 020f 	and.w	r2, r3, #15
 800fdd8:	6879      	ldr	r1, [r7, #4]
 800fdda:	4613      	mov	r3, r2
 800fddc:	009b      	lsls	r3, r3, #2
 800fdde:	4413      	add	r3, r2
 800fde0:	009b      	lsls	r3, r3, #2
 800fde2:	440b      	add	r3, r1
 800fde4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800fde8:	881b      	ldrh	r3, [r3, #0]
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d104      	bne.n	800fdf8 <USBD_StdEPReq+0x21a>
          {
            USBD_CtlError(pdev, req);
 800fdee:	6839      	ldr	r1, [r7, #0]
 800fdf0:	6878      	ldr	r0, [r7, #4]
 800fdf2:	f000 fb83 	bl	80104fc <USBD_CtlError>
            break;
 800fdf6:	e041      	b.n	800fe7c <USBD_StdEPReq+0x29e>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fdf8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	da0b      	bge.n	800fe18 <USBD_StdEPReq+0x23a>
 800fe00:	7bbb      	ldrb	r3, [r7, #14]
 800fe02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fe06:	4613      	mov	r3, r2
 800fe08:	009b      	lsls	r3, r3, #2
 800fe0a:	4413      	add	r3, r2
 800fe0c:	009b      	lsls	r3, r3, #2
 800fe0e:	3310      	adds	r3, #16
 800fe10:	687a      	ldr	r2, [r7, #4]
 800fe12:	4413      	add	r3, r2
 800fe14:	3304      	adds	r3, #4
 800fe16:	e00b      	b.n	800fe30 <USBD_StdEPReq+0x252>
              &pdev->ep_out[ep_addr & 0x7FU];
 800fe18:	7bbb      	ldrb	r3, [r7, #14]
 800fe1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fe1e:	4613      	mov	r3, r2
 800fe20:	009b      	lsls	r3, r3, #2
 800fe22:	4413      	add	r3, r2
 800fe24:	009b      	lsls	r3, r3, #2
 800fe26:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800fe2a:	687a      	ldr	r2, [r7, #4]
 800fe2c:	4413      	add	r3, r2
 800fe2e:	3304      	adds	r3, #4
 800fe30:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800fe32:	7bbb      	ldrb	r3, [r7, #14]
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d002      	beq.n	800fe3e <USBD_StdEPReq+0x260>
 800fe38:	7bbb      	ldrb	r3, [r7, #14]
 800fe3a:	2b80      	cmp	r3, #128	; 0x80
 800fe3c:	d103      	bne.n	800fe46 <USBD_StdEPReq+0x268>
          {
            pep->status = 0x0000U;
 800fe3e:	68bb      	ldr	r3, [r7, #8]
 800fe40:	2200      	movs	r2, #0
 800fe42:	601a      	str	r2, [r3, #0]
 800fe44:	e00e      	b.n	800fe64 <USBD_StdEPReq+0x286>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800fe46:	7bbb      	ldrb	r3, [r7, #14]
 800fe48:	4619      	mov	r1, r3
 800fe4a:	6878      	ldr	r0, [r7, #4]
 800fe4c:	f001 f8fa 	bl	8011044 <USBD_LL_IsStallEP>
 800fe50:	4603      	mov	r3, r0
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d003      	beq.n	800fe5e <USBD_StdEPReq+0x280>
          {
            pep->status = 0x0001U;
 800fe56:	68bb      	ldr	r3, [r7, #8]
 800fe58:	2201      	movs	r2, #1
 800fe5a:	601a      	str	r2, [r3, #0]
 800fe5c:	e002      	b.n	800fe64 <USBD_StdEPReq+0x286>
          }
          else
          {
            pep->status = 0x0000U;
 800fe5e:	68bb      	ldr	r3, [r7, #8]
 800fe60:	2200      	movs	r2, #0
 800fe62:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800fe64:	68bb      	ldr	r3, [r7, #8]
 800fe66:	2202      	movs	r2, #2
 800fe68:	4619      	mov	r1, r3
 800fe6a:	6878      	ldr	r0, [r7, #4]
 800fe6c:	f000 fbb7 	bl	80105de <USBD_CtlSendData>
          break;
 800fe70:	e004      	b.n	800fe7c <USBD_StdEPReq+0x29e>

      default:
        USBD_CtlError(pdev, req);
 800fe72:	6839      	ldr	r1, [r7, #0]
 800fe74:	6878      	ldr	r0, [r7, #4]
 800fe76:	f000 fb41 	bl	80104fc <USBD_CtlError>
        break;
 800fe7a:	bf00      	nop
      }
      break;
 800fe7c:	e004      	b.n	800fe88 <USBD_StdEPReq+0x2aa>

    default:
      USBD_CtlError(pdev, req);
 800fe7e:	6839      	ldr	r1, [r7, #0]
 800fe80:	6878      	ldr	r0, [r7, #4]
 800fe82:	f000 fb3b 	bl	80104fc <USBD_CtlError>
      break;
 800fe86:	bf00      	nop
    }
    break;
 800fe88:	e004      	b.n	800fe94 <USBD_StdEPReq+0x2b6>

  default:
    USBD_CtlError(pdev, req);
 800fe8a:	6839      	ldr	r1, [r7, #0]
 800fe8c:	6878      	ldr	r0, [r7, #4]
 800fe8e:	f000 fb35 	bl	80104fc <USBD_CtlError>
    break;
 800fe92:	bf00      	nop
  }

  return ret;
 800fe94:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe96:	4618      	mov	r0, r3
 800fe98:	3710      	adds	r7, #16
 800fe9a:	46bd      	mov	sp, r7
 800fe9c:	bd80      	pop	{r7, pc}
	...

0800fea0 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fea0:	b580      	push	{r7, lr}
 800fea2:	b084      	sub	sp, #16
 800fea4:	af00      	add	r7, sp, #0
 800fea6:	6078      	str	r0, [r7, #4]
 800fea8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800feaa:	2300      	movs	r3, #0
 800feac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800feae:	2300      	movs	r3, #0
 800feb0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800feb2:	2300      	movs	r3, #0
 800feb4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800feb6:	683b      	ldr	r3, [r7, #0]
 800feb8:	885b      	ldrh	r3, [r3, #2]
 800feba:	0a1b      	lsrs	r3, r3, #8
 800febc:	b29b      	uxth	r3, r3
 800febe:	3b01      	subs	r3, #1
 800fec0:	2b06      	cmp	r3, #6
 800fec2:	f200 8128 	bhi.w	8010116 <USBD_GetDescriptor+0x276>
 800fec6:	a201      	add	r2, pc, #4	; (adr r2, 800fecc <USBD_GetDescriptor+0x2c>)
 800fec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fecc:	0800fee9 	.word	0x0800fee9
 800fed0:	0800ff01 	.word	0x0800ff01
 800fed4:	0800ff41 	.word	0x0800ff41
 800fed8:	08010117 	.word	0x08010117
 800fedc:	08010117 	.word	0x08010117
 800fee0:	080100b7 	.word	0x080100b7
 800fee4:	080100e3 	.word	0x080100e3
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	687a      	ldr	r2, [r7, #4]
 800fef2:	7c12      	ldrb	r2, [r2, #16]
 800fef4:	f107 0108 	add.w	r1, r7, #8
 800fef8:	4610      	mov	r0, r2
 800fefa:	4798      	blx	r3
 800fefc:	60f8      	str	r0, [r7, #12]
    break;
 800fefe:	e112      	b.n	8010126 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	7c1b      	ldrb	r3, [r3, #16]
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d10d      	bne.n	800ff24 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ff0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff10:	f107 0208 	add.w	r2, r7, #8
 800ff14:	4610      	mov	r0, r2
 800ff16:	4798      	blx	r3
 800ff18:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	3301      	adds	r3, #1
 800ff1e:	2202      	movs	r2, #2
 800ff20:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800ff22:	e100      	b.n	8010126 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ff2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff2c:	f107 0208 	add.w	r2, r7, #8
 800ff30:	4610      	mov	r0, r2
 800ff32:	4798      	blx	r3
 800ff34:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	3301      	adds	r3, #1
 800ff3a:	2202      	movs	r2, #2
 800ff3c:	701a      	strb	r2, [r3, #0]
    break;
 800ff3e:	e0f2      	b.n	8010126 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800ff40:	683b      	ldr	r3, [r7, #0]
 800ff42:	885b      	ldrh	r3, [r3, #2]
 800ff44:	b2db      	uxtb	r3, r3
 800ff46:	2b05      	cmp	r3, #5
 800ff48:	f200 80ac 	bhi.w	80100a4 <USBD_GetDescriptor+0x204>
 800ff4c:	a201      	add	r2, pc, #4	; (adr r2, 800ff54 <USBD_GetDescriptor+0xb4>)
 800ff4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff52:	bf00      	nop
 800ff54:	0800ff6d 	.word	0x0800ff6d
 800ff58:	0800ffa1 	.word	0x0800ffa1
 800ff5c:	0800ffd5 	.word	0x0800ffd5
 800ff60:	08010009 	.word	0x08010009
 800ff64:	0801003d 	.word	0x0801003d
 800ff68:	08010071 	.word	0x08010071
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ff72:	685b      	ldr	r3, [r3, #4]
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d00b      	beq.n	800ff90 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ff7e:	685b      	ldr	r3, [r3, #4]
 800ff80:	687a      	ldr	r2, [r7, #4]
 800ff82:	7c12      	ldrb	r2, [r2, #16]
 800ff84:	f107 0108 	add.w	r1, r7, #8
 800ff88:	4610      	mov	r0, r2
 800ff8a:	4798      	blx	r3
 800ff8c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ff8e:	e091      	b.n	80100b4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800ff90:	6839      	ldr	r1, [r7, #0]
 800ff92:	6878      	ldr	r0, [r7, #4]
 800ff94:	f000 fab2 	bl	80104fc <USBD_CtlError>
        err++;
 800ff98:	7afb      	ldrb	r3, [r7, #11]
 800ff9a:	3301      	adds	r3, #1
 800ff9c:	72fb      	strb	r3, [r7, #11]
      break;
 800ff9e:	e089      	b.n	80100b4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ffa6:	689b      	ldr	r3, [r3, #8]
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d00b      	beq.n	800ffc4 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ffb2:	689b      	ldr	r3, [r3, #8]
 800ffb4:	687a      	ldr	r2, [r7, #4]
 800ffb6:	7c12      	ldrb	r2, [r2, #16]
 800ffb8:	f107 0108 	add.w	r1, r7, #8
 800ffbc:	4610      	mov	r0, r2
 800ffbe:	4798      	blx	r3
 800ffc0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ffc2:	e077      	b.n	80100b4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800ffc4:	6839      	ldr	r1, [r7, #0]
 800ffc6:	6878      	ldr	r0, [r7, #4]
 800ffc8:	f000 fa98 	bl	80104fc <USBD_CtlError>
        err++;
 800ffcc:	7afb      	ldrb	r3, [r7, #11]
 800ffce:	3301      	adds	r3, #1
 800ffd0:	72fb      	strb	r3, [r7, #11]
      break;
 800ffd2:	e06f      	b.n	80100b4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ffda:	68db      	ldr	r3, [r3, #12]
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d00b      	beq.n	800fff8 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ffe6:	68db      	ldr	r3, [r3, #12]
 800ffe8:	687a      	ldr	r2, [r7, #4]
 800ffea:	7c12      	ldrb	r2, [r2, #16]
 800ffec:	f107 0108 	add.w	r1, r7, #8
 800fff0:	4610      	mov	r0, r2
 800fff2:	4798      	blx	r3
 800fff4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fff6:	e05d      	b.n	80100b4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800fff8:	6839      	ldr	r1, [r7, #0]
 800fffa:	6878      	ldr	r0, [r7, #4]
 800fffc:	f000 fa7e 	bl	80104fc <USBD_CtlError>
        err++;
 8010000:	7afb      	ldrb	r3, [r7, #11]
 8010002:	3301      	adds	r3, #1
 8010004:	72fb      	strb	r3, [r7, #11]
      break;
 8010006:	e055      	b.n	80100b4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801000e:	691b      	ldr	r3, [r3, #16]
 8010010:	2b00      	cmp	r3, #0
 8010012:	d00b      	beq.n	801002c <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801001a:	691b      	ldr	r3, [r3, #16]
 801001c:	687a      	ldr	r2, [r7, #4]
 801001e:	7c12      	ldrb	r2, [r2, #16]
 8010020:	f107 0108 	add.w	r1, r7, #8
 8010024:	4610      	mov	r0, r2
 8010026:	4798      	blx	r3
 8010028:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801002a:	e043      	b.n	80100b4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 801002c:	6839      	ldr	r1, [r7, #0]
 801002e:	6878      	ldr	r0, [r7, #4]
 8010030:	f000 fa64 	bl	80104fc <USBD_CtlError>
        err++;
 8010034:	7afb      	ldrb	r3, [r7, #11]
 8010036:	3301      	adds	r3, #1
 8010038:	72fb      	strb	r3, [r7, #11]
      break;
 801003a:	e03b      	b.n	80100b4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010042:	695b      	ldr	r3, [r3, #20]
 8010044:	2b00      	cmp	r3, #0
 8010046:	d00b      	beq.n	8010060 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801004e:	695b      	ldr	r3, [r3, #20]
 8010050:	687a      	ldr	r2, [r7, #4]
 8010052:	7c12      	ldrb	r2, [r2, #16]
 8010054:	f107 0108 	add.w	r1, r7, #8
 8010058:	4610      	mov	r0, r2
 801005a:	4798      	blx	r3
 801005c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801005e:	e029      	b.n	80100b4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8010060:	6839      	ldr	r1, [r7, #0]
 8010062:	6878      	ldr	r0, [r7, #4]
 8010064:	f000 fa4a 	bl	80104fc <USBD_CtlError>
        err++;
 8010068:	7afb      	ldrb	r3, [r7, #11]
 801006a:	3301      	adds	r3, #1
 801006c:	72fb      	strb	r3, [r7, #11]
      break;
 801006e:	e021      	b.n	80100b4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010076:	699b      	ldr	r3, [r3, #24]
 8010078:	2b00      	cmp	r3, #0
 801007a:	d00b      	beq.n	8010094 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010082:	699b      	ldr	r3, [r3, #24]
 8010084:	687a      	ldr	r2, [r7, #4]
 8010086:	7c12      	ldrb	r2, [r2, #16]
 8010088:	f107 0108 	add.w	r1, r7, #8
 801008c:	4610      	mov	r0, r2
 801008e:	4798      	blx	r3
 8010090:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010092:	e00f      	b.n	80100b4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8010094:	6839      	ldr	r1, [r7, #0]
 8010096:	6878      	ldr	r0, [r7, #4]
 8010098:	f000 fa30 	bl	80104fc <USBD_CtlError>
        err++;
 801009c:	7afb      	ldrb	r3, [r7, #11]
 801009e:	3301      	adds	r3, #1
 80100a0:	72fb      	strb	r3, [r7, #11]
      break;
 80100a2:	e007      	b.n	80100b4 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 80100a4:	6839      	ldr	r1, [r7, #0]
 80100a6:	6878      	ldr	r0, [r7, #4]
 80100a8:	f000 fa28 	bl	80104fc <USBD_CtlError>
      err++;
 80100ac:	7afb      	ldrb	r3, [r7, #11]
 80100ae:	3301      	adds	r3, #1
 80100b0:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 80100b2:	bf00      	nop
    }
    break;
 80100b4:	e037      	b.n	8010126 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	7c1b      	ldrb	r3, [r3, #16]
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d109      	bne.n	80100d2 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80100c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80100c6:	f107 0208 	add.w	r2, r7, #8
 80100ca:	4610      	mov	r0, r2
 80100cc:	4798      	blx	r3
 80100ce:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80100d0:	e029      	b.n	8010126 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80100d2:	6839      	ldr	r1, [r7, #0]
 80100d4:	6878      	ldr	r0, [r7, #4]
 80100d6:	f000 fa11 	bl	80104fc <USBD_CtlError>
      err++;
 80100da:	7afb      	ldrb	r3, [r7, #11]
 80100dc:	3301      	adds	r3, #1
 80100de:	72fb      	strb	r3, [r7, #11]
    break;
 80100e0:	e021      	b.n	8010126 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	7c1b      	ldrb	r3, [r3, #16]
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d10d      	bne.n	8010106 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80100f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100f2:	f107 0208 	add.w	r2, r7, #8
 80100f6:	4610      	mov	r0, r2
 80100f8:	4798      	blx	r3
 80100fa:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	3301      	adds	r3, #1
 8010100:	2207      	movs	r2, #7
 8010102:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8010104:	e00f      	b.n	8010126 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8010106:	6839      	ldr	r1, [r7, #0]
 8010108:	6878      	ldr	r0, [r7, #4]
 801010a:	f000 f9f7 	bl	80104fc <USBD_CtlError>
      err++;
 801010e:	7afb      	ldrb	r3, [r7, #11]
 8010110:	3301      	adds	r3, #1
 8010112:	72fb      	strb	r3, [r7, #11]
    break;
 8010114:	e007      	b.n	8010126 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8010116:	6839      	ldr	r1, [r7, #0]
 8010118:	6878      	ldr	r0, [r7, #4]
 801011a:	f000 f9ef 	bl	80104fc <USBD_CtlError>
    err++;
 801011e:	7afb      	ldrb	r3, [r7, #11]
 8010120:	3301      	adds	r3, #1
 8010122:	72fb      	strb	r3, [r7, #11]
    break;
 8010124:	bf00      	nop
  }

  if (err != 0U)
 8010126:	7afb      	ldrb	r3, [r7, #11]
 8010128:	2b00      	cmp	r3, #0
 801012a:	d11e      	bne.n	801016a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 801012c:	683b      	ldr	r3, [r7, #0]
 801012e:	88db      	ldrh	r3, [r3, #6]
 8010130:	2b00      	cmp	r3, #0
 8010132:	d016      	beq.n	8010162 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8010134:	893b      	ldrh	r3, [r7, #8]
 8010136:	2b00      	cmp	r3, #0
 8010138:	d00e      	beq.n	8010158 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 801013a:	683b      	ldr	r3, [r7, #0]
 801013c:	88da      	ldrh	r2, [r3, #6]
 801013e:	893b      	ldrh	r3, [r7, #8]
 8010140:	4293      	cmp	r3, r2
 8010142:	bf28      	it	cs
 8010144:	4613      	movcs	r3, r2
 8010146:	b29b      	uxth	r3, r3
 8010148:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 801014a:	893b      	ldrh	r3, [r7, #8]
 801014c:	461a      	mov	r2, r3
 801014e:	68f9      	ldr	r1, [r7, #12]
 8010150:	6878      	ldr	r0, [r7, #4]
 8010152:	f000 fa44 	bl	80105de <USBD_CtlSendData>
 8010156:	e009      	b.n	801016c <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8010158:	6839      	ldr	r1, [r7, #0]
 801015a:	6878      	ldr	r0, [r7, #4]
 801015c:	f000 f9ce 	bl	80104fc <USBD_CtlError>
 8010160:	e004      	b.n	801016c <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8010162:	6878      	ldr	r0, [r7, #4]
 8010164:	f000 fa95 	bl	8010692 <USBD_CtlSendStatus>
 8010168:	e000      	b.n	801016c <USBD_GetDescriptor+0x2cc>
    return;
 801016a:	bf00      	nop
    }
  }
}
 801016c:	3710      	adds	r7, #16
 801016e:	46bd      	mov	sp, r7
 8010170:	bd80      	pop	{r7, pc}
 8010172:	bf00      	nop

08010174 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010174:	b580      	push	{r7, lr}
 8010176:	b084      	sub	sp, #16
 8010178:	af00      	add	r7, sp, #0
 801017a:	6078      	str	r0, [r7, #4]
 801017c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801017e:	683b      	ldr	r3, [r7, #0]
 8010180:	889b      	ldrh	r3, [r3, #4]
 8010182:	2b00      	cmp	r3, #0
 8010184:	d131      	bne.n	80101ea <USBD_SetAddress+0x76>
 8010186:	683b      	ldr	r3, [r7, #0]
 8010188:	88db      	ldrh	r3, [r3, #6]
 801018a:	2b00      	cmp	r3, #0
 801018c:	d12d      	bne.n	80101ea <USBD_SetAddress+0x76>
 801018e:	683b      	ldr	r3, [r7, #0]
 8010190:	885b      	ldrh	r3, [r3, #2]
 8010192:	2b7f      	cmp	r3, #127	; 0x7f
 8010194:	d829      	bhi.n	80101ea <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8010196:	683b      	ldr	r3, [r7, #0]
 8010198:	885b      	ldrh	r3, [r3, #2]
 801019a:	b2db      	uxtb	r3, r3
 801019c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80101a0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80101a8:	b2db      	uxtb	r3, r3
 80101aa:	2b03      	cmp	r3, #3
 80101ac:	d104      	bne.n	80101b8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80101ae:	6839      	ldr	r1, [r7, #0]
 80101b0:	6878      	ldr	r0, [r7, #4]
 80101b2:	f000 f9a3 	bl	80104fc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80101b6:	e01d      	b.n	80101f4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	7bfa      	ldrb	r2, [r7, #15]
 80101bc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80101c0:	7bfb      	ldrb	r3, [r7, #15]
 80101c2:	4619      	mov	r1, r3
 80101c4:	6878      	ldr	r0, [r7, #4]
 80101c6:	f000 ff69 	bl	801109c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80101ca:	6878      	ldr	r0, [r7, #4]
 80101cc:	f000 fa61 	bl	8010692 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80101d0:	7bfb      	ldrb	r3, [r7, #15]
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d004      	beq.n	80101e0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	2202      	movs	r2, #2
 80101da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80101de:	e009      	b.n	80101f4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	2201      	movs	r2, #1
 80101e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80101e8:	e004      	b.n	80101f4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80101ea:	6839      	ldr	r1, [r7, #0]
 80101ec:	6878      	ldr	r0, [r7, #4]
 80101ee:	f000 f985 	bl	80104fc <USBD_CtlError>
  }
}
 80101f2:	bf00      	nop
 80101f4:	bf00      	nop
 80101f6:	3710      	adds	r7, #16
 80101f8:	46bd      	mov	sp, r7
 80101fa:	bd80      	pop	{r7, pc}

080101fc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80101fc:	b580      	push	{r7, lr}
 80101fe:	b084      	sub	sp, #16
 8010200:	af00      	add	r7, sp, #0
 8010202:	6078      	str	r0, [r7, #4]
 8010204:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010206:	2300      	movs	r3, #0
 8010208:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801020a:	683b      	ldr	r3, [r7, #0]
 801020c:	885b      	ldrh	r3, [r3, #2]
 801020e:	b2da      	uxtb	r2, r3
 8010210:	4b4c      	ldr	r3, [pc, #304]	; (8010344 <USBD_SetConfig+0x148>)
 8010212:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8010214:	4b4b      	ldr	r3, [pc, #300]	; (8010344 <USBD_SetConfig+0x148>)
 8010216:	781b      	ldrb	r3, [r3, #0]
 8010218:	2b01      	cmp	r3, #1
 801021a:	d905      	bls.n	8010228 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 801021c:	6839      	ldr	r1, [r7, #0]
 801021e:	6878      	ldr	r0, [r7, #4]
 8010220:	f000 f96c 	bl	80104fc <USBD_CtlError>
    return USBD_FAIL;
 8010224:	2303      	movs	r3, #3
 8010226:	e088      	b.n	801033a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801022e:	b2db      	uxtb	r3, r3
 8010230:	2b02      	cmp	r3, #2
 8010232:	d002      	beq.n	801023a <USBD_SetConfig+0x3e>
 8010234:	2b03      	cmp	r3, #3
 8010236:	d025      	beq.n	8010284 <USBD_SetConfig+0x88>
 8010238:	e071      	b.n	801031e <USBD_SetConfig+0x122>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 801023a:	4b42      	ldr	r3, [pc, #264]	; (8010344 <USBD_SetConfig+0x148>)
 801023c:	781b      	ldrb	r3, [r3, #0]
 801023e:	2b00      	cmp	r3, #0
 8010240:	d01c      	beq.n	801027c <USBD_SetConfig+0x80>
    {
      pdev->dev_config = cfgidx;
 8010242:	4b40      	ldr	r3, [pc, #256]	; (8010344 <USBD_SetConfig+0x148>)
 8010244:	781b      	ldrb	r3, [r3, #0]
 8010246:	461a      	mov	r2, r3
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 801024c:	4b3d      	ldr	r3, [pc, #244]	; (8010344 <USBD_SetConfig+0x148>)
 801024e:	781b      	ldrb	r3, [r3, #0]
 8010250:	4619      	mov	r1, r3
 8010252:	6878      	ldr	r0, [r7, #4]
 8010254:	f7ff f98c 	bl	800f570 <USBD_SetClassConfig>
 8010258:	4603      	mov	r3, r0
 801025a:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 801025c:	7bfb      	ldrb	r3, [r7, #15]
 801025e:	2b00      	cmp	r3, #0
 8010260:	d004      	beq.n	801026c <USBD_SetConfig+0x70>
      {
        USBD_CtlError(pdev, req);
 8010262:	6839      	ldr	r1, [r7, #0]
 8010264:	6878      	ldr	r0, [r7, #4]
 8010266:	f000 f949 	bl	80104fc <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 801026a:	e065      	b.n	8010338 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 801026c:	6878      	ldr	r0, [r7, #4]
 801026e:	f000 fa10 	bl	8010692 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	2203      	movs	r2, #3
 8010276:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 801027a:	e05d      	b.n	8010338 <USBD_SetConfig+0x13c>
      (void)USBD_CtlSendStatus(pdev);
 801027c:	6878      	ldr	r0, [r7, #4]
 801027e:	f000 fa08 	bl	8010692 <USBD_CtlSendStatus>
    break;
 8010282:	e059      	b.n	8010338 <USBD_SetConfig+0x13c>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8010284:	4b2f      	ldr	r3, [pc, #188]	; (8010344 <USBD_SetConfig+0x148>)
 8010286:	781b      	ldrb	r3, [r3, #0]
 8010288:	2b00      	cmp	r3, #0
 801028a:	d112      	bne.n	80102b2 <USBD_SetConfig+0xb6>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	2202      	movs	r2, #2
 8010290:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8010294:	4b2b      	ldr	r3, [pc, #172]	; (8010344 <USBD_SetConfig+0x148>)
 8010296:	781b      	ldrb	r3, [r3, #0]
 8010298:	461a      	mov	r2, r3
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801029e:	4b29      	ldr	r3, [pc, #164]	; (8010344 <USBD_SetConfig+0x148>)
 80102a0:	781b      	ldrb	r3, [r3, #0]
 80102a2:	4619      	mov	r1, r3
 80102a4:	6878      	ldr	r0, [r7, #4]
 80102a6:	f7ff f97f 	bl	800f5a8 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80102aa:	6878      	ldr	r0, [r7, #4]
 80102ac:	f000 f9f1 	bl	8010692 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80102b0:	e042      	b.n	8010338 <USBD_SetConfig+0x13c>
    else if (cfgidx != pdev->dev_config)
 80102b2:	4b24      	ldr	r3, [pc, #144]	; (8010344 <USBD_SetConfig+0x148>)
 80102b4:	781b      	ldrb	r3, [r3, #0]
 80102b6:	461a      	mov	r2, r3
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	685b      	ldr	r3, [r3, #4]
 80102bc:	429a      	cmp	r2, r3
 80102be:	d02a      	beq.n	8010316 <USBD_SetConfig+0x11a>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	685b      	ldr	r3, [r3, #4]
 80102c4:	b2db      	uxtb	r3, r3
 80102c6:	4619      	mov	r1, r3
 80102c8:	6878      	ldr	r0, [r7, #4]
 80102ca:	f7ff f96d 	bl	800f5a8 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80102ce:	4b1d      	ldr	r3, [pc, #116]	; (8010344 <USBD_SetConfig+0x148>)
 80102d0:	781b      	ldrb	r3, [r3, #0]
 80102d2:	461a      	mov	r2, r3
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80102d8:	4b1a      	ldr	r3, [pc, #104]	; (8010344 <USBD_SetConfig+0x148>)
 80102da:	781b      	ldrb	r3, [r3, #0]
 80102dc:	4619      	mov	r1, r3
 80102de:	6878      	ldr	r0, [r7, #4]
 80102e0:	f7ff f946 	bl	800f570 <USBD_SetClassConfig>
 80102e4:	4603      	mov	r3, r0
 80102e6:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 80102e8:	7bfb      	ldrb	r3, [r7, #15]
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d00f      	beq.n	801030e <USBD_SetConfig+0x112>
        USBD_CtlError(pdev, req);
 80102ee:	6839      	ldr	r1, [r7, #0]
 80102f0:	6878      	ldr	r0, [r7, #4]
 80102f2:	f000 f903 	bl	80104fc <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	685b      	ldr	r3, [r3, #4]
 80102fa:	b2db      	uxtb	r3, r3
 80102fc:	4619      	mov	r1, r3
 80102fe:	6878      	ldr	r0, [r7, #4]
 8010300:	f7ff f952 	bl	800f5a8 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	2202      	movs	r2, #2
 8010308:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 801030c:	e014      	b.n	8010338 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 801030e:	6878      	ldr	r0, [r7, #4]
 8010310:	f000 f9bf 	bl	8010692 <USBD_CtlSendStatus>
    break;
 8010314:	e010      	b.n	8010338 <USBD_SetConfig+0x13c>
      (void)USBD_CtlSendStatus(pdev);
 8010316:	6878      	ldr	r0, [r7, #4]
 8010318:	f000 f9bb 	bl	8010692 <USBD_CtlSendStatus>
    break;
 801031c:	e00c      	b.n	8010338 <USBD_SetConfig+0x13c>

  default:
    USBD_CtlError(pdev, req);
 801031e:	6839      	ldr	r1, [r7, #0]
 8010320:	6878      	ldr	r0, [r7, #4]
 8010322:	f000 f8eb 	bl	80104fc <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010326:	4b07      	ldr	r3, [pc, #28]	; (8010344 <USBD_SetConfig+0x148>)
 8010328:	781b      	ldrb	r3, [r3, #0]
 801032a:	4619      	mov	r1, r3
 801032c:	6878      	ldr	r0, [r7, #4]
 801032e:	f7ff f93b 	bl	800f5a8 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8010332:	2303      	movs	r3, #3
 8010334:	73fb      	strb	r3, [r7, #15]
    break;
 8010336:	bf00      	nop
  }

  return ret;
 8010338:	7bfb      	ldrb	r3, [r7, #15]
}
 801033a:	4618      	mov	r0, r3
 801033c:	3710      	adds	r7, #16
 801033e:	46bd      	mov	sp, r7
 8010340:	bd80      	pop	{r7, pc}
 8010342:	bf00      	nop
 8010344:	2400083c 	.word	0x2400083c

08010348 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010348:	b580      	push	{r7, lr}
 801034a:	b082      	sub	sp, #8
 801034c:	af00      	add	r7, sp, #0
 801034e:	6078      	str	r0, [r7, #4]
 8010350:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8010352:	683b      	ldr	r3, [r7, #0]
 8010354:	88db      	ldrh	r3, [r3, #6]
 8010356:	2b01      	cmp	r3, #1
 8010358:	d004      	beq.n	8010364 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801035a:	6839      	ldr	r1, [r7, #0]
 801035c:	6878      	ldr	r0, [r7, #4]
 801035e:	f000 f8cd 	bl	80104fc <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8010362:	e023      	b.n	80103ac <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801036a:	b2db      	uxtb	r3, r3
 801036c:	2b02      	cmp	r3, #2
 801036e:	dc02      	bgt.n	8010376 <USBD_GetConfig+0x2e>
 8010370:	2b00      	cmp	r3, #0
 8010372:	dc03      	bgt.n	801037c <USBD_GetConfig+0x34>
 8010374:	e015      	b.n	80103a2 <USBD_GetConfig+0x5a>
 8010376:	2b03      	cmp	r3, #3
 8010378:	d00b      	beq.n	8010392 <USBD_GetConfig+0x4a>
 801037a:	e012      	b.n	80103a2 <USBD_GetConfig+0x5a>
      pdev->dev_default_config = 0U;
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	2200      	movs	r2, #0
 8010380:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	3308      	adds	r3, #8
 8010386:	2201      	movs	r2, #1
 8010388:	4619      	mov	r1, r3
 801038a:	6878      	ldr	r0, [r7, #4]
 801038c:	f000 f927 	bl	80105de <USBD_CtlSendData>
      break;
 8010390:	e00c      	b.n	80103ac <USBD_GetConfig+0x64>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	3304      	adds	r3, #4
 8010396:	2201      	movs	r2, #1
 8010398:	4619      	mov	r1, r3
 801039a:	6878      	ldr	r0, [r7, #4]
 801039c:	f000 f91f 	bl	80105de <USBD_CtlSendData>
      break;
 80103a0:	e004      	b.n	80103ac <USBD_GetConfig+0x64>
      USBD_CtlError(pdev, req);
 80103a2:	6839      	ldr	r1, [r7, #0]
 80103a4:	6878      	ldr	r0, [r7, #4]
 80103a6:	f000 f8a9 	bl	80104fc <USBD_CtlError>
      break;
 80103aa:	bf00      	nop
}
 80103ac:	bf00      	nop
 80103ae:	3708      	adds	r7, #8
 80103b0:	46bd      	mov	sp, r7
 80103b2:	bd80      	pop	{r7, pc}

080103b4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80103b4:	b580      	push	{r7, lr}
 80103b6:	b082      	sub	sp, #8
 80103b8:	af00      	add	r7, sp, #0
 80103ba:	6078      	str	r0, [r7, #4]
 80103bc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80103c4:	b2db      	uxtb	r3, r3
 80103c6:	3b01      	subs	r3, #1
 80103c8:	2b02      	cmp	r3, #2
 80103ca:	d81e      	bhi.n	801040a <USBD_GetStatus+0x56>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80103cc:	683b      	ldr	r3, [r7, #0]
 80103ce:	88db      	ldrh	r3, [r3, #6]
 80103d0:	2b02      	cmp	r3, #2
 80103d2:	d004      	beq.n	80103de <USBD_GetStatus+0x2a>
    {
      USBD_CtlError(pdev, req);
 80103d4:	6839      	ldr	r1, [r7, #0]
 80103d6:	6878      	ldr	r0, [r7, #4]
 80103d8:	f000 f890 	bl	80104fc <USBD_CtlError>
      break;
 80103dc:	e01a      	b.n	8010414 <USBD_GetStatus+0x60>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	2201      	movs	r2, #1
 80103e2:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d005      	beq.n	80103fa <USBD_GetStatus+0x46>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	68db      	ldr	r3, [r3, #12]
 80103f2:	f043 0202 	orr.w	r2, r3, #2
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	330c      	adds	r3, #12
 80103fe:	2202      	movs	r2, #2
 8010400:	4619      	mov	r1, r3
 8010402:	6878      	ldr	r0, [r7, #4]
 8010404:	f000 f8eb 	bl	80105de <USBD_CtlSendData>
    break;
 8010408:	e004      	b.n	8010414 <USBD_GetStatus+0x60>

  default:
    USBD_CtlError(pdev, req);
 801040a:	6839      	ldr	r1, [r7, #0]
 801040c:	6878      	ldr	r0, [r7, #4]
 801040e:	f000 f875 	bl	80104fc <USBD_CtlError>
    break;
 8010412:	bf00      	nop
  }
}
 8010414:	bf00      	nop
 8010416:	3708      	adds	r7, #8
 8010418:	46bd      	mov	sp, r7
 801041a:	bd80      	pop	{r7, pc}

0801041c <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801041c:	b580      	push	{r7, lr}
 801041e:	b082      	sub	sp, #8
 8010420:	af00      	add	r7, sp, #0
 8010422:	6078      	str	r0, [r7, #4]
 8010424:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010426:	683b      	ldr	r3, [r7, #0]
 8010428:	885b      	ldrh	r3, [r3, #2]
 801042a:	2b01      	cmp	r3, #1
 801042c:	d106      	bne.n	801043c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	2201      	movs	r2, #1
 8010432:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8010436:	6878      	ldr	r0, [r7, #4]
 8010438:	f000 f92b 	bl	8010692 <USBD_CtlSendStatus>
  }
}
 801043c:	bf00      	nop
 801043e:	3708      	adds	r7, #8
 8010440:	46bd      	mov	sp, r7
 8010442:	bd80      	pop	{r7, pc}

08010444 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010444:	b580      	push	{r7, lr}
 8010446:	b082      	sub	sp, #8
 8010448:	af00      	add	r7, sp, #0
 801044a:	6078      	str	r0, [r7, #4]
 801044c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010454:	b2db      	uxtb	r3, r3
 8010456:	3b01      	subs	r3, #1
 8010458:	2b02      	cmp	r3, #2
 801045a:	d80b      	bhi.n	8010474 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801045c:	683b      	ldr	r3, [r7, #0]
 801045e:	885b      	ldrh	r3, [r3, #2]
 8010460:	2b01      	cmp	r3, #1
 8010462:	d10c      	bne.n	801047e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	2200      	movs	r2, #0
 8010468:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801046c:	6878      	ldr	r0, [r7, #4]
 801046e:	f000 f910 	bl	8010692 <USBD_CtlSendStatus>
      }
      break;
 8010472:	e004      	b.n	801047e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8010474:	6839      	ldr	r1, [r7, #0]
 8010476:	6878      	ldr	r0, [r7, #4]
 8010478:	f000 f840 	bl	80104fc <USBD_CtlError>
      break;
 801047c:	e000      	b.n	8010480 <USBD_ClrFeature+0x3c>
      break;
 801047e:	bf00      	nop
  }
}
 8010480:	bf00      	nop
 8010482:	3708      	adds	r7, #8
 8010484:	46bd      	mov	sp, r7
 8010486:	bd80      	pop	{r7, pc}

08010488 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8010488:	b580      	push	{r7, lr}
 801048a:	b084      	sub	sp, #16
 801048c:	af00      	add	r7, sp, #0
 801048e:	6078      	str	r0, [r7, #4]
 8010490:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8010492:	683b      	ldr	r3, [r7, #0]
 8010494:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	781a      	ldrb	r2, [r3, #0]
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	3301      	adds	r3, #1
 80104a2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	781a      	ldrb	r2, [r3, #0]
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	3301      	adds	r3, #1
 80104b0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80104b2:	68f8      	ldr	r0, [r7, #12]
 80104b4:	f7ff fabd 	bl	800fa32 <SWAPBYTE>
 80104b8:	4603      	mov	r3, r0
 80104ba:	461a      	mov	r2, r3
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	3301      	adds	r3, #1
 80104c4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	3301      	adds	r3, #1
 80104ca:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80104cc:	68f8      	ldr	r0, [r7, #12]
 80104ce:	f7ff fab0 	bl	800fa32 <SWAPBYTE>
 80104d2:	4603      	mov	r3, r0
 80104d4:	461a      	mov	r2, r3
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	3301      	adds	r3, #1
 80104de:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	3301      	adds	r3, #1
 80104e4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80104e6:	68f8      	ldr	r0, [r7, #12]
 80104e8:	f7ff faa3 	bl	800fa32 <SWAPBYTE>
 80104ec:	4603      	mov	r3, r0
 80104ee:	461a      	mov	r2, r3
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	80da      	strh	r2, [r3, #6]
}
 80104f4:	bf00      	nop
 80104f6:	3710      	adds	r7, #16
 80104f8:	46bd      	mov	sp, r7
 80104fa:	bd80      	pop	{r7, pc}

080104fc <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80104fc:	b580      	push	{r7, lr}
 80104fe:	b082      	sub	sp, #8
 8010500:	af00      	add	r7, sp, #0
 8010502:	6078      	str	r0, [r7, #4]
 8010504:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010506:	2180      	movs	r1, #128	; 0x80
 8010508:	6878      	ldr	r0, [r7, #4]
 801050a:	f000 fd5d 	bl	8010fc8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801050e:	2100      	movs	r1, #0
 8010510:	6878      	ldr	r0, [r7, #4]
 8010512:	f000 fd59 	bl	8010fc8 <USBD_LL_StallEP>
}
 8010516:	bf00      	nop
 8010518:	3708      	adds	r7, #8
 801051a:	46bd      	mov	sp, r7
 801051c:	bd80      	pop	{r7, pc}

0801051e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801051e:	b580      	push	{r7, lr}
 8010520:	b086      	sub	sp, #24
 8010522:	af00      	add	r7, sp, #0
 8010524:	60f8      	str	r0, [r7, #12]
 8010526:	60b9      	str	r1, [r7, #8]
 8010528:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801052a:	2300      	movs	r3, #0
 801052c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	2b00      	cmp	r3, #0
 8010532:	d036      	beq.n	80105a2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8010538:	6938      	ldr	r0, [r7, #16]
 801053a:	f000 f836 	bl	80105aa <USBD_GetLen>
 801053e:	4603      	mov	r3, r0
 8010540:	3301      	adds	r3, #1
 8010542:	b29b      	uxth	r3, r3
 8010544:	005b      	lsls	r3, r3, #1
 8010546:	b29a      	uxth	r2, r3
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801054c:	7dfb      	ldrb	r3, [r7, #23]
 801054e:	68ba      	ldr	r2, [r7, #8]
 8010550:	4413      	add	r3, r2
 8010552:	687a      	ldr	r2, [r7, #4]
 8010554:	7812      	ldrb	r2, [r2, #0]
 8010556:	701a      	strb	r2, [r3, #0]
  idx++;
 8010558:	7dfb      	ldrb	r3, [r7, #23]
 801055a:	3301      	adds	r3, #1
 801055c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801055e:	7dfb      	ldrb	r3, [r7, #23]
 8010560:	68ba      	ldr	r2, [r7, #8]
 8010562:	4413      	add	r3, r2
 8010564:	2203      	movs	r2, #3
 8010566:	701a      	strb	r2, [r3, #0]
  idx++;
 8010568:	7dfb      	ldrb	r3, [r7, #23]
 801056a:	3301      	adds	r3, #1
 801056c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801056e:	e013      	b.n	8010598 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8010570:	7dfb      	ldrb	r3, [r7, #23]
 8010572:	68ba      	ldr	r2, [r7, #8]
 8010574:	4413      	add	r3, r2
 8010576:	693a      	ldr	r2, [r7, #16]
 8010578:	7812      	ldrb	r2, [r2, #0]
 801057a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801057c:	693b      	ldr	r3, [r7, #16]
 801057e:	3301      	adds	r3, #1
 8010580:	613b      	str	r3, [r7, #16]
    idx++;
 8010582:	7dfb      	ldrb	r3, [r7, #23]
 8010584:	3301      	adds	r3, #1
 8010586:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8010588:	7dfb      	ldrb	r3, [r7, #23]
 801058a:	68ba      	ldr	r2, [r7, #8]
 801058c:	4413      	add	r3, r2
 801058e:	2200      	movs	r2, #0
 8010590:	701a      	strb	r2, [r3, #0]
    idx++;
 8010592:	7dfb      	ldrb	r3, [r7, #23]
 8010594:	3301      	adds	r3, #1
 8010596:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8010598:	693b      	ldr	r3, [r7, #16]
 801059a:	781b      	ldrb	r3, [r3, #0]
 801059c:	2b00      	cmp	r3, #0
 801059e:	d1e7      	bne.n	8010570 <USBD_GetString+0x52>
 80105a0:	e000      	b.n	80105a4 <USBD_GetString+0x86>
    return;
 80105a2:	bf00      	nop
  }
}
 80105a4:	3718      	adds	r7, #24
 80105a6:	46bd      	mov	sp, r7
 80105a8:	bd80      	pop	{r7, pc}

080105aa <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80105aa:	b480      	push	{r7}
 80105ac:	b085      	sub	sp, #20
 80105ae:	af00      	add	r7, sp, #0
 80105b0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80105b2:	2300      	movs	r3, #0
 80105b4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80105ba:	e005      	b.n	80105c8 <USBD_GetLen+0x1e>
  {
    len++;
 80105bc:	7bfb      	ldrb	r3, [r7, #15]
 80105be:	3301      	adds	r3, #1
 80105c0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80105c2:	68bb      	ldr	r3, [r7, #8]
 80105c4:	3301      	adds	r3, #1
 80105c6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80105c8:	68bb      	ldr	r3, [r7, #8]
 80105ca:	781b      	ldrb	r3, [r3, #0]
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d1f5      	bne.n	80105bc <USBD_GetLen+0x12>
  }

  return len;
 80105d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80105d2:	4618      	mov	r0, r3
 80105d4:	3714      	adds	r7, #20
 80105d6:	46bd      	mov	sp, r7
 80105d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105dc:	4770      	bx	lr

080105de <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80105de:	b580      	push	{r7, lr}
 80105e0:	b084      	sub	sp, #16
 80105e2:	af00      	add	r7, sp, #0
 80105e4:	60f8      	str	r0, [r7, #12]
 80105e6:	60b9      	str	r1, [r7, #8]
 80105e8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	2202      	movs	r2, #2
 80105ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	687a      	ldr	r2, [r7, #4]
 80105f6:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80105f8:	68fb      	ldr	r3, [r7, #12]
 80105fa:	687a      	ldr	r2, [r7, #4]
 80105fc:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	68ba      	ldr	r2, [r7, #8]
 8010602:	2100      	movs	r1, #0
 8010604:	68f8      	ldr	r0, [r7, #12]
 8010606:	f000 fd68 	bl	80110da <USBD_LL_Transmit>

  return USBD_OK;
 801060a:	2300      	movs	r3, #0
}
 801060c:	4618      	mov	r0, r3
 801060e:	3710      	adds	r7, #16
 8010610:	46bd      	mov	sp, r7
 8010612:	bd80      	pop	{r7, pc}

08010614 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8010614:	b580      	push	{r7, lr}
 8010616:	b084      	sub	sp, #16
 8010618:	af00      	add	r7, sp, #0
 801061a:	60f8      	str	r0, [r7, #12]
 801061c:	60b9      	str	r1, [r7, #8]
 801061e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	68ba      	ldr	r2, [r7, #8]
 8010624:	2100      	movs	r1, #0
 8010626:	68f8      	ldr	r0, [r7, #12]
 8010628:	f000 fd57 	bl	80110da <USBD_LL_Transmit>

  return USBD_OK;
 801062c:	2300      	movs	r3, #0
}
 801062e:	4618      	mov	r0, r3
 8010630:	3710      	adds	r7, #16
 8010632:	46bd      	mov	sp, r7
 8010634:	bd80      	pop	{r7, pc}

08010636 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8010636:	b580      	push	{r7, lr}
 8010638:	b084      	sub	sp, #16
 801063a:	af00      	add	r7, sp, #0
 801063c:	60f8      	str	r0, [r7, #12]
 801063e:	60b9      	str	r1, [r7, #8]
 8010640:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	2203      	movs	r2, #3
 8010646:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801064a:	68fb      	ldr	r3, [r7, #12]
 801064c:	687a      	ldr	r2, [r7, #4]
 801064e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8010652:	68fb      	ldr	r3, [r7, #12]
 8010654:	687a      	ldr	r2, [r7, #4]
 8010656:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	68ba      	ldr	r2, [r7, #8]
 801065e:	2100      	movs	r1, #0
 8010660:	68f8      	ldr	r0, [r7, #12]
 8010662:	f000 fd5b 	bl	801111c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010666:	2300      	movs	r3, #0
}
 8010668:	4618      	mov	r0, r3
 801066a:	3710      	adds	r7, #16
 801066c:	46bd      	mov	sp, r7
 801066e:	bd80      	pop	{r7, pc}

08010670 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8010670:	b580      	push	{r7, lr}
 8010672:	b084      	sub	sp, #16
 8010674:	af00      	add	r7, sp, #0
 8010676:	60f8      	str	r0, [r7, #12]
 8010678:	60b9      	str	r1, [r7, #8]
 801067a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	68ba      	ldr	r2, [r7, #8]
 8010680:	2100      	movs	r1, #0
 8010682:	68f8      	ldr	r0, [r7, #12]
 8010684:	f000 fd4a 	bl	801111c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010688:	2300      	movs	r3, #0
}
 801068a:	4618      	mov	r0, r3
 801068c:	3710      	adds	r7, #16
 801068e:	46bd      	mov	sp, r7
 8010690:	bd80      	pop	{r7, pc}

08010692 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8010692:	b580      	push	{r7, lr}
 8010694:	b082      	sub	sp, #8
 8010696:	af00      	add	r7, sp, #0
 8010698:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	2204      	movs	r2, #4
 801069e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80106a2:	2300      	movs	r3, #0
 80106a4:	2200      	movs	r2, #0
 80106a6:	2100      	movs	r1, #0
 80106a8:	6878      	ldr	r0, [r7, #4]
 80106aa:	f000 fd16 	bl	80110da <USBD_LL_Transmit>

  return USBD_OK;
 80106ae:	2300      	movs	r3, #0
}
 80106b0:	4618      	mov	r0, r3
 80106b2:	3708      	adds	r7, #8
 80106b4:	46bd      	mov	sp, r7
 80106b6:	bd80      	pop	{r7, pc}

080106b8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80106b8:	b580      	push	{r7, lr}
 80106ba:	b082      	sub	sp, #8
 80106bc:	af00      	add	r7, sp, #0
 80106be:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	2205      	movs	r2, #5
 80106c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80106c8:	2300      	movs	r3, #0
 80106ca:	2200      	movs	r2, #0
 80106cc:	2100      	movs	r1, #0
 80106ce:	6878      	ldr	r0, [r7, #4]
 80106d0:	f000 fd24 	bl	801111c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80106d4:	2300      	movs	r3, #0
}
 80106d6:	4618      	mov	r0, r3
 80106d8:	3708      	adds	r7, #8
 80106da:	46bd      	mov	sp, r7
 80106dc:	bd80      	pop	{r7, pc}
	...

080106e0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80106e0:	b580      	push	{r7, lr}
 80106e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80106e4:	2200      	movs	r2, #0
 80106e6:	4913      	ldr	r1, [pc, #76]	; (8010734 <MX_USB_DEVICE_Init+0x54>)
 80106e8:	4813      	ldr	r0, [pc, #76]	; (8010738 <MX_USB_DEVICE_Init+0x58>)
 80106ea:	f7fe fed3 	bl	800f494 <USBD_Init>
 80106ee:	4603      	mov	r3, r0
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d001      	beq.n	80106f8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80106f4:	f7f0 fc16 	bl	8000f24 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80106f8:	4910      	ldr	r1, [pc, #64]	; (801073c <MX_USB_DEVICE_Init+0x5c>)
 80106fa:	480f      	ldr	r0, [pc, #60]	; (8010738 <MX_USB_DEVICE_Init+0x58>)
 80106fc:	f7fe ff00 	bl	800f500 <USBD_RegisterClass>
 8010700:	4603      	mov	r3, r0
 8010702:	2b00      	cmp	r3, #0
 8010704:	d001      	beq.n	801070a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8010706:	f7f0 fc0d 	bl	8000f24 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801070a:	490d      	ldr	r1, [pc, #52]	; (8010740 <MX_USB_DEVICE_Init+0x60>)
 801070c:	480a      	ldr	r0, [pc, #40]	; (8010738 <MX_USB_DEVICE_Init+0x58>)
 801070e:	f7fe fe25 	bl	800f35c <USBD_CDC_RegisterInterface>
 8010712:	4603      	mov	r3, r0
 8010714:	2b00      	cmp	r3, #0
 8010716:	d001      	beq.n	801071c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8010718:	f7f0 fc04 	bl	8000f24 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801071c:	4806      	ldr	r0, [pc, #24]	; (8010738 <MX_USB_DEVICE_Init+0x58>)
 801071e:	f7fe ff10 	bl	800f542 <USBD_Start>
 8010722:	4603      	mov	r3, r0
 8010724:	2b00      	cmp	r3, #0
 8010726:	d001      	beq.n	801072c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8010728:	f7f0 fbfc 	bl	8000f24 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 801072c:	f7f7 f9f8 	bl	8007b20 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010730:	bf00      	nop
 8010732:	bd80      	pop	{r7, pc}
 8010734:	24000134 	.word	0x24000134
 8010738:	24000840 	.word	0x24000840
 801073c:	2400001c 	.word	0x2400001c
 8010740:	24000120 	.word	0x24000120

08010744 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8010744:	b580      	push	{r7, lr}
 8010746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010748:	2200      	movs	r2, #0
 801074a:	4905      	ldr	r1, [pc, #20]	; (8010760 <CDC_Init_FS+0x1c>)
 801074c:	4805      	ldr	r0, [pc, #20]	; (8010764 <CDC_Init_FS+0x20>)
 801074e:	f7fe fe1a 	bl	800f386 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8010752:	4905      	ldr	r1, [pc, #20]	; (8010768 <CDC_Init_FS+0x24>)
 8010754:	4803      	ldr	r0, [pc, #12]	; (8010764 <CDC_Init_FS+0x20>)
 8010756:	f7fe fe2f 	bl	800f3b8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801075a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801075c:	4618      	mov	r0, r3
 801075e:	bd80      	pop	{r7, pc}
 8010760:	24001310 	.word	0x24001310
 8010764:	24000840 	.word	0x24000840
 8010768:	24000b10 	.word	0x24000b10

0801076c <CDC_Class_Init_Ok>:


uint8_t CDC_Class_Init_Ok(void)
{
 801076c:	b480      	push	{r7}
 801076e:	af00      	add	r7, sp, #0
	return hUsbDeviceFS.pClassData;
 8010770:	4b04      	ldr	r3, [pc, #16]	; (8010784 <CDC_Class_Init_Ok+0x18>)
 8010772:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010776:	b2db      	uxtb	r3, r3
}
 8010778:	4618      	mov	r0, r3
 801077a:	46bd      	mov	sp, r7
 801077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010780:	4770      	bx	lr
 8010782:	bf00      	nop
 8010784:	24000840 	.word	0x24000840

08010788 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010788:	b480      	push	{r7}
 801078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801078c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801078e:	4618      	mov	r0, r3
 8010790:	46bd      	mov	sp, r7
 8010792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010796:	4770      	bx	lr

08010798 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010798:	b480      	push	{r7}
 801079a:	b083      	sub	sp, #12
 801079c:	af00      	add	r7, sp, #0
 801079e:	4603      	mov	r3, r0
 80107a0:	6039      	str	r1, [r7, #0]
 80107a2:	71fb      	strb	r3, [r7, #7]
 80107a4:	4613      	mov	r3, r2
 80107a6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80107a8:	79fb      	ldrb	r3, [r7, #7]
 80107aa:	2b23      	cmp	r3, #35	; 0x23
 80107ac:	f200 808c 	bhi.w	80108c8 <CDC_Control_FS+0x130>
 80107b0:	a201      	add	r2, pc, #4	; (adr r2, 80107b8 <CDC_Control_FS+0x20>)
 80107b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107b6:	bf00      	nop
 80107b8:	080108c9 	.word	0x080108c9
 80107bc:	080108c9 	.word	0x080108c9
 80107c0:	080108c9 	.word	0x080108c9
 80107c4:	080108c9 	.word	0x080108c9
 80107c8:	080108c9 	.word	0x080108c9
 80107cc:	080108c9 	.word	0x080108c9
 80107d0:	080108c9 	.word	0x080108c9
 80107d4:	080108c9 	.word	0x080108c9
 80107d8:	080108c9 	.word	0x080108c9
 80107dc:	080108c9 	.word	0x080108c9
 80107e0:	080108c9 	.word	0x080108c9
 80107e4:	080108c9 	.word	0x080108c9
 80107e8:	080108c9 	.word	0x080108c9
 80107ec:	080108c9 	.word	0x080108c9
 80107f0:	080108c9 	.word	0x080108c9
 80107f4:	080108c9 	.word	0x080108c9
 80107f8:	080108c9 	.word	0x080108c9
 80107fc:	080108c9 	.word	0x080108c9
 8010800:	080108c9 	.word	0x080108c9
 8010804:	080108c9 	.word	0x080108c9
 8010808:	080108c9 	.word	0x080108c9
 801080c:	080108c9 	.word	0x080108c9
 8010810:	080108c9 	.word	0x080108c9
 8010814:	080108c9 	.word	0x080108c9
 8010818:	080108c9 	.word	0x080108c9
 801081c:	080108c9 	.word	0x080108c9
 8010820:	080108c9 	.word	0x080108c9
 8010824:	080108c9 	.word	0x080108c9
 8010828:	080108c9 	.word	0x080108c9
 801082c:	080108c9 	.word	0x080108c9
 8010830:	080108c9 	.word	0x080108c9
 8010834:	080108c9 	.word	0x080108c9
 8010838:	08010849 	.word	0x08010849
 801083c:	08010883 	.word	0x08010883
 8010840:	080108c9 	.word	0x080108c9
 8010844:	080108c9 	.word	0x080108c9
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      tempbuf[0]=pbuf[0];
 8010848:	683b      	ldr	r3, [r7, #0]
 801084a:	781a      	ldrb	r2, [r3, #0]
 801084c:	4b22      	ldr	r3, [pc, #136]	; (80108d8 <CDC_Control_FS+0x140>)
 801084e:	701a      	strb	r2, [r3, #0]
      tempbuf[1]=pbuf[1];
 8010850:	683b      	ldr	r3, [r7, #0]
 8010852:	785a      	ldrb	r2, [r3, #1]
 8010854:	4b20      	ldr	r3, [pc, #128]	; (80108d8 <CDC_Control_FS+0x140>)
 8010856:	705a      	strb	r2, [r3, #1]
      tempbuf[2]=pbuf[2];
 8010858:	683b      	ldr	r3, [r7, #0]
 801085a:	789a      	ldrb	r2, [r3, #2]
 801085c:	4b1e      	ldr	r3, [pc, #120]	; (80108d8 <CDC_Control_FS+0x140>)
 801085e:	709a      	strb	r2, [r3, #2]
      tempbuf[3]=pbuf[3];
 8010860:	683b      	ldr	r3, [r7, #0]
 8010862:	78da      	ldrb	r2, [r3, #3]
 8010864:	4b1c      	ldr	r3, [pc, #112]	; (80108d8 <CDC_Control_FS+0x140>)
 8010866:	70da      	strb	r2, [r3, #3]
      tempbuf[4]=pbuf[4];
 8010868:	683b      	ldr	r3, [r7, #0]
 801086a:	791a      	ldrb	r2, [r3, #4]
 801086c:	4b1a      	ldr	r3, [pc, #104]	; (80108d8 <CDC_Control_FS+0x140>)
 801086e:	711a      	strb	r2, [r3, #4]
      tempbuf[5]=pbuf[5];
 8010870:	683b      	ldr	r3, [r7, #0]
 8010872:	795a      	ldrb	r2, [r3, #5]
 8010874:	4b18      	ldr	r3, [pc, #96]	; (80108d8 <CDC_Control_FS+0x140>)
 8010876:	715a      	strb	r2, [r3, #5]
      tempbuf[6]=pbuf[6];
 8010878:	683b      	ldr	r3, [r7, #0]
 801087a:	799a      	ldrb	r2, [r3, #6]
 801087c:	4b16      	ldr	r3, [pc, #88]	; (80108d8 <CDC_Control_FS+0x140>)
 801087e:	719a      	strb	r2, [r3, #6]

    break;
 8010880:	e023      	b.n	80108ca <CDC_Control_FS+0x132>

    case CDC_GET_LINE_CODING:
      pbuf[0]=tempbuf[0];
 8010882:	4b15      	ldr	r3, [pc, #84]	; (80108d8 <CDC_Control_FS+0x140>)
 8010884:	781a      	ldrb	r2, [r3, #0]
 8010886:	683b      	ldr	r3, [r7, #0]
 8010888:	701a      	strb	r2, [r3, #0]
      pbuf[1]=tempbuf[1];
 801088a:	683b      	ldr	r3, [r7, #0]
 801088c:	3301      	adds	r3, #1
 801088e:	4a12      	ldr	r2, [pc, #72]	; (80108d8 <CDC_Control_FS+0x140>)
 8010890:	7852      	ldrb	r2, [r2, #1]
 8010892:	701a      	strb	r2, [r3, #0]
      pbuf[2]=tempbuf[2];
 8010894:	683b      	ldr	r3, [r7, #0]
 8010896:	3302      	adds	r3, #2
 8010898:	4a0f      	ldr	r2, [pc, #60]	; (80108d8 <CDC_Control_FS+0x140>)
 801089a:	7892      	ldrb	r2, [r2, #2]
 801089c:	701a      	strb	r2, [r3, #0]
      pbuf[3]=tempbuf[3];
 801089e:	683b      	ldr	r3, [r7, #0]
 80108a0:	3303      	adds	r3, #3
 80108a2:	4a0d      	ldr	r2, [pc, #52]	; (80108d8 <CDC_Control_FS+0x140>)
 80108a4:	78d2      	ldrb	r2, [r2, #3]
 80108a6:	701a      	strb	r2, [r3, #0]
      pbuf[4]=tempbuf[4];
 80108a8:	683b      	ldr	r3, [r7, #0]
 80108aa:	3304      	adds	r3, #4
 80108ac:	4a0a      	ldr	r2, [pc, #40]	; (80108d8 <CDC_Control_FS+0x140>)
 80108ae:	7912      	ldrb	r2, [r2, #4]
 80108b0:	701a      	strb	r2, [r3, #0]
      pbuf[5]=tempbuf[5];
 80108b2:	683b      	ldr	r3, [r7, #0]
 80108b4:	3305      	adds	r3, #5
 80108b6:	4a08      	ldr	r2, [pc, #32]	; (80108d8 <CDC_Control_FS+0x140>)
 80108b8:	7952      	ldrb	r2, [r2, #5]
 80108ba:	701a      	strb	r2, [r3, #0]
      pbuf[6]=tempbuf[6];
 80108bc:	683b      	ldr	r3, [r7, #0]
 80108be:	3306      	adds	r3, #6
 80108c0:	4a05      	ldr	r2, [pc, #20]	; (80108d8 <CDC_Control_FS+0x140>)
 80108c2:	7992      	ldrb	r2, [r2, #6]
 80108c4:	701a      	strb	r2, [r3, #0]

    break;
 80108c6:	e000      	b.n	80108ca <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80108c8:	bf00      	nop
  }

  return (USBD_OK);
 80108ca:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80108cc:	4618      	mov	r0, r3
 80108ce:	370c      	adds	r7, #12
 80108d0:	46bd      	mov	sp, r7
 80108d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108d6:	4770      	bx	lr
 80108d8:	24001b10 	.word	0x24001b10

080108dc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80108dc:	b580      	push	{r7, lr}
 80108de:	b084      	sub	sp, #16
 80108e0:	af00      	add	r7, sp, #0
 80108e2:	6078      	str	r0, [r7, #4]
 80108e4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80108e6:	6879      	ldr	r1, [r7, #4]
 80108e8:	4809      	ldr	r0, [pc, #36]	; (8010910 <CDC_Receive_FS+0x34>)
 80108ea:	f7fe fd65 	bl	800f3b8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80108ee:	4808      	ldr	r0, [pc, #32]	; (8010910 <CDC_Receive_FS+0x34>)
 80108f0:	f7fe fda6 	bl	800f440 <USBD_CDC_ReceivePacket>
  uint16_t len = *Len;
 80108f4:	683b      	ldr	r3, [r7, #0]
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	81fb      	strh	r3, [r7, #14]
  CDC_Transmit_FS(Buf, len);
 80108fa:	89fb      	ldrh	r3, [r7, #14]
 80108fc:	4619      	mov	r1, r3
 80108fe:	6878      	ldr	r0, [r7, #4]
 8010900:	f000 f808 	bl	8010914 <CDC_Transmit_FS>
  return (USBD_OK);
 8010904:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8010906:	4618      	mov	r0, r3
 8010908:	3710      	adds	r7, #16
 801090a:	46bd      	mov	sp, r7
 801090c:	bd80      	pop	{r7, pc}
 801090e:	bf00      	nop
 8010910:	24000840 	.word	0x24000840

08010914 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8010914:	b580      	push	{r7, lr}
 8010916:	b084      	sub	sp, #16
 8010918:	af00      	add	r7, sp, #0
 801091a:	6078      	str	r0, [r7, #4]
 801091c:	460b      	mov	r3, r1
 801091e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8010920:	2300      	movs	r3, #0
 8010922:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8010924:	4b0d      	ldr	r3, [pc, #52]	; (801095c <CDC_Transmit_FS+0x48>)
 8010926:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801092a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801092c:	68bb      	ldr	r3, [r7, #8]
 801092e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010932:	2b00      	cmp	r3, #0
 8010934:	d001      	beq.n	801093a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8010936:	2301      	movs	r3, #1
 8010938:	e00b      	b.n	8010952 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801093a:	887b      	ldrh	r3, [r7, #2]
 801093c:	461a      	mov	r2, r3
 801093e:	6879      	ldr	r1, [r7, #4]
 8010940:	4806      	ldr	r0, [pc, #24]	; (801095c <CDC_Transmit_FS+0x48>)
 8010942:	f7fe fd20 	bl	800f386 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8010946:	4805      	ldr	r0, [pc, #20]	; (801095c <CDC_Transmit_FS+0x48>)
 8010948:	f7fe fd4a 	bl	800f3e0 <USBD_CDC_TransmitPacket>
 801094c:	4603      	mov	r3, r0
 801094e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8010950:	7bfb      	ldrb	r3, [r7, #15]
}
 8010952:	4618      	mov	r0, r3
 8010954:	3710      	adds	r7, #16
 8010956:	46bd      	mov	sp, r7
 8010958:	bd80      	pop	{r7, pc}
 801095a:	bf00      	nop
 801095c:	24000840 	.word	0x24000840

08010960 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010960:	b480      	push	{r7}
 8010962:	b087      	sub	sp, #28
 8010964:	af00      	add	r7, sp, #0
 8010966:	60f8      	str	r0, [r7, #12]
 8010968:	60b9      	str	r1, [r7, #8]
 801096a:	4613      	mov	r3, r2
 801096c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801096e:	2300      	movs	r3, #0
 8010970:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8010972:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010976:	4618      	mov	r0, r3
 8010978:	371c      	adds	r7, #28
 801097a:	46bd      	mov	sp, r7
 801097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010980:	4770      	bx	lr
	...

08010984 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010984:	b480      	push	{r7}
 8010986:	b083      	sub	sp, #12
 8010988:	af00      	add	r7, sp, #0
 801098a:	4603      	mov	r3, r0
 801098c:	6039      	str	r1, [r7, #0]
 801098e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8010990:	683b      	ldr	r3, [r7, #0]
 8010992:	2212      	movs	r2, #18
 8010994:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8010996:	4b03      	ldr	r3, [pc, #12]	; (80109a4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8010998:	4618      	mov	r0, r3
 801099a:	370c      	adds	r7, #12
 801099c:	46bd      	mov	sp, r7
 801099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a2:	4770      	bx	lr
 80109a4:	24000150 	.word	0x24000150

080109a8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80109a8:	b480      	push	{r7}
 80109aa:	b083      	sub	sp, #12
 80109ac:	af00      	add	r7, sp, #0
 80109ae:	4603      	mov	r3, r0
 80109b0:	6039      	str	r1, [r7, #0]
 80109b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80109b4:	683b      	ldr	r3, [r7, #0]
 80109b6:	2204      	movs	r2, #4
 80109b8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80109ba:	4b03      	ldr	r3, [pc, #12]	; (80109c8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80109bc:	4618      	mov	r0, r3
 80109be:	370c      	adds	r7, #12
 80109c0:	46bd      	mov	sp, r7
 80109c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109c6:	4770      	bx	lr
 80109c8:	24000164 	.word	0x24000164

080109cc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80109cc:	b580      	push	{r7, lr}
 80109ce:	b082      	sub	sp, #8
 80109d0:	af00      	add	r7, sp, #0
 80109d2:	4603      	mov	r3, r0
 80109d4:	6039      	str	r1, [r7, #0]
 80109d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80109d8:	79fb      	ldrb	r3, [r7, #7]
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d105      	bne.n	80109ea <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80109de:	683a      	ldr	r2, [r7, #0]
 80109e0:	4907      	ldr	r1, [pc, #28]	; (8010a00 <USBD_FS_ProductStrDescriptor+0x34>)
 80109e2:	4808      	ldr	r0, [pc, #32]	; (8010a04 <USBD_FS_ProductStrDescriptor+0x38>)
 80109e4:	f7ff fd9b 	bl	801051e <USBD_GetString>
 80109e8:	e004      	b.n	80109f4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80109ea:	683a      	ldr	r2, [r7, #0]
 80109ec:	4904      	ldr	r1, [pc, #16]	; (8010a00 <USBD_FS_ProductStrDescriptor+0x34>)
 80109ee:	4805      	ldr	r0, [pc, #20]	; (8010a04 <USBD_FS_ProductStrDescriptor+0x38>)
 80109f0:	f7ff fd95 	bl	801051e <USBD_GetString>
  }
  return USBD_StrDesc;
 80109f4:	4b02      	ldr	r3, [pc, #8]	; (8010a00 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80109f6:	4618      	mov	r0, r3
 80109f8:	3708      	adds	r7, #8
 80109fa:	46bd      	mov	sp, r7
 80109fc:	bd80      	pop	{r7, pc}
 80109fe:	bf00      	nop
 8010a00:	24001b18 	.word	0x24001b18
 8010a04:	08013b48 	.word	0x08013b48

08010a08 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010a08:	b580      	push	{r7, lr}
 8010a0a:	b082      	sub	sp, #8
 8010a0c:	af00      	add	r7, sp, #0
 8010a0e:	4603      	mov	r3, r0
 8010a10:	6039      	str	r1, [r7, #0]
 8010a12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010a14:	683a      	ldr	r2, [r7, #0]
 8010a16:	4904      	ldr	r1, [pc, #16]	; (8010a28 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010a18:	4804      	ldr	r0, [pc, #16]	; (8010a2c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010a1a:	f7ff fd80 	bl	801051e <USBD_GetString>
  return USBD_StrDesc;
 8010a1e:	4b02      	ldr	r3, [pc, #8]	; (8010a28 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010a20:	4618      	mov	r0, r3
 8010a22:	3708      	adds	r7, #8
 8010a24:	46bd      	mov	sp, r7
 8010a26:	bd80      	pop	{r7, pc}
 8010a28:	24001b18 	.word	0x24001b18
 8010a2c:	08013b60 	.word	0x08013b60

08010a30 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010a30:	b580      	push	{r7, lr}
 8010a32:	b082      	sub	sp, #8
 8010a34:	af00      	add	r7, sp, #0
 8010a36:	4603      	mov	r3, r0
 8010a38:	6039      	str	r1, [r7, #0]
 8010a3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010a3c:	683b      	ldr	r3, [r7, #0]
 8010a3e:	221a      	movs	r2, #26
 8010a40:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010a42:	f000 f843 	bl	8010acc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8010a46:	4b02      	ldr	r3, [pc, #8]	; (8010a50 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8010a48:	4618      	mov	r0, r3
 8010a4a:	3708      	adds	r7, #8
 8010a4c:	46bd      	mov	sp, r7
 8010a4e:	bd80      	pop	{r7, pc}
 8010a50:	24000168 	.word	0x24000168

08010a54 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010a54:	b580      	push	{r7, lr}
 8010a56:	b082      	sub	sp, #8
 8010a58:	af00      	add	r7, sp, #0
 8010a5a:	4603      	mov	r3, r0
 8010a5c:	6039      	str	r1, [r7, #0]
 8010a5e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010a60:	79fb      	ldrb	r3, [r7, #7]
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d105      	bne.n	8010a72 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010a66:	683a      	ldr	r2, [r7, #0]
 8010a68:	4907      	ldr	r1, [pc, #28]	; (8010a88 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010a6a:	4808      	ldr	r0, [pc, #32]	; (8010a8c <USBD_FS_ConfigStrDescriptor+0x38>)
 8010a6c:	f7ff fd57 	bl	801051e <USBD_GetString>
 8010a70:	e004      	b.n	8010a7c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010a72:	683a      	ldr	r2, [r7, #0]
 8010a74:	4904      	ldr	r1, [pc, #16]	; (8010a88 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010a76:	4805      	ldr	r0, [pc, #20]	; (8010a8c <USBD_FS_ConfigStrDescriptor+0x38>)
 8010a78:	f7ff fd51 	bl	801051e <USBD_GetString>
  }
  return USBD_StrDesc;
 8010a7c:	4b02      	ldr	r3, [pc, #8]	; (8010a88 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8010a7e:	4618      	mov	r0, r3
 8010a80:	3708      	adds	r7, #8
 8010a82:	46bd      	mov	sp, r7
 8010a84:	bd80      	pop	{r7, pc}
 8010a86:	bf00      	nop
 8010a88:	24001b18 	.word	0x24001b18
 8010a8c:	08013b74 	.word	0x08013b74

08010a90 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010a90:	b580      	push	{r7, lr}
 8010a92:	b082      	sub	sp, #8
 8010a94:	af00      	add	r7, sp, #0
 8010a96:	4603      	mov	r3, r0
 8010a98:	6039      	str	r1, [r7, #0]
 8010a9a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010a9c:	79fb      	ldrb	r3, [r7, #7]
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d105      	bne.n	8010aae <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010aa2:	683a      	ldr	r2, [r7, #0]
 8010aa4:	4907      	ldr	r1, [pc, #28]	; (8010ac4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010aa6:	4808      	ldr	r0, [pc, #32]	; (8010ac8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010aa8:	f7ff fd39 	bl	801051e <USBD_GetString>
 8010aac:	e004      	b.n	8010ab8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010aae:	683a      	ldr	r2, [r7, #0]
 8010ab0:	4904      	ldr	r1, [pc, #16]	; (8010ac4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010ab2:	4805      	ldr	r0, [pc, #20]	; (8010ac8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010ab4:	f7ff fd33 	bl	801051e <USBD_GetString>
  }
  return USBD_StrDesc;
 8010ab8:	4b02      	ldr	r3, [pc, #8]	; (8010ac4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010aba:	4618      	mov	r0, r3
 8010abc:	3708      	adds	r7, #8
 8010abe:	46bd      	mov	sp, r7
 8010ac0:	bd80      	pop	{r7, pc}
 8010ac2:	bf00      	nop
 8010ac4:	24001b18 	.word	0x24001b18
 8010ac8:	08013b80 	.word	0x08013b80

08010acc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010acc:	b580      	push	{r7, lr}
 8010ace:	b084      	sub	sp, #16
 8010ad0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010ad2:	4b0f      	ldr	r3, [pc, #60]	; (8010b10 <Get_SerialNum+0x44>)
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010ad8:	4b0e      	ldr	r3, [pc, #56]	; (8010b14 <Get_SerialNum+0x48>)
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010ade:	4b0e      	ldr	r3, [pc, #56]	; (8010b18 <Get_SerialNum+0x4c>)
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010ae4:	68fa      	ldr	r2, [r7, #12]
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	4413      	add	r3, r2
 8010aea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d009      	beq.n	8010b06 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010af2:	2208      	movs	r2, #8
 8010af4:	4909      	ldr	r1, [pc, #36]	; (8010b1c <Get_SerialNum+0x50>)
 8010af6:	68f8      	ldr	r0, [r7, #12]
 8010af8:	f000 f814 	bl	8010b24 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010afc:	2204      	movs	r2, #4
 8010afe:	4908      	ldr	r1, [pc, #32]	; (8010b20 <Get_SerialNum+0x54>)
 8010b00:	68b8      	ldr	r0, [r7, #8]
 8010b02:	f000 f80f 	bl	8010b24 <IntToUnicode>
  }
}
 8010b06:	bf00      	nop
 8010b08:	3710      	adds	r7, #16
 8010b0a:	46bd      	mov	sp, r7
 8010b0c:	bd80      	pop	{r7, pc}
 8010b0e:	bf00      	nop
 8010b10:	1ff1e800 	.word	0x1ff1e800
 8010b14:	1ff1e804 	.word	0x1ff1e804
 8010b18:	1ff1e808 	.word	0x1ff1e808
 8010b1c:	2400016a 	.word	0x2400016a
 8010b20:	2400017a 	.word	0x2400017a

08010b24 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010b24:	b480      	push	{r7}
 8010b26:	b087      	sub	sp, #28
 8010b28:	af00      	add	r7, sp, #0
 8010b2a:	60f8      	str	r0, [r7, #12]
 8010b2c:	60b9      	str	r1, [r7, #8]
 8010b2e:	4613      	mov	r3, r2
 8010b30:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010b32:	2300      	movs	r3, #0
 8010b34:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010b36:	2300      	movs	r3, #0
 8010b38:	75fb      	strb	r3, [r7, #23]
 8010b3a:	e027      	b.n	8010b8c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	0f1b      	lsrs	r3, r3, #28
 8010b40:	2b09      	cmp	r3, #9
 8010b42:	d80b      	bhi.n	8010b5c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	0f1b      	lsrs	r3, r3, #28
 8010b48:	b2da      	uxtb	r2, r3
 8010b4a:	7dfb      	ldrb	r3, [r7, #23]
 8010b4c:	005b      	lsls	r3, r3, #1
 8010b4e:	4619      	mov	r1, r3
 8010b50:	68bb      	ldr	r3, [r7, #8]
 8010b52:	440b      	add	r3, r1
 8010b54:	3230      	adds	r2, #48	; 0x30
 8010b56:	b2d2      	uxtb	r2, r2
 8010b58:	701a      	strb	r2, [r3, #0]
 8010b5a:	e00a      	b.n	8010b72 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	0f1b      	lsrs	r3, r3, #28
 8010b60:	b2da      	uxtb	r2, r3
 8010b62:	7dfb      	ldrb	r3, [r7, #23]
 8010b64:	005b      	lsls	r3, r3, #1
 8010b66:	4619      	mov	r1, r3
 8010b68:	68bb      	ldr	r3, [r7, #8]
 8010b6a:	440b      	add	r3, r1
 8010b6c:	3237      	adds	r2, #55	; 0x37
 8010b6e:	b2d2      	uxtb	r2, r2
 8010b70:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010b72:	68fb      	ldr	r3, [r7, #12]
 8010b74:	011b      	lsls	r3, r3, #4
 8010b76:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010b78:	7dfb      	ldrb	r3, [r7, #23]
 8010b7a:	005b      	lsls	r3, r3, #1
 8010b7c:	3301      	adds	r3, #1
 8010b7e:	68ba      	ldr	r2, [r7, #8]
 8010b80:	4413      	add	r3, r2
 8010b82:	2200      	movs	r2, #0
 8010b84:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010b86:	7dfb      	ldrb	r3, [r7, #23]
 8010b88:	3301      	adds	r3, #1
 8010b8a:	75fb      	strb	r3, [r7, #23]
 8010b8c:	7dfa      	ldrb	r2, [r7, #23]
 8010b8e:	79fb      	ldrb	r3, [r7, #7]
 8010b90:	429a      	cmp	r2, r3
 8010b92:	d3d3      	bcc.n	8010b3c <IntToUnicode+0x18>
  }
}
 8010b94:	bf00      	nop
 8010b96:	bf00      	nop
 8010b98:	371c      	adds	r7, #28
 8010b9a:	46bd      	mov	sp, r7
 8010b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ba0:	4770      	bx	lr
	...

08010ba4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010ba4:	b580      	push	{r7, lr}
 8010ba6:	b0b8      	sub	sp, #224	; 0xe0
 8010ba8:	af00      	add	r7, sp, #0
 8010baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010bac:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8010bb0:	2200      	movs	r2, #0
 8010bb2:	601a      	str	r2, [r3, #0]
 8010bb4:	605a      	str	r2, [r3, #4]
 8010bb6:	609a      	str	r2, [r3, #8]
 8010bb8:	60da      	str	r2, [r3, #12]
 8010bba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8010bbc:	f107 0310 	add.w	r3, r7, #16
 8010bc0:	22bc      	movs	r2, #188	; 0xbc
 8010bc2:	2100      	movs	r1, #0
 8010bc4:	4618      	mov	r0, r3
 8010bc6:	f000 fb51 	bl	801126c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	4a2a      	ldr	r2, [pc, #168]	; (8010c78 <HAL_PCD_MspInit+0xd4>)
 8010bd0:	4293      	cmp	r3, r2
 8010bd2:	d14c      	bne.n	8010c6e <HAL_PCD_MspInit+0xca>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

     /* USER CODE END SPI1_MspInit 0 */
     /** Initializes the peripherals clock
     */
       PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8010bd4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010bd8:	613b      	str	r3, [r7, #16]
      PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8010bda:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8010bde:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
          if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8010be2:	f107 0310 	add.w	r3, r7, #16
 8010be6:	4618      	mov	r0, r3
 8010be8:	f7f7 ff86 	bl	8008af8 <HAL_RCCEx_PeriphCLKConfig>
 8010bec:	4603      	mov	r3, r0
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d001      	beq.n	8010bf6 <HAL_PCD_MspInit+0x52>
          {
            Error_Handler();
 8010bf2:	f7f0 f997 	bl	8000f24 <Error_Handler>
          }
  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010bf6:	4b21      	ldr	r3, [pc, #132]	; (8010c7c <HAL_PCD_MspInit+0xd8>)
 8010bf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010bfc:	4a1f      	ldr	r2, [pc, #124]	; (8010c7c <HAL_PCD_MspInit+0xd8>)
 8010bfe:	f043 0301 	orr.w	r3, r3, #1
 8010c02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8010c06:	4b1d      	ldr	r3, [pc, #116]	; (8010c7c <HAL_PCD_MspInit+0xd8>)
 8010c08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010c0c:	f003 0301 	and.w	r3, r3, #1
 8010c10:	60fb      	str	r3, [r7, #12]
 8010c12:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8010c14:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8010c18:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010c1c:	2302      	movs	r3, #2
 8010c1e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010c22:	2300      	movs	r3, #0
 8010c24:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010c28:	2300      	movs	r3, #0
 8010c2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8010c2e:	230a      	movs	r3, #10
 8010c30:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010c34:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8010c38:	4619      	mov	r1, r3
 8010c3a:	4811      	ldr	r0, [pc, #68]	; (8010c80 <HAL_PCD_MspInit+0xdc>)
 8010c3c:	f7f4 fb6a 	bl	8005314 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010c40:	4b0e      	ldr	r3, [pc, #56]	; (8010c7c <HAL_PCD_MspInit+0xd8>)
 8010c42:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8010c46:	4a0d      	ldr	r2, [pc, #52]	; (8010c7c <HAL_PCD_MspInit+0xd8>)
 8010c48:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8010c4c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8010c50:	4b0a      	ldr	r3, [pc, #40]	; (8010c7c <HAL_PCD_MspInit+0xd8>)
 8010c52:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8010c56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010c5a:	60bb      	str	r3, [r7, #8]
 8010c5c:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8010c5e:	2200      	movs	r2, #0
 8010c60:	2100      	movs	r1, #0
 8010c62:	2065      	movs	r0, #101	; 0x65
 8010c64:	f7f1 fc41 	bl	80024ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010c68:	2065      	movs	r0, #101	; 0x65
 8010c6a:	f7f1 fc58 	bl	800251e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010c6e:	bf00      	nop
 8010c70:	37e0      	adds	r7, #224	; 0xe0
 8010c72:	46bd      	mov	sp, r7
 8010c74:	bd80      	pop	{r7, pc}
 8010c76:	bf00      	nop
 8010c78:	40080000 	.word	0x40080000
 8010c7c:	58024400 	.word	0x58024400
 8010c80:	58020000 	.word	0x58020000

08010c84 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010c84:	b580      	push	{r7, lr}
 8010c86:	b082      	sub	sp, #8
 8010c88:	af00      	add	r7, sp, #0
 8010c8a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8010c98:	4619      	mov	r1, r3
 8010c9a:	4610      	mov	r0, r2
 8010c9c:	f7fe fc9c 	bl	800f5d8 <USBD_LL_SetupStage>
}
 8010ca0:	bf00      	nop
 8010ca2:	3708      	adds	r7, #8
 8010ca4:	46bd      	mov	sp, r7
 8010ca6:	bd80      	pop	{r7, pc}

08010ca8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010ca8:	b580      	push	{r7, lr}
 8010caa:	b082      	sub	sp, #8
 8010cac:	af00      	add	r7, sp, #0
 8010cae:	6078      	str	r0, [r7, #4]
 8010cb0:	460b      	mov	r3, r1
 8010cb2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8010cba:	78fa      	ldrb	r2, [r7, #3]
 8010cbc:	6879      	ldr	r1, [r7, #4]
 8010cbe:	4613      	mov	r3, r2
 8010cc0:	00db      	lsls	r3, r3, #3
 8010cc2:	1a9b      	subs	r3, r3, r2
 8010cc4:	009b      	lsls	r3, r3, #2
 8010cc6:	440b      	add	r3, r1
 8010cc8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8010ccc:	681a      	ldr	r2, [r3, #0]
 8010cce:	78fb      	ldrb	r3, [r7, #3]
 8010cd0:	4619      	mov	r1, r3
 8010cd2:	f7fe fcd6 	bl	800f682 <USBD_LL_DataOutStage>
}
 8010cd6:	bf00      	nop
 8010cd8:	3708      	adds	r7, #8
 8010cda:	46bd      	mov	sp, r7
 8010cdc:	bd80      	pop	{r7, pc}

08010cde <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010cde:	b580      	push	{r7, lr}
 8010ce0:	b082      	sub	sp, #8
 8010ce2:	af00      	add	r7, sp, #0
 8010ce4:	6078      	str	r0, [r7, #4]
 8010ce6:	460b      	mov	r3, r1
 8010ce8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8010cf0:	78fa      	ldrb	r2, [r7, #3]
 8010cf2:	6879      	ldr	r1, [r7, #4]
 8010cf4:	4613      	mov	r3, r2
 8010cf6:	00db      	lsls	r3, r3, #3
 8010cf8:	1a9b      	subs	r3, r3, r2
 8010cfa:	009b      	lsls	r3, r3, #2
 8010cfc:	440b      	add	r3, r1
 8010cfe:	3348      	adds	r3, #72	; 0x48
 8010d00:	681a      	ldr	r2, [r3, #0]
 8010d02:	78fb      	ldrb	r3, [r7, #3]
 8010d04:	4619      	mov	r1, r3
 8010d06:	f7fe fd21 	bl	800f74c <USBD_LL_DataInStage>
}
 8010d0a:	bf00      	nop
 8010d0c:	3708      	adds	r7, #8
 8010d0e:	46bd      	mov	sp, r7
 8010d10:	bd80      	pop	{r7, pc}

08010d12 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010d12:	b580      	push	{r7, lr}
 8010d14:	b082      	sub	sp, #8
 8010d16:	af00      	add	r7, sp, #0
 8010d18:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010d20:	4618      	mov	r0, r3
 8010d22:	f7fe fe2a 	bl	800f97a <USBD_LL_SOF>
}
 8010d26:	bf00      	nop
 8010d28:	3708      	adds	r7, #8
 8010d2a:	46bd      	mov	sp, r7
 8010d2c:	bd80      	pop	{r7, pc}

08010d2e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010d2e:	b580      	push	{r7, lr}
 8010d30:	b084      	sub	sp, #16
 8010d32:	af00      	add	r7, sp, #0
 8010d34:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010d36:	2301      	movs	r3, #1
 8010d38:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	68db      	ldr	r3, [r3, #12]
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d102      	bne.n	8010d48 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8010d42:	2300      	movs	r3, #0
 8010d44:	73fb      	strb	r3, [r7, #15]
 8010d46:	e008      	b.n	8010d5a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	68db      	ldr	r3, [r3, #12]
 8010d4c:	2b02      	cmp	r3, #2
 8010d4e:	d102      	bne.n	8010d56 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8010d50:	2301      	movs	r3, #1
 8010d52:	73fb      	strb	r3, [r7, #15]
 8010d54:	e001      	b.n	8010d5a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8010d56:	f7f0 f8e5 	bl	8000f24 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010d60:	7bfa      	ldrb	r2, [r7, #15]
 8010d62:	4611      	mov	r1, r2
 8010d64:	4618      	mov	r0, r3
 8010d66:	f7fe fdca 	bl	800f8fe <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010d70:	4618      	mov	r0, r3
 8010d72:	f7fe fd83 	bl	800f87c <USBD_LL_Reset>
}
 8010d76:	bf00      	nop
 8010d78:	3710      	adds	r7, #16
 8010d7a:	46bd      	mov	sp, r7
 8010d7c:	bd80      	pop	{r7, pc}
	...

08010d80 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010d80:	b580      	push	{r7, lr}
 8010d82:	b082      	sub	sp, #8
 8010d84:	af00      	add	r7, sp, #0
 8010d86:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010d8e:	4618      	mov	r0, r3
 8010d90:	f7fe fdc5 	bl	800f91e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010d9c:	681b      	ldr	r3, [r3, #0]
 8010d9e:	687a      	ldr	r2, [r7, #4]
 8010da0:	6812      	ldr	r2, [r2, #0]
 8010da2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010da6:	f043 0301 	orr.w	r3, r3, #1
 8010daa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	6a1b      	ldr	r3, [r3, #32]
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	d005      	beq.n	8010dc0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010db4:	4b04      	ldr	r3, [pc, #16]	; (8010dc8 <HAL_PCD_SuspendCallback+0x48>)
 8010db6:	691b      	ldr	r3, [r3, #16]
 8010db8:	4a03      	ldr	r2, [pc, #12]	; (8010dc8 <HAL_PCD_SuspendCallback+0x48>)
 8010dba:	f043 0306 	orr.w	r3, r3, #6
 8010dbe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010dc0:	bf00      	nop
 8010dc2:	3708      	adds	r7, #8
 8010dc4:	46bd      	mov	sp, r7
 8010dc6:	bd80      	pop	{r7, pc}
 8010dc8:	e000ed00 	.word	0xe000ed00

08010dcc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010dcc:	b580      	push	{r7, lr}
 8010dce:	b082      	sub	sp, #8
 8010dd0:	af00      	add	r7, sp, #0
 8010dd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010dda:	4618      	mov	r0, r3
 8010ddc:	f7fe fdb5 	bl	800f94a <USBD_LL_Resume>
}
 8010de0:	bf00      	nop
 8010de2:	3708      	adds	r7, #8
 8010de4:	46bd      	mov	sp, r7
 8010de6:	bd80      	pop	{r7, pc}

08010de8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010de8:	b580      	push	{r7, lr}
 8010dea:	b082      	sub	sp, #8
 8010dec:	af00      	add	r7, sp, #0
 8010dee:	6078      	str	r0, [r7, #4]
 8010df0:	460b      	mov	r3, r1
 8010df2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010dfa:	78fa      	ldrb	r2, [r7, #3]
 8010dfc:	4611      	mov	r1, r2
 8010dfe:	4618      	mov	r0, r3
 8010e00:	f7fe fde3 	bl	800f9ca <USBD_LL_IsoOUTIncomplete>
}
 8010e04:	bf00      	nop
 8010e06:	3708      	adds	r7, #8
 8010e08:	46bd      	mov	sp, r7
 8010e0a:	bd80      	pop	{r7, pc}

08010e0c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010e0c:	b580      	push	{r7, lr}
 8010e0e:	b082      	sub	sp, #8
 8010e10:	af00      	add	r7, sp, #0
 8010e12:	6078      	str	r0, [r7, #4]
 8010e14:	460b      	mov	r3, r1
 8010e16:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010e1e:	78fa      	ldrb	r2, [r7, #3]
 8010e20:	4611      	mov	r1, r2
 8010e22:	4618      	mov	r0, r3
 8010e24:	f7fe fdc4 	bl	800f9b0 <USBD_LL_IsoINIncomplete>
}
 8010e28:	bf00      	nop
 8010e2a:	3708      	adds	r7, #8
 8010e2c:	46bd      	mov	sp, r7
 8010e2e:	bd80      	pop	{r7, pc}

08010e30 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010e30:	b580      	push	{r7, lr}
 8010e32:	b082      	sub	sp, #8
 8010e34:	af00      	add	r7, sp, #0
 8010e36:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010e3e:	4618      	mov	r0, r3
 8010e40:	f7fe fdd0 	bl	800f9e4 <USBD_LL_DevConnected>
}
 8010e44:	bf00      	nop
 8010e46:	3708      	adds	r7, #8
 8010e48:	46bd      	mov	sp, r7
 8010e4a:	bd80      	pop	{r7, pc}

08010e4c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010e4c:	b580      	push	{r7, lr}
 8010e4e:	b082      	sub	sp, #8
 8010e50:	af00      	add	r7, sp, #0
 8010e52:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010e5a:	4618      	mov	r0, r3
 8010e5c:	f7fe fdcd 	bl	800f9fa <USBD_LL_DevDisconnected>
}
 8010e60:	bf00      	nop
 8010e62:	3708      	adds	r7, #8
 8010e64:	46bd      	mov	sp, r7
 8010e66:	bd80      	pop	{r7, pc}

08010e68 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010e68:	b580      	push	{r7, lr}
 8010e6a:	b082      	sub	sp, #8
 8010e6c:	af00      	add	r7, sp, #0
 8010e6e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	781b      	ldrb	r3, [r3, #0]
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d13e      	bne.n	8010ef6 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8010e78:	4a21      	ldr	r2, [pc, #132]	; (8010f00 <USBD_LL_Init+0x98>)
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	4a1f      	ldr	r2, [pc, #124]	; (8010f00 <USBD_LL_Init+0x98>)
 8010e84:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010e88:	4b1d      	ldr	r3, [pc, #116]	; (8010f00 <USBD_LL_Init+0x98>)
 8010e8a:	4a1e      	ldr	r2, [pc, #120]	; (8010f04 <USBD_LL_Init+0x9c>)
 8010e8c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8010e8e:	4b1c      	ldr	r3, [pc, #112]	; (8010f00 <USBD_LL_Init+0x98>)
 8010e90:	2209      	movs	r2, #9
 8010e92:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8010e94:	4b1a      	ldr	r3, [pc, #104]	; (8010f00 <USBD_LL_Init+0x98>)
 8010e96:	2202      	movs	r2, #2
 8010e98:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010e9a:	4b19      	ldr	r3, [pc, #100]	; (8010f00 <USBD_LL_Init+0x98>)
 8010e9c:	2200      	movs	r2, #0
 8010e9e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010ea0:	4b17      	ldr	r3, [pc, #92]	; (8010f00 <USBD_LL_Init+0x98>)
 8010ea2:	2202      	movs	r2, #2
 8010ea4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010ea6:	4b16      	ldr	r3, [pc, #88]	; (8010f00 <USBD_LL_Init+0x98>)
 8010ea8:	2200      	movs	r2, #0
 8010eaa:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8010eac:	4b14      	ldr	r3, [pc, #80]	; (8010f00 <USBD_LL_Init+0x98>)
 8010eae:	2200      	movs	r2, #0
 8010eb0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8010eb2:	4b13      	ldr	r3, [pc, #76]	; (8010f00 <USBD_LL_Init+0x98>)
 8010eb4:	2200      	movs	r2, #0
 8010eb6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8010eb8:	4b11      	ldr	r3, [pc, #68]	; (8010f00 <USBD_LL_Init+0x98>)
 8010eba:	2200      	movs	r2, #0
 8010ebc:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8010ebe:	4b10      	ldr	r3, [pc, #64]	; (8010f00 <USBD_LL_Init+0x98>)
 8010ec0:	2200      	movs	r2, #0
 8010ec2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8010ec4:	4b0e      	ldr	r3, [pc, #56]	; (8010f00 <USBD_LL_Init+0x98>)
 8010ec6:	2200      	movs	r2, #0
 8010ec8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8010eca:	480d      	ldr	r0, [pc, #52]	; (8010f00 <USBD_LL_Init+0x98>)
 8010ecc:	f7f5 fbf2 	bl	80066b4 <HAL_PCD_Init>
 8010ed0:	4603      	mov	r3, r0
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d001      	beq.n	8010eda <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8010ed6:	f7f0 f825 	bl	8000f24 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8010eda:	2180      	movs	r1, #128	; 0x80
 8010edc:	4808      	ldr	r0, [pc, #32]	; (8010f00 <USBD_LL_Init+0x98>)
 8010ede:	f7f6 fd84 	bl	80079ea <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8010ee2:	2240      	movs	r2, #64	; 0x40
 8010ee4:	2100      	movs	r1, #0
 8010ee6:	4806      	ldr	r0, [pc, #24]	; (8010f00 <USBD_LL_Init+0x98>)
 8010ee8:	f7f6 fd38 	bl	800795c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8010eec:	2280      	movs	r2, #128	; 0x80
 8010eee:	2101      	movs	r1, #1
 8010ef0:	4803      	ldr	r0, [pc, #12]	; (8010f00 <USBD_LL_Init+0x98>)
 8010ef2:	f7f6 fd33 	bl	800795c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8010ef6:	2300      	movs	r3, #0
}
 8010ef8:	4618      	mov	r0, r3
 8010efa:	3708      	adds	r7, #8
 8010efc:	46bd      	mov	sp, r7
 8010efe:	bd80      	pop	{r7, pc}
 8010f00:	24001d18 	.word	0x24001d18
 8010f04:	40080000 	.word	0x40080000

08010f08 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010f08:	b580      	push	{r7, lr}
 8010f0a:	b084      	sub	sp, #16
 8010f0c:	af00      	add	r7, sp, #0
 8010f0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010f10:	2300      	movs	r3, #0
 8010f12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010f14:	2300      	movs	r3, #0
 8010f16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010f1e:	4618      	mov	r0, r3
 8010f20:	f7f5 fcec 	bl	80068fc <HAL_PCD_Start>
 8010f24:	4603      	mov	r3, r0
 8010f26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010f28:	7bfb      	ldrb	r3, [r7, #15]
 8010f2a:	4618      	mov	r0, r3
 8010f2c:	f000 f92a 	bl	8011184 <USBD_Get_USB_Status>
 8010f30:	4603      	mov	r3, r0
 8010f32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010f34:	7bbb      	ldrb	r3, [r7, #14]
}
 8010f36:	4618      	mov	r0, r3
 8010f38:	3710      	adds	r7, #16
 8010f3a:	46bd      	mov	sp, r7
 8010f3c:	bd80      	pop	{r7, pc}

08010f3e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010f3e:	b580      	push	{r7, lr}
 8010f40:	b084      	sub	sp, #16
 8010f42:	af00      	add	r7, sp, #0
 8010f44:	6078      	str	r0, [r7, #4]
 8010f46:	4608      	mov	r0, r1
 8010f48:	4611      	mov	r1, r2
 8010f4a:	461a      	mov	r2, r3
 8010f4c:	4603      	mov	r3, r0
 8010f4e:	70fb      	strb	r3, [r7, #3]
 8010f50:	460b      	mov	r3, r1
 8010f52:	70bb      	strb	r3, [r7, #2]
 8010f54:	4613      	mov	r3, r2
 8010f56:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010f58:	2300      	movs	r3, #0
 8010f5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010f5c:	2300      	movs	r3, #0
 8010f5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010f66:	78bb      	ldrb	r3, [r7, #2]
 8010f68:	883a      	ldrh	r2, [r7, #0]
 8010f6a:	78f9      	ldrb	r1, [r7, #3]
 8010f6c:	f7f6 f8fd 	bl	800716a <HAL_PCD_EP_Open>
 8010f70:	4603      	mov	r3, r0
 8010f72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010f74:	7bfb      	ldrb	r3, [r7, #15]
 8010f76:	4618      	mov	r0, r3
 8010f78:	f000 f904 	bl	8011184 <USBD_Get_USB_Status>
 8010f7c:	4603      	mov	r3, r0
 8010f7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010f80:	7bbb      	ldrb	r3, [r7, #14]
}
 8010f82:	4618      	mov	r0, r3
 8010f84:	3710      	adds	r7, #16
 8010f86:	46bd      	mov	sp, r7
 8010f88:	bd80      	pop	{r7, pc}

08010f8a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010f8a:	b580      	push	{r7, lr}
 8010f8c:	b084      	sub	sp, #16
 8010f8e:	af00      	add	r7, sp, #0
 8010f90:	6078      	str	r0, [r7, #4]
 8010f92:	460b      	mov	r3, r1
 8010f94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010f96:	2300      	movs	r3, #0
 8010f98:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010f9a:	2300      	movs	r3, #0
 8010f9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010fa4:	78fa      	ldrb	r2, [r7, #3]
 8010fa6:	4611      	mov	r1, r2
 8010fa8:	4618      	mov	r0, r3
 8010faa:	f7f6 f946 	bl	800723a <HAL_PCD_EP_Close>
 8010fae:	4603      	mov	r3, r0
 8010fb0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010fb2:	7bfb      	ldrb	r3, [r7, #15]
 8010fb4:	4618      	mov	r0, r3
 8010fb6:	f000 f8e5 	bl	8011184 <USBD_Get_USB_Status>
 8010fba:	4603      	mov	r3, r0
 8010fbc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010fbe:	7bbb      	ldrb	r3, [r7, #14]
}
 8010fc0:	4618      	mov	r0, r3
 8010fc2:	3710      	adds	r7, #16
 8010fc4:	46bd      	mov	sp, r7
 8010fc6:	bd80      	pop	{r7, pc}

08010fc8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010fc8:	b580      	push	{r7, lr}
 8010fca:	b084      	sub	sp, #16
 8010fcc:	af00      	add	r7, sp, #0
 8010fce:	6078      	str	r0, [r7, #4]
 8010fd0:	460b      	mov	r3, r1
 8010fd2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010fd4:	2300      	movs	r3, #0
 8010fd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010fd8:	2300      	movs	r3, #0
 8010fda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010fe2:	78fa      	ldrb	r2, [r7, #3]
 8010fe4:	4611      	mov	r1, r2
 8010fe6:	4618      	mov	r0, r3
 8010fe8:	f7f6 fa1e 	bl	8007428 <HAL_PCD_EP_SetStall>
 8010fec:	4603      	mov	r3, r0
 8010fee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010ff0:	7bfb      	ldrb	r3, [r7, #15]
 8010ff2:	4618      	mov	r0, r3
 8010ff4:	f000 f8c6 	bl	8011184 <USBD_Get_USB_Status>
 8010ff8:	4603      	mov	r3, r0
 8010ffa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010ffc:	7bbb      	ldrb	r3, [r7, #14]
}
 8010ffe:	4618      	mov	r0, r3
 8011000:	3710      	adds	r7, #16
 8011002:	46bd      	mov	sp, r7
 8011004:	bd80      	pop	{r7, pc}

08011006 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011006:	b580      	push	{r7, lr}
 8011008:	b084      	sub	sp, #16
 801100a:	af00      	add	r7, sp, #0
 801100c:	6078      	str	r0, [r7, #4]
 801100e:	460b      	mov	r3, r1
 8011010:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011012:	2300      	movs	r3, #0
 8011014:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011016:	2300      	movs	r3, #0
 8011018:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011020:	78fa      	ldrb	r2, [r7, #3]
 8011022:	4611      	mov	r1, r2
 8011024:	4618      	mov	r0, r3
 8011026:	f7f6 fa63 	bl	80074f0 <HAL_PCD_EP_ClrStall>
 801102a:	4603      	mov	r3, r0
 801102c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801102e:	7bfb      	ldrb	r3, [r7, #15]
 8011030:	4618      	mov	r0, r3
 8011032:	f000 f8a7 	bl	8011184 <USBD_Get_USB_Status>
 8011036:	4603      	mov	r3, r0
 8011038:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801103a:	7bbb      	ldrb	r3, [r7, #14]
}
 801103c:	4618      	mov	r0, r3
 801103e:	3710      	adds	r7, #16
 8011040:	46bd      	mov	sp, r7
 8011042:	bd80      	pop	{r7, pc}

08011044 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011044:	b480      	push	{r7}
 8011046:	b085      	sub	sp, #20
 8011048:	af00      	add	r7, sp, #0
 801104a:	6078      	str	r0, [r7, #4]
 801104c:	460b      	mov	r3, r1
 801104e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011056:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011058:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801105c:	2b00      	cmp	r3, #0
 801105e:	da0b      	bge.n	8011078 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011060:	78fb      	ldrb	r3, [r7, #3]
 8011062:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011066:	68f9      	ldr	r1, [r7, #12]
 8011068:	4613      	mov	r3, r2
 801106a:	00db      	lsls	r3, r3, #3
 801106c:	1a9b      	subs	r3, r3, r2
 801106e:	009b      	lsls	r3, r3, #2
 8011070:	440b      	add	r3, r1
 8011072:	333e      	adds	r3, #62	; 0x3e
 8011074:	781b      	ldrb	r3, [r3, #0]
 8011076:	e00b      	b.n	8011090 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011078:	78fb      	ldrb	r3, [r7, #3]
 801107a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801107e:	68f9      	ldr	r1, [r7, #12]
 8011080:	4613      	mov	r3, r2
 8011082:	00db      	lsls	r3, r3, #3
 8011084:	1a9b      	subs	r3, r3, r2
 8011086:	009b      	lsls	r3, r3, #2
 8011088:	440b      	add	r3, r1
 801108a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801108e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011090:	4618      	mov	r0, r3
 8011092:	3714      	adds	r7, #20
 8011094:	46bd      	mov	sp, r7
 8011096:	f85d 7b04 	ldr.w	r7, [sp], #4
 801109a:	4770      	bx	lr

0801109c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801109c:	b580      	push	{r7, lr}
 801109e:	b084      	sub	sp, #16
 80110a0:	af00      	add	r7, sp, #0
 80110a2:	6078      	str	r0, [r7, #4]
 80110a4:	460b      	mov	r3, r1
 80110a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80110a8:	2300      	movs	r3, #0
 80110aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80110ac:	2300      	movs	r3, #0
 80110ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80110b6:	78fa      	ldrb	r2, [r7, #3]
 80110b8:	4611      	mov	r1, r2
 80110ba:	4618      	mov	r0, r3
 80110bc:	f7f6 f830 	bl	8007120 <HAL_PCD_SetAddress>
 80110c0:	4603      	mov	r3, r0
 80110c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80110c4:	7bfb      	ldrb	r3, [r7, #15]
 80110c6:	4618      	mov	r0, r3
 80110c8:	f000 f85c 	bl	8011184 <USBD_Get_USB_Status>
 80110cc:	4603      	mov	r3, r0
 80110ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80110d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80110d2:	4618      	mov	r0, r3
 80110d4:	3710      	adds	r7, #16
 80110d6:	46bd      	mov	sp, r7
 80110d8:	bd80      	pop	{r7, pc}

080110da <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80110da:	b580      	push	{r7, lr}
 80110dc:	b086      	sub	sp, #24
 80110de:	af00      	add	r7, sp, #0
 80110e0:	60f8      	str	r0, [r7, #12]
 80110e2:	607a      	str	r2, [r7, #4]
 80110e4:	603b      	str	r3, [r7, #0]
 80110e6:	460b      	mov	r3, r1
 80110e8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80110ea:	2300      	movs	r3, #0
 80110ec:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80110ee:	2300      	movs	r3, #0
 80110f0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80110f2:	68fb      	ldr	r3, [r7, #12]
 80110f4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80110f8:	7af9      	ldrb	r1, [r7, #11]
 80110fa:	683b      	ldr	r3, [r7, #0]
 80110fc:	687a      	ldr	r2, [r7, #4]
 80110fe:	f7f6 f949 	bl	8007394 <HAL_PCD_EP_Transmit>
 8011102:	4603      	mov	r3, r0
 8011104:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011106:	7dfb      	ldrb	r3, [r7, #23]
 8011108:	4618      	mov	r0, r3
 801110a:	f000 f83b 	bl	8011184 <USBD_Get_USB_Status>
 801110e:	4603      	mov	r3, r0
 8011110:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011112:	7dbb      	ldrb	r3, [r7, #22]
}
 8011114:	4618      	mov	r0, r3
 8011116:	3718      	adds	r7, #24
 8011118:	46bd      	mov	sp, r7
 801111a:	bd80      	pop	{r7, pc}

0801111c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801111c:	b580      	push	{r7, lr}
 801111e:	b086      	sub	sp, #24
 8011120:	af00      	add	r7, sp, #0
 8011122:	60f8      	str	r0, [r7, #12]
 8011124:	607a      	str	r2, [r7, #4]
 8011126:	603b      	str	r3, [r7, #0]
 8011128:	460b      	mov	r3, r1
 801112a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801112c:	2300      	movs	r3, #0
 801112e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011130:	2300      	movs	r3, #0
 8011132:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011134:	68fb      	ldr	r3, [r7, #12]
 8011136:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801113a:	7af9      	ldrb	r1, [r7, #11]
 801113c:	683b      	ldr	r3, [r7, #0]
 801113e:	687a      	ldr	r2, [r7, #4]
 8011140:	f7f6 f8c5 	bl	80072ce <HAL_PCD_EP_Receive>
 8011144:	4603      	mov	r3, r0
 8011146:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011148:	7dfb      	ldrb	r3, [r7, #23]
 801114a:	4618      	mov	r0, r3
 801114c:	f000 f81a 	bl	8011184 <USBD_Get_USB_Status>
 8011150:	4603      	mov	r3, r0
 8011152:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011154:	7dbb      	ldrb	r3, [r7, #22]
}
 8011156:	4618      	mov	r0, r3
 8011158:	3718      	adds	r7, #24
 801115a:	46bd      	mov	sp, r7
 801115c:	bd80      	pop	{r7, pc}

0801115e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801115e:	b580      	push	{r7, lr}
 8011160:	b082      	sub	sp, #8
 8011162:	af00      	add	r7, sp, #0
 8011164:	6078      	str	r0, [r7, #4]
 8011166:	460b      	mov	r3, r1
 8011168:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011170:	78fa      	ldrb	r2, [r7, #3]
 8011172:	4611      	mov	r1, r2
 8011174:	4618      	mov	r0, r3
 8011176:	f7f6 f8f5 	bl	8007364 <HAL_PCD_EP_GetRxCount>
 801117a:	4603      	mov	r3, r0
}
 801117c:	4618      	mov	r0, r3
 801117e:	3708      	adds	r7, #8
 8011180:	46bd      	mov	sp, r7
 8011182:	bd80      	pop	{r7, pc}

08011184 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011184:	b480      	push	{r7}
 8011186:	b085      	sub	sp, #20
 8011188:	af00      	add	r7, sp, #0
 801118a:	4603      	mov	r3, r0
 801118c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801118e:	2300      	movs	r3, #0
 8011190:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011192:	79fb      	ldrb	r3, [r7, #7]
 8011194:	2b03      	cmp	r3, #3
 8011196:	d817      	bhi.n	80111c8 <USBD_Get_USB_Status+0x44>
 8011198:	a201      	add	r2, pc, #4	; (adr r2, 80111a0 <USBD_Get_USB_Status+0x1c>)
 801119a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801119e:	bf00      	nop
 80111a0:	080111b1 	.word	0x080111b1
 80111a4:	080111b7 	.word	0x080111b7
 80111a8:	080111bd 	.word	0x080111bd
 80111ac:	080111c3 	.word	0x080111c3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80111b0:	2300      	movs	r3, #0
 80111b2:	73fb      	strb	r3, [r7, #15]
    break;
 80111b4:	e00b      	b.n	80111ce <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80111b6:	2303      	movs	r3, #3
 80111b8:	73fb      	strb	r3, [r7, #15]
    break;
 80111ba:	e008      	b.n	80111ce <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80111bc:	2301      	movs	r3, #1
 80111be:	73fb      	strb	r3, [r7, #15]
    break;
 80111c0:	e005      	b.n	80111ce <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80111c2:	2303      	movs	r3, #3
 80111c4:	73fb      	strb	r3, [r7, #15]
    break;
 80111c6:	e002      	b.n	80111ce <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80111c8:	2303      	movs	r3, #3
 80111ca:	73fb      	strb	r3, [r7, #15]
    break;
 80111cc:	bf00      	nop
  }
  return usb_status;
 80111ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80111d0:	4618      	mov	r0, r3
 80111d2:	3714      	adds	r7, #20
 80111d4:	46bd      	mov	sp, r7
 80111d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111da:	4770      	bx	lr

080111dc <__errno>:
 80111dc:	4b01      	ldr	r3, [pc, #4]	; (80111e4 <__errno+0x8>)
 80111de:	6818      	ldr	r0, [r3, #0]
 80111e0:	4770      	bx	lr
 80111e2:	bf00      	nop
 80111e4:	24000184 	.word	0x24000184

080111e8 <__libc_init_array>:
 80111e8:	b570      	push	{r4, r5, r6, lr}
 80111ea:	4d0d      	ldr	r5, [pc, #52]	; (8011220 <__libc_init_array+0x38>)
 80111ec:	4c0d      	ldr	r4, [pc, #52]	; (8011224 <__libc_init_array+0x3c>)
 80111ee:	1b64      	subs	r4, r4, r5
 80111f0:	10a4      	asrs	r4, r4, #2
 80111f2:	2600      	movs	r6, #0
 80111f4:	42a6      	cmp	r6, r4
 80111f6:	d109      	bne.n	801120c <__libc_init_array+0x24>
 80111f8:	4d0b      	ldr	r5, [pc, #44]	; (8011228 <__libc_init_array+0x40>)
 80111fa:	4c0c      	ldr	r4, [pc, #48]	; (801122c <__libc_init_array+0x44>)
 80111fc:	f002 fc98 	bl	8013b30 <_init>
 8011200:	1b64      	subs	r4, r4, r5
 8011202:	10a4      	asrs	r4, r4, #2
 8011204:	2600      	movs	r6, #0
 8011206:	42a6      	cmp	r6, r4
 8011208:	d105      	bne.n	8011216 <__libc_init_array+0x2e>
 801120a:	bd70      	pop	{r4, r5, r6, pc}
 801120c:	f855 3b04 	ldr.w	r3, [r5], #4
 8011210:	4798      	blx	r3
 8011212:	3601      	adds	r6, #1
 8011214:	e7ee      	b.n	80111f4 <__libc_init_array+0xc>
 8011216:	f855 3b04 	ldr.w	r3, [r5], #4
 801121a:	4798      	blx	r3
 801121c:	3601      	adds	r6, #1
 801121e:	e7f2      	b.n	8011206 <__libc_init_array+0x1e>
 8011220:	080140b4 	.word	0x080140b4
 8011224:	080140b4 	.word	0x080140b4
 8011228:	080140b4 	.word	0x080140b4
 801122c:	080140bc 	.word	0x080140bc

08011230 <malloc>:
 8011230:	4b02      	ldr	r3, [pc, #8]	; (801123c <malloc+0xc>)
 8011232:	4601      	mov	r1, r0
 8011234:	6818      	ldr	r0, [r3, #0]
 8011236:	f000 b88d 	b.w	8011354 <_malloc_r>
 801123a:	bf00      	nop
 801123c:	24000184 	.word	0x24000184

08011240 <free>:
 8011240:	4b02      	ldr	r3, [pc, #8]	; (801124c <free+0xc>)
 8011242:	4601      	mov	r1, r0
 8011244:	6818      	ldr	r0, [r3, #0]
 8011246:	f000 b819 	b.w	801127c <_free_r>
 801124a:	bf00      	nop
 801124c:	24000184 	.word	0x24000184

08011250 <memcpy>:
 8011250:	440a      	add	r2, r1
 8011252:	4291      	cmp	r1, r2
 8011254:	f100 33ff 	add.w	r3, r0, #4294967295
 8011258:	d100      	bne.n	801125c <memcpy+0xc>
 801125a:	4770      	bx	lr
 801125c:	b510      	push	{r4, lr}
 801125e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011262:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011266:	4291      	cmp	r1, r2
 8011268:	d1f9      	bne.n	801125e <memcpy+0xe>
 801126a:	bd10      	pop	{r4, pc}

0801126c <memset>:
 801126c:	4402      	add	r2, r0
 801126e:	4603      	mov	r3, r0
 8011270:	4293      	cmp	r3, r2
 8011272:	d100      	bne.n	8011276 <memset+0xa>
 8011274:	4770      	bx	lr
 8011276:	f803 1b01 	strb.w	r1, [r3], #1
 801127a:	e7f9      	b.n	8011270 <memset+0x4>

0801127c <_free_r>:
 801127c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801127e:	2900      	cmp	r1, #0
 8011280:	d044      	beq.n	801130c <_free_r+0x90>
 8011282:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011286:	9001      	str	r0, [sp, #4]
 8011288:	2b00      	cmp	r3, #0
 801128a:	f1a1 0404 	sub.w	r4, r1, #4
 801128e:	bfb8      	it	lt
 8011290:	18e4      	addlt	r4, r4, r3
 8011292:	f001 fb27 	bl	80128e4 <__malloc_lock>
 8011296:	4a1e      	ldr	r2, [pc, #120]	; (8011310 <_free_r+0x94>)
 8011298:	9801      	ldr	r0, [sp, #4]
 801129a:	6813      	ldr	r3, [r2, #0]
 801129c:	b933      	cbnz	r3, 80112ac <_free_r+0x30>
 801129e:	6063      	str	r3, [r4, #4]
 80112a0:	6014      	str	r4, [r2, #0]
 80112a2:	b003      	add	sp, #12
 80112a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80112a8:	f001 bb22 	b.w	80128f0 <__malloc_unlock>
 80112ac:	42a3      	cmp	r3, r4
 80112ae:	d908      	bls.n	80112c2 <_free_r+0x46>
 80112b0:	6825      	ldr	r5, [r4, #0]
 80112b2:	1961      	adds	r1, r4, r5
 80112b4:	428b      	cmp	r3, r1
 80112b6:	bf01      	itttt	eq
 80112b8:	6819      	ldreq	r1, [r3, #0]
 80112ba:	685b      	ldreq	r3, [r3, #4]
 80112bc:	1949      	addeq	r1, r1, r5
 80112be:	6021      	streq	r1, [r4, #0]
 80112c0:	e7ed      	b.n	801129e <_free_r+0x22>
 80112c2:	461a      	mov	r2, r3
 80112c4:	685b      	ldr	r3, [r3, #4]
 80112c6:	b10b      	cbz	r3, 80112cc <_free_r+0x50>
 80112c8:	42a3      	cmp	r3, r4
 80112ca:	d9fa      	bls.n	80112c2 <_free_r+0x46>
 80112cc:	6811      	ldr	r1, [r2, #0]
 80112ce:	1855      	adds	r5, r2, r1
 80112d0:	42a5      	cmp	r5, r4
 80112d2:	d10b      	bne.n	80112ec <_free_r+0x70>
 80112d4:	6824      	ldr	r4, [r4, #0]
 80112d6:	4421      	add	r1, r4
 80112d8:	1854      	adds	r4, r2, r1
 80112da:	42a3      	cmp	r3, r4
 80112dc:	6011      	str	r1, [r2, #0]
 80112de:	d1e0      	bne.n	80112a2 <_free_r+0x26>
 80112e0:	681c      	ldr	r4, [r3, #0]
 80112e2:	685b      	ldr	r3, [r3, #4]
 80112e4:	6053      	str	r3, [r2, #4]
 80112e6:	4421      	add	r1, r4
 80112e8:	6011      	str	r1, [r2, #0]
 80112ea:	e7da      	b.n	80112a2 <_free_r+0x26>
 80112ec:	d902      	bls.n	80112f4 <_free_r+0x78>
 80112ee:	230c      	movs	r3, #12
 80112f0:	6003      	str	r3, [r0, #0]
 80112f2:	e7d6      	b.n	80112a2 <_free_r+0x26>
 80112f4:	6825      	ldr	r5, [r4, #0]
 80112f6:	1961      	adds	r1, r4, r5
 80112f8:	428b      	cmp	r3, r1
 80112fa:	bf04      	itt	eq
 80112fc:	6819      	ldreq	r1, [r3, #0]
 80112fe:	685b      	ldreq	r3, [r3, #4]
 8011300:	6063      	str	r3, [r4, #4]
 8011302:	bf04      	itt	eq
 8011304:	1949      	addeq	r1, r1, r5
 8011306:	6021      	streq	r1, [r4, #0]
 8011308:	6054      	str	r4, [r2, #4]
 801130a:	e7ca      	b.n	80112a2 <_free_r+0x26>
 801130c:	b003      	add	sp, #12
 801130e:	bd30      	pop	{r4, r5, pc}
 8011310:	24002120 	.word	0x24002120

08011314 <sbrk_aligned>:
 8011314:	b570      	push	{r4, r5, r6, lr}
 8011316:	4e0e      	ldr	r6, [pc, #56]	; (8011350 <sbrk_aligned+0x3c>)
 8011318:	460c      	mov	r4, r1
 801131a:	6831      	ldr	r1, [r6, #0]
 801131c:	4605      	mov	r5, r0
 801131e:	b911      	cbnz	r1, 8011326 <sbrk_aligned+0x12>
 8011320:	f000 fcd0 	bl	8011cc4 <_sbrk_r>
 8011324:	6030      	str	r0, [r6, #0]
 8011326:	4621      	mov	r1, r4
 8011328:	4628      	mov	r0, r5
 801132a:	f000 fccb 	bl	8011cc4 <_sbrk_r>
 801132e:	1c43      	adds	r3, r0, #1
 8011330:	d00a      	beq.n	8011348 <sbrk_aligned+0x34>
 8011332:	1cc4      	adds	r4, r0, #3
 8011334:	f024 0403 	bic.w	r4, r4, #3
 8011338:	42a0      	cmp	r0, r4
 801133a:	d007      	beq.n	801134c <sbrk_aligned+0x38>
 801133c:	1a21      	subs	r1, r4, r0
 801133e:	4628      	mov	r0, r5
 8011340:	f000 fcc0 	bl	8011cc4 <_sbrk_r>
 8011344:	3001      	adds	r0, #1
 8011346:	d101      	bne.n	801134c <sbrk_aligned+0x38>
 8011348:	f04f 34ff 	mov.w	r4, #4294967295
 801134c:	4620      	mov	r0, r4
 801134e:	bd70      	pop	{r4, r5, r6, pc}
 8011350:	24002124 	.word	0x24002124

08011354 <_malloc_r>:
 8011354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011358:	1ccd      	adds	r5, r1, #3
 801135a:	f025 0503 	bic.w	r5, r5, #3
 801135e:	3508      	adds	r5, #8
 8011360:	2d0c      	cmp	r5, #12
 8011362:	bf38      	it	cc
 8011364:	250c      	movcc	r5, #12
 8011366:	2d00      	cmp	r5, #0
 8011368:	4607      	mov	r7, r0
 801136a:	db01      	blt.n	8011370 <_malloc_r+0x1c>
 801136c:	42a9      	cmp	r1, r5
 801136e:	d905      	bls.n	801137c <_malloc_r+0x28>
 8011370:	230c      	movs	r3, #12
 8011372:	603b      	str	r3, [r7, #0]
 8011374:	2600      	movs	r6, #0
 8011376:	4630      	mov	r0, r6
 8011378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801137c:	4e2e      	ldr	r6, [pc, #184]	; (8011438 <_malloc_r+0xe4>)
 801137e:	f001 fab1 	bl	80128e4 <__malloc_lock>
 8011382:	6833      	ldr	r3, [r6, #0]
 8011384:	461c      	mov	r4, r3
 8011386:	bb34      	cbnz	r4, 80113d6 <_malloc_r+0x82>
 8011388:	4629      	mov	r1, r5
 801138a:	4638      	mov	r0, r7
 801138c:	f7ff ffc2 	bl	8011314 <sbrk_aligned>
 8011390:	1c43      	adds	r3, r0, #1
 8011392:	4604      	mov	r4, r0
 8011394:	d14d      	bne.n	8011432 <_malloc_r+0xde>
 8011396:	6834      	ldr	r4, [r6, #0]
 8011398:	4626      	mov	r6, r4
 801139a:	2e00      	cmp	r6, #0
 801139c:	d140      	bne.n	8011420 <_malloc_r+0xcc>
 801139e:	6823      	ldr	r3, [r4, #0]
 80113a0:	4631      	mov	r1, r6
 80113a2:	4638      	mov	r0, r7
 80113a4:	eb04 0803 	add.w	r8, r4, r3
 80113a8:	f000 fc8c 	bl	8011cc4 <_sbrk_r>
 80113ac:	4580      	cmp	r8, r0
 80113ae:	d13a      	bne.n	8011426 <_malloc_r+0xd2>
 80113b0:	6821      	ldr	r1, [r4, #0]
 80113b2:	3503      	adds	r5, #3
 80113b4:	1a6d      	subs	r5, r5, r1
 80113b6:	f025 0503 	bic.w	r5, r5, #3
 80113ba:	3508      	adds	r5, #8
 80113bc:	2d0c      	cmp	r5, #12
 80113be:	bf38      	it	cc
 80113c0:	250c      	movcc	r5, #12
 80113c2:	4629      	mov	r1, r5
 80113c4:	4638      	mov	r0, r7
 80113c6:	f7ff ffa5 	bl	8011314 <sbrk_aligned>
 80113ca:	3001      	adds	r0, #1
 80113cc:	d02b      	beq.n	8011426 <_malloc_r+0xd2>
 80113ce:	6823      	ldr	r3, [r4, #0]
 80113d0:	442b      	add	r3, r5
 80113d2:	6023      	str	r3, [r4, #0]
 80113d4:	e00e      	b.n	80113f4 <_malloc_r+0xa0>
 80113d6:	6822      	ldr	r2, [r4, #0]
 80113d8:	1b52      	subs	r2, r2, r5
 80113da:	d41e      	bmi.n	801141a <_malloc_r+0xc6>
 80113dc:	2a0b      	cmp	r2, #11
 80113de:	d916      	bls.n	801140e <_malloc_r+0xba>
 80113e0:	1961      	adds	r1, r4, r5
 80113e2:	42a3      	cmp	r3, r4
 80113e4:	6025      	str	r5, [r4, #0]
 80113e6:	bf18      	it	ne
 80113e8:	6059      	strne	r1, [r3, #4]
 80113ea:	6863      	ldr	r3, [r4, #4]
 80113ec:	bf08      	it	eq
 80113ee:	6031      	streq	r1, [r6, #0]
 80113f0:	5162      	str	r2, [r4, r5]
 80113f2:	604b      	str	r3, [r1, #4]
 80113f4:	4638      	mov	r0, r7
 80113f6:	f104 060b 	add.w	r6, r4, #11
 80113fa:	f001 fa79 	bl	80128f0 <__malloc_unlock>
 80113fe:	f026 0607 	bic.w	r6, r6, #7
 8011402:	1d23      	adds	r3, r4, #4
 8011404:	1af2      	subs	r2, r6, r3
 8011406:	d0b6      	beq.n	8011376 <_malloc_r+0x22>
 8011408:	1b9b      	subs	r3, r3, r6
 801140a:	50a3      	str	r3, [r4, r2]
 801140c:	e7b3      	b.n	8011376 <_malloc_r+0x22>
 801140e:	6862      	ldr	r2, [r4, #4]
 8011410:	42a3      	cmp	r3, r4
 8011412:	bf0c      	ite	eq
 8011414:	6032      	streq	r2, [r6, #0]
 8011416:	605a      	strne	r2, [r3, #4]
 8011418:	e7ec      	b.n	80113f4 <_malloc_r+0xa0>
 801141a:	4623      	mov	r3, r4
 801141c:	6864      	ldr	r4, [r4, #4]
 801141e:	e7b2      	b.n	8011386 <_malloc_r+0x32>
 8011420:	4634      	mov	r4, r6
 8011422:	6876      	ldr	r6, [r6, #4]
 8011424:	e7b9      	b.n	801139a <_malloc_r+0x46>
 8011426:	230c      	movs	r3, #12
 8011428:	603b      	str	r3, [r7, #0]
 801142a:	4638      	mov	r0, r7
 801142c:	f001 fa60 	bl	80128f0 <__malloc_unlock>
 8011430:	e7a1      	b.n	8011376 <_malloc_r+0x22>
 8011432:	6025      	str	r5, [r4, #0]
 8011434:	e7de      	b.n	80113f4 <_malloc_r+0xa0>
 8011436:	bf00      	nop
 8011438:	24002120 	.word	0x24002120

0801143c <__cvt>:
 801143c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801143e:	ed2d 8b02 	vpush	{d8}
 8011442:	eeb0 8b40 	vmov.f64	d8, d0
 8011446:	b085      	sub	sp, #20
 8011448:	4617      	mov	r7, r2
 801144a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801144c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801144e:	ee18 2a90 	vmov	r2, s17
 8011452:	f025 0520 	bic.w	r5, r5, #32
 8011456:	2a00      	cmp	r2, #0
 8011458:	bfb6      	itet	lt
 801145a:	222d      	movlt	r2, #45	; 0x2d
 801145c:	2200      	movge	r2, #0
 801145e:	eeb1 8b40 	vneglt.f64	d8, d0
 8011462:	2d46      	cmp	r5, #70	; 0x46
 8011464:	460c      	mov	r4, r1
 8011466:	701a      	strb	r2, [r3, #0]
 8011468:	d004      	beq.n	8011474 <__cvt+0x38>
 801146a:	2d45      	cmp	r5, #69	; 0x45
 801146c:	d100      	bne.n	8011470 <__cvt+0x34>
 801146e:	3401      	adds	r4, #1
 8011470:	2102      	movs	r1, #2
 8011472:	e000      	b.n	8011476 <__cvt+0x3a>
 8011474:	2103      	movs	r1, #3
 8011476:	ab03      	add	r3, sp, #12
 8011478:	9301      	str	r3, [sp, #4]
 801147a:	ab02      	add	r3, sp, #8
 801147c:	9300      	str	r3, [sp, #0]
 801147e:	4622      	mov	r2, r4
 8011480:	4633      	mov	r3, r6
 8011482:	eeb0 0b48 	vmov.f64	d0, d8
 8011486:	f000 fcbb 	bl	8011e00 <_dtoa_r>
 801148a:	2d47      	cmp	r5, #71	; 0x47
 801148c:	d101      	bne.n	8011492 <__cvt+0x56>
 801148e:	07fb      	lsls	r3, r7, #31
 8011490:	d51a      	bpl.n	80114c8 <__cvt+0x8c>
 8011492:	2d46      	cmp	r5, #70	; 0x46
 8011494:	eb00 0204 	add.w	r2, r0, r4
 8011498:	d10c      	bne.n	80114b4 <__cvt+0x78>
 801149a:	7803      	ldrb	r3, [r0, #0]
 801149c:	2b30      	cmp	r3, #48	; 0x30
 801149e:	d107      	bne.n	80114b0 <__cvt+0x74>
 80114a0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80114a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114a8:	bf1c      	itt	ne
 80114aa:	f1c4 0401 	rsbne	r4, r4, #1
 80114ae:	6034      	strne	r4, [r6, #0]
 80114b0:	6833      	ldr	r3, [r6, #0]
 80114b2:	441a      	add	r2, r3
 80114b4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80114b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114bc:	bf08      	it	eq
 80114be:	9203      	streq	r2, [sp, #12]
 80114c0:	2130      	movs	r1, #48	; 0x30
 80114c2:	9b03      	ldr	r3, [sp, #12]
 80114c4:	4293      	cmp	r3, r2
 80114c6:	d307      	bcc.n	80114d8 <__cvt+0x9c>
 80114c8:	9b03      	ldr	r3, [sp, #12]
 80114ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80114cc:	1a1b      	subs	r3, r3, r0
 80114ce:	6013      	str	r3, [r2, #0]
 80114d0:	b005      	add	sp, #20
 80114d2:	ecbd 8b02 	vpop	{d8}
 80114d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80114d8:	1c5c      	adds	r4, r3, #1
 80114da:	9403      	str	r4, [sp, #12]
 80114dc:	7019      	strb	r1, [r3, #0]
 80114de:	e7f0      	b.n	80114c2 <__cvt+0x86>

080114e0 <__exponent>:
 80114e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80114e2:	4603      	mov	r3, r0
 80114e4:	2900      	cmp	r1, #0
 80114e6:	bfb8      	it	lt
 80114e8:	4249      	neglt	r1, r1
 80114ea:	f803 2b02 	strb.w	r2, [r3], #2
 80114ee:	bfb4      	ite	lt
 80114f0:	222d      	movlt	r2, #45	; 0x2d
 80114f2:	222b      	movge	r2, #43	; 0x2b
 80114f4:	2909      	cmp	r1, #9
 80114f6:	7042      	strb	r2, [r0, #1]
 80114f8:	dd2a      	ble.n	8011550 <__exponent+0x70>
 80114fa:	f10d 0407 	add.w	r4, sp, #7
 80114fe:	46a4      	mov	ip, r4
 8011500:	270a      	movs	r7, #10
 8011502:	46a6      	mov	lr, r4
 8011504:	460a      	mov	r2, r1
 8011506:	fb91 f6f7 	sdiv	r6, r1, r7
 801150a:	fb07 1516 	mls	r5, r7, r6, r1
 801150e:	3530      	adds	r5, #48	; 0x30
 8011510:	2a63      	cmp	r2, #99	; 0x63
 8011512:	f104 34ff 	add.w	r4, r4, #4294967295
 8011516:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801151a:	4631      	mov	r1, r6
 801151c:	dcf1      	bgt.n	8011502 <__exponent+0x22>
 801151e:	3130      	adds	r1, #48	; 0x30
 8011520:	f1ae 0502 	sub.w	r5, lr, #2
 8011524:	f804 1c01 	strb.w	r1, [r4, #-1]
 8011528:	1c44      	adds	r4, r0, #1
 801152a:	4629      	mov	r1, r5
 801152c:	4561      	cmp	r1, ip
 801152e:	d30a      	bcc.n	8011546 <__exponent+0x66>
 8011530:	f10d 0209 	add.w	r2, sp, #9
 8011534:	eba2 020e 	sub.w	r2, r2, lr
 8011538:	4565      	cmp	r5, ip
 801153a:	bf88      	it	hi
 801153c:	2200      	movhi	r2, #0
 801153e:	4413      	add	r3, r2
 8011540:	1a18      	subs	r0, r3, r0
 8011542:	b003      	add	sp, #12
 8011544:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011546:	f811 2b01 	ldrb.w	r2, [r1], #1
 801154a:	f804 2f01 	strb.w	r2, [r4, #1]!
 801154e:	e7ed      	b.n	801152c <__exponent+0x4c>
 8011550:	2330      	movs	r3, #48	; 0x30
 8011552:	3130      	adds	r1, #48	; 0x30
 8011554:	7083      	strb	r3, [r0, #2]
 8011556:	70c1      	strb	r1, [r0, #3]
 8011558:	1d03      	adds	r3, r0, #4
 801155a:	e7f1      	b.n	8011540 <__exponent+0x60>
 801155c:	0000      	movs	r0, r0
	...

08011560 <_printf_float>:
 8011560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011564:	b08b      	sub	sp, #44	; 0x2c
 8011566:	460c      	mov	r4, r1
 8011568:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801156c:	4616      	mov	r6, r2
 801156e:	461f      	mov	r7, r3
 8011570:	4605      	mov	r5, r0
 8011572:	f001 f9b3 	bl	80128dc <_localeconv_r>
 8011576:	f8d0 b000 	ldr.w	fp, [r0]
 801157a:	4658      	mov	r0, fp
 801157c:	f7ee feb0 	bl	80002e0 <strlen>
 8011580:	2300      	movs	r3, #0
 8011582:	9308      	str	r3, [sp, #32]
 8011584:	f8d8 3000 	ldr.w	r3, [r8]
 8011588:	f894 9018 	ldrb.w	r9, [r4, #24]
 801158c:	6822      	ldr	r2, [r4, #0]
 801158e:	3307      	adds	r3, #7
 8011590:	f023 0307 	bic.w	r3, r3, #7
 8011594:	f103 0108 	add.w	r1, r3, #8
 8011598:	f8c8 1000 	str.w	r1, [r8]
 801159c:	4682      	mov	sl, r0
 801159e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80115a2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80115a6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8011808 <_printf_float+0x2a8>
 80115aa:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80115ae:	eeb0 6bc0 	vabs.f64	d6, d0
 80115b2:	eeb4 6b47 	vcmp.f64	d6, d7
 80115b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115ba:	dd24      	ble.n	8011606 <_printf_float+0xa6>
 80115bc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80115c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115c4:	d502      	bpl.n	80115cc <_printf_float+0x6c>
 80115c6:	232d      	movs	r3, #45	; 0x2d
 80115c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80115cc:	4b90      	ldr	r3, [pc, #576]	; (8011810 <_printf_float+0x2b0>)
 80115ce:	4891      	ldr	r0, [pc, #580]	; (8011814 <_printf_float+0x2b4>)
 80115d0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80115d4:	bf94      	ite	ls
 80115d6:	4698      	movls	r8, r3
 80115d8:	4680      	movhi	r8, r0
 80115da:	2303      	movs	r3, #3
 80115dc:	6123      	str	r3, [r4, #16]
 80115de:	f022 0204 	bic.w	r2, r2, #4
 80115e2:	2300      	movs	r3, #0
 80115e4:	6022      	str	r2, [r4, #0]
 80115e6:	9304      	str	r3, [sp, #16]
 80115e8:	9700      	str	r7, [sp, #0]
 80115ea:	4633      	mov	r3, r6
 80115ec:	aa09      	add	r2, sp, #36	; 0x24
 80115ee:	4621      	mov	r1, r4
 80115f0:	4628      	mov	r0, r5
 80115f2:	f000 f9d3 	bl	801199c <_printf_common>
 80115f6:	3001      	adds	r0, #1
 80115f8:	f040 808a 	bne.w	8011710 <_printf_float+0x1b0>
 80115fc:	f04f 30ff 	mov.w	r0, #4294967295
 8011600:	b00b      	add	sp, #44	; 0x2c
 8011602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011606:	eeb4 0b40 	vcmp.f64	d0, d0
 801160a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801160e:	d709      	bvc.n	8011624 <_printf_float+0xc4>
 8011610:	ee10 3a90 	vmov	r3, s1
 8011614:	2b00      	cmp	r3, #0
 8011616:	bfbc      	itt	lt
 8011618:	232d      	movlt	r3, #45	; 0x2d
 801161a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801161e:	487e      	ldr	r0, [pc, #504]	; (8011818 <_printf_float+0x2b8>)
 8011620:	4b7e      	ldr	r3, [pc, #504]	; (801181c <_printf_float+0x2bc>)
 8011622:	e7d5      	b.n	80115d0 <_printf_float+0x70>
 8011624:	6863      	ldr	r3, [r4, #4]
 8011626:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801162a:	9104      	str	r1, [sp, #16]
 801162c:	1c59      	adds	r1, r3, #1
 801162e:	d13c      	bne.n	80116aa <_printf_float+0x14a>
 8011630:	2306      	movs	r3, #6
 8011632:	6063      	str	r3, [r4, #4]
 8011634:	2300      	movs	r3, #0
 8011636:	9303      	str	r3, [sp, #12]
 8011638:	ab08      	add	r3, sp, #32
 801163a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801163e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8011642:	ab07      	add	r3, sp, #28
 8011644:	6861      	ldr	r1, [r4, #4]
 8011646:	9300      	str	r3, [sp, #0]
 8011648:	6022      	str	r2, [r4, #0]
 801164a:	f10d 031b 	add.w	r3, sp, #27
 801164e:	4628      	mov	r0, r5
 8011650:	f7ff fef4 	bl	801143c <__cvt>
 8011654:	9b04      	ldr	r3, [sp, #16]
 8011656:	9907      	ldr	r1, [sp, #28]
 8011658:	2b47      	cmp	r3, #71	; 0x47
 801165a:	4680      	mov	r8, r0
 801165c:	d108      	bne.n	8011670 <_printf_float+0x110>
 801165e:	1cc8      	adds	r0, r1, #3
 8011660:	db02      	blt.n	8011668 <_printf_float+0x108>
 8011662:	6863      	ldr	r3, [r4, #4]
 8011664:	4299      	cmp	r1, r3
 8011666:	dd41      	ble.n	80116ec <_printf_float+0x18c>
 8011668:	f1a9 0902 	sub.w	r9, r9, #2
 801166c:	fa5f f989 	uxtb.w	r9, r9
 8011670:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8011674:	d820      	bhi.n	80116b8 <_printf_float+0x158>
 8011676:	3901      	subs	r1, #1
 8011678:	464a      	mov	r2, r9
 801167a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801167e:	9107      	str	r1, [sp, #28]
 8011680:	f7ff ff2e 	bl	80114e0 <__exponent>
 8011684:	9a08      	ldr	r2, [sp, #32]
 8011686:	9004      	str	r0, [sp, #16]
 8011688:	1813      	adds	r3, r2, r0
 801168a:	2a01      	cmp	r2, #1
 801168c:	6123      	str	r3, [r4, #16]
 801168e:	dc02      	bgt.n	8011696 <_printf_float+0x136>
 8011690:	6822      	ldr	r2, [r4, #0]
 8011692:	07d2      	lsls	r2, r2, #31
 8011694:	d501      	bpl.n	801169a <_printf_float+0x13a>
 8011696:	3301      	adds	r3, #1
 8011698:	6123      	str	r3, [r4, #16]
 801169a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d0a2      	beq.n	80115e8 <_printf_float+0x88>
 80116a2:	232d      	movs	r3, #45	; 0x2d
 80116a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80116a8:	e79e      	b.n	80115e8 <_printf_float+0x88>
 80116aa:	9904      	ldr	r1, [sp, #16]
 80116ac:	2947      	cmp	r1, #71	; 0x47
 80116ae:	d1c1      	bne.n	8011634 <_printf_float+0xd4>
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d1bf      	bne.n	8011634 <_printf_float+0xd4>
 80116b4:	2301      	movs	r3, #1
 80116b6:	e7bc      	b.n	8011632 <_printf_float+0xd2>
 80116b8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80116bc:	d118      	bne.n	80116f0 <_printf_float+0x190>
 80116be:	2900      	cmp	r1, #0
 80116c0:	6863      	ldr	r3, [r4, #4]
 80116c2:	dd0b      	ble.n	80116dc <_printf_float+0x17c>
 80116c4:	6121      	str	r1, [r4, #16]
 80116c6:	b913      	cbnz	r3, 80116ce <_printf_float+0x16e>
 80116c8:	6822      	ldr	r2, [r4, #0]
 80116ca:	07d0      	lsls	r0, r2, #31
 80116cc:	d502      	bpl.n	80116d4 <_printf_float+0x174>
 80116ce:	3301      	adds	r3, #1
 80116d0:	440b      	add	r3, r1
 80116d2:	6123      	str	r3, [r4, #16]
 80116d4:	2300      	movs	r3, #0
 80116d6:	65a1      	str	r1, [r4, #88]	; 0x58
 80116d8:	9304      	str	r3, [sp, #16]
 80116da:	e7de      	b.n	801169a <_printf_float+0x13a>
 80116dc:	b913      	cbnz	r3, 80116e4 <_printf_float+0x184>
 80116de:	6822      	ldr	r2, [r4, #0]
 80116e0:	07d2      	lsls	r2, r2, #31
 80116e2:	d501      	bpl.n	80116e8 <_printf_float+0x188>
 80116e4:	3302      	adds	r3, #2
 80116e6:	e7f4      	b.n	80116d2 <_printf_float+0x172>
 80116e8:	2301      	movs	r3, #1
 80116ea:	e7f2      	b.n	80116d2 <_printf_float+0x172>
 80116ec:	f04f 0967 	mov.w	r9, #103	; 0x67
 80116f0:	9b08      	ldr	r3, [sp, #32]
 80116f2:	4299      	cmp	r1, r3
 80116f4:	db05      	blt.n	8011702 <_printf_float+0x1a2>
 80116f6:	6823      	ldr	r3, [r4, #0]
 80116f8:	6121      	str	r1, [r4, #16]
 80116fa:	07d8      	lsls	r0, r3, #31
 80116fc:	d5ea      	bpl.n	80116d4 <_printf_float+0x174>
 80116fe:	1c4b      	adds	r3, r1, #1
 8011700:	e7e7      	b.n	80116d2 <_printf_float+0x172>
 8011702:	2900      	cmp	r1, #0
 8011704:	bfd4      	ite	le
 8011706:	f1c1 0202 	rsble	r2, r1, #2
 801170a:	2201      	movgt	r2, #1
 801170c:	4413      	add	r3, r2
 801170e:	e7e0      	b.n	80116d2 <_printf_float+0x172>
 8011710:	6823      	ldr	r3, [r4, #0]
 8011712:	055a      	lsls	r2, r3, #21
 8011714:	d407      	bmi.n	8011726 <_printf_float+0x1c6>
 8011716:	6923      	ldr	r3, [r4, #16]
 8011718:	4642      	mov	r2, r8
 801171a:	4631      	mov	r1, r6
 801171c:	4628      	mov	r0, r5
 801171e:	47b8      	blx	r7
 8011720:	3001      	adds	r0, #1
 8011722:	d12a      	bne.n	801177a <_printf_float+0x21a>
 8011724:	e76a      	b.n	80115fc <_printf_float+0x9c>
 8011726:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801172a:	f240 80e2 	bls.w	80118f2 <_printf_float+0x392>
 801172e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8011732:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801173a:	d133      	bne.n	80117a4 <_printf_float+0x244>
 801173c:	4a38      	ldr	r2, [pc, #224]	; (8011820 <_printf_float+0x2c0>)
 801173e:	2301      	movs	r3, #1
 8011740:	4631      	mov	r1, r6
 8011742:	4628      	mov	r0, r5
 8011744:	47b8      	blx	r7
 8011746:	3001      	adds	r0, #1
 8011748:	f43f af58 	beq.w	80115fc <_printf_float+0x9c>
 801174c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8011750:	429a      	cmp	r2, r3
 8011752:	db02      	blt.n	801175a <_printf_float+0x1fa>
 8011754:	6823      	ldr	r3, [r4, #0]
 8011756:	07d8      	lsls	r0, r3, #31
 8011758:	d50f      	bpl.n	801177a <_printf_float+0x21a>
 801175a:	4653      	mov	r3, sl
 801175c:	465a      	mov	r2, fp
 801175e:	4631      	mov	r1, r6
 8011760:	4628      	mov	r0, r5
 8011762:	47b8      	blx	r7
 8011764:	3001      	adds	r0, #1
 8011766:	f43f af49 	beq.w	80115fc <_printf_float+0x9c>
 801176a:	f04f 0800 	mov.w	r8, #0
 801176e:	f104 091a 	add.w	r9, r4, #26
 8011772:	9b08      	ldr	r3, [sp, #32]
 8011774:	3b01      	subs	r3, #1
 8011776:	4543      	cmp	r3, r8
 8011778:	dc09      	bgt.n	801178e <_printf_float+0x22e>
 801177a:	6823      	ldr	r3, [r4, #0]
 801177c:	079b      	lsls	r3, r3, #30
 801177e:	f100 8108 	bmi.w	8011992 <_printf_float+0x432>
 8011782:	68e0      	ldr	r0, [r4, #12]
 8011784:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011786:	4298      	cmp	r0, r3
 8011788:	bfb8      	it	lt
 801178a:	4618      	movlt	r0, r3
 801178c:	e738      	b.n	8011600 <_printf_float+0xa0>
 801178e:	2301      	movs	r3, #1
 8011790:	464a      	mov	r2, r9
 8011792:	4631      	mov	r1, r6
 8011794:	4628      	mov	r0, r5
 8011796:	47b8      	blx	r7
 8011798:	3001      	adds	r0, #1
 801179a:	f43f af2f 	beq.w	80115fc <_printf_float+0x9c>
 801179e:	f108 0801 	add.w	r8, r8, #1
 80117a2:	e7e6      	b.n	8011772 <_printf_float+0x212>
 80117a4:	9b07      	ldr	r3, [sp, #28]
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	dc3c      	bgt.n	8011824 <_printf_float+0x2c4>
 80117aa:	4a1d      	ldr	r2, [pc, #116]	; (8011820 <_printf_float+0x2c0>)
 80117ac:	2301      	movs	r3, #1
 80117ae:	4631      	mov	r1, r6
 80117b0:	4628      	mov	r0, r5
 80117b2:	47b8      	blx	r7
 80117b4:	3001      	adds	r0, #1
 80117b6:	f43f af21 	beq.w	80115fc <_printf_float+0x9c>
 80117ba:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80117be:	4313      	orrs	r3, r2
 80117c0:	d102      	bne.n	80117c8 <_printf_float+0x268>
 80117c2:	6823      	ldr	r3, [r4, #0]
 80117c4:	07d9      	lsls	r1, r3, #31
 80117c6:	d5d8      	bpl.n	801177a <_printf_float+0x21a>
 80117c8:	4653      	mov	r3, sl
 80117ca:	465a      	mov	r2, fp
 80117cc:	4631      	mov	r1, r6
 80117ce:	4628      	mov	r0, r5
 80117d0:	47b8      	blx	r7
 80117d2:	3001      	adds	r0, #1
 80117d4:	f43f af12 	beq.w	80115fc <_printf_float+0x9c>
 80117d8:	f04f 0900 	mov.w	r9, #0
 80117dc:	f104 0a1a 	add.w	sl, r4, #26
 80117e0:	9b07      	ldr	r3, [sp, #28]
 80117e2:	425b      	negs	r3, r3
 80117e4:	454b      	cmp	r3, r9
 80117e6:	dc01      	bgt.n	80117ec <_printf_float+0x28c>
 80117e8:	9b08      	ldr	r3, [sp, #32]
 80117ea:	e795      	b.n	8011718 <_printf_float+0x1b8>
 80117ec:	2301      	movs	r3, #1
 80117ee:	4652      	mov	r2, sl
 80117f0:	4631      	mov	r1, r6
 80117f2:	4628      	mov	r0, r5
 80117f4:	47b8      	blx	r7
 80117f6:	3001      	adds	r0, #1
 80117f8:	f43f af00 	beq.w	80115fc <_printf_float+0x9c>
 80117fc:	f109 0901 	add.w	r9, r9, #1
 8011800:	e7ee      	b.n	80117e0 <_printf_float+0x280>
 8011802:	bf00      	nop
 8011804:	f3af 8000 	nop.w
 8011808:	ffffffff 	.word	0xffffffff
 801180c:	7fefffff 	.word	0x7fefffff
 8011810:	08013cd4 	.word	0x08013cd4
 8011814:	08013cd8 	.word	0x08013cd8
 8011818:	08013ce0 	.word	0x08013ce0
 801181c:	08013cdc 	.word	0x08013cdc
 8011820:	08013ce4 	.word	0x08013ce4
 8011824:	9a08      	ldr	r2, [sp, #32]
 8011826:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011828:	429a      	cmp	r2, r3
 801182a:	bfa8      	it	ge
 801182c:	461a      	movge	r2, r3
 801182e:	2a00      	cmp	r2, #0
 8011830:	4691      	mov	r9, r2
 8011832:	dc38      	bgt.n	80118a6 <_printf_float+0x346>
 8011834:	2300      	movs	r3, #0
 8011836:	9305      	str	r3, [sp, #20]
 8011838:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801183c:	f104 021a 	add.w	r2, r4, #26
 8011840:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011842:	9905      	ldr	r1, [sp, #20]
 8011844:	9304      	str	r3, [sp, #16]
 8011846:	eba3 0309 	sub.w	r3, r3, r9
 801184a:	428b      	cmp	r3, r1
 801184c:	dc33      	bgt.n	80118b6 <_printf_float+0x356>
 801184e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8011852:	429a      	cmp	r2, r3
 8011854:	db3c      	blt.n	80118d0 <_printf_float+0x370>
 8011856:	6823      	ldr	r3, [r4, #0]
 8011858:	07da      	lsls	r2, r3, #31
 801185a:	d439      	bmi.n	80118d0 <_printf_float+0x370>
 801185c:	9b08      	ldr	r3, [sp, #32]
 801185e:	9a04      	ldr	r2, [sp, #16]
 8011860:	9907      	ldr	r1, [sp, #28]
 8011862:	1a9a      	subs	r2, r3, r2
 8011864:	eba3 0901 	sub.w	r9, r3, r1
 8011868:	4591      	cmp	r9, r2
 801186a:	bfa8      	it	ge
 801186c:	4691      	movge	r9, r2
 801186e:	f1b9 0f00 	cmp.w	r9, #0
 8011872:	dc35      	bgt.n	80118e0 <_printf_float+0x380>
 8011874:	f04f 0800 	mov.w	r8, #0
 8011878:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801187c:	f104 0a1a 	add.w	sl, r4, #26
 8011880:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8011884:	1a9b      	subs	r3, r3, r2
 8011886:	eba3 0309 	sub.w	r3, r3, r9
 801188a:	4543      	cmp	r3, r8
 801188c:	f77f af75 	ble.w	801177a <_printf_float+0x21a>
 8011890:	2301      	movs	r3, #1
 8011892:	4652      	mov	r2, sl
 8011894:	4631      	mov	r1, r6
 8011896:	4628      	mov	r0, r5
 8011898:	47b8      	blx	r7
 801189a:	3001      	adds	r0, #1
 801189c:	f43f aeae 	beq.w	80115fc <_printf_float+0x9c>
 80118a0:	f108 0801 	add.w	r8, r8, #1
 80118a4:	e7ec      	b.n	8011880 <_printf_float+0x320>
 80118a6:	4613      	mov	r3, r2
 80118a8:	4631      	mov	r1, r6
 80118aa:	4642      	mov	r2, r8
 80118ac:	4628      	mov	r0, r5
 80118ae:	47b8      	blx	r7
 80118b0:	3001      	adds	r0, #1
 80118b2:	d1bf      	bne.n	8011834 <_printf_float+0x2d4>
 80118b4:	e6a2      	b.n	80115fc <_printf_float+0x9c>
 80118b6:	2301      	movs	r3, #1
 80118b8:	4631      	mov	r1, r6
 80118ba:	4628      	mov	r0, r5
 80118bc:	9204      	str	r2, [sp, #16]
 80118be:	47b8      	blx	r7
 80118c0:	3001      	adds	r0, #1
 80118c2:	f43f ae9b 	beq.w	80115fc <_printf_float+0x9c>
 80118c6:	9b05      	ldr	r3, [sp, #20]
 80118c8:	9a04      	ldr	r2, [sp, #16]
 80118ca:	3301      	adds	r3, #1
 80118cc:	9305      	str	r3, [sp, #20]
 80118ce:	e7b7      	b.n	8011840 <_printf_float+0x2e0>
 80118d0:	4653      	mov	r3, sl
 80118d2:	465a      	mov	r2, fp
 80118d4:	4631      	mov	r1, r6
 80118d6:	4628      	mov	r0, r5
 80118d8:	47b8      	blx	r7
 80118da:	3001      	adds	r0, #1
 80118dc:	d1be      	bne.n	801185c <_printf_float+0x2fc>
 80118de:	e68d      	b.n	80115fc <_printf_float+0x9c>
 80118e0:	9a04      	ldr	r2, [sp, #16]
 80118e2:	464b      	mov	r3, r9
 80118e4:	4442      	add	r2, r8
 80118e6:	4631      	mov	r1, r6
 80118e8:	4628      	mov	r0, r5
 80118ea:	47b8      	blx	r7
 80118ec:	3001      	adds	r0, #1
 80118ee:	d1c1      	bne.n	8011874 <_printf_float+0x314>
 80118f0:	e684      	b.n	80115fc <_printf_float+0x9c>
 80118f2:	9a08      	ldr	r2, [sp, #32]
 80118f4:	2a01      	cmp	r2, #1
 80118f6:	dc01      	bgt.n	80118fc <_printf_float+0x39c>
 80118f8:	07db      	lsls	r3, r3, #31
 80118fa:	d537      	bpl.n	801196c <_printf_float+0x40c>
 80118fc:	2301      	movs	r3, #1
 80118fe:	4642      	mov	r2, r8
 8011900:	4631      	mov	r1, r6
 8011902:	4628      	mov	r0, r5
 8011904:	47b8      	blx	r7
 8011906:	3001      	adds	r0, #1
 8011908:	f43f ae78 	beq.w	80115fc <_printf_float+0x9c>
 801190c:	4653      	mov	r3, sl
 801190e:	465a      	mov	r2, fp
 8011910:	4631      	mov	r1, r6
 8011912:	4628      	mov	r0, r5
 8011914:	47b8      	blx	r7
 8011916:	3001      	adds	r0, #1
 8011918:	f43f ae70 	beq.w	80115fc <_printf_float+0x9c>
 801191c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8011920:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011928:	d01b      	beq.n	8011962 <_printf_float+0x402>
 801192a:	9b08      	ldr	r3, [sp, #32]
 801192c:	f108 0201 	add.w	r2, r8, #1
 8011930:	3b01      	subs	r3, #1
 8011932:	4631      	mov	r1, r6
 8011934:	4628      	mov	r0, r5
 8011936:	47b8      	blx	r7
 8011938:	3001      	adds	r0, #1
 801193a:	d10e      	bne.n	801195a <_printf_float+0x3fa>
 801193c:	e65e      	b.n	80115fc <_printf_float+0x9c>
 801193e:	2301      	movs	r3, #1
 8011940:	464a      	mov	r2, r9
 8011942:	4631      	mov	r1, r6
 8011944:	4628      	mov	r0, r5
 8011946:	47b8      	blx	r7
 8011948:	3001      	adds	r0, #1
 801194a:	f43f ae57 	beq.w	80115fc <_printf_float+0x9c>
 801194e:	f108 0801 	add.w	r8, r8, #1
 8011952:	9b08      	ldr	r3, [sp, #32]
 8011954:	3b01      	subs	r3, #1
 8011956:	4543      	cmp	r3, r8
 8011958:	dcf1      	bgt.n	801193e <_printf_float+0x3de>
 801195a:	9b04      	ldr	r3, [sp, #16]
 801195c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011960:	e6db      	b.n	801171a <_printf_float+0x1ba>
 8011962:	f04f 0800 	mov.w	r8, #0
 8011966:	f104 091a 	add.w	r9, r4, #26
 801196a:	e7f2      	b.n	8011952 <_printf_float+0x3f2>
 801196c:	2301      	movs	r3, #1
 801196e:	4642      	mov	r2, r8
 8011970:	e7df      	b.n	8011932 <_printf_float+0x3d2>
 8011972:	2301      	movs	r3, #1
 8011974:	464a      	mov	r2, r9
 8011976:	4631      	mov	r1, r6
 8011978:	4628      	mov	r0, r5
 801197a:	47b8      	blx	r7
 801197c:	3001      	adds	r0, #1
 801197e:	f43f ae3d 	beq.w	80115fc <_printf_float+0x9c>
 8011982:	f108 0801 	add.w	r8, r8, #1
 8011986:	68e3      	ldr	r3, [r4, #12]
 8011988:	9909      	ldr	r1, [sp, #36]	; 0x24
 801198a:	1a5b      	subs	r3, r3, r1
 801198c:	4543      	cmp	r3, r8
 801198e:	dcf0      	bgt.n	8011972 <_printf_float+0x412>
 8011990:	e6f7      	b.n	8011782 <_printf_float+0x222>
 8011992:	f04f 0800 	mov.w	r8, #0
 8011996:	f104 0919 	add.w	r9, r4, #25
 801199a:	e7f4      	b.n	8011986 <_printf_float+0x426>

0801199c <_printf_common>:
 801199c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80119a0:	4616      	mov	r6, r2
 80119a2:	4699      	mov	r9, r3
 80119a4:	688a      	ldr	r2, [r1, #8]
 80119a6:	690b      	ldr	r3, [r1, #16]
 80119a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80119ac:	4293      	cmp	r3, r2
 80119ae:	bfb8      	it	lt
 80119b0:	4613      	movlt	r3, r2
 80119b2:	6033      	str	r3, [r6, #0]
 80119b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80119b8:	4607      	mov	r7, r0
 80119ba:	460c      	mov	r4, r1
 80119bc:	b10a      	cbz	r2, 80119c2 <_printf_common+0x26>
 80119be:	3301      	adds	r3, #1
 80119c0:	6033      	str	r3, [r6, #0]
 80119c2:	6823      	ldr	r3, [r4, #0]
 80119c4:	0699      	lsls	r1, r3, #26
 80119c6:	bf42      	ittt	mi
 80119c8:	6833      	ldrmi	r3, [r6, #0]
 80119ca:	3302      	addmi	r3, #2
 80119cc:	6033      	strmi	r3, [r6, #0]
 80119ce:	6825      	ldr	r5, [r4, #0]
 80119d0:	f015 0506 	ands.w	r5, r5, #6
 80119d4:	d106      	bne.n	80119e4 <_printf_common+0x48>
 80119d6:	f104 0a19 	add.w	sl, r4, #25
 80119da:	68e3      	ldr	r3, [r4, #12]
 80119dc:	6832      	ldr	r2, [r6, #0]
 80119de:	1a9b      	subs	r3, r3, r2
 80119e0:	42ab      	cmp	r3, r5
 80119e2:	dc26      	bgt.n	8011a32 <_printf_common+0x96>
 80119e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80119e8:	1e13      	subs	r3, r2, #0
 80119ea:	6822      	ldr	r2, [r4, #0]
 80119ec:	bf18      	it	ne
 80119ee:	2301      	movne	r3, #1
 80119f0:	0692      	lsls	r2, r2, #26
 80119f2:	d42b      	bmi.n	8011a4c <_printf_common+0xb0>
 80119f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80119f8:	4649      	mov	r1, r9
 80119fa:	4638      	mov	r0, r7
 80119fc:	47c0      	blx	r8
 80119fe:	3001      	adds	r0, #1
 8011a00:	d01e      	beq.n	8011a40 <_printf_common+0xa4>
 8011a02:	6823      	ldr	r3, [r4, #0]
 8011a04:	68e5      	ldr	r5, [r4, #12]
 8011a06:	6832      	ldr	r2, [r6, #0]
 8011a08:	f003 0306 	and.w	r3, r3, #6
 8011a0c:	2b04      	cmp	r3, #4
 8011a0e:	bf08      	it	eq
 8011a10:	1aad      	subeq	r5, r5, r2
 8011a12:	68a3      	ldr	r3, [r4, #8]
 8011a14:	6922      	ldr	r2, [r4, #16]
 8011a16:	bf0c      	ite	eq
 8011a18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011a1c:	2500      	movne	r5, #0
 8011a1e:	4293      	cmp	r3, r2
 8011a20:	bfc4      	itt	gt
 8011a22:	1a9b      	subgt	r3, r3, r2
 8011a24:	18ed      	addgt	r5, r5, r3
 8011a26:	2600      	movs	r6, #0
 8011a28:	341a      	adds	r4, #26
 8011a2a:	42b5      	cmp	r5, r6
 8011a2c:	d11a      	bne.n	8011a64 <_printf_common+0xc8>
 8011a2e:	2000      	movs	r0, #0
 8011a30:	e008      	b.n	8011a44 <_printf_common+0xa8>
 8011a32:	2301      	movs	r3, #1
 8011a34:	4652      	mov	r2, sl
 8011a36:	4649      	mov	r1, r9
 8011a38:	4638      	mov	r0, r7
 8011a3a:	47c0      	blx	r8
 8011a3c:	3001      	adds	r0, #1
 8011a3e:	d103      	bne.n	8011a48 <_printf_common+0xac>
 8011a40:	f04f 30ff 	mov.w	r0, #4294967295
 8011a44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a48:	3501      	adds	r5, #1
 8011a4a:	e7c6      	b.n	80119da <_printf_common+0x3e>
 8011a4c:	18e1      	adds	r1, r4, r3
 8011a4e:	1c5a      	adds	r2, r3, #1
 8011a50:	2030      	movs	r0, #48	; 0x30
 8011a52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011a56:	4422      	add	r2, r4
 8011a58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011a5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011a60:	3302      	adds	r3, #2
 8011a62:	e7c7      	b.n	80119f4 <_printf_common+0x58>
 8011a64:	2301      	movs	r3, #1
 8011a66:	4622      	mov	r2, r4
 8011a68:	4649      	mov	r1, r9
 8011a6a:	4638      	mov	r0, r7
 8011a6c:	47c0      	blx	r8
 8011a6e:	3001      	adds	r0, #1
 8011a70:	d0e6      	beq.n	8011a40 <_printf_common+0xa4>
 8011a72:	3601      	adds	r6, #1
 8011a74:	e7d9      	b.n	8011a2a <_printf_common+0x8e>
	...

08011a78 <_printf_i>:
 8011a78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011a7c:	7e0f      	ldrb	r7, [r1, #24]
 8011a7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011a80:	2f78      	cmp	r7, #120	; 0x78
 8011a82:	4691      	mov	r9, r2
 8011a84:	4680      	mov	r8, r0
 8011a86:	460c      	mov	r4, r1
 8011a88:	469a      	mov	sl, r3
 8011a8a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011a8e:	d807      	bhi.n	8011aa0 <_printf_i+0x28>
 8011a90:	2f62      	cmp	r7, #98	; 0x62
 8011a92:	d80a      	bhi.n	8011aaa <_printf_i+0x32>
 8011a94:	2f00      	cmp	r7, #0
 8011a96:	f000 80d8 	beq.w	8011c4a <_printf_i+0x1d2>
 8011a9a:	2f58      	cmp	r7, #88	; 0x58
 8011a9c:	f000 80a3 	beq.w	8011be6 <_printf_i+0x16e>
 8011aa0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011aa4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011aa8:	e03a      	b.n	8011b20 <_printf_i+0xa8>
 8011aaa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011aae:	2b15      	cmp	r3, #21
 8011ab0:	d8f6      	bhi.n	8011aa0 <_printf_i+0x28>
 8011ab2:	a101      	add	r1, pc, #4	; (adr r1, 8011ab8 <_printf_i+0x40>)
 8011ab4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011ab8:	08011b11 	.word	0x08011b11
 8011abc:	08011b25 	.word	0x08011b25
 8011ac0:	08011aa1 	.word	0x08011aa1
 8011ac4:	08011aa1 	.word	0x08011aa1
 8011ac8:	08011aa1 	.word	0x08011aa1
 8011acc:	08011aa1 	.word	0x08011aa1
 8011ad0:	08011b25 	.word	0x08011b25
 8011ad4:	08011aa1 	.word	0x08011aa1
 8011ad8:	08011aa1 	.word	0x08011aa1
 8011adc:	08011aa1 	.word	0x08011aa1
 8011ae0:	08011aa1 	.word	0x08011aa1
 8011ae4:	08011c31 	.word	0x08011c31
 8011ae8:	08011b55 	.word	0x08011b55
 8011aec:	08011c13 	.word	0x08011c13
 8011af0:	08011aa1 	.word	0x08011aa1
 8011af4:	08011aa1 	.word	0x08011aa1
 8011af8:	08011c53 	.word	0x08011c53
 8011afc:	08011aa1 	.word	0x08011aa1
 8011b00:	08011b55 	.word	0x08011b55
 8011b04:	08011aa1 	.word	0x08011aa1
 8011b08:	08011aa1 	.word	0x08011aa1
 8011b0c:	08011c1b 	.word	0x08011c1b
 8011b10:	682b      	ldr	r3, [r5, #0]
 8011b12:	1d1a      	adds	r2, r3, #4
 8011b14:	681b      	ldr	r3, [r3, #0]
 8011b16:	602a      	str	r2, [r5, #0]
 8011b18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011b1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011b20:	2301      	movs	r3, #1
 8011b22:	e0a3      	b.n	8011c6c <_printf_i+0x1f4>
 8011b24:	6820      	ldr	r0, [r4, #0]
 8011b26:	6829      	ldr	r1, [r5, #0]
 8011b28:	0606      	lsls	r6, r0, #24
 8011b2a:	f101 0304 	add.w	r3, r1, #4
 8011b2e:	d50a      	bpl.n	8011b46 <_printf_i+0xce>
 8011b30:	680e      	ldr	r6, [r1, #0]
 8011b32:	602b      	str	r3, [r5, #0]
 8011b34:	2e00      	cmp	r6, #0
 8011b36:	da03      	bge.n	8011b40 <_printf_i+0xc8>
 8011b38:	232d      	movs	r3, #45	; 0x2d
 8011b3a:	4276      	negs	r6, r6
 8011b3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011b40:	485e      	ldr	r0, [pc, #376]	; (8011cbc <_printf_i+0x244>)
 8011b42:	230a      	movs	r3, #10
 8011b44:	e019      	b.n	8011b7a <_printf_i+0x102>
 8011b46:	680e      	ldr	r6, [r1, #0]
 8011b48:	602b      	str	r3, [r5, #0]
 8011b4a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011b4e:	bf18      	it	ne
 8011b50:	b236      	sxthne	r6, r6
 8011b52:	e7ef      	b.n	8011b34 <_printf_i+0xbc>
 8011b54:	682b      	ldr	r3, [r5, #0]
 8011b56:	6820      	ldr	r0, [r4, #0]
 8011b58:	1d19      	adds	r1, r3, #4
 8011b5a:	6029      	str	r1, [r5, #0]
 8011b5c:	0601      	lsls	r1, r0, #24
 8011b5e:	d501      	bpl.n	8011b64 <_printf_i+0xec>
 8011b60:	681e      	ldr	r6, [r3, #0]
 8011b62:	e002      	b.n	8011b6a <_printf_i+0xf2>
 8011b64:	0646      	lsls	r6, r0, #25
 8011b66:	d5fb      	bpl.n	8011b60 <_printf_i+0xe8>
 8011b68:	881e      	ldrh	r6, [r3, #0]
 8011b6a:	4854      	ldr	r0, [pc, #336]	; (8011cbc <_printf_i+0x244>)
 8011b6c:	2f6f      	cmp	r7, #111	; 0x6f
 8011b6e:	bf0c      	ite	eq
 8011b70:	2308      	moveq	r3, #8
 8011b72:	230a      	movne	r3, #10
 8011b74:	2100      	movs	r1, #0
 8011b76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011b7a:	6865      	ldr	r5, [r4, #4]
 8011b7c:	60a5      	str	r5, [r4, #8]
 8011b7e:	2d00      	cmp	r5, #0
 8011b80:	bfa2      	ittt	ge
 8011b82:	6821      	ldrge	r1, [r4, #0]
 8011b84:	f021 0104 	bicge.w	r1, r1, #4
 8011b88:	6021      	strge	r1, [r4, #0]
 8011b8a:	b90e      	cbnz	r6, 8011b90 <_printf_i+0x118>
 8011b8c:	2d00      	cmp	r5, #0
 8011b8e:	d04d      	beq.n	8011c2c <_printf_i+0x1b4>
 8011b90:	4615      	mov	r5, r2
 8011b92:	fbb6 f1f3 	udiv	r1, r6, r3
 8011b96:	fb03 6711 	mls	r7, r3, r1, r6
 8011b9a:	5dc7      	ldrb	r7, [r0, r7]
 8011b9c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011ba0:	4637      	mov	r7, r6
 8011ba2:	42bb      	cmp	r3, r7
 8011ba4:	460e      	mov	r6, r1
 8011ba6:	d9f4      	bls.n	8011b92 <_printf_i+0x11a>
 8011ba8:	2b08      	cmp	r3, #8
 8011baa:	d10b      	bne.n	8011bc4 <_printf_i+0x14c>
 8011bac:	6823      	ldr	r3, [r4, #0]
 8011bae:	07de      	lsls	r6, r3, #31
 8011bb0:	d508      	bpl.n	8011bc4 <_printf_i+0x14c>
 8011bb2:	6923      	ldr	r3, [r4, #16]
 8011bb4:	6861      	ldr	r1, [r4, #4]
 8011bb6:	4299      	cmp	r1, r3
 8011bb8:	bfde      	ittt	le
 8011bba:	2330      	movle	r3, #48	; 0x30
 8011bbc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011bc0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011bc4:	1b52      	subs	r2, r2, r5
 8011bc6:	6122      	str	r2, [r4, #16]
 8011bc8:	f8cd a000 	str.w	sl, [sp]
 8011bcc:	464b      	mov	r3, r9
 8011bce:	aa03      	add	r2, sp, #12
 8011bd0:	4621      	mov	r1, r4
 8011bd2:	4640      	mov	r0, r8
 8011bd4:	f7ff fee2 	bl	801199c <_printf_common>
 8011bd8:	3001      	adds	r0, #1
 8011bda:	d14c      	bne.n	8011c76 <_printf_i+0x1fe>
 8011bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8011be0:	b004      	add	sp, #16
 8011be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011be6:	4835      	ldr	r0, [pc, #212]	; (8011cbc <_printf_i+0x244>)
 8011be8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011bec:	6829      	ldr	r1, [r5, #0]
 8011bee:	6823      	ldr	r3, [r4, #0]
 8011bf0:	f851 6b04 	ldr.w	r6, [r1], #4
 8011bf4:	6029      	str	r1, [r5, #0]
 8011bf6:	061d      	lsls	r5, r3, #24
 8011bf8:	d514      	bpl.n	8011c24 <_printf_i+0x1ac>
 8011bfa:	07df      	lsls	r7, r3, #31
 8011bfc:	bf44      	itt	mi
 8011bfe:	f043 0320 	orrmi.w	r3, r3, #32
 8011c02:	6023      	strmi	r3, [r4, #0]
 8011c04:	b91e      	cbnz	r6, 8011c0e <_printf_i+0x196>
 8011c06:	6823      	ldr	r3, [r4, #0]
 8011c08:	f023 0320 	bic.w	r3, r3, #32
 8011c0c:	6023      	str	r3, [r4, #0]
 8011c0e:	2310      	movs	r3, #16
 8011c10:	e7b0      	b.n	8011b74 <_printf_i+0xfc>
 8011c12:	6823      	ldr	r3, [r4, #0]
 8011c14:	f043 0320 	orr.w	r3, r3, #32
 8011c18:	6023      	str	r3, [r4, #0]
 8011c1a:	2378      	movs	r3, #120	; 0x78
 8011c1c:	4828      	ldr	r0, [pc, #160]	; (8011cc0 <_printf_i+0x248>)
 8011c1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011c22:	e7e3      	b.n	8011bec <_printf_i+0x174>
 8011c24:	0659      	lsls	r1, r3, #25
 8011c26:	bf48      	it	mi
 8011c28:	b2b6      	uxthmi	r6, r6
 8011c2a:	e7e6      	b.n	8011bfa <_printf_i+0x182>
 8011c2c:	4615      	mov	r5, r2
 8011c2e:	e7bb      	b.n	8011ba8 <_printf_i+0x130>
 8011c30:	682b      	ldr	r3, [r5, #0]
 8011c32:	6826      	ldr	r6, [r4, #0]
 8011c34:	6961      	ldr	r1, [r4, #20]
 8011c36:	1d18      	adds	r0, r3, #4
 8011c38:	6028      	str	r0, [r5, #0]
 8011c3a:	0635      	lsls	r5, r6, #24
 8011c3c:	681b      	ldr	r3, [r3, #0]
 8011c3e:	d501      	bpl.n	8011c44 <_printf_i+0x1cc>
 8011c40:	6019      	str	r1, [r3, #0]
 8011c42:	e002      	b.n	8011c4a <_printf_i+0x1d2>
 8011c44:	0670      	lsls	r0, r6, #25
 8011c46:	d5fb      	bpl.n	8011c40 <_printf_i+0x1c8>
 8011c48:	8019      	strh	r1, [r3, #0]
 8011c4a:	2300      	movs	r3, #0
 8011c4c:	6123      	str	r3, [r4, #16]
 8011c4e:	4615      	mov	r5, r2
 8011c50:	e7ba      	b.n	8011bc8 <_printf_i+0x150>
 8011c52:	682b      	ldr	r3, [r5, #0]
 8011c54:	1d1a      	adds	r2, r3, #4
 8011c56:	602a      	str	r2, [r5, #0]
 8011c58:	681d      	ldr	r5, [r3, #0]
 8011c5a:	6862      	ldr	r2, [r4, #4]
 8011c5c:	2100      	movs	r1, #0
 8011c5e:	4628      	mov	r0, r5
 8011c60:	f7ee fb46 	bl	80002f0 <memchr>
 8011c64:	b108      	cbz	r0, 8011c6a <_printf_i+0x1f2>
 8011c66:	1b40      	subs	r0, r0, r5
 8011c68:	6060      	str	r0, [r4, #4]
 8011c6a:	6863      	ldr	r3, [r4, #4]
 8011c6c:	6123      	str	r3, [r4, #16]
 8011c6e:	2300      	movs	r3, #0
 8011c70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011c74:	e7a8      	b.n	8011bc8 <_printf_i+0x150>
 8011c76:	6923      	ldr	r3, [r4, #16]
 8011c78:	462a      	mov	r2, r5
 8011c7a:	4649      	mov	r1, r9
 8011c7c:	4640      	mov	r0, r8
 8011c7e:	47d0      	blx	sl
 8011c80:	3001      	adds	r0, #1
 8011c82:	d0ab      	beq.n	8011bdc <_printf_i+0x164>
 8011c84:	6823      	ldr	r3, [r4, #0]
 8011c86:	079b      	lsls	r3, r3, #30
 8011c88:	d413      	bmi.n	8011cb2 <_printf_i+0x23a>
 8011c8a:	68e0      	ldr	r0, [r4, #12]
 8011c8c:	9b03      	ldr	r3, [sp, #12]
 8011c8e:	4298      	cmp	r0, r3
 8011c90:	bfb8      	it	lt
 8011c92:	4618      	movlt	r0, r3
 8011c94:	e7a4      	b.n	8011be0 <_printf_i+0x168>
 8011c96:	2301      	movs	r3, #1
 8011c98:	4632      	mov	r2, r6
 8011c9a:	4649      	mov	r1, r9
 8011c9c:	4640      	mov	r0, r8
 8011c9e:	47d0      	blx	sl
 8011ca0:	3001      	adds	r0, #1
 8011ca2:	d09b      	beq.n	8011bdc <_printf_i+0x164>
 8011ca4:	3501      	adds	r5, #1
 8011ca6:	68e3      	ldr	r3, [r4, #12]
 8011ca8:	9903      	ldr	r1, [sp, #12]
 8011caa:	1a5b      	subs	r3, r3, r1
 8011cac:	42ab      	cmp	r3, r5
 8011cae:	dcf2      	bgt.n	8011c96 <_printf_i+0x21e>
 8011cb0:	e7eb      	b.n	8011c8a <_printf_i+0x212>
 8011cb2:	2500      	movs	r5, #0
 8011cb4:	f104 0619 	add.w	r6, r4, #25
 8011cb8:	e7f5      	b.n	8011ca6 <_printf_i+0x22e>
 8011cba:	bf00      	nop
 8011cbc:	08013ce6 	.word	0x08013ce6
 8011cc0:	08013cf7 	.word	0x08013cf7

08011cc4 <_sbrk_r>:
 8011cc4:	b538      	push	{r3, r4, r5, lr}
 8011cc6:	4d06      	ldr	r5, [pc, #24]	; (8011ce0 <_sbrk_r+0x1c>)
 8011cc8:	2300      	movs	r3, #0
 8011cca:	4604      	mov	r4, r0
 8011ccc:	4608      	mov	r0, r1
 8011cce:	602b      	str	r3, [r5, #0]
 8011cd0:	f7ef fe7c 	bl	80019cc <_sbrk>
 8011cd4:	1c43      	adds	r3, r0, #1
 8011cd6:	d102      	bne.n	8011cde <_sbrk_r+0x1a>
 8011cd8:	682b      	ldr	r3, [r5, #0]
 8011cda:	b103      	cbz	r3, 8011cde <_sbrk_r+0x1a>
 8011cdc:	6023      	str	r3, [r4, #0]
 8011cde:	bd38      	pop	{r3, r4, r5, pc}
 8011ce0:	24002128 	.word	0x24002128

08011ce4 <quorem>:
 8011ce4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ce8:	6903      	ldr	r3, [r0, #16]
 8011cea:	690c      	ldr	r4, [r1, #16]
 8011cec:	42a3      	cmp	r3, r4
 8011cee:	4607      	mov	r7, r0
 8011cf0:	f2c0 8081 	blt.w	8011df6 <quorem+0x112>
 8011cf4:	3c01      	subs	r4, #1
 8011cf6:	f101 0814 	add.w	r8, r1, #20
 8011cfa:	f100 0514 	add.w	r5, r0, #20
 8011cfe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011d02:	9301      	str	r3, [sp, #4]
 8011d04:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011d08:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011d0c:	3301      	adds	r3, #1
 8011d0e:	429a      	cmp	r2, r3
 8011d10:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011d14:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011d18:	fbb2 f6f3 	udiv	r6, r2, r3
 8011d1c:	d331      	bcc.n	8011d82 <quorem+0x9e>
 8011d1e:	f04f 0e00 	mov.w	lr, #0
 8011d22:	4640      	mov	r0, r8
 8011d24:	46ac      	mov	ip, r5
 8011d26:	46f2      	mov	sl, lr
 8011d28:	f850 2b04 	ldr.w	r2, [r0], #4
 8011d2c:	b293      	uxth	r3, r2
 8011d2e:	fb06 e303 	mla	r3, r6, r3, lr
 8011d32:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8011d36:	b29b      	uxth	r3, r3
 8011d38:	ebaa 0303 	sub.w	r3, sl, r3
 8011d3c:	f8dc a000 	ldr.w	sl, [ip]
 8011d40:	0c12      	lsrs	r2, r2, #16
 8011d42:	fa13 f38a 	uxtah	r3, r3, sl
 8011d46:	fb06 e202 	mla	r2, r6, r2, lr
 8011d4a:	9300      	str	r3, [sp, #0]
 8011d4c:	9b00      	ldr	r3, [sp, #0]
 8011d4e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011d52:	b292      	uxth	r2, r2
 8011d54:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8011d58:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011d5c:	f8bd 3000 	ldrh.w	r3, [sp]
 8011d60:	4581      	cmp	r9, r0
 8011d62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011d66:	f84c 3b04 	str.w	r3, [ip], #4
 8011d6a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011d6e:	d2db      	bcs.n	8011d28 <quorem+0x44>
 8011d70:	f855 300b 	ldr.w	r3, [r5, fp]
 8011d74:	b92b      	cbnz	r3, 8011d82 <quorem+0x9e>
 8011d76:	9b01      	ldr	r3, [sp, #4]
 8011d78:	3b04      	subs	r3, #4
 8011d7a:	429d      	cmp	r5, r3
 8011d7c:	461a      	mov	r2, r3
 8011d7e:	d32e      	bcc.n	8011dde <quorem+0xfa>
 8011d80:	613c      	str	r4, [r7, #16]
 8011d82:	4638      	mov	r0, r7
 8011d84:	f001 f83c 	bl	8012e00 <__mcmp>
 8011d88:	2800      	cmp	r0, #0
 8011d8a:	db24      	blt.n	8011dd6 <quorem+0xf2>
 8011d8c:	3601      	adds	r6, #1
 8011d8e:	4628      	mov	r0, r5
 8011d90:	f04f 0c00 	mov.w	ip, #0
 8011d94:	f858 2b04 	ldr.w	r2, [r8], #4
 8011d98:	f8d0 e000 	ldr.w	lr, [r0]
 8011d9c:	b293      	uxth	r3, r2
 8011d9e:	ebac 0303 	sub.w	r3, ip, r3
 8011da2:	0c12      	lsrs	r2, r2, #16
 8011da4:	fa13 f38e 	uxtah	r3, r3, lr
 8011da8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011dac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011db0:	b29b      	uxth	r3, r3
 8011db2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011db6:	45c1      	cmp	r9, r8
 8011db8:	f840 3b04 	str.w	r3, [r0], #4
 8011dbc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011dc0:	d2e8      	bcs.n	8011d94 <quorem+0xb0>
 8011dc2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011dc6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011dca:	b922      	cbnz	r2, 8011dd6 <quorem+0xf2>
 8011dcc:	3b04      	subs	r3, #4
 8011dce:	429d      	cmp	r5, r3
 8011dd0:	461a      	mov	r2, r3
 8011dd2:	d30a      	bcc.n	8011dea <quorem+0x106>
 8011dd4:	613c      	str	r4, [r7, #16]
 8011dd6:	4630      	mov	r0, r6
 8011dd8:	b003      	add	sp, #12
 8011dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011dde:	6812      	ldr	r2, [r2, #0]
 8011de0:	3b04      	subs	r3, #4
 8011de2:	2a00      	cmp	r2, #0
 8011de4:	d1cc      	bne.n	8011d80 <quorem+0x9c>
 8011de6:	3c01      	subs	r4, #1
 8011de8:	e7c7      	b.n	8011d7a <quorem+0x96>
 8011dea:	6812      	ldr	r2, [r2, #0]
 8011dec:	3b04      	subs	r3, #4
 8011dee:	2a00      	cmp	r2, #0
 8011df0:	d1f0      	bne.n	8011dd4 <quorem+0xf0>
 8011df2:	3c01      	subs	r4, #1
 8011df4:	e7eb      	b.n	8011dce <quorem+0xea>
 8011df6:	2000      	movs	r0, #0
 8011df8:	e7ee      	b.n	8011dd8 <quorem+0xf4>
 8011dfa:	0000      	movs	r0, r0
 8011dfc:	0000      	movs	r0, r0
	...

08011e00 <_dtoa_r>:
 8011e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e04:	ed2d 8b02 	vpush	{d8}
 8011e08:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011e0a:	b091      	sub	sp, #68	; 0x44
 8011e0c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8011e10:	ec59 8b10 	vmov	r8, r9, d0
 8011e14:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8011e16:	9106      	str	r1, [sp, #24]
 8011e18:	4606      	mov	r6, r0
 8011e1a:	9208      	str	r2, [sp, #32]
 8011e1c:	930c      	str	r3, [sp, #48]	; 0x30
 8011e1e:	b975      	cbnz	r5, 8011e3e <_dtoa_r+0x3e>
 8011e20:	2010      	movs	r0, #16
 8011e22:	f7ff fa05 	bl	8011230 <malloc>
 8011e26:	4602      	mov	r2, r0
 8011e28:	6270      	str	r0, [r6, #36]	; 0x24
 8011e2a:	b920      	cbnz	r0, 8011e36 <_dtoa_r+0x36>
 8011e2c:	4baa      	ldr	r3, [pc, #680]	; (80120d8 <_dtoa_r+0x2d8>)
 8011e2e:	21ea      	movs	r1, #234	; 0xea
 8011e30:	48aa      	ldr	r0, [pc, #680]	; (80120dc <_dtoa_r+0x2dc>)
 8011e32:	f001 f8fd 	bl	8013030 <__assert_func>
 8011e36:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011e3a:	6005      	str	r5, [r0, #0]
 8011e3c:	60c5      	str	r5, [r0, #12]
 8011e3e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8011e40:	6819      	ldr	r1, [r3, #0]
 8011e42:	b151      	cbz	r1, 8011e5a <_dtoa_r+0x5a>
 8011e44:	685a      	ldr	r2, [r3, #4]
 8011e46:	604a      	str	r2, [r1, #4]
 8011e48:	2301      	movs	r3, #1
 8011e4a:	4093      	lsls	r3, r2
 8011e4c:	608b      	str	r3, [r1, #8]
 8011e4e:	4630      	mov	r0, r6
 8011e50:	f000 fd94 	bl	801297c <_Bfree>
 8011e54:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8011e56:	2200      	movs	r2, #0
 8011e58:	601a      	str	r2, [r3, #0]
 8011e5a:	f1b9 0300 	subs.w	r3, r9, #0
 8011e5e:	bfbb      	ittet	lt
 8011e60:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8011e64:	9303      	strlt	r3, [sp, #12]
 8011e66:	2300      	movge	r3, #0
 8011e68:	2201      	movlt	r2, #1
 8011e6a:	bfac      	ite	ge
 8011e6c:	6023      	strge	r3, [r4, #0]
 8011e6e:	6022      	strlt	r2, [r4, #0]
 8011e70:	4b9b      	ldr	r3, [pc, #620]	; (80120e0 <_dtoa_r+0x2e0>)
 8011e72:	9c03      	ldr	r4, [sp, #12]
 8011e74:	43a3      	bics	r3, r4
 8011e76:	d11c      	bne.n	8011eb2 <_dtoa_r+0xb2>
 8011e78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011e7a:	f242 730f 	movw	r3, #9999	; 0x270f
 8011e7e:	6013      	str	r3, [r2, #0]
 8011e80:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8011e84:	ea53 0308 	orrs.w	r3, r3, r8
 8011e88:	f000 84fd 	beq.w	8012886 <_dtoa_r+0xa86>
 8011e8c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011e8e:	b963      	cbnz	r3, 8011eaa <_dtoa_r+0xaa>
 8011e90:	4b94      	ldr	r3, [pc, #592]	; (80120e4 <_dtoa_r+0x2e4>)
 8011e92:	e01f      	b.n	8011ed4 <_dtoa_r+0xd4>
 8011e94:	4b94      	ldr	r3, [pc, #592]	; (80120e8 <_dtoa_r+0x2e8>)
 8011e96:	9301      	str	r3, [sp, #4]
 8011e98:	3308      	adds	r3, #8
 8011e9a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8011e9c:	6013      	str	r3, [r2, #0]
 8011e9e:	9801      	ldr	r0, [sp, #4]
 8011ea0:	b011      	add	sp, #68	; 0x44
 8011ea2:	ecbd 8b02 	vpop	{d8}
 8011ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011eaa:	4b8e      	ldr	r3, [pc, #568]	; (80120e4 <_dtoa_r+0x2e4>)
 8011eac:	9301      	str	r3, [sp, #4]
 8011eae:	3303      	adds	r3, #3
 8011eb0:	e7f3      	b.n	8011e9a <_dtoa_r+0x9a>
 8011eb2:	ed9d 8b02 	vldr	d8, [sp, #8]
 8011eb6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ebe:	d10b      	bne.n	8011ed8 <_dtoa_r+0xd8>
 8011ec0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011ec2:	2301      	movs	r3, #1
 8011ec4:	6013      	str	r3, [r2, #0]
 8011ec6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	f000 84d9 	beq.w	8012880 <_dtoa_r+0xa80>
 8011ece:	4887      	ldr	r0, [pc, #540]	; (80120ec <_dtoa_r+0x2ec>)
 8011ed0:	6018      	str	r0, [r3, #0]
 8011ed2:	1e43      	subs	r3, r0, #1
 8011ed4:	9301      	str	r3, [sp, #4]
 8011ed6:	e7e2      	b.n	8011e9e <_dtoa_r+0x9e>
 8011ed8:	a90f      	add	r1, sp, #60	; 0x3c
 8011eda:	aa0e      	add	r2, sp, #56	; 0x38
 8011edc:	4630      	mov	r0, r6
 8011ede:	eeb0 0b48 	vmov.f64	d0, d8
 8011ee2:	f001 f833 	bl	8012f4c <__d2b>
 8011ee6:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8011eea:	4605      	mov	r5, r0
 8011eec:	980e      	ldr	r0, [sp, #56]	; 0x38
 8011eee:	2900      	cmp	r1, #0
 8011ef0:	d046      	beq.n	8011f80 <_dtoa_r+0x180>
 8011ef2:	ee18 4a90 	vmov	r4, s17
 8011ef6:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8011efa:	ec53 2b18 	vmov	r2, r3, d8
 8011efe:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8011f02:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011f06:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8011f0a:	2400      	movs	r4, #0
 8011f0c:	ec43 2b16 	vmov	d6, r2, r3
 8011f10:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8011f14:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80120c0 <_dtoa_r+0x2c0>
 8011f18:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011f1c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 80120c8 <_dtoa_r+0x2c8>
 8011f20:	eea7 6b05 	vfma.f64	d6, d7, d5
 8011f24:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80120d0 <_dtoa_r+0x2d0>
 8011f28:	ee07 1a90 	vmov	s15, r1
 8011f2c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8011f30:	eeb0 7b46 	vmov.f64	d7, d6
 8011f34:	eea4 7b05 	vfma.f64	d7, d4, d5
 8011f38:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8011f3c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8011f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f44:	ee16 ba90 	vmov	fp, s13
 8011f48:	940a      	str	r4, [sp, #40]	; 0x28
 8011f4a:	d508      	bpl.n	8011f5e <_dtoa_r+0x15e>
 8011f4c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8011f50:	eeb4 6b47 	vcmp.f64	d6, d7
 8011f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f58:	bf18      	it	ne
 8011f5a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8011f5e:	f1bb 0f16 	cmp.w	fp, #22
 8011f62:	d82f      	bhi.n	8011fc4 <_dtoa_r+0x1c4>
 8011f64:	4b62      	ldr	r3, [pc, #392]	; (80120f0 <_dtoa_r+0x2f0>)
 8011f66:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8011f6a:	ed93 7b00 	vldr	d7, [r3]
 8011f6e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8011f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f76:	d501      	bpl.n	8011f7c <_dtoa_r+0x17c>
 8011f78:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011f7c:	2300      	movs	r3, #0
 8011f7e:	e022      	b.n	8011fc6 <_dtoa_r+0x1c6>
 8011f80:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011f82:	4401      	add	r1, r0
 8011f84:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8011f88:	2b20      	cmp	r3, #32
 8011f8a:	bfc1      	itttt	gt
 8011f8c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8011f90:	fa04 f303 	lslgt.w	r3, r4, r3
 8011f94:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8011f98:	fa28 f804 	lsrgt.w	r8, r8, r4
 8011f9c:	bfd6      	itet	le
 8011f9e:	f1c3 0320 	rsble	r3, r3, #32
 8011fa2:	ea43 0808 	orrgt.w	r8, r3, r8
 8011fa6:	fa08 f803 	lslle.w	r8, r8, r3
 8011faa:	ee07 8a90 	vmov	s15, r8
 8011fae:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8011fb2:	3901      	subs	r1, #1
 8011fb4:	ee17 4a90 	vmov	r4, s15
 8011fb8:	ec53 2b17 	vmov	r2, r3, d7
 8011fbc:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8011fc0:	2401      	movs	r4, #1
 8011fc2:	e7a3      	b.n	8011f0c <_dtoa_r+0x10c>
 8011fc4:	2301      	movs	r3, #1
 8011fc6:	930b      	str	r3, [sp, #44]	; 0x2c
 8011fc8:	1a43      	subs	r3, r0, r1
 8011fca:	1e5a      	subs	r2, r3, #1
 8011fcc:	bf45      	ittet	mi
 8011fce:	f1c3 0301 	rsbmi	r3, r3, #1
 8011fd2:	9304      	strmi	r3, [sp, #16]
 8011fd4:	2300      	movpl	r3, #0
 8011fd6:	2300      	movmi	r3, #0
 8011fd8:	9205      	str	r2, [sp, #20]
 8011fda:	bf54      	ite	pl
 8011fdc:	9304      	strpl	r3, [sp, #16]
 8011fde:	9305      	strmi	r3, [sp, #20]
 8011fe0:	f1bb 0f00 	cmp.w	fp, #0
 8011fe4:	db18      	blt.n	8012018 <_dtoa_r+0x218>
 8011fe6:	9b05      	ldr	r3, [sp, #20]
 8011fe8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8011fec:	445b      	add	r3, fp
 8011fee:	9305      	str	r3, [sp, #20]
 8011ff0:	2300      	movs	r3, #0
 8011ff2:	9a06      	ldr	r2, [sp, #24]
 8011ff4:	2a09      	cmp	r2, #9
 8011ff6:	d849      	bhi.n	801208c <_dtoa_r+0x28c>
 8011ff8:	2a05      	cmp	r2, #5
 8011ffa:	bfc4      	itt	gt
 8011ffc:	3a04      	subgt	r2, #4
 8011ffe:	9206      	strgt	r2, [sp, #24]
 8012000:	9a06      	ldr	r2, [sp, #24]
 8012002:	f1a2 0202 	sub.w	r2, r2, #2
 8012006:	bfcc      	ite	gt
 8012008:	2400      	movgt	r4, #0
 801200a:	2401      	movle	r4, #1
 801200c:	2a03      	cmp	r2, #3
 801200e:	d848      	bhi.n	80120a2 <_dtoa_r+0x2a2>
 8012010:	e8df f002 	tbb	[pc, r2]
 8012014:	3a2c2e0b 	.word	0x3a2c2e0b
 8012018:	9b04      	ldr	r3, [sp, #16]
 801201a:	2200      	movs	r2, #0
 801201c:	eba3 030b 	sub.w	r3, r3, fp
 8012020:	9304      	str	r3, [sp, #16]
 8012022:	9209      	str	r2, [sp, #36]	; 0x24
 8012024:	f1cb 0300 	rsb	r3, fp, #0
 8012028:	e7e3      	b.n	8011ff2 <_dtoa_r+0x1f2>
 801202a:	2200      	movs	r2, #0
 801202c:	9207      	str	r2, [sp, #28]
 801202e:	9a08      	ldr	r2, [sp, #32]
 8012030:	2a00      	cmp	r2, #0
 8012032:	dc39      	bgt.n	80120a8 <_dtoa_r+0x2a8>
 8012034:	f04f 0a01 	mov.w	sl, #1
 8012038:	46d1      	mov	r9, sl
 801203a:	4652      	mov	r2, sl
 801203c:	f8cd a020 	str.w	sl, [sp, #32]
 8012040:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8012042:	2100      	movs	r1, #0
 8012044:	6079      	str	r1, [r7, #4]
 8012046:	2004      	movs	r0, #4
 8012048:	f100 0c14 	add.w	ip, r0, #20
 801204c:	4594      	cmp	ip, r2
 801204e:	6879      	ldr	r1, [r7, #4]
 8012050:	d92f      	bls.n	80120b2 <_dtoa_r+0x2b2>
 8012052:	4630      	mov	r0, r6
 8012054:	930d      	str	r3, [sp, #52]	; 0x34
 8012056:	f000 fc51 	bl	80128fc <_Balloc>
 801205a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801205c:	9001      	str	r0, [sp, #4]
 801205e:	4602      	mov	r2, r0
 8012060:	2800      	cmp	r0, #0
 8012062:	d149      	bne.n	80120f8 <_dtoa_r+0x2f8>
 8012064:	4b23      	ldr	r3, [pc, #140]	; (80120f4 <_dtoa_r+0x2f4>)
 8012066:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801206a:	e6e1      	b.n	8011e30 <_dtoa_r+0x30>
 801206c:	2201      	movs	r2, #1
 801206e:	e7dd      	b.n	801202c <_dtoa_r+0x22c>
 8012070:	2200      	movs	r2, #0
 8012072:	9207      	str	r2, [sp, #28]
 8012074:	9a08      	ldr	r2, [sp, #32]
 8012076:	eb0b 0a02 	add.w	sl, fp, r2
 801207a:	f10a 0901 	add.w	r9, sl, #1
 801207e:	464a      	mov	r2, r9
 8012080:	2a01      	cmp	r2, #1
 8012082:	bfb8      	it	lt
 8012084:	2201      	movlt	r2, #1
 8012086:	e7db      	b.n	8012040 <_dtoa_r+0x240>
 8012088:	2201      	movs	r2, #1
 801208a:	e7f2      	b.n	8012072 <_dtoa_r+0x272>
 801208c:	2401      	movs	r4, #1
 801208e:	2200      	movs	r2, #0
 8012090:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8012094:	f04f 3aff 	mov.w	sl, #4294967295
 8012098:	2100      	movs	r1, #0
 801209a:	46d1      	mov	r9, sl
 801209c:	2212      	movs	r2, #18
 801209e:	9108      	str	r1, [sp, #32]
 80120a0:	e7ce      	b.n	8012040 <_dtoa_r+0x240>
 80120a2:	2201      	movs	r2, #1
 80120a4:	9207      	str	r2, [sp, #28]
 80120a6:	e7f5      	b.n	8012094 <_dtoa_r+0x294>
 80120a8:	f8dd a020 	ldr.w	sl, [sp, #32]
 80120ac:	46d1      	mov	r9, sl
 80120ae:	4652      	mov	r2, sl
 80120b0:	e7c6      	b.n	8012040 <_dtoa_r+0x240>
 80120b2:	3101      	adds	r1, #1
 80120b4:	6079      	str	r1, [r7, #4]
 80120b6:	0040      	lsls	r0, r0, #1
 80120b8:	e7c6      	b.n	8012048 <_dtoa_r+0x248>
 80120ba:	bf00      	nop
 80120bc:	f3af 8000 	nop.w
 80120c0:	636f4361 	.word	0x636f4361
 80120c4:	3fd287a7 	.word	0x3fd287a7
 80120c8:	8b60c8b3 	.word	0x8b60c8b3
 80120cc:	3fc68a28 	.word	0x3fc68a28
 80120d0:	509f79fb 	.word	0x509f79fb
 80120d4:	3fd34413 	.word	0x3fd34413
 80120d8:	08013d15 	.word	0x08013d15
 80120dc:	08013d2c 	.word	0x08013d2c
 80120e0:	7ff00000 	.word	0x7ff00000
 80120e4:	08013d11 	.word	0x08013d11
 80120e8:	08013d08 	.word	0x08013d08
 80120ec:	08013ce5 	.word	0x08013ce5
 80120f0:	08013e20 	.word	0x08013e20
 80120f4:	08013d87 	.word	0x08013d87
 80120f8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80120fa:	9901      	ldr	r1, [sp, #4]
 80120fc:	6011      	str	r1, [r2, #0]
 80120fe:	f1b9 0f0e 	cmp.w	r9, #14
 8012102:	d86c      	bhi.n	80121de <_dtoa_r+0x3de>
 8012104:	2c00      	cmp	r4, #0
 8012106:	d06a      	beq.n	80121de <_dtoa_r+0x3de>
 8012108:	f1bb 0f00 	cmp.w	fp, #0
 801210c:	f340 80a0 	ble.w	8012250 <_dtoa_r+0x450>
 8012110:	49c1      	ldr	r1, [pc, #772]	; (8012418 <_dtoa_r+0x618>)
 8012112:	f00b 020f 	and.w	r2, fp, #15
 8012116:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 801211a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801211e:	ed92 7b00 	vldr	d7, [r2]
 8012122:	ea4f 112b 	mov.w	r1, fp, asr #4
 8012126:	f000 8087 	beq.w	8012238 <_dtoa_r+0x438>
 801212a:	4abc      	ldr	r2, [pc, #752]	; (801241c <_dtoa_r+0x61c>)
 801212c:	ed92 6b08 	vldr	d6, [r2, #32]
 8012130:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8012134:	ed8d 6b02 	vstr	d6, [sp, #8]
 8012138:	f001 010f 	and.w	r1, r1, #15
 801213c:	2203      	movs	r2, #3
 801213e:	48b7      	ldr	r0, [pc, #732]	; (801241c <_dtoa_r+0x61c>)
 8012140:	2900      	cmp	r1, #0
 8012142:	d17b      	bne.n	801223c <_dtoa_r+0x43c>
 8012144:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012148:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801214c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012150:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012152:	2900      	cmp	r1, #0
 8012154:	f000 80a2 	beq.w	801229c <_dtoa_r+0x49c>
 8012158:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801215c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012160:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012168:	f140 8098 	bpl.w	801229c <_dtoa_r+0x49c>
 801216c:	f1b9 0f00 	cmp.w	r9, #0
 8012170:	f000 8094 	beq.w	801229c <_dtoa_r+0x49c>
 8012174:	f1ba 0f00 	cmp.w	sl, #0
 8012178:	dd2f      	ble.n	80121da <_dtoa_r+0x3da>
 801217a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801217e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012182:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012186:	f10b 37ff 	add.w	r7, fp, #4294967295
 801218a:	3201      	adds	r2, #1
 801218c:	4650      	mov	r0, sl
 801218e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012192:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8012196:	ee07 2a90 	vmov	s15, r2
 801219a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801219e:	eea7 5b06 	vfma.f64	d5, d7, d6
 80121a2:	ee15 4a90 	vmov	r4, s11
 80121a6:	ec52 1b15 	vmov	r1, r2, d5
 80121aa:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 80121ae:	2800      	cmp	r0, #0
 80121b0:	d177      	bne.n	80122a2 <_dtoa_r+0x4a2>
 80121b2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80121b6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80121ba:	ec42 1b17 	vmov	d7, r1, r2
 80121be:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80121c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121c6:	f300 8263 	bgt.w	8012690 <_dtoa_r+0x890>
 80121ca:	eeb1 7b47 	vneg.f64	d7, d7
 80121ce:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80121d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121d6:	f100 8258 	bmi.w	801268a <_dtoa_r+0x88a>
 80121da:	ed8d 8b02 	vstr	d8, [sp, #8]
 80121de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80121e0:	2a00      	cmp	r2, #0
 80121e2:	f2c0 811d 	blt.w	8012420 <_dtoa_r+0x620>
 80121e6:	f1bb 0f0e 	cmp.w	fp, #14
 80121ea:	f300 8119 	bgt.w	8012420 <_dtoa_r+0x620>
 80121ee:	4b8a      	ldr	r3, [pc, #552]	; (8012418 <_dtoa_r+0x618>)
 80121f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80121f4:	ed93 6b00 	vldr	d6, [r3]
 80121f8:	9b08      	ldr	r3, [sp, #32]
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	f280 80b7 	bge.w	801236e <_dtoa_r+0x56e>
 8012200:	f1b9 0f00 	cmp.w	r9, #0
 8012204:	f300 80b3 	bgt.w	801236e <_dtoa_r+0x56e>
 8012208:	f040 823f 	bne.w	801268a <_dtoa_r+0x88a>
 801220c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8012210:	ee26 6b07 	vmul.f64	d6, d6, d7
 8012214:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012218:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801221c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012220:	464c      	mov	r4, r9
 8012222:	464f      	mov	r7, r9
 8012224:	f280 8215 	bge.w	8012652 <_dtoa_r+0x852>
 8012228:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801222c:	2331      	movs	r3, #49	; 0x31
 801222e:	f808 3b01 	strb.w	r3, [r8], #1
 8012232:	f10b 0b01 	add.w	fp, fp, #1
 8012236:	e211      	b.n	801265c <_dtoa_r+0x85c>
 8012238:	2202      	movs	r2, #2
 801223a:	e780      	b.n	801213e <_dtoa_r+0x33e>
 801223c:	07cc      	lsls	r4, r1, #31
 801223e:	d504      	bpl.n	801224a <_dtoa_r+0x44a>
 8012240:	ed90 6b00 	vldr	d6, [r0]
 8012244:	3201      	adds	r2, #1
 8012246:	ee27 7b06 	vmul.f64	d7, d7, d6
 801224a:	1049      	asrs	r1, r1, #1
 801224c:	3008      	adds	r0, #8
 801224e:	e777      	b.n	8012140 <_dtoa_r+0x340>
 8012250:	d022      	beq.n	8012298 <_dtoa_r+0x498>
 8012252:	f1cb 0100 	rsb	r1, fp, #0
 8012256:	4a70      	ldr	r2, [pc, #448]	; (8012418 <_dtoa_r+0x618>)
 8012258:	f001 000f 	and.w	r0, r1, #15
 801225c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8012260:	ed92 7b00 	vldr	d7, [r2]
 8012264:	ee28 7b07 	vmul.f64	d7, d8, d7
 8012268:	ed8d 7b02 	vstr	d7, [sp, #8]
 801226c:	486b      	ldr	r0, [pc, #428]	; (801241c <_dtoa_r+0x61c>)
 801226e:	1109      	asrs	r1, r1, #4
 8012270:	2400      	movs	r4, #0
 8012272:	2202      	movs	r2, #2
 8012274:	b929      	cbnz	r1, 8012282 <_dtoa_r+0x482>
 8012276:	2c00      	cmp	r4, #0
 8012278:	f43f af6a 	beq.w	8012150 <_dtoa_r+0x350>
 801227c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012280:	e766      	b.n	8012150 <_dtoa_r+0x350>
 8012282:	07cf      	lsls	r7, r1, #31
 8012284:	d505      	bpl.n	8012292 <_dtoa_r+0x492>
 8012286:	ed90 6b00 	vldr	d6, [r0]
 801228a:	3201      	adds	r2, #1
 801228c:	2401      	movs	r4, #1
 801228e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012292:	1049      	asrs	r1, r1, #1
 8012294:	3008      	adds	r0, #8
 8012296:	e7ed      	b.n	8012274 <_dtoa_r+0x474>
 8012298:	2202      	movs	r2, #2
 801229a:	e759      	b.n	8012150 <_dtoa_r+0x350>
 801229c:	465f      	mov	r7, fp
 801229e:	4648      	mov	r0, r9
 80122a0:	e775      	b.n	801218e <_dtoa_r+0x38e>
 80122a2:	ec42 1b17 	vmov	d7, r1, r2
 80122a6:	4a5c      	ldr	r2, [pc, #368]	; (8012418 <_dtoa_r+0x618>)
 80122a8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80122ac:	ed12 4b02 	vldr	d4, [r2, #-8]
 80122b0:	9a01      	ldr	r2, [sp, #4]
 80122b2:	1814      	adds	r4, r2, r0
 80122b4:	9a07      	ldr	r2, [sp, #28]
 80122b6:	b352      	cbz	r2, 801230e <_dtoa_r+0x50e>
 80122b8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80122bc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80122c0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80122c4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80122c8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80122cc:	ee35 7b47 	vsub.f64	d7, d5, d7
 80122d0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80122d4:	ee14 2a90 	vmov	r2, s9
 80122d8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80122dc:	3230      	adds	r2, #48	; 0x30
 80122de:	ee36 6b45 	vsub.f64	d6, d6, d5
 80122e2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80122e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122ea:	f808 2b01 	strb.w	r2, [r8], #1
 80122ee:	d439      	bmi.n	8012364 <_dtoa_r+0x564>
 80122f0:	ee32 5b46 	vsub.f64	d5, d2, d6
 80122f4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80122f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122fc:	d472      	bmi.n	80123e4 <_dtoa_r+0x5e4>
 80122fe:	45a0      	cmp	r8, r4
 8012300:	f43f af6b 	beq.w	80121da <_dtoa_r+0x3da>
 8012304:	ee27 7b03 	vmul.f64	d7, d7, d3
 8012308:	ee26 6b03 	vmul.f64	d6, d6, d3
 801230c:	e7e0      	b.n	80122d0 <_dtoa_r+0x4d0>
 801230e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012312:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012316:	4621      	mov	r1, r4
 8012318:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801231c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012320:	ee14 2a90 	vmov	r2, s9
 8012324:	3230      	adds	r2, #48	; 0x30
 8012326:	f808 2b01 	strb.w	r2, [r8], #1
 801232a:	45a0      	cmp	r8, r4
 801232c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012330:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012334:	d118      	bne.n	8012368 <_dtoa_r+0x568>
 8012336:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801233a:	ee37 4b05 	vadd.f64	d4, d7, d5
 801233e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8012342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012346:	dc4d      	bgt.n	80123e4 <_dtoa_r+0x5e4>
 8012348:	ee35 7b47 	vsub.f64	d7, d5, d7
 801234c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012354:	f57f af41 	bpl.w	80121da <_dtoa_r+0x3da>
 8012358:	4688      	mov	r8, r1
 801235a:	3901      	subs	r1, #1
 801235c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8012360:	2b30      	cmp	r3, #48	; 0x30
 8012362:	d0f9      	beq.n	8012358 <_dtoa_r+0x558>
 8012364:	46bb      	mov	fp, r7
 8012366:	e02a      	b.n	80123be <_dtoa_r+0x5be>
 8012368:	ee26 6b03 	vmul.f64	d6, d6, d3
 801236c:	e7d6      	b.n	801231c <_dtoa_r+0x51c>
 801236e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012372:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8012376:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801237a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801237e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8012382:	ee15 3a10 	vmov	r3, s10
 8012386:	3330      	adds	r3, #48	; 0x30
 8012388:	f808 3b01 	strb.w	r3, [r8], #1
 801238c:	9b01      	ldr	r3, [sp, #4]
 801238e:	eba8 0303 	sub.w	r3, r8, r3
 8012392:	4599      	cmp	r9, r3
 8012394:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8012398:	eea3 7b46 	vfms.f64	d7, d3, d6
 801239c:	d133      	bne.n	8012406 <_dtoa_r+0x606>
 801239e:	ee37 7b07 	vadd.f64	d7, d7, d7
 80123a2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80123a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123aa:	dc1a      	bgt.n	80123e2 <_dtoa_r+0x5e2>
 80123ac:	eeb4 7b46 	vcmp.f64	d7, d6
 80123b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123b4:	d103      	bne.n	80123be <_dtoa_r+0x5be>
 80123b6:	ee15 3a10 	vmov	r3, s10
 80123ba:	07d9      	lsls	r1, r3, #31
 80123bc:	d411      	bmi.n	80123e2 <_dtoa_r+0x5e2>
 80123be:	4629      	mov	r1, r5
 80123c0:	4630      	mov	r0, r6
 80123c2:	f000 fadb 	bl	801297c <_Bfree>
 80123c6:	2300      	movs	r3, #0
 80123c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80123ca:	f888 3000 	strb.w	r3, [r8]
 80123ce:	f10b 0301 	add.w	r3, fp, #1
 80123d2:	6013      	str	r3, [r2, #0]
 80123d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	f43f ad61 	beq.w	8011e9e <_dtoa_r+0x9e>
 80123dc:	f8c3 8000 	str.w	r8, [r3]
 80123e0:	e55d      	b.n	8011e9e <_dtoa_r+0x9e>
 80123e2:	465f      	mov	r7, fp
 80123e4:	4643      	mov	r3, r8
 80123e6:	4698      	mov	r8, r3
 80123e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80123ec:	2a39      	cmp	r2, #57	; 0x39
 80123ee:	d106      	bne.n	80123fe <_dtoa_r+0x5fe>
 80123f0:	9a01      	ldr	r2, [sp, #4]
 80123f2:	429a      	cmp	r2, r3
 80123f4:	d1f7      	bne.n	80123e6 <_dtoa_r+0x5e6>
 80123f6:	9901      	ldr	r1, [sp, #4]
 80123f8:	2230      	movs	r2, #48	; 0x30
 80123fa:	3701      	adds	r7, #1
 80123fc:	700a      	strb	r2, [r1, #0]
 80123fe:	781a      	ldrb	r2, [r3, #0]
 8012400:	3201      	adds	r2, #1
 8012402:	701a      	strb	r2, [r3, #0]
 8012404:	e7ae      	b.n	8012364 <_dtoa_r+0x564>
 8012406:	ee27 7b04 	vmul.f64	d7, d7, d4
 801240a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801240e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012412:	d1b2      	bne.n	801237a <_dtoa_r+0x57a>
 8012414:	e7d3      	b.n	80123be <_dtoa_r+0x5be>
 8012416:	bf00      	nop
 8012418:	08013e20 	.word	0x08013e20
 801241c:	08013df8 	.word	0x08013df8
 8012420:	9907      	ldr	r1, [sp, #28]
 8012422:	2900      	cmp	r1, #0
 8012424:	f000 80d0 	beq.w	80125c8 <_dtoa_r+0x7c8>
 8012428:	9906      	ldr	r1, [sp, #24]
 801242a:	2901      	cmp	r1, #1
 801242c:	f300 80b4 	bgt.w	8012598 <_dtoa_r+0x798>
 8012430:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012432:	2900      	cmp	r1, #0
 8012434:	f000 80ac 	beq.w	8012590 <_dtoa_r+0x790>
 8012438:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801243c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8012440:	461c      	mov	r4, r3
 8012442:	930a      	str	r3, [sp, #40]	; 0x28
 8012444:	9b04      	ldr	r3, [sp, #16]
 8012446:	4413      	add	r3, r2
 8012448:	9304      	str	r3, [sp, #16]
 801244a:	9b05      	ldr	r3, [sp, #20]
 801244c:	2101      	movs	r1, #1
 801244e:	4413      	add	r3, r2
 8012450:	4630      	mov	r0, r6
 8012452:	9305      	str	r3, [sp, #20]
 8012454:	f000 fb4a 	bl	8012aec <__i2b>
 8012458:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801245a:	4607      	mov	r7, r0
 801245c:	f1b8 0f00 	cmp.w	r8, #0
 8012460:	dd0d      	ble.n	801247e <_dtoa_r+0x67e>
 8012462:	9a05      	ldr	r2, [sp, #20]
 8012464:	2a00      	cmp	r2, #0
 8012466:	dd0a      	ble.n	801247e <_dtoa_r+0x67e>
 8012468:	4542      	cmp	r2, r8
 801246a:	9904      	ldr	r1, [sp, #16]
 801246c:	bfa8      	it	ge
 801246e:	4642      	movge	r2, r8
 8012470:	1a89      	subs	r1, r1, r2
 8012472:	9104      	str	r1, [sp, #16]
 8012474:	9905      	ldr	r1, [sp, #20]
 8012476:	eba8 0802 	sub.w	r8, r8, r2
 801247a:	1a8a      	subs	r2, r1, r2
 801247c:	9205      	str	r2, [sp, #20]
 801247e:	b303      	cbz	r3, 80124c2 <_dtoa_r+0x6c2>
 8012480:	9a07      	ldr	r2, [sp, #28]
 8012482:	2a00      	cmp	r2, #0
 8012484:	f000 80a5 	beq.w	80125d2 <_dtoa_r+0x7d2>
 8012488:	2c00      	cmp	r4, #0
 801248a:	dd13      	ble.n	80124b4 <_dtoa_r+0x6b4>
 801248c:	4639      	mov	r1, r7
 801248e:	4622      	mov	r2, r4
 8012490:	4630      	mov	r0, r6
 8012492:	930d      	str	r3, [sp, #52]	; 0x34
 8012494:	f000 fbea 	bl	8012c6c <__pow5mult>
 8012498:	462a      	mov	r2, r5
 801249a:	4601      	mov	r1, r0
 801249c:	4607      	mov	r7, r0
 801249e:	4630      	mov	r0, r6
 80124a0:	f000 fb3a 	bl	8012b18 <__multiply>
 80124a4:	4629      	mov	r1, r5
 80124a6:	900a      	str	r0, [sp, #40]	; 0x28
 80124a8:	4630      	mov	r0, r6
 80124aa:	f000 fa67 	bl	801297c <_Bfree>
 80124ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80124b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80124b2:	4615      	mov	r5, r2
 80124b4:	1b1a      	subs	r2, r3, r4
 80124b6:	d004      	beq.n	80124c2 <_dtoa_r+0x6c2>
 80124b8:	4629      	mov	r1, r5
 80124ba:	4630      	mov	r0, r6
 80124bc:	f000 fbd6 	bl	8012c6c <__pow5mult>
 80124c0:	4605      	mov	r5, r0
 80124c2:	2101      	movs	r1, #1
 80124c4:	4630      	mov	r0, r6
 80124c6:	f000 fb11 	bl	8012aec <__i2b>
 80124ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	4604      	mov	r4, r0
 80124d0:	f340 8081 	ble.w	80125d6 <_dtoa_r+0x7d6>
 80124d4:	461a      	mov	r2, r3
 80124d6:	4601      	mov	r1, r0
 80124d8:	4630      	mov	r0, r6
 80124da:	f000 fbc7 	bl	8012c6c <__pow5mult>
 80124de:	9b06      	ldr	r3, [sp, #24]
 80124e0:	2b01      	cmp	r3, #1
 80124e2:	4604      	mov	r4, r0
 80124e4:	dd7a      	ble.n	80125dc <_dtoa_r+0x7dc>
 80124e6:	2300      	movs	r3, #0
 80124e8:	930a      	str	r3, [sp, #40]	; 0x28
 80124ea:	6922      	ldr	r2, [r4, #16]
 80124ec:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80124f0:	6910      	ldr	r0, [r2, #16]
 80124f2:	f000 faab 	bl	8012a4c <__hi0bits>
 80124f6:	f1c0 0020 	rsb	r0, r0, #32
 80124fa:	9b05      	ldr	r3, [sp, #20]
 80124fc:	4418      	add	r0, r3
 80124fe:	f010 001f 	ands.w	r0, r0, #31
 8012502:	f000 808c 	beq.w	801261e <_dtoa_r+0x81e>
 8012506:	f1c0 0220 	rsb	r2, r0, #32
 801250a:	2a04      	cmp	r2, #4
 801250c:	f340 8085 	ble.w	801261a <_dtoa_r+0x81a>
 8012510:	f1c0 001c 	rsb	r0, r0, #28
 8012514:	9b04      	ldr	r3, [sp, #16]
 8012516:	4403      	add	r3, r0
 8012518:	9304      	str	r3, [sp, #16]
 801251a:	9b05      	ldr	r3, [sp, #20]
 801251c:	4403      	add	r3, r0
 801251e:	4480      	add	r8, r0
 8012520:	9305      	str	r3, [sp, #20]
 8012522:	9b04      	ldr	r3, [sp, #16]
 8012524:	2b00      	cmp	r3, #0
 8012526:	dd05      	ble.n	8012534 <_dtoa_r+0x734>
 8012528:	4629      	mov	r1, r5
 801252a:	461a      	mov	r2, r3
 801252c:	4630      	mov	r0, r6
 801252e:	f000 fbf7 	bl	8012d20 <__lshift>
 8012532:	4605      	mov	r5, r0
 8012534:	9b05      	ldr	r3, [sp, #20]
 8012536:	2b00      	cmp	r3, #0
 8012538:	dd05      	ble.n	8012546 <_dtoa_r+0x746>
 801253a:	4621      	mov	r1, r4
 801253c:	461a      	mov	r2, r3
 801253e:	4630      	mov	r0, r6
 8012540:	f000 fbee 	bl	8012d20 <__lshift>
 8012544:	4604      	mov	r4, r0
 8012546:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012548:	2b00      	cmp	r3, #0
 801254a:	d06a      	beq.n	8012622 <_dtoa_r+0x822>
 801254c:	4621      	mov	r1, r4
 801254e:	4628      	mov	r0, r5
 8012550:	f000 fc56 	bl	8012e00 <__mcmp>
 8012554:	2800      	cmp	r0, #0
 8012556:	da64      	bge.n	8012622 <_dtoa_r+0x822>
 8012558:	2300      	movs	r3, #0
 801255a:	4629      	mov	r1, r5
 801255c:	220a      	movs	r2, #10
 801255e:	4630      	mov	r0, r6
 8012560:	f000 fa2e 	bl	80129c0 <__multadd>
 8012564:	9b07      	ldr	r3, [sp, #28]
 8012566:	f10b 3bff 	add.w	fp, fp, #4294967295
 801256a:	4605      	mov	r5, r0
 801256c:	2b00      	cmp	r3, #0
 801256e:	f000 8191 	beq.w	8012894 <_dtoa_r+0xa94>
 8012572:	4639      	mov	r1, r7
 8012574:	2300      	movs	r3, #0
 8012576:	220a      	movs	r2, #10
 8012578:	4630      	mov	r0, r6
 801257a:	f000 fa21 	bl	80129c0 <__multadd>
 801257e:	f1ba 0f00 	cmp.w	sl, #0
 8012582:	4607      	mov	r7, r0
 8012584:	f300 808d 	bgt.w	80126a2 <_dtoa_r+0x8a2>
 8012588:	9b06      	ldr	r3, [sp, #24]
 801258a:	2b02      	cmp	r3, #2
 801258c:	dc50      	bgt.n	8012630 <_dtoa_r+0x830>
 801258e:	e088      	b.n	80126a2 <_dtoa_r+0x8a2>
 8012590:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012592:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8012596:	e751      	b.n	801243c <_dtoa_r+0x63c>
 8012598:	f109 34ff 	add.w	r4, r9, #4294967295
 801259c:	42a3      	cmp	r3, r4
 801259e:	bfbf      	itttt	lt
 80125a0:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 80125a2:	1ae3      	sublt	r3, r4, r3
 80125a4:	18d2      	addlt	r2, r2, r3
 80125a6:	9209      	strlt	r2, [sp, #36]	; 0x24
 80125a8:	bfb6      	itet	lt
 80125aa:	4623      	movlt	r3, r4
 80125ac:	1b1c      	subge	r4, r3, r4
 80125ae:	2400      	movlt	r4, #0
 80125b0:	f1b9 0f00 	cmp.w	r9, #0
 80125b4:	bfb5      	itete	lt
 80125b6:	9a04      	ldrlt	r2, [sp, #16]
 80125b8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 80125bc:	eba2 0809 	sublt.w	r8, r2, r9
 80125c0:	464a      	movge	r2, r9
 80125c2:	bfb8      	it	lt
 80125c4:	2200      	movlt	r2, #0
 80125c6:	e73c      	b.n	8012442 <_dtoa_r+0x642>
 80125c8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80125cc:	9f07      	ldr	r7, [sp, #28]
 80125ce:	461c      	mov	r4, r3
 80125d0:	e744      	b.n	801245c <_dtoa_r+0x65c>
 80125d2:	461a      	mov	r2, r3
 80125d4:	e770      	b.n	80124b8 <_dtoa_r+0x6b8>
 80125d6:	9b06      	ldr	r3, [sp, #24]
 80125d8:	2b01      	cmp	r3, #1
 80125da:	dc18      	bgt.n	801260e <_dtoa_r+0x80e>
 80125dc:	9b02      	ldr	r3, [sp, #8]
 80125de:	b9b3      	cbnz	r3, 801260e <_dtoa_r+0x80e>
 80125e0:	9b03      	ldr	r3, [sp, #12]
 80125e2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80125e6:	b9a2      	cbnz	r2, 8012612 <_dtoa_r+0x812>
 80125e8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80125ec:	0d12      	lsrs	r2, r2, #20
 80125ee:	0512      	lsls	r2, r2, #20
 80125f0:	b18a      	cbz	r2, 8012616 <_dtoa_r+0x816>
 80125f2:	9b04      	ldr	r3, [sp, #16]
 80125f4:	3301      	adds	r3, #1
 80125f6:	9304      	str	r3, [sp, #16]
 80125f8:	9b05      	ldr	r3, [sp, #20]
 80125fa:	3301      	adds	r3, #1
 80125fc:	9305      	str	r3, [sp, #20]
 80125fe:	2301      	movs	r3, #1
 8012600:	930a      	str	r3, [sp, #40]	; 0x28
 8012602:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012604:	2b00      	cmp	r3, #0
 8012606:	f47f af70 	bne.w	80124ea <_dtoa_r+0x6ea>
 801260a:	2001      	movs	r0, #1
 801260c:	e775      	b.n	80124fa <_dtoa_r+0x6fa>
 801260e:	2300      	movs	r3, #0
 8012610:	e7f6      	b.n	8012600 <_dtoa_r+0x800>
 8012612:	9b02      	ldr	r3, [sp, #8]
 8012614:	e7f4      	b.n	8012600 <_dtoa_r+0x800>
 8012616:	920a      	str	r2, [sp, #40]	; 0x28
 8012618:	e7f3      	b.n	8012602 <_dtoa_r+0x802>
 801261a:	d082      	beq.n	8012522 <_dtoa_r+0x722>
 801261c:	4610      	mov	r0, r2
 801261e:	301c      	adds	r0, #28
 8012620:	e778      	b.n	8012514 <_dtoa_r+0x714>
 8012622:	f1b9 0f00 	cmp.w	r9, #0
 8012626:	dc37      	bgt.n	8012698 <_dtoa_r+0x898>
 8012628:	9b06      	ldr	r3, [sp, #24]
 801262a:	2b02      	cmp	r3, #2
 801262c:	dd34      	ble.n	8012698 <_dtoa_r+0x898>
 801262e:	46ca      	mov	sl, r9
 8012630:	f1ba 0f00 	cmp.w	sl, #0
 8012634:	d10d      	bne.n	8012652 <_dtoa_r+0x852>
 8012636:	4621      	mov	r1, r4
 8012638:	4653      	mov	r3, sl
 801263a:	2205      	movs	r2, #5
 801263c:	4630      	mov	r0, r6
 801263e:	f000 f9bf 	bl	80129c0 <__multadd>
 8012642:	4601      	mov	r1, r0
 8012644:	4604      	mov	r4, r0
 8012646:	4628      	mov	r0, r5
 8012648:	f000 fbda 	bl	8012e00 <__mcmp>
 801264c:	2800      	cmp	r0, #0
 801264e:	f73f adeb 	bgt.w	8012228 <_dtoa_r+0x428>
 8012652:	9b08      	ldr	r3, [sp, #32]
 8012654:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012658:	ea6f 0b03 	mvn.w	fp, r3
 801265c:	f04f 0900 	mov.w	r9, #0
 8012660:	4621      	mov	r1, r4
 8012662:	4630      	mov	r0, r6
 8012664:	f000 f98a 	bl	801297c <_Bfree>
 8012668:	2f00      	cmp	r7, #0
 801266a:	f43f aea8 	beq.w	80123be <_dtoa_r+0x5be>
 801266e:	f1b9 0f00 	cmp.w	r9, #0
 8012672:	d005      	beq.n	8012680 <_dtoa_r+0x880>
 8012674:	45b9      	cmp	r9, r7
 8012676:	d003      	beq.n	8012680 <_dtoa_r+0x880>
 8012678:	4649      	mov	r1, r9
 801267a:	4630      	mov	r0, r6
 801267c:	f000 f97e 	bl	801297c <_Bfree>
 8012680:	4639      	mov	r1, r7
 8012682:	4630      	mov	r0, r6
 8012684:	f000 f97a 	bl	801297c <_Bfree>
 8012688:	e699      	b.n	80123be <_dtoa_r+0x5be>
 801268a:	2400      	movs	r4, #0
 801268c:	4627      	mov	r7, r4
 801268e:	e7e0      	b.n	8012652 <_dtoa_r+0x852>
 8012690:	46bb      	mov	fp, r7
 8012692:	4604      	mov	r4, r0
 8012694:	4607      	mov	r7, r0
 8012696:	e5c7      	b.n	8012228 <_dtoa_r+0x428>
 8012698:	9b07      	ldr	r3, [sp, #28]
 801269a:	46ca      	mov	sl, r9
 801269c:	2b00      	cmp	r3, #0
 801269e:	f000 8100 	beq.w	80128a2 <_dtoa_r+0xaa2>
 80126a2:	f1b8 0f00 	cmp.w	r8, #0
 80126a6:	dd05      	ble.n	80126b4 <_dtoa_r+0x8b4>
 80126a8:	4639      	mov	r1, r7
 80126aa:	4642      	mov	r2, r8
 80126ac:	4630      	mov	r0, r6
 80126ae:	f000 fb37 	bl	8012d20 <__lshift>
 80126b2:	4607      	mov	r7, r0
 80126b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d05d      	beq.n	8012776 <_dtoa_r+0x976>
 80126ba:	6879      	ldr	r1, [r7, #4]
 80126bc:	4630      	mov	r0, r6
 80126be:	f000 f91d 	bl	80128fc <_Balloc>
 80126c2:	4680      	mov	r8, r0
 80126c4:	b928      	cbnz	r0, 80126d2 <_dtoa_r+0x8d2>
 80126c6:	4b82      	ldr	r3, [pc, #520]	; (80128d0 <_dtoa_r+0xad0>)
 80126c8:	4602      	mov	r2, r0
 80126ca:	f240 21ea 	movw	r1, #746	; 0x2ea
 80126ce:	f7ff bbaf 	b.w	8011e30 <_dtoa_r+0x30>
 80126d2:	693a      	ldr	r2, [r7, #16]
 80126d4:	3202      	adds	r2, #2
 80126d6:	0092      	lsls	r2, r2, #2
 80126d8:	f107 010c 	add.w	r1, r7, #12
 80126dc:	300c      	adds	r0, #12
 80126de:	f7fe fdb7 	bl	8011250 <memcpy>
 80126e2:	2201      	movs	r2, #1
 80126e4:	4641      	mov	r1, r8
 80126e6:	4630      	mov	r0, r6
 80126e8:	f000 fb1a 	bl	8012d20 <__lshift>
 80126ec:	9b01      	ldr	r3, [sp, #4]
 80126ee:	3301      	adds	r3, #1
 80126f0:	9304      	str	r3, [sp, #16]
 80126f2:	9b01      	ldr	r3, [sp, #4]
 80126f4:	4453      	add	r3, sl
 80126f6:	9308      	str	r3, [sp, #32]
 80126f8:	9b02      	ldr	r3, [sp, #8]
 80126fa:	f003 0301 	and.w	r3, r3, #1
 80126fe:	46b9      	mov	r9, r7
 8012700:	9307      	str	r3, [sp, #28]
 8012702:	4607      	mov	r7, r0
 8012704:	9b04      	ldr	r3, [sp, #16]
 8012706:	4621      	mov	r1, r4
 8012708:	3b01      	subs	r3, #1
 801270a:	4628      	mov	r0, r5
 801270c:	9302      	str	r3, [sp, #8]
 801270e:	f7ff fae9 	bl	8011ce4 <quorem>
 8012712:	4603      	mov	r3, r0
 8012714:	3330      	adds	r3, #48	; 0x30
 8012716:	9005      	str	r0, [sp, #20]
 8012718:	4649      	mov	r1, r9
 801271a:	4628      	mov	r0, r5
 801271c:	9309      	str	r3, [sp, #36]	; 0x24
 801271e:	f000 fb6f 	bl	8012e00 <__mcmp>
 8012722:	463a      	mov	r2, r7
 8012724:	4682      	mov	sl, r0
 8012726:	4621      	mov	r1, r4
 8012728:	4630      	mov	r0, r6
 801272a:	f000 fb85 	bl	8012e38 <__mdiff>
 801272e:	68c2      	ldr	r2, [r0, #12]
 8012730:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012732:	4680      	mov	r8, r0
 8012734:	bb0a      	cbnz	r2, 801277a <_dtoa_r+0x97a>
 8012736:	4601      	mov	r1, r0
 8012738:	4628      	mov	r0, r5
 801273a:	f000 fb61 	bl	8012e00 <__mcmp>
 801273e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012740:	4602      	mov	r2, r0
 8012742:	4641      	mov	r1, r8
 8012744:	4630      	mov	r0, r6
 8012746:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 801274a:	f000 f917 	bl	801297c <_Bfree>
 801274e:	9b06      	ldr	r3, [sp, #24]
 8012750:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012752:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8012756:	ea43 0102 	orr.w	r1, r3, r2
 801275a:	9b07      	ldr	r3, [sp, #28]
 801275c:	430b      	orrs	r3, r1
 801275e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012760:	d10d      	bne.n	801277e <_dtoa_r+0x97e>
 8012762:	2b39      	cmp	r3, #57	; 0x39
 8012764:	d029      	beq.n	80127ba <_dtoa_r+0x9ba>
 8012766:	f1ba 0f00 	cmp.w	sl, #0
 801276a:	dd01      	ble.n	8012770 <_dtoa_r+0x970>
 801276c:	9b05      	ldr	r3, [sp, #20]
 801276e:	3331      	adds	r3, #49	; 0x31
 8012770:	9a02      	ldr	r2, [sp, #8]
 8012772:	7013      	strb	r3, [r2, #0]
 8012774:	e774      	b.n	8012660 <_dtoa_r+0x860>
 8012776:	4638      	mov	r0, r7
 8012778:	e7b8      	b.n	80126ec <_dtoa_r+0x8ec>
 801277a:	2201      	movs	r2, #1
 801277c:	e7e1      	b.n	8012742 <_dtoa_r+0x942>
 801277e:	f1ba 0f00 	cmp.w	sl, #0
 8012782:	db06      	blt.n	8012792 <_dtoa_r+0x992>
 8012784:	9906      	ldr	r1, [sp, #24]
 8012786:	ea41 0a0a 	orr.w	sl, r1, sl
 801278a:	9907      	ldr	r1, [sp, #28]
 801278c:	ea5a 0101 	orrs.w	r1, sl, r1
 8012790:	d120      	bne.n	80127d4 <_dtoa_r+0x9d4>
 8012792:	2a00      	cmp	r2, #0
 8012794:	ddec      	ble.n	8012770 <_dtoa_r+0x970>
 8012796:	4629      	mov	r1, r5
 8012798:	2201      	movs	r2, #1
 801279a:	4630      	mov	r0, r6
 801279c:	9304      	str	r3, [sp, #16]
 801279e:	f000 fabf 	bl	8012d20 <__lshift>
 80127a2:	4621      	mov	r1, r4
 80127a4:	4605      	mov	r5, r0
 80127a6:	f000 fb2b 	bl	8012e00 <__mcmp>
 80127aa:	2800      	cmp	r0, #0
 80127ac:	9b04      	ldr	r3, [sp, #16]
 80127ae:	dc02      	bgt.n	80127b6 <_dtoa_r+0x9b6>
 80127b0:	d1de      	bne.n	8012770 <_dtoa_r+0x970>
 80127b2:	07da      	lsls	r2, r3, #31
 80127b4:	d5dc      	bpl.n	8012770 <_dtoa_r+0x970>
 80127b6:	2b39      	cmp	r3, #57	; 0x39
 80127b8:	d1d8      	bne.n	801276c <_dtoa_r+0x96c>
 80127ba:	9a02      	ldr	r2, [sp, #8]
 80127bc:	2339      	movs	r3, #57	; 0x39
 80127be:	7013      	strb	r3, [r2, #0]
 80127c0:	4643      	mov	r3, r8
 80127c2:	4698      	mov	r8, r3
 80127c4:	3b01      	subs	r3, #1
 80127c6:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80127ca:	2a39      	cmp	r2, #57	; 0x39
 80127cc:	d051      	beq.n	8012872 <_dtoa_r+0xa72>
 80127ce:	3201      	adds	r2, #1
 80127d0:	701a      	strb	r2, [r3, #0]
 80127d2:	e745      	b.n	8012660 <_dtoa_r+0x860>
 80127d4:	2a00      	cmp	r2, #0
 80127d6:	dd03      	ble.n	80127e0 <_dtoa_r+0x9e0>
 80127d8:	2b39      	cmp	r3, #57	; 0x39
 80127da:	d0ee      	beq.n	80127ba <_dtoa_r+0x9ba>
 80127dc:	3301      	adds	r3, #1
 80127de:	e7c7      	b.n	8012770 <_dtoa_r+0x970>
 80127e0:	9a04      	ldr	r2, [sp, #16]
 80127e2:	9908      	ldr	r1, [sp, #32]
 80127e4:	f802 3c01 	strb.w	r3, [r2, #-1]
 80127e8:	428a      	cmp	r2, r1
 80127ea:	d02b      	beq.n	8012844 <_dtoa_r+0xa44>
 80127ec:	4629      	mov	r1, r5
 80127ee:	2300      	movs	r3, #0
 80127f0:	220a      	movs	r2, #10
 80127f2:	4630      	mov	r0, r6
 80127f4:	f000 f8e4 	bl	80129c0 <__multadd>
 80127f8:	45b9      	cmp	r9, r7
 80127fa:	4605      	mov	r5, r0
 80127fc:	f04f 0300 	mov.w	r3, #0
 8012800:	f04f 020a 	mov.w	r2, #10
 8012804:	4649      	mov	r1, r9
 8012806:	4630      	mov	r0, r6
 8012808:	d107      	bne.n	801281a <_dtoa_r+0xa1a>
 801280a:	f000 f8d9 	bl	80129c0 <__multadd>
 801280e:	4681      	mov	r9, r0
 8012810:	4607      	mov	r7, r0
 8012812:	9b04      	ldr	r3, [sp, #16]
 8012814:	3301      	adds	r3, #1
 8012816:	9304      	str	r3, [sp, #16]
 8012818:	e774      	b.n	8012704 <_dtoa_r+0x904>
 801281a:	f000 f8d1 	bl	80129c0 <__multadd>
 801281e:	4639      	mov	r1, r7
 8012820:	4681      	mov	r9, r0
 8012822:	2300      	movs	r3, #0
 8012824:	220a      	movs	r2, #10
 8012826:	4630      	mov	r0, r6
 8012828:	f000 f8ca 	bl	80129c0 <__multadd>
 801282c:	4607      	mov	r7, r0
 801282e:	e7f0      	b.n	8012812 <_dtoa_r+0xa12>
 8012830:	f1ba 0f00 	cmp.w	sl, #0
 8012834:	9a01      	ldr	r2, [sp, #4]
 8012836:	bfcc      	ite	gt
 8012838:	46d0      	movgt	r8, sl
 801283a:	f04f 0801 	movle.w	r8, #1
 801283e:	4490      	add	r8, r2
 8012840:	f04f 0900 	mov.w	r9, #0
 8012844:	4629      	mov	r1, r5
 8012846:	2201      	movs	r2, #1
 8012848:	4630      	mov	r0, r6
 801284a:	9302      	str	r3, [sp, #8]
 801284c:	f000 fa68 	bl	8012d20 <__lshift>
 8012850:	4621      	mov	r1, r4
 8012852:	4605      	mov	r5, r0
 8012854:	f000 fad4 	bl	8012e00 <__mcmp>
 8012858:	2800      	cmp	r0, #0
 801285a:	dcb1      	bgt.n	80127c0 <_dtoa_r+0x9c0>
 801285c:	d102      	bne.n	8012864 <_dtoa_r+0xa64>
 801285e:	9b02      	ldr	r3, [sp, #8]
 8012860:	07db      	lsls	r3, r3, #31
 8012862:	d4ad      	bmi.n	80127c0 <_dtoa_r+0x9c0>
 8012864:	4643      	mov	r3, r8
 8012866:	4698      	mov	r8, r3
 8012868:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801286c:	2a30      	cmp	r2, #48	; 0x30
 801286e:	d0fa      	beq.n	8012866 <_dtoa_r+0xa66>
 8012870:	e6f6      	b.n	8012660 <_dtoa_r+0x860>
 8012872:	9a01      	ldr	r2, [sp, #4]
 8012874:	429a      	cmp	r2, r3
 8012876:	d1a4      	bne.n	80127c2 <_dtoa_r+0x9c2>
 8012878:	f10b 0b01 	add.w	fp, fp, #1
 801287c:	2331      	movs	r3, #49	; 0x31
 801287e:	e778      	b.n	8012772 <_dtoa_r+0x972>
 8012880:	4b14      	ldr	r3, [pc, #80]	; (80128d4 <_dtoa_r+0xad4>)
 8012882:	f7ff bb27 	b.w	8011ed4 <_dtoa_r+0xd4>
 8012886:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012888:	2b00      	cmp	r3, #0
 801288a:	f47f ab03 	bne.w	8011e94 <_dtoa_r+0x94>
 801288e:	4b12      	ldr	r3, [pc, #72]	; (80128d8 <_dtoa_r+0xad8>)
 8012890:	f7ff bb20 	b.w	8011ed4 <_dtoa_r+0xd4>
 8012894:	f1ba 0f00 	cmp.w	sl, #0
 8012898:	dc03      	bgt.n	80128a2 <_dtoa_r+0xaa2>
 801289a:	9b06      	ldr	r3, [sp, #24]
 801289c:	2b02      	cmp	r3, #2
 801289e:	f73f aec7 	bgt.w	8012630 <_dtoa_r+0x830>
 80128a2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80128a6:	4621      	mov	r1, r4
 80128a8:	4628      	mov	r0, r5
 80128aa:	f7ff fa1b 	bl	8011ce4 <quorem>
 80128ae:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80128b2:	f808 3b01 	strb.w	r3, [r8], #1
 80128b6:	9a01      	ldr	r2, [sp, #4]
 80128b8:	eba8 0202 	sub.w	r2, r8, r2
 80128bc:	4592      	cmp	sl, r2
 80128be:	ddb7      	ble.n	8012830 <_dtoa_r+0xa30>
 80128c0:	4629      	mov	r1, r5
 80128c2:	2300      	movs	r3, #0
 80128c4:	220a      	movs	r2, #10
 80128c6:	4630      	mov	r0, r6
 80128c8:	f000 f87a 	bl	80129c0 <__multadd>
 80128cc:	4605      	mov	r5, r0
 80128ce:	e7ea      	b.n	80128a6 <_dtoa_r+0xaa6>
 80128d0:	08013d87 	.word	0x08013d87
 80128d4:	08013ce4 	.word	0x08013ce4
 80128d8:	08013d08 	.word	0x08013d08

080128dc <_localeconv_r>:
 80128dc:	4800      	ldr	r0, [pc, #0]	; (80128e0 <_localeconv_r+0x4>)
 80128de:	4770      	bx	lr
 80128e0:	240002d8 	.word	0x240002d8

080128e4 <__malloc_lock>:
 80128e4:	4801      	ldr	r0, [pc, #4]	; (80128ec <__malloc_lock+0x8>)
 80128e6:	f000 bbd4 	b.w	8013092 <__retarget_lock_acquire_recursive>
 80128ea:	bf00      	nop
 80128ec:	2400212c 	.word	0x2400212c

080128f0 <__malloc_unlock>:
 80128f0:	4801      	ldr	r0, [pc, #4]	; (80128f8 <__malloc_unlock+0x8>)
 80128f2:	f000 bbcf 	b.w	8013094 <__retarget_lock_release_recursive>
 80128f6:	bf00      	nop
 80128f8:	2400212c 	.word	0x2400212c

080128fc <_Balloc>:
 80128fc:	b570      	push	{r4, r5, r6, lr}
 80128fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012900:	4604      	mov	r4, r0
 8012902:	460d      	mov	r5, r1
 8012904:	b976      	cbnz	r6, 8012924 <_Balloc+0x28>
 8012906:	2010      	movs	r0, #16
 8012908:	f7fe fc92 	bl	8011230 <malloc>
 801290c:	4602      	mov	r2, r0
 801290e:	6260      	str	r0, [r4, #36]	; 0x24
 8012910:	b920      	cbnz	r0, 801291c <_Balloc+0x20>
 8012912:	4b18      	ldr	r3, [pc, #96]	; (8012974 <_Balloc+0x78>)
 8012914:	4818      	ldr	r0, [pc, #96]	; (8012978 <_Balloc+0x7c>)
 8012916:	2166      	movs	r1, #102	; 0x66
 8012918:	f000 fb8a 	bl	8013030 <__assert_func>
 801291c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012920:	6006      	str	r6, [r0, #0]
 8012922:	60c6      	str	r6, [r0, #12]
 8012924:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012926:	68f3      	ldr	r3, [r6, #12]
 8012928:	b183      	cbz	r3, 801294c <_Balloc+0x50>
 801292a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801292c:	68db      	ldr	r3, [r3, #12]
 801292e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012932:	b9b8      	cbnz	r0, 8012964 <_Balloc+0x68>
 8012934:	2101      	movs	r1, #1
 8012936:	fa01 f605 	lsl.w	r6, r1, r5
 801293a:	1d72      	adds	r2, r6, #5
 801293c:	0092      	lsls	r2, r2, #2
 801293e:	4620      	mov	r0, r4
 8012940:	f000 fb60 	bl	8013004 <_calloc_r>
 8012944:	b160      	cbz	r0, 8012960 <_Balloc+0x64>
 8012946:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801294a:	e00e      	b.n	801296a <_Balloc+0x6e>
 801294c:	2221      	movs	r2, #33	; 0x21
 801294e:	2104      	movs	r1, #4
 8012950:	4620      	mov	r0, r4
 8012952:	f000 fb57 	bl	8013004 <_calloc_r>
 8012956:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012958:	60f0      	str	r0, [r6, #12]
 801295a:	68db      	ldr	r3, [r3, #12]
 801295c:	2b00      	cmp	r3, #0
 801295e:	d1e4      	bne.n	801292a <_Balloc+0x2e>
 8012960:	2000      	movs	r0, #0
 8012962:	bd70      	pop	{r4, r5, r6, pc}
 8012964:	6802      	ldr	r2, [r0, #0]
 8012966:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801296a:	2300      	movs	r3, #0
 801296c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012970:	e7f7      	b.n	8012962 <_Balloc+0x66>
 8012972:	bf00      	nop
 8012974:	08013d15 	.word	0x08013d15
 8012978:	08013d98 	.word	0x08013d98

0801297c <_Bfree>:
 801297c:	b570      	push	{r4, r5, r6, lr}
 801297e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012980:	4605      	mov	r5, r0
 8012982:	460c      	mov	r4, r1
 8012984:	b976      	cbnz	r6, 80129a4 <_Bfree+0x28>
 8012986:	2010      	movs	r0, #16
 8012988:	f7fe fc52 	bl	8011230 <malloc>
 801298c:	4602      	mov	r2, r0
 801298e:	6268      	str	r0, [r5, #36]	; 0x24
 8012990:	b920      	cbnz	r0, 801299c <_Bfree+0x20>
 8012992:	4b09      	ldr	r3, [pc, #36]	; (80129b8 <_Bfree+0x3c>)
 8012994:	4809      	ldr	r0, [pc, #36]	; (80129bc <_Bfree+0x40>)
 8012996:	218a      	movs	r1, #138	; 0x8a
 8012998:	f000 fb4a 	bl	8013030 <__assert_func>
 801299c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80129a0:	6006      	str	r6, [r0, #0]
 80129a2:	60c6      	str	r6, [r0, #12]
 80129a4:	b13c      	cbz	r4, 80129b6 <_Bfree+0x3a>
 80129a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80129a8:	6862      	ldr	r2, [r4, #4]
 80129aa:	68db      	ldr	r3, [r3, #12]
 80129ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80129b0:	6021      	str	r1, [r4, #0]
 80129b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80129b6:	bd70      	pop	{r4, r5, r6, pc}
 80129b8:	08013d15 	.word	0x08013d15
 80129bc:	08013d98 	.word	0x08013d98

080129c0 <__multadd>:
 80129c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129c4:	690d      	ldr	r5, [r1, #16]
 80129c6:	4607      	mov	r7, r0
 80129c8:	460c      	mov	r4, r1
 80129ca:	461e      	mov	r6, r3
 80129cc:	f101 0c14 	add.w	ip, r1, #20
 80129d0:	2000      	movs	r0, #0
 80129d2:	f8dc 3000 	ldr.w	r3, [ip]
 80129d6:	b299      	uxth	r1, r3
 80129d8:	fb02 6101 	mla	r1, r2, r1, r6
 80129dc:	0c1e      	lsrs	r6, r3, #16
 80129de:	0c0b      	lsrs	r3, r1, #16
 80129e0:	fb02 3306 	mla	r3, r2, r6, r3
 80129e4:	b289      	uxth	r1, r1
 80129e6:	3001      	adds	r0, #1
 80129e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80129ec:	4285      	cmp	r5, r0
 80129ee:	f84c 1b04 	str.w	r1, [ip], #4
 80129f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80129f6:	dcec      	bgt.n	80129d2 <__multadd+0x12>
 80129f8:	b30e      	cbz	r6, 8012a3e <__multadd+0x7e>
 80129fa:	68a3      	ldr	r3, [r4, #8]
 80129fc:	42ab      	cmp	r3, r5
 80129fe:	dc19      	bgt.n	8012a34 <__multadd+0x74>
 8012a00:	6861      	ldr	r1, [r4, #4]
 8012a02:	4638      	mov	r0, r7
 8012a04:	3101      	adds	r1, #1
 8012a06:	f7ff ff79 	bl	80128fc <_Balloc>
 8012a0a:	4680      	mov	r8, r0
 8012a0c:	b928      	cbnz	r0, 8012a1a <__multadd+0x5a>
 8012a0e:	4602      	mov	r2, r0
 8012a10:	4b0c      	ldr	r3, [pc, #48]	; (8012a44 <__multadd+0x84>)
 8012a12:	480d      	ldr	r0, [pc, #52]	; (8012a48 <__multadd+0x88>)
 8012a14:	21b5      	movs	r1, #181	; 0xb5
 8012a16:	f000 fb0b 	bl	8013030 <__assert_func>
 8012a1a:	6922      	ldr	r2, [r4, #16]
 8012a1c:	3202      	adds	r2, #2
 8012a1e:	f104 010c 	add.w	r1, r4, #12
 8012a22:	0092      	lsls	r2, r2, #2
 8012a24:	300c      	adds	r0, #12
 8012a26:	f7fe fc13 	bl	8011250 <memcpy>
 8012a2a:	4621      	mov	r1, r4
 8012a2c:	4638      	mov	r0, r7
 8012a2e:	f7ff ffa5 	bl	801297c <_Bfree>
 8012a32:	4644      	mov	r4, r8
 8012a34:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012a38:	3501      	adds	r5, #1
 8012a3a:	615e      	str	r6, [r3, #20]
 8012a3c:	6125      	str	r5, [r4, #16]
 8012a3e:	4620      	mov	r0, r4
 8012a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a44:	08013d87 	.word	0x08013d87
 8012a48:	08013d98 	.word	0x08013d98

08012a4c <__hi0bits>:
 8012a4c:	0c03      	lsrs	r3, r0, #16
 8012a4e:	041b      	lsls	r3, r3, #16
 8012a50:	b9d3      	cbnz	r3, 8012a88 <__hi0bits+0x3c>
 8012a52:	0400      	lsls	r0, r0, #16
 8012a54:	2310      	movs	r3, #16
 8012a56:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012a5a:	bf04      	itt	eq
 8012a5c:	0200      	lsleq	r0, r0, #8
 8012a5e:	3308      	addeq	r3, #8
 8012a60:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012a64:	bf04      	itt	eq
 8012a66:	0100      	lsleq	r0, r0, #4
 8012a68:	3304      	addeq	r3, #4
 8012a6a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012a6e:	bf04      	itt	eq
 8012a70:	0080      	lsleq	r0, r0, #2
 8012a72:	3302      	addeq	r3, #2
 8012a74:	2800      	cmp	r0, #0
 8012a76:	db05      	blt.n	8012a84 <__hi0bits+0x38>
 8012a78:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012a7c:	f103 0301 	add.w	r3, r3, #1
 8012a80:	bf08      	it	eq
 8012a82:	2320      	moveq	r3, #32
 8012a84:	4618      	mov	r0, r3
 8012a86:	4770      	bx	lr
 8012a88:	2300      	movs	r3, #0
 8012a8a:	e7e4      	b.n	8012a56 <__hi0bits+0xa>

08012a8c <__lo0bits>:
 8012a8c:	6803      	ldr	r3, [r0, #0]
 8012a8e:	f013 0207 	ands.w	r2, r3, #7
 8012a92:	4601      	mov	r1, r0
 8012a94:	d00b      	beq.n	8012aae <__lo0bits+0x22>
 8012a96:	07da      	lsls	r2, r3, #31
 8012a98:	d423      	bmi.n	8012ae2 <__lo0bits+0x56>
 8012a9a:	0798      	lsls	r0, r3, #30
 8012a9c:	bf49      	itett	mi
 8012a9e:	085b      	lsrmi	r3, r3, #1
 8012aa0:	089b      	lsrpl	r3, r3, #2
 8012aa2:	2001      	movmi	r0, #1
 8012aa4:	600b      	strmi	r3, [r1, #0]
 8012aa6:	bf5c      	itt	pl
 8012aa8:	600b      	strpl	r3, [r1, #0]
 8012aaa:	2002      	movpl	r0, #2
 8012aac:	4770      	bx	lr
 8012aae:	b298      	uxth	r0, r3
 8012ab0:	b9a8      	cbnz	r0, 8012ade <__lo0bits+0x52>
 8012ab2:	0c1b      	lsrs	r3, r3, #16
 8012ab4:	2010      	movs	r0, #16
 8012ab6:	b2da      	uxtb	r2, r3
 8012ab8:	b90a      	cbnz	r2, 8012abe <__lo0bits+0x32>
 8012aba:	3008      	adds	r0, #8
 8012abc:	0a1b      	lsrs	r3, r3, #8
 8012abe:	071a      	lsls	r2, r3, #28
 8012ac0:	bf04      	itt	eq
 8012ac2:	091b      	lsreq	r3, r3, #4
 8012ac4:	3004      	addeq	r0, #4
 8012ac6:	079a      	lsls	r2, r3, #30
 8012ac8:	bf04      	itt	eq
 8012aca:	089b      	lsreq	r3, r3, #2
 8012acc:	3002      	addeq	r0, #2
 8012ace:	07da      	lsls	r2, r3, #31
 8012ad0:	d403      	bmi.n	8012ada <__lo0bits+0x4e>
 8012ad2:	085b      	lsrs	r3, r3, #1
 8012ad4:	f100 0001 	add.w	r0, r0, #1
 8012ad8:	d005      	beq.n	8012ae6 <__lo0bits+0x5a>
 8012ada:	600b      	str	r3, [r1, #0]
 8012adc:	4770      	bx	lr
 8012ade:	4610      	mov	r0, r2
 8012ae0:	e7e9      	b.n	8012ab6 <__lo0bits+0x2a>
 8012ae2:	2000      	movs	r0, #0
 8012ae4:	4770      	bx	lr
 8012ae6:	2020      	movs	r0, #32
 8012ae8:	4770      	bx	lr
	...

08012aec <__i2b>:
 8012aec:	b510      	push	{r4, lr}
 8012aee:	460c      	mov	r4, r1
 8012af0:	2101      	movs	r1, #1
 8012af2:	f7ff ff03 	bl	80128fc <_Balloc>
 8012af6:	4602      	mov	r2, r0
 8012af8:	b928      	cbnz	r0, 8012b06 <__i2b+0x1a>
 8012afa:	4b05      	ldr	r3, [pc, #20]	; (8012b10 <__i2b+0x24>)
 8012afc:	4805      	ldr	r0, [pc, #20]	; (8012b14 <__i2b+0x28>)
 8012afe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8012b02:	f000 fa95 	bl	8013030 <__assert_func>
 8012b06:	2301      	movs	r3, #1
 8012b08:	6144      	str	r4, [r0, #20]
 8012b0a:	6103      	str	r3, [r0, #16]
 8012b0c:	bd10      	pop	{r4, pc}
 8012b0e:	bf00      	nop
 8012b10:	08013d87 	.word	0x08013d87
 8012b14:	08013d98 	.word	0x08013d98

08012b18 <__multiply>:
 8012b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b1c:	4691      	mov	r9, r2
 8012b1e:	690a      	ldr	r2, [r1, #16]
 8012b20:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012b24:	429a      	cmp	r2, r3
 8012b26:	bfb8      	it	lt
 8012b28:	460b      	movlt	r3, r1
 8012b2a:	460c      	mov	r4, r1
 8012b2c:	bfbc      	itt	lt
 8012b2e:	464c      	movlt	r4, r9
 8012b30:	4699      	movlt	r9, r3
 8012b32:	6927      	ldr	r7, [r4, #16]
 8012b34:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012b38:	68a3      	ldr	r3, [r4, #8]
 8012b3a:	6861      	ldr	r1, [r4, #4]
 8012b3c:	eb07 060a 	add.w	r6, r7, sl
 8012b40:	42b3      	cmp	r3, r6
 8012b42:	b085      	sub	sp, #20
 8012b44:	bfb8      	it	lt
 8012b46:	3101      	addlt	r1, #1
 8012b48:	f7ff fed8 	bl	80128fc <_Balloc>
 8012b4c:	b930      	cbnz	r0, 8012b5c <__multiply+0x44>
 8012b4e:	4602      	mov	r2, r0
 8012b50:	4b44      	ldr	r3, [pc, #272]	; (8012c64 <__multiply+0x14c>)
 8012b52:	4845      	ldr	r0, [pc, #276]	; (8012c68 <__multiply+0x150>)
 8012b54:	f240 115d 	movw	r1, #349	; 0x15d
 8012b58:	f000 fa6a 	bl	8013030 <__assert_func>
 8012b5c:	f100 0514 	add.w	r5, r0, #20
 8012b60:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012b64:	462b      	mov	r3, r5
 8012b66:	2200      	movs	r2, #0
 8012b68:	4543      	cmp	r3, r8
 8012b6a:	d321      	bcc.n	8012bb0 <__multiply+0x98>
 8012b6c:	f104 0314 	add.w	r3, r4, #20
 8012b70:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012b74:	f109 0314 	add.w	r3, r9, #20
 8012b78:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8012b7c:	9202      	str	r2, [sp, #8]
 8012b7e:	1b3a      	subs	r2, r7, r4
 8012b80:	3a15      	subs	r2, #21
 8012b82:	f022 0203 	bic.w	r2, r2, #3
 8012b86:	3204      	adds	r2, #4
 8012b88:	f104 0115 	add.w	r1, r4, #21
 8012b8c:	428f      	cmp	r7, r1
 8012b8e:	bf38      	it	cc
 8012b90:	2204      	movcc	r2, #4
 8012b92:	9201      	str	r2, [sp, #4]
 8012b94:	9a02      	ldr	r2, [sp, #8]
 8012b96:	9303      	str	r3, [sp, #12]
 8012b98:	429a      	cmp	r2, r3
 8012b9a:	d80c      	bhi.n	8012bb6 <__multiply+0x9e>
 8012b9c:	2e00      	cmp	r6, #0
 8012b9e:	dd03      	ble.n	8012ba8 <__multiply+0x90>
 8012ba0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	d05a      	beq.n	8012c5e <__multiply+0x146>
 8012ba8:	6106      	str	r6, [r0, #16]
 8012baa:	b005      	add	sp, #20
 8012bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012bb0:	f843 2b04 	str.w	r2, [r3], #4
 8012bb4:	e7d8      	b.n	8012b68 <__multiply+0x50>
 8012bb6:	f8b3 a000 	ldrh.w	sl, [r3]
 8012bba:	f1ba 0f00 	cmp.w	sl, #0
 8012bbe:	d024      	beq.n	8012c0a <__multiply+0xf2>
 8012bc0:	f104 0e14 	add.w	lr, r4, #20
 8012bc4:	46a9      	mov	r9, r5
 8012bc6:	f04f 0c00 	mov.w	ip, #0
 8012bca:	f85e 2b04 	ldr.w	r2, [lr], #4
 8012bce:	f8d9 1000 	ldr.w	r1, [r9]
 8012bd2:	fa1f fb82 	uxth.w	fp, r2
 8012bd6:	b289      	uxth	r1, r1
 8012bd8:	fb0a 110b 	mla	r1, sl, fp, r1
 8012bdc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8012be0:	f8d9 2000 	ldr.w	r2, [r9]
 8012be4:	4461      	add	r1, ip
 8012be6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012bea:	fb0a c20b 	mla	r2, sl, fp, ip
 8012bee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8012bf2:	b289      	uxth	r1, r1
 8012bf4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012bf8:	4577      	cmp	r7, lr
 8012bfa:	f849 1b04 	str.w	r1, [r9], #4
 8012bfe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012c02:	d8e2      	bhi.n	8012bca <__multiply+0xb2>
 8012c04:	9a01      	ldr	r2, [sp, #4]
 8012c06:	f845 c002 	str.w	ip, [r5, r2]
 8012c0a:	9a03      	ldr	r2, [sp, #12]
 8012c0c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012c10:	3304      	adds	r3, #4
 8012c12:	f1b9 0f00 	cmp.w	r9, #0
 8012c16:	d020      	beq.n	8012c5a <__multiply+0x142>
 8012c18:	6829      	ldr	r1, [r5, #0]
 8012c1a:	f104 0c14 	add.w	ip, r4, #20
 8012c1e:	46ae      	mov	lr, r5
 8012c20:	f04f 0a00 	mov.w	sl, #0
 8012c24:	f8bc b000 	ldrh.w	fp, [ip]
 8012c28:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8012c2c:	fb09 220b 	mla	r2, r9, fp, r2
 8012c30:	4492      	add	sl, r2
 8012c32:	b289      	uxth	r1, r1
 8012c34:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8012c38:	f84e 1b04 	str.w	r1, [lr], #4
 8012c3c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8012c40:	f8be 1000 	ldrh.w	r1, [lr]
 8012c44:	0c12      	lsrs	r2, r2, #16
 8012c46:	fb09 1102 	mla	r1, r9, r2, r1
 8012c4a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8012c4e:	4567      	cmp	r7, ip
 8012c50:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012c54:	d8e6      	bhi.n	8012c24 <__multiply+0x10c>
 8012c56:	9a01      	ldr	r2, [sp, #4]
 8012c58:	50a9      	str	r1, [r5, r2]
 8012c5a:	3504      	adds	r5, #4
 8012c5c:	e79a      	b.n	8012b94 <__multiply+0x7c>
 8012c5e:	3e01      	subs	r6, #1
 8012c60:	e79c      	b.n	8012b9c <__multiply+0x84>
 8012c62:	bf00      	nop
 8012c64:	08013d87 	.word	0x08013d87
 8012c68:	08013d98 	.word	0x08013d98

08012c6c <__pow5mult>:
 8012c6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012c70:	4615      	mov	r5, r2
 8012c72:	f012 0203 	ands.w	r2, r2, #3
 8012c76:	4606      	mov	r6, r0
 8012c78:	460f      	mov	r7, r1
 8012c7a:	d007      	beq.n	8012c8c <__pow5mult+0x20>
 8012c7c:	4c25      	ldr	r4, [pc, #148]	; (8012d14 <__pow5mult+0xa8>)
 8012c7e:	3a01      	subs	r2, #1
 8012c80:	2300      	movs	r3, #0
 8012c82:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012c86:	f7ff fe9b 	bl	80129c0 <__multadd>
 8012c8a:	4607      	mov	r7, r0
 8012c8c:	10ad      	asrs	r5, r5, #2
 8012c8e:	d03d      	beq.n	8012d0c <__pow5mult+0xa0>
 8012c90:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8012c92:	b97c      	cbnz	r4, 8012cb4 <__pow5mult+0x48>
 8012c94:	2010      	movs	r0, #16
 8012c96:	f7fe facb 	bl	8011230 <malloc>
 8012c9a:	4602      	mov	r2, r0
 8012c9c:	6270      	str	r0, [r6, #36]	; 0x24
 8012c9e:	b928      	cbnz	r0, 8012cac <__pow5mult+0x40>
 8012ca0:	4b1d      	ldr	r3, [pc, #116]	; (8012d18 <__pow5mult+0xac>)
 8012ca2:	481e      	ldr	r0, [pc, #120]	; (8012d1c <__pow5mult+0xb0>)
 8012ca4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012ca8:	f000 f9c2 	bl	8013030 <__assert_func>
 8012cac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012cb0:	6004      	str	r4, [r0, #0]
 8012cb2:	60c4      	str	r4, [r0, #12]
 8012cb4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012cb8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012cbc:	b94c      	cbnz	r4, 8012cd2 <__pow5mult+0x66>
 8012cbe:	f240 2171 	movw	r1, #625	; 0x271
 8012cc2:	4630      	mov	r0, r6
 8012cc4:	f7ff ff12 	bl	8012aec <__i2b>
 8012cc8:	2300      	movs	r3, #0
 8012cca:	f8c8 0008 	str.w	r0, [r8, #8]
 8012cce:	4604      	mov	r4, r0
 8012cd0:	6003      	str	r3, [r0, #0]
 8012cd2:	f04f 0900 	mov.w	r9, #0
 8012cd6:	07eb      	lsls	r3, r5, #31
 8012cd8:	d50a      	bpl.n	8012cf0 <__pow5mult+0x84>
 8012cda:	4639      	mov	r1, r7
 8012cdc:	4622      	mov	r2, r4
 8012cde:	4630      	mov	r0, r6
 8012ce0:	f7ff ff1a 	bl	8012b18 <__multiply>
 8012ce4:	4639      	mov	r1, r7
 8012ce6:	4680      	mov	r8, r0
 8012ce8:	4630      	mov	r0, r6
 8012cea:	f7ff fe47 	bl	801297c <_Bfree>
 8012cee:	4647      	mov	r7, r8
 8012cf0:	106d      	asrs	r5, r5, #1
 8012cf2:	d00b      	beq.n	8012d0c <__pow5mult+0xa0>
 8012cf4:	6820      	ldr	r0, [r4, #0]
 8012cf6:	b938      	cbnz	r0, 8012d08 <__pow5mult+0x9c>
 8012cf8:	4622      	mov	r2, r4
 8012cfa:	4621      	mov	r1, r4
 8012cfc:	4630      	mov	r0, r6
 8012cfe:	f7ff ff0b 	bl	8012b18 <__multiply>
 8012d02:	6020      	str	r0, [r4, #0]
 8012d04:	f8c0 9000 	str.w	r9, [r0]
 8012d08:	4604      	mov	r4, r0
 8012d0a:	e7e4      	b.n	8012cd6 <__pow5mult+0x6a>
 8012d0c:	4638      	mov	r0, r7
 8012d0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012d12:	bf00      	nop
 8012d14:	08013ee8 	.word	0x08013ee8
 8012d18:	08013d15 	.word	0x08013d15
 8012d1c:	08013d98 	.word	0x08013d98

08012d20 <__lshift>:
 8012d20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012d24:	460c      	mov	r4, r1
 8012d26:	6849      	ldr	r1, [r1, #4]
 8012d28:	6923      	ldr	r3, [r4, #16]
 8012d2a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012d2e:	68a3      	ldr	r3, [r4, #8]
 8012d30:	4607      	mov	r7, r0
 8012d32:	4691      	mov	r9, r2
 8012d34:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012d38:	f108 0601 	add.w	r6, r8, #1
 8012d3c:	42b3      	cmp	r3, r6
 8012d3e:	db0b      	blt.n	8012d58 <__lshift+0x38>
 8012d40:	4638      	mov	r0, r7
 8012d42:	f7ff fddb 	bl	80128fc <_Balloc>
 8012d46:	4605      	mov	r5, r0
 8012d48:	b948      	cbnz	r0, 8012d5e <__lshift+0x3e>
 8012d4a:	4602      	mov	r2, r0
 8012d4c:	4b2a      	ldr	r3, [pc, #168]	; (8012df8 <__lshift+0xd8>)
 8012d4e:	482b      	ldr	r0, [pc, #172]	; (8012dfc <__lshift+0xdc>)
 8012d50:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012d54:	f000 f96c 	bl	8013030 <__assert_func>
 8012d58:	3101      	adds	r1, #1
 8012d5a:	005b      	lsls	r3, r3, #1
 8012d5c:	e7ee      	b.n	8012d3c <__lshift+0x1c>
 8012d5e:	2300      	movs	r3, #0
 8012d60:	f100 0114 	add.w	r1, r0, #20
 8012d64:	f100 0210 	add.w	r2, r0, #16
 8012d68:	4618      	mov	r0, r3
 8012d6a:	4553      	cmp	r3, sl
 8012d6c:	db37      	blt.n	8012dde <__lshift+0xbe>
 8012d6e:	6920      	ldr	r0, [r4, #16]
 8012d70:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012d74:	f104 0314 	add.w	r3, r4, #20
 8012d78:	f019 091f 	ands.w	r9, r9, #31
 8012d7c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012d80:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8012d84:	d02f      	beq.n	8012de6 <__lshift+0xc6>
 8012d86:	f1c9 0e20 	rsb	lr, r9, #32
 8012d8a:	468a      	mov	sl, r1
 8012d8c:	f04f 0c00 	mov.w	ip, #0
 8012d90:	681a      	ldr	r2, [r3, #0]
 8012d92:	fa02 f209 	lsl.w	r2, r2, r9
 8012d96:	ea42 020c 	orr.w	r2, r2, ip
 8012d9a:	f84a 2b04 	str.w	r2, [sl], #4
 8012d9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012da2:	4298      	cmp	r0, r3
 8012da4:	fa22 fc0e 	lsr.w	ip, r2, lr
 8012da8:	d8f2      	bhi.n	8012d90 <__lshift+0x70>
 8012daa:	1b03      	subs	r3, r0, r4
 8012dac:	3b15      	subs	r3, #21
 8012dae:	f023 0303 	bic.w	r3, r3, #3
 8012db2:	3304      	adds	r3, #4
 8012db4:	f104 0215 	add.w	r2, r4, #21
 8012db8:	4290      	cmp	r0, r2
 8012dba:	bf38      	it	cc
 8012dbc:	2304      	movcc	r3, #4
 8012dbe:	f841 c003 	str.w	ip, [r1, r3]
 8012dc2:	f1bc 0f00 	cmp.w	ip, #0
 8012dc6:	d001      	beq.n	8012dcc <__lshift+0xac>
 8012dc8:	f108 0602 	add.w	r6, r8, #2
 8012dcc:	3e01      	subs	r6, #1
 8012dce:	4638      	mov	r0, r7
 8012dd0:	612e      	str	r6, [r5, #16]
 8012dd2:	4621      	mov	r1, r4
 8012dd4:	f7ff fdd2 	bl	801297c <_Bfree>
 8012dd8:	4628      	mov	r0, r5
 8012dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012dde:	f842 0f04 	str.w	r0, [r2, #4]!
 8012de2:	3301      	adds	r3, #1
 8012de4:	e7c1      	b.n	8012d6a <__lshift+0x4a>
 8012de6:	3904      	subs	r1, #4
 8012de8:	f853 2b04 	ldr.w	r2, [r3], #4
 8012dec:	f841 2f04 	str.w	r2, [r1, #4]!
 8012df0:	4298      	cmp	r0, r3
 8012df2:	d8f9      	bhi.n	8012de8 <__lshift+0xc8>
 8012df4:	e7ea      	b.n	8012dcc <__lshift+0xac>
 8012df6:	bf00      	nop
 8012df8:	08013d87 	.word	0x08013d87
 8012dfc:	08013d98 	.word	0x08013d98

08012e00 <__mcmp>:
 8012e00:	b530      	push	{r4, r5, lr}
 8012e02:	6902      	ldr	r2, [r0, #16]
 8012e04:	690c      	ldr	r4, [r1, #16]
 8012e06:	1b12      	subs	r2, r2, r4
 8012e08:	d10e      	bne.n	8012e28 <__mcmp+0x28>
 8012e0a:	f100 0314 	add.w	r3, r0, #20
 8012e0e:	3114      	adds	r1, #20
 8012e10:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012e14:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012e18:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012e1c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012e20:	42a5      	cmp	r5, r4
 8012e22:	d003      	beq.n	8012e2c <__mcmp+0x2c>
 8012e24:	d305      	bcc.n	8012e32 <__mcmp+0x32>
 8012e26:	2201      	movs	r2, #1
 8012e28:	4610      	mov	r0, r2
 8012e2a:	bd30      	pop	{r4, r5, pc}
 8012e2c:	4283      	cmp	r3, r0
 8012e2e:	d3f3      	bcc.n	8012e18 <__mcmp+0x18>
 8012e30:	e7fa      	b.n	8012e28 <__mcmp+0x28>
 8012e32:	f04f 32ff 	mov.w	r2, #4294967295
 8012e36:	e7f7      	b.n	8012e28 <__mcmp+0x28>

08012e38 <__mdiff>:
 8012e38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e3c:	460c      	mov	r4, r1
 8012e3e:	4606      	mov	r6, r0
 8012e40:	4611      	mov	r1, r2
 8012e42:	4620      	mov	r0, r4
 8012e44:	4690      	mov	r8, r2
 8012e46:	f7ff ffdb 	bl	8012e00 <__mcmp>
 8012e4a:	1e05      	subs	r5, r0, #0
 8012e4c:	d110      	bne.n	8012e70 <__mdiff+0x38>
 8012e4e:	4629      	mov	r1, r5
 8012e50:	4630      	mov	r0, r6
 8012e52:	f7ff fd53 	bl	80128fc <_Balloc>
 8012e56:	b930      	cbnz	r0, 8012e66 <__mdiff+0x2e>
 8012e58:	4b3a      	ldr	r3, [pc, #232]	; (8012f44 <__mdiff+0x10c>)
 8012e5a:	4602      	mov	r2, r0
 8012e5c:	f240 2132 	movw	r1, #562	; 0x232
 8012e60:	4839      	ldr	r0, [pc, #228]	; (8012f48 <__mdiff+0x110>)
 8012e62:	f000 f8e5 	bl	8013030 <__assert_func>
 8012e66:	2301      	movs	r3, #1
 8012e68:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012e6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e70:	bfa4      	itt	ge
 8012e72:	4643      	movge	r3, r8
 8012e74:	46a0      	movge	r8, r4
 8012e76:	4630      	mov	r0, r6
 8012e78:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012e7c:	bfa6      	itte	ge
 8012e7e:	461c      	movge	r4, r3
 8012e80:	2500      	movge	r5, #0
 8012e82:	2501      	movlt	r5, #1
 8012e84:	f7ff fd3a 	bl	80128fc <_Balloc>
 8012e88:	b920      	cbnz	r0, 8012e94 <__mdiff+0x5c>
 8012e8a:	4b2e      	ldr	r3, [pc, #184]	; (8012f44 <__mdiff+0x10c>)
 8012e8c:	4602      	mov	r2, r0
 8012e8e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8012e92:	e7e5      	b.n	8012e60 <__mdiff+0x28>
 8012e94:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8012e98:	6926      	ldr	r6, [r4, #16]
 8012e9a:	60c5      	str	r5, [r0, #12]
 8012e9c:	f104 0914 	add.w	r9, r4, #20
 8012ea0:	f108 0514 	add.w	r5, r8, #20
 8012ea4:	f100 0e14 	add.w	lr, r0, #20
 8012ea8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8012eac:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8012eb0:	f108 0210 	add.w	r2, r8, #16
 8012eb4:	46f2      	mov	sl, lr
 8012eb6:	2100      	movs	r1, #0
 8012eb8:	f859 3b04 	ldr.w	r3, [r9], #4
 8012ebc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012ec0:	fa1f f883 	uxth.w	r8, r3
 8012ec4:	fa11 f18b 	uxtah	r1, r1, fp
 8012ec8:	0c1b      	lsrs	r3, r3, #16
 8012eca:	eba1 0808 	sub.w	r8, r1, r8
 8012ece:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012ed2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012ed6:	fa1f f888 	uxth.w	r8, r8
 8012eda:	1419      	asrs	r1, r3, #16
 8012edc:	454e      	cmp	r6, r9
 8012ede:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012ee2:	f84a 3b04 	str.w	r3, [sl], #4
 8012ee6:	d8e7      	bhi.n	8012eb8 <__mdiff+0x80>
 8012ee8:	1b33      	subs	r3, r6, r4
 8012eea:	3b15      	subs	r3, #21
 8012eec:	f023 0303 	bic.w	r3, r3, #3
 8012ef0:	3304      	adds	r3, #4
 8012ef2:	3415      	adds	r4, #21
 8012ef4:	42a6      	cmp	r6, r4
 8012ef6:	bf38      	it	cc
 8012ef8:	2304      	movcc	r3, #4
 8012efa:	441d      	add	r5, r3
 8012efc:	4473      	add	r3, lr
 8012efe:	469e      	mov	lr, r3
 8012f00:	462e      	mov	r6, r5
 8012f02:	4566      	cmp	r6, ip
 8012f04:	d30e      	bcc.n	8012f24 <__mdiff+0xec>
 8012f06:	f10c 0203 	add.w	r2, ip, #3
 8012f0a:	1b52      	subs	r2, r2, r5
 8012f0c:	f022 0203 	bic.w	r2, r2, #3
 8012f10:	3d03      	subs	r5, #3
 8012f12:	45ac      	cmp	ip, r5
 8012f14:	bf38      	it	cc
 8012f16:	2200      	movcc	r2, #0
 8012f18:	441a      	add	r2, r3
 8012f1a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8012f1e:	b17b      	cbz	r3, 8012f40 <__mdiff+0x108>
 8012f20:	6107      	str	r7, [r0, #16]
 8012f22:	e7a3      	b.n	8012e6c <__mdiff+0x34>
 8012f24:	f856 8b04 	ldr.w	r8, [r6], #4
 8012f28:	fa11 f288 	uxtah	r2, r1, r8
 8012f2c:	1414      	asrs	r4, r2, #16
 8012f2e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8012f32:	b292      	uxth	r2, r2
 8012f34:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8012f38:	f84e 2b04 	str.w	r2, [lr], #4
 8012f3c:	1421      	asrs	r1, r4, #16
 8012f3e:	e7e0      	b.n	8012f02 <__mdiff+0xca>
 8012f40:	3f01      	subs	r7, #1
 8012f42:	e7ea      	b.n	8012f1a <__mdiff+0xe2>
 8012f44:	08013d87 	.word	0x08013d87
 8012f48:	08013d98 	.word	0x08013d98

08012f4c <__d2b>:
 8012f4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012f50:	4689      	mov	r9, r1
 8012f52:	2101      	movs	r1, #1
 8012f54:	ec57 6b10 	vmov	r6, r7, d0
 8012f58:	4690      	mov	r8, r2
 8012f5a:	f7ff fccf 	bl	80128fc <_Balloc>
 8012f5e:	4604      	mov	r4, r0
 8012f60:	b930      	cbnz	r0, 8012f70 <__d2b+0x24>
 8012f62:	4602      	mov	r2, r0
 8012f64:	4b25      	ldr	r3, [pc, #148]	; (8012ffc <__d2b+0xb0>)
 8012f66:	4826      	ldr	r0, [pc, #152]	; (8013000 <__d2b+0xb4>)
 8012f68:	f240 310a 	movw	r1, #778	; 0x30a
 8012f6c:	f000 f860 	bl	8013030 <__assert_func>
 8012f70:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8012f74:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012f78:	bb35      	cbnz	r5, 8012fc8 <__d2b+0x7c>
 8012f7a:	2e00      	cmp	r6, #0
 8012f7c:	9301      	str	r3, [sp, #4]
 8012f7e:	d028      	beq.n	8012fd2 <__d2b+0x86>
 8012f80:	4668      	mov	r0, sp
 8012f82:	9600      	str	r6, [sp, #0]
 8012f84:	f7ff fd82 	bl	8012a8c <__lo0bits>
 8012f88:	9900      	ldr	r1, [sp, #0]
 8012f8a:	b300      	cbz	r0, 8012fce <__d2b+0x82>
 8012f8c:	9a01      	ldr	r2, [sp, #4]
 8012f8e:	f1c0 0320 	rsb	r3, r0, #32
 8012f92:	fa02 f303 	lsl.w	r3, r2, r3
 8012f96:	430b      	orrs	r3, r1
 8012f98:	40c2      	lsrs	r2, r0
 8012f9a:	6163      	str	r3, [r4, #20]
 8012f9c:	9201      	str	r2, [sp, #4]
 8012f9e:	9b01      	ldr	r3, [sp, #4]
 8012fa0:	61a3      	str	r3, [r4, #24]
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	bf14      	ite	ne
 8012fa6:	2202      	movne	r2, #2
 8012fa8:	2201      	moveq	r2, #1
 8012faa:	6122      	str	r2, [r4, #16]
 8012fac:	b1d5      	cbz	r5, 8012fe4 <__d2b+0x98>
 8012fae:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012fb2:	4405      	add	r5, r0
 8012fb4:	f8c9 5000 	str.w	r5, [r9]
 8012fb8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012fbc:	f8c8 0000 	str.w	r0, [r8]
 8012fc0:	4620      	mov	r0, r4
 8012fc2:	b003      	add	sp, #12
 8012fc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012fc8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012fcc:	e7d5      	b.n	8012f7a <__d2b+0x2e>
 8012fce:	6161      	str	r1, [r4, #20]
 8012fd0:	e7e5      	b.n	8012f9e <__d2b+0x52>
 8012fd2:	a801      	add	r0, sp, #4
 8012fd4:	f7ff fd5a 	bl	8012a8c <__lo0bits>
 8012fd8:	9b01      	ldr	r3, [sp, #4]
 8012fda:	6163      	str	r3, [r4, #20]
 8012fdc:	2201      	movs	r2, #1
 8012fde:	6122      	str	r2, [r4, #16]
 8012fe0:	3020      	adds	r0, #32
 8012fe2:	e7e3      	b.n	8012fac <__d2b+0x60>
 8012fe4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012fe8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012fec:	f8c9 0000 	str.w	r0, [r9]
 8012ff0:	6918      	ldr	r0, [r3, #16]
 8012ff2:	f7ff fd2b 	bl	8012a4c <__hi0bits>
 8012ff6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012ffa:	e7df      	b.n	8012fbc <__d2b+0x70>
 8012ffc:	08013d87 	.word	0x08013d87
 8013000:	08013d98 	.word	0x08013d98

08013004 <_calloc_r>:
 8013004:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013006:	fba1 2402 	umull	r2, r4, r1, r2
 801300a:	b94c      	cbnz	r4, 8013020 <_calloc_r+0x1c>
 801300c:	4611      	mov	r1, r2
 801300e:	9201      	str	r2, [sp, #4]
 8013010:	f7fe f9a0 	bl	8011354 <_malloc_r>
 8013014:	9a01      	ldr	r2, [sp, #4]
 8013016:	4605      	mov	r5, r0
 8013018:	b930      	cbnz	r0, 8013028 <_calloc_r+0x24>
 801301a:	4628      	mov	r0, r5
 801301c:	b003      	add	sp, #12
 801301e:	bd30      	pop	{r4, r5, pc}
 8013020:	220c      	movs	r2, #12
 8013022:	6002      	str	r2, [r0, #0]
 8013024:	2500      	movs	r5, #0
 8013026:	e7f8      	b.n	801301a <_calloc_r+0x16>
 8013028:	4621      	mov	r1, r4
 801302a:	f7fe f91f 	bl	801126c <memset>
 801302e:	e7f4      	b.n	801301a <_calloc_r+0x16>

08013030 <__assert_func>:
 8013030:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013032:	4614      	mov	r4, r2
 8013034:	461a      	mov	r2, r3
 8013036:	4b09      	ldr	r3, [pc, #36]	; (801305c <__assert_func+0x2c>)
 8013038:	681b      	ldr	r3, [r3, #0]
 801303a:	4605      	mov	r5, r0
 801303c:	68d8      	ldr	r0, [r3, #12]
 801303e:	b14c      	cbz	r4, 8013054 <__assert_func+0x24>
 8013040:	4b07      	ldr	r3, [pc, #28]	; (8013060 <__assert_func+0x30>)
 8013042:	9100      	str	r1, [sp, #0]
 8013044:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013048:	4906      	ldr	r1, [pc, #24]	; (8013064 <__assert_func+0x34>)
 801304a:	462b      	mov	r3, r5
 801304c:	f000 f80e 	bl	801306c <fiprintf>
 8013050:	f000 fa5a 	bl	8013508 <abort>
 8013054:	4b04      	ldr	r3, [pc, #16]	; (8013068 <__assert_func+0x38>)
 8013056:	461c      	mov	r4, r3
 8013058:	e7f3      	b.n	8013042 <__assert_func+0x12>
 801305a:	bf00      	nop
 801305c:	24000184 	.word	0x24000184
 8013060:	08013ef4 	.word	0x08013ef4
 8013064:	08013f01 	.word	0x08013f01
 8013068:	08013f2f 	.word	0x08013f2f

0801306c <fiprintf>:
 801306c:	b40e      	push	{r1, r2, r3}
 801306e:	b503      	push	{r0, r1, lr}
 8013070:	4601      	mov	r1, r0
 8013072:	ab03      	add	r3, sp, #12
 8013074:	4805      	ldr	r0, [pc, #20]	; (801308c <fiprintf+0x20>)
 8013076:	f853 2b04 	ldr.w	r2, [r3], #4
 801307a:	6800      	ldr	r0, [r0, #0]
 801307c:	9301      	str	r3, [sp, #4]
 801307e:	f000 f845 	bl	801310c <_vfiprintf_r>
 8013082:	b002      	add	sp, #8
 8013084:	f85d eb04 	ldr.w	lr, [sp], #4
 8013088:	b003      	add	sp, #12
 801308a:	4770      	bx	lr
 801308c:	24000184 	.word	0x24000184

08013090 <__retarget_lock_init_recursive>:
 8013090:	4770      	bx	lr

08013092 <__retarget_lock_acquire_recursive>:
 8013092:	4770      	bx	lr

08013094 <__retarget_lock_release_recursive>:
 8013094:	4770      	bx	lr

08013096 <__ascii_mbtowc>:
 8013096:	b082      	sub	sp, #8
 8013098:	b901      	cbnz	r1, 801309c <__ascii_mbtowc+0x6>
 801309a:	a901      	add	r1, sp, #4
 801309c:	b142      	cbz	r2, 80130b0 <__ascii_mbtowc+0x1a>
 801309e:	b14b      	cbz	r3, 80130b4 <__ascii_mbtowc+0x1e>
 80130a0:	7813      	ldrb	r3, [r2, #0]
 80130a2:	600b      	str	r3, [r1, #0]
 80130a4:	7812      	ldrb	r2, [r2, #0]
 80130a6:	1e10      	subs	r0, r2, #0
 80130a8:	bf18      	it	ne
 80130aa:	2001      	movne	r0, #1
 80130ac:	b002      	add	sp, #8
 80130ae:	4770      	bx	lr
 80130b0:	4610      	mov	r0, r2
 80130b2:	e7fb      	b.n	80130ac <__ascii_mbtowc+0x16>
 80130b4:	f06f 0001 	mvn.w	r0, #1
 80130b8:	e7f8      	b.n	80130ac <__ascii_mbtowc+0x16>

080130ba <__sfputc_r>:
 80130ba:	6893      	ldr	r3, [r2, #8]
 80130bc:	3b01      	subs	r3, #1
 80130be:	2b00      	cmp	r3, #0
 80130c0:	b410      	push	{r4}
 80130c2:	6093      	str	r3, [r2, #8]
 80130c4:	da08      	bge.n	80130d8 <__sfputc_r+0x1e>
 80130c6:	6994      	ldr	r4, [r2, #24]
 80130c8:	42a3      	cmp	r3, r4
 80130ca:	db01      	blt.n	80130d0 <__sfputc_r+0x16>
 80130cc:	290a      	cmp	r1, #10
 80130ce:	d103      	bne.n	80130d8 <__sfputc_r+0x1e>
 80130d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80130d4:	f000 b94a 	b.w	801336c <__swbuf_r>
 80130d8:	6813      	ldr	r3, [r2, #0]
 80130da:	1c58      	adds	r0, r3, #1
 80130dc:	6010      	str	r0, [r2, #0]
 80130de:	7019      	strb	r1, [r3, #0]
 80130e0:	4608      	mov	r0, r1
 80130e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80130e6:	4770      	bx	lr

080130e8 <__sfputs_r>:
 80130e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130ea:	4606      	mov	r6, r0
 80130ec:	460f      	mov	r7, r1
 80130ee:	4614      	mov	r4, r2
 80130f0:	18d5      	adds	r5, r2, r3
 80130f2:	42ac      	cmp	r4, r5
 80130f4:	d101      	bne.n	80130fa <__sfputs_r+0x12>
 80130f6:	2000      	movs	r0, #0
 80130f8:	e007      	b.n	801310a <__sfputs_r+0x22>
 80130fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80130fe:	463a      	mov	r2, r7
 8013100:	4630      	mov	r0, r6
 8013102:	f7ff ffda 	bl	80130ba <__sfputc_r>
 8013106:	1c43      	adds	r3, r0, #1
 8013108:	d1f3      	bne.n	80130f2 <__sfputs_r+0xa>
 801310a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801310c <_vfiprintf_r>:
 801310c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013110:	460d      	mov	r5, r1
 8013112:	b09d      	sub	sp, #116	; 0x74
 8013114:	4614      	mov	r4, r2
 8013116:	4698      	mov	r8, r3
 8013118:	4606      	mov	r6, r0
 801311a:	b118      	cbz	r0, 8013124 <_vfiprintf_r+0x18>
 801311c:	6983      	ldr	r3, [r0, #24]
 801311e:	b90b      	cbnz	r3, 8013124 <_vfiprintf_r+0x18>
 8013120:	f000 fb14 	bl	801374c <__sinit>
 8013124:	4b89      	ldr	r3, [pc, #548]	; (801334c <_vfiprintf_r+0x240>)
 8013126:	429d      	cmp	r5, r3
 8013128:	d11b      	bne.n	8013162 <_vfiprintf_r+0x56>
 801312a:	6875      	ldr	r5, [r6, #4]
 801312c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801312e:	07d9      	lsls	r1, r3, #31
 8013130:	d405      	bmi.n	801313e <_vfiprintf_r+0x32>
 8013132:	89ab      	ldrh	r3, [r5, #12]
 8013134:	059a      	lsls	r2, r3, #22
 8013136:	d402      	bmi.n	801313e <_vfiprintf_r+0x32>
 8013138:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801313a:	f7ff ffaa 	bl	8013092 <__retarget_lock_acquire_recursive>
 801313e:	89ab      	ldrh	r3, [r5, #12]
 8013140:	071b      	lsls	r3, r3, #28
 8013142:	d501      	bpl.n	8013148 <_vfiprintf_r+0x3c>
 8013144:	692b      	ldr	r3, [r5, #16]
 8013146:	b9eb      	cbnz	r3, 8013184 <_vfiprintf_r+0x78>
 8013148:	4629      	mov	r1, r5
 801314a:	4630      	mov	r0, r6
 801314c:	f000 f96e 	bl	801342c <__swsetup_r>
 8013150:	b1c0      	cbz	r0, 8013184 <_vfiprintf_r+0x78>
 8013152:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013154:	07dc      	lsls	r4, r3, #31
 8013156:	d50e      	bpl.n	8013176 <_vfiprintf_r+0x6a>
 8013158:	f04f 30ff 	mov.w	r0, #4294967295
 801315c:	b01d      	add	sp, #116	; 0x74
 801315e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013162:	4b7b      	ldr	r3, [pc, #492]	; (8013350 <_vfiprintf_r+0x244>)
 8013164:	429d      	cmp	r5, r3
 8013166:	d101      	bne.n	801316c <_vfiprintf_r+0x60>
 8013168:	68b5      	ldr	r5, [r6, #8]
 801316a:	e7df      	b.n	801312c <_vfiprintf_r+0x20>
 801316c:	4b79      	ldr	r3, [pc, #484]	; (8013354 <_vfiprintf_r+0x248>)
 801316e:	429d      	cmp	r5, r3
 8013170:	bf08      	it	eq
 8013172:	68f5      	ldreq	r5, [r6, #12]
 8013174:	e7da      	b.n	801312c <_vfiprintf_r+0x20>
 8013176:	89ab      	ldrh	r3, [r5, #12]
 8013178:	0598      	lsls	r0, r3, #22
 801317a:	d4ed      	bmi.n	8013158 <_vfiprintf_r+0x4c>
 801317c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801317e:	f7ff ff89 	bl	8013094 <__retarget_lock_release_recursive>
 8013182:	e7e9      	b.n	8013158 <_vfiprintf_r+0x4c>
 8013184:	2300      	movs	r3, #0
 8013186:	9309      	str	r3, [sp, #36]	; 0x24
 8013188:	2320      	movs	r3, #32
 801318a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801318e:	f8cd 800c 	str.w	r8, [sp, #12]
 8013192:	2330      	movs	r3, #48	; 0x30
 8013194:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013358 <_vfiprintf_r+0x24c>
 8013198:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801319c:	f04f 0901 	mov.w	r9, #1
 80131a0:	4623      	mov	r3, r4
 80131a2:	469a      	mov	sl, r3
 80131a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80131a8:	b10a      	cbz	r2, 80131ae <_vfiprintf_r+0xa2>
 80131aa:	2a25      	cmp	r2, #37	; 0x25
 80131ac:	d1f9      	bne.n	80131a2 <_vfiprintf_r+0x96>
 80131ae:	ebba 0b04 	subs.w	fp, sl, r4
 80131b2:	d00b      	beq.n	80131cc <_vfiprintf_r+0xc0>
 80131b4:	465b      	mov	r3, fp
 80131b6:	4622      	mov	r2, r4
 80131b8:	4629      	mov	r1, r5
 80131ba:	4630      	mov	r0, r6
 80131bc:	f7ff ff94 	bl	80130e8 <__sfputs_r>
 80131c0:	3001      	adds	r0, #1
 80131c2:	f000 80aa 	beq.w	801331a <_vfiprintf_r+0x20e>
 80131c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80131c8:	445a      	add	r2, fp
 80131ca:	9209      	str	r2, [sp, #36]	; 0x24
 80131cc:	f89a 3000 	ldrb.w	r3, [sl]
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	f000 80a2 	beq.w	801331a <_vfiprintf_r+0x20e>
 80131d6:	2300      	movs	r3, #0
 80131d8:	f04f 32ff 	mov.w	r2, #4294967295
 80131dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80131e0:	f10a 0a01 	add.w	sl, sl, #1
 80131e4:	9304      	str	r3, [sp, #16]
 80131e6:	9307      	str	r3, [sp, #28]
 80131e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80131ec:	931a      	str	r3, [sp, #104]	; 0x68
 80131ee:	4654      	mov	r4, sl
 80131f0:	2205      	movs	r2, #5
 80131f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80131f6:	4858      	ldr	r0, [pc, #352]	; (8013358 <_vfiprintf_r+0x24c>)
 80131f8:	f7ed f87a 	bl	80002f0 <memchr>
 80131fc:	9a04      	ldr	r2, [sp, #16]
 80131fe:	b9d8      	cbnz	r0, 8013238 <_vfiprintf_r+0x12c>
 8013200:	06d1      	lsls	r1, r2, #27
 8013202:	bf44      	itt	mi
 8013204:	2320      	movmi	r3, #32
 8013206:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801320a:	0713      	lsls	r3, r2, #28
 801320c:	bf44      	itt	mi
 801320e:	232b      	movmi	r3, #43	; 0x2b
 8013210:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013214:	f89a 3000 	ldrb.w	r3, [sl]
 8013218:	2b2a      	cmp	r3, #42	; 0x2a
 801321a:	d015      	beq.n	8013248 <_vfiprintf_r+0x13c>
 801321c:	9a07      	ldr	r2, [sp, #28]
 801321e:	4654      	mov	r4, sl
 8013220:	2000      	movs	r0, #0
 8013222:	f04f 0c0a 	mov.w	ip, #10
 8013226:	4621      	mov	r1, r4
 8013228:	f811 3b01 	ldrb.w	r3, [r1], #1
 801322c:	3b30      	subs	r3, #48	; 0x30
 801322e:	2b09      	cmp	r3, #9
 8013230:	d94e      	bls.n	80132d0 <_vfiprintf_r+0x1c4>
 8013232:	b1b0      	cbz	r0, 8013262 <_vfiprintf_r+0x156>
 8013234:	9207      	str	r2, [sp, #28]
 8013236:	e014      	b.n	8013262 <_vfiprintf_r+0x156>
 8013238:	eba0 0308 	sub.w	r3, r0, r8
 801323c:	fa09 f303 	lsl.w	r3, r9, r3
 8013240:	4313      	orrs	r3, r2
 8013242:	9304      	str	r3, [sp, #16]
 8013244:	46a2      	mov	sl, r4
 8013246:	e7d2      	b.n	80131ee <_vfiprintf_r+0xe2>
 8013248:	9b03      	ldr	r3, [sp, #12]
 801324a:	1d19      	adds	r1, r3, #4
 801324c:	681b      	ldr	r3, [r3, #0]
 801324e:	9103      	str	r1, [sp, #12]
 8013250:	2b00      	cmp	r3, #0
 8013252:	bfbb      	ittet	lt
 8013254:	425b      	neglt	r3, r3
 8013256:	f042 0202 	orrlt.w	r2, r2, #2
 801325a:	9307      	strge	r3, [sp, #28]
 801325c:	9307      	strlt	r3, [sp, #28]
 801325e:	bfb8      	it	lt
 8013260:	9204      	strlt	r2, [sp, #16]
 8013262:	7823      	ldrb	r3, [r4, #0]
 8013264:	2b2e      	cmp	r3, #46	; 0x2e
 8013266:	d10c      	bne.n	8013282 <_vfiprintf_r+0x176>
 8013268:	7863      	ldrb	r3, [r4, #1]
 801326a:	2b2a      	cmp	r3, #42	; 0x2a
 801326c:	d135      	bne.n	80132da <_vfiprintf_r+0x1ce>
 801326e:	9b03      	ldr	r3, [sp, #12]
 8013270:	1d1a      	adds	r2, r3, #4
 8013272:	681b      	ldr	r3, [r3, #0]
 8013274:	9203      	str	r2, [sp, #12]
 8013276:	2b00      	cmp	r3, #0
 8013278:	bfb8      	it	lt
 801327a:	f04f 33ff 	movlt.w	r3, #4294967295
 801327e:	3402      	adds	r4, #2
 8013280:	9305      	str	r3, [sp, #20]
 8013282:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013368 <_vfiprintf_r+0x25c>
 8013286:	7821      	ldrb	r1, [r4, #0]
 8013288:	2203      	movs	r2, #3
 801328a:	4650      	mov	r0, sl
 801328c:	f7ed f830 	bl	80002f0 <memchr>
 8013290:	b140      	cbz	r0, 80132a4 <_vfiprintf_r+0x198>
 8013292:	2340      	movs	r3, #64	; 0x40
 8013294:	eba0 000a 	sub.w	r0, r0, sl
 8013298:	fa03 f000 	lsl.w	r0, r3, r0
 801329c:	9b04      	ldr	r3, [sp, #16]
 801329e:	4303      	orrs	r3, r0
 80132a0:	3401      	adds	r4, #1
 80132a2:	9304      	str	r3, [sp, #16]
 80132a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80132a8:	482c      	ldr	r0, [pc, #176]	; (801335c <_vfiprintf_r+0x250>)
 80132aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80132ae:	2206      	movs	r2, #6
 80132b0:	f7ed f81e 	bl	80002f0 <memchr>
 80132b4:	2800      	cmp	r0, #0
 80132b6:	d03f      	beq.n	8013338 <_vfiprintf_r+0x22c>
 80132b8:	4b29      	ldr	r3, [pc, #164]	; (8013360 <_vfiprintf_r+0x254>)
 80132ba:	bb1b      	cbnz	r3, 8013304 <_vfiprintf_r+0x1f8>
 80132bc:	9b03      	ldr	r3, [sp, #12]
 80132be:	3307      	adds	r3, #7
 80132c0:	f023 0307 	bic.w	r3, r3, #7
 80132c4:	3308      	adds	r3, #8
 80132c6:	9303      	str	r3, [sp, #12]
 80132c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80132ca:	443b      	add	r3, r7
 80132cc:	9309      	str	r3, [sp, #36]	; 0x24
 80132ce:	e767      	b.n	80131a0 <_vfiprintf_r+0x94>
 80132d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80132d4:	460c      	mov	r4, r1
 80132d6:	2001      	movs	r0, #1
 80132d8:	e7a5      	b.n	8013226 <_vfiprintf_r+0x11a>
 80132da:	2300      	movs	r3, #0
 80132dc:	3401      	adds	r4, #1
 80132de:	9305      	str	r3, [sp, #20]
 80132e0:	4619      	mov	r1, r3
 80132e2:	f04f 0c0a 	mov.w	ip, #10
 80132e6:	4620      	mov	r0, r4
 80132e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80132ec:	3a30      	subs	r2, #48	; 0x30
 80132ee:	2a09      	cmp	r2, #9
 80132f0:	d903      	bls.n	80132fa <_vfiprintf_r+0x1ee>
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	d0c5      	beq.n	8013282 <_vfiprintf_r+0x176>
 80132f6:	9105      	str	r1, [sp, #20]
 80132f8:	e7c3      	b.n	8013282 <_vfiprintf_r+0x176>
 80132fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80132fe:	4604      	mov	r4, r0
 8013300:	2301      	movs	r3, #1
 8013302:	e7f0      	b.n	80132e6 <_vfiprintf_r+0x1da>
 8013304:	ab03      	add	r3, sp, #12
 8013306:	9300      	str	r3, [sp, #0]
 8013308:	462a      	mov	r2, r5
 801330a:	4b16      	ldr	r3, [pc, #88]	; (8013364 <_vfiprintf_r+0x258>)
 801330c:	a904      	add	r1, sp, #16
 801330e:	4630      	mov	r0, r6
 8013310:	f7fe f926 	bl	8011560 <_printf_float>
 8013314:	4607      	mov	r7, r0
 8013316:	1c78      	adds	r0, r7, #1
 8013318:	d1d6      	bne.n	80132c8 <_vfiprintf_r+0x1bc>
 801331a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801331c:	07d9      	lsls	r1, r3, #31
 801331e:	d405      	bmi.n	801332c <_vfiprintf_r+0x220>
 8013320:	89ab      	ldrh	r3, [r5, #12]
 8013322:	059a      	lsls	r2, r3, #22
 8013324:	d402      	bmi.n	801332c <_vfiprintf_r+0x220>
 8013326:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013328:	f7ff feb4 	bl	8013094 <__retarget_lock_release_recursive>
 801332c:	89ab      	ldrh	r3, [r5, #12]
 801332e:	065b      	lsls	r3, r3, #25
 8013330:	f53f af12 	bmi.w	8013158 <_vfiprintf_r+0x4c>
 8013334:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013336:	e711      	b.n	801315c <_vfiprintf_r+0x50>
 8013338:	ab03      	add	r3, sp, #12
 801333a:	9300      	str	r3, [sp, #0]
 801333c:	462a      	mov	r2, r5
 801333e:	4b09      	ldr	r3, [pc, #36]	; (8013364 <_vfiprintf_r+0x258>)
 8013340:	a904      	add	r1, sp, #16
 8013342:	4630      	mov	r0, r6
 8013344:	f7fe fb98 	bl	8011a78 <_printf_i>
 8013348:	e7e4      	b.n	8013314 <_vfiprintf_r+0x208>
 801334a:	bf00      	nop
 801334c:	0801406c 	.word	0x0801406c
 8013350:	0801408c 	.word	0x0801408c
 8013354:	0801404c 	.word	0x0801404c
 8013358:	08013f3a 	.word	0x08013f3a
 801335c:	08013f44 	.word	0x08013f44
 8013360:	08011561 	.word	0x08011561
 8013364:	080130e9 	.word	0x080130e9
 8013368:	08013f40 	.word	0x08013f40

0801336c <__swbuf_r>:
 801336c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801336e:	460e      	mov	r6, r1
 8013370:	4614      	mov	r4, r2
 8013372:	4605      	mov	r5, r0
 8013374:	b118      	cbz	r0, 801337e <__swbuf_r+0x12>
 8013376:	6983      	ldr	r3, [r0, #24]
 8013378:	b90b      	cbnz	r3, 801337e <__swbuf_r+0x12>
 801337a:	f000 f9e7 	bl	801374c <__sinit>
 801337e:	4b21      	ldr	r3, [pc, #132]	; (8013404 <__swbuf_r+0x98>)
 8013380:	429c      	cmp	r4, r3
 8013382:	d12b      	bne.n	80133dc <__swbuf_r+0x70>
 8013384:	686c      	ldr	r4, [r5, #4]
 8013386:	69a3      	ldr	r3, [r4, #24]
 8013388:	60a3      	str	r3, [r4, #8]
 801338a:	89a3      	ldrh	r3, [r4, #12]
 801338c:	071a      	lsls	r2, r3, #28
 801338e:	d52f      	bpl.n	80133f0 <__swbuf_r+0x84>
 8013390:	6923      	ldr	r3, [r4, #16]
 8013392:	b36b      	cbz	r3, 80133f0 <__swbuf_r+0x84>
 8013394:	6923      	ldr	r3, [r4, #16]
 8013396:	6820      	ldr	r0, [r4, #0]
 8013398:	1ac0      	subs	r0, r0, r3
 801339a:	6963      	ldr	r3, [r4, #20]
 801339c:	b2f6      	uxtb	r6, r6
 801339e:	4283      	cmp	r3, r0
 80133a0:	4637      	mov	r7, r6
 80133a2:	dc04      	bgt.n	80133ae <__swbuf_r+0x42>
 80133a4:	4621      	mov	r1, r4
 80133a6:	4628      	mov	r0, r5
 80133a8:	f000 f93c 	bl	8013624 <_fflush_r>
 80133ac:	bb30      	cbnz	r0, 80133fc <__swbuf_r+0x90>
 80133ae:	68a3      	ldr	r3, [r4, #8]
 80133b0:	3b01      	subs	r3, #1
 80133b2:	60a3      	str	r3, [r4, #8]
 80133b4:	6823      	ldr	r3, [r4, #0]
 80133b6:	1c5a      	adds	r2, r3, #1
 80133b8:	6022      	str	r2, [r4, #0]
 80133ba:	701e      	strb	r6, [r3, #0]
 80133bc:	6963      	ldr	r3, [r4, #20]
 80133be:	3001      	adds	r0, #1
 80133c0:	4283      	cmp	r3, r0
 80133c2:	d004      	beq.n	80133ce <__swbuf_r+0x62>
 80133c4:	89a3      	ldrh	r3, [r4, #12]
 80133c6:	07db      	lsls	r3, r3, #31
 80133c8:	d506      	bpl.n	80133d8 <__swbuf_r+0x6c>
 80133ca:	2e0a      	cmp	r6, #10
 80133cc:	d104      	bne.n	80133d8 <__swbuf_r+0x6c>
 80133ce:	4621      	mov	r1, r4
 80133d0:	4628      	mov	r0, r5
 80133d2:	f000 f927 	bl	8013624 <_fflush_r>
 80133d6:	b988      	cbnz	r0, 80133fc <__swbuf_r+0x90>
 80133d8:	4638      	mov	r0, r7
 80133da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80133dc:	4b0a      	ldr	r3, [pc, #40]	; (8013408 <__swbuf_r+0x9c>)
 80133de:	429c      	cmp	r4, r3
 80133e0:	d101      	bne.n	80133e6 <__swbuf_r+0x7a>
 80133e2:	68ac      	ldr	r4, [r5, #8]
 80133e4:	e7cf      	b.n	8013386 <__swbuf_r+0x1a>
 80133e6:	4b09      	ldr	r3, [pc, #36]	; (801340c <__swbuf_r+0xa0>)
 80133e8:	429c      	cmp	r4, r3
 80133ea:	bf08      	it	eq
 80133ec:	68ec      	ldreq	r4, [r5, #12]
 80133ee:	e7ca      	b.n	8013386 <__swbuf_r+0x1a>
 80133f0:	4621      	mov	r1, r4
 80133f2:	4628      	mov	r0, r5
 80133f4:	f000 f81a 	bl	801342c <__swsetup_r>
 80133f8:	2800      	cmp	r0, #0
 80133fa:	d0cb      	beq.n	8013394 <__swbuf_r+0x28>
 80133fc:	f04f 37ff 	mov.w	r7, #4294967295
 8013400:	e7ea      	b.n	80133d8 <__swbuf_r+0x6c>
 8013402:	bf00      	nop
 8013404:	0801406c 	.word	0x0801406c
 8013408:	0801408c 	.word	0x0801408c
 801340c:	0801404c 	.word	0x0801404c

08013410 <__ascii_wctomb>:
 8013410:	b149      	cbz	r1, 8013426 <__ascii_wctomb+0x16>
 8013412:	2aff      	cmp	r2, #255	; 0xff
 8013414:	bf85      	ittet	hi
 8013416:	238a      	movhi	r3, #138	; 0x8a
 8013418:	6003      	strhi	r3, [r0, #0]
 801341a:	700a      	strbls	r2, [r1, #0]
 801341c:	f04f 30ff 	movhi.w	r0, #4294967295
 8013420:	bf98      	it	ls
 8013422:	2001      	movls	r0, #1
 8013424:	4770      	bx	lr
 8013426:	4608      	mov	r0, r1
 8013428:	4770      	bx	lr
	...

0801342c <__swsetup_r>:
 801342c:	4b32      	ldr	r3, [pc, #200]	; (80134f8 <__swsetup_r+0xcc>)
 801342e:	b570      	push	{r4, r5, r6, lr}
 8013430:	681d      	ldr	r5, [r3, #0]
 8013432:	4606      	mov	r6, r0
 8013434:	460c      	mov	r4, r1
 8013436:	b125      	cbz	r5, 8013442 <__swsetup_r+0x16>
 8013438:	69ab      	ldr	r3, [r5, #24]
 801343a:	b913      	cbnz	r3, 8013442 <__swsetup_r+0x16>
 801343c:	4628      	mov	r0, r5
 801343e:	f000 f985 	bl	801374c <__sinit>
 8013442:	4b2e      	ldr	r3, [pc, #184]	; (80134fc <__swsetup_r+0xd0>)
 8013444:	429c      	cmp	r4, r3
 8013446:	d10f      	bne.n	8013468 <__swsetup_r+0x3c>
 8013448:	686c      	ldr	r4, [r5, #4]
 801344a:	89a3      	ldrh	r3, [r4, #12]
 801344c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013450:	0719      	lsls	r1, r3, #28
 8013452:	d42c      	bmi.n	80134ae <__swsetup_r+0x82>
 8013454:	06dd      	lsls	r5, r3, #27
 8013456:	d411      	bmi.n	801347c <__swsetup_r+0x50>
 8013458:	2309      	movs	r3, #9
 801345a:	6033      	str	r3, [r6, #0]
 801345c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013460:	81a3      	strh	r3, [r4, #12]
 8013462:	f04f 30ff 	mov.w	r0, #4294967295
 8013466:	e03e      	b.n	80134e6 <__swsetup_r+0xba>
 8013468:	4b25      	ldr	r3, [pc, #148]	; (8013500 <__swsetup_r+0xd4>)
 801346a:	429c      	cmp	r4, r3
 801346c:	d101      	bne.n	8013472 <__swsetup_r+0x46>
 801346e:	68ac      	ldr	r4, [r5, #8]
 8013470:	e7eb      	b.n	801344a <__swsetup_r+0x1e>
 8013472:	4b24      	ldr	r3, [pc, #144]	; (8013504 <__swsetup_r+0xd8>)
 8013474:	429c      	cmp	r4, r3
 8013476:	bf08      	it	eq
 8013478:	68ec      	ldreq	r4, [r5, #12]
 801347a:	e7e6      	b.n	801344a <__swsetup_r+0x1e>
 801347c:	0758      	lsls	r0, r3, #29
 801347e:	d512      	bpl.n	80134a6 <__swsetup_r+0x7a>
 8013480:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013482:	b141      	cbz	r1, 8013496 <__swsetup_r+0x6a>
 8013484:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013488:	4299      	cmp	r1, r3
 801348a:	d002      	beq.n	8013492 <__swsetup_r+0x66>
 801348c:	4630      	mov	r0, r6
 801348e:	f7fd fef5 	bl	801127c <_free_r>
 8013492:	2300      	movs	r3, #0
 8013494:	6363      	str	r3, [r4, #52]	; 0x34
 8013496:	89a3      	ldrh	r3, [r4, #12]
 8013498:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801349c:	81a3      	strh	r3, [r4, #12]
 801349e:	2300      	movs	r3, #0
 80134a0:	6063      	str	r3, [r4, #4]
 80134a2:	6923      	ldr	r3, [r4, #16]
 80134a4:	6023      	str	r3, [r4, #0]
 80134a6:	89a3      	ldrh	r3, [r4, #12]
 80134a8:	f043 0308 	orr.w	r3, r3, #8
 80134ac:	81a3      	strh	r3, [r4, #12]
 80134ae:	6923      	ldr	r3, [r4, #16]
 80134b0:	b94b      	cbnz	r3, 80134c6 <__swsetup_r+0x9a>
 80134b2:	89a3      	ldrh	r3, [r4, #12]
 80134b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80134b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80134bc:	d003      	beq.n	80134c6 <__swsetup_r+0x9a>
 80134be:	4621      	mov	r1, r4
 80134c0:	4630      	mov	r0, r6
 80134c2:	f000 fa05 	bl	80138d0 <__smakebuf_r>
 80134c6:	89a0      	ldrh	r0, [r4, #12]
 80134c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80134cc:	f010 0301 	ands.w	r3, r0, #1
 80134d0:	d00a      	beq.n	80134e8 <__swsetup_r+0xbc>
 80134d2:	2300      	movs	r3, #0
 80134d4:	60a3      	str	r3, [r4, #8]
 80134d6:	6963      	ldr	r3, [r4, #20]
 80134d8:	425b      	negs	r3, r3
 80134da:	61a3      	str	r3, [r4, #24]
 80134dc:	6923      	ldr	r3, [r4, #16]
 80134de:	b943      	cbnz	r3, 80134f2 <__swsetup_r+0xc6>
 80134e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80134e4:	d1ba      	bne.n	801345c <__swsetup_r+0x30>
 80134e6:	bd70      	pop	{r4, r5, r6, pc}
 80134e8:	0781      	lsls	r1, r0, #30
 80134ea:	bf58      	it	pl
 80134ec:	6963      	ldrpl	r3, [r4, #20]
 80134ee:	60a3      	str	r3, [r4, #8]
 80134f0:	e7f4      	b.n	80134dc <__swsetup_r+0xb0>
 80134f2:	2000      	movs	r0, #0
 80134f4:	e7f7      	b.n	80134e6 <__swsetup_r+0xba>
 80134f6:	bf00      	nop
 80134f8:	24000184 	.word	0x24000184
 80134fc:	0801406c 	.word	0x0801406c
 8013500:	0801408c 	.word	0x0801408c
 8013504:	0801404c 	.word	0x0801404c

08013508 <abort>:
 8013508:	b508      	push	{r3, lr}
 801350a:	2006      	movs	r0, #6
 801350c:	f000 fa48 	bl	80139a0 <raise>
 8013510:	2001      	movs	r0, #1
 8013512:	f7ee f9e3 	bl	80018dc <_exit>
	...

08013518 <__sflush_r>:
 8013518:	898a      	ldrh	r2, [r1, #12]
 801351a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801351e:	4605      	mov	r5, r0
 8013520:	0710      	lsls	r0, r2, #28
 8013522:	460c      	mov	r4, r1
 8013524:	d458      	bmi.n	80135d8 <__sflush_r+0xc0>
 8013526:	684b      	ldr	r3, [r1, #4]
 8013528:	2b00      	cmp	r3, #0
 801352a:	dc05      	bgt.n	8013538 <__sflush_r+0x20>
 801352c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801352e:	2b00      	cmp	r3, #0
 8013530:	dc02      	bgt.n	8013538 <__sflush_r+0x20>
 8013532:	2000      	movs	r0, #0
 8013534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013538:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801353a:	2e00      	cmp	r6, #0
 801353c:	d0f9      	beq.n	8013532 <__sflush_r+0x1a>
 801353e:	2300      	movs	r3, #0
 8013540:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013544:	682f      	ldr	r7, [r5, #0]
 8013546:	602b      	str	r3, [r5, #0]
 8013548:	d032      	beq.n	80135b0 <__sflush_r+0x98>
 801354a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801354c:	89a3      	ldrh	r3, [r4, #12]
 801354e:	075a      	lsls	r2, r3, #29
 8013550:	d505      	bpl.n	801355e <__sflush_r+0x46>
 8013552:	6863      	ldr	r3, [r4, #4]
 8013554:	1ac0      	subs	r0, r0, r3
 8013556:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013558:	b10b      	cbz	r3, 801355e <__sflush_r+0x46>
 801355a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801355c:	1ac0      	subs	r0, r0, r3
 801355e:	2300      	movs	r3, #0
 8013560:	4602      	mov	r2, r0
 8013562:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013564:	6a21      	ldr	r1, [r4, #32]
 8013566:	4628      	mov	r0, r5
 8013568:	47b0      	blx	r6
 801356a:	1c43      	adds	r3, r0, #1
 801356c:	89a3      	ldrh	r3, [r4, #12]
 801356e:	d106      	bne.n	801357e <__sflush_r+0x66>
 8013570:	6829      	ldr	r1, [r5, #0]
 8013572:	291d      	cmp	r1, #29
 8013574:	d82c      	bhi.n	80135d0 <__sflush_r+0xb8>
 8013576:	4a2a      	ldr	r2, [pc, #168]	; (8013620 <__sflush_r+0x108>)
 8013578:	40ca      	lsrs	r2, r1
 801357a:	07d6      	lsls	r6, r2, #31
 801357c:	d528      	bpl.n	80135d0 <__sflush_r+0xb8>
 801357e:	2200      	movs	r2, #0
 8013580:	6062      	str	r2, [r4, #4]
 8013582:	04d9      	lsls	r1, r3, #19
 8013584:	6922      	ldr	r2, [r4, #16]
 8013586:	6022      	str	r2, [r4, #0]
 8013588:	d504      	bpl.n	8013594 <__sflush_r+0x7c>
 801358a:	1c42      	adds	r2, r0, #1
 801358c:	d101      	bne.n	8013592 <__sflush_r+0x7a>
 801358e:	682b      	ldr	r3, [r5, #0]
 8013590:	b903      	cbnz	r3, 8013594 <__sflush_r+0x7c>
 8013592:	6560      	str	r0, [r4, #84]	; 0x54
 8013594:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013596:	602f      	str	r7, [r5, #0]
 8013598:	2900      	cmp	r1, #0
 801359a:	d0ca      	beq.n	8013532 <__sflush_r+0x1a>
 801359c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80135a0:	4299      	cmp	r1, r3
 80135a2:	d002      	beq.n	80135aa <__sflush_r+0x92>
 80135a4:	4628      	mov	r0, r5
 80135a6:	f7fd fe69 	bl	801127c <_free_r>
 80135aa:	2000      	movs	r0, #0
 80135ac:	6360      	str	r0, [r4, #52]	; 0x34
 80135ae:	e7c1      	b.n	8013534 <__sflush_r+0x1c>
 80135b0:	6a21      	ldr	r1, [r4, #32]
 80135b2:	2301      	movs	r3, #1
 80135b4:	4628      	mov	r0, r5
 80135b6:	47b0      	blx	r6
 80135b8:	1c41      	adds	r1, r0, #1
 80135ba:	d1c7      	bne.n	801354c <__sflush_r+0x34>
 80135bc:	682b      	ldr	r3, [r5, #0]
 80135be:	2b00      	cmp	r3, #0
 80135c0:	d0c4      	beq.n	801354c <__sflush_r+0x34>
 80135c2:	2b1d      	cmp	r3, #29
 80135c4:	d001      	beq.n	80135ca <__sflush_r+0xb2>
 80135c6:	2b16      	cmp	r3, #22
 80135c8:	d101      	bne.n	80135ce <__sflush_r+0xb6>
 80135ca:	602f      	str	r7, [r5, #0]
 80135cc:	e7b1      	b.n	8013532 <__sflush_r+0x1a>
 80135ce:	89a3      	ldrh	r3, [r4, #12]
 80135d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80135d4:	81a3      	strh	r3, [r4, #12]
 80135d6:	e7ad      	b.n	8013534 <__sflush_r+0x1c>
 80135d8:	690f      	ldr	r7, [r1, #16]
 80135da:	2f00      	cmp	r7, #0
 80135dc:	d0a9      	beq.n	8013532 <__sflush_r+0x1a>
 80135de:	0793      	lsls	r3, r2, #30
 80135e0:	680e      	ldr	r6, [r1, #0]
 80135e2:	bf08      	it	eq
 80135e4:	694b      	ldreq	r3, [r1, #20]
 80135e6:	600f      	str	r7, [r1, #0]
 80135e8:	bf18      	it	ne
 80135ea:	2300      	movne	r3, #0
 80135ec:	eba6 0807 	sub.w	r8, r6, r7
 80135f0:	608b      	str	r3, [r1, #8]
 80135f2:	f1b8 0f00 	cmp.w	r8, #0
 80135f6:	dd9c      	ble.n	8013532 <__sflush_r+0x1a>
 80135f8:	6a21      	ldr	r1, [r4, #32]
 80135fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80135fc:	4643      	mov	r3, r8
 80135fe:	463a      	mov	r2, r7
 8013600:	4628      	mov	r0, r5
 8013602:	47b0      	blx	r6
 8013604:	2800      	cmp	r0, #0
 8013606:	dc06      	bgt.n	8013616 <__sflush_r+0xfe>
 8013608:	89a3      	ldrh	r3, [r4, #12]
 801360a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801360e:	81a3      	strh	r3, [r4, #12]
 8013610:	f04f 30ff 	mov.w	r0, #4294967295
 8013614:	e78e      	b.n	8013534 <__sflush_r+0x1c>
 8013616:	4407      	add	r7, r0
 8013618:	eba8 0800 	sub.w	r8, r8, r0
 801361c:	e7e9      	b.n	80135f2 <__sflush_r+0xda>
 801361e:	bf00      	nop
 8013620:	20400001 	.word	0x20400001

08013624 <_fflush_r>:
 8013624:	b538      	push	{r3, r4, r5, lr}
 8013626:	690b      	ldr	r3, [r1, #16]
 8013628:	4605      	mov	r5, r0
 801362a:	460c      	mov	r4, r1
 801362c:	b913      	cbnz	r3, 8013634 <_fflush_r+0x10>
 801362e:	2500      	movs	r5, #0
 8013630:	4628      	mov	r0, r5
 8013632:	bd38      	pop	{r3, r4, r5, pc}
 8013634:	b118      	cbz	r0, 801363e <_fflush_r+0x1a>
 8013636:	6983      	ldr	r3, [r0, #24]
 8013638:	b90b      	cbnz	r3, 801363e <_fflush_r+0x1a>
 801363a:	f000 f887 	bl	801374c <__sinit>
 801363e:	4b14      	ldr	r3, [pc, #80]	; (8013690 <_fflush_r+0x6c>)
 8013640:	429c      	cmp	r4, r3
 8013642:	d11b      	bne.n	801367c <_fflush_r+0x58>
 8013644:	686c      	ldr	r4, [r5, #4]
 8013646:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801364a:	2b00      	cmp	r3, #0
 801364c:	d0ef      	beq.n	801362e <_fflush_r+0xa>
 801364e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013650:	07d0      	lsls	r0, r2, #31
 8013652:	d404      	bmi.n	801365e <_fflush_r+0x3a>
 8013654:	0599      	lsls	r1, r3, #22
 8013656:	d402      	bmi.n	801365e <_fflush_r+0x3a>
 8013658:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801365a:	f7ff fd1a 	bl	8013092 <__retarget_lock_acquire_recursive>
 801365e:	4628      	mov	r0, r5
 8013660:	4621      	mov	r1, r4
 8013662:	f7ff ff59 	bl	8013518 <__sflush_r>
 8013666:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013668:	07da      	lsls	r2, r3, #31
 801366a:	4605      	mov	r5, r0
 801366c:	d4e0      	bmi.n	8013630 <_fflush_r+0xc>
 801366e:	89a3      	ldrh	r3, [r4, #12]
 8013670:	059b      	lsls	r3, r3, #22
 8013672:	d4dd      	bmi.n	8013630 <_fflush_r+0xc>
 8013674:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013676:	f7ff fd0d 	bl	8013094 <__retarget_lock_release_recursive>
 801367a:	e7d9      	b.n	8013630 <_fflush_r+0xc>
 801367c:	4b05      	ldr	r3, [pc, #20]	; (8013694 <_fflush_r+0x70>)
 801367e:	429c      	cmp	r4, r3
 8013680:	d101      	bne.n	8013686 <_fflush_r+0x62>
 8013682:	68ac      	ldr	r4, [r5, #8]
 8013684:	e7df      	b.n	8013646 <_fflush_r+0x22>
 8013686:	4b04      	ldr	r3, [pc, #16]	; (8013698 <_fflush_r+0x74>)
 8013688:	429c      	cmp	r4, r3
 801368a:	bf08      	it	eq
 801368c:	68ec      	ldreq	r4, [r5, #12]
 801368e:	e7da      	b.n	8013646 <_fflush_r+0x22>
 8013690:	0801406c 	.word	0x0801406c
 8013694:	0801408c 	.word	0x0801408c
 8013698:	0801404c 	.word	0x0801404c

0801369c <std>:
 801369c:	2300      	movs	r3, #0
 801369e:	b510      	push	{r4, lr}
 80136a0:	4604      	mov	r4, r0
 80136a2:	e9c0 3300 	strd	r3, r3, [r0]
 80136a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80136aa:	6083      	str	r3, [r0, #8]
 80136ac:	8181      	strh	r1, [r0, #12]
 80136ae:	6643      	str	r3, [r0, #100]	; 0x64
 80136b0:	81c2      	strh	r2, [r0, #14]
 80136b2:	6183      	str	r3, [r0, #24]
 80136b4:	4619      	mov	r1, r3
 80136b6:	2208      	movs	r2, #8
 80136b8:	305c      	adds	r0, #92	; 0x5c
 80136ba:	f7fd fdd7 	bl	801126c <memset>
 80136be:	4b05      	ldr	r3, [pc, #20]	; (80136d4 <std+0x38>)
 80136c0:	6263      	str	r3, [r4, #36]	; 0x24
 80136c2:	4b05      	ldr	r3, [pc, #20]	; (80136d8 <std+0x3c>)
 80136c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80136c6:	4b05      	ldr	r3, [pc, #20]	; (80136dc <std+0x40>)
 80136c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80136ca:	4b05      	ldr	r3, [pc, #20]	; (80136e0 <std+0x44>)
 80136cc:	6224      	str	r4, [r4, #32]
 80136ce:	6323      	str	r3, [r4, #48]	; 0x30
 80136d0:	bd10      	pop	{r4, pc}
 80136d2:	bf00      	nop
 80136d4:	080139d9 	.word	0x080139d9
 80136d8:	080139fb 	.word	0x080139fb
 80136dc:	08013a33 	.word	0x08013a33
 80136e0:	08013a57 	.word	0x08013a57

080136e4 <_cleanup_r>:
 80136e4:	4901      	ldr	r1, [pc, #4]	; (80136ec <_cleanup_r+0x8>)
 80136e6:	f000 b8af 	b.w	8013848 <_fwalk_reent>
 80136ea:	bf00      	nop
 80136ec:	08013625 	.word	0x08013625

080136f0 <__sfmoreglue>:
 80136f0:	b570      	push	{r4, r5, r6, lr}
 80136f2:	2268      	movs	r2, #104	; 0x68
 80136f4:	1e4d      	subs	r5, r1, #1
 80136f6:	4355      	muls	r5, r2
 80136f8:	460e      	mov	r6, r1
 80136fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80136fe:	f7fd fe29 	bl	8011354 <_malloc_r>
 8013702:	4604      	mov	r4, r0
 8013704:	b140      	cbz	r0, 8013718 <__sfmoreglue+0x28>
 8013706:	2100      	movs	r1, #0
 8013708:	e9c0 1600 	strd	r1, r6, [r0]
 801370c:	300c      	adds	r0, #12
 801370e:	60a0      	str	r0, [r4, #8]
 8013710:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013714:	f7fd fdaa 	bl	801126c <memset>
 8013718:	4620      	mov	r0, r4
 801371a:	bd70      	pop	{r4, r5, r6, pc}

0801371c <__sfp_lock_acquire>:
 801371c:	4801      	ldr	r0, [pc, #4]	; (8013724 <__sfp_lock_acquire+0x8>)
 801371e:	f7ff bcb8 	b.w	8013092 <__retarget_lock_acquire_recursive>
 8013722:	bf00      	nop
 8013724:	2400212d 	.word	0x2400212d

08013728 <__sfp_lock_release>:
 8013728:	4801      	ldr	r0, [pc, #4]	; (8013730 <__sfp_lock_release+0x8>)
 801372a:	f7ff bcb3 	b.w	8013094 <__retarget_lock_release_recursive>
 801372e:	bf00      	nop
 8013730:	2400212d 	.word	0x2400212d

08013734 <__sinit_lock_acquire>:
 8013734:	4801      	ldr	r0, [pc, #4]	; (801373c <__sinit_lock_acquire+0x8>)
 8013736:	f7ff bcac 	b.w	8013092 <__retarget_lock_acquire_recursive>
 801373a:	bf00      	nop
 801373c:	2400212e 	.word	0x2400212e

08013740 <__sinit_lock_release>:
 8013740:	4801      	ldr	r0, [pc, #4]	; (8013748 <__sinit_lock_release+0x8>)
 8013742:	f7ff bca7 	b.w	8013094 <__retarget_lock_release_recursive>
 8013746:	bf00      	nop
 8013748:	2400212e 	.word	0x2400212e

0801374c <__sinit>:
 801374c:	b510      	push	{r4, lr}
 801374e:	4604      	mov	r4, r0
 8013750:	f7ff fff0 	bl	8013734 <__sinit_lock_acquire>
 8013754:	69a3      	ldr	r3, [r4, #24]
 8013756:	b11b      	cbz	r3, 8013760 <__sinit+0x14>
 8013758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801375c:	f7ff bff0 	b.w	8013740 <__sinit_lock_release>
 8013760:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013764:	6523      	str	r3, [r4, #80]	; 0x50
 8013766:	4b13      	ldr	r3, [pc, #76]	; (80137b4 <__sinit+0x68>)
 8013768:	4a13      	ldr	r2, [pc, #76]	; (80137b8 <__sinit+0x6c>)
 801376a:	681b      	ldr	r3, [r3, #0]
 801376c:	62a2      	str	r2, [r4, #40]	; 0x28
 801376e:	42a3      	cmp	r3, r4
 8013770:	bf04      	itt	eq
 8013772:	2301      	moveq	r3, #1
 8013774:	61a3      	streq	r3, [r4, #24]
 8013776:	4620      	mov	r0, r4
 8013778:	f000 f820 	bl	80137bc <__sfp>
 801377c:	6060      	str	r0, [r4, #4]
 801377e:	4620      	mov	r0, r4
 8013780:	f000 f81c 	bl	80137bc <__sfp>
 8013784:	60a0      	str	r0, [r4, #8]
 8013786:	4620      	mov	r0, r4
 8013788:	f000 f818 	bl	80137bc <__sfp>
 801378c:	2200      	movs	r2, #0
 801378e:	60e0      	str	r0, [r4, #12]
 8013790:	2104      	movs	r1, #4
 8013792:	6860      	ldr	r0, [r4, #4]
 8013794:	f7ff ff82 	bl	801369c <std>
 8013798:	68a0      	ldr	r0, [r4, #8]
 801379a:	2201      	movs	r2, #1
 801379c:	2109      	movs	r1, #9
 801379e:	f7ff ff7d 	bl	801369c <std>
 80137a2:	68e0      	ldr	r0, [r4, #12]
 80137a4:	2202      	movs	r2, #2
 80137a6:	2112      	movs	r1, #18
 80137a8:	f7ff ff78 	bl	801369c <std>
 80137ac:	2301      	movs	r3, #1
 80137ae:	61a3      	str	r3, [r4, #24]
 80137b0:	e7d2      	b.n	8013758 <__sinit+0xc>
 80137b2:	bf00      	nop
 80137b4:	08013cd0 	.word	0x08013cd0
 80137b8:	080136e5 	.word	0x080136e5

080137bc <__sfp>:
 80137bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80137be:	4607      	mov	r7, r0
 80137c0:	f7ff ffac 	bl	801371c <__sfp_lock_acquire>
 80137c4:	4b1e      	ldr	r3, [pc, #120]	; (8013840 <__sfp+0x84>)
 80137c6:	681e      	ldr	r6, [r3, #0]
 80137c8:	69b3      	ldr	r3, [r6, #24]
 80137ca:	b913      	cbnz	r3, 80137d2 <__sfp+0x16>
 80137cc:	4630      	mov	r0, r6
 80137ce:	f7ff ffbd 	bl	801374c <__sinit>
 80137d2:	3648      	adds	r6, #72	; 0x48
 80137d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80137d8:	3b01      	subs	r3, #1
 80137da:	d503      	bpl.n	80137e4 <__sfp+0x28>
 80137dc:	6833      	ldr	r3, [r6, #0]
 80137de:	b30b      	cbz	r3, 8013824 <__sfp+0x68>
 80137e0:	6836      	ldr	r6, [r6, #0]
 80137e2:	e7f7      	b.n	80137d4 <__sfp+0x18>
 80137e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80137e8:	b9d5      	cbnz	r5, 8013820 <__sfp+0x64>
 80137ea:	4b16      	ldr	r3, [pc, #88]	; (8013844 <__sfp+0x88>)
 80137ec:	60e3      	str	r3, [r4, #12]
 80137ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80137f2:	6665      	str	r5, [r4, #100]	; 0x64
 80137f4:	f7ff fc4c 	bl	8013090 <__retarget_lock_init_recursive>
 80137f8:	f7ff ff96 	bl	8013728 <__sfp_lock_release>
 80137fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013800:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013804:	6025      	str	r5, [r4, #0]
 8013806:	61a5      	str	r5, [r4, #24]
 8013808:	2208      	movs	r2, #8
 801380a:	4629      	mov	r1, r5
 801380c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013810:	f7fd fd2c 	bl	801126c <memset>
 8013814:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013818:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801381c:	4620      	mov	r0, r4
 801381e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013820:	3468      	adds	r4, #104	; 0x68
 8013822:	e7d9      	b.n	80137d8 <__sfp+0x1c>
 8013824:	2104      	movs	r1, #4
 8013826:	4638      	mov	r0, r7
 8013828:	f7ff ff62 	bl	80136f0 <__sfmoreglue>
 801382c:	4604      	mov	r4, r0
 801382e:	6030      	str	r0, [r6, #0]
 8013830:	2800      	cmp	r0, #0
 8013832:	d1d5      	bne.n	80137e0 <__sfp+0x24>
 8013834:	f7ff ff78 	bl	8013728 <__sfp_lock_release>
 8013838:	230c      	movs	r3, #12
 801383a:	603b      	str	r3, [r7, #0]
 801383c:	e7ee      	b.n	801381c <__sfp+0x60>
 801383e:	bf00      	nop
 8013840:	08013cd0 	.word	0x08013cd0
 8013844:	ffff0001 	.word	0xffff0001

08013848 <_fwalk_reent>:
 8013848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801384c:	4606      	mov	r6, r0
 801384e:	4688      	mov	r8, r1
 8013850:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013854:	2700      	movs	r7, #0
 8013856:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801385a:	f1b9 0901 	subs.w	r9, r9, #1
 801385e:	d505      	bpl.n	801386c <_fwalk_reent+0x24>
 8013860:	6824      	ldr	r4, [r4, #0]
 8013862:	2c00      	cmp	r4, #0
 8013864:	d1f7      	bne.n	8013856 <_fwalk_reent+0xe>
 8013866:	4638      	mov	r0, r7
 8013868:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801386c:	89ab      	ldrh	r3, [r5, #12]
 801386e:	2b01      	cmp	r3, #1
 8013870:	d907      	bls.n	8013882 <_fwalk_reent+0x3a>
 8013872:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013876:	3301      	adds	r3, #1
 8013878:	d003      	beq.n	8013882 <_fwalk_reent+0x3a>
 801387a:	4629      	mov	r1, r5
 801387c:	4630      	mov	r0, r6
 801387e:	47c0      	blx	r8
 8013880:	4307      	orrs	r7, r0
 8013882:	3568      	adds	r5, #104	; 0x68
 8013884:	e7e9      	b.n	801385a <_fwalk_reent+0x12>

08013886 <__swhatbuf_r>:
 8013886:	b570      	push	{r4, r5, r6, lr}
 8013888:	460e      	mov	r6, r1
 801388a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801388e:	2900      	cmp	r1, #0
 8013890:	b096      	sub	sp, #88	; 0x58
 8013892:	4614      	mov	r4, r2
 8013894:	461d      	mov	r5, r3
 8013896:	da08      	bge.n	80138aa <__swhatbuf_r+0x24>
 8013898:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801389c:	2200      	movs	r2, #0
 801389e:	602a      	str	r2, [r5, #0]
 80138a0:	061a      	lsls	r2, r3, #24
 80138a2:	d410      	bmi.n	80138c6 <__swhatbuf_r+0x40>
 80138a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80138a8:	e00e      	b.n	80138c8 <__swhatbuf_r+0x42>
 80138aa:	466a      	mov	r2, sp
 80138ac:	f000 f8fa 	bl	8013aa4 <_fstat_r>
 80138b0:	2800      	cmp	r0, #0
 80138b2:	dbf1      	blt.n	8013898 <__swhatbuf_r+0x12>
 80138b4:	9a01      	ldr	r2, [sp, #4]
 80138b6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80138ba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80138be:	425a      	negs	r2, r3
 80138c0:	415a      	adcs	r2, r3
 80138c2:	602a      	str	r2, [r5, #0]
 80138c4:	e7ee      	b.n	80138a4 <__swhatbuf_r+0x1e>
 80138c6:	2340      	movs	r3, #64	; 0x40
 80138c8:	2000      	movs	r0, #0
 80138ca:	6023      	str	r3, [r4, #0]
 80138cc:	b016      	add	sp, #88	; 0x58
 80138ce:	bd70      	pop	{r4, r5, r6, pc}

080138d0 <__smakebuf_r>:
 80138d0:	898b      	ldrh	r3, [r1, #12]
 80138d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80138d4:	079d      	lsls	r5, r3, #30
 80138d6:	4606      	mov	r6, r0
 80138d8:	460c      	mov	r4, r1
 80138da:	d507      	bpl.n	80138ec <__smakebuf_r+0x1c>
 80138dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80138e0:	6023      	str	r3, [r4, #0]
 80138e2:	6123      	str	r3, [r4, #16]
 80138e4:	2301      	movs	r3, #1
 80138e6:	6163      	str	r3, [r4, #20]
 80138e8:	b002      	add	sp, #8
 80138ea:	bd70      	pop	{r4, r5, r6, pc}
 80138ec:	ab01      	add	r3, sp, #4
 80138ee:	466a      	mov	r2, sp
 80138f0:	f7ff ffc9 	bl	8013886 <__swhatbuf_r>
 80138f4:	9900      	ldr	r1, [sp, #0]
 80138f6:	4605      	mov	r5, r0
 80138f8:	4630      	mov	r0, r6
 80138fa:	f7fd fd2b 	bl	8011354 <_malloc_r>
 80138fe:	b948      	cbnz	r0, 8013914 <__smakebuf_r+0x44>
 8013900:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013904:	059a      	lsls	r2, r3, #22
 8013906:	d4ef      	bmi.n	80138e8 <__smakebuf_r+0x18>
 8013908:	f023 0303 	bic.w	r3, r3, #3
 801390c:	f043 0302 	orr.w	r3, r3, #2
 8013910:	81a3      	strh	r3, [r4, #12]
 8013912:	e7e3      	b.n	80138dc <__smakebuf_r+0xc>
 8013914:	4b0d      	ldr	r3, [pc, #52]	; (801394c <__smakebuf_r+0x7c>)
 8013916:	62b3      	str	r3, [r6, #40]	; 0x28
 8013918:	89a3      	ldrh	r3, [r4, #12]
 801391a:	6020      	str	r0, [r4, #0]
 801391c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013920:	81a3      	strh	r3, [r4, #12]
 8013922:	9b00      	ldr	r3, [sp, #0]
 8013924:	6163      	str	r3, [r4, #20]
 8013926:	9b01      	ldr	r3, [sp, #4]
 8013928:	6120      	str	r0, [r4, #16]
 801392a:	b15b      	cbz	r3, 8013944 <__smakebuf_r+0x74>
 801392c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013930:	4630      	mov	r0, r6
 8013932:	f000 f8c9 	bl	8013ac8 <_isatty_r>
 8013936:	b128      	cbz	r0, 8013944 <__smakebuf_r+0x74>
 8013938:	89a3      	ldrh	r3, [r4, #12]
 801393a:	f023 0303 	bic.w	r3, r3, #3
 801393e:	f043 0301 	orr.w	r3, r3, #1
 8013942:	81a3      	strh	r3, [r4, #12]
 8013944:	89a0      	ldrh	r0, [r4, #12]
 8013946:	4305      	orrs	r5, r0
 8013948:	81a5      	strh	r5, [r4, #12]
 801394a:	e7cd      	b.n	80138e8 <__smakebuf_r+0x18>
 801394c:	080136e5 	.word	0x080136e5

08013950 <_raise_r>:
 8013950:	291f      	cmp	r1, #31
 8013952:	b538      	push	{r3, r4, r5, lr}
 8013954:	4604      	mov	r4, r0
 8013956:	460d      	mov	r5, r1
 8013958:	d904      	bls.n	8013964 <_raise_r+0x14>
 801395a:	2316      	movs	r3, #22
 801395c:	6003      	str	r3, [r0, #0]
 801395e:	f04f 30ff 	mov.w	r0, #4294967295
 8013962:	bd38      	pop	{r3, r4, r5, pc}
 8013964:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013966:	b112      	cbz	r2, 801396e <_raise_r+0x1e>
 8013968:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801396c:	b94b      	cbnz	r3, 8013982 <_raise_r+0x32>
 801396e:	4620      	mov	r0, r4
 8013970:	f000 f830 	bl	80139d4 <_getpid_r>
 8013974:	462a      	mov	r2, r5
 8013976:	4601      	mov	r1, r0
 8013978:	4620      	mov	r0, r4
 801397a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801397e:	f000 b817 	b.w	80139b0 <_kill_r>
 8013982:	2b01      	cmp	r3, #1
 8013984:	d00a      	beq.n	801399c <_raise_r+0x4c>
 8013986:	1c59      	adds	r1, r3, #1
 8013988:	d103      	bne.n	8013992 <_raise_r+0x42>
 801398a:	2316      	movs	r3, #22
 801398c:	6003      	str	r3, [r0, #0]
 801398e:	2001      	movs	r0, #1
 8013990:	e7e7      	b.n	8013962 <_raise_r+0x12>
 8013992:	2400      	movs	r4, #0
 8013994:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013998:	4628      	mov	r0, r5
 801399a:	4798      	blx	r3
 801399c:	2000      	movs	r0, #0
 801399e:	e7e0      	b.n	8013962 <_raise_r+0x12>

080139a0 <raise>:
 80139a0:	4b02      	ldr	r3, [pc, #8]	; (80139ac <raise+0xc>)
 80139a2:	4601      	mov	r1, r0
 80139a4:	6818      	ldr	r0, [r3, #0]
 80139a6:	f7ff bfd3 	b.w	8013950 <_raise_r>
 80139aa:	bf00      	nop
 80139ac:	24000184 	.word	0x24000184

080139b0 <_kill_r>:
 80139b0:	b538      	push	{r3, r4, r5, lr}
 80139b2:	4d07      	ldr	r5, [pc, #28]	; (80139d0 <_kill_r+0x20>)
 80139b4:	2300      	movs	r3, #0
 80139b6:	4604      	mov	r4, r0
 80139b8:	4608      	mov	r0, r1
 80139ba:	4611      	mov	r1, r2
 80139bc:	602b      	str	r3, [r5, #0]
 80139be:	f7ed ff7d 	bl	80018bc <_kill>
 80139c2:	1c43      	adds	r3, r0, #1
 80139c4:	d102      	bne.n	80139cc <_kill_r+0x1c>
 80139c6:	682b      	ldr	r3, [r5, #0]
 80139c8:	b103      	cbz	r3, 80139cc <_kill_r+0x1c>
 80139ca:	6023      	str	r3, [r4, #0]
 80139cc:	bd38      	pop	{r3, r4, r5, pc}
 80139ce:	bf00      	nop
 80139d0:	24002128 	.word	0x24002128

080139d4 <_getpid_r>:
 80139d4:	f7ed bf6a 	b.w	80018ac <_getpid>

080139d8 <__sread>:
 80139d8:	b510      	push	{r4, lr}
 80139da:	460c      	mov	r4, r1
 80139dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80139e0:	f000 f894 	bl	8013b0c <_read_r>
 80139e4:	2800      	cmp	r0, #0
 80139e6:	bfab      	itete	ge
 80139e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80139ea:	89a3      	ldrhlt	r3, [r4, #12]
 80139ec:	181b      	addge	r3, r3, r0
 80139ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80139f2:	bfac      	ite	ge
 80139f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80139f6:	81a3      	strhlt	r3, [r4, #12]
 80139f8:	bd10      	pop	{r4, pc}

080139fa <__swrite>:
 80139fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139fe:	461f      	mov	r7, r3
 8013a00:	898b      	ldrh	r3, [r1, #12]
 8013a02:	05db      	lsls	r3, r3, #23
 8013a04:	4605      	mov	r5, r0
 8013a06:	460c      	mov	r4, r1
 8013a08:	4616      	mov	r6, r2
 8013a0a:	d505      	bpl.n	8013a18 <__swrite+0x1e>
 8013a0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013a10:	2302      	movs	r3, #2
 8013a12:	2200      	movs	r2, #0
 8013a14:	f000 f868 	bl	8013ae8 <_lseek_r>
 8013a18:	89a3      	ldrh	r3, [r4, #12]
 8013a1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013a1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013a22:	81a3      	strh	r3, [r4, #12]
 8013a24:	4632      	mov	r2, r6
 8013a26:	463b      	mov	r3, r7
 8013a28:	4628      	mov	r0, r5
 8013a2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013a2e:	f000 b817 	b.w	8013a60 <_write_r>

08013a32 <__sseek>:
 8013a32:	b510      	push	{r4, lr}
 8013a34:	460c      	mov	r4, r1
 8013a36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013a3a:	f000 f855 	bl	8013ae8 <_lseek_r>
 8013a3e:	1c43      	adds	r3, r0, #1
 8013a40:	89a3      	ldrh	r3, [r4, #12]
 8013a42:	bf15      	itete	ne
 8013a44:	6560      	strne	r0, [r4, #84]	; 0x54
 8013a46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013a4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013a4e:	81a3      	strheq	r3, [r4, #12]
 8013a50:	bf18      	it	ne
 8013a52:	81a3      	strhne	r3, [r4, #12]
 8013a54:	bd10      	pop	{r4, pc}

08013a56 <__sclose>:
 8013a56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013a5a:	f000 b813 	b.w	8013a84 <_close_r>
	...

08013a60 <_write_r>:
 8013a60:	b538      	push	{r3, r4, r5, lr}
 8013a62:	4d07      	ldr	r5, [pc, #28]	; (8013a80 <_write_r+0x20>)
 8013a64:	4604      	mov	r4, r0
 8013a66:	4608      	mov	r0, r1
 8013a68:	4611      	mov	r1, r2
 8013a6a:	2200      	movs	r2, #0
 8013a6c:	602a      	str	r2, [r5, #0]
 8013a6e:	461a      	mov	r2, r3
 8013a70:	f7ed ff5b 	bl	800192a <_write>
 8013a74:	1c43      	adds	r3, r0, #1
 8013a76:	d102      	bne.n	8013a7e <_write_r+0x1e>
 8013a78:	682b      	ldr	r3, [r5, #0]
 8013a7a:	b103      	cbz	r3, 8013a7e <_write_r+0x1e>
 8013a7c:	6023      	str	r3, [r4, #0]
 8013a7e:	bd38      	pop	{r3, r4, r5, pc}
 8013a80:	24002128 	.word	0x24002128

08013a84 <_close_r>:
 8013a84:	b538      	push	{r3, r4, r5, lr}
 8013a86:	4d06      	ldr	r5, [pc, #24]	; (8013aa0 <_close_r+0x1c>)
 8013a88:	2300      	movs	r3, #0
 8013a8a:	4604      	mov	r4, r0
 8013a8c:	4608      	mov	r0, r1
 8013a8e:	602b      	str	r3, [r5, #0]
 8013a90:	f7ed ff67 	bl	8001962 <_close>
 8013a94:	1c43      	adds	r3, r0, #1
 8013a96:	d102      	bne.n	8013a9e <_close_r+0x1a>
 8013a98:	682b      	ldr	r3, [r5, #0]
 8013a9a:	b103      	cbz	r3, 8013a9e <_close_r+0x1a>
 8013a9c:	6023      	str	r3, [r4, #0]
 8013a9e:	bd38      	pop	{r3, r4, r5, pc}
 8013aa0:	24002128 	.word	0x24002128

08013aa4 <_fstat_r>:
 8013aa4:	b538      	push	{r3, r4, r5, lr}
 8013aa6:	4d07      	ldr	r5, [pc, #28]	; (8013ac4 <_fstat_r+0x20>)
 8013aa8:	2300      	movs	r3, #0
 8013aaa:	4604      	mov	r4, r0
 8013aac:	4608      	mov	r0, r1
 8013aae:	4611      	mov	r1, r2
 8013ab0:	602b      	str	r3, [r5, #0]
 8013ab2:	f7ed ff62 	bl	800197a <_fstat>
 8013ab6:	1c43      	adds	r3, r0, #1
 8013ab8:	d102      	bne.n	8013ac0 <_fstat_r+0x1c>
 8013aba:	682b      	ldr	r3, [r5, #0]
 8013abc:	b103      	cbz	r3, 8013ac0 <_fstat_r+0x1c>
 8013abe:	6023      	str	r3, [r4, #0]
 8013ac0:	bd38      	pop	{r3, r4, r5, pc}
 8013ac2:	bf00      	nop
 8013ac4:	24002128 	.word	0x24002128

08013ac8 <_isatty_r>:
 8013ac8:	b538      	push	{r3, r4, r5, lr}
 8013aca:	4d06      	ldr	r5, [pc, #24]	; (8013ae4 <_isatty_r+0x1c>)
 8013acc:	2300      	movs	r3, #0
 8013ace:	4604      	mov	r4, r0
 8013ad0:	4608      	mov	r0, r1
 8013ad2:	602b      	str	r3, [r5, #0]
 8013ad4:	f7ed ff61 	bl	800199a <_isatty>
 8013ad8:	1c43      	adds	r3, r0, #1
 8013ada:	d102      	bne.n	8013ae2 <_isatty_r+0x1a>
 8013adc:	682b      	ldr	r3, [r5, #0]
 8013ade:	b103      	cbz	r3, 8013ae2 <_isatty_r+0x1a>
 8013ae0:	6023      	str	r3, [r4, #0]
 8013ae2:	bd38      	pop	{r3, r4, r5, pc}
 8013ae4:	24002128 	.word	0x24002128

08013ae8 <_lseek_r>:
 8013ae8:	b538      	push	{r3, r4, r5, lr}
 8013aea:	4d07      	ldr	r5, [pc, #28]	; (8013b08 <_lseek_r+0x20>)
 8013aec:	4604      	mov	r4, r0
 8013aee:	4608      	mov	r0, r1
 8013af0:	4611      	mov	r1, r2
 8013af2:	2200      	movs	r2, #0
 8013af4:	602a      	str	r2, [r5, #0]
 8013af6:	461a      	mov	r2, r3
 8013af8:	f7ed ff5a 	bl	80019b0 <_lseek>
 8013afc:	1c43      	adds	r3, r0, #1
 8013afe:	d102      	bne.n	8013b06 <_lseek_r+0x1e>
 8013b00:	682b      	ldr	r3, [r5, #0]
 8013b02:	b103      	cbz	r3, 8013b06 <_lseek_r+0x1e>
 8013b04:	6023      	str	r3, [r4, #0]
 8013b06:	bd38      	pop	{r3, r4, r5, pc}
 8013b08:	24002128 	.word	0x24002128

08013b0c <_read_r>:
 8013b0c:	b538      	push	{r3, r4, r5, lr}
 8013b0e:	4d07      	ldr	r5, [pc, #28]	; (8013b2c <_read_r+0x20>)
 8013b10:	4604      	mov	r4, r0
 8013b12:	4608      	mov	r0, r1
 8013b14:	4611      	mov	r1, r2
 8013b16:	2200      	movs	r2, #0
 8013b18:	602a      	str	r2, [r5, #0]
 8013b1a:	461a      	mov	r2, r3
 8013b1c:	f7ed fee8 	bl	80018f0 <_read>
 8013b20:	1c43      	adds	r3, r0, #1
 8013b22:	d102      	bne.n	8013b2a <_read_r+0x1e>
 8013b24:	682b      	ldr	r3, [r5, #0]
 8013b26:	b103      	cbz	r3, 8013b2a <_read_r+0x1e>
 8013b28:	6023      	str	r3, [r4, #0]
 8013b2a:	bd38      	pop	{r3, r4, r5, pc}
 8013b2c:	24002128 	.word	0x24002128

08013b30 <_init>:
 8013b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b32:	bf00      	nop
 8013b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013b36:	bc08      	pop	{r3}
 8013b38:	469e      	mov	lr, r3
 8013b3a:	4770      	bx	lr

08013b3c <_fini>:
 8013b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b3e:	bf00      	nop
 8013b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013b42:	bc08      	pop	{r3}
 8013b44:	469e      	mov	lr, r3
 8013b46:	4770      	bx	lr
