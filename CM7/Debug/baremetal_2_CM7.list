
baremetal_2_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013778  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  08013a18  08013a18  00023a18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013e7c  08013e7c  00030354  2**0
                  CONTENTS
  4 .ARM          00000008  08013e7c  08013e7c  00023e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013e84  08013e84  00030354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08013e84  08013e84  00023e84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08013e8c  08013e8c  00023e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000354  24000000  08013e94  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cfc  24000354  080141e8  00030354  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24002050  080141e8  00032050  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030354  2**0
                  CONTENTS, READONLY
 12 .debug_info   00034943  00000000  00000000  00030382  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006bc6  00000000  00000000  00064cc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00000ba3  00000000  00000000  0006b88b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002278  00000000  00000000  0006c430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000021b8  00000000  00000000  0006e6a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000439d6  00000000  00000000  00070860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003246d  00000000  00000000  000b4236  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001931b2  00000000  00000000  000e66a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00279855  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009be0  00000000  00000000  002798a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000354 	.word	0x24000354
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08013a00 	.word	0x08013a00

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000358 	.word	0x24000358
 80002dc:	08013a00 	.word	0x08013a00

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <_ZN11CalibrationC1Ev>:
 */

#include <calibration.hpp>


Calibration::Calibration():
 8000694:	b510      	push	{r4, lr}
 8000696:	4604      	mov	r4, r0
	left_side_g(0),
	right_side_g(0),
	nose_up_g(0),
	nose_down_g(0),
	filtered_output(0),
	sum_filter_output(0)
 8000698:	f000 ff2e 	bl	80014f8 <_ZN10SensorDataC1Ev>
 800069c:	2200      	movs	r2, #0
 800069e:	2300      	movs	r3, #0
 80006a0:	2000      	movs	r0, #0
 80006a2:	2100      	movs	r1, #0
 80006a4:	67a2      	str	r2, [r4, #120]	; 0x78
 80006a6:	f8a4 207c 	strh.w	r2, [r4, #124]	; 0x7c


class  RCFilter
{
public:
	RCFilter(float fc): cutoff_freq(fc), prev_time(0), prev_output(0)
 80006aa:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <_ZN11CalibrationC1Ev+0x60>)
 80006ac:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 80006b0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 80006b4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80006b8:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 80006bc:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 80006c0:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 80006c4:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
 80006c8:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
 80006cc:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	void UpdateMeasuredGValue(CalibrationPosition drone_side, int num_samples);
	void ComputeOffsets();
	bool CalibrationComplete();
	void CalibrateGyro();

	struct sensor_offset
 80006d0:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
 80006d4:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
 80006d8:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 80006dc:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
 80006e0:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80006e4:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
 80006e8:	e9c4 012a 	strd	r0, r1, [r4, #168]	; 0xa8
 80006ec:	e9c4 012c 	strd	r0, r1, [r4, #176]	; 0xb0
{

}
 80006f0:	4620      	mov	r0, r4
 80006f2:	bd10      	pop	{r4, pc}
 80006f4:	43cc0000 	.word	0x43cc0000

080006f8 <_ZN11Calibration21CalibrateNextPositionEv>:


CalibrationPosition Calibration::CalibrateNextPosition()
{
 80006f8:	b538      	push	{r3, r4, r5, lr}
 80006fa:	4604      	mov	r4, r0
 80006fc:	ed2d 8b02 	vpush	{d8}
		acc_error = sensor.GetAccData();
		// Acquire enough data past the threshold for each axis
		uint32_t num_samples = 0;

		// When nose up
		if(acc_error.imu_acc_x > ACCEL_THRESHOLD && !nose_up_calibrated)
 8000700:	ed9f 8a8c 	vldr	s16, [pc, #560]	; 8000934 <_ZN11Calibration21CalibrateNextPositionEv+0x23c>
				acc_error = sensor.GetAccData();
			}
		}

		// Nose Down Scenario
		else if(acc_error.imu_acc_x < -ACCEL_THRESHOLD && !nose_down_calibrated)
 8000704:	eddf 8a8c 	vldr	s17, [pc, #560]	; 8000938 <_ZN11Calibration21CalibrateNextPositionEv+0x240>
 8000708:	e037      	b.n	800077a <_ZN11Calibration21CalibrateNextPositionEv+0x82>
 800070a:	eeb4 0ae8 	vcmpe.f32	s0, s17
 800070e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000712:	d503      	bpl.n	800071c <_ZN11Calibration21CalibrateNextPositionEv+0x24>
 8000714:	f894 307d 	ldrb.w	r3, [r4, #125]	; 0x7d
 8000718:	2b00      	cmp	r3, #0
 800071a:	d064      	beq.n	80007e6 <_ZN11Calibration21CalibrateNextPositionEv+0xee>
				sensor.ReadAcc();
				acc_error = sensor.GetAccData();
			}
		}
		// Right Side
		else if(acc_error.imu_acc_y  > ACCEL_THRESHOLD && !right_side_calibrated)
 800071c:	edd4 7a19 	vldr	s15, [r4, #100]	; 0x64
 8000720:	eef4 7ac8 	vcmpe.f32	s15, s16
 8000724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000728:	dd03      	ble.n	8000732 <_ZN11Calibration21CalibrateNextPositionEv+0x3a>
 800072a:	f894 307b 	ldrb.w	r3, [r4, #123]	; 0x7b
 800072e:	2b00      	cmp	r3, #0
 8000730:	d07a      	beq.n	8000828 <_ZN11Calibration21CalibrateNextPositionEv+0x130>
			}

		}

		// Left Side
		else if(acc_error.imu_acc_y  < -ACCEL_THRESHOLD && !left_side_calibrated)
 8000732:	eef4 7ae8 	vcmpe.f32	s15, s17
 8000736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800073a:	d504      	bpl.n	8000746 <_ZN11Calibration21CalibrateNextPositionEv+0x4e>
 800073c:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
 8000740:	2b00      	cmp	r3, #0
 8000742:	f000 8092 	beq.w	800086a <_ZN11Calibration21CalibrateNextPositionEv+0x172>
			}

		}

		// Upside Up
		else if(acc_error.imu_acc_z > ACCEL_THRESHOLD && !upside_up_calibrated)
 8000746:	edd4 7a1a 	vldr	s15, [r4, #104]	; 0x68
 800074a:	eef4 7ac8 	vcmpe.f32	s15, s16
 800074e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000752:	dd04      	ble.n	800075e <_ZN11Calibration21CalibrateNextPositionEv+0x66>
 8000754:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
 8000758:	2b00      	cmp	r3, #0
 800075a:	f000 80a8 	beq.w	80008ae <_ZN11Calibration21CalibrateNextPositionEv+0x1b6>
			}
		}


		// Upside Down
		else if(acc_error.imu_acc_z < - ACCEL_THRESHOLD && !upside_down_calibrated)
 800075e:	eef4 7ae8 	vcmpe.f32	s15, s17
 8000762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000766:	d504      	bpl.n	8000772 <_ZN11Calibration21CalibrateNextPositionEv+0x7a>
 8000768:	f894 3079 	ldrb.w	r3, [r4, #121]	; 0x79
 800076c:	2b00      	cmp	r3, #0
 800076e:	f000 80bf 	beq.w	80008f0 <_ZN11Calibration21CalibrateNextPositionEv+0x1f8>
				sensor.ReadAcc();
				acc_error = sensor.GetAccData();
			}
		}

		HAL_Delay(1000);
 8000772:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000776:	f001 fd09 	bl	800218c <HAL_Delay>
		sensor.ReadAcc();
 800077a:	4620      	mov	r0, r4
 800077c:	f000 fed0 	bl	8001520 <_ZN10SensorData7ReadAccEv>
		acc_error = sensor.GetAccData();
 8000780:	4620      	mov	r0, r4
 8000782:	f000 fef5 	bl	8001570 <_ZN10SensorData10GetAccDataEv>
		if(acc_error.imu_acc_x > ACCEL_THRESHOLD && !nose_up_calibrated)
 8000786:	eeb4 0ac8 	vcmpe.f32	s0, s16
		acc_error = sensor.GetAccData();
 800078a:	edc4 0a19 	vstr	s1, [r4, #100]	; 0x64
 800078e:	ed84 1a1a 	vstr	s2, [r4, #104]	; 0x68
		if(acc_error.imu_acc_x > ACCEL_THRESHOLD && !nose_up_calibrated)
 8000792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		acc_error = sensor.GetAccData();
 8000796:	ed84 0a18 	vstr	s0, [r4, #96]	; 0x60
		if(acc_error.imu_acc_x > ACCEL_THRESHOLD && !nose_up_calibrated)
 800079a:	ddb6      	ble.n	800070a <_ZN11Calibration21CalibrateNextPositionEv+0x12>
 800079c:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d1b2      	bne.n	800070a <_ZN11Calibration21CalibrateNextPositionEv+0x12>
 80007a4:	25c8      	movs	r5, #200	; 0xc8
				HAL_Delay(10);
 80007a6:	200a      	movs	r0, #10
 80007a8:	f001 fcf0 	bl	800218c <HAL_Delay>
				sensor.ReadAcc();
 80007ac:	4620      	mov	r0, r4
 80007ae:	f000 feb7 	bl	8001520 <_ZN10SensorData7ReadAccEv>
				acc_error = sensor.GetAccData();
 80007b2:	4620      	mov	r0, r4
 80007b4:	f000 fedc 	bl	8001570 <_ZN10SensorData10GetAccDataEv>
			while(acc_error.imu_acc_x > ACCEL_THRESHOLD)
 80007b8:	eeb4 0ac8 	vcmpe.f32	s0, s16
				acc_error = sensor.GetAccData();
 80007bc:	edc4 0a19 	vstr	s1, [r4, #100]	; 0x64
 80007c0:	ed84 1a1a 	vstr	s2, [r4, #104]	; 0x68
			while(acc_error.imu_acc_x > ACCEL_THRESHOLD)
 80007c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				acc_error = sensor.GetAccData();
 80007c8:	ed84 0a18 	vstr	s0, [r4, #96]	; 0x60
			while(acc_error.imu_acc_x > ACCEL_THRESHOLD)
 80007cc:	ddd1      	ble.n	8000772 <_ZN11Calibration21CalibrateNextPositionEv+0x7a>
				if(num_samples > SAMPLE_THRESHOLD)
 80007ce:	3d01      	subs	r5, #1
 80007d0:	d1e9      	bne.n	80007a6 <_ZN11Calibration21CalibrateNextPositionEv+0xae>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8, GPIO_PIN_RESET);
}

inline void LEDDOn ()
{
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9, GPIO_PIN_SET);
 80007d2:	485a      	ldr	r0, [pc, #360]	; (800093c <_ZN11Calibration21CalibrateNextPositionEv+0x244>)
 80007d4:	2201      	movs	r2, #1
 80007d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007da:	f004 fea7 	bl	800552c <HAL_GPIO_WritePin>
					return CalibrationPosition::NOSE_UP;
 80007de:	2004      	movs	r0, #4
	}

}
 80007e0:	ecbd 8b02 	vpop	{d8}
 80007e4:	bd38      	pop	{r3, r4, r5, pc}
 80007e6:	25c8      	movs	r5, #200	; 0xc8
				HAL_Delay(10);
 80007e8:	200a      	movs	r0, #10
 80007ea:	f001 fccf 	bl	800218c <HAL_Delay>
				sensor.ReadAcc();
 80007ee:	4620      	mov	r0, r4
 80007f0:	f000 fe96 	bl	8001520 <_ZN10SensorData7ReadAccEv>
				acc_error = sensor.GetAccData();
 80007f4:	4620      	mov	r0, r4
 80007f6:	f000 febb 	bl	8001570 <_ZN10SensorData10GetAccDataEv>
			while(acc_error.imu_acc_x < -ACCEL_THRESHOLD)
 80007fa:	eeb4 0ae8 	vcmpe.f32	s0, s17
				acc_error = sensor.GetAccData();
 80007fe:	edc4 0a19 	vstr	s1, [r4, #100]	; 0x64
 8000802:	ed84 1a1a 	vstr	s2, [r4, #104]	; 0x68
			while(acc_error.imu_acc_x < -ACCEL_THRESHOLD)
 8000806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				acc_error = sensor.GetAccData();
 800080a:	ed84 0a18 	vstr	s0, [r4, #96]	; 0x60
			while(acc_error.imu_acc_x < -ACCEL_THRESHOLD)
 800080e:	d5b0      	bpl.n	8000772 <_ZN11Calibration21CalibrateNextPositionEv+0x7a>
				if(num_samples > SAMPLE_THRESHOLD)
 8000810:	3d01      	subs	r5, #1
 8000812:	d1e9      	bne.n	80007e8 <_ZN11Calibration21CalibrateNextPositionEv+0xf0>
}

inline void LEDDOff ()
{
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9, GPIO_PIN_RESET);
 8000814:	4849      	ldr	r0, [pc, #292]	; (800093c <_ZN11Calibration21CalibrateNextPositionEv+0x244>)
 8000816:	462a      	mov	r2, r5
 8000818:	f44f 7100 	mov.w	r1, #512	; 0x200
 800081c:	f004 fe86 	bl	800552c <HAL_GPIO_WritePin>
					return CalibrationPosition::NOSE_DOWN;
 8000820:	2005      	movs	r0, #5
}
 8000822:	ecbd 8b02 	vpop	{d8}
 8000826:	bd38      	pop	{r3, r4, r5, pc}
 8000828:	25c8      	movs	r5, #200	; 0xc8
				HAL_Delay(10);
 800082a:	200a      	movs	r0, #10
 800082c:	f001 fcae 	bl	800218c <HAL_Delay>
				sensor.ReadAcc();
 8000830:	4620      	mov	r0, r4
 8000832:	f000 fe75 	bl	8001520 <_ZN10SensorData7ReadAccEv>
				acc_error = sensor.GetAccData();
 8000836:	4620      	mov	r0, r4
 8000838:	f000 fe9a 	bl	8001570 <_ZN10SensorData10GetAccDataEv>
			while(acc_error.imu_acc_y > ACCEL_THRESHOLD)
 800083c:	eef4 0ac8 	vcmpe.f32	s1, s16
				acc_error = sensor.GetAccData();
 8000840:	ed84 0a18 	vstr	s0, [r4, #96]	; 0x60
 8000844:	ed84 1a1a 	vstr	s2, [r4, #104]	; 0x68
			while(acc_error.imu_acc_y > ACCEL_THRESHOLD)
 8000848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				acc_error = sensor.GetAccData();
 800084c:	edc4 0a19 	vstr	s1, [r4, #100]	; 0x64
			while(acc_error.imu_acc_y > ACCEL_THRESHOLD)
 8000850:	dd8f      	ble.n	8000772 <_ZN11Calibration21CalibrateNextPositionEv+0x7a>
				if(num_samples > SAMPLE_THRESHOLD)
 8000852:	3d01      	subs	r5, #1
 8000854:	d1e9      	bne.n	800082a <_ZN11Calibration21CalibrateNextPositionEv+0x132>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8, GPIO_PIN_SET);
 8000856:	4839      	ldr	r0, [pc, #228]	; (800093c <_ZN11Calibration21CalibrateNextPositionEv+0x244>)
 8000858:	2201      	movs	r2, #1
 800085a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800085e:	f004 fe65 	bl	800552c <HAL_GPIO_WritePin>
					return CalibrationPosition::RIGHT_SIDE_DOWN;
 8000862:	2003      	movs	r0, #3
}
 8000864:	ecbd 8b02 	vpop	{d8}
 8000868:	bd38      	pop	{r3, r4, r5, pc}
 800086a:	25c8      	movs	r5, #200	; 0xc8
				HAL_Delay(10);
 800086c:	200a      	movs	r0, #10
 800086e:	f001 fc8d 	bl	800218c <HAL_Delay>
				sensor.ReadAcc();
 8000872:	4620      	mov	r0, r4
 8000874:	f000 fe54 	bl	8001520 <_ZN10SensorData7ReadAccEv>
				acc_error = sensor.GetAccData();
 8000878:	4620      	mov	r0, r4
 800087a:	f000 fe79 	bl	8001570 <_ZN10SensorData10GetAccDataEv>
			while(acc_error.imu_acc_y < - ACCEL_THRESHOLD)
 800087e:	eef4 0ae8 	vcmpe.f32	s1, s17
				acc_error = sensor.GetAccData();
 8000882:	ed84 0a18 	vstr	s0, [r4, #96]	; 0x60
 8000886:	ed84 1a1a 	vstr	s2, [r4, #104]	; 0x68
			while(acc_error.imu_acc_y < - ACCEL_THRESHOLD)
 800088a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				acc_error = sensor.GetAccData();
 800088e:	edc4 0a19 	vstr	s1, [r4, #100]	; 0x64
			while(acc_error.imu_acc_y < - ACCEL_THRESHOLD)
 8000892:	f57f af6e 	bpl.w	8000772 <_ZN11Calibration21CalibrateNextPositionEv+0x7a>
				if(num_samples > SAMPLE_THRESHOLD)
 8000896:	3d01      	subs	r5, #1
 8000898:	d1e8      	bne.n	800086c <_ZN11Calibration21CalibrateNextPositionEv+0x174>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8, GPIO_PIN_RESET);
 800089a:	4828      	ldr	r0, [pc, #160]	; (800093c <_ZN11Calibration21CalibrateNextPositionEv+0x244>)
 800089c:	462a      	mov	r2, r5
 800089e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008a2:	f004 fe43 	bl	800552c <HAL_GPIO_WritePin>
					return CalibrationPosition::LEFT_SIDE_DOWN;
 80008a6:	2002      	movs	r0, #2
}
 80008a8:	ecbd 8b02 	vpop	{d8}
 80008ac:	bd38      	pop	{r3, r4, r5, pc}
 80008ae:	25c8      	movs	r5, #200	; 0xc8
				HAL_Delay(10);
 80008b0:	200a      	movs	r0, #10
 80008b2:	f001 fc6b 	bl	800218c <HAL_Delay>
				sensor.ReadAcc();
 80008b6:	4620      	mov	r0, r4
 80008b8:	f000 fe32 	bl	8001520 <_ZN10SensorData7ReadAccEv>
				acc_error = sensor.GetAccData();
 80008bc:	4620      	mov	r0, r4
 80008be:	f000 fe57 	bl	8001570 <_ZN10SensorData10GetAccDataEv>
			while(acc_error.imu_acc_z > ACCEL_THRESHOLD)
 80008c2:	eeb4 1ac8 	vcmpe.f32	s2, s16
				acc_error = sensor.GetAccData();
 80008c6:	ed84 0a18 	vstr	s0, [r4, #96]	; 0x60
 80008ca:	edc4 0a19 	vstr	s1, [r4, #100]	; 0x64
			while(acc_error.imu_acc_z > ACCEL_THRESHOLD)
 80008ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				acc_error = sensor.GetAccData();
 80008d2:	ed84 1a1a 	vstr	s2, [r4, #104]	; 0x68
			while(acc_error.imu_acc_z > ACCEL_THRESHOLD)
 80008d6:	f77f af4c 	ble.w	8000772 <_ZN11Calibration21CalibrateNextPositionEv+0x7a>
					if(num_samples > SAMPLE_THRESHOLD)
 80008da:	3d01      	subs	r5, #1
 80008dc:	d1e8      	bne.n	80008b0 <_ZN11Calibration21CalibrateNextPositionEv+0x1b8>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET);
 80008de:	4818      	ldr	r0, [pc, #96]	; (8000940 <_ZN11Calibration21CalibrateNextPositionEv+0x248>)
 80008e0:	2201      	movs	r2, #1
 80008e2:	2180      	movs	r1, #128	; 0x80
 80008e4:	f004 fe22 	bl	800552c <HAL_GPIO_WritePin>
						return CalibrationPosition::UPSIDE_UP;
 80008e8:	4628      	mov	r0, r5
}
 80008ea:	ecbd 8b02 	vpop	{d8}
 80008ee:	bd38      	pop	{r3, r4, r5, pc}
 80008f0:	25c8      	movs	r5, #200	; 0xc8
				HAL_Delay(10);
 80008f2:	200a      	movs	r0, #10
 80008f4:	f001 fc4a 	bl	800218c <HAL_Delay>
				sensor.ReadAcc();
 80008f8:	4620      	mov	r0, r4
 80008fa:	f000 fe11 	bl	8001520 <_ZN10SensorData7ReadAccEv>
				acc_error = sensor.GetAccData();
 80008fe:	4620      	mov	r0, r4
 8000900:	f000 fe36 	bl	8001570 <_ZN10SensorData10GetAccDataEv>
			while(acc_error.imu_acc_z < - ACCEL_THRESHOLD)
 8000904:	eeb4 1ae8 	vcmpe.f32	s2, s17
				acc_error = sensor.GetAccData();
 8000908:	ed84 0a18 	vstr	s0, [r4, #96]	; 0x60
 800090c:	edc4 0a19 	vstr	s1, [r4, #100]	; 0x64
			while(acc_error.imu_acc_z < - ACCEL_THRESHOLD)
 8000910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				acc_error = sensor.GetAccData();
 8000914:	ed84 1a1a 	vstr	s2, [r4, #104]	; 0x68
			while(acc_error.imu_acc_z < - ACCEL_THRESHOLD)
 8000918:	f57f af2b 	bpl.w	8000772 <_ZN11Calibration21CalibrateNextPositionEv+0x7a>
					if(num_samples > SAMPLE_THRESHOLD)
 800091c:	3d01      	subs	r5, #1
 800091e:	d1e8      	bne.n	80008f2 <_ZN11Calibration21CalibrateNextPositionEv+0x1fa>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 8000920:	4807      	ldr	r0, [pc, #28]	; (8000940 <_ZN11Calibration21CalibrateNextPositionEv+0x248>)
 8000922:	462a      	mov	r2, r5
 8000924:	2180      	movs	r1, #128	; 0x80
 8000926:	f004 fe01 	bl	800552c <HAL_GPIO_WritePin>
						return CalibrationPosition::UPSIDE_DOWN;
 800092a:	2001      	movs	r0, #1
}
 800092c:	ecbd 8b02 	vpop	{d8}
 8000930:	bd38      	pop	{r3, r4, r5, pc}
 8000932:	bf00      	nop
 8000934:	3f666666 	.word	0x3f666666
 8000938:	bf666666 	.word	0xbf666666
 800093c:	58021400 	.word	0x58021400
 8000940:	58021000 	.word	0x58021000

08000944 <_ZN11Calibration9CalibrateE19CalibrationPosition>:
void Calibration::Calibrate(CalibrationPosition drone_side)
{
 8000944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000948:	4604      	mov	r4, r0
 800094a:	460d      	mov	r5, r1
//	auto ms_now = HAL_GetTick();
	auto start_ms = HAL_GetTick();
	uint32_t ms_elapsed = 0;
	uint32_t ms_record = 5000; // 5 seconds

	filter.reset();
 800094c:	f104 0798 	add.w	r7, r4, #152	; 0x98

}
void Calibration::GetPositionDatapoints(CalibrationPosition drone_side)
{
	float value = 0;
	switch(drone_side)
 8000950:	f1a5 0804 	sub.w	r8, r5, #4
{
 8000954:	ed2d 8b02 	vpush	{d8}
	auto start_ms = HAL_GetTick();
 8000958:	f001 fc0c 	bl	8002174 <HAL_GetTick>
 800095c:	4606      	mov	r6, r0
	filter.reset();
 800095e:	4638      	mov	r0, r7
			break;
		case CalibrationPosition::RIGHT_SIDE_DOWN:
			value = acc_error.imu_acc_y;
			break;
		case CalibrationPosition::NOSE_UP:
			value = acc_error.imu_acc_x;
 8000960:	ed9f 8a49 	vldr	s16, [pc, #292]	; 8000a88 <_ZN11Calibration9CalibrateE19CalibrationPosition+0x144>
	filter.reset();
 8000964:	f00e fa02 	bl	800ed6c <_ZN8RCFilter5resetEv>
	filtered_output = 0;
 8000968:	2200      	movs	r2, #0
 800096a:	2300      	movs	r3, #0
 800096c:	e9c4 232a 	strd	r2, r3, [r4, #168]	; 0xa8
	while (ms_elapsed < ms_record)
 8000970:	e01b      	b.n	80009aa <_ZN11Calibration9CalibrateE19CalibrationPosition+0x66>
	switch(drone_side)
 8000972:	2d01      	cmp	r5, #1
			value = acc_error.imu_acc_z;
 8000974:	eeb0 0a41 	vmov.f32	s0, s2
	switch(drone_side)
 8000978:	dc2b      	bgt.n	80009d2 <_ZN11Calibration9CalibrateE19CalibrationPosition+0x8e>
 800097a:	d82d      	bhi.n	80009d8 <_ZN11Calibration9CalibrateE19CalibrationPosition+0x94>
			// LOGGER ("Unknwonw side);
			// TODO Catch this exception somehow;
			break;
	}

	filtered_output = filter.update(value);
 800097c:	4638      	mov	r0, r7
 800097e:	f00e f9b3 	bl	800ece8 <_ZN8RCFilter6updateEf>
 8000982:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
		HAL_Delay(100);
 8000986:	2064      	movs	r0, #100	; 0x64
	sum_filter_output += filtered_output;
 8000988:	ed94 7b2c 	vldr	d7, [r4, #176]	; 0xb0
	filtered_output = filter.update(value);
 800098c:	ed84 0b2a 	vstr	d0, [r4, #168]	; 0xa8
	sum_filter_output += filtered_output;
 8000990:	ee37 7b00 	vadd.f64	d7, d7, d0
 8000994:	ed84 7b2c 	vstr	d7, [r4, #176]	; 0xb0
		HAL_Delay(100);
 8000998:	f001 fbf8 	bl	800218c <HAL_Delay>
		ms_elapsed = HAL_GetTick() - start_ms;
 800099c:	f001 fbea 	bl	8002174 <HAL_GetTick>
	while (ms_elapsed < ms_record)
 80009a0:	f241 3387 	movw	r3, #4999	; 0x1387
		ms_elapsed = HAL_GetTick() - start_ms;
 80009a4:	1b80      	subs	r0, r0, r6
	while (ms_elapsed < ms_record)
 80009a6:	4298      	cmp	r0, r3
 80009a8:	d819      	bhi.n	80009de <_ZN11Calibration9CalibrateE19CalibrationPosition+0x9a>
		sensor.ReadAcc();
 80009aa:	4620      	mov	r0, r4
 80009ac:	f000 fdb8 	bl	8001520 <_ZN10SensorData7ReadAccEv>
		acc_error = sensor.GetAccData();
 80009b0:	4620      	mov	r0, r4
 80009b2:	f000 fddd 	bl	8001570 <_ZN10SensorData10GetAccDataEv>
	switch(drone_side)
 80009b6:	2d03      	cmp	r5, #3
		acc_error = sensor.GetAccData();
 80009b8:	ed84 0a18 	vstr	s0, [r4, #96]	; 0x60
 80009bc:	edc4 0a19 	vstr	s1, [r4, #100]	; 0x64
 80009c0:	ed84 1a1a 	vstr	s2, [r4, #104]	; 0x68
	switch(drone_side)
 80009c4:	ddd5      	ble.n	8000972 <_ZN11Calibration9CalibrateE19CalibrationPosition+0x2e>
			value = acc_error.imu_acc_x;
 80009c6:	f1b8 0f01 	cmp.w	r8, #1
 80009ca:	bf88      	it	hi
 80009cc:	eeb0 0a48 	vmovhi.f32	s0, s16
 80009d0:	e7d4      	b.n	800097c <_ZN11Calibration9CalibrateE19CalibrationPosition+0x38>
			value = acc_error.imu_acc_y;
 80009d2:	eeb0 0a60 	vmov.f32	s0, s1
			break;
 80009d6:	e7d1      	b.n	800097c <_ZN11Calibration9CalibrateE19CalibrationPosition+0x38>
	switch(drone_side)
 80009d8:	eeb0 0a48 	vmov.f32	s0, s16
 80009dc:	e7ce      	b.n	800097c <_ZN11Calibration9CalibrateE19CalibrationPosition+0x38>
}
void Calibration::UpdateMeasuredGValue(CalibrationPosition drone_side, int num_samples)
{
	double avg_filter_output = sum_filter_output / num_samples;

	switch(drone_side)
 80009de:	2d05      	cmp	r5, #5
 80009e0:	d80d      	bhi.n	80009fe <_ZN11Calibration9CalibrateE19CalibrationPosition+0xba>
 80009e2:	e8df f005 	tbb	[pc, r5]
 80009e6:	1d10      	.short	0x1d10
 80009e8:	0344372a 	.word	0x0344372a
		case CalibrationPosition::NOSE_UP:
			nose_up_g = filtered_output;
			nose_up_calibrated = true;
			break;
		case CalibrationPosition::NOSE_DOWN:
			nose_down_g = filtered_output;
 80009ec:	ed94 7b2a 	vldr	d7, [r4, #168]	; 0xa8
			nose_down_calibrated = true;
 80009f0:	2301      	movs	r3, #1
			nose_down_g = filtered_output;
 80009f2:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
			nose_down_calibrated = true;
 80009f6:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
			nose_down_g = filtered_output;
 80009fa:	ed84 7a25 	vstr	s14, [r4, #148]	; 0x94
}
 80009fe:	ecbd 8b02 	vpop	{d8}
 8000a02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			upside_up_g = filtered_output;
 8000a06:	ed94 7b2a 	vldr	d7, [r4, #168]	; 0xa8
			upside_up_calibrated = true;
 8000a0a:	2301      	movs	r3, #1
			upside_up_g = filtered_output;
 8000a0c:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
			upside_up_calibrated = true;
 8000a10:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
}
 8000a14:	ecbd 8b02 	vpop	{d8}
			upside_up_g = filtered_output;
 8000a18:	ed84 7a20 	vstr	s14, [r4, #128]	; 0x80
}
 8000a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			upside_down_g = filtered_output;
 8000a20:	ed94 7b2a 	vldr	d7, [r4, #168]	; 0xa8
			upside_down_calibrated = true;
 8000a24:	2301      	movs	r3, #1
			upside_down_g = filtered_output;
 8000a26:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
			upside_down_calibrated = true;
 8000a2a:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
}
 8000a2e:	ecbd 8b02 	vpop	{d8}
			upside_down_g = filtered_output;
 8000a32:	ed84 7a21 	vstr	s14, [r4, #132]	; 0x84
}
 8000a36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			left_side_g = filtered_output;
 8000a3a:	ed94 7b2a 	vldr	d7, [r4, #168]	; 0xa8
			left_side_calibrated = true;
 8000a3e:	2301      	movs	r3, #1
			left_side_g = filtered_output;
 8000a40:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
			left_side_calibrated = true;
 8000a44:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
}
 8000a48:	ecbd 8b02 	vpop	{d8}
			left_side_g = filtered_output;
 8000a4c:	ed84 7a22 	vstr	s14, [r4, #136]	; 0x88
}
 8000a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			right_side_g = filtered_output;
 8000a54:	ed94 7b2a 	vldr	d7, [r4, #168]	; 0xa8
			right_side_calibrated = true;
 8000a58:	2301      	movs	r3, #1
			right_side_g = filtered_output;
 8000a5a:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
			right_side_calibrated = true;
 8000a5e:	f884 307b 	strb.w	r3, [r4, #123]	; 0x7b
}
 8000a62:	ecbd 8b02 	vpop	{d8}
			right_side_g = filtered_output;
 8000a66:	ed84 7a23 	vstr	s14, [r4, #140]	; 0x8c
}
 8000a6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			nose_up_g = filtered_output;
 8000a6e:	ed94 7b2a 	vldr	d7, [r4, #168]	; 0xa8
			nose_up_calibrated = true;
 8000a72:	2301      	movs	r3, #1
			nose_up_g = filtered_output;
 8000a74:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
			nose_up_calibrated = true;
 8000a78:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
}
 8000a7c:	ecbd 8b02 	vpop	{d8}
			nose_up_g = filtered_output;
 8000a80:	ed84 7a24 	vstr	s14, [r4, #144]	; 0x90
}
 8000a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000a88:	00000000 	.word	0x00000000

08000a8c <_ZN11Calibration14ComputeOffsetsEv>:
	}

}
void Calibration::ComputeOffsets()
{
	accel_offset.x_offset =  (nose_up_g + nose_down_g) / 2;
 8000a8c:	edd0 6a24 	vldr	s13, [r0, #144]	; 0x90
 8000a90:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8000a94:	edd0 4a25 	vldr	s9, [r0, #148]	; 0x94
	accel_offset.y_offset =  (left_side_g + right_side_g)/2;
 8000a98:	ed90 7a22 	vldr	s14, [r0, #136]	; 0x88
 8000a9c:	ed90 5a23 	vldr	s10, [r0, #140]	; 0x8c
	accel_offset.x_offset =  (nose_up_g + nose_down_g) / 2;
 8000aa0:	ee76 6aa4 	vadd.f32	s13, s13, s9
	accel_offset.z_offset =  (upside_up_g + upside_down_g)/2;
 8000aa4:	edd0 7a20 	vldr	s15, [r0, #128]	; 0x80
 8000aa8:	edd0 5a21 	vldr	s11, [r0, #132]	; 0x84
	accel_offset.y_offset =  (left_side_g + right_side_g)/2;
 8000aac:	ee37 7a05 	vadd.f32	s14, s14, s10
	accel_offset.x_offset =  (nose_up_g + nose_down_g) / 2;
 8000ab0:	ee66 6a86 	vmul.f32	s13, s13, s12
	accel_offset.z_offset =  (upside_up_g + upside_down_g)/2;
 8000ab4:	ee77 7aa5 	vadd.f32	s15, s15, s11
	accel_offset.y_offset =  (left_side_g + right_side_g)/2;
 8000ab8:	ee27 7a06 	vmul.f32	s14, s14, s12
	accel_offset.x_offset =  (nose_up_g + nose_down_g) / 2;
 8000abc:	edc0 6a34 	vstr	s13, [r0, #208]	; 0xd0
	accel_offset.z_offset =  (upside_up_g + upside_down_g)/2;
 8000ac0:	ee67 7a86 	vmul.f32	s15, s15, s12
	accel_offset.y_offset =  (left_side_g + right_side_g)/2;
 8000ac4:	ed80 7a35 	vstr	s14, [r0, #212]	; 0xd4
	accel_offset.z_offset =  (upside_up_g + upside_down_g)/2;
 8000ac8:	edc0 7a36 	vstr	s15, [r0, #216]	; 0xd8

	// TODO Compute scaling factor

}
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop

08000ad0 <_ZN11Calibration19CalibrationCompleteEv>:
bool Calibration::CalibrationComplete()
{
	return upside_down_calibrated && upside_up_calibrated &&
 8000ad0:	f890 3079 	ldrb.w	r3, [r0, #121]	; 0x79
		   left_side_calibrated && right_side_calibrated &&
		   nose_up_calibrated && nose_down_calibrated;
 8000ad4:	b16b      	cbz	r3, 8000af2 <_ZN11Calibration19CalibrationCompleteEv+0x22>
	return upside_down_calibrated && upside_up_calibrated &&
 8000ad6:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 8000ada:	b153      	cbz	r3, 8000af2 <_ZN11Calibration19CalibrationCompleteEv+0x22>
		   left_side_calibrated && right_side_calibrated &&
 8000adc:	f890 307a 	ldrb.w	r3, [r0, #122]	; 0x7a
	return upside_down_calibrated && upside_up_calibrated &&
 8000ae0:	b13b      	cbz	r3, 8000af2 <_ZN11Calibration19CalibrationCompleteEv+0x22>
		   left_side_calibrated && right_side_calibrated &&
 8000ae2:	f890 307b 	ldrb.w	r3, [r0, #123]	; 0x7b
 8000ae6:	b123      	cbz	r3, 8000af2 <_ZN11Calibration19CalibrationCompleteEv+0x22>
		   nose_up_calibrated && nose_down_calibrated;
 8000ae8:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
		   left_side_calibrated && right_side_calibrated &&
 8000aec:	b10b      	cbz	r3, 8000af2 <_ZN11Calibration19CalibrationCompleteEv+0x22>
		   nose_up_calibrated && nose_down_calibrated;
 8000aee:	f890 307d 	ldrb.w	r3, [r0, #125]	; 0x7d
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <_ZN11Calibration13CalibrateGyroEv>:

void Calibration::CalibrateGyro()
{
 8000af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000afa:	4604      	mov	r4, r0
	auto start_ms = HAL_GetTick();
	uint32_t ms_elapsed = 0;
	uint32_t ms_record = 5000; // 5 seconds


	uint32_t num_samples = 0;
 8000afc:	2500      	movs	r5, #0
	auto start_ms = HAL_GetTick();
 8000afe:	f001 fb39 	bl	8002174 <HAL_GetTick>

	while (ms_elapsed < ms_record)
 8000b02:	f241 3787 	movw	r7, #4999	; 0x1387
	auto start_ms = HAL_GetTick();
 8000b06:	4606      	mov	r6, r0
	{
		sensor.ReadGyro();
 8000b08:	4620      	mov	r0, r4
		gyro_error = sensor.GetGyroData();
		accumulate_gyro_x += gyro_error.imu_gyro_x;
		accumulate_gyro_y += gyro_error.imu_gyro_y;
		accumulate_gyro_z += gyro_error.imu_gyro_z;

		num_samples++;
 8000b0a:	3501      	adds	r5, #1
		sensor.ReadGyro();
 8000b0c:	f000 fd1c 	bl	8001548 <_ZN10SensorData8ReadGyroEv>
		gyro_error = sensor.GetGyroData();
 8000b10:	4620      	mov	r0, r4
 8000b12:	f000 fd3b 	bl	800158c <_ZN10SensorData11GetGyroDataEv>
		accumulate_gyro_x += gyro_error.imu_gyro_x;
 8000b16:	eeb7 2ac0 	vcvt.f64.f32	d2, s0
		accumulate_gyro_y += gyro_error.imu_gyro_y;
 8000b1a:	eeb7 3ae0 	vcvt.f64.f32	d3, s1

		HAL_Delay(100);
 8000b1e:	2064      	movs	r0, #100	; 0x64
		accumulate_gyro_z += gyro_error.imu_gyro_z;
 8000b20:	eeb7 4ac1 	vcvt.f64.f32	d4, s2
		gyro_error = sensor.GetGyroData();
 8000b24:	ed84 0a1b 	vstr	s0, [r4, #108]	; 0x6c
 8000b28:	edc4 0a1c 	vstr	s1, [r4, #112]	; 0x70
 8000b2c:	ed84 1a1d 	vstr	s2, [r4, #116]	; 0x74
		accumulate_gyro_x += gyro_error.imu_gyro_x;
 8000b30:	ed94 6b2e 	vldr	d6, [r4, #184]	; 0xb8
		accumulate_gyro_y += gyro_error.imu_gyro_y;
 8000b34:	ed94 5b30 	vldr	d5, [r4, #192]	; 0xc0
		accumulate_gyro_z += gyro_error.imu_gyro_z;
 8000b38:	ed94 7b32 	vldr	d7, [r4, #200]	; 0xc8
		accumulate_gyro_x += gyro_error.imu_gyro_x;
 8000b3c:	ee36 6b02 	vadd.f64	d6, d6, d2
		accumulate_gyro_y += gyro_error.imu_gyro_y;
 8000b40:	ee35 5b03 	vadd.f64	d5, d5, d3
		accumulate_gyro_z += gyro_error.imu_gyro_z;
 8000b44:	ee37 7b04 	vadd.f64	d7, d7, d4
		accumulate_gyro_x += gyro_error.imu_gyro_x;
 8000b48:	ed84 6b2e 	vstr	d6, [r4, #184]	; 0xb8
		accumulate_gyro_y += gyro_error.imu_gyro_y;
 8000b4c:	ed84 5b30 	vstr	d5, [r4, #192]	; 0xc0
		accumulate_gyro_z += gyro_error.imu_gyro_z;
 8000b50:	ed84 7b32 	vstr	d7, [r4, #200]	; 0xc8
		HAL_Delay(100);
 8000b54:	f001 fb1a 	bl	800218c <HAL_Delay>
		ms_elapsed = HAL_GetTick() - start_ms;
 8000b58:	f001 fb0c 	bl	8002174 <HAL_GetTick>
 8000b5c:	1b80      	subs	r0, r0, r6
	while (ms_elapsed < ms_record)
 8000b5e:	42b8      	cmp	r0, r7
 8000b60:	d9d2      	bls.n	8000b08 <_ZN11Calibration13CalibrateGyroEv+0x10>
	}

	gyro_offset.x_offset = accumulate_gyro_x / num_samples;
 8000b62:	ee07 5a90 	vmov	s15, r5
 8000b66:	ed94 5b2e 	vldr	d5, [r4, #184]	; 0xb8
 8000b6a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
	gyro_offset.y_offset = accumulate_gyro_y / num_samples;
 8000b6e:	ed94 6b30 	vldr	d6, [r4, #192]	; 0xc0
	gyro_offset.z_offset = accumulate_gyro_z / num_samples;
 8000b72:	ed94 3b32 	vldr	d3, [r4, #200]	; 0xc8
	gyro_offset.x_offset = accumulate_gyro_x / num_samples;
 8000b76:	ee85 4b07 	vdiv.f64	d4, d5, d7
	gyro_offset.y_offset = accumulate_gyro_y / num_samples;
 8000b7a:	ee86 5b07 	vdiv.f64	d5, d6, d7
	gyro_offset.z_offset = accumulate_gyro_z / num_samples;
 8000b7e:	ee83 6b07 	vdiv.f64	d6, d3, d7
	gyro_offset.x_offset = accumulate_gyro_x / num_samples;
 8000b82:	eeb7 4bc4 	vcvt.f32.f64	s8, d4
 8000b86:	ed84 4a37 	vstr	s8, [r4, #220]	; 0xdc
	gyro_offset.y_offset = accumulate_gyro_y / num_samples;
 8000b8a:	eeb7 5bc5 	vcvt.f32.f64	s10, d5
 8000b8e:	ed84 5a38 	vstr	s10, [r4, #224]	; 0xe0
	gyro_offset.z_offset = accumulate_gyro_z / num_samples;
 8000b92:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
 8000b96:	ed84 6a39 	vstr	s12, [r4, #228]	; 0xe4

}
 8000b9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000b9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ba0:	4b3f      	ldr	r3, [pc, #252]	; (8000ca0 <SystemInit+0x104>)
 8000ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ba6:	4a3e      	ldr	r2, [pc, #248]	; (8000ca0 <SystemInit+0x104>)
 8000ba8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000bb0:	4b3b      	ldr	r3, [pc, #236]	; (8000ca0 <SystemInit+0x104>)
 8000bb2:	691b      	ldr	r3, [r3, #16]
 8000bb4:	4a3a      	ldr	r2, [pc, #232]	; (8000ca0 <SystemInit+0x104>)
 8000bb6:	f043 0310 	orr.w	r3, r3, #16
 8000bba:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bbc:	4b39      	ldr	r3, [pc, #228]	; (8000ca4 <SystemInit+0x108>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f003 030f 	and.w	r3, r3, #15
 8000bc4:	2b06      	cmp	r3, #6
 8000bc6:	d807      	bhi.n	8000bd8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bc8:	4b36      	ldr	r3, [pc, #216]	; (8000ca4 <SystemInit+0x108>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f023 030f 	bic.w	r3, r3, #15
 8000bd0:	4a34      	ldr	r2, [pc, #208]	; (8000ca4 <SystemInit+0x108>)
 8000bd2:	f043 0307 	orr.w	r3, r3, #7
 8000bd6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000bd8:	4b33      	ldr	r3, [pc, #204]	; (8000ca8 <SystemInit+0x10c>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a32      	ldr	r2, [pc, #200]	; (8000ca8 <SystemInit+0x10c>)
 8000bde:	f043 0301 	orr.w	r3, r3, #1
 8000be2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000be4:	4b30      	ldr	r3, [pc, #192]	; (8000ca8 <SystemInit+0x10c>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000bea:	4b2f      	ldr	r3, [pc, #188]	; (8000ca8 <SystemInit+0x10c>)
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	492e      	ldr	r1, [pc, #184]	; (8000ca8 <SystemInit+0x10c>)
 8000bf0:	4b2e      	ldr	r3, [pc, #184]	; (8000cac <SystemInit+0x110>)
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bf6:	4b2b      	ldr	r3, [pc, #172]	; (8000ca4 <SystemInit+0x108>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f003 0308 	and.w	r3, r3, #8
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d007      	beq.n	8000c12 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c02:	4b28      	ldr	r3, [pc, #160]	; (8000ca4 <SystemInit+0x108>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f023 030f 	bic.w	r3, r3, #15
 8000c0a:	4a26      	ldr	r2, [pc, #152]	; (8000ca4 <SystemInit+0x108>)
 8000c0c:	f043 0307 	orr.w	r3, r3, #7
 8000c10:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000c12:	4b25      	ldr	r3, [pc, #148]	; (8000ca8 <SystemInit+0x10c>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000c18:	4b23      	ldr	r3, [pc, #140]	; (8000ca8 <SystemInit+0x10c>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000c1e:	4b22      	ldr	r3, [pc, #136]	; (8000ca8 <SystemInit+0x10c>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000c24:	4b20      	ldr	r3, [pc, #128]	; (8000ca8 <SystemInit+0x10c>)
 8000c26:	4a22      	ldr	r2, [pc, #136]	; (8000cb0 <SystemInit+0x114>)
 8000c28:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000c2a:	4b1f      	ldr	r3, [pc, #124]	; (8000ca8 <SystemInit+0x10c>)
 8000c2c:	4a21      	ldr	r2, [pc, #132]	; (8000cb4 <SystemInit+0x118>)
 8000c2e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000c30:	4b1d      	ldr	r3, [pc, #116]	; (8000ca8 <SystemInit+0x10c>)
 8000c32:	4a21      	ldr	r2, [pc, #132]	; (8000cb8 <SystemInit+0x11c>)
 8000c34:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000c36:	4b1c      	ldr	r3, [pc, #112]	; (8000ca8 <SystemInit+0x10c>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000c3c:	4b1a      	ldr	r3, [pc, #104]	; (8000ca8 <SystemInit+0x10c>)
 8000c3e:	4a1e      	ldr	r2, [pc, #120]	; (8000cb8 <SystemInit+0x11c>)
 8000c40:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000c42:	4b19      	ldr	r3, [pc, #100]	; (8000ca8 <SystemInit+0x10c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000c48:	4b17      	ldr	r3, [pc, #92]	; (8000ca8 <SystemInit+0x10c>)
 8000c4a:	4a1b      	ldr	r2, [pc, #108]	; (8000cb8 <SystemInit+0x11c>)
 8000c4c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c4e:	4b16      	ldr	r3, [pc, #88]	; (8000ca8 <SystemInit+0x10c>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c54:	4b14      	ldr	r3, [pc, #80]	; (8000ca8 <SystemInit+0x10c>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a13      	ldr	r2, [pc, #76]	; (8000ca8 <SystemInit+0x10c>)
 8000c5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c5e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c60:	4b11      	ldr	r3, [pc, #68]	; (8000ca8 <SystemInit+0x10c>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000c66:	4b15      	ldr	r3, [pc, #84]	; (8000cbc <SystemInit+0x120>)
 8000c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c6a:	4a14      	ldr	r2, [pc, #80]	; (8000cbc <SystemInit+0x120>)
 8000c6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c70:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000c72:	4b13      	ldr	r3, [pc, #76]	; (8000cc0 <SystemInit+0x124>)
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	4b13      	ldr	r3, [pc, #76]	; (8000cc4 <SystemInit+0x128>)
 8000c78:	4013      	ands	r3, r2
 8000c7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000c7e:	d202      	bcs.n	8000c86 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000c80:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <SystemInit+0x12c>)
 8000c82:	2201      	movs	r2, #1
 8000c84:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000c86:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <SystemInit+0x130>)
 8000c88:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000c8c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000c8e:	4b04      	ldr	r3, [pc, #16]	; (8000ca0 <SystemInit+0x104>)
 8000c90:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c94:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000c96:	bf00      	nop
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	e000ed00 	.word	0xe000ed00
 8000ca4:	52002000 	.word	0x52002000
 8000ca8:	58024400 	.word	0x58024400
 8000cac:	eaf6ed7f 	.word	0xeaf6ed7f
 8000cb0:	02020200 	.word	0x02020200
 8000cb4:	01ff0000 	.word	0x01ff0000
 8000cb8:	01010280 	.word	0x01010280
 8000cbc:	580000c0 	.word	0x580000c0
 8000cc0:	5c001000 	.word	0x5c001000
 8000cc4:	ffff0000 	.word	0xffff0000
 8000cc8:	51008108 	.word	0x51008108
 8000ccc:	52004000 	.word	0x52004000

08000cd0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cd6:	4b1d      	ldr	r3, [pc, #116]	; (8000d4c <MX_DMA_Init+0x7c>)
 8000cd8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cdc:	4a1b      	ldr	r2, [pc, #108]	; (8000d4c <MX_DMA_Init+0x7c>)
 8000cde:	f043 0301 	orr.w	r3, r3, #1
 8000ce2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ce6:	4b19      	ldr	r3, [pc, #100]	; (8000d4c <MX_DMA_Init+0x7c>)
 8000ce8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cec:	f003 0301 	and.w	r3, r3, #1
 8000cf0:	607b      	str	r3, [r7, #4]
 8000cf2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000cf4:	4b15      	ldr	r3, [pc, #84]	; (8000d4c <MX_DMA_Init+0x7c>)
 8000cf6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cfa:	4a14      	ldr	r2, [pc, #80]	; (8000d4c <MX_DMA_Init+0x7c>)
 8000cfc:	f043 0302 	orr.w	r3, r3, #2
 8000d00:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d04:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <MX_DMA_Init+0x7c>)
 8000d06:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d0a:	f003 0302 	and.w	r3, r3, #2
 8000d0e:	603b      	str	r3, [r7, #0]
 8000d10:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 1, 0);
 8000d12:	2200      	movs	r2, #0
 8000d14:	2101      	movs	r1, #1
 8000d16:	2010      	movs	r0, #16
 8000d18:	f001 fb43 	bl	80023a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d1c:	2010      	movs	r0, #16
 8000d1e:	f001 fb5a 	bl	80023d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 1, 0);
 8000d22:	2200      	movs	r2, #0
 8000d24:	2101      	movs	r1, #1
 8000d26:	2011      	movs	r0, #17
 8000d28:	f001 fb3b 	bl	80023a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000d2c:	2011      	movs	r0, #17
 8000d2e:	f001 fb52 	bl	80023d6 <HAL_NVIC_EnableIRQ>

  /* DMA2_Stream7 Interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 1, 0);
 8000d32:	2200      	movs	r2, #0
 8000d34:	2101      	movs	r1, #1
 8000d36:	2046      	movs	r0, #70	; 0x46
 8000d38:	f001 fb33 	bl	80023a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000d3c:	2046      	movs	r0, #70	; 0x46
 8000d3e:	f001 fb4a 	bl	80023d6 <HAL_NVIC_EnableIRQ>

}
 8000d42:	bf00      	nop
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	58024400 	.word	0x58024400

08000d50 <MX_GPIO_Init>:
/** Configure pins
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b088      	sub	sp, #32
 8000d54:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d56:	4b37      	ldr	r3, [pc, #220]	; (8000e34 <MX_GPIO_Init+0xe4>)
 8000d58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d5c:	4a35      	ldr	r2, [pc, #212]	; (8000e34 <MX_GPIO_Init+0xe4>)
 8000d5e:	f043 0320 	orr.w	r3, r3, #32
 8000d62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d66:	4b33      	ldr	r3, [pc, #204]	; (8000e34 <MX_GPIO_Init+0xe4>)
 8000d68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d6c:	f003 0320 	and.w	r3, r3, #32
 8000d70:	61fb      	str	r3, [r7, #28]
 8000d72:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d74:	4b2f      	ldr	r3, [pc, #188]	; (8000e34 <MX_GPIO_Init+0xe4>)
 8000d76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d7a:	4a2e      	ldr	r2, [pc, #184]	; (8000e34 <MX_GPIO_Init+0xe4>)
 8000d7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d84:	4b2b      	ldr	r3, [pc, #172]	; (8000e34 <MX_GPIO_Init+0xe4>)
 8000d86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d8e:	61bb      	str	r3, [r7, #24]
 8000d90:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d92:	4b28      	ldr	r3, [pc, #160]	; (8000e34 <MX_GPIO_Init+0xe4>)
 8000d94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d98:	4a26      	ldr	r2, [pc, #152]	; (8000e34 <MX_GPIO_Init+0xe4>)
 8000d9a:	f043 0301 	orr.w	r3, r3, #1
 8000d9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000da2:	4b24      	ldr	r3, [pc, #144]	; (8000e34 <MX_GPIO_Init+0xe4>)
 8000da4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da8:	f003 0301 	and.w	r3, r3, #1
 8000dac:	617b      	str	r3, [r7, #20]
 8000dae:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000db0:	4b20      	ldr	r3, [pc, #128]	; (8000e34 <MX_GPIO_Init+0xe4>)
 8000db2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000db6:	4a1f      	ldr	r2, [pc, #124]	; (8000e34 <MX_GPIO_Init+0xe4>)
 8000db8:	f043 0310 	orr.w	r3, r3, #16
 8000dbc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dc0:	4b1c      	ldr	r3, [pc, #112]	; (8000e34 <MX_GPIO_Init+0xe4>)
 8000dc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc6:	f003 0310 	and.w	r3, r3, #16
 8000dca:	613b      	str	r3, [r7, #16]
 8000dcc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dce:	4b19      	ldr	r3, [pc, #100]	; (8000e34 <MX_GPIO_Init+0xe4>)
 8000dd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd4:	4a17      	ldr	r2, [pc, #92]	; (8000e34 <MX_GPIO_Init+0xe4>)
 8000dd6:	f043 0302 	orr.w	r3, r3, #2
 8000dda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dde:	4b15      	ldr	r3, [pc, #84]	; (8000e34 <MX_GPIO_Init+0xe4>)
 8000de0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000de4:	f003 0302 	and.w	r3, r3, #2
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dec:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <MX_GPIO_Init+0xe4>)
 8000dee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000df2:	4a10      	ldr	r2, [pc, #64]	; (8000e34 <MX_GPIO_Init+0xe4>)
 8000df4:	f043 0304 	orr.w	r3, r3, #4
 8000df8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dfc:	4b0d      	ldr	r3, [pc, #52]	; (8000e34 <MX_GPIO_Init+0xe4>)
 8000dfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e02:	f003 0304 	and.w	r3, r3, #4
 8000e06:	60bb      	str	r3, [r7, #8]
 8000e08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e0a:	4b0a      	ldr	r3, [pc, #40]	; (8000e34 <MX_GPIO_Init+0xe4>)
 8000e0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e10:	4a08      	ldr	r2, [pc, #32]	; (8000e34 <MX_GPIO_Init+0xe4>)
 8000e12:	f043 0308 	orr.w	r3, r3, #8
 8000e16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e1a:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <MX_GPIO_Init+0xe4>)
 8000e1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e20:	f003 0308 	and.w	r3, r3, #8
 8000e24:	607b      	str	r3, [r7, #4]
 8000e26:	687b      	ldr	r3, [r7, #4]

  // Set LED Ports
  GPIO_Port_Config();
 8000e28:	f000 f806 	bl	8000e38 <GPIO_Port_Config>

}
 8000e2c:	bf00      	nop
 8000e2e:	3720      	adds	r7, #32
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	58024400 	.word	0x58024400

08000e38 <GPIO_Port_Config>:

/* USER CODE BEGIN 2 */
void GPIO_Port_Config(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b086      	sub	sp, #24
 8000e3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3e:	1d3b      	adds	r3, r7, #4
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]
 8000e4a:	611a      	str	r2, [r3, #16]

  // Configure GPIO Pin Output Level:
  //LEDS
  HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_RESET);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	2180      	movs	r1, #128	; 0x80
 8000e50:	4827      	ldr	r0, [pc, #156]	; (8000ef0 <GPIO_Port_Config+0xb8>)
 8000e52:	f004 fb6b 	bl	800552c <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = LED_A_Pin;
 8000e56:	2380      	movs	r3, #128	; 0x80
 8000e58:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e62:	2300      	movs	r3, #0
 8000e64:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_A_GPIO_Port, &GPIO_InitStruct);
 8000e66:	1d3b      	adds	r3, r7, #4
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4821      	ldr	r0, [pc, #132]	; (8000ef0 <GPIO_Port_Config+0xb8>)
 8000e6c:	f004 f9ae 	bl	80051cc <HAL_GPIO_Init>

  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8000e70:	2200      	movs	r2, #0
 8000e72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e76:	481e      	ldr	r0, [pc, #120]	; (8000ef0 <GPIO_Port_Config+0xb8>)
 8000e78:	f004 fb58 	bl	800552c <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = LED_B_Pin;
 8000e7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e80:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e82:	2301      	movs	r3, #1
 8000e84:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e86:	2300      	movs	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_B_GPIO_Port, &GPIO_InitStruct);
 8000e8e:	1d3b      	adds	r3, r7, #4
 8000e90:	4619      	mov	r1, r3
 8000e92:	4817      	ldr	r0, [pc, #92]	; (8000ef0 <GPIO_Port_Config+0xb8>)
 8000e94:	f004 f99a 	bl	80051cc <HAL_GPIO_Init>

  HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_RESET);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e9e:	4815      	ldr	r0, [pc, #84]	; (8000ef4 <GPIO_Port_Config+0xbc>)
 8000ea0:	f004 fb44 	bl	800552c <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = LED_C_Pin;
 8000ea4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ea8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_C_GPIO_Port, &GPIO_InitStruct);
 8000eb6:	1d3b      	adds	r3, r7, #4
 8000eb8:	4619      	mov	r1, r3
 8000eba:	480e      	ldr	r0, [pc, #56]	; (8000ef4 <GPIO_Port_Config+0xbc>)
 8000ebc:	f004 f986 	bl	80051cc <HAL_GPIO_Init>


  HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_RESET);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ec6:	480b      	ldr	r0, [pc, #44]	; (8000ef4 <GPIO_Port_Config+0xbc>)
 8000ec8:	f004 fb30 	bl	800552c <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = LED_D_Pin;
 8000ecc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ed0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eda:	2300      	movs	r3, #0
 8000edc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_D_GPIO_Port, &GPIO_InitStruct);
 8000ede:	1d3b      	adds	r3, r7, #4
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4804      	ldr	r0, [pc, #16]	; (8000ef4 <GPIO_Port_Config+0xbc>)
 8000ee4:	f004 f972 	bl	80051cc <HAL_GPIO_Init>

}
 8000ee8:	bf00      	nop
 8000eea:	3718      	adds	r7, #24
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	58021000 	.word	0x58021000
 8000ef4:	58021400 	.word	0x58021400

08000ef8 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000efc:	4b1b      	ldr	r3, [pc, #108]	; (8000f6c <MX_I2C2_Init+0x74>)
 8000efe:	4a1c      	ldr	r2, [pc, #112]	; (8000f70 <MX_I2C2_Init+0x78>)
 8000f00:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8000f02:	4b1a      	ldr	r3, [pc, #104]	; (8000f6c <MX_I2C2_Init+0x74>)
 8000f04:	4a1b      	ldr	r2, [pc, #108]	; (8000f74 <MX_I2C2_Init+0x7c>)
 8000f06:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000f08:	4b18      	ldr	r3, [pc, #96]	; (8000f6c <MX_I2C2_Init+0x74>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f0e:	4b17      	ldr	r3, [pc, #92]	; (8000f6c <MX_I2C2_Init+0x74>)
 8000f10:	2201      	movs	r2, #1
 8000f12:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f14:	4b15      	ldr	r3, [pc, #84]	; (8000f6c <MX_I2C2_Init+0x74>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000f1a:	4b14      	ldr	r3, [pc, #80]	; (8000f6c <MX_I2C2_Init+0x74>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f20:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <MX_I2C2_Init+0x74>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f26:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <MX_I2C2_Init+0x74>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f2c:	4b0f      	ldr	r3, [pc, #60]	; (8000f6c <MX_I2C2_Init+0x74>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000f32:	480e      	ldr	r0, [pc, #56]	; (8000f6c <MX_I2C2_Init+0x74>)
 8000f34:	f004 fb42 	bl	80055bc <HAL_I2C_Init>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000f3e:	f000 f9dd 	bl	80012fc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f42:	2100      	movs	r1, #0
 8000f44:	4809      	ldr	r0, [pc, #36]	; (8000f6c <MX_I2C2_Init+0x74>)
 8000f46:	f005 fa4e 	bl	80063e6 <HAL_I2CEx_ConfigAnalogFilter>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000f50:	f000 f9d4 	bl	80012fc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000f54:	2100      	movs	r1, #0
 8000f56:	4805      	ldr	r0, [pc, #20]	; (8000f6c <MX_I2C2_Init+0x74>)
 8000f58:	f005 fa90 	bl	800647c <HAL_I2CEx_ConfigDigitalFilter>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000f62:	f000 f9cb 	bl	80012fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	24000370 	.word	0x24000370
 8000f70:	40005800 	.word	0x40005800
 8000f74:	307075b1 	.word	0x307075b1

08000f78 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b0b8      	sub	sp, #224	; 0xe0
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f80:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f90:	f107 0310 	add.w	r3, r7, #16
 8000f94:	22bc      	movs	r2, #188	; 0xbc
 8000f96:	2100      	movs	r1, #0
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f010 f8d1 	bl	8011140 <memset>
  if(i2cHandle->Instance==I2C2)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a2d      	ldr	r2, [pc, #180]	; (8001058 <HAL_I2C_MspInit+0xe0>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d152      	bne.n	800104e <HAL_I2C_MspInit+0xd6>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000fa8:	2308      	movs	r3, #8
 8000faa:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000fac:	2300      	movs	r3, #0
 8000fae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fb2:	f107 0310 	add.w	r3, r7, #16
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f007 fcce 	bl	8008958 <HAL_RCCEx_PeriphCLKConfig>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000fc2:	f000 f99b 	bl	80012fc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc6:	4b25      	ldr	r3, [pc, #148]	; (800105c <HAL_I2C_MspInit+0xe4>)
 8000fc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fcc:	4a23      	ldr	r2, [pc, #140]	; (800105c <HAL_I2C_MspInit+0xe4>)
 8000fce:	f043 0302 	orr.w	r3, r3, #2
 8000fd2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fd6:	4b21      	ldr	r3, [pc, #132]	; (800105c <HAL_I2C_MspInit+0xe4>)
 8000fd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fdc:	f003 0302 	and.w	r3, r3, #2
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000fe4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000fe8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fec:	2312      	movs	r3, #18
 8000fee:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000ffe:	2304      	movs	r3, #4
 8001000:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001004:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001008:	4619      	mov	r1, r3
 800100a:	4815      	ldr	r0, [pc, #84]	; (8001060 <HAL_I2C_MspInit+0xe8>)
 800100c:	f004 f8de 	bl	80051cc <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001010:	4b12      	ldr	r3, [pc, #72]	; (800105c <HAL_I2C_MspInit+0xe4>)
 8001012:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001016:	4a11      	ldr	r2, [pc, #68]	; (800105c <HAL_I2C_MspInit+0xe4>)
 8001018:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800101c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001020:	4b0e      	ldr	r3, [pc, #56]	; (800105c <HAL_I2C_MspInit+0xe4>)
 8001022:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001026:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800102a:	60bb      	str	r3, [r7, #8]
 800102c:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800102e:	2200      	movs	r2, #0
 8001030:	2100      	movs	r1, #0
 8001032:	2021      	movs	r0, #33	; 0x21
 8001034:	f001 f9b5 	bl	80023a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001038:	2021      	movs	r0, #33	; 0x21
 800103a:	f001 f9cc 	bl	80023d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 800103e:	2200      	movs	r2, #0
 8001040:	2100      	movs	r1, #0
 8001042:	2022      	movs	r0, #34	; 0x22
 8001044:	f001 f9ad 	bl	80023a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001048:	2022      	movs	r0, #34	; 0x22
 800104a:	f001 f9c4 	bl	80023d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800104e:	bf00      	nop
 8001050:	37e0      	adds	r7, #224	; 0xe0
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40005800 	.word	0x40005800
 800105c:	58024400 	.word	0x58024400
 8001060:	58020400 	.word	0x58020400
 8001064:	00000000 	.word	0x00000000

08001068 <_Z18SystemClock_Configv>:
///**
//  * @brief System Clock Configuration
//  * @retval None
//  */
void SystemClock_Config(void)
{
 8001068:	b510      	push	{r4, lr}
 800106a:	b09e      	sub	sp, #120	; 0x78
  // Defective warning for missing initialiser member
  RCC_OscInitTypeDef RCC_OscInitStruct = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
 800106c:	224c      	movs	r2, #76	; 0x4c
 800106e:	2100      	movs	r1, #0
 8001070:	a80a      	add	r0, sp, #40	; 0x28
 8001072:	f010 f865 	bl	8011140 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0,0,0,0,0,0,0,0};
 8001076:	2220      	movs	r2, #32
 8001078:	2100      	movs	r1, #0
 800107a:	a802      	add	r0, sp, #8
 800107c:	f010 f860 	bl	8011140 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001080:	2002      	movs	r0, #2
 8001082:	f006 fc23 	bl	80078cc <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001086:	4a32      	ldr	r2, [pc, #200]	; (8001150 <_Z18SystemClock_Configv+0xe8>)
 8001088:	2100      	movs	r1, #0
 800108a:	4b32      	ldr	r3, [pc, #200]	; (8001154 <_Z18SystemClock_Configv+0xec>)
 800108c:	9101      	str	r1, [sp, #4]
 800108e:	6991      	ldr	r1, [r2, #24]
 8001090:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8001094:	6191      	str	r1, [r2, #24]
 8001096:	6991      	ldr	r1, [r2, #24]
 8001098:	f401 4140 	and.w	r1, r1, #49152	; 0xc000
 800109c:	9101      	str	r1, [sp, #4]
 800109e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80010a0:	f041 0101 	orr.w	r1, r1, #1
 80010a4:	62d9      	str	r1, [r3, #44]	; 0x2c
 80010a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010a8:	f003 0301 	and.w	r3, r3, #1
 80010ac:	9301      	str	r3, [sp, #4]
 80010ae:	9b01      	ldr	r3, [sp, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80010b0:	6993      	ldr	r3, [r2, #24]
 80010b2:	049b      	lsls	r3, r3, #18
 80010b4:	d5fc      	bpl.n	80010b0 <_Z18SystemClock_Configv+0x48>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80010b6:	4a28      	ldr	r2, [pc, #160]	; (8001158 <_Z18SystemClock_Configv+0xf0>)
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80010b8:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 60;
 80010ba:	243c      	movs	r4, #60	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = 15;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010bc:	a80a      	add	r0, sp, #40	; 0x28
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80010be:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80010c0:	f023 0303 	bic.w	r3, r3, #3
 80010c4:	f043 0302 	orr.w	r3, r3, #2
 80010c8:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ca:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80010cc:	2200      	movs	r2, #0
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80010ce:	9110      	str	r1, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010d0:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80010d2:	210c      	movs	r1, #12
  RCC_OscInitStruct.PLL.PLLP = 2;
 80010d4:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010d6:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLN = 60;
 80010d8:	9416      	str	r4, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80010da:	921c      	str	r2, [sp, #112]	; 0x70
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80010dc:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8001138 <_Z18SystemClock_Configv+0xd0>
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010e0:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = 15;
 80010e4:	230f      	movs	r3, #15
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80010e6:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80010ea:	e9cd 121a 	strd	r1, r2, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLQ = 15;
 80010ee:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f0:	f006 fc56 	bl	80079a0 <HAL_RCC_OscConfig>
 80010f4:	b108      	cbz	r0, 80010fa <_Z18SystemClock_Configv+0x92>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010f6:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010f8:	e7fe      	b.n	80010f8 <_Z18SystemClock_Configv+0x90>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010fa:	ed9f 7b11 	vldr	d7, [pc, #68]	; 8001140 <_Z18SystemClock_Configv+0xd8>
 80010fe:	2200      	movs	r2, #0
 8001100:	2308      	movs	r3, #8
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001102:	a802      	add	r0, sp, #8
 8001104:	2104      	movs	r1, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001106:	ed8d 7b02 	vstr	d7, [sp, #8]
 800110a:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8001148 <_Z18SystemClock_Configv+0xe0>
 800110e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001112:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001116:	2340      	movs	r3, #64	; 0x40
 8001118:	ed8d 7b06 	vstr	d7, [sp, #24]
 800111c:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001120:	f007 f84c 	bl	80081bc <HAL_RCC_ClockConfig>
 8001124:	b108      	cbz	r0, 800112a <_Z18SystemClock_Configv+0xc2>
 8001126:	b672      	cpsid	i
  while (1)
 8001128:	e7fe      	b.n	8001128 <_Z18SystemClock_Configv+0xc0>
  HAL_PWREx_EnableUSBVoltageDetector();
 800112a:	f006 fc29 	bl	8007980 <HAL_PWREx_EnableUSBVoltageDetector>
}
 800112e:	b01e      	add	sp, #120	; 0x78
 8001130:	bd10      	pop	{r4, pc}
 8001132:	bf00      	nop
 8001134:	f3af 8000 	nop.w
 8001138:	00000021 	.word	0x00000021
 800113c:	00010000 	.word	0x00010000
 8001140:	0000003f 	.word	0x0000003f
 8001144:	00000003 	.word	0x00000003
 8001148:	00000040 	.word	0x00000040
 800114c:	00000040 	.word	0x00000040
 8001150:	58024800 	.word	0x58024800
 8001154:	58000400 	.word	0x58000400
 8001158:	58024400 	.word	0x58024400

0800115c <main>:
{
 800115c:	b530      	push	{r4, r5, lr}
  MPU_Region_InitTypeDef MPU_InitStruct = {0,0,0,0,0,0,0,0,0,0,0};
 800115e:	2400      	movs	r4, #0
{
 8001160:	b0bd      	sub	sp, #244	; 0xf4
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001162:	2501      	movs	r5, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0,0,0,0,0,0,0,0,0,0,0};
 8001164:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8001168:	e9cd 4404 	strd	r4, r4, [sp, #16]
  HAL_MPU_Disable();
 800116c:	f001 f94e 	bl	800240c <HAL_MPU_Disable>
    MPU_InitStruct.BaseAddress = 0x24000000;
 8001170:	f04f 5210 	mov.w	r2, #603979776	; 0x24000000
    MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8001174:	4b5b      	ldr	r3, [pc, #364]	; (80012e4 <main+0x188>)
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001176:	a802      	add	r0, sp, #8
    MPU_InitStruct.BaseAddress = 0x24000000;
 8001178:	9203      	str	r2, [sp, #12]
    MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 800117a:	9304      	str	r3, [sp, #16]
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800117c:	f8ad 5008 	strh.w	r5, [sp, #8]
    MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8001180:	9405      	str	r4, [sp, #20]
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001182:	f001 f97b 	bl	800247c <HAL_MPU_ConfigRegion>
    MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8001186:	4a58      	ldr	r2, [pc, #352]	; (80012e8 <main+0x18c>)
 8001188:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
    MPU_InitStruct.BaseAddress = 0x38000000;
 800118c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001190:	a802      	add	r0, sp, #8
    MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8001192:	f88d 5009 	strb.w	r5, [sp, #9]
    MPU_InitStruct.BaseAddress = 0x38000000;
 8001196:	9103      	str	r1, [sp, #12]
    MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8001198:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800119c:	f001 f96e 	bl	800247c <HAL_MPU_ConfigRegion>
    HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80011a0:	2004      	movs	r0, #4
 80011a2:	f001 f94b 	bl	800243c <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80011a6:	4a51      	ldr	r2, [pc, #324]	; (80012ec <main+0x190>)
 80011a8:	6953      	ldr	r3, [r2, #20]
 80011aa:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
 80011ae:	d111      	bne.n	80011d4 <main+0x78>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80011b0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80011b4:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80011b8:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80011bc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80011c0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80011c4:	6953      	ldr	r3, [r2, #20]
 80011c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011ca:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80011cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80011d0:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80011d4:	4845      	ldr	r0, [pc, #276]	; (80012ec <main+0x190>)
 80011d6:	6943      	ldr	r3, [r0, #20]
 80011d8:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 80011dc:	d126      	bne.n	800122c <main+0xd0>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80011de:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80011e2:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80011e6:	f8d0 4080 	ldr.w	r4, [r0, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80011ea:	f643 7ee0 	movw	lr, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80011ee:	f3c4 3c4e 	ubfx	ip, r4, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80011f2:	f3c4 04c9 	ubfx	r4, r4, #3, #10
 80011f6:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80011fa:	ea0c 010e 	and.w	r1, ip, lr
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80011fe:	4623      	mov	r3, r4
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001200:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001204:	3b01      	subs	r3, #1
 8001206:	1c5d      	adds	r5, r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001208:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 800120c:	d1f8      	bne.n	8001200 <main+0xa4>
    } while(sets-- != 0U);
 800120e:	f1ac 0c20 	sub.w	ip, ip, #32
 8001212:	f11c 0f20 	cmn.w	ip, #32
 8001216:	d1f0      	bne.n	80011fa <main+0x9e>
 8001218:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800121c:	6943      	ldr	r3, [r0, #20]
 800121e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001222:	6143      	str	r3, [r0, #20]
 8001224:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001228:	f3bf 8f6f 	isb	sy
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET)
 800122c:	4a30      	ldr	r2, [pc, #192]	; (80012f0 <main+0x194>)
 800122e:	6813      	ldr	r3, [r2, #0]
 8001230:	0418      	lsls	r0, r3, #16
 8001232:	d503      	bpl.n	800123c <main+0xe0>
    asm("NOP");
 8001234:	bf00      	nop
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET)
 8001236:	6813      	ldr	r3, [r2, #0]
 8001238:	0419      	lsls	r1, r3, #16
 800123a:	d4fb      	bmi.n	8001234 <main+0xd8>
  __HAL_RCC_HSEM_CLK_ENABLE();
 800123c:	4c2c      	ldr	r4, [pc, #176]	; (80012f0 <main+0x194>)
  HAL_Init();
 800123e:	f000 ff13 	bl	8002068 <HAL_Init>
  SystemClock_Config();
 8001242:	f7ff ff11 	bl	8001068 <_Z18SystemClock_Configv>
HAL_HSEM_FastTake(HSEM_ID_0);
 8001246:	2000      	movs	r0, #0
  __HAL_RCC_HSEM_CLK_ENABLE();
 8001248:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800124c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001250:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8001254:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8001258:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800125c:	9301      	str	r3, [sp, #4]
 800125e:	9b01      	ldr	r3, [sp, #4]
HAL_HSEM_FastTake(HSEM_ID_0);
 8001260:	f004 f97e 	bl	8005560 <HAL_HSEM_FastTake>
HAL_HSEM_Release(HSEM_ID_0,0);
 8001264:	2100      	movs	r1, #0
 8001266:	4608      	mov	r0, r1
 8001268:	f004 f994 	bl	8005594 <HAL_HSEM_Release>
 800126c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001270:	e001      	b.n	8001276 <main+0x11a>
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001272:	3b01      	subs	r3, #1
 8001274:	d034      	beq.n	80012e0 <main+0x184>
 8001276:	6822      	ldr	r2, [r4, #0]
 8001278:	0412      	lsls	r2, r2, #16
 800127a:	d5fa      	bpl.n	8001272 <main+0x116>
  MX_GPIO_Init();
 800127c:	f7ff fd68 	bl	8000d50 <MX_GPIO_Init>
  MX_DMA_Init();
 8001280:	f7ff fd26 	bl	8000cd0 <MX_DMA_Init>
  MX_UART4_Init();
 8001284:	f000 fcdc 	bl	8001c40 <MX_UART4_Init>
  MX_I2C2_Init();
 8001288:	f7ff fe36 	bl	8000ef8 <MX_I2C2_Init>
  MX_TIM1_Init();
 800128c:	f000 fb30 	bl	80018f0 <MX_TIM1_Init>
  MX_UART7_Init();
 8001290:	f000 fd1e 	bl	8001cd0 <MX_UART7_Init>
  MX_USB_DEVICE_Init();
 8001294:	f00f f99c 	bl	80105d0 <MX_USB_DEVICE_Init>
  DWT_Init();
 8001298:	f000 f85e 	bl	8001358 <_Z8DWT_Initv>
  __HAL_UART_ENABLE_IT(&huart4, UART_IT_IDLE);
 800129c:	4815      	ldr	r0, [pc, #84]	; (80012f4 <main+0x198>)
  HAL_UART_Receive_DMA(&huart4, sbus_buffer, SBUS_PACKET_LEN);
 800129e:	2219      	movs	r2, #25
 80012a0:	4915      	ldr	r1, [pc, #84]	; (80012f8 <main+0x19c>)
  __HAL_UART_ENABLE_IT(&huart4, UART_IT_IDLE);
 80012a2:	6804      	ldr	r4, [r0, #0]
 80012a4:	6823      	ldr	r3, [r4, #0]
 80012a6:	f043 0310 	orr.w	r3, r3, #16
 80012aa:	6023      	str	r3, [r4, #0]
  HAL_UART_Receive_DMA(&huart4, sbus_buffer, SBUS_PACKET_LEN);
 80012ac:	f00a fabe 	bl	800b82c <HAL_UART_Receive_DMA>
  Calibration imu_calib;
 80012b0:	a802      	add	r0, sp, #8
 80012b2:	f7ff f9ef 	bl	8000694 <_ZN11CalibrationC1Ev>
 80012b6:	e005      	b.n	80012c4 <main+0x168>
	  auto side = imu_calib.CalibrateNextPosition();
 80012b8:	f7ff fa1e 	bl	80006f8 <_ZN11Calibration21CalibrateNextPositionEv>
 80012bc:	4601      	mov	r1, r0
	  imu_calib.Calibrate(side);
 80012be:	a802      	add	r0, sp, #8
 80012c0:	f7ff fb40 	bl	8000944 <_ZN11Calibration9CalibrateE19CalibrationPosition>
  while(!imu_calib.CalibrationComplete())
 80012c4:	a802      	add	r0, sp, #8
 80012c6:	f7ff fc03 	bl	8000ad0 <_ZN11Calibration19CalibrationCompleteEv>
 80012ca:	4603      	mov	r3, r0
	  auto side = imu_calib.CalibrateNextPosition();
 80012cc:	a802      	add	r0, sp, #8
  while(!imu_calib.CalibrationComplete())
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d0f2      	beq.n	80012b8 <main+0x15c>
  imu_calib.ComputeOffsets();
 80012d2:	a802      	add	r0, sp, #8
 80012d4:	f7ff fbda 	bl	8000a8c <_ZN11Calibration14ComputeOffsetsEv>
  imu_calib.CalibrateGyro();
 80012d8:	a802      	add	r0, sp, #8
 80012da:	f7ff fc0d 	bl	8000af8 <_ZN11Calibration13CalibrateGyroEv>
  while (1)
 80012de:	e7fe      	b.n	80012de <main+0x182>
  __ASM volatile ("cpsid i" : : : "memory");
 80012e0:	b672      	cpsid	i
  while (1)
 80012e2:	e7fe      	b.n	80012e2 <main+0x186>
 80012e4:	03000012 	.word	0x03000012
 80012e8:	0301000f 	.word	0x0301000f
 80012ec:	e000ed00 	.word	0xe000ed00
 80012f0:	58024400 	.word	0x58024400
 80012f4:	240004c8 	.word	0x240004c8
 80012f8:	2400045c 	.word	0x2400045c

080012fc <Error_Handler>:
 80012fc:	b672      	cpsid	i
 80012fe:	e7fe      	b.n	80012fe <Error_Handler+0x2>

08001300 <HAL_UART_RxCpltCallback>:
  /* USER CODE END Error_Handler_Debug */
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  if (huart->Instance == UART4)
 8001300:	4b0b      	ldr	r3, [pc, #44]	; (8001330 <HAL_UART_RxCpltCallback+0x30>)
 8001302:	6802      	ldr	r2, [r0, #0]
 8001304:	429a      	cmp	r2, r3
 8001306:	d000      	beq.n	800130a <HAL_UART_RxCpltCallback+0xa>
 8001308:	4770      	bx	lr
  {
    if(sbus_buffer[0] != SBUS_HEADER)
 800130a:	490a      	ldr	r1, [pc, #40]	; (8001334 <HAL_UART_RxCpltCallback+0x34>)
 800130c:	780b      	ldrb	r3, [r1, #0]
 800130e:	2b0f      	cmp	r3, #15
 8001310:	d00a      	beq.n	8001328 <HAL_UART_RxCpltCallback+0x28>
{
 8001312:	b510      	push	{r4, lr}
    {
      HAL_UART_DMAStop(&huart4);
 8001314:	4c08      	ldr	r4, [pc, #32]	; (8001338 <HAL_UART_RxCpltCallback+0x38>)
 8001316:	4620      	mov	r0, r4
 8001318:	f00a face 	bl	800b8b8 <HAL_UART_DMAStop>
      __HAL_UART_ENABLE_IT(&huart4, UART_IT_IDLE);
 800131c:	6822      	ldr	r2, [r4, #0]
 800131e:	6813      	ldr	r3, [r2, #0]
 8001320:	f043 0310 	orr.w	r3, r3, #16
 8001324:	6013      	str	r3, [r2, #0]
    {
    	frkskyRC.UpdateSbus(sbus_buffer);
    }
  }

}
 8001326:	bd10      	pop	{r4, pc}
    	frkskyRC.UpdateSbus(sbus_buffer);
 8001328:	4804      	ldr	r0, [pc, #16]	; (800133c <HAL_UART_RxCpltCallback+0x3c>)
 800132a:	f000 b83d 	b.w	80013a8 <_ZN14SbusController10UpdateSbusEPh>
 800132e:	bf00      	nop
 8001330:	40004c00 	.word	0x40004c00
 8001334:	2400045c 	.word	0x2400045c
 8001338:	240004c8 	.word	0x240004c8
 800133c:	240003bc 	.word	0x240003bc

08001340 <_GLOBAL__sub_I_frkskyRC>:
SbusController frkskyRC;
 8001340:	4801      	ldr	r0, [pc, #4]	; (8001348 <_GLOBAL__sub_I_frkskyRC+0x8>)
 8001342:	f000 b82d 	b.w	80013a0 <_ZN14SbusControllerC1Ev>
 8001346:	bf00      	nop
 8001348:	240003bc 	.word	0x240003bc

0800134c <_GLOBAL__sub_D_frkskyRC>:
 800134c:	4801      	ldr	r0, [pc, #4]	; (8001354 <_GLOBAL__sub_D_frkskyRC+0x8>)
 800134e:	f000 b829 	b.w	80013a4 <_ZN14SbusControllerD1Ev>
 8001352:	bf00      	nop
 8001354:	240003bc 	.word	0x240003bc

08001358 <_Z8DWT_Initv>:



void DWT_Init(void)
{
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001358:	4906      	ldr	r1, [pc, #24]	; (8001374 <_Z8DWT_Initv+0x1c>)
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800135a:	4a07      	ldr	r2, [pc, #28]	; (8001378 <_Z8DWT_Initv+0x20>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800135c:	f8d1 30fc 	ldr.w	r3, [r1, #252]	; 0xfc
 8001360:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001364:	f8c1 30fc 	str.w	r3, [r1, #252]	; 0xfc
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001368:	6813      	ldr	r3, [r2, #0]
 800136a:	f043 0301 	orr.w	r3, r3, #1
 800136e:	6013      	str	r3, [r2, #0]
}
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	e000ed00 	.word	0xe000ed00
 8001378:	e0001000 	.word	0xe0001000

0800137c <_Z6microsv>:
  DWT->CYCCNT = 0U;
  while(DWT->CYCCNT < us_count_tic);
}

 uint32_t micros(void){
  return  DWT->CYCCNT / (SystemCoreClock / 1000000U);
 800137c:	4b05      	ldr	r3, [pc, #20]	; (8001394 <_Z6microsv+0x18>)
 800137e:	4a06      	ldr	r2, [pc, #24]	; (8001398 <_Z6microsv+0x1c>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4906      	ldr	r1, [pc, #24]	; (800139c <_Z6microsv+0x20>)
 8001384:	fba2 2303 	umull	r2, r3, r2, r3
 8001388:	6848      	ldr	r0, [r1, #4]
 800138a:	0c9b      	lsrs	r3, r3, #18
}
 800138c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	24000000 	.word	0x24000000
 8001398:	431bde83 	.word	0x431bde83
 800139c:	e0001000 	.word	0xe0001000

080013a0 <_ZN14SbusControllerC1Ev>:
#include <sbus.h>

SbusController::SbusController()
{

}
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop

080013a4 <_ZN14SbusControllerD1Ev>:

SbusController::~SbusController()
{

}
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop

080013a8 <_ZN14SbusController10UpdateSbusEPh>:

void SbusController::UpdateSbus(uint8_t *buf)
{
	sbus_channel.channel1 = (buf[1] >> 0 | (buf[2] << 8)) & 0x07FF;
 80013a8:	f8b1 3001 	ldrh.w	r3, [r1, #1]
	else
	{
	  channel_17 = 0;
	}
	// Failsafe
	failsafe_status = SBUS_SIGNAL_OK;
 80013ac:	2200      	movs	r2, #0
	sbus_channel.channel1 = (buf[1] >> 0 | (buf[2] << 8)) & 0x07FF;
 80013ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013b2:	8083      	strh	r3, [r0, #4]
	sbus_channel.channel2 = (buf[2] >> 3 | (buf[3] << 5)) & 0x07FF;
 80013b4:	78cb      	ldrb	r3, [r1, #3]
 80013b6:	f891 c002 	ldrb.w	ip, [r1, #2]
 80013ba:	015b      	lsls	r3, r3, #5
 80013bc:	ea43 03dc 	orr.w	r3, r3, ip, lsr #3
 80013c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013c4:	80c3      	strh	r3, [r0, #6]
	sbus_channel.channel3 = (buf[3] >> 6 | (buf[4] << 2) | buf[5] << 10) & 0x07FF;
 80013c6:	794b      	ldrb	r3, [r1, #5]
 80013c8:	f891 c004 	ldrb.w	ip, [r1, #4]
 80013cc:	029b      	lsls	r3, r3, #10
 80013ce:	ea43 038c 	orr.w	r3, r3, ip, lsl #2
 80013d2:	f891 c003 	ldrb.w	ip, [r1, #3]
 80013d6:	ea43 139c 	orr.w	r3, r3, ip, lsr #6
 80013da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013de:	8103      	strh	r3, [r0, #8]
	sbus_channel.channel4 = (buf[5] >> 1 | (buf[6] << 7)) & 0x07FF;
 80013e0:	798b      	ldrb	r3, [r1, #6]
 80013e2:	f891 c005 	ldrb.w	ip, [r1, #5]
 80013e6:	01db      	lsls	r3, r3, #7
 80013e8:	ea43 035c 	orr.w	r3, r3, ip, lsr #1
 80013ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013f0:	8143      	strh	r3, [r0, #10]
	sbus_channel.channel5 = (buf[6] >> 4 | (buf[7] << 4)) & 0x07FF;
 80013f2:	79cb      	ldrb	r3, [r1, #7]
 80013f4:	f891 c006 	ldrb.w	ip, [r1, #6]
 80013f8:	011b      	lsls	r3, r3, #4
 80013fa:	ea43 131c 	orr.w	r3, r3, ip, lsr #4
 80013fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001402:	8183      	strh	r3, [r0, #12]
	sbus_channel.channel6 = (buf[7] >> 7 | (buf[8] << 1) | buf[9] << 9) & 0x07FF;
 8001404:	7a4b      	ldrb	r3, [r1, #9]
 8001406:	f891 c008 	ldrb.w	ip, [r1, #8]
 800140a:	025b      	lsls	r3, r3, #9
 800140c:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
 8001410:	f891 c007 	ldrb.w	ip, [r1, #7]
 8001414:	ea43 13dc 	orr.w	r3, r3, ip, lsr #7
 8001418:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800141c:	81c3      	strh	r3, [r0, #14]
	sbus_channel.channel7 = (buf[9] >> 2 | (buf[10] << 6)) & 0x07FF;
 800141e:	7a8b      	ldrb	r3, [r1, #10]
 8001420:	f891 c009 	ldrb.w	ip, [r1, #9]
 8001424:	019b      	lsls	r3, r3, #6
 8001426:	ea43 039c 	orr.w	r3, r3, ip, lsr #2
 800142a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800142e:	8203      	strh	r3, [r0, #16]
	sbus_channel.channel8 = (buf[10] >> 5 | (buf[11] << 3)) & 0x07FF;
 8001430:	7acb      	ldrb	r3, [r1, #11]
 8001432:	f891 c00a 	ldrb.w	ip, [r1, #10]
 8001436:	00db      	lsls	r3, r3, #3
 8001438:	ea43 135c 	orr.w	r3, r3, ip, lsr #5
 800143c:	8243      	strh	r3, [r0, #18]
	sbus_channel.channel9 = (buf[12] << 0 | (buf[13] << 8)) & 0x07FF;
 800143e:	898b      	ldrh	r3, [r1, #12]
 8001440:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001444:	8283      	strh	r3, [r0, #20]
	sbus_channel.channel10 = (buf[13] >> 3 | (buf[14] << 5)) & 0x07FF;
 8001446:	7b8b      	ldrb	r3, [r1, #14]
 8001448:	f891 c00d 	ldrb.w	ip, [r1, #13]
 800144c:	015b      	lsls	r3, r3, #5
 800144e:	ea43 03dc 	orr.w	r3, r3, ip, lsr #3
 8001452:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001456:	82c3      	strh	r3, [r0, #22]
	sbus_channel.channel11 = (buf[14] >> 6 | (buf[15] << 2) | buf[16] << 10) & 0x07FF;
 8001458:	7c0b      	ldrb	r3, [r1, #16]
 800145a:	f891 c00f 	ldrb.w	ip, [r1, #15]
 800145e:	029b      	lsls	r3, r3, #10
 8001460:	ea43 038c 	orr.w	r3, r3, ip, lsl #2
 8001464:	f891 c00e 	ldrb.w	ip, [r1, #14]
 8001468:	ea43 139c 	orr.w	r3, r3, ip, lsr #6
 800146c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001470:	8303      	strh	r3, [r0, #24]
	sbus_channel.channel12 = (buf[16] >> 1 | (buf[17] << 7)) & 0x07FF;
 8001472:	7c4b      	ldrb	r3, [r1, #17]
 8001474:	f891 c010 	ldrb.w	ip, [r1, #16]
 8001478:	01db      	lsls	r3, r3, #7
 800147a:	ea43 035c 	orr.w	r3, r3, ip, lsr #1
 800147e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001482:	8343      	strh	r3, [r0, #26]
	sbus_channel.channel13 = (buf[17] >> 4 | (buf[18] << 4)) & 0x07FF;
 8001484:	7c8b      	ldrb	r3, [r1, #18]
 8001486:	f891 c011 	ldrb.w	ip, [r1, #17]
 800148a:	011b      	lsls	r3, r3, #4
 800148c:	ea43 131c 	orr.w	r3, r3, ip, lsr #4
 8001490:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001494:	8383      	strh	r3, [r0, #28]
	sbus_channel.channel14 = (buf[18] >> 7 | (buf[19] << 1) | buf[20] << 9) & 0x07FF;
 8001496:	7d0b      	ldrb	r3, [r1, #20]
 8001498:	f891 c013 	ldrb.w	ip, [r1, #19]
 800149c:	025b      	lsls	r3, r3, #9
 800149e:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
 80014a2:	f891 c012 	ldrb.w	ip, [r1, #18]
 80014a6:	ea43 13dc 	orr.w	r3, r3, ip, lsr #7
 80014aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014ae:	83c3      	strh	r3, [r0, #30]
	sbus_channel.channel15 = (buf[20] >> 2 | (buf[21] << 6)) & 0x07FF;
 80014b0:	7d4b      	ldrb	r3, [r1, #21]
 80014b2:	f891 c014 	ldrb.w	ip, [r1, #20]
 80014b6:	019b      	lsls	r3, r3, #6
 80014b8:	ea43 039c 	orr.w	r3, r3, ip, lsr #2
 80014bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014c0:	8403      	strh	r3, [r0, #32]
	sbus_channel.channel16 = (buf[21] >> 5 | (buf[22] << 3)) & 0x07FF;
 80014c2:	7d8b      	ldrb	r3, [r1, #22]
 80014c4:	f891 c015 	ldrb.w	ip, [r1, #21]
 80014c8:	00db      	lsls	r3, r3, #3
 80014ca:	ea43 135c 	orr.w	r3, r3, ip, lsr #5
 80014ce:	8443      	strh	r3, [r0, #34]	; 0x22
	if (buf[24] & (1 << 0))
 80014d0:	7e0b      	ldrb	r3, [r1, #24]
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	8003      	strh	r3, [r0, #0]
	if (buf[24] & (1 << 1))
 80014d8:	7e0b      	ldrb	r3, [r1, #24]
	failsafe_status = SBUS_SIGNAL_OK;
 80014da:	7082      	strb	r2, [r0, #2]
	if (buf[24] & (1 << 1))
 80014dc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80014e0:	8003      	strh	r3, [r0, #0]
	if (buf[24] & (1 << 2))
 80014e2:	7e0b      	ldrb	r3, [r1, #24]
 80014e4:	075a      	lsls	r2, r3, #29
 80014e6:	d502      	bpl.n	80014ee <_ZN14SbusController10UpdateSbusEPh+0x146>
	{
	  failsafe_status = SBUS_SIGNAL_LOST;
 80014e8:	2301      	movs	r3, #1
 80014ea:	7083      	strb	r3, [r0, #2]
	}

	if (buf[24] & (1 << 3))
 80014ec:	7e0b      	ldrb	r3, [r1, #24]
 80014ee:	071b      	lsls	r3, r3, #28
 80014f0:	d501      	bpl.n	80014f6 <_ZN14SbusController10UpdateSbusEPh+0x14e>
	{
	  failsafe_status = SBUS_SIGNAL_FAILSAFE;
 80014f2:	2301      	movs	r3, #1
 80014f4:	7083      	strb	r3, [r0, #2]
	}
}
 80014f6:	4770      	bx	lr

080014f8 <_ZN10SensorDataC1Ev>:
#include <sensors.hpp>


SensorData::SensorData()
 80014f8:	4906      	ldr	r1, [pc, #24]	; (8001514 <_ZN10SensorDataC1Ev+0x1c>)
 80014fa:	4a07      	ldr	r2, [pc, #28]	; (8001518 <_ZN10SensorDataC1Ev+0x20>)
 80014fc:	b410      	push	{r4}
 80014fe:	e9c0 1200 	strd	r1, r2, [r0]
 8001502:	4c06      	ldr	r4, [pc, #24]	; (800151c <_ZN10SensorDataC1Ev+0x24>)
 8001504:	3160      	adds	r1, #96	; 0x60
 8001506:	3260      	adds	r2, #96	; 0x60
 8001508:	e9c0 4102 	strd	r4, r1, [r0, #8]
 800150c:	6102      	str	r2, [r0, #16]
{

}
 800150e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	38001000 	.word	0x38001000
 8001518:	38001020 	.word	0x38001020
 800151c:	38001040 	.word	0x38001040

08001520 <_ZN10SensorData7ReadAccEv>:
	  HAL_HSEM_Release(HSEM_ID_0,0);

}

void SensorData::ReadAcc()
{
 8001520:	b510      	push	{r4, lr}
 8001522:	4604      	mov	r4, r0
	if(HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK)
 8001524:	2000      	movs	r0, #0
 8001526:	f004 f81b 	bl	8005560 <HAL_HSEM_FastTake>
 800152a:	b930      	cbnz	r0, 800153a <_ZN10SensorData7ReadAccEv+0x1a>
	  {
	      acc_values.imu_acc_x = acc_values_m7->imu_acc_x;
 800152c:	6823      	ldr	r3, [r4, #0]
 800152e:	6819      	ldr	r1, [r3, #0]
	      acc_values.imu_acc_y = acc_values_m7->imu_acc_y;
 8001530:	685a      	ldr	r2, [r3, #4]
	      acc_values.imu_acc_z = acc_values_m7->imu_acc_z;
 8001532:	689b      	ldr	r3, [r3, #8]
	      acc_values.imu_acc_x = acc_values_m7->imu_acc_x;
 8001534:	6361      	str	r1, [r4, #52]	; 0x34
	      acc_values.imu_acc_y = acc_values_m7->imu_acc_y;
 8001536:	63a2      	str	r2, [r4, #56]	; 0x38
	      acc_values.imu_acc_z = acc_values_m7->imu_acc_z;
 8001538:	63e3      	str	r3, [r4, #60]	; 0x3c
	  }
	  HAL_HSEM_Release(HSEM_ID_0,0);
 800153a:	2100      	movs	r1, #0
}
 800153c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	  HAL_HSEM_Release(HSEM_ID_0,0);
 8001540:	4608      	mov	r0, r1
 8001542:	f004 b827 	b.w	8005594 <HAL_HSEM_Release>
 8001546:	bf00      	nop

08001548 <_ZN10SensorData8ReadGyroEv>:
	  }
	  HAL_HSEM_Release(HSEM_ID_0,0);
}

void SensorData::ReadGyro()
{
 8001548:	b510      	push	{r4, lr}
 800154a:	4604      	mov	r4, r0
	  if(HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK)
 800154c:	2000      	movs	r0, #0
 800154e:	f004 f807 	bl	8005560 <HAL_HSEM_FastTake>
 8001552:	b930      	cbnz	r0, 8001562 <_ZN10SensorData8ReadGyroEv+0x1a>
	  {
	     gyro_values.imu_gyro_x = gyro_values_m7->imu_gyro_x;
 8001554:	6863      	ldr	r3, [r4, #4]
 8001556:	6819      	ldr	r1, [r3, #0]
	     gyro_values.imu_gyro_y = gyro_values_m7->imu_gyro_y;
 8001558:	685a      	ldr	r2, [r3, #4]
	     gyro_values.imu_gyro_z = gyro_values_m7->imu_gyro_z;
 800155a:	689b      	ldr	r3, [r3, #8]
	     gyro_values.imu_gyro_x = gyro_values_m7->imu_gyro_x;
 800155c:	6421      	str	r1, [r4, #64]	; 0x40
	     gyro_values.imu_gyro_y = gyro_values_m7->imu_gyro_y;
 800155e:	6462      	str	r2, [r4, #68]	; 0x44
	     gyro_values.imu_gyro_z = gyro_values_m7->imu_gyro_z;
 8001560:	64a3      	str	r3, [r4, #72]	; 0x48
	  }
	  HAL_HSEM_Release(HSEM_ID_0,0);
 8001562:	2100      	movs	r1, #0
}
 8001564:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	  HAL_HSEM_Release(HSEM_ID_0,0);
 8001568:	4608      	mov	r0, r1
 800156a:	f004 b813 	b.w	8005594 <HAL_HSEM_Release>
 800156e:	bf00      	nop

08001570 <_ZN10SensorData10GetAccDataEv>:

acc_data SensorData::GetAccData()
{
 8001570:	b088      	sub	sp, #32
	return acc_values;
 8001572:	3034      	adds	r0, #52	; 0x34
 8001574:	ab08      	add	r3, sp, #32
 8001576:	c807      	ldmia	r0, {r0, r1, r2}
 8001578:	e903 0007 	stmdb	r3, {r0, r1, r2}
}
 800157c:	eddd 0a06 	vldr	s1, [sp, #24]
 8001580:	ed9d 1a07 	vldr	s2, [sp, #28]
 8001584:	ed9d 0a05 	vldr	s0, [sp, #20]
 8001588:	b008      	add	sp, #32
 800158a:	4770      	bx	lr

0800158c <_ZN10SensorData11GetGyroDataEv>:
gyro_data SensorData::GetGyroData()
{
 800158c:	b088      	sub	sp, #32
	return gyro_values;
 800158e:	3040      	adds	r0, #64	; 0x40
 8001590:	ab08      	add	r3, sp, #32
 8001592:	c807      	ldmia	r0, {r0, r1, r2}
 8001594:	e903 0007 	stmdb	r3, {r0, r1, r2}
}
 8001598:	eddd 0a06 	vldr	s1, [sp, #24]
 800159c:	ed9d 1a07 	vldr	s2, [sp, #28]
 80015a0:	ed9d 0a05 	vldr	s0, [sp, #20]
 80015a4:	b008      	add	sp, #32
 80015a6:	4770      	bx	lr

080015a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ae:	4b0a      	ldr	r3, [pc, #40]	; (80015d8 <HAL_MspInit+0x30>)
 80015b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80015b4:	4a08      	ldr	r2, [pc, #32]	; (80015d8 <HAL_MspInit+0x30>)
 80015b6:	f043 0302 	orr.w	r3, r3, #2
 80015ba:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80015be:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <HAL_MspInit+0x30>)
 80015c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80015c4:	f003 0302 	and.w	r3, r3, #2
 80015c8:	607b      	str	r3, [r7, #4]
 80015ca:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	58024400 	.word	0x58024400

080015dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015e0:	e7fe      	b.n	80015e0 <NMI_Handler+0x4>

080015e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015e6:	e7fe      	b.n	80015e6 <HardFault_Handler+0x4>

080015e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015ec:	e7fe      	b.n	80015ec <MemManage_Handler+0x4>

080015ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015f2:	e7fe      	b.n	80015f2 <BusFault_Handler+0x4>

080015f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015f8:	e7fe      	b.n	80015f8 <UsageFault_Handler+0x4>

080015fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015fa:	b480      	push	{r7}
 80015fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001616:	b480      	push	{r7}
 8001618:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001628:	f000 fd90 	bl	800214c <HAL_IncTick>

  HAL_SYSTICK_IRQHandler();
 800162c:	f000 ff6a 	bl	8002504 <HAL_SYSTICK_IRQHandler>

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001630:	bf00      	nop
 8001632:	bd80      	pop	{r7, pc}

08001634 <DMA2_Stream7_IRQHandler>:
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32h7xx.s).                    */
/******************************************************************************/

void DMA2_Stream7_IRQHandler(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001638:	4802      	ldr	r0, [pc, #8]	; (8001644 <DMA2_Stream7_IRQHandler+0x10>)
 800163a:	f002 fa9b 	bl	8003b74 <HAL_DMA_IRQHandler>
}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	240006d8 	.word	0x240006d8

08001648 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 800164c:	4802      	ldr	r0, [pc, #8]	; (8001658 <DMA1_Stream5_IRQHandler+0x10>)
 800164e:	f002 fa91 	bl	8003b74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	240005e8 	.word	0x240005e8

0800165c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_tx);
 8001660:	4802      	ldr	r0, [pc, #8]	; (800166c <DMA1_Stream6_IRQHandler+0x10>)
 8001662:	f002 fa87 	bl	8003b74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	24000660 	.word	0x24000660

08001670 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001674:	4802      	ldr	r0, [pc, #8]	; (8001680 <TIM1_BRK_IRQHandler+0x10>)
 8001676:	f009 f809 	bl	800a68c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	2400047c 	.word	0x2400047c

08001684 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001688:	4802      	ldr	r0, [pc, #8]	; (8001694 <TIM1_UP_IRQHandler+0x10>)
 800168a:	f008 ffff 	bl	800a68c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	2400047c 	.word	0x2400047c

08001698 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800169c:	4802      	ldr	r0, [pc, #8]	; (80016a8 <TIM1_TRG_COM_IRQHandler+0x10>)
 800169e:	f008 fff5 	bl	800a68c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	2400047c 	.word	0x2400047c

080016ac <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80016b0:	4802      	ldr	r0, [pc, #8]	; (80016bc <TIM1_CC_IRQHandler+0x10>)
 80016b2:	f008 ffeb 	bl	800a68c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	2400047c 	.word	0x2400047c

080016c0 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80016c4:	4802      	ldr	r0, [pc, #8]	; (80016d0 <I2C2_EV_IRQHandler+0x10>)
 80016c6:	f004 f809 	bl	80056dc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	24000370 	.word	0x24000370

080016d4 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80016d8:	4802      	ldr	r0, [pc, #8]	; (80016e4 <I2C2_ER_IRQHandler+0x10>)
 80016da:	f004 f819 	bl	8005710 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	24000370 	.word	0x24000370

080016e8 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80016ec:	4802      	ldr	r0, [pc, #8]	; (80016f8 <SDMMC1_IRQHandler+0x10>)
 80016ee:	f008 fc9b 	bl	800a028 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	240003e0 	.word	0x240003e0

080016fc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
  if(__HAL_UART_GET_IT_SOURCE(&huart4, UART_IT_IDLE))
 8001700:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <UART4_IRQHandler+0x38>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0310 	and.w	r3, r3, #16
 800170a:	2b00      	cmp	r3, #0
 800170c:	d00c      	beq.n	8001728 <UART4_IRQHandler+0x2c>
  {
     HAL_UART_Receive_DMA(&huart4, sbus_buffer, SBUS_PACKET_LEN);
 800170e:	2219      	movs	r2, #25
 8001710:	4909      	ldr	r1, [pc, #36]	; (8001738 <UART4_IRQHandler+0x3c>)
 8001712:	4808      	ldr	r0, [pc, #32]	; (8001734 <UART4_IRQHandler+0x38>)
 8001714:	f00a f88a 	bl	800b82c <HAL_UART_Receive_DMA>
    __HAL_UART_DISABLE_IT(&huart4, UART_IT_IDLE);
 8001718:	4b06      	ldr	r3, [pc, #24]	; (8001734 <UART4_IRQHandler+0x38>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	4b05      	ldr	r3, [pc, #20]	; (8001734 <UART4_IRQHandler+0x38>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f022 0210 	bic.w	r2, r2, #16
 8001726:	601a      	str	r2, [r3, #0]
  }
  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001728:	4802      	ldr	r0, [pc, #8]	; (8001734 <UART4_IRQHandler+0x38>)
 800172a:	f00a f935 	bl	800b998 <HAL_UART_IRQHandler>

  /* USER CODE END UART4_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	240004c8 	.word	0x240004c8
 8001738:	2400045c 	.word	0x2400045c

0800173c <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8001740:	4802      	ldr	r0, [pc, #8]	; (800174c <UART7_IRQHandler+0x10>)
 8001742:	f00a f929 	bl	800b998 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	24000558 	.word	0x24000558

08001750 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001754:	4802      	ldr	r0, [pc, #8]	; (8001760 <OTG_FS_IRQHandler+0x10>)
 8001756:	f005 f834 	bl	80067c2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	24001c38 	.word	0x24001c38

08001764 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
	return 1;
 8001768:	2301      	movs	r3, #1
}
 800176a:	4618      	mov	r0, r3
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <_kill>:

int _kill(int pid, int sig)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800177e:	f00f fc97 	bl	80110b0 <__errno>
 8001782:	4603      	mov	r3, r0
 8001784:	2216      	movs	r2, #22
 8001786:	601a      	str	r2, [r3, #0]
	return -1;
 8001788:	f04f 33ff 	mov.w	r3, #4294967295
}
 800178c:	4618      	mov	r0, r3
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <_exit>:

void _exit (int status)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800179c:	f04f 31ff 	mov.w	r1, #4294967295
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f7ff ffe7 	bl	8001774 <_kill>
	while (1) {}		/* Make sure we hang here */
 80017a6:	e7fe      	b.n	80017a6 <_exit+0x12>

080017a8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b086      	sub	sp, #24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017b4:	2300      	movs	r3, #0
 80017b6:	617b      	str	r3, [r7, #20]
 80017b8:	e00a      	b.n	80017d0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80017ba:	f3af 8000 	nop.w
 80017be:	4601      	mov	r1, r0
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	1c5a      	adds	r2, r3, #1
 80017c4:	60ba      	str	r2, [r7, #8]
 80017c6:	b2ca      	uxtb	r2, r1
 80017c8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	3301      	adds	r3, #1
 80017ce:	617b      	str	r3, [r7, #20]
 80017d0:	697a      	ldr	r2, [r7, #20]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	dbf0      	blt.n	80017ba <_read+0x12>
	}

return len;
 80017d8:	687b      	ldr	r3, [r7, #4]
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3718      	adds	r7, #24
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b086      	sub	sp, #24
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	60f8      	str	r0, [r7, #12]
 80017ea:	60b9      	str	r1, [r7, #8]
 80017ec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ee:	2300      	movs	r3, #0
 80017f0:	617b      	str	r3, [r7, #20]
 80017f2:	e009      	b.n	8001808 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	1c5a      	adds	r2, r3, #1
 80017f8:	60ba      	str	r2, [r7, #8]
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	3301      	adds	r3, #1
 8001806:	617b      	str	r3, [r7, #20]
 8001808:	697a      	ldr	r2, [r7, #20]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	429a      	cmp	r2, r3
 800180e:	dbf1      	blt.n	80017f4 <_write+0x12>
	}
	return len;
 8001810:	687b      	ldr	r3, [r7, #4]
}
 8001812:	4618      	mov	r0, r3
 8001814:	3718      	adds	r7, #24
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <_close>:

int _close(int file)
{
 800181a:	b480      	push	{r7}
 800181c:	b083      	sub	sp, #12
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
	return -1;
 8001822:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001826:	4618      	mov	r0, r3
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr

08001832 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001832:	b480      	push	{r7}
 8001834:	b083      	sub	sp, #12
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
 800183a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001842:	605a      	str	r2, [r3, #4]
	return 0;
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr

08001852 <_isatty>:

int _isatty(int file)
{
 8001852:	b480      	push	{r7}
 8001854:	b083      	sub	sp, #12
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
	return 1;
 800185a:	2301      	movs	r3, #1
}
 800185c:	4618      	mov	r0, r3
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
	return 0;
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	3714      	adds	r7, #20
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
	...

08001884 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b086      	sub	sp, #24
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800188c:	4a14      	ldr	r2, [pc, #80]	; (80018e0 <_sbrk+0x5c>)
 800188e:	4b15      	ldr	r3, [pc, #84]	; (80018e4 <_sbrk+0x60>)
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001898:	4b13      	ldr	r3, [pc, #76]	; (80018e8 <_sbrk+0x64>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d102      	bne.n	80018a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018a0:	4b11      	ldr	r3, [pc, #68]	; (80018e8 <_sbrk+0x64>)
 80018a2:	4a12      	ldr	r2, [pc, #72]	; (80018ec <_sbrk+0x68>)
 80018a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018a6:	4b10      	ldr	r3, [pc, #64]	; (80018e8 <_sbrk+0x64>)
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4413      	add	r3, r2
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d207      	bcs.n	80018c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018b4:	f00f fbfc 	bl	80110b0 <__errno>
 80018b8:	4603      	mov	r3, r0
 80018ba:	220c      	movs	r2, #12
 80018bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018be:	f04f 33ff 	mov.w	r3, #4294967295
 80018c2:	e009      	b.n	80018d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018c4:	4b08      	ldr	r3, [pc, #32]	; (80018e8 <_sbrk+0x64>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018ca:	4b07      	ldr	r3, [pc, #28]	; (80018e8 <_sbrk+0x64>)
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4413      	add	r3, r2
 80018d2:	4a05      	ldr	r2, [pc, #20]	; (80018e8 <_sbrk+0x64>)
 80018d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018d6:	68fb      	ldr	r3, [r7, #12]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3718      	adds	r7, #24
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	24080000 	.word	0x24080000
 80018e4:	00000400 	.word	0x00000400
 80018e8:	24000478 	.word	0x24000478
 80018ec:	24002050 	.word	0x24002050

080018f0 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b0a4      	sub	sp, #144	; 0x90
 80018f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018f6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	605a      	str	r2, [r3, #4]
 8001900:	609a      	str	r2, [r3, #8]
 8001902:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001904:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001910:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]
 800191a:	609a      	str	r2, [r3, #8]
 800191c:	60da      	str	r2, [r3, #12]
 800191e:	611a      	str	r2, [r3, #16]
 8001920:	615a      	str	r2, [r3, #20]
 8001922:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001924:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001928:	222c      	movs	r2, #44	; 0x2c
 800192a:	2100      	movs	r1, #0
 800192c:	4618      	mov	r0, r3
 800192e:	f00f fc07 	bl	8011140 <memset>
  RCC_ClkInitTypeDef clk_init_struct = {0};
 8001932:	1d3b      	adds	r3, r7, #4
 8001934:	2220      	movs	r2, #32
 8001936:	2100      	movs	r1, #0
 8001938:	4618      	mov	r0, r3
 800193a:	f00f fc01 	bl	8011140 <memset>


  /* USER CODE BEGIN TIM1_Init 1 */

  uint32_t latency = 0;
 800193e:	2300      	movs	r3, #0
 8001940:	603b      	str	r3, [r7, #0]
  uint32_t timer_clock_frequency = 0;
 8001942:	2300      	movs	r3, #0
 8001944:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t timer_prescaler = 0;
 8001948:	2300      	movs	r3, #0
 800194a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  /* USER CODE END TIM1_Init 1 */

  HAL_RCC_GetClockConfig(&clk_init_struct, &latency);
 800194e:	463a      	mov	r2, r7
 8001950:	1d3b      	adds	r3, r7, #4
 8001952:	4611      	mov	r1, r2
 8001954:	4618      	mov	r0, r3
 8001956:	f006 ffbd 	bl	80088d4 <HAL_RCC_GetClockConfig>

  if(clk_init_struct.APB1CLKDivider == RCC_HCLK_DIV1)
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d104      	bne.n	800196a <MX_TIM1_Init+0x7a>
  {
    timer_clock_frequency = HAL_RCC_GetPCLK1Freq();
 8001960:	f006 ff8c 	bl	800887c <HAL_RCC_GetPCLK1Freq>
 8001964:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 8001968:	e005      	b.n	8001976 <MX_TIM1_Init+0x86>
  }

  else
  {
    timer_clock_frequency = HAL_RCC_GetPCLK1Freq() * 2;
 800196a:	f006 ff87 	bl	800887c <HAL_RCC_GetPCLK1Freq>
 800196e:	4603      	mov	r3, r0
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  }

  timer_prescaler = (timer_clock_frequency / (TIMER_PRESCALER_MAX_VALUE * TIMER_FREQUENCY_RANGE_MIN)) +1;
 8001976:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800197a:	4a5f      	ldr	r2, [pc, #380]	; (8001af8 <MX_TIM1_Init+0x208>)
 800197c:	fba2 2303 	umull	r2, r3, r2, r3
 8001980:	0c9b      	lsrs	r3, r3, #18
 8001982:	3301      	adds	r3, #1
 8001984:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  htim1.Instance = TIM1;
 8001988:	4b5c      	ldr	r3, [pc, #368]	; (8001afc <MX_TIM1_Init+0x20c>)
 800198a:	4a5d      	ldr	r2, [pc, #372]	; (8001b00 <MX_TIM1_Init+0x210>)
 800198c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = (timer_prescaler - 1);
 800198e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001992:	3b01      	subs	r3, #1
 8001994:	4a59      	ldr	r2, [pc, #356]	; (8001afc <MX_TIM1_Init+0x20c>)
 8001996:	6053      	str	r3, [r2, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001998:	4b58      	ldr	r3, [pc, #352]	; (8001afc <MX_TIM1_Init+0x20c>)
 800199a:	2200      	movs	r2, #0
 800199c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = ((timer_clock_frequency / (timer_prescaler * TIMER_FREQUENCY)) - 1);
 800199e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80019a2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80019a6:	fb02 f303 	mul.w	r3, r2, r3
 80019aa:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80019ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b2:	3b01      	subs	r3, #1
 80019b4:	4a51      	ldr	r2, [pc, #324]	; (8001afc <MX_TIM1_Init+0x20c>)
 80019b6:	60d3      	str	r3, [r2, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019b8:	4b50      	ldr	r3, [pc, #320]	; (8001afc <MX_TIM1_Init+0x20c>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80019be:	4b4f      	ldr	r3, [pc, #316]	; (8001afc <MX_TIM1_Init+0x20c>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019c4:	4b4d      	ldr	r3, [pc, #308]	; (8001afc <MX_TIM1_Init+0x20c>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80019ca:	484c      	ldr	r0, [pc, #304]	; (8001afc <MX_TIM1_Init+0x20c>)
 80019cc:	f008 fda6 	bl	800a51c <HAL_TIM_Base_Init>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <MX_TIM1_Init+0xea>
  {
    Error_Handler();
 80019d6:	f7ff fc91 	bl	80012fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019de:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80019e0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80019e4:	4619      	mov	r1, r3
 80019e6:	4845      	ldr	r0, [pc, #276]	; (8001afc <MX_TIM1_Init+0x20c>)
 80019e8:	f009 f880 	bl	800aaec <HAL_TIM_ConfigClockSource>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 80019f2:	f7ff fc83 	bl	80012fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80019f6:	4841      	ldr	r0, [pc, #260]	; (8001afc <MX_TIM1_Init+0x20c>)
 80019f8:	f008 fde7 	bl	800a5ca <HAL_TIM_PWM_Init>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001a02:	f7ff fc7b 	bl	80012fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a06:	2300      	movs	r3, #0
 8001a08:	66fb      	str	r3, [r7, #108]	; 0x6c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	673b      	str	r3, [r7, #112]	; 0x70
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a12:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001a16:	4619      	mov	r1, r3
 8001a18:	4838      	ldr	r0, [pc, #224]	; (8001afc <MX_TIM1_Init+0x20c>)
 8001a1a:	f009 fd93 	bl	800b544 <HAL_TIMEx_MasterConfigSynchronization>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8001a24:	f7ff fc6a 	bl	80012fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a28:	2360      	movs	r3, #96	; 0x60
 8001a2a:	653b      	str	r3, [r7, #80]	; 0x50
  sConfigOC.Pulse = 50;
 8001a2c:	2332      	movs	r3, #50	; 0x32
 8001a2e:	657b      	str	r3, [r7, #84]	; 0x54
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a30:	2300      	movs	r3, #0
 8001a32:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a34:	2300      	movs	r3, #0
 8001a36:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	663b      	str	r3, [r7, #96]	; 0x60
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	667b      	str	r3, [r7, #100]	; 0x64
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a40:	2300      	movs	r3, #0
 8001a42:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a44:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001a48:	2200      	movs	r2, #0
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	482b      	ldr	r0, [pc, #172]	; (8001afc <MX_TIM1_Init+0x20c>)
 8001a4e:	f008 ff3d 	bl	800a8cc <HAL_TIM_PWM_ConfigChannel>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <MX_TIM1_Init+0x16c>
  {
    Error_Handler();
 8001a58:	f7ff fc50 	bl	80012fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a5c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001a60:	2204      	movs	r2, #4
 8001a62:	4619      	mov	r1, r3
 8001a64:	4825      	ldr	r0, [pc, #148]	; (8001afc <MX_TIM1_Init+0x20c>)
 8001a66:	f008 ff31 	bl	800a8cc <HAL_TIM_PWM_ConfigChannel>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_TIM1_Init+0x184>
  {
    Error_Handler();
 8001a70:	f7ff fc44 	bl	80012fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a74:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001a78:	2208      	movs	r2, #8
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	481f      	ldr	r0, [pc, #124]	; (8001afc <MX_TIM1_Init+0x20c>)
 8001a7e:	f008 ff25 	bl	800a8cc <HAL_TIM_PWM_ConfigChannel>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <MX_TIM1_Init+0x19c>
  {
    Error_Handler();
 8001a88:	f7ff fc38 	bl	80012fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a8c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001a90:	220c      	movs	r2, #12
 8001a92:	4619      	mov	r1, r3
 8001a94:	4819      	ldr	r0, [pc, #100]	; (8001afc <MX_TIM1_Init+0x20c>)
 8001a96:	f008 ff19 	bl	800a8cc <HAL_TIM_PWM_ConfigChannel>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <MX_TIM1_Init+0x1b4>
  {
    Error_Handler();
 8001aa0:	f7ff fc2c 	bl	80012fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001aac:	2300      	movs	r3, #0
 8001aae:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	637b      	str	r3, [r7, #52]	; 0x34
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ab8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001abc:	63bb      	str	r3, [r7, #56]	; 0x38
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	643b      	str	r3, [r7, #64]	; 0x40
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001ac6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001aca:	647b      	str	r3, [r7, #68]	; 0x44
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001acc:	2300      	movs	r3, #0
 8001ace:	64bb      	str	r3, [r7, #72]	; 0x48
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ad4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4808      	ldr	r0, [pc, #32]	; (8001afc <MX_TIM1_Init+0x20c>)
 8001adc:	f009 fdba 	bl	800b654 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <MX_TIM1_Init+0x1fa>
  {
    Error_Handler();
 8001ae6:	f7ff fc09 	bl	80012fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001aea:	4804      	ldr	r0, [pc, #16]	; (8001afc <MX_TIM1_Init+0x20c>)
 8001aec:	f000 f84a 	bl	8001b84 <HAL_TIM_MspPostInit>

}
 8001af0:	bf00      	nop
 8001af2:	3790      	adds	r7, #144	; 0x90
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	66673335 	.word	0x66673335
 8001afc:	2400047c 	.word	0x2400047c
 8001b00:	40010000 	.word	0x40010000

08001b04 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a1a      	ldr	r2, [pc, #104]	; (8001b7c <HAL_TIM_Base_MspInit+0x78>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d12e      	bne.n	8001b74 <HAL_TIM_Base_MspInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b16:	4b1a      	ldr	r3, [pc, #104]	; (8001b80 <HAL_TIM_Base_MspInit+0x7c>)
 8001b18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b1c:	4a18      	ldr	r2, [pc, #96]	; (8001b80 <HAL_TIM_Base_MspInit+0x7c>)
 8001b1e:	f043 0301 	orr.w	r3, r3, #1
 8001b22:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001b26:	4b16      	ldr	r3, [pc, #88]	; (8001b80 <HAL_TIM_Base_MspInit+0x7c>)
 8001b28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b2c:	f003 0301 	and.w	r3, r3, #1
 8001b30:	60fb      	str	r3, [r7, #12]
 8001b32:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8001b34:	2200      	movs	r2, #0
 8001b36:	2100      	movs	r1, #0
 8001b38:	2018      	movs	r0, #24
 8001b3a:	f000 fc32 	bl	80023a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8001b3e:	2018      	movs	r0, #24
 8001b40:	f000 fc49 	bl	80023d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001b44:	2200      	movs	r2, #0
 8001b46:	2100      	movs	r1, #0
 8001b48:	2019      	movs	r0, #25
 8001b4a:	f000 fc2a 	bl	80023a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001b4e:	2019      	movs	r0, #25
 8001b50:	f000 fc41 	bl	80023d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8001b54:	2200      	movs	r2, #0
 8001b56:	2100      	movs	r1, #0
 8001b58:	201a      	movs	r0, #26
 8001b5a:	f000 fc22 	bl	80023a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8001b5e:	201a      	movs	r0, #26
 8001b60:	f000 fc39 	bl	80023d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001b64:	2200      	movs	r2, #0
 8001b66:	2100      	movs	r1, #0
 8001b68:	201b      	movs	r0, #27
 8001b6a:	f000 fc1a 	bl	80023a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001b6e:	201b      	movs	r0, #27
 8001b70:	f000 fc31 	bl	80023d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001b74:	bf00      	nop
 8001b76:	3710      	adds	r7, #16
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40010000 	.word	0x40010000
 8001b80:	58024400 	.word	0x58024400

08001b84 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b08a      	sub	sp, #40	; 0x28
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8c:	f107 0314 	add.w	r3, r7, #20
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	60da      	str	r2, [r3, #12]
 8001b9a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a23      	ldr	r2, [pc, #140]	; (8001c30 <HAL_TIM_MspPostInit+0xac>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d13f      	bne.n	8001c26 <HAL_TIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ba6:	4b23      	ldr	r3, [pc, #140]	; (8001c34 <HAL_TIM_MspPostInit+0xb0>)
 8001ba8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bac:	4a21      	ldr	r2, [pc, #132]	; (8001c34 <HAL_TIM_MspPostInit+0xb0>)
 8001bae:	f043 0310 	orr.w	r3, r3, #16
 8001bb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bb6:	4b1f      	ldr	r3, [pc, #124]	; (8001c34 <HAL_TIM_MspPostInit+0xb0>)
 8001bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bbc:	f003 0310 	and.w	r3, r3, #16
 8001bc0:	613b      	str	r3, [r7, #16]
 8001bc2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc4:	4b1b      	ldr	r3, [pc, #108]	; (8001c34 <HAL_TIM_MspPostInit+0xb0>)
 8001bc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bca:	4a1a      	ldr	r2, [pc, #104]	; (8001c34 <HAL_TIM_MspPostInit+0xb0>)
 8001bcc:	f043 0301 	orr.w	r3, r3, #1
 8001bd0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bd4:	4b17      	ldr	r3, [pc, #92]	; (8001c34 <HAL_TIM_MspPostInit+0xb0>)
 8001bd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	60fb      	str	r3, [r7, #12]
 8001be0:	68fb      	ldr	r3, [r7, #12]
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8001be2:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8001be6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be8:	2302      	movs	r3, #2
 8001bea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bec:	2300      	movs	r3, #0
 8001bee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bf8:	f107 0314 	add.w	r3, r7, #20
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	480e      	ldr	r0, [pc, #56]	; (8001c38 <HAL_TIM_MspPostInit+0xb4>)
 8001c00:	f003 fae4 	bl	80051cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001c04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c12:	2300      	movs	r3, #0
 8001c14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001c16:	2301      	movs	r3, #1
 8001c18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c1a:	f107 0314 	add.w	r3, r7, #20
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4806      	ldr	r0, [pc, #24]	; (8001c3c <HAL_TIM_MspPostInit+0xb8>)
 8001c22:	f003 fad3 	bl	80051cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001c26:	bf00      	nop
 8001c28:	3728      	adds	r7, #40	; 0x28
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40010000 	.word	0x40010000
 8001c34:	58024400 	.word	0x58024400
 8001c38:	58021000 	.word	0x58021000
 8001c3c:	58020000 	.word	0x58020000

08001c40 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart7_rx;
DMA_HandleTypeDef hdma_uart7_tx;
DMA_HandleTypeDef hdma_uart4_rx;
/* UART4 init function */
void MX_UART4_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001c44:	4b1f      	ldr	r3, [pc, #124]	; (8001cc4 <MX_UART4_Init+0x84>)
 8001c46:	4a20      	ldr	r2, [pc, #128]	; (8001cc8 <MX_UART4_Init+0x88>)
 8001c48:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 100000;
 8001c4a:	4b1e      	ldr	r3, [pc, #120]	; (8001cc4 <MX_UART4_Init+0x84>)
 8001c4c:	4a1f      	ldr	r2, [pc, #124]	; (8001ccc <MX_UART4_Init+0x8c>)
 8001c4e:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_9B;
 8001c50:	4b1c      	ldr	r3, [pc, #112]	; (8001cc4 <MX_UART4_Init+0x84>)
 8001c52:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c56:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_2;
 8001c58:	4b1a      	ldr	r3, [pc, #104]	; (8001cc4 <MX_UART4_Init+0x84>)
 8001c5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c5e:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 8001c60:	4b18      	ldr	r3, [pc, #96]	; (8001cc4 <MX_UART4_Init+0x84>)
 8001c62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c66:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_RX;
 8001c68:	4b16      	ldr	r3, [pc, #88]	; (8001cc4 <MX_UART4_Init+0x84>)
 8001c6a:	2204      	movs	r2, #4
 8001c6c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c6e:	4b15      	ldr	r3, [pc, #84]	; (8001cc4 <MX_UART4_Init+0x84>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c74:	4b13      	ldr	r3, [pc, #76]	; (8001cc4 <MX_UART4_Init+0x84>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c7a:	4b12      	ldr	r3, [pc, #72]	; (8001cc4 <MX_UART4_Init+0x84>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV4;
 8001c80:	4b10      	ldr	r3, [pc, #64]	; (8001cc4 <MX_UART4_Init+0x84>)
 8001c82:	2202      	movs	r2, #2
 8001c84:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c86:	4b0f      	ldr	r3, [pc, #60]	; (8001cc4 <MX_UART4_Init+0x84>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001c8c:	480d      	ldr	r0, [pc, #52]	; (8001cc4 <MX_UART4_Init+0x84>)
 8001c8e:	f009 fd7d 	bl	800b78c <HAL_UART_Init>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <MX_UART4_Init+0x5c>
  {
    Error_Handler();
 8001c98:	f7ff fb30 	bl	80012fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	4809      	ldr	r0, [pc, #36]	; (8001cc4 <MX_UART4_Init+0x84>)
 8001ca0:	f00b fa60 	bl	800d164 <HAL_UARTEx_SetRxFifoThreshold>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <MX_UART4_Init+0x6e>
  {
    Error_Handler();
 8001caa:	f7ff fb27 	bl	80012fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001cae:	4805      	ldr	r0, [pc, #20]	; (8001cc4 <MX_UART4_Init+0x84>)
 8001cb0:	f00b f9e1 	bl	800d076 <HAL_UARTEx_DisableFifoMode>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_UART4_Init+0x7e>
  {
    Error_Handler();
 8001cba:	f7ff fb1f 	bl	80012fc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001cbe:	bf00      	nop
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	240004c8 	.word	0x240004c8
 8001cc8:	40004c00 	.word	0x40004c00
 8001ccc:	000186a0 	.word	0x000186a0

08001cd0 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001cd4:	4b22      	ldr	r3, [pc, #136]	; (8001d60 <MX_UART7_Init+0x90>)
 8001cd6:	4a23      	ldr	r2, [pc, #140]	; (8001d64 <MX_UART7_Init+0x94>)
 8001cd8:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 921600;
 8001cda:	4b21      	ldr	r3, [pc, #132]	; (8001d60 <MX_UART7_Init+0x90>)
 8001cdc:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8001ce0:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001ce2:	4b1f      	ldr	r3, [pc, #124]	; (8001d60 <MX_UART7_Init+0x90>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001ce8:	4b1d      	ldr	r3, [pc, #116]	; (8001d60 <MX_UART7_Init+0x90>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001cee:	4b1c      	ldr	r3, [pc, #112]	; (8001d60 <MX_UART7_Init+0x90>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001cf4:	4b1a      	ldr	r3, [pc, #104]	; (8001d60 <MX_UART7_Init+0x90>)
 8001cf6:	220c      	movs	r2, #12
 8001cf8:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cfa:	4b19      	ldr	r3, [pc, #100]	; (8001d60 <MX_UART7_Init+0x90>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d00:	4b17      	ldr	r3, [pc, #92]	; (8001d60 <MX_UART7_Init+0x90>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d06:	4b16      	ldr	r3, [pc, #88]	; (8001d60 <MX_UART7_Init+0x90>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d0c:	4b14      	ldr	r3, [pc, #80]	; (8001d60 <MX_UART7_Init+0x90>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d12:	4b13      	ldr	r3, [pc, #76]	; (8001d60 <MX_UART7_Init+0x90>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001d18:	4811      	ldr	r0, [pc, #68]	; (8001d60 <MX_UART7_Init+0x90>)
 8001d1a:	f009 fd37 	bl	800b78c <HAL_UART_Init>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8001d24:	f7ff faea 	bl	80012fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d28:	2100      	movs	r1, #0
 8001d2a:	480d      	ldr	r0, [pc, #52]	; (8001d60 <MX_UART7_Init+0x90>)
 8001d2c:	f00b f9dc 	bl	800d0e8 <HAL_UARTEx_SetTxFifoThreshold>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8001d36:	f7ff fae1 	bl	80012fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	4808      	ldr	r0, [pc, #32]	; (8001d60 <MX_UART7_Init+0x90>)
 8001d3e:	f00b fa11 	bl	800d164 <HAL_UARTEx_SetRxFifoThreshold>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8001d48:	f7ff fad8 	bl	80012fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8001d4c:	4804      	ldr	r0, [pc, #16]	; (8001d60 <MX_UART7_Init+0x90>)
 8001d4e:	f00b f992 	bl	800d076 <HAL_UARTEx_DisableFifoMode>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8001d58:	f7ff fad0 	bl	80012fc <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001d5c:	bf00      	nop
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	24000558 	.word	0x24000558
 8001d64:	40007800 	.word	0x40007800

08001d68 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b0ba      	sub	sp, #232	; 0xe8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d70:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	605a      	str	r2, [r3, #4]
 8001d7a:	609a      	str	r2, [r3, #8]
 8001d7c:	60da      	str	r2, [r3, #12]
 8001d7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d80:	f107 0318 	add.w	r3, r7, #24
 8001d84:	22bc      	movs	r2, #188	; 0xbc
 8001d86:	2100      	movs	r1, #0
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f00f f9d9 	bl	8011140 <memset>
  if(uartHandle->Instance==UART4)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a95      	ldr	r2, [pc, #596]	; (8001fe8 <HAL_UART_MspInit+0x280>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d179      	bne.n	8001e8c <HAL_UART_MspInit+0x124>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001d98:	2302      	movs	r3, #2
 8001d9a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001da2:	f107 0318 	add.w	r3, r7, #24
 8001da6:	4618      	mov	r0, r3
 8001da8:	f006 fdd6 	bl	8008958 <HAL_RCCEx_PeriphCLKConfig>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001db2:	f7ff faa3 	bl	80012fc <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001db6:	4b8d      	ldr	r3, [pc, #564]	; (8001fec <HAL_UART_MspInit+0x284>)
 8001db8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001dbc:	4a8b      	ldr	r2, [pc, #556]	; (8001fec <HAL_UART_MspInit+0x284>)
 8001dbe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001dc2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001dc6:	4b89      	ldr	r3, [pc, #548]	; (8001fec <HAL_UART_MspInit+0x284>)
 8001dc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001dcc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dd0:	617b      	str	r3, [r7, #20]
 8001dd2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd4:	4b85      	ldr	r3, [pc, #532]	; (8001fec <HAL_UART_MspInit+0x284>)
 8001dd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dda:	4a84      	ldr	r2, [pc, #528]	; (8001fec <HAL_UART_MspInit+0x284>)
 8001ddc:	f043 0301 	orr.w	r3, r3, #1
 8001de0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001de4:	4b81      	ldr	r3, [pc, #516]	; (8001fec <HAL_UART_MspInit+0x284>)
 8001de6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dea:	f003 0301 	and.w	r3, r3, #1
 8001dee:	613b      	str	r3, [r7, #16]
 8001df0:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001df2:	2303      	movs	r3, #3
 8001df4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df8:	2302      	movs	r3, #2
 8001dfa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e04:	2300      	movs	r3, #0
 8001e06:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001e0a:	2308      	movs	r3, #8
 8001e0c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e10:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001e14:	4619      	mov	r1, r3
 8001e16:	4876      	ldr	r0, [pc, #472]	; (8001ff0 <HAL_UART_MspInit+0x288>)
 8001e18:	f003 f9d8 	bl	80051cc <HAL_GPIO_Init>

    /*UART4 RX Init
     *
     */

    hdma_uart4_rx.Instance = DMA2_Stream7;
 8001e1c:	4b75      	ldr	r3, [pc, #468]	; (8001ff4 <HAL_UART_MspInit+0x28c>)
 8001e1e:	4a76      	ldr	r2, [pc, #472]	; (8001ff8 <HAL_UART_MspInit+0x290>)
 8001e20:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8001e22:	4b74      	ldr	r3, [pc, #464]	; (8001ff4 <HAL_UART_MspInit+0x28c>)
 8001e24:	223f      	movs	r2, #63	; 0x3f
 8001e26:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e28:	4b72      	ldr	r3, [pc, #456]	; (8001ff4 <HAL_UART_MspInit+0x28c>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e2e:	4b71      	ldr	r3, [pc, #452]	; (8001ff4 <HAL_UART_MspInit+0x28c>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e34:	4b6f      	ldr	r3, [pc, #444]	; (8001ff4 <HAL_UART_MspInit+0x28c>)
 8001e36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e3a:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e3c:	4b6d      	ldr	r3, [pc, #436]	; (8001ff4 <HAL_UART_MspInit+0x28c>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e42:	4b6c      	ldr	r3, [pc, #432]	; (8001ff4 <HAL_UART_MspInit+0x28c>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8001e48:	4b6a      	ldr	r3, [pc, #424]	; (8001ff4 <HAL_UART_MspInit+0x28c>)
 8001e4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e4e:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001e50:	4b68      	ldr	r3, [pc, #416]	; (8001ff4 <HAL_UART_MspInit+0x28c>)
 8001e52:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e56:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e58:	4b66      	ldr	r3, [pc, #408]	; (8001ff4 <HAL_UART_MspInit+0x28c>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	625a      	str	r2, [r3, #36]	; 0x24

    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001e5e:	4865      	ldr	r0, [pc, #404]	; (8001ff4 <HAL_UART_MspInit+0x28c>)
 8001e60:	f000 fb5e 	bl	8002520 <HAL_DMA_Init>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <HAL_UART_MspInit+0x106>
    {
      Error_Handler();
 8001e6a:	f7ff fa47 	bl	80012fc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle, hdmarx, hdma_uart4_rx);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a60      	ldr	r2, [pc, #384]	; (8001ff4 <HAL_UART_MspInit+0x28c>)
 8001e72:	67da      	str	r2, [r3, #124]	; 0x7c
 8001e74:	4a5f      	ldr	r2, [pc, #380]	; (8001ff4 <HAL_UART_MspInit+0x28c>)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6393      	str	r3, [r2, #56]	; 0x38
    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	2034      	movs	r0, #52	; 0x34
 8001e80:	f000 fa8f 	bl	80023a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001e84:	2034      	movs	r0, #52	; 0x34
 8001e86:	f000 faa6 	bl	80023d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
}
 8001e8a:	e0a9      	b.n	8001fe0 <HAL_UART_MspInit+0x278>
  else if(uartHandle->Instance==UART7)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a5a      	ldr	r2, [pc, #360]	; (8001ffc <HAL_UART_MspInit+0x294>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	f040 80a4 	bne.w	8001fe0 <HAL_UART_MspInit+0x278>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8001e98:	2302      	movs	r3, #2
 8001e9a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ea2:	f107 0318 	add.w	r3, r7, #24
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f006 fd56 	bl	8008958 <HAL_RCCEx_PeriphCLKConfig>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <HAL_UART_MspInit+0x14e>
      Error_Handler();
 8001eb2:	f7ff fa23 	bl	80012fc <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8001eb6:	4b4d      	ldr	r3, [pc, #308]	; (8001fec <HAL_UART_MspInit+0x284>)
 8001eb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ebc:	4a4b      	ldr	r2, [pc, #300]	; (8001fec <HAL_UART_MspInit+0x284>)
 8001ebe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001ec2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001ec6:	4b49      	ldr	r3, [pc, #292]	; (8001fec <HAL_UART_MspInit+0x284>)
 8001ec8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ecc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001ed0:	60fb      	str	r3, [r7, #12]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ed4:	4b45      	ldr	r3, [pc, #276]	; (8001fec <HAL_UART_MspInit+0x284>)
 8001ed6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eda:	4a44      	ldr	r2, [pc, #272]	; (8001fec <HAL_UART_MspInit+0x284>)
 8001edc:	f043 0320 	orr.w	r3, r3, #32
 8001ee0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ee4:	4b41      	ldr	r3, [pc, #260]	; (8001fec <HAL_UART_MspInit+0x284>)
 8001ee6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eea:	f003 0320 	and.w	r3, r3, #32
 8001eee:	60bb      	str	r3, [r7, #8]
 8001ef0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ef2:	23c0      	movs	r3, #192	; 0xc0
 8001ef4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef8:	2302      	movs	r3, #2
 8001efa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efe:	2300      	movs	r3, #0
 8001f00:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f04:	2300      	movs	r3, #0
 8001f06:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8001f0a:	2307      	movs	r3, #7
 8001f0c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f10:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001f14:	4619      	mov	r1, r3
 8001f16:	483a      	ldr	r0, [pc, #232]	; (8002000 <HAL_UART_MspInit+0x298>)
 8001f18:	f003 f958 	bl	80051cc <HAL_GPIO_Init>
    hdma_uart7_rx.Instance = DMA1_Stream5;
 8001f1c:	4b39      	ldr	r3, [pc, #228]	; (8002004 <HAL_UART_MspInit+0x29c>)
 8001f1e:	4a3a      	ldr	r2, [pc, #232]	; (8002008 <HAL_UART_MspInit+0x2a0>)
 8001f20:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Request = DMA_REQUEST_UART7_RX;
 8001f22:	4b38      	ldr	r3, [pc, #224]	; (8002004 <HAL_UART_MspInit+0x29c>)
 8001f24:	224f      	movs	r2, #79	; 0x4f
 8001f26:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f28:	4b36      	ldr	r3, [pc, #216]	; (8002004 <HAL_UART_MspInit+0x29c>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f2e:	4b35      	ldr	r3, [pc, #212]	; (8002004 <HAL_UART_MspInit+0x29c>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f34:	4b33      	ldr	r3, [pc, #204]	; (8002004 <HAL_UART_MspInit+0x29c>)
 8001f36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f3a:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f3c:	4b31      	ldr	r3, [pc, #196]	; (8002004 <HAL_UART_MspInit+0x29c>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f42:	4b30      	ldr	r3, [pc, #192]	; (8002004 <HAL_UART_MspInit+0x29c>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_NORMAL;
 8001f48:	4b2e      	ldr	r3, [pc, #184]	; (8002004 <HAL_UART_MspInit+0x29c>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f4e:	4b2d      	ldr	r3, [pc, #180]	; (8002004 <HAL_UART_MspInit+0x29c>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f54:	4b2b      	ldr	r3, [pc, #172]	; (8002004 <HAL_UART_MspInit+0x29c>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 8001f5a:	482a      	ldr	r0, [pc, #168]	; (8002004 <HAL_UART_MspInit+0x29c>)
 8001f5c:	f000 fae0 	bl	8002520 <HAL_DMA_Init>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <HAL_UART_MspInit+0x202>
      Error_Handler();
 8001f66:	f7ff f9c9 	bl	80012fc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart7_rx);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a25      	ldr	r2, [pc, #148]	; (8002004 <HAL_UART_MspInit+0x29c>)
 8001f6e:	67da      	str	r2, [r3, #124]	; 0x7c
 8001f70:	4a24      	ldr	r2, [pc, #144]	; (8002004 <HAL_UART_MspInit+0x29c>)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart7_tx.Instance = DMA1_Stream6;
 8001f76:	4b25      	ldr	r3, [pc, #148]	; (800200c <HAL_UART_MspInit+0x2a4>)
 8001f78:	4a25      	ldr	r2, [pc, #148]	; (8002010 <HAL_UART_MspInit+0x2a8>)
 8001f7a:	601a      	str	r2, [r3, #0]
    hdma_uart7_tx.Init.Request = DMA_REQUEST_UART7_TX;
 8001f7c:	4b23      	ldr	r3, [pc, #140]	; (800200c <HAL_UART_MspInit+0x2a4>)
 8001f7e:	2250      	movs	r2, #80	; 0x50
 8001f80:	605a      	str	r2, [r3, #4]
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f82:	4b22      	ldr	r3, [pc, #136]	; (800200c <HAL_UART_MspInit+0x2a4>)
 8001f84:	2240      	movs	r2, #64	; 0x40
 8001f86:	609a      	str	r2, [r3, #8]
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f88:	4b20      	ldr	r3, [pc, #128]	; (800200c <HAL_UART_MspInit+0x2a4>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	60da      	str	r2, [r3, #12]
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f8e:	4b1f      	ldr	r3, [pc, #124]	; (800200c <HAL_UART_MspInit+0x2a4>)
 8001f90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f94:	611a      	str	r2, [r3, #16]
    hdma_uart7_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f96:	4b1d      	ldr	r3, [pc, #116]	; (800200c <HAL_UART_MspInit+0x2a4>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	615a      	str	r2, [r3, #20]
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f9c:	4b1b      	ldr	r3, [pc, #108]	; (800200c <HAL_UART_MspInit+0x2a4>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	619a      	str	r2, [r3, #24]
    hdma_uart7_tx.Init.Mode = DMA_NORMAL;
 8001fa2:	4b1a      	ldr	r3, [pc, #104]	; (800200c <HAL_UART_MspInit+0x2a4>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	61da      	str	r2, [r3, #28]
    hdma_uart7_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001fa8:	4b18      	ldr	r3, [pc, #96]	; (800200c <HAL_UART_MspInit+0x2a4>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	621a      	str	r2, [r3, #32]
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fae:	4b17      	ldr	r3, [pc, #92]	; (800200c <HAL_UART_MspInit+0x2a4>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 8001fb4:	4815      	ldr	r0, [pc, #84]	; (800200c <HAL_UART_MspInit+0x2a4>)
 8001fb6:	f000 fab3 	bl	8002520 <HAL_DMA_Init>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <HAL_UART_MspInit+0x25c>
      Error_Handler();
 8001fc0:	f7ff f99c 	bl	80012fc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart7_tx);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4a11      	ldr	r2, [pc, #68]	; (800200c <HAL_UART_MspInit+0x2a4>)
 8001fc8:	679a      	str	r2, [r3, #120]	; 0x78
 8001fca:	4a10      	ldr	r2, [pc, #64]	; (800200c <HAL_UART_MspInit+0x2a4>)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	2052      	movs	r0, #82	; 0x52
 8001fd6:	f000 f9e4 	bl	80023a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8001fda:	2052      	movs	r0, #82	; 0x52
 8001fdc:	f000 f9fb 	bl	80023d6 <HAL_NVIC_EnableIRQ>
}
 8001fe0:	bf00      	nop
 8001fe2:	37e8      	adds	r7, #232	; 0xe8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	40004c00 	.word	0x40004c00
 8001fec:	58024400 	.word	0x58024400
 8001ff0:	58020000 	.word	0x58020000
 8001ff4:	240006d8 	.word	0x240006d8
 8001ff8:	400204b8 	.word	0x400204b8
 8001ffc:	40007800 	.word	0x40007800
 8002000:	58021400 	.word	0x58021400
 8002004:	240005e8 	.word	0x240005e8
 8002008:	40020088 	.word	0x40020088
 800200c:	24000660 	.word	0x24000660
 8002010:	400200a0 	.word	0x400200a0

08002014 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002014:	f8df d034 	ldr.w	sp, [pc, #52]	; 800204c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002018:	f7fe fdc0 	bl	8000b9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800201c:	480c      	ldr	r0, [pc, #48]	; (8002050 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800201e:	490d      	ldr	r1, [pc, #52]	; (8002054 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002020:	4a0d      	ldr	r2, [pc, #52]	; (8002058 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002022:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002024:	e002      	b.n	800202c <LoopCopyDataInit>

08002026 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002026:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002028:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800202a:	3304      	adds	r3, #4

0800202c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800202c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800202e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002030:	d3f9      	bcc.n	8002026 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002032:	4a0a      	ldr	r2, [pc, #40]	; (800205c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002034:	4c0a      	ldr	r4, [pc, #40]	; (8002060 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002036:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002038:	e001      	b.n	800203e <LoopFillZerobss>

0800203a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800203a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800203c:	3204      	adds	r2, #4

0800203e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800203e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002040:	d3fb      	bcc.n	800203a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002042:	f00f f83b 	bl	80110bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002046:	f7ff f889 	bl	800115c <main>
  bx  lr
 800204a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800204c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002050:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002054:	24000354 	.word	0x24000354
  ldr r2, =_sidata
 8002058:	08013e94 	.word	0x08013e94
  ldr r2, =_sbss
 800205c:	24000354 	.word	0x24000354
  ldr r4, =_ebss
 8002060:	24002050 	.word	0x24002050

08002064 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002064:	e7fe      	b.n	8002064 <ADC3_IRQHandler>
	...

08002068 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800206e:	2003      	movs	r0, #3
 8002070:	f000 f98c 	bl	800238c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002074:	f006 fa58 	bl	8008528 <HAL_RCC_GetSysClockFreq>
 8002078:	4602      	mov	r2, r0
 800207a:	4b15      	ldr	r3, [pc, #84]	; (80020d0 <HAL_Init+0x68>)
 800207c:	699b      	ldr	r3, [r3, #24]
 800207e:	0a1b      	lsrs	r3, r3, #8
 8002080:	f003 030f 	and.w	r3, r3, #15
 8002084:	4913      	ldr	r1, [pc, #76]	; (80020d4 <HAL_Init+0x6c>)
 8002086:	5ccb      	ldrb	r3, [r1, r3]
 8002088:	f003 031f 	and.w	r3, r3, #31
 800208c:	fa22 f303 	lsr.w	r3, r2, r3
 8002090:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002092:	4b0f      	ldr	r3, [pc, #60]	; (80020d0 <HAL_Init+0x68>)
 8002094:	699b      	ldr	r3, [r3, #24]
 8002096:	f003 030f 	and.w	r3, r3, #15
 800209a:	4a0e      	ldr	r2, [pc, #56]	; (80020d4 <HAL_Init+0x6c>)
 800209c:	5cd3      	ldrb	r3, [r2, r3]
 800209e:	f003 031f 	and.w	r3, r3, #31
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	fa22 f303 	lsr.w	r3, r2, r3
 80020a8:	4a0b      	ldr	r2, [pc, #44]	; (80020d8 <HAL_Init+0x70>)
 80020aa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80020ac:	4a0b      	ldr	r2, [pc, #44]	; (80020dc <HAL_Init+0x74>)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020b2:	2000      	movs	r0, #0
 80020b4:	f000 f814 	bl	80020e0 <HAL_InitTick>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e002      	b.n	80020c8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80020c2:	f7ff fa71 	bl	80015a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020c6:	2300      	movs	r3, #0
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3708      	adds	r7, #8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	58024400 	.word	0x58024400
 80020d4:	08013a60 	.word	0x08013a60
 80020d8:	24000004 	.word	0x24000004
 80020dc:	24000000 	.word	0x24000000

080020e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80020e8:	4b15      	ldr	r3, [pc, #84]	; (8002140 <HAL_InitTick+0x60>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d101      	bne.n	80020f4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e021      	b.n	8002138 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80020f4:	4b13      	ldr	r3, [pc, #76]	; (8002144 <HAL_InitTick+0x64>)
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	4b11      	ldr	r3, [pc, #68]	; (8002140 <HAL_InitTick+0x60>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	4619      	mov	r1, r3
 80020fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002102:	fbb3 f3f1 	udiv	r3, r3, r1
 8002106:	fbb2 f3f3 	udiv	r3, r2, r3
 800210a:	4618      	mov	r0, r3
 800210c:	f000 f971 	bl	80023f2 <HAL_SYSTICK_Config>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e00e      	b.n	8002138 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2b0f      	cmp	r3, #15
 800211e:	d80a      	bhi.n	8002136 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002120:	2200      	movs	r2, #0
 8002122:	6879      	ldr	r1, [r7, #4]
 8002124:	f04f 30ff 	mov.w	r0, #4294967295
 8002128:	f000 f93b 	bl	80023a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800212c:	4a06      	ldr	r2, [pc, #24]	; (8002148 <HAL_InitTick+0x68>)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002132:	2300      	movs	r3, #0
 8002134:	e000      	b.n	8002138 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
}
 8002138:	4618      	mov	r0, r3
 800213a:	3708      	adds	r7, #8
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	2400000c 	.word	0x2400000c
 8002144:	24000000 	.word	0x24000000
 8002148:	24000008 	.word	0x24000008

0800214c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002150:	4b06      	ldr	r3, [pc, #24]	; (800216c <HAL_IncTick+0x20>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	461a      	mov	r2, r3
 8002156:	4b06      	ldr	r3, [pc, #24]	; (8002170 <HAL_IncTick+0x24>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4413      	add	r3, r2
 800215c:	4a04      	ldr	r2, [pc, #16]	; (8002170 <HAL_IncTick+0x24>)
 800215e:	6013      	str	r3, [r2, #0]
}
 8002160:	bf00      	nop
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	2400000c 	.word	0x2400000c
 8002170:	24000750 	.word	0x24000750

08002174 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  return uwTick;
 8002178:	4b03      	ldr	r3, [pc, #12]	; (8002188 <HAL_GetTick+0x14>)
 800217a:	681b      	ldr	r3, [r3, #0]
}
 800217c:	4618      	mov	r0, r3
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	24000750 	.word	0x24000750

0800218c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002194:	f7ff ffee 	bl	8002174 <HAL_GetTick>
 8002198:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a4:	d005      	beq.n	80021b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021a6:	4b0a      	ldr	r3, [pc, #40]	; (80021d0 <HAL_Delay+0x44>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	461a      	mov	r2, r3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	4413      	add	r3, r2
 80021b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021b2:	bf00      	nop
 80021b4:	f7ff ffde 	bl	8002174 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d8f7      	bhi.n	80021b4 <HAL_Delay+0x28>
  {
  }
}
 80021c4:	bf00      	nop
 80021c6:	bf00      	nop
 80021c8:	3710      	adds	r7, #16
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	2400000c 	.word	0x2400000c

080021d4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80021d8:	4b03      	ldr	r3, [pc, #12]	; (80021e8 <HAL_GetREVID+0x14>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	0c1b      	lsrs	r3, r3, #16
}
 80021de:	4618      	mov	r0, r3
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr
 80021e8:	5c001000 	.word	0x5c001000

080021ec <__NVIC_SetPriorityGrouping>:
{
 80021ec:	b480      	push	{r7}
 80021ee:	b085      	sub	sp, #20
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f003 0307 	and.w	r3, r3, #7
 80021fa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021fc:	4b0b      	ldr	r3, [pc, #44]	; (800222c <__NVIC_SetPriorityGrouping+0x40>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002202:	68ba      	ldr	r2, [r7, #8]
 8002204:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002208:	4013      	ands	r3, r2
 800220a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002214:	4b06      	ldr	r3, [pc, #24]	; (8002230 <__NVIC_SetPriorityGrouping+0x44>)
 8002216:	4313      	orrs	r3, r2
 8002218:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800221a:	4a04      	ldr	r2, [pc, #16]	; (800222c <__NVIC_SetPriorityGrouping+0x40>)
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	60d3      	str	r3, [r2, #12]
}
 8002220:	bf00      	nop
 8002222:	3714      	adds	r7, #20
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr
 800222c:	e000ed00 	.word	0xe000ed00
 8002230:	05fa0000 	.word	0x05fa0000

08002234 <__NVIC_GetPriorityGrouping>:
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002238:	4b04      	ldr	r3, [pc, #16]	; (800224c <__NVIC_GetPriorityGrouping+0x18>)
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	0a1b      	lsrs	r3, r3, #8
 800223e:	f003 0307 	and.w	r3, r3, #7
}
 8002242:	4618      	mov	r0, r3
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr
 800224c:	e000ed00 	.word	0xe000ed00

08002250 <__NVIC_EnableIRQ>:
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	4603      	mov	r3, r0
 8002258:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800225a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800225e:	2b00      	cmp	r3, #0
 8002260:	db0b      	blt.n	800227a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002262:	88fb      	ldrh	r3, [r7, #6]
 8002264:	f003 021f 	and.w	r2, r3, #31
 8002268:	4907      	ldr	r1, [pc, #28]	; (8002288 <__NVIC_EnableIRQ+0x38>)
 800226a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800226e:	095b      	lsrs	r3, r3, #5
 8002270:	2001      	movs	r0, #1
 8002272:	fa00 f202 	lsl.w	r2, r0, r2
 8002276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800227a:	bf00      	nop
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	e000e100 	.word	0xe000e100

0800228c <__NVIC_SetPriority>:
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	4603      	mov	r3, r0
 8002294:	6039      	str	r1, [r7, #0]
 8002296:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002298:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800229c:	2b00      	cmp	r3, #0
 800229e:	db0a      	blt.n	80022b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	b2da      	uxtb	r2, r3
 80022a4:	490c      	ldr	r1, [pc, #48]	; (80022d8 <__NVIC_SetPriority+0x4c>)
 80022a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022aa:	0112      	lsls	r2, r2, #4
 80022ac:	b2d2      	uxtb	r2, r2
 80022ae:	440b      	add	r3, r1
 80022b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80022b4:	e00a      	b.n	80022cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	b2da      	uxtb	r2, r3
 80022ba:	4908      	ldr	r1, [pc, #32]	; (80022dc <__NVIC_SetPriority+0x50>)
 80022bc:	88fb      	ldrh	r3, [r7, #6]
 80022be:	f003 030f 	and.w	r3, r3, #15
 80022c2:	3b04      	subs	r3, #4
 80022c4:	0112      	lsls	r2, r2, #4
 80022c6:	b2d2      	uxtb	r2, r2
 80022c8:	440b      	add	r3, r1
 80022ca:	761a      	strb	r2, [r3, #24]
}
 80022cc:	bf00      	nop
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr
 80022d8:	e000e100 	.word	0xe000e100
 80022dc:	e000ed00 	.word	0xe000ed00

080022e0 <NVIC_EncodePriority>:
{
 80022e0:	b480      	push	{r7}
 80022e2:	b089      	sub	sp, #36	; 0x24
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f003 0307 	and.w	r3, r3, #7
 80022f2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	f1c3 0307 	rsb	r3, r3, #7
 80022fa:	2b04      	cmp	r3, #4
 80022fc:	bf28      	it	cs
 80022fe:	2304      	movcs	r3, #4
 8002300:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	3304      	adds	r3, #4
 8002306:	2b06      	cmp	r3, #6
 8002308:	d902      	bls.n	8002310 <NVIC_EncodePriority+0x30>
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	3b03      	subs	r3, #3
 800230e:	e000      	b.n	8002312 <NVIC_EncodePriority+0x32>
 8002310:	2300      	movs	r3, #0
 8002312:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002314:	f04f 32ff 	mov.w	r2, #4294967295
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	fa02 f303 	lsl.w	r3, r2, r3
 800231e:	43da      	mvns	r2, r3
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	401a      	ands	r2, r3
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002328:	f04f 31ff 	mov.w	r1, #4294967295
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	fa01 f303 	lsl.w	r3, r1, r3
 8002332:	43d9      	mvns	r1, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002338:	4313      	orrs	r3, r2
}
 800233a:	4618      	mov	r0, r3
 800233c:	3724      	adds	r7, #36	; 0x24
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
	...

08002348 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	3b01      	subs	r3, #1
 8002354:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002358:	d301      	bcc.n	800235e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800235a:	2301      	movs	r3, #1
 800235c:	e00f      	b.n	800237e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800235e:	4a0a      	ldr	r2, [pc, #40]	; (8002388 <SysTick_Config+0x40>)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	3b01      	subs	r3, #1
 8002364:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002366:	210f      	movs	r1, #15
 8002368:	f04f 30ff 	mov.w	r0, #4294967295
 800236c:	f7ff ff8e 	bl	800228c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002370:	4b05      	ldr	r3, [pc, #20]	; (8002388 <SysTick_Config+0x40>)
 8002372:	2200      	movs	r2, #0
 8002374:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002376:	4b04      	ldr	r3, [pc, #16]	; (8002388 <SysTick_Config+0x40>)
 8002378:	2207      	movs	r2, #7
 800237a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	e000e010 	.word	0xe000e010

0800238c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f7ff ff29 	bl	80021ec <__NVIC_SetPriorityGrouping>
}
 800239a:	bf00      	nop
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b086      	sub	sp, #24
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	4603      	mov	r3, r0
 80023aa:	60b9      	str	r1, [r7, #8]
 80023ac:	607a      	str	r2, [r7, #4]
 80023ae:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80023b0:	f7ff ff40 	bl	8002234 <__NVIC_GetPriorityGrouping>
 80023b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	68b9      	ldr	r1, [r7, #8]
 80023ba:	6978      	ldr	r0, [r7, #20]
 80023bc:	f7ff ff90 	bl	80022e0 <NVIC_EncodePriority>
 80023c0:	4602      	mov	r2, r0
 80023c2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80023c6:	4611      	mov	r1, r2
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7ff ff5f 	bl	800228c <__NVIC_SetPriority>
}
 80023ce:	bf00      	nop
 80023d0:	3718      	adds	r7, #24
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b082      	sub	sp, #8
 80023da:	af00      	add	r7, sp, #0
 80023dc:	4603      	mov	r3, r0
 80023de:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff ff33 	bl	8002250 <__NVIC_EnableIRQ>
}
 80023ea:	bf00      	nop
 80023ec:	3708      	adds	r7, #8
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b082      	sub	sp, #8
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f7ff ffa4 	bl	8002348 <SysTick_Config>
 8002400:	4603      	mov	r3, r0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
	...

0800240c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002410:	f3bf 8f5f 	dmb	sy
}
 8002414:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002416:	4b07      	ldr	r3, [pc, #28]	; (8002434 <HAL_MPU_Disable+0x28>)
 8002418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241a:	4a06      	ldr	r2, [pc, #24]	; (8002434 <HAL_MPU_Disable+0x28>)
 800241c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002420:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002422:	4b05      	ldr	r3, [pc, #20]	; (8002438 <HAL_MPU_Disable+0x2c>)
 8002424:	2200      	movs	r2, #0
 8002426:	605a      	str	r2, [r3, #4]
}
 8002428:	bf00      	nop
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	e000ed00 	.word	0xe000ed00
 8002438:	e000ed90 	.word	0xe000ed90

0800243c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002444:	4a0b      	ldr	r2, [pc, #44]	; (8002474 <HAL_MPU_Enable+0x38>)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f043 0301 	orr.w	r3, r3, #1
 800244c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800244e:	4b0a      	ldr	r3, [pc, #40]	; (8002478 <HAL_MPU_Enable+0x3c>)
 8002450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002452:	4a09      	ldr	r2, [pc, #36]	; (8002478 <HAL_MPU_Enable+0x3c>)
 8002454:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002458:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800245a:	f3bf 8f4f 	dsb	sy
}
 800245e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002460:	f3bf 8f6f 	isb	sy
}
 8002464:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002466:	bf00      	nop
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	e000ed90 	.word	0xe000ed90
 8002478:	e000ed00 	.word	0xe000ed00

0800247c <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	785a      	ldrb	r2, [r3, #1]
 8002488:	4b1d      	ldr	r3, [pc, #116]	; (8002500 <HAL_MPU_ConfigRegion+0x84>)
 800248a:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d029      	beq.n	80024e8 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8002494:	4a1a      	ldr	r2, [pc, #104]	; (8002500 <HAL_MPU_ConfigRegion+0x84>)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	7b1b      	ldrb	r3, [r3, #12]
 80024a0:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	7adb      	ldrb	r3, [r3, #11]
 80024a6:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80024a8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	7a9b      	ldrb	r3, [r3, #10]
 80024ae:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80024b0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	7b5b      	ldrb	r3, [r3, #13]
 80024b6:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80024b8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	7b9b      	ldrb	r3, [r3, #14]
 80024be:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80024c0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	7bdb      	ldrb	r3, [r3, #15]
 80024c6:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80024c8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	7a5b      	ldrb	r3, [r3, #9]
 80024ce:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80024d0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	7a1b      	ldrb	r3, [r3, #8]
 80024d6:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80024d8:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	7812      	ldrb	r2, [r2, #0]
 80024de:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80024e0:	4a07      	ldr	r2, [pc, #28]	; (8002500 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80024e2:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80024e4:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80024e6:	e005      	b.n	80024f4 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80024e8:	4b05      	ldr	r3, [pc, #20]	; (8002500 <HAL_MPU_ConfigRegion+0x84>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80024ee:	4b04      	ldr	r3, [pc, #16]	; (8002500 <HAL_MPU_ConfigRegion+0x84>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	611a      	str	r2, [r3, #16]
}
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr
 8002500:	e000ed90 	.word	0xe000ed90

08002504 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8002508:	f000 f802 	bl	8002510 <HAL_SYSTICK_Callback>
}
 800250c:	bf00      	nop
 800250e:	bd80      	pop	{r7, pc}

08002510 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8002514:	bf00      	nop
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
	...

08002520 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b086      	sub	sp, #24
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002528:	f7ff fe24 	bl	8002174 <HAL_GetTick>
 800252c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d101      	bne.n	8002538 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e316      	b.n	8002b66 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a66      	ldr	r2, [pc, #408]	; (80026d8 <HAL_DMA_Init+0x1b8>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d04a      	beq.n	80025d8 <HAL_DMA_Init+0xb8>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a65      	ldr	r2, [pc, #404]	; (80026dc <HAL_DMA_Init+0x1bc>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d045      	beq.n	80025d8 <HAL_DMA_Init+0xb8>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a63      	ldr	r2, [pc, #396]	; (80026e0 <HAL_DMA_Init+0x1c0>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d040      	beq.n	80025d8 <HAL_DMA_Init+0xb8>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a62      	ldr	r2, [pc, #392]	; (80026e4 <HAL_DMA_Init+0x1c4>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d03b      	beq.n	80025d8 <HAL_DMA_Init+0xb8>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a60      	ldr	r2, [pc, #384]	; (80026e8 <HAL_DMA_Init+0x1c8>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d036      	beq.n	80025d8 <HAL_DMA_Init+0xb8>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a5f      	ldr	r2, [pc, #380]	; (80026ec <HAL_DMA_Init+0x1cc>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d031      	beq.n	80025d8 <HAL_DMA_Init+0xb8>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a5d      	ldr	r2, [pc, #372]	; (80026f0 <HAL_DMA_Init+0x1d0>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d02c      	beq.n	80025d8 <HAL_DMA_Init+0xb8>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a5c      	ldr	r2, [pc, #368]	; (80026f4 <HAL_DMA_Init+0x1d4>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d027      	beq.n	80025d8 <HAL_DMA_Init+0xb8>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a5a      	ldr	r2, [pc, #360]	; (80026f8 <HAL_DMA_Init+0x1d8>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d022      	beq.n	80025d8 <HAL_DMA_Init+0xb8>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a59      	ldr	r2, [pc, #356]	; (80026fc <HAL_DMA_Init+0x1dc>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d01d      	beq.n	80025d8 <HAL_DMA_Init+0xb8>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a57      	ldr	r2, [pc, #348]	; (8002700 <HAL_DMA_Init+0x1e0>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d018      	beq.n	80025d8 <HAL_DMA_Init+0xb8>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a56      	ldr	r2, [pc, #344]	; (8002704 <HAL_DMA_Init+0x1e4>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d013      	beq.n	80025d8 <HAL_DMA_Init+0xb8>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a54      	ldr	r2, [pc, #336]	; (8002708 <HAL_DMA_Init+0x1e8>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d00e      	beq.n	80025d8 <HAL_DMA_Init+0xb8>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a53      	ldr	r2, [pc, #332]	; (800270c <HAL_DMA_Init+0x1ec>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d009      	beq.n	80025d8 <HAL_DMA_Init+0xb8>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a51      	ldr	r2, [pc, #324]	; (8002710 <HAL_DMA_Init+0x1f0>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d004      	beq.n	80025d8 <HAL_DMA_Init+0xb8>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a50      	ldr	r2, [pc, #320]	; (8002714 <HAL_DMA_Init+0x1f4>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d101      	bne.n	80025dc <HAL_DMA_Init+0xbc>
 80025d8:	2301      	movs	r3, #1
 80025da:	e000      	b.n	80025de <HAL_DMA_Init+0xbe>
 80025dc:	2300      	movs	r3, #0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	f000 813b 	beq.w	800285a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2202      	movs	r2, #2
 80025f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a37      	ldr	r2, [pc, #220]	; (80026d8 <HAL_DMA_Init+0x1b8>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d04a      	beq.n	8002694 <HAL_DMA_Init+0x174>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a36      	ldr	r2, [pc, #216]	; (80026dc <HAL_DMA_Init+0x1bc>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d045      	beq.n	8002694 <HAL_DMA_Init+0x174>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a34      	ldr	r2, [pc, #208]	; (80026e0 <HAL_DMA_Init+0x1c0>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d040      	beq.n	8002694 <HAL_DMA_Init+0x174>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a33      	ldr	r2, [pc, #204]	; (80026e4 <HAL_DMA_Init+0x1c4>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d03b      	beq.n	8002694 <HAL_DMA_Init+0x174>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a31      	ldr	r2, [pc, #196]	; (80026e8 <HAL_DMA_Init+0x1c8>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d036      	beq.n	8002694 <HAL_DMA_Init+0x174>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a30      	ldr	r2, [pc, #192]	; (80026ec <HAL_DMA_Init+0x1cc>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d031      	beq.n	8002694 <HAL_DMA_Init+0x174>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a2e      	ldr	r2, [pc, #184]	; (80026f0 <HAL_DMA_Init+0x1d0>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d02c      	beq.n	8002694 <HAL_DMA_Init+0x174>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a2d      	ldr	r2, [pc, #180]	; (80026f4 <HAL_DMA_Init+0x1d4>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d027      	beq.n	8002694 <HAL_DMA_Init+0x174>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a2b      	ldr	r2, [pc, #172]	; (80026f8 <HAL_DMA_Init+0x1d8>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d022      	beq.n	8002694 <HAL_DMA_Init+0x174>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a2a      	ldr	r2, [pc, #168]	; (80026fc <HAL_DMA_Init+0x1dc>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d01d      	beq.n	8002694 <HAL_DMA_Init+0x174>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a28      	ldr	r2, [pc, #160]	; (8002700 <HAL_DMA_Init+0x1e0>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d018      	beq.n	8002694 <HAL_DMA_Init+0x174>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a27      	ldr	r2, [pc, #156]	; (8002704 <HAL_DMA_Init+0x1e4>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d013      	beq.n	8002694 <HAL_DMA_Init+0x174>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a25      	ldr	r2, [pc, #148]	; (8002708 <HAL_DMA_Init+0x1e8>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d00e      	beq.n	8002694 <HAL_DMA_Init+0x174>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a24      	ldr	r2, [pc, #144]	; (800270c <HAL_DMA_Init+0x1ec>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d009      	beq.n	8002694 <HAL_DMA_Init+0x174>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a22      	ldr	r2, [pc, #136]	; (8002710 <HAL_DMA_Init+0x1f0>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d004      	beq.n	8002694 <HAL_DMA_Init+0x174>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a21      	ldr	r2, [pc, #132]	; (8002714 <HAL_DMA_Init+0x1f4>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d108      	bne.n	80026a6 <HAL_DMA_Init+0x186>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f022 0201 	bic.w	r2, r2, #1
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	e007      	b.n	80026b6 <HAL_DMA_Init+0x196>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f022 0201 	bic.w	r2, r2, #1
 80026b4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80026b6:	e02f      	b.n	8002718 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026b8:	f7ff fd5c 	bl	8002174 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b05      	cmp	r3, #5
 80026c4:	d928      	bls.n	8002718 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2220      	movs	r2, #32
 80026ca:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2203      	movs	r2, #3
 80026d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e246      	b.n	8002b66 <HAL_DMA_Init+0x646>
 80026d8:	40020010 	.word	0x40020010
 80026dc:	40020028 	.word	0x40020028
 80026e0:	40020040 	.word	0x40020040
 80026e4:	40020058 	.word	0x40020058
 80026e8:	40020070 	.word	0x40020070
 80026ec:	40020088 	.word	0x40020088
 80026f0:	400200a0 	.word	0x400200a0
 80026f4:	400200b8 	.word	0x400200b8
 80026f8:	40020410 	.word	0x40020410
 80026fc:	40020428 	.word	0x40020428
 8002700:	40020440 	.word	0x40020440
 8002704:	40020458 	.word	0x40020458
 8002708:	40020470 	.word	0x40020470
 800270c:	40020488 	.word	0x40020488
 8002710:	400204a0 	.word	0x400204a0
 8002714:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1c8      	bne.n	80026b8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800272e:	697a      	ldr	r2, [r7, #20]
 8002730:	4b83      	ldr	r3, [pc, #524]	; (8002940 <HAL_DMA_Init+0x420>)
 8002732:	4013      	ands	r3, r2
 8002734:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800273e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	691b      	ldr	r3, [r3, #16]
 8002744:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800274a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	699b      	ldr	r3, [r3, #24]
 8002750:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002756:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a1b      	ldr	r3, [r3, #32]
 800275c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800275e:	697a      	ldr	r2, [r7, #20]
 8002760:	4313      	orrs	r3, r2
 8002762:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002768:	2b04      	cmp	r3, #4
 800276a:	d107      	bne.n	800277c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002774:	4313      	orrs	r3, r2
 8002776:	697a      	ldr	r2, [r7, #20]
 8002778:	4313      	orrs	r3, r2
 800277a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800277c:	4b71      	ldr	r3, [pc, #452]	; (8002944 <HAL_DMA_Init+0x424>)
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	4b71      	ldr	r3, [pc, #452]	; (8002948 <HAL_DMA_Init+0x428>)
 8002782:	4013      	ands	r3, r2
 8002784:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002788:	d328      	bcc.n	80027dc <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	2b28      	cmp	r3, #40	; 0x28
 8002790:	d903      	bls.n	800279a <HAL_DMA_Init+0x27a>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	2b2e      	cmp	r3, #46	; 0x2e
 8002798:	d917      	bls.n	80027ca <HAL_DMA_Init+0x2aa>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	2b3e      	cmp	r3, #62	; 0x3e
 80027a0:	d903      	bls.n	80027aa <HAL_DMA_Init+0x28a>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	2b42      	cmp	r3, #66	; 0x42
 80027a8:	d90f      	bls.n	80027ca <HAL_DMA_Init+0x2aa>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	2b46      	cmp	r3, #70	; 0x46
 80027b0:	d903      	bls.n	80027ba <HAL_DMA_Init+0x29a>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	2b48      	cmp	r3, #72	; 0x48
 80027b8:	d907      	bls.n	80027ca <HAL_DMA_Init+0x2aa>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	2b4e      	cmp	r3, #78	; 0x4e
 80027c0:	d905      	bls.n	80027ce <HAL_DMA_Init+0x2ae>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	2b52      	cmp	r3, #82	; 0x52
 80027c8:	d801      	bhi.n	80027ce <HAL_DMA_Init+0x2ae>
 80027ca:	2301      	movs	r3, #1
 80027cc:	e000      	b.n	80027d0 <HAL_DMA_Init+0x2b0>
 80027ce:	2300      	movs	r3, #0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d003      	beq.n	80027dc <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027da:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	697a      	ldr	r2, [r7, #20]
 80027e2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	f023 0307 	bic.w	r3, r3, #7
 80027f2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f8:	697a      	ldr	r2, [r7, #20]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002802:	2b04      	cmp	r3, #4
 8002804:	d117      	bne.n	8002836 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800280a:	697a      	ldr	r2, [r7, #20]
 800280c:	4313      	orrs	r3, r2
 800280e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002814:	2b00      	cmp	r3, #0
 8002816:	d00e      	beq.n	8002836 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f002 fb4d 	bl	8004eb8 <DMA_CheckFifoParam>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d008      	beq.n	8002836 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2240      	movs	r2, #64	; 0x40
 8002828:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2201      	movs	r2, #1
 800282e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e197      	b.n	8002b66 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	697a      	ldr	r2, [r7, #20]
 800283c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f002 fa88 	bl	8004d54 <DMA_CalcBaseAndBitshift>
 8002844:	4603      	mov	r3, r0
 8002846:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800284c:	f003 031f 	and.w	r3, r3, #31
 8002850:	223f      	movs	r2, #63	; 0x3f
 8002852:	409a      	lsls	r2, r3
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	609a      	str	r2, [r3, #8]
 8002858:	e0cd      	b.n	80029f6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a3b      	ldr	r2, [pc, #236]	; (800294c <HAL_DMA_Init+0x42c>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d022      	beq.n	80028aa <HAL_DMA_Init+0x38a>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a39      	ldr	r2, [pc, #228]	; (8002950 <HAL_DMA_Init+0x430>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d01d      	beq.n	80028aa <HAL_DMA_Init+0x38a>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a38      	ldr	r2, [pc, #224]	; (8002954 <HAL_DMA_Init+0x434>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d018      	beq.n	80028aa <HAL_DMA_Init+0x38a>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a36      	ldr	r2, [pc, #216]	; (8002958 <HAL_DMA_Init+0x438>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d013      	beq.n	80028aa <HAL_DMA_Init+0x38a>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a35      	ldr	r2, [pc, #212]	; (800295c <HAL_DMA_Init+0x43c>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d00e      	beq.n	80028aa <HAL_DMA_Init+0x38a>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a33      	ldr	r2, [pc, #204]	; (8002960 <HAL_DMA_Init+0x440>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d009      	beq.n	80028aa <HAL_DMA_Init+0x38a>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a32      	ldr	r2, [pc, #200]	; (8002964 <HAL_DMA_Init+0x444>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d004      	beq.n	80028aa <HAL_DMA_Init+0x38a>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a30      	ldr	r2, [pc, #192]	; (8002968 <HAL_DMA_Init+0x448>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d101      	bne.n	80028ae <HAL_DMA_Init+0x38e>
 80028aa:	2301      	movs	r3, #1
 80028ac:	e000      	b.n	80028b0 <HAL_DMA_Init+0x390>
 80028ae:	2300      	movs	r3, #0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f000 8097 	beq.w	80029e4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a24      	ldr	r2, [pc, #144]	; (800294c <HAL_DMA_Init+0x42c>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d021      	beq.n	8002904 <HAL_DMA_Init+0x3e4>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a22      	ldr	r2, [pc, #136]	; (8002950 <HAL_DMA_Init+0x430>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d01c      	beq.n	8002904 <HAL_DMA_Init+0x3e4>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a21      	ldr	r2, [pc, #132]	; (8002954 <HAL_DMA_Init+0x434>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d017      	beq.n	8002904 <HAL_DMA_Init+0x3e4>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a1f      	ldr	r2, [pc, #124]	; (8002958 <HAL_DMA_Init+0x438>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d012      	beq.n	8002904 <HAL_DMA_Init+0x3e4>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a1e      	ldr	r2, [pc, #120]	; (800295c <HAL_DMA_Init+0x43c>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d00d      	beq.n	8002904 <HAL_DMA_Init+0x3e4>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a1c      	ldr	r2, [pc, #112]	; (8002960 <HAL_DMA_Init+0x440>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d008      	beq.n	8002904 <HAL_DMA_Init+0x3e4>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a1b      	ldr	r2, [pc, #108]	; (8002964 <HAL_DMA_Init+0x444>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d003      	beq.n	8002904 <HAL_DMA_Init+0x3e4>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a19      	ldr	r2, [pc, #100]	; (8002968 <HAL_DMA_Init+0x448>)
 8002902:	4293      	cmp	r3, r2
 8002904:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2202      	movs	r2, #2
 8002912:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800291e:	697a      	ldr	r2, [r7, #20]
 8002920:	4b12      	ldr	r3, [pc, #72]	; (800296c <HAL_DMA_Init+0x44c>)
 8002922:	4013      	ands	r3, r2
 8002924:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	2b40      	cmp	r3, #64	; 0x40
 800292c:	d020      	beq.n	8002970 <HAL_DMA_Init+0x450>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	2b80      	cmp	r3, #128	; 0x80
 8002934:	d102      	bne.n	800293c <HAL_DMA_Init+0x41c>
 8002936:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800293a:	e01a      	b.n	8002972 <HAL_DMA_Init+0x452>
 800293c:	2300      	movs	r3, #0
 800293e:	e018      	b.n	8002972 <HAL_DMA_Init+0x452>
 8002940:	fe10803f 	.word	0xfe10803f
 8002944:	5c001000 	.word	0x5c001000
 8002948:	ffff0000 	.word	0xffff0000
 800294c:	58025408 	.word	0x58025408
 8002950:	5802541c 	.word	0x5802541c
 8002954:	58025430 	.word	0x58025430
 8002958:	58025444 	.word	0x58025444
 800295c:	58025458 	.word	0x58025458
 8002960:	5802546c 	.word	0x5802546c
 8002964:	58025480 	.word	0x58025480
 8002968:	58025494 	.word	0x58025494
 800296c:	fffe000f 	.word	0xfffe000f
 8002970:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	68d2      	ldr	r2, [r2, #12]
 8002976:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002978:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002980:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	695b      	ldr	r3, [r3, #20]
 8002986:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002988:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002990:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	69db      	ldr	r3, [r3, #28]
 8002996:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002998:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a1b      	ldr	r3, [r3, #32]
 800299e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80029a0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80029a2:	697a      	ldr	r2, [r7, #20]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	697a      	ldr	r2, [r7, #20]
 80029ae:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	461a      	mov	r2, r3
 80029b6:	4b6e      	ldr	r3, [pc, #440]	; (8002b70 <HAL_DMA_Init+0x650>)
 80029b8:	4413      	add	r3, r2
 80029ba:	4a6e      	ldr	r2, [pc, #440]	; (8002b74 <HAL_DMA_Init+0x654>)
 80029bc:	fba2 2303 	umull	r2, r3, r2, r3
 80029c0:	091b      	lsrs	r3, r3, #4
 80029c2:	009a      	lsls	r2, r3, #2
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f002 f9c3 	bl	8004d54 <DMA_CalcBaseAndBitshift>
 80029ce:	4603      	mov	r3, r0
 80029d0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d6:	f003 031f 	and.w	r3, r3, #31
 80029da:	2201      	movs	r2, #1
 80029dc:	409a      	lsls	r2, r3
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	605a      	str	r2, [r3, #4]
 80029e2:	e008      	b.n	80029f6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2240      	movs	r2, #64	; 0x40
 80029e8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2203      	movs	r2, #3
 80029ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e0b7      	b.n	8002b66 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a5f      	ldr	r2, [pc, #380]	; (8002b78 <HAL_DMA_Init+0x658>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d072      	beq.n	8002ae6 <HAL_DMA_Init+0x5c6>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a5d      	ldr	r2, [pc, #372]	; (8002b7c <HAL_DMA_Init+0x65c>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d06d      	beq.n	8002ae6 <HAL_DMA_Init+0x5c6>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a5c      	ldr	r2, [pc, #368]	; (8002b80 <HAL_DMA_Init+0x660>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d068      	beq.n	8002ae6 <HAL_DMA_Init+0x5c6>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a5a      	ldr	r2, [pc, #360]	; (8002b84 <HAL_DMA_Init+0x664>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d063      	beq.n	8002ae6 <HAL_DMA_Init+0x5c6>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a59      	ldr	r2, [pc, #356]	; (8002b88 <HAL_DMA_Init+0x668>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d05e      	beq.n	8002ae6 <HAL_DMA_Init+0x5c6>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a57      	ldr	r2, [pc, #348]	; (8002b8c <HAL_DMA_Init+0x66c>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d059      	beq.n	8002ae6 <HAL_DMA_Init+0x5c6>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a56      	ldr	r2, [pc, #344]	; (8002b90 <HAL_DMA_Init+0x670>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d054      	beq.n	8002ae6 <HAL_DMA_Init+0x5c6>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a54      	ldr	r2, [pc, #336]	; (8002b94 <HAL_DMA_Init+0x674>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d04f      	beq.n	8002ae6 <HAL_DMA_Init+0x5c6>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a53      	ldr	r2, [pc, #332]	; (8002b98 <HAL_DMA_Init+0x678>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d04a      	beq.n	8002ae6 <HAL_DMA_Init+0x5c6>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a51      	ldr	r2, [pc, #324]	; (8002b9c <HAL_DMA_Init+0x67c>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d045      	beq.n	8002ae6 <HAL_DMA_Init+0x5c6>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a50      	ldr	r2, [pc, #320]	; (8002ba0 <HAL_DMA_Init+0x680>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d040      	beq.n	8002ae6 <HAL_DMA_Init+0x5c6>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a4e      	ldr	r2, [pc, #312]	; (8002ba4 <HAL_DMA_Init+0x684>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d03b      	beq.n	8002ae6 <HAL_DMA_Init+0x5c6>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a4d      	ldr	r2, [pc, #308]	; (8002ba8 <HAL_DMA_Init+0x688>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d036      	beq.n	8002ae6 <HAL_DMA_Init+0x5c6>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a4b      	ldr	r2, [pc, #300]	; (8002bac <HAL_DMA_Init+0x68c>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d031      	beq.n	8002ae6 <HAL_DMA_Init+0x5c6>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a4a      	ldr	r2, [pc, #296]	; (8002bb0 <HAL_DMA_Init+0x690>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d02c      	beq.n	8002ae6 <HAL_DMA_Init+0x5c6>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a48      	ldr	r2, [pc, #288]	; (8002bb4 <HAL_DMA_Init+0x694>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d027      	beq.n	8002ae6 <HAL_DMA_Init+0x5c6>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a47      	ldr	r2, [pc, #284]	; (8002bb8 <HAL_DMA_Init+0x698>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d022      	beq.n	8002ae6 <HAL_DMA_Init+0x5c6>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a45      	ldr	r2, [pc, #276]	; (8002bbc <HAL_DMA_Init+0x69c>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d01d      	beq.n	8002ae6 <HAL_DMA_Init+0x5c6>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a44      	ldr	r2, [pc, #272]	; (8002bc0 <HAL_DMA_Init+0x6a0>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d018      	beq.n	8002ae6 <HAL_DMA_Init+0x5c6>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a42      	ldr	r2, [pc, #264]	; (8002bc4 <HAL_DMA_Init+0x6a4>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d013      	beq.n	8002ae6 <HAL_DMA_Init+0x5c6>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a41      	ldr	r2, [pc, #260]	; (8002bc8 <HAL_DMA_Init+0x6a8>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d00e      	beq.n	8002ae6 <HAL_DMA_Init+0x5c6>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a3f      	ldr	r2, [pc, #252]	; (8002bcc <HAL_DMA_Init+0x6ac>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d009      	beq.n	8002ae6 <HAL_DMA_Init+0x5c6>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a3e      	ldr	r2, [pc, #248]	; (8002bd0 <HAL_DMA_Init+0x6b0>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d004      	beq.n	8002ae6 <HAL_DMA_Init+0x5c6>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a3c      	ldr	r2, [pc, #240]	; (8002bd4 <HAL_DMA_Init+0x6b4>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d101      	bne.n	8002aea <HAL_DMA_Init+0x5ca>
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e000      	b.n	8002aec <HAL_DMA_Init+0x5cc>
 8002aea:	2300      	movs	r3, #0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d032      	beq.n	8002b56 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f002 fa5d 	bl	8004fb0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	2b80      	cmp	r3, #128	; 0x80
 8002afc:	d102      	bne.n	8002b04 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685a      	ldr	r2, [r3, #4]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b0c:	b2d2      	uxtb	r2, r2
 8002b0e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002b18:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d010      	beq.n	8002b44 <HAL_DMA_Init+0x624>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	2b08      	cmp	r3, #8
 8002b28:	d80c      	bhi.n	8002b44 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f002 fada 	bl	80050e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b34:	2200      	movs	r2, #0
 8002b36:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002b40:	605a      	str	r2, [r3, #4]
 8002b42:	e008      	b.n	8002b56 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3718      	adds	r7, #24
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	a7fdabf8 	.word	0xa7fdabf8
 8002b74:	cccccccd 	.word	0xcccccccd
 8002b78:	40020010 	.word	0x40020010
 8002b7c:	40020028 	.word	0x40020028
 8002b80:	40020040 	.word	0x40020040
 8002b84:	40020058 	.word	0x40020058
 8002b88:	40020070 	.word	0x40020070
 8002b8c:	40020088 	.word	0x40020088
 8002b90:	400200a0 	.word	0x400200a0
 8002b94:	400200b8 	.word	0x400200b8
 8002b98:	40020410 	.word	0x40020410
 8002b9c:	40020428 	.word	0x40020428
 8002ba0:	40020440 	.word	0x40020440
 8002ba4:	40020458 	.word	0x40020458
 8002ba8:	40020470 	.word	0x40020470
 8002bac:	40020488 	.word	0x40020488
 8002bb0:	400204a0 	.word	0x400204a0
 8002bb4:	400204b8 	.word	0x400204b8
 8002bb8:	58025408 	.word	0x58025408
 8002bbc:	5802541c 	.word	0x5802541c
 8002bc0:	58025430 	.word	0x58025430
 8002bc4:	58025444 	.word	0x58025444
 8002bc8:	58025458 	.word	0x58025458
 8002bcc:	5802546c 	.word	0x5802546c
 8002bd0:	58025480 	.word	0x58025480
 8002bd4:	58025494 	.word	0x58025494

08002bd8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b086      	sub	sp, #24
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	607a      	str	r2, [r7, #4]
 8002be4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002be6:	2300      	movs	r3, #0
 8002be8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d101      	bne.n	8002bf4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e226      	b.n	8003042 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d101      	bne.n	8002c02 <HAL_DMA_Start_IT+0x2a>
 8002bfe:	2302      	movs	r3, #2
 8002c00:	e21f      	b.n	8003042 <HAL_DMA_Start_IT+0x46a>
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	f040 820a 	bne.w	800302c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2200      	movs	r2, #0
 8002c24:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a68      	ldr	r2, [pc, #416]	; (8002dcc <HAL_DMA_Start_IT+0x1f4>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d04a      	beq.n	8002cc6 <HAL_DMA_Start_IT+0xee>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a66      	ldr	r2, [pc, #408]	; (8002dd0 <HAL_DMA_Start_IT+0x1f8>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d045      	beq.n	8002cc6 <HAL_DMA_Start_IT+0xee>
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a65      	ldr	r2, [pc, #404]	; (8002dd4 <HAL_DMA_Start_IT+0x1fc>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d040      	beq.n	8002cc6 <HAL_DMA_Start_IT+0xee>
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a63      	ldr	r2, [pc, #396]	; (8002dd8 <HAL_DMA_Start_IT+0x200>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d03b      	beq.n	8002cc6 <HAL_DMA_Start_IT+0xee>
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a62      	ldr	r2, [pc, #392]	; (8002ddc <HAL_DMA_Start_IT+0x204>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d036      	beq.n	8002cc6 <HAL_DMA_Start_IT+0xee>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a60      	ldr	r2, [pc, #384]	; (8002de0 <HAL_DMA_Start_IT+0x208>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d031      	beq.n	8002cc6 <HAL_DMA_Start_IT+0xee>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a5f      	ldr	r2, [pc, #380]	; (8002de4 <HAL_DMA_Start_IT+0x20c>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d02c      	beq.n	8002cc6 <HAL_DMA_Start_IT+0xee>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a5d      	ldr	r2, [pc, #372]	; (8002de8 <HAL_DMA_Start_IT+0x210>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d027      	beq.n	8002cc6 <HAL_DMA_Start_IT+0xee>
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a5c      	ldr	r2, [pc, #368]	; (8002dec <HAL_DMA_Start_IT+0x214>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d022      	beq.n	8002cc6 <HAL_DMA_Start_IT+0xee>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a5a      	ldr	r2, [pc, #360]	; (8002df0 <HAL_DMA_Start_IT+0x218>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d01d      	beq.n	8002cc6 <HAL_DMA_Start_IT+0xee>
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a59      	ldr	r2, [pc, #356]	; (8002df4 <HAL_DMA_Start_IT+0x21c>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d018      	beq.n	8002cc6 <HAL_DMA_Start_IT+0xee>
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a57      	ldr	r2, [pc, #348]	; (8002df8 <HAL_DMA_Start_IT+0x220>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d013      	beq.n	8002cc6 <HAL_DMA_Start_IT+0xee>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a56      	ldr	r2, [pc, #344]	; (8002dfc <HAL_DMA_Start_IT+0x224>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d00e      	beq.n	8002cc6 <HAL_DMA_Start_IT+0xee>
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a54      	ldr	r2, [pc, #336]	; (8002e00 <HAL_DMA_Start_IT+0x228>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d009      	beq.n	8002cc6 <HAL_DMA_Start_IT+0xee>
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a53      	ldr	r2, [pc, #332]	; (8002e04 <HAL_DMA_Start_IT+0x22c>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d004      	beq.n	8002cc6 <HAL_DMA_Start_IT+0xee>
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a51      	ldr	r2, [pc, #324]	; (8002e08 <HAL_DMA_Start_IT+0x230>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d108      	bne.n	8002cd8 <HAL_DMA_Start_IT+0x100>
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f022 0201 	bic.w	r2, r2, #1
 8002cd4:	601a      	str	r2, [r3, #0]
 8002cd6:	e007      	b.n	8002ce8 <HAL_DMA_Start_IT+0x110>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f022 0201 	bic.w	r2, r2, #1
 8002ce6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	68b9      	ldr	r1, [r7, #8]
 8002cee:	68f8      	ldr	r0, [r7, #12]
 8002cf0:	f001 fe84 	bl	80049fc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a34      	ldr	r2, [pc, #208]	; (8002dcc <HAL_DMA_Start_IT+0x1f4>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d04a      	beq.n	8002d94 <HAL_DMA_Start_IT+0x1bc>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a33      	ldr	r2, [pc, #204]	; (8002dd0 <HAL_DMA_Start_IT+0x1f8>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d045      	beq.n	8002d94 <HAL_DMA_Start_IT+0x1bc>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a31      	ldr	r2, [pc, #196]	; (8002dd4 <HAL_DMA_Start_IT+0x1fc>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d040      	beq.n	8002d94 <HAL_DMA_Start_IT+0x1bc>
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a30      	ldr	r2, [pc, #192]	; (8002dd8 <HAL_DMA_Start_IT+0x200>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d03b      	beq.n	8002d94 <HAL_DMA_Start_IT+0x1bc>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a2e      	ldr	r2, [pc, #184]	; (8002ddc <HAL_DMA_Start_IT+0x204>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d036      	beq.n	8002d94 <HAL_DMA_Start_IT+0x1bc>
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a2d      	ldr	r2, [pc, #180]	; (8002de0 <HAL_DMA_Start_IT+0x208>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d031      	beq.n	8002d94 <HAL_DMA_Start_IT+0x1bc>
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a2b      	ldr	r2, [pc, #172]	; (8002de4 <HAL_DMA_Start_IT+0x20c>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d02c      	beq.n	8002d94 <HAL_DMA_Start_IT+0x1bc>
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a2a      	ldr	r2, [pc, #168]	; (8002de8 <HAL_DMA_Start_IT+0x210>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d027      	beq.n	8002d94 <HAL_DMA_Start_IT+0x1bc>
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a28      	ldr	r2, [pc, #160]	; (8002dec <HAL_DMA_Start_IT+0x214>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d022      	beq.n	8002d94 <HAL_DMA_Start_IT+0x1bc>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a27      	ldr	r2, [pc, #156]	; (8002df0 <HAL_DMA_Start_IT+0x218>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d01d      	beq.n	8002d94 <HAL_DMA_Start_IT+0x1bc>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a25      	ldr	r2, [pc, #148]	; (8002df4 <HAL_DMA_Start_IT+0x21c>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d018      	beq.n	8002d94 <HAL_DMA_Start_IT+0x1bc>
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a24      	ldr	r2, [pc, #144]	; (8002df8 <HAL_DMA_Start_IT+0x220>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d013      	beq.n	8002d94 <HAL_DMA_Start_IT+0x1bc>
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a22      	ldr	r2, [pc, #136]	; (8002dfc <HAL_DMA_Start_IT+0x224>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d00e      	beq.n	8002d94 <HAL_DMA_Start_IT+0x1bc>
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a21      	ldr	r2, [pc, #132]	; (8002e00 <HAL_DMA_Start_IT+0x228>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d009      	beq.n	8002d94 <HAL_DMA_Start_IT+0x1bc>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a1f      	ldr	r2, [pc, #124]	; (8002e04 <HAL_DMA_Start_IT+0x22c>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d004      	beq.n	8002d94 <HAL_DMA_Start_IT+0x1bc>
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a1e      	ldr	r2, [pc, #120]	; (8002e08 <HAL_DMA_Start_IT+0x230>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d101      	bne.n	8002d98 <HAL_DMA_Start_IT+0x1c0>
 8002d94:	2301      	movs	r3, #1
 8002d96:	e000      	b.n	8002d9a <HAL_DMA_Start_IT+0x1c2>
 8002d98:	2300      	movs	r3, #0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d036      	beq.n	8002e0c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f023 021e 	bic.w	r2, r3, #30
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f042 0216 	orr.w	r2, r2, #22
 8002db0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d03e      	beq.n	8002e38 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f042 0208 	orr.w	r2, r2, #8
 8002dc8:	601a      	str	r2, [r3, #0]
 8002dca:	e035      	b.n	8002e38 <HAL_DMA_Start_IT+0x260>
 8002dcc:	40020010 	.word	0x40020010
 8002dd0:	40020028 	.word	0x40020028
 8002dd4:	40020040 	.word	0x40020040
 8002dd8:	40020058 	.word	0x40020058
 8002ddc:	40020070 	.word	0x40020070
 8002de0:	40020088 	.word	0x40020088
 8002de4:	400200a0 	.word	0x400200a0
 8002de8:	400200b8 	.word	0x400200b8
 8002dec:	40020410 	.word	0x40020410
 8002df0:	40020428 	.word	0x40020428
 8002df4:	40020440 	.word	0x40020440
 8002df8:	40020458 	.word	0x40020458
 8002dfc:	40020470 	.word	0x40020470
 8002e00:	40020488 	.word	0x40020488
 8002e04:	400204a0 	.word	0x400204a0
 8002e08:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f023 020e 	bic.w	r2, r3, #14
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f042 020a 	orr.w	r2, r2, #10
 8002e1e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d007      	beq.n	8002e38 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f042 0204 	orr.w	r2, r2, #4
 8002e36:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a83      	ldr	r2, [pc, #524]	; (800304c <HAL_DMA_Start_IT+0x474>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d072      	beq.n	8002f28 <HAL_DMA_Start_IT+0x350>
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a82      	ldr	r2, [pc, #520]	; (8003050 <HAL_DMA_Start_IT+0x478>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d06d      	beq.n	8002f28 <HAL_DMA_Start_IT+0x350>
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a80      	ldr	r2, [pc, #512]	; (8003054 <HAL_DMA_Start_IT+0x47c>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d068      	beq.n	8002f28 <HAL_DMA_Start_IT+0x350>
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a7f      	ldr	r2, [pc, #508]	; (8003058 <HAL_DMA_Start_IT+0x480>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d063      	beq.n	8002f28 <HAL_DMA_Start_IT+0x350>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a7d      	ldr	r2, [pc, #500]	; (800305c <HAL_DMA_Start_IT+0x484>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d05e      	beq.n	8002f28 <HAL_DMA_Start_IT+0x350>
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a7c      	ldr	r2, [pc, #496]	; (8003060 <HAL_DMA_Start_IT+0x488>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d059      	beq.n	8002f28 <HAL_DMA_Start_IT+0x350>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a7a      	ldr	r2, [pc, #488]	; (8003064 <HAL_DMA_Start_IT+0x48c>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d054      	beq.n	8002f28 <HAL_DMA_Start_IT+0x350>
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a79      	ldr	r2, [pc, #484]	; (8003068 <HAL_DMA_Start_IT+0x490>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d04f      	beq.n	8002f28 <HAL_DMA_Start_IT+0x350>
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a77      	ldr	r2, [pc, #476]	; (800306c <HAL_DMA_Start_IT+0x494>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d04a      	beq.n	8002f28 <HAL_DMA_Start_IT+0x350>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a76      	ldr	r2, [pc, #472]	; (8003070 <HAL_DMA_Start_IT+0x498>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d045      	beq.n	8002f28 <HAL_DMA_Start_IT+0x350>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a74      	ldr	r2, [pc, #464]	; (8003074 <HAL_DMA_Start_IT+0x49c>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d040      	beq.n	8002f28 <HAL_DMA_Start_IT+0x350>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a73      	ldr	r2, [pc, #460]	; (8003078 <HAL_DMA_Start_IT+0x4a0>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d03b      	beq.n	8002f28 <HAL_DMA_Start_IT+0x350>
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a71      	ldr	r2, [pc, #452]	; (800307c <HAL_DMA_Start_IT+0x4a4>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d036      	beq.n	8002f28 <HAL_DMA_Start_IT+0x350>
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a70      	ldr	r2, [pc, #448]	; (8003080 <HAL_DMA_Start_IT+0x4a8>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d031      	beq.n	8002f28 <HAL_DMA_Start_IT+0x350>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a6e      	ldr	r2, [pc, #440]	; (8003084 <HAL_DMA_Start_IT+0x4ac>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d02c      	beq.n	8002f28 <HAL_DMA_Start_IT+0x350>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a6d      	ldr	r2, [pc, #436]	; (8003088 <HAL_DMA_Start_IT+0x4b0>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d027      	beq.n	8002f28 <HAL_DMA_Start_IT+0x350>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a6b      	ldr	r2, [pc, #428]	; (800308c <HAL_DMA_Start_IT+0x4b4>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d022      	beq.n	8002f28 <HAL_DMA_Start_IT+0x350>
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a6a      	ldr	r2, [pc, #424]	; (8003090 <HAL_DMA_Start_IT+0x4b8>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d01d      	beq.n	8002f28 <HAL_DMA_Start_IT+0x350>
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a68      	ldr	r2, [pc, #416]	; (8003094 <HAL_DMA_Start_IT+0x4bc>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d018      	beq.n	8002f28 <HAL_DMA_Start_IT+0x350>
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a67      	ldr	r2, [pc, #412]	; (8003098 <HAL_DMA_Start_IT+0x4c0>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d013      	beq.n	8002f28 <HAL_DMA_Start_IT+0x350>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a65      	ldr	r2, [pc, #404]	; (800309c <HAL_DMA_Start_IT+0x4c4>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d00e      	beq.n	8002f28 <HAL_DMA_Start_IT+0x350>
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a64      	ldr	r2, [pc, #400]	; (80030a0 <HAL_DMA_Start_IT+0x4c8>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d009      	beq.n	8002f28 <HAL_DMA_Start_IT+0x350>
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a62      	ldr	r2, [pc, #392]	; (80030a4 <HAL_DMA_Start_IT+0x4cc>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d004      	beq.n	8002f28 <HAL_DMA_Start_IT+0x350>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a61      	ldr	r2, [pc, #388]	; (80030a8 <HAL_DMA_Start_IT+0x4d0>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d101      	bne.n	8002f2c <HAL_DMA_Start_IT+0x354>
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e000      	b.n	8002f2e <HAL_DMA_Start_IT+0x356>
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d01a      	beq.n	8002f68 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d007      	beq.n	8002f50 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f4e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d007      	beq.n	8002f68 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f66:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a37      	ldr	r2, [pc, #220]	; (800304c <HAL_DMA_Start_IT+0x474>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d04a      	beq.n	8003008 <HAL_DMA_Start_IT+0x430>
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a36      	ldr	r2, [pc, #216]	; (8003050 <HAL_DMA_Start_IT+0x478>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d045      	beq.n	8003008 <HAL_DMA_Start_IT+0x430>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a34      	ldr	r2, [pc, #208]	; (8003054 <HAL_DMA_Start_IT+0x47c>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d040      	beq.n	8003008 <HAL_DMA_Start_IT+0x430>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a33      	ldr	r2, [pc, #204]	; (8003058 <HAL_DMA_Start_IT+0x480>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d03b      	beq.n	8003008 <HAL_DMA_Start_IT+0x430>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a31      	ldr	r2, [pc, #196]	; (800305c <HAL_DMA_Start_IT+0x484>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d036      	beq.n	8003008 <HAL_DMA_Start_IT+0x430>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a30      	ldr	r2, [pc, #192]	; (8003060 <HAL_DMA_Start_IT+0x488>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d031      	beq.n	8003008 <HAL_DMA_Start_IT+0x430>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a2e      	ldr	r2, [pc, #184]	; (8003064 <HAL_DMA_Start_IT+0x48c>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d02c      	beq.n	8003008 <HAL_DMA_Start_IT+0x430>
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a2d      	ldr	r2, [pc, #180]	; (8003068 <HAL_DMA_Start_IT+0x490>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d027      	beq.n	8003008 <HAL_DMA_Start_IT+0x430>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a2b      	ldr	r2, [pc, #172]	; (800306c <HAL_DMA_Start_IT+0x494>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d022      	beq.n	8003008 <HAL_DMA_Start_IT+0x430>
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a2a      	ldr	r2, [pc, #168]	; (8003070 <HAL_DMA_Start_IT+0x498>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d01d      	beq.n	8003008 <HAL_DMA_Start_IT+0x430>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a28      	ldr	r2, [pc, #160]	; (8003074 <HAL_DMA_Start_IT+0x49c>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d018      	beq.n	8003008 <HAL_DMA_Start_IT+0x430>
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a27      	ldr	r2, [pc, #156]	; (8003078 <HAL_DMA_Start_IT+0x4a0>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d013      	beq.n	8003008 <HAL_DMA_Start_IT+0x430>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a25      	ldr	r2, [pc, #148]	; (800307c <HAL_DMA_Start_IT+0x4a4>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d00e      	beq.n	8003008 <HAL_DMA_Start_IT+0x430>
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a24      	ldr	r2, [pc, #144]	; (8003080 <HAL_DMA_Start_IT+0x4a8>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d009      	beq.n	8003008 <HAL_DMA_Start_IT+0x430>
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a22      	ldr	r2, [pc, #136]	; (8003084 <HAL_DMA_Start_IT+0x4ac>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d004      	beq.n	8003008 <HAL_DMA_Start_IT+0x430>
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a21      	ldr	r2, [pc, #132]	; (8003088 <HAL_DMA_Start_IT+0x4b0>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d108      	bne.n	800301a <HAL_DMA_Start_IT+0x442>
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f042 0201 	orr.w	r2, r2, #1
 8003016:	601a      	str	r2, [r3, #0]
 8003018:	e012      	b.n	8003040 <HAL_DMA_Start_IT+0x468>
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f042 0201 	orr.w	r2, r2, #1
 8003028:	601a      	str	r2, [r3, #0]
 800302a:	e009      	b.n	8003040 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800303a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003040:	7dfb      	ldrb	r3, [r7, #23]
}
 8003042:	4618      	mov	r0, r3
 8003044:	3718      	adds	r7, #24
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	40020010 	.word	0x40020010
 8003050:	40020028 	.word	0x40020028
 8003054:	40020040 	.word	0x40020040
 8003058:	40020058 	.word	0x40020058
 800305c:	40020070 	.word	0x40020070
 8003060:	40020088 	.word	0x40020088
 8003064:	400200a0 	.word	0x400200a0
 8003068:	400200b8 	.word	0x400200b8
 800306c:	40020410 	.word	0x40020410
 8003070:	40020428 	.word	0x40020428
 8003074:	40020440 	.word	0x40020440
 8003078:	40020458 	.word	0x40020458
 800307c:	40020470 	.word	0x40020470
 8003080:	40020488 	.word	0x40020488
 8003084:	400204a0 	.word	0x400204a0
 8003088:	400204b8 	.word	0x400204b8
 800308c:	58025408 	.word	0x58025408
 8003090:	5802541c 	.word	0x5802541c
 8003094:	58025430 	.word	0x58025430
 8003098:	58025444 	.word	0x58025444
 800309c:	58025458 	.word	0x58025458
 80030a0:	5802546c 	.word	0x5802546c
 80030a4:	58025480 	.word	0x58025480
 80030a8:	58025494 	.word	0x58025494

080030ac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b086      	sub	sp, #24
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80030b4:	f7ff f85e 	bl	8002174 <HAL_GetTick>
 80030b8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d101      	bne.n	80030c4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e2dc      	b.n	800367e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d008      	beq.n	80030e2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2280      	movs	r2, #128	; 0x80
 80030d4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e2cd      	b.n	800367e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a76      	ldr	r2, [pc, #472]	; (80032c0 <HAL_DMA_Abort+0x214>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d04a      	beq.n	8003182 <HAL_DMA_Abort+0xd6>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a74      	ldr	r2, [pc, #464]	; (80032c4 <HAL_DMA_Abort+0x218>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d045      	beq.n	8003182 <HAL_DMA_Abort+0xd6>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a73      	ldr	r2, [pc, #460]	; (80032c8 <HAL_DMA_Abort+0x21c>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d040      	beq.n	8003182 <HAL_DMA_Abort+0xd6>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a71      	ldr	r2, [pc, #452]	; (80032cc <HAL_DMA_Abort+0x220>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d03b      	beq.n	8003182 <HAL_DMA_Abort+0xd6>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a70      	ldr	r2, [pc, #448]	; (80032d0 <HAL_DMA_Abort+0x224>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d036      	beq.n	8003182 <HAL_DMA_Abort+0xd6>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a6e      	ldr	r2, [pc, #440]	; (80032d4 <HAL_DMA_Abort+0x228>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d031      	beq.n	8003182 <HAL_DMA_Abort+0xd6>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a6d      	ldr	r2, [pc, #436]	; (80032d8 <HAL_DMA_Abort+0x22c>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d02c      	beq.n	8003182 <HAL_DMA_Abort+0xd6>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a6b      	ldr	r2, [pc, #428]	; (80032dc <HAL_DMA_Abort+0x230>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d027      	beq.n	8003182 <HAL_DMA_Abort+0xd6>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a6a      	ldr	r2, [pc, #424]	; (80032e0 <HAL_DMA_Abort+0x234>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d022      	beq.n	8003182 <HAL_DMA_Abort+0xd6>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a68      	ldr	r2, [pc, #416]	; (80032e4 <HAL_DMA_Abort+0x238>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d01d      	beq.n	8003182 <HAL_DMA_Abort+0xd6>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a67      	ldr	r2, [pc, #412]	; (80032e8 <HAL_DMA_Abort+0x23c>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d018      	beq.n	8003182 <HAL_DMA_Abort+0xd6>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a65      	ldr	r2, [pc, #404]	; (80032ec <HAL_DMA_Abort+0x240>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d013      	beq.n	8003182 <HAL_DMA_Abort+0xd6>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a64      	ldr	r2, [pc, #400]	; (80032f0 <HAL_DMA_Abort+0x244>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d00e      	beq.n	8003182 <HAL_DMA_Abort+0xd6>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a62      	ldr	r2, [pc, #392]	; (80032f4 <HAL_DMA_Abort+0x248>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d009      	beq.n	8003182 <HAL_DMA_Abort+0xd6>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a61      	ldr	r2, [pc, #388]	; (80032f8 <HAL_DMA_Abort+0x24c>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d004      	beq.n	8003182 <HAL_DMA_Abort+0xd6>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a5f      	ldr	r2, [pc, #380]	; (80032fc <HAL_DMA_Abort+0x250>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d101      	bne.n	8003186 <HAL_DMA_Abort+0xda>
 8003182:	2301      	movs	r3, #1
 8003184:	e000      	b.n	8003188 <HAL_DMA_Abort+0xdc>
 8003186:	2300      	movs	r3, #0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d013      	beq.n	80031b4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f022 021e 	bic.w	r2, r2, #30
 800319a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	695a      	ldr	r2, [r3, #20]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031aa:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	617b      	str	r3, [r7, #20]
 80031b2:	e00a      	b.n	80031ca <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f022 020e 	bic.w	r2, r2, #14
 80031c2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a3c      	ldr	r2, [pc, #240]	; (80032c0 <HAL_DMA_Abort+0x214>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d072      	beq.n	80032ba <HAL_DMA_Abort+0x20e>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a3a      	ldr	r2, [pc, #232]	; (80032c4 <HAL_DMA_Abort+0x218>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d06d      	beq.n	80032ba <HAL_DMA_Abort+0x20e>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a39      	ldr	r2, [pc, #228]	; (80032c8 <HAL_DMA_Abort+0x21c>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d068      	beq.n	80032ba <HAL_DMA_Abort+0x20e>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a37      	ldr	r2, [pc, #220]	; (80032cc <HAL_DMA_Abort+0x220>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d063      	beq.n	80032ba <HAL_DMA_Abort+0x20e>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a36      	ldr	r2, [pc, #216]	; (80032d0 <HAL_DMA_Abort+0x224>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d05e      	beq.n	80032ba <HAL_DMA_Abort+0x20e>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a34      	ldr	r2, [pc, #208]	; (80032d4 <HAL_DMA_Abort+0x228>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d059      	beq.n	80032ba <HAL_DMA_Abort+0x20e>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a33      	ldr	r2, [pc, #204]	; (80032d8 <HAL_DMA_Abort+0x22c>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d054      	beq.n	80032ba <HAL_DMA_Abort+0x20e>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a31      	ldr	r2, [pc, #196]	; (80032dc <HAL_DMA_Abort+0x230>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d04f      	beq.n	80032ba <HAL_DMA_Abort+0x20e>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a30      	ldr	r2, [pc, #192]	; (80032e0 <HAL_DMA_Abort+0x234>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d04a      	beq.n	80032ba <HAL_DMA_Abort+0x20e>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a2e      	ldr	r2, [pc, #184]	; (80032e4 <HAL_DMA_Abort+0x238>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d045      	beq.n	80032ba <HAL_DMA_Abort+0x20e>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a2d      	ldr	r2, [pc, #180]	; (80032e8 <HAL_DMA_Abort+0x23c>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d040      	beq.n	80032ba <HAL_DMA_Abort+0x20e>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a2b      	ldr	r2, [pc, #172]	; (80032ec <HAL_DMA_Abort+0x240>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d03b      	beq.n	80032ba <HAL_DMA_Abort+0x20e>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a2a      	ldr	r2, [pc, #168]	; (80032f0 <HAL_DMA_Abort+0x244>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d036      	beq.n	80032ba <HAL_DMA_Abort+0x20e>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a28      	ldr	r2, [pc, #160]	; (80032f4 <HAL_DMA_Abort+0x248>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d031      	beq.n	80032ba <HAL_DMA_Abort+0x20e>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a27      	ldr	r2, [pc, #156]	; (80032f8 <HAL_DMA_Abort+0x24c>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d02c      	beq.n	80032ba <HAL_DMA_Abort+0x20e>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a25      	ldr	r2, [pc, #148]	; (80032fc <HAL_DMA_Abort+0x250>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d027      	beq.n	80032ba <HAL_DMA_Abort+0x20e>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a24      	ldr	r2, [pc, #144]	; (8003300 <HAL_DMA_Abort+0x254>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d022      	beq.n	80032ba <HAL_DMA_Abort+0x20e>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a22      	ldr	r2, [pc, #136]	; (8003304 <HAL_DMA_Abort+0x258>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d01d      	beq.n	80032ba <HAL_DMA_Abort+0x20e>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a21      	ldr	r2, [pc, #132]	; (8003308 <HAL_DMA_Abort+0x25c>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d018      	beq.n	80032ba <HAL_DMA_Abort+0x20e>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a1f      	ldr	r2, [pc, #124]	; (800330c <HAL_DMA_Abort+0x260>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d013      	beq.n	80032ba <HAL_DMA_Abort+0x20e>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a1e      	ldr	r2, [pc, #120]	; (8003310 <HAL_DMA_Abort+0x264>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d00e      	beq.n	80032ba <HAL_DMA_Abort+0x20e>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a1c      	ldr	r2, [pc, #112]	; (8003314 <HAL_DMA_Abort+0x268>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d009      	beq.n	80032ba <HAL_DMA_Abort+0x20e>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a1b      	ldr	r2, [pc, #108]	; (8003318 <HAL_DMA_Abort+0x26c>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d004      	beq.n	80032ba <HAL_DMA_Abort+0x20e>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a19      	ldr	r2, [pc, #100]	; (800331c <HAL_DMA_Abort+0x270>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d132      	bne.n	8003320 <HAL_DMA_Abort+0x274>
 80032ba:	2301      	movs	r3, #1
 80032bc:	e031      	b.n	8003322 <HAL_DMA_Abort+0x276>
 80032be:	bf00      	nop
 80032c0:	40020010 	.word	0x40020010
 80032c4:	40020028 	.word	0x40020028
 80032c8:	40020040 	.word	0x40020040
 80032cc:	40020058 	.word	0x40020058
 80032d0:	40020070 	.word	0x40020070
 80032d4:	40020088 	.word	0x40020088
 80032d8:	400200a0 	.word	0x400200a0
 80032dc:	400200b8 	.word	0x400200b8
 80032e0:	40020410 	.word	0x40020410
 80032e4:	40020428 	.word	0x40020428
 80032e8:	40020440 	.word	0x40020440
 80032ec:	40020458 	.word	0x40020458
 80032f0:	40020470 	.word	0x40020470
 80032f4:	40020488 	.word	0x40020488
 80032f8:	400204a0 	.word	0x400204a0
 80032fc:	400204b8 	.word	0x400204b8
 8003300:	58025408 	.word	0x58025408
 8003304:	5802541c 	.word	0x5802541c
 8003308:	58025430 	.word	0x58025430
 800330c:	58025444 	.word	0x58025444
 8003310:	58025458 	.word	0x58025458
 8003314:	5802546c 	.word	0x5802546c
 8003318:	58025480 	.word	0x58025480
 800331c:	58025494 	.word	0x58025494
 8003320:	2300      	movs	r3, #0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d007      	beq.n	8003336 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003330:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003334:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a6d      	ldr	r2, [pc, #436]	; (80034f0 <HAL_DMA_Abort+0x444>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d04a      	beq.n	80033d6 <HAL_DMA_Abort+0x32a>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a6b      	ldr	r2, [pc, #428]	; (80034f4 <HAL_DMA_Abort+0x448>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d045      	beq.n	80033d6 <HAL_DMA_Abort+0x32a>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a6a      	ldr	r2, [pc, #424]	; (80034f8 <HAL_DMA_Abort+0x44c>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d040      	beq.n	80033d6 <HAL_DMA_Abort+0x32a>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a68      	ldr	r2, [pc, #416]	; (80034fc <HAL_DMA_Abort+0x450>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d03b      	beq.n	80033d6 <HAL_DMA_Abort+0x32a>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a67      	ldr	r2, [pc, #412]	; (8003500 <HAL_DMA_Abort+0x454>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d036      	beq.n	80033d6 <HAL_DMA_Abort+0x32a>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a65      	ldr	r2, [pc, #404]	; (8003504 <HAL_DMA_Abort+0x458>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d031      	beq.n	80033d6 <HAL_DMA_Abort+0x32a>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a64      	ldr	r2, [pc, #400]	; (8003508 <HAL_DMA_Abort+0x45c>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d02c      	beq.n	80033d6 <HAL_DMA_Abort+0x32a>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a62      	ldr	r2, [pc, #392]	; (800350c <HAL_DMA_Abort+0x460>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d027      	beq.n	80033d6 <HAL_DMA_Abort+0x32a>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a61      	ldr	r2, [pc, #388]	; (8003510 <HAL_DMA_Abort+0x464>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d022      	beq.n	80033d6 <HAL_DMA_Abort+0x32a>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a5f      	ldr	r2, [pc, #380]	; (8003514 <HAL_DMA_Abort+0x468>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d01d      	beq.n	80033d6 <HAL_DMA_Abort+0x32a>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a5e      	ldr	r2, [pc, #376]	; (8003518 <HAL_DMA_Abort+0x46c>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d018      	beq.n	80033d6 <HAL_DMA_Abort+0x32a>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a5c      	ldr	r2, [pc, #368]	; (800351c <HAL_DMA_Abort+0x470>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d013      	beq.n	80033d6 <HAL_DMA_Abort+0x32a>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a5b      	ldr	r2, [pc, #364]	; (8003520 <HAL_DMA_Abort+0x474>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d00e      	beq.n	80033d6 <HAL_DMA_Abort+0x32a>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a59      	ldr	r2, [pc, #356]	; (8003524 <HAL_DMA_Abort+0x478>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d009      	beq.n	80033d6 <HAL_DMA_Abort+0x32a>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a58      	ldr	r2, [pc, #352]	; (8003528 <HAL_DMA_Abort+0x47c>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d004      	beq.n	80033d6 <HAL_DMA_Abort+0x32a>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a56      	ldr	r2, [pc, #344]	; (800352c <HAL_DMA_Abort+0x480>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d108      	bne.n	80033e8 <HAL_DMA_Abort+0x33c>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f022 0201 	bic.w	r2, r2, #1
 80033e4:	601a      	str	r2, [r3, #0]
 80033e6:	e007      	b.n	80033f8 <HAL_DMA_Abort+0x34c>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f022 0201 	bic.w	r2, r2, #1
 80033f6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80033f8:	e013      	b.n	8003422 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80033fa:	f7fe febb 	bl	8002174 <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	2b05      	cmp	r3, #5
 8003406:	d90c      	bls.n	8003422 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2220      	movs	r2, #32
 800340c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2203      	movs	r2, #3
 800341a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e12d      	b.n	800367e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1e5      	bne.n	80033fa <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a2f      	ldr	r2, [pc, #188]	; (80034f0 <HAL_DMA_Abort+0x444>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d04a      	beq.n	80034ce <HAL_DMA_Abort+0x422>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a2d      	ldr	r2, [pc, #180]	; (80034f4 <HAL_DMA_Abort+0x448>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d045      	beq.n	80034ce <HAL_DMA_Abort+0x422>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a2c      	ldr	r2, [pc, #176]	; (80034f8 <HAL_DMA_Abort+0x44c>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d040      	beq.n	80034ce <HAL_DMA_Abort+0x422>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a2a      	ldr	r2, [pc, #168]	; (80034fc <HAL_DMA_Abort+0x450>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d03b      	beq.n	80034ce <HAL_DMA_Abort+0x422>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a29      	ldr	r2, [pc, #164]	; (8003500 <HAL_DMA_Abort+0x454>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d036      	beq.n	80034ce <HAL_DMA_Abort+0x422>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a27      	ldr	r2, [pc, #156]	; (8003504 <HAL_DMA_Abort+0x458>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d031      	beq.n	80034ce <HAL_DMA_Abort+0x422>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a26      	ldr	r2, [pc, #152]	; (8003508 <HAL_DMA_Abort+0x45c>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d02c      	beq.n	80034ce <HAL_DMA_Abort+0x422>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a24      	ldr	r2, [pc, #144]	; (800350c <HAL_DMA_Abort+0x460>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d027      	beq.n	80034ce <HAL_DMA_Abort+0x422>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a23      	ldr	r2, [pc, #140]	; (8003510 <HAL_DMA_Abort+0x464>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d022      	beq.n	80034ce <HAL_DMA_Abort+0x422>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a21      	ldr	r2, [pc, #132]	; (8003514 <HAL_DMA_Abort+0x468>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d01d      	beq.n	80034ce <HAL_DMA_Abort+0x422>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a20      	ldr	r2, [pc, #128]	; (8003518 <HAL_DMA_Abort+0x46c>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d018      	beq.n	80034ce <HAL_DMA_Abort+0x422>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a1e      	ldr	r2, [pc, #120]	; (800351c <HAL_DMA_Abort+0x470>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d013      	beq.n	80034ce <HAL_DMA_Abort+0x422>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a1d      	ldr	r2, [pc, #116]	; (8003520 <HAL_DMA_Abort+0x474>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d00e      	beq.n	80034ce <HAL_DMA_Abort+0x422>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a1b      	ldr	r2, [pc, #108]	; (8003524 <HAL_DMA_Abort+0x478>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d009      	beq.n	80034ce <HAL_DMA_Abort+0x422>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a1a      	ldr	r2, [pc, #104]	; (8003528 <HAL_DMA_Abort+0x47c>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d004      	beq.n	80034ce <HAL_DMA_Abort+0x422>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a18      	ldr	r2, [pc, #96]	; (800352c <HAL_DMA_Abort+0x480>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d101      	bne.n	80034d2 <HAL_DMA_Abort+0x426>
 80034ce:	2301      	movs	r3, #1
 80034d0:	e000      	b.n	80034d4 <HAL_DMA_Abort+0x428>
 80034d2:	2300      	movs	r3, #0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d02b      	beq.n	8003530 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034dc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034e2:	f003 031f 	and.w	r3, r3, #31
 80034e6:	223f      	movs	r2, #63	; 0x3f
 80034e8:	409a      	lsls	r2, r3
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	609a      	str	r2, [r3, #8]
 80034ee:	e02a      	b.n	8003546 <HAL_DMA_Abort+0x49a>
 80034f0:	40020010 	.word	0x40020010
 80034f4:	40020028 	.word	0x40020028
 80034f8:	40020040 	.word	0x40020040
 80034fc:	40020058 	.word	0x40020058
 8003500:	40020070 	.word	0x40020070
 8003504:	40020088 	.word	0x40020088
 8003508:	400200a0 	.word	0x400200a0
 800350c:	400200b8 	.word	0x400200b8
 8003510:	40020410 	.word	0x40020410
 8003514:	40020428 	.word	0x40020428
 8003518:	40020440 	.word	0x40020440
 800351c:	40020458 	.word	0x40020458
 8003520:	40020470 	.word	0x40020470
 8003524:	40020488 	.word	0x40020488
 8003528:	400204a0 	.word	0x400204a0
 800352c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003534:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800353a:	f003 031f 	and.w	r3, r3, #31
 800353e:	2201      	movs	r2, #1
 8003540:	409a      	lsls	r2, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a4f      	ldr	r2, [pc, #316]	; (8003688 <HAL_DMA_Abort+0x5dc>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d072      	beq.n	8003636 <HAL_DMA_Abort+0x58a>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a4d      	ldr	r2, [pc, #308]	; (800368c <HAL_DMA_Abort+0x5e0>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d06d      	beq.n	8003636 <HAL_DMA_Abort+0x58a>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a4c      	ldr	r2, [pc, #304]	; (8003690 <HAL_DMA_Abort+0x5e4>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d068      	beq.n	8003636 <HAL_DMA_Abort+0x58a>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a4a      	ldr	r2, [pc, #296]	; (8003694 <HAL_DMA_Abort+0x5e8>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d063      	beq.n	8003636 <HAL_DMA_Abort+0x58a>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a49      	ldr	r2, [pc, #292]	; (8003698 <HAL_DMA_Abort+0x5ec>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d05e      	beq.n	8003636 <HAL_DMA_Abort+0x58a>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a47      	ldr	r2, [pc, #284]	; (800369c <HAL_DMA_Abort+0x5f0>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d059      	beq.n	8003636 <HAL_DMA_Abort+0x58a>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a46      	ldr	r2, [pc, #280]	; (80036a0 <HAL_DMA_Abort+0x5f4>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d054      	beq.n	8003636 <HAL_DMA_Abort+0x58a>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a44      	ldr	r2, [pc, #272]	; (80036a4 <HAL_DMA_Abort+0x5f8>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d04f      	beq.n	8003636 <HAL_DMA_Abort+0x58a>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a43      	ldr	r2, [pc, #268]	; (80036a8 <HAL_DMA_Abort+0x5fc>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d04a      	beq.n	8003636 <HAL_DMA_Abort+0x58a>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a41      	ldr	r2, [pc, #260]	; (80036ac <HAL_DMA_Abort+0x600>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d045      	beq.n	8003636 <HAL_DMA_Abort+0x58a>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a40      	ldr	r2, [pc, #256]	; (80036b0 <HAL_DMA_Abort+0x604>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d040      	beq.n	8003636 <HAL_DMA_Abort+0x58a>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a3e      	ldr	r2, [pc, #248]	; (80036b4 <HAL_DMA_Abort+0x608>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d03b      	beq.n	8003636 <HAL_DMA_Abort+0x58a>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a3d      	ldr	r2, [pc, #244]	; (80036b8 <HAL_DMA_Abort+0x60c>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d036      	beq.n	8003636 <HAL_DMA_Abort+0x58a>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a3b      	ldr	r2, [pc, #236]	; (80036bc <HAL_DMA_Abort+0x610>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d031      	beq.n	8003636 <HAL_DMA_Abort+0x58a>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a3a      	ldr	r2, [pc, #232]	; (80036c0 <HAL_DMA_Abort+0x614>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d02c      	beq.n	8003636 <HAL_DMA_Abort+0x58a>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a38      	ldr	r2, [pc, #224]	; (80036c4 <HAL_DMA_Abort+0x618>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d027      	beq.n	8003636 <HAL_DMA_Abort+0x58a>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a37      	ldr	r2, [pc, #220]	; (80036c8 <HAL_DMA_Abort+0x61c>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d022      	beq.n	8003636 <HAL_DMA_Abort+0x58a>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a35      	ldr	r2, [pc, #212]	; (80036cc <HAL_DMA_Abort+0x620>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d01d      	beq.n	8003636 <HAL_DMA_Abort+0x58a>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a34      	ldr	r2, [pc, #208]	; (80036d0 <HAL_DMA_Abort+0x624>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d018      	beq.n	8003636 <HAL_DMA_Abort+0x58a>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a32      	ldr	r2, [pc, #200]	; (80036d4 <HAL_DMA_Abort+0x628>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d013      	beq.n	8003636 <HAL_DMA_Abort+0x58a>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a31      	ldr	r2, [pc, #196]	; (80036d8 <HAL_DMA_Abort+0x62c>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d00e      	beq.n	8003636 <HAL_DMA_Abort+0x58a>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a2f      	ldr	r2, [pc, #188]	; (80036dc <HAL_DMA_Abort+0x630>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d009      	beq.n	8003636 <HAL_DMA_Abort+0x58a>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a2e      	ldr	r2, [pc, #184]	; (80036e0 <HAL_DMA_Abort+0x634>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d004      	beq.n	8003636 <HAL_DMA_Abort+0x58a>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a2c      	ldr	r2, [pc, #176]	; (80036e4 <HAL_DMA_Abort+0x638>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d101      	bne.n	800363a <HAL_DMA_Abort+0x58e>
 8003636:	2301      	movs	r3, #1
 8003638:	e000      	b.n	800363c <HAL_DMA_Abort+0x590>
 800363a:	2300      	movs	r3, #0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d015      	beq.n	800366c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003648:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00c      	beq.n	800366c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800365c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003660:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800366a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3718      	adds	r7, #24
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	40020010 	.word	0x40020010
 800368c:	40020028 	.word	0x40020028
 8003690:	40020040 	.word	0x40020040
 8003694:	40020058 	.word	0x40020058
 8003698:	40020070 	.word	0x40020070
 800369c:	40020088 	.word	0x40020088
 80036a0:	400200a0 	.word	0x400200a0
 80036a4:	400200b8 	.word	0x400200b8
 80036a8:	40020410 	.word	0x40020410
 80036ac:	40020428 	.word	0x40020428
 80036b0:	40020440 	.word	0x40020440
 80036b4:	40020458 	.word	0x40020458
 80036b8:	40020470 	.word	0x40020470
 80036bc:	40020488 	.word	0x40020488
 80036c0:	400204a0 	.word	0x400204a0
 80036c4:	400204b8 	.word	0x400204b8
 80036c8:	58025408 	.word	0x58025408
 80036cc:	5802541c 	.word	0x5802541c
 80036d0:	58025430 	.word	0x58025430
 80036d4:	58025444 	.word	0x58025444
 80036d8:	58025458 	.word	0x58025458
 80036dc:	5802546c 	.word	0x5802546c
 80036e0:	58025480 	.word	0x58025480
 80036e4:	58025494 	.word	0x58025494

080036e8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d101      	bne.n	80036fa <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e237      	b.n	8003b6a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b02      	cmp	r3, #2
 8003704:	d004      	beq.n	8003710 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2280      	movs	r2, #128	; 0x80
 800370a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e22c      	b.n	8003b6a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a5c      	ldr	r2, [pc, #368]	; (8003888 <HAL_DMA_Abort_IT+0x1a0>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d04a      	beq.n	80037b0 <HAL_DMA_Abort_IT+0xc8>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a5b      	ldr	r2, [pc, #364]	; (800388c <HAL_DMA_Abort_IT+0x1a4>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d045      	beq.n	80037b0 <HAL_DMA_Abort_IT+0xc8>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a59      	ldr	r2, [pc, #356]	; (8003890 <HAL_DMA_Abort_IT+0x1a8>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d040      	beq.n	80037b0 <HAL_DMA_Abort_IT+0xc8>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a58      	ldr	r2, [pc, #352]	; (8003894 <HAL_DMA_Abort_IT+0x1ac>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d03b      	beq.n	80037b0 <HAL_DMA_Abort_IT+0xc8>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a56      	ldr	r2, [pc, #344]	; (8003898 <HAL_DMA_Abort_IT+0x1b0>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d036      	beq.n	80037b0 <HAL_DMA_Abort_IT+0xc8>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a55      	ldr	r2, [pc, #340]	; (800389c <HAL_DMA_Abort_IT+0x1b4>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d031      	beq.n	80037b0 <HAL_DMA_Abort_IT+0xc8>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a53      	ldr	r2, [pc, #332]	; (80038a0 <HAL_DMA_Abort_IT+0x1b8>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d02c      	beq.n	80037b0 <HAL_DMA_Abort_IT+0xc8>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a52      	ldr	r2, [pc, #328]	; (80038a4 <HAL_DMA_Abort_IT+0x1bc>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d027      	beq.n	80037b0 <HAL_DMA_Abort_IT+0xc8>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a50      	ldr	r2, [pc, #320]	; (80038a8 <HAL_DMA_Abort_IT+0x1c0>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d022      	beq.n	80037b0 <HAL_DMA_Abort_IT+0xc8>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a4f      	ldr	r2, [pc, #316]	; (80038ac <HAL_DMA_Abort_IT+0x1c4>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d01d      	beq.n	80037b0 <HAL_DMA_Abort_IT+0xc8>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a4d      	ldr	r2, [pc, #308]	; (80038b0 <HAL_DMA_Abort_IT+0x1c8>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d018      	beq.n	80037b0 <HAL_DMA_Abort_IT+0xc8>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a4c      	ldr	r2, [pc, #304]	; (80038b4 <HAL_DMA_Abort_IT+0x1cc>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d013      	beq.n	80037b0 <HAL_DMA_Abort_IT+0xc8>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a4a      	ldr	r2, [pc, #296]	; (80038b8 <HAL_DMA_Abort_IT+0x1d0>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d00e      	beq.n	80037b0 <HAL_DMA_Abort_IT+0xc8>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a49      	ldr	r2, [pc, #292]	; (80038bc <HAL_DMA_Abort_IT+0x1d4>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d009      	beq.n	80037b0 <HAL_DMA_Abort_IT+0xc8>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a47      	ldr	r2, [pc, #284]	; (80038c0 <HAL_DMA_Abort_IT+0x1d8>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d004      	beq.n	80037b0 <HAL_DMA_Abort_IT+0xc8>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a46      	ldr	r2, [pc, #280]	; (80038c4 <HAL_DMA_Abort_IT+0x1dc>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d101      	bne.n	80037b4 <HAL_DMA_Abort_IT+0xcc>
 80037b0:	2301      	movs	r3, #1
 80037b2:	e000      	b.n	80037b6 <HAL_DMA_Abort_IT+0xce>
 80037b4:	2300      	movs	r3, #0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	f000 8086 	beq.w	80038c8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2204      	movs	r2, #4
 80037c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a2f      	ldr	r2, [pc, #188]	; (8003888 <HAL_DMA_Abort_IT+0x1a0>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d04a      	beq.n	8003864 <HAL_DMA_Abort_IT+0x17c>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a2e      	ldr	r2, [pc, #184]	; (800388c <HAL_DMA_Abort_IT+0x1a4>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d045      	beq.n	8003864 <HAL_DMA_Abort_IT+0x17c>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a2c      	ldr	r2, [pc, #176]	; (8003890 <HAL_DMA_Abort_IT+0x1a8>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d040      	beq.n	8003864 <HAL_DMA_Abort_IT+0x17c>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a2b      	ldr	r2, [pc, #172]	; (8003894 <HAL_DMA_Abort_IT+0x1ac>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d03b      	beq.n	8003864 <HAL_DMA_Abort_IT+0x17c>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a29      	ldr	r2, [pc, #164]	; (8003898 <HAL_DMA_Abort_IT+0x1b0>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d036      	beq.n	8003864 <HAL_DMA_Abort_IT+0x17c>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a28      	ldr	r2, [pc, #160]	; (800389c <HAL_DMA_Abort_IT+0x1b4>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d031      	beq.n	8003864 <HAL_DMA_Abort_IT+0x17c>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a26      	ldr	r2, [pc, #152]	; (80038a0 <HAL_DMA_Abort_IT+0x1b8>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d02c      	beq.n	8003864 <HAL_DMA_Abort_IT+0x17c>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a25      	ldr	r2, [pc, #148]	; (80038a4 <HAL_DMA_Abort_IT+0x1bc>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d027      	beq.n	8003864 <HAL_DMA_Abort_IT+0x17c>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a23      	ldr	r2, [pc, #140]	; (80038a8 <HAL_DMA_Abort_IT+0x1c0>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d022      	beq.n	8003864 <HAL_DMA_Abort_IT+0x17c>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a22      	ldr	r2, [pc, #136]	; (80038ac <HAL_DMA_Abort_IT+0x1c4>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d01d      	beq.n	8003864 <HAL_DMA_Abort_IT+0x17c>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a20      	ldr	r2, [pc, #128]	; (80038b0 <HAL_DMA_Abort_IT+0x1c8>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d018      	beq.n	8003864 <HAL_DMA_Abort_IT+0x17c>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a1f      	ldr	r2, [pc, #124]	; (80038b4 <HAL_DMA_Abort_IT+0x1cc>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d013      	beq.n	8003864 <HAL_DMA_Abort_IT+0x17c>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a1d      	ldr	r2, [pc, #116]	; (80038b8 <HAL_DMA_Abort_IT+0x1d0>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d00e      	beq.n	8003864 <HAL_DMA_Abort_IT+0x17c>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a1c      	ldr	r2, [pc, #112]	; (80038bc <HAL_DMA_Abort_IT+0x1d4>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d009      	beq.n	8003864 <HAL_DMA_Abort_IT+0x17c>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a1a      	ldr	r2, [pc, #104]	; (80038c0 <HAL_DMA_Abort_IT+0x1d8>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d004      	beq.n	8003864 <HAL_DMA_Abort_IT+0x17c>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a19      	ldr	r2, [pc, #100]	; (80038c4 <HAL_DMA_Abort_IT+0x1dc>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d108      	bne.n	8003876 <HAL_DMA_Abort_IT+0x18e>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f022 0201 	bic.w	r2, r2, #1
 8003872:	601a      	str	r2, [r3, #0]
 8003874:	e178      	b.n	8003b68 <HAL_DMA_Abort_IT+0x480>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f022 0201 	bic.w	r2, r2, #1
 8003884:	601a      	str	r2, [r3, #0]
 8003886:	e16f      	b.n	8003b68 <HAL_DMA_Abort_IT+0x480>
 8003888:	40020010 	.word	0x40020010
 800388c:	40020028 	.word	0x40020028
 8003890:	40020040 	.word	0x40020040
 8003894:	40020058 	.word	0x40020058
 8003898:	40020070 	.word	0x40020070
 800389c:	40020088 	.word	0x40020088
 80038a0:	400200a0 	.word	0x400200a0
 80038a4:	400200b8 	.word	0x400200b8
 80038a8:	40020410 	.word	0x40020410
 80038ac:	40020428 	.word	0x40020428
 80038b0:	40020440 	.word	0x40020440
 80038b4:	40020458 	.word	0x40020458
 80038b8:	40020470 	.word	0x40020470
 80038bc:	40020488 	.word	0x40020488
 80038c0:	400204a0 	.word	0x400204a0
 80038c4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f022 020e 	bic.w	r2, r2, #14
 80038d6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a6c      	ldr	r2, [pc, #432]	; (8003a90 <HAL_DMA_Abort_IT+0x3a8>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d04a      	beq.n	8003978 <HAL_DMA_Abort_IT+0x290>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a6b      	ldr	r2, [pc, #428]	; (8003a94 <HAL_DMA_Abort_IT+0x3ac>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d045      	beq.n	8003978 <HAL_DMA_Abort_IT+0x290>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a69      	ldr	r2, [pc, #420]	; (8003a98 <HAL_DMA_Abort_IT+0x3b0>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d040      	beq.n	8003978 <HAL_DMA_Abort_IT+0x290>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a68      	ldr	r2, [pc, #416]	; (8003a9c <HAL_DMA_Abort_IT+0x3b4>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d03b      	beq.n	8003978 <HAL_DMA_Abort_IT+0x290>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a66      	ldr	r2, [pc, #408]	; (8003aa0 <HAL_DMA_Abort_IT+0x3b8>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d036      	beq.n	8003978 <HAL_DMA_Abort_IT+0x290>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a65      	ldr	r2, [pc, #404]	; (8003aa4 <HAL_DMA_Abort_IT+0x3bc>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d031      	beq.n	8003978 <HAL_DMA_Abort_IT+0x290>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a63      	ldr	r2, [pc, #396]	; (8003aa8 <HAL_DMA_Abort_IT+0x3c0>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d02c      	beq.n	8003978 <HAL_DMA_Abort_IT+0x290>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a62      	ldr	r2, [pc, #392]	; (8003aac <HAL_DMA_Abort_IT+0x3c4>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d027      	beq.n	8003978 <HAL_DMA_Abort_IT+0x290>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a60      	ldr	r2, [pc, #384]	; (8003ab0 <HAL_DMA_Abort_IT+0x3c8>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d022      	beq.n	8003978 <HAL_DMA_Abort_IT+0x290>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a5f      	ldr	r2, [pc, #380]	; (8003ab4 <HAL_DMA_Abort_IT+0x3cc>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d01d      	beq.n	8003978 <HAL_DMA_Abort_IT+0x290>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a5d      	ldr	r2, [pc, #372]	; (8003ab8 <HAL_DMA_Abort_IT+0x3d0>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d018      	beq.n	8003978 <HAL_DMA_Abort_IT+0x290>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a5c      	ldr	r2, [pc, #368]	; (8003abc <HAL_DMA_Abort_IT+0x3d4>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d013      	beq.n	8003978 <HAL_DMA_Abort_IT+0x290>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a5a      	ldr	r2, [pc, #360]	; (8003ac0 <HAL_DMA_Abort_IT+0x3d8>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d00e      	beq.n	8003978 <HAL_DMA_Abort_IT+0x290>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a59      	ldr	r2, [pc, #356]	; (8003ac4 <HAL_DMA_Abort_IT+0x3dc>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d009      	beq.n	8003978 <HAL_DMA_Abort_IT+0x290>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a57      	ldr	r2, [pc, #348]	; (8003ac8 <HAL_DMA_Abort_IT+0x3e0>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d004      	beq.n	8003978 <HAL_DMA_Abort_IT+0x290>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a56      	ldr	r2, [pc, #344]	; (8003acc <HAL_DMA_Abort_IT+0x3e4>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d108      	bne.n	800398a <HAL_DMA_Abort_IT+0x2a2>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f022 0201 	bic.w	r2, r2, #1
 8003986:	601a      	str	r2, [r3, #0]
 8003988:	e007      	b.n	800399a <HAL_DMA_Abort_IT+0x2b2>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f022 0201 	bic.w	r2, r2, #1
 8003998:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a3c      	ldr	r2, [pc, #240]	; (8003a90 <HAL_DMA_Abort_IT+0x3a8>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d072      	beq.n	8003a8a <HAL_DMA_Abort_IT+0x3a2>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a3a      	ldr	r2, [pc, #232]	; (8003a94 <HAL_DMA_Abort_IT+0x3ac>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d06d      	beq.n	8003a8a <HAL_DMA_Abort_IT+0x3a2>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a39      	ldr	r2, [pc, #228]	; (8003a98 <HAL_DMA_Abort_IT+0x3b0>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d068      	beq.n	8003a8a <HAL_DMA_Abort_IT+0x3a2>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a37      	ldr	r2, [pc, #220]	; (8003a9c <HAL_DMA_Abort_IT+0x3b4>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d063      	beq.n	8003a8a <HAL_DMA_Abort_IT+0x3a2>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a36      	ldr	r2, [pc, #216]	; (8003aa0 <HAL_DMA_Abort_IT+0x3b8>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d05e      	beq.n	8003a8a <HAL_DMA_Abort_IT+0x3a2>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a34      	ldr	r2, [pc, #208]	; (8003aa4 <HAL_DMA_Abort_IT+0x3bc>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d059      	beq.n	8003a8a <HAL_DMA_Abort_IT+0x3a2>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a33      	ldr	r2, [pc, #204]	; (8003aa8 <HAL_DMA_Abort_IT+0x3c0>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d054      	beq.n	8003a8a <HAL_DMA_Abort_IT+0x3a2>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a31      	ldr	r2, [pc, #196]	; (8003aac <HAL_DMA_Abort_IT+0x3c4>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d04f      	beq.n	8003a8a <HAL_DMA_Abort_IT+0x3a2>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a30      	ldr	r2, [pc, #192]	; (8003ab0 <HAL_DMA_Abort_IT+0x3c8>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d04a      	beq.n	8003a8a <HAL_DMA_Abort_IT+0x3a2>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a2e      	ldr	r2, [pc, #184]	; (8003ab4 <HAL_DMA_Abort_IT+0x3cc>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d045      	beq.n	8003a8a <HAL_DMA_Abort_IT+0x3a2>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a2d      	ldr	r2, [pc, #180]	; (8003ab8 <HAL_DMA_Abort_IT+0x3d0>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d040      	beq.n	8003a8a <HAL_DMA_Abort_IT+0x3a2>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a2b      	ldr	r2, [pc, #172]	; (8003abc <HAL_DMA_Abort_IT+0x3d4>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d03b      	beq.n	8003a8a <HAL_DMA_Abort_IT+0x3a2>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a2a      	ldr	r2, [pc, #168]	; (8003ac0 <HAL_DMA_Abort_IT+0x3d8>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d036      	beq.n	8003a8a <HAL_DMA_Abort_IT+0x3a2>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a28      	ldr	r2, [pc, #160]	; (8003ac4 <HAL_DMA_Abort_IT+0x3dc>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d031      	beq.n	8003a8a <HAL_DMA_Abort_IT+0x3a2>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a27      	ldr	r2, [pc, #156]	; (8003ac8 <HAL_DMA_Abort_IT+0x3e0>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d02c      	beq.n	8003a8a <HAL_DMA_Abort_IT+0x3a2>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a25      	ldr	r2, [pc, #148]	; (8003acc <HAL_DMA_Abort_IT+0x3e4>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d027      	beq.n	8003a8a <HAL_DMA_Abort_IT+0x3a2>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a24      	ldr	r2, [pc, #144]	; (8003ad0 <HAL_DMA_Abort_IT+0x3e8>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d022      	beq.n	8003a8a <HAL_DMA_Abort_IT+0x3a2>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a22      	ldr	r2, [pc, #136]	; (8003ad4 <HAL_DMA_Abort_IT+0x3ec>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d01d      	beq.n	8003a8a <HAL_DMA_Abort_IT+0x3a2>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a21      	ldr	r2, [pc, #132]	; (8003ad8 <HAL_DMA_Abort_IT+0x3f0>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d018      	beq.n	8003a8a <HAL_DMA_Abort_IT+0x3a2>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a1f      	ldr	r2, [pc, #124]	; (8003adc <HAL_DMA_Abort_IT+0x3f4>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d013      	beq.n	8003a8a <HAL_DMA_Abort_IT+0x3a2>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a1e      	ldr	r2, [pc, #120]	; (8003ae0 <HAL_DMA_Abort_IT+0x3f8>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d00e      	beq.n	8003a8a <HAL_DMA_Abort_IT+0x3a2>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a1c      	ldr	r2, [pc, #112]	; (8003ae4 <HAL_DMA_Abort_IT+0x3fc>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d009      	beq.n	8003a8a <HAL_DMA_Abort_IT+0x3a2>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a1b      	ldr	r2, [pc, #108]	; (8003ae8 <HAL_DMA_Abort_IT+0x400>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d004      	beq.n	8003a8a <HAL_DMA_Abort_IT+0x3a2>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a19      	ldr	r2, [pc, #100]	; (8003aec <HAL_DMA_Abort_IT+0x404>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d132      	bne.n	8003af0 <HAL_DMA_Abort_IT+0x408>
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e031      	b.n	8003af2 <HAL_DMA_Abort_IT+0x40a>
 8003a8e:	bf00      	nop
 8003a90:	40020010 	.word	0x40020010
 8003a94:	40020028 	.word	0x40020028
 8003a98:	40020040 	.word	0x40020040
 8003a9c:	40020058 	.word	0x40020058
 8003aa0:	40020070 	.word	0x40020070
 8003aa4:	40020088 	.word	0x40020088
 8003aa8:	400200a0 	.word	0x400200a0
 8003aac:	400200b8 	.word	0x400200b8
 8003ab0:	40020410 	.word	0x40020410
 8003ab4:	40020428 	.word	0x40020428
 8003ab8:	40020440 	.word	0x40020440
 8003abc:	40020458 	.word	0x40020458
 8003ac0:	40020470 	.word	0x40020470
 8003ac4:	40020488 	.word	0x40020488
 8003ac8:	400204a0 	.word	0x400204a0
 8003acc:	400204b8 	.word	0x400204b8
 8003ad0:	58025408 	.word	0x58025408
 8003ad4:	5802541c 	.word	0x5802541c
 8003ad8:	58025430 	.word	0x58025430
 8003adc:	58025444 	.word	0x58025444
 8003ae0:	58025458 	.word	0x58025458
 8003ae4:	5802546c 	.word	0x5802546c
 8003ae8:	58025480 	.word	0x58025480
 8003aec:	58025494 	.word	0x58025494
 8003af0:	2300      	movs	r3, #0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d028      	beq.n	8003b48 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b04:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b0a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b10:	f003 031f 	and.w	r3, r3, #31
 8003b14:	2201      	movs	r2, #1
 8003b16:	409a      	lsls	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003b24:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00c      	beq.n	8003b48 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b3c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003b46:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d003      	beq.n	8003b68 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3710      	adds	r7, #16
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop

08003b74 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b08a      	sub	sp, #40	; 0x28
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003b80:	4b67      	ldr	r3, [pc, #412]	; (8003d20 <HAL_DMA_IRQHandler+0x1ac>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a67      	ldr	r2, [pc, #412]	; (8003d24 <HAL_DMA_IRQHandler+0x1b0>)
 8003b86:	fba2 2303 	umull	r2, r3, r2, r3
 8003b8a:	0a9b      	lsrs	r3, r3, #10
 8003b8c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b92:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b98:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003b9a:	6a3b      	ldr	r3, [r7, #32]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a5f      	ldr	r2, [pc, #380]	; (8003d28 <HAL_DMA_IRQHandler+0x1b4>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d04a      	beq.n	8003c46 <HAL_DMA_IRQHandler+0xd2>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a5d      	ldr	r2, [pc, #372]	; (8003d2c <HAL_DMA_IRQHandler+0x1b8>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d045      	beq.n	8003c46 <HAL_DMA_IRQHandler+0xd2>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a5c      	ldr	r2, [pc, #368]	; (8003d30 <HAL_DMA_IRQHandler+0x1bc>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d040      	beq.n	8003c46 <HAL_DMA_IRQHandler+0xd2>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a5a      	ldr	r2, [pc, #360]	; (8003d34 <HAL_DMA_IRQHandler+0x1c0>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d03b      	beq.n	8003c46 <HAL_DMA_IRQHandler+0xd2>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a59      	ldr	r2, [pc, #356]	; (8003d38 <HAL_DMA_IRQHandler+0x1c4>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d036      	beq.n	8003c46 <HAL_DMA_IRQHandler+0xd2>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a57      	ldr	r2, [pc, #348]	; (8003d3c <HAL_DMA_IRQHandler+0x1c8>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d031      	beq.n	8003c46 <HAL_DMA_IRQHandler+0xd2>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a56      	ldr	r2, [pc, #344]	; (8003d40 <HAL_DMA_IRQHandler+0x1cc>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d02c      	beq.n	8003c46 <HAL_DMA_IRQHandler+0xd2>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a54      	ldr	r2, [pc, #336]	; (8003d44 <HAL_DMA_IRQHandler+0x1d0>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d027      	beq.n	8003c46 <HAL_DMA_IRQHandler+0xd2>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a53      	ldr	r2, [pc, #332]	; (8003d48 <HAL_DMA_IRQHandler+0x1d4>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d022      	beq.n	8003c46 <HAL_DMA_IRQHandler+0xd2>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a51      	ldr	r2, [pc, #324]	; (8003d4c <HAL_DMA_IRQHandler+0x1d8>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d01d      	beq.n	8003c46 <HAL_DMA_IRQHandler+0xd2>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a50      	ldr	r2, [pc, #320]	; (8003d50 <HAL_DMA_IRQHandler+0x1dc>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d018      	beq.n	8003c46 <HAL_DMA_IRQHandler+0xd2>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a4e      	ldr	r2, [pc, #312]	; (8003d54 <HAL_DMA_IRQHandler+0x1e0>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d013      	beq.n	8003c46 <HAL_DMA_IRQHandler+0xd2>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a4d      	ldr	r2, [pc, #308]	; (8003d58 <HAL_DMA_IRQHandler+0x1e4>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d00e      	beq.n	8003c46 <HAL_DMA_IRQHandler+0xd2>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a4b      	ldr	r2, [pc, #300]	; (8003d5c <HAL_DMA_IRQHandler+0x1e8>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d009      	beq.n	8003c46 <HAL_DMA_IRQHandler+0xd2>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a4a      	ldr	r2, [pc, #296]	; (8003d60 <HAL_DMA_IRQHandler+0x1ec>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d004      	beq.n	8003c46 <HAL_DMA_IRQHandler+0xd2>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a48      	ldr	r2, [pc, #288]	; (8003d64 <HAL_DMA_IRQHandler+0x1f0>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d101      	bne.n	8003c4a <HAL_DMA_IRQHandler+0xd6>
 8003c46:	2301      	movs	r3, #1
 8003c48:	e000      	b.n	8003c4c <HAL_DMA_IRQHandler+0xd8>
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	f000 842b 	beq.w	80044a8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c56:	f003 031f 	and.w	r3, r3, #31
 8003c5a:	2208      	movs	r2, #8
 8003c5c:	409a      	lsls	r2, r3
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	4013      	ands	r3, r2
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	f000 80a2 	beq.w	8003dac <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a2e      	ldr	r2, [pc, #184]	; (8003d28 <HAL_DMA_IRQHandler+0x1b4>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d04a      	beq.n	8003d08 <HAL_DMA_IRQHandler+0x194>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a2d      	ldr	r2, [pc, #180]	; (8003d2c <HAL_DMA_IRQHandler+0x1b8>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d045      	beq.n	8003d08 <HAL_DMA_IRQHandler+0x194>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a2b      	ldr	r2, [pc, #172]	; (8003d30 <HAL_DMA_IRQHandler+0x1bc>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d040      	beq.n	8003d08 <HAL_DMA_IRQHandler+0x194>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a2a      	ldr	r2, [pc, #168]	; (8003d34 <HAL_DMA_IRQHandler+0x1c0>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d03b      	beq.n	8003d08 <HAL_DMA_IRQHandler+0x194>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a28      	ldr	r2, [pc, #160]	; (8003d38 <HAL_DMA_IRQHandler+0x1c4>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d036      	beq.n	8003d08 <HAL_DMA_IRQHandler+0x194>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a27      	ldr	r2, [pc, #156]	; (8003d3c <HAL_DMA_IRQHandler+0x1c8>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d031      	beq.n	8003d08 <HAL_DMA_IRQHandler+0x194>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a25      	ldr	r2, [pc, #148]	; (8003d40 <HAL_DMA_IRQHandler+0x1cc>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d02c      	beq.n	8003d08 <HAL_DMA_IRQHandler+0x194>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a24      	ldr	r2, [pc, #144]	; (8003d44 <HAL_DMA_IRQHandler+0x1d0>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d027      	beq.n	8003d08 <HAL_DMA_IRQHandler+0x194>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a22      	ldr	r2, [pc, #136]	; (8003d48 <HAL_DMA_IRQHandler+0x1d4>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d022      	beq.n	8003d08 <HAL_DMA_IRQHandler+0x194>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a21      	ldr	r2, [pc, #132]	; (8003d4c <HAL_DMA_IRQHandler+0x1d8>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d01d      	beq.n	8003d08 <HAL_DMA_IRQHandler+0x194>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a1f      	ldr	r2, [pc, #124]	; (8003d50 <HAL_DMA_IRQHandler+0x1dc>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d018      	beq.n	8003d08 <HAL_DMA_IRQHandler+0x194>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a1e      	ldr	r2, [pc, #120]	; (8003d54 <HAL_DMA_IRQHandler+0x1e0>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d013      	beq.n	8003d08 <HAL_DMA_IRQHandler+0x194>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a1c      	ldr	r2, [pc, #112]	; (8003d58 <HAL_DMA_IRQHandler+0x1e4>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d00e      	beq.n	8003d08 <HAL_DMA_IRQHandler+0x194>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a1b      	ldr	r2, [pc, #108]	; (8003d5c <HAL_DMA_IRQHandler+0x1e8>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d009      	beq.n	8003d08 <HAL_DMA_IRQHandler+0x194>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a19      	ldr	r2, [pc, #100]	; (8003d60 <HAL_DMA_IRQHandler+0x1ec>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d004      	beq.n	8003d08 <HAL_DMA_IRQHandler+0x194>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a18      	ldr	r2, [pc, #96]	; (8003d64 <HAL_DMA_IRQHandler+0x1f0>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d12f      	bne.n	8003d68 <HAL_DMA_IRQHandler+0x1f4>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0304 	and.w	r3, r3, #4
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	bf14      	ite	ne
 8003d16:	2301      	movne	r3, #1
 8003d18:	2300      	moveq	r3, #0
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	e02e      	b.n	8003d7c <HAL_DMA_IRQHandler+0x208>
 8003d1e:	bf00      	nop
 8003d20:	24000000 	.word	0x24000000
 8003d24:	1b4e81b5 	.word	0x1b4e81b5
 8003d28:	40020010 	.word	0x40020010
 8003d2c:	40020028 	.word	0x40020028
 8003d30:	40020040 	.word	0x40020040
 8003d34:	40020058 	.word	0x40020058
 8003d38:	40020070 	.word	0x40020070
 8003d3c:	40020088 	.word	0x40020088
 8003d40:	400200a0 	.word	0x400200a0
 8003d44:	400200b8 	.word	0x400200b8
 8003d48:	40020410 	.word	0x40020410
 8003d4c:	40020428 	.word	0x40020428
 8003d50:	40020440 	.word	0x40020440
 8003d54:	40020458 	.word	0x40020458
 8003d58:	40020470 	.word	0x40020470
 8003d5c:	40020488 	.word	0x40020488
 8003d60:	400204a0 	.word	0x400204a0
 8003d64:	400204b8 	.word	0x400204b8
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0308 	and.w	r3, r3, #8
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	bf14      	ite	ne
 8003d76:	2301      	movne	r3, #1
 8003d78:	2300      	moveq	r3, #0
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d015      	beq.n	8003dac <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f022 0204 	bic.w	r2, r2, #4
 8003d8e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d94:	f003 031f 	and.w	r3, r3, #31
 8003d98:	2208      	movs	r2, #8
 8003d9a:	409a      	lsls	r2, r3
 8003d9c:	6a3b      	ldr	r3, [r7, #32]
 8003d9e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003da4:	f043 0201 	orr.w	r2, r3, #1
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003db0:	f003 031f 	and.w	r3, r3, #31
 8003db4:	69ba      	ldr	r2, [r7, #24]
 8003db6:	fa22 f303 	lsr.w	r3, r2, r3
 8003dba:	f003 0301 	and.w	r3, r3, #1
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d06e      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a69      	ldr	r2, [pc, #420]	; (8003f6c <HAL_DMA_IRQHandler+0x3f8>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d04a      	beq.n	8003e62 <HAL_DMA_IRQHandler+0x2ee>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a67      	ldr	r2, [pc, #412]	; (8003f70 <HAL_DMA_IRQHandler+0x3fc>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d045      	beq.n	8003e62 <HAL_DMA_IRQHandler+0x2ee>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a66      	ldr	r2, [pc, #408]	; (8003f74 <HAL_DMA_IRQHandler+0x400>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d040      	beq.n	8003e62 <HAL_DMA_IRQHandler+0x2ee>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a64      	ldr	r2, [pc, #400]	; (8003f78 <HAL_DMA_IRQHandler+0x404>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d03b      	beq.n	8003e62 <HAL_DMA_IRQHandler+0x2ee>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a63      	ldr	r2, [pc, #396]	; (8003f7c <HAL_DMA_IRQHandler+0x408>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d036      	beq.n	8003e62 <HAL_DMA_IRQHandler+0x2ee>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a61      	ldr	r2, [pc, #388]	; (8003f80 <HAL_DMA_IRQHandler+0x40c>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d031      	beq.n	8003e62 <HAL_DMA_IRQHandler+0x2ee>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a60      	ldr	r2, [pc, #384]	; (8003f84 <HAL_DMA_IRQHandler+0x410>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d02c      	beq.n	8003e62 <HAL_DMA_IRQHandler+0x2ee>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a5e      	ldr	r2, [pc, #376]	; (8003f88 <HAL_DMA_IRQHandler+0x414>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d027      	beq.n	8003e62 <HAL_DMA_IRQHandler+0x2ee>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a5d      	ldr	r2, [pc, #372]	; (8003f8c <HAL_DMA_IRQHandler+0x418>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d022      	beq.n	8003e62 <HAL_DMA_IRQHandler+0x2ee>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a5b      	ldr	r2, [pc, #364]	; (8003f90 <HAL_DMA_IRQHandler+0x41c>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d01d      	beq.n	8003e62 <HAL_DMA_IRQHandler+0x2ee>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a5a      	ldr	r2, [pc, #360]	; (8003f94 <HAL_DMA_IRQHandler+0x420>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d018      	beq.n	8003e62 <HAL_DMA_IRQHandler+0x2ee>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a58      	ldr	r2, [pc, #352]	; (8003f98 <HAL_DMA_IRQHandler+0x424>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d013      	beq.n	8003e62 <HAL_DMA_IRQHandler+0x2ee>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a57      	ldr	r2, [pc, #348]	; (8003f9c <HAL_DMA_IRQHandler+0x428>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d00e      	beq.n	8003e62 <HAL_DMA_IRQHandler+0x2ee>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a55      	ldr	r2, [pc, #340]	; (8003fa0 <HAL_DMA_IRQHandler+0x42c>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d009      	beq.n	8003e62 <HAL_DMA_IRQHandler+0x2ee>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a54      	ldr	r2, [pc, #336]	; (8003fa4 <HAL_DMA_IRQHandler+0x430>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d004      	beq.n	8003e62 <HAL_DMA_IRQHandler+0x2ee>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a52      	ldr	r2, [pc, #328]	; (8003fa8 <HAL_DMA_IRQHandler+0x434>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d10a      	bne.n	8003e78 <HAL_DMA_IRQHandler+0x304>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	695b      	ldr	r3, [r3, #20]
 8003e68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	bf14      	ite	ne
 8003e70:	2301      	movne	r3, #1
 8003e72:	2300      	moveq	r3, #0
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	e003      	b.n	8003e80 <HAL_DMA_IRQHandler+0x30c>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2300      	movs	r3, #0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d00d      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e88:	f003 031f 	and.w	r3, r3, #31
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	409a      	lsls	r2, r3
 8003e90:	6a3b      	ldr	r3, [r7, #32]
 8003e92:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e98:	f043 0202 	orr.w	r2, r3, #2
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ea4:	f003 031f 	and.w	r3, r3, #31
 8003ea8:	2204      	movs	r2, #4
 8003eaa:	409a      	lsls	r2, r3
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	4013      	ands	r3, r2
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	f000 808f 	beq.w	8003fd4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a2c      	ldr	r2, [pc, #176]	; (8003f6c <HAL_DMA_IRQHandler+0x3f8>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d04a      	beq.n	8003f56 <HAL_DMA_IRQHandler+0x3e2>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a2a      	ldr	r2, [pc, #168]	; (8003f70 <HAL_DMA_IRQHandler+0x3fc>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d045      	beq.n	8003f56 <HAL_DMA_IRQHandler+0x3e2>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a29      	ldr	r2, [pc, #164]	; (8003f74 <HAL_DMA_IRQHandler+0x400>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d040      	beq.n	8003f56 <HAL_DMA_IRQHandler+0x3e2>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a27      	ldr	r2, [pc, #156]	; (8003f78 <HAL_DMA_IRQHandler+0x404>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d03b      	beq.n	8003f56 <HAL_DMA_IRQHandler+0x3e2>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a26      	ldr	r2, [pc, #152]	; (8003f7c <HAL_DMA_IRQHandler+0x408>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d036      	beq.n	8003f56 <HAL_DMA_IRQHandler+0x3e2>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a24      	ldr	r2, [pc, #144]	; (8003f80 <HAL_DMA_IRQHandler+0x40c>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d031      	beq.n	8003f56 <HAL_DMA_IRQHandler+0x3e2>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a23      	ldr	r2, [pc, #140]	; (8003f84 <HAL_DMA_IRQHandler+0x410>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d02c      	beq.n	8003f56 <HAL_DMA_IRQHandler+0x3e2>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a21      	ldr	r2, [pc, #132]	; (8003f88 <HAL_DMA_IRQHandler+0x414>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d027      	beq.n	8003f56 <HAL_DMA_IRQHandler+0x3e2>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a20      	ldr	r2, [pc, #128]	; (8003f8c <HAL_DMA_IRQHandler+0x418>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d022      	beq.n	8003f56 <HAL_DMA_IRQHandler+0x3e2>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a1e      	ldr	r2, [pc, #120]	; (8003f90 <HAL_DMA_IRQHandler+0x41c>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d01d      	beq.n	8003f56 <HAL_DMA_IRQHandler+0x3e2>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a1d      	ldr	r2, [pc, #116]	; (8003f94 <HAL_DMA_IRQHandler+0x420>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d018      	beq.n	8003f56 <HAL_DMA_IRQHandler+0x3e2>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a1b      	ldr	r2, [pc, #108]	; (8003f98 <HAL_DMA_IRQHandler+0x424>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d013      	beq.n	8003f56 <HAL_DMA_IRQHandler+0x3e2>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a1a      	ldr	r2, [pc, #104]	; (8003f9c <HAL_DMA_IRQHandler+0x428>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d00e      	beq.n	8003f56 <HAL_DMA_IRQHandler+0x3e2>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a18      	ldr	r2, [pc, #96]	; (8003fa0 <HAL_DMA_IRQHandler+0x42c>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d009      	beq.n	8003f56 <HAL_DMA_IRQHandler+0x3e2>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a17      	ldr	r2, [pc, #92]	; (8003fa4 <HAL_DMA_IRQHandler+0x430>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d004      	beq.n	8003f56 <HAL_DMA_IRQHandler+0x3e2>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a15      	ldr	r2, [pc, #84]	; (8003fa8 <HAL_DMA_IRQHandler+0x434>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d12a      	bne.n	8003fac <HAL_DMA_IRQHandler+0x438>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	bf14      	ite	ne
 8003f64:	2301      	movne	r3, #1
 8003f66:	2300      	moveq	r3, #0
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	e023      	b.n	8003fb4 <HAL_DMA_IRQHandler+0x440>
 8003f6c:	40020010 	.word	0x40020010
 8003f70:	40020028 	.word	0x40020028
 8003f74:	40020040 	.word	0x40020040
 8003f78:	40020058 	.word	0x40020058
 8003f7c:	40020070 	.word	0x40020070
 8003f80:	40020088 	.word	0x40020088
 8003f84:	400200a0 	.word	0x400200a0
 8003f88:	400200b8 	.word	0x400200b8
 8003f8c:	40020410 	.word	0x40020410
 8003f90:	40020428 	.word	0x40020428
 8003f94:	40020440 	.word	0x40020440
 8003f98:	40020458 	.word	0x40020458
 8003f9c:	40020470 	.word	0x40020470
 8003fa0:	40020488 	.word	0x40020488
 8003fa4:	400204a0 	.word	0x400204a0
 8003fa8:	400204b8 	.word	0x400204b8
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d00d      	beq.n	8003fd4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fbc:	f003 031f 	and.w	r3, r3, #31
 8003fc0:	2204      	movs	r2, #4
 8003fc2:	409a      	lsls	r2, r3
 8003fc4:	6a3b      	ldr	r3, [r7, #32]
 8003fc6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fcc:	f043 0204 	orr.w	r2, r3, #4
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fd8:	f003 031f 	and.w	r3, r3, #31
 8003fdc:	2210      	movs	r2, #16
 8003fde:	409a      	lsls	r2, r3
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	f000 80a6 	beq.w	8004136 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a85      	ldr	r2, [pc, #532]	; (8004204 <HAL_DMA_IRQHandler+0x690>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d04a      	beq.n	800408a <HAL_DMA_IRQHandler+0x516>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a83      	ldr	r2, [pc, #524]	; (8004208 <HAL_DMA_IRQHandler+0x694>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d045      	beq.n	800408a <HAL_DMA_IRQHandler+0x516>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a82      	ldr	r2, [pc, #520]	; (800420c <HAL_DMA_IRQHandler+0x698>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d040      	beq.n	800408a <HAL_DMA_IRQHandler+0x516>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a80      	ldr	r2, [pc, #512]	; (8004210 <HAL_DMA_IRQHandler+0x69c>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d03b      	beq.n	800408a <HAL_DMA_IRQHandler+0x516>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a7f      	ldr	r2, [pc, #508]	; (8004214 <HAL_DMA_IRQHandler+0x6a0>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d036      	beq.n	800408a <HAL_DMA_IRQHandler+0x516>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a7d      	ldr	r2, [pc, #500]	; (8004218 <HAL_DMA_IRQHandler+0x6a4>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d031      	beq.n	800408a <HAL_DMA_IRQHandler+0x516>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a7c      	ldr	r2, [pc, #496]	; (800421c <HAL_DMA_IRQHandler+0x6a8>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d02c      	beq.n	800408a <HAL_DMA_IRQHandler+0x516>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a7a      	ldr	r2, [pc, #488]	; (8004220 <HAL_DMA_IRQHandler+0x6ac>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d027      	beq.n	800408a <HAL_DMA_IRQHandler+0x516>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a79      	ldr	r2, [pc, #484]	; (8004224 <HAL_DMA_IRQHandler+0x6b0>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d022      	beq.n	800408a <HAL_DMA_IRQHandler+0x516>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a77      	ldr	r2, [pc, #476]	; (8004228 <HAL_DMA_IRQHandler+0x6b4>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d01d      	beq.n	800408a <HAL_DMA_IRQHandler+0x516>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a76      	ldr	r2, [pc, #472]	; (800422c <HAL_DMA_IRQHandler+0x6b8>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d018      	beq.n	800408a <HAL_DMA_IRQHandler+0x516>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a74      	ldr	r2, [pc, #464]	; (8004230 <HAL_DMA_IRQHandler+0x6bc>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d013      	beq.n	800408a <HAL_DMA_IRQHandler+0x516>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a73      	ldr	r2, [pc, #460]	; (8004234 <HAL_DMA_IRQHandler+0x6c0>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d00e      	beq.n	800408a <HAL_DMA_IRQHandler+0x516>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a71      	ldr	r2, [pc, #452]	; (8004238 <HAL_DMA_IRQHandler+0x6c4>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d009      	beq.n	800408a <HAL_DMA_IRQHandler+0x516>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a70      	ldr	r2, [pc, #448]	; (800423c <HAL_DMA_IRQHandler+0x6c8>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d004      	beq.n	800408a <HAL_DMA_IRQHandler+0x516>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a6e      	ldr	r2, [pc, #440]	; (8004240 <HAL_DMA_IRQHandler+0x6cc>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d10a      	bne.n	80040a0 <HAL_DMA_IRQHandler+0x52c>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0308 	and.w	r3, r3, #8
 8004094:	2b00      	cmp	r3, #0
 8004096:	bf14      	ite	ne
 8004098:	2301      	movne	r3, #1
 800409a:	2300      	moveq	r3, #0
 800409c:	b2db      	uxtb	r3, r3
 800409e:	e009      	b.n	80040b4 <HAL_DMA_IRQHandler+0x540>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0304 	and.w	r3, r3, #4
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	bf14      	ite	ne
 80040ae:	2301      	movne	r3, #1
 80040b0:	2300      	moveq	r3, #0
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d03e      	beq.n	8004136 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040bc:	f003 031f 	and.w	r3, r3, #31
 80040c0:	2210      	movs	r2, #16
 80040c2:	409a      	lsls	r2, r3
 80040c4:	6a3b      	ldr	r3, [r7, #32]
 80040c6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d018      	beq.n	8004108 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d108      	bne.n	80040f6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d024      	beq.n	8004136 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	4798      	blx	r3
 80040f4:	e01f      	b.n	8004136 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d01b      	beq.n	8004136 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	4798      	blx	r3
 8004106:	e016      	b.n	8004136 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004112:	2b00      	cmp	r3, #0
 8004114:	d107      	bne.n	8004126 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f022 0208 	bic.w	r2, r2, #8
 8004124:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412a:	2b00      	cmp	r3, #0
 800412c:	d003      	beq.n	8004136 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800413a:	f003 031f 	and.w	r3, r3, #31
 800413e:	2220      	movs	r2, #32
 8004140:	409a      	lsls	r2, r3
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	4013      	ands	r3, r2
 8004146:	2b00      	cmp	r3, #0
 8004148:	f000 8110 	beq.w	800436c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a2c      	ldr	r2, [pc, #176]	; (8004204 <HAL_DMA_IRQHandler+0x690>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d04a      	beq.n	80041ec <HAL_DMA_IRQHandler+0x678>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a2b      	ldr	r2, [pc, #172]	; (8004208 <HAL_DMA_IRQHandler+0x694>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d045      	beq.n	80041ec <HAL_DMA_IRQHandler+0x678>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a29      	ldr	r2, [pc, #164]	; (800420c <HAL_DMA_IRQHandler+0x698>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d040      	beq.n	80041ec <HAL_DMA_IRQHandler+0x678>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a28      	ldr	r2, [pc, #160]	; (8004210 <HAL_DMA_IRQHandler+0x69c>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d03b      	beq.n	80041ec <HAL_DMA_IRQHandler+0x678>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a26      	ldr	r2, [pc, #152]	; (8004214 <HAL_DMA_IRQHandler+0x6a0>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d036      	beq.n	80041ec <HAL_DMA_IRQHandler+0x678>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a25      	ldr	r2, [pc, #148]	; (8004218 <HAL_DMA_IRQHandler+0x6a4>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d031      	beq.n	80041ec <HAL_DMA_IRQHandler+0x678>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a23      	ldr	r2, [pc, #140]	; (800421c <HAL_DMA_IRQHandler+0x6a8>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d02c      	beq.n	80041ec <HAL_DMA_IRQHandler+0x678>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a22      	ldr	r2, [pc, #136]	; (8004220 <HAL_DMA_IRQHandler+0x6ac>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d027      	beq.n	80041ec <HAL_DMA_IRQHandler+0x678>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a20      	ldr	r2, [pc, #128]	; (8004224 <HAL_DMA_IRQHandler+0x6b0>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d022      	beq.n	80041ec <HAL_DMA_IRQHandler+0x678>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a1f      	ldr	r2, [pc, #124]	; (8004228 <HAL_DMA_IRQHandler+0x6b4>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d01d      	beq.n	80041ec <HAL_DMA_IRQHandler+0x678>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a1d      	ldr	r2, [pc, #116]	; (800422c <HAL_DMA_IRQHandler+0x6b8>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d018      	beq.n	80041ec <HAL_DMA_IRQHandler+0x678>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a1c      	ldr	r2, [pc, #112]	; (8004230 <HAL_DMA_IRQHandler+0x6bc>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d013      	beq.n	80041ec <HAL_DMA_IRQHandler+0x678>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a1a      	ldr	r2, [pc, #104]	; (8004234 <HAL_DMA_IRQHandler+0x6c0>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d00e      	beq.n	80041ec <HAL_DMA_IRQHandler+0x678>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a19      	ldr	r2, [pc, #100]	; (8004238 <HAL_DMA_IRQHandler+0x6c4>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d009      	beq.n	80041ec <HAL_DMA_IRQHandler+0x678>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a17      	ldr	r2, [pc, #92]	; (800423c <HAL_DMA_IRQHandler+0x6c8>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d004      	beq.n	80041ec <HAL_DMA_IRQHandler+0x678>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a16      	ldr	r2, [pc, #88]	; (8004240 <HAL_DMA_IRQHandler+0x6cc>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d12b      	bne.n	8004244 <HAL_DMA_IRQHandler+0x6d0>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0310 	and.w	r3, r3, #16
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	bf14      	ite	ne
 80041fa:	2301      	movne	r3, #1
 80041fc:	2300      	moveq	r3, #0
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	e02a      	b.n	8004258 <HAL_DMA_IRQHandler+0x6e4>
 8004202:	bf00      	nop
 8004204:	40020010 	.word	0x40020010
 8004208:	40020028 	.word	0x40020028
 800420c:	40020040 	.word	0x40020040
 8004210:	40020058 	.word	0x40020058
 8004214:	40020070 	.word	0x40020070
 8004218:	40020088 	.word	0x40020088
 800421c:	400200a0 	.word	0x400200a0
 8004220:	400200b8 	.word	0x400200b8
 8004224:	40020410 	.word	0x40020410
 8004228:	40020428 	.word	0x40020428
 800422c:	40020440 	.word	0x40020440
 8004230:	40020458 	.word	0x40020458
 8004234:	40020470 	.word	0x40020470
 8004238:	40020488 	.word	0x40020488
 800423c:	400204a0 	.word	0x400204a0
 8004240:	400204b8 	.word	0x400204b8
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0302 	and.w	r3, r3, #2
 800424e:	2b00      	cmp	r3, #0
 8004250:	bf14      	ite	ne
 8004252:	2301      	movne	r3, #1
 8004254:	2300      	moveq	r3, #0
 8004256:	b2db      	uxtb	r3, r3
 8004258:	2b00      	cmp	r3, #0
 800425a:	f000 8087 	beq.w	800436c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004262:	f003 031f 	and.w	r3, r3, #31
 8004266:	2220      	movs	r2, #32
 8004268:	409a      	lsls	r2, r3
 800426a:	6a3b      	ldr	r3, [r7, #32]
 800426c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004274:	b2db      	uxtb	r3, r3
 8004276:	2b04      	cmp	r3, #4
 8004278:	d139      	bne.n	80042ee <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f022 0216 	bic.w	r2, r2, #22
 8004288:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	695a      	ldr	r2, [r3, #20]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004298:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d103      	bne.n	80042aa <HAL_DMA_IRQHandler+0x736>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d007      	beq.n	80042ba <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f022 0208 	bic.w	r2, r2, #8
 80042b8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042be:	f003 031f 	and.w	r3, r3, #31
 80042c2:	223f      	movs	r2, #63	; 0x3f
 80042c4:	409a      	lsls	r2, r3
 80042c6:	6a3b      	ldr	r3, [r7, #32]
 80042c8:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042de:	2b00      	cmp	r3, #0
 80042e0:	f000 834a 	beq.w	8004978 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	4798      	blx	r3
          }
          return;
 80042ec:	e344      	b.n	8004978 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d018      	beq.n	800432e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d108      	bne.n	800431c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800430e:	2b00      	cmp	r3, #0
 8004310:	d02c      	beq.n	800436c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	4798      	blx	r3
 800431a:	e027      	b.n	800436c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004320:	2b00      	cmp	r3, #0
 8004322:	d023      	beq.n	800436c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	4798      	blx	r3
 800432c:	e01e      	b.n	800436c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004338:	2b00      	cmp	r3, #0
 800433a:	d10f      	bne.n	800435c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f022 0210 	bic.w	r2, r2, #16
 800434a:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004360:	2b00      	cmp	r3, #0
 8004362:	d003      	beq.n	800436c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004370:	2b00      	cmp	r3, #0
 8004372:	f000 8306 	beq.w	8004982 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800437a:	f003 0301 	and.w	r3, r3, #1
 800437e:	2b00      	cmp	r3, #0
 8004380:	f000 8088 	beq.w	8004494 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2204      	movs	r2, #4
 8004388:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a7a      	ldr	r2, [pc, #488]	; (800457c <HAL_DMA_IRQHandler+0xa08>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d04a      	beq.n	800442c <HAL_DMA_IRQHandler+0x8b8>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a79      	ldr	r2, [pc, #484]	; (8004580 <HAL_DMA_IRQHandler+0xa0c>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d045      	beq.n	800442c <HAL_DMA_IRQHandler+0x8b8>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a77      	ldr	r2, [pc, #476]	; (8004584 <HAL_DMA_IRQHandler+0xa10>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d040      	beq.n	800442c <HAL_DMA_IRQHandler+0x8b8>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a76      	ldr	r2, [pc, #472]	; (8004588 <HAL_DMA_IRQHandler+0xa14>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d03b      	beq.n	800442c <HAL_DMA_IRQHandler+0x8b8>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a74      	ldr	r2, [pc, #464]	; (800458c <HAL_DMA_IRQHandler+0xa18>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d036      	beq.n	800442c <HAL_DMA_IRQHandler+0x8b8>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a73      	ldr	r2, [pc, #460]	; (8004590 <HAL_DMA_IRQHandler+0xa1c>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d031      	beq.n	800442c <HAL_DMA_IRQHandler+0x8b8>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a71      	ldr	r2, [pc, #452]	; (8004594 <HAL_DMA_IRQHandler+0xa20>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d02c      	beq.n	800442c <HAL_DMA_IRQHandler+0x8b8>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a70      	ldr	r2, [pc, #448]	; (8004598 <HAL_DMA_IRQHandler+0xa24>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d027      	beq.n	800442c <HAL_DMA_IRQHandler+0x8b8>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a6e      	ldr	r2, [pc, #440]	; (800459c <HAL_DMA_IRQHandler+0xa28>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d022      	beq.n	800442c <HAL_DMA_IRQHandler+0x8b8>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a6d      	ldr	r2, [pc, #436]	; (80045a0 <HAL_DMA_IRQHandler+0xa2c>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d01d      	beq.n	800442c <HAL_DMA_IRQHandler+0x8b8>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a6b      	ldr	r2, [pc, #428]	; (80045a4 <HAL_DMA_IRQHandler+0xa30>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d018      	beq.n	800442c <HAL_DMA_IRQHandler+0x8b8>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a6a      	ldr	r2, [pc, #424]	; (80045a8 <HAL_DMA_IRQHandler+0xa34>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d013      	beq.n	800442c <HAL_DMA_IRQHandler+0x8b8>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a68      	ldr	r2, [pc, #416]	; (80045ac <HAL_DMA_IRQHandler+0xa38>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d00e      	beq.n	800442c <HAL_DMA_IRQHandler+0x8b8>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a67      	ldr	r2, [pc, #412]	; (80045b0 <HAL_DMA_IRQHandler+0xa3c>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d009      	beq.n	800442c <HAL_DMA_IRQHandler+0x8b8>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a65      	ldr	r2, [pc, #404]	; (80045b4 <HAL_DMA_IRQHandler+0xa40>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d004      	beq.n	800442c <HAL_DMA_IRQHandler+0x8b8>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a64      	ldr	r2, [pc, #400]	; (80045b8 <HAL_DMA_IRQHandler+0xa44>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d108      	bne.n	800443e <HAL_DMA_IRQHandler+0x8ca>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f022 0201 	bic.w	r2, r2, #1
 800443a:	601a      	str	r2, [r3, #0]
 800443c:	e007      	b.n	800444e <HAL_DMA_IRQHandler+0x8da>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f022 0201 	bic.w	r2, r2, #1
 800444c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	3301      	adds	r3, #1
 8004452:	60fb      	str	r3, [r7, #12]
 8004454:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004456:	429a      	cmp	r2, r3
 8004458:	d307      	bcc.n	800446a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0301 	and.w	r3, r3, #1
 8004464:	2b00      	cmp	r3, #0
 8004466:	d1f2      	bne.n	800444e <HAL_DMA_IRQHandler+0x8da>
 8004468:	e000      	b.n	800446c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800446a:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0301 	and.w	r3, r3, #1
 800447e:	2b00      	cmp	r3, #0
 8004480:	d004      	beq.n	800448c <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2203      	movs	r2, #3
 8004486:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800448a:	e003      	b.n	8004494 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004498:	2b00      	cmp	r3, #0
 800449a:	f000 8272 	beq.w	8004982 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	4798      	blx	r3
 80044a6:	e26c      	b.n	8004982 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a43      	ldr	r2, [pc, #268]	; (80045bc <HAL_DMA_IRQHandler+0xa48>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d022      	beq.n	80044f8 <HAL_DMA_IRQHandler+0x984>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a42      	ldr	r2, [pc, #264]	; (80045c0 <HAL_DMA_IRQHandler+0xa4c>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d01d      	beq.n	80044f8 <HAL_DMA_IRQHandler+0x984>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a40      	ldr	r2, [pc, #256]	; (80045c4 <HAL_DMA_IRQHandler+0xa50>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d018      	beq.n	80044f8 <HAL_DMA_IRQHandler+0x984>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a3f      	ldr	r2, [pc, #252]	; (80045c8 <HAL_DMA_IRQHandler+0xa54>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d013      	beq.n	80044f8 <HAL_DMA_IRQHandler+0x984>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a3d      	ldr	r2, [pc, #244]	; (80045cc <HAL_DMA_IRQHandler+0xa58>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d00e      	beq.n	80044f8 <HAL_DMA_IRQHandler+0x984>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a3c      	ldr	r2, [pc, #240]	; (80045d0 <HAL_DMA_IRQHandler+0xa5c>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d009      	beq.n	80044f8 <HAL_DMA_IRQHandler+0x984>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a3a      	ldr	r2, [pc, #232]	; (80045d4 <HAL_DMA_IRQHandler+0xa60>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d004      	beq.n	80044f8 <HAL_DMA_IRQHandler+0x984>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a39      	ldr	r2, [pc, #228]	; (80045d8 <HAL_DMA_IRQHandler+0xa64>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d101      	bne.n	80044fc <HAL_DMA_IRQHandler+0x988>
 80044f8:	2301      	movs	r3, #1
 80044fa:	e000      	b.n	80044fe <HAL_DMA_IRQHandler+0x98a>
 80044fc:	2300      	movs	r3, #0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	f000 823f 	beq.w	8004982 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004510:	f003 031f 	and.w	r3, r3, #31
 8004514:	2204      	movs	r2, #4
 8004516:	409a      	lsls	r2, r3
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	4013      	ands	r3, r2
 800451c:	2b00      	cmp	r3, #0
 800451e:	f000 80cd 	beq.w	80046bc <HAL_DMA_IRQHandler+0xb48>
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	f003 0304 	and.w	r3, r3, #4
 8004528:	2b00      	cmp	r3, #0
 800452a:	f000 80c7 	beq.w	80046bc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004532:	f003 031f 	and.w	r3, r3, #31
 8004536:	2204      	movs	r2, #4
 8004538:	409a      	lsls	r2, r3
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004544:	2b00      	cmp	r3, #0
 8004546:	d049      	beq.n	80045dc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d109      	bne.n	8004566 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004556:	2b00      	cmp	r3, #0
 8004558:	f000 8210 	beq.w	800497c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004564:	e20a      	b.n	800497c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456a:	2b00      	cmp	r3, #0
 800456c:	f000 8206 	beq.w	800497c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004578:	e200      	b.n	800497c <HAL_DMA_IRQHandler+0xe08>
 800457a:	bf00      	nop
 800457c:	40020010 	.word	0x40020010
 8004580:	40020028 	.word	0x40020028
 8004584:	40020040 	.word	0x40020040
 8004588:	40020058 	.word	0x40020058
 800458c:	40020070 	.word	0x40020070
 8004590:	40020088 	.word	0x40020088
 8004594:	400200a0 	.word	0x400200a0
 8004598:	400200b8 	.word	0x400200b8
 800459c:	40020410 	.word	0x40020410
 80045a0:	40020428 	.word	0x40020428
 80045a4:	40020440 	.word	0x40020440
 80045a8:	40020458 	.word	0x40020458
 80045ac:	40020470 	.word	0x40020470
 80045b0:	40020488 	.word	0x40020488
 80045b4:	400204a0 	.word	0x400204a0
 80045b8:	400204b8 	.word	0x400204b8
 80045bc:	58025408 	.word	0x58025408
 80045c0:	5802541c 	.word	0x5802541c
 80045c4:	58025430 	.word	0x58025430
 80045c8:	58025444 	.word	0x58025444
 80045cc:	58025458 	.word	0x58025458
 80045d0:	5802546c 	.word	0x5802546c
 80045d4:	58025480 	.word	0x58025480
 80045d8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	f003 0320 	and.w	r3, r3, #32
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d160      	bne.n	80046a8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a7f      	ldr	r2, [pc, #508]	; (80047e8 <HAL_DMA_IRQHandler+0xc74>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d04a      	beq.n	8004686 <HAL_DMA_IRQHandler+0xb12>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a7d      	ldr	r2, [pc, #500]	; (80047ec <HAL_DMA_IRQHandler+0xc78>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d045      	beq.n	8004686 <HAL_DMA_IRQHandler+0xb12>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a7c      	ldr	r2, [pc, #496]	; (80047f0 <HAL_DMA_IRQHandler+0xc7c>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d040      	beq.n	8004686 <HAL_DMA_IRQHandler+0xb12>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a7a      	ldr	r2, [pc, #488]	; (80047f4 <HAL_DMA_IRQHandler+0xc80>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d03b      	beq.n	8004686 <HAL_DMA_IRQHandler+0xb12>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a79      	ldr	r2, [pc, #484]	; (80047f8 <HAL_DMA_IRQHandler+0xc84>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d036      	beq.n	8004686 <HAL_DMA_IRQHandler+0xb12>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a77      	ldr	r2, [pc, #476]	; (80047fc <HAL_DMA_IRQHandler+0xc88>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d031      	beq.n	8004686 <HAL_DMA_IRQHandler+0xb12>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a76      	ldr	r2, [pc, #472]	; (8004800 <HAL_DMA_IRQHandler+0xc8c>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d02c      	beq.n	8004686 <HAL_DMA_IRQHandler+0xb12>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a74      	ldr	r2, [pc, #464]	; (8004804 <HAL_DMA_IRQHandler+0xc90>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d027      	beq.n	8004686 <HAL_DMA_IRQHandler+0xb12>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a73      	ldr	r2, [pc, #460]	; (8004808 <HAL_DMA_IRQHandler+0xc94>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d022      	beq.n	8004686 <HAL_DMA_IRQHandler+0xb12>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a71      	ldr	r2, [pc, #452]	; (800480c <HAL_DMA_IRQHandler+0xc98>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d01d      	beq.n	8004686 <HAL_DMA_IRQHandler+0xb12>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a70      	ldr	r2, [pc, #448]	; (8004810 <HAL_DMA_IRQHandler+0xc9c>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d018      	beq.n	8004686 <HAL_DMA_IRQHandler+0xb12>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a6e      	ldr	r2, [pc, #440]	; (8004814 <HAL_DMA_IRQHandler+0xca0>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d013      	beq.n	8004686 <HAL_DMA_IRQHandler+0xb12>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a6d      	ldr	r2, [pc, #436]	; (8004818 <HAL_DMA_IRQHandler+0xca4>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d00e      	beq.n	8004686 <HAL_DMA_IRQHandler+0xb12>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a6b      	ldr	r2, [pc, #428]	; (800481c <HAL_DMA_IRQHandler+0xca8>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d009      	beq.n	8004686 <HAL_DMA_IRQHandler+0xb12>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a6a      	ldr	r2, [pc, #424]	; (8004820 <HAL_DMA_IRQHandler+0xcac>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d004      	beq.n	8004686 <HAL_DMA_IRQHandler+0xb12>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a68      	ldr	r2, [pc, #416]	; (8004824 <HAL_DMA_IRQHandler+0xcb0>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d108      	bne.n	8004698 <HAL_DMA_IRQHandler+0xb24>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f022 0208 	bic.w	r2, r2, #8
 8004694:	601a      	str	r2, [r3, #0]
 8004696:	e007      	b.n	80046a8 <HAL_DMA_IRQHandler+0xb34>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f022 0204 	bic.w	r2, r2, #4
 80046a6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	f000 8165 	beq.w	800497c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046ba:	e15f      	b.n	800497c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046c0:	f003 031f 	and.w	r3, r3, #31
 80046c4:	2202      	movs	r2, #2
 80046c6:	409a      	lsls	r2, r3
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	4013      	ands	r3, r2
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	f000 80c5 	beq.w	800485c <HAL_DMA_IRQHandler+0xce8>
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	f003 0302 	and.w	r3, r3, #2
 80046d8:	2b00      	cmp	r3, #0
 80046da:	f000 80bf 	beq.w	800485c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046e2:	f003 031f 	and.w	r3, r3, #31
 80046e6:	2202      	movs	r2, #2
 80046e8:	409a      	lsls	r2, r3
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d018      	beq.n	800472a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d109      	bne.n	8004716 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004706:	2b00      	cmp	r3, #0
 8004708:	f000 813a 	beq.w	8004980 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004714:	e134      	b.n	8004980 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800471a:	2b00      	cmp	r3, #0
 800471c:	f000 8130 	beq.w	8004980 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004728:	e12a      	b.n	8004980 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	f003 0320 	and.w	r3, r3, #32
 8004730:	2b00      	cmp	r3, #0
 8004732:	f040 8089 	bne.w	8004848 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a2b      	ldr	r2, [pc, #172]	; (80047e8 <HAL_DMA_IRQHandler+0xc74>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d04a      	beq.n	80047d6 <HAL_DMA_IRQHandler+0xc62>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a29      	ldr	r2, [pc, #164]	; (80047ec <HAL_DMA_IRQHandler+0xc78>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d045      	beq.n	80047d6 <HAL_DMA_IRQHandler+0xc62>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a28      	ldr	r2, [pc, #160]	; (80047f0 <HAL_DMA_IRQHandler+0xc7c>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d040      	beq.n	80047d6 <HAL_DMA_IRQHandler+0xc62>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a26      	ldr	r2, [pc, #152]	; (80047f4 <HAL_DMA_IRQHandler+0xc80>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d03b      	beq.n	80047d6 <HAL_DMA_IRQHandler+0xc62>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a25      	ldr	r2, [pc, #148]	; (80047f8 <HAL_DMA_IRQHandler+0xc84>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d036      	beq.n	80047d6 <HAL_DMA_IRQHandler+0xc62>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a23      	ldr	r2, [pc, #140]	; (80047fc <HAL_DMA_IRQHandler+0xc88>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d031      	beq.n	80047d6 <HAL_DMA_IRQHandler+0xc62>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a22      	ldr	r2, [pc, #136]	; (8004800 <HAL_DMA_IRQHandler+0xc8c>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d02c      	beq.n	80047d6 <HAL_DMA_IRQHandler+0xc62>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a20      	ldr	r2, [pc, #128]	; (8004804 <HAL_DMA_IRQHandler+0xc90>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d027      	beq.n	80047d6 <HAL_DMA_IRQHandler+0xc62>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a1f      	ldr	r2, [pc, #124]	; (8004808 <HAL_DMA_IRQHandler+0xc94>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d022      	beq.n	80047d6 <HAL_DMA_IRQHandler+0xc62>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a1d      	ldr	r2, [pc, #116]	; (800480c <HAL_DMA_IRQHandler+0xc98>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d01d      	beq.n	80047d6 <HAL_DMA_IRQHandler+0xc62>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a1c      	ldr	r2, [pc, #112]	; (8004810 <HAL_DMA_IRQHandler+0xc9c>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d018      	beq.n	80047d6 <HAL_DMA_IRQHandler+0xc62>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a1a      	ldr	r2, [pc, #104]	; (8004814 <HAL_DMA_IRQHandler+0xca0>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d013      	beq.n	80047d6 <HAL_DMA_IRQHandler+0xc62>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a19      	ldr	r2, [pc, #100]	; (8004818 <HAL_DMA_IRQHandler+0xca4>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d00e      	beq.n	80047d6 <HAL_DMA_IRQHandler+0xc62>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a17      	ldr	r2, [pc, #92]	; (800481c <HAL_DMA_IRQHandler+0xca8>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d009      	beq.n	80047d6 <HAL_DMA_IRQHandler+0xc62>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a16      	ldr	r2, [pc, #88]	; (8004820 <HAL_DMA_IRQHandler+0xcac>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d004      	beq.n	80047d6 <HAL_DMA_IRQHandler+0xc62>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a14      	ldr	r2, [pc, #80]	; (8004824 <HAL_DMA_IRQHandler+0xcb0>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d128      	bne.n	8004828 <HAL_DMA_IRQHandler+0xcb4>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f022 0214 	bic.w	r2, r2, #20
 80047e4:	601a      	str	r2, [r3, #0]
 80047e6:	e027      	b.n	8004838 <HAL_DMA_IRQHandler+0xcc4>
 80047e8:	40020010 	.word	0x40020010
 80047ec:	40020028 	.word	0x40020028
 80047f0:	40020040 	.word	0x40020040
 80047f4:	40020058 	.word	0x40020058
 80047f8:	40020070 	.word	0x40020070
 80047fc:	40020088 	.word	0x40020088
 8004800:	400200a0 	.word	0x400200a0
 8004804:	400200b8 	.word	0x400200b8
 8004808:	40020410 	.word	0x40020410
 800480c:	40020428 	.word	0x40020428
 8004810:	40020440 	.word	0x40020440
 8004814:	40020458 	.word	0x40020458
 8004818:	40020470 	.word	0x40020470
 800481c:	40020488 	.word	0x40020488
 8004820:	400204a0 	.word	0x400204a0
 8004824:	400204b8 	.word	0x400204b8
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f022 020a 	bic.w	r2, r2, #10
 8004836:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800484c:	2b00      	cmp	r3, #0
 800484e:	f000 8097 	beq.w	8004980 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800485a:	e091      	b.n	8004980 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004860:	f003 031f 	and.w	r3, r3, #31
 8004864:	2208      	movs	r2, #8
 8004866:	409a      	lsls	r2, r3
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	4013      	ands	r3, r2
 800486c:	2b00      	cmp	r3, #0
 800486e:	f000 8088 	beq.w	8004982 <HAL_DMA_IRQHandler+0xe0e>
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	f003 0308 	and.w	r3, r3, #8
 8004878:	2b00      	cmp	r3, #0
 800487a:	f000 8082 	beq.w	8004982 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a41      	ldr	r2, [pc, #260]	; (8004988 <HAL_DMA_IRQHandler+0xe14>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d04a      	beq.n	800491e <HAL_DMA_IRQHandler+0xdaa>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a3f      	ldr	r2, [pc, #252]	; (800498c <HAL_DMA_IRQHandler+0xe18>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d045      	beq.n	800491e <HAL_DMA_IRQHandler+0xdaa>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a3e      	ldr	r2, [pc, #248]	; (8004990 <HAL_DMA_IRQHandler+0xe1c>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d040      	beq.n	800491e <HAL_DMA_IRQHandler+0xdaa>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a3c      	ldr	r2, [pc, #240]	; (8004994 <HAL_DMA_IRQHandler+0xe20>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d03b      	beq.n	800491e <HAL_DMA_IRQHandler+0xdaa>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a3b      	ldr	r2, [pc, #236]	; (8004998 <HAL_DMA_IRQHandler+0xe24>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d036      	beq.n	800491e <HAL_DMA_IRQHandler+0xdaa>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a39      	ldr	r2, [pc, #228]	; (800499c <HAL_DMA_IRQHandler+0xe28>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d031      	beq.n	800491e <HAL_DMA_IRQHandler+0xdaa>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a38      	ldr	r2, [pc, #224]	; (80049a0 <HAL_DMA_IRQHandler+0xe2c>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d02c      	beq.n	800491e <HAL_DMA_IRQHandler+0xdaa>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a36      	ldr	r2, [pc, #216]	; (80049a4 <HAL_DMA_IRQHandler+0xe30>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d027      	beq.n	800491e <HAL_DMA_IRQHandler+0xdaa>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a35      	ldr	r2, [pc, #212]	; (80049a8 <HAL_DMA_IRQHandler+0xe34>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d022      	beq.n	800491e <HAL_DMA_IRQHandler+0xdaa>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a33      	ldr	r2, [pc, #204]	; (80049ac <HAL_DMA_IRQHandler+0xe38>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d01d      	beq.n	800491e <HAL_DMA_IRQHandler+0xdaa>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a32      	ldr	r2, [pc, #200]	; (80049b0 <HAL_DMA_IRQHandler+0xe3c>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d018      	beq.n	800491e <HAL_DMA_IRQHandler+0xdaa>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a30      	ldr	r2, [pc, #192]	; (80049b4 <HAL_DMA_IRQHandler+0xe40>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d013      	beq.n	800491e <HAL_DMA_IRQHandler+0xdaa>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a2f      	ldr	r2, [pc, #188]	; (80049b8 <HAL_DMA_IRQHandler+0xe44>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d00e      	beq.n	800491e <HAL_DMA_IRQHandler+0xdaa>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a2d      	ldr	r2, [pc, #180]	; (80049bc <HAL_DMA_IRQHandler+0xe48>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d009      	beq.n	800491e <HAL_DMA_IRQHandler+0xdaa>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a2c      	ldr	r2, [pc, #176]	; (80049c0 <HAL_DMA_IRQHandler+0xe4c>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d004      	beq.n	800491e <HAL_DMA_IRQHandler+0xdaa>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a2a      	ldr	r2, [pc, #168]	; (80049c4 <HAL_DMA_IRQHandler+0xe50>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d108      	bne.n	8004930 <HAL_DMA_IRQHandler+0xdbc>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f022 021c 	bic.w	r2, r2, #28
 800492c:	601a      	str	r2, [r3, #0]
 800492e:	e007      	b.n	8004940 <HAL_DMA_IRQHandler+0xdcc>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f022 020e 	bic.w	r2, r2, #14
 800493e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004944:	f003 031f 	and.w	r3, r3, #31
 8004948:	2201      	movs	r2, #1
 800494a:	409a      	lsls	r2, r3
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2201      	movs	r2, #1
 8004962:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800496a:	2b00      	cmp	r3, #0
 800496c:	d009      	beq.n	8004982 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	4798      	blx	r3
 8004976:	e004      	b.n	8004982 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004978:	bf00      	nop
 800497a:	e002      	b.n	8004982 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800497c:	bf00      	nop
 800497e:	e000      	b.n	8004982 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004980:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004982:	3728      	adds	r7, #40	; 0x28
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}
 8004988:	40020010 	.word	0x40020010
 800498c:	40020028 	.word	0x40020028
 8004990:	40020040 	.word	0x40020040
 8004994:	40020058 	.word	0x40020058
 8004998:	40020070 	.word	0x40020070
 800499c:	40020088 	.word	0x40020088
 80049a0:	400200a0 	.word	0x400200a0
 80049a4:	400200b8 	.word	0x400200b8
 80049a8:	40020410 	.word	0x40020410
 80049ac:	40020428 	.word	0x40020428
 80049b0:	40020440 	.word	0x40020440
 80049b4:	40020458 	.word	0x40020458
 80049b8:	40020470 	.word	0x40020470
 80049bc:	40020488 	.word	0x40020488
 80049c0:	400204a0 	.word	0x400204a0
 80049c4:	400204b8 	.word	0x400204b8

080049c8 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049d6:	b2db      	uxtb	r3, r3
}
 80049d8:	4618      	mov	r0, r3
 80049da:	370c      	adds	r7, #12
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	370c      	adds	r7, #12
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b087      	sub	sp, #28
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	607a      	str	r2, [r7, #4]
 8004a08:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a0e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a14:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a7f      	ldr	r2, [pc, #508]	; (8004c18 <DMA_SetConfig+0x21c>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d072      	beq.n	8004b06 <DMA_SetConfig+0x10a>
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a7d      	ldr	r2, [pc, #500]	; (8004c1c <DMA_SetConfig+0x220>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d06d      	beq.n	8004b06 <DMA_SetConfig+0x10a>
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a7c      	ldr	r2, [pc, #496]	; (8004c20 <DMA_SetConfig+0x224>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d068      	beq.n	8004b06 <DMA_SetConfig+0x10a>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a7a      	ldr	r2, [pc, #488]	; (8004c24 <DMA_SetConfig+0x228>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d063      	beq.n	8004b06 <DMA_SetConfig+0x10a>
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a79      	ldr	r2, [pc, #484]	; (8004c28 <DMA_SetConfig+0x22c>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d05e      	beq.n	8004b06 <DMA_SetConfig+0x10a>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a77      	ldr	r2, [pc, #476]	; (8004c2c <DMA_SetConfig+0x230>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d059      	beq.n	8004b06 <DMA_SetConfig+0x10a>
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a76      	ldr	r2, [pc, #472]	; (8004c30 <DMA_SetConfig+0x234>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d054      	beq.n	8004b06 <DMA_SetConfig+0x10a>
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a74      	ldr	r2, [pc, #464]	; (8004c34 <DMA_SetConfig+0x238>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d04f      	beq.n	8004b06 <DMA_SetConfig+0x10a>
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a73      	ldr	r2, [pc, #460]	; (8004c38 <DMA_SetConfig+0x23c>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d04a      	beq.n	8004b06 <DMA_SetConfig+0x10a>
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a71      	ldr	r2, [pc, #452]	; (8004c3c <DMA_SetConfig+0x240>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d045      	beq.n	8004b06 <DMA_SetConfig+0x10a>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a70      	ldr	r2, [pc, #448]	; (8004c40 <DMA_SetConfig+0x244>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d040      	beq.n	8004b06 <DMA_SetConfig+0x10a>
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a6e      	ldr	r2, [pc, #440]	; (8004c44 <DMA_SetConfig+0x248>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d03b      	beq.n	8004b06 <DMA_SetConfig+0x10a>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a6d      	ldr	r2, [pc, #436]	; (8004c48 <DMA_SetConfig+0x24c>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d036      	beq.n	8004b06 <DMA_SetConfig+0x10a>
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a6b      	ldr	r2, [pc, #428]	; (8004c4c <DMA_SetConfig+0x250>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d031      	beq.n	8004b06 <DMA_SetConfig+0x10a>
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a6a      	ldr	r2, [pc, #424]	; (8004c50 <DMA_SetConfig+0x254>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d02c      	beq.n	8004b06 <DMA_SetConfig+0x10a>
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a68      	ldr	r2, [pc, #416]	; (8004c54 <DMA_SetConfig+0x258>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d027      	beq.n	8004b06 <DMA_SetConfig+0x10a>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a67      	ldr	r2, [pc, #412]	; (8004c58 <DMA_SetConfig+0x25c>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d022      	beq.n	8004b06 <DMA_SetConfig+0x10a>
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a65      	ldr	r2, [pc, #404]	; (8004c5c <DMA_SetConfig+0x260>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d01d      	beq.n	8004b06 <DMA_SetConfig+0x10a>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a64      	ldr	r2, [pc, #400]	; (8004c60 <DMA_SetConfig+0x264>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d018      	beq.n	8004b06 <DMA_SetConfig+0x10a>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a62      	ldr	r2, [pc, #392]	; (8004c64 <DMA_SetConfig+0x268>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d013      	beq.n	8004b06 <DMA_SetConfig+0x10a>
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a61      	ldr	r2, [pc, #388]	; (8004c68 <DMA_SetConfig+0x26c>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d00e      	beq.n	8004b06 <DMA_SetConfig+0x10a>
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a5f      	ldr	r2, [pc, #380]	; (8004c6c <DMA_SetConfig+0x270>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d009      	beq.n	8004b06 <DMA_SetConfig+0x10a>
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a5e      	ldr	r2, [pc, #376]	; (8004c70 <DMA_SetConfig+0x274>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d004      	beq.n	8004b06 <DMA_SetConfig+0x10a>
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a5c      	ldr	r2, [pc, #368]	; (8004c74 <DMA_SetConfig+0x278>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d101      	bne.n	8004b0a <DMA_SetConfig+0x10e>
 8004b06:	2301      	movs	r3, #1
 8004b08:	e000      	b.n	8004b0c <DMA_SetConfig+0x110>
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d00d      	beq.n	8004b2c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b14:	68fa      	ldr	r2, [r7, #12]
 8004b16:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004b18:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d004      	beq.n	8004b2c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004b2a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a39      	ldr	r2, [pc, #228]	; (8004c18 <DMA_SetConfig+0x21c>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d04a      	beq.n	8004bcc <DMA_SetConfig+0x1d0>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a38      	ldr	r2, [pc, #224]	; (8004c1c <DMA_SetConfig+0x220>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d045      	beq.n	8004bcc <DMA_SetConfig+0x1d0>
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a36      	ldr	r2, [pc, #216]	; (8004c20 <DMA_SetConfig+0x224>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d040      	beq.n	8004bcc <DMA_SetConfig+0x1d0>
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a35      	ldr	r2, [pc, #212]	; (8004c24 <DMA_SetConfig+0x228>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d03b      	beq.n	8004bcc <DMA_SetConfig+0x1d0>
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a33      	ldr	r2, [pc, #204]	; (8004c28 <DMA_SetConfig+0x22c>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d036      	beq.n	8004bcc <DMA_SetConfig+0x1d0>
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a32      	ldr	r2, [pc, #200]	; (8004c2c <DMA_SetConfig+0x230>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d031      	beq.n	8004bcc <DMA_SetConfig+0x1d0>
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a30      	ldr	r2, [pc, #192]	; (8004c30 <DMA_SetConfig+0x234>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d02c      	beq.n	8004bcc <DMA_SetConfig+0x1d0>
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a2f      	ldr	r2, [pc, #188]	; (8004c34 <DMA_SetConfig+0x238>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d027      	beq.n	8004bcc <DMA_SetConfig+0x1d0>
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a2d      	ldr	r2, [pc, #180]	; (8004c38 <DMA_SetConfig+0x23c>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d022      	beq.n	8004bcc <DMA_SetConfig+0x1d0>
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a2c      	ldr	r2, [pc, #176]	; (8004c3c <DMA_SetConfig+0x240>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d01d      	beq.n	8004bcc <DMA_SetConfig+0x1d0>
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a2a      	ldr	r2, [pc, #168]	; (8004c40 <DMA_SetConfig+0x244>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d018      	beq.n	8004bcc <DMA_SetConfig+0x1d0>
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a29      	ldr	r2, [pc, #164]	; (8004c44 <DMA_SetConfig+0x248>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d013      	beq.n	8004bcc <DMA_SetConfig+0x1d0>
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a27      	ldr	r2, [pc, #156]	; (8004c48 <DMA_SetConfig+0x24c>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d00e      	beq.n	8004bcc <DMA_SetConfig+0x1d0>
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a26      	ldr	r2, [pc, #152]	; (8004c4c <DMA_SetConfig+0x250>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d009      	beq.n	8004bcc <DMA_SetConfig+0x1d0>
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a24      	ldr	r2, [pc, #144]	; (8004c50 <DMA_SetConfig+0x254>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d004      	beq.n	8004bcc <DMA_SetConfig+0x1d0>
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a23      	ldr	r2, [pc, #140]	; (8004c54 <DMA_SetConfig+0x258>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d101      	bne.n	8004bd0 <DMA_SetConfig+0x1d4>
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e000      	b.n	8004bd2 <DMA_SetConfig+0x1d6>
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d059      	beq.n	8004c8a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bda:	f003 031f 	and.w	r3, r3, #31
 8004bde:	223f      	movs	r2, #63	; 0x3f
 8004be0:	409a      	lsls	r2, r3
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004bf4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	683a      	ldr	r2, [r7, #0]
 8004bfc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	2b40      	cmp	r3, #64	; 0x40
 8004c04:	d138      	bne.n	8004c78 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68ba      	ldr	r2, [r7, #8]
 8004c14:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004c16:	e086      	b.n	8004d26 <DMA_SetConfig+0x32a>
 8004c18:	40020010 	.word	0x40020010
 8004c1c:	40020028 	.word	0x40020028
 8004c20:	40020040 	.word	0x40020040
 8004c24:	40020058 	.word	0x40020058
 8004c28:	40020070 	.word	0x40020070
 8004c2c:	40020088 	.word	0x40020088
 8004c30:	400200a0 	.word	0x400200a0
 8004c34:	400200b8 	.word	0x400200b8
 8004c38:	40020410 	.word	0x40020410
 8004c3c:	40020428 	.word	0x40020428
 8004c40:	40020440 	.word	0x40020440
 8004c44:	40020458 	.word	0x40020458
 8004c48:	40020470 	.word	0x40020470
 8004c4c:	40020488 	.word	0x40020488
 8004c50:	400204a0 	.word	0x400204a0
 8004c54:	400204b8 	.word	0x400204b8
 8004c58:	58025408 	.word	0x58025408
 8004c5c:	5802541c 	.word	0x5802541c
 8004c60:	58025430 	.word	0x58025430
 8004c64:	58025444 	.word	0x58025444
 8004c68:	58025458 	.word	0x58025458
 8004c6c:	5802546c 	.word	0x5802546c
 8004c70:	58025480 	.word	0x58025480
 8004c74:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68ba      	ldr	r2, [r7, #8]
 8004c7e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	60da      	str	r2, [r3, #12]
}
 8004c88:	e04d      	b.n	8004d26 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a29      	ldr	r2, [pc, #164]	; (8004d34 <DMA_SetConfig+0x338>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d022      	beq.n	8004cda <DMA_SetConfig+0x2de>
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a27      	ldr	r2, [pc, #156]	; (8004d38 <DMA_SetConfig+0x33c>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d01d      	beq.n	8004cda <DMA_SetConfig+0x2de>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a26      	ldr	r2, [pc, #152]	; (8004d3c <DMA_SetConfig+0x340>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d018      	beq.n	8004cda <DMA_SetConfig+0x2de>
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a24      	ldr	r2, [pc, #144]	; (8004d40 <DMA_SetConfig+0x344>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d013      	beq.n	8004cda <DMA_SetConfig+0x2de>
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a23      	ldr	r2, [pc, #140]	; (8004d44 <DMA_SetConfig+0x348>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d00e      	beq.n	8004cda <DMA_SetConfig+0x2de>
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a21      	ldr	r2, [pc, #132]	; (8004d48 <DMA_SetConfig+0x34c>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d009      	beq.n	8004cda <DMA_SetConfig+0x2de>
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a20      	ldr	r2, [pc, #128]	; (8004d4c <DMA_SetConfig+0x350>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d004      	beq.n	8004cda <DMA_SetConfig+0x2de>
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a1e      	ldr	r2, [pc, #120]	; (8004d50 <DMA_SetConfig+0x354>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d101      	bne.n	8004cde <DMA_SetConfig+0x2e2>
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e000      	b.n	8004ce0 <DMA_SetConfig+0x2e4>
 8004cde:	2300      	movs	r3, #0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d020      	beq.n	8004d26 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ce8:	f003 031f 	and.w	r3, r3, #31
 8004cec:	2201      	movs	r2, #1
 8004cee:	409a      	lsls	r2, r3
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	683a      	ldr	r2, [r7, #0]
 8004cfa:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	2b40      	cmp	r3, #64	; 0x40
 8004d02:	d108      	bne.n	8004d16 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	68ba      	ldr	r2, [r7, #8]
 8004d12:	60da      	str	r2, [r3, #12]
}
 8004d14:	e007      	b.n	8004d26 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	68ba      	ldr	r2, [r7, #8]
 8004d1c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	60da      	str	r2, [r3, #12]
}
 8004d26:	bf00      	nop
 8004d28:	371c      	adds	r7, #28
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr
 8004d32:	bf00      	nop
 8004d34:	58025408 	.word	0x58025408
 8004d38:	5802541c 	.word	0x5802541c
 8004d3c:	58025430 	.word	0x58025430
 8004d40:	58025444 	.word	0x58025444
 8004d44:	58025458 	.word	0x58025458
 8004d48:	5802546c 	.word	0x5802546c
 8004d4c:	58025480 	.word	0x58025480
 8004d50:	58025494 	.word	0x58025494

08004d54 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b085      	sub	sp, #20
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a42      	ldr	r2, [pc, #264]	; (8004e6c <DMA_CalcBaseAndBitshift+0x118>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d04a      	beq.n	8004dfc <DMA_CalcBaseAndBitshift+0xa8>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a41      	ldr	r2, [pc, #260]	; (8004e70 <DMA_CalcBaseAndBitshift+0x11c>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d045      	beq.n	8004dfc <DMA_CalcBaseAndBitshift+0xa8>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a3f      	ldr	r2, [pc, #252]	; (8004e74 <DMA_CalcBaseAndBitshift+0x120>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d040      	beq.n	8004dfc <DMA_CalcBaseAndBitshift+0xa8>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a3e      	ldr	r2, [pc, #248]	; (8004e78 <DMA_CalcBaseAndBitshift+0x124>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d03b      	beq.n	8004dfc <DMA_CalcBaseAndBitshift+0xa8>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a3c      	ldr	r2, [pc, #240]	; (8004e7c <DMA_CalcBaseAndBitshift+0x128>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d036      	beq.n	8004dfc <DMA_CalcBaseAndBitshift+0xa8>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a3b      	ldr	r2, [pc, #236]	; (8004e80 <DMA_CalcBaseAndBitshift+0x12c>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d031      	beq.n	8004dfc <DMA_CalcBaseAndBitshift+0xa8>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a39      	ldr	r2, [pc, #228]	; (8004e84 <DMA_CalcBaseAndBitshift+0x130>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d02c      	beq.n	8004dfc <DMA_CalcBaseAndBitshift+0xa8>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a38      	ldr	r2, [pc, #224]	; (8004e88 <DMA_CalcBaseAndBitshift+0x134>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d027      	beq.n	8004dfc <DMA_CalcBaseAndBitshift+0xa8>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a36      	ldr	r2, [pc, #216]	; (8004e8c <DMA_CalcBaseAndBitshift+0x138>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d022      	beq.n	8004dfc <DMA_CalcBaseAndBitshift+0xa8>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a35      	ldr	r2, [pc, #212]	; (8004e90 <DMA_CalcBaseAndBitshift+0x13c>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d01d      	beq.n	8004dfc <DMA_CalcBaseAndBitshift+0xa8>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a33      	ldr	r2, [pc, #204]	; (8004e94 <DMA_CalcBaseAndBitshift+0x140>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d018      	beq.n	8004dfc <DMA_CalcBaseAndBitshift+0xa8>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a32      	ldr	r2, [pc, #200]	; (8004e98 <DMA_CalcBaseAndBitshift+0x144>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d013      	beq.n	8004dfc <DMA_CalcBaseAndBitshift+0xa8>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a30      	ldr	r2, [pc, #192]	; (8004e9c <DMA_CalcBaseAndBitshift+0x148>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d00e      	beq.n	8004dfc <DMA_CalcBaseAndBitshift+0xa8>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a2f      	ldr	r2, [pc, #188]	; (8004ea0 <DMA_CalcBaseAndBitshift+0x14c>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d009      	beq.n	8004dfc <DMA_CalcBaseAndBitshift+0xa8>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a2d      	ldr	r2, [pc, #180]	; (8004ea4 <DMA_CalcBaseAndBitshift+0x150>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d004      	beq.n	8004dfc <DMA_CalcBaseAndBitshift+0xa8>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a2c      	ldr	r2, [pc, #176]	; (8004ea8 <DMA_CalcBaseAndBitshift+0x154>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d101      	bne.n	8004e00 <DMA_CalcBaseAndBitshift+0xac>
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e000      	b.n	8004e02 <DMA_CalcBaseAndBitshift+0xae>
 8004e00:	2300      	movs	r3, #0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d024      	beq.n	8004e50 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	3b10      	subs	r3, #16
 8004e0e:	4a27      	ldr	r2, [pc, #156]	; (8004eac <DMA_CalcBaseAndBitshift+0x158>)
 8004e10:	fba2 2303 	umull	r2, r3, r2, r3
 8004e14:	091b      	lsrs	r3, r3, #4
 8004e16:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f003 0307 	and.w	r3, r3, #7
 8004e1e:	4a24      	ldr	r2, [pc, #144]	; (8004eb0 <DMA_CalcBaseAndBitshift+0x15c>)
 8004e20:	5cd3      	ldrb	r3, [r2, r3]
 8004e22:	461a      	mov	r2, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2b03      	cmp	r3, #3
 8004e2c:	d908      	bls.n	8004e40 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	461a      	mov	r2, r3
 8004e34:	4b1f      	ldr	r3, [pc, #124]	; (8004eb4 <DMA_CalcBaseAndBitshift+0x160>)
 8004e36:	4013      	ands	r3, r2
 8004e38:	1d1a      	adds	r2, r3, #4
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	659a      	str	r2, [r3, #88]	; 0x58
 8004e3e:	e00d      	b.n	8004e5c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	461a      	mov	r2, r3
 8004e46:	4b1b      	ldr	r3, [pc, #108]	; (8004eb4 <DMA_CalcBaseAndBitshift+0x160>)
 8004e48:	4013      	ands	r3, r2
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	6593      	str	r3, [r2, #88]	; 0x58
 8004e4e:	e005      	b.n	8004e5c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3714      	adds	r7, #20
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr
 8004e6c:	40020010 	.word	0x40020010
 8004e70:	40020028 	.word	0x40020028
 8004e74:	40020040 	.word	0x40020040
 8004e78:	40020058 	.word	0x40020058
 8004e7c:	40020070 	.word	0x40020070
 8004e80:	40020088 	.word	0x40020088
 8004e84:	400200a0 	.word	0x400200a0
 8004e88:	400200b8 	.word	0x400200b8
 8004e8c:	40020410 	.word	0x40020410
 8004e90:	40020428 	.word	0x40020428
 8004e94:	40020440 	.word	0x40020440
 8004e98:	40020458 	.word	0x40020458
 8004e9c:	40020470 	.word	0x40020470
 8004ea0:	40020488 	.word	0x40020488
 8004ea4:	400204a0 	.word	0x400204a0
 8004ea8:	400204b8 	.word	0x400204b8
 8004eac:	aaaaaaab 	.word	0xaaaaaaab
 8004eb0:	08013a70 	.word	0x08013a70
 8004eb4:	fffffc00 	.word	0xfffffc00

08004eb8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b085      	sub	sp, #20
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	699b      	ldr	r3, [r3, #24]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d120      	bne.n	8004f0e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed0:	2b03      	cmp	r3, #3
 8004ed2:	d858      	bhi.n	8004f86 <DMA_CheckFifoParam+0xce>
 8004ed4:	a201      	add	r2, pc, #4	; (adr r2, 8004edc <DMA_CheckFifoParam+0x24>)
 8004ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eda:	bf00      	nop
 8004edc:	08004eed 	.word	0x08004eed
 8004ee0:	08004eff 	.word	0x08004eff
 8004ee4:	08004eed 	.word	0x08004eed
 8004ee8:	08004f87 	.word	0x08004f87
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d048      	beq.n	8004f8a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004efc:	e045      	b.n	8004f8a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f02:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f06:	d142      	bne.n	8004f8e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004f0c:	e03f      	b.n	8004f8e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	699b      	ldr	r3, [r3, #24]
 8004f12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f16:	d123      	bne.n	8004f60 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f1c:	2b03      	cmp	r3, #3
 8004f1e:	d838      	bhi.n	8004f92 <DMA_CheckFifoParam+0xda>
 8004f20:	a201      	add	r2, pc, #4	; (adr r2, 8004f28 <DMA_CheckFifoParam+0x70>)
 8004f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f26:	bf00      	nop
 8004f28:	08004f39 	.word	0x08004f39
 8004f2c:	08004f3f 	.word	0x08004f3f
 8004f30:	08004f39 	.word	0x08004f39
 8004f34:	08004f51 	.word	0x08004f51
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	73fb      	strb	r3, [r7, #15]
        break;
 8004f3c:	e030      	b.n	8004fa0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d025      	beq.n	8004f96 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004f4e:	e022      	b.n	8004f96 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f54:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f58:	d11f      	bne.n	8004f9a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004f5e:	e01c      	b.n	8004f9a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d902      	bls.n	8004f6e <DMA_CheckFifoParam+0xb6>
 8004f68:	2b03      	cmp	r3, #3
 8004f6a:	d003      	beq.n	8004f74 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004f6c:	e018      	b.n	8004fa0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	73fb      	strb	r3, [r7, #15]
        break;
 8004f72:	e015      	b.n	8004fa0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d00e      	beq.n	8004f9e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	73fb      	strb	r3, [r7, #15]
    break;
 8004f84:	e00b      	b.n	8004f9e <DMA_CheckFifoParam+0xe6>
        break;
 8004f86:	bf00      	nop
 8004f88:	e00a      	b.n	8004fa0 <DMA_CheckFifoParam+0xe8>
        break;
 8004f8a:	bf00      	nop
 8004f8c:	e008      	b.n	8004fa0 <DMA_CheckFifoParam+0xe8>
        break;
 8004f8e:	bf00      	nop
 8004f90:	e006      	b.n	8004fa0 <DMA_CheckFifoParam+0xe8>
        break;
 8004f92:	bf00      	nop
 8004f94:	e004      	b.n	8004fa0 <DMA_CheckFifoParam+0xe8>
        break;
 8004f96:	bf00      	nop
 8004f98:	e002      	b.n	8004fa0 <DMA_CheckFifoParam+0xe8>
        break;
 8004f9a:	bf00      	nop
 8004f9c:	e000      	b.n	8004fa0 <DMA_CheckFifoParam+0xe8>
    break;
 8004f9e:	bf00      	nop
    }
  }

  return status;
 8004fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3714      	adds	r7, #20
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr
 8004fae:	bf00      	nop

08004fb0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b085      	sub	sp, #20
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a38      	ldr	r2, [pc, #224]	; (80050a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d022      	beq.n	800500e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a36      	ldr	r2, [pc, #216]	; (80050a8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d01d      	beq.n	800500e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a35      	ldr	r2, [pc, #212]	; (80050ac <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d018      	beq.n	800500e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a33      	ldr	r2, [pc, #204]	; (80050b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d013      	beq.n	800500e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a32      	ldr	r2, [pc, #200]	; (80050b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d00e      	beq.n	800500e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a30      	ldr	r2, [pc, #192]	; (80050b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d009      	beq.n	800500e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a2f      	ldr	r2, [pc, #188]	; (80050bc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d004      	beq.n	800500e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a2d      	ldr	r2, [pc, #180]	; (80050c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d101      	bne.n	8005012 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800500e:	2301      	movs	r3, #1
 8005010:	e000      	b.n	8005014 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005012:	2300      	movs	r3, #0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d01a      	beq.n	800504e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	b2db      	uxtb	r3, r3
 800501e:	3b08      	subs	r3, #8
 8005020:	4a28      	ldr	r2, [pc, #160]	; (80050c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005022:	fba2 2303 	umull	r2, r3, r2, r3
 8005026:	091b      	lsrs	r3, r3, #4
 8005028:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800502a:	68fa      	ldr	r2, [r7, #12]
 800502c:	4b26      	ldr	r3, [pc, #152]	; (80050c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800502e:	4413      	add	r3, r2
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	461a      	mov	r2, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	4a24      	ldr	r2, [pc, #144]	; (80050cc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800503c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f003 031f 	and.w	r3, r3, #31
 8005044:	2201      	movs	r2, #1
 8005046:	409a      	lsls	r2, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800504c:	e024      	b.n	8005098 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	b2db      	uxtb	r3, r3
 8005054:	3b10      	subs	r3, #16
 8005056:	4a1e      	ldr	r2, [pc, #120]	; (80050d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005058:	fba2 2303 	umull	r2, r3, r2, r3
 800505c:	091b      	lsrs	r3, r3, #4
 800505e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	4a1c      	ldr	r2, [pc, #112]	; (80050d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d806      	bhi.n	8005076 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	4a1b      	ldr	r2, [pc, #108]	; (80050d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d902      	bls.n	8005076 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	3308      	adds	r3, #8
 8005074:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005076:	68fa      	ldr	r2, [r7, #12]
 8005078:	4b18      	ldr	r3, [pc, #96]	; (80050dc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800507a:	4413      	add	r3, r2
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	461a      	mov	r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4a16      	ldr	r2, [pc, #88]	; (80050e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005088:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f003 031f 	and.w	r3, r3, #31
 8005090:	2201      	movs	r2, #1
 8005092:	409a      	lsls	r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005098:	bf00      	nop
 800509a:	3714      	adds	r7, #20
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr
 80050a4:	58025408 	.word	0x58025408
 80050a8:	5802541c 	.word	0x5802541c
 80050ac:	58025430 	.word	0x58025430
 80050b0:	58025444 	.word	0x58025444
 80050b4:	58025458 	.word	0x58025458
 80050b8:	5802546c 	.word	0x5802546c
 80050bc:	58025480 	.word	0x58025480
 80050c0:	58025494 	.word	0x58025494
 80050c4:	cccccccd 	.word	0xcccccccd
 80050c8:	16009600 	.word	0x16009600
 80050cc:	58025880 	.word	0x58025880
 80050d0:	aaaaaaab 	.word	0xaaaaaaab
 80050d4:	400204b8 	.word	0x400204b8
 80050d8:	4002040f 	.word	0x4002040f
 80050dc:	10008200 	.word	0x10008200
 80050e0:	40020880 	.word	0x40020880

080050e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b085      	sub	sp, #20
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d04a      	beq.n	8005190 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2b08      	cmp	r3, #8
 80050fe:	d847      	bhi.n	8005190 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a25      	ldr	r2, [pc, #148]	; (800519c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d022      	beq.n	8005150 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a24      	ldr	r2, [pc, #144]	; (80051a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d01d      	beq.n	8005150 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a22      	ldr	r2, [pc, #136]	; (80051a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d018      	beq.n	8005150 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a21      	ldr	r2, [pc, #132]	; (80051a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d013      	beq.n	8005150 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a1f      	ldr	r2, [pc, #124]	; (80051ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d00e      	beq.n	8005150 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a1e      	ldr	r2, [pc, #120]	; (80051b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d009      	beq.n	8005150 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a1c      	ldr	r2, [pc, #112]	; (80051b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d004      	beq.n	8005150 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a1b      	ldr	r2, [pc, #108]	; (80051b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d101      	bne.n	8005154 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005150:	2301      	movs	r3, #1
 8005152:	e000      	b.n	8005156 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005154:	2300      	movs	r3, #0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00a      	beq.n	8005170 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800515a:	68fa      	ldr	r2, [r7, #12]
 800515c:	4b17      	ldr	r3, [pc, #92]	; (80051bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800515e:	4413      	add	r3, r2
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	461a      	mov	r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4a15      	ldr	r2, [pc, #84]	; (80051c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800516c:	671a      	str	r2, [r3, #112]	; 0x70
 800516e:	e009      	b.n	8005184 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005170:	68fa      	ldr	r2, [r7, #12]
 8005172:	4b14      	ldr	r3, [pc, #80]	; (80051c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005174:	4413      	add	r3, r2
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	461a      	mov	r2, r3
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a11      	ldr	r2, [pc, #68]	; (80051c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005182:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	3b01      	subs	r3, #1
 8005188:	2201      	movs	r2, #1
 800518a:	409a      	lsls	r2, r3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005190:	bf00      	nop
 8005192:	3714      	adds	r7, #20
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr
 800519c:	58025408 	.word	0x58025408
 80051a0:	5802541c 	.word	0x5802541c
 80051a4:	58025430 	.word	0x58025430
 80051a8:	58025444 	.word	0x58025444
 80051ac:	58025458 	.word	0x58025458
 80051b0:	5802546c 	.word	0x5802546c
 80051b4:	58025480 	.word	0x58025480
 80051b8:	58025494 	.word	0x58025494
 80051bc:	1600963f 	.word	0x1600963f
 80051c0:	58025940 	.word	0x58025940
 80051c4:	1000823f 	.word	0x1000823f
 80051c8:	40020940 	.word	0x40020940

080051cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b089      	sub	sp, #36	; 0x24
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80051d6:	2300      	movs	r3, #0
 80051d8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80051da:	4b89      	ldr	r3, [pc, #548]	; (8005400 <HAL_GPIO_Init+0x234>)
 80051dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80051de:	e194      	b.n	800550a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	2101      	movs	r1, #1
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	fa01 f303 	lsl.w	r3, r1, r3
 80051ec:	4013      	ands	r3, r2
 80051ee:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	f000 8186 	beq.w	8005504 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d00b      	beq.n	8005218 <HAL_GPIO_Init+0x4c>
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	2b02      	cmp	r3, #2
 8005206:	d007      	beq.n	8005218 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800520c:	2b11      	cmp	r3, #17
 800520e:	d003      	beq.n	8005218 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	2b12      	cmp	r3, #18
 8005216:	d130      	bne.n	800527a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	005b      	lsls	r3, r3, #1
 8005222:	2203      	movs	r2, #3
 8005224:	fa02 f303 	lsl.w	r3, r2, r3
 8005228:	43db      	mvns	r3, r3
 800522a:	69ba      	ldr	r2, [r7, #24]
 800522c:	4013      	ands	r3, r2
 800522e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	68da      	ldr	r2, [r3, #12]
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	005b      	lsls	r3, r3, #1
 8005238:	fa02 f303 	lsl.w	r3, r2, r3
 800523c:	69ba      	ldr	r2, [r7, #24]
 800523e:	4313      	orrs	r3, r2
 8005240:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	69ba      	ldr	r2, [r7, #24]
 8005246:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800524e:	2201      	movs	r2, #1
 8005250:	69fb      	ldr	r3, [r7, #28]
 8005252:	fa02 f303 	lsl.w	r3, r2, r3
 8005256:	43db      	mvns	r3, r3
 8005258:	69ba      	ldr	r2, [r7, #24]
 800525a:	4013      	ands	r3, r2
 800525c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	091b      	lsrs	r3, r3, #4
 8005264:	f003 0201 	and.w	r2, r3, #1
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	fa02 f303 	lsl.w	r3, r2, r3
 800526e:	69ba      	ldr	r2, [r7, #24]
 8005270:	4313      	orrs	r3, r2
 8005272:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	69ba      	ldr	r2, [r7, #24]
 8005278:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	005b      	lsls	r3, r3, #1
 8005284:	2203      	movs	r2, #3
 8005286:	fa02 f303 	lsl.w	r3, r2, r3
 800528a:	43db      	mvns	r3, r3
 800528c:	69ba      	ldr	r2, [r7, #24]
 800528e:	4013      	ands	r3, r2
 8005290:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	689a      	ldr	r2, [r3, #8]
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	005b      	lsls	r3, r3, #1
 800529a:	fa02 f303 	lsl.w	r3, r2, r3
 800529e:	69ba      	ldr	r2, [r7, #24]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	69ba      	ldr	r2, [r7, #24]
 80052a8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	2b02      	cmp	r3, #2
 80052b0:	d003      	beq.n	80052ba <HAL_GPIO_Init+0xee>
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	2b12      	cmp	r3, #18
 80052b8:	d123      	bne.n	8005302 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80052ba:	69fb      	ldr	r3, [r7, #28]
 80052bc:	08da      	lsrs	r2, r3, #3
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	3208      	adds	r2, #8
 80052c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	f003 0307 	and.w	r3, r3, #7
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	220f      	movs	r2, #15
 80052d2:	fa02 f303 	lsl.w	r3, r2, r3
 80052d6:	43db      	mvns	r3, r3
 80052d8:	69ba      	ldr	r2, [r7, #24]
 80052da:	4013      	ands	r3, r2
 80052dc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	691a      	ldr	r2, [r3, #16]
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	f003 0307 	and.w	r3, r3, #7
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	fa02 f303 	lsl.w	r3, r2, r3
 80052ee:	69ba      	ldr	r2, [r7, #24]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80052f4:	69fb      	ldr	r3, [r7, #28]
 80052f6:	08da      	lsrs	r2, r3, #3
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	3208      	adds	r2, #8
 80052fc:	69b9      	ldr	r1, [r7, #24]
 80052fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005308:	69fb      	ldr	r3, [r7, #28]
 800530a:	005b      	lsls	r3, r3, #1
 800530c:	2203      	movs	r2, #3
 800530e:	fa02 f303 	lsl.w	r3, r2, r3
 8005312:	43db      	mvns	r3, r3
 8005314:	69ba      	ldr	r2, [r7, #24]
 8005316:	4013      	ands	r3, r2
 8005318:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	f003 0203 	and.w	r2, r3, #3
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	005b      	lsls	r3, r3, #1
 8005326:	fa02 f303 	lsl.w	r3, r2, r3
 800532a:	69ba      	ldr	r2, [r7, #24]
 800532c:	4313      	orrs	r3, r2
 800532e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	69ba      	ldr	r2, [r7, #24]
 8005334:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800533e:	2b00      	cmp	r3, #0
 8005340:	f000 80e0 	beq.w	8005504 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005344:	4b2f      	ldr	r3, [pc, #188]	; (8005404 <HAL_GPIO_Init+0x238>)
 8005346:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800534a:	4a2e      	ldr	r2, [pc, #184]	; (8005404 <HAL_GPIO_Init+0x238>)
 800534c:	f043 0302 	orr.w	r3, r3, #2
 8005350:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005354:	4b2b      	ldr	r3, [pc, #172]	; (8005404 <HAL_GPIO_Init+0x238>)
 8005356:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800535a:	f003 0302 	and.w	r3, r3, #2
 800535e:	60fb      	str	r3, [r7, #12]
 8005360:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005362:	4a29      	ldr	r2, [pc, #164]	; (8005408 <HAL_GPIO_Init+0x23c>)
 8005364:	69fb      	ldr	r3, [r7, #28]
 8005366:	089b      	lsrs	r3, r3, #2
 8005368:	3302      	adds	r3, #2
 800536a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800536e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	f003 0303 	and.w	r3, r3, #3
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	220f      	movs	r2, #15
 800537a:	fa02 f303 	lsl.w	r3, r2, r3
 800537e:	43db      	mvns	r3, r3
 8005380:	69ba      	ldr	r2, [r7, #24]
 8005382:	4013      	ands	r3, r2
 8005384:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a20      	ldr	r2, [pc, #128]	; (800540c <HAL_GPIO_Init+0x240>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d052      	beq.n	8005434 <HAL_GPIO_Init+0x268>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a1f      	ldr	r2, [pc, #124]	; (8005410 <HAL_GPIO_Init+0x244>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d031      	beq.n	80053fa <HAL_GPIO_Init+0x22e>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a1e      	ldr	r2, [pc, #120]	; (8005414 <HAL_GPIO_Init+0x248>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d02b      	beq.n	80053f6 <HAL_GPIO_Init+0x22a>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a1d      	ldr	r2, [pc, #116]	; (8005418 <HAL_GPIO_Init+0x24c>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d025      	beq.n	80053f2 <HAL_GPIO_Init+0x226>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a1c      	ldr	r2, [pc, #112]	; (800541c <HAL_GPIO_Init+0x250>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d01f      	beq.n	80053ee <HAL_GPIO_Init+0x222>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a1b      	ldr	r2, [pc, #108]	; (8005420 <HAL_GPIO_Init+0x254>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d019      	beq.n	80053ea <HAL_GPIO_Init+0x21e>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a1a      	ldr	r2, [pc, #104]	; (8005424 <HAL_GPIO_Init+0x258>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d013      	beq.n	80053e6 <HAL_GPIO_Init+0x21a>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a19      	ldr	r2, [pc, #100]	; (8005428 <HAL_GPIO_Init+0x25c>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d00d      	beq.n	80053e2 <HAL_GPIO_Init+0x216>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a18      	ldr	r2, [pc, #96]	; (800542c <HAL_GPIO_Init+0x260>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d007      	beq.n	80053de <HAL_GPIO_Init+0x212>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a17      	ldr	r2, [pc, #92]	; (8005430 <HAL_GPIO_Init+0x264>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d101      	bne.n	80053da <HAL_GPIO_Init+0x20e>
 80053d6:	2309      	movs	r3, #9
 80053d8:	e02d      	b.n	8005436 <HAL_GPIO_Init+0x26a>
 80053da:	230a      	movs	r3, #10
 80053dc:	e02b      	b.n	8005436 <HAL_GPIO_Init+0x26a>
 80053de:	2308      	movs	r3, #8
 80053e0:	e029      	b.n	8005436 <HAL_GPIO_Init+0x26a>
 80053e2:	2307      	movs	r3, #7
 80053e4:	e027      	b.n	8005436 <HAL_GPIO_Init+0x26a>
 80053e6:	2306      	movs	r3, #6
 80053e8:	e025      	b.n	8005436 <HAL_GPIO_Init+0x26a>
 80053ea:	2305      	movs	r3, #5
 80053ec:	e023      	b.n	8005436 <HAL_GPIO_Init+0x26a>
 80053ee:	2304      	movs	r3, #4
 80053f0:	e021      	b.n	8005436 <HAL_GPIO_Init+0x26a>
 80053f2:	2303      	movs	r3, #3
 80053f4:	e01f      	b.n	8005436 <HAL_GPIO_Init+0x26a>
 80053f6:	2302      	movs	r3, #2
 80053f8:	e01d      	b.n	8005436 <HAL_GPIO_Init+0x26a>
 80053fa:	2301      	movs	r3, #1
 80053fc:	e01b      	b.n	8005436 <HAL_GPIO_Init+0x26a>
 80053fe:	bf00      	nop
 8005400:	58000080 	.word	0x58000080
 8005404:	58024400 	.word	0x58024400
 8005408:	58000400 	.word	0x58000400
 800540c:	58020000 	.word	0x58020000
 8005410:	58020400 	.word	0x58020400
 8005414:	58020800 	.word	0x58020800
 8005418:	58020c00 	.word	0x58020c00
 800541c:	58021000 	.word	0x58021000
 8005420:	58021400 	.word	0x58021400
 8005424:	58021800 	.word	0x58021800
 8005428:	58021c00 	.word	0x58021c00
 800542c:	58022000 	.word	0x58022000
 8005430:	58022400 	.word	0x58022400
 8005434:	2300      	movs	r3, #0
 8005436:	69fa      	ldr	r2, [r7, #28]
 8005438:	f002 0203 	and.w	r2, r2, #3
 800543c:	0092      	lsls	r2, r2, #2
 800543e:	4093      	lsls	r3, r2
 8005440:	69ba      	ldr	r2, [r7, #24]
 8005442:	4313      	orrs	r3, r2
 8005444:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005446:	4938      	ldr	r1, [pc, #224]	; (8005528 <HAL_GPIO_Init+0x35c>)
 8005448:	69fb      	ldr	r3, [r7, #28]
 800544a:	089b      	lsrs	r3, r3, #2
 800544c:	3302      	adds	r3, #2
 800544e:	69ba      	ldr	r2, [r7, #24]
 8005450:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	43db      	mvns	r3, r3
 800545e:	69ba      	ldr	r2, [r7, #24]
 8005460:	4013      	ands	r3, r2
 8005462:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800546c:	2b00      	cmp	r3, #0
 800546e:	d003      	beq.n	8005478 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005470:	69ba      	ldr	r2, [r7, #24]
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	4313      	orrs	r3, r2
 8005476:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	69ba      	ldr	r2, [r7, #24]
 800547c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	43db      	mvns	r3, r3
 8005488:	69ba      	ldr	r2, [r7, #24]
 800548a:	4013      	ands	r3, r2
 800548c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005496:	2b00      	cmp	r3, #0
 8005498:	d003      	beq.n	80054a2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800549a:	69ba      	ldr	r2, [r7, #24]
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	4313      	orrs	r3, r2
 80054a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	69ba      	ldr	r2, [r7, #24]
 80054a6:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80054a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	43db      	mvns	r3, r3
 80054b4:	69ba      	ldr	r2, [r7, #24]
 80054b6:	4013      	ands	r3, r2
 80054b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d003      	beq.n	80054ce <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80054c6:	69ba      	ldr	r2, [r7, #24]
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80054ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80054d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	43db      	mvns	r3, r3
 80054e2:	69ba      	ldr	r2, [r7, #24]
 80054e4:	4013      	ands	r3, r2
 80054e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d003      	beq.n	80054fc <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80054f4:	69ba      	ldr	r2, [r7, #24]
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80054fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005500:	69bb      	ldr	r3, [r7, #24]
 8005502:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	3301      	adds	r3, #1
 8005508:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	fa22 f303 	lsr.w	r3, r2, r3
 8005514:	2b00      	cmp	r3, #0
 8005516:	f47f ae63 	bne.w	80051e0 <HAL_GPIO_Init+0x14>
  }
}
 800551a:	bf00      	nop
 800551c:	bf00      	nop
 800551e:	3724      	adds	r7, #36	; 0x24
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr
 8005528:	58000400 	.word	0x58000400

0800552c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	460b      	mov	r3, r1
 8005536:	807b      	strh	r3, [r7, #2]
 8005538:	4613      	mov	r3, r2
 800553a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800553c:	787b      	ldrb	r3, [r7, #1]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d003      	beq.n	800554a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005542:	887a      	ldrh	r2, [r7, #2]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005548:	e003      	b.n	8005552 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800554a:	887b      	ldrh	r3, [r7, #2]
 800554c:	041a      	lsls	r2, r3, #16
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	619a      	str	r2, [r3, #24]
}
 8005552:	bf00      	nop
 8005554:	370c      	adds	r7, #12
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr
	...

08005560 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8005568:	4a08      	ldr	r2, [pc, #32]	; (800558c <HAL_HSEM_FastTake+0x2c>)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	3320      	adds	r3, #32
 800556e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005572:	4a07      	ldr	r2, [pc, #28]	; (8005590 <HAL_HSEM_FastTake+0x30>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d101      	bne.n	800557c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8005578:	2300      	movs	r3, #0
 800557a:	e000      	b.n	800557e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800557c:	2301      	movs	r3, #1
}
 800557e:	4618      	mov	r0, r3
 8005580:	370c      	adds	r7, #12
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr
 800558a:	bf00      	nop
 800558c:	58026400 	.word	0x58026400
 8005590:	80000300 	.word	0x80000300

08005594 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800559e:	4906      	ldr	r1, [pc, #24]	; (80055b8 <HAL_HSEM_Release+0x24>)
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80055ac:	bf00      	nop
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr
 80055b8:	58026400 	.word	0x58026400

080055bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b082      	sub	sp, #8
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d101      	bne.n	80055ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e07f      	b.n	80056ce <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d106      	bne.n	80055e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f7fb fcc8 	bl	8000f78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2224      	movs	r2, #36	; 0x24
 80055ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f022 0201 	bic.w	r2, r2, #1
 80055fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	685a      	ldr	r2, [r3, #4]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800560c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	689a      	ldr	r2, [r3, #8]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800561c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	2b01      	cmp	r3, #1
 8005624:	d107      	bne.n	8005636 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	689a      	ldr	r2, [r3, #8]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005632:	609a      	str	r2, [r3, #8]
 8005634:	e006      	b.n	8005644 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	689a      	ldr	r2, [r3, #8]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005642:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	2b02      	cmp	r3, #2
 800564a:	d104      	bne.n	8005656 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005654:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	6859      	ldr	r1, [r3, #4]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	4b1d      	ldr	r3, [pc, #116]	; (80056d8 <HAL_I2C_Init+0x11c>)
 8005662:	430b      	orrs	r3, r1
 8005664:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68da      	ldr	r2, [r3, #12]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005674:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	691a      	ldr	r2, [r3, #16]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	695b      	ldr	r3, [r3, #20]
 800567e:	ea42 0103 	orr.w	r1, r2, r3
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	699b      	ldr	r3, [r3, #24]
 8005686:	021a      	lsls	r2, r3, #8
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	430a      	orrs	r2, r1
 800568e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	69d9      	ldr	r1, [r3, #28]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6a1a      	ldr	r2, [r3, #32]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	430a      	orrs	r2, r1
 800569e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f042 0201 	orr.w	r2, r2, #1
 80056ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2220      	movs	r2, #32
 80056ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3708      	adds	r7, #8
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	02008000 	.word	0x02008000

080056dc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	699b      	ldr	r3, [r3, #24]
 80056ea:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d005      	beq.n	8005708 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005700:	68ba      	ldr	r2, [r7, #8]
 8005702:	68f9      	ldr	r1, [r7, #12]
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	4798      	blx	r3
  }
}
 8005708:	bf00      	nop
 800570a:	3710      	adds	r7, #16
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}

08005710 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b086      	sub	sp, #24
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	699b      	ldr	r3, [r3, #24]
 800571e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	0a1b      	lsrs	r3, r3, #8
 800572c:	f003 0301 	and.w	r3, r3, #1
 8005730:	2b00      	cmp	r3, #0
 8005732:	d010      	beq.n	8005756 <HAL_I2C_ER_IRQHandler+0x46>
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	09db      	lsrs	r3, r3, #7
 8005738:	f003 0301 	and.w	r3, r3, #1
 800573c:	2b00      	cmp	r3, #0
 800573e:	d00a      	beq.n	8005756 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005744:	f043 0201 	orr.w	r2, r3, #1
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005754:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	0a9b      	lsrs	r3, r3, #10
 800575a:	f003 0301 	and.w	r3, r3, #1
 800575e:	2b00      	cmp	r3, #0
 8005760:	d010      	beq.n	8005784 <HAL_I2C_ER_IRQHandler+0x74>
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	09db      	lsrs	r3, r3, #7
 8005766:	f003 0301 	and.w	r3, r3, #1
 800576a:	2b00      	cmp	r3, #0
 800576c:	d00a      	beq.n	8005784 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005772:	f043 0208 	orr.w	r2, r3, #8
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005782:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	0a5b      	lsrs	r3, r3, #9
 8005788:	f003 0301 	and.w	r3, r3, #1
 800578c:	2b00      	cmp	r3, #0
 800578e:	d010      	beq.n	80057b2 <HAL_I2C_ER_IRQHandler+0xa2>
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	09db      	lsrs	r3, r3, #7
 8005794:	f003 0301 	and.w	r3, r3, #1
 8005798:	2b00      	cmp	r3, #0
 800579a:	d00a      	beq.n	80057b2 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057a0:	f043 0202 	orr.w	r2, r3, #2
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057b0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057b6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f003 030b 	and.w	r3, r3, #11
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d003      	beq.n	80057ca <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80057c2:	68f9      	ldr	r1, [r7, #12]
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f000 fc77 	bl	80060b8 <I2C_ITError>
  }
}
 80057ca:	bf00      	nop
 80057cc:	3718      	adds	r7, #24
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}

080057d2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80057d2:	b480      	push	{r7}
 80057d4:	b083      	sub	sp, #12
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80057da:	bf00      	nop
 80057dc:	370c      	adds	r7, #12
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr

080057e6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80057e6:	b480      	push	{r7}
 80057e8:	b083      	sub	sp, #12
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80057ee:	bf00      	nop
 80057f0:	370c      	adds	r7, #12
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr

080057fa <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80057fa:	b480      	push	{r7}
 80057fc:	b083      	sub	sp, #12
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
 8005802:	460b      	mov	r3, r1
 8005804:	70fb      	strb	r3, [r7, #3]
 8005806:	4613      	mov	r3, r2
 8005808:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800580a:	bf00      	nop
 800580c:	370c      	adds	r7, #12
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr

08005816 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005816:	b480      	push	{r7}
 8005818:	b083      	sub	sp, #12
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800581e:	bf00      	nop
 8005820:	370c      	adds	r7, #12
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr

0800582a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800582a:	b480      	push	{r7}
 800582c:	b083      	sub	sp, #12
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005832:	bf00      	nop
 8005834:	370c      	adds	r7, #12
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr

0800583e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800583e:	b480      	push	{r7}
 8005840:	b083      	sub	sp, #12
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005846:	bf00      	nop
 8005848:	370c      	adds	r7, #12
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr

08005852 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8005852:	b580      	push	{r7, lr}
 8005854:	b086      	sub	sp, #24
 8005856:	af00      	add	r7, sp, #0
 8005858:	60f8      	str	r0, [r7, #12]
 800585a:	60b9      	str	r1, [r7, #8]
 800585c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005862:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800586e:	2b01      	cmp	r3, #1
 8005870:	d101      	bne.n	8005876 <I2C_Slave_ISR_IT+0x24>
 8005872:	2302      	movs	r3, #2
 8005874:	e0ec      	b.n	8005a50 <I2C_Slave_ISR_IT+0x1fe>
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2201      	movs	r2, #1
 800587a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	095b      	lsrs	r3, r3, #5
 8005882:	f003 0301 	and.w	r3, r3, #1
 8005886:	2b00      	cmp	r3, #0
 8005888:	d009      	beq.n	800589e <I2C_Slave_ISR_IT+0x4c>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	095b      	lsrs	r3, r3, #5
 800588e:	f003 0301 	and.w	r3, r3, #1
 8005892:	2b00      	cmp	r3, #0
 8005894:	d003      	beq.n	800589e <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005896:	6939      	ldr	r1, [r7, #16]
 8005898:	68f8      	ldr	r0, [r7, #12]
 800589a:	f000 f9bf 	bl	8005c1c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	091b      	lsrs	r3, r3, #4
 80058a2:	f003 0301 	and.w	r3, r3, #1
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d04d      	beq.n	8005946 <I2C_Slave_ISR_IT+0xf4>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	091b      	lsrs	r3, r3, #4
 80058ae:	f003 0301 	and.w	r3, r3, #1
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d047      	beq.n	8005946 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d128      	bne.n	8005912 <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	2b28      	cmp	r3, #40	; 0x28
 80058ca:	d108      	bne.n	80058de <I2C_Slave_ISR_IT+0x8c>
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80058d2:	d104      	bne.n	80058de <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80058d4:	6939      	ldr	r1, [r7, #16]
 80058d6:	68f8      	ldr	r0, [r7, #12]
 80058d8:	f000 fb98 	bl	800600c <I2C_ITListenCplt>
 80058dc:	e032      	b.n	8005944 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	2b29      	cmp	r3, #41	; 0x29
 80058e8:	d10e      	bne.n	8005908 <I2C_Slave_ISR_IT+0xb6>
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80058f0:	d00a      	beq.n	8005908 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	2210      	movs	r2, #16
 80058f8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80058fa:	68f8      	ldr	r0, [r7, #12]
 80058fc:	f000 fcd3 	bl	80062a6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005900:	68f8      	ldr	r0, [r7, #12]
 8005902:	f000 f92d 	bl	8005b60 <I2C_ITSlaveSeqCplt>
 8005906:	e01d      	b.n	8005944 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2210      	movs	r2, #16
 800590e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005910:	e096      	b.n	8005a40 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	2210      	movs	r2, #16
 8005918:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800591e:	f043 0204 	orr.w	r2, r3, #4
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d004      	beq.n	8005936 <I2C_Slave_ISR_IT+0xe4>
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005932:	f040 8085 	bne.w	8005a40 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800593a:	4619      	mov	r1, r3
 800593c:	68f8      	ldr	r0, [r7, #12]
 800593e:	f000 fbbb 	bl	80060b8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005942:	e07d      	b.n	8005a40 <I2C_Slave_ISR_IT+0x1ee>
 8005944:	e07c      	b.n	8005a40 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	089b      	lsrs	r3, r3, #2
 800594a:	f003 0301 	and.w	r3, r3, #1
 800594e:	2b00      	cmp	r3, #0
 8005950:	d030      	beq.n	80059b4 <I2C_Slave_ISR_IT+0x162>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	089b      	lsrs	r3, r3, #2
 8005956:	f003 0301 	and.w	r3, r3, #1
 800595a:	2b00      	cmp	r3, #0
 800595c:	d02a      	beq.n	80059b4 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005962:	b29b      	uxth	r3, r3
 8005964:	2b00      	cmp	r3, #0
 8005966:	d018      	beq.n	800599a <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005972:	b2d2      	uxtb	r2, r2
 8005974:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597a:	1c5a      	adds	r2, r3, #1
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005984:	3b01      	subs	r3, #1
 8005986:	b29a      	uxth	r2, r3
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005990:	b29b      	uxth	r3, r3
 8005992:	3b01      	subs	r3, #1
 8005994:	b29a      	uxth	r2, r3
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800599e:	b29b      	uxth	r3, r3
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d14f      	bne.n	8005a44 <I2C_Slave_ISR_IT+0x1f2>
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80059aa:	d04b      	beq.n	8005a44 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80059ac:	68f8      	ldr	r0, [r7, #12]
 80059ae:	f000 f8d7 	bl	8005b60 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80059b2:	e047      	b.n	8005a44 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	08db      	lsrs	r3, r3, #3
 80059b8:	f003 0301 	and.w	r3, r3, #1
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d00a      	beq.n	80059d6 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	08db      	lsrs	r3, r3, #3
 80059c4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d004      	beq.n	80059d6 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80059cc:	6939      	ldr	r1, [r7, #16]
 80059ce:	68f8      	ldr	r0, [r7, #12]
 80059d0:	f000 f842 	bl	8005a58 <I2C_ITAddrCplt>
 80059d4:	e037      	b.n	8005a46 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	085b      	lsrs	r3, r3, #1
 80059da:	f003 0301 	and.w	r3, r3, #1
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d031      	beq.n	8005a46 <I2C_Slave_ISR_IT+0x1f4>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	085b      	lsrs	r3, r3, #1
 80059e6:	f003 0301 	and.w	r3, r3, #1
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d02b      	beq.n	8005a46 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d018      	beq.n	8005a2a <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059fc:	781a      	ldrb	r2, [r3, #0]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a08:	1c5a      	adds	r2, r3, #1
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	3b01      	subs	r3, #1
 8005a16:	b29a      	uxth	r2, r3
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a20:	3b01      	subs	r3, #1
 8005a22:	b29a      	uxth	r2, r3
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	851a      	strh	r2, [r3, #40]	; 0x28
 8005a28:	e00d      	b.n	8005a46 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a30:	d002      	beq.n	8005a38 <I2C_Slave_ISR_IT+0x1e6>
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d106      	bne.n	8005a46 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005a38:	68f8      	ldr	r0, [r7, #12]
 8005a3a:	f000 f891 	bl	8005b60 <I2C_ITSlaveSeqCplt>
 8005a3e:	e002      	b.n	8005a46 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8005a40:	bf00      	nop
 8005a42:	e000      	b.n	8005a46 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8005a44:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005a4e:	2300      	movs	r3, #0
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3718      	adds	r7, #24
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005a6e:	2b28      	cmp	r3, #40	; 0x28
 8005a70:	d16a      	bne.n	8005b48 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	699b      	ldr	r3, [r3, #24]
 8005a78:	0c1b      	lsrs	r3, r3, #16
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	f003 0301 	and.w	r3, r3, #1
 8005a80:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	699b      	ldr	r3, [r3, #24]
 8005a88:	0c1b      	lsrs	r3, r3, #16
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005a90:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a9e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005aac:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	2b02      	cmp	r3, #2
 8005ab4:	d138      	bne.n	8005b28 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8005ab6:	897b      	ldrh	r3, [r7, #10]
 8005ab8:	09db      	lsrs	r3, r3, #7
 8005aba:	b29a      	uxth	r2, r3
 8005abc:	89bb      	ldrh	r3, [r7, #12]
 8005abe:	4053      	eors	r3, r2
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	f003 0306 	and.w	r3, r3, #6
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d11c      	bne.n	8005b04 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8005aca:	897b      	ldrh	r3, [r7, #10]
 8005acc:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ad2:	1c5a      	adds	r2, r3, #1
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005adc:	2b02      	cmp	r3, #2
 8005ade:	d13b      	bne.n	8005b58 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	2208      	movs	r2, #8
 8005aec:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005af6:	89ba      	ldrh	r2, [r7, #12]
 8005af8:	7bfb      	ldrb	r3, [r7, #15]
 8005afa:	4619      	mov	r1, r3
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f7ff fe7c 	bl	80057fa <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005b02:	e029      	b.n	8005b58 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8005b04:	893b      	ldrh	r3, [r7, #8]
 8005b06:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005b08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f000 fc0c 	bl	800632a <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005b1a:	89ba      	ldrh	r2, [r7, #12]
 8005b1c:	7bfb      	ldrb	r3, [r7, #15]
 8005b1e:	4619      	mov	r1, r3
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f7ff fe6a 	bl	80057fa <HAL_I2C_AddrCallback>
}
 8005b26:	e017      	b.n	8005b58 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005b28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f000 fbfc 	bl	800632a <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005b3a:	89ba      	ldrh	r2, [r7, #12]
 8005b3c:	7bfb      	ldrb	r3, [r7, #15]
 8005b3e:	4619      	mov	r1, r3
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f7ff fe5a 	bl	80057fa <HAL_I2C_AddrCallback>
}
 8005b46:	e007      	b.n	8005b58 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2208      	movs	r2, #8
 8005b4e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8005b58:	bf00      	nop
 8005b5a:	3710      	adds	r7, #16
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b084      	sub	sp, #16
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	0b9b      	lsrs	r3, r3, #14
 8005b7c:	f003 0301 	and.w	r3, r3, #1
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d008      	beq.n	8005b96 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005b92:	601a      	str	r2, [r3, #0]
 8005b94:	e00d      	b.n	8005bb2 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	0bdb      	lsrs	r3, r3, #15
 8005b9a:	f003 0301 	and.w	r3, r3, #1
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d007      	beq.n	8005bb2 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005bb0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	2b29      	cmp	r3, #41	; 0x29
 8005bbc:	d112      	bne.n	8005be4 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2228      	movs	r2, #40	; 0x28
 8005bc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2221      	movs	r2, #33	; 0x21
 8005bca:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005bcc:	2101      	movs	r1, #1
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 fbab 	bl	800632a <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f7ff fdf8 	bl	80057d2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005be2:	e017      	b.n	8005c14 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	2b2a      	cmp	r3, #42	; 0x2a
 8005bee:	d111      	bne.n	8005c14 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2228      	movs	r2, #40	; 0x28
 8005bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2222      	movs	r2, #34	; 0x22
 8005bfc:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005bfe:	2102      	movs	r1, #2
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f000 fb92 	bl	800632a <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f7ff fde9 	bl	80057e6 <HAL_I2C_SlaveRxCpltCallback>
}
 8005c14:	bf00      	nop
 8005c16:	3710      	adds	r7, #16
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}

08005c1c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b086      	sub	sp, #24
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c38:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	2220      	movs	r2, #32
 8005c40:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005c42:	7bfb      	ldrb	r3, [r7, #15]
 8005c44:	2b21      	cmp	r3, #33	; 0x21
 8005c46:	d002      	beq.n	8005c4e <I2C_ITSlaveCplt+0x32>
 8005c48:	7bfb      	ldrb	r3, [r7, #15]
 8005c4a:	2b29      	cmp	r3, #41	; 0x29
 8005c4c:	d108      	bne.n	8005c60 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005c4e:	f248 0101 	movw	r1, #32769	; 0x8001
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 fb69 	bl	800632a <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2221      	movs	r2, #33	; 0x21
 8005c5c:	631a      	str	r2, [r3, #48]	; 0x30
 8005c5e:	e00d      	b.n	8005c7c <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005c60:	7bfb      	ldrb	r3, [r7, #15]
 8005c62:	2b22      	cmp	r3, #34	; 0x22
 8005c64:	d002      	beq.n	8005c6c <I2C_ITSlaveCplt+0x50>
 8005c66:	7bfb      	ldrb	r3, [r7, #15]
 8005c68:	2b2a      	cmp	r3, #42	; 0x2a
 8005c6a:	d107      	bne.n	8005c7c <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005c6c:	f248 0102 	movw	r1, #32770	; 0x8002
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f000 fb5a 	bl	800632a <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2222      	movs	r2, #34	; 0x22
 8005c7a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	685a      	ldr	r2, [r3, #4]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c8a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	6859      	ldr	r1, [r3, #4]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	4b80      	ldr	r3, [pc, #512]	; (8005e98 <I2C_ITSlaveCplt+0x27c>)
 8005c98:	400b      	ands	r3, r1
 8005c9a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f000 fb02 	bl	80062a6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	0b9b      	lsrs	r3, r3, #14
 8005ca6:	f003 0301 	and.w	r3, r3, #1
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d07a      	beq.n	8005da4 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005cbc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	f000 8111 	beq.w	8005eea <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a73      	ldr	r2, [pc, #460]	; (8005e9c <I2C_ITSlaveCplt+0x280>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d059      	beq.n	8005d88 <I2C_ITSlaveCplt+0x16c>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a71      	ldr	r2, [pc, #452]	; (8005ea0 <I2C_ITSlaveCplt+0x284>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d053      	beq.n	8005d88 <I2C_ITSlaveCplt+0x16c>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a6f      	ldr	r2, [pc, #444]	; (8005ea4 <I2C_ITSlaveCplt+0x288>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d04d      	beq.n	8005d88 <I2C_ITSlaveCplt+0x16c>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a6d      	ldr	r2, [pc, #436]	; (8005ea8 <I2C_ITSlaveCplt+0x28c>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d047      	beq.n	8005d88 <I2C_ITSlaveCplt+0x16c>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a6b      	ldr	r2, [pc, #428]	; (8005eac <I2C_ITSlaveCplt+0x290>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d041      	beq.n	8005d88 <I2C_ITSlaveCplt+0x16c>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a69      	ldr	r2, [pc, #420]	; (8005eb0 <I2C_ITSlaveCplt+0x294>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d03b      	beq.n	8005d88 <I2C_ITSlaveCplt+0x16c>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a67      	ldr	r2, [pc, #412]	; (8005eb4 <I2C_ITSlaveCplt+0x298>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d035      	beq.n	8005d88 <I2C_ITSlaveCplt+0x16c>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a65      	ldr	r2, [pc, #404]	; (8005eb8 <I2C_ITSlaveCplt+0x29c>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d02f      	beq.n	8005d88 <I2C_ITSlaveCplt+0x16c>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a63      	ldr	r2, [pc, #396]	; (8005ebc <I2C_ITSlaveCplt+0x2a0>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d029      	beq.n	8005d88 <I2C_ITSlaveCplt+0x16c>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a61      	ldr	r2, [pc, #388]	; (8005ec0 <I2C_ITSlaveCplt+0x2a4>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d023      	beq.n	8005d88 <I2C_ITSlaveCplt+0x16c>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a5f      	ldr	r2, [pc, #380]	; (8005ec4 <I2C_ITSlaveCplt+0x2a8>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d01d      	beq.n	8005d88 <I2C_ITSlaveCplt+0x16c>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a5d      	ldr	r2, [pc, #372]	; (8005ec8 <I2C_ITSlaveCplt+0x2ac>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d017      	beq.n	8005d88 <I2C_ITSlaveCplt+0x16c>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a5b      	ldr	r2, [pc, #364]	; (8005ecc <I2C_ITSlaveCplt+0x2b0>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d011      	beq.n	8005d88 <I2C_ITSlaveCplt+0x16c>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a59      	ldr	r2, [pc, #356]	; (8005ed0 <I2C_ITSlaveCplt+0x2b4>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d00b      	beq.n	8005d88 <I2C_ITSlaveCplt+0x16c>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a57      	ldr	r2, [pc, #348]	; (8005ed4 <I2C_ITSlaveCplt+0x2b8>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d005      	beq.n	8005d88 <I2C_ITSlaveCplt+0x16c>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a55      	ldr	r2, [pc, #340]	; (8005ed8 <I2C_ITSlaveCplt+0x2bc>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d105      	bne.n	8005d94 <I2C_ITSlaveCplt+0x178>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	e004      	b.n	8005d9e <I2C_ITSlaveCplt+0x182>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	8553      	strh	r3, [r2, #42]	; 0x2a
 8005da2:	e0a2      	b.n	8005eea <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	0bdb      	lsrs	r3, r3, #15
 8005da8:	f003 0301 	and.w	r3, r3, #1
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	f000 809c 	beq.w	8005eea <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005dc0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	f000 808f 	beq.w	8005eea <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a32      	ldr	r2, [pc, #200]	; (8005e9c <I2C_ITSlaveCplt+0x280>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d059      	beq.n	8005e8c <I2C_ITSlaveCplt+0x270>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a30      	ldr	r2, [pc, #192]	; (8005ea0 <I2C_ITSlaveCplt+0x284>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d053      	beq.n	8005e8c <I2C_ITSlaveCplt+0x270>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a2e      	ldr	r2, [pc, #184]	; (8005ea4 <I2C_ITSlaveCplt+0x288>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d04d      	beq.n	8005e8c <I2C_ITSlaveCplt+0x270>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a2c      	ldr	r2, [pc, #176]	; (8005ea8 <I2C_ITSlaveCplt+0x28c>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d047      	beq.n	8005e8c <I2C_ITSlaveCplt+0x270>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a2a      	ldr	r2, [pc, #168]	; (8005eac <I2C_ITSlaveCplt+0x290>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d041      	beq.n	8005e8c <I2C_ITSlaveCplt+0x270>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a28      	ldr	r2, [pc, #160]	; (8005eb0 <I2C_ITSlaveCplt+0x294>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d03b      	beq.n	8005e8c <I2C_ITSlaveCplt+0x270>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a26      	ldr	r2, [pc, #152]	; (8005eb4 <I2C_ITSlaveCplt+0x298>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d035      	beq.n	8005e8c <I2C_ITSlaveCplt+0x270>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a24      	ldr	r2, [pc, #144]	; (8005eb8 <I2C_ITSlaveCplt+0x29c>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d02f      	beq.n	8005e8c <I2C_ITSlaveCplt+0x270>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a22      	ldr	r2, [pc, #136]	; (8005ebc <I2C_ITSlaveCplt+0x2a0>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d029      	beq.n	8005e8c <I2C_ITSlaveCplt+0x270>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a20      	ldr	r2, [pc, #128]	; (8005ec0 <I2C_ITSlaveCplt+0x2a4>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d023      	beq.n	8005e8c <I2C_ITSlaveCplt+0x270>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a1e      	ldr	r2, [pc, #120]	; (8005ec4 <I2C_ITSlaveCplt+0x2a8>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d01d      	beq.n	8005e8c <I2C_ITSlaveCplt+0x270>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a1c      	ldr	r2, [pc, #112]	; (8005ec8 <I2C_ITSlaveCplt+0x2ac>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d017      	beq.n	8005e8c <I2C_ITSlaveCplt+0x270>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a1a      	ldr	r2, [pc, #104]	; (8005ecc <I2C_ITSlaveCplt+0x2b0>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d011      	beq.n	8005e8c <I2C_ITSlaveCplt+0x270>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a18      	ldr	r2, [pc, #96]	; (8005ed0 <I2C_ITSlaveCplt+0x2b4>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d00b      	beq.n	8005e8c <I2C_ITSlaveCplt+0x270>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a16      	ldr	r2, [pc, #88]	; (8005ed4 <I2C_ITSlaveCplt+0x2b8>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d005      	beq.n	8005e8c <I2C_ITSlaveCplt+0x270>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a14      	ldr	r2, [pc, #80]	; (8005ed8 <I2C_ITSlaveCplt+0x2bc>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d127      	bne.n	8005edc <I2C_ITSlaveCplt+0x2c0>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	e026      	b.n	8005ee6 <I2C_ITSlaveCplt+0x2ca>
 8005e98:	fe00e800 	.word	0xfe00e800
 8005e9c:	40020010 	.word	0x40020010
 8005ea0:	40020028 	.word	0x40020028
 8005ea4:	40020040 	.word	0x40020040
 8005ea8:	40020058 	.word	0x40020058
 8005eac:	40020070 	.word	0x40020070
 8005eb0:	40020088 	.word	0x40020088
 8005eb4:	400200a0 	.word	0x400200a0
 8005eb8:	400200b8 	.word	0x400200b8
 8005ebc:	40020410 	.word	0x40020410
 8005ec0:	40020428 	.word	0x40020428
 8005ec4:	40020440 	.word	0x40020440
 8005ec8:	40020458 	.word	0x40020458
 8005ecc:	40020470 	.word	0x40020470
 8005ed0:	40020488 	.word	0x40020488
 8005ed4:	400204a0 	.word	0x400204a0
 8005ed8:	400204b8 	.word	0x400204b8
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	089b      	lsrs	r3, r3, #2
 8005eee:	f003 0301 	and.w	r3, r3, #1
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d020      	beq.n	8005f38 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	f023 0304 	bic.w	r3, r3, #4
 8005efc:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f08:	b2d2      	uxtb	r2, r2
 8005f0a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f10:	1c5a      	adds	r2, r3, #1
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d00c      	beq.n	8005f38 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f22:	3b01      	subs	r3, #1
 8005f24:	b29a      	uxth	r2, r3
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	3b01      	subs	r3, #1
 8005f32:	b29a      	uxth	r2, r3
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d005      	beq.n	8005f4e <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f46:	f043 0204 	orr.w	r2, r3, #4
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d010      	beq.n	8005f86 <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f68:	4619      	mov	r1, r3
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 f8a4 	bl	80060b8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	2b28      	cmp	r3, #40	; 0x28
 8005f7a:	d141      	bne.n	8006000 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8005f7c:	6979      	ldr	r1, [r7, #20]
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 f844 	bl	800600c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005f84:	e03c      	b.n	8006000 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f8a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005f8e:	d014      	beq.n	8005fba <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f7ff fde5 	bl	8005b60 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4a1b      	ldr	r2, [pc, #108]	; (8006008 <I2C_ITSlaveCplt+0x3ec>)
 8005f9a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2220      	movs	r2, #32
 8005fa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f7ff fc2f 	bl	8005816 <HAL_I2C_ListenCpltCallback>
}
 8005fb8:	e022      	b.n	8006000 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	2b22      	cmp	r3, #34	; 0x22
 8005fc4:	d10e      	bne.n	8005fe4 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2220      	movs	r2, #32
 8005fca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f7ff fc02 	bl	80057e6 <HAL_I2C_SlaveRxCpltCallback>
}
 8005fe2:	e00d      	b.n	8006000 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2220      	movs	r2, #32
 8005fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f7ff fbe9 	bl	80057d2 <HAL_I2C_SlaveTxCpltCallback>
}
 8006000:	bf00      	nop
 8006002:	3718      	adds	r7, #24
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}
 8006008:	ffff0000 	.word	0xffff0000

0800600c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b082      	sub	sp, #8
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4a26      	ldr	r2, [pc, #152]	; (80060b4 <I2C_ITListenCplt+0xa8>)
 800601a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2220      	movs	r2, #32
 8006026:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2200      	movs	r2, #0
 800602e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2200      	movs	r2, #0
 8006036:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	089b      	lsrs	r3, r3, #2
 800603c:	f003 0301 	and.w	r3, r3, #1
 8006040:	2b00      	cmp	r3, #0
 8006042:	d022      	beq.n	800608a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800604e:	b2d2      	uxtb	r2, r2
 8006050:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006056:	1c5a      	adds	r2, r3, #1
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006060:	2b00      	cmp	r3, #0
 8006062:	d012      	beq.n	800608a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006068:	3b01      	subs	r3, #1
 800606a:	b29a      	uxth	r2, r3
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006074:	b29b      	uxth	r3, r3
 8006076:	3b01      	subs	r3, #1
 8006078:	b29a      	uxth	r2, r3
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006082:	f043 0204 	orr.w	r2, r3, #4
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800608a:	f248 0103 	movw	r1, #32771	; 0x8003
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 f94b 	bl	800632a <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	2210      	movs	r2, #16
 800609a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f7ff fbb6 	bl	8005816 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80060aa:	bf00      	nop
 80060ac:	3708      	adds	r7, #8
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	bf00      	nop
 80060b4:	ffff0000 	.word	0xffff0000

080060b8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2200      	movs	r2, #0
 80060ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	4a5d      	ldr	r2, [pc, #372]	; (800624c <I2C_ITError+0x194>)
 80060d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	431a      	orrs	r2, r3
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80060ea:	7bfb      	ldrb	r3, [r7, #15]
 80060ec:	2b28      	cmp	r3, #40	; 0x28
 80060ee:	d005      	beq.n	80060fc <I2C_ITError+0x44>
 80060f0:	7bfb      	ldrb	r3, [r7, #15]
 80060f2:	2b29      	cmp	r3, #41	; 0x29
 80060f4:	d002      	beq.n	80060fc <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80060f6:	7bfb      	ldrb	r3, [r7, #15]
 80060f8:	2b2a      	cmp	r3, #42	; 0x2a
 80060fa:	d10b      	bne.n	8006114 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80060fc:	2103      	movs	r1, #3
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 f913 	bl	800632a <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2228      	movs	r2, #40	; 0x28
 8006108:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	4a50      	ldr	r2, [pc, #320]	; (8006250 <I2C_ITError+0x198>)
 8006110:	635a      	str	r2, [r3, #52]	; 0x34
 8006112:	e011      	b.n	8006138 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006114:	f248 0103 	movw	r1, #32771	; 0x8003
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f000 f906 	bl	800632a <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006124:	b2db      	uxtb	r3, r3
 8006126:	2b60      	cmp	r3, #96	; 0x60
 8006128:	d003      	beq.n	8006132 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2220      	movs	r2, #32
 800612e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800613c:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006142:	2b00      	cmp	r3, #0
 8006144:	d039      	beq.n	80061ba <I2C_ITError+0x102>
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	2b11      	cmp	r3, #17
 800614a:	d002      	beq.n	8006152 <I2C_ITError+0x9a>
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	2b21      	cmp	r3, #33	; 0x21
 8006150:	d133      	bne.n	80061ba <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800615c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006160:	d107      	bne.n	8006172 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006170:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006176:	4618      	mov	r0, r3
 8006178:	f7fe fc26 	bl	80049c8 <HAL_DMA_GetState>
 800617c:	4603      	mov	r3, r0
 800617e:	2b01      	cmp	r3, #1
 8006180:	d017      	beq.n	80061b2 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006186:	4a33      	ldr	r2, [pc, #204]	; (8006254 <I2C_ITError+0x19c>)
 8006188:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006196:	4618      	mov	r0, r3
 8006198:	f7fd faa6 	bl	80036e8 <HAL_DMA_Abort_IT>
 800619c:	4603      	mov	r3, r0
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d04d      	beq.n	800623e <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80061ac:	4610      	mov	r0, r2
 80061ae:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80061b0:	e045      	b.n	800623e <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f000 f850 	bl	8006258 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80061b8:	e041      	b.n	800623e <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d039      	beq.n	8006236 <I2C_ITError+0x17e>
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	2b12      	cmp	r3, #18
 80061c6:	d002      	beq.n	80061ce <I2C_ITError+0x116>
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	2b22      	cmp	r3, #34	; 0x22
 80061cc:	d133      	bne.n	8006236 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80061d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061dc:	d107      	bne.n	80061ee <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80061ec:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061f2:	4618      	mov	r0, r3
 80061f4:	f7fe fbe8 	bl	80049c8 <HAL_DMA_GetState>
 80061f8:	4603      	mov	r3, r0
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d017      	beq.n	800622e <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006202:	4a14      	ldr	r2, [pc, #80]	; (8006254 <I2C_ITError+0x19c>)
 8006204:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2200      	movs	r2, #0
 800620a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006212:	4618      	mov	r0, r3
 8006214:	f7fd fa68 	bl	80036e8 <HAL_DMA_Abort_IT>
 8006218:	4603      	mov	r3, r0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d011      	beq.n	8006242 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006222:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006228:	4610      	mov	r0, r2
 800622a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800622c:	e009      	b.n	8006242 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 f812 	bl	8006258 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006234:	e005      	b.n	8006242 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 f80e 	bl	8006258 <I2C_TreatErrorCallback>
  }
}
 800623c:	e002      	b.n	8006244 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800623e:	bf00      	nop
 8006240:	e000      	b.n	8006244 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006242:	bf00      	nop
}
 8006244:	bf00      	nop
 8006246:	3710      	adds	r7, #16
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}
 800624c:	ffff0000 	.word	0xffff0000
 8006250:	08005853 	.word	0x08005853
 8006254:	080062ef 	.word	0x080062ef

08006258 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b082      	sub	sp, #8
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006266:	b2db      	uxtb	r3, r3
 8006268:	2b60      	cmp	r3, #96	; 0x60
 800626a:	d10e      	bne.n	800628a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2220      	movs	r2, #32
 8006270:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f7ff fadb 	bl	800583e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006288:	e009      	b.n	800629e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2200      	movs	r2, #0
 800628e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f7ff fac6 	bl	800582a <HAL_I2C_ErrorCallback>
}
 800629e:	bf00      	nop
 80062a0:	3708      	adds	r7, #8
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}

080062a6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80062a6:	b480      	push	{r7}
 80062a8:	b083      	sub	sp, #12
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	699b      	ldr	r3, [r3, #24]
 80062b4:	f003 0302 	and.w	r3, r3, #2
 80062b8:	2b02      	cmp	r3, #2
 80062ba:	d103      	bne.n	80062c4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	2200      	movs	r2, #0
 80062c2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	699b      	ldr	r3, [r3, #24]
 80062ca:	f003 0301 	and.w	r3, r3, #1
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	d007      	beq.n	80062e2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	699a      	ldr	r2, [r3, #24]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f042 0201 	orr.w	r2, r2, #1
 80062e0:	619a      	str	r2, [r3, #24]
  }
}
 80062e2:	bf00      	nop
 80062e4:	370c      	adds	r7, #12
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr

080062ee <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80062ee:	b580      	push	{r7, lr}
 80062f0:	b084      	sub	sp, #16
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062fa:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006300:	2b00      	cmp	r3, #0
 8006302:	d003      	beq.n	800630c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006308:	2200      	movs	r2, #0
 800630a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006310:	2b00      	cmp	r3, #0
 8006312:	d003      	beq.n	800631c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006318:	2200      	movs	r2, #0
 800631a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800631c:	68f8      	ldr	r0, [r7, #12]
 800631e:	f7ff ff9b 	bl	8006258 <I2C_TreatErrorCallback>
}
 8006322:	bf00      	nop
 8006324:	3710      	adds	r7, #16
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}

0800632a <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800632a:	b480      	push	{r7}
 800632c:	b085      	sub	sp, #20
 800632e:	af00      	add	r7, sp, #0
 8006330:	6078      	str	r0, [r7, #4]
 8006332:	460b      	mov	r3, r1
 8006334:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006336:	2300      	movs	r3, #0
 8006338:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800633a:	887b      	ldrh	r3, [r7, #2]
 800633c:	f003 0301 	and.w	r3, r3, #1
 8006340:	2b00      	cmp	r3, #0
 8006342:	d00f      	beq.n	8006364 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800634a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006352:	b2db      	uxtb	r3, r3
 8006354:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006358:	2b28      	cmp	r3, #40	; 0x28
 800635a:	d003      	beq.n	8006364 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8006362:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006364:	887b      	ldrh	r3, [r7, #2]
 8006366:	f003 0302 	and.w	r3, r3, #2
 800636a:	2b00      	cmp	r3, #0
 800636c:	d00f      	beq.n	800638e <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8006374:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800637c:	b2db      	uxtb	r3, r3
 800637e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006382:	2b28      	cmp	r3, #40	; 0x28
 8006384:	d003      	beq.n	800638e <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800638c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800638e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006392:	2b00      	cmp	r3, #0
 8006394:	da03      	bge.n	800639e <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800639c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800639e:	887b      	ldrh	r3, [r7, #2]
 80063a0:	2b10      	cmp	r3, #16
 80063a2:	d103      	bne.n	80063ac <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80063aa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80063ac:	887b      	ldrh	r3, [r7, #2]
 80063ae:	2b20      	cmp	r3, #32
 80063b0:	d103      	bne.n	80063ba <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f043 0320 	orr.w	r3, r3, #32
 80063b8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80063ba:	887b      	ldrh	r3, [r7, #2]
 80063bc:	2b40      	cmp	r3, #64	; 0x40
 80063be:	d103      	bne.n	80063c8 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063c6:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	6819      	ldr	r1, [r3, #0]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	43da      	mvns	r2, r3
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	400a      	ands	r2, r1
 80063d8:	601a      	str	r2, [r3, #0]
}
 80063da:	bf00      	nop
 80063dc:	3714      	adds	r7, #20
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr

080063e6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80063e6:	b480      	push	{r7}
 80063e8:	b083      	sub	sp, #12
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	6078      	str	r0, [r7, #4]
 80063ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	2b20      	cmp	r3, #32
 80063fa:	d138      	bne.n	800646e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006402:	2b01      	cmp	r3, #1
 8006404:	d101      	bne.n	800640a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006406:	2302      	movs	r3, #2
 8006408:	e032      	b.n	8006470 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2201      	movs	r2, #1
 800640e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2224      	movs	r2, #36	; 0x24
 8006416:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f022 0201 	bic.w	r2, r2, #1
 8006428:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006438:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	6819      	ldr	r1, [r3, #0]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	683a      	ldr	r2, [r7, #0]
 8006446:	430a      	orrs	r2, r1
 8006448:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f042 0201 	orr.w	r2, r2, #1
 8006458:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2220      	movs	r2, #32
 800645e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800646a:	2300      	movs	r3, #0
 800646c:	e000      	b.n	8006470 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800646e:	2302      	movs	r3, #2
  }
}
 8006470:	4618      	mov	r0, r3
 8006472:	370c      	adds	r7, #12
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr

0800647c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800647c:	b480      	push	{r7}
 800647e:	b085      	sub	sp, #20
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800648c:	b2db      	uxtb	r3, r3
 800648e:	2b20      	cmp	r3, #32
 8006490:	d139      	bne.n	8006506 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006498:	2b01      	cmp	r3, #1
 800649a:	d101      	bne.n	80064a0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800649c:	2302      	movs	r3, #2
 800649e:	e033      	b.n	8006508 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2224      	movs	r2, #36	; 0x24
 80064ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f022 0201 	bic.w	r2, r2, #1
 80064be:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80064ce:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	021b      	lsls	r3, r3, #8
 80064d4:	68fa      	ldr	r2, [r7, #12]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68fa      	ldr	r2, [r7, #12]
 80064e0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f042 0201 	orr.w	r2, r2, #1
 80064f0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2220      	movs	r2, #32
 80064f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2200      	movs	r2, #0
 80064fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006502:	2300      	movs	r3, #0
 8006504:	e000      	b.n	8006508 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006506:	2302      	movs	r3, #2
  }
}
 8006508:	4618      	mov	r0, r3
 800650a:	3714      	adds	r7, #20
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr

08006514 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006514:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006516:	b08f      	sub	sp, #60	; 0x3c
 8006518:	af0a      	add	r7, sp, #40	; 0x28
 800651a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d101      	bne.n	8006526 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	e116      	b.n	8006754 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8006532:	b2db      	uxtb	r3, r3
 8006534:	2b00      	cmp	r3, #0
 8006536:	d106      	bne.n	8006546 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f00a fa99 	bl	8010a78 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2203      	movs	r2, #3
 800654a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006556:	2b00      	cmp	r3, #0
 8006558:	d102      	bne.n	8006560 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2200      	movs	r2, #0
 800655e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4618      	mov	r0, r3
 8006566:	f007 f940 	bl	800d7ea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	603b      	str	r3, [r7, #0]
 8006570:	687e      	ldr	r6, [r7, #4]
 8006572:	466d      	mov	r5, sp
 8006574:	f106 0410 	add.w	r4, r6, #16
 8006578:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800657a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800657c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800657e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006580:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006584:	e885 0003 	stmia.w	r5, {r0, r1}
 8006588:	1d33      	adds	r3, r6, #4
 800658a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800658c:	6838      	ldr	r0, [r7, #0]
 800658e:	f007 f80b 	bl	800d5a8 <USB_CoreInit>
 8006592:	4603      	mov	r3, r0
 8006594:	2b00      	cmp	r3, #0
 8006596:	d005      	beq.n	80065a4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2202      	movs	r2, #2
 800659c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80065a0:	2301      	movs	r3, #1
 80065a2:	e0d7      	b.n	8006754 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	2100      	movs	r1, #0
 80065aa:	4618      	mov	r0, r3
 80065ac:	f007 f92e 	bl	800d80c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80065b0:	2300      	movs	r3, #0
 80065b2:	73fb      	strb	r3, [r7, #15]
 80065b4:	e04a      	b.n	800664c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80065b6:	7bfa      	ldrb	r2, [r7, #15]
 80065b8:	6879      	ldr	r1, [r7, #4]
 80065ba:	4613      	mov	r3, r2
 80065bc:	00db      	lsls	r3, r3, #3
 80065be:	1a9b      	subs	r3, r3, r2
 80065c0:	009b      	lsls	r3, r3, #2
 80065c2:	440b      	add	r3, r1
 80065c4:	333d      	adds	r3, #61	; 0x3d
 80065c6:	2201      	movs	r2, #1
 80065c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80065ca:	7bfa      	ldrb	r2, [r7, #15]
 80065cc:	6879      	ldr	r1, [r7, #4]
 80065ce:	4613      	mov	r3, r2
 80065d0:	00db      	lsls	r3, r3, #3
 80065d2:	1a9b      	subs	r3, r3, r2
 80065d4:	009b      	lsls	r3, r3, #2
 80065d6:	440b      	add	r3, r1
 80065d8:	333c      	adds	r3, #60	; 0x3c
 80065da:	7bfa      	ldrb	r2, [r7, #15]
 80065dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80065de:	7bfa      	ldrb	r2, [r7, #15]
 80065e0:	7bfb      	ldrb	r3, [r7, #15]
 80065e2:	b298      	uxth	r0, r3
 80065e4:	6879      	ldr	r1, [r7, #4]
 80065e6:	4613      	mov	r3, r2
 80065e8:	00db      	lsls	r3, r3, #3
 80065ea:	1a9b      	subs	r3, r3, r2
 80065ec:	009b      	lsls	r3, r3, #2
 80065ee:	440b      	add	r3, r1
 80065f0:	3342      	adds	r3, #66	; 0x42
 80065f2:	4602      	mov	r2, r0
 80065f4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80065f6:	7bfa      	ldrb	r2, [r7, #15]
 80065f8:	6879      	ldr	r1, [r7, #4]
 80065fa:	4613      	mov	r3, r2
 80065fc:	00db      	lsls	r3, r3, #3
 80065fe:	1a9b      	subs	r3, r3, r2
 8006600:	009b      	lsls	r3, r3, #2
 8006602:	440b      	add	r3, r1
 8006604:	333f      	adds	r3, #63	; 0x3f
 8006606:	2200      	movs	r2, #0
 8006608:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800660a:	7bfa      	ldrb	r2, [r7, #15]
 800660c:	6879      	ldr	r1, [r7, #4]
 800660e:	4613      	mov	r3, r2
 8006610:	00db      	lsls	r3, r3, #3
 8006612:	1a9b      	subs	r3, r3, r2
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	440b      	add	r3, r1
 8006618:	3344      	adds	r3, #68	; 0x44
 800661a:	2200      	movs	r2, #0
 800661c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800661e:	7bfa      	ldrb	r2, [r7, #15]
 8006620:	6879      	ldr	r1, [r7, #4]
 8006622:	4613      	mov	r3, r2
 8006624:	00db      	lsls	r3, r3, #3
 8006626:	1a9b      	subs	r3, r3, r2
 8006628:	009b      	lsls	r3, r3, #2
 800662a:	440b      	add	r3, r1
 800662c:	3348      	adds	r3, #72	; 0x48
 800662e:	2200      	movs	r2, #0
 8006630:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006632:	7bfa      	ldrb	r2, [r7, #15]
 8006634:	6879      	ldr	r1, [r7, #4]
 8006636:	4613      	mov	r3, r2
 8006638:	00db      	lsls	r3, r3, #3
 800663a:	1a9b      	subs	r3, r3, r2
 800663c:	009b      	lsls	r3, r3, #2
 800663e:	440b      	add	r3, r1
 8006640:	3350      	adds	r3, #80	; 0x50
 8006642:	2200      	movs	r2, #0
 8006644:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006646:	7bfb      	ldrb	r3, [r7, #15]
 8006648:	3301      	adds	r3, #1
 800664a:	73fb      	strb	r3, [r7, #15]
 800664c:	7bfa      	ldrb	r2, [r7, #15]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	429a      	cmp	r2, r3
 8006654:	d3af      	bcc.n	80065b6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006656:	2300      	movs	r3, #0
 8006658:	73fb      	strb	r3, [r7, #15]
 800665a:	e044      	b.n	80066e6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800665c:	7bfa      	ldrb	r2, [r7, #15]
 800665e:	6879      	ldr	r1, [r7, #4]
 8006660:	4613      	mov	r3, r2
 8006662:	00db      	lsls	r3, r3, #3
 8006664:	1a9b      	subs	r3, r3, r2
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	440b      	add	r3, r1
 800666a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800666e:	2200      	movs	r2, #0
 8006670:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006672:	7bfa      	ldrb	r2, [r7, #15]
 8006674:	6879      	ldr	r1, [r7, #4]
 8006676:	4613      	mov	r3, r2
 8006678:	00db      	lsls	r3, r3, #3
 800667a:	1a9b      	subs	r3, r3, r2
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	440b      	add	r3, r1
 8006680:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8006684:	7bfa      	ldrb	r2, [r7, #15]
 8006686:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006688:	7bfa      	ldrb	r2, [r7, #15]
 800668a:	6879      	ldr	r1, [r7, #4]
 800668c:	4613      	mov	r3, r2
 800668e:	00db      	lsls	r3, r3, #3
 8006690:	1a9b      	subs	r3, r3, r2
 8006692:	009b      	lsls	r3, r3, #2
 8006694:	440b      	add	r3, r1
 8006696:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800669a:	2200      	movs	r2, #0
 800669c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800669e:	7bfa      	ldrb	r2, [r7, #15]
 80066a0:	6879      	ldr	r1, [r7, #4]
 80066a2:	4613      	mov	r3, r2
 80066a4:	00db      	lsls	r3, r3, #3
 80066a6:	1a9b      	subs	r3, r3, r2
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	440b      	add	r3, r1
 80066ac:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80066b0:	2200      	movs	r2, #0
 80066b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80066b4:	7bfa      	ldrb	r2, [r7, #15]
 80066b6:	6879      	ldr	r1, [r7, #4]
 80066b8:	4613      	mov	r3, r2
 80066ba:	00db      	lsls	r3, r3, #3
 80066bc:	1a9b      	subs	r3, r3, r2
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	440b      	add	r3, r1
 80066c2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80066c6:	2200      	movs	r2, #0
 80066c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80066ca:	7bfa      	ldrb	r2, [r7, #15]
 80066cc:	6879      	ldr	r1, [r7, #4]
 80066ce:	4613      	mov	r3, r2
 80066d0:	00db      	lsls	r3, r3, #3
 80066d2:	1a9b      	subs	r3, r3, r2
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	440b      	add	r3, r1
 80066d8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80066dc:	2200      	movs	r2, #0
 80066de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80066e0:	7bfb      	ldrb	r3, [r7, #15]
 80066e2:	3301      	adds	r3, #1
 80066e4:	73fb      	strb	r3, [r7, #15]
 80066e6:	7bfa      	ldrb	r2, [r7, #15]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d3b5      	bcc.n	800665c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	603b      	str	r3, [r7, #0]
 80066f6:	687e      	ldr	r6, [r7, #4]
 80066f8:	466d      	mov	r5, sp
 80066fa:	f106 0410 	add.w	r4, r6, #16
 80066fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006700:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006702:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006704:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006706:	e894 0003 	ldmia.w	r4, {r0, r1}
 800670a:	e885 0003 	stmia.w	r5, {r0, r1}
 800670e:	1d33      	adds	r3, r6, #4
 8006710:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006712:	6838      	ldr	r0, [r7, #0]
 8006714:	f007 f8a4 	bl	800d860 <USB_DevInit>
 8006718:	4603      	mov	r3, r0
 800671a:	2b00      	cmp	r3, #0
 800671c:	d005      	beq.n	800672a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2202      	movs	r2, #2
 8006722:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	e014      	b.n	8006754 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2200      	movs	r2, #0
 800672e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2201      	movs	r2, #1
 8006736:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800673e:	2b01      	cmp	r3, #1
 8006740:	d102      	bne.n	8006748 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f001 f892 	bl	800786c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4618      	mov	r0, r3
 800674e:	f008 f924 	bl	800e99a <USB_DevDisconnect>

  return HAL_OK;
 8006752:	2300      	movs	r3, #0
}
 8006754:	4618      	mov	r0, r3
 8006756:	3714      	adds	r7, #20
 8006758:	46bd      	mov	sp, r7
 800675a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800675c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b084      	sub	sp, #16
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006770:	2b01      	cmp	r3, #1
 8006772:	d101      	bne.n	8006778 <HAL_PCD_Start+0x1c>
 8006774:	2302      	movs	r3, #2
 8006776:	e020      	b.n	80067ba <HAL_PCD_Start+0x5e>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006784:	2b01      	cmp	r3, #1
 8006786:	d109      	bne.n	800679c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800678c:	2b01      	cmp	r3, #1
 800678e:	d005      	beq.n	800679c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006794:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4618      	mov	r0, r3
 80067a2:	f007 f811 	bl	800d7c8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4618      	mov	r0, r3
 80067ac:	f008 f8d4 	bl	800e958 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3710      	adds	r7, #16
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}

080067c2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80067c2:	b590      	push	{r4, r7, lr}
 80067c4:	b08d      	sub	sp, #52	; 0x34
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067d0:	6a3b      	ldr	r3, [r7, #32]
 80067d2:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4618      	mov	r0, r3
 80067da:	f008 f992 	bl	800eb02 <USB_GetMode>
 80067de:	4603      	mov	r3, r0
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	f040 83ca 	bne.w	8006f7a <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4618      	mov	r0, r3
 80067ec:	f008 f8f6 	bl	800e9dc <USB_ReadInterrupts>
 80067f0:	4603      	mov	r3, r0
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	f000 83c0 	beq.w	8006f78 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4618      	mov	r0, r3
 80067fe:	f008 f8ed 	bl	800e9dc <USB_ReadInterrupts>
 8006802:	4603      	mov	r3, r0
 8006804:	f003 0302 	and.w	r3, r3, #2
 8006808:	2b02      	cmp	r3, #2
 800680a:	d107      	bne.n	800681c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	695a      	ldr	r2, [r3, #20]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f002 0202 	and.w	r2, r2, #2
 800681a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4618      	mov	r0, r3
 8006822:	f008 f8db 	bl	800e9dc <USB_ReadInterrupts>
 8006826:	4603      	mov	r3, r0
 8006828:	f003 0310 	and.w	r3, r3, #16
 800682c:	2b10      	cmp	r3, #16
 800682e:	d161      	bne.n	80068f4 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	699a      	ldr	r2, [r3, #24]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f022 0210 	bic.w	r2, r2, #16
 800683e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8006840:	6a3b      	ldr	r3, [r7, #32]
 8006842:	6a1b      	ldr	r3, [r3, #32]
 8006844:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8006846:	69bb      	ldr	r3, [r7, #24]
 8006848:	f003 020f 	and.w	r2, r3, #15
 800684c:	4613      	mov	r3, r2
 800684e:	00db      	lsls	r3, r3, #3
 8006850:	1a9b      	subs	r3, r3, r2
 8006852:	009b      	lsls	r3, r3, #2
 8006854:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	4413      	add	r3, r2
 800685c:	3304      	adds	r3, #4
 800685e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006860:	69bb      	ldr	r3, [r7, #24]
 8006862:	0c5b      	lsrs	r3, r3, #17
 8006864:	f003 030f 	and.w	r3, r3, #15
 8006868:	2b02      	cmp	r3, #2
 800686a:	d124      	bne.n	80068b6 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800686c:	69ba      	ldr	r2, [r7, #24]
 800686e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006872:	4013      	ands	r3, r2
 8006874:	2b00      	cmp	r3, #0
 8006876:	d035      	beq.n	80068e4 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800687c:	69bb      	ldr	r3, [r7, #24]
 800687e:	091b      	lsrs	r3, r3, #4
 8006880:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006882:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006886:	b29b      	uxth	r3, r3
 8006888:	461a      	mov	r2, r3
 800688a:	6a38      	ldr	r0, [r7, #32]
 800688c:	f007 ff12 	bl	800e6b4 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	68da      	ldr	r2, [r3, #12]
 8006894:	69bb      	ldr	r3, [r7, #24]
 8006896:	091b      	lsrs	r3, r3, #4
 8006898:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800689c:	441a      	add	r2, r3
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	699a      	ldr	r2, [r3, #24]
 80068a6:	69bb      	ldr	r3, [r7, #24]
 80068a8:	091b      	lsrs	r3, r3, #4
 80068aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80068ae:	441a      	add	r2, r3
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	619a      	str	r2, [r3, #24]
 80068b4:	e016      	b.n	80068e4 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80068b6:	69bb      	ldr	r3, [r7, #24]
 80068b8:	0c5b      	lsrs	r3, r3, #17
 80068ba:	f003 030f 	and.w	r3, r3, #15
 80068be:	2b06      	cmp	r3, #6
 80068c0:	d110      	bne.n	80068e4 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80068c8:	2208      	movs	r2, #8
 80068ca:	4619      	mov	r1, r3
 80068cc:	6a38      	ldr	r0, [r7, #32]
 80068ce:	f007 fef1 	bl	800e6b4 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	699a      	ldr	r2, [r3, #24]
 80068d6:	69bb      	ldr	r3, [r7, #24]
 80068d8:	091b      	lsrs	r3, r3, #4
 80068da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80068de:	441a      	add	r2, r3
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	699a      	ldr	r2, [r3, #24]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f042 0210 	orr.w	r2, r2, #16
 80068f2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4618      	mov	r0, r3
 80068fa:	f008 f86f 	bl	800e9dc <USB_ReadInterrupts>
 80068fe:	4603      	mov	r3, r0
 8006900:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006904:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006908:	d16e      	bne.n	80069e8 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800690a:	2300      	movs	r3, #0
 800690c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4618      	mov	r0, r3
 8006914:	f008 f875 	bl	800ea02 <USB_ReadDevAllOutEpInterrupt>
 8006918:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800691a:	e062      	b.n	80069e2 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800691c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800691e:	f003 0301 	and.w	r3, r3, #1
 8006922:	2b00      	cmp	r3, #0
 8006924:	d057      	beq.n	80069d6 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800692c:	b2d2      	uxtb	r2, r2
 800692e:	4611      	mov	r1, r2
 8006930:	4618      	mov	r0, r3
 8006932:	f008 f89a 	bl	800ea6a <USB_ReadDevOutEPInterrupt>
 8006936:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	f003 0301 	and.w	r3, r3, #1
 800693e:	2b00      	cmp	r3, #0
 8006940:	d00c      	beq.n	800695c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006944:	015a      	lsls	r2, r3, #5
 8006946:	69fb      	ldr	r3, [r7, #28]
 8006948:	4413      	add	r3, r2
 800694a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800694e:	461a      	mov	r2, r3
 8006950:	2301      	movs	r3, #1
 8006952:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006954:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 fdde 	bl	8007518 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	f003 0308 	and.w	r3, r3, #8
 8006962:	2b00      	cmp	r3, #0
 8006964:	d00c      	beq.n	8006980 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006968:	015a      	lsls	r2, r3, #5
 800696a:	69fb      	ldr	r3, [r7, #28]
 800696c:	4413      	add	r3, r2
 800696e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006972:	461a      	mov	r2, r3
 8006974:	2308      	movs	r3, #8
 8006976:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006978:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 fed8 	bl	8007730 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	f003 0310 	and.w	r3, r3, #16
 8006986:	2b00      	cmp	r3, #0
 8006988:	d008      	beq.n	800699c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800698a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698c:	015a      	lsls	r2, r3, #5
 800698e:	69fb      	ldr	r3, [r7, #28]
 8006990:	4413      	add	r3, r2
 8006992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006996:	461a      	mov	r2, r3
 8006998:	2310      	movs	r3, #16
 800699a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	f003 0320 	and.w	r3, r3, #32
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d008      	beq.n	80069b8 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80069a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a8:	015a      	lsls	r2, r3, #5
 80069aa:	69fb      	ldr	r3, [r7, #28]
 80069ac:	4413      	add	r3, r2
 80069ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069b2:	461a      	mov	r2, r3
 80069b4:	2320      	movs	r3, #32
 80069b6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d009      	beq.n	80069d6 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80069c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c4:	015a      	lsls	r2, r3, #5
 80069c6:	69fb      	ldr	r3, [r7, #28]
 80069c8:	4413      	add	r3, r2
 80069ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ce:	461a      	mov	r2, r3
 80069d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80069d4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80069d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d8:	3301      	adds	r3, #1
 80069da:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80069dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069de:	085b      	lsrs	r3, r3, #1
 80069e0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80069e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d199      	bne.n	800691c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4618      	mov	r0, r3
 80069ee:	f007 fff5 	bl	800e9dc <USB_ReadInterrupts>
 80069f2:	4603      	mov	r3, r0
 80069f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80069f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80069fc:	f040 80c0 	bne.w	8006b80 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4618      	mov	r0, r3
 8006a06:	f008 f816 	bl	800ea36 <USB_ReadDevAllInEpInterrupt>
 8006a0a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8006a10:	e0b2      	b.n	8006b78 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a14:	f003 0301 	and.w	r3, r3, #1
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	f000 80a7 	beq.w	8006b6c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a24:	b2d2      	uxtb	r2, r2
 8006a26:	4611      	mov	r1, r2
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f008 f83c 	bl	800eaa6 <USB_ReadDevInEPInterrupt>
 8006a2e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	f003 0301 	and.w	r3, r3, #1
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d057      	beq.n	8006aea <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3c:	f003 030f 	and.w	r3, r3, #15
 8006a40:	2201      	movs	r2, #1
 8006a42:	fa02 f303 	lsl.w	r3, r2, r3
 8006a46:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006a48:	69fb      	ldr	r3, [r7, #28]
 8006a4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	43db      	mvns	r3, r3
 8006a54:	69f9      	ldr	r1, [r7, #28]
 8006a56:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a5a:	4013      	ands	r3, r2
 8006a5c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a60:	015a      	lsls	r2, r3, #5
 8006a62:	69fb      	ldr	r3, [r7, #28]
 8006a64:	4413      	add	r3, r2
 8006a66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a6a:	461a      	mov	r2, r3
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	691b      	ldr	r3, [r3, #16]
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d132      	bne.n	8006ade <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006a78:	6879      	ldr	r1, [r7, #4]
 8006a7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a7c:	4613      	mov	r3, r2
 8006a7e:	00db      	lsls	r3, r3, #3
 8006a80:	1a9b      	subs	r3, r3, r2
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	440b      	add	r3, r1
 8006a86:	3348      	adds	r3, #72	; 0x48
 8006a88:	6819      	ldr	r1, [r3, #0]
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a8e:	4613      	mov	r3, r2
 8006a90:	00db      	lsls	r3, r3, #3
 8006a92:	1a9b      	subs	r3, r3, r2
 8006a94:	009b      	lsls	r3, r3, #2
 8006a96:	4403      	add	r3, r0
 8006a98:	3344      	adds	r3, #68	; 0x44
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4419      	add	r1, r3
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006aa2:	4613      	mov	r3, r2
 8006aa4:	00db      	lsls	r3, r3, #3
 8006aa6:	1a9b      	subs	r3, r3, r2
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	4403      	add	r3, r0
 8006aac:	3348      	adds	r3, #72	; 0x48
 8006aae:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d113      	bne.n	8006ade <HAL_PCD_IRQHandler+0x31c>
 8006ab6:	6879      	ldr	r1, [r7, #4]
 8006ab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006aba:	4613      	mov	r3, r2
 8006abc:	00db      	lsls	r3, r3, #3
 8006abe:	1a9b      	subs	r3, r3, r2
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	440b      	add	r3, r1
 8006ac4:	3350      	adds	r3, #80	; 0x50
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d108      	bne.n	8006ade <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6818      	ldr	r0, [r3, #0]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	2101      	movs	r1, #1
 8006ada:	f008 f845 	bl	800eb68 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	4619      	mov	r1, r3
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f00a f864 	bl	8010bb2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	f003 0308 	and.w	r3, r3, #8
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d008      	beq.n	8006b06 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af6:	015a      	lsls	r2, r3, #5
 8006af8:	69fb      	ldr	r3, [r7, #28]
 8006afa:	4413      	add	r3, r2
 8006afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b00:	461a      	mov	r2, r3
 8006b02:	2308      	movs	r3, #8
 8006b04:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	f003 0310 	and.w	r3, r3, #16
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d008      	beq.n	8006b22 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b12:	015a      	lsls	r2, r3, #5
 8006b14:	69fb      	ldr	r3, [r7, #28]
 8006b16:	4413      	add	r3, r2
 8006b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b1c:	461a      	mov	r2, r3
 8006b1e:	2310      	movs	r3, #16
 8006b20:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d008      	beq.n	8006b3e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2e:	015a      	lsls	r2, r3, #5
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	4413      	add	r3, r2
 8006b34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b38:	461a      	mov	r2, r3
 8006b3a:	2340      	movs	r3, #64	; 0x40
 8006b3c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	f003 0302 	and.w	r3, r3, #2
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d008      	beq.n	8006b5a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4a:	015a      	lsls	r2, r3, #5
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	4413      	add	r3, r2
 8006b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b54:	461a      	mov	r2, r3
 8006b56:	2302      	movs	r3, #2
 8006b58:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d003      	beq.n	8006b6c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006b64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 fc48 	bl	80073fc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6e:	3301      	adds	r3, #1
 8006b70:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b74:	085b      	lsrs	r3, r3, #1
 8006b76:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	f47f af49 	bne.w	8006a12 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4618      	mov	r0, r3
 8006b86:	f007 ff29 	bl	800e9dc <USB_ReadInterrupts>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b94:	d122      	bne.n	8006bdc <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006b96:	69fb      	ldr	r3, [r7, #28]
 8006b98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	69fa      	ldr	r2, [r7, #28]
 8006ba0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ba4:	f023 0301 	bic.w	r3, r3, #1
 8006ba8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d108      	bne.n	8006bc6 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006bbc:	2100      	movs	r1, #0
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 fe78 	bl	80078b4 <HAL_PCDEx_LPM_Callback>
 8006bc4:	e002      	b.n	8006bcc <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f00a f86a 	bl	8010ca0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	695a      	ldr	r2, [r3, #20]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006bda:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4618      	mov	r0, r3
 8006be2:	f007 fefb 	bl	800e9dc <USB_ReadInterrupts>
 8006be6:	4603      	mov	r3, r0
 8006be8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bf0:	d112      	bne.n	8006c18 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006bf2:	69fb      	ldr	r3, [r7, #28]
 8006bf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	f003 0301 	and.w	r3, r3, #1
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d102      	bne.n	8006c08 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f00a f826 	bl	8010c54 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	695a      	ldr	r2, [r3, #20]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006c16:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f007 fedd 	bl	800e9dc <USB_ReadInterrupts>
 8006c22:	4603      	mov	r3, r0
 8006c24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c2c:	d121      	bne.n	8006c72 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	695a      	ldr	r2, [r3, #20]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8006c3c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d111      	bne.n	8006c6c <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c56:	089b      	lsrs	r3, r3, #2
 8006c58:	f003 020f 	and.w	r2, r3, #15
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006c62:	2101      	movs	r1, #1
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f000 fe25 	bl	80078b4 <HAL_PCDEx_LPM_Callback>
 8006c6a:	e002      	b.n	8006c72 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f009 fff1 	bl	8010c54 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4618      	mov	r0, r3
 8006c78:	f007 feb0 	bl	800e9dc <USB_ReadInterrupts>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006c82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c86:	f040 80c7 	bne.w	8006e18 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006c8a:	69fb      	ldr	r3, [r7, #28]
 8006c8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	69fa      	ldr	r2, [r7, #28]
 8006c94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c98:	f023 0301 	bic.w	r3, r3, #1
 8006c9c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	2110      	movs	r1, #16
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f006 ff39 	bl	800db1c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006caa:	2300      	movs	r3, #0
 8006cac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cae:	e056      	b.n	8006d5e <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb2:	015a      	lsls	r2, r3, #5
 8006cb4:	69fb      	ldr	r3, [r7, #28]
 8006cb6:	4413      	add	r3, r2
 8006cb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006cc2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cc6:	015a      	lsls	r2, r3, #5
 8006cc8:	69fb      	ldr	r3, [r7, #28]
 8006cca:	4413      	add	r3, r2
 8006ccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cd4:	0151      	lsls	r1, r2, #5
 8006cd6:	69fa      	ldr	r2, [r7, #28]
 8006cd8:	440a      	add	r2, r1
 8006cda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cde:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006ce2:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce6:	015a      	lsls	r2, r3, #5
 8006ce8:	69fb      	ldr	r3, [r7, #28]
 8006cea:	4413      	add	r3, r2
 8006cec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cf4:	0151      	lsls	r1, r2, #5
 8006cf6:	69fa      	ldr	r2, [r7, #28]
 8006cf8:	440a      	add	r2, r1
 8006cfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cfe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006d02:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d06:	015a      	lsls	r2, r3, #5
 8006d08:	69fb      	ldr	r3, [r7, #28]
 8006d0a:	4413      	add	r3, r2
 8006d0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d10:	461a      	mov	r2, r3
 8006d12:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006d16:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d1a:	015a      	lsls	r2, r3, #5
 8006d1c:	69fb      	ldr	r3, [r7, #28]
 8006d1e:	4413      	add	r3, r2
 8006d20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d28:	0151      	lsls	r1, r2, #5
 8006d2a:	69fa      	ldr	r2, [r7, #28]
 8006d2c:	440a      	add	r2, r1
 8006d2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d32:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006d36:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d3a:	015a      	lsls	r2, r3, #5
 8006d3c:	69fb      	ldr	r3, [r7, #28]
 8006d3e:	4413      	add	r3, r2
 8006d40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d48:	0151      	lsls	r1, r2, #5
 8006d4a:	69fa      	ldr	r2, [r7, #28]
 8006d4c:	440a      	add	r2, r1
 8006d4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d52:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006d56:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d3a3      	bcc.n	8006cb0 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006d68:	69fb      	ldr	r3, [r7, #28]
 8006d6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d6e:	69db      	ldr	r3, [r3, #28]
 8006d70:	69fa      	ldr	r2, [r7, #28]
 8006d72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d76:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006d7a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d016      	beq.n	8006db2 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006d84:	69fb      	ldr	r3, [r7, #28]
 8006d86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d8e:	69fa      	ldr	r2, [r7, #28]
 8006d90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d94:	f043 030b 	orr.w	r3, r3, #11
 8006d98:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006d9c:	69fb      	ldr	r3, [r7, #28]
 8006d9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006da4:	69fa      	ldr	r2, [r7, #28]
 8006da6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006daa:	f043 030b 	orr.w	r3, r3, #11
 8006dae:	6453      	str	r3, [r2, #68]	; 0x44
 8006db0:	e015      	b.n	8006dde <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006db2:	69fb      	ldr	r3, [r7, #28]
 8006db4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006db8:	695a      	ldr	r2, [r3, #20]
 8006dba:	69fb      	ldr	r3, [r7, #28]
 8006dbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dc0:	4619      	mov	r1, r3
 8006dc2:	f242 032b 	movw	r3, #8235	; 0x202b
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006dca:	69fb      	ldr	r3, [r7, #28]
 8006dcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dd0:	691b      	ldr	r3, [r3, #16]
 8006dd2:	69fa      	ldr	r2, [r7, #28]
 8006dd4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006dd8:	f043 030b 	orr.w	r3, r3, #11
 8006ddc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006dde:	69fb      	ldr	r3, [r7, #28]
 8006de0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	69fa      	ldr	r2, [r7, #28]
 8006de8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006dec:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006df0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6818      	ldr	r0, [r3, #0]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	691b      	ldr	r3, [r3, #16]
 8006dfa:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006e02:	461a      	mov	r2, r3
 8006e04:	f007 feb0 	bl	800eb68 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	695a      	ldr	r2, [r3, #20]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006e16:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f007 fddd 	bl	800e9dc <USB_ReadInterrupts>
 8006e22:	4603      	mov	r3, r0
 8006e24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e2c:	d124      	bne.n	8006e78 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4618      	mov	r0, r3
 8006e34:	f007 fe74 	bl	800eb20 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f006 fece 	bl	800dbde <USB_GetDevSpeed>
 8006e42:	4603      	mov	r3, r0
 8006e44:	461a      	mov	r2, r3
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681c      	ldr	r4, [r3, #0]
 8006e4e:	f001 fce5 	bl	800881c <HAL_RCC_GetHCLKFreq>
 8006e52:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006e58:	b2db      	uxtb	r3, r3
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	4620      	mov	r0, r4
 8006e5e:	f006 fc11 	bl	800d684 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f009 fecd 	bl	8010c02 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	695a      	ldr	r2, [r3, #20]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006e76:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f007 fdad 	bl	800e9dc <USB_ReadInterrupts>
 8006e82:	4603      	mov	r3, r0
 8006e84:	f003 0308 	and.w	r3, r3, #8
 8006e88:	2b08      	cmp	r3, #8
 8006e8a:	d10a      	bne.n	8006ea2 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f009 feaa 	bl	8010be6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	695a      	ldr	r2, [r3, #20]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f002 0208 	and.w	r2, r2, #8
 8006ea0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f007 fd98 	bl	800e9dc <USB_ReadInterrupts>
 8006eac:	4603      	mov	r3, r0
 8006eae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006eb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006eb6:	d10f      	bne.n	8006ed8 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ebe:	b2db      	uxtb	r3, r3
 8006ec0:	4619      	mov	r1, r3
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f009 ff0c 	bl	8010ce0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	695a      	ldr	r2, [r3, #20]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006ed6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4618      	mov	r0, r3
 8006ede:	f007 fd7d 	bl	800e9dc <USB_ReadInterrupts>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006ee8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006eec:	d10f      	bne.n	8006f0e <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef4:	b2db      	uxtb	r3, r3
 8006ef6:	4619      	mov	r1, r3
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f009 fedf 	bl	8010cbc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	695a      	ldr	r2, [r3, #20]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006f0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4618      	mov	r0, r3
 8006f14:	f007 fd62 	bl	800e9dc <USB_ReadInterrupts>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f22:	d10a      	bne.n	8006f3a <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f009 feed 	bl	8010d04 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	695a      	ldr	r2, [r3, #20]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006f38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f007 fd4c 	bl	800e9dc <USB_ReadInterrupts>
 8006f44:	4603      	mov	r3, r0
 8006f46:	f003 0304 	and.w	r3, r3, #4
 8006f4a:	2b04      	cmp	r3, #4
 8006f4c:	d115      	bne.n	8006f7a <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006f56:	69bb      	ldr	r3, [r7, #24]
 8006f58:	f003 0304 	and.w	r3, r3, #4
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d002      	beq.n	8006f66 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f009 fedd 	bl	8010d20 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	6859      	ldr	r1, [r3, #4]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	69ba      	ldr	r2, [r7, #24]
 8006f72:	430a      	orrs	r2, r1
 8006f74:	605a      	str	r2, [r3, #4]
 8006f76:	e000      	b.n	8006f7a <HAL_PCD_IRQHandler+0x7b8>
      return;
 8006f78:	bf00      	nop
    }
  }
}
 8006f7a:	3734      	adds	r7, #52	; 0x34
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd90      	pop	{r4, r7, pc}

08006f80 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b082      	sub	sp, #8
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	460b      	mov	r3, r1
 8006f8a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006f92:	2b01      	cmp	r3, #1
 8006f94:	d101      	bne.n	8006f9a <HAL_PCD_SetAddress+0x1a>
 8006f96:	2302      	movs	r3, #2
 8006f98:	e013      	b.n	8006fc2 <HAL_PCD_SetAddress+0x42>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	78fa      	ldrb	r2, [r7, #3]
 8006fa6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	78fa      	ldrb	r2, [r7, #3]
 8006fb0:	4611      	mov	r1, r2
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f007 fcaa 	bl	800e90c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006fc0:	2300      	movs	r3, #0
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3708      	adds	r7, #8
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}

08006fca <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006fca:	b580      	push	{r7, lr}
 8006fcc:	b084      	sub	sp, #16
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
 8006fd2:	4608      	mov	r0, r1
 8006fd4:	4611      	mov	r1, r2
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	4603      	mov	r3, r0
 8006fda:	70fb      	strb	r3, [r7, #3]
 8006fdc:	460b      	mov	r3, r1
 8006fde:	803b      	strh	r3, [r7, #0]
 8006fe0:	4613      	mov	r3, r2
 8006fe2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006fe8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	da0f      	bge.n	8007010 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006ff0:	78fb      	ldrb	r3, [r7, #3]
 8006ff2:	f003 020f 	and.w	r2, r3, #15
 8006ff6:	4613      	mov	r3, r2
 8006ff8:	00db      	lsls	r3, r3, #3
 8006ffa:	1a9b      	subs	r3, r3, r2
 8006ffc:	009b      	lsls	r3, r3, #2
 8006ffe:	3338      	adds	r3, #56	; 0x38
 8007000:	687a      	ldr	r2, [r7, #4]
 8007002:	4413      	add	r3, r2
 8007004:	3304      	adds	r3, #4
 8007006:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2201      	movs	r2, #1
 800700c:	705a      	strb	r2, [r3, #1]
 800700e:	e00f      	b.n	8007030 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007010:	78fb      	ldrb	r3, [r7, #3]
 8007012:	f003 020f 	and.w	r2, r3, #15
 8007016:	4613      	mov	r3, r2
 8007018:	00db      	lsls	r3, r3, #3
 800701a:	1a9b      	subs	r3, r3, r2
 800701c:	009b      	lsls	r3, r3, #2
 800701e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	4413      	add	r3, r2
 8007026:	3304      	adds	r3, #4
 8007028:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2200      	movs	r2, #0
 800702e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007030:	78fb      	ldrb	r3, [r7, #3]
 8007032:	f003 030f 	and.w	r3, r3, #15
 8007036:	b2da      	uxtb	r2, r3
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800703c:	883a      	ldrh	r2, [r7, #0]
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	78ba      	ldrb	r2, [r7, #2]
 8007046:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	785b      	ldrb	r3, [r3, #1]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d004      	beq.n	800705a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	b29a      	uxth	r2, r3
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800705a:	78bb      	ldrb	r3, [r7, #2]
 800705c:	2b02      	cmp	r3, #2
 800705e:	d102      	bne.n	8007066 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2200      	movs	r2, #0
 8007064:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800706c:	2b01      	cmp	r3, #1
 800706e:	d101      	bne.n	8007074 <HAL_PCD_EP_Open+0xaa>
 8007070:	2302      	movs	r3, #2
 8007072:	e00e      	b.n	8007092 <HAL_PCD_EP_Open+0xc8>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2201      	movs	r2, #1
 8007078:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	68f9      	ldr	r1, [r7, #12]
 8007082:	4618      	mov	r0, r3
 8007084:	f006 fdd0 	bl	800dc28 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2200      	movs	r2, #0
 800708c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8007090:	7afb      	ldrb	r3, [r7, #11]
}
 8007092:	4618      	mov	r0, r3
 8007094:	3710      	adds	r7, #16
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}

0800709a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800709a:	b580      	push	{r7, lr}
 800709c:	b084      	sub	sp, #16
 800709e:	af00      	add	r7, sp, #0
 80070a0:	6078      	str	r0, [r7, #4]
 80070a2:	460b      	mov	r3, r1
 80070a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80070a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	da0f      	bge.n	80070ce <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80070ae:	78fb      	ldrb	r3, [r7, #3]
 80070b0:	f003 020f 	and.w	r2, r3, #15
 80070b4:	4613      	mov	r3, r2
 80070b6:	00db      	lsls	r3, r3, #3
 80070b8:	1a9b      	subs	r3, r3, r2
 80070ba:	009b      	lsls	r3, r3, #2
 80070bc:	3338      	adds	r3, #56	; 0x38
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	4413      	add	r3, r2
 80070c2:	3304      	adds	r3, #4
 80070c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2201      	movs	r2, #1
 80070ca:	705a      	strb	r2, [r3, #1]
 80070cc:	e00f      	b.n	80070ee <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80070ce:	78fb      	ldrb	r3, [r7, #3]
 80070d0:	f003 020f 	and.w	r2, r3, #15
 80070d4:	4613      	mov	r3, r2
 80070d6:	00db      	lsls	r3, r3, #3
 80070d8:	1a9b      	subs	r3, r3, r2
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80070e0:	687a      	ldr	r2, [r7, #4]
 80070e2:	4413      	add	r3, r2
 80070e4:	3304      	adds	r3, #4
 80070e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2200      	movs	r2, #0
 80070ec:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80070ee:	78fb      	ldrb	r3, [r7, #3]
 80070f0:	f003 030f 	and.w	r3, r3, #15
 80070f4:	b2da      	uxtb	r2, r3
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007100:	2b01      	cmp	r3, #1
 8007102:	d101      	bne.n	8007108 <HAL_PCD_EP_Close+0x6e>
 8007104:	2302      	movs	r3, #2
 8007106:	e00e      	b.n	8007126 <HAL_PCD_EP_Close+0x8c>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2201      	movs	r2, #1
 800710c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	68f9      	ldr	r1, [r7, #12]
 8007116:	4618      	mov	r0, r3
 8007118:	f006 fe0e 	bl	800dd38 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8007124:	2300      	movs	r3, #0
}
 8007126:	4618      	mov	r0, r3
 8007128:	3710      	adds	r7, #16
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}

0800712e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800712e:	b580      	push	{r7, lr}
 8007130:	b086      	sub	sp, #24
 8007132:	af00      	add	r7, sp, #0
 8007134:	60f8      	str	r0, [r7, #12]
 8007136:	607a      	str	r2, [r7, #4]
 8007138:	603b      	str	r3, [r7, #0]
 800713a:	460b      	mov	r3, r1
 800713c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800713e:	7afb      	ldrb	r3, [r7, #11]
 8007140:	f003 020f 	and.w	r2, r3, #15
 8007144:	4613      	mov	r3, r2
 8007146:	00db      	lsls	r3, r3, #3
 8007148:	1a9b      	subs	r3, r3, r2
 800714a:	009b      	lsls	r3, r3, #2
 800714c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007150:	68fa      	ldr	r2, [r7, #12]
 8007152:	4413      	add	r3, r2
 8007154:	3304      	adds	r3, #4
 8007156:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	687a      	ldr	r2, [r7, #4]
 800715c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	683a      	ldr	r2, [r7, #0]
 8007162:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	2200      	movs	r2, #0
 8007168:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	2200      	movs	r2, #0
 800716e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007170:	7afb      	ldrb	r3, [r7, #11]
 8007172:	f003 030f 	and.w	r3, r3, #15
 8007176:	b2da      	uxtb	r2, r3
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	691b      	ldr	r3, [r3, #16]
 8007180:	2b01      	cmp	r3, #1
 8007182:	d102      	bne.n	800718a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800718a:	7afb      	ldrb	r3, [r7, #11]
 800718c:	f003 030f 	and.w	r3, r3, #15
 8007190:	2b00      	cmp	r3, #0
 8007192:	d109      	bne.n	80071a8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	6818      	ldr	r0, [r3, #0]
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	691b      	ldr	r3, [r3, #16]
 800719c:	b2db      	uxtb	r3, r3
 800719e:	461a      	mov	r2, r3
 80071a0:	6979      	ldr	r1, [r7, #20]
 80071a2:	f007 f8f1 	bl	800e388 <USB_EP0StartXfer>
 80071a6:	e008      	b.n	80071ba <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	6818      	ldr	r0, [r3, #0]
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	691b      	ldr	r3, [r3, #16]
 80071b0:	b2db      	uxtb	r3, r3
 80071b2:	461a      	mov	r2, r3
 80071b4:	6979      	ldr	r1, [r7, #20]
 80071b6:	f006 fe9b 	bl	800def0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80071ba:	2300      	movs	r3, #0
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3718      	adds	r7, #24
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}

080071c4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b083      	sub	sp, #12
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	460b      	mov	r3, r1
 80071ce:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80071d0:	78fb      	ldrb	r3, [r7, #3]
 80071d2:	f003 020f 	and.w	r2, r3, #15
 80071d6:	6879      	ldr	r1, [r7, #4]
 80071d8:	4613      	mov	r3, r2
 80071da:	00db      	lsls	r3, r3, #3
 80071dc:	1a9b      	subs	r3, r3, r2
 80071de:	009b      	lsls	r3, r3, #2
 80071e0:	440b      	add	r3, r1
 80071e2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80071e6:	681b      	ldr	r3, [r3, #0]
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	370c      	adds	r7, #12
 80071ec:	46bd      	mov	sp, r7
 80071ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f2:	4770      	bx	lr

080071f4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b086      	sub	sp, #24
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	60f8      	str	r0, [r7, #12]
 80071fc:	607a      	str	r2, [r7, #4]
 80071fe:	603b      	str	r3, [r7, #0]
 8007200:	460b      	mov	r3, r1
 8007202:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007204:	7afb      	ldrb	r3, [r7, #11]
 8007206:	f003 020f 	and.w	r2, r3, #15
 800720a:	4613      	mov	r3, r2
 800720c:	00db      	lsls	r3, r3, #3
 800720e:	1a9b      	subs	r3, r3, r2
 8007210:	009b      	lsls	r3, r3, #2
 8007212:	3338      	adds	r3, #56	; 0x38
 8007214:	68fa      	ldr	r2, [r7, #12]
 8007216:	4413      	add	r3, r2
 8007218:	3304      	adds	r3, #4
 800721a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	687a      	ldr	r2, [r7, #4]
 8007220:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	683a      	ldr	r2, [r7, #0]
 8007226:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	2200      	movs	r2, #0
 800722c:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	2201      	movs	r2, #1
 8007232:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007234:	7afb      	ldrb	r3, [r7, #11]
 8007236:	f003 030f 	and.w	r3, r3, #15
 800723a:	b2da      	uxtb	r2, r3
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	691b      	ldr	r3, [r3, #16]
 8007244:	2b01      	cmp	r3, #1
 8007246:	d102      	bne.n	800724e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007248:	687a      	ldr	r2, [r7, #4]
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800724e:	7afb      	ldrb	r3, [r7, #11]
 8007250:	f003 030f 	and.w	r3, r3, #15
 8007254:	2b00      	cmp	r3, #0
 8007256:	d109      	bne.n	800726c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	6818      	ldr	r0, [r3, #0]
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	691b      	ldr	r3, [r3, #16]
 8007260:	b2db      	uxtb	r3, r3
 8007262:	461a      	mov	r2, r3
 8007264:	6979      	ldr	r1, [r7, #20]
 8007266:	f007 f88f 	bl	800e388 <USB_EP0StartXfer>
 800726a:	e008      	b.n	800727e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	6818      	ldr	r0, [r3, #0]
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	691b      	ldr	r3, [r3, #16]
 8007274:	b2db      	uxtb	r3, r3
 8007276:	461a      	mov	r2, r3
 8007278:	6979      	ldr	r1, [r7, #20]
 800727a:	f006 fe39 	bl	800def0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800727e:	2300      	movs	r3, #0
}
 8007280:	4618      	mov	r0, r3
 8007282:	3718      	adds	r7, #24
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}

08007288 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b084      	sub	sp, #16
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	460b      	mov	r3, r1
 8007292:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007294:	78fb      	ldrb	r3, [r7, #3]
 8007296:	f003 020f 	and.w	r2, r3, #15
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	429a      	cmp	r2, r3
 80072a0:	d901      	bls.n	80072a6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80072a2:	2301      	movs	r3, #1
 80072a4:	e050      	b.n	8007348 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80072a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	da0f      	bge.n	80072ce <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80072ae:	78fb      	ldrb	r3, [r7, #3]
 80072b0:	f003 020f 	and.w	r2, r3, #15
 80072b4:	4613      	mov	r3, r2
 80072b6:	00db      	lsls	r3, r3, #3
 80072b8:	1a9b      	subs	r3, r3, r2
 80072ba:	009b      	lsls	r3, r3, #2
 80072bc:	3338      	adds	r3, #56	; 0x38
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	4413      	add	r3, r2
 80072c2:	3304      	adds	r3, #4
 80072c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2201      	movs	r2, #1
 80072ca:	705a      	strb	r2, [r3, #1]
 80072cc:	e00d      	b.n	80072ea <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80072ce:	78fa      	ldrb	r2, [r7, #3]
 80072d0:	4613      	mov	r3, r2
 80072d2:	00db      	lsls	r3, r3, #3
 80072d4:	1a9b      	subs	r3, r3, r2
 80072d6:	009b      	lsls	r3, r3, #2
 80072d8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80072dc:	687a      	ldr	r2, [r7, #4]
 80072de:	4413      	add	r3, r2
 80072e0:	3304      	adds	r3, #4
 80072e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2200      	movs	r2, #0
 80072e8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2201      	movs	r2, #1
 80072ee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80072f0:	78fb      	ldrb	r3, [r7, #3]
 80072f2:	f003 030f 	and.w	r3, r3, #15
 80072f6:	b2da      	uxtb	r2, r3
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007302:	2b01      	cmp	r3, #1
 8007304:	d101      	bne.n	800730a <HAL_PCD_EP_SetStall+0x82>
 8007306:	2302      	movs	r3, #2
 8007308:	e01e      	b.n	8007348 <HAL_PCD_EP_SetStall+0xc0>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2201      	movs	r2, #1
 800730e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	68f9      	ldr	r1, [r7, #12]
 8007318:	4618      	mov	r0, r3
 800731a:	f007 fa23 	bl	800e764 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800731e:	78fb      	ldrb	r3, [r7, #3]
 8007320:	f003 030f 	and.w	r3, r3, #15
 8007324:	2b00      	cmp	r3, #0
 8007326:	d10a      	bne.n	800733e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6818      	ldr	r0, [r3, #0]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	691b      	ldr	r3, [r3, #16]
 8007330:	b2d9      	uxtb	r1, r3
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007338:	461a      	mov	r2, r3
 800733a:	f007 fc15 	bl	800eb68 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2200      	movs	r2, #0
 8007342:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007346:	2300      	movs	r3, #0
}
 8007348:	4618      	mov	r0, r3
 800734a:	3710      	adds	r7, #16
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}

08007350 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b084      	sub	sp, #16
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
 8007358:	460b      	mov	r3, r1
 800735a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800735c:	78fb      	ldrb	r3, [r7, #3]
 800735e:	f003 020f 	and.w	r2, r3, #15
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	429a      	cmp	r2, r3
 8007368:	d901      	bls.n	800736e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800736a:	2301      	movs	r3, #1
 800736c:	e042      	b.n	80073f4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800736e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007372:	2b00      	cmp	r3, #0
 8007374:	da0f      	bge.n	8007396 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007376:	78fb      	ldrb	r3, [r7, #3]
 8007378:	f003 020f 	and.w	r2, r3, #15
 800737c:	4613      	mov	r3, r2
 800737e:	00db      	lsls	r3, r3, #3
 8007380:	1a9b      	subs	r3, r3, r2
 8007382:	009b      	lsls	r3, r3, #2
 8007384:	3338      	adds	r3, #56	; 0x38
 8007386:	687a      	ldr	r2, [r7, #4]
 8007388:	4413      	add	r3, r2
 800738a:	3304      	adds	r3, #4
 800738c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2201      	movs	r2, #1
 8007392:	705a      	strb	r2, [r3, #1]
 8007394:	e00f      	b.n	80073b6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007396:	78fb      	ldrb	r3, [r7, #3]
 8007398:	f003 020f 	and.w	r2, r3, #15
 800739c:	4613      	mov	r3, r2
 800739e:	00db      	lsls	r3, r3, #3
 80073a0:	1a9b      	subs	r3, r3, r2
 80073a2:	009b      	lsls	r3, r3, #2
 80073a4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	4413      	add	r3, r2
 80073ac:	3304      	adds	r3, #4
 80073ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2200      	movs	r2, #0
 80073b4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2200      	movs	r2, #0
 80073ba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80073bc:	78fb      	ldrb	r3, [r7, #3]
 80073be:	f003 030f 	and.w	r3, r3, #15
 80073c2:	b2da      	uxtb	r2, r3
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80073ce:	2b01      	cmp	r3, #1
 80073d0:	d101      	bne.n	80073d6 <HAL_PCD_EP_ClrStall+0x86>
 80073d2:	2302      	movs	r3, #2
 80073d4:	e00e      	b.n	80073f4 <HAL_PCD_EP_ClrStall+0xa4>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2201      	movs	r2, #1
 80073da:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	68f9      	ldr	r1, [r7, #12]
 80073e4:	4618      	mov	r0, r3
 80073e6:	f007 fa2b 	bl	800e840 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2200      	movs	r2, #0
 80073ee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80073f2:	2300      	movs	r3, #0
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3710      	adds	r7, #16
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}

080073fc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b08a      	sub	sp, #40	; 0x28
 8007400:	af02      	add	r7, sp, #8
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007410:	683a      	ldr	r2, [r7, #0]
 8007412:	4613      	mov	r3, r2
 8007414:	00db      	lsls	r3, r3, #3
 8007416:	1a9b      	subs	r3, r3, r2
 8007418:	009b      	lsls	r3, r3, #2
 800741a:	3338      	adds	r3, #56	; 0x38
 800741c:	687a      	ldr	r2, [r7, #4]
 800741e:	4413      	add	r3, r2
 8007420:	3304      	adds	r3, #4
 8007422:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	699a      	ldr	r2, [r3, #24]
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	695b      	ldr	r3, [r3, #20]
 800742c:	429a      	cmp	r2, r3
 800742e:	d901      	bls.n	8007434 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007430:	2301      	movs	r3, #1
 8007432:	e06c      	b.n	800750e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	695a      	ldr	r2, [r3, #20]
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	699b      	ldr	r3, [r3, #24]
 800743c:	1ad3      	subs	r3, r2, r3
 800743e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	689b      	ldr	r3, [r3, #8]
 8007444:	69fa      	ldr	r2, [r7, #28]
 8007446:	429a      	cmp	r2, r3
 8007448:	d902      	bls.n	8007450 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	689b      	ldr	r3, [r3, #8]
 800744e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007450:	69fb      	ldr	r3, [r7, #28]
 8007452:	3303      	adds	r3, #3
 8007454:	089b      	lsrs	r3, r3, #2
 8007456:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007458:	e02b      	b.n	80074b2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	695a      	ldr	r2, [r3, #20]
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	699b      	ldr	r3, [r3, #24]
 8007462:	1ad3      	subs	r3, r2, r3
 8007464:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	69fa      	ldr	r2, [r7, #28]
 800746c:	429a      	cmp	r2, r3
 800746e:	d902      	bls.n	8007476 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007476:	69fb      	ldr	r3, [r7, #28]
 8007478:	3303      	adds	r3, #3
 800747a:	089b      	lsrs	r3, r3, #2
 800747c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	68d9      	ldr	r1, [r3, #12]
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	b2da      	uxtb	r2, r3
 8007486:	69fb      	ldr	r3, [r7, #28]
 8007488:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800748e:	b2db      	uxtb	r3, r3
 8007490:	9300      	str	r3, [sp, #0]
 8007492:	4603      	mov	r3, r0
 8007494:	6978      	ldr	r0, [r7, #20]
 8007496:	f007 f8cf 	bl	800e638 <USB_WritePacket>

    ep->xfer_buff  += len;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	68da      	ldr	r2, [r3, #12]
 800749e:	69fb      	ldr	r3, [r7, #28]
 80074a0:	441a      	add	r2, r3
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	699a      	ldr	r2, [r3, #24]
 80074aa:	69fb      	ldr	r3, [r7, #28]
 80074ac:	441a      	add	r2, r3
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	015a      	lsls	r2, r3, #5
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	4413      	add	r3, r2
 80074ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074be:	699b      	ldr	r3, [r3, #24]
 80074c0:	b29b      	uxth	r3, r3
 80074c2:	69ba      	ldr	r2, [r7, #24]
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d809      	bhi.n	80074dc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	699a      	ldr	r2, [r3, #24]
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80074d0:	429a      	cmp	r2, r3
 80074d2:	d203      	bcs.n	80074dc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	695b      	ldr	r3, [r3, #20]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d1be      	bne.n	800745a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	695a      	ldr	r2, [r3, #20]
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	699b      	ldr	r3, [r3, #24]
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d811      	bhi.n	800750c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	f003 030f 	and.w	r3, r3, #15
 80074ee:	2201      	movs	r2, #1
 80074f0:	fa02 f303 	lsl.w	r3, r2, r3
 80074f4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	43db      	mvns	r3, r3
 8007502:	6939      	ldr	r1, [r7, #16]
 8007504:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007508:	4013      	ands	r3, r2
 800750a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800750c:	2300      	movs	r3, #0
}
 800750e:	4618      	mov	r0, r3
 8007510:	3720      	adds	r7, #32
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}
	...

08007518 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b086      	sub	sp, #24
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	333c      	adds	r3, #60	; 0x3c
 8007530:	3304      	adds	r3, #4
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	015a      	lsls	r2, r3, #5
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	4413      	add	r3, r2
 800753e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007542:	689b      	ldr	r3, [r3, #8]
 8007544:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	691b      	ldr	r3, [r3, #16]
 800754a:	2b01      	cmp	r3, #1
 800754c:	f040 80a0 	bne.w	8007690 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	f003 0308 	and.w	r3, r3, #8
 8007556:	2b00      	cmp	r3, #0
 8007558:	d015      	beq.n	8007586 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	4a72      	ldr	r2, [pc, #456]	; (8007728 <PCD_EP_OutXfrComplete_int+0x210>)
 800755e:	4293      	cmp	r3, r2
 8007560:	f240 80dd 	bls.w	800771e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800756a:	2b00      	cmp	r3, #0
 800756c:	f000 80d7 	beq.w	800771e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	015a      	lsls	r2, r3, #5
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	4413      	add	r3, r2
 8007578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800757c:	461a      	mov	r2, r3
 800757e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007582:	6093      	str	r3, [r2, #8]
 8007584:	e0cb      	b.n	800771e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	f003 0320 	and.w	r3, r3, #32
 800758c:	2b00      	cmp	r3, #0
 800758e:	d009      	beq.n	80075a4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	015a      	lsls	r2, r3, #5
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	4413      	add	r3, r2
 8007598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800759c:	461a      	mov	r2, r3
 800759e:	2320      	movs	r3, #32
 80075a0:	6093      	str	r3, [r2, #8]
 80075a2:	e0bc      	b.n	800771e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	f040 80b7 	bne.w	800771e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	4a5d      	ldr	r2, [pc, #372]	; (8007728 <PCD_EP_OutXfrComplete_int+0x210>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d90f      	bls.n	80075d8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d00a      	beq.n	80075d8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	015a      	lsls	r2, r3, #5
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	4413      	add	r3, r2
 80075ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075ce:	461a      	mov	r2, r3
 80075d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075d4:	6093      	str	r3, [r2, #8]
 80075d6:	e0a2      	b.n	800771e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80075d8:	6879      	ldr	r1, [r7, #4]
 80075da:	683a      	ldr	r2, [r7, #0]
 80075dc:	4613      	mov	r3, r2
 80075de:	00db      	lsls	r3, r3, #3
 80075e0:	1a9b      	subs	r3, r3, r2
 80075e2:	009b      	lsls	r3, r3, #2
 80075e4:	440b      	add	r3, r1
 80075e6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80075ea:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	0159      	lsls	r1, r3, #5
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	440b      	add	r3, r1
 80075f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075f8:	691b      	ldr	r3, [r3, #16]
 80075fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80075fe:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	683a      	ldr	r2, [r7, #0]
 8007604:	4613      	mov	r3, r2
 8007606:	00db      	lsls	r3, r3, #3
 8007608:	1a9b      	subs	r3, r3, r2
 800760a:	009b      	lsls	r3, r3, #2
 800760c:	4403      	add	r3, r0
 800760e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8007612:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8007614:	6879      	ldr	r1, [r7, #4]
 8007616:	683a      	ldr	r2, [r7, #0]
 8007618:	4613      	mov	r3, r2
 800761a:	00db      	lsls	r3, r3, #3
 800761c:	1a9b      	subs	r3, r3, r2
 800761e:	009b      	lsls	r3, r3, #2
 8007620:	440b      	add	r3, r1
 8007622:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007626:	6819      	ldr	r1, [r3, #0]
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	683a      	ldr	r2, [r7, #0]
 800762c:	4613      	mov	r3, r2
 800762e:	00db      	lsls	r3, r3, #3
 8007630:	1a9b      	subs	r3, r3, r2
 8007632:	009b      	lsls	r3, r3, #2
 8007634:	4403      	add	r3, r0
 8007636:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4419      	add	r1, r3
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	683a      	ldr	r2, [r7, #0]
 8007642:	4613      	mov	r3, r2
 8007644:	00db      	lsls	r3, r3, #3
 8007646:	1a9b      	subs	r3, r3, r2
 8007648:	009b      	lsls	r3, r3, #2
 800764a:	4403      	add	r3, r0
 800764c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007650:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d114      	bne.n	8007682 <PCD_EP_OutXfrComplete_int+0x16a>
 8007658:	6879      	ldr	r1, [r7, #4]
 800765a:	683a      	ldr	r2, [r7, #0]
 800765c:	4613      	mov	r3, r2
 800765e:	00db      	lsls	r3, r3, #3
 8007660:	1a9b      	subs	r3, r3, r2
 8007662:	009b      	lsls	r3, r3, #2
 8007664:	440b      	add	r3, r1
 8007666:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d108      	bne.n	8007682 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6818      	ldr	r0, [r3, #0]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800767a:	461a      	mov	r2, r3
 800767c:	2101      	movs	r1, #1
 800767e:	f007 fa73 	bl	800eb68 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	b2db      	uxtb	r3, r3
 8007686:	4619      	mov	r1, r3
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f009 fa77 	bl	8010b7c <HAL_PCD_DataOutStageCallback>
 800768e:	e046      	b.n	800771e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	4a26      	ldr	r2, [pc, #152]	; (800772c <PCD_EP_OutXfrComplete_int+0x214>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d124      	bne.n	80076e2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d00a      	beq.n	80076b8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	015a      	lsls	r2, r3, #5
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	4413      	add	r3, r2
 80076aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076ae:	461a      	mov	r2, r3
 80076b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076b4:	6093      	str	r3, [r2, #8]
 80076b6:	e032      	b.n	800771e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	f003 0320 	and.w	r3, r3, #32
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d008      	beq.n	80076d4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	015a      	lsls	r2, r3, #5
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	4413      	add	r3, r2
 80076ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076ce:	461a      	mov	r2, r3
 80076d0:	2320      	movs	r3, #32
 80076d2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	b2db      	uxtb	r3, r3
 80076d8:	4619      	mov	r1, r3
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f009 fa4e 	bl	8010b7c <HAL_PCD_DataOutStageCallback>
 80076e0:	e01d      	b.n	800771e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d114      	bne.n	8007712 <PCD_EP_OutXfrComplete_int+0x1fa>
 80076e8:	6879      	ldr	r1, [r7, #4]
 80076ea:	683a      	ldr	r2, [r7, #0]
 80076ec:	4613      	mov	r3, r2
 80076ee:	00db      	lsls	r3, r3, #3
 80076f0:	1a9b      	subs	r3, r3, r2
 80076f2:	009b      	lsls	r3, r3, #2
 80076f4:	440b      	add	r3, r1
 80076f6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d108      	bne.n	8007712 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6818      	ldr	r0, [r3, #0]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800770a:	461a      	mov	r2, r3
 800770c:	2100      	movs	r1, #0
 800770e:	f007 fa2b 	bl	800eb68 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	b2db      	uxtb	r3, r3
 8007716:	4619      	mov	r1, r3
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f009 fa2f 	bl	8010b7c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800771e:	2300      	movs	r3, #0
}
 8007720:	4618      	mov	r0, r3
 8007722:	3718      	adds	r7, #24
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}
 8007728:	4f54300a 	.word	0x4f54300a
 800772c:	4f54310a 	.word	0x4f54310a

08007730 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b086      	sub	sp, #24
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	333c      	adds	r3, #60	; 0x3c
 8007748:	3304      	adds	r3, #4
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	015a      	lsls	r2, r3, #5
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	4413      	add	r3, r2
 8007756:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	4a15      	ldr	r2, [pc, #84]	; (80077b8 <PCD_EP_OutSetupPacket_int+0x88>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d90e      	bls.n	8007784 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800776c:	2b00      	cmp	r3, #0
 800776e:	d009      	beq.n	8007784 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	015a      	lsls	r2, r3, #5
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	4413      	add	r3, r2
 8007778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800777c:	461a      	mov	r2, r3
 800777e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007782:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f009 f9e7 	bl	8010b58 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	4a0a      	ldr	r2, [pc, #40]	; (80077b8 <PCD_EP_OutSetupPacket_int+0x88>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d90c      	bls.n	80077ac <PCD_EP_OutSetupPacket_int+0x7c>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	691b      	ldr	r3, [r3, #16]
 8007796:	2b01      	cmp	r3, #1
 8007798:	d108      	bne.n	80077ac <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6818      	ldr	r0, [r3, #0]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80077a4:	461a      	mov	r2, r3
 80077a6:	2101      	movs	r1, #1
 80077a8:	f007 f9de 	bl	800eb68 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80077ac:	2300      	movs	r3, #0
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3718      	adds	r7, #24
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}
 80077b6:	bf00      	nop
 80077b8:	4f54300a 	.word	0x4f54300a

080077bc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80077bc:	b480      	push	{r7}
 80077be:	b085      	sub	sp, #20
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	460b      	mov	r3, r1
 80077c6:	70fb      	strb	r3, [r7, #3]
 80077c8:	4613      	mov	r3, r2
 80077ca:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80077d4:	78fb      	ldrb	r3, [r7, #3]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d107      	bne.n	80077ea <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80077da:	883b      	ldrh	r3, [r7, #0]
 80077dc:	0419      	lsls	r1, r3, #16
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	68ba      	ldr	r2, [r7, #8]
 80077e4:	430a      	orrs	r2, r1
 80077e6:	629a      	str	r2, [r3, #40]	; 0x28
 80077e8:	e028      	b.n	800783c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f0:	0c1b      	lsrs	r3, r3, #16
 80077f2:	68ba      	ldr	r2, [r7, #8]
 80077f4:	4413      	add	r3, r2
 80077f6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80077f8:	2300      	movs	r3, #0
 80077fa:	73fb      	strb	r3, [r7, #15]
 80077fc:	e00d      	b.n	800781a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	7bfb      	ldrb	r3, [r7, #15]
 8007804:	3340      	adds	r3, #64	; 0x40
 8007806:	009b      	lsls	r3, r3, #2
 8007808:	4413      	add	r3, r2
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	0c1b      	lsrs	r3, r3, #16
 800780e:	68ba      	ldr	r2, [r7, #8]
 8007810:	4413      	add	r3, r2
 8007812:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007814:	7bfb      	ldrb	r3, [r7, #15]
 8007816:	3301      	adds	r3, #1
 8007818:	73fb      	strb	r3, [r7, #15]
 800781a:	7bfa      	ldrb	r2, [r7, #15]
 800781c:	78fb      	ldrb	r3, [r7, #3]
 800781e:	3b01      	subs	r3, #1
 8007820:	429a      	cmp	r2, r3
 8007822:	d3ec      	bcc.n	80077fe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007824:	883b      	ldrh	r3, [r7, #0]
 8007826:	0418      	lsls	r0, r3, #16
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6819      	ldr	r1, [r3, #0]
 800782c:	78fb      	ldrb	r3, [r7, #3]
 800782e:	3b01      	subs	r3, #1
 8007830:	68ba      	ldr	r2, [r7, #8]
 8007832:	4302      	orrs	r2, r0
 8007834:	3340      	adds	r3, #64	; 0x40
 8007836:	009b      	lsls	r3, r3, #2
 8007838:	440b      	add	r3, r1
 800783a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800783c:	2300      	movs	r3, #0
}
 800783e:	4618      	mov	r0, r3
 8007840:	3714      	adds	r7, #20
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr

0800784a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800784a:	b480      	push	{r7}
 800784c:	b083      	sub	sp, #12
 800784e:	af00      	add	r7, sp, #0
 8007850:	6078      	str	r0, [r7, #4]
 8007852:	460b      	mov	r3, r1
 8007854:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	887a      	ldrh	r2, [r7, #2]
 800785c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800785e:	2300      	movs	r3, #0
}
 8007860:	4618      	mov	r0, r3
 8007862:	370c      	adds	r7, #12
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr

0800786c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800786c:	b480      	push	{r7}
 800786e:	b085      	sub	sp, #20
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2201      	movs	r2, #1
 800787e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2200      	movs	r2, #0
 8007886:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	699b      	ldr	r3, [r3, #24]
 800788e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800789a:	4b05      	ldr	r3, [pc, #20]	; (80078b0 <HAL_PCDEx_ActivateLPM+0x44>)
 800789c:	4313      	orrs	r3, r2
 800789e:	68fa      	ldr	r2, [r7, #12]
 80078a0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80078a2:	2300      	movs	r3, #0
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3714      	adds	r7, #20
 80078a8:	46bd      	mov	sp, r7
 80078aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ae:	4770      	bx	lr
 80078b0:	10000003 	.word	0x10000003

080078b4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b083      	sub	sp, #12
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	460b      	mov	r3, r1
 80078be:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80078c0:	bf00      	nop
 80078c2:	370c      	adds	r7, #12
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr

080078cc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b084      	sub	sp, #16
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80078d4:	4b29      	ldr	r3, [pc, #164]	; (800797c <HAL_PWREx_ConfigSupply+0xb0>)
 80078d6:	68db      	ldr	r3, [r3, #12]
 80078d8:	f003 0307 	and.w	r3, r3, #7
 80078dc:	2b06      	cmp	r3, #6
 80078de:	d00a      	beq.n	80078f6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80078e0:	4b26      	ldr	r3, [pc, #152]	; (800797c <HAL_PWREx_ConfigSupply+0xb0>)
 80078e2:	68db      	ldr	r3, [r3, #12]
 80078e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078e8:	687a      	ldr	r2, [r7, #4]
 80078ea:	429a      	cmp	r2, r3
 80078ec:	d001      	beq.n	80078f2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80078ee:	2301      	movs	r3, #1
 80078f0:	e040      	b.n	8007974 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80078f2:	2300      	movs	r3, #0
 80078f4:	e03e      	b.n	8007974 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80078f6:	4b21      	ldr	r3, [pc, #132]	; (800797c <HAL_PWREx_ConfigSupply+0xb0>)
 80078f8:	68db      	ldr	r3, [r3, #12]
 80078fa:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80078fe:	491f      	ldr	r1, [pc, #124]	; (800797c <HAL_PWREx_ConfigSupply+0xb0>)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	4313      	orrs	r3, r2
 8007904:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007906:	f7fa fc35 	bl	8002174 <HAL_GetTick>
 800790a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800790c:	e009      	b.n	8007922 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800790e:	f7fa fc31 	bl	8002174 <HAL_GetTick>
 8007912:	4602      	mov	r2, r0
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	1ad3      	subs	r3, r2, r3
 8007918:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800791c:	d901      	bls.n	8007922 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800791e:	2301      	movs	r3, #1
 8007920:	e028      	b.n	8007974 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007922:	4b16      	ldr	r3, [pc, #88]	; (800797c <HAL_PWREx_ConfigSupply+0xb0>)
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800792a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800792e:	d1ee      	bne.n	800790e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2b1e      	cmp	r3, #30
 8007934:	d008      	beq.n	8007948 <HAL_PWREx_ConfigSupply+0x7c>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2b2e      	cmp	r3, #46	; 0x2e
 800793a:	d005      	beq.n	8007948 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2b1d      	cmp	r3, #29
 8007940:	d002      	beq.n	8007948 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2b2d      	cmp	r3, #45	; 0x2d
 8007946:	d114      	bne.n	8007972 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8007948:	f7fa fc14 	bl	8002174 <HAL_GetTick>
 800794c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800794e:	e009      	b.n	8007964 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007950:	f7fa fc10 	bl	8002174 <HAL_GetTick>
 8007954:	4602      	mov	r2, r0
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	1ad3      	subs	r3, r2, r3
 800795a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800795e:	d901      	bls.n	8007964 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8007960:	2301      	movs	r3, #1
 8007962:	e007      	b.n	8007974 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8007964:	4b05      	ldr	r3, [pc, #20]	; (800797c <HAL_PWREx_ConfigSupply+0xb0>)
 8007966:	68db      	ldr	r3, [r3, #12]
 8007968:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800796c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007970:	d1ee      	bne.n	8007950 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007972:	2300      	movs	r3, #0
}
 8007974:	4618      	mov	r0, r3
 8007976:	3710      	adds	r7, #16
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}
 800797c:	58024800 	.word	0x58024800

08007980 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8007980:	b480      	push	{r7}
 8007982:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8007984:	4b05      	ldr	r3, [pc, #20]	; (800799c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007986:	68db      	ldr	r3, [r3, #12]
 8007988:	4a04      	ldr	r2, [pc, #16]	; (800799c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800798a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800798e:	60d3      	str	r3, [r2, #12]
}
 8007990:	bf00      	nop
 8007992:	46bd      	mov	sp, r7
 8007994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007998:	4770      	bx	lr
 800799a:	bf00      	nop
 800799c:	58024800 	.word	0x58024800

080079a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b08c      	sub	sp, #48	; 0x30
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d101      	bne.n	80079b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80079ae:	2301      	movs	r3, #1
 80079b0:	e3fd      	b.n	80081ae <HAL_RCC_OscConfig+0x80e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f003 0301 	and.w	r3, r3, #1
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	f000 8087 	beq.w	8007ace <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80079c0:	4b99      	ldr	r3, [pc, #612]	; (8007c28 <HAL_RCC_OscConfig+0x288>)
 80079c2:	691b      	ldr	r3, [r3, #16]
 80079c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80079c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80079ca:	4b97      	ldr	r3, [pc, #604]	; (8007c28 <HAL_RCC_OscConfig+0x288>)
 80079cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ce:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80079d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079d2:	2b10      	cmp	r3, #16
 80079d4:	d007      	beq.n	80079e6 <HAL_RCC_OscConfig+0x46>
 80079d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079d8:	2b18      	cmp	r3, #24
 80079da:	d110      	bne.n	80079fe <HAL_RCC_OscConfig+0x5e>
 80079dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079de:	f003 0303 	and.w	r3, r3, #3
 80079e2:	2b02      	cmp	r3, #2
 80079e4:	d10b      	bne.n	80079fe <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80079e6:	4b90      	ldr	r3, [pc, #576]	; (8007c28 <HAL_RCC_OscConfig+0x288>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d06c      	beq.n	8007acc <HAL_RCC_OscConfig+0x12c>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	685b      	ldr	r3, [r3, #4]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d168      	bne.n	8007acc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80079fa:	2301      	movs	r3, #1
 80079fc:	e3d7      	b.n	80081ae <HAL_RCC_OscConfig+0x80e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a06:	d106      	bne.n	8007a16 <HAL_RCC_OscConfig+0x76>
 8007a08:	4b87      	ldr	r3, [pc, #540]	; (8007c28 <HAL_RCC_OscConfig+0x288>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a86      	ldr	r2, [pc, #536]	; (8007c28 <HAL_RCC_OscConfig+0x288>)
 8007a0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a12:	6013      	str	r3, [r2, #0]
 8007a14:	e02e      	b.n	8007a74 <HAL_RCC_OscConfig+0xd4>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d10c      	bne.n	8007a38 <HAL_RCC_OscConfig+0x98>
 8007a1e:	4b82      	ldr	r3, [pc, #520]	; (8007c28 <HAL_RCC_OscConfig+0x288>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4a81      	ldr	r2, [pc, #516]	; (8007c28 <HAL_RCC_OscConfig+0x288>)
 8007a24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a28:	6013      	str	r3, [r2, #0]
 8007a2a:	4b7f      	ldr	r3, [pc, #508]	; (8007c28 <HAL_RCC_OscConfig+0x288>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4a7e      	ldr	r2, [pc, #504]	; (8007c28 <HAL_RCC_OscConfig+0x288>)
 8007a30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a34:	6013      	str	r3, [r2, #0]
 8007a36:	e01d      	b.n	8007a74 <HAL_RCC_OscConfig+0xd4>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007a40:	d10c      	bne.n	8007a5c <HAL_RCC_OscConfig+0xbc>
 8007a42:	4b79      	ldr	r3, [pc, #484]	; (8007c28 <HAL_RCC_OscConfig+0x288>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a78      	ldr	r2, [pc, #480]	; (8007c28 <HAL_RCC_OscConfig+0x288>)
 8007a48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007a4c:	6013      	str	r3, [r2, #0]
 8007a4e:	4b76      	ldr	r3, [pc, #472]	; (8007c28 <HAL_RCC_OscConfig+0x288>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a75      	ldr	r2, [pc, #468]	; (8007c28 <HAL_RCC_OscConfig+0x288>)
 8007a54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a58:	6013      	str	r3, [r2, #0]
 8007a5a:	e00b      	b.n	8007a74 <HAL_RCC_OscConfig+0xd4>
 8007a5c:	4b72      	ldr	r3, [pc, #456]	; (8007c28 <HAL_RCC_OscConfig+0x288>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a71      	ldr	r2, [pc, #452]	; (8007c28 <HAL_RCC_OscConfig+0x288>)
 8007a62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a66:	6013      	str	r3, [r2, #0]
 8007a68:	4b6f      	ldr	r3, [pc, #444]	; (8007c28 <HAL_RCC_OscConfig+0x288>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4a6e      	ldr	r2, [pc, #440]	; (8007c28 <HAL_RCC_OscConfig+0x288>)
 8007a6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d013      	beq.n	8007aa4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a7c:	f7fa fb7a 	bl	8002174 <HAL_GetTick>
 8007a80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007a82:	e008      	b.n	8007a96 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007a84:	f7fa fb76 	bl	8002174 <HAL_GetTick>
 8007a88:	4602      	mov	r2, r0
 8007a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a8c:	1ad3      	subs	r3, r2, r3
 8007a8e:	2b64      	cmp	r3, #100	; 0x64
 8007a90:	d901      	bls.n	8007a96 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007a92:	2303      	movs	r3, #3
 8007a94:	e38b      	b.n	80081ae <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007a96:	4b64      	ldr	r3, [pc, #400]	; (8007c28 <HAL_RCC_OscConfig+0x288>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d0f0      	beq.n	8007a84 <HAL_RCC_OscConfig+0xe4>
 8007aa2:	e014      	b.n	8007ace <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007aa4:	f7fa fb66 	bl	8002174 <HAL_GetTick>
 8007aa8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007aaa:	e008      	b.n	8007abe <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007aac:	f7fa fb62 	bl	8002174 <HAL_GetTick>
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab4:	1ad3      	subs	r3, r2, r3
 8007ab6:	2b64      	cmp	r3, #100	; 0x64
 8007ab8:	d901      	bls.n	8007abe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007aba:	2303      	movs	r3, #3
 8007abc:	e377      	b.n	80081ae <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007abe:	4b5a      	ldr	r3, [pc, #360]	; (8007c28 <HAL_RCC_OscConfig+0x288>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d1f0      	bne.n	8007aac <HAL_RCC_OscConfig+0x10c>
 8007aca:	e000      	b.n	8007ace <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007acc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f003 0302 	and.w	r3, r3, #2
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	f000 80ae 	beq.w	8007c38 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007adc:	4b52      	ldr	r3, [pc, #328]	; (8007c28 <HAL_RCC_OscConfig+0x288>)
 8007ade:	691b      	ldr	r3, [r3, #16]
 8007ae0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007ae4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007ae6:	4b50      	ldr	r3, [pc, #320]	; (8007c28 <HAL_RCC_OscConfig+0x288>)
 8007ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aea:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007aec:	6a3b      	ldr	r3, [r7, #32]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d007      	beq.n	8007b02 <HAL_RCC_OscConfig+0x162>
 8007af2:	6a3b      	ldr	r3, [r7, #32]
 8007af4:	2b18      	cmp	r3, #24
 8007af6:	d13a      	bne.n	8007b6e <HAL_RCC_OscConfig+0x1ce>
 8007af8:	69fb      	ldr	r3, [r7, #28]
 8007afa:	f003 0303 	and.w	r3, r3, #3
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d135      	bne.n	8007b6e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007b02:	4b49      	ldr	r3, [pc, #292]	; (8007c28 <HAL_RCC_OscConfig+0x288>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f003 0304 	and.w	r3, r3, #4
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d005      	beq.n	8007b1a <HAL_RCC_OscConfig+0x17a>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	68db      	ldr	r3, [r3, #12]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d101      	bne.n	8007b1a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007b16:	2301      	movs	r3, #1
 8007b18:	e349      	b.n	80081ae <HAL_RCC_OscConfig+0x80e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b1a:	f7fa fb5b 	bl	80021d4 <HAL_GetREVID>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	f241 0203 	movw	r2, #4099	; 0x1003
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d817      	bhi.n	8007b58 <HAL_RCC_OscConfig+0x1b8>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	691b      	ldr	r3, [r3, #16]
 8007b2c:	2b40      	cmp	r3, #64	; 0x40
 8007b2e:	d108      	bne.n	8007b42 <HAL_RCC_OscConfig+0x1a2>
 8007b30:	4b3d      	ldr	r3, [pc, #244]	; (8007c28 <HAL_RCC_OscConfig+0x288>)
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007b38:	4a3b      	ldr	r2, [pc, #236]	; (8007c28 <HAL_RCC_OscConfig+0x288>)
 8007b3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b3e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007b40:	e07a      	b.n	8007c38 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b42:	4b39      	ldr	r3, [pc, #228]	; (8007c28 <HAL_RCC_OscConfig+0x288>)
 8007b44:	685b      	ldr	r3, [r3, #4]
 8007b46:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	691b      	ldr	r3, [r3, #16]
 8007b4e:	031b      	lsls	r3, r3, #12
 8007b50:	4935      	ldr	r1, [pc, #212]	; (8007c28 <HAL_RCC_OscConfig+0x288>)
 8007b52:	4313      	orrs	r3, r2
 8007b54:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007b56:	e06f      	b.n	8007c38 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b58:	4b33      	ldr	r3, [pc, #204]	; (8007c28 <HAL_RCC_OscConfig+0x288>)
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	691b      	ldr	r3, [r3, #16]
 8007b64:	061b      	lsls	r3, r3, #24
 8007b66:	4930      	ldr	r1, [pc, #192]	; (8007c28 <HAL_RCC_OscConfig+0x288>)
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007b6c:	e064      	b.n	8007c38 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	68db      	ldr	r3, [r3, #12]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d045      	beq.n	8007c02 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007b76:	4b2c      	ldr	r3, [pc, #176]	; (8007c28 <HAL_RCC_OscConfig+0x288>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f023 0219 	bic.w	r2, r3, #25
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	68db      	ldr	r3, [r3, #12]
 8007b82:	4929      	ldr	r1, [pc, #164]	; (8007c28 <HAL_RCC_OscConfig+0x288>)
 8007b84:	4313      	orrs	r3, r2
 8007b86:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b88:	f7fa faf4 	bl	8002174 <HAL_GetTick>
 8007b8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007b8e:	e008      	b.n	8007ba2 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007b90:	f7fa faf0 	bl	8002174 <HAL_GetTick>
 8007b94:	4602      	mov	r2, r0
 8007b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b98:	1ad3      	subs	r3, r2, r3
 8007b9a:	2b02      	cmp	r3, #2
 8007b9c:	d901      	bls.n	8007ba2 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8007b9e:	2303      	movs	r3, #3
 8007ba0:	e305      	b.n	80081ae <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007ba2:	4b21      	ldr	r3, [pc, #132]	; (8007c28 <HAL_RCC_OscConfig+0x288>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f003 0304 	and.w	r3, r3, #4
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d0f0      	beq.n	8007b90 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007bae:	f7fa fb11 	bl	80021d4 <HAL_GetREVID>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	f241 0203 	movw	r2, #4099	; 0x1003
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d817      	bhi.n	8007bec <HAL_RCC_OscConfig+0x24c>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	691b      	ldr	r3, [r3, #16]
 8007bc0:	2b40      	cmp	r3, #64	; 0x40
 8007bc2:	d108      	bne.n	8007bd6 <HAL_RCC_OscConfig+0x236>
 8007bc4:	4b18      	ldr	r3, [pc, #96]	; (8007c28 <HAL_RCC_OscConfig+0x288>)
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007bcc:	4a16      	ldr	r2, [pc, #88]	; (8007c28 <HAL_RCC_OscConfig+0x288>)
 8007bce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007bd2:	6053      	str	r3, [r2, #4]
 8007bd4:	e030      	b.n	8007c38 <HAL_RCC_OscConfig+0x298>
 8007bd6:	4b14      	ldr	r3, [pc, #80]	; (8007c28 <HAL_RCC_OscConfig+0x288>)
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	691b      	ldr	r3, [r3, #16]
 8007be2:	031b      	lsls	r3, r3, #12
 8007be4:	4910      	ldr	r1, [pc, #64]	; (8007c28 <HAL_RCC_OscConfig+0x288>)
 8007be6:	4313      	orrs	r3, r2
 8007be8:	604b      	str	r3, [r1, #4]
 8007bea:	e025      	b.n	8007c38 <HAL_RCC_OscConfig+0x298>
 8007bec:	4b0e      	ldr	r3, [pc, #56]	; (8007c28 <HAL_RCC_OscConfig+0x288>)
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	691b      	ldr	r3, [r3, #16]
 8007bf8:	061b      	lsls	r3, r3, #24
 8007bfa:	490b      	ldr	r1, [pc, #44]	; (8007c28 <HAL_RCC_OscConfig+0x288>)
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	604b      	str	r3, [r1, #4]
 8007c00:	e01a      	b.n	8007c38 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007c02:	4b09      	ldr	r3, [pc, #36]	; (8007c28 <HAL_RCC_OscConfig+0x288>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a08      	ldr	r2, [pc, #32]	; (8007c28 <HAL_RCC_OscConfig+0x288>)
 8007c08:	f023 0301 	bic.w	r3, r3, #1
 8007c0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c0e:	f7fa fab1 	bl	8002174 <HAL_GetTick>
 8007c12:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007c14:	e00a      	b.n	8007c2c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007c16:	f7fa faad 	bl	8002174 <HAL_GetTick>
 8007c1a:	4602      	mov	r2, r0
 8007c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c1e:	1ad3      	subs	r3, r2, r3
 8007c20:	2b02      	cmp	r3, #2
 8007c22:	d903      	bls.n	8007c2c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8007c24:	2303      	movs	r3, #3
 8007c26:	e2c2      	b.n	80081ae <HAL_RCC_OscConfig+0x80e>
 8007c28:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007c2c:	4b94      	ldr	r3, [pc, #592]	; (8007e80 <HAL_RCC_OscConfig+0x4e0>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f003 0304 	and.w	r3, r3, #4
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d1ee      	bne.n	8007c16 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f003 0310 	and.w	r3, r3, #16
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	f000 80a9 	beq.w	8007d98 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007c46:	4b8e      	ldr	r3, [pc, #568]	; (8007e80 <HAL_RCC_OscConfig+0x4e0>)
 8007c48:	691b      	ldr	r3, [r3, #16]
 8007c4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c4e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007c50:	4b8b      	ldr	r3, [pc, #556]	; (8007e80 <HAL_RCC_OscConfig+0x4e0>)
 8007c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c54:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007c56:	69bb      	ldr	r3, [r7, #24]
 8007c58:	2b08      	cmp	r3, #8
 8007c5a:	d007      	beq.n	8007c6c <HAL_RCC_OscConfig+0x2cc>
 8007c5c:	69bb      	ldr	r3, [r7, #24]
 8007c5e:	2b18      	cmp	r3, #24
 8007c60:	d13a      	bne.n	8007cd8 <HAL_RCC_OscConfig+0x338>
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	f003 0303 	and.w	r3, r3, #3
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	d135      	bne.n	8007cd8 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007c6c:	4b84      	ldr	r3, [pc, #528]	; (8007e80 <HAL_RCC_OscConfig+0x4e0>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d005      	beq.n	8007c84 <HAL_RCC_OscConfig+0x2e4>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	69db      	ldr	r3, [r3, #28]
 8007c7c:	2b80      	cmp	r3, #128	; 0x80
 8007c7e:	d001      	beq.n	8007c84 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8007c80:	2301      	movs	r3, #1
 8007c82:	e294      	b.n	80081ae <HAL_RCC_OscConfig+0x80e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007c84:	f7fa faa6 	bl	80021d4 <HAL_GetREVID>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	f241 0203 	movw	r2, #4099	; 0x1003
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d817      	bhi.n	8007cc2 <HAL_RCC_OscConfig+0x322>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6a1b      	ldr	r3, [r3, #32]
 8007c96:	2b20      	cmp	r3, #32
 8007c98:	d108      	bne.n	8007cac <HAL_RCC_OscConfig+0x30c>
 8007c9a:	4b79      	ldr	r3, [pc, #484]	; (8007e80 <HAL_RCC_OscConfig+0x4e0>)
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007ca2:	4a77      	ldr	r2, [pc, #476]	; (8007e80 <HAL_RCC_OscConfig+0x4e0>)
 8007ca4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007ca8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007caa:	e075      	b.n	8007d98 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007cac:	4b74      	ldr	r3, [pc, #464]	; (8007e80 <HAL_RCC_OscConfig+0x4e0>)
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6a1b      	ldr	r3, [r3, #32]
 8007cb8:	069b      	lsls	r3, r3, #26
 8007cba:	4971      	ldr	r1, [pc, #452]	; (8007e80 <HAL_RCC_OscConfig+0x4e0>)
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007cc0:	e06a      	b.n	8007d98 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007cc2:	4b6f      	ldr	r3, [pc, #444]	; (8007e80 <HAL_RCC_OscConfig+0x4e0>)
 8007cc4:	68db      	ldr	r3, [r3, #12]
 8007cc6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6a1b      	ldr	r3, [r3, #32]
 8007cce:	061b      	lsls	r3, r3, #24
 8007cd0:	496b      	ldr	r1, [pc, #428]	; (8007e80 <HAL_RCC_OscConfig+0x4e0>)
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007cd6:	e05f      	b.n	8007d98 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	69db      	ldr	r3, [r3, #28]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d042      	beq.n	8007d66 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007ce0:	4b67      	ldr	r3, [pc, #412]	; (8007e80 <HAL_RCC_OscConfig+0x4e0>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a66      	ldr	r2, [pc, #408]	; (8007e80 <HAL_RCC_OscConfig+0x4e0>)
 8007ce6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cec:	f7fa fa42 	bl	8002174 <HAL_GetTick>
 8007cf0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007cf2:	e008      	b.n	8007d06 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007cf4:	f7fa fa3e 	bl	8002174 <HAL_GetTick>
 8007cf8:	4602      	mov	r2, r0
 8007cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfc:	1ad3      	subs	r3, r2, r3
 8007cfe:	2b02      	cmp	r3, #2
 8007d00:	d901      	bls.n	8007d06 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8007d02:	2303      	movs	r3, #3
 8007d04:	e253      	b.n	80081ae <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007d06:	4b5e      	ldr	r3, [pc, #376]	; (8007e80 <HAL_RCC_OscConfig+0x4e0>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d0f0      	beq.n	8007cf4 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007d12:	f7fa fa5f 	bl	80021d4 <HAL_GetREVID>
 8007d16:	4603      	mov	r3, r0
 8007d18:	f241 0203 	movw	r2, #4099	; 0x1003
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d817      	bhi.n	8007d50 <HAL_RCC_OscConfig+0x3b0>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6a1b      	ldr	r3, [r3, #32]
 8007d24:	2b20      	cmp	r3, #32
 8007d26:	d108      	bne.n	8007d3a <HAL_RCC_OscConfig+0x39a>
 8007d28:	4b55      	ldr	r3, [pc, #340]	; (8007e80 <HAL_RCC_OscConfig+0x4e0>)
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007d30:	4a53      	ldr	r2, [pc, #332]	; (8007e80 <HAL_RCC_OscConfig+0x4e0>)
 8007d32:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d36:	6053      	str	r3, [r2, #4]
 8007d38:	e02e      	b.n	8007d98 <HAL_RCC_OscConfig+0x3f8>
 8007d3a:	4b51      	ldr	r3, [pc, #324]	; (8007e80 <HAL_RCC_OscConfig+0x4e0>)
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6a1b      	ldr	r3, [r3, #32]
 8007d46:	069b      	lsls	r3, r3, #26
 8007d48:	494d      	ldr	r1, [pc, #308]	; (8007e80 <HAL_RCC_OscConfig+0x4e0>)
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	604b      	str	r3, [r1, #4]
 8007d4e:	e023      	b.n	8007d98 <HAL_RCC_OscConfig+0x3f8>
 8007d50:	4b4b      	ldr	r3, [pc, #300]	; (8007e80 <HAL_RCC_OscConfig+0x4e0>)
 8007d52:	68db      	ldr	r3, [r3, #12]
 8007d54:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6a1b      	ldr	r3, [r3, #32]
 8007d5c:	061b      	lsls	r3, r3, #24
 8007d5e:	4948      	ldr	r1, [pc, #288]	; (8007e80 <HAL_RCC_OscConfig+0x4e0>)
 8007d60:	4313      	orrs	r3, r2
 8007d62:	60cb      	str	r3, [r1, #12]
 8007d64:	e018      	b.n	8007d98 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007d66:	4b46      	ldr	r3, [pc, #280]	; (8007e80 <HAL_RCC_OscConfig+0x4e0>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4a45      	ldr	r2, [pc, #276]	; (8007e80 <HAL_RCC_OscConfig+0x4e0>)
 8007d6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d72:	f7fa f9ff 	bl	8002174 <HAL_GetTick>
 8007d76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007d78:	e008      	b.n	8007d8c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007d7a:	f7fa f9fb 	bl	8002174 <HAL_GetTick>
 8007d7e:	4602      	mov	r2, r0
 8007d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d82:	1ad3      	subs	r3, r2, r3
 8007d84:	2b02      	cmp	r3, #2
 8007d86:	d901      	bls.n	8007d8c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8007d88:	2303      	movs	r3, #3
 8007d8a:	e210      	b.n	80081ae <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007d8c:	4b3c      	ldr	r3, [pc, #240]	; (8007e80 <HAL_RCC_OscConfig+0x4e0>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d1f0      	bne.n	8007d7a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f003 0308 	and.w	r3, r3, #8
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d036      	beq.n	8007e12 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	695b      	ldr	r3, [r3, #20]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d019      	beq.n	8007de0 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007dac:	4b34      	ldr	r3, [pc, #208]	; (8007e80 <HAL_RCC_OscConfig+0x4e0>)
 8007dae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007db0:	4a33      	ldr	r2, [pc, #204]	; (8007e80 <HAL_RCC_OscConfig+0x4e0>)
 8007db2:	f043 0301 	orr.w	r3, r3, #1
 8007db6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007db8:	f7fa f9dc 	bl	8002174 <HAL_GetTick>
 8007dbc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007dbe:	e008      	b.n	8007dd2 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007dc0:	f7fa f9d8 	bl	8002174 <HAL_GetTick>
 8007dc4:	4602      	mov	r2, r0
 8007dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc8:	1ad3      	subs	r3, r2, r3
 8007dca:	2b02      	cmp	r3, #2
 8007dcc:	d901      	bls.n	8007dd2 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8007dce:	2303      	movs	r3, #3
 8007dd0:	e1ed      	b.n	80081ae <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007dd2:	4b2b      	ldr	r3, [pc, #172]	; (8007e80 <HAL_RCC_OscConfig+0x4e0>)
 8007dd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007dd6:	f003 0302 	and.w	r3, r3, #2
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d0f0      	beq.n	8007dc0 <HAL_RCC_OscConfig+0x420>
 8007dde:	e018      	b.n	8007e12 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007de0:	4b27      	ldr	r3, [pc, #156]	; (8007e80 <HAL_RCC_OscConfig+0x4e0>)
 8007de2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007de4:	4a26      	ldr	r2, [pc, #152]	; (8007e80 <HAL_RCC_OscConfig+0x4e0>)
 8007de6:	f023 0301 	bic.w	r3, r3, #1
 8007dea:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007dec:	f7fa f9c2 	bl	8002174 <HAL_GetTick>
 8007df0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007df2:	e008      	b.n	8007e06 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007df4:	f7fa f9be 	bl	8002174 <HAL_GetTick>
 8007df8:	4602      	mov	r2, r0
 8007dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dfc:	1ad3      	subs	r3, r2, r3
 8007dfe:	2b02      	cmp	r3, #2
 8007e00:	d901      	bls.n	8007e06 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8007e02:	2303      	movs	r3, #3
 8007e04:	e1d3      	b.n	80081ae <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007e06:	4b1e      	ldr	r3, [pc, #120]	; (8007e80 <HAL_RCC_OscConfig+0x4e0>)
 8007e08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e0a:	f003 0302 	and.w	r3, r3, #2
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d1f0      	bne.n	8007df4 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f003 0320 	and.w	r3, r3, #32
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d038      	beq.n	8007e90 <HAL_RCC_OscConfig+0x4f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	699b      	ldr	r3, [r3, #24]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d019      	beq.n	8007e5a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007e26:	4b16      	ldr	r3, [pc, #88]	; (8007e80 <HAL_RCC_OscConfig+0x4e0>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4a15      	ldr	r2, [pc, #84]	; (8007e80 <HAL_RCC_OscConfig+0x4e0>)
 8007e2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007e30:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007e32:	f7fa f99f 	bl	8002174 <HAL_GetTick>
 8007e36:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007e38:	e008      	b.n	8007e4c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007e3a:	f7fa f99b 	bl	8002174 <HAL_GetTick>
 8007e3e:	4602      	mov	r2, r0
 8007e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e42:	1ad3      	subs	r3, r2, r3
 8007e44:	2b02      	cmp	r3, #2
 8007e46:	d901      	bls.n	8007e4c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8007e48:	2303      	movs	r3, #3
 8007e4a:	e1b0      	b.n	80081ae <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007e4c:	4b0c      	ldr	r3, [pc, #48]	; (8007e80 <HAL_RCC_OscConfig+0x4e0>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d0f0      	beq.n	8007e3a <HAL_RCC_OscConfig+0x49a>
 8007e58:	e01a      	b.n	8007e90 <HAL_RCC_OscConfig+0x4f0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007e5a:	4b09      	ldr	r3, [pc, #36]	; (8007e80 <HAL_RCC_OscConfig+0x4e0>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a08      	ldr	r2, [pc, #32]	; (8007e80 <HAL_RCC_OscConfig+0x4e0>)
 8007e60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e64:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007e66:	f7fa f985 	bl	8002174 <HAL_GetTick>
 8007e6a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007e6c:	e00a      	b.n	8007e84 <HAL_RCC_OscConfig+0x4e4>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007e6e:	f7fa f981 	bl	8002174 <HAL_GetTick>
 8007e72:	4602      	mov	r2, r0
 8007e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e76:	1ad3      	subs	r3, r2, r3
 8007e78:	2b02      	cmp	r3, #2
 8007e7a:	d903      	bls.n	8007e84 <HAL_RCC_OscConfig+0x4e4>
        {
          return HAL_TIMEOUT;
 8007e7c:	2303      	movs	r3, #3
 8007e7e:	e196      	b.n	80081ae <HAL_RCC_OscConfig+0x80e>
 8007e80:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007e84:	4b99      	ldr	r3, [pc, #612]	; (80080ec <HAL_RCC_OscConfig+0x74c>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d1ee      	bne.n	8007e6e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f003 0304 	and.w	r3, r3, #4
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	f000 8081 	beq.w	8007fa0 <HAL_RCC_OscConfig+0x600>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007e9e:	4b94      	ldr	r3, [pc, #592]	; (80080f0 <HAL_RCC_OscConfig+0x750>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4a93      	ldr	r2, [pc, #588]	; (80080f0 <HAL_RCC_OscConfig+0x750>)
 8007ea4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ea8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007eaa:	f7fa f963 	bl	8002174 <HAL_GetTick>
 8007eae:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007eb0:	e008      	b.n	8007ec4 <HAL_RCC_OscConfig+0x524>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007eb2:	f7fa f95f 	bl	8002174 <HAL_GetTick>
 8007eb6:	4602      	mov	r2, r0
 8007eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eba:	1ad3      	subs	r3, r2, r3
 8007ebc:	2b64      	cmp	r3, #100	; 0x64
 8007ebe:	d901      	bls.n	8007ec4 <HAL_RCC_OscConfig+0x524>
      {
        return HAL_TIMEOUT;
 8007ec0:	2303      	movs	r3, #3
 8007ec2:	e174      	b.n	80081ae <HAL_RCC_OscConfig+0x80e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007ec4:	4b8a      	ldr	r3, [pc, #552]	; (80080f0 <HAL_RCC_OscConfig+0x750>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d0f0      	beq.n	8007eb2 <HAL_RCC_OscConfig+0x512>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	689b      	ldr	r3, [r3, #8]
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	d106      	bne.n	8007ee6 <HAL_RCC_OscConfig+0x546>
 8007ed8:	4b84      	ldr	r3, [pc, #528]	; (80080ec <HAL_RCC_OscConfig+0x74c>)
 8007eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007edc:	4a83      	ldr	r2, [pc, #524]	; (80080ec <HAL_RCC_OscConfig+0x74c>)
 8007ede:	f043 0301 	orr.w	r3, r3, #1
 8007ee2:	6713      	str	r3, [r2, #112]	; 0x70
 8007ee4:	e02d      	b.n	8007f42 <HAL_RCC_OscConfig+0x5a2>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	689b      	ldr	r3, [r3, #8]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d10c      	bne.n	8007f08 <HAL_RCC_OscConfig+0x568>
 8007eee:	4b7f      	ldr	r3, [pc, #508]	; (80080ec <HAL_RCC_OscConfig+0x74c>)
 8007ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ef2:	4a7e      	ldr	r2, [pc, #504]	; (80080ec <HAL_RCC_OscConfig+0x74c>)
 8007ef4:	f023 0301 	bic.w	r3, r3, #1
 8007ef8:	6713      	str	r3, [r2, #112]	; 0x70
 8007efa:	4b7c      	ldr	r3, [pc, #496]	; (80080ec <HAL_RCC_OscConfig+0x74c>)
 8007efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007efe:	4a7b      	ldr	r2, [pc, #492]	; (80080ec <HAL_RCC_OscConfig+0x74c>)
 8007f00:	f023 0304 	bic.w	r3, r3, #4
 8007f04:	6713      	str	r3, [r2, #112]	; 0x70
 8007f06:	e01c      	b.n	8007f42 <HAL_RCC_OscConfig+0x5a2>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	689b      	ldr	r3, [r3, #8]
 8007f0c:	2b05      	cmp	r3, #5
 8007f0e:	d10c      	bne.n	8007f2a <HAL_RCC_OscConfig+0x58a>
 8007f10:	4b76      	ldr	r3, [pc, #472]	; (80080ec <HAL_RCC_OscConfig+0x74c>)
 8007f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f14:	4a75      	ldr	r2, [pc, #468]	; (80080ec <HAL_RCC_OscConfig+0x74c>)
 8007f16:	f043 0304 	orr.w	r3, r3, #4
 8007f1a:	6713      	str	r3, [r2, #112]	; 0x70
 8007f1c:	4b73      	ldr	r3, [pc, #460]	; (80080ec <HAL_RCC_OscConfig+0x74c>)
 8007f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f20:	4a72      	ldr	r2, [pc, #456]	; (80080ec <HAL_RCC_OscConfig+0x74c>)
 8007f22:	f043 0301 	orr.w	r3, r3, #1
 8007f26:	6713      	str	r3, [r2, #112]	; 0x70
 8007f28:	e00b      	b.n	8007f42 <HAL_RCC_OscConfig+0x5a2>
 8007f2a:	4b70      	ldr	r3, [pc, #448]	; (80080ec <HAL_RCC_OscConfig+0x74c>)
 8007f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f2e:	4a6f      	ldr	r2, [pc, #444]	; (80080ec <HAL_RCC_OscConfig+0x74c>)
 8007f30:	f023 0301 	bic.w	r3, r3, #1
 8007f34:	6713      	str	r3, [r2, #112]	; 0x70
 8007f36:	4b6d      	ldr	r3, [pc, #436]	; (80080ec <HAL_RCC_OscConfig+0x74c>)
 8007f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f3a:	4a6c      	ldr	r2, [pc, #432]	; (80080ec <HAL_RCC_OscConfig+0x74c>)
 8007f3c:	f023 0304 	bic.w	r3, r3, #4
 8007f40:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	689b      	ldr	r3, [r3, #8]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d015      	beq.n	8007f76 <HAL_RCC_OscConfig+0x5d6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f4a:	f7fa f913 	bl	8002174 <HAL_GetTick>
 8007f4e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007f50:	e00a      	b.n	8007f68 <HAL_RCC_OscConfig+0x5c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007f52:	f7fa f90f 	bl	8002174 <HAL_GetTick>
 8007f56:	4602      	mov	r2, r0
 8007f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f5a:	1ad3      	subs	r3, r2, r3
 8007f5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d901      	bls.n	8007f68 <HAL_RCC_OscConfig+0x5c8>
        {
          return HAL_TIMEOUT;
 8007f64:	2303      	movs	r3, #3
 8007f66:	e122      	b.n	80081ae <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007f68:	4b60      	ldr	r3, [pc, #384]	; (80080ec <HAL_RCC_OscConfig+0x74c>)
 8007f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f6c:	f003 0302 	and.w	r3, r3, #2
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d0ee      	beq.n	8007f52 <HAL_RCC_OscConfig+0x5b2>
 8007f74:	e014      	b.n	8007fa0 <HAL_RCC_OscConfig+0x600>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f76:	f7fa f8fd 	bl	8002174 <HAL_GetTick>
 8007f7a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007f7c:	e00a      	b.n	8007f94 <HAL_RCC_OscConfig+0x5f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007f7e:	f7fa f8f9 	bl	8002174 <HAL_GetTick>
 8007f82:	4602      	mov	r2, r0
 8007f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f86:	1ad3      	subs	r3, r2, r3
 8007f88:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d901      	bls.n	8007f94 <HAL_RCC_OscConfig+0x5f4>
        {
          return HAL_TIMEOUT;
 8007f90:	2303      	movs	r3, #3
 8007f92:	e10c      	b.n	80081ae <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007f94:	4b55      	ldr	r3, [pc, #340]	; (80080ec <HAL_RCC_OscConfig+0x74c>)
 8007f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f98:	f003 0302 	and.w	r3, r3, #2
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d1ee      	bne.n	8007f7e <HAL_RCC_OscConfig+0x5de>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	f000 8101 	beq.w	80081ac <HAL_RCC_OscConfig+0x80c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007faa:	4b50      	ldr	r3, [pc, #320]	; (80080ec <HAL_RCC_OscConfig+0x74c>)
 8007fac:	691b      	ldr	r3, [r3, #16]
 8007fae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007fb2:	2b18      	cmp	r3, #24
 8007fb4:	f000 80bc 	beq.w	8008130 <HAL_RCC_OscConfig+0x790>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fbc:	2b02      	cmp	r3, #2
 8007fbe:	f040 809d 	bne.w	80080fc <HAL_RCC_OscConfig+0x75c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007fc2:	4b4a      	ldr	r3, [pc, #296]	; (80080ec <HAL_RCC_OscConfig+0x74c>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a49      	ldr	r2, [pc, #292]	; (80080ec <HAL_RCC_OscConfig+0x74c>)
 8007fc8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007fcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fce:	f7fa f8d1 	bl	8002174 <HAL_GetTick>
 8007fd2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007fd4:	e008      	b.n	8007fe8 <HAL_RCC_OscConfig+0x648>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007fd6:	f7fa f8cd 	bl	8002174 <HAL_GetTick>
 8007fda:	4602      	mov	r2, r0
 8007fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fde:	1ad3      	subs	r3, r2, r3
 8007fe0:	2b02      	cmp	r3, #2
 8007fe2:	d901      	bls.n	8007fe8 <HAL_RCC_OscConfig+0x648>
          {
            return HAL_TIMEOUT;
 8007fe4:	2303      	movs	r3, #3
 8007fe6:	e0e2      	b.n	80081ae <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007fe8:	4b40      	ldr	r3, [pc, #256]	; (80080ec <HAL_RCC_OscConfig+0x74c>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d1f0      	bne.n	8007fd6 <HAL_RCC_OscConfig+0x636>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007ff4:	4b3d      	ldr	r3, [pc, #244]	; (80080ec <HAL_RCC_OscConfig+0x74c>)
 8007ff6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007ff8:	4b3e      	ldr	r3, [pc, #248]	; (80080f4 <HAL_RCC_OscConfig+0x754>)
 8007ffa:	4013      	ands	r3, r2
 8007ffc:	687a      	ldr	r2, [r7, #4]
 8007ffe:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008000:	687a      	ldr	r2, [r7, #4]
 8008002:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008004:	0112      	lsls	r2, r2, #4
 8008006:	430a      	orrs	r2, r1
 8008008:	4938      	ldr	r1, [pc, #224]	; (80080ec <HAL_RCC_OscConfig+0x74c>)
 800800a:	4313      	orrs	r3, r2
 800800c:	628b      	str	r3, [r1, #40]	; 0x28
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008012:	3b01      	subs	r3, #1
 8008014:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800801c:	3b01      	subs	r3, #1
 800801e:	025b      	lsls	r3, r3, #9
 8008020:	b29b      	uxth	r3, r3
 8008022:	431a      	orrs	r2, r3
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008028:	3b01      	subs	r3, #1
 800802a:	041b      	lsls	r3, r3, #16
 800802c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008030:	431a      	orrs	r2, r3
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008036:	3b01      	subs	r3, #1
 8008038:	061b      	lsls	r3, r3, #24
 800803a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800803e:	492b      	ldr	r1, [pc, #172]	; (80080ec <HAL_RCC_OscConfig+0x74c>)
 8008040:	4313      	orrs	r3, r2
 8008042:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8008044:	4b29      	ldr	r3, [pc, #164]	; (80080ec <HAL_RCC_OscConfig+0x74c>)
 8008046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008048:	4a28      	ldr	r2, [pc, #160]	; (80080ec <HAL_RCC_OscConfig+0x74c>)
 800804a:	f023 0301 	bic.w	r3, r3, #1
 800804e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008050:	4b26      	ldr	r3, [pc, #152]	; (80080ec <HAL_RCC_OscConfig+0x74c>)
 8008052:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008054:	4b28      	ldr	r3, [pc, #160]	; (80080f8 <HAL_RCC_OscConfig+0x758>)
 8008056:	4013      	ands	r3, r2
 8008058:	687a      	ldr	r2, [r7, #4]
 800805a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800805c:	00d2      	lsls	r2, r2, #3
 800805e:	4923      	ldr	r1, [pc, #140]	; (80080ec <HAL_RCC_OscConfig+0x74c>)
 8008060:	4313      	orrs	r3, r2
 8008062:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008064:	4b21      	ldr	r3, [pc, #132]	; (80080ec <HAL_RCC_OscConfig+0x74c>)
 8008066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008068:	f023 020c 	bic.w	r2, r3, #12
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008070:	491e      	ldr	r1, [pc, #120]	; (80080ec <HAL_RCC_OscConfig+0x74c>)
 8008072:	4313      	orrs	r3, r2
 8008074:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008076:	4b1d      	ldr	r3, [pc, #116]	; (80080ec <HAL_RCC_OscConfig+0x74c>)
 8008078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800807a:	f023 0202 	bic.w	r2, r3, #2
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008082:	491a      	ldr	r1, [pc, #104]	; (80080ec <HAL_RCC_OscConfig+0x74c>)
 8008084:	4313      	orrs	r3, r2
 8008086:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008088:	4b18      	ldr	r3, [pc, #96]	; (80080ec <HAL_RCC_OscConfig+0x74c>)
 800808a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800808c:	4a17      	ldr	r2, [pc, #92]	; (80080ec <HAL_RCC_OscConfig+0x74c>)
 800808e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008092:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008094:	4b15      	ldr	r3, [pc, #84]	; (80080ec <HAL_RCC_OscConfig+0x74c>)
 8008096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008098:	4a14      	ldr	r2, [pc, #80]	; (80080ec <HAL_RCC_OscConfig+0x74c>)
 800809a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800809e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80080a0:	4b12      	ldr	r3, [pc, #72]	; (80080ec <HAL_RCC_OscConfig+0x74c>)
 80080a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080a4:	4a11      	ldr	r2, [pc, #68]	; (80080ec <HAL_RCC_OscConfig+0x74c>)
 80080a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80080aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80080ac:	4b0f      	ldr	r3, [pc, #60]	; (80080ec <HAL_RCC_OscConfig+0x74c>)
 80080ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080b0:	4a0e      	ldr	r2, [pc, #56]	; (80080ec <HAL_RCC_OscConfig+0x74c>)
 80080b2:	f043 0301 	orr.w	r3, r3, #1
 80080b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80080b8:	4b0c      	ldr	r3, [pc, #48]	; (80080ec <HAL_RCC_OscConfig+0x74c>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4a0b      	ldr	r2, [pc, #44]	; (80080ec <HAL_RCC_OscConfig+0x74c>)
 80080be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80080c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080c4:	f7fa f856 	bl	8002174 <HAL_GetTick>
 80080c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80080ca:	e008      	b.n	80080de <HAL_RCC_OscConfig+0x73e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80080cc:	f7fa f852 	bl	8002174 <HAL_GetTick>
 80080d0:	4602      	mov	r2, r0
 80080d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d4:	1ad3      	subs	r3, r2, r3
 80080d6:	2b02      	cmp	r3, #2
 80080d8:	d901      	bls.n	80080de <HAL_RCC_OscConfig+0x73e>
          {
            return HAL_TIMEOUT;
 80080da:	2303      	movs	r3, #3
 80080dc:	e067      	b.n	80081ae <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80080de:	4b03      	ldr	r3, [pc, #12]	; (80080ec <HAL_RCC_OscConfig+0x74c>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d0f0      	beq.n	80080cc <HAL_RCC_OscConfig+0x72c>
 80080ea:	e05f      	b.n	80081ac <HAL_RCC_OscConfig+0x80c>
 80080ec:	58024400 	.word	0x58024400
 80080f0:	58024800 	.word	0x58024800
 80080f4:	fffffc0c 	.word	0xfffffc0c
 80080f8:	ffff0007 	.word	0xffff0007
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80080fc:	4b2e      	ldr	r3, [pc, #184]	; (80081b8 <HAL_RCC_OscConfig+0x818>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a2d      	ldr	r2, [pc, #180]	; (80081b8 <HAL_RCC_OscConfig+0x818>)
 8008102:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008106:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008108:	f7fa f834 	bl	8002174 <HAL_GetTick>
 800810c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800810e:	e008      	b.n	8008122 <HAL_RCC_OscConfig+0x782>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008110:	f7fa f830 	bl	8002174 <HAL_GetTick>
 8008114:	4602      	mov	r2, r0
 8008116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008118:	1ad3      	subs	r3, r2, r3
 800811a:	2b02      	cmp	r3, #2
 800811c:	d901      	bls.n	8008122 <HAL_RCC_OscConfig+0x782>
          {
            return HAL_TIMEOUT;
 800811e:	2303      	movs	r3, #3
 8008120:	e045      	b.n	80081ae <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008122:	4b25      	ldr	r3, [pc, #148]	; (80081b8 <HAL_RCC_OscConfig+0x818>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800812a:	2b00      	cmp	r3, #0
 800812c:	d1f0      	bne.n	8008110 <HAL_RCC_OscConfig+0x770>
 800812e:	e03d      	b.n	80081ac <HAL_RCC_OscConfig+0x80c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008130:	4b21      	ldr	r3, [pc, #132]	; (80081b8 <HAL_RCC_OscConfig+0x818>)
 8008132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008134:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008136:	4b20      	ldr	r3, [pc, #128]	; (80081b8 <HAL_RCC_OscConfig+0x818>)
 8008138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800813a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008140:	2b01      	cmp	r3, #1
 8008142:	d031      	beq.n	80081a8 <HAL_RCC_OscConfig+0x808>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	f003 0203 	and.w	r2, r3, #3
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800814e:	429a      	cmp	r2, r3
 8008150:	d12a      	bne.n	80081a8 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	091b      	lsrs	r3, r3, #4
 8008156:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800815e:	429a      	cmp	r2, r3
 8008160:	d122      	bne.n	80081a8 <HAL_RCC_OscConfig+0x808>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800816c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800816e:	429a      	cmp	r2, r3
 8008170:	d11a      	bne.n	80081a8 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	0a5b      	lsrs	r3, r3, #9
 8008176:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800817e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008180:	429a      	cmp	r2, r3
 8008182:	d111      	bne.n	80081a8 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	0c1b      	lsrs	r3, r3, #16
 8008188:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008190:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008192:	429a      	cmp	r2, r3
 8008194:	d108      	bne.n	80081a8 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	0e1b      	lsrs	r3, r3, #24
 800819a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081a2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80081a4:	429a      	cmp	r2, r3
 80081a6:	d001      	beq.n	80081ac <HAL_RCC_OscConfig+0x80c>
      {
        return HAL_ERROR;
 80081a8:	2301      	movs	r3, #1
 80081aa:	e000      	b.n	80081ae <HAL_RCC_OscConfig+0x80e>
      }
    }
  }
  return HAL_OK;
 80081ac:	2300      	movs	r3, #0
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3730      	adds	r7, #48	; 0x30
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}
 80081b6:	bf00      	nop
 80081b8:	58024400 	.word	0x58024400

080081bc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b086      	sub	sp, #24
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
 80081c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d101      	bne.n	80081d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80081cc:	2301      	movs	r3, #1
 80081ce:	e19c      	b.n	800850a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80081d0:	4b8a      	ldr	r3, [pc, #552]	; (80083fc <HAL_RCC_ClockConfig+0x240>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f003 030f 	and.w	r3, r3, #15
 80081d8:	683a      	ldr	r2, [r7, #0]
 80081da:	429a      	cmp	r2, r3
 80081dc:	d910      	bls.n	8008200 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081de:	4b87      	ldr	r3, [pc, #540]	; (80083fc <HAL_RCC_ClockConfig+0x240>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f023 020f 	bic.w	r2, r3, #15
 80081e6:	4985      	ldr	r1, [pc, #532]	; (80083fc <HAL_RCC_ClockConfig+0x240>)
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	4313      	orrs	r3, r2
 80081ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80081ee:	4b83      	ldr	r3, [pc, #524]	; (80083fc <HAL_RCC_ClockConfig+0x240>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f003 030f 	and.w	r3, r3, #15
 80081f6:	683a      	ldr	r2, [r7, #0]
 80081f8:	429a      	cmp	r2, r3
 80081fa:	d001      	beq.n	8008200 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80081fc:	2301      	movs	r3, #1
 80081fe:	e184      	b.n	800850a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f003 0304 	and.w	r3, r3, #4
 8008208:	2b00      	cmp	r3, #0
 800820a:	d010      	beq.n	800822e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	691a      	ldr	r2, [r3, #16]
 8008210:	4b7b      	ldr	r3, [pc, #492]	; (8008400 <HAL_RCC_ClockConfig+0x244>)
 8008212:	699b      	ldr	r3, [r3, #24]
 8008214:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008218:	429a      	cmp	r2, r3
 800821a:	d908      	bls.n	800822e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800821c:	4b78      	ldr	r3, [pc, #480]	; (8008400 <HAL_RCC_ClockConfig+0x244>)
 800821e:	699b      	ldr	r3, [r3, #24]
 8008220:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	691b      	ldr	r3, [r3, #16]
 8008228:	4975      	ldr	r1, [pc, #468]	; (8008400 <HAL_RCC_ClockConfig+0x244>)
 800822a:	4313      	orrs	r3, r2
 800822c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f003 0308 	and.w	r3, r3, #8
 8008236:	2b00      	cmp	r3, #0
 8008238:	d010      	beq.n	800825c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	695a      	ldr	r2, [r3, #20]
 800823e:	4b70      	ldr	r3, [pc, #448]	; (8008400 <HAL_RCC_ClockConfig+0x244>)
 8008240:	69db      	ldr	r3, [r3, #28]
 8008242:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008246:	429a      	cmp	r2, r3
 8008248:	d908      	bls.n	800825c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800824a:	4b6d      	ldr	r3, [pc, #436]	; (8008400 <HAL_RCC_ClockConfig+0x244>)
 800824c:	69db      	ldr	r3, [r3, #28]
 800824e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	695b      	ldr	r3, [r3, #20]
 8008256:	496a      	ldr	r1, [pc, #424]	; (8008400 <HAL_RCC_ClockConfig+0x244>)
 8008258:	4313      	orrs	r3, r2
 800825a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f003 0310 	and.w	r3, r3, #16
 8008264:	2b00      	cmp	r3, #0
 8008266:	d010      	beq.n	800828a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	699a      	ldr	r2, [r3, #24]
 800826c:	4b64      	ldr	r3, [pc, #400]	; (8008400 <HAL_RCC_ClockConfig+0x244>)
 800826e:	69db      	ldr	r3, [r3, #28]
 8008270:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008274:	429a      	cmp	r2, r3
 8008276:	d908      	bls.n	800828a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008278:	4b61      	ldr	r3, [pc, #388]	; (8008400 <HAL_RCC_ClockConfig+0x244>)
 800827a:	69db      	ldr	r3, [r3, #28]
 800827c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	699b      	ldr	r3, [r3, #24]
 8008284:	495e      	ldr	r1, [pc, #376]	; (8008400 <HAL_RCC_ClockConfig+0x244>)
 8008286:	4313      	orrs	r3, r2
 8008288:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f003 0320 	and.w	r3, r3, #32
 8008292:	2b00      	cmp	r3, #0
 8008294:	d010      	beq.n	80082b8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	69da      	ldr	r2, [r3, #28]
 800829a:	4b59      	ldr	r3, [pc, #356]	; (8008400 <HAL_RCC_ClockConfig+0x244>)
 800829c:	6a1b      	ldr	r3, [r3, #32]
 800829e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80082a2:	429a      	cmp	r2, r3
 80082a4:	d908      	bls.n	80082b8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80082a6:	4b56      	ldr	r3, [pc, #344]	; (8008400 <HAL_RCC_ClockConfig+0x244>)
 80082a8:	6a1b      	ldr	r3, [r3, #32]
 80082aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	69db      	ldr	r3, [r3, #28]
 80082b2:	4953      	ldr	r1, [pc, #332]	; (8008400 <HAL_RCC_ClockConfig+0x244>)
 80082b4:	4313      	orrs	r3, r2
 80082b6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f003 0302 	and.w	r3, r3, #2
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d010      	beq.n	80082e6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	68da      	ldr	r2, [r3, #12]
 80082c8:	4b4d      	ldr	r3, [pc, #308]	; (8008400 <HAL_RCC_ClockConfig+0x244>)
 80082ca:	699b      	ldr	r3, [r3, #24]
 80082cc:	f003 030f 	and.w	r3, r3, #15
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d908      	bls.n	80082e6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80082d4:	4b4a      	ldr	r3, [pc, #296]	; (8008400 <HAL_RCC_ClockConfig+0x244>)
 80082d6:	699b      	ldr	r3, [r3, #24]
 80082d8:	f023 020f 	bic.w	r2, r3, #15
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	68db      	ldr	r3, [r3, #12]
 80082e0:	4947      	ldr	r1, [pc, #284]	; (8008400 <HAL_RCC_ClockConfig+0x244>)
 80082e2:	4313      	orrs	r3, r2
 80082e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f003 0301 	and.w	r3, r3, #1
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d055      	beq.n	800839e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80082f2:	4b43      	ldr	r3, [pc, #268]	; (8008400 <HAL_RCC_ClockConfig+0x244>)
 80082f4:	699b      	ldr	r3, [r3, #24]
 80082f6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	689b      	ldr	r3, [r3, #8]
 80082fe:	4940      	ldr	r1, [pc, #256]	; (8008400 <HAL_RCC_ClockConfig+0x244>)
 8008300:	4313      	orrs	r3, r2
 8008302:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	685b      	ldr	r3, [r3, #4]
 8008308:	2b02      	cmp	r3, #2
 800830a:	d107      	bne.n	800831c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800830c:	4b3c      	ldr	r3, [pc, #240]	; (8008400 <HAL_RCC_ClockConfig+0x244>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008314:	2b00      	cmp	r3, #0
 8008316:	d121      	bne.n	800835c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008318:	2301      	movs	r3, #1
 800831a:	e0f6      	b.n	800850a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	2b03      	cmp	r3, #3
 8008322:	d107      	bne.n	8008334 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008324:	4b36      	ldr	r3, [pc, #216]	; (8008400 <HAL_RCC_ClockConfig+0x244>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800832c:	2b00      	cmp	r3, #0
 800832e:	d115      	bne.n	800835c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008330:	2301      	movs	r3, #1
 8008332:	e0ea      	b.n	800850a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	685b      	ldr	r3, [r3, #4]
 8008338:	2b01      	cmp	r3, #1
 800833a:	d107      	bne.n	800834c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800833c:	4b30      	ldr	r3, [pc, #192]	; (8008400 <HAL_RCC_ClockConfig+0x244>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008344:	2b00      	cmp	r3, #0
 8008346:	d109      	bne.n	800835c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008348:	2301      	movs	r3, #1
 800834a:	e0de      	b.n	800850a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800834c:	4b2c      	ldr	r3, [pc, #176]	; (8008400 <HAL_RCC_ClockConfig+0x244>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f003 0304 	and.w	r3, r3, #4
 8008354:	2b00      	cmp	r3, #0
 8008356:	d101      	bne.n	800835c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008358:	2301      	movs	r3, #1
 800835a:	e0d6      	b.n	800850a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800835c:	4b28      	ldr	r3, [pc, #160]	; (8008400 <HAL_RCC_ClockConfig+0x244>)
 800835e:	691b      	ldr	r3, [r3, #16]
 8008360:	f023 0207 	bic.w	r2, r3, #7
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	4925      	ldr	r1, [pc, #148]	; (8008400 <HAL_RCC_ClockConfig+0x244>)
 800836a:	4313      	orrs	r3, r2
 800836c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800836e:	f7f9 ff01 	bl	8002174 <HAL_GetTick>
 8008372:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008374:	e00a      	b.n	800838c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008376:	f7f9 fefd 	bl	8002174 <HAL_GetTick>
 800837a:	4602      	mov	r2, r0
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	1ad3      	subs	r3, r2, r3
 8008380:	f241 3288 	movw	r2, #5000	; 0x1388
 8008384:	4293      	cmp	r3, r2
 8008386:	d901      	bls.n	800838c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008388:	2303      	movs	r3, #3
 800838a:	e0be      	b.n	800850a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800838c:	4b1c      	ldr	r3, [pc, #112]	; (8008400 <HAL_RCC_ClockConfig+0x244>)
 800838e:	691b      	ldr	r3, [r3, #16]
 8008390:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	00db      	lsls	r3, r3, #3
 800839a:	429a      	cmp	r2, r3
 800839c:	d1eb      	bne.n	8008376 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f003 0302 	and.w	r3, r3, #2
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d010      	beq.n	80083cc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	68da      	ldr	r2, [r3, #12]
 80083ae:	4b14      	ldr	r3, [pc, #80]	; (8008400 <HAL_RCC_ClockConfig+0x244>)
 80083b0:	699b      	ldr	r3, [r3, #24]
 80083b2:	f003 030f 	and.w	r3, r3, #15
 80083b6:	429a      	cmp	r2, r3
 80083b8:	d208      	bcs.n	80083cc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80083ba:	4b11      	ldr	r3, [pc, #68]	; (8008400 <HAL_RCC_ClockConfig+0x244>)
 80083bc:	699b      	ldr	r3, [r3, #24]
 80083be:	f023 020f 	bic.w	r2, r3, #15
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	68db      	ldr	r3, [r3, #12]
 80083c6:	490e      	ldr	r1, [pc, #56]	; (8008400 <HAL_RCC_ClockConfig+0x244>)
 80083c8:	4313      	orrs	r3, r2
 80083ca:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80083cc:	4b0b      	ldr	r3, [pc, #44]	; (80083fc <HAL_RCC_ClockConfig+0x240>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f003 030f 	and.w	r3, r3, #15
 80083d4:	683a      	ldr	r2, [r7, #0]
 80083d6:	429a      	cmp	r2, r3
 80083d8:	d214      	bcs.n	8008404 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083da:	4b08      	ldr	r3, [pc, #32]	; (80083fc <HAL_RCC_ClockConfig+0x240>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f023 020f 	bic.w	r2, r3, #15
 80083e2:	4906      	ldr	r1, [pc, #24]	; (80083fc <HAL_RCC_ClockConfig+0x240>)
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	4313      	orrs	r3, r2
 80083e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80083ea:	4b04      	ldr	r3, [pc, #16]	; (80083fc <HAL_RCC_ClockConfig+0x240>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f003 030f 	and.w	r3, r3, #15
 80083f2:	683a      	ldr	r2, [r7, #0]
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d005      	beq.n	8008404 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80083f8:	2301      	movs	r3, #1
 80083fa:	e086      	b.n	800850a <HAL_RCC_ClockConfig+0x34e>
 80083fc:	52002000 	.word	0x52002000
 8008400:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f003 0304 	and.w	r3, r3, #4
 800840c:	2b00      	cmp	r3, #0
 800840e:	d010      	beq.n	8008432 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	691a      	ldr	r2, [r3, #16]
 8008414:	4b3f      	ldr	r3, [pc, #252]	; (8008514 <HAL_RCC_ClockConfig+0x358>)
 8008416:	699b      	ldr	r3, [r3, #24]
 8008418:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800841c:	429a      	cmp	r2, r3
 800841e:	d208      	bcs.n	8008432 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008420:	4b3c      	ldr	r3, [pc, #240]	; (8008514 <HAL_RCC_ClockConfig+0x358>)
 8008422:	699b      	ldr	r3, [r3, #24]
 8008424:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	691b      	ldr	r3, [r3, #16]
 800842c:	4939      	ldr	r1, [pc, #228]	; (8008514 <HAL_RCC_ClockConfig+0x358>)
 800842e:	4313      	orrs	r3, r2
 8008430:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f003 0308 	and.w	r3, r3, #8
 800843a:	2b00      	cmp	r3, #0
 800843c:	d010      	beq.n	8008460 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	695a      	ldr	r2, [r3, #20]
 8008442:	4b34      	ldr	r3, [pc, #208]	; (8008514 <HAL_RCC_ClockConfig+0x358>)
 8008444:	69db      	ldr	r3, [r3, #28]
 8008446:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800844a:	429a      	cmp	r2, r3
 800844c:	d208      	bcs.n	8008460 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800844e:	4b31      	ldr	r3, [pc, #196]	; (8008514 <HAL_RCC_ClockConfig+0x358>)
 8008450:	69db      	ldr	r3, [r3, #28]
 8008452:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	695b      	ldr	r3, [r3, #20]
 800845a:	492e      	ldr	r1, [pc, #184]	; (8008514 <HAL_RCC_ClockConfig+0x358>)
 800845c:	4313      	orrs	r3, r2
 800845e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f003 0310 	and.w	r3, r3, #16
 8008468:	2b00      	cmp	r3, #0
 800846a:	d010      	beq.n	800848e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	699a      	ldr	r2, [r3, #24]
 8008470:	4b28      	ldr	r3, [pc, #160]	; (8008514 <HAL_RCC_ClockConfig+0x358>)
 8008472:	69db      	ldr	r3, [r3, #28]
 8008474:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008478:	429a      	cmp	r2, r3
 800847a:	d208      	bcs.n	800848e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800847c:	4b25      	ldr	r3, [pc, #148]	; (8008514 <HAL_RCC_ClockConfig+0x358>)
 800847e:	69db      	ldr	r3, [r3, #28]
 8008480:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	699b      	ldr	r3, [r3, #24]
 8008488:	4922      	ldr	r1, [pc, #136]	; (8008514 <HAL_RCC_ClockConfig+0x358>)
 800848a:	4313      	orrs	r3, r2
 800848c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f003 0320 	and.w	r3, r3, #32
 8008496:	2b00      	cmp	r3, #0
 8008498:	d010      	beq.n	80084bc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	69da      	ldr	r2, [r3, #28]
 800849e:	4b1d      	ldr	r3, [pc, #116]	; (8008514 <HAL_RCC_ClockConfig+0x358>)
 80084a0:	6a1b      	ldr	r3, [r3, #32]
 80084a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80084a6:	429a      	cmp	r2, r3
 80084a8:	d208      	bcs.n	80084bc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80084aa:	4b1a      	ldr	r3, [pc, #104]	; (8008514 <HAL_RCC_ClockConfig+0x358>)
 80084ac:	6a1b      	ldr	r3, [r3, #32]
 80084ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	69db      	ldr	r3, [r3, #28]
 80084b6:	4917      	ldr	r1, [pc, #92]	; (8008514 <HAL_RCC_ClockConfig+0x358>)
 80084b8:	4313      	orrs	r3, r2
 80084ba:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80084bc:	f000 f834 	bl	8008528 <HAL_RCC_GetSysClockFreq>
 80084c0:	4602      	mov	r2, r0
 80084c2:	4b14      	ldr	r3, [pc, #80]	; (8008514 <HAL_RCC_ClockConfig+0x358>)
 80084c4:	699b      	ldr	r3, [r3, #24]
 80084c6:	0a1b      	lsrs	r3, r3, #8
 80084c8:	f003 030f 	and.w	r3, r3, #15
 80084cc:	4912      	ldr	r1, [pc, #72]	; (8008518 <HAL_RCC_ClockConfig+0x35c>)
 80084ce:	5ccb      	ldrb	r3, [r1, r3]
 80084d0:	f003 031f 	and.w	r3, r3, #31
 80084d4:	fa22 f303 	lsr.w	r3, r2, r3
 80084d8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80084da:	4b0e      	ldr	r3, [pc, #56]	; (8008514 <HAL_RCC_ClockConfig+0x358>)
 80084dc:	699b      	ldr	r3, [r3, #24]
 80084de:	f003 030f 	and.w	r3, r3, #15
 80084e2:	4a0d      	ldr	r2, [pc, #52]	; (8008518 <HAL_RCC_ClockConfig+0x35c>)
 80084e4:	5cd3      	ldrb	r3, [r2, r3]
 80084e6:	f003 031f 	and.w	r3, r3, #31
 80084ea:	693a      	ldr	r2, [r7, #16]
 80084ec:	fa22 f303 	lsr.w	r3, r2, r3
 80084f0:	4a0a      	ldr	r2, [pc, #40]	; (800851c <HAL_RCC_ClockConfig+0x360>)
 80084f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80084f4:	4a0a      	ldr	r2, [pc, #40]	; (8008520 <HAL_RCC_ClockConfig+0x364>)
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80084fa:	4b0a      	ldr	r3, [pc, #40]	; (8008524 <HAL_RCC_ClockConfig+0x368>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	4618      	mov	r0, r3
 8008500:	f7f9 fdee 	bl	80020e0 <HAL_InitTick>
 8008504:	4603      	mov	r3, r0
 8008506:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008508:	7bfb      	ldrb	r3, [r7, #15]
}
 800850a:	4618      	mov	r0, r3
 800850c:	3718      	adds	r7, #24
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}
 8008512:	bf00      	nop
 8008514:	58024400 	.word	0x58024400
 8008518:	08013a60 	.word	0x08013a60
 800851c:	24000004 	.word	0x24000004
 8008520:	24000000 	.word	0x24000000
 8008524:	24000008 	.word	0x24000008

08008528 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008528:	b480      	push	{r7}
 800852a:	b089      	sub	sp, #36	; 0x24
 800852c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800852e:	4bb3      	ldr	r3, [pc, #716]	; (80087fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008530:	691b      	ldr	r3, [r3, #16]
 8008532:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008536:	2b18      	cmp	r3, #24
 8008538:	f200 8155 	bhi.w	80087e6 <HAL_RCC_GetSysClockFreq+0x2be>
 800853c:	a201      	add	r2, pc, #4	; (adr r2, 8008544 <HAL_RCC_GetSysClockFreq+0x1c>)
 800853e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008542:	bf00      	nop
 8008544:	080085a9 	.word	0x080085a9
 8008548:	080087e7 	.word	0x080087e7
 800854c:	080087e7 	.word	0x080087e7
 8008550:	080087e7 	.word	0x080087e7
 8008554:	080087e7 	.word	0x080087e7
 8008558:	080087e7 	.word	0x080087e7
 800855c:	080087e7 	.word	0x080087e7
 8008560:	080087e7 	.word	0x080087e7
 8008564:	080085cf 	.word	0x080085cf
 8008568:	080087e7 	.word	0x080087e7
 800856c:	080087e7 	.word	0x080087e7
 8008570:	080087e7 	.word	0x080087e7
 8008574:	080087e7 	.word	0x080087e7
 8008578:	080087e7 	.word	0x080087e7
 800857c:	080087e7 	.word	0x080087e7
 8008580:	080087e7 	.word	0x080087e7
 8008584:	080085d5 	.word	0x080085d5
 8008588:	080087e7 	.word	0x080087e7
 800858c:	080087e7 	.word	0x080087e7
 8008590:	080087e7 	.word	0x080087e7
 8008594:	080087e7 	.word	0x080087e7
 8008598:	080087e7 	.word	0x080087e7
 800859c:	080087e7 	.word	0x080087e7
 80085a0:	080087e7 	.word	0x080087e7
 80085a4:	080085db 	.word	0x080085db
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80085a8:	4b94      	ldr	r3, [pc, #592]	; (80087fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f003 0320 	and.w	r3, r3, #32
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d009      	beq.n	80085c8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80085b4:	4b91      	ldr	r3, [pc, #580]	; (80087fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	08db      	lsrs	r3, r3, #3
 80085ba:	f003 0303 	and.w	r3, r3, #3
 80085be:	4a90      	ldr	r2, [pc, #576]	; (8008800 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80085c0:	fa22 f303 	lsr.w	r3, r2, r3
 80085c4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80085c6:	e111      	b.n	80087ec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80085c8:	4b8d      	ldr	r3, [pc, #564]	; (8008800 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80085ca:	61bb      	str	r3, [r7, #24]
    break;
 80085cc:	e10e      	b.n	80087ec <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80085ce:	4b8d      	ldr	r3, [pc, #564]	; (8008804 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80085d0:	61bb      	str	r3, [r7, #24]
    break;
 80085d2:	e10b      	b.n	80087ec <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80085d4:	4b8c      	ldr	r3, [pc, #560]	; (8008808 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80085d6:	61bb      	str	r3, [r7, #24]
    break;
 80085d8:	e108      	b.n	80087ec <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80085da:	4b88      	ldr	r3, [pc, #544]	; (80087fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085de:	f003 0303 	and.w	r3, r3, #3
 80085e2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80085e4:	4b85      	ldr	r3, [pc, #532]	; (80087fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085e8:	091b      	lsrs	r3, r3, #4
 80085ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80085ee:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80085f0:	4b82      	ldr	r3, [pc, #520]	; (80087fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085f4:	f003 0301 	and.w	r3, r3, #1
 80085f8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80085fa:	4b80      	ldr	r3, [pc, #512]	; (80087fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085fe:	08db      	lsrs	r3, r3, #3
 8008600:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008604:	68fa      	ldr	r2, [r7, #12]
 8008606:	fb02 f303 	mul.w	r3, r2, r3
 800860a:	ee07 3a90 	vmov	s15, r3
 800860e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008612:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	2b00      	cmp	r3, #0
 800861a:	f000 80e1 	beq.w	80087e0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	2b02      	cmp	r3, #2
 8008622:	f000 8083 	beq.w	800872c <HAL_RCC_GetSysClockFreq+0x204>
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	2b02      	cmp	r3, #2
 800862a:	f200 80a1 	bhi.w	8008770 <HAL_RCC_GetSysClockFreq+0x248>
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d003      	beq.n	800863c <HAL_RCC_GetSysClockFreq+0x114>
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	2b01      	cmp	r3, #1
 8008638:	d056      	beq.n	80086e8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800863a:	e099      	b.n	8008770 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800863c:	4b6f      	ldr	r3, [pc, #444]	; (80087fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f003 0320 	and.w	r3, r3, #32
 8008644:	2b00      	cmp	r3, #0
 8008646:	d02d      	beq.n	80086a4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008648:	4b6c      	ldr	r3, [pc, #432]	; (80087fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	08db      	lsrs	r3, r3, #3
 800864e:	f003 0303 	and.w	r3, r3, #3
 8008652:	4a6b      	ldr	r2, [pc, #428]	; (8008800 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008654:	fa22 f303 	lsr.w	r3, r2, r3
 8008658:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	ee07 3a90 	vmov	s15, r3
 8008660:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	ee07 3a90 	vmov	s15, r3
 800866a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800866e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008672:	4b62      	ldr	r3, [pc, #392]	; (80087fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008676:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800867a:	ee07 3a90 	vmov	s15, r3
 800867e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008682:	ed97 6a02 	vldr	s12, [r7, #8]
 8008686:	eddf 5a61 	vldr	s11, [pc, #388]	; 800880c <HAL_RCC_GetSysClockFreq+0x2e4>
 800868a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800868e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008692:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008696:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800869a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800869e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80086a2:	e087      	b.n	80087b4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	ee07 3a90 	vmov	s15, r3
 80086aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086ae:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008810 <HAL_RCC_GetSysClockFreq+0x2e8>
 80086b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086b6:	4b51      	ldr	r3, [pc, #324]	; (80087fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086be:	ee07 3a90 	vmov	s15, r3
 80086c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80086ca:	eddf 5a50 	vldr	s11, [pc, #320]	; 800880c <HAL_RCC_GetSysClockFreq+0x2e4>
 80086ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80086e6:	e065      	b.n	80087b4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	ee07 3a90 	vmov	s15, r3
 80086ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086f2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008814 <HAL_RCC_GetSysClockFreq+0x2ec>
 80086f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086fa:	4b40      	ldr	r3, [pc, #256]	; (80087fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008702:	ee07 3a90 	vmov	s15, r3
 8008706:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800870a:	ed97 6a02 	vldr	s12, [r7, #8]
 800870e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800880c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008712:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008716:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800871a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800871e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008726:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800872a:	e043      	b.n	80087b4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	ee07 3a90 	vmov	s15, r3
 8008732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008736:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008818 <HAL_RCC_GetSysClockFreq+0x2f0>
 800873a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800873e:	4b2f      	ldr	r3, [pc, #188]	; (80087fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008746:	ee07 3a90 	vmov	s15, r3
 800874a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800874e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008752:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800880c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008756:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800875a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800875e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008762:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800876a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800876e:	e021      	b.n	80087b4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008770:	693b      	ldr	r3, [r7, #16]
 8008772:	ee07 3a90 	vmov	s15, r3
 8008776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800877a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008814 <HAL_RCC_GetSysClockFreq+0x2ec>
 800877e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008782:	4b1e      	ldr	r3, [pc, #120]	; (80087fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800878a:	ee07 3a90 	vmov	s15, r3
 800878e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008792:	ed97 6a02 	vldr	s12, [r7, #8]
 8008796:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800880c <HAL_RCC_GetSysClockFreq+0x2e4>
 800879a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800879e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80087b2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80087b4:	4b11      	ldr	r3, [pc, #68]	; (80087fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087b8:	0a5b      	lsrs	r3, r3, #9
 80087ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087be:	3301      	adds	r3, #1
 80087c0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	ee07 3a90 	vmov	s15, r3
 80087c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80087cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80087d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087d8:	ee17 3a90 	vmov	r3, s15
 80087dc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80087de:	e005      	b.n	80087ec <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80087e0:	2300      	movs	r3, #0
 80087e2:	61bb      	str	r3, [r7, #24]
    break;
 80087e4:	e002      	b.n	80087ec <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80087e6:	4b07      	ldr	r3, [pc, #28]	; (8008804 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80087e8:	61bb      	str	r3, [r7, #24]
    break;
 80087ea:	bf00      	nop
  }

  return sysclockfreq;
 80087ec:	69bb      	ldr	r3, [r7, #24]
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	3724      	adds	r7, #36	; 0x24
 80087f2:	46bd      	mov	sp, r7
 80087f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f8:	4770      	bx	lr
 80087fa:	bf00      	nop
 80087fc:	58024400 	.word	0x58024400
 8008800:	03d09000 	.word	0x03d09000
 8008804:	003d0900 	.word	0x003d0900
 8008808:	00f42400 	.word	0x00f42400
 800880c:	46000000 	.word	0x46000000
 8008810:	4c742400 	.word	0x4c742400
 8008814:	4a742400 	.word	0x4a742400
 8008818:	4b742400 	.word	0x4b742400

0800881c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b082      	sub	sp, #8
 8008820:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008822:	f7ff fe81 	bl	8008528 <HAL_RCC_GetSysClockFreq>
 8008826:	4602      	mov	r2, r0
 8008828:	4b10      	ldr	r3, [pc, #64]	; (800886c <HAL_RCC_GetHCLKFreq+0x50>)
 800882a:	699b      	ldr	r3, [r3, #24]
 800882c:	0a1b      	lsrs	r3, r3, #8
 800882e:	f003 030f 	and.w	r3, r3, #15
 8008832:	490f      	ldr	r1, [pc, #60]	; (8008870 <HAL_RCC_GetHCLKFreq+0x54>)
 8008834:	5ccb      	ldrb	r3, [r1, r3]
 8008836:	f003 031f 	and.w	r3, r3, #31
 800883a:	fa22 f303 	lsr.w	r3, r2, r3
 800883e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008840:	4b0a      	ldr	r3, [pc, #40]	; (800886c <HAL_RCC_GetHCLKFreq+0x50>)
 8008842:	699b      	ldr	r3, [r3, #24]
 8008844:	f003 030f 	and.w	r3, r3, #15
 8008848:	4a09      	ldr	r2, [pc, #36]	; (8008870 <HAL_RCC_GetHCLKFreq+0x54>)
 800884a:	5cd3      	ldrb	r3, [r2, r3]
 800884c:	f003 031f 	and.w	r3, r3, #31
 8008850:	687a      	ldr	r2, [r7, #4]
 8008852:	fa22 f303 	lsr.w	r3, r2, r3
 8008856:	4a07      	ldr	r2, [pc, #28]	; (8008874 <HAL_RCC_GetHCLKFreq+0x58>)
 8008858:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800885a:	4a07      	ldr	r2, [pc, #28]	; (8008878 <HAL_RCC_GetHCLKFreq+0x5c>)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008860:	4b04      	ldr	r3, [pc, #16]	; (8008874 <HAL_RCC_GetHCLKFreq+0x58>)
 8008862:	681b      	ldr	r3, [r3, #0]
}
 8008864:	4618      	mov	r0, r3
 8008866:	3708      	adds	r7, #8
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}
 800886c:	58024400 	.word	0x58024400
 8008870:	08013a60 	.word	0x08013a60
 8008874:	24000004 	.word	0x24000004
 8008878:	24000000 	.word	0x24000000

0800887c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008880:	f7ff ffcc 	bl	800881c <HAL_RCC_GetHCLKFreq>
 8008884:	4602      	mov	r2, r0
 8008886:	4b06      	ldr	r3, [pc, #24]	; (80088a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008888:	69db      	ldr	r3, [r3, #28]
 800888a:	091b      	lsrs	r3, r3, #4
 800888c:	f003 0307 	and.w	r3, r3, #7
 8008890:	4904      	ldr	r1, [pc, #16]	; (80088a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008892:	5ccb      	ldrb	r3, [r1, r3]
 8008894:	f003 031f 	and.w	r3, r3, #31
 8008898:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800889c:	4618      	mov	r0, r3
 800889e:	bd80      	pop	{r7, pc}
 80088a0:	58024400 	.word	0x58024400
 80088a4:	08013a60 	.word	0x08013a60

080088a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80088ac:	f7ff ffb6 	bl	800881c <HAL_RCC_GetHCLKFreq>
 80088b0:	4602      	mov	r2, r0
 80088b2:	4b06      	ldr	r3, [pc, #24]	; (80088cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80088b4:	69db      	ldr	r3, [r3, #28]
 80088b6:	0a1b      	lsrs	r3, r3, #8
 80088b8:	f003 0307 	and.w	r3, r3, #7
 80088bc:	4904      	ldr	r1, [pc, #16]	; (80088d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80088be:	5ccb      	ldrb	r3, [r1, r3]
 80088c0:	f003 031f 	and.w	r3, r3, #31
 80088c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	bd80      	pop	{r7, pc}
 80088cc:	58024400 	.word	0x58024400
 80088d0:	08013a60 	.word	0x08013a60

080088d4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80088d4:	b480      	push	{r7}
 80088d6:	b083      	sub	sp, #12
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
 80088dc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	223f      	movs	r2, #63	; 0x3f
 80088e2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80088e4:	4b1a      	ldr	r3, [pc, #104]	; (8008950 <HAL_RCC_GetClockConfig+0x7c>)
 80088e6:	691b      	ldr	r3, [r3, #16]
 80088e8:	f003 0207 	and.w	r2, r3, #7
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80088f0:	4b17      	ldr	r3, [pc, #92]	; (8008950 <HAL_RCC_GetClockConfig+0x7c>)
 80088f2:	699b      	ldr	r3, [r3, #24]
 80088f4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80088fc:	4b14      	ldr	r3, [pc, #80]	; (8008950 <HAL_RCC_GetClockConfig+0x7c>)
 80088fe:	699b      	ldr	r3, [r3, #24]
 8008900:	f003 020f 	and.w	r2, r3, #15
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8008908:	4b11      	ldr	r3, [pc, #68]	; (8008950 <HAL_RCC_GetClockConfig+0x7c>)
 800890a:	699b      	ldr	r3, [r3, #24]
 800890c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8008914:	4b0e      	ldr	r3, [pc, #56]	; (8008950 <HAL_RCC_GetClockConfig+0x7c>)
 8008916:	69db      	ldr	r3, [r3, #28]
 8008918:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8008920:	4b0b      	ldr	r3, [pc, #44]	; (8008950 <HAL_RCC_GetClockConfig+0x7c>)
 8008922:	69db      	ldr	r3, [r3, #28]
 8008924:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800892c:	4b08      	ldr	r3, [pc, #32]	; (8008950 <HAL_RCC_GetClockConfig+0x7c>)
 800892e:	6a1b      	ldr	r3, [r3, #32]
 8008930:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008938:	4b06      	ldr	r3, [pc, #24]	; (8008954 <HAL_RCC_GetClockConfig+0x80>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f003 020f 	and.w	r2, r3, #15
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	601a      	str	r2, [r3, #0]
}
 8008944:	bf00      	nop
 8008946:	370c      	adds	r7, #12
 8008948:	46bd      	mov	sp, r7
 800894a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894e:	4770      	bx	lr
 8008950:	58024400 	.word	0x58024400
 8008954:	52002000 	.word	0x52002000

08008958 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b086      	sub	sp, #24
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008960:	2300      	movs	r3, #0
 8008962:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008964:	2300      	movs	r3, #0
 8008966:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008970:	2b00      	cmp	r3, #0
 8008972:	d03f      	beq.n	80089f4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008978:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800897c:	d02a      	beq.n	80089d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800897e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008982:	d824      	bhi.n	80089ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008984:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008988:	d018      	beq.n	80089bc <HAL_RCCEx_PeriphCLKConfig+0x64>
 800898a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800898e:	d81e      	bhi.n	80089ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008990:	2b00      	cmp	r3, #0
 8008992:	d003      	beq.n	800899c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008994:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008998:	d007      	beq.n	80089aa <HAL_RCCEx_PeriphCLKConfig+0x52>
 800899a:	e018      	b.n	80089ce <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800899c:	4ba3      	ldr	r3, [pc, #652]	; (8008c2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800899e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089a0:	4aa2      	ldr	r2, [pc, #648]	; (8008c2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80089a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80089a8:	e015      	b.n	80089d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	3304      	adds	r3, #4
 80089ae:	2102      	movs	r1, #2
 80089b0:	4618      	mov	r0, r3
 80089b2:	f001 f9d5 	bl	8009d60 <RCCEx_PLL2_Config>
 80089b6:	4603      	mov	r3, r0
 80089b8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80089ba:	e00c      	b.n	80089d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	3324      	adds	r3, #36	; 0x24
 80089c0:	2102      	movs	r1, #2
 80089c2:	4618      	mov	r0, r3
 80089c4:	f001 fa7e 	bl	8009ec4 <RCCEx_PLL3_Config>
 80089c8:	4603      	mov	r3, r0
 80089ca:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80089cc:	e003      	b.n	80089d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80089ce:	2301      	movs	r3, #1
 80089d0:	75fb      	strb	r3, [r7, #23]
      break;
 80089d2:	e000      	b.n	80089d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80089d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80089d6:	7dfb      	ldrb	r3, [r7, #23]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d109      	bne.n	80089f0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80089dc:	4b93      	ldr	r3, [pc, #588]	; (8008c2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80089de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089e8:	4990      	ldr	r1, [pc, #576]	; (8008c2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80089ea:	4313      	orrs	r3, r2
 80089ec:	650b      	str	r3, [r1, #80]	; 0x50
 80089ee:	e001      	b.n	80089f4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089f0:	7dfb      	ldrb	r3, [r7, #23]
 80089f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d03d      	beq.n	8008a7c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a04:	2b04      	cmp	r3, #4
 8008a06:	d826      	bhi.n	8008a56 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008a08:	a201      	add	r2, pc, #4	; (adr r2, 8008a10 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8008a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a0e:	bf00      	nop
 8008a10:	08008a25 	.word	0x08008a25
 8008a14:	08008a33 	.word	0x08008a33
 8008a18:	08008a45 	.word	0x08008a45
 8008a1c:	08008a5d 	.word	0x08008a5d
 8008a20:	08008a5d 	.word	0x08008a5d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a24:	4b81      	ldr	r3, [pc, #516]	; (8008c2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a28:	4a80      	ldr	r2, [pc, #512]	; (8008c2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008a2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a2e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008a30:	e015      	b.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	3304      	adds	r3, #4
 8008a36:	2100      	movs	r1, #0
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f001 f991 	bl	8009d60 <RCCEx_PLL2_Config>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008a42:	e00c      	b.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	3324      	adds	r3, #36	; 0x24
 8008a48:	2100      	movs	r1, #0
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f001 fa3a 	bl	8009ec4 <RCCEx_PLL3_Config>
 8008a50:	4603      	mov	r3, r0
 8008a52:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008a54:	e003      	b.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008a56:	2301      	movs	r3, #1
 8008a58:	75fb      	strb	r3, [r7, #23]
      break;
 8008a5a:	e000      	b.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8008a5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a5e:	7dfb      	ldrb	r3, [r7, #23]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d109      	bne.n	8008a78 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008a64:	4b71      	ldr	r3, [pc, #452]	; (8008c2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008a66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a68:	f023 0207 	bic.w	r2, r3, #7
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a70:	496e      	ldr	r1, [pc, #440]	; (8008c2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008a72:	4313      	orrs	r3, r2
 8008a74:	650b      	str	r3, [r1, #80]	; 0x50
 8008a76:	e001      	b.n	8008a7c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a78:	7dfb      	ldrb	r3, [r7, #23]
 8008a7a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d042      	beq.n	8008b0e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a90:	d02b      	beq.n	8008aea <HAL_RCCEx_PeriphCLKConfig+0x192>
 8008a92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a96:	d825      	bhi.n	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008a98:	2bc0      	cmp	r3, #192	; 0xc0
 8008a9a:	d028      	beq.n	8008aee <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008a9c:	2bc0      	cmp	r3, #192	; 0xc0
 8008a9e:	d821      	bhi.n	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008aa0:	2b80      	cmp	r3, #128	; 0x80
 8008aa2:	d016      	beq.n	8008ad2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8008aa4:	2b80      	cmp	r3, #128	; 0x80
 8008aa6:	d81d      	bhi.n	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d002      	beq.n	8008ab2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8008aac:	2b40      	cmp	r3, #64	; 0x40
 8008aae:	d007      	beq.n	8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8008ab0:	e018      	b.n	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ab2:	4b5e      	ldr	r3, [pc, #376]	; (8008c2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ab6:	4a5d      	ldr	r2, [pc, #372]	; (8008c2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008ab8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008abc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008abe:	e017      	b.n	8008af0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	3304      	adds	r3, #4
 8008ac4:	2100      	movs	r1, #0
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f001 f94a 	bl	8009d60 <RCCEx_PLL2_Config>
 8008acc:	4603      	mov	r3, r0
 8008ace:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008ad0:	e00e      	b.n	8008af0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	3324      	adds	r3, #36	; 0x24
 8008ad6:	2100      	movs	r1, #0
 8008ad8:	4618      	mov	r0, r3
 8008ada:	f001 f9f3 	bl	8009ec4 <RCCEx_PLL3_Config>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008ae2:	e005      	b.n	8008af0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	75fb      	strb	r3, [r7, #23]
      break;
 8008ae8:	e002      	b.n	8008af0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8008aea:	bf00      	nop
 8008aec:	e000      	b.n	8008af0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8008aee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008af0:	7dfb      	ldrb	r3, [r7, #23]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d109      	bne.n	8008b0a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008af6:	4b4d      	ldr	r3, [pc, #308]	; (8008c2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008af8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008afa:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b02:	494a      	ldr	r1, [pc, #296]	; (8008c2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008b04:	4313      	orrs	r3, r2
 8008b06:	650b      	str	r3, [r1, #80]	; 0x50
 8008b08:	e001      	b.n	8008b0e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b0a:	7dfb      	ldrb	r3, [r7, #23]
 8008b0c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d049      	beq.n	8008bae <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008b20:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008b24:	d030      	beq.n	8008b88 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8008b26:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008b2a:	d82a      	bhi.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008b2c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008b30:	d02c      	beq.n	8008b8c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8008b32:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008b36:	d824      	bhi.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008b38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008b3c:	d018      	beq.n	8008b70 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8008b3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008b42:	d81e      	bhi.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d003      	beq.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8008b48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b4c:	d007      	beq.n	8008b5e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8008b4e:	e018      	b.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b50:	4b36      	ldr	r3, [pc, #216]	; (8008c2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b54:	4a35      	ldr	r2, [pc, #212]	; (8008c2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008b56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b5a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008b5c:	e017      	b.n	8008b8e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	3304      	adds	r3, #4
 8008b62:	2100      	movs	r1, #0
 8008b64:	4618      	mov	r0, r3
 8008b66:	f001 f8fb 	bl	8009d60 <RCCEx_PLL2_Config>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008b6e:	e00e      	b.n	8008b8e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	3324      	adds	r3, #36	; 0x24
 8008b74:	2100      	movs	r1, #0
 8008b76:	4618      	mov	r0, r3
 8008b78:	f001 f9a4 	bl	8009ec4 <RCCEx_PLL3_Config>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008b80:	e005      	b.n	8008b8e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008b82:	2301      	movs	r3, #1
 8008b84:	75fb      	strb	r3, [r7, #23]
      break;
 8008b86:	e002      	b.n	8008b8e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008b88:	bf00      	nop
 8008b8a:	e000      	b.n	8008b8e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008b8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b8e:	7dfb      	ldrb	r3, [r7, #23]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d10a      	bne.n	8008baa <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008b94:	4b25      	ldr	r3, [pc, #148]	; (8008c2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b98:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008ba2:	4922      	ldr	r1, [pc, #136]	; (8008c2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008ba4:	4313      	orrs	r3, r2
 8008ba6:	658b      	str	r3, [r1, #88]	; 0x58
 8008ba8:	e001      	b.n	8008bae <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008baa:	7dfb      	ldrb	r3, [r7, #23]
 8008bac:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d04b      	beq.n	8008c52 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008bc0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008bc4:	d030      	beq.n	8008c28 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8008bc6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008bca:	d82a      	bhi.n	8008c22 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008bcc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008bd0:	d02e      	beq.n	8008c30 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8008bd2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008bd6:	d824      	bhi.n	8008c22 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008bd8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008bdc:	d018      	beq.n	8008c10 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8008bde:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008be2:	d81e      	bhi.n	8008c22 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d003      	beq.n	8008bf0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008be8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008bec:	d007      	beq.n	8008bfe <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8008bee:	e018      	b.n	8008c22 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008bf0:	4b0e      	ldr	r3, [pc, #56]	; (8008c2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bf4:	4a0d      	ldr	r2, [pc, #52]	; (8008c2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008bf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008bfa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008bfc:	e019      	b.n	8008c32 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	3304      	adds	r3, #4
 8008c02:	2100      	movs	r1, #0
 8008c04:	4618      	mov	r0, r3
 8008c06:	f001 f8ab 	bl	8009d60 <RCCEx_PLL2_Config>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008c0e:	e010      	b.n	8008c32 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	3324      	adds	r3, #36	; 0x24
 8008c14:	2100      	movs	r1, #0
 8008c16:	4618      	mov	r0, r3
 8008c18:	f001 f954 	bl	8009ec4 <RCCEx_PLL3_Config>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008c20:	e007      	b.n	8008c32 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008c22:	2301      	movs	r3, #1
 8008c24:	75fb      	strb	r3, [r7, #23]
      break;
 8008c26:	e004      	b.n	8008c32 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8008c28:	bf00      	nop
 8008c2a:	e002      	b.n	8008c32 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8008c2c:	58024400 	.word	0x58024400
      break;
 8008c30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c32:	7dfb      	ldrb	r3, [r7, #23]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d10a      	bne.n	8008c4e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008c38:	4b99      	ldr	r3, [pc, #612]	; (8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c3c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008c46:	4996      	ldr	r1, [pc, #600]	; (8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008c48:	4313      	orrs	r3, r2
 8008c4a:	658b      	str	r3, [r1, #88]	; 0x58
 8008c4c:	e001      	b.n	8008c52 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c4e:	7dfb      	ldrb	r3, [r7, #23]
 8008c50:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d032      	beq.n	8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c62:	2b30      	cmp	r3, #48	; 0x30
 8008c64:	d01c      	beq.n	8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8008c66:	2b30      	cmp	r3, #48	; 0x30
 8008c68:	d817      	bhi.n	8008c9a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8008c6a:	2b20      	cmp	r3, #32
 8008c6c:	d00c      	beq.n	8008c88 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8008c6e:	2b20      	cmp	r3, #32
 8008c70:	d813      	bhi.n	8008c9a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d016      	beq.n	8008ca4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8008c76:	2b10      	cmp	r3, #16
 8008c78:	d10f      	bne.n	8008c9a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c7a:	4b89      	ldr	r3, [pc, #548]	; (8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c7e:	4a88      	ldr	r2, [pc, #544]	; (8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008c80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c84:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008c86:	e00e      	b.n	8008ca6 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	3304      	adds	r3, #4
 8008c8c:	2102      	movs	r1, #2
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f001 f866 	bl	8009d60 <RCCEx_PLL2_Config>
 8008c94:	4603      	mov	r3, r0
 8008c96:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008c98:	e005      	b.n	8008ca6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	75fb      	strb	r3, [r7, #23]
      break;
 8008c9e:	e002      	b.n	8008ca6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8008ca0:	bf00      	nop
 8008ca2:	e000      	b.n	8008ca6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8008ca4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ca6:	7dfb      	ldrb	r3, [r7, #23]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d109      	bne.n	8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008cac:	4b7c      	ldr	r3, [pc, #496]	; (8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008cae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cb0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008cb8:	4979      	ldr	r1, [pc, #484]	; (8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008cbe:	e001      	b.n	8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cc0:	7dfb      	ldrb	r3, [r7, #23]
 8008cc2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d047      	beq.n	8008d60 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cd4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008cd8:	d030      	beq.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8008cda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008cde:	d82a      	bhi.n	8008d36 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008ce0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008ce4:	d02c      	beq.n	8008d40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8008ce6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008cea:	d824      	bhi.n	8008d36 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008cec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cf0:	d018      	beq.n	8008d24 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8008cf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cf6:	d81e      	bhi.n	8008d36 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d003      	beq.n	8008d04 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8008cfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d00:	d007      	beq.n	8008d12 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8008d02:	e018      	b.n	8008d36 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d04:	4b66      	ldr	r3, [pc, #408]	; (8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d08:	4a65      	ldr	r2, [pc, #404]	; (8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008d0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d0e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008d10:	e017      	b.n	8008d42 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	3304      	adds	r3, #4
 8008d16:	2100      	movs	r1, #0
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f001 f821 	bl	8009d60 <RCCEx_PLL2_Config>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008d22:	e00e      	b.n	8008d42 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	3324      	adds	r3, #36	; 0x24
 8008d28:	2100      	movs	r1, #0
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f001 f8ca 	bl	8009ec4 <RCCEx_PLL3_Config>
 8008d30:	4603      	mov	r3, r0
 8008d32:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008d34:	e005      	b.n	8008d42 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008d36:	2301      	movs	r3, #1
 8008d38:	75fb      	strb	r3, [r7, #23]
      break;
 8008d3a:	e002      	b.n	8008d42 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8008d3c:	bf00      	nop
 8008d3e:	e000      	b.n	8008d42 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8008d40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d42:	7dfb      	ldrb	r3, [r7, #23]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d109      	bne.n	8008d5c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008d48:	4b55      	ldr	r3, [pc, #340]	; (8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008d4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d4c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d54:	4952      	ldr	r1, [pc, #328]	; (8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008d56:	4313      	orrs	r3, r2
 8008d58:	650b      	str	r3, [r1, #80]	; 0x50
 8008d5a:	e001      	b.n	8008d60 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d5c:	7dfb      	ldrb	r3, [r7, #23]
 8008d5e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d049      	beq.n	8008e00 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008d74:	d02e      	beq.n	8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8008d76:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008d7a:	d828      	bhi.n	8008dce <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008d7c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008d80:	d02a      	beq.n	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8008d82:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008d86:	d822      	bhi.n	8008dce <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008d88:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008d8c:	d026      	beq.n	8008ddc <HAL_RCCEx_PeriphCLKConfig+0x484>
 8008d8e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008d92:	d81c      	bhi.n	8008dce <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008d94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d98:	d010      	beq.n	8008dbc <HAL_RCCEx_PeriphCLKConfig+0x464>
 8008d9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d9e:	d816      	bhi.n	8008dce <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d01d      	beq.n	8008de0 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8008da4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008da8:	d111      	bne.n	8008dce <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	3304      	adds	r3, #4
 8008dae:	2101      	movs	r1, #1
 8008db0:	4618      	mov	r0, r3
 8008db2:	f000 ffd5 	bl	8009d60 <RCCEx_PLL2_Config>
 8008db6:	4603      	mov	r3, r0
 8008db8:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008dba:	e012      	b.n	8008de2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	3324      	adds	r3, #36	; 0x24
 8008dc0:	2101      	movs	r1, #1
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f001 f87e 	bl	8009ec4 <RCCEx_PLL3_Config>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008dcc:	e009      	b.n	8008de2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008dce:	2301      	movs	r3, #1
 8008dd0:	75fb      	strb	r3, [r7, #23]
      break;
 8008dd2:	e006      	b.n	8008de2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008dd4:	bf00      	nop
 8008dd6:	e004      	b.n	8008de2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008dd8:	bf00      	nop
 8008dda:	e002      	b.n	8008de2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008ddc:	bf00      	nop
 8008dde:	e000      	b.n	8008de2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008de0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008de2:	7dfb      	ldrb	r3, [r7, #23]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d109      	bne.n	8008dfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008de8:	4b2d      	ldr	r3, [pc, #180]	; (8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008dea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008dec:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008df4:	492a      	ldr	r1, [pc, #168]	; (8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008df6:	4313      	orrs	r3, r2
 8008df8:	650b      	str	r3, [r1, #80]	; 0x50
 8008dfa:	e001      	b.n	8008e00 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dfc:	7dfb      	ldrb	r3, [r7, #23]
 8008dfe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d04d      	beq.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008e12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e16:	d02e      	beq.n	8008e76 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8008e18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e1c:	d828      	bhi.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e22:	d02a      	beq.n	8008e7a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8008e24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e28:	d822      	bhi.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008e2a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008e2e:	d026      	beq.n	8008e7e <HAL_RCCEx_PeriphCLKConfig+0x526>
 8008e30:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008e34:	d81c      	bhi.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008e36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e3a:	d010      	beq.n	8008e5e <HAL_RCCEx_PeriphCLKConfig+0x506>
 8008e3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e40:	d816      	bhi.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d01d      	beq.n	8008e82 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8008e46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008e4a:	d111      	bne.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	3304      	adds	r3, #4
 8008e50:	2101      	movs	r1, #1
 8008e52:	4618      	mov	r0, r3
 8008e54:	f000 ff84 	bl	8009d60 <RCCEx_PLL2_Config>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008e5c:	e012      	b.n	8008e84 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	3324      	adds	r3, #36	; 0x24
 8008e62:	2101      	movs	r1, #1
 8008e64:	4618      	mov	r0, r3
 8008e66:	f001 f82d 	bl	8009ec4 <RCCEx_PLL3_Config>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008e6e:	e009      	b.n	8008e84 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008e70:	2301      	movs	r3, #1
 8008e72:	75fb      	strb	r3, [r7, #23]
      break;
 8008e74:	e006      	b.n	8008e84 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008e76:	bf00      	nop
 8008e78:	e004      	b.n	8008e84 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008e7a:	bf00      	nop
 8008e7c:	e002      	b.n	8008e84 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008e7e:	bf00      	nop
 8008e80:	e000      	b.n	8008e84 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008e82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e84:	7dfb      	ldrb	r3, [r7, #23]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d10c      	bne.n	8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008e8a:	4b05      	ldr	r3, [pc, #20]	; (8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e8e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008e98:	4901      	ldr	r1, [pc, #4]	; (8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008e9a:	4313      	orrs	r3, r2
 8008e9c:	658b      	str	r3, [r1, #88]	; 0x58
 8008e9e:	e003      	b.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8008ea0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ea4:	7dfb      	ldrb	r3, [r7, #23]
 8008ea6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d02f      	beq.n	8008f14 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008eb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ebc:	d00e      	beq.n	8008edc <HAL_RCCEx_PeriphCLKConfig+0x584>
 8008ebe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ec2:	d814      	bhi.n	8008eee <HAL_RCCEx_PeriphCLKConfig+0x596>
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d015      	beq.n	8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8008ec8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ecc:	d10f      	bne.n	8008eee <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ece:	4baf      	ldr	r3, [pc, #700]	; (800918c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ed2:	4aae      	ldr	r2, [pc, #696]	; (800918c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008ed4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ed8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008eda:	e00c      	b.n	8008ef6 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	3304      	adds	r3, #4
 8008ee0:	2101      	movs	r1, #1
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f000 ff3c 	bl	8009d60 <RCCEx_PLL2_Config>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008eec:	e003      	b.n	8008ef6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008eee:	2301      	movs	r3, #1
 8008ef0:	75fb      	strb	r3, [r7, #23]
      break;
 8008ef2:	e000      	b.n	8008ef6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8008ef4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ef6:	7dfb      	ldrb	r3, [r7, #23]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d109      	bne.n	8008f10 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008efc:	4ba3      	ldr	r3, [pc, #652]	; (800918c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008efe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f00:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f08:	49a0      	ldr	r1, [pc, #640]	; (800918c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008f0a:	4313      	orrs	r3, r2
 8008f0c:	650b      	str	r3, [r1, #80]	; 0x50
 8008f0e:	e001      	b.n	8008f14 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f10:	7dfb      	ldrb	r3, [r7, #23]
 8008f12:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d032      	beq.n	8008f86 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f24:	2b03      	cmp	r3, #3
 8008f26:	d81b      	bhi.n	8008f60 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8008f28:	a201      	add	r2, pc, #4	; (adr r2, 8008f30 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8008f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f2e:	bf00      	nop
 8008f30:	08008f67 	.word	0x08008f67
 8008f34:	08008f41 	.word	0x08008f41
 8008f38:	08008f4f 	.word	0x08008f4f
 8008f3c:	08008f67 	.word	0x08008f67
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f40:	4b92      	ldr	r3, [pc, #584]	; (800918c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f44:	4a91      	ldr	r2, [pc, #580]	; (800918c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008f46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f4a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008f4c:	e00c      	b.n	8008f68 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	3304      	adds	r3, #4
 8008f52:	2102      	movs	r1, #2
 8008f54:	4618      	mov	r0, r3
 8008f56:	f000 ff03 	bl	8009d60 <RCCEx_PLL2_Config>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008f5e:	e003      	b.n	8008f68 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008f60:	2301      	movs	r3, #1
 8008f62:	75fb      	strb	r3, [r7, #23]
      break;
 8008f64:	e000      	b.n	8008f68 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8008f66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f68:	7dfb      	ldrb	r3, [r7, #23]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d109      	bne.n	8008f82 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008f6e:	4b87      	ldr	r3, [pc, #540]	; (800918c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f72:	f023 0203 	bic.w	r2, r3, #3
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f7a:	4984      	ldr	r1, [pc, #528]	; (800918c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008f7c:	4313      	orrs	r3, r2
 8008f7e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008f80:	e001      	b.n	8008f86 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f82:	7dfb      	ldrb	r3, [r7, #23]
 8008f84:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	f000 8086 	beq.w	80090a0 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008f94:	4b7e      	ldr	r3, [pc, #504]	; (8009190 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	4a7d      	ldr	r2, [pc, #500]	; (8009190 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8008f9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f9e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008fa0:	f7f9 f8e8 	bl	8002174 <HAL_GetTick>
 8008fa4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008fa6:	e009      	b.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008fa8:	f7f9 f8e4 	bl	8002174 <HAL_GetTick>
 8008fac:	4602      	mov	r2, r0
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	1ad3      	subs	r3, r2, r3
 8008fb2:	2b64      	cmp	r3, #100	; 0x64
 8008fb4:	d902      	bls.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8008fb6:	2303      	movs	r3, #3
 8008fb8:	75fb      	strb	r3, [r7, #23]
        break;
 8008fba:	e005      	b.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008fbc:	4b74      	ldr	r3, [pc, #464]	; (8009190 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d0ef      	beq.n	8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8008fc8:	7dfb      	ldrb	r3, [r7, #23]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d166      	bne.n	800909c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008fce:	4b6f      	ldr	r3, [pc, #444]	; (800918c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008fd0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008fd8:	4053      	eors	r3, r2
 8008fda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d013      	beq.n	800900a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008fe2:	4b6a      	ldr	r3, [pc, #424]	; (800918c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fe6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008fea:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008fec:	4b67      	ldr	r3, [pc, #412]	; (800918c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ff0:	4a66      	ldr	r2, [pc, #408]	; (800918c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008ff2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ff6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008ff8:	4b64      	ldr	r3, [pc, #400]	; (800918c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ffc:	4a63      	ldr	r2, [pc, #396]	; (800918c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008ffe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009002:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009004:	4a61      	ldr	r2, [pc, #388]	; (800918c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009010:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009014:	d115      	bne.n	8009042 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009016:	f7f9 f8ad 	bl	8002174 <HAL_GetTick>
 800901a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800901c:	e00b      	b.n	8009036 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800901e:	f7f9 f8a9 	bl	8002174 <HAL_GetTick>
 8009022:	4602      	mov	r2, r0
 8009024:	693b      	ldr	r3, [r7, #16]
 8009026:	1ad3      	subs	r3, r2, r3
 8009028:	f241 3288 	movw	r2, #5000	; 0x1388
 800902c:	4293      	cmp	r3, r2
 800902e:	d902      	bls.n	8009036 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8009030:	2303      	movs	r3, #3
 8009032:	75fb      	strb	r3, [r7, #23]
            break;
 8009034:	e005      	b.n	8009042 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009036:	4b55      	ldr	r3, [pc, #340]	; (800918c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800903a:	f003 0302 	and.w	r3, r3, #2
 800903e:	2b00      	cmp	r3, #0
 8009040:	d0ed      	beq.n	800901e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8009042:	7dfb      	ldrb	r3, [r7, #23]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d126      	bne.n	8009096 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800904e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009052:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009056:	d10d      	bne.n	8009074 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8009058:	4b4c      	ldr	r3, [pc, #304]	; (800918c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800905a:	691b      	ldr	r3, [r3, #16]
 800905c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009066:	0919      	lsrs	r1, r3, #4
 8009068:	4b4a      	ldr	r3, [pc, #296]	; (8009194 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800906a:	400b      	ands	r3, r1
 800906c:	4947      	ldr	r1, [pc, #284]	; (800918c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800906e:	4313      	orrs	r3, r2
 8009070:	610b      	str	r3, [r1, #16]
 8009072:	e005      	b.n	8009080 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8009074:	4b45      	ldr	r3, [pc, #276]	; (800918c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009076:	691b      	ldr	r3, [r3, #16]
 8009078:	4a44      	ldr	r2, [pc, #272]	; (800918c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800907a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800907e:	6113      	str	r3, [r2, #16]
 8009080:	4b42      	ldr	r3, [pc, #264]	; (800918c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009082:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800908a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800908e:	493f      	ldr	r1, [pc, #252]	; (800918c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009090:	4313      	orrs	r3, r2
 8009092:	670b      	str	r3, [r1, #112]	; 0x70
 8009094:	e004      	b.n	80090a0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009096:	7dfb      	ldrb	r3, [r7, #23]
 8009098:	75bb      	strb	r3, [r7, #22]
 800909a:	e001      	b.n	80090a0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800909c:	7dfb      	ldrb	r3, [r7, #23]
 800909e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f003 0301 	and.w	r3, r3, #1
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	f000 8085 	beq.w	80091b8 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80090b2:	2b28      	cmp	r3, #40	; 0x28
 80090b4:	d866      	bhi.n	8009184 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80090b6:	a201      	add	r2, pc, #4	; (adr r2, 80090bc <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80090b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090bc:	08009199 	.word	0x08009199
 80090c0:	08009185 	.word	0x08009185
 80090c4:	08009185 	.word	0x08009185
 80090c8:	08009185 	.word	0x08009185
 80090cc:	08009185 	.word	0x08009185
 80090d0:	08009185 	.word	0x08009185
 80090d4:	08009185 	.word	0x08009185
 80090d8:	08009185 	.word	0x08009185
 80090dc:	08009161 	.word	0x08009161
 80090e0:	08009185 	.word	0x08009185
 80090e4:	08009185 	.word	0x08009185
 80090e8:	08009185 	.word	0x08009185
 80090ec:	08009185 	.word	0x08009185
 80090f0:	08009185 	.word	0x08009185
 80090f4:	08009185 	.word	0x08009185
 80090f8:	08009185 	.word	0x08009185
 80090fc:	08009173 	.word	0x08009173
 8009100:	08009185 	.word	0x08009185
 8009104:	08009185 	.word	0x08009185
 8009108:	08009185 	.word	0x08009185
 800910c:	08009185 	.word	0x08009185
 8009110:	08009185 	.word	0x08009185
 8009114:	08009185 	.word	0x08009185
 8009118:	08009185 	.word	0x08009185
 800911c:	08009199 	.word	0x08009199
 8009120:	08009185 	.word	0x08009185
 8009124:	08009185 	.word	0x08009185
 8009128:	08009185 	.word	0x08009185
 800912c:	08009185 	.word	0x08009185
 8009130:	08009185 	.word	0x08009185
 8009134:	08009185 	.word	0x08009185
 8009138:	08009185 	.word	0x08009185
 800913c:	08009199 	.word	0x08009199
 8009140:	08009185 	.word	0x08009185
 8009144:	08009185 	.word	0x08009185
 8009148:	08009185 	.word	0x08009185
 800914c:	08009185 	.word	0x08009185
 8009150:	08009185 	.word	0x08009185
 8009154:	08009185 	.word	0x08009185
 8009158:	08009185 	.word	0x08009185
 800915c:	08009199 	.word	0x08009199
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	3304      	adds	r3, #4
 8009164:	2101      	movs	r1, #1
 8009166:	4618      	mov	r0, r3
 8009168:	f000 fdfa 	bl	8009d60 <RCCEx_PLL2_Config>
 800916c:	4603      	mov	r3, r0
 800916e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009170:	e013      	b.n	800919a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	3324      	adds	r3, #36	; 0x24
 8009176:	2101      	movs	r1, #1
 8009178:	4618      	mov	r0, r3
 800917a:	f000 fea3 	bl	8009ec4 <RCCEx_PLL3_Config>
 800917e:	4603      	mov	r3, r0
 8009180:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009182:	e00a      	b.n	800919a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009184:	2301      	movs	r3, #1
 8009186:	75fb      	strb	r3, [r7, #23]
      break;
 8009188:	e007      	b.n	800919a <HAL_RCCEx_PeriphCLKConfig+0x842>
 800918a:	bf00      	nop
 800918c:	58024400 	.word	0x58024400
 8009190:	58024800 	.word	0x58024800
 8009194:	00ffffcf 	.word	0x00ffffcf
      break;
 8009198:	bf00      	nop
    }

    if(ret == HAL_OK)
 800919a:	7dfb      	ldrb	r3, [r7, #23]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d109      	bne.n	80091b4 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80091a0:	4b96      	ldr	r3, [pc, #600]	; (80093fc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80091a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091a4:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80091ac:	4993      	ldr	r1, [pc, #588]	; (80093fc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80091ae:	4313      	orrs	r3, r2
 80091b0:	654b      	str	r3, [r1, #84]	; 0x54
 80091b2:	e001      	b.n	80091b8 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091b4:	7dfb      	ldrb	r3, [r7, #23]
 80091b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f003 0302 	and.w	r3, r3, #2
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d038      	beq.n	8009236 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091c8:	2b05      	cmp	r3, #5
 80091ca:	d821      	bhi.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80091cc:	a201      	add	r2, pc, #4	; (adr r2, 80091d4 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80091ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091d2:	bf00      	nop
 80091d4:	08009217 	.word	0x08009217
 80091d8:	080091ed 	.word	0x080091ed
 80091dc:	080091ff 	.word	0x080091ff
 80091e0:	08009217 	.word	0x08009217
 80091e4:	08009217 	.word	0x08009217
 80091e8:	08009217 	.word	0x08009217
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	3304      	adds	r3, #4
 80091f0:	2101      	movs	r1, #1
 80091f2:	4618      	mov	r0, r3
 80091f4:	f000 fdb4 	bl	8009d60 <RCCEx_PLL2_Config>
 80091f8:	4603      	mov	r3, r0
 80091fa:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80091fc:	e00c      	b.n	8009218 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	3324      	adds	r3, #36	; 0x24
 8009202:	2101      	movs	r1, #1
 8009204:	4618      	mov	r0, r3
 8009206:	f000 fe5d 	bl	8009ec4 <RCCEx_PLL3_Config>
 800920a:	4603      	mov	r3, r0
 800920c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800920e:	e003      	b.n	8009218 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009210:	2301      	movs	r3, #1
 8009212:	75fb      	strb	r3, [r7, #23]
      break;
 8009214:	e000      	b.n	8009218 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8009216:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009218:	7dfb      	ldrb	r3, [r7, #23]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d109      	bne.n	8009232 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800921e:	4b77      	ldr	r3, [pc, #476]	; (80093fc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009222:	f023 0207 	bic.w	r2, r3, #7
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800922a:	4974      	ldr	r1, [pc, #464]	; (80093fc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800922c:	4313      	orrs	r3, r2
 800922e:	654b      	str	r3, [r1, #84]	; 0x54
 8009230:	e001      	b.n	8009236 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009232:	7dfb      	ldrb	r3, [r7, #23]
 8009234:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f003 0304 	and.w	r3, r3, #4
 800923e:	2b00      	cmp	r3, #0
 8009240:	d03a      	beq.n	80092b8 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009248:	2b05      	cmp	r3, #5
 800924a:	d821      	bhi.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0x938>
 800924c:	a201      	add	r2, pc, #4	; (adr r2, 8009254 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800924e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009252:	bf00      	nop
 8009254:	08009297 	.word	0x08009297
 8009258:	0800926d 	.word	0x0800926d
 800925c:	0800927f 	.word	0x0800927f
 8009260:	08009297 	.word	0x08009297
 8009264:	08009297 	.word	0x08009297
 8009268:	08009297 	.word	0x08009297
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	3304      	adds	r3, #4
 8009270:	2101      	movs	r1, #1
 8009272:	4618      	mov	r0, r3
 8009274:	f000 fd74 	bl	8009d60 <RCCEx_PLL2_Config>
 8009278:	4603      	mov	r3, r0
 800927a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800927c:	e00c      	b.n	8009298 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	3324      	adds	r3, #36	; 0x24
 8009282:	2101      	movs	r1, #1
 8009284:	4618      	mov	r0, r3
 8009286:	f000 fe1d 	bl	8009ec4 <RCCEx_PLL3_Config>
 800928a:	4603      	mov	r3, r0
 800928c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800928e:	e003      	b.n	8009298 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009290:	2301      	movs	r3, #1
 8009292:	75fb      	strb	r3, [r7, #23]
      break;
 8009294:	e000      	b.n	8009298 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8009296:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009298:	7dfb      	ldrb	r3, [r7, #23]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d10a      	bne.n	80092b4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800929e:	4b57      	ldr	r3, [pc, #348]	; (80093fc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80092a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092a2:	f023 0207 	bic.w	r2, r3, #7
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092ac:	4953      	ldr	r1, [pc, #332]	; (80093fc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80092ae:	4313      	orrs	r3, r2
 80092b0:	658b      	str	r3, [r1, #88]	; 0x58
 80092b2:	e001      	b.n	80092b8 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092b4:	7dfb      	ldrb	r3, [r7, #23]
 80092b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f003 0320 	and.w	r3, r3, #32
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d04b      	beq.n	800935c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80092ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80092ce:	d02e      	beq.n	800932e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80092d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80092d4:	d828      	bhi.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80092d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092da:	d02a      	beq.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80092dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092e0:	d822      	bhi.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80092e2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80092e6:	d026      	beq.n	8009336 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80092e8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80092ec:	d81c      	bhi.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80092ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092f2:	d010      	beq.n	8009316 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80092f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092f8:	d816      	bhi.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d01d      	beq.n	800933a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80092fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009302:	d111      	bne.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	3304      	adds	r3, #4
 8009308:	2100      	movs	r1, #0
 800930a:	4618      	mov	r0, r3
 800930c:	f000 fd28 	bl	8009d60 <RCCEx_PLL2_Config>
 8009310:	4603      	mov	r3, r0
 8009312:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009314:	e012      	b.n	800933c <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	3324      	adds	r3, #36	; 0x24
 800931a:	2102      	movs	r1, #2
 800931c:	4618      	mov	r0, r3
 800931e:	f000 fdd1 	bl	8009ec4 <RCCEx_PLL3_Config>
 8009322:	4603      	mov	r3, r0
 8009324:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009326:	e009      	b.n	800933c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009328:	2301      	movs	r3, #1
 800932a:	75fb      	strb	r3, [r7, #23]
      break;
 800932c:	e006      	b.n	800933c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800932e:	bf00      	nop
 8009330:	e004      	b.n	800933c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009332:	bf00      	nop
 8009334:	e002      	b.n	800933c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009336:	bf00      	nop
 8009338:	e000      	b.n	800933c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800933a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800933c:	7dfb      	ldrb	r3, [r7, #23]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d10a      	bne.n	8009358 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009342:	4b2e      	ldr	r3, [pc, #184]	; (80093fc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009346:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009350:	492a      	ldr	r1, [pc, #168]	; (80093fc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009352:	4313      	orrs	r3, r2
 8009354:	654b      	str	r3, [r1, #84]	; 0x54
 8009356:	e001      	b.n	800935c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009358:	7dfb      	ldrb	r3, [r7, #23]
 800935a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009364:	2b00      	cmp	r3, #0
 8009366:	d04d      	beq.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800936e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009372:	d02e      	beq.n	80093d2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8009374:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009378:	d828      	bhi.n	80093cc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800937a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800937e:	d02a      	beq.n	80093d6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8009380:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009384:	d822      	bhi.n	80093cc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009386:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800938a:	d026      	beq.n	80093da <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800938c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009390:	d81c      	bhi.n	80093cc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009392:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009396:	d010      	beq.n	80093ba <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8009398:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800939c:	d816      	bhi.n	80093cc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d01d      	beq.n	80093de <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80093a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80093a6:	d111      	bne.n	80093cc <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	3304      	adds	r3, #4
 80093ac:	2100      	movs	r1, #0
 80093ae:	4618      	mov	r0, r3
 80093b0:	f000 fcd6 	bl	8009d60 <RCCEx_PLL2_Config>
 80093b4:	4603      	mov	r3, r0
 80093b6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80093b8:	e012      	b.n	80093e0 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	3324      	adds	r3, #36	; 0x24
 80093be:	2102      	movs	r1, #2
 80093c0:	4618      	mov	r0, r3
 80093c2:	f000 fd7f 	bl	8009ec4 <RCCEx_PLL3_Config>
 80093c6:	4603      	mov	r3, r0
 80093c8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80093ca:	e009      	b.n	80093e0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80093cc:	2301      	movs	r3, #1
 80093ce:	75fb      	strb	r3, [r7, #23]
      break;
 80093d0:	e006      	b.n	80093e0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80093d2:	bf00      	nop
 80093d4:	e004      	b.n	80093e0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80093d6:	bf00      	nop
 80093d8:	e002      	b.n	80093e0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80093da:	bf00      	nop
 80093dc:	e000      	b.n	80093e0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80093de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80093e0:	7dfb      	ldrb	r3, [r7, #23]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d10c      	bne.n	8009400 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80093e6:	4b05      	ldr	r3, [pc, #20]	; (80093fc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80093e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093ea:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80093f4:	4901      	ldr	r1, [pc, #4]	; (80093fc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80093f6:	4313      	orrs	r3, r2
 80093f8:	658b      	str	r3, [r1, #88]	; 0x58
 80093fa:	e003      	b.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80093fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009400:	7dfb      	ldrb	r3, [r7, #23]
 8009402:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800940c:	2b00      	cmp	r3, #0
 800940e:	d04b      	beq.n	80094a8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009416:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800941a:	d02e      	beq.n	800947a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800941c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009420:	d828      	bhi.n	8009474 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009422:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009426:	d02a      	beq.n	800947e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8009428:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800942c:	d822      	bhi.n	8009474 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800942e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009432:	d026      	beq.n	8009482 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8009434:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009438:	d81c      	bhi.n	8009474 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800943a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800943e:	d010      	beq.n	8009462 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8009440:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009444:	d816      	bhi.n	8009474 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009446:	2b00      	cmp	r3, #0
 8009448:	d01d      	beq.n	8009486 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800944a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800944e:	d111      	bne.n	8009474 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	3304      	adds	r3, #4
 8009454:	2100      	movs	r1, #0
 8009456:	4618      	mov	r0, r3
 8009458:	f000 fc82 	bl	8009d60 <RCCEx_PLL2_Config>
 800945c:	4603      	mov	r3, r0
 800945e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009460:	e012      	b.n	8009488 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	3324      	adds	r3, #36	; 0x24
 8009466:	2102      	movs	r1, #2
 8009468:	4618      	mov	r0, r3
 800946a:	f000 fd2b 	bl	8009ec4 <RCCEx_PLL3_Config>
 800946e:	4603      	mov	r3, r0
 8009470:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009472:	e009      	b.n	8009488 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009474:	2301      	movs	r3, #1
 8009476:	75fb      	strb	r3, [r7, #23]
      break;
 8009478:	e006      	b.n	8009488 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800947a:	bf00      	nop
 800947c:	e004      	b.n	8009488 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800947e:	bf00      	nop
 8009480:	e002      	b.n	8009488 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009482:	bf00      	nop
 8009484:	e000      	b.n	8009488 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009486:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009488:	7dfb      	ldrb	r3, [r7, #23]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d10a      	bne.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800948e:	4b9d      	ldr	r3, [pc, #628]	; (8009704 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009492:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800949c:	4999      	ldr	r1, [pc, #612]	; (8009704 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800949e:	4313      	orrs	r3, r2
 80094a0:	658b      	str	r3, [r1, #88]	; 0x58
 80094a2:	e001      	b.n	80094a8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094a4:	7dfb      	ldrb	r3, [r7, #23]
 80094a6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f003 0308 	and.w	r3, r3, #8
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d01a      	beq.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80094ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094be:	d10a      	bne.n	80094d6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	3324      	adds	r3, #36	; 0x24
 80094c4:	2102      	movs	r1, #2
 80094c6:	4618      	mov	r0, r3
 80094c8:	f000 fcfc 	bl	8009ec4 <RCCEx_PLL3_Config>
 80094cc:	4603      	mov	r3, r0
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d001      	beq.n	80094d6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80094d2:	2301      	movs	r3, #1
 80094d4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80094d6:	4b8b      	ldr	r3, [pc, #556]	; (8009704 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80094d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094da:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80094e4:	4987      	ldr	r1, [pc, #540]	; (8009704 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80094e6:	4313      	orrs	r3, r2
 80094e8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f003 0310 	and.w	r3, r3, #16
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d01a      	beq.n	800952c <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80094fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009500:	d10a      	bne.n	8009518 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	3324      	adds	r3, #36	; 0x24
 8009506:	2102      	movs	r1, #2
 8009508:	4618      	mov	r0, r3
 800950a:	f000 fcdb 	bl	8009ec4 <RCCEx_PLL3_Config>
 800950e:	4603      	mov	r3, r0
 8009510:	2b00      	cmp	r3, #0
 8009512:	d001      	beq.n	8009518 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8009514:	2301      	movs	r3, #1
 8009516:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009518:	4b7a      	ldr	r3, [pc, #488]	; (8009704 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800951a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800951c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009526:	4977      	ldr	r1, [pc, #476]	; (8009704 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009528:	4313      	orrs	r3, r2
 800952a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009534:	2b00      	cmp	r3, #0
 8009536:	d034      	beq.n	80095a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800953e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009542:	d01d      	beq.n	8009580 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8009544:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009548:	d817      	bhi.n	800957a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800954a:	2b00      	cmp	r3, #0
 800954c:	d003      	beq.n	8009556 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800954e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009552:	d009      	beq.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8009554:	e011      	b.n	800957a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	3304      	adds	r3, #4
 800955a:	2100      	movs	r1, #0
 800955c:	4618      	mov	r0, r3
 800955e:	f000 fbff 	bl	8009d60 <RCCEx_PLL2_Config>
 8009562:	4603      	mov	r3, r0
 8009564:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009566:	e00c      	b.n	8009582 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	3324      	adds	r3, #36	; 0x24
 800956c:	2102      	movs	r1, #2
 800956e:	4618      	mov	r0, r3
 8009570:	f000 fca8 	bl	8009ec4 <RCCEx_PLL3_Config>
 8009574:	4603      	mov	r3, r0
 8009576:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009578:	e003      	b.n	8009582 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800957a:	2301      	movs	r3, #1
 800957c:	75fb      	strb	r3, [r7, #23]
      break;
 800957e:	e000      	b.n	8009582 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8009580:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009582:	7dfb      	ldrb	r3, [r7, #23]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d10a      	bne.n	800959e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009588:	4b5e      	ldr	r3, [pc, #376]	; (8009704 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800958a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800958c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009596:	495b      	ldr	r1, [pc, #364]	; (8009704 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009598:	4313      	orrs	r3, r2
 800959a:	658b      	str	r3, [r1, #88]	; 0x58
 800959c:	e001      	b.n	80095a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800959e:	7dfb      	ldrb	r3, [r7, #23]
 80095a0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d033      	beq.n	8009616 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80095b4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80095b8:	d01c      	beq.n	80095f4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80095ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80095be:	d816      	bhi.n	80095ee <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80095c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80095c4:	d003      	beq.n	80095ce <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80095c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80095ca:	d007      	beq.n	80095dc <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80095cc:	e00f      	b.n	80095ee <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80095ce:	4b4d      	ldr	r3, [pc, #308]	; (8009704 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80095d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095d2:	4a4c      	ldr	r2, [pc, #304]	; (8009704 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80095d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80095d8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80095da:	e00c      	b.n	80095f6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	3324      	adds	r3, #36	; 0x24
 80095e0:	2101      	movs	r1, #1
 80095e2:	4618      	mov	r0, r3
 80095e4:	f000 fc6e 	bl	8009ec4 <RCCEx_PLL3_Config>
 80095e8:	4603      	mov	r3, r0
 80095ea:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80095ec:	e003      	b.n	80095f6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80095ee:	2301      	movs	r3, #1
 80095f0:	75fb      	strb	r3, [r7, #23]
      break;
 80095f2:	e000      	b.n	80095f6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80095f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80095f6:	7dfb      	ldrb	r3, [r7, #23]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d10a      	bne.n	8009612 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80095fc:	4b41      	ldr	r3, [pc, #260]	; (8009704 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80095fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009600:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800960a:	493e      	ldr	r1, [pc, #248]	; (8009704 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800960c:	4313      	orrs	r3, r2
 800960e:	654b      	str	r3, [r1, #84]	; 0x54
 8009610:	e001      	b.n	8009616 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009612:	7dfb      	ldrb	r3, [r7, #23]
 8009614:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800961e:	2b00      	cmp	r3, #0
 8009620:	d029      	beq.n	8009676 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009626:	2b00      	cmp	r3, #0
 8009628:	d003      	beq.n	8009632 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800962a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800962e:	d007      	beq.n	8009640 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8009630:	e00f      	b.n	8009652 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009632:	4b34      	ldr	r3, [pc, #208]	; (8009704 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009636:	4a33      	ldr	r2, [pc, #204]	; (8009704 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009638:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800963c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800963e:	e00b      	b.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	3304      	adds	r3, #4
 8009644:	2102      	movs	r1, #2
 8009646:	4618      	mov	r0, r3
 8009648:	f000 fb8a 	bl	8009d60 <RCCEx_PLL2_Config>
 800964c:	4603      	mov	r3, r0
 800964e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009650:	e002      	b.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8009652:	2301      	movs	r3, #1
 8009654:	75fb      	strb	r3, [r7, #23]
      break;
 8009656:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009658:	7dfb      	ldrb	r3, [r7, #23]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d109      	bne.n	8009672 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800965e:	4b29      	ldr	r3, [pc, #164]	; (8009704 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009662:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800966a:	4926      	ldr	r1, [pc, #152]	; (8009704 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800966c:	4313      	orrs	r3, r2
 800966e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009670:	e001      	b.n	8009676 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009672:	7dfb      	ldrb	r3, [r7, #23]
 8009674:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800967e:	2b00      	cmp	r3, #0
 8009680:	d00a      	beq.n	8009698 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	3324      	adds	r3, #36	; 0x24
 8009686:	2102      	movs	r1, #2
 8009688:	4618      	mov	r0, r3
 800968a:	f000 fc1b 	bl	8009ec4 <RCCEx_PLL3_Config>
 800968e:	4603      	mov	r3, r0
 8009690:	2b00      	cmp	r3, #0
 8009692:	d001      	beq.n	8009698 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8009694:	2301      	movs	r3, #1
 8009696:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d033      	beq.n	800970c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80096ac:	d017      	beq.n	80096de <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80096ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80096b2:	d811      	bhi.n	80096d8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80096b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80096b8:	d013      	beq.n	80096e2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80096ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80096be:	d80b      	bhi.n	80096d8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d010      	beq.n	80096e6 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80096c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096c8:	d106      	bne.n	80096d8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096ca:	4b0e      	ldr	r3, [pc, #56]	; (8009704 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80096cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096ce:	4a0d      	ldr	r2, [pc, #52]	; (8009704 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80096d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80096d6:	e007      	b.n	80096e8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80096d8:	2301      	movs	r3, #1
 80096da:	75fb      	strb	r3, [r7, #23]
      break;
 80096dc:	e004      	b.n	80096e8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80096de:	bf00      	nop
 80096e0:	e002      	b.n	80096e8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80096e2:	bf00      	nop
 80096e4:	e000      	b.n	80096e8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80096e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80096e8:	7dfb      	ldrb	r3, [r7, #23]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d10c      	bne.n	8009708 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80096ee:	4b05      	ldr	r3, [pc, #20]	; (8009704 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80096f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096fa:	4902      	ldr	r1, [pc, #8]	; (8009704 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80096fc:	4313      	orrs	r3, r2
 80096fe:	654b      	str	r3, [r1, #84]	; 0x54
 8009700:	e004      	b.n	800970c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8009702:	bf00      	nop
 8009704:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009708:	7dfb      	ldrb	r3, [r7, #23]
 800970a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009714:	2b00      	cmp	r3, #0
 8009716:	d008      	beq.n	800972a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009718:	4b31      	ldr	r3, [pc, #196]	; (80097e0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800971a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800971c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009724:	492e      	ldr	r1, [pc, #184]	; (80097e0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009726:	4313      	orrs	r3, r2
 8009728:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009732:	2b00      	cmp	r3, #0
 8009734:	d009      	beq.n	800974a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009736:	4b2a      	ldr	r3, [pc, #168]	; (80097e0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009738:	691b      	ldr	r3, [r3, #16]
 800973a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009744:	4926      	ldr	r1, [pc, #152]	; (80097e0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009746:	4313      	orrs	r3, r2
 8009748:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009752:	2b00      	cmp	r3, #0
 8009754:	d008      	beq.n	8009768 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009756:	4b22      	ldr	r3, [pc, #136]	; (80097e0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800975a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009762:	491f      	ldr	r1, [pc, #124]	; (80097e0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009764:	4313      	orrs	r3, r2
 8009766:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009770:	2b00      	cmp	r3, #0
 8009772:	d00d      	beq.n	8009790 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009774:	4b1a      	ldr	r3, [pc, #104]	; (80097e0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009776:	691b      	ldr	r3, [r3, #16]
 8009778:	4a19      	ldr	r2, [pc, #100]	; (80097e0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800977a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800977e:	6113      	str	r3, [r2, #16]
 8009780:	4b17      	ldr	r3, [pc, #92]	; (80097e0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009782:	691a      	ldr	r2, [r3, #16]
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800978a:	4915      	ldr	r1, [pc, #84]	; (80097e0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800978c:	4313      	orrs	r3, r2
 800978e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	2b00      	cmp	r3, #0
 8009796:	da08      	bge.n	80097aa <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009798:	4b11      	ldr	r3, [pc, #68]	; (80097e0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800979a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800979c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097a4:	490e      	ldr	r1, [pc, #56]	; (80097e0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80097a6:	4313      	orrs	r3, r2
 80097a8:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d009      	beq.n	80097ca <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80097b6:	4b0a      	ldr	r3, [pc, #40]	; (80097e0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80097b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097ba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097c4:	4906      	ldr	r1, [pc, #24]	; (80097e0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80097c6:	4313      	orrs	r3, r2
 80097c8:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80097ca:	7dbb      	ldrb	r3, [r7, #22]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d101      	bne.n	80097d4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80097d0:	2300      	movs	r3, #0
 80097d2:	e000      	b.n	80097d6 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80097d4:	2301      	movs	r3, #1
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	3718      	adds	r7, #24
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}
 80097de:	bf00      	nop
 80097e0:	58024400 	.word	0x58024400

080097e4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80097e8:	f7ff f818 	bl	800881c <HAL_RCC_GetHCLKFreq>
 80097ec:	4602      	mov	r2, r0
 80097ee:	4b06      	ldr	r3, [pc, #24]	; (8009808 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80097f0:	6a1b      	ldr	r3, [r3, #32]
 80097f2:	091b      	lsrs	r3, r3, #4
 80097f4:	f003 0307 	and.w	r3, r3, #7
 80097f8:	4904      	ldr	r1, [pc, #16]	; (800980c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80097fa:	5ccb      	ldrb	r3, [r1, r3]
 80097fc:	f003 031f 	and.w	r3, r3, #31
 8009800:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009804:	4618      	mov	r0, r3
 8009806:	bd80      	pop	{r7, pc}
 8009808:	58024400 	.word	0x58024400
 800980c:	08013a60 	.word	0x08013a60

08009810 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009810:	b480      	push	{r7}
 8009812:	b089      	sub	sp, #36	; 0x24
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009818:	4ba1      	ldr	r3, [pc, #644]	; (8009aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800981a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800981c:	f003 0303 	and.w	r3, r3, #3
 8009820:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009822:	4b9f      	ldr	r3, [pc, #636]	; (8009aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009826:	0b1b      	lsrs	r3, r3, #12
 8009828:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800982c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800982e:	4b9c      	ldr	r3, [pc, #624]	; (8009aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009832:	091b      	lsrs	r3, r3, #4
 8009834:	f003 0301 	and.w	r3, r3, #1
 8009838:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800983a:	4b99      	ldr	r3, [pc, #612]	; (8009aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800983c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800983e:	08db      	lsrs	r3, r3, #3
 8009840:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009844:	693a      	ldr	r2, [r7, #16]
 8009846:	fb02 f303 	mul.w	r3, r2, r3
 800984a:	ee07 3a90 	vmov	s15, r3
 800984e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009852:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009856:	697b      	ldr	r3, [r7, #20]
 8009858:	2b00      	cmp	r3, #0
 800985a:	f000 8111 	beq.w	8009a80 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800985e:	69bb      	ldr	r3, [r7, #24]
 8009860:	2b02      	cmp	r3, #2
 8009862:	f000 8083 	beq.w	800996c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009866:	69bb      	ldr	r3, [r7, #24]
 8009868:	2b02      	cmp	r3, #2
 800986a:	f200 80a1 	bhi.w	80099b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800986e:	69bb      	ldr	r3, [r7, #24]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d003      	beq.n	800987c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009874:	69bb      	ldr	r3, [r7, #24]
 8009876:	2b01      	cmp	r3, #1
 8009878:	d056      	beq.n	8009928 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800987a:	e099      	b.n	80099b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800987c:	4b88      	ldr	r3, [pc, #544]	; (8009aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f003 0320 	and.w	r3, r3, #32
 8009884:	2b00      	cmp	r3, #0
 8009886:	d02d      	beq.n	80098e4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009888:	4b85      	ldr	r3, [pc, #532]	; (8009aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	08db      	lsrs	r3, r3, #3
 800988e:	f003 0303 	and.w	r3, r3, #3
 8009892:	4a84      	ldr	r2, [pc, #528]	; (8009aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009894:	fa22 f303 	lsr.w	r3, r2, r3
 8009898:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	ee07 3a90 	vmov	s15, r3
 80098a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	ee07 3a90 	vmov	s15, r3
 80098aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098b2:	4b7b      	ldr	r3, [pc, #492]	; (8009aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098ba:	ee07 3a90 	vmov	s15, r3
 80098be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80098c6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80098ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098de:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80098e2:	e087      	b.n	80099f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80098e4:	697b      	ldr	r3, [r7, #20]
 80098e6:	ee07 3a90 	vmov	s15, r3
 80098ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098ee:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009aac <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80098f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098f6:	4b6a      	ldr	r3, [pc, #424]	; (8009aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098fe:	ee07 3a90 	vmov	s15, r3
 8009902:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009906:	ed97 6a03 	vldr	s12, [r7, #12]
 800990a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800990e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009912:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009916:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800991a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800991e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009922:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009926:	e065      	b.n	80099f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	ee07 3a90 	vmov	s15, r3
 800992e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009932:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009936:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800993a:	4b59      	ldr	r3, [pc, #356]	; (8009aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800993c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800993e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009942:	ee07 3a90 	vmov	s15, r3
 8009946:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800994a:	ed97 6a03 	vldr	s12, [r7, #12]
 800994e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009952:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009956:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800995a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800995e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009962:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009966:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800996a:	e043      	b.n	80099f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800996c:	697b      	ldr	r3, [r7, #20]
 800996e:	ee07 3a90 	vmov	s15, r3
 8009972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009976:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800997a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800997e:	4b48      	ldr	r3, [pc, #288]	; (8009aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009982:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009986:	ee07 3a90 	vmov	s15, r3
 800998a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800998e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009992:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009996:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800999a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800999e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80099ae:	e021      	b.n	80099f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80099b0:	697b      	ldr	r3, [r7, #20]
 80099b2:	ee07 3a90 	vmov	s15, r3
 80099b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099ba:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80099be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099c2:	4b37      	ldr	r3, [pc, #220]	; (8009aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099ca:	ee07 3a90 	vmov	s15, r3
 80099ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80099d6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80099da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80099f2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80099f4:	4b2a      	ldr	r3, [pc, #168]	; (8009aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099f8:	0a5b      	lsrs	r3, r3, #9
 80099fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099fe:	ee07 3a90 	vmov	s15, r3
 8009a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a1a:	ee17 2a90 	vmov	r2, s15
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009a22:	4b1f      	ldr	r3, [pc, #124]	; (8009aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a26:	0c1b      	lsrs	r3, r3, #16
 8009a28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a2c:	ee07 3a90 	vmov	s15, r3
 8009a30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a38:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a48:	ee17 2a90 	vmov	r2, s15
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009a50:	4b13      	ldr	r3, [pc, #76]	; (8009aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a54:	0e1b      	lsrs	r3, r3, #24
 8009a56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a5a:	ee07 3a90 	vmov	s15, r3
 8009a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a76:	ee17 2a90 	vmov	r2, s15
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009a7e:	e008      	b.n	8009a92 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2200      	movs	r2, #0
 8009a84:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2200      	movs	r2, #0
 8009a8a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2200      	movs	r2, #0
 8009a90:	609a      	str	r2, [r3, #8]
}
 8009a92:	bf00      	nop
 8009a94:	3724      	adds	r7, #36	; 0x24
 8009a96:	46bd      	mov	sp, r7
 8009a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9c:	4770      	bx	lr
 8009a9e:	bf00      	nop
 8009aa0:	58024400 	.word	0x58024400
 8009aa4:	03d09000 	.word	0x03d09000
 8009aa8:	46000000 	.word	0x46000000
 8009aac:	4c742400 	.word	0x4c742400
 8009ab0:	4a742400 	.word	0x4a742400
 8009ab4:	4b742400 	.word	0x4b742400

08009ab8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b089      	sub	sp, #36	; 0x24
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009ac0:	4ba1      	ldr	r3, [pc, #644]	; (8009d48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ac4:	f003 0303 	and.w	r3, r3, #3
 8009ac8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009aca:	4b9f      	ldr	r3, [pc, #636]	; (8009d48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ace:	0d1b      	lsrs	r3, r3, #20
 8009ad0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009ad4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009ad6:	4b9c      	ldr	r3, [pc, #624]	; (8009d48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ada:	0a1b      	lsrs	r3, r3, #8
 8009adc:	f003 0301 	and.w	r3, r3, #1
 8009ae0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009ae2:	4b99      	ldr	r3, [pc, #612]	; (8009d48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ae6:	08db      	lsrs	r3, r3, #3
 8009ae8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009aec:	693a      	ldr	r2, [r7, #16]
 8009aee:	fb02 f303 	mul.w	r3, r2, r3
 8009af2:	ee07 3a90 	vmov	s15, r3
 8009af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009afa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009afe:	697b      	ldr	r3, [r7, #20]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	f000 8111 	beq.w	8009d28 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009b06:	69bb      	ldr	r3, [r7, #24]
 8009b08:	2b02      	cmp	r3, #2
 8009b0a:	f000 8083 	beq.w	8009c14 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009b0e:	69bb      	ldr	r3, [r7, #24]
 8009b10:	2b02      	cmp	r3, #2
 8009b12:	f200 80a1 	bhi.w	8009c58 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009b16:	69bb      	ldr	r3, [r7, #24]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d003      	beq.n	8009b24 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009b1c:	69bb      	ldr	r3, [r7, #24]
 8009b1e:	2b01      	cmp	r3, #1
 8009b20:	d056      	beq.n	8009bd0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009b22:	e099      	b.n	8009c58 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b24:	4b88      	ldr	r3, [pc, #544]	; (8009d48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f003 0320 	and.w	r3, r3, #32
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d02d      	beq.n	8009b8c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009b30:	4b85      	ldr	r3, [pc, #532]	; (8009d48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	08db      	lsrs	r3, r3, #3
 8009b36:	f003 0303 	and.w	r3, r3, #3
 8009b3a:	4a84      	ldr	r2, [pc, #528]	; (8009d4c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009b3c:	fa22 f303 	lsr.w	r3, r2, r3
 8009b40:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009b42:	68bb      	ldr	r3, [r7, #8]
 8009b44:	ee07 3a90 	vmov	s15, r3
 8009b48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	ee07 3a90 	vmov	s15, r3
 8009b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b5a:	4b7b      	ldr	r3, [pc, #492]	; (8009d48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b62:	ee07 3a90 	vmov	s15, r3
 8009b66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b6e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009d50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009b72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b86:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009b8a:	e087      	b.n	8009c9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009b8c:	697b      	ldr	r3, [r7, #20]
 8009b8e:	ee07 3a90 	vmov	s15, r3
 8009b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b96:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009d54 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009b9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b9e:	4b6a      	ldr	r3, [pc, #424]	; (8009d48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ba2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ba6:	ee07 3a90 	vmov	s15, r3
 8009baa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bae:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bb2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009d50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009bb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009bce:	e065      	b.n	8009c9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009bd0:	697b      	ldr	r3, [r7, #20]
 8009bd2:	ee07 3a90 	vmov	s15, r3
 8009bd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bda:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009d58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009bde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009be2:	4b59      	ldr	r3, [pc, #356]	; (8009d48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bea:	ee07 3a90 	vmov	s15, r3
 8009bee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bf2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bf6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009d50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009bfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c0e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c12:	e043      	b.n	8009c9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009c14:	697b      	ldr	r3, [r7, #20]
 8009c16:	ee07 3a90 	vmov	s15, r3
 8009c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c1e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009d5c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009c22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c26:	4b48      	ldr	r3, [pc, #288]	; (8009d48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c2e:	ee07 3a90 	vmov	s15, r3
 8009c32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c36:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c3a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009d50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009c3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c52:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c56:	e021      	b.n	8009c9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009c58:	697b      	ldr	r3, [r7, #20]
 8009c5a:	ee07 3a90 	vmov	s15, r3
 8009c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c62:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009d58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009c66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c6a:	4b37      	ldr	r3, [pc, #220]	; (8009d48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c72:	ee07 3a90 	vmov	s15, r3
 8009c76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c7e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009d50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009c82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c96:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c9a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009c9c:	4b2a      	ldr	r3, [pc, #168]	; (8009d48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ca0:	0a5b      	lsrs	r3, r3, #9
 8009ca2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ca6:	ee07 3a90 	vmov	s15, r3
 8009caa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009cb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009cb6:	edd7 6a07 	vldr	s13, [r7, #28]
 8009cba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009cbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009cc2:	ee17 2a90 	vmov	r2, s15
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009cca:	4b1f      	ldr	r3, [pc, #124]	; (8009d48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cce:	0c1b      	lsrs	r3, r3, #16
 8009cd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cd4:	ee07 3a90 	vmov	s15, r3
 8009cd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cdc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009ce0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ce4:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ce8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009cec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009cf0:	ee17 2a90 	vmov	r2, s15
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009cf8:	4b13      	ldr	r3, [pc, #76]	; (8009d48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cfc:	0e1b      	lsrs	r3, r3, #24
 8009cfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d02:	ee07 3a90 	vmov	s15, r3
 8009d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d12:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d1e:	ee17 2a90 	vmov	r2, s15
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009d26:	e008      	b.n	8009d3a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	2200      	movs	r2, #0
 8009d32:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2200      	movs	r2, #0
 8009d38:	609a      	str	r2, [r3, #8]
}
 8009d3a:	bf00      	nop
 8009d3c:	3724      	adds	r7, #36	; 0x24
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d44:	4770      	bx	lr
 8009d46:	bf00      	nop
 8009d48:	58024400 	.word	0x58024400
 8009d4c:	03d09000 	.word	0x03d09000
 8009d50:	46000000 	.word	0x46000000
 8009d54:	4c742400 	.word	0x4c742400
 8009d58:	4a742400 	.word	0x4a742400
 8009d5c:	4b742400 	.word	0x4b742400

08009d60 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b084      	sub	sp, #16
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
 8009d68:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009d6e:	4b53      	ldr	r3, [pc, #332]	; (8009ebc <RCCEx_PLL2_Config+0x15c>)
 8009d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d72:	f003 0303 	and.w	r3, r3, #3
 8009d76:	2b03      	cmp	r3, #3
 8009d78:	d101      	bne.n	8009d7e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	e099      	b.n	8009eb2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009d7e:	4b4f      	ldr	r3, [pc, #316]	; (8009ebc <RCCEx_PLL2_Config+0x15c>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	4a4e      	ldr	r2, [pc, #312]	; (8009ebc <RCCEx_PLL2_Config+0x15c>)
 8009d84:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009d88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009d8a:	f7f8 f9f3 	bl	8002174 <HAL_GetTick>
 8009d8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009d90:	e008      	b.n	8009da4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009d92:	f7f8 f9ef 	bl	8002174 <HAL_GetTick>
 8009d96:	4602      	mov	r2, r0
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	1ad3      	subs	r3, r2, r3
 8009d9c:	2b02      	cmp	r3, #2
 8009d9e:	d901      	bls.n	8009da4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009da0:	2303      	movs	r3, #3
 8009da2:	e086      	b.n	8009eb2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009da4:	4b45      	ldr	r3, [pc, #276]	; (8009ebc <RCCEx_PLL2_Config+0x15c>)
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d1f0      	bne.n	8009d92 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009db0:	4b42      	ldr	r3, [pc, #264]	; (8009ebc <RCCEx_PLL2_Config+0x15c>)
 8009db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009db4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	031b      	lsls	r3, r3, #12
 8009dbe:	493f      	ldr	r1, [pc, #252]	; (8009ebc <RCCEx_PLL2_Config+0x15c>)
 8009dc0:	4313      	orrs	r3, r2
 8009dc2:	628b      	str	r3, [r1, #40]	; 0x28
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	685b      	ldr	r3, [r3, #4]
 8009dc8:	3b01      	subs	r3, #1
 8009dca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	689b      	ldr	r3, [r3, #8]
 8009dd2:	3b01      	subs	r3, #1
 8009dd4:	025b      	lsls	r3, r3, #9
 8009dd6:	b29b      	uxth	r3, r3
 8009dd8:	431a      	orrs	r2, r3
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	68db      	ldr	r3, [r3, #12]
 8009dde:	3b01      	subs	r3, #1
 8009de0:	041b      	lsls	r3, r3, #16
 8009de2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009de6:	431a      	orrs	r2, r3
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	691b      	ldr	r3, [r3, #16]
 8009dec:	3b01      	subs	r3, #1
 8009dee:	061b      	lsls	r3, r3, #24
 8009df0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009df4:	4931      	ldr	r1, [pc, #196]	; (8009ebc <RCCEx_PLL2_Config+0x15c>)
 8009df6:	4313      	orrs	r3, r2
 8009df8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009dfa:	4b30      	ldr	r3, [pc, #192]	; (8009ebc <RCCEx_PLL2_Config+0x15c>)
 8009dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dfe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	695b      	ldr	r3, [r3, #20]
 8009e06:	492d      	ldr	r1, [pc, #180]	; (8009ebc <RCCEx_PLL2_Config+0x15c>)
 8009e08:	4313      	orrs	r3, r2
 8009e0a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009e0c:	4b2b      	ldr	r3, [pc, #172]	; (8009ebc <RCCEx_PLL2_Config+0x15c>)
 8009e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e10:	f023 0220 	bic.w	r2, r3, #32
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	699b      	ldr	r3, [r3, #24]
 8009e18:	4928      	ldr	r1, [pc, #160]	; (8009ebc <RCCEx_PLL2_Config+0x15c>)
 8009e1a:	4313      	orrs	r3, r2
 8009e1c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009e1e:	4b27      	ldr	r3, [pc, #156]	; (8009ebc <RCCEx_PLL2_Config+0x15c>)
 8009e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e22:	4a26      	ldr	r2, [pc, #152]	; (8009ebc <RCCEx_PLL2_Config+0x15c>)
 8009e24:	f023 0310 	bic.w	r3, r3, #16
 8009e28:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009e2a:	4b24      	ldr	r3, [pc, #144]	; (8009ebc <RCCEx_PLL2_Config+0x15c>)
 8009e2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009e2e:	4b24      	ldr	r3, [pc, #144]	; (8009ec0 <RCCEx_PLL2_Config+0x160>)
 8009e30:	4013      	ands	r3, r2
 8009e32:	687a      	ldr	r2, [r7, #4]
 8009e34:	69d2      	ldr	r2, [r2, #28]
 8009e36:	00d2      	lsls	r2, r2, #3
 8009e38:	4920      	ldr	r1, [pc, #128]	; (8009ebc <RCCEx_PLL2_Config+0x15c>)
 8009e3a:	4313      	orrs	r3, r2
 8009e3c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009e3e:	4b1f      	ldr	r3, [pc, #124]	; (8009ebc <RCCEx_PLL2_Config+0x15c>)
 8009e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e42:	4a1e      	ldr	r2, [pc, #120]	; (8009ebc <RCCEx_PLL2_Config+0x15c>)
 8009e44:	f043 0310 	orr.w	r3, r3, #16
 8009e48:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d106      	bne.n	8009e5e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009e50:	4b1a      	ldr	r3, [pc, #104]	; (8009ebc <RCCEx_PLL2_Config+0x15c>)
 8009e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e54:	4a19      	ldr	r2, [pc, #100]	; (8009ebc <RCCEx_PLL2_Config+0x15c>)
 8009e56:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009e5a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009e5c:	e00f      	b.n	8009e7e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	2b01      	cmp	r3, #1
 8009e62:	d106      	bne.n	8009e72 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009e64:	4b15      	ldr	r3, [pc, #84]	; (8009ebc <RCCEx_PLL2_Config+0x15c>)
 8009e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e68:	4a14      	ldr	r2, [pc, #80]	; (8009ebc <RCCEx_PLL2_Config+0x15c>)
 8009e6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009e6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009e70:	e005      	b.n	8009e7e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009e72:	4b12      	ldr	r3, [pc, #72]	; (8009ebc <RCCEx_PLL2_Config+0x15c>)
 8009e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e76:	4a11      	ldr	r2, [pc, #68]	; (8009ebc <RCCEx_PLL2_Config+0x15c>)
 8009e78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009e7c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009e7e:	4b0f      	ldr	r3, [pc, #60]	; (8009ebc <RCCEx_PLL2_Config+0x15c>)
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	4a0e      	ldr	r2, [pc, #56]	; (8009ebc <RCCEx_PLL2_Config+0x15c>)
 8009e84:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009e88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e8a:	f7f8 f973 	bl	8002174 <HAL_GetTick>
 8009e8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009e90:	e008      	b.n	8009ea4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009e92:	f7f8 f96f 	bl	8002174 <HAL_GetTick>
 8009e96:	4602      	mov	r2, r0
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	1ad3      	subs	r3, r2, r3
 8009e9c:	2b02      	cmp	r3, #2
 8009e9e:	d901      	bls.n	8009ea4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009ea0:	2303      	movs	r3, #3
 8009ea2:	e006      	b.n	8009eb2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009ea4:	4b05      	ldr	r3, [pc, #20]	; (8009ebc <RCCEx_PLL2_Config+0x15c>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d0f0      	beq.n	8009e92 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	3710      	adds	r7, #16
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}
 8009eba:	bf00      	nop
 8009ebc:	58024400 	.word	0x58024400
 8009ec0:	ffff0007 	.word	0xffff0007

08009ec4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b084      	sub	sp, #16
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
 8009ecc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009ece:	2300      	movs	r3, #0
 8009ed0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009ed2:	4b53      	ldr	r3, [pc, #332]	; (800a020 <RCCEx_PLL3_Config+0x15c>)
 8009ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ed6:	f003 0303 	and.w	r3, r3, #3
 8009eda:	2b03      	cmp	r3, #3
 8009edc:	d101      	bne.n	8009ee2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009ede:	2301      	movs	r3, #1
 8009ee0:	e099      	b.n	800a016 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009ee2:	4b4f      	ldr	r3, [pc, #316]	; (800a020 <RCCEx_PLL3_Config+0x15c>)
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	4a4e      	ldr	r2, [pc, #312]	; (800a020 <RCCEx_PLL3_Config+0x15c>)
 8009ee8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009eec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009eee:	f7f8 f941 	bl	8002174 <HAL_GetTick>
 8009ef2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009ef4:	e008      	b.n	8009f08 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009ef6:	f7f8 f93d 	bl	8002174 <HAL_GetTick>
 8009efa:	4602      	mov	r2, r0
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	1ad3      	subs	r3, r2, r3
 8009f00:	2b02      	cmp	r3, #2
 8009f02:	d901      	bls.n	8009f08 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009f04:	2303      	movs	r3, #3
 8009f06:	e086      	b.n	800a016 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009f08:	4b45      	ldr	r3, [pc, #276]	; (800a020 <RCCEx_PLL3_Config+0x15c>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d1f0      	bne.n	8009ef6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009f14:	4b42      	ldr	r3, [pc, #264]	; (800a020 <RCCEx_PLL3_Config+0x15c>)
 8009f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f18:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	051b      	lsls	r3, r3, #20
 8009f22:	493f      	ldr	r1, [pc, #252]	; (800a020 <RCCEx_PLL3_Config+0x15c>)
 8009f24:	4313      	orrs	r3, r2
 8009f26:	628b      	str	r3, [r1, #40]	; 0x28
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	685b      	ldr	r3, [r3, #4]
 8009f2c:	3b01      	subs	r3, #1
 8009f2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	689b      	ldr	r3, [r3, #8]
 8009f36:	3b01      	subs	r3, #1
 8009f38:	025b      	lsls	r3, r3, #9
 8009f3a:	b29b      	uxth	r3, r3
 8009f3c:	431a      	orrs	r2, r3
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	68db      	ldr	r3, [r3, #12]
 8009f42:	3b01      	subs	r3, #1
 8009f44:	041b      	lsls	r3, r3, #16
 8009f46:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009f4a:	431a      	orrs	r2, r3
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	691b      	ldr	r3, [r3, #16]
 8009f50:	3b01      	subs	r3, #1
 8009f52:	061b      	lsls	r3, r3, #24
 8009f54:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009f58:	4931      	ldr	r1, [pc, #196]	; (800a020 <RCCEx_PLL3_Config+0x15c>)
 8009f5a:	4313      	orrs	r3, r2
 8009f5c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009f5e:	4b30      	ldr	r3, [pc, #192]	; (800a020 <RCCEx_PLL3_Config+0x15c>)
 8009f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f62:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	695b      	ldr	r3, [r3, #20]
 8009f6a:	492d      	ldr	r1, [pc, #180]	; (800a020 <RCCEx_PLL3_Config+0x15c>)
 8009f6c:	4313      	orrs	r3, r2
 8009f6e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009f70:	4b2b      	ldr	r3, [pc, #172]	; (800a020 <RCCEx_PLL3_Config+0x15c>)
 8009f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f74:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	699b      	ldr	r3, [r3, #24]
 8009f7c:	4928      	ldr	r1, [pc, #160]	; (800a020 <RCCEx_PLL3_Config+0x15c>)
 8009f7e:	4313      	orrs	r3, r2
 8009f80:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009f82:	4b27      	ldr	r3, [pc, #156]	; (800a020 <RCCEx_PLL3_Config+0x15c>)
 8009f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f86:	4a26      	ldr	r2, [pc, #152]	; (800a020 <RCCEx_PLL3_Config+0x15c>)
 8009f88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009f8c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009f8e:	4b24      	ldr	r3, [pc, #144]	; (800a020 <RCCEx_PLL3_Config+0x15c>)
 8009f90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009f92:	4b24      	ldr	r3, [pc, #144]	; (800a024 <RCCEx_PLL3_Config+0x160>)
 8009f94:	4013      	ands	r3, r2
 8009f96:	687a      	ldr	r2, [r7, #4]
 8009f98:	69d2      	ldr	r2, [r2, #28]
 8009f9a:	00d2      	lsls	r2, r2, #3
 8009f9c:	4920      	ldr	r1, [pc, #128]	; (800a020 <RCCEx_PLL3_Config+0x15c>)
 8009f9e:	4313      	orrs	r3, r2
 8009fa0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009fa2:	4b1f      	ldr	r3, [pc, #124]	; (800a020 <RCCEx_PLL3_Config+0x15c>)
 8009fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fa6:	4a1e      	ldr	r2, [pc, #120]	; (800a020 <RCCEx_PLL3_Config+0x15c>)
 8009fa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009fac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d106      	bne.n	8009fc2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009fb4:	4b1a      	ldr	r3, [pc, #104]	; (800a020 <RCCEx_PLL3_Config+0x15c>)
 8009fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fb8:	4a19      	ldr	r2, [pc, #100]	; (800a020 <RCCEx_PLL3_Config+0x15c>)
 8009fba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009fbe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009fc0:	e00f      	b.n	8009fe2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	2b01      	cmp	r3, #1
 8009fc6:	d106      	bne.n	8009fd6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009fc8:	4b15      	ldr	r3, [pc, #84]	; (800a020 <RCCEx_PLL3_Config+0x15c>)
 8009fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fcc:	4a14      	ldr	r2, [pc, #80]	; (800a020 <RCCEx_PLL3_Config+0x15c>)
 8009fce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009fd2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009fd4:	e005      	b.n	8009fe2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009fd6:	4b12      	ldr	r3, [pc, #72]	; (800a020 <RCCEx_PLL3_Config+0x15c>)
 8009fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fda:	4a11      	ldr	r2, [pc, #68]	; (800a020 <RCCEx_PLL3_Config+0x15c>)
 8009fdc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009fe0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009fe2:	4b0f      	ldr	r3, [pc, #60]	; (800a020 <RCCEx_PLL3_Config+0x15c>)
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	4a0e      	ldr	r2, [pc, #56]	; (800a020 <RCCEx_PLL3_Config+0x15c>)
 8009fe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009fec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009fee:	f7f8 f8c1 	bl	8002174 <HAL_GetTick>
 8009ff2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009ff4:	e008      	b.n	800a008 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009ff6:	f7f8 f8bd 	bl	8002174 <HAL_GetTick>
 8009ffa:	4602      	mov	r2, r0
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	1ad3      	subs	r3, r2, r3
 800a000:	2b02      	cmp	r3, #2
 800a002:	d901      	bls.n	800a008 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a004:	2303      	movs	r3, #3
 800a006:	e006      	b.n	800a016 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a008:	4b05      	ldr	r3, [pc, #20]	; (800a020 <RCCEx_PLL3_Config+0x15c>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a010:	2b00      	cmp	r3, #0
 800a012:	d0f0      	beq.n	8009ff6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a014:	7bfb      	ldrb	r3, [r7, #15]
}
 800a016:	4618      	mov	r0, r3
 800a018:	3710      	adds	r7, #16
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd80      	pop	{r7, pc}
 800a01e:	bf00      	nop
 800a020:	58024400 	.word	0x58024400
 800a024:	ffff0007 	.word	0xffff0007

0800a028 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b084      	sub	sp, #16
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a034:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a03c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a040:	2b00      	cmp	r3, #0
 800a042:	d008      	beq.n	800a056 <HAL_SD_IRQHandler+0x2e>
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	f003 0308 	and.w	r3, r3, #8
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d003      	beq.n	800a056 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f000 f9ac 	bl	800a3ac <SD_Read_IT>
 800a054:	e19a      	b.n	800a38c <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a05c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a060:	2b00      	cmp	r3, #0
 800a062:	f000 80ac 	beq.w	800a1be <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a06e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681a      	ldr	r2, [r3, #0]
 800a07a:	4b59      	ldr	r3, [pc, #356]	; (800a1e0 <HAL_SD_IRQHandler+0x1b8>)
 800a07c:	400b      	ands	r3, r1
 800a07e:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800a08e:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	68da      	ldr	r2, [r3, #12]
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a09e:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	f003 0308 	and.w	r3, r3, #8
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d038      	beq.n	800a11c <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	f003 0302 	and.w	r3, r3, #2
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d104      	bne.n	800a0be <HAL_SD_IRQHandler+0x96>
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	f003 0320 	and.w	r3, r3, #32
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d011      	beq.n	800a0e2 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	f003 f942 	bl	800d34c <SDMMC_CmdStopTransfer>
 800a0c8:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d008      	beq.n	800a0e2 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	431a      	orrs	r2, r3
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800a0dc:	6878      	ldr	r0, [r7, #4]
 800a0de:	f000 f95b 	bl	800a398 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	4a3f      	ldr	r2, [pc, #252]	; (800a1e4 <HAL_SD_IRQHandler+0x1bc>)
 800a0e8:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2201      	movs	r2, #1
 800a0ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	f003 0301 	and.w	r3, r3, #1
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d104      	bne.n	800a10c <HAL_SD_IRQHandler+0xe4>
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	f003 0302 	and.w	r3, r3, #2
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d003      	beq.n	800a114 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800a10c:	6878      	ldr	r0, [r7, #4]
 800a10e:	f004 fdc7 	bl	800eca0 <HAL_SD_RxCpltCallback>
 800a112:	e13b      	b.n	800a38c <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f004 fdb9 	bl	800ec8c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a11a:	e137      	b.n	800a38c <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a122:	2b00      	cmp	r3, #0
 800a124:	f000 8132 	beq.w	800a38c <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	2200      	movs	r2, #0
 800a12e:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	2200      	movs	r2, #0
 800a136:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	2200      	movs	r2, #0
 800a13e:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	f003 0302 	and.w	r3, r3, #2
 800a146:	2b00      	cmp	r3, #0
 800a148:	d104      	bne.n	800a154 <HAL_SD_IRQHandler+0x12c>
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	f003 0320 	and.w	r3, r3, #32
 800a150:	2b00      	cmp	r3, #0
 800a152:	d011      	beq.n	800a178 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	4618      	mov	r0, r3
 800a15a:	f003 f8f7 	bl	800d34c <SDMMC_CmdStopTransfer>
 800a15e:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d008      	beq.n	800a178 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a16a:	68bb      	ldr	r3, [r7, #8]
 800a16c:	431a      	orrs	r2, r3
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f000 f910 	bl	800a398 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2201      	movs	r2, #1
 800a17c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2200      	movs	r2, #0
 800a184:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	f003 0310 	and.w	r3, r3, #16
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d104      	bne.n	800a19a <HAL_SD_IRQHandler+0x172>
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	f003 0320 	and.w	r3, r3, #32
 800a196:	2b00      	cmp	r3, #0
 800a198:	d002      	beq.n	800a1a0 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800a19a:	6878      	ldr	r0, [r7, #4]
 800a19c:	f004 fd76 	bl	800ec8c <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	f003 0301 	and.w	r3, r3, #1
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d105      	bne.n	800a1b6 <HAL_SD_IRQHandler+0x18e>
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	f003 0302 	and.w	r3, r3, #2
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	f000 80eb 	beq.w	800a38c <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f004 fd72 	bl	800eca0 <HAL_SD_RxCpltCallback>
}
 800a1bc:	e0e6      	b.n	800a38c <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d00d      	beq.n	800a1e8 <HAL_SD_IRQHandler+0x1c0>
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	f003 0308 	and.w	r3, r3, #8
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d008      	beq.n	800a1e8 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800a1d6:	6878      	ldr	r0, [r7, #4]
 800a1d8:	f000 f92e 	bl	800a438 <SD_Write_IT>
 800a1dc:	e0d6      	b.n	800a38c <HAL_SD_IRQHandler+0x364>
 800a1de:	bf00      	nop
 800a1e0:	ffff3ec5 	.word	0xffff3ec5
 800a1e4:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1ee:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	f000 809d 	beq.w	800a332 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1fe:	f003 0302 	and.w	r3, r3, #2
 800a202:	2b00      	cmp	r3, #0
 800a204:	d005      	beq.n	800a212 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a20a:	f043 0202 	orr.w	r2, r3, #2
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a218:	f003 0308 	and.w	r3, r3, #8
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d005      	beq.n	800a22c <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a224:	f043 0208 	orr.w	r2, r3, #8
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a232:	f003 0320 	and.w	r3, r3, #32
 800a236:	2b00      	cmp	r3, #0
 800a238:	d005      	beq.n	800a246 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a23e:	f043 0220 	orr.w	r2, r3, #32
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a24c:	f003 0310 	and.w	r3, r3, #16
 800a250:	2b00      	cmp	r3, #0
 800a252:	d005      	beq.n	800a260 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a258:	f043 0210 	orr.w	r2, r3, #16
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	4a4b      	ldr	r2, [pc, #300]	; (800a394 <HAL_SD_IRQHandler+0x36c>)
 800a266:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800a276:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	68da      	ldr	r2, [r3, #12]
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a286:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a296:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	68da      	ldr	r2, [r3, #12]
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a2a6:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	f003 f84d 	bl	800d34c <SDMMC_CmdStopTransfer>
 800a2b2:	4602      	mov	r2, r0
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2b8:	431a      	orrs	r2, r3
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	68da      	ldr	r2, [r3, #12]
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a2cc:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a2d6:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	f003 0308 	and.w	r3, r3, #8
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d00a      	beq.n	800a2f8 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2201      	movs	r2, #1
 800a2e6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800a2f0:	6878      	ldr	r0, [r7, #4]
 800a2f2:	f000 f851 	bl	800a398 <HAL_SD_ErrorCallback>
}
 800a2f6:	e049      	b.n	800a38c <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d044      	beq.n	800a38c <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a306:	2b00      	cmp	r3, #0
 800a308:	d040      	beq.n	800a38c <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800a318:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	2200      	movs	r2, #0
 800a320:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2201      	movs	r2, #1
 800a326:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800a32a:	6878      	ldr	r0, [r7, #4]
 800a32c:	f000 f834 	bl	800a398 <HAL_SD_ErrorCallback>
}
 800a330:	e02c      	b.n	800a38c <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a338:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d025      	beq.n	800a38c <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a348:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a350:	f003 0304 	and.w	r3, r3, #4
 800a354:	2b00      	cmp	r3, #0
 800a356:	d10c      	bne.n	800a372 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	f003 0320 	and.w	r3, r3, #32
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d003      	beq.n	800a36a <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800a362:	6878      	ldr	r0, [r7, #4]
 800a364:	f000 f8d0 	bl	800a508 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800a368:	e010      	b.n	800a38c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	f000 f8b8 	bl	800a4e0 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800a370:	e00c      	b.n	800a38c <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	f003 0320 	and.w	r3, r3, #32
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d003      	beq.n	800a384 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f000 f8b9 	bl	800a4f4 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800a382:	e003      	b.n	800a38c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800a384:	6878      	ldr	r0, [r7, #4]
 800a386:	f000 f8a1 	bl	800a4cc <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800a38a:	e7ff      	b.n	800a38c <HAL_SD_IRQHandler+0x364>
 800a38c:	bf00      	nop
 800a38e:	3710      	adds	r7, #16
 800a390:	46bd      	mov	sp, r7
 800a392:	bd80      	pop	{r7, pc}
 800a394:	18000f3a 	.word	0x18000f3a

0800a398 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800a398:	b480      	push	{r7}
 800a39a:	b083      	sub	sp, #12
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800a3a0:	bf00      	nop
 800a3a2:	370c      	adds	r7, #12
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3aa:	4770      	bx	lr

0800a3ac <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b086      	sub	sp, #24
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3b8:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3be:	2b1f      	cmp	r3, #31
 800a3c0:	d936      	bls.n	800a430 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	617b      	str	r3, [r7, #20]
 800a3c6:	e027      	b.n	800a418 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	f002 ff55 	bl	800d27c <SDMMC_ReadFIFO>
 800a3d2:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	b2da      	uxtb	r2, r3
 800a3d8:	693b      	ldr	r3, [r7, #16]
 800a3da:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a3dc:	693b      	ldr	r3, [r7, #16]
 800a3de:	3301      	adds	r3, #1
 800a3e0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	0a1b      	lsrs	r3, r3, #8
 800a3e6:	b2da      	uxtb	r2, r3
 800a3e8:	693b      	ldr	r3, [r7, #16]
 800a3ea:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a3ec:	693b      	ldr	r3, [r7, #16]
 800a3ee:	3301      	adds	r3, #1
 800a3f0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	0c1b      	lsrs	r3, r3, #16
 800a3f6:	b2da      	uxtb	r2, r3
 800a3f8:	693b      	ldr	r3, [r7, #16]
 800a3fa:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a3fc:	693b      	ldr	r3, [r7, #16]
 800a3fe:	3301      	adds	r3, #1
 800a400:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	0e1b      	lsrs	r3, r3, #24
 800a406:	b2da      	uxtb	r2, r3
 800a408:	693b      	ldr	r3, [r7, #16]
 800a40a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a40c:	693b      	ldr	r3, [r7, #16]
 800a40e:	3301      	adds	r3, #1
 800a410:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800a412:	697b      	ldr	r3, [r7, #20]
 800a414:	3301      	adds	r3, #1
 800a416:	617b      	str	r3, [r7, #20]
 800a418:	697b      	ldr	r3, [r7, #20]
 800a41a:	2b07      	cmp	r3, #7
 800a41c:	d9d4      	bls.n	800a3c8 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	693a      	ldr	r2, [r7, #16]
 800a422:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a428:	f1a3 0220 	sub.w	r2, r3, #32
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800a430:	bf00      	nop
 800a432:	3718      	adds	r7, #24
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}

0800a438 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b086      	sub	sp, #24
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	69db      	ldr	r3, [r3, #28]
 800a444:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	6a1b      	ldr	r3, [r3, #32]
 800a44a:	2b1f      	cmp	r3, #31
 800a44c:	d93a      	bls.n	800a4c4 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800a44e:	2300      	movs	r3, #0
 800a450:	617b      	str	r3, [r7, #20]
 800a452:	e02b      	b.n	800a4ac <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800a454:	693b      	ldr	r3, [r7, #16]
 800a456:	781b      	ldrb	r3, [r3, #0]
 800a458:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a45a:	693b      	ldr	r3, [r7, #16]
 800a45c:	3301      	adds	r3, #1
 800a45e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800a460:	693b      	ldr	r3, [r7, #16]
 800a462:	781b      	ldrb	r3, [r3, #0]
 800a464:	021a      	lsls	r2, r3, #8
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	4313      	orrs	r3, r2
 800a46a:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a46c:	693b      	ldr	r3, [r7, #16]
 800a46e:	3301      	adds	r3, #1
 800a470:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800a472:	693b      	ldr	r3, [r7, #16]
 800a474:	781b      	ldrb	r3, [r3, #0]
 800a476:	041a      	lsls	r2, r3, #16
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	4313      	orrs	r3, r2
 800a47c:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a47e:	693b      	ldr	r3, [r7, #16]
 800a480:	3301      	adds	r3, #1
 800a482:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800a484:	693b      	ldr	r3, [r7, #16]
 800a486:	781b      	ldrb	r3, [r3, #0]
 800a488:	061a      	lsls	r2, r3, #24
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	4313      	orrs	r3, r2
 800a48e:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a490:	693b      	ldr	r3, [r7, #16]
 800a492:	3301      	adds	r3, #1
 800a494:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f107 020c 	add.w	r2, r7, #12
 800a49e:	4611      	mov	r1, r2
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	f002 fef8 	bl	800d296 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800a4a6:	697b      	ldr	r3, [r7, #20]
 800a4a8:	3301      	adds	r3, #1
 800a4aa:	617b      	str	r3, [r7, #20]
 800a4ac:	697b      	ldr	r3, [r7, #20]
 800a4ae:	2b07      	cmp	r3, #7
 800a4b0:	d9d0      	bls.n	800a454 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	693a      	ldr	r2, [r7, #16]
 800a4b6:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	6a1b      	ldr	r3, [r3, #32]
 800a4bc:	f1a3 0220 	sub.w	r2, r3, #32
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	621a      	str	r2, [r3, #32]
  }
}
 800a4c4:	bf00      	nop
 800a4c6:	3718      	adds	r7, #24
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd80      	pop	{r7, pc}

0800a4cc <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800a4cc:	b480      	push	{r7}
 800a4ce:	b083      	sub	sp, #12
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800a4d4:	bf00      	nop
 800a4d6:	370c      	adds	r7, #12
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4de:	4770      	bx	lr

0800a4e0 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b083      	sub	sp, #12
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800a4e8:	bf00      	nop
 800a4ea:	370c      	adds	r7, #12
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f2:	4770      	bx	lr

0800a4f4 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800a4f4:	b480      	push	{r7}
 800a4f6:	b083      	sub	sp, #12
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800a4fc:	bf00      	nop
 800a4fe:	370c      	adds	r7, #12
 800a500:	46bd      	mov	sp, r7
 800a502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a506:	4770      	bx	lr

0800a508 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800a508:	b480      	push	{r7}
 800a50a:	b083      	sub	sp, #12
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800a510:	bf00      	nop
 800a512:	370c      	adds	r7, #12
 800a514:	46bd      	mov	sp, r7
 800a516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51a:	4770      	bx	lr

0800a51c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b082      	sub	sp, #8
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d101      	bne.n	800a52e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a52a:	2301      	movs	r3, #1
 800a52c:	e049      	b.n	800a5c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a534:	b2db      	uxtb	r3, r3
 800a536:	2b00      	cmp	r3, #0
 800a538:	d106      	bne.n	800a548 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2200      	movs	r2, #0
 800a53e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a542:	6878      	ldr	r0, [r7, #4]
 800a544:	f7f7 fade 	bl	8001b04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2202      	movs	r2, #2
 800a54c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681a      	ldr	r2, [r3, #0]
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	3304      	adds	r3, #4
 800a558:	4619      	mov	r1, r3
 800a55a:	4610      	mov	r0, r2
 800a55c:	f000 fbec 	bl	800ad38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2201      	movs	r2, #1
 800a564:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2201      	movs	r2, #1
 800a56c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2201      	movs	r2, #1
 800a574:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2201      	movs	r2, #1
 800a57c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2201      	movs	r2, #1
 800a584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2201      	movs	r2, #1
 800a58c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2201      	movs	r2, #1
 800a594:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2201      	movs	r2, #1
 800a59c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2201      	movs	r2, #1
 800a5a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2201      	movs	r2, #1
 800a5ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2201      	movs	r2, #1
 800a5b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2201      	movs	r2, #1
 800a5bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a5c0:	2300      	movs	r3, #0
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	3708      	adds	r7, #8
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bd80      	pop	{r7, pc}

0800a5ca <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a5ca:	b580      	push	{r7, lr}
 800a5cc:	b082      	sub	sp, #8
 800a5ce:	af00      	add	r7, sp, #0
 800a5d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d101      	bne.n	800a5dc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a5d8:	2301      	movs	r3, #1
 800a5da:	e049      	b.n	800a670 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a5e2:	b2db      	uxtb	r3, r3
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d106      	bne.n	800a5f6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a5f0:	6878      	ldr	r0, [r7, #4]
 800a5f2:	f000 f841 	bl	800a678 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	2202      	movs	r2, #2
 800a5fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681a      	ldr	r2, [r3, #0]
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	3304      	adds	r3, #4
 800a606:	4619      	mov	r1, r3
 800a608:	4610      	mov	r0, r2
 800a60a:	f000 fb95 	bl	800ad38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	2201      	movs	r2, #1
 800a612:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2201      	movs	r2, #1
 800a61a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2201      	movs	r2, #1
 800a622:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2201      	movs	r2, #1
 800a62a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2201      	movs	r2, #1
 800a632:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2201      	movs	r2, #1
 800a63a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	2201      	movs	r2, #1
 800a642:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2201      	movs	r2, #1
 800a64a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2201      	movs	r2, #1
 800a652:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2201      	movs	r2, #1
 800a65a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	2201      	movs	r2, #1
 800a662:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2201      	movs	r2, #1
 800a66a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a66e:	2300      	movs	r3, #0
}
 800a670:	4618      	mov	r0, r3
 800a672:	3708      	adds	r7, #8
 800a674:	46bd      	mov	sp, r7
 800a676:	bd80      	pop	{r7, pc}

0800a678 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a678:	b480      	push	{r7}
 800a67a:	b083      	sub	sp, #12
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a680:	bf00      	nop
 800a682:	370c      	adds	r7, #12
 800a684:	46bd      	mov	sp, r7
 800a686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68a:	4770      	bx	lr

0800a68c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b082      	sub	sp, #8
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	691b      	ldr	r3, [r3, #16]
 800a69a:	f003 0302 	and.w	r3, r3, #2
 800a69e:	2b02      	cmp	r3, #2
 800a6a0:	d122      	bne.n	800a6e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	68db      	ldr	r3, [r3, #12]
 800a6a8:	f003 0302 	and.w	r3, r3, #2
 800a6ac:	2b02      	cmp	r3, #2
 800a6ae:	d11b      	bne.n	800a6e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f06f 0202 	mvn.w	r2, #2
 800a6b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2201      	movs	r2, #1
 800a6be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	699b      	ldr	r3, [r3, #24]
 800a6c6:	f003 0303 	and.w	r3, r3, #3
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d003      	beq.n	800a6d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a6ce:	6878      	ldr	r0, [r7, #4]
 800a6d0:	f000 fb14 	bl	800acfc <HAL_TIM_IC_CaptureCallback>
 800a6d4:	e005      	b.n	800a6e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6d6:	6878      	ldr	r0, [r7, #4]
 800a6d8:	f000 fb06 	bl	800ace8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6dc:	6878      	ldr	r0, [r7, #4]
 800a6de:	f000 fb17 	bl	800ad10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	691b      	ldr	r3, [r3, #16]
 800a6ee:	f003 0304 	and.w	r3, r3, #4
 800a6f2:	2b04      	cmp	r3, #4
 800a6f4:	d122      	bne.n	800a73c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	68db      	ldr	r3, [r3, #12]
 800a6fc:	f003 0304 	and.w	r3, r3, #4
 800a700:	2b04      	cmp	r3, #4
 800a702:	d11b      	bne.n	800a73c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	f06f 0204 	mvn.w	r2, #4
 800a70c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2202      	movs	r2, #2
 800a712:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	699b      	ldr	r3, [r3, #24]
 800a71a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d003      	beq.n	800a72a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a722:	6878      	ldr	r0, [r7, #4]
 800a724:	f000 faea 	bl	800acfc <HAL_TIM_IC_CaptureCallback>
 800a728:	e005      	b.n	800a736 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	f000 fadc 	bl	800ace8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f000 faed 	bl	800ad10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2200      	movs	r2, #0
 800a73a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	691b      	ldr	r3, [r3, #16]
 800a742:	f003 0308 	and.w	r3, r3, #8
 800a746:	2b08      	cmp	r3, #8
 800a748:	d122      	bne.n	800a790 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	68db      	ldr	r3, [r3, #12]
 800a750:	f003 0308 	and.w	r3, r3, #8
 800a754:	2b08      	cmp	r3, #8
 800a756:	d11b      	bne.n	800a790 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f06f 0208 	mvn.w	r2, #8
 800a760:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2204      	movs	r2, #4
 800a766:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	69db      	ldr	r3, [r3, #28]
 800a76e:	f003 0303 	and.w	r3, r3, #3
 800a772:	2b00      	cmp	r3, #0
 800a774:	d003      	beq.n	800a77e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f000 fac0 	bl	800acfc <HAL_TIM_IC_CaptureCallback>
 800a77c:	e005      	b.n	800a78a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	f000 fab2 	bl	800ace8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f000 fac3 	bl	800ad10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2200      	movs	r2, #0
 800a78e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	691b      	ldr	r3, [r3, #16]
 800a796:	f003 0310 	and.w	r3, r3, #16
 800a79a:	2b10      	cmp	r3, #16
 800a79c:	d122      	bne.n	800a7e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	68db      	ldr	r3, [r3, #12]
 800a7a4:	f003 0310 	and.w	r3, r3, #16
 800a7a8:	2b10      	cmp	r3, #16
 800a7aa:	d11b      	bne.n	800a7e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f06f 0210 	mvn.w	r2, #16
 800a7b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	2208      	movs	r2, #8
 800a7ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	69db      	ldr	r3, [r3, #28]
 800a7c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d003      	beq.n	800a7d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f000 fa96 	bl	800acfc <HAL_TIM_IC_CaptureCallback>
 800a7d0:	e005      	b.n	800a7de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a7d2:	6878      	ldr	r0, [r7, #4]
 800a7d4:	f000 fa88 	bl	800ace8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a7d8:	6878      	ldr	r0, [r7, #4]
 800a7da:	f000 fa99 	bl	800ad10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	691b      	ldr	r3, [r3, #16]
 800a7ea:	f003 0301 	and.w	r3, r3, #1
 800a7ee:	2b01      	cmp	r3, #1
 800a7f0:	d10e      	bne.n	800a810 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	68db      	ldr	r3, [r3, #12]
 800a7f8:	f003 0301 	and.w	r3, r3, #1
 800a7fc:	2b01      	cmp	r3, #1
 800a7fe:	d107      	bne.n	800a810 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	f06f 0201 	mvn.w	r2, #1
 800a808:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	f000 fa62 	bl	800acd4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	691b      	ldr	r3, [r3, #16]
 800a816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a81a:	2b80      	cmp	r3, #128	; 0x80
 800a81c:	d10e      	bne.n	800a83c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	68db      	ldr	r3, [r3, #12]
 800a824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a828:	2b80      	cmp	r3, #128	; 0x80
 800a82a:	d107      	bne.n	800a83c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a834:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a836:	6878      	ldr	r0, [r7, #4]
 800a838:	f000 ff94 	bl	800b764 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	691b      	ldr	r3, [r3, #16]
 800a842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a846:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a84a:	d10e      	bne.n	800a86a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	68db      	ldr	r3, [r3, #12]
 800a852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a856:	2b80      	cmp	r3, #128	; 0x80
 800a858:	d107      	bne.n	800a86a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a862:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a864:	6878      	ldr	r0, [r7, #4]
 800a866:	f000 ff87 	bl	800b778 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	691b      	ldr	r3, [r3, #16]
 800a870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a874:	2b40      	cmp	r3, #64	; 0x40
 800a876:	d10e      	bne.n	800a896 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	68db      	ldr	r3, [r3, #12]
 800a87e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a882:	2b40      	cmp	r3, #64	; 0x40
 800a884:	d107      	bne.n	800a896 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a88e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f000 fa47 	bl	800ad24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	691b      	ldr	r3, [r3, #16]
 800a89c:	f003 0320 	and.w	r3, r3, #32
 800a8a0:	2b20      	cmp	r3, #32
 800a8a2:	d10e      	bne.n	800a8c2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	68db      	ldr	r3, [r3, #12]
 800a8aa:	f003 0320 	and.w	r3, r3, #32
 800a8ae:	2b20      	cmp	r3, #32
 800a8b0:	d107      	bne.n	800a8c2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f06f 0220 	mvn.w	r2, #32
 800a8ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a8bc:	6878      	ldr	r0, [r7, #4]
 800a8be:	f000 ff47 	bl	800b750 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a8c2:	bf00      	nop
 800a8c4:	3708      	adds	r7, #8
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bd80      	pop	{r7, pc}
	...

0800a8cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b084      	sub	sp, #16
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	60f8      	str	r0, [r7, #12]
 800a8d4:	60b9      	str	r1, [r7, #8]
 800a8d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a8de:	2b01      	cmp	r3, #1
 800a8e0:	d101      	bne.n	800a8e6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a8e2:	2302      	movs	r3, #2
 800a8e4:	e0fd      	b.n	800aae2 <HAL_TIM_PWM_ConfigChannel+0x216>
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	2201      	movs	r2, #1
 800a8ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2b14      	cmp	r3, #20
 800a8f2:	f200 80f0 	bhi.w	800aad6 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800a8f6:	a201      	add	r2, pc, #4	; (adr r2, 800a8fc <HAL_TIM_PWM_ConfigChannel+0x30>)
 800a8f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8fc:	0800a951 	.word	0x0800a951
 800a900:	0800aad7 	.word	0x0800aad7
 800a904:	0800aad7 	.word	0x0800aad7
 800a908:	0800aad7 	.word	0x0800aad7
 800a90c:	0800a991 	.word	0x0800a991
 800a910:	0800aad7 	.word	0x0800aad7
 800a914:	0800aad7 	.word	0x0800aad7
 800a918:	0800aad7 	.word	0x0800aad7
 800a91c:	0800a9d3 	.word	0x0800a9d3
 800a920:	0800aad7 	.word	0x0800aad7
 800a924:	0800aad7 	.word	0x0800aad7
 800a928:	0800aad7 	.word	0x0800aad7
 800a92c:	0800aa13 	.word	0x0800aa13
 800a930:	0800aad7 	.word	0x0800aad7
 800a934:	0800aad7 	.word	0x0800aad7
 800a938:	0800aad7 	.word	0x0800aad7
 800a93c:	0800aa55 	.word	0x0800aa55
 800a940:	0800aad7 	.word	0x0800aad7
 800a944:	0800aad7 	.word	0x0800aad7
 800a948:	0800aad7 	.word	0x0800aad7
 800a94c:	0800aa95 	.word	0x0800aa95
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	68b9      	ldr	r1, [r7, #8]
 800a956:	4618      	mov	r0, r3
 800a958:	f000 fa88 	bl	800ae6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	699a      	ldr	r2, [r3, #24]
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	f042 0208 	orr.w	r2, r2, #8
 800a96a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	699a      	ldr	r2, [r3, #24]
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	f022 0204 	bic.w	r2, r2, #4
 800a97a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	6999      	ldr	r1, [r3, #24]
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	691a      	ldr	r2, [r3, #16]
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	430a      	orrs	r2, r1
 800a98c:	619a      	str	r2, [r3, #24]
      break;
 800a98e:	e0a3      	b.n	800aad8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	68b9      	ldr	r1, [r7, #8]
 800a996:	4618      	mov	r0, r3
 800a998:	f000 faf8 	bl	800af8c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	699a      	ldr	r2, [r3, #24]
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a9aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	699a      	ldr	r2, [r3, #24]
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a9ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	6999      	ldr	r1, [r3, #24]
 800a9c2:	68bb      	ldr	r3, [r7, #8]
 800a9c4:	691b      	ldr	r3, [r3, #16]
 800a9c6:	021a      	lsls	r2, r3, #8
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	430a      	orrs	r2, r1
 800a9ce:	619a      	str	r2, [r3, #24]
      break;
 800a9d0:	e082      	b.n	800aad8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	68b9      	ldr	r1, [r7, #8]
 800a9d8:	4618      	mov	r0, r3
 800a9da:	f000 fb61 	bl	800b0a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	69da      	ldr	r2, [r3, #28]
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	f042 0208 	orr.w	r2, r2, #8
 800a9ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	69da      	ldr	r2, [r3, #28]
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	f022 0204 	bic.w	r2, r2, #4
 800a9fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	69d9      	ldr	r1, [r3, #28]
 800aa04:	68bb      	ldr	r3, [r7, #8]
 800aa06:	691a      	ldr	r2, [r3, #16]
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	430a      	orrs	r2, r1
 800aa0e:	61da      	str	r2, [r3, #28]
      break;
 800aa10:	e062      	b.n	800aad8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	68b9      	ldr	r1, [r7, #8]
 800aa18:	4618      	mov	r0, r3
 800aa1a:	f000 fbc7 	bl	800b1ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	69da      	ldr	r2, [r3, #28]
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aa2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	69da      	ldr	r2, [r3, #28]
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aa3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	69d9      	ldr	r1, [r3, #28]
 800aa44:	68bb      	ldr	r3, [r7, #8]
 800aa46:	691b      	ldr	r3, [r3, #16]
 800aa48:	021a      	lsls	r2, r3, #8
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	430a      	orrs	r2, r1
 800aa50:	61da      	str	r2, [r3, #28]
      break;
 800aa52:	e041      	b.n	800aad8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	68b9      	ldr	r1, [r7, #8]
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	f000 fc0e 	bl	800b27c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	f042 0208 	orr.w	r2, r2, #8
 800aa6e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f022 0204 	bic.w	r2, r2, #4
 800aa7e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800aa86:	68bb      	ldr	r3, [r7, #8]
 800aa88:	691a      	ldr	r2, [r3, #16]
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	430a      	orrs	r2, r1
 800aa90:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800aa92:	e021      	b.n	800aad8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	68b9      	ldr	r1, [r7, #8]
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	f000 fc50 	bl	800b340 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aaae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aabe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800aac6:	68bb      	ldr	r3, [r7, #8]
 800aac8:	691b      	ldr	r3, [r3, #16]
 800aaca:	021a      	lsls	r2, r3, #8
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	430a      	orrs	r2, r1
 800aad2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800aad4:	e000      	b.n	800aad8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800aad6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	2200      	movs	r2, #0
 800aadc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aae0:	2300      	movs	r3, #0
}
 800aae2:	4618      	mov	r0, r3
 800aae4:	3710      	adds	r7, #16
 800aae6:	46bd      	mov	sp, r7
 800aae8:	bd80      	pop	{r7, pc}
 800aaea:	bf00      	nop

0800aaec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b084      	sub	sp, #16
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
 800aaf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aafc:	2b01      	cmp	r3, #1
 800aafe:	d101      	bne.n	800ab04 <HAL_TIM_ConfigClockSource+0x18>
 800ab00:	2302      	movs	r3, #2
 800ab02:	e0db      	b.n	800acbc <HAL_TIM_ConfigClockSource+0x1d0>
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2201      	movs	r2, #1
 800ab08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2202      	movs	r2, #2
 800ab10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	689b      	ldr	r3, [r3, #8]
 800ab1a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ab1c:	68fa      	ldr	r2, [r7, #12]
 800ab1e:	4b69      	ldr	r3, [pc, #420]	; (800acc4 <HAL_TIM_ConfigClockSource+0x1d8>)
 800ab20:	4013      	ands	r3, r2
 800ab22:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ab2a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	68fa      	ldr	r2, [r7, #12]
 800ab32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	4a63      	ldr	r2, [pc, #396]	; (800acc8 <HAL_TIM_ConfigClockSource+0x1dc>)
 800ab3a:	4293      	cmp	r3, r2
 800ab3c:	f000 80a9 	beq.w	800ac92 <HAL_TIM_ConfigClockSource+0x1a6>
 800ab40:	4a61      	ldr	r2, [pc, #388]	; (800acc8 <HAL_TIM_ConfigClockSource+0x1dc>)
 800ab42:	4293      	cmp	r3, r2
 800ab44:	f200 80ae 	bhi.w	800aca4 <HAL_TIM_ConfigClockSource+0x1b8>
 800ab48:	4a60      	ldr	r2, [pc, #384]	; (800accc <HAL_TIM_ConfigClockSource+0x1e0>)
 800ab4a:	4293      	cmp	r3, r2
 800ab4c:	f000 80a1 	beq.w	800ac92 <HAL_TIM_ConfigClockSource+0x1a6>
 800ab50:	4a5e      	ldr	r2, [pc, #376]	; (800accc <HAL_TIM_ConfigClockSource+0x1e0>)
 800ab52:	4293      	cmp	r3, r2
 800ab54:	f200 80a6 	bhi.w	800aca4 <HAL_TIM_ConfigClockSource+0x1b8>
 800ab58:	4a5d      	ldr	r2, [pc, #372]	; (800acd0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ab5a:	4293      	cmp	r3, r2
 800ab5c:	f000 8099 	beq.w	800ac92 <HAL_TIM_ConfigClockSource+0x1a6>
 800ab60:	4a5b      	ldr	r2, [pc, #364]	; (800acd0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ab62:	4293      	cmp	r3, r2
 800ab64:	f200 809e 	bhi.w	800aca4 <HAL_TIM_ConfigClockSource+0x1b8>
 800ab68:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ab6c:	f000 8091 	beq.w	800ac92 <HAL_TIM_ConfigClockSource+0x1a6>
 800ab70:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ab74:	f200 8096 	bhi.w	800aca4 <HAL_TIM_ConfigClockSource+0x1b8>
 800ab78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ab7c:	f000 8089 	beq.w	800ac92 <HAL_TIM_ConfigClockSource+0x1a6>
 800ab80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ab84:	f200 808e 	bhi.w	800aca4 <HAL_TIM_ConfigClockSource+0x1b8>
 800ab88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab8c:	d03e      	beq.n	800ac0c <HAL_TIM_ConfigClockSource+0x120>
 800ab8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab92:	f200 8087 	bhi.w	800aca4 <HAL_TIM_ConfigClockSource+0x1b8>
 800ab96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab9a:	f000 8085 	beq.w	800aca8 <HAL_TIM_ConfigClockSource+0x1bc>
 800ab9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aba2:	d87f      	bhi.n	800aca4 <HAL_TIM_ConfigClockSource+0x1b8>
 800aba4:	2b70      	cmp	r3, #112	; 0x70
 800aba6:	d01a      	beq.n	800abde <HAL_TIM_ConfigClockSource+0xf2>
 800aba8:	2b70      	cmp	r3, #112	; 0x70
 800abaa:	d87b      	bhi.n	800aca4 <HAL_TIM_ConfigClockSource+0x1b8>
 800abac:	2b60      	cmp	r3, #96	; 0x60
 800abae:	d050      	beq.n	800ac52 <HAL_TIM_ConfigClockSource+0x166>
 800abb0:	2b60      	cmp	r3, #96	; 0x60
 800abb2:	d877      	bhi.n	800aca4 <HAL_TIM_ConfigClockSource+0x1b8>
 800abb4:	2b50      	cmp	r3, #80	; 0x50
 800abb6:	d03c      	beq.n	800ac32 <HAL_TIM_ConfigClockSource+0x146>
 800abb8:	2b50      	cmp	r3, #80	; 0x50
 800abba:	d873      	bhi.n	800aca4 <HAL_TIM_ConfigClockSource+0x1b8>
 800abbc:	2b40      	cmp	r3, #64	; 0x40
 800abbe:	d058      	beq.n	800ac72 <HAL_TIM_ConfigClockSource+0x186>
 800abc0:	2b40      	cmp	r3, #64	; 0x40
 800abc2:	d86f      	bhi.n	800aca4 <HAL_TIM_ConfigClockSource+0x1b8>
 800abc4:	2b30      	cmp	r3, #48	; 0x30
 800abc6:	d064      	beq.n	800ac92 <HAL_TIM_ConfigClockSource+0x1a6>
 800abc8:	2b30      	cmp	r3, #48	; 0x30
 800abca:	d86b      	bhi.n	800aca4 <HAL_TIM_ConfigClockSource+0x1b8>
 800abcc:	2b20      	cmp	r3, #32
 800abce:	d060      	beq.n	800ac92 <HAL_TIM_ConfigClockSource+0x1a6>
 800abd0:	2b20      	cmp	r3, #32
 800abd2:	d867      	bhi.n	800aca4 <HAL_TIM_ConfigClockSource+0x1b8>
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d05c      	beq.n	800ac92 <HAL_TIM_ConfigClockSource+0x1a6>
 800abd8:	2b10      	cmp	r3, #16
 800abda:	d05a      	beq.n	800ac92 <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800abdc:	e062      	b.n	800aca4 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6818      	ldr	r0, [r3, #0]
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	6899      	ldr	r1, [r3, #8]
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	685a      	ldr	r2, [r3, #4]
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	68db      	ldr	r3, [r3, #12]
 800abee:	f000 fc89 	bl	800b504 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	689b      	ldr	r3, [r3, #8]
 800abf8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ac00:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	68fa      	ldr	r2, [r7, #12]
 800ac08:	609a      	str	r2, [r3, #8]
      break;
 800ac0a:	e04e      	b.n	800acaa <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6818      	ldr	r0, [r3, #0]
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	6899      	ldr	r1, [r3, #8]
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	685a      	ldr	r2, [r3, #4]
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	68db      	ldr	r3, [r3, #12]
 800ac1c:	f000 fc72 	bl	800b504 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	689a      	ldr	r2, [r3, #8]
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ac2e:	609a      	str	r2, [r3, #8]
      break;
 800ac30:	e03b      	b.n	800acaa <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	6818      	ldr	r0, [r3, #0]
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	6859      	ldr	r1, [r3, #4]
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	68db      	ldr	r3, [r3, #12]
 800ac3e:	461a      	mov	r2, r3
 800ac40:	f000 fbe2 	bl	800b408 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	2150      	movs	r1, #80	; 0x50
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	f000 fc3c 	bl	800b4c8 <TIM_ITRx_SetConfig>
      break;
 800ac50:	e02b      	b.n	800acaa <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	6818      	ldr	r0, [r3, #0]
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	6859      	ldr	r1, [r3, #4]
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	68db      	ldr	r3, [r3, #12]
 800ac5e:	461a      	mov	r2, r3
 800ac60:	f000 fc01 	bl	800b466 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	2160      	movs	r1, #96	; 0x60
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	f000 fc2c 	bl	800b4c8 <TIM_ITRx_SetConfig>
      break;
 800ac70:	e01b      	b.n	800acaa <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	6818      	ldr	r0, [r3, #0]
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	6859      	ldr	r1, [r3, #4]
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	68db      	ldr	r3, [r3, #12]
 800ac7e:	461a      	mov	r2, r3
 800ac80:	f000 fbc2 	bl	800b408 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	2140      	movs	r1, #64	; 0x40
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	f000 fc1c 	bl	800b4c8 <TIM_ITRx_SetConfig>
      break;
 800ac90:	e00b      	b.n	800acaa <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681a      	ldr	r2, [r3, #0]
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	4619      	mov	r1, r3
 800ac9c:	4610      	mov	r0, r2
 800ac9e:	f000 fc13 	bl	800b4c8 <TIM_ITRx_SetConfig>
        break;
 800aca2:	e002      	b.n	800acaa <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800aca4:	bf00      	nop
 800aca6:	e000      	b.n	800acaa <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800aca8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	2201      	movs	r2, #1
 800acae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	2200      	movs	r2, #0
 800acb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800acba:	2300      	movs	r3, #0
}
 800acbc:	4618      	mov	r0, r3
 800acbe:	3710      	adds	r7, #16
 800acc0:	46bd      	mov	sp, r7
 800acc2:	bd80      	pop	{r7, pc}
 800acc4:	ffceff88 	.word	0xffceff88
 800acc8:	00100040 	.word	0x00100040
 800accc:	00100030 	.word	0x00100030
 800acd0:	00100020 	.word	0x00100020

0800acd4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800acd4:	b480      	push	{r7}
 800acd6:	b083      	sub	sp, #12
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800acdc:	bf00      	nop
 800acde:	370c      	adds	r7, #12
 800ace0:	46bd      	mov	sp, r7
 800ace2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace6:	4770      	bx	lr

0800ace8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ace8:	b480      	push	{r7}
 800acea:	b083      	sub	sp, #12
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800acf0:	bf00      	nop
 800acf2:	370c      	adds	r7, #12
 800acf4:	46bd      	mov	sp, r7
 800acf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfa:	4770      	bx	lr

0800acfc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800acfc:	b480      	push	{r7}
 800acfe:	b083      	sub	sp, #12
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ad04:	bf00      	nop
 800ad06:	370c      	adds	r7, #12
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0e:	4770      	bx	lr

0800ad10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ad10:	b480      	push	{r7}
 800ad12:	b083      	sub	sp, #12
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ad18:	bf00      	nop
 800ad1a:	370c      	adds	r7, #12
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad22:	4770      	bx	lr

0800ad24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ad24:	b480      	push	{r7}
 800ad26:	b083      	sub	sp, #12
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ad2c:	bf00      	nop
 800ad2e:	370c      	adds	r7, #12
 800ad30:	46bd      	mov	sp, r7
 800ad32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad36:	4770      	bx	lr

0800ad38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ad38:	b480      	push	{r7}
 800ad3a:	b085      	sub	sp, #20
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
 800ad40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	4a40      	ldr	r2, [pc, #256]	; (800ae4c <TIM_Base_SetConfig+0x114>)
 800ad4c:	4293      	cmp	r3, r2
 800ad4e:	d013      	beq.n	800ad78 <TIM_Base_SetConfig+0x40>
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad56:	d00f      	beq.n	800ad78 <TIM_Base_SetConfig+0x40>
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	4a3d      	ldr	r2, [pc, #244]	; (800ae50 <TIM_Base_SetConfig+0x118>)
 800ad5c:	4293      	cmp	r3, r2
 800ad5e:	d00b      	beq.n	800ad78 <TIM_Base_SetConfig+0x40>
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	4a3c      	ldr	r2, [pc, #240]	; (800ae54 <TIM_Base_SetConfig+0x11c>)
 800ad64:	4293      	cmp	r3, r2
 800ad66:	d007      	beq.n	800ad78 <TIM_Base_SetConfig+0x40>
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	4a3b      	ldr	r2, [pc, #236]	; (800ae58 <TIM_Base_SetConfig+0x120>)
 800ad6c:	4293      	cmp	r3, r2
 800ad6e:	d003      	beq.n	800ad78 <TIM_Base_SetConfig+0x40>
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	4a3a      	ldr	r2, [pc, #232]	; (800ae5c <TIM_Base_SetConfig+0x124>)
 800ad74:	4293      	cmp	r3, r2
 800ad76:	d108      	bne.n	800ad8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ad80:	683b      	ldr	r3, [r7, #0]
 800ad82:	685b      	ldr	r3, [r3, #4]
 800ad84:	68fa      	ldr	r2, [r7, #12]
 800ad86:	4313      	orrs	r3, r2
 800ad88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	4a2f      	ldr	r2, [pc, #188]	; (800ae4c <TIM_Base_SetConfig+0x114>)
 800ad8e:	4293      	cmp	r3, r2
 800ad90:	d01f      	beq.n	800add2 <TIM_Base_SetConfig+0x9a>
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad98:	d01b      	beq.n	800add2 <TIM_Base_SetConfig+0x9a>
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	4a2c      	ldr	r2, [pc, #176]	; (800ae50 <TIM_Base_SetConfig+0x118>)
 800ad9e:	4293      	cmp	r3, r2
 800ada0:	d017      	beq.n	800add2 <TIM_Base_SetConfig+0x9a>
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	4a2b      	ldr	r2, [pc, #172]	; (800ae54 <TIM_Base_SetConfig+0x11c>)
 800ada6:	4293      	cmp	r3, r2
 800ada8:	d013      	beq.n	800add2 <TIM_Base_SetConfig+0x9a>
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	4a2a      	ldr	r2, [pc, #168]	; (800ae58 <TIM_Base_SetConfig+0x120>)
 800adae:	4293      	cmp	r3, r2
 800adb0:	d00f      	beq.n	800add2 <TIM_Base_SetConfig+0x9a>
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	4a29      	ldr	r2, [pc, #164]	; (800ae5c <TIM_Base_SetConfig+0x124>)
 800adb6:	4293      	cmp	r3, r2
 800adb8:	d00b      	beq.n	800add2 <TIM_Base_SetConfig+0x9a>
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	4a28      	ldr	r2, [pc, #160]	; (800ae60 <TIM_Base_SetConfig+0x128>)
 800adbe:	4293      	cmp	r3, r2
 800adc0:	d007      	beq.n	800add2 <TIM_Base_SetConfig+0x9a>
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	4a27      	ldr	r2, [pc, #156]	; (800ae64 <TIM_Base_SetConfig+0x12c>)
 800adc6:	4293      	cmp	r3, r2
 800adc8:	d003      	beq.n	800add2 <TIM_Base_SetConfig+0x9a>
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	4a26      	ldr	r2, [pc, #152]	; (800ae68 <TIM_Base_SetConfig+0x130>)
 800adce:	4293      	cmp	r3, r2
 800add0:	d108      	bne.n	800ade4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800add8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	68db      	ldr	r3, [r3, #12]
 800adde:	68fa      	ldr	r2, [r7, #12]
 800ade0:	4313      	orrs	r3, r2
 800ade2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	695b      	ldr	r3, [r3, #20]
 800adee:	4313      	orrs	r3, r2
 800adf0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	68fa      	ldr	r2, [r7, #12]
 800adf6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	689a      	ldr	r2, [r3, #8]
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	681a      	ldr	r2, [r3, #0]
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	4a10      	ldr	r2, [pc, #64]	; (800ae4c <TIM_Base_SetConfig+0x114>)
 800ae0c:	4293      	cmp	r3, r2
 800ae0e:	d00f      	beq.n	800ae30 <TIM_Base_SetConfig+0xf8>
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	4a12      	ldr	r2, [pc, #72]	; (800ae5c <TIM_Base_SetConfig+0x124>)
 800ae14:	4293      	cmp	r3, r2
 800ae16:	d00b      	beq.n	800ae30 <TIM_Base_SetConfig+0xf8>
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	4a11      	ldr	r2, [pc, #68]	; (800ae60 <TIM_Base_SetConfig+0x128>)
 800ae1c:	4293      	cmp	r3, r2
 800ae1e:	d007      	beq.n	800ae30 <TIM_Base_SetConfig+0xf8>
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	4a10      	ldr	r2, [pc, #64]	; (800ae64 <TIM_Base_SetConfig+0x12c>)
 800ae24:	4293      	cmp	r3, r2
 800ae26:	d003      	beq.n	800ae30 <TIM_Base_SetConfig+0xf8>
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	4a0f      	ldr	r2, [pc, #60]	; (800ae68 <TIM_Base_SetConfig+0x130>)
 800ae2c:	4293      	cmp	r3, r2
 800ae2e:	d103      	bne.n	800ae38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	691a      	ldr	r2, [r3, #16]
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2201      	movs	r2, #1
 800ae3c:	615a      	str	r2, [r3, #20]
}
 800ae3e:	bf00      	nop
 800ae40:	3714      	adds	r7, #20
 800ae42:	46bd      	mov	sp, r7
 800ae44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae48:	4770      	bx	lr
 800ae4a:	bf00      	nop
 800ae4c:	40010000 	.word	0x40010000
 800ae50:	40000400 	.word	0x40000400
 800ae54:	40000800 	.word	0x40000800
 800ae58:	40000c00 	.word	0x40000c00
 800ae5c:	40010400 	.word	0x40010400
 800ae60:	40014000 	.word	0x40014000
 800ae64:	40014400 	.word	0x40014400
 800ae68:	40014800 	.word	0x40014800

0800ae6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	b087      	sub	sp, #28
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
 800ae74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	6a1b      	ldr	r3, [r3, #32]
 800ae7a:	f023 0201 	bic.w	r2, r3, #1
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	6a1b      	ldr	r3, [r3, #32]
 800ae86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	685b      	ldr	r3, [r3, #4]
 800ae8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	699b      	ldr	r3, [r3, #24]
 800ae92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ae94:	68fa      	ldr	r2, [r7, #12]
 800ae96:	4b37      	ldr	r3, [pc, #220]	; (800af74 <TIM_OC1_SetConfig+0x108>)
 800ae98:	4013      	ands	r3, r2
 800ae9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	f023 0303 	bic.w	r3, r3, #3
 800aea2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	68fa      	ldr	r2, [r7, #12]
 800aeaa:	4313      	orrs	r3, r2
 800aeac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800aeae:	697b      	ldr	r3, [r7, #20]
 800aeb0:	f023 0302 	bic.w	r3, r3, #2
 800aeb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	689b      	ldr	r3, [r3, #8]
 800aeba:	697a      	ldr	r2, [r7, #20]
 800aebc:	4313      	orrs	r3, r2
 800aebe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	4a2d      	ldr	r2, [pc, #180]	; (800af78 <TIM_OC1_SetConfig+0x10c>)
 800aec4:	4293      	cmp	r3, r2
 800aec6:	d00f      	beq.n	800aee8 <TIM_OC1_SetConfig+0x7c>
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	4a2c      	ldr	r2, [pc, #176]	; (800af7c <TIM_OC1_SetConfig+0x110>)
 800aecc:	4293      	cmp	r3, r2
 800aece:	d00b      	beq.n	800aee8 <TIM_OC1_SetConfig+0x7c>
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	4a2b      	ldr	r2, [pc, #172]	; (800af80 <TIM_OC1_SetConfig+0x114>)
 800aed4:	4293      	cmp	r3, r2
 800aed6:	d007      	beq.n	800aee8 <TIM_OC1_SetConfig+0x7c>
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	4a2a      	ldr	r2, [pc, #168]	; (800af84 <TIM_OC1_SetConfig+0x118>)
 800aedc:	4293      	cmp	r3, r2
 800aede:	d003      	beq.n	800aee8 <TIM_OC1_SetConfig+0x7c>
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	4a29      	ldr	r2, [pc, #164]	; (800af88 <TIM_OC1_SetConfig+0x11c>)
 800aee4:	4293      	cmp	r3, r2
 800aee6:	d10c      	bne.n	800af02 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800aee8:	697b      	ldr	r3, [r7, #20]
 800aeea:	f023 0308 	bic.w	r3, r3, #8
 800aeee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	68db      	ldr	r3, [r3, #12]
 800aef4:	697a      	ldr	r2, [r7, #20]
 800aef6:	4313      	orrs	r3, r2
 800aef8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800aefa:	697b      	ldr	r3, [r7, #20]
 800aefc:	f023 0304 	bic.w	r3, r3, #4
 800af00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	4a1c      	ldr	r2, [pc, #112]	; (800af78 <TIM_OC1_SetConfig+0x10c>)
 800af06:	4293      	cmp	r3, r2
 800af08:	d00f      	beq.n	800af2a <TIM_OC1_SetConfig+0xbe>
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	4a1b      	ldr	r2, [pc, #108]	; (800af7c <TIM_OC1_SetConfig+0x110>)
 800af0e:	4293      	cmp	r3, r2
 800af10:	d00b      	beq.n	800af2a <TIM_OC1_SetConfig+0xbe>
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	4a1a      	ldr	r2, [pc, #104]	; (800af80 <TIM_OC1_SetConfig+0x114>)
 800af16:	4293      	cmp	r3, r2
 800af18:	d007      	beq.n	800af2a <TIM_OC1_SetConfig+0xbe>
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	4a19      	ldr	r2, [pc, #100]	; (800af84 <TIM_OC1_SetConfig+0x118>)
 800af1e:	4293      	cmp	r3, r2
 800af20:	d003      	beq.n	800af2a <TIM_OC1_SetConfig+0xbe>
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	4a18      	ldr	r2, [pc, #96]	; (800af88 <TIM_OC1_SetConfig+0x11c>)
 800af26:	4293      	cmp	r3, r2
 800af28:	d111      	bne.n	800af4e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800af2a:	693b      	ldr	r3, [r7, #16]
 800af2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800af30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800af32:	693b      	ldr	r3, [r7, #16]
 800af34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800af38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	695b      	ldr	r3, [r3, #20]
 800af3e:	693a      	ldr	r2, [r7, #16]
 800af40:	4313      	orrs	r3, r2
 800af42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	699b      	ldr	r3, [r3, #24]
 800af48:	693a      	ldr	r2, [r7, #16]
 800af4a:	4313      	orrs	r3, r2
 800af4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	693a      	ldr	r2, [r7, #16]
 800af52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	68fa      	ldr	r2, [r7, #12]
 800af58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800af5a:	683b      	ldr	r3, [r7, #0]
 800af5c:	685a      	ldr	r2, [r3, #4]
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	697a      	ldr	r2, [r7, #20]
 800af66:	621a      	str	r2, [r3, #32]
}
 800af68:	bf00      	nop
 800af6a:	371c      	adds	r7, #28
 800af6c:	46bd      	mov	sp, r7
 800af6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af72:	4770      	bx	lr
 800af74:	fffeff8f 	.word	0xfffeff8f
 800af78:	40010000 	.word	0x40010000
 800af7c:	40010400 	.word	0x40010400
 800af80:	40014000 	.word	0x40014000
 800af84:	40014400 	.word	0x40014400
 800af88:	40014800 	.word	0x40014800

0800af8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800af8c:	b480      	push	{r7}
 800af8e:	b087      	sub	sp, #28
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
 800af94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	6a1b      	ldr	r3, [r3, #32]
 800af9a:	f023 0210 	bic.w	r2, r3, #16
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	6a1b      	ldr	r3, [r3, #32]
 800afa6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	685b      	ldr	r3, [r3, #4]
 800afac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	699b      	ldr	r3, [r3, #24]
 800afb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800afb4:	68fa      	ldr	r2, [r7, #12]
 800afb6:	4b34      	ldr	r3, [pc, #208]	; (800b088 <TIM_OC2_SetConfig+0xfc>)
 800afb8:	4013      	ands	r3, r2
 800afba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800afc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	021b      	lsls	r3, r3, #8
 800afca:	68fa      	ldr	r2, [r7, #12]
 800afcc:	4313      	orrs	r3, r2
 800afce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800afd0:	697b      	ldr	r3, [r7, #20]
 800afd2:	f023 0320 	bic.w	r3, r3, #32
 800afd6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	689b      	ldr	r3, [r3, #8]
 800afdc:	011b      	lsls	r3, r3, #4
 800afde:	697a      	ldr	r2, [r7, #20]
 800afe0:	4313      	orrs	r3, r2
 800afe2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	4a29      	ldr	r2, [pc, #164]	; (800b08c <TIM_OC2_SetConfig+0x100>)
 800afe8:	4293      	cmp	r3, r2
 800afea:	d003      	beq.n	800aff4 <TIM_OC2_SetConfig+0x68>
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	4a28      	ldr	r2, [pc, #160]	; (800b090 <TIM_OC2_SetConfig+0x104>)
 800aff0:	4293      	cmp	r3, r2
 800aff2:	d10d      	bne.n	800b010 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800aff4:	697b      	ldr	r3, [r7, #20]
 800aff6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800affa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	68db      	ldr	r3, [r3, #12]
 800b000:	011b      	lsls	r3, r3, #4
 800b002:	697a      	ldr	r2, [r7, #20]
 800b004:	4313      	orrs	r3, r2
 800b006:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b008:	697b      	ldr	r3, [r7, #20]
 800b00a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b00e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	4a1e      	ldr	r2, [pc, #120]	; (800b08c <TIM_OC2_SetConfig+0x100>)
 800b014:	4293      	cmp	r3, r2
 800b016:	d00f      	beq.n	800b038 <TIM_OC2_SetConfig+0xac>
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	4a1d      	ldr	r2, [pc, #116]	; (800b090 <TIM_OC2_SetConfig+0x104>)
 800b01c:	4293      	cmp	r3, r2
 800b01e:	d00b      	beq.n	800b038 <TIM_OC2_SetConfig+0xac>
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	4a1c      	ldr	r2, [pc, #112]	; (800b094 <TIM_OC2_SetConfig+0x108>)
 800b024:	4293      	cmp	r3, r2
 800b026:	d007      	beq.n	800b038 <TIM_OC2_SetConfig+0xac>
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	4a1b      	ldr	r2, [pc, #108]	; (800b098 <TIM_OC2_SetConfig+0x10c>)
 800b02c:	4293      	cmp	r3, r2
 800b02e:	d003      	beq.n	800b038 <TIM_OC2_SetConfig+0xac>
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	4a1a      	ldr	r2, [pc, #104]	; (800b09c <TIM_OC2_SetConfig+0x110>)
 800b034:	4293      	cmp	r3, r2
 800b036:	d113      	bne.n	800b060 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b038:	693b      	ldr	r3, [r7, #16]
 800b03a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b03e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b040:	693b      	ldr	r3, [r7, #16]
 800b042:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b046:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	695b      	ldr	r3, [r3, #20]
 800b04c:	009b      	lsls	r3, r3, #2
 800b04e:	693a      	ldr	r2, [r7, #16]
 800b050:	4313      	orrs	r3, r2
 800b052:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	699b      	ldr	r3, [r3, #24]
 800b058:	009b      	lsls	r3, r3, #2
 800b05a:	693a      	ldr	r2, [r7, #16]
 800b05c:	4313      	orrs	r3, r2
 800b05e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	693a      	ldr	r2, [r7, #16]
 800b064:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	68fa      	ldr	r2, [r7, #12]
 800b06a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b06c:	683b      	ldr	r3, [r7, #0]
 800b06e:	685a      	ldr	r2, [r3, #4]
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	697a      	ldr	r2, [r7, #20]
 800b078:	621a      	str	r2, [r3, #32]
}
 800b07a:	bf00      	nop
 800b07c:	371c      	adds	r7, #28
 800b07e:	46bd      	mov	sp, r7
 800b080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b084:	4770      	bx	lr
 800b086:	bf00      	nop
 800b088:	feff8fff 	.word	0xfeff8fff
 800b08c:	40010000 	.word	0x40010000
 800b090:	40010400 	.word	0x40010400
 800b094:	40014000 	.word	0x40014000
 800b098:	40014400 	.word	0x40014400
 800b09c:	40014800 	.word	0x40014800

0800b0a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b0a0:	b480      	push	{r7}
 800b0a2:	b087      	sub	sp, #28
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
 800b0a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	6a1b      	ldr	r3, [r3, #32]
 800b0ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	6a1b      	ldr	r3, [r3, #32]
 800b0ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	685b      	ldr	r3, [r3, #4]
 800b0c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	69db      	ldr	r3, [r3, #28]
 800b0c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	f023 0303 	bic.w	r3, r3, #3
 800b0d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	68fa      	ldr	r2, [r7, #12]
 800b0de:	4313      	orrs	r3, r2
 800b0e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b0e2:	697b      	ldr	r3, [r7, #20]
 800b0e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b0e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	689b      	ldr	r3, [r3, #8]
 800b0ee:	021b      	lsls	r3, r3, #8
 800b0f0:	697a      	ldr	r2, [r7, #20]
 800b0f2:	4313      	orrs	r3, r2
 800b0f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	4a27      	ldr	r2, [pc, #156]	; (800b198 <TIM_OC3_SetConfig+0xf8>)
 800b0fa:	4293      	cmp	r3, r2
 800b0fc:	d003      	beq.n	800b106 <TIM_OC3_SetConfig+0x66>
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	4a26      	ldr	r2, [pc, #152]	; (800b19c <TIM_OC3_SetConfig+0xfc>)
 800b102:	4293      	cmp	r3, r2
 800b104:	d10d      	bne.n	800b122 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b106:	697b      	ldr	r3, [r7, #20]
 800b108:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b10c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	68db      	ldr	r3, [r3, #12]
 800b112:	021b      	lsls	r3, r3, #8
 800b114:	697a      	ldr	r2, [r7, #20]
 800b116:	4313      	orrs	r3, r2
 800b118:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b11a:	697b      	ldr	r3, [r7, #20]
 800b11c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b120:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	4a1c      	ldr	r2, [pc, #112]	; (800b198 <TIM_OC3_SetConfig+0xf8>)
 800b126:	4293      	cmp	r3, r2
 800b128:	d00f      	beq.n	800b14a <TIM_OC3_SetConfig+0xaa>
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	4a1b      	ldr	r2, [pc, #108]	; (800b19c <TIM_OC3_SetConfig+0xfc>)
 800b12e:	4293      	cmp	r3, r2
 800b130:	d00b      	beq.n	800b14a <TIM_OC3_SetConfig+0xaa>
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	4a1a      	ldr	r2, [pc, #104]	; (800b1a0 <TIM_OC3_SetConfig+0x100>)
 800b136:	4293      	cmp	r3, r2
 800b138:	d007      	beq.n	800b14a <TIM_OC3_SetConfig+0xaa>
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	4a19      	ldr	r2, [pc, #100]	; (800b1a4 <TIM_OC3_SetConfig+0x104>)
 800b13e:	4293      	cmp	r3, r2
 800b140:	d003      	beq.n	800b14a <TIM_OC3_SetConfig+0xaa>
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	4a18      	ldr	r2, [pc, #96]	; (800b1a8 <TIM_OC3_SetConfig+0x108>)
 800b146:	4293      	cmp	r3, r2
 800b148:	d113      	bne.n	800b172 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b14a:	693b      	ldr	r3, [r7, #16]
 800b14c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b150:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b152:	693b      	ldr	r3, [r7, #16]
 800b154:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b158:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	695b      	ldr	r3, [r3, #20]
 800b15e:	011b      	lsls	r3, r3, #4
 800b160:	693a      	ldr	r2, [r7, #16]
 800b162:	4313      	orrs	r3, r2
 800b164:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	699b      	ldr	r3, [r3, #24]
 800b16a:	011b      	lsls	r3, r3, #4
 800b16c:	693a      	ldr	r2, [r7, #16]
 800b16e:	4313      	orrs	r3, r2
 800b170:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	693a      	ldr	r2, [r7, #16]
 800b176:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	68fa      	ldr	r2, [r7, #12]
 800b17c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	685a      	ldr	r2, [r3, #4]
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	697a      	ldr	r2, [r7, #20]
 800b18a:	621a      	str	r2, [r3, #32]
}
 800b18c:	bf00      	nop
 800b18e:	371c      	adds	r7, #28
 800b190:	46bd      	mov	sp, r7
 800b192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b196:	4770      	bx	lr
 800b198:	40010000 	.word	0x40010000
 800b19c:	40010400 	.word	0x40010400
 800b1a0:	40014000 	.word	0x40014000
 800b1a4:	40014400 	.word	0x40014400
 800b1a8:	40014800 	.word	0x40014800

0800b1ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b1ac:	b480      	push	{r7}
 800b1ae:	b087      	sub	sp, #28
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
 800b1b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	6a1b      	ldr	r3, [r3, #32]
 800b1ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6a1b      	ldr	r3, [r3, #32]
 800b1c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	685b      	ldr	r3, [r3, #4]
 800b1cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	69db      	ldr	r3, [r3, #28]
 800b1d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b1da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b1e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b1e4:	683b      	ldr	r3, [r7, #0]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	021b      	lsls	r3, r3, #8
 800b1ea:	68fa      	ldr	r2, [r7, #12]
 800b1ec:	4313      	orrs	r3, r2
 800b1ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b1f0:	693b      	ldr	r3, [r7, #16]
 800b1f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b1f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	689b      	ldr	r3, [r3, #8]
 800b1fc:	031b      	lsls	r3, r3, #12
 800b1fe:	693a      	ldr	r2, [r7, #16]
 800b200:	4313      	orrs	r3, r2
 800b202:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	4a18      	ldr	r2, [pc, #96]	; (800b268 <TIM_OC4_SetConfig+0xbc>)
 800b208:	4293      	cmp	r3, r2
 800b20a:	d00f      	beq.n	800b22c <TIM_OC4_SetConfig+0x80>
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	4a17      	ldr	r2, [pc, #92]	; (800b26c <TIM_OC4_SetConfig+0xc0>)
 800b210:	4293      	cmp	r3, r2
 800b212:	d00b      	beq.n	800b22c <TIM_OC4_SetConfig+0x80>
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	4a16      	ldr	r2, [pc, #88]	; (800b270 <TIM_OC4_SetConfig+0xc4>)
 800b218:	4293      	cmp	r3, r2
 800b21a:	d007      	beq.n	800b22c <TIM_OC4_SetConfig+0x80>
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	4a15      	ldr	r2, [pc, #84]	; (800b274 <TIM_OC4_SetConfig+0xc8>)
 800b220:	4293      	cmp	r3, r2
 800b222:	d003      	beq.n	800b22c <TIM_OC4_SetConfig+0x80>
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	4a14      	ldr	r2, [pc, #80]	; (800b278 <TIM_OC4_SetConfig+0xcc>)
 800b228:	4293      	cmp	r3, r2
 800b22a:	d109      	bne.n	800b240 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b22c:	697b      	ldr	r3, [r7, #20]
 800b22e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b232:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	695b      	ldr	r3, [r3, #20]
 800b238:	019b      	lsls	r3, r3, #6
 800b23a:	697a      	ldr	r2, [r7, #20]
 800b23c:	4313      	orrs	r3, r2
 800b23e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	697a      	ldr	r2, [r7, #20]
 800b244:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	68fa      	ldr	r2, [r7, #12]
 800b24a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	685a      	ldr	r2, [r3, #4]
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	693a      	ldr	r2, [r7, #16]
 800b258:	621a      	str	r2, [r3, #32]
}
 800b25a:	bf00      	nop
 800b25c:	371c      	adds	r7, #28
 800b25e:	46bd      	mov	sp, r7
 800b260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b264:	4770      	bx	lr
 800b266:	bf00      	nop
 800b268:	40010000 	.word	0x40010000
 800b26c:	40010400 	.word	0x40010400
 800b270:	40014000 	.word	0x40014000
 800b274:	40014400 	.word	0x40014400
 800b278:	40014800 	.word	0x40014800

0800b27c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b27c:	b480      	push	{r7}
 800b27e:	b087      	sub	sp, #28
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
 800b284:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	6a1b      	ldr	r3, [r3, #32]
 800b28a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	6a1b      	ldr	r3, [r3, #32]
 800b296:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	685b      	ldr	r3, [r3, #4]
 800b29c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b2aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b2ac:	683b      	ldr	r3, [r7, #0]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	68fa      	ldr	r2, [r7, #12]
 800b2b2:	4313      	orrs	r3, r2
 800b2b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b2b6:	693b      	ldr	r3, [r7, #16]
 800b2b8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b2bc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	689b      	ldr	r3, [r3, #8]
 800b2c2:	041b      	lsls	r3, r3, #16
 800b2c4:	693a      	ldr	r2, [r7, #16]
 800b2c6:	4313      	orrs	r3, r2
 800b2c8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	4a17      	ldr	r2, [pc, #92]	; (800b32c <TIM_OC5_SetConfig+0xb0>)
 800b2ce:	4293      	cmp	r3, r2
 800b2d0:	d00f      	beq.n	800b2f2 <TIM_OC5_SetConfig+0x76>
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	4a16      	ldr	r2, [pc, #88]	; (800b330 <TIM_OC5_SetConfig+0xb4>)
 800b2d6:	4293      	cmp	r3, r2
 800b2d8:	d00b      	beq.n	800b2f2 <TIM_OC5_SetConfig+0x76>
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	4a15      	ldr	r2, [pc, #84]	; (800b334 <TIM_OC5_SetConfig+0xb8>)
 800b2de:	4293      	cmp	r3, r2
 800b2e0:	d007      	beq.n	800b2f2 <TIM_OC5_SetConfig+0x76>
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	4a14      	ldr	r2, [pc, #80]	; (800b338 <TIM_OC5_SetConfig+0xbc>)
 800b2e6:	4293      	cmp	r3, r2
 800b2e8:	d003      	beq.n	800b2f2 <TIM_OC5_SetConfig+0x76>
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	4a13      	ldr	r2, [pc, #76]	; (800b33c <TIM_OC5_SetConfig+0xc0>)
 800b2ee:	4293      	cmp	r3, r2
 800b2f0:	d109      	bne.n	800b306 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b2f2:	697b      	ldr	r3, [r7, #20]
 800b2f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b2f8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	695b      	ldr	r3, [r3, #20]
 800b2fe:	021b      	lsls	r3, r3, #8
 800b300:	697a      	ldr	r2, [r7, #20]
 800b302:	4313      	orrs	r3, r2
 800b304:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	697a      	ldr	r2, [r7, #20]
 800b30a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	68fa      	ldr	r2, [r7, #12]
 800b310:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	685a      	ldr	r2, [r3, #4]
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	693a      	ldr	r2, [r7, #16]
 800b31e:	621a      	str	r2, [r3, #32]
}
 800b320:	bf00      	nop
 800b322:	371c      	adds	r7, #28
 800b324:	46bd      	mov	sp, r7
 800b326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32a:	4770      	bx	lr
 800b32c:	40010000 	.word	0x40010000
 800b330:	40010400 	.word	0x40010400
 800b334:	40014000 	.word	0x40014000
 800b338:	40014400 	.word	0x40014400
 800b33c:	40014800 	.word	0x40014800

0800b340 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b340:	b480      	push	{r7}
 800b342:	b087      	sub	sp, #28
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
 800b348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	6a1b      	ldr	r3, [r3, #32]
 800b34e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	6a1b      	ldr	r3, [r3, #32]
 800b35a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	685b      	ldr	r3, [r3, #4]
 800b360:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b36e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	021b      	lsls	r3, r3, #8
 800b376:	68fa      	ldr	r2, [r7, #12]
 800b378:	4313      	orrs	r3, r2
 800b37a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b37c:	693b      	ldr	r3, [r7, #16]
 800b37e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b382:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	689b      	ldr	r3, [r3, #8]
 800b388:	051b      	lsls	r3, r3, #20
 800b38a:	693a      	ldr	r2, [r7, #16]
 800b38c:	4313      	orrs	r3, r2
 800b38e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	4a18      	ldr	r2, [pc, #96]	; (800b3f4 <TIM_OC6_SetConfig+0xb4>)
 800b394:	4293      	cmp	r3, r2
 800b396:	d00f      	beq.n	800b3b8 <TIM_OC6_SetConfig+0x78>
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	4a17      	ldr	r2, [pc, #92]	; (800b3f8 <TIM_OC6_SetConfig+0xb8>)
 800b39c:	4293      	cmp	r3, r2
 800b39e:	d00b      	beq.n	800b3b8 <TIM_OC6_SetConfig+0x78>
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	4a16      	ldr	r2, [pc, #88]	; (800b3fc <TIM_OC6_SetConfig+0xbc>)
 800b3a4:	4293      	cmp	r3, r2
 800b3a6:	d007      	beq.n	800b3b8 <TIM_OC6_SetConfig+0x78>
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	4a15      	ldr	r2, [pc, #84]	; (800b400 <TIM_OC6_SetConfig+0xc0>)
 800b3ac:	4293      	cmp	r3, r2
 800b3ae:	d003      	beq.n	800b3b8 <TIM_OC6_SetConfig+0x78>
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	4a14      	ldr	r2, [pc, #80]	; (800b404 <TIM_OC6_SetConfig+0xc4>)
 800b3b4:	4293      	cmp	r3, r2
 800b3b6:	d109      	bne.n	800b3cc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b3b8:	697b      	ldr	r3, [r7, #20]
 800b3ba:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b3be:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	695b      	ldr	r3, [r3, #20]
 800b3c4:	029b      	lsls	r3, r3, #10
 800b3c6:	697a      	ldr	r2, [r7, #20]
 800b3c8:	4313      	orrs	r3, r2
 800b3ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	697a      	ldr	r2, [r7, #20]
 800b3d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	68fa      	ldr	r2, [r7, #12]
 800b3d6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b3d8:	683b      	ldr	r3, [r7, #0]
 800b3da:	685a      	ldr	r2, [r3, #4]
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	693a      	ldr	r2, [r7, #16]
 800b3e4:	621a      	str	r2, [r3, #32]
}
 800b3e6:	bf00      	nop
 800b3e8:	371c      	adds	r7, #28
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f0:	4770      	bx	lr
 800b3f2:	bf00      	nop
 800b3f4:	40010000 	.word	0x40010000
 800b3f8:	40010400 	.word	0x40010400
 800b3fc:	40014000 	.word	0x40014000
 800b400:	40014400 	.word	0x40014400
 800b404:	40014800 	.word	0x40014800

0800b408 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b408:	b480      	push	{r7}
 800b40a:	b087      	sub	sp, #28
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	60f8      	str	r0, [r7, #12]
 800b410:	60b9      	str	r1, [r7, #8]
 800b412:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	6a1b      	ldr	r3, [r3, #32]
 800b418:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	6a1b      	ldr	r3, [r3, #32]
 800b41e:	f023 0201 	bic.w	r2, r3, #1
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	699b      	ldr	r3, [r3, #24]
 800b42a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b42c:	693b      	ldr	r3, [r7, #16]
 800b42e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b432:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	011b      	lsls	r3, r3, #4
 800b438:	693a      	ldr	r2, [r7, #16]
 800b43a:	4313      	orrs	r3, r2
 800b43c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b43e:	697b      	ldr	r3, [r7, #20]
 800b440:	f023 030a 	bic.w	r3, r3, #10
 800b444:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b446:	697a      	ldr	r2, [r7, #20]
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	4313      	orrs	r3, r2
 800b44c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	693a      	ldr	r2, [r7, #16]
 800b452:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	697a      	ldr	r2, [r7, #20]
 800b458:	621a      	str	r2, [r3, #32]
}
 800b45a:	bf00      	nop
 800b45c:	371c      	adds	r7, #28
 800b45e:	46bd      	mov	sp, r7
 800b460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b464:	4770      	bx	lr

0800b466 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b466:	b480      	push	{r7}
 800b468:	b087      	sub	sp, #28
 800b46a:	af00      	add	r7, sp, #0
 800b46c:	60f8      	str	r0, [r7, #12]
 800b46e:	60b9      	str	r1, [r7, #8]
 800b470:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	6a1b      	ldr	r3, [r3, #32]
 800b476:	f023 0210 	bic.w	r2, r3, #16
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	699b      	ldr	r3, [r3, #24]
 800b482:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	6a1b      	ldr	r3, [r3, #32]
 800b488:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b48a:	697b      	ldr	r3, [r7, #20]
 800b48c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b490:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	031b      	lsls	r3, r3, #12
 800b496:	697a      	ldr	r2, [r7, #20]
 800b498:	4313      	orrs	r3, r2
 800b49a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b49c:	693b      	ldr	r3, [r7, #16]
 800b49e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b4a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b4a4:	68bb      	ldr	r3, [r7, #8]
 800b4a6:	011b      	lsls	r3, r3, #4
 800b4a8:	693a      	ldr	r2, [r7, #16]
 800b4aa:	4313      	orrs	r3, r2
 800b4ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	697a      	ldr	r2, [r7, #20]
 800b4b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	693a      	ldr	r2, [r7, #16]
 800b4b8:	621a      	str	r2, [r3, #32]
}
 800b4ba:	bf00      	nop
 800b4bc:	371c      	adds	r7, #28
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c4:	4770      	bx	lr
	...

0800b4c8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b4c8:	b480      	push	{r7}
 800b4ca:	b085      	sub	sp, #20
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
 800b4d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	689b      	ldr	r3, [r3, #8]
 800b4d6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b4d8:	68fa      	ldr	r2, [r7, #12]
 800b4da:	4b09      	ldr	r3, [pc, #36]	; (800b500 <TIM_ITRx_SetConfig+0x38>)
 800b4dc:	4013      	ands	r3, r2
 800b4de:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b4e0:	683a      	ldr	r2, [r7, #0]
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	4313      	orrs	r3, r2
 800b4e6:	f043 0307 	orr.w	r3, r3, #7
 800b4ea:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	68fa      	ldr	r2, [r7, #12]
 800b4f0:	609a      	str	r2, [r3, #8]
}
 800b4f2:	bf00      	nop
 800b4f4:	3714      	adds	r7, #20
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fc:	4770      	bx	lr
 800b4fe:	bf00      	nop
 800b500:	ffcfff8f 	.word	0xffcfff8f

0800b504 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b504:	b480      	push	{r7}
 800b506:	b087      	sub	sp, #28
 800b508:	af00      	add	r7, sp, #0
 800b50a:	60f8      	str	r0, [r7, #12]
 800b50c:	60b9      	str	r1, [r7, #8]
 800b50e:	607a      	str	r2, [r7, #4]
 800b510:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	689b      	ldr	r3, [r3, #8]
 800b516:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b518:	697b      	ldr	r3, [r7, #20]
 800b51a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b51e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b520:	683b      	ldr	r3, [r7, #0]
 800b522:	021a      	lsls	r2, r3, #8
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	431a      	orrs	r2, r3
 800b528:	68bb      	ldr	r3, [r7, #8]
 800b52a:	4313      	orrs	r3, r2
 800b52c:	697a      	ldr	r2, [r7, #20]
 800b52e:	4313      	orrs	r3, r2
 800b530:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	697a      	ldr	r2, [r7, #20]
 800b536:	609a      	str	r2, [r3, #8]
}
 800b538:	bf00      	nop
 800b53a:	371c      	adds	r7, #28
 800b53c:	46bd      	mov	sp, r7
 800b53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b542:	4770      	bx	lr

0800b544 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b544:	b480      	push	{r7}
 800b546:	b085      	sub	sp, #20
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
 800b54c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b554:	2b01      	cmp	r3, #1
 800b556:	d101      	bne.n	800b55c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b558:	2302      	movs	r3, #2
 800b55a:	e068      	b.n	800b62e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	2201      	movs	r2, #1
 800b560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	2202      	movs	r2, #2
 800b568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	685b      	ldr	r3, [r3, #4]
 800b572:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	689b      	ldr	r3, [r3, #8]
 800b57a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	4a2e      	ldr	r2, [pc, #184]	; (800b63c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b582:	4293      	cmp	r3, r2
 800b584:	d004      	beq.n	800b590 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	4a2d      	ldr	r2, [pc, #180]	; (800b640 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b58c:	4293      	cmp	r3, r2
 800b58e:	d108      	bne.n	800b5a2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b596:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	685b      	ldr	r3, [r3, #4]
 800b59c:	68fa      	ldr	r2, [r7, #12]
 800b59e:	4313      	orrs	r3, r2
 800b5a0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b5a8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b5aa:	683b      	ldr	r3, [r7, #0]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	68fa      	ldr	r2, [r7, #12]
 800b5b0:	4313      	orrs	r3, r2
 800b5b2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	68fa      	ldr	r2, [r7, #12]
 800b5ba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	4a1e      	ldr	r2, [pc, #120]	; (800b63c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b5c2:	4293      	cmp	r3, r2
 800b5c4:	d01d      	beq.n	800b602 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5ce:	d018      	beq.n	800b602 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	4a1b      	ldr	r2, [pc, #108]	; (800b644 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b5d6:	4293      	cmp	r3, r2
 800b5d8:	d013      	beq.n	800b602 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	4a1a      	ldr	r2, [pc, #104]	; (800b648 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b5e0:	4293      	cmp	r3, r2
 800b5e2:	d00e      	beq.n	800b602 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	4a18      	ldr	r2, [pc, #96]	; (800b64c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b5ea:	4293      	cmp	r3, r2
 800b5ec:	d009      	beq.n	800b602 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	4a13      	ldr	r2, [pc, #76]	; (800b640 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b5f4:	4293      	cmp	r3, r2
 800b5f6:	d004      	beq.n	800b602 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	4a14      	ldr	r2, [pc, #80]	; (800b650 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b5fe:	4293      	cmp	r3, r2
 800b600:	d10c      	bne.n	800b61c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b602:	68bb      	ldr	r3, [r7, #8]
 800b604:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b608:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	689b      	ldr	r3, [r3, #8]
 800b60e:	68ba      	ldr	r2, [r7, #8]
 800b610:	4313      	orrs	r3, r2
 800b612:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	68ba      	ldr	r2, [r7, #8]
 800b61a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2201      	movs	r2, #1
 800b620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	2200      	movs	r2, #0
 800b628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b62c:	2300      	movs	r3, #0
}
 800b62e:	4618      	mov	r0, r3
 800b630:	3714      	adds	r7, #20
 800b632:	46bd      	mov	sp, r7
 800b634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b638:	4770      	bx	lr
 800b63a:	bf00      	nop
 800b63c:	40010000 	.word	0x40010000
 800b640:	40010400 	.word	0x40010400
 800b644:	40000400 	.word	0x40000400
 800b648:	40000800 	.word	0x40000800
 800b64c:	40000c00 	.word	0x40000c00
 800b650:	40001800 	.word	0x40001800

0800b654 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b654:	b480      	push	{r7}
 800b656:	b085      	sub	sp, #20
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
 800b65c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b65e:	2300      	movs	r3, #0
 800b660:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b668:	2b01      	cmp	r3, #1
 800b66a:	d101      	bne.n	800b670 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b66c:	2302      	movs	r3, #2
 800b66e:	e065      	b.n	800b73c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2201      	movs	r2, #1
 800b674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	68db      	ldr	r3, [r3, #12]
 800b682:	4313      	orrs	r3, r2
 800b684:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	689b      	ldr	r3, [r3, #8]
 800b690:	4313      	orrs	r3, r2
 800b692:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b69a:	683b      	ldr	r3, [r7, #0]
 800b69c:	685b      	ldr	r3, [r3, #4]
 800b69e:	4313      	orrs	r3, r2
 800b6a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b6a8:	683b      	ldr	r3, [r7, #0]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	4313      	orrs	r3, r2
 800b6ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b6b6:	683b      	ldr	r3, [r7, #0]
 800b6b8:	691b      	ldr	r3, [r3, #16]
 800b6ba:	4313      	orrs	r3, r2
 800b6bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b6c4:	683b      	ldr	r3, [r7, #0]
 800b6c6:	695b      	ldr	r3, [r3, #20]
 800b6c8:	4313      	orrs	r3, r2
 800b6ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b6d2:	683b      	ldr	r3, [r7, #0]
 800b6d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6d6:	4313      	orrs	r3, r2
 800b6d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	699b      	ldr	r3, [r3, #24]
 800b6e4:	041b      	lsls	r3, r3, #16
 800b6e6:	4313      	orrs	r3, r2
 800b6e8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	4a16      	ldr	r2, [pc, #88]	; (800b748 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b6f0:	4293      	cmp	r3, r2
 800b6f2:	d004      	beq.n	800b6fe <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	4a14      	ldr	r2, [pc, #80]	; (800b74c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b6fa:	4293      	cmp	r3, r2
 800b6fc:	d115      	bne.n	800b72a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b708:	051b      	lsls	r3, r3, #20
 800b70a:	4313      	orrs	r3, r2
 800b70c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b714:	683b      	ldr	r3, [r7, #0]
 800b716:	69db      	ldr	r3, [r3, #28]
 800b718:	4313      	orrs	r3, r2
 800b71a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	6a1b      	ldr	r3, [r3, #32]
 800b726:	4313      	orrs	r3, r2
 800b728:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	68fa      	ldr	r2, [r7, #12]
 800b730:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	2200      	movs	r2, #0
 800b736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b73a:	2300      	movs	r3, #0
}
 800b73c:	4618      	mov	r0, r3
 800b73e:	3714      	adds	r7, #20
 800b740:	46bd      	mov	sp, r7
 800b742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b746:	4770      	bx	lr
 800b748:	40010000 	.word	0x40010000
 800b74c:	40010400 	.word	0x40010400

0800b750 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b750:	b480      	push	{r7}
 800b752:	b083      	sub	sp, #12
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b758:	bf00      	nop
 800b75a:	370c      	adds	r7, #12
 800b75c:	46bd      	mov	sp, r7
 800b75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b762:	4770      	bx	lr

0800b764 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b764:	b480      	push	{r7}
 800b766:	b083      	sub	sp, #12
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b76c:	bf00      	nop
 800b76e:	370c      	adds	r7, #12
 800b770:	46bd      	mov	sp, r7
 800b772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b776:	4770      	bx	lr

0800b778 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b778:	b480      	push	{r7}
 800b77a:	b083      	sub	sp, #12
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b780:	bf00      	nop
 800b782:	370c      	adds	r7, #12
 800b784:	46bd      	mov	sp, r7
 800b786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78a:	4770      	bx	lr

0800b78c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b082      	sub	sp, #8
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d101      	bne.n	800b79e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b79a:	2301      	movs	r3, #1
 800b79c:	e042      	b.n	800b824 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d106      	bne.n	800b7b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b7b0:	6878      	ldr	r0, [r7, #4]
 800b7b2:	f7f6 fad9 	bl	8001d68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	2224      	movs	r2, #36	; 0x24
 800b7ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	681a      	ldr	r2, [r3, #0]
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	f022 0201 	bic.w	r2, r2, #1
 800b7cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b7ce:	6878      	ldr	r0, [r7, #4]
 800b7d0:	f000 fbc6 	bl	800bf60 <UART_SetConfig>
 800b7d4:	4603      	mov	r3, r0
 800b7d6:	2b01      	cmp	r3, #1
 800b7d8:	d101      	bne.n	800b7de <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b7da:	2301      	movs	r3, #1
 800b7dc:	e022      	b.n	800b824 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d002      	beq.n	800b7ec <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b7e6:	6878      	ldr	r0, [r7, #4]
 800b7e8:	f001 f924 	bl	800ca34 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	685a      	ldr	r2, [r3, #4]
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b7fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	689a      	ldr	r2, [r3, #8]
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b80a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	681a      	ldr	r2, [r3, #0]
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	f042 0201 	orr.w	r2, r2, #1
 800b81a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b81c:	6878      	ldr	r0, [r7, #4]
 800b81e:	f001 f9ab 	bl	800cb78 <UART_CheckIdleState>
 800b822:	4603      	mov	r3, r0
}
 800b824:	4618      	mov	r0, r3
 800b826:	3708      	adds	r7, #8
 800b828:	46bd      	mov	sp, r7
 800b82a:	bd80      	pop	{r7, pc}

0800b82c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b084      	sub	sp, #16
 800b830:	af00      	add	r7, sp, #0
 800b832:	60f8      	str	r0, [r7, #12]
 800b834:	60b9      	str	r1, [r7, #8]
 800b836:	4613      	mov	r3, r2
 800b838:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b840:	2b20      	cmp	r3, #32
 800b842:	d131      	bne.n	800b8a8 <HAL_UART_Receive_DMA+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800b844:	68bb      	ldr	r3, [r7, #8]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d002      	beq.n	800b850 <HAL_UART_Receive_DMA+0x24>
 800b84a:	88fb      	ldrh	r3, [r7, #6]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d101      	bne.n	800b854 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800b850:	2301      	movs	r3, #1
 800b852:	e02a      	b.n	800b8aa <HAL_UART_Receive_DMA+0x7e>
    }

    __HAL_LOCK(huart);
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b85a:	2b01      	cmp	r3, #1
 800b85c:	d101      	bne.n	800b862 <HAL_UART_Receive_DMA+0x36>
 800b85e:	2302      	movs	r3, #2
 800b860:	e023      	b.n	800b8aa <HAL_UART_Receive_DMA+0x7e>
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	2201      	movs	r2, #1
 800b866:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	2200      	movs	r2, #0
 800b86e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	4a0f      	ldr	r2, [pc, #60]	; (800b8b4 <HAL_UART_Receive_DMA+0x88>)
 800b876:	4293      	cmp	r3, r2
 800b878:	d00e      	beq.n	800b898 <HAL_UART_Receive_DMA+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	685b      	ldr	r3, [r3, #4]
 800b880:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b884:	2b00      	cmp	r3, #0
 800b886:	d007      	beq.n	800b898 <HAL_UART_Receive_DMA+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	681a      	ldr	r2, [r3, #0]
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800b896:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b898:	88fb      	ldrh	r3, [r7, #6]
 800b89a:	461a      	mov	r2, r3
 800b89c:	68b9      	ldr	r1, [r7, #8]
 800b89e:	68f8      	ldr	r0, [r7, #12]
 800b8a0:	f001 fa36 	bl	800cd10 <UART_Start_Receive_DMA>
 800b8a4:	4603      	mov	r3, r0
 800b8a6:	e000      	b.n	800b8aa <HAL_UART_Receive_DMA+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800b8a8:	2302      	movs	r3, #2
  }
}
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	3710      	adds	r7, #16
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	bd80      	pop	{r7, pc}
 800b8b2:	bf00      	nop
 800b8b4:	58000c00 	.word	0x58000c00

0800b8b8 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b084      	sub	sp, #16
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b8c6:	60fb      	str	r3, [r7, #12]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8ce:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	689b      	ldr	r3, [r3, #8]
 800b8d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b8da:	2b80      	cmp	r3, #128	; 0x80
 800b8dc:	d127      	bne.n	800b92e <HAL_UART_DMAStop+0x76>
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	2b21      	cmp	r3, #33	; 0x21
 800b8e2:	d124      	bne.n	800b92e <HAL_UART_DMAStop+0x76>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	689a      	ldr	r2, [r3, #8]
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b8f2:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d015      	beq.n	800b928 <HAL_UART_DMAStop+0x70>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b900:	4618      	mov	r0, r3
 800b902:	f7f7 fbd3 	bl	80030ac <HAL_DMA_Abort>
 800b906:	4603      	mov	r3, r0
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d00d      	beq.n	800b928 <HAL_UART_DMAStop+0x70>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b910:	4618      	mov	r0, r3
 800b912:	f7f9 f867 	bl	80049e4 <HAL_DMA_GetError>
 800b916:	4603      	mov	r3, r0
 800b918:	2b20      	cmp	r3, #32
 800b91a:	d105      	bne.n	800b928 <HAL_UART_DMAStop+0x70>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2210      	movs	r2, #16
 800b920:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 800b924:	2303      	movs	r3, #3
 800b926:	e032      	b.n	800b98e <HAL_UART_DMAStop+0xd6>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800b928:	6878      	ldr	r0, [r7, #4]
 800b92a:	f001 fa5f 	bl	800cdec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	689b      	ldr	r3, [r3, #8]
 800b934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b938:	2b40      	cmp	r3, #64	; 0x40
 800b93a:	d127      	bne.n	800b98c <HAL_UART_DMAStop+0xd4>
 800b93c:	68bb      	ldr	r3, [r7, #8]
 800b93e:	2b22      	cmp	r3, #34	; 0x22
 800b940:	d124      	bne.n	800b98c <HAL_UART_DMAStop+0xd4>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	689a      	ldr	r2, [r3, #8]
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b950:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b956:	2b00      	cmp	r3, #0
 800b958:	d015      	beq.n	800b986 <HAL_UART_DMAStop+0xce>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b95e:	4618      	mov	r0, r3
 800b960:	f7f7 fba4 	bl	80030ac <HAL_DMA_Abort>
 800b964:	4603      	mov	r3, r0
 800b966:	2b00      	cmp	r3, #0
 800b968:	d00d      	beq.n	800b986 <HAL_UART_DMAStop+0xce>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b96e:	4618      	mov	r0, r3
 800b970:	f7f9 f838 	bl	80049e4 <HAL_DMA_GetError>
 800b974:	4603      	mov	r3, r0
 800b976:	2b20      	cmp	r3, #32
 800b978:	d105      	bne.n	800b986 <HAL_UART_DMAStop+0xce>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	2210      	movs	r2, #16
 800b97e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 800b982:	2303      	movs	r3, #3
 800b984:	e003      	b.n	800b98e <HAL_UART_DMAStop+0xd6>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800b986:	6878      	ldr	r0, [r7, #4]
 800b988:	f001 fa4e 	bl	800ce28 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800b98c:	2300      	movs	r3, #0
}
 800b98e:	4618      	mov	r0, r3
 800b990:	3710      	adds	r7, #16
 800b992:	46bd      	mov	sp, r7
 800b994:	bd80      	pop	{r7, pc}
	...

0800b998 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b088      	sub	sp, #32
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	69db      	ldr	r3, [r3, #28]
 800b9a6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	689b      	ldr	r3, [r3, #8]
 800b9b6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b9b8:	69fa      	ldr	r2, [r7, #28]
 800b9ba:	f640 030f 	movw	r3, #2063	; 0x80f
 800b9be:	4013      	ands	r3, r2
 800b9c0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800b9c2:	693b      	ldr	r3, [r7, #16]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d118      	bne.n	800b9fa <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b9c8:	69fb      	ldr	r3, [r7, #28]
 800b9ca:	f003 0320 	and.w	r3, r3, #32
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d013      	beq.n	800b9fa <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b9d2:	69bb      	ldr	r3, [r7, #24]
 800b9d4:	f003 0320 	and.w	r3, r3, #32
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d104      	bne.n	800b9e6 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b9dc:	697b      	ldr	r3, [r7, #20]
 800b9de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d009      	beq.n	800b9fa <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	f000 8282 	beq.w	800bef4 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9f4:	6878      	ldr	r0, [r7, #4]
 800b9f6:	4798      	blx	r3
      }
      return;
 800b9f8:	e27c      	b.n	800bef4 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b9fa:	693b      	ldr	r3, [r7, #16]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	f000 80ef 	beq.w	800bbe0 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ba02:	697a      	ldr	r2, [r7, #20]
 800ba04:	4b73      	ldr	r3, [pc, #460]	; (800bbd4 <HAL_UART_IRQHandler+0x23c>)
 800ba06:	4013      	ands	r3, r2
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d105      	bne.n	800ba18 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ba0c:	69ba      	ldr	r2, [r7, #24]
 800ba0e:	4b72      	ldr	r3, [pc, #456]	; (800bbd8 <HAL_UART_IRQHandler+0x240>)
 800ba10:	4013      	ands	r3, r2
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	f000 80e4 	beq.w	800bbe0 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ba18:	69fb      	ldr	r3, [r7, #28]
 800ba1a:	f003 0301 	and.w	r3, r3, #1
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d010      	beq.n	800ba44 <HAL_UART_IRQHandler+0xac>
 800ba22:	69bb      	ldr	r3, [r7, #24]
 800ba24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d00b      	beq.n	800ba44 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	2201      	movs	r2, #1
 800ba32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ba3a:	f043 0201 	orr.w	r2, r3, #1
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ba44:	69fb      	ldr	r3, [r7, #28]
 800ba46:	f003 0302 	and.w	r3, r3, #2
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d010      	beq.n	800ba70 <HAL_UART_IRQHandler+0xd8>
 800ba4e:	697b      	ldr	r3, [r7, #20]
 800ba50:	f003 0301 	and.w	r3, r3, #1
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d00b      	beq.n	800ba70 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	2202      	movs	r2, #2
 800ba5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ba66:	f043 0204 	orr.w	r2, r3, #4
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ba70:	69fb      	ldr	r3, [r7, #28]
 800ba72:	f003 0304 	and.w	r3, r3, #4
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d010      	beq.n	800ba9c <HAL_UART_IRQHandler+0x104>
 800ba7a:	697b      	ldr	r3, [r7, #20]
 800ba7c:	f003 0301 	and.w	r3, r3, #1
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d00b      	beq.n	800ba9c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	2204      	movs	r2, #4
 800ba8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ba92:	f043 0202 	orr.w	r2, r3, #2
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ba9c:	69fb      	ldr	r3, [r7, #28]
 800ba9e:	f003 0308 	and.w	r3, r3, #8
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d015      	beq.n	800bad2 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800baa6:	69bb      	ldr	r3, [r7, #24]
 800baa8:	f003 0320 	and.w	r3, r3, #32
 800baac:	2b00      	cmp	r3, #0
 800baae:	d104      	bne.n	800baba <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800bab0:	697a      	ldr	r2, [r7, #20]
 800bab2:	4b48      	ldr	r3, [pc, #288]	; (800bbd4 <HAL_UART_IRQHandler+0x23c>)
 800bab4:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d00b      	beq.n	800bad2 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	2208      	movs	r2, #8
 800bac0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bac8:	f043 0208 	orr.w	r2, r3, #8
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bad2:	69fb      	ldr	r3, [r7, #28]
 800bad4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d011      	beq.n	800bb00 <HAL_UART_IRQHandler+0x168>
 800badc:	69bb      	ldr	r3, [r7, #24]
 800bade:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d00c      	beq.n	800bb00 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800baee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800baf6:	f043 0220 	orr.w	r2, r3, #32
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	f000 81f6 	beq.w	800bef8 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bb0c:	69fb      	ldr	r3, [r7, #28]
 800bb0e:	f003 0320 	and.w	r3, r3, #32
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d011      	beq.n	800bb3a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bb16:	69bb      	ldr	r3, [r7, #24]
 800bb18:	f003 0320 	and.w	r3, r3, #32
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d104      	bne.n	800bb2a <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bb20:	697b      	ldr	r3, [r7, #20]
 800bb22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d007      	beq.n	800bb3a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d003      	beq.n	800bb3a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb36:	6878      	ldr	r0, [r7, #4]
 800bb38:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bb40:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	689b      	ldr	r3, [r3, #8]
 800bb48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb4c:	2b40      	cmp	r3, #64	; 0x40
 800bb4e:	d004      	beq.n	800bb5a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d031      	beq.n	800bbbe <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bb5a:	6878      	ldr	r0, [r7, #4]
 800bb5c:	f001 f964 	bl	800ce28 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	689b      	ldr	r3, [r3, #8]
 800bb66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb6a:	2b40      	cmp	r3, #64	; 0x40
 800bb6c:	d123      	bne.n	800bbb6 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	689a      	ldr	r2, [r3, #8]
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bb7c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d013      	beq.n	800bbae <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bb8a:	4a14      	ldr	r2, [pc, #80]	; (800bbdc <HAL_UART_IRQHandler+0x244>)
 800bb8c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bb92:	4618      	mov	r0, r3
 800bb94:	f7f7 fda8 	bl	80036e8 <HAL_DMA_Abort_IT>
 800bb98:	4603      	mov	r3, r0
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d017      	beq.n	800bbce <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bba2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bba4:	687a      	ldr	r2, [r7, #4]
 800bba6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800bba8:	4610      	mov	r0, r2
 800bbaa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbac:	e00f      	b.n	800bbce <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bbae:	6878      	ldr	r0, [r7, #4]
 800bbb0:	f000 f9c0 	bl	800bf34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbb4:	e00b      	b.n	800bbce <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bbb6:	6878      	ldr	r0, [r7, #4]
 800bbb8:	f000 f9bc 	bl	800bf34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbbc:	e007      	b.n	800bbce <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bbbe:	6878      	ldr	r0, [r7, #4]
 800bbc0:	f000 f9b8 	bl	800bf34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800bbcc:	e194      	b.n	800bef8 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbce:	bf00      	nop
    return;
 800bbd0:	e192      	b.n	800bef8 <HAL_UART_IRQHandler+0x560>
 800bbd2:	bf00      	nop
 800bbd4:	10000001 	.word	0x10000001
 800bbd8:	04000120 	.word	0x04000120
 800bbdc:	0800cfdb 	.word	0x0800cfdb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbe4:	2b01      	cmp	r3, #1
 800bbe6:	f040 810f 	bne.w	800be08 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800bbea:	69fb      	ldr	r3, [r7, #28]
 800bbec:	f003 0310 	and.w	r3, r3, #16
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	f000 8109 	beq.w	800be08 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800bbf6:	69bb      	ldr	r3, [r7, #24]
 800bbf8:	f003 0310 	and.w	r3, r3, #16
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	f000 8103 	beq.w	800be08 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	2210      	movs	r2, #16
 800bc08:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	689b      	ldr	r3, [r3, #8]
 800bc10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc14:	2b40      	cmp	r3, #64	; 0x40
 800bc16:	f040 80bb 	bne.w	800bd90 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	4a8f      	ldr	r2, [pc, #572]	; (800be60 <HAL_UART_IRQHandler+0x4c8>)
 800bc22:	4293      	cmp	r3, r2
 800bc24:	d059      	beq.n	800bcda <HAL_UART_IRQHandler+0x342>
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	4a8d      	ldr	r2, [pc, #564]	; (800be64 <HAL_UART_IRQHandler+0x4cc>)
 800bc2e:	4293      	cmp	r3, r2
 800bc30:	d053      	beq.n	800bcda <HAL_UART_IRQHandler+0x342>
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	4a8b      	ldr	r2, [pc, #556]	; (800be68 <HAL_UART_IRQHandler+0x4d0>)
 800bc3a:	4293      	cmp	r3, r2
 800bc3c:	d04d      	beq.n	800bcda <HAL_UART_IRQHandler+0x342>
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	4a89      	ldr	r2, [pc, #548]	; (800be6c <HAL_UART_IRQHandler+0x4d4>)
 800bc46:	4293      	cmp	r3, r2
 800bc48:	d047      	beq.n	800bcda <HAL_UART_IRQHandler+0x342>
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	4a87      	ldr	r2, [pc, #540]	; (800be70 <HAL_UART_IRQHandler+0x4d8>)
 800bc52:	4293      	cmp	r3, r2
 800bc54:	d041      	beq.n	800bcda <HAL_UART_IRQHandler+0x342>
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	4a85      	ldr	r2, [pc, #532]	; (800be74 <HAL_UART_IRQHandler+0x4dc>)
 800bc5e:	4293      	cmp	r3, r2
 800bc60:	d03b      	beq.n	800bcda <HAL_UART_IRQHandler+0x342>
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	4a83      	ldr	r2, [pc, #524]	; (800be78 <HAL_UART_IRQHandler+0x4e0>)
 800bc6a:	4293      	cmp	r3, r2
 800bc6c:	d035      	beq.n	800bcda <HAL_UART_IRQHandler+0x342>
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	4a81      	ldr	r2, [pc, #516]	; (800be7c <HAL_UART_IRQHandler+0x4e4>)
 800bc76:	4293      	cmp	r3, r2
 800bc78:	d02f      	beq.n	800bcda <HAL_UART_IRQHandler+0x342>
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	4a7f      	ldr	r2, [pc, #508]	; (800be80 <HAL_UART_IRQHandler+0x4e8>)
 800bc82:	4293      	cmp	r3, r2
 800bc84:	d029      	beq.n	800bcda <HAL_UART_IRQHandler+0x342>
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	4a7d      	ldr	r2, [pc, #500]	; (800be84 <HAL_UART_IRQHandler+0x4ec>)
 800bc8e:	4293      	cmp	r3, r2
 800bc90:	d023      	beq.n	800bcda <HAL_UART_IRQHandler+0x342>
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	4a7b      	ldr	r2, [pc, #492]	; (800be88 <HAL_UART_IRQHandler+0x4f0>)
 800bc9a:	4293      	cmp	r3, r2
 800bc9c:	d01d      	beq.n	800bcda <HAL_UART_IRQHandler+0x342>
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	4a79      	ldr	r2, [pc, #484]	; (800be8c <HAL_UART_IRQHandler+0x4f4>)
 800bca6:	4293      	cmp	r3, r2
 800bca8:	d017      	beq.n	800bcda <HAL_UART_IRQHandler+0x342>
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	4a77      	ldr	r2, [pc, #476]	; (800be90 <HAL_UART_IRQHandler+0x4f8>)
 800bcb2:	4293      	cmp	r3, r2
 800bcb4:	d011      	beq.n	800bcda <HAL_UART_IRQHandler+0x342>
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	4a75      	ldr	r2, [pc, #468]	; (800be94 <HAL_UART_IRQHandler+0x4fc>)
 800bcbe:	4293      	cmp	r3, r2
 800bcc0:	d00b      	beq.n	800bcda <HAL_UART_IRQHandler+0x342>
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	4a73      	ldr	r2, [pc, #460]	; (800be98 <HAL_UART_IRQHandler+0x500>)
 800bcca:	4293      	cmp	r3, r2
 800bccc:	d005      	beq.n	800bcda <HAL_UART_IRQHandler+0x342>
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	4a71      	ldr	r2, [pc, #452]	; (800be9c <HAL_UART_IRQHandler+0x504>)
 800bcd6:	4293      	cmp	r3, r2
 800bcd8:	d105      	bne.n	800bce6 <HAL_UART_IRQHandler+0x34e>
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	685b      	ldr	r3, [r3, #4]
 800bce2:	b29b      	uxth	r3, r3
 800bce4:	e004      	b.n	800bcf0 <HAL_UART_IRQHandler+0x358>
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	685b      	ldr	r3, [r3, #4]
 800bcee:	b29b      	uxth	r3, r3
 800bcf0:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800bcf2:	893b      	ldrh	r3, [r7, #8]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	f000 8101 	beq.w	800befc <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bd00:	893a      	ldrh	r2, [r7, #8]
 800bd02:	429a      	cmp	r2, r3
 800bd04:	f080 80fa 	bcs.w	800befc <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	893a      	ldrh	r2, [r7, #8]
 800bd0c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd14:	69db      	ldr	r3, [r3, #28]
 800bd16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd1a:	d02b      	beq.n	800bd74 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	681a      	ldr	r2, [r3, #0]
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bd2a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	689a      	ldr	r2, [r3, #8]
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	f022 0201 	bic.w	r2, r2, #1
 800bd3a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	689a      	ldr	r2, [r3, #8]
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bd4a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	2220      	movs	r2, #32
 800bd50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2200      	movs	r2, #0
 800bd58:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	681a      	ldr	r2, [r3, #0]
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	f022 0210 	bic.w	r2, r2, #16
 800bd68:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd6e:	4618      	mov	r0, r3
 800bd70:	f7f7 f99c 	bl	80030ac <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bd80:	b29b      	uxth	r3, r3
 800bd82:	1ad3      	subs	r3, r2, r3
 800bd84:	b29b      	uxth	r3, r3
 800bd86:	4619      	mov	r1, r3
 800bd88:	6878      	ldr	r0, [r7, #4]
 800bd8a:	f000 f8dd 	bl	800bf48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bd8e:	e0b5      	b.n	800befc <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bd9c:	b29b      	uxth	r3, r3
 800bd9e:	1ad3      	subs	r3, r2, r3
 800bda0:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bda8:	b29b      	uxth	r3, r3
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	f000 80a8 	beq.w	800bf00 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 800bdb0:	897b      	ldrh	r3, [r7, #10]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	f000 80a4 	beq.w	800bf00 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	681a      	ldr	r2, [r3, #0]
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800bdc6:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	6899      	ldr	r1, [r3, #8]
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681a      	ldr	r2, [r3, #0]
 800bdd2:	4b33      	ldr	r3, [pc, #204]	; (800bea0 <HAL_UART_IRQHandler+0x508>)
 800bdd4:	400b      	ands	r3, r1
 800bdd6:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	2220      	movs	r2, #32
 800bddc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	2200      	movs	r2, #0
 800bde4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	2200      	movs	r2, #0
 800bdea:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	681a      	ldr	r2, [r3, #0]
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	f022 0210 	bic.w	r2, r2, #16
 800bdfa:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bdfc:	897b      	ldrh	r3, [r7, #10]
 800bdfe:	4619      	mov	r1, r3
 800be00:	6878      	ldr	r0, [r7, #4]
 800be02:	f000 f8a1 	bl	800bf48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800be06:	e07b      	b.n	800bf00 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800be08:	69fb      	ldr	r3, [r7, #28]
 800be0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d00d      	beq.n	800be2e <HAL_UART_IRQHandler+0x496>
 800be12:	697b      	ldr	r3, [r7, #20]
 800be14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d008      	beq.n	800be2e <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800be24:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800be26:	6878      	ldr	r0, [r7, #4]
 800be28:	f001 f907 	bl	800d03a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800be2c:	e06b      	b.n	800bf06 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800be2e:	69fb      	ldr	r3, [r7, #28]
 800be30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be34:	2b00      	cmp	r3, #0
 800be36:	d035      	beq.n	800bea4 <HAL_UART_IRQHandler+0x50c>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800be38:	69bb      	ldr	r3, [r7, #24]
 800be3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d104      	bne.n	800be4c <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800be42:	697b      	ldr	r3, [r7, #20]
 800be44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d02b      	beq.n	800bea4 <HAL_UART_IRQHandler+0x50c>
  {
    if (huart->TxISR != NULL)
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be50:	2b00      	cmp	r3, #0
 800be52:	d057      	beq.n	800bf04 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be58:	6878      	ldr	r0, [r7, #4]
 800be5a:	4798      	blx	r3
    }
    return;
 800be5c:	e052      	b.n	800bf04 <HAL_UART_IRQHandler+0x56c>
 800be5e:	bf00      	nop
 800be60:	40020010 	.word	0x40020010
 800be64:	40020028 	.word	0x40020028
 800be68:	40020040 	.word	0x40020040
 800be6c:	40020058 	.word	0x40020058
 800be70:	40020070 	.word	0x40020070
 800be74:	40020088 	.word	0x40020088
 800be78:	400200a0 	.word	0x400200a0
 800be7c:	400200b8 	.word	0x400200b8
 800be80:	40020410 	.word	0x40020410
 800be84:	40020428 	.word	0x40020428
 800be88:	40020440 	.word	0x40020440
 800be8c:	40020458 	.word	0x40020458
 800be90:	40020470 	.word	0x40020470
 800be94:	40020488 	.word	0x40020488
 800be98:	400204a0 	.word	0x400204a0
 800be9c:	400204b8 	.word	0x400204b8
 800bea0:	effffffe 	.word	0xeffffffe
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bea4:	69fb      	ldr	r3, [r7, #28]
 800bea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d008      	beq.n	800bec0 <HAL_UART_IRQHandler+0x528>
 800beae:	69bb      	ldr	r3, [r7, #24]
 800beb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d003      	beq.n	800bec0 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800beb8:	6878      	ldr	r0, [r7, #4]
 800beba:	f001 f8a4 	bl	800d006 <UART_EndTransmit_IT>
    return;
 800bebe:	e022      	b.n	800bf06 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800bec0:	69fb      	ldr	r3, [r7, #28]
 800bec2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d008      	beq.n	800bedc <HAL_UART_IRQHandler+0x544>
 800beca:	69bb      	ldr	r3, [r7, #24]
 800becc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d003      	beq.n	800bedc <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800bed4:	6878      	ldr	r0, [r7, #4]
 800bed6:	f001 f8c4 	bl	800d062 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800beda:	e014      	b.n	800bf06 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800bedc:	69fb      	ldr	r3, [r7, #28]
 800bede:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d00f      	beq.n	800bf06 <HAL_UART_IRQHandler+0x56e>
 800bee6:	69bb      	ldr	r3, [r7, #24]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	da0c      	bge.n	800bf06 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800beec:	6878      	ldr	r0, [r7, #4]
 800beee:	f001 f8ae 	bl	800d04e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bef2:	e008      	b.n	800bf06 <HAL_UART_IRQHandler+0x56e>
      return;
 800bef4:	bf00      	nop
 800bef6:	e006      	b.n	800bf06 <HAL_UART_IRQHandler+0x56e>
    return;
 800bef8:	bf00      	nop
 800befa:	e004      	b.n	800bf06 <HAL_UART_IRQHandler+0x56e>
      return;
 800befc:	bf00      	nop
 800befe:	e002      	b.n	800bf06 <HAL_UART_IRQHandler+0x56e>
      return;
 800bf00:	bf00      	nop
 800bf02:	e000      	b.n	800bf06 <HAL_UART_IRQHandler+0x56e>
    return;
 800bf04:	bf00      	nop
  }
}
 800bf06:	3720      	adds	r7, #32
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	bd80      	pop	{r7, pc}

0800bf0c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bf0c:	b480      	push	{r7}
 800bf0e:	b083      	sub	sp, #12
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800bf14:	bf00      	nop
 800bf16:	370c      	adds	r7, #12
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1e:	4770      	bx	lr

0800bf20 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bf20:	b480      	push	{r7}
 800bf22:	b083      	sub	sp, #12
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800bf28:	bf00      	nop
 800bf2a:	370c      	adds	r7, #12
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf32:	4770      	bx	lr

0800bf34 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bf34:	b480      	push	{r7}
 800bf36:	b083      	sub	sp, #12
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bf3c:	bf00      	nop
 800bf3e:	370c      	adds	r7, #12
 800bf40:	46bd      	mov	sp, r7
 800bf42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf46:	4770      	bx	lr

0800bf48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bf48:	b480      	push	{r7}
 800bf4a:	b083      	sub	sp, #12
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
 800bf50:	460b      	mov	r3, r1
 800bf52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bf54:	bf00      	nop
 800bf56:	370c      	adds	r7, #12
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5e:	4770      	bx	lr

0800bf60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bf60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bf64:	b092      	sub	sp, #72	; 0x48
 800bf66:	af00      	add	r7, sp, #0
 800bf68:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bf70:	697b      	ldr	r3, [r7, #20]
 800bf72:	689a      	ldr	r2, [r3, #8]
 800bf74:	697b      	ldr	r3, [r7, #20]
 800bf76:	691b      	ldr	r3, [r3, #16]
 800bf78:	431a      	orrs	r2, r3
 800bf7a:	697b      	ldr	r3, [r7, #20]
 800bf7c:	695b      	ldr	r3, [r3, #20]
 800bf7e:	431a      	orrs	r2, r3
 800bf80:	697b      	ldr	r3, [r7, #20]
 800bf82:	69db      	ldr	r3, [r3, #28]
 800bf84:	4313      	orrs	r3, r2
 800bf86:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bf88:	697b      	ldr	r3, [r7, #20]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	681a      	ldr	r2, [r3, #0]
 800bf8e:	4bbe      	ldr	r3, [pc, #760]	; (800c288 <UART_SetConfig+0x328>)
 800bf90:	4013      	ands	r3, r2
 800bf92:	697a      	ldr	r2, [r7, #20]
 800bf94:	6812      	ldr	r2, [r2, #0]
 800bf96:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bf98:	430b      	orrs	r3, r1
 800bf9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bf9c:	697b      	ldr	r3, [r7, #20]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	685b      	ldr	r3, [r3, #4]
 800bfa2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bfa6:	697b      	ldr	r3, [r7, #20]
 800bfa8:	68da      	ldr	r2, [r3, #12]
 800bfaa:	697b      	ldr	r3, [r7, #20]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	430a      	orrs	r2, r1
 800bfb0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bfb2:	697b      	ldr	r3, [r7, #20]
 800bfb4:	699b      	ldr	r3, [r3, #24]
 800bfb6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bfb8:	697b      	ldr	r3, [r7, #20]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	4ab3      	ldr	r2, [pc, #716]	; (800c28c <UART_SetConfig+0x32c>)
 800bfbe:	4293      	cmp	r3, r2
 800bfc0:	d004      	beq.n	800bfcc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bfc2:	697b      	ldr	r3, [r7, #20]
 800bfc4:	6a1b      	ldr	r3, [r3, #32]
 800bfc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bfc8:	4313      	orrs	r3, r2
 800bfca:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bfcc:	697b      	ldr	r3, [r7, #20]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	689a      	ldr	r2, [r3, #8]
 800bfd2:	4baf      	ldr	r3, [pc, #700]	; (800c290 <UART_SetConfig+0x330>)
 800bfd4:	4013      	ands	r3, r2
 800bfd6:	697a      	ldr	r2, [r7, #20]
 800bfd8:	6812      	ldr	r2, [r2, #0]
 800bfda:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bfdc:	430b      	orrs	r3, r1
 800bfde:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bfe0:	697b      	ldr	r3, [r7, #20]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfe6:	f023 010f 	bic.w	r1, r3, #15
 800bfea:	697b      	ldr	r3, [r7, #20]
 800bfec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bfee:	697b      	ldr	r3, [r7, #20]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	430a      	orrs	r2, r1
 800bff4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bff6:	697b      	ldr	r3, [r7, #20]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	4aa6      	ldr	r2, [pc, #664]	; (800c294 <UART_SetConfig+0x334>)
 800bffc:	4293      	cmp	r3, r2
 800bffe:	d177      	bne.n	800c0f0 <UART_SetConfig+0x190>
 800c000:	4ba5      	ldr	r3, [pc, #660]	; (800c298 <UART_SetConfig+0x338>)
 800c002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c004:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c008:	2b28      	cmp	r3, #40	; 0x28
 800c00a:	d86d      	bhi.n	800c0e8 <UART_SetConfig+0x188>
 800c00c:	a201      	add	r2, pc, #4	; (adr r2, 800c014 <UART_SetConfig+0xb4>)
 800c00e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c012:	bf00      	nop
 800c014:	0800c0b9 	.word	0x0800c0b9
 800c018:	0800c0e9 	.word	0x0800c0e9
 800c01c:	0800c0e9 	.word	0x0800c0e9
 800c020:	0800c0e9 	.word	0x0800c0e9
 800c024:	0800c0e9 	.word	0x0800c0e9
 800c028:	0800c0e9 	.word	0x0800c0e9
 800c02c:	0800c0e9 	.word	0x0800c0e9
 800c030:	0800c0e9 	.word	0x0800c0e9
 800c034:	0800c0c1 	.word	0x0800c0c1
 800c038:	0800c0e9 	.word	0x0800c0e9
 800c03c:	0800c0e9 	.word	0x0800c0e9
 800c040:	0800c0e9 	.word	0x0800c0e9
 800c044:	0800c0e9 	.word	0x0800c0e9
 800c048:	0800c0e9 	.word	0x0800c0e9
 800c04c:	0800c0e9 	.word	0x0800c0e9
 800c050:	0800c0e9 	.word	0x0800c0e9
 800c054:	0800c0c9 	.word	0x0800c0c9
 800c058:	0800c0e9 	.word	0x0800c0e9
 800c05c:	0800c0e9 	.word	0x0800c0e9
 800c060:	0800c0e9 	.word	0x0800c0e9
 800c064:	0800c0e9 	.word	0x0800c0e9
 800c068:	0800c0e9 	.word	0x0800c0e9
 800c06c:	0800c0e9 	.word	0x0800c0e9
 800c070:	0800c0e9 	.word	0x0800c0e9
 800c074:	0800c0d1 	.word	0x0800c0d1
 800c078:	0800c0e9 	.word	0x0800c0e9
 800c07c:	0800c0e9 	.word	0x0800c0e9
 800c080:	0800c0e9 	.word	0x0800c0e9
 800c084:	0800c0e9 	.word	0x0800c0e9
 800c088:	0800c0e9 	.word	0x0800c0e9
 800c08c:	0800c0e9 	.word	0x0800c0e9
 800c090:	0800c0e9 	.word	0x0800c0e9
 800c094:	0800c0d9 	.word	0x0800c0d9
 800c098:	0800c0e9 	.word	0x0800c0e9
 800c09c:	0800c0e9 	.word	0x0800c0e9
 800c0a0:	0800c0e9 	.word	0x0800c0e9
 800c0a4:	0800c0e9 	.word	0x0800c0e9
 800c0a8:	0800c0e9 	.word	0x0800c0e9
 800c0ac:	0800c0e9 	.word	0x0800c0e9
 800c0b0:	0800c0e9 	.word	0x0800c0e9
 800c0b4:	0800c0e1 	.word	0x0800c0e1
 800c0b8:	2301      	movs	r3, #1
 800c0ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0be:	e222      	b.n	800c506 <UART_SetConfig+0x5a6>
 800c0c0:	2304      	movs	r3, #4
 800c0c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0c6:	e21e      	b.n	800c506 <UART_SetConfig+0x5a6>
 800c0c8:	2308      	movs	r3, #8
 800c0ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0ce:	e21a      	b.n	800c506 <UART_SetConfig+0x5a6>
 800c0d0:	2310      	movs	r3, #16
 800c0d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0d6:	e216      	b.n	800c506 <UART_SetConfig+0x5a6>
 800c0d8:	2320      	movs	r3, #32
 800c0da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0de:	e212      	b.n	800c506 <UART_SetConfig+0x5a6>
 800c0e0:	2340      	movs	r3, #64	; 0x40
 800c0e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0e6:	e20e      	b.n	800c506 <UART_SetConfig+0x5a6>
 800c0e8:	2380      	movs	r3, #128	; 0x80
 800c0ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0ee:	e20a      	b.n	800c506 <UART_SetConfig+0x5a6>
 800c0f0:	697b      	ldr	r3, [r7, #20]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	4a69      	ldr	r2, [pc, #420]	; (800c29c <UART_SetConfig+0x33c>)
 800c0f6:	4293      	cmp	r3, r2
 800c0f8:	d130      	bne.n	800c15c <UART_SetConfig+0x1fc>
 800c0fa:	4b67      	ldr	r3, [pc, #412]	; (800c298 <UART_SetConfig+0x338>)
 800c0fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0fe:	f003 0307 	and.w	r3, r3, #7
 800c102:	2b05      	cmp	r3, #5
 800c104:	d826      	bhi.n	800c154 <UART_SetConfig+0x1f4>
 800c106:	a201      	add	r2, pc, #4	; (adr r2, 800c10c <UART_SetConfig+0x1ac>)
 800c108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c10c:	0800c125 	.word	0x0800c125
 800c110:	0800c12d 	.word	0x0800c12d
 800c114:	0800c135 	.word	0x0800c135
 800c118:	0800c13d 	.word	0x0800c13d
 800c11c:	0800c145 	.word	0x0800c145
 800c120:	0800c14d 	.word	0x0800c14d
 800c124:	2300      	movs	r3, #0
 800c126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c12a:	e1ec      	b.n	800c506 <UART_SetConfig+0x5a6>
 800c12c:	2304      	movs	r3, #4
 800c12e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c132:	e1e8      	b.n	800c506 <UART_SetConfig+0x5a6>
 800c134:	2308      	movs	r3, #8
 800c136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c13a:	e1e4      	b.n	800c506 <UART_SetConfig+0x5a6>
 800c13c:	2310      	movs	r3, #16
 800c13e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c142:	e1e0      	b.n	800c506 <UART_SetConfig+0x5a6>
 800c144:	2320      	movs	r3, #32
 800c146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c14a:	e1dc      	b.n	800c506 <UART_SetConfig+0x5a6>
 800c14c:	2340      	movs	r3, #64	; 0x40
 800c14e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c152:	e1d8      	b.n	800c506 <UART_SetConfig+0x5a6>
 800c154:	2380      	movs	r3, #128	; 0x80
 800c156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c15a:	e1d4      	b.n	800c506 <UART_SetConfig+0x5a6>
 800c15c:	697b      	ldr	r3, [r7, #20]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	4a4f      	ldr	r2, [pc, #316]	; (800c2a0 <UART_SetConfig+0x340>)
 800c162:	4293      	cmp	r3, r2
 800c164:	d130      	bne.n	800c1c8 <UART_SetConfig+0x268>
 800c166:	4b4c      	ldr	r3, [pc, #304]	; (800c298 <UART_SetConfig+0x338>)
 800c168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c16a:	f003 0307 	and.w	r3, r3, #7
 800c16e:	2b05      	cmp	r3, #5
 800c170:	d826      	bhi.n	800c1c0 <UART_SetConfig+0x260>
 800c172:	a201      	add	r2, pc, #4	; (adr r2, 800c178 <UART_SetConfig+0x218>)
 800c174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c178:	0800c191 	.word	0x0800c191
 800c17c:	0800c199 	.word	0x0800c199
 800c180:	0800c1a1 	.word	0x0800c1a1
 800c184:	0800c1a9 	.word	0x0800c1a9
 800c188:	0800c1b1 	.word	0x0800c1b1
 800c18c:	0800c1b9 	.word	0x0800c1b9
 800c190:	2300      	movs	r3, #0
 800c192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c196:	e1b6      	b.n	800c506 <UART_SetConfig+0x5a6>
 800c198:	2304      	movs	r3, #4
 800c19a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c19e:	e1b2      	b.n	800c506 <UART_SetConfig+0x5a6>
 800c1a0:	2308      	movs	r3, #8
 800c1a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1a6:	e1ae      	b.n	800c506 <UART_SetConfig+0x5a6>
 800c1a8:	2310      	movs	r3, #16
 800c1aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1ae:	e1aa      	b.n	800c506 <UART_SetConfig+0x5a6>
 800c1b0:	2320      	movs	r3, #32
 800c1b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1b6:	e1a6      	b.n	800c506 <UART_SetConfig+0x5a6>
 800c1b8:	2340      	movs	r3, #64	; 0x40
 800c1ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1be:	e1a2      	b.n	800c506 <UART_SetConfig+0x5a6>
 800c1c0:	2380      	movs	r3, #128	; 0x80
 800c1c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1c6:	e19e      	b.n	800c506 <UART_SetConfig+0x5a6>
 800c1c8:	697b      	ldr	r3, [r7, #20]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	4a35      	ldr	r2, [pc, #212]	; (800c2a4 <UART_SetConfig+0x344>)
 800c1ce:	4293      	cmp	r3, r2
 800c1d0:	d130      	bne.n	800c234 <UART_SetConfig+0x2d4>
 800c1d2:	4b31      	ldr	r3, [pc, #196]	; (800c298 <UART_SetConfig+0x338>)
 800c1d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1d6:	f003 0307 	and.w	r3, r3, #7
 800c1da:	2b05      	cmp	r3, #5
 800c1dc:	d826      	bhi.n	800c22c <UART_SetConfig+0x2cc>
 800c1de:	a201      	add	r2, pc, #4	; (adr r2, 800c1e4 <UART_SetConfig+0x284>)
 800c1e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1e4:	0800c1fd 	.word	0x0800c1fd
 800c1e8:	0800c205 	.word	0x0800c205
 800c1ec:	0800c20d 	.word	0x0800c20d
 800c1f0:	0800c215 	.word	0x0800c215
 800c1f4:	0800c21d 	.word	0x0800c21d
 800c1f8:	0800c225 	.word	0x0800c225
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c202:	e180      	b.n	800c506 <UART_SetConfig+0x5a6>
 800c204:	2304      	movs	r3, #4
 800c206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c20a:	e17c      	b.n	800c506 <UART_SetConfig+0x5a6>
 800c20c:	2308      	movs	r3, #8
 800c20e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c212:	e178      	b.n	800c506 <UART_SetConfig+0x5a6>
 800c214:	2310      	movs	r3, #16
 800c216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c21a:	e174      	b.n	800c506 <UART_SetConfig+0x5a6>
 800c21c:	2320      	movs	r3, #32
 800c21e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c222:	e170      	b.n	800c506 <UART_SetConfig+0x5a6>
 800c224:	2340      	movs	r3, #64	; 0x40
 800c226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c22a:	e16c      	b.n	800c506 <UART_SetConfig+0x5a6>
 800c22c:	2380      	movs	r3, #128	; 0x80
 800c22e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c232:	e168      	b.n	800c506 <UART_SetConfig+0x5a6>
 800c234:	697b      	ldr	r3, [r7, #20]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	4a1b      	ldr	r2, [pc, #108]	; (800c2a8 <UART_SetConfig+0x348>)
 800c23a:	4293      	cmp	r3, r2
 800c23c:	d142      	bne.n	800c2c4 <UART_SetConfig+0x364>
 800c23e:	4b16      	ldr	r3, [pc, #88]	; (800c298 <UART_SetConfig+0x338>)
 800c240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c242:	f003 0307 	and.w	r3, r3, #7
 800c246:	2b05      	cmp	r3, #5
 800c248:	d838      	bhi.n	800c2bc <UART_SetConfig+0x35c>
 800c24a:	a201      	add	r2, pc, #4	; (adr r2, 800c250 <UART_SetConfig+0x2f0>)
 800c24c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c250:	0800c269 	.word	0x0800c269
 800c254:	0800c271 	.word	0x0800c271
 800c258:	0800c279 	.word	0x0800c279
 800c25c:	0800c281 	.word	0x0800c281
 800c260:	0800c2ad 	.word	0x0800c2ad
 800c264:	0800c2b5 	.word	0x0800c2b5
 800c268:	2300      	movs	r3, #0
 800c26a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c26e:	e14a      	b.n	800c506 <UART_SetConfig+0x5a6>
 800c270:	2304      	movs	r3, #4
 800c272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c276:	e146      	b.n	800c506 <UART_SetConfig+0x5a6>
 800c278:	2308      	movs	r3, #8
 800c27a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c27e:	e142      	b.n	800c506 <UART_SetConfig+0x5a6>
 800c280:	2310      	movs	r3, #16
 800c282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c286:	e13e      	b.n	800c506 <UART_SetConfig+0x5a6>
 800c288:	cfff69f3 	.word	0xcfff69f3
 800c28c:	58000c00 	.word	0x58000c00
 800c290:	11fff4ff 	.word	0x11fff4ff
 800c294:	40011000 	.word	0x40011000
 800c298:	58024400 	.word	0x58024400
 800c29c:	40004400 	.word	0x40004400
 800c2a0:	40004800 	.word	0x40004800
 800c2a4:	40004c00 	.word	0x40004c00
 800c2a8:	40005000 	.word	0x40005000
 800c2ac:	2320      	movs	r3, #32
 800c2ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2b2:	e128      	b.n	800c506 <UART_SetConfig+0x5a6>
 800c2b4:	2340      	movs	r3, #64	; 0x40
 800c2b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2ba:	e124      	b.n	800c506 <UART_SetConfig+0x5a6>
 800c2bc:	2380      	movs	r3, #128	; 0x80
 800c2be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2c2:	e120      	b.n	800c506 <UART_SetConfig+0x5a6>
 800c2c4:	697b      	ldr	r3, [r7, #20]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	4acb      	ldr	r2, [pc, #812]	; (800c5f8 <UART_SetConfig+0x698>)
 800c2ca:	4293      	cmp	r3, r2
 800c2cc:	d176      	bne.n	800c3bc <UART_SetConfig+0x45c>
 800c2ce:	4bcb      	ldr	r3, [pc, #812]	; (800c5fc <UART_SetConfig+0x69c>)
 800c2d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c2d6:	2b28      	cmp	r3, #40	; 0x28
 800c2d8:	d86c      	bhi.n	800c3b4 <UART_SetConfig+0x454>
 800c2da:	a201      	add	r2, pc, #4	; (adr r2, 800c2e0 <UART_SetConfig+0x380>)
 800c2dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2e0:	0800c385 	.word	0x0800c385
 800c2e4:	0800c3b5 	.word	0x0800c3b5
 800c2e8:	0800c3b5 	.word	0x0800c3b5
 800c2ec:	0800c3b5 	.word	0x0800c3b5
 800c2f0:	0800c3b5 	.word	0x0800c3b5
 800c2f4:	0800c3b5 	.word	0x0800c3b5
 800c2f8:	0800c3b5 	.word	0x0800c3b5
 800c2fc:	0800c3b5 	.word	0x0800c3b5
 800c300:	0800c38d 	.word	0x0800c38d
 800c304:	0800c3b5 	.word	0x0800c3b5
 800c308:	0800c3b5 	.word	0x0800c3b5
 800c30c:	0800c3b5 	.word	0x0800c3b5
 800c310:	0800c3b5 	.word	0x0800c3b5
 800c314:	0800c3b5 	.word	0x0800c3b5
 800c318:	0800c3b5 	.word	0x0800c3b5
 800c31c:	0800c3b5 	.word	0x0800c3b5
 800c320:	0800c395 	.word	0x0800c395
 800c324:	0800c3b5 	.word	0x0800c3b5
 800c328:	0800c3b5 	.word	0x0800c3b5
 800c32c:	0800c3b5 	.word	0x0800c3b5
 800c330:	0800c3b5 	.word	0x0800c3b5
 800c334:	0800c3b5 	.word	0x0800c3b5
 800c338:	0800c3b5 	.word	0x0800c3b5
 800c33c:	0800c3b5 	.word	0x0800c3b5
 800c340:	0800c39d 	.word	0x0800c39d
 800c344:	0800c3b5 	.word	0x0800c3b5
 800c348:	0800c3b5 	.word	0x0800c3b5
 800c34c:	0800c3b5 	.word	0x0800c3b5
 800c350:	0800c3b5 	.word	0x0800c3b5
 800c354:	0800c3b5 	.word	0x0800c3b5
 800c358:	0800c3b5 	.word	0x0800c3b5
 800c35c:	0800c3b5 	.word	0x0800c3b5
 800c360:	0800c3a5 	.word	0x0800c3a5
 800c364:	0800c3b5 	.word	0x0800c3b5
 800c368:	0800c3b5 	.word	0x0800c3b5
 800c36c:	0800c3b5 	.word	0x0800c3b5
 800c370:	0800c3b5 	.word	0x0800c3b5
 800c374:	0800c3b5 	.word	0x0800c3b5
 800c378:	0800c3b5 	.word	0x0800c3b5
 800c37c:	0800c3b5 	.word	0x0800c3b5
 800c380:	0800c3ad 	.word	0x0800c3ad
 800c384:	2301      	movs	r3, #1
 800c386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c38a:	e0bc      	b.n	800c506 <UART_SetConfig+0x5a6>
 800c38c:	2304      	movs	r3, #4
 800c38e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c392:	e0b8      	b.n	800c506 <UART_SetConfig+0x5a6>
 800c394:	2308      	movs	r3, #8
 800c396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c39a:	e0b4      	b.n	800c506 <UART_SetConfig+0x5a6>
 800c39c:	2310      	movs	r3, #16
 800c39e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3a2:	e0b0      	b.n	800c506 <UART_SetConfig+0x5a6>
 800c3a4:	2320      	movs	r3, #32
 800c3a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3aa:	e0ac      	b.n	800c506 <UART_SetConfig+0x5a6>
 800c3ac:	2340      	movs	r3, #64	; 0x40
 800c3ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3b2:	e0a8      	b.n	800c506 <UART_SetConfig+0x5a6>
 800c3b4:	2380      	movs	r3, #128	; 0x80
 800c3b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3ba:	e0a4      	b.n	800c506 <UART_SetConfig+0x5a6>
 800c3bc:	697b      	ldr	r3, [r7, #20]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	4a8f      	ldr	r2, [pc, #572]	; (800c600 <UART_SetConfig+0x6a0>)
 800c3c2:	4293      	cmp	r3, r2
 800c3c4:	d130      	bne.n	800c428 <UART_SetConfig+0x4c8>
 800c3c6:	4b8d      	ldr	r3, [pc, #564]	; (800c5fc <UART_SetConfig+0x69c>)
 800c3c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3ca:	f003 0307 	and.w	r3, r3, #7
 800c3ce:	2b05      	cmp	r3, #5
 800c3d0:	d826      	bhi.n	800c420 <UART_SetConfig+0x4c0>
 800c3d2:	a201      	add	r2, pc, #4	; (adr r2, 800c3d8 <UART_SetConfig+0x478>)
 800c3d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3d8:	0800c3f1 	.word	0x0800c3f1
 800c3dc:	0800c3f9 	.word	0x0800c3f9
 800c3e0:	0800c401 	.word	0x0800c401
 800c3e4:	0800c409 	.word	0x0800c409
 800c3e8:	0800c411 	.word	0x0800c411
 800c3ec:	0800c419 	.word	0x0800c419
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3f6:	e086      	b.n	800c506 <UART_SetConfig+0x5a6>
 800c3f8:	2304      	movs	r3, #4
 800c3fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3fe:	e082      	b.n	800c506 <UART_SetConfig+0x5a6>
 800c400:	2308      	movs	r3, #8
 800c402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c406:	e07e      	b.n	800c506 <UART_SetConfig+0x5a6>
 800c408:	2310      	movs	r3, #16
 800c40a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c40e:	e07a      	b.n	800c506 <UART_SetConfig+0x5a6>
 800c410:	2320      	movs	r3, #32
 800c412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c416:	e076      	b.n	800c506 <UART_SetConfig+0x5a6>
 800c418:	2340      	movs	r3, #64	; 0x40
 800c41a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c41e:	e072      	b.n	800c506 <UART_SetConfig+0x5a6>
 800c420:	2380      	movs	r3, #128	; 0x80
 800c422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c426:	e06e      	b.n	800c506 <UART_SetConfig+0x5a6>
 800c428:	697b      	ldr	r3, [r7, #20]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	4a75      	ldr	r2, [pc, #468]	; (800c604 <UART_SetConfig+0x6a4>)
 800c42e:	4293      	cmp	r3, r2
 800c430:	d130      	bne.n	800c494 <UART_SetConfig+0x534>
 800c432:	4b72      	ldr	r3, [pc, #456]	; (800c5fc <UART_SetConfig+0x69c>)
 800c434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c436:	f003 0307 	and.w	r3, r3, #7
 800c43a:	2b05      	cmp	r3, #5
 800c43c:	d826      	bhi.n	800c48c <UART_SetConfig+0x52c>
 800c43e:	a201      	add	r2, pc, #4	; (adr r2, 800c444 <UART_SetConfig+0x4e4>)
 800c440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c444:	0800c45d 	.word	0x0800c45d
 800c448:	0800c465 	.word	0x0800c465
 800c44c:	0800c46d 	.word	0x0800c46d
 800c450:	0800c475 	.word	0x0800c475
 800c454:	0800c47d 	.word	0x0800c47d
 800c458:	0800c485 	.word	0x0800c485
 800c45c:	2300      	movs	r3, #0
 800c45e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c462:	e050      	b.n	800c506 <UART_SetConfig+0x5a6>
 800c464:	2304      	movs	r3, #4
 800c466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c46a:	e04c      	b.n	800c506 <UART_SetConfig+0x5a6>
 800c46c:	2308      	movs	r3, #8
 800c46e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c472:	e048      	b.n	800c506 <UART_SetConfig+0x5a6>
 800c474:	2310      	movs	r3, #16
 800c476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c47a:	e044      	b.n	800c506 <UART_SetConfig+0x5a6>
 800c47c:	2320      	movs	r3, #32
 800c47e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c482:	e040      	b.n	800c506 <UART_SetConfig+0x5a6>
 800c484:	2340      	movs	r3, #64	; 0x40
 800c486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c48a:	e03c      	b.n	800c506 <UART_SetConfig+0x5a6>
 800c48c:	2380      	movs	r3, #128	; 0x80
 800c48e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c492:	e038      	b.n	800c506 <UART_SetConfig+0x5a6>
 800c494:	697b      	ldr	r3, [r7, #20]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	4a5b      	ldr	r2, [pc, #364]	; (800c608 <UART_SetConfig+0x6a8>)
 800c49a:	4293      	cmp	r3, r2
 800c49c:	d130      	bne.n	800c500 <UART_SetConfig+0x5a0>
 800c49e:	4b57      	ldr	r3, [pc, #348]	; (800c5fc <UART_SetConfig+0x69c>)
 800c4a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4a2:	f003 0307 	and.w	r3, r3, #7
 800c4a6:	2b05      	cmp	r3, #5
 800c4a8:	d826      	bhi.n	800c4f8 <UART_SetConfig+0x598>
 800c4aa:	a201      	add	r2, pc, #4	; (adr r2, 800c4b0 <UART_SetConfig+0x550>)
 800c4ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4b0:	0800c4c9 	.word	0x0800c4c9
 800c4b4:	0800c4d1 	.word	0x0800c4d1
 800c4b8:	0800c4d9 	.word	0x0800c4d9
 800c4bc:	0800c4e1 	.word	0x0800c4e1
 800c4c0:	0800c4e9 	.word	0x0800c4e9
 800c4c4:	0800c4f1 	.word	0x0800c4f1
 800c4c8:	2302      	movs	r3, #2
 800c4ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4ce:	e01a      	b.n	800c506 <UART_SetConfig+0x5a6>
 800c4d0:	2304      	movs	r3, #4
 800c4d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4d6:	e016      	b.n	800c506 <UART_SetConfig+0x5a6>
 800c4d8:	2308      	movs	r3, #8
 800c4da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4de:	e012      	b.n	800c506 <UART_SetConfig+0x5a6>
 800c4e0:	2310      	movs	r3, #16
 800c4e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4e6:	e00e      	b.n	800c506 <UART_SetConfig+0x5a6>
 800c4e8:	2320      	movs	r3, #32
 800c4ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4ee:	e00a      	b.n	800c506 <UART_SetConfig+0x5a6>
 800c4f0:	2340      	movs	r3, #64	; 0x40
 800c4f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4f6:	e006      	b.n	800c506 <UART_SetConfig+0x5a6>
 800c4f8:	2380      	movs	r3, #128	; 0x80
 800c4fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4fe:	e002      	b.n	800c506 <UART_SetConfig+0x5a6>
 800c500:	2380      	movs	r3, #128	; 0x80
 800c502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c506:	697b      	ldr	r3, [r7, #20]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	4a3f      	ldr	r2, [pc, #252]	; (800c608 <UART_SetConfig+0x6a8>)
 800c50c:	4293      	cmp	r3, r2
 800c50e:	f040 80f8 	bne.w	800c702 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c512:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c516:	2b20      	cmp	r3, #32
 800c518:	dc46      	bgt.n	800c5a8 <UART_SetConfig+0x648>
 800c51a:	2b02      	cmp	r3, #2
 800c51c:	f2c0 8082 	blt.w	800c624 <UART_SetConfig+0x6c4>
 800c520:	3b02      	subs	r3, #2
 800c522:	2b1e      	cmp	r3, #30
 800c524:	d87e      	bhi.n	800c624 <UART_SetConfig+0x6c4>
 800c526:	a201      	add	r2, pc, #4	; (adr r2, 800c52c <UART_SetConfig+0x5cc>)
 800c528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c52c:	0800c5af 	.word	0x0800c5af
 800c530:	0800c625 	.word	0x0800c625
 800c534:	0800c5b7 	.word	0x0800c5b7
 800c538:	0800c625 	.word	0x0800c625
 800c53c:	0800c625 	.word	0x0800c625
 800c540:	0800c625 	.word	0x0800c625
 800c544:	0800c5c7 	.word	0x0800c5c7
 800c548:	0800c625 	.word	0x0800c625
 800c54c:	0800c625 	.word	0x0800c625
 800c550:	0800c625 	.word	0x0800c625
 800c554:	0800c625 	.word	0x0800c625
 800c558:	0800c625 	.word	0x0800c625
 800c55c:	0800c625 	.word	0x0800c625
 800c560:	0800c625 	.word	0x0800c625
 800c564:	0800c5d7 	.word	0x0800c5d7
 800c568:	0800c625 	.word	0x0800c625
 800c56c:	0800c625 	.word	0x0800c625
 800c570:	0800c625 	.word	0x0800c625
 800c574:	0800c625 	.word	0x0800c625
 800c578:	0800c625 	.word	0x0800c625
 800c57c:	0800c625 	.word	0x0800c625
 800c580:	0800c625 	.word	0x0800c625
 800c584:	0800c625 	.word	0x0800c625
 800c588:	0800c625 	.word	0x0800c625
 800c58c:	0800c625 	.word	0x0800c625
 800c590:	0800c625 	.word	0x0800c625
 800c594:	0800c625 	.word	0x0800c625
 800c598:	0800c625 	.word	0x0800c625
 800c59c:	0800c625 	.word	0x0800c625
 800c5a0:	0800c625 	.word	0x0800c625
 800c5a4:	0800c617 	.word	0x0800c617
 800c5a8:	2b40      	cmp	r3, #64	; 0x40
 800c5aa:	d037      	beq.n	800c61c <UART_SetConfig+0x6bc>
 800c5ac:	e03a      	b.n	800c624 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c5ae:	f7fd f919 	bl	80097e4 <HAL_RCCEx_GetD3PCLK1Freq>
 800c5b2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c5b4:	e03c      	b.n	800c630 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c5b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	f7fd f928 	bl	8009810 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c5c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5c4:	e034      	b.n	800c630 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c5c6:	f107 0318 	add.w	r3, r7, #24
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	f7fd fa74 	bl	8009ab8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c5d0:	69fb      	ldr	r3, [r7, #28]
 800c5d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5d4:	e02c      	b.n	800c630 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c5d6:	4b09      	ldr	r3, [pc, #36]	; (800c5fc <UART_SetConfig+0x69c>)
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	f003 0320 	and.w	r3, r3, #32
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d016      	beq.n	800c610 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c5e2:	4b06      	ldr	r3, [pc, #24]	; (800c5fc <UART_SetConfig+0x69c>)
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	08db      	lsrs	r3, r3, #3
 800c5e8:	f003 0303 	and.w	r3, r3, #3
 800c5ec:	4a07      	ldr	r2, [pc, #28]	; (800c60c <UART_SetConfig+0x6ac>)
 800c5ee:	fa22 f303 	lsr.w	r3, r2, r3
 800c5f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c5f4:	e01c      	b.n	800c630 <UART_SetConfig+0x6d0>
 800c5f6:	bf00      	nop
 800c5f8:	40011400 	.word	0x40011400
 800c5fc:	58024400 	.word	0x58024400
 800c600:	40007800 	.word	0x40007800
 800c604:	40007c00 	.word	0x40007c00
 800c608:	58000c00 	.word	0x58000c00
 800c60c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800c610:	4b9e      	ldr	r3, [pc, #632]	; (800c88c <UART_SetConfig+0x92c>)
 800c612:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c614:	e00c      	b.n	800c630 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c616:	4b9e      	ldr	r3, [pc, #632]	; (800c890 <UART_SetConfig+0x930>)
 800c618:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c61a:	e009      	b.n	800c630 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c61c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c620:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c622:	e005      	b.n	800c630 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800c624:	2300      	movs	r3, #0
 800c626:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c628:	2301      	movs	r3, #1
 800c62a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c62e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c630:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c632:	2b00      	cmp	r3, #0
 800c634:	f000 81e0 	beq.w	800c9f8 <UART_SetConfig+0xa98>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c638:	697b      	ldr	r3, [r7, #20]
 800c63a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c63c:	4a95      	ldr	r2, [pc, #596]	; (800c894 <UART_SetConfig+0x934>)
 800c63e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c642:	461a      	mov	r2, r3
 800c644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c646:	fbb3 f3f2 	udiv	r3, r3, r2
 800c64a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c64c:	697b      	ldr	r3, [r7, #20]
 800c64e:	685a      	ldr	r2, [r3, #4]
 800c650:	4613      	mov	r3, r2
 800c652:	005b      	lsls	r3, r3, #1
 800c654:	4413      	add	r3, r2
 800c656:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c658:	429a      	cmp	r2, r3
 800c65a:	d305      	bcc.n	800c668 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c65c:	697b      	ldr	r3, [r7, #20]
 800c65e:	685b      	ldr	r3, [r3, #4]
 800c660:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c662:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c664:	429a      	cmp	r2, r3
 800c666:	d903      	bls.n	800c670 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800c668:	2301      	movs	r3, #1
 800c66a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c66e:	e1c3      	b.n	800c9f8 <UART_SetConfig+0xa98>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c670:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c672:	2200      	movs	r2, #0
 800c674:	60bb      	str	r3, [r7, #8]
 800c676:	60fa      	str	r2, [r7, #12]
 800c678:	697b      	ldr	r3, [r7, #20]
 800c67a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c67c:	4a85      	ldr	r2, [pc, #532]	; (800c894 <UART_SetConfig+0x934>)
 800c67e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c682:	b29b      	uxth	r3, r3
 800c684:	2200      	movs	r2, #0
 800c686:	603b      	str	r3, [r7, #0]
 800c688:	607a      	str	r2, [r7, #4]
 800c68a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c68e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c692:	f7f3 fe7d 	bl	8000390 <__aeabi_uldivmod>
 800c696:	4602      	mov	r2, r0
 800c698:	460b      	mov	r3, r1
 800c69a:	4610      	mov	r0, r2
 800c69c:	4619      	mov	r1, r3
 800c69e:	f04f 0200 	mov.w	r2, #0
 800c6a2:	f04f 0300 	mov.w	r3, #0
 800c6a6:	020b      	lsls	r3, r1, #8
 800c6a8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c6ac:	0202      	lsls	r2, r0, #8
 800c6ae:	6979      	ldr	r1, [r7, #20]
 800c6b0:	6849      	ldr	r1, [r1, #4]
 800c6b2:	0849      	lsrs	r1, r1, #1
 800c6b4:	2000      	movs	r0, #0
 800c6b6:	460c      	mov	r4, r1
 800c6b8:	4605      	mov	r5, r0
 800c6ba:	eb12 0804 	adds.w	r8, r2, r4
 800c6be:	eb43 0905 	adc.w	r9, r3, r5
 800c6c2:	697b      	ldr	r3, [r7, #20]
 800c6c4:	685b      	ldr	r3, [r3, #4]
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	469a      	mov	sl, r3
 800c6ca:	4693      	mov	fp, r2
 800c6cc:	4652      	mov	r2, sl
 800c6ce:	465b      	mov	r3, fp
 800c6d0:	4640      	mov	r0, r8
 800c6d2:	4649      	mov	r1, r9
 800c6d4:	f7f3 fe5c 	bl	8000390 <__aeabi_uldivmod>
 800c6d8:	4602      	mov	r2, r0
 800c6da:	460b      	mov	r3, r1
 800c6dc:	4613      	mov	r3, r2
 800c6de:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c6e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c6e6:	d308      	bcc.n	800c6fa <UART_SetConfig+0x79a>
 800c6e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c6ee:	d204      	bcs.n	800c6fa <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800c6f0:	697b      	ldr	r3, [r7, #20]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c6f6:	60da      	str	r2, [r3, #12]
 800c6f8:	e17e      	b.n	800c9f8 <UART_SetConfig+0xa98>
        }
        else
        {
          ret = HAL_ERROR;
 800c6fa:	2301      	movs	r3, #1
 800c6fc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c700:	e17a      	b.n	800c9f8 <UART_SetConfig+0xa98>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c702:	697b      	ldr	r3, [r7, #20]
 800c704:	69db      	ldr	r3, [r3, #28]
 800c706:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c70a:	f040 80c7 	bne.w	800c89c <UART_SetConfig+0x93c>
  {
    switch (clocksource)
 800c70e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c712:	2b20      	cmp	r3, #32
 800c714:	dc48      	bgt.n	800c7a8 <UART_SetConfig+0x848>
 800c716:	2b00      	cmp	r3, #0
 800c718:	db7b      	blt.n	800c812 <UART_SetConfig+0x8b2>
 800c71a:	2b20      	cmp	r3, #32
 800c71c:	d879      	bhi.n	800c812 <UART_SetConfig+0x8b2>
 800c71e:	a201      	add	r2, pc, #4	; (adr r2, 800c724 <UART_SetConfig+0x7c4>)
 800c720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c724:	0800c7af 	.word	0x0800c7af
 800c728:	0800c7b7 	.word	0x0800c7b7
 800c72c:	0800c813 	.word	0x0800c813
 800c730:	0800c813 	.word	0x0800c813
 800c734:	0800c7bf 	.word	0x0800c7bf
 800c738:	0800c813 	.word	0x0800c813
 800c73c:	0800c813 	.word	0x0800c813
 800c740:	0800c813 	.word	0x0800c813
 800c744:	0800c7cf 	.word	0x0800c7cf
 800c748:	0800c813 	.word	0x0800c813
 800c74c:	0800c813 	.word	0x0800c813
 800c750:	0800c813 	.word	0x0800c813
 800c754:	0800c813 	.word	0x0800c813
 800c758:	0800c813 	.word	0x0800c813
 800c75c:	0800c813 	.word	0x0800c813
 800c760:	0800c813 	.word	0x0800c813
 800c764:	0800c7df 	.word	0x0800c7df
 800c768:	0800c813 	.word	0x0800c813
 800c76c:	0800c813 	.word	0x0800c813
 800c770:	0800c813 	.word	0x0800c813
 800c774:	0800c813 	.word	0x0800c813
 800c778:	0800c813 	.word	0x0800c813
 800c77c:	0800c813 	.word	0x0800c813
 800c780:	0800c813 	.word	0x0800c813
 800c784:	0800c813 	.word	0x0800c813
 800c788:	0800c813 	.word	0x0800c813
 800c78c:	0800c813 	.word	0x0800c813
 800c790:	0800c813 	.word	0x0800c813
 800c794:	0800c813 	.word	0x0800c813
 800c798:	0800c813 	.word	0x0800c813
 800c79c:	0800c813 	.word	0x0800c813
 800c7a0:	0800c813 	.word	0x0800c813
 800c7a4:	0800c805 	.word	0x0800c805
 800c7a8:	2b40      	cmp	r3, #64	; 0x40
 800c7aa:	d02e      	beq.n	800c80a <UART_SetConfig+0x8aa>
 800c7ac:	e031      	b.n	800c812 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c7ae:	f7fc f865 	bl	800887c <HAL_RCC_GetPCLK1Freq>
 800c7b2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c7b4:	e033      	b.n	800c81e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c7b6:	f7fc f877 	bl	80088a8 <HAL_RCC_GetPCLK2Freq>
 800c7ba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c7bc:	e02f      	b.n	800c81e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c7be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	f7fd f824 	bl	8009810 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c7c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7cc:	e027      	b.n	800c81e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c7ce:	f107 0318 	add.w	r3, r7, #24
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	f7fd f970 	bl	8009ab8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c7d8:	69fb      	ldr	r3, [r7, #28]
 800c7da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7dc:	e01f      	b.n	800c81e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c7de:	4b2e      	ldr	r3, [pc, #184]	; (800c898 <UART_SetConfig+0x938>)
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	f003 0320 	and.w	r3, r3, #32
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d009      	beq.n	800c7fe <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c7ea:	4b2b      	ldr	r3, [pc, #172]	; (800c898 <UART_SetConfig+0x938>)
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	08db      	lsrs	r3, r3, #3
 800c7f0:	f003 0303 	and.w	r3, r3, #3
 800c7f4:	4a25      	ldr	r2, [pc, #148]	; (800c88c <UART_SetConfig+0x92c>)
 800c7f6:	fa22 f303 	lsr.w	r3, r2, r3
 800c7fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c7fc:	e00f      	b.n	800c81e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c7fe:	4b23      	ldr	r3, [pc, #140]	; (800c88c <UART_SetConfig+0x92c>)
 800c800:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c802:	e00c      	b.n	800c81e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c804:	4b22      	ldr	r3, [pc, #136]	; (800c890 <UART_SetConfig+0x930>)
 800c806:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c808:	e009      	b.n	800c81e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c80a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c80e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c810:	e005      	b.n	800c81e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c812:	2300      	movs	r3, #0
 800c814:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c816:	2301      	movs	r3, #1
 800c818:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c81c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c81e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c820:	2b00      	cmp	r3, #0
 800c822:	f000 80e9 	beq.w	800c9f8 <UART_SetConfig+0xa98>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c826:	697b      	ldr	r3, [r7, #20]
 800c828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c82a:	4a1a      	ldr	r2, [pc, #104]	; (800c894 <UART_SetConfig+0x934>)
 800c82c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c830:	461a      	mov	r2, r3
 800c832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c834:	fbb3 f3f2 	udiv	r3, r3, r2
 800c838:	005a      	lsls	r2, r3, #1
 800c83a:	697b      	ldr	r3, [r7, #20]
 800c83c:	685b      	ldr	r3, [r3, #4]
 800c83e:	085b      	lsrs	r3, r3, #1
 800c840:	441a      	add	r2, r3
 800c842:	697b      	ldr	r3, [r7, #20]
 800c844:	685b      	ldr	r3, [r3, #4]
 800c846:	fbb2 f3f3 	udiv	r3, r2, r3
 800c84a:	b29b      	uxth	r3, r3
 800c84c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c84e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c850:	2b0f      	cmp	r3, #15
 800c852:	d916      	bls.n	800c882 <UART_SetConfig+0x922>
 800c854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c856:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c85a:	d212      	bcs.n	800c882 <UART_SetConfig+0x922>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c85c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c85e:	b29b      	uxth	r3, r3
 800c860:	f023 030f 	bic.w	r3, r3, #15
 800c864:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c868:	085b      	lsrs	r3, r3, #1
 800c86a:	b29b      	uxth	r3, r3
 800c86c:	f003 0307 	and.w	r3, r3, #7
 800c870:	b29a      	uxth	r2, r3
 800c872:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c874:	4313      	orrs	r3, r2
 800c876:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800c878:	697b      	ldr	r3, [r7, #20]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c87e:	60da      	str	r2, [r3, #12]
 800c880:	e0ba      	b.n	800c9f8 <UART_SetConfig+0xa98>
      }
      else
      {
        ret = HAL_ERROR;
 800c882:	2301      	movs	r3, #1
 800c884:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c888:	e0b6      	b.n	800c9f8 <UART_SetConfig+0xa98>
 800c88a:	bf00      	nop
 800c88c:	03d09000 	.word	0x03d09000
 800c890:	003d0900 	.word	0x003d0900
 800c894:	08013a78 	.word	0x08013a78
 800c898:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800c89c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c8a0:	2b20      	cmp	r3, #32
 800c8a2:	dc49      	bgt.n	800c938 <UART_SetConfig+0x9d8>
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	db7c      	blt.n	800c9a2 <UART_SetConfig+0xa42>
 800c8a8:	2b20      	cmp	r3, #32
 800c8aa:	d87a      	bhi.n	800c9a2 <UART_SetConfig+0xa42>
 800c8ac:	a201      	add	r2, pc, #4	; (adr r2, 800c8b4 <UART_SetConfig+0x954>)
 800c8ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8b2:	bf00      	nop
 800c8b4:	0800c93f 	.word	0x0800c93f
 800c8b8:	0800c947 	.word	0x0800c947
 800c8bc:	0800c9a3 	.word	0x0800c9a3
 800c8c0:	0800c9a3 	.word	0x0800c9a3
 800c8c4:	0800c94f 	.word	0x0800c94f
 800c8c8:	0800c9a3 	.word	0x0800c9a3
 800c8cc:	0800c9a3 	.word	0x0800c9a3
 800c8d0:	0800c9a3 	.word	0x0800c9a3
 800c8d4:	0800c95f 	.word	0x0800c95f
 800c8d8:	0800c9a3 	.word	0x0800c9a3
 800c8dc:	0800c9a3 	.word	0x0800c9a3
 800c8e0:	0800c9a3 	.word	0x0800c9a3
 800c8e4:	0800c9a3 	.word	0x0800c9a3
 800c8e8:	0800c9a3 	.word	0x0800c9a3
 800c8ec:	0800c9a3 	.word	0x0800c9a3
 800c8f0:	0800c9a3 	.word	0x0800c9a3
 800c8f4:	0800c96f 	.word	0x0800c96f
 800c8f8:	0800c9a3 	.word	0x0800c9a3
 800c8fc:	0800c9a3 	.word	0x0800c9a3
 800c900:	0800c9a3 	.word	0x0800c9a3
 800c904:	0800c9a3 	.word	0x0800c9a3
 800c908:	0800c9a3 	.word	0x0800c9a3
 800c90c:	0800c9a3 	.word	0x0800c9a3
 800c910:	0800c9a3 	.word	0x0800c9a3
 800c914:	0800c9a3 	.word	0x0800c9a3
 800c918:	0800c9a3 	.word	0x0800c9a3
 800c91c:	0800c9a3 	.word	0x0800c9a3
 800c920:	0800c9a3 	.word	0x0800c9a3
 800c924:	0800c9a3 	.word	0x0800c9a3
 800c928:	0800c9a3 	.word	0x0800c9a3
 800c92c:	0800c9a3 	.word	0x0800c9a3
 800c930:	0800c9a3 	.word	0x0800c9a3
 800c934:	0800c995 	.word	0x0800c995
 800c938:	2b40      	cmp	r3, #64	; 0x40
 800c93a:	d02e      	beq.n	800c99a <UART_SetConfig+0xa3a>
 800c93c:	e031      	b.n	800c9a2 <UART_SetConfig+0xa42>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c93e:	f7fb ff9d 	bl	800887c <HAL_RCC_GetPCLK1Freq>
 800c942:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c944:	e033      	b.n	800c9ae <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c946:	f7fb ffaf 	bl	80088a8 <HAL_RCC_GetPCLK2Freq>
 800c94a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c94c:	e02f      	b.n	800c9ae <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c94e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c952:	4618      	mov	r0, r3
 800c954:	f7fc ff5c 	bl	8009810 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c95a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c95c:	e027      	b.n	800c9ae <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c95e:	f107 0318 	add.w	r3, r7, #24
 800c962:	4618      	mov	r0, r3
 800c964:	f7fd f8a8 	bl	8009ab8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c968:	69fb      	ldr	r3, [r7, #28]
 800c96a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c96c:	e01f      	b.n	800c9ae <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c96e:	4b2d      	ldr	r3, [pc, #180]	; (800ca24 <UART_SetConfig+0xac4>)
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	f003 0320 	and.w	r3, r3, #32
 800c976:	2b00      	cmp	r3, #0
 800c978:	d009      	beq.n	800c98e <UART_SetConfig+0xa2e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c97a:	4b2a      	ldr	r3, [pc, #168]	; (800ca24 <UART_SetConfig+0xac4>)
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	08db      	lsrs	r3, r3, #3
 800c980:	f003 0303 	and.w	r3, r3, #3
 800c984:	4a28      	ldr	r2, [pc, #160]	; (800ca28 <UART_SetConfig+0xac8>)
 800c986:	fa22 f303 	lsr.w	r3, r2, r3
 800c98a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c98c:	e00f      	b.n	800c9ae <UART_SetConfig+0xa4e>
          pclk = (uint32_t) HSI_VALUE;
 800c98e:	4b26      	ldr	r3, [pc, #152]	; (800ca28 <UART_SetConfig+0xac8>)
 800c990:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c992:	e00c      	b.n	800c9ae <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c994:	4b25      	ldr	r3, [pc, #148]	; (800ca2c <UART_SetConfig+0xacc>)
 800c996:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c998:	e009      	b.n	800c9ae <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c99a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c99e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9a0:	e005      	b.n	800c9ae <UART_SetConfig+0xa4e>
      default:
        pclk = 0U;
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c9a6:	2301      	movs	r3, #1
 800c9a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c9ac:	bf00      	nop
    }

    if (pclk != 0U)
 800c9ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d021      	beq.n	800c9f8 <UART_SetConfig+0xa98>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c9b4:	697b      	ldr	r3, [r7, #20]
 800c9b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9b8:	4a1d      	ldr	r2, [pc, #116]	; (800ca30 <UART_SetConfig+0xad0>)
 800c9ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c9be:	461a      	mov	r2, r3
 800c9c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9c2:	fbb3 f2f2 	udiv	r2, r3, r2
 800c9c6:	697b      	ldr	r3, [r7, #20]
 800c9c8:	685b      	ldr	r3, [r3, #4]
 800c9ca:	085b      	lsrs	r3, r3, #1
 800c9cc:	441a      	add	r2, r3
 800c9ce:	697b      	ldr	r3, [r7, #20]
 800c9d0:	685b      	ldr	r3, [r3, #4]
 800c9d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9d6:	b29b      	uxth	r3, r3
 800c9d8:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c9da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9dc:	2b0f      	cmp	r3, #15
 800c9de:	d908      	bls.n	800c9f2 <UART_SetConfig+0xa92>
 800c9e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c9e6:	d204      	bcs.n	800c9f2 <UART_SetConfig+0xa92>
      {
        huart->Instance->BRR = usartdiv;
 800c9e8:	697b      	ldr	r3, [r7, #20]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c9ee:	60da      	str	r2, [r3, #12]
 800c9f0:	e002      	b.n	800c9f8 <UART_SetConfig+0xa98>
      }
      else
      {
        ret = HAL_ERROR;
 800c9f2:	2301      	movs	r3, #1
 800c9f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c9f8:	697b      	ldr	r3, [r7, #20]
 800c9fa:	2201      	movs	r2, #1
 800c9fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ca00:	697b      	ldr	r3, [r7, #20]
 800ca02:	2201      	movs	r2, #1
 800ca04:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ca08:	697b      	ldr	r3, [r7, #20]
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800ca0e:	697b      	ldr	r3, [r7, #20]
 800ca10:	2200      	movs	r2, #0
 800ca12:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800ca14:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800ca18:	4618      	mov	r0, r3
 800ca1a:	3748      	adds	r7, #72	; 0x48
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ca22:	bf00      	nop
 800ca24:	58024400 	.word	0x58024400
 800ca28:	03d09000 	.word	0x03d09000
 800ca2c:	003d0900 	.word	0x003d0900
 800ca30:	08013a78 	.word	0x08013a78

0800ca34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ca34:	b480      	push	{r7}
 800ca36:	b083      	sub	sp, #12
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca40:	f003 0301 	and.w	r3, r3, #1
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d00a      	beq.n	800ca5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	685b      	ldr	r3, [r3, #4]
 800ca4e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	430a      	orrs	r2, r1
 800ca5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca62:	f003 0302 	and.w	r3, r3, #2
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d00a      	beq.n	800ca80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	685b      	ldr	r3, [r3, #4]
 800ca70:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	430a      	orrs	r2, r1
 800ca7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca84:	f003 0304 	and.w	r3, r3, #4
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d00a      	beq.n	800caa2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	685b      	ldr	r3, [r3, #4]
 800ca92:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	430a      	orrs	r2, r1
 800caa0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800caa6:	f003 0308 	and.w	r3, r3, #8
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d00a      	beq.n	800cac4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	685b      	ldr	r3, [r3, #4]
 800cab4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	430a      	orrs	r2, r1
 800cac2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cac8:	f003 0310 	and.w	r3, r3, #16
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d00a      	beq.n	800cae6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	689b      	ldr	r3, [r3, #8]
 800cad6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	430a      	orrs	r2, r1
 800cae4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800caea:	f003 0320 	and.w	r3, r3, #32
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d00a      	beq.n	800cb08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	689b      	ldr	r3, [r3, #8]
 800caf8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	430a      	orrs	r2, r1
 800cb06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d01a      	beq.n	800cb4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	685b      	ldr	r3, [r3, #4]
 800cb1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	430a      	orrs	r2, r1
 800cb28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cb32:	d10a      	bne.n	800cb4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	685b      	ldr	r3, [r3, #4]
 800cb3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	430a      	orrs	r2, r1
 800cb48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d00a      	beq.n	800cb6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	685b      	ldr	r3, [r3, #4]
 800cb5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	430a      	orrs	r2, r1
 800cb6a:	605a      	str	r2, [r3, #4]
  }
}
 800cb6c:	bf00      	nop
 800cb6e:	370c      	adds	r7, #12
 800cb70:	46bd      	mov	sp, r7
 800cb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb76:	4770      	bx	lr

0800cb78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b086      	sub	sp, #24
 800cb7c:	af02      	add	r7, sp, #8
 800cb7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	2200      	movs	r2, #0
 800cb84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cb88:	f7f5 faf4 	bl	8002174 <HAL_GetTick>
 800cb8c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	f003 0308 	and.w	r3, r3, #8
 800cb98:	2b08      	cmp	r3, #8
 800cb9a:	d10e      	bne.n	800cbba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cb9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cba0:	9300      	str	r3, [sp, #0]
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	2200      	movs	r2, #0
 800cba6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cbaa:	6878      	ldr	r0, [r7, #4]
 800cbac:	f000 f82f 	bl	800cc0e <UART_WaitOnFlagUntilTimeout>
 800cbb0:	4603      	mov	r3, r0
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d001      	beq.n	800cbba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cbb6:	2303      	movs	r3, #3
 800cbb8:	e025      	b.n	800cc06 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	f003 0304 	and.w	r3, r3, #4
 800cbc4:	2b04      	cmp	r3, #4
 800cbc6:	d10e      	bne.n	800cbe6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cbc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cbcc:	9300      	str	r3, [sp, #0]
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	2200      	movs	r2, #0
 800cbd2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800cbd6:	6878      	ldr	r0, [r7, #4]
 800cbd8:	f000 f819 	bl	800cc0e <UART_WaitOnFlagUntilTimeout>
 800cbdc:	4603      	mov	r3, r0
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d001      	beq.n	800cbe6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cbe2:	2303      	movs	r3, #3
 800cbe4:	e00f      	b.n	800cc06 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	2220      	movs	r2, #32
 800cbea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	2220      	movs	r2, #32
 800cbf2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	2200      	movs	r2, #0
 800cbfa:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	2200      	movs	r2, #0
 800cc00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cc04:	2300      	movs	r3, #0
}
 800cc06:	4618      	mov	r0, r3
 800cc08:	3710      	adds	r7, #16
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	bd80      	pop	{r7, pc}

0800cc0e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cc0e:	b580      	push	{r7, lr}
 800cc10:	b084      	sub	sp, #16
 800cc12:	af00      	add	r7, sp, #0
 800cc14:	60f8      	str	r0, [r7, #12]
 800cc16:	60b9      	str	r1, [r7, #8]
 800cc18:	603b      	str	r3, [r7, #0]
 800cc1a:	4613      	mov	r3, r2
 800cc1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cc1e:	e062      	b.n	800cce6 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cc20:	69bb      	ldr	r3, [r7, #24]
 800cc22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc26:	d05e      	beq.n	800cce6 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cc28:	f7f5 faa4 	bl	8002174 <HAL_GetTick>
 800cc2c:	4602      	mov	r2, r0
 800cc2e:	683b      	ldr	r3, [r7, #0]
 800cc30:	1ad3      	subs	r3, r2, r3
 800cc32:	69ba      	ldr	r2, [r7, #24]
 800cc34:	429a      	cmp	r2, r3
 800cc36:	d302      	bcc.n	800cc3e <UART_WaitOnFlagUntilTimeout+0x30>
 800cc38:	69bb      	ldr	r3, [r7, #24]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d11d      	bne.n	800cc7a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	681a      	ldr	r2, [r3, #0]
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800cc4c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	689a      	ldr	r2, [r3, #8]
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	f022 0201 	bic.w	r2, r2, #1
 800cc5c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	2220      	movs	r2, #32
 800cc62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	2220      	movs	r2, #32
 800cc6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	2200      	movs	r2, #0
 800cc72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800cc76:	2303      	movs	r3, #3
 800cc78:	e045      	b.n	800cd06 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	f003 0304 	and.w	r3, r3, #4
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d02e      	beq.n	800cce6 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	69db      	ldr	r3, [r3, #28]
 800cc8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cc92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cc96:	d126      	bne.n	800cce6 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cca0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	681a      	ldr	r2, [r3, #0]
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ccb0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	689a      	ldr	r2, [r3, #8]
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	f022 0201 	bic.w	r2, r2, #1
 800ccc0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	2220      	movs	r2, #32
 800ccc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	2220      	movs	r2, #32
 800ccce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	2220      	movs	r2, #32
 800ccd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	2200      	movs	r2, #0
 800ccde:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800cce2:	2303      	movs	r3, #3
 800cce4:	e00f      	b.n	800cd06 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	69da      	ldr	r2, [r3, #28]
 800ccec:	68bb      	ldr	r3, [r7, #8]
 800ccee:	4013      	ands	r3, r2
 800ccf0:	68ba      	ldr	r2, [r7, #8]
 800ccf2:	429a      	cmp	r2, r3
 800ccf4:	bf0c      	ite	eq
 800ccf6:	2301      	moveq	r3, #1
 800ccf8:	2300      	movne	r3, #0
 800ccfa:	b2db      	uxtb	r3, r3
 800ccfc:	461a      	mov	r2, r3
 800ccfe:	79fb      	ldrb	r3, [r7, #7]
 800cd00:	429a      	cmp	r2, r3
 800cd02:	d08d      	beq.n	800cc20 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cd04:	2300      	movs	r3, #0
}
 800cd06:	4618      	mov	r0, r3
 800cd08:	3710      	adds	r7, #16
 800cd0a:	46bd      	mov	sp, r7
 800cd0c:	bd80      	pop	{r7, pc}
	...

0800cd10 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cd10:	b580      	push	{r7, lr}
 800cd12:	b084      	sub	sp, #16
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	60f8      	str	r0, [r7, #12]
 800cd18:	60b9      	str	r1, [r7, #8]
 800cd1a:	4613      	mov	r3, r2
 800cd1c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	68ba      	ldr	r2, [r7, #8]
 800cd22:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	88fa      	ldrh	r2, [r7, #6]
 800cd28:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	2200      	movs	r2, #0
 800cd30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	2222      	movs	r2, #34	; 0x22
 800cd38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d02c      	beq.n	800cd9e <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd48:	4a25      	ldr	r2, [pc, #148]	; (800cde0 <UART_Start_Receive_DMA+0xd0>)
 800cd4a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd50:	4a24      	ldr	r2, [pc, #144]	; (800cde4 <UART_Start_Receive_DMA+0xd4>)
 800cd52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd58:	4a23      	ldr	r2, [pc, #140]	; (800cde8 <UART_Start_Receive_DMA+0xd8>)
 800cd5a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd60:	2200      	movs	r2, #0
 800cd62:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	3324      	adds	r3, #36	; 0x24
 800cd6e:	4619      	mov	r1, r3
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd74:	461a      	mov	r2, r3
 800cd76:	88fb      	ldrh	r3, [r7, #6]
 800cd78:	f7f5 ff2e 	bl	8002bd8 <HAL_DMA_Start_IT>
 800cd7c:	4603      	mov	r3, r0
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d00d      	beq.n	800cd9e <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	2210      	movs	r2, #16
 800cd86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	2200      	movs	r2, #0
 800cd8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	2220      	movs	r2, #32
 800cd96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      return HAL_ERROR;
 800cd9a:	2301      	movs	r3, #1
 800cd9c:	e01c      	b.n	800cdd8 <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	2200      	movs	r2, #0
 800cda2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	681a      	ldr	r2, [r3, #0]
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cdb4:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	689a      	ldr	r2, [r3, #8]
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	f042 0201 	orr.w	r2, r2, #1
 800cdc4:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	689a      	ldr	r2, [r3, #8]
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cdd4:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800cdd6:	2300      	movs	r3, #0
}
 800cdd8:	4618      	mov	r0, r3
 800cdda:	3710      	adds	r7, #16
 800cddc:	46bd      	mov	sp, r7
 800cdde:	bd80      	pop	{r7, pc}
 800cde0:	0800ce8d 	.word	0x0800ce8d
 800cde4:	0800cf23 	.word	0x0800cf23
 800cde8:	0800cf5b 	.word	0x0800cf5b

0800cdec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800cdec:	b480      	push	{r7}
 800cdee:	b083      	sub	sp, #12
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	681a      	ldr	r2, [r3, #0]
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800ce02:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	689a      	ldr	r2, [r3, #8]
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800ce12:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	2220      	movs	r2, #32
 800ce18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800ce1c:	bf00      	nop
 800ce1e:	370c      	adds	r7, #12
 800ce20:	46bd      	mov	sp, r7
 800ce22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce26:	4770      	bx	lr

0800ce28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ce28:	b480      	push	{r7}
 800ce2a:	b083      	sub	sp, #12
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	681a      	ldr	r2, [r3, #0]
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ce3e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	6899      	ldr	r1, [r3, #8]
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681a      	ldr	r2, [r3, #0]
 800ce4a:	4b0f      	ldr	r3, [pc, #60]	; (800ce88 <UART_EndRxTransfer+0x60>)
 800ce4c:	400b      	ands	r3, r1
 800ce4e:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce54:	2b01      	cmp	r3, #1
 800ce56:	d107      	bne.n	800ce68 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	681a      	ldr	r2, [r3, #0]
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	f022 0210 	bic.w	r2, r2, #16
 800ce66:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	2220      	movs	r2, #32
 800ce6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	2200      	movs	r2, #0
 800ce74:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	2200      	movs	r2, #0
 800ce7a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800ce7c:	bf00      	nop
 800ce7e:	370c      	adds	r7, #12
 800ce80:	46bd      	mov	sp, r7
 800ce82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce86:	4770      	bx	lr
 800ce88:	effffffe 	.word	0xeffffffe

0800ce8c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b084      	sub	sp, #16
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce98:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	69db      	ldr	r3, [r3, #28]
 800ce9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cea2:	d02b      	beq.n	800cefc <UART_DMAReceiveCplt+0x70>
  {
    huart->RxXferCount = 0U;
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	2200      	movs	r2, #0
 800cea8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	681a      	ldr	r2, [r3, #0]
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ceba:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	689a      	ldr	r2, [r3, #8]
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	f022 0201 	bic.w	r2, r2, #1
 800ceca:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	689a      	ldr	r2, [r3, #8]
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ceda:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	2220      	movs	r2, #32
 800cee0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cee8:	2b01      	cmp	r3, #1
 800ceea:	d107      	bne.n	800cefc <UART_DMAReceiveCplt+0x70>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	681a      	ldr	r2, [r3, #0]
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	f022 0210 	bic.w	r2, r2, #16
 800cefa:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf00:	2b01      	cmp	r3, #1
 800cf02:	d107      	bne.n	800cf14 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cf0a:	4619      	mov	r1, r3
 800cf0c:	68f8      	ldr	r0, [r7, #12]
 800cf0e:	f7ff f81b 	bl	800bf48 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cf12:	e002      	b.n	800cf1a <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800cf14:	68f8      	ldr	r0, [r7, #12]
 800cf16:	f7f4 f9f3 	bl	8001300 <HAL_UART_RxCpltCallback>
}
 800cf1a:	bf00      	nop
 800cf1c:	3710      	adds	r7, #16
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	bd80      	pop	{r7, pc}

0800cf22 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cf22:	b580      	push	{r7, lr}
 800cf24:	b084      	sub	sp, #16
 800cf26:	af00      	add	r7, sp, #0
 800cf28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf2e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf34:	2b01      	cmp	r3, #1
 800cf36:	d109      	bne.n	800cf4c <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cf3e:	085b      	lsrs	r3, r3, #1
 800cf40:	b29b      	uxth	r3, r3
 800cf42:	4619      	mov	r1, r3
 800cf44:	68f8      	ldr	r0, [r7, #12]
 800cf46:	f7fe ffff 	bl	800bf48 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cf4a:	e002      	b.n	800cf52 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800cf4c:	68f8      	ldr	r0, [r7, #12]
 800cf4e:	f7fe ffe7 	bl	800bf20 <HAL_UART_RxHalfCpltCallback>
}
 800cf52:	bf00      	nop
 800cf54:	3710      	adds	r7, #16
 800cf56:	46bd      	mov	sp, r7
 800cf58:	bd80      	pop	{r7, pc}

0800cf5a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800cf5a:	b580      	push	{r7, lr}
 800cf5c:	b086      	sub	sp, #24
 800cf5e:	af00      	add	r7, sp, #0
 800cf60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf66:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800cf68:	697b      	ldr	r3, [r7, #20]
 800cf6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cf6e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800cf70:	697b      	ldr	r3, [r7, #20]
 800cf72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf76:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800cf78:	697b      	ldr	r3, [r7, #20]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	689b      	ldr	r3, [r3, #8]
 800cf7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf82:	2b80      	cmp	r3, #128	; 0x80
 800cf84:	d109      	bne.n	800cf9a <UART_DMAError+0x40>
 800cf86:	693b      	ldr	r3, [r7, #16]
 800cf88:	2b21      	cmp	r3, #33	; 0x21
 800cf8a:	d106      	bne.n	800cf9a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800cf8c:	697b      	ldr	r3, [r7, #20]
 800cf8e:	2200      	movs	r2, #0
 800cf90:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800cf94:	6978      	ldr	r0, [r7, #20]
 800cf96:	f7ff ff29 	bl	800cdec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800cf9a:	697b      	ldr	r3, [r7, #20]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	689b      	ldr	r3, [r3, #8]
 800cfa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cfa4:	2b40      	cmp	r3, #64	; 0x40
 800cfa6:	d109      	bne.n	800cfbc <UART_DMAError+0x62>
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	2b22      	cmp	r3, #34	; 0x22
 800cfac:	d106      	bne.n	800cfbc <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800cfae:	697b      	ldr	r3, [r7, #20]
 800cfb0:	2200      	movs	r2, #0
 800cfb2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800cfb6:	6978      	ldr	r0, [r7, #20]
 800cfb8:	f7ff ff36 	bl	800ce28 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800cfbc:	697b      	ldr	r3, [r7, #20]
 800cfbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cfc2:	f043 0210 	orr.w	r2, r3, #16
 800cfc6:	697b      	ldr	r3, [r7, #20]
 800cfc8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cfcc:	6978      	ldr	r0, [r7, #20]
 800cfce:	f7fe ffb1 	bl	800bf34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cfd2:	bf00      	nop
 800cfd4:	3718      	adds	r7, #24
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	bd80      	pop	{r7, pc}

0800cfda <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cfda:	b580      	push	{r7, lr}
 800cfdc:	b084      	sub	sp, #16
 800cfde:	af00      	add	r7, sp, #0
 800cfe0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfe6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	2200      	movs	r2, #0
 800cfec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	2200      	movs	r2, #0
 800cff4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cff8:	68f8      	ldr	r0, [r7, #12]
 800cffa:	f7fe ff9b 	bl	800bf34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cffe:	bf00      	nop
 800d000:	3710      	adds	r7, #16
 800d002:	46bd      	mov	sp, r7
 800d004:	bd80      	pop	{r7, pc}

0800d006 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d006:	b580      	push	{r7, lr}
 800d008:	b082      	sub	sp, #8
 800d00a:	af00      	add	r7, sp, #0
 800d00c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	681a      	ldr	r2, [r3, #0]
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d01c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	2220      	movs	r2, #32
 800d022:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	2200      	movs	r2, #0
 800d02a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d02c:	6878      	ldr	r0, [r7, #4]
 800d02e:	f7fe ff6d 	bl	800bf0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d032:	bf00      	nop
 800d034:	3708      	adds	r7, #8
 800d036:	46bd      	mov	sp, r7
 800d038:	bd80      	pop	{r7, pc}

0800d03a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d03a:	b480      	push	{r7}
 800d03c:	b083      	sub	sp, #12
 800d03e:	af00      	add	r7, sp, #0
 800d040:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d042:	bf00      	nop
 800d044:	370c      	adds	r7, #12
 800d046:	46bd      	mov	sp, r7
 800d048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04c:	4770      	bx	lr

0800d04e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d04e:	b480      	push	{r7}
 800d050:	b083      	sub	sp, #12
 800d052:	af00      	add	r7, sp, #0
 800d054:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d056:	bf00      	nop
 800d058:	370c      	adds	r7, #12
 800d05a:	46bd      	mov	sp, r7
 800d05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d060:	4770      	bx	lr

0800d062 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d062:	b480      	push	{r7}
 800d064:	b083      	sub	sp, #12
 800d066:	af00      	add	r7, sp, #0
 800d068:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d06a:	bf00      	nop
 800d06c:	370c      	adds	r7, #12
 800d06e:	46bd      	mov	sp, r7
 800d070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d074:	4770      	bx	lr

0800d076 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d076:	b480      	push	{r7}
 800d078:	b085      	sub	sp, #20
 800d07a:	af00      	add	r7, sp, #0
 800d07c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d084:	2b01      	cmp	r3, #1
 800d086:	d101      	bne.n	800d08c <HAL_UARTEx_DisableFifoMode+0x16>
 800d088:	2302      	movs	r3, #2
 800d08a:	e027      	b.n	800d0dc <HAL_UARTEx_DisableFifoMode+0x66>
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	2201      	movs	r2, #1
 800d090:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	2224      	movs	r2, #36	; 0x24
 800d098:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	681a      	ldr	r2, [r3, #0]
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	f022 0201 	bic.w	r2, r2, #1
 800d0b2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d0ba:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	2200      	movs	r2, #0
 800d0c0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	68fa      	ldr	r2, [r7, #12]
 800d0c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	2220      	movs	r2, #32
 800d0ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d0da:	2300      	movs	r3, #0
}
 800d0dc:	4618      	mov	r0, r3
 800d0de:	3714      	adds	r7, #20
 800d0e0:	46bd      	mov	sp, r7
 800d0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e6:	4770      	bx	lr

0800d0e8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b084      	sub	sp, #16
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
 800d0f0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d0f8:	2b01      	cmp	r3, #1
 800d0fa:	d101      	bne.n	800d100 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d0fc:	2302      	movs	r3, #2
 800d0fe:	e02d      	b.n	800d15c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	2201      	movs	r2, #1
 800d104:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	2224      	movs	r2, #36	; 0x24
 800d10c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	681a      	ldr	r2, [r3, #0]
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	f022 0201 	bic.w	r2, r2, #1
 800d126:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	689b      	ldr	r3, [r3, #8]
 800d12e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	683a      	ldr	r2, [r7, #0]
 800d138:	430a      	orrs	r2, r1
 800d13a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d13c:	6878      	ldr	r0, [r7, #4]
 800d13e:	f000 f84f 	bl	800d1e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	68fa      	ldr	r2, [r7, #12]
 800d148:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	2220      	movs	r2, #32
 800d14e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	2200      	movs	r2, #0
 800d156:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d15a:	2300      	movs	r3, #0
}
 800d15c:	4618      	mov	r0, r3
 800d15e:	3710      	adds	r7, #16
 800d160:	46bd      	mov	sp, r7
 800d162:	bd80      	pop	{r7, pc}

0800d164 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d164:	b580      	push	{r7, lr}
 800d166:	b084      	sub	sp, #16
 800d168:	af00      	add	r7, sp, #0
 800d16a:	6078      	str	r0, [r7, #4]
 800d16c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d174:	2b01      	cmp	r3, #1
 800d176:	d101      	bne.n	800d17c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d178:	2302      	movs	r3, #2
 800d17a:	e02d      	b.n	800d1d8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	2201      	movs	r2, #1
 800d180:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	2224      	movs	r2, #36	; 0x24
 800d188:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	681a      	ldr	r2, [r3, #0]
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	f022 0201 	bic.w	r2, r2, #1
 800d1a2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	689b      	ldr	r3, [r3, #8]
 800d1aa:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	683a      	ldr	r2, [r7, #0]
 800d1b4:	430a      	orrs	r2, r1
 800d1b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d1b8:	6878      	ldr	r0, [r7, #4]
 800d1ba:	f000 f811 	bl	800d1e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	68fa      	ldr	r2, [r7, #12]
 800d1c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	2220      	movs	r2, #32
 800d1ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	2200      	movs	r2, #0
 800d1d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d1d6:	2300      	movs	r3, #0
}
 800d1d8:	4618      	mov	r0, r3
 800d1da:	3710      	adds	r7, #16
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	bd80      	pop	{r7, pc}

0800d1e0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d1e0:	b480      	push	{r7}
 800d1e2:	b085      	sub	sp, #20
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d108      	bne.n	800d202 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	2201      	movs	r2, #1
 800d1f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	2201      	movs	r2, #1
 800d1fc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d200:	e031      	b.n	800d266 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d202:	2310      	movs	r3, #16
 800d204:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d206:	2310      	movs	r3, #16
 800d208:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	689b      	ldr	r3, [r3, #8]
 800d210:	0e5b      	lsrs	r3, r3, #25
 800d212:	b2db      	uxtb	r3, r3
 800d214:	f003 0307 	and.w	r3, r3, #7
 800d218:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	689b      	ldr	r3, [r3, #8]
 800d220:	0f5b      	lsrs	r3, r3, #29
 800d222:	b2db      	uxtb	r3, r3
 800d224:	f003 0307 	and.w	r3, r3, #7
 800d228:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d22a:	7bbb      	ldrb	r3, [r7, #14]
 800d22c:	7b3a      	ldrb	r2, [r7, #12]
 800d22e:	4911      	ldr	r1, [pc, #68]	; (800d274 <UARTEx_SetNbDataToProcess+0x94>)
 800d230:	5c8a      	ldrb	r2, [r1, r2]
 800d232:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d236:	7b3a      	ldrb	r2, [r7, #12]
 800d238:	490f      	ldr	r1, [pc, #60]	; (800d278 <UARTEx_SetNbDataToProcess+0x98>)
 800d23a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d23c:	fb93 f3f2 	sdiv	r3, r3, r2
 800d240:	b29a      	uxth	r2, r3
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d248:	7bfb      	ldrb	r3, [r7, #15]
 800d24a:	7b7a      	ldrb	r2, [r7, #13]
 800d24c:	4909      	ldr	r1, [pc, #36]	; (800d274 <UARTEx_SetNbDataToProcess+0x94>)
 800d24e:	5c8a      	ldrb	r2, [r1, r2]
 800d250:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d254:	7b7a      	ldrb	r2, [r7, #13]
 800d256:	4908      	ldr	r1, [pc, #32]	; (800d278 <UARTEx_SetNbDataToProcess+0x98>)
 800d258:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d25a:	fb93 f3f2 	sdiv	r3, r3, r2
 800d25e:	b29a      	uxth	r2, r3
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d266:	bf00      	nop
 800d268:	3714      	adds	r7, #20
 800d26a:	46bd      	mov	sp, r7
 800d26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d270:	4770      	bx	lr
 800d272:	bf00      	nop
 800d274:	08013a90 	.word	0x08013a90
 800d278:	08013a98 	.word	0x08013a98

0800d27c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800d27c:	b480      	push	{r7}
 800d27e:	b083      	sub	sp, #12
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800d28a:	4618      	mov	r0, r3
 800d28c:	370c      	adds	r7, #12
 800d28e:	46bd      	mov	sp, r7
 800d290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d294:	4770      	bx	lr

0800d296 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800d296:	b480      	push	{r7}
 800d298:	b083      	sub	sp, #12
 800d29a:	af00      	add	r7, sp, #0
 800d29c:	6078      	str	r0, [r7, #4]
 800d29e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800d2a0:	683b      	ldr	r3, [r7, #0]
 800d2a2:	681a      	ldr	r2, [r3, #0]
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d2aa:	2300      	movs	r3, #0
}
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	370c      	adds	r7, #12
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b6:	4770      	bx	lr

0800d2b8 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800d2b8:	b480      	push	{r7}
 800d2ba:	b085      	sub	sp, #20
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	6078      	str	r0, [r7, #4]
 800d2c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800d2c6:	683b      	ldr	r3, [r7, #0]
 800d2c8:	681a      	ldr	r2, [r3, #0]
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800d2ce:	683b      	ldr	r3, [r7, #0]
 800d2d0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800d2d2:	683b      	ldr	r3, [r7, #0]
 800d2d4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800d2d6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800d2d8:	683b      	ldr	r3, [r7, #0]
 800d2da:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800d2dc:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d2de:	683b      	ldr	r3, [r7, #0]
 800d2e0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800d2e2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800d2e4:	68fa      	ldr	r2, [r7, #12]
 800d2e6:	4313      	orrs	r3, r2
 800d2e8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	68da      	ldr	r2, [r3, #12]
 800d2ee:	4b06      	ldr	r3, [pc, #24]	; (800d308 <SDMMC_SendCommand+0x50>)
 800d2f0:	4013      	ands	r3, r2
 800d2f2:	68fa      	ldr	r2, [r7, #12]
 800d2f4:	431a      	orrs	r2, r3
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d2fa:	2300      	movs	r3, #0
}
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	3714      	adds	r7, #20
 800d300:	46bd      	mov	sp, r7
 800d302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d306:	4770      	bx	lr
 800d308:	fffee0c0 	.word	0xfffee0c0

0800d30c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800d30c:	b480      	push	{r7}
 800d30e:	b083      	sub	sp, #12
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	691b      	ldr	r3, [r3, #16]
 800d318:	b2db      	uxtb	r3, r3
}
 800d31a:	4618      	mov	r0, r3
 800d31c:	370c      	adds	r7, #12
 800d31e:	46bd      	mov	sp, r7
 800d320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d324:	4770      	bx	lr

0800d326 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800d326:	b480      	push	{r7}
 800d328:	b085      	sub	sp, #20
 800d32a:	af00      	add	r7, sp, #0
 800d32c:	6078      	str	r0, [r7, #4]
 800d32e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	3314      	adds	r3, #20
 800d334:	461a      	mov	r2, r3
 800d336:	683b      	ldr	r3, [r7, #0]
 800d338:	4413      	add	r3, r2
 800d33a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	681b      	ldr	r3, [r3, #0]
}
 800d340:	4618      	mov	r0, r3
 800d342:	3714      	adds	r7, #20
 800d344:	46bd      	mov	sp, r7
 800d346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d34a:	4770      	bx	lr

0800d34c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b088      	sub	sp, #32
 800d350:	af00      	add	r7, sp, #0
 800d352:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800d354:	2300      	movs	r3, #0
 800d356:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800d358:	230c      	movs	r3, #12
 800d35a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d35c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d360:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d362:	2300      	movs	r3, #0
 800d364:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d366:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d36a:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	68db      	ldr	r3, [r3, #12]
 800d370:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	68db      	ldr	r3, [r3, #12]
 800d37c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d384:	f107 0308 	add.w	r3, r7, #8
 800d388:	4619      	mov	r1, r3
 800d38a:	6878      	ldr	r0, [r7, #4]
 800d38c:	f7ff ff94 	bl	800d2b8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800d390:	4a0b      	ldr	r2, [pc, #44]	; (800d3c0 <SDMMC_CmdStopTransfer+0x74>)
 800d392:	210c      	movs	r1, #12
 800d394:	6878      	ldr	r0, [r7, #4]
 800d396:	f000 f815 	bl	800d3c4 <SDMMC_GetCmdResp1>
 800d39a:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	68db      	ldr	r3, [r3, #12]
 800d3a0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800d3a8:	69fb      	ldr	r3, [r7, #28]
 800d3aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d3ae:	d101      	bne.n	800d3b4 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800d3b4:	69fb      	ldr	r3, [r7, #28]
}
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	3720      	adds	r7, #32
 800d3ba:	46bd      	mov	sp, r7
 800d3bc:	bd80      	pop	{r7, pc}
 800d3be:	bf00      	nop
 800d3c0:	05f5e100 	.word	0x05f5e100

0800d3c4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d3c4:	b580      	push	{r7, lr}
 800d3c6:	b088      	sub	sp, #32
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	60f8      	str	r0, [r7, #12]
 800d3cc:	460b      	mov	r3, r1
 800d3ce:	607a      	str	r2, [r7, #4]
 800d3d0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800d3d2:	4b70      	ldr	r3, [pc, #448]	; (800d594 <SDMMC_GetCmdResp1+0x1d0>)
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	4a70      	ldr	r2, [pc, #448]	; (800d598 <SDMMC_GetCmdResp1+0x1d4>)
 800d3d8:	fba2 2303 	umull	r2, r3, r2, r3
 800d3dc:	0a5a      	lsrs	r2, r3, #9
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	fb02 f303 	mul.w	r3, r2, r3
 800d3e4:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800d3e6:	69fb      	ldr	r3, [r7, #28]
 800d3e8:	1e5a      	subs	r2, r3, #1
 800d3ea:	61fa      	str	r2, [r7, #28]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d102      	bne.n	800d3f6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d3f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d3f4:	e0c9      	b.n	800d58a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3fa:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800d3fc:	69ba      	ldr	r2, [r7, #24]
 800d3fe:	4b67      	ldr	r3, [pc, #412]	; (800d59c <SDMMC_GetCmdResp1+0x1d8>)
 800d400:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d402:	2b00      	cmp	r3, #0
 800d404:	d0ef      	beq.n	800d3e6 <SDMMC_GetCmdResp1+0x22>
 800d406:	69bb      	ldr	r3, [r7, #24]
 800d408:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d1ea      	bne.n	800d3e6 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d414:	f003 0304 	and.w	r3, r3, #4
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d004      	beq.n	800d426 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	2204      	movs	r2, #4
 800d420:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d422:	2304      	movs	r3, #4
 800d424:	e0b1      	b.n	800d58a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d42a:	f003 0301 	and.w	r3, r3, #1
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d004      	beq.n	800d43c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	2201      	movs	r2, #1
 800d436:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d438:	2301      	movs	r3, #1
 800d43a:	e0a6      	b.n	800d58a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	4a58      	ldr	r2, [pc, #352]	; (800d5a0 <SDMMC_GetCmdResp1+0x1dc>)
 800d440:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d442:	68f8      	ldr	r0, [r7, #12]
 800d444:	f7ff ff62 	bl	800d30c <SDMMC_GetCommandResponse>
 800d448:	4603      	mov	r3, r0
 800d44a:	461a      	mov	r2, r3
 800d44c:	7afb      	ldrb	r3, [r7, #11]
 800d44e:	4293      	cmp	r3, r2
 800d450:	d001      	beq.n	800d456 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d452:	2301      	movs	r3, #1
 800d454:	e099      	b.n	800d58a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d456:	2100      	movs	r1, #0
 800d458:	68f8      	ldr	r0, [r7, #12]
 800d45a:	f7ff ff64 	bl	800d326 <SDMMC_GetResponse>
 800d45e:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d460:	697a      	ldr	r2, [r7, #20]
 800d462:	4b50      	ldr	r3, [pc, #320]	; (800d5a4 <SDMMC_GetCmdResp1+0x1e0>)
 800d464:	4013      	ands	r3, r2
 800d466:	2b00      	cmp	r3, #0
 800d468:	d101      	bne.n	800d46e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800d46a:	2300      	movs	r3, #0
 800d46c:	e08d      	b.n	800d58a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d46e:	697b      	ldr	r3, [r7, #20]
 800d470:	2b00      	cmp	r3, #0
 800d472:	da02      	bge.n	800d47a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d474:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d478:	e087      	b.n	800d58a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d47a:	697b      	ldr	r3, [r7, #20]
 800d47c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d480:	2b00      	cmp	r3, #0
 800d482:	d001      	beq.n	800d488 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d484:	2340      	movs	r3, #64	; 0x40
 800d486:	e080      	b.n	800d58a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d488:	697b      	ldr	r3, [r7, #20]
 800d48a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d001      	beq.n	800d496 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d492:	2380      	movs	r3, #128	; 0x80
 800d494:	e079      	b.n	800d58a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d496:	697b      	ldr	r3, [r7, #20]
 800d498:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d002      	beq.n	800d4a6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d4a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d4a4:	e071      	b.n	800d58a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d4a6:	697b      	ldr	r3, [r7, #20]
 800d4a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d002      	beq.n	800d4b6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d4b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d4b4:	e069      	b.n	800d58a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d4b6:	697b      	ldr	r3, [r7, #20]
 800d4b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d002      	beq.n	800d4c6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d4c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d4c4:	e061      	b.n	800d58a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d4c6:	697b      	ldr	r3, [r7, #20]
 800d4c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d002      	beq.n	800d4d6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d4d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d4d4:	e059      	b.n	800d58a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d4d6:	697b      	ldr	r3, [r7, #20]
 800d4d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d002      	beq.n	800d4e6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d4e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d4e4:	e051      	b.n	800d58a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d4e6:	697b      	ldr	r3, [r7, #20]
 800d4e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d002      	beq.n	800d4f6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d4f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d4f4:	e049      	b.n	800d58a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d4f6:	697b      	ldr	r3, [r7, #20]
 800d4f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d002      	beq.n	800d506 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d500:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d504:	e041      	b.n	800d58a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d506:	697b      	ldr	r3, [r7, #20]
 800d508:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d002      	beq.n	800d516 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800d510:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d514:	e039      	b.n	800d58a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d516:	697b      	ldr	r3, [r7, #20]
 800d518:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d002      	beq.n	800d526 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d520:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d524:	e031      	b.n	800d58a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d526:	697b      	ldr	r3, [r7, #20]
 800d528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d002      	beq.n	800d536 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d530:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d534:	e029      	b.n	800d58a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d536:	697b      	ldr	r3, [r7, #20]
 800d538:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d002      	beq.n	800d546 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d540:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d544:	e021      	b.n	800d58a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d546:	697b      	ldr	r3, [r7, #20]
 800d548:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d002      	beq.n	800d556 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d550:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800d554:	e019      	b.n	800d58a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d556:	697b      	ldr	r3, [r7, #20]
 800d558:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d002      	beq.n	800d566 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d560:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d564:	e011      	b.n	800d58a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d566:	697b      	ldr	r3, [r7, #20]
 800d568:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d002      	beq.n	800d576 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d570:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d574:	e009      	b.n	800d58a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d576:	697b      	ldr	r3, [r7, #20]
 800d578:	f003 0308 	and.w	r3, r3, #8
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d002      	beq.n	800d586 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d580:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d584:	e001      	b.n	800d58a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d586:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d58a:	4618      	mov	r0, r3
 800d58c:	3720      	adds	r7, #32
 800d58e:	46bd      	mov	sp, r7
 800d590:	bd80      	pop	{r7, pc}
 800d592:	bf00      	nop
 800d594:	24000000 	.word	0x24000000
 800d598:	10624dd3 	.word	0x10624dd3
 800d59c:	00200045 	.word	0x00200045
 800d5a0:	002000c5 	.word	0x002000c5
 800d5a4:	fdffe008 	.word	0xfdffe008

0800d5a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d5a8:	b084      	sub	sp, #16
 800d5aa:	b580      	push	{r7, lr}
 800d5ac:	b084      	sub	sp, #16
 800d5ae:	af00      	add	r7, sp, #0
 800d5b0:	6078      	str	r0, [r7, #4]
 800d5b2:	f107 001c 	add.w	r0, r7, #28
 800d5b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d5ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5bc:	2b01      	cmp	r3, #1
 800d5be:	d120      	bne.n	800d602 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	68da      	ldr	r2, [r3, #12]
 800d5d0:	4b2a      	ldr	r3, [pc, #168]	; (800d67c <USB_CoreInit+0xd4>)
 800d5d2:	4013      	ands	r3, r2
 800d5d4:	687a      	ldr	r2, [r7, #4]
 800d5d6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	68db      	ldr	r3, [r3, #12]
 800d5dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d5e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d5e6:	2b01      	cmp	r3, #1
 800d5e8:	d105      	bne.n	800d5f6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	68db      	ldr	r3, [r3, #12]
 800d5ee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d5f6:	6878      	ldr	r0, [r7, #4]
 800d5f8:	f001 fb14 	bl	800ec24 <USB_CoreReset>
 800d5fc:	4603      	mov	r3, r0
 800d5fe:	73fb      	strb	r3, [r7, #15]
 800d600:	e01a      	b.n	800d638 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	68db      	ldr	r3, [r3, #12]
 800d606:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d60e:	6878      	ldr	r0, [r7, #4]
 800d610:	f001 fb08 	bl	800ec24 <USB_CoreReset>
 800d614:	4603      	mov	r3, r0
 800d616:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800d618:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d106      	bne.n	800d62c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d622:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	639a      	str	r2, [r3, #56]	; 0x38
 800d62a:	e005      	b.n	800d638 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d630:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800d638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d63a:	2b01      	cmp	r3, #1
 800d63c:	d116      	bne.n	800d66c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d642:	b29a      	uxth	r2, r3
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d64c:	4b0c      	ldr	r3, [pc, #48]	; (800d680 <USB_CoreInit+0xd8>)
 800d64e:	4313      	orrs	r3, r2
 800d650:	687a      	ldr	r2, [r7, #4]
 800d652:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	689b      	ldr	r3, [r3, #8]
 800d658:	f043 0206 	orr.w	r2, r3, #6
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	689b      	ldr	r3, [r3, #8]
 800d664:	f043 0220 	orr.w	r2, r3, #32
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d66c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d66e:	4618      	mov	r0, r3
 800d670:	3710      	adds	r7, #16
 800d672:	46bd      	mov	sp, r7
 800d674:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d678:	b004      	add	sp, #16
 800d67a:	4770      	bx	lr
 800d67c:	ffbdffbf 	.word	0xffbdffbf
 800d680:	03ee0000 	.word	0x03ee0000

0800d684 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800d684:	b480      	push	{r7}
 800d686:	b087      	sub	sp, #28
 800d688:	af00      	add	r7, sp, #0
 800d68a:	60f8      	str	r0, [r7, #12]
 800d68c:	60b9      	str	r1, [r7, #8]
 800d68e:	4613      	mov	r3, r2
 800d690:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800d692:	79fb      	ldrb	r3, [r7, #7]
 800d694:	2b02      	cmp	r3, #2
 800d696:	d165      	bne.n	800d764 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800d698:	68bb      	ldr	r3, [r7, #8]
 800d69a:	4a41      	ldr	r2, [pc, #260]	; (800d7a0 <USB_SetTurnaroundTime+0x11c>)
 800d69c:	4293      	cmp	r3, r2
 800d69e:	d906      	bls.n	800d6ae <USB_SetTurnaroundTime+0x2a>
 800d6a0:	68bb      	ldr	r3, [r7, #8]
 800d6a2:	4a40      	ldr	r2, [pc, #256]	; (800d7a4 <USB_SetTurnaroundTime+0x120>)
 800d6a4:	4293      	cmp	r3, r2
 800d6a6:	d202      	bcs.n	800d6ae <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800d6a8:	230f      	movs	r3, #15
 800d6aa:	617b      	str	r3, [r7, #20]
 800d6ac:	e062      	b.n	800d774 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800d6ae:	68bb      	ldr	r3, [r7, #8]
 800d6b0:	4a3c      	ldr	r2, [pc, #240]	; (800d7a4 <USB_SetTurnaroundTime+0x120>)
 800d6b2:	4293      	cmp	r3, r2
 800d6b4:	d306      	bcc.n	800d6c4 <USB_SetTurnaroundTime+0x40>
 800d6b6:	68bb      	ldr	r3, [r7, #8]
 800d6b8:	4a3b      	ldr	r2, [pc, #236]	; (800d7a8 <USB_SetTurnaroundTime+0x124>)
 800d6ba:	4293      	cmp	r3, r2
 800d6bc:	d202      	bcs.n	800d6c4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800d6be:	230e      	movs	r3, #14
 800d6c0:	617b      	str	r3, [r7, #20]
 800d6c2:	e057      	b.n	800d774 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800d6c4:	68bb      	ldr	r3, [r7, #8]
 800d6c6:	4a38      	ldr	r2, [pc, #224]	; (800d7a8 <USB_SetTurnaroundTime+0x124>)
 800d6c8:	4293      	cmp	r3, r2
 800d6ca:	d306      	bcc.n	800d6da <USB_SetTurnaroundTime+0x56>
 800d6cc:	68bb      	ldr	r3, [r7, #8]
 800d6ce:	4a37      	ldr	r2, [pc, #220]	; (800d7ac <USB_SetTurnaroundTime+0x128>)
 800d6d0:	4293      	cmp	r3, r2
 800d6d2:	d202      	bcs.n	800d6da <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800d6d4:	230d      	movs	r3, #13
 800d6d6:	617b      	str	r3, [r7, #20]
 800d6d8:	e04c      	b.n	800d774 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800d6da:	68bb      	ldr	r3, [r7, #8]
 800d6dc:	4a33      	ldr	r2, [pc, #204]	; (800d7ac <USB_SetTurnaroundTime+0x128>)
 800d6de:	4293      	cmp	r3, r2
 800d6e0:	d306      	bcc.n	800d6f0 <USB_SetTurnaroundTime+0x6c>
 800d6e2:	68bb      	ldr	r3, [r7, #8]
 800d6e4:	4a32      	ldr	r2, [pc, #200]	; (800d7b0 <USB_SetTurnaroundTime+0x12c>)
 800d6e6:	4293      	cmp	r3, r2
 800d6e8:	d802      	bhi.n	800d6f0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800d6ea:	230c      	movs	r3, #12
 800d6ec:	617b      	str	r3, [r7, #20]
 800d6ee:	e041      	b.n	800d774 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800d6f0:	68bb      	ldr	r3, [r7, #8]
 800d6f2:	4a2f      	ldr	r2, [pc, #188]	; (800d7b0 <USB_SetTurnaroundTime+0x12c>)
 800d6f4:	4293      	cmp	r3, r2
 800d6f6:	d906      	bls.n	800d706 <USB_SetTurnaroundTime+0x82>
 800d6f8:	68bb      	ldr	r3, [r7, #8]
 800d6fa:	4a2e      	ldr	r2, [pc, #184]	; (800d7b4 <USB_SetTurnaroundTime+0x130>)
 800d6fc:	4293      	cmp	r3, r2
 800d6fe:	d802      	bhi.n	800d706 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800d700:	230b      	movs	r3, #11
 800d702:	617b      	str	r3, [r7, #20]
 800d704:	e036      	b.n	800d774 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800d706:	68bb      	ldr	r3, [r7, #8]
 800d708:	4a2a      	ldr	r2, [pc, #168]	; (800d7b4 <USB_SetTurnaroundTime+0x130>)
 800d70a:	4293      	cmp	r3, r2
 800d70c:	d906      	bls.n	800d71c <USB_SetTurnaroundTime+0x98>
 800d70e:	68bb      	ldr	r3, [r7, #8]
 800d710:	4a29      	ldr	r2, [pc, #164]	; (800d7b8 <USB_SetTurnaroundTime+0x134>)
 800d712:	4293      	cmp	r3, r2
 800d714:	d802      	bhi.n	800d71c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800d716:	230a      	movs	r3, #10
 800d718:	617b      	str	r3, [r7, #20]
 800d71a:	e02b      	b.n	800d774 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800d71c:	68bb      	ldr	r3, [r7, #8]
 800d71e:	4a26      	ldr	r2, [pc, #152]	; (800d7b8 <USB_SetTurnaroundTime+0x134>)
 800d720:	4293      	cmp	r3, r2
 800d722:	d906      	bls.n	800d732 <USB_SetTurnaroundTime+0xae>
 800d724:	68bb      	ldr	r3, [r7, #8]
 800d726:	4a25      	ldr	r2, [pc, #148]	; (800d7bc <USB_SetTurnaroundTime+0x138>)
 800d728:	4293      	cmp	r3, r2
 800d72a:	d202      	bcs.n	800d732 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800d72c:	2309      	movs	r3, #9
 800d72e:	617b      	str	r3, [r7, #20]
 800d730:	e020      	b.n	800d774 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800d732:	68bb      	ldr	r3, [r7, #8]
 800d734:	4a21      	ldr	r2, [pc, #132]	; (800d7bc <USB_SetTurnaroundTime+0x138>)
 800d736:	4293      	cmp	r3, r2
 800d738:	d306      	bcc.n	800d748 <USB_SetTurnaroundTime+0xc4>
 800d73a:	68bb      	ldr	r3, [r7, #8]
 800d73c:	4a20      	ldr	r2, [pc, #128]	; (800d7c0 <USB_SetTurnaroundTime+0x13c>)
 800d73e:	4293      	cmp	r3, r2
 800d740:	d802      	bhi.n	800d748 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800d742:	2308      	movs	r3, #8
 800d744:	617b      	str	r3, [r7, #20]
 800d746:	e015      	b.n	800d774 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800d748:	68bb      	ldr	r3, [r7, #8]
 800d74a:	4a1d      	ldr	r2, [pc, #116]	; (800d7c0 <USB_SetTurnaroundTime+0x13c>)
 800d74c:	4293      	cmp	r3, r2
 800d74e:	d906      	bls.n	800d75e <USB_SetTurnaroundTime+0xda>
 800d750:	68bb      	ldr	r3, [r7, #8]
 800d752:	4a1c      	ldr	r2, [pc, #112]	; (800d7c4 <USB_SetTurnaroundTime+0x140>)
 800d754:	4293      	cmp	r3, r2
 800d756:	d202      	bcs.n	800d75e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800d758:	2307      	movs	r3, #7
 800d75a:	617b      	str	r3, [r7, #20]
 800d75c:	e00a      	b.n	800d774 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800d75e:	2306      	movs	r3, #6
 800d760:	617b      	str	r3, [r7, #20]
 800d762:	e007      	b.n	800d774 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800d764:	79fb      	ldrb	r3, [r7, #7]
 800d766:	2b00      	cmp	r3, #0
 800d768:	d102      	bne.n	800d770 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800d76a:	2309      	movs	r3, #9
 800d76c:	617b      	str	r3, [r7, #20]
 800d76e:	e001      	b.n	800d774 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800d770:	2309      	movs	r3, #9
 800d772:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	68db      	ldr	r3, [r3, #12]
 800d778:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	68da      	ldr	r2, [r3, #12]
 800d784:	697b      	ldr	r3, [r7, #20]
 800d786:	029b      	lsls	r3, r3, #10
 800d788:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800d78c:	431a      	orrs	r2, r3
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d792:	2300      	movs	r3, #0
}
 800d794:	4618      	mov	r0, r3
 800d796:	371c      	adds	r7, #28
 800d798:	46bd      	mov	sp, r7
 800d79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79e:	4770      	bx	lr
 800d7a0:	00d8acbf 	.word	0x00d8acbf
 800d7a4:	00e4e1c0 	.word	0x00e4e1c0
 800d7a8:	00f42400 	.word	0x00f42400
 800d7ac:	01067380 	.word	0x01067380
 800d7b0:	011a499f 	.word	0x011a499f
 800d7b4:	01312cff 	.word	0x01312cff
 800d7b8:	014ca43f 	.word	0x014ca43f
 800d7bc:	016e3600 	.word	0x016e3600
 800d7c0:	01a6ab1f 	.word	0x01a6ab1f
 800d7c4:	01e84800 	.word	0x01e84800

0800d7c8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d7c8:	b480      	push	{r7}
 800d7ca:	b083      	sub	sp, #12
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	689b      	ldr	r3, [r3, #8]
 800d7d4:	f043 0201 	orr.w	r2, r3, #1
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d7dc:	2300      	movs	r3, #0
}
 800d7de:	4618      	mov	r0, r3
 800d7e0:	370c      	adds	r7, #12
 800d7e2:	46bd      	mov	sp, r7
 800d7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e8:	4770      	bx	lr

0800d7ea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d7ea:	b480      	push	{r7}
 800d7ec:	b083      	sub	sp, #12
 800d7ee:	af00      	add	r7, sp, #0
 800d7f0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	689b      	ldr	r3, [r3, #8]
 800d7f6:	f023 0201 	bic.w	r2, r3, #1
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d7fe:	2300      	movs	r3, #0
}
 800d800:	4618      	mov	r0, r3
 800d802:	370c      	adds	r7, #12
 800d804:	46bd      	mov	sp, r7
 800d806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80a:	4770      	bx	lr

0800d80c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d80c:	b580      	push	{r7, lr}
 800d80e:	b082      	sub	sp, #8
 800d810:	af00      	add	r7, sp, #0
 800d812:	6078      	str	r0, [r7, #4]
 800d814:	460b      	mov	r3, r1
 800d816:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	68db      	ldr	r3, [r3, #12]
 800d81c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d824:	78fb      	ldrb	r3, [r7, #3]
 800d826:	2b01      	cmp	r3, #1
 800d828:	d106      	bne.n	800d838 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	68db      	ldr	r3, [r3, #12]
 800d82e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	60da      	str	r2, [r3, #12]
 800d836:	e00b      	b.n	800d850 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800d838:	78fb      	ldrb	r3, [r7, #3]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d106      	bne.n	800d84c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	68db      	ldr	r3, [r3, #12]
 800d842:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	60da      	str	r2, [r3, #12]
 800d84a:	e001      	b.n	800d850 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800d84c:	2301      	movs	r3, #1
 800d84e:	e003      	b.n	800d858 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800d850:	2032      	movs	r0, #50	; 0x32
 800d852:	f7f4 fc9b 	bl	800218c <HAL_Delay>

  return HAL_OK;
 800d856:	2300      	movs	r3, #0
}
 800d858:	4618      	mov	r0, r3
 800d85a:	3708      	adds	r7, #8
 800d85c:	46bd      	mov	sp, r7
 800d85e:	bd80      	pop	{r7, pc}

0800d860 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d860:	b084      	sub	sp, #16
 800d862:	b580      	push	{r7, lr}
 800d864:	b086      	sub	sp, #24
 800d866:	af00      	add	r7, sp, #0
 800d868:	6078      	str	r0, [r7, #4]
 800d86a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800d86e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d872:	2300      	movs	r3, #0
 800d874:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d87a:	2300      	movs	r3, #0
 800d87c:	613b      	str	r3, [r7, #16]
 800d87e:	e009      	b.n	800d894 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d880:	687a      	ldr	r2, [r7, #4]
 800d882:	693b      	ldr	r3, [r7, #16]
 800d884:	3340      	adds	r3, #64	; 0x40
 800d886:	009b      	lsls	r3, r3, #2
 800d888:	4413      	add	r3, r2
 800d88a:	2200      	movs	r2, #0
 800d88c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d88e:	693b      	ldr	r3, [r7, #16]
 800d890:	3301      	adds	r3, #1
 800d892:	613b      	str	r3, [r7, #16]
 800d894:	693b      	ldr	r3, [r7, #16]
 800d896:	2b0e      	cmp	r3, #14
 800d898:	d9f2      	bls.n	800d880 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d89a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d11c      	bne.n	800d8da <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d8a6:	685b      	ldr	r3, [r3, #4]
 800d8a8:	68fa      	ldr	r2, [r7, #12]
 800d8aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d8ae:	f043 0302 	orr.w	r3, r3, #2
 800d8b2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8b8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	601a      	str	r2, [r3, #0]
 800d8d8:	e005      	b.n	800d8e6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8de:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d8ec:	461a      	mov	r2, r3
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d8f8:	4619      	mov	r1, r3
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d900:	461a      	mov	r2, r3
 800d902:	680b      	ldr	r3, [r1, #0]
 800d904:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d908:	2b01      	cmp	r3, #1
 800d90a:	d10c      	bne.n	800d926 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d90c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d104      	bne.n	800d91c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d912:	2100      	movs	r1, #0
 800d914:	6878      	ldr	r0, [r7, #4]
 800d916:	f000 f949 	bl	800dbac <USB_SetDevSpeed>
 800d91a:	e008      	b.n	800d92e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d91c:	2101      	movs	r1, #1
 800d91e:	6878      	ldr	r0, [r7, #4]
 800d920:	f000 f944 	bl	800dbac <USB_SetDevSpeed>
 800d924:	e003      	b.n	800d92e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d926:	2103      	movs	r1, #3
 800d928:	6878      	ldr	r0, [r7, #4]
 800d92a:	f000 f93f 	bl	800dbac <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d92e:	2110      	movs	r1, #16
 800d930:	6878      	ldr	r0, [r7, #4]
 800d932:	f000 f8f3 	bl	800db1c <USB_FlushTxFifo>
 800d936:	4603      	mov	r3, r0
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d001      	beq.n	800d940 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800d93c:	2301      	movs	r3, #1
 800d93e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d940:	6878      	ldr	r0, [r7, #4]
 800d942:	f000 f911 	bl	800db68 <USB_FlushRxFifo>
 800d946:	4603      	mov	r3, r0
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d001      	beq.n	800d950 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800d94c:	2301      	movs	r3, #1
 800d94e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d956:	461a      	mov	r2, r3
 800d958:	2300      	movs	r3, #0
 800d95a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d962:	461a      	mov	r2, r3
 800d964:	2300      	movs	r3, #0
 800d966:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d96e:	461a      	mov	r2, r3
 800d970:	2300      	movs	r3, #0
 800d972:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d974:	2300      	movs	r3, #0
 800d976:	613b      	str	r3, [r7, #16]
 800d978:	e043      	b.n	800da02 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d97a:	693b      	ldr	r3, [r7, #16]
 800d97c:	015a      	lsls	r2, r3, #5
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	4413      	add	r3, r2
 800d982:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d98c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d990:	d118      	bne.n	800d9c4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800d992:	693b      	ldr	r3, [r7, #16]
 800d994:	2b00      	cmp	r3, #0
 800d996:	d10a      	bne.n	800d9ae <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d998:	693b      	ldr	r3, [r7, #16]
 800d99a:	015a      	lsls	r2, r3, #5
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	4413      	add	r3, r2
 800d9a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d9a4:	461a      	mov	r2, r3
 800d9a6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d9aa:	6013      	str	r3, [r2, #0]
 800d9ac:	e013      	b.n	800d9d6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d9ae:	693b      	ldr	r3, [r7, #16]
 800d9b0:	015a      	lsls	r2, r3, #5
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	4413      	add	r3, r2
 800d9b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d9ba:	461a      	mov	r2, r3
 800d9bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d9c0:	6013      	str	r3, [r2, #0]
 800d9c2:	e008      	b.n	800d9d6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d9c4:	693b      	ldr	r3, [r7, #16]
 800d9c6:	015a      	lsls	r2, r3, #5
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	4413      	add	r3, r2
 800d9cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d9d0:	461a      	mov	r2, r3
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d9d6:	693b      	ldr	r3, [r7, #16]
 800d9d8:	015a      	lsls	r2, r3, #5
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	4413      	add	r3, r2
 800d9de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d9e2:	461a      	mov	r2, r3
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d9e8:	693b      	ldr	r3, [r7, #16]
 800d9ea:	015a      	lsls	r2, r3, #5
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	4413      	add	r3, r2
 800d9f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d9f4:	461a      	mov	r2, r3
 800d9f6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d9fa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d9fc:	693b      	ldr	r3, [r7, #16]
 800d9fe:	3301      	adds	r3, #1
 800da00:	613b      	str	r3, [r7, #16]
 800da02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da04:	693a      	ldr	r2, [r7, #16]
 800da06:	429a      	cmp	r2, r3
 800da08:	d3b7      	bcc.n	800d97a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800da0a:	2300      	movs	r3, #0
 800da0c:	613b      	str	r3, [r7, #16]
 800da0e:	e043      	b.n	800da98 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800da10:	693b      	ldr	r3, [r7, #16]
 800da12:	015a      	lsls	r2, r3, #5
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	4413      	add	r3, r2
 800da18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800da22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800da26:	d118      	bne.n	800da5a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800da28:	693b      	ldr	r3, [r7, #16]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d10a      	bne.n	800da44 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800da2e:	693b      	ldr	r3, [r7, #16]
 800da30:	015a      	lsls	r2, r3, #5
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	4413      	add	r3, r2
 800da36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da3a:	461a      	mov	r2, r3
 800da3c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800da40:	6013      	str	r3, [r2, #0]
 800da42:	e013      	b.n	800da6c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800da44:	693b      	ldr	r3, [r7, #16]
 800da46:	015a      	lsls	r2, r3, #5
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	4413      	add	r3, r2
 800da4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da50:	461a      	mov	r2, r3
 800da52:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800da56:	6013      	str	r3, [r2, #0]
 800da58:	e008      	b.n	800da6c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800da5a:	693b      	ldr	r3, [r7, #16]
 800da5c:	015a      	lsls	r2, r3, #5
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	4413      	add	r3, r2
 800da62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da66:	461a      	mov	r2, r3
 800da68:	2300      	movs	r3, #0
 800da6a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800da6c:	693b      	ldr	r3, [r7, #16]
 800da6e:	015a      	lsls	r2, r3, #5
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	4413      	add	r3, r2
 800da74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da78:	461a      	mov	r2, r3
 800da7a:	2300      	movs	r3, #0
 800da7c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800da7e:	693b      	ldr	r3, [r7, #16]
 800da80:	015a      	lsls	r2, r3, #5
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	4413      	add	r3, r2
 800da86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da8a:	461a      	mov	r2, r3
 800da8c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800da90:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800da92:	693b      	ldr	r3, [r7, #16]
 800da94:	3301      	adds	r3, #1
 800da96:	613b      	str	r3, [r7, #16]
 800da98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da9a:	693a      	ldr	r2, [r7, #16]
 800da9c:	429a      	cmp	r2, r3
 800da9e:	d3b7      	bcc.n	800da10 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800daa6:	691b      	ldr	r3, [r3, #16]
 800daa8:	68fa      	ldr	r2, [r7, #12]
 800daaa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800daae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dab2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	2200      	movs	r2, #0
 800dab8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800dac0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800dac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d105      	bne.n	800dad4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	699b      	ldr	r3, [r3, #24]
 800dacc:	f043 0210 	orr.w	r2, r3, #16
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	699a      	ldr	r2, [r3, #24]
 800dad8:	4b0e      	ldr	r3, [pc, #56]	; (800db14 <USB_DevInit+0x2b4>)
 800dada:	4313      	orrs	r3, r2
 800dadc:	687a      	ldr	r2, [r7, #4]
 800dade:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800dae0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d005      	beq.n	800daf2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	699b      	ldr	r3, [r3, #24]
 800daea:	f043 0208 	orr.w	r2, r3, #8
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800daf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800daf4:	2b01      	cmp	r3, #1
 800daf6:	d105      	bne.n	800db04 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	699a      	ldr	r2, [r3, #24]
 800dafc:	4b06      	ldr	r3, [pc, #24]	; (800db18 <USB_DevInit+0x2b8>)
 800dafe:	4313      	orrs	r3, r2
 800db00:	687a      	ldr	r2, [r7, #4]
 800db02:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800db04:	7dfb      	ldrb	r3, [r7, #23]
}
 800db06:	4618      	mov	r0, r3
 800db08:	3718      	adds	r7, #24
 800db0a:	46bd      	mov	sp, r7
 800db0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800db10:	b004      	add	sp, #16
 800db12:	4770      	bx	lr
 800db14:	803c3800 	.word	0x803c3800
 800db18:	40000004 	.word	0x40000004

0800db1c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800db1c:	b480      	push	{r7}
 800db1e:	b085      	sub	sp, #20
 800db20:	af00      	add	r7, sp, #0
 800db22:	6078      	str	r0, [r7, #4]
 800db24:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800db26:	2300      	movs	r3, #0
 800db28:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800db2a:	683b      	ldr	r3, [r7, #0]
 800db2c:	019b      	lsls	r3, r3, #6
 800db2e:	f043 0220 	orr.w	r2, r3, #32
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	3301      	adds	r3, #1
 800db3a:	60fb      	str	r3, [r7, #12]
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	4a09      	ldr	r2, [pc, #36]	; (800db64 <USB_FlushTxFifo+0x48>)
 800db40:	4293      	cmp	r3, r2
 800db42:	d901      	bls.n	800db48 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800db44:	2303      	movs	r3, #3
 800db46:	e006      	b.n	800db56 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	691b      	ldr	r3, [r3, #16]
 800db4c:	f003 0320 	and.w	r3, r3, #32
 800db50:	2b20      	cmp	r3, #32
 800db52:	d0f0      	beq.n	800db36 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800db54:	2300      	movs	r3, #0
}
 800db56:	4618      	mov	r0, r3
 800db58:	3714      	adds	r7, #20
 800db5a:	46bd      	mov	sp, r7
 800db5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db60:	4770      	bx	lr
 800db62:	bf00      	nop
 800db64:	00030d40 	.word	0x00030d40

0800db68 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800db68:	b480      	push	{r7}
 800db6a:	b085      	sub	sp, #20
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800db70:	2300      	movs	r3, #0
 800db72:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	2210      	movs	r2, #16
 800db78:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	3301      	adds	r3, #1
 800db7e:	60fb      	str	r3, [r7, #12]
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	4a09      	ldr	r2, [pc, #36]	; (800dba8 <USB_FlushRxFifo+0x40>)
 800db84:	4293      	cmp	r3, r2
 800db86:	d901      	bls.n	800db8c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800db88:	2303      	movs	r3, #3
 800db8a:	e006      	b.n	800db9a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	691b      	ldr	r3, [r3, #16]
 800db90:	f003 0310 	and.w	r3, r3, #16
 800db94:	2b10      	cmp	r3, #16
 800db96:	d0f0      	beq.n	800db7a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800db98:	2300      	movs	r3, #0
}
 800db9a:	4618      	mov	r0, r3
 800db9c:	3714      	adds	r7, #20
 800db9e:	46bd      	mov	sp, r7
 800dba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba4:	4770      	bx	lr
 800dba6:	bf00      	nop
 800dba8:	00030d40 	.word	0x00030d40

0800dbac <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800dbac:	b480      	push	{r7}
 800dbae:	b085      	sub	sp, #20
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	6078      	str	r0, [r7, #4]
 800dbb4:	460b      	mov	r3, r1
 800dbb6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dbc2:	681a      	ldr	r2, [r3, #0]
 800dbc4:	78fb      	ldrb	r3, [r7, #3]
 800dbc6:	68f9      	ldr	r1, [r7, #12]
 800dbc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dbcc:	4313      	orrs	r3, r2
 800dbce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800dbd0:	2300      	movs	r3, #0
}
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	3714      	adds	r7, #20
 800dbd6:	46bd      	mov	sp, r7
 800dbd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbdc:	4770      	bx	lr

0800dbde <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800dbde:	b480      	push	{r7}
 800dbe0:	b087      	sub	sp, #28
 800dbe2:	af00      	add	r7, sp, #0
 800dbe4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800dbea:	693b      	ldr	r3, [r7, #16]
 800dbec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dbf0:	689b      	ldr	r3, [r3, #8]
 800dbf2:	f003 0306 	and.w	r3, r3, #6
 800dbf6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d102      	bne.n	800dc04 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800dbfe:	2300      	movs	r3, #0
 800dc00:	75fb      	strb	r3, [r7, #23]
 800dc02:	e00a      	b.n	800dc1a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	2b02      	cmp	r3, #2
 800dc08:	d002      	beq.n	800dc10 <USB_GetDevSpeed+0x32>
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	2b06      	cmp	r3, #6
 800dc0e:	d102      	bne.n	800dc16 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800dc10:	2302      	movs	r3, #2
 800dc12:	75fb      	strb	r3, [r7, #23]
 800dc14:	e001      	b.n	800dc1a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800dc16:	230f      	movs	r3, #15
 800dc18:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800dc1a:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	371c      	adds	r7, #28
 800dc20:	46bd      	mov	sp, r7
 800dc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc26:	4770      	bx	lr

0800dc28 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800dc28:	b480      	push	{r7}
 800dc2a:	b085      	sub	sp, #20
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	6078      	str	r0, [r7, #4]
 800dc30:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800dc36:	683b      	ldr	r3, [r7, #0]
 800dc38:	781b      	ldrb	r3, [r3, #0]
 800dc3a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800dc3c:	683b      	ldr	r3, [r7, #0]
 800dc3e:	785b      	ldrb	r3, [r3, #1]
 800dc40:	2b01      	cmp	r3, #1
 800dc42:	d139      	bne.n	800dcb8 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc4a:	69da      	ldr	r2, [r3, #28]
 800dc4c:	683b      	ldr	r3, [r7, #0]
 800dc4e:	781b      	ldrb	r3, [r3, #0]
 800dc50:	f003 030f 	and.w	r3, r3, #15
 800dc54:	2101      	movs	r1, #1
 800dc56:	fa01 f303 	lsl.w	r3, r1, r3
 800dc5a:	b29b      	uxth	r3, r3
 800dc5c:	68f9      	ldr	r1, [r7, #12]
 800dc5e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dc62:	4313      	orrs	r3, r2
 800dc64:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800dc66:	68bb      	ldr	r3, [r7, #8]
 800dc68:	015a      	lsls	r2, r3, #5
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	4413      	add	r3, r2
 800dc6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d153      	bne.n	800dd24 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800dc7c:	68bb      	ldr	r3, [r7, #8]
 800dc7e:	015a      	lsls	r2, r3, #5
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	4413      	add	r3, r2
 800dc84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc88:	681a      	ldr	r2, [r3, #0]
 800dc8a:	683b      	ldr	r3, [r7, #0]
 800dc8c:	689b      	ldr	r3, [r3, #8]
 800dc8e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800dc92:	683b      	ldr	r3, [r7, #0]
 800dc94:	78db      	ldrb	r3, [r3, #3]
 800dc96:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800dc98:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800dc9a:	68bb      	ldr	r3, [r7, #8]
 800dc9c:	059b      	lsls	r3, r3, #22
 800dc9e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800dca0:	431a      	orrs	r2, r3
 800dca2:	68bb      	ldr	r3, [r7, #8]
 800dca4:	0159      	lsls	r1, r3, #5
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	440b      	add	r3, r1
 800dcaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dcae:	4619      	mov	r1, r3
 800dcb0:	4b20      	ldr	r3, [pc, #128]	; (800dd34 <USB_ActivateEndpoint+0x10c>)
 800dcb2:	4313      	orrs	r3, r2
 800dcb4:	600b      	str	r3, [r1, #0]
 800dcb6:	e035      	b.n	800dd24 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dcbe:	69da      	ldr	r2, [r3, #28]
 800dcc0:	683b      	ldr	r3, [r7, #0]
 800dcc2:	781b      	ldrb	r3, [r3, #0]
 800dcc4:	f003 030f 	and.w	r3, r3, #15
 800dcc8:	2101      	movs	r1, #1
 800dcca:	fa01 f303 	lsl.w	r3, r1, r3
 800dcce:	041b      	lsls	r3, r3, #16
 800dcd0:	68f9      	ldr	r1, [r7, #12]
 800dcd2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dcd6:	4313      	orrs	r3, r2
 800dcd8:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800dcda:	68bb      	ldr	r3, [r7, #8]
 800dcdc:	015a      	lsls	r2, r3, #5
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	4413      	add	r3, r2
 800dce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d119      	bne.n	800dd24 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800dcf0:	68bb      	ldr	r3, [r7, #8]
 800dcf2:	015a      	lsls	r2, r3, #5
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	4413      	add	r3, r2
 800dcf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dcfc:	681a      	ldr	r2, [r3, #0]
 800dcfe:	683b      	ldr	r3, [r7, #0]
 800dd00:	689b      	ldr	r3, [r3, #8]
 800dd02:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800dd06:	683b      	ldr	r3, [r7, #0]
 800dd08:	78db      	ldrb	r3, [r3, #3]
 800dd0a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800dd0c:	430b      	orrs	r3, r1
 800dd0e:	431a      	orrs	r2, r3
 800dd10:	68bb      	ldr	r3, [r7, #8]
 800dd12:	0159      	lsls	r1, r3, #5
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	440b      	add	r3, r1
 800dd18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd1c:	4619      	mov	r1, r3
 800dd1e:	4b05      	ldr	r3, [pc, #20]	; (800dd34 <USB_ActivateEndpoint+0x10c>)
 800dd20:	4313      	orrs	r3, r2
 800dd22:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800dd24:	2300      	movs	r3, #0
}
 800dd26:	4618      	mov	r0, r3
 800dd28:	3714      	adds	r7, #20
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd30:	4770      	bx	lr
 800dd32:	bf00      	nop
 800dd34:	10008000 	.word	0x10008000

0800dd38 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800dd38:	b480      	push	{r7}
 800dd3a:	b085      	sub	sp, #20
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]
 800dd40:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800dd46:	683b      	ldr	r3, [r7, #0]
 800dd48:	781b      	ldrb	r3, [r3, #0]
 800dd4a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800dd4c:	683b      	ldr	r3, [r7, #0]
 800dd4e:	785b      	ldrb	r3, [r3, #1]
 800dd50:	2b01      	cmp	r3, #1
 800dd52:	d161      	bne.n	800de18 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800dd54:	68bb      	ldr	r3, [r7, #8]
 800dd56:	015a      	lsls	r2, r3, #5
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	4413      	add	r3, r2
 800dd5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dd66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dd6a:	d11f      	bne.n	800ddac <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800dd6c:	68bb      	ldr	r3, [r7, #8]
 800dd6e:	015a      	lsls	r2, r3, #5
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	4413      	add	r3, r2
 800dd74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	68ba      	ldr	r2, [r7, #8]
 800dd7c:	0151      	lsls	r1, r2, #5
 800dd7e:	68fa      	ldr	r2, [r7, #12]
 800dd80:	440a      	add	r2, r1
 800dd82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dd86:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800dd8a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800dd8c:	68bb      	ldr	r3, [r7, #8]
 800dd8e:	015a      	lsls	r2, r3, #5
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	4413      	add	r3, r2
 800dd94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	68ba      	ldr	r2, [r7, #8]
 800dd9c:	0151      	lsls	r1, r2, #5
 800dd9e:	68fa      	ldr	r2, [r7, #12]
 800dda0:	440a      	add	r2, r1
 800dda2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dda6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ddaa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ddb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ddb4:	683b      	ldr	r3, [r7, #0]
 800ddb6:	781b      	ldrb	r3, [r3, #0]
 800ddb8:	f003 030f 	and.w	r3, r3, #15
 800ddbc:	2101      	movs	r1, #1
 800ddbe:	fa01 f303 	lsl.w	r3, r1, r3
 800ddc2:	b29b      	uxth	r3, r3
 800ddc4:	43db      	mvns	r3, r3
 800ddc6:	68f9      	ldr	r1, [r7, #12]
 800ddc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ddcc:	4013      	ands	r3, r2
 800ddce:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ddd6:	69da      	ldr	r2, [r3, #28]
 800ddd8:	683b      	ldr	r3, [r7, #0]
 800ddda:	781b      	ldrb	r3, [r3, #0]
 800dddc:	f003 030f 	and.w	r3, r3, #15
 800dde0:	2101      	movs	r1, #1
 800dde2:	fa01 f303 	lsl.w	r3, r1, r3
 800dde6:	b29b      	uxth	r3, r3
 800dde8:	43db      	mvns	r3, r3
 800ddea:	68f9      	ldr	r1, [r7, #12]
 800ddec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ddf0:	4013      	ands	r3, r2
 800ddf2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ddf4:	68bb      	ldr	r3, [r7, #8]
 800ddf6:	015a      	lsls	r2, r3, #5
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	4413      	add	r3, r2
 800ddfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de00:	681a      	ldr	r2, [r3, #0]
 800de02:	68bb      	ldr	r3, [r7, #8]
 800de04:	0159      	lsls	r1, r3, #5
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	440b      	add	r3, r1
 800de0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de0e:	4619      	mov	r1, r3
 800de10:	4b35      	ldr	r3, [pc, #212]	; (800dee8 <USB_DeactivateEndpoint+0x1b0>)
 800de12:	4013      	ands	r3, r2
 800de14:	600b      	str	r3, [r1, #0]
 800de16:	e060      	b.n	800deda <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800de18:	68bb      	ldr	r3, [r7, #8]
 800de1a:	015a      	lsls	r2, r3, #5
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	4413      	add	r3, r2
 800de20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800de2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800de2e:	d11f      	bne.n	800de70 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800de30:	68bb      	ldr	r3, [r7, #8]
 800de32:	015a      	lsls	r2, r3, #5
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	4413      	add	r3, r2
 800de38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	68ba      	ldr	r2, [r7, #8]
 800de40:	0151      	lsls	r1, r2, #5
 800de42:	68fa      	ldr	r2, [r7, #12]
 800de44:	440a      	add	r2, r1
 800de46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800de4a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800de4e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800de50:	68bb      	ldr	r3, [r7, #8]
 800de52:	015a      	lsls	r2, r3, #5
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	4413      	add	r3, r2
 800de58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	68ba      	ldr	r2, [r7, #8]
 800de60:	0151      	lsls	r1, r2, #5
 800de62:	68fa      	ldr	r2, [r7, #12]
 800de64:	440a      	add	r2, r1
 800de66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800de6a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800de6e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800de76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800de78:	683b      	ldr	r3, [r7, #0]
 800de7a:	781b      	ldrb	r3, [r3, #0]
 800de7c:	f003 030f 	and.w	r3, r3, #15
 800de80:	2101      	movs	r1, #1
 800de82:	fa01 f303 	lsl.w	r3, r1, r3
 800de86:	041b      	lsls	r3, r3, #16
 800de88:	43db      	mvns	r3, r3
 800de8a:	68f9      	ldr	r1, [r7, #12]
 800de8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800de90:	4013      	ands	r3, r2
 800de92:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800de9a:	69da      	ldr	r2, [r3, #28]
 800de9c:	683b      	ldr	r3, [r7, #0]
 800de9e:	781b      	ldrb	r3, [r3, #0]
 800dea0:	f003 030f 	and.w	r3, r3, #15
 800dea4:	2101      	movs	r1, #1
 800dea6:	fa01 f303 	lsl.w	r3, r1, r3
 800deaa:	041b      	lsls	r3, r3, #16
 800deac:	43db      	mvns	r3, r3
 800deae:	68f9      	ldr	r1, [r7, #12]
 800deb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800deb4:	4013      	ands	r3, r2
 800deb6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800deb8:	68bb      	ldr	r3, [r7, #8]
 800deba:	015a      	lsls	r2, r3, #5
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	4413      	add	r3, r2
 800dec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dec4:	681a      	ldr	r2, [r3, #0]
 800dec6:	68bb      	ldr	r3, [r7, #8]
 800dec8:	0159      	lsls	r1, r3, #5
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	440b      	add	r3, r1
 800dece:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ded2:	4619      	mov	r1, r3
 800ded4:	4b05      	ldr	r3, [pc, #20]	; (800deec <USB_DeactivateEndpoint+0x1b4>)
 800ded6:	4013      	ands	r3, r2
 800ded8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800deda:	2300      	movs	r3, #0
}
 800dedc:	4618      	mov	r0, r3
 800dede:	3714      	adds	r7, #20
 800dee0:	46bd      	mov	sp, r7
 800dee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee6:	4770      	bx	lr
 800dee8:	ec337800 	.word	0xec337800
 800deec:	eff37800 	.word	0xeff37800

0800def0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800def0:	b580      	push	{r7, lr}
 800def2:	b08a      	sub	sp, #40	; 0x28
 800def4:	af02      	add	r7, sp, #8
 800def6:	60f8      	str	r0, [r7, #12]
 800def8:	60b9      	str	r1, [r7, #8]
 800defa:	4613      	mov	r3, r2
 800defc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800df02:	68bb      	ldr	r3, [r7, #8]
 800df04:	781b      	ldrb	r3, [r3, #0]
 800df06:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800df08:	68bb      	ldr	r3, [r7, #8]
 800df0a:	785b      	ldrb	r3, [r3, #1]
 800df0c:	2b01      	cmp	r3, #1
 800df0e:	f040 8163 	bne.w	800e1d8 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800df12:	68bb      	ldr	r3, [r7, #8]
 800df14:	695b      	ldr	r3, [r3, #20]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d132      	bne.n	800df80 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800df1a:	69bb      	ldr	r3, [r7, #24]
 800df1c:	015a      	lsls	r2, r3, #5
 800df1e:	69fb      	ldr	r3, [r7, #28]
 800df20:	4413      	add	r3, r2
 800df22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df26:	691a      	ldr	r2, [r3, #16]
 800df28:	69bb      	ldr	r3, [r7, #24]
 800df2a:	0159      	lsls	r1, r3, #5
 800df2c:	69fb      	ldr	r3, [r7, #28]
 800df2e:	440b      	add	r3, r1
 800df30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df34:	4619      	mov	r1, r3
 800df36:	4ba5      	ldr	r3, [pc, #660]	; (800e1cc <USB_EPStartXfer+0x2dc>)
 800df38:	4013      	ands	r3, r2
 800df3a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800df3c:	69bb      	ldr	r3, [r7, #24]
 800df3e:	015a      	lsls	r2, r3, #5
 800df40:	69fb      	ldr	r3, [r7, #28]
 800df42:	4413      	add	r3, r2
 800df44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df48:	691b      	ldr	r3, [r3, #16]
 800df4a:	69ba      	ldr	r2, [r7, #24]
 800df4c:	0151      	lsls	r1, r2, #5
 800df4e:	69fa      	ldr	r2, [r7, #28]
 800df50:	440a      	add	r2, r1
 800df52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800df56:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800df5a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800df5c:	69bb      	ldr	r3, [r7, #24]
 800df5e:	015a      	lsls	r2, r3, #5
 800df60:	69fb      	ldr	r3, [r7, #28]
 800df62:	4413      	add	r3, r2
 800df64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df68:	691a      	ldr	r2, [r3, #16]
 800df6a:	69bb      	ldr	r3, [r7, #24]
 800df6c:	0159      	lsls	r1, r3, #5
 800df6e:	69fb      	ldr	r3, [r7, #28]
 800df70:	440b      	add	r3, r1
 800df72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df76:	4619      	mov	r1, r3
 800df78:	4b95      	ldr	r3, [pc, #596]	; (800e1d0 <USB_EPStartXfer+0x2e0>)
 800df7a:	4013      	ands	r3, r2
 800df7c:	610b      	str	r3, [r1, #16]
 800df7e:	e074      	b.n	800e06a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800df80:	69bb      	ldr	r3, [r7, #24]
 800df82:	015a      	lsls	r2, r3, #5
 800df84:	69fb      	ldr	r3, [r7, #28]
 800df86:	4413      	add	r3, r2
 800df88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df8c:	691a      	ldr	r2, [r3, #16]
 800df8e:	69bb      	ldr	r3, [r7, #24]
 800df90:	0159      	lsls	r1, r3, #5
 800df92:	69fb      	ldr	r3, [r7, #28]
 800df94:	440b      	add	r3, r1
 800df96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df9a:	4619      	mov	r1, r3
 800df9c:	4b8c      	ldr	r3, [pc, #560]	; (800e1d0 <USB_EPStartXfer+0x2e0>)
 800df9e:	4013      	ands	r3, r2
 800dfa0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800dfa2:	69bb      	ldr	r3, [r7, #24]
 800dfa4:	015a      	lsls	r2, r3, #5
 800dfa6:	69fb      	ldr	r3, [r7, #28]
 800dfa8:	4413      	add	r3, r2
 800dfaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dfae:	691a      	ldr	r2, [r3, #16]
 800dfb0:	69bb      	ldr	r3, [r7, #24]
 800dfb2:	0159      	lsls	r1, r3, #5
 800dfb4:	69fb      	ldr	r3, [r7, #28]
 800dfb6:	440b      	add	r3, r1
 800dfb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dfbc:	4619      	mov	r1, r3
 800dfbe:	4b83      	ldr	r3, [pc, #524]	; (800e1cc <USB_EPStartXfer+0x2dc>)
 800dfc0:	4013      	ands	r3, r2
 800dfc2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800dfc4:	69bb      	ldr	r3, [r7, #24]
 800dfc6:	015a      	lsls	r2, r3, #5
 800dfc8:	69fb      	ldr	r3, [r7, #28]
 800dfca:	4413      	add	r3, r2
 800dfcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dfd0:	691a      	ldr	r2, [r3, #16]
 800dfd2:	68bb      	ldr	r3, [r7, #8]
 800dfd4:	6959      	ldr	r1, [r3, #20]
 800dfd6:	68bb      	ldr	r3, [r7, #8]
 800dfd8:	689b      	ldr	r3, [r3, #8]
 800dfda:	440b      	add	r3, r1
 800dfdc:	1e59      	subs	r1, r3, #1
 800dfde:	68bb      	ldr	r3, [r7, #8]
 800dfe0:	689b      	ldr	r3, [r3, #8]
 800dfe2:	fbb1 f3f3 	udiv	r3, r1, r3
 800dfe6:	04d9      	lsls	r1, r3, #19
 800dfe8:	4b7a      	ldr	r3, [pc, #488]	; (800e1d4 <USB_EPStartXfer+0x2e4>)
 800dfea:	400b      	ands	r3, r1
 800dfec:	69b9      	ldr	r1, [r7, #24]
 800dfee:	0148      	lsls	r0, r1, #5
 800dff0:	69f9      	ldr	r1, [r7, #28]
 800dff2:	4401      	add	r1, r0
 800dff4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800dff8:	4313      	orrs	r3, r2
 800dffa:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800dffc:	69bb      	ldr	r3, [r7, #24]
 800dffe:	015a      	lsls	r2, r3, #5
 800e000:	69fb      	ldr	r3, [r7, #28]
 800e002:	4413      	add	r3, r2
 800e004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e008:	691a      	ldr	r2, [r3, #16]
 800e00a:	68bb      	ldr	r3, [r7, #8]
 800e00c:	695b      	ldr	r3, [r3, #20]
 800e00e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e012:	69b9      	ldr	r1, [r7, #24]
 800e014:	0148      	lsls	r0, r1, #5
 800e016:	69f9      	ldr	r1, [r7, #28]
 800e018:	4401      	add	r1, r0
 800e01a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e01e:	4313      	orrs	r3, r2
 800e020:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800e022:	68bb      	ldr	r3, [r7, #8]
 800e024:	78db      	ldrb	r3, [r3, #3]
 800e026:	2b01      	cmp	r3, #1
 800e028:	d11f      	bne.n	800e06a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800e02a:	69bb      	ldr	r3, [r7, #24]
 800e02c:	015a      	lsls	r2, r3, #5
 800e02e:	69fb      	ldr	r3, [r7, #28]
 800e030:	4413      	add	r3, r2
 800e032:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e036:	691b      	ldr	r3, [r3, #16]
 800e038:	69ba      	ldr	r2, [r7, #24]
 800e03a:	0151      	lsls	r1, r2, #5
 800e03c:	69fa      	ldr	r2, [r7, #28]
 800e03e:	440a      	add	r2, r1
 800e040:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e044:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800e048:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800e04a:	69bb      	ldr	r3, [r7, #24]
 800e04c:	015a      	lsls	r2, r3, #5
 800e04e:	69fb      	ldr	r3, [r7, #28]
 800e050:	4413      	add	r3, r2
 800e052:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e056:	691b      	ldr	r3, [r3, #16]
 800e058:	69ba      	ldr	r2, [r7, #24]
 800e05a:	0151      	lsls	r1, r2, #5
 800e05c:	69fa      	ldr	r2, [r7, #28]
 800e05e:	440a      	add	r2, r1
 800e060:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e064:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e068:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800e06a:	79fb      	ldrb	r3, [r7, #7]
 800e06c:	2b01      	cmp	r3, #1
 800e06e:	d14b      	bne.n	800e108 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e070:	68bb      	ldr	r3, [r7, #8]
 800e072:	691b      	ldr	r3, [r3, #16]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d009      	beq.n	800e08c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e078:	69bb      	ldr	r3, [r7, #24]
 800e07a:	015a      	lsls	r2, r3, #5
 800e07c:	69fb      	ldr	r3, [r7, #28]
 800e07e:	4413      	add	r3, r2
 800e080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e084:	461a      	mov	r2, r3
 800e086:	68bb      	ldr	r3, [r7, #8]
 800e088:	691b      	ldr	r3, [r3, #16]
 800e08a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800e08c:	68bb      	ldr	r3, [r7, #8]
 800e08e:	78db      	ldrb	r3, [r3, #3]
 800e090:	2b01      	cmp	r3, #1
 800e092:	d128      	bne.n	800e0e6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e094:	69fb      	ldr	r3, [r7, #28]
 800e096:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e09a:	689b      	ldr	r3, [r3, #8]
 800e09c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d110      	bne.n	800e0c6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e0a4:	69bb      	ldr	r3, [r7, #24]
 800e0a6:	015a      	lsls	r2, r3, #5
 800e0a8:	69fb      	ldr	r3, [r7, #28]
 800e0aa:	4413      	add	r3, r2
 800e0ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	69ba      	ldr	r2, [r7, #24]
 800e0b4:	0151      	lsls	r1, r2, #5
 800e0b6:	69fa      	ldr	r2, [r7, #28]
 800e0b8:	440a      	add	r2, r1
 800e0ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e0be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e0c2:	6013      	str	r3, [r2, #0]
 800e0c4:	e00f      	b.n	800e0e6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e0c6:	69bb      	ldr	r3, [r7, #24]
 800e0c8:	015a      	lsls	r2, r3, #5
 800e0ca:	69fb      	ldr	r3, [r7, #28]
 800e0cc:	4413      	add	r3, r2
 800e0ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	69ba      	ldr	r2, [r7, #24]
 800e0d6:	0151      	lsls	r1, r2, #5
 800e0d8:	69fa      	ldr	r2, [r7, #28]
 800e0da:	440a      	add	r2, r1
 800e0dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e0e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e0e4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e0e6:	69bb      	ldr	r3, [r7, #24]
 800e0e8:	015a      	lsls	r2, r3, #5
 800e0ea:	69fb      	ldr	r3, [r7, #28]
 800e0ec:	4413      	add	r3, r2
 800e0ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	69ba      	ldr	r2, [r7, #24]
 800e0f6:	0151      	lsls	r1, r2, #5
 800e0f8:	69fa      	ldr	r2, [r7, #28]
 800e0fa:	440a      	add	r2, r1
 800e0fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e100:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e104:	6013      	str	r3, [r2, #0]
 800e106:	e133      	b.n	800e370 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e108:	69bb      	ldr	r3, [r7, #24]
 800e10a:	015a      	lsls	r2, r3, #5
 800e10c:	69fb      	ldr	r3, [r7, #28]
 800e10e:	4413      	add	r3, r2
 800e110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	69ba      	ldr	r2, [r7, #24]
 800e118:	0151      	lsls	r1, r2, #5
 800e11a:	69fa      	ldr	r2, [r7, #28]
 800e11c:	440a      	add	r2, r1
 800e11e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e122:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e126:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e128:	68bb      	ldr	r3, [r7, #8]
 800e12a:	78db      	ldrb	r3, [r3, #3]
 800e12c:	2b01      	cmp	r3, #1
 800e12e:	d015      	beq.n	800e15c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800e130:	68bb      	ldr	r3, [r7, #8]
 800e132:	695b      	ldr	r3, [r3, #20]
 800e134:	2b00      	cmp	r3, #0
 800e136:	f000 811b 	beq.w	800e370 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e13a:	69fb      	ldr	r3, [r7, #28]
 800e13c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e140:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e142:	68bb      	ldr	r3, [r7, #8]
 800e144:	781b      	ldrb	r3, [r3, #0]
 800e146:	f003 030f 	and.w	r3, r3, #15
 800e14a:	2101      	movs	r1, #1
 800e14c:	fa01 f303 	lsl.w	r3, r1, r3
 800e150:	69f9      	ldr	r1, [r7, #28]
 800e152:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e156:	4313      	orrs	r3, r2
 800e158:	634b      	str	r3, [r1, #52]	; 0x34
 800e15a:	e109      	b.n	800e370 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e15c:	69fb      	ldr	r3, [r7, #28]
 800e15e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e162:	689b      	ldr	r3, [r3, #8]
 800e164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d110      	bne.n	800e18e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e16c:	69bb      	ldr	r3, [r7, #24]
 800e16e:	015a      	lsls	r2, r3, #5
 800e170:	69fb      	ldr	r3, [r7, #28]
 800e172:	4413      	add	r3, r2
 800e174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	69ba      	ldr	r2, [r7, #24]
 800e17c:	0151      	lsls	r1, r2, #5
 800e17e:	69fa      	ldr	r2, [r7, #28]
 800e180:	440a      	add	r2, r1
 800e182:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e186:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e18a:	6013      	str	r3, [r2, #0]
 800e18c:	e00f      	b.n	800e1ae <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e18e:	69bb      	ldr	r3, [r7, #24]
 800e190:	015a      	lsls	r2, r3, #5
 800e192:	69fb      	ldr	r3, [r7, #28]
 800e194:	4413      	add	r3, r2
 800e196:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	69ba      	ldr	r2, [r7, #24]
 800e19e:	0151      	lsls	r1, r2, #5
 800e1a0:	69fa      	ldr	r2, [r7, #28]
 800e1a2:	440a      	add	r2, r1
 800e1a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e1a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e1ac:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800e1ae:	68bb      	ldr	r3, [r7, #8]
 800e1b0:	68d9      	ldr	r1, [r3, #12]
 800e1b2:	68bb      	ldr	r3, [r7, #8]
 800e1b4:	781a      	ldrb	r2, [r3, #0]
 800e1b6:	68bb      	ldr	r3, [r7, #8]
 800e1b8:	695b      	ldr	r3, [r3, #20]
 800e1ba:	b298      	uxth	r0, r3
 800e1bc:	79fb      	ldrb	r3, [r7, #7]
 800e1be:	9300      	str	r3, [sp, #0]
 800e1c0:	4603      	mov	r3, r0
 800e1c2:	68f8      	ldr	r0, [r7, #12]
 800e1c4:	f000 fa38 	bl	800e638 <USB_WritePacket>
 800e1c8:	e0d2      	b.n	800e370 <USB_EPStartXfer+0x480>
 800e1ca:	bf00      	nop
 800e1cc:	e007ffff 	.word	0xe007ffff
 800e1d0:	fff80000 	.word	0xfff80000
 800e1d4:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e1d8:	69bb      	ldr	r3, [r7, #24]
 800e1da:	015a      	lsls	r2, r3, #5
 800e1dc:	69fb      	ldr	r3, [r7, #28]
 800e1de:	4413      	add	r3, r2
 800e1e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e1e4:	691a      	ldr	r2, [r3, #16]
 800e1e6:	69bb      	ldr	r3, [r7, #24]
 800e1e8:	0159      	lsls	r1, r3, #5
 800e1ea:	69fb      	ldr	r3, [r7, #28]
 800e1ec:	440b      	add	r3, r1
 800e1ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e1f2:	4619      	mov	r1, r3
 800e1f4:	4b61      	ldr	r3, [pc, #388]	; (800e37c <USB_EPStartXfer+0x48c>)
 800e1f6:	4013      	ands	r3, r2
 800e1f8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e1fa:	69bb      	ldr	r3, [r7, #24]
 800e1fc:	015a      	lsls	r2, r3, #5
 800e1fe:	69fb      	ldr	r3, [r7, #28]
 800e200:	4413      	add	r3, r2
 800e202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e206:	691a      	ldr	r2, [r3, #16]
 800e208:	69bb      	ldr	r3, [r7, #24]
 800e20a:	0159      	lsls	r1, r3, #5
 800e20c:	69fb      	ldr	r3, [r7, #28]
 800e20e:	440b      	add	r3, r1
 800e210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e214:	4619      	mov	r1, r3
 800e216:	4b5a      	ldr	r3, [pc, #360]	; (800e380 <USB_EPStartXfer+0x490>)
 800e218:	4013      	ands	r3, r2
 800e21a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800e21c:	68bb      	ldr	r3, [r7, #8]
 800e21e:	695b      	ldr	r3, [r3, #20]
 800e220:	2b00      	cmp	r3, #0
 800e222:	d123      	bne.n	800e26c <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800e224:	69bb      	ldr	r3, [r7, #24]
 800e226:	015a      	lsls	r2, r3, #5
 800e228:	69fb      	ldr	r3, [r7, #28]
 800e22a:	4413      	add	r3, r2
 800e22c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e230:	691a      	ldr	r2, [r3, #16]
 800e232:	68bb      	ldr	r3, [r7, #8]
 800e234:	689b      	ldr	r3, [r3, #8]
 800e236:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e23a:	69b9      	ldr	r1, [r7, #24]
 800e23c:	0148      	lsls	r0, r1, #5
 800e23e:	69f9      	ldr	r1, [r7, #28]
 800e240:	4401      	add	r1, r0
 800e242:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e246:	4313      	orrs	r3, r2
 800e248:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e24a:	69bb      	ldr	r3, [r7, #24]
 800e24c:	015a      	lsls	r2, r3, #5
 800e24e:	69fb      	ldr	r3, [r7, #28]
 800e250:	4413      	add	r3, r2
 800e252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e256:	691b      	ldr	r3, [r3, #16]
 800e258:	69ba      	ldr	r2, [r7, #24]
 800e25a:	0151      	lsls	r1, r2, #5
 800e25c:	69fa      	ldr	r2, [r7, #28]
 800e25e:	440a      	add	r2, r1
 800e260:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e264:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e268:	6113      	str	r3, [r2, #16]
 800e26a:	e033      	b.n	800e2d4 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800e26c:	68bb      	ldr	r3, [r7, #8]
 800e26e:	695a      	ldr	r2, [r3, #20]
 800e270:	68bb      	ldr	r3, [r7, #8]
 800e272:	689b      	ldr	r3, [r3, #8]
 800e274:	4413      	add	r3, r2
 800e276:	1e5a      	subs	r2, r3, #1
 800e278:	68bb      	ldr	r3, [r7, #8]
 800e27a:	689b      	ldr	r3, [r3, #8]
 800e27c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e280:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800e282:	69bb      	ldr	r3, [r7, #24]
 800e284:	015a      	lsls	r2, r3, #5
 800e286:	69fb      	ldr	r3, [r7, #28]
 800e288:	4413      	add	r3, r2
 800e28a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e28e:	691a      	ldr	r2, [r3, #16]
 800e290:	8afb      	ldrh	r3, [r7, #22]
 800e292:	04d9      	lsls	r1, r3, #19
 800e294:	4b3b      	ldr	r3, [pc, #236]	; (800e384 <USB_EPStartXfer+0x494>)
 800e296:	400b      	ands	r3, r1
 800e298:	69b9      	ldr	r1, [r7, #24]
 800e29a:	0148      	lsls	r0, r1, #5
 800e29c:	69f9      	ldr	r1, [r7, #28]
 800e29e:	4401      	add	r1, r0
 800e2a0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e2a4:	4313      	orrs	r3, r2
 800e2a6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800e2a8:	69bb      	ldr	r3, [r7, #24]
 800e2aa:	015a      	lsls	r2, r3, #5
 800e2ac:	69fb      	ldr	r3, [r7, #28]
 800e2ae:	4413      	add	r3, r2
 800e2b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2b4:	691a      	ldr	r2, [r3, #16]
 800e2b6:	68bb      	ldr	r3, [r7, #8]
 800e2b8:	689b      	ldr	r3, [r3, #8]
 800e2ba:	8af9      	ldrh	r1, [r7, #22]
 800e2bc:	fb01 f303 	mul.w	r3, r1, r3
 800e2c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e2c4:	69b9      	ldr	r1, [r7, #24]
 800e2c6:	0148      	lsls	r0, r1, #5
 800e2c8:	69f9      	ldr	r1, [r7, #28]
 800e2ca:	4401      	add	r1, r0
 800e2cc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e2d0:	4313      	orrs	r3, r2
 800e2d2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800e2d4:	79fb      	ldrb	r3, [r7, #7]
 800e2d6:	2b01      	cmp	r3, #1
 800e2d8:	d10d      	bne.n	800e2f6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800e2da:	68bb      	ldr	r3, [r7, #8]
 800e2dc:	68db      	ldr	r3, [r3, #12]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d009      	beq.n	800e2f6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e2e2:	68bb      	ldr	r3, [r7, #8]
 800e2e4:	68d9      	ldr	r1, [r3, #12]
 800e2e6:	69bb      	ldr	r3, [r7, #24]
 800e2e8:	015a      	lsls	r2, r3, #5
 800e2ea:	69fb      	ldr	r3, [r7, #28]
 800e2ec:	4413      	add	r3, r2
 800e2ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2f2:	460a      	mov	r2, r1
 800e2f4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800e2f6:	68bb      	ldr	r3, [r7, #8]
 800e2f8:	78db      	ldrb	r3, [r3, #3]
 800e2fa:	2b01      	cmp	r3, #1
 800e2fc:	d128      	bne.n	800e350 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e2fe:	69fb      	ldr	r3, [r7, #28]
 800e300:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e304:	689b      	ldr	r3, [r3, #8]
 800e306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d110      	bne.n	800e330 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800e30e:	69bb      	ldr	r3, [r7, #24]
 800e310:	015a      	lsls	r2, r3, #5
 800e312:	69fb      	ldr	r3, [r7, #28]
 800e314:	4413      	add	r3, r2
 800e316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	69ba      	ldr	r2, [r7, #24]
 800e31e:	0151      	lsls	r1, r2, #5
 800e320:	69fa      	ldr	r2, [r7, #28]
 800e322:	440a      	add	r2, r1
 800e324:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e328:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e32c:	6013      	str	r3, [r2, #0]
 800e32e:	e00f      	b.n	800e350 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800e330:	69bb      	ldr	r3, [r7, #24]
 800e332:	015a      	lsls	r2, r3, #5
 800e334:	69fb      	ldr	r3, [r7, #28]
 800e336:	4413      	add	r3, r2
 800e338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	69ba      	ldr	r2, [r7, #24]
 800e340:	0151      	lsls	r1, r2, #5
 800e342:	69fa      	ldr	r2, [r7, #28]
 800e344:	440a      	add	r2, r1
 800e346:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e34a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e34e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e350:	69bb      	ldr	r3, [r7, #24]
 800e352:	015a      	lsls	r2, r3, #5
 800e354:	69fb      	ldr	r3, [r7, #28]
 800e356:	4413      	add	r3, r2
 800e358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	69ba      	ldr	r2, [r7, #24]
 800e360:	0151      	lsls	r1, r2, #5
 800e362:	69fa      	ldr	r2, [r7, #28]
 800e364:	440a      	add	r2, r1
 800e366:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e36a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e36e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e370:	2300      	movs	r3, #0
}
 800e372:	4618      	mov	r0, r3
 800e374:	3720      	adds	r7, #32
 800e376:	46bd      	mov	sp, r7
 800e378:	bd80      	pop	{r7, pc}
 800e37a:	bf00      	nop
 800e37c:	fff80000 	.word	0xfff80000
 800e380:	e007ffff 	.word	0xe007ffff
 800e384:	1ff80000 	.word	0x1ff80000

0800e388 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800e388:	b480      	push	{r7}
 800e38a:	b087      	sub	sp, #28
 800e38c:	af00      	add	r7, sp, #0
 800e38e:	60f8      	str	r0, [r7, #12]
 800e390:	60b9      	str	r1, [r7, #8]
 800e392:	4613      	mov	r3, r2
 800e394:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800e39a:	68bb      	ldr	r3, [r7, #8]
 800e39c:	781b      	ldrb	r3, [r3, #0]
 800e39e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e3a0:	68bb      	ldr	r3, [r7, #8]
 800e3a2:	785b      	ldrb	r3, [r3, #1]
 800e3a4:	2b01      	cmp	r3, #1
 800e3a6:	f040 80cd 	bne.w	800e544 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e3aa:	68bb      	ldr	r3, [r7, #8]
 800e3ac:	695b      	ldr	r3, [r3, #20]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d132      	bne.n	800e418 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e3b2:	693b      	ldr	r3, [r7, #16]
 800e3b4:	015a      	lsls	r2, r3, #5
 800e3b6:	697b      	ldr	r3, [r7, #20]
 800e3b8:	4413      	add	r3, r2
 800e3ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e3be:	691a      	ldr	r2, [r3, #16]
 800e3c0:	693b      	ldr	r3, [r7, #16]
 800e3c2:	0159      	lsls	r1, r3, #5
 800e3c4:	697b      	ldr	r3, [r7, #20]
 800e3c6:	440b      	add	r3, r1
 800e3c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e3cc:	4619      	mov	r1, r3
 800e3ce:	4b98      	ldr	r3, [pc, #608]	; (800e630 <USB_EP0StartXfer+0x2a8>)
 800e3d0:	4013      	ands	r3, r2
 800e3d2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e3d4:	693b      	ldr	r3, [r7, #16]
 800e3d6:	015a      	lsls	r2, r3, #5
 800e3d8:	697b      	ldr	r3, [r7, #20]
 800e3da:	4413      	add	r3, r2
 800e3dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e3e0:	691b      	ldr	r3, [r3, #16]
 800e3e2:	693a      	ldr	r2, [r7, #16]
 800e3e4:	0151      	lsls	r1, r2, #5
 800e3e6:	697a      	ldr	r2, [r7, #20]
 800e3e8:	440a      	add	r2, r1
 800e3ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e3ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e3f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e3f4:	693b      	ldr	r3, [r7, #16]
 800e3f6:	015a      	lsls	r2, r3, #5
 800e3f8:	697b      	ldr	r3, [r7, #20]
 800e3fa:	4413      	add	r3, r2
 800e3fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e400:	691a      	ldr	r2, [r3, #16]
 800e402:	693b      	ldr	r3, [r7, #16]
 800e404:	0159      	lsls	r1, r3, #5
 800e406:	697b      	ldr	r3, [r7, #20]
 800e408:	440b      	add	r3, r1
 800e40a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e40e:	4619      	mov	r1, r3
 800e410:	4b88      	ldr	r3, [pc, #544]	; (800e634 <USB_EP0StartXfer+0x2ac>)
 800e412:	4013      	ands	r3, r2
 800e414:	610b      	str	r3, [r1, #16]
 800e416:	e04e      	b.n	800e4b6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e418:	693b      	ldr	r3, [r7, #16]
 800e41a:	015a      	lsls	r2, r3, #5
 800e41c:	697b      	ldr	r3, [r7, #20]
 800e41e:	4413      	add	r3, r2
 800e420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e424:	691a      	ldr	r2, [r3, #16]
 800e426:	693b      	ldr	r3, [r7, #16]
 800e428:	0159      	lsls	r1, r3, #5
 800e42a:	697b      	ldr	r3, [r7, #20]
 800e42c:	440b      	add	r3, r1
 800e42e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e432:	4619      	mov	r1, r3
 800e434:	4b7f      	ldr	r3, [pc, #508]	; (800e634 <USB_EP0StartXfer+0x2ac>)
 800e436:	4013      	ands	r3, r2
 800e438:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e43a:	693b      	ldr	r3, [r7, #16]
 800e43c:	015a      	lsls	r2, r3, #5
 800e43e:	697b      	ldr	r3, [r7, #20]
 800e440:	4413      	add	r3, r2
 800e442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e446:	691a      	ldr	r2, [r3, #16]
 800e448:	693b      	ldr	r3, [r7, #16]
 800e44a:	0159      	lsls	r1, r3, #5
 800e44c:	697b      	ldr	r3, [r7, #20]
 800e44e:	440b      	add	r3, r1
 800e450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e454:	4619      	mov	r1, r3
 800e456:	4b76      	ldr	r3, [pc, #472]	; (800e630 <USB_EP0StartXfer+0x2a8>)
 800e458:	4013      	ands	r3, r2
 800e45a:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800e45c:	68bb      	ldr	r3, [r7, #8]
 800e45e:	695a      	ldr	r2, [r3, #20]
 800e460:	68bb      	ldr	r3, [r7, #8]
 800e462:	689b      	ldr	r3, [r3, #8]
 800e464:	429a      	cmp	r2, r3
 800e466:	d903      	bls.n	800e470 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800e468:	68bb      	ldr	r3, [r7, #8]
 800e46a:	689a      	ldr	r2, [r3, #8]
 800e46c:	68bb      	ldr	r3, [r7, #8]
 800e46e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e470:	693b      	ldr	r3, [r7, #16]
 800e472:	015a      	lsls	r2, r3, #5
 800e474:	697b      	ldr	r3, [r7, #20]
 800e476:	4413      	add	r3, r2
 800e478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e47c:	691b      	ldr	r3, [r3, #16]
 800e47e:	693a      	ldr	r2, [r7, #16]
 800e480:	0151      	lsls	r1, r2, #5
 800e482:	697a      	ldr	r2, [r7, #20]
 800e484:	440a      	add	r2, r1
 800e486:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e48a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e48e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e490:	693b      	ldr	r3, [r7, #16]
 800e492:	015a      	lsls	r2, r3, #5
 800e494:	697b      	ldr	r3, [r7, #20]
 800e496:	4413      	add	r3, r2
 800e498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e49c:	691a      	ldr	r2, [r3, #16]
 800e49e:	68bb      	ldr	r3, [r7, #8]
 800e4a0:	695b      	ldr	r3, [r3, #20]
 800e4a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e4a6:	6939      	ldr	r1, [r7, #16]
 800e4a8:	0148      	lsls	r0, r1, #5
 800e4aa:	6979      	ldr	r1, [r7, #20]
 800e4ac:	4401      	add	r1, r0
 800e4ae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e4b2:	4313      	orrs	r3, r2
 800e4b4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800e4b6:	79fb      	ldrb	r3, [r7, #7]
 800e4b8:	2b01      	cmp	r3, #1
 800e4ba:	d11e      	bne.n	800e4fa <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e4bc:	68bb      	ldr	r3, [r7, #8]
 800e4be:	691b      	ldr	r3, [r3, #16]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d009      	beq.n	800e4d8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e4c4:	693b      	ldr	r3, [r7, #16]
 800e4c6:	015a      	lsls	r2, r3, #5
 800e4c8:	697b      	ldr	r3, [r7, #20]
 800e4ca:	4413      	add	r3, r2
 800e4cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e4d0:	461a      	mov	r2, r3
 800e4d2:	68bb      	ldr	r3, [r7, #8]
 800e4d4:	691b      	ldr	r3, [r3, #16]
 800e4d6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e4d8:	693b      	ldr	r3, [r7, #16]
 800e4da:	015a      	lsls	r2, r3, #5
 800e4dc:	697b      	ldr	r3, [r7, #20]
 800e4de:	4413      	add	r3, r2
 800e4e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	693a      	ldr	r2, [r7, #16]
 800e4e8:	0151      	lsls	r1, r2, #5
 800e4ea:	697a      	ldr	r2, [r7, #20]
 800e4ec:	440a      	add	r2, r1
 800e4ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e4f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e4f6:	6013      	str	r3, [r2, #0]
 800e4f8:	e092      	b.n	800e620 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e4fa:	693b      	ldr	r3, [r7, #16]
 800e4fc:	015a      	lsls	r2, r3, #5
 800e4fe:	697b      	ldr	r3, [r7, #20]
 800e500:	4413      	add	r3, r2
 800e502:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	693a      	ldr	r2, [r7, #16]
 800e50a:	0151      	lsls	r1, r2, #5
 800e50c:	697a      	ldr	r2, [r7, #20]
 800e50e:	440a      	add	r2, r1
 800e510:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e514:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e518:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800e51a:	68bb      	ldr	r3, [r7, #8]
 800e51c:	695b      	ldr	r3, [r3, #20]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d07e      	beq.n	800e620 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e522:	697b      	ldr	r3, [r7, #20]
 800e524:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e528:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e52a:	68bb      	ldr	r3, [r7, #8]
 800e52c:	781b      	ldrb	r3, [r3, #0]
 800e52e:	f003 030f 	and.w	r3, r3, #15
 800e532:	2101      	movs	r1, #1
 800e534:	fa01 f303 	lsl.w	r3, r1, r3
 800e538:	6979      	ldr	r1, [r7, #20]
 800e53a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e53e:	4313      	orrs	r3, r2
 800e540:	634b      	str	r3, [r1, #52]	; 0x34
 800e542:	e06d      	b.n	800e620 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e544:	693b      	ldr	r3, [r7, #16]
 800e546:	015a      	lsls	r2, r3, #5
 800e548:	697b      	ldr	r3, [r7, #20]
 800e54a:	4413      	add	r3, r2
 800e54c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e550:	691a      	ldr	r2, [r3, #16]
 800e552:	693b      	ldr	r3, [r7, #16]
 800e554:	0159      	lsls	r1, r3, #5
 800e556:	697b      	ldr	r3, [r7, #20]
 800e558:	440b      	add	r3, r1
 800e55a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e55e:	4619      	mov	r1, r3
 800e560:	4b34      	ldr	r3, [pc, #208]	; (800e634 <USB_EP0StartXfer+0x2ac>)
 800e562:	4013      	ands	r3, r2
 800e564:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e566:	693b      	ldr	r3, [r7, #16]
 800e568:	015a      	lsls	r2, r3, #5
 800e56a:	697b      	ldr	r3, [r7, #20]
 800e56c:	4413      	add	r3, r2
 800e56e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e572:	691a      	ldr	r2, [r3, #16]
 800e574:	693b      	ldr	r3, [r7, #16]
 800e576:	0159      	lsls	r1, r3, #5
 800e578:	697b      	ldr	r3, [r7, #20]
 800e57a:	440b      	add	r3, r1
 800e57c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e580:	4619      	mov	r1, r3
 800e582:	4b2b      	ldr	r3, [pc, #172]	; (800e630 <USB_EP0StartXfer+0x2a8>)
 800e584:	4013      	ands	r3, r2
 800e586:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800e588:	68bb      	ldr	r3, [r7, #8]
 800e58a:	695b      	ldr	r3, [r3, #20]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d003      	beq.n	800e598 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800e590:	68bb      	ldr	r3, [r7, #8]
 800e592:	689a      	ldr	r2, [r3, #8]
 800e594:	68bb      	ldr	r3, [r7, #8]
 800e596:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e598:	693b      	ldr	r3, [r7, #16]
 800e59a:	015a      	lsls	r2, r3, #5
 800e59c:	697b      	ldr	r3, [r7, #20]
 800e59e:	4413      	add	r3, r2
 800e5a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e5a4:	691b      	ldr	r3, [r3, #16]
 800e5a6:	693a      	ldr	r2, [r7, #16]
 800e5a8:	0151      	lsls	r1, r2, #5
 800e5aa:	697a      	ldr	r2, [r7, #20]
 800e5ac:	440a      	add	r2, r1
 800e5ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e5b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e5b6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800e5b8:	693b      	ldr	r3, [r7, #16]
 800e5ba:	015a      	lsls	r2, r3, #5
 800e5bc:	697b      	ldr	r3, [r7, #20]
 800e5be:	4413      	add	r3, r2
 800e5c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e5c4:	691a      	ldr	r2, [r3, #16]
 800e5c6:	68bb      	ldr	r3, [r7, #8]
 800e5c8:	689b      	ldr	r3, [r3, #8]
 800e5ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e5ce:	6939      	ldr	r1, [r7, #16]
 800e5d0:	0148      	lsls	r0, r1, #5
 800e5d2:	6979      	ldr	r1, [r7, #20]
 800e5d4:	4401      	add	r1, r0
 800e5d6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e5da:	4313      	orrs	r3, r2
 800e5dc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800e5de:	79fb      	ldrb	r3, [r7, #7]
 800e5e0:	2b01      	cmp	r3, #1
 800e5e2:	d10d      	bne.n	800e600 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800e5e4:	68bb      	ldr	r3, [r7, #8]
 800e5e6:	68db      	ldr	r3, [r3, #12]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d009      	beq.n	800e600 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e5ec:	68bb      	ldr	r3, [r7, #8]
 800e5ee:	68d9      	ldr	r1, [r3, #12]
 800e5f0:	693b      	ldr	r3, [r7, #16]
 800e5f2:	015a      	lsls	r2, r3, #5
 800e5f4:	697b      	ldr	r3, [r7, #20]
 800e5f6:	4413      	add	r3, r2
 800e5f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e5fc:	460a      	mov	r2, r1
 800e5fe:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e600:	693b      	ldr	r3, [r7, #16]
 800e602:	015a      	lsls	r2, r3, #5
 800e604:	697b      	ldr	r3, [r7, #20]
 800e606:	4413      	add	r3, r2
 800e608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	693a      	ldr	r2, [r7, #16]
 800e610:	0151      	lsls	r1, r2, #5
 800e612:	697a      	ldr	r2, [r7, #20]
 800e614:	440a      	add	r2, r1
 800e616:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e61a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e61e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e620:	2300      	movs	r3, #0
}
 800e622:	4618      	mov	r0, r3
 800e624:	371c      	adds	r7, #28
 800e626:	46bd      	mov	sp, r7
 800e628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e62c:	4770      	bx	lr
 800e62e:	bf00      	nop
 800e630:	e007ffff 	.word	0xe007ffff
 800e634:	fff80000 	.word	0xfff80000

0800e638 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800e638:	b480      	push	{r7}
 800e63a:	b089      	sub	sp, #36	; 0x24
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	60f8      	str	r0, [r7, #12]
 800e640:	60b9      	str	r1, [r7, #8]
 800e642:	4611      	mov	r1, r2
 800e644:	461a      	mov	r2, r3
 800e646:	460b      	mov	r3, r1
 800e648:	71fb      	strb	r3, [r7, #7]
 800e64a:	4613      	mov	r3, r2
 800e64c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800e652:	68bb      	ldr	r3, [r7, #8]
 800e654:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800e656:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d123      	bne.n	800e6a6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800e65e:	88bb      	ldrh	r3, [r7, #4]
 800e660:	3303      	adds	r3, #3
 800e662:	089b      	lsrs	r3, r3, #2
 800e664:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800e666:	2300      	movs	r3, #0
 800e668:	61bb      	str	r3, [r7, #24]
 800e66a:	e018      	b.n	800e69e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800e66c:	79fb      	ldrb	r3, [r7, #7]
 800e66e:	031a      	lsls	r2, r3, #12
 800e670:	697b      	ldr	r3, [r7, #20]
 800e672:	4413      	add	r3, r2
 800e674:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e678:	461a      	mov	r2, r3
 800e67a:	69fb      	ldr	r3, [r7, #28]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800e680:	69fb      	ldr	r3, [r7, #28]
 800e682:	3301      	adds	r3, #1
 800e684:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e686:	69fb      	ldr	r3, [r7, #28]
 800e688:	3301      	adds	r3, #1
 800e68a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e68c:	69fb      	ldr	r3, [r7, #28]
 800e68e:	3301      	adds	r3, #1
 800e690:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e692:	69fb      	ldr	r3, [r7, #28]
 800e694:	3301      	adds	r3, #1
 800e696:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800e698:	69bb      	ldr	r3, [r7, #24]
 800e69a:	3301      	adds	r3, #1
 800e69c:	61bb      	str	r3, [r7, #24]
 800e69e:	69ba      	ldr	r2, [r7, #24]
 800e6a0:	693b      	ldr	r3, [r7, #16]
 800e6a2:	429a      	cmp	r2, r3
 800e6a4:	d3e2      	bcc.n	800e66c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800e6a6:	2300      	movs	r3, #0
}
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	3724      	adds	r7, #36	; 0x24
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b2:	4770      	bx	lr

0800e6b4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800e6b4:	b480      	push	{r7}
 800e6b6:	b08b      	sub	sp, #44	; 0x2c
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	60f8      	str	r0, [r7, #12]
 800e6bc:	60b9      	str	r1, [r7, #8]
 800e6be:	4613      	mov	r3, r2
 800e6c0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800e6c6:	68bb      	ldr	r3, [r7, #8]
 800e6c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800e6ca:	88fb      	ldrh	r3, [r7, #6]
 800e6cc:	089b      	lsrs	r3, r3, #2
 800e6ce:	b29b      	uxth	r3, r3
 800e6d0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800e6d2:	88fb      	ldrh	r3, [r7, #6]
 800e6d4:	f003 0303 	and.w	r3, r3, #3
 800e6d8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800e6da:	2300      	movs	r3, #0
 800e6dc:	623b      	str	r3, [r7, #32]
 800e6de:	e014      	b.n	800e70a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800e6e0:	69bb      	ldr	r3, [r7, #24]
 800e6e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e6e6:	681a      	ldr	r2, [r3, #0]
 800e6e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6ea:	601a      	str	r2, [r3, #0]
    pDest++;
 800e6ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6ee:	3301      	adds	r3, #1
 800e6f0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e6f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6f4:	3301      	adds	r3, #1
 800e6f6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e6f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6fa:	3301      	adds	r3, #1
 800e6fc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e6fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e700:	3301      	adds	r3, #1
 800e702:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800e704:	6a3b      	ldr	r3, [r7, #32]
 800e706:	3301      	adds	r3, #1
 800e708:	623b      	str	r3, [r7, #32]
 800e70a:	6a3a      	ldr	r2, [r7, #32]
 800e70c:	697b      	ldr	r3, [r7, #20]
 800e70e:	429a      	cmp	r2, r3
 800e710:	d3e6      	bcc.n	800e6e0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800e712:	8bfb      	ldrh	r3, [r7, #30]
 800e714:	2b00      	cmp	r3, #0
 800e716:	d01e      	beq.n	800e756 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800e718:	2300      	movs	r3, #0
 800e71a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800e71c:	69bb      	ldr	r3, [r7, #24]
 800e71e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e722:	461a      	mov	r2, r3
 800e724:	f107 0310 	add.w	r3, r7, #16
 800e728:	6812      	ldr	r2, [r2, #0]
 800e72a:	601a      	str	r2, [r3, #0]
	
    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800e72c:	693a      	ldr	r2, [r7, #16]
 800e72e:	6a3b      	ldr	r3, [r7, #32]
 800e730:	b2db      	uxtb	r3, r3
 800e732:	00db      	lsls	r3, r3, #3
 800e734:	fa22 f303 	lsr.w	r3, r2, r3
 800e738:	b2da      	uxtb	r2, r3
 800e73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e73c:	701a      	strb	r2, [r3, #0]
      i++;
 800e73e:	6a3b      	ldr	r3, [r7, #32]
 800e740:	3301      	adds	r3, #1
 800e742:	623b      	str	r3, [r7, #32]
      pDest++;
 800e744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e746:	3301      	adds	r3, #1
 800e748:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800e74a:	8bfb      	ldrh	r3, [r7, #30]
 800e74c:	3b01      	subs	r3, #1
 800e74e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800e750:	8bfb      	ldrh	r3, [r7, #30]
 800e752:	2b00      	cmp	r3, #0
 800e754:	d1ea      	bne.n	800e72c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800e756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e758:	4618      	mov	r0, r3
 800e75a:	372c      	adds	r7, #44	; 0x2c
 800e75c:	46bd      	mov	sp, r7
 800e75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e762:	4770      	bx	lr

0800e764 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e764:	b480      	push	{r7}
 800e766:	b085      	sub	sp, #20
 800e768:	af00      	add	r7, sp, #0
 800e76a:	6078      	str	r0, [r7, #4]
 800e76c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e772:	683b      	ldr	r3, [r7, #0]
 800e774:	781b      	ldrb	r3, [r3, #0]
 800e776:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e778:	683b      	ldr	r3, [r7, #0]
 800e77a:	785b      	ldrb	r3, [r3, #1]
 800e77c:	2b01      	cmp	r3, #1
 800e77e:	d12c      	bne.n	800e7da <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e780:	68bb      	ldr	r3, [r7, #8]
 800e782:	015a      	lsls	r2, r3, #5
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	4413      	add	r3, r2
 800e788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	db12      	blt.n	800e7b8 <USB_EPSetStall+0x54>
 800e792:	68bb      	ldr	r3, [r7, #8]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d00f      	beq.n	800e7b8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800e798:	68bb      	ldr	r3, [r7, #8]
 800e79a:	015a      	lsls	r2, r3, #5
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	4413      	add	r3, r2
 800e7a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	68ba      	ldr	r2, [r7, #8]
 800e7a8:	0151      	lsls	r1, r2, #5
 800e7aa:	68fa      	ldr	r2, [r7, #12]
 800e7ac:	440a      	add	r2, r1
 800e7ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e7b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e7b6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800e7b8:	68bb      	ldr	r3, [r7, #8]
 800e7ba:	015a      	lsls	r2, r3, #5
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	4413      	add	r3, r2
 800e7c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	68ba      	ldr	r2, [r7, #8]
 800e7c8:	0151      	lsls	r1, r2, #5
 800e7ca:	68fa      	ldr	r2, [r7, #12]
 800e7cc:	440a      	add	r2, r1
 800e7ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e7d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e7d6:	6013      	str	r3, [r2, #0]
 800e7d8:	e02b      	b.n	800e832 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e7da:	68bb      	ldr	r3, [r7, #8]
 800e7dc:	015a      	lsls	r2, r3, #5
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	4413      	add	r3, r2
 800e7e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	db12      	blt.n	800e812 <USB_EPSetStall+0xae>
 800e7ec:	68bb      	ldr	r3, [r7, #8]
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d00f      	beq.n	800e812 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800e7f2:	68bb      	ldr	r3, [r7, #8]
 800e7f4:	015a      	lsls	r2, r3, #5
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	4413      	add	r3, r2
 800e7fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	68ba      	ldr	r2, [r7, #8]
 800e802:	0151      	lsls	r1, r2, #5
 800e804:	68fa      	ldr	r2, [r7, #12]
 800e806:	440a      	add	r2, r1
 800e808:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e80c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e810:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800e812:	68bb      	ldr	r3, [r7, #8]
 800e814:	015a      	lsls	r2, r3, #5
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	4413      	add	r3, r2
 800e81a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	68ba      	ldr	r2, [r7, #8]
 800e822:	0151      	lsls	r1, r2, #5
 800e824:	68fa      	ldr	r2, [r7, #12]
 800e826:	440a      	add	r2, r1
 800e828:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e82c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e830:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e832:	2300      	movs	r3, #0
}
 800e834:	4618      	mov	r0, r3
 800e836:	3714      	adds	r7, #20
 800e838:	46bd      	mov	sp, r7
 800e83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e83e:	4770      	bx	lr

0800e840 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e840:	b480      	push	{r7}
 800e842:	b085      	sub	sp, #20
 800e844:	af00      	add	r7, sp, #0
 800e846:	6078      	str	r0, [r7, #4]
 800e848:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e84e:	683b      	ldr	r3, [r7, #0]
 800e850:	781b      	ldrb	r3, [r3, #0]
 800e852:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e854:	683b      	ldr	r3, [r7, #0]
 800e856:	785b      	ldrb	r3, [r3, #1]
 800e858:	2b01      	cmp	r3, #1
 800e85a:	d128      	bne.n	800e8ae <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e85c:	68bb      	ldr	r3, [r7, #8]
 800e85e:	015a      	lsls	r2, r3, #5
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	4413      	add	r3, r2
 800e864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	68ba      	ldr	r2, [r7, #8]
 800e86c:	0151      	lsls	r1, r2, #5
 800e86e:	68fa      	ldr	r2, [r7, #12]
 800e870:	440a      	add	r2, r1
 800e872:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e876:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e87a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e87c:	683b      	ldr	r3, [r7, #0]
 800e87e:	78db      	ldrb	r3, [r3, #3]
 800e880:	2b03      	cmp	r3, #3
 800e882:	d003      	beq.n	800e88c <USB_EPClearStall+0x4c>
 800e884:	683b      	ldr	r3, [r7, #0]
 800e886:	78db      	ldrb	r3, [r3, #3]
 800e888:	2b02      	cmp	r3, #2
 800e88a:	d138      	bne.n	800e8fe <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e88c:	68bb      	ldr	r3, [r7, #8]
 800e88e:	015a      	lsls	r2, r3, #5
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	4413      	add	r3, r2
 800e894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	68ba      	ldr	r2, [r7, #8]
 800e89c:	0151      	lsls	r1, r2, #5
 800e89e:	68fa      	ldr	r2, [r7, #12]
 800e8a0:	440a      	add	r2, r1
 800e8a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e8a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e8aa:	6013      	str	r3, [r2, #0]
 800e8ac:	e027      	b.n	800e8fe <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800e8ae:	68bb      	ldr	r3, [r7, #8]
 800e8b0:	015a      	lsls	r2, r3, #5
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	4413      	add	r3, r2
 800e8b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	68ba      	ldr	r2, [r7, #8]
 800e8be:	0151      	lsls	r1, r2, #5
 800e8c0:	68fa      	ldr	r2, [r7, #12]
 800e8c2:	440a      	add	r2, r1
 800e8c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e8c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e8cc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e8ce:	683b      	ldr	r3, [r7, #0]
 800e8d0:	78db      	ldrb	r3, [r3, #3]
 800e8d2:	2b03      	cmp	r3, #3
 800e8d4:	d003      	beq.n	800e8de <USB_EPClearStall+0x9e>
 800e8d6:	683b      	ldr	r3, [r7, #0]
 800e8d8:	78db      	ldrb	r3, [r3, #3]
 800e8da:	2b02      	cmp	r3, #2
 800e8dc:	d10f      	bne.n	800e8fe <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e8de:	68bb      	ldr	r3, [r7, #8]
 800e8e0:	015a      	lsls	r2, r3, #5
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	4413      	add	r3, r2
 800e8e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	68ba      	ldr	r2, [r7, #8]
 800e8ee:	0151      	lsls	r1, r2, #5
 800e8f0:	68fa      	ldr	r2, [r7, #12]
 800e8f2:	440a      	add	r2, r1
 800e8f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e8f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e8fc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800e8fe:	2300      	movs	r3, #0
}
 800e900:	4618      	mov	r0, r3
 800e902:	3714      	adds	r7, #20
 800e904:	46bd      	mov	sp, r7
 800e906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e90a:	4770      	bx	lr

0800e90c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800e90c:	b480      	push	{r7}
 800e90e:	b085      	sub	sp, #20
 800e910:	af00      	add	r7, sp, #0
 800e912:	6078      	str	r0, [r7, #4]
 800e914:	460b      	mov	r3, r1
 800e916:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	68fa      	ldr	r2, [r7, #12]
 800e926:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e92a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800e92e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e936:	681a      	ldr	r2, [r3, #0]
 800e938:	78fb      	ldrb	r3, [r7, #3]
 800e93a:	011b      	lsls	r3, r3, #4
 800e93c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800e940:	68f9      	ldr	r1, [r7, #12]
 800e942:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e946:	4313      	orrs	r3, r2
 800e948:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800e94a:	2300      	movs	r3, #0
}
 800e94c:	4618      	mov	r0, r3
 800e94e:	3714      	adds	r7, #20
 800e950:	46bd      	mov	sp, r7
 800e952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e956:	4770      	bx	lr

0800e958 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e958:	b480      	push	{r7}
 800e95a:	b085      	sub	sp, #20
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	68fa      	ldr	r2, [r7, #12]
 800e96e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e972:	f023 0303 	bic.w	r3, r3, #3
 800e976:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e97e:	685b      	ldr	r3, [r3, #4]
 800e980:	68fa      	ldr	r2, [r7, #12]
 800e982:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e986:	f023 0302 	bic.w	r3, r3, #2
 800e98a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e98c:	2300      	movs	r3, #0
}
 800e98e:	4618      	mov	r0, r3
 800e990:	3714      	adds	r7, #20
 800e992:	46bd      	mov	sp, r7
 800e994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e998:	4770      	bx	lr

0800e99a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e99a:	b480      	push	{r7}
 800e99c:	b085      	sub	sp, #20
 800e99e:	af00      	add	r7, sp, #0
 800e9a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	68fa      	ldr	r2, [r7, #12]
 800e9b0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e9b4:	f023 0303 	bic.w	r3, r3, #3
 800e9b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e9c0:	685b      	ldr	r3, [r3, #4]
 800e9c2:	68fa      	ldr	r2, [r7, #12]
 800e9c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e9c8:	f043 0302 	orr.w	r3, r3, #2
 800e9cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e9ce:	2300      	movs	r3, #0
}
 800e9d0:	4618      	mov	r0, r3
 800e9d2:	3714      	adds	r7, #20
 800e9d4:	46bd      	mov	sp, r7
 800e9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9da:	4770      	bx	lr

0800e9dc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800e9dc:	b480      	push	{r7}
 800e9de:	b085      	sub	sp, #20
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	695b      	ldr	r3, [r3, #20]
 800e9e8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	699b      	ldr	r3, [r3, #24]
 800e9ee:	68fa      	ldr	r2, [r7, #12]
 800e9f0:	4013      	ands	r3, r2
 800e9f2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800e9f4:	68fb      	ldr	r3, [r7, #12]
}
 800e9f6:	4618      	mov	r0, r3
 800e9f8:	3714      	adds	r7, #20
 800e9fa:	46bd      	mov	sp, r7
 800e9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea00:	4770      	bx	lr

0800ea02 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ea02:	b480      	push	{r7}
 800ea04:	b085      	sub	sp, #20
 800ea06:	af00      	add	r7, sp, #0
 800ea08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea14:	699b      	ldr	r3, [r3, #24]
 800ea16:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea1e:	69db      	ldr	r3, [r3, #28]
 800ea20:	68ba      	ldr	r2, [r7, #8]
 800ea22:	4013      	ands	r3, r2
 800ea24:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ea26:	68bb      	ldr	r3, [r7, #8]
 800ea28:	0c1b      	lsrs	r3, r3, #16
}
 800ea2a:	4618      	mov	r0, r3
 800ea2c:	3714      	adds	r7, #20
 800ea2e:	46bd      	mov	sp, r7
 800ea30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea34:	4770      	bx	lr

0800ea36 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ea36:	b480      	push	{r7}
 800ea38:	b085      	sub	sp, #20
 800ea3a:	af00      	add	r7, sp, #0
 800ea3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea48:	699b      	ldr	r3, [r3, #24]
 800ea4a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea52:	69db      	ldr	r3, [r3, #28]
 800ea54:	68ba      	ldr	r2, [r7, #8]
 800ea56:	4013      	ands	r3, r2
 800ea58:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ea5a:	68bb      	ldr	r3, [r7, #8]
 800ea5c:	b29b      	uxth	r3, r3
}
 800ea5e:	4618      	mov	r0, r3
 800ea60:	3714      	adds	r7, #20
 800ea62:	46bd      	mov	sp, r7
 800ea64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea68:	4770      	bx	lr

0800ea6a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ea6a:	b480      	push	{r7}
 800ea6c:	b085      	sub	sp, #20
 800ea6e:	af00      	add	r7, sp, #0
 800ea70:	6078      	str	r0, [r7, #4]
 800ea72:	460b      	mov	r3, r1
 800ea74:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ea7a:	78fb      	ldrb	r3, [r7, #3]
 800ea7c:	015a      	lsls	r2, r3, #5
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	4413      	add	r3, r2
 800ea82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea86:	689b      	ldr	r3, [r3, #8]
 800ea88:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea90:	695b      	ldr	r3, [r3, #20]
 800ea92:	68ba      	ldr	r2, [r7, #8]
 800ea94:	4013      	ands	r3, r2
 800ea96:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ea98:	68bb      	ldr	r3, [r7, #8]
}
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	3714      	adds	r7, #20
 800ea9e:	46bd      	mov	sp, r7
 800eaa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa4:	4770      	bx	lr

0800eaa6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800eaa6:	b480      	push	{r7}
 800eaa8:	b087      	sub	sp, #28
 800eaaa:	af00      	add	r7, sp, #0
 800eaac:	6078      	str	r0, [r7, #4]
 800eaae:	460b      	mov	r3, r1
 800eab0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800eab6:	697b      	ldr	r3, [r7, #20]
 800eab8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eabc:	691b      	ldr	r3, [r3, #16]
 800eabe:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800eac0:	697b      	ldr	r3, [r7, #20]
 800eac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eac8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800eaca:	78fb      	ldrb	r3, [r7, #3]
 800eacc:	f003 030f 	and.w	r3, r3, #15
 800ead0:	68fa      	ldr	r2, [r7, #12]
 800ead2:	fa22 f303 	lsr.w	r3, r2, r3
 800ead6:	01db      	lsls	r3, r3, #7
 800ead8:	b2db      	uxtb	r3, r3
 800eada:	693a      	ldr	r2, [r7, #16]
 800eadc:	4313      	orrs	r3, r2
 800eade:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800eae0:	78fb      	ldrb	r3, [r7, #3]
 800eae2:	015a      	lsls	r2, r3, #5
 800eae4:	697b      	ldr	r3, [r7, #20]
 800eae6:	4413      	add	r3, r2
 800eae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eaec:	689b      	ldr	r3, [r3, #8]
 800eaee:	693a      	ldr	r2, [r7, #16]
 800eaf0:	4013      	ands	r3, r2
 800eaf2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800eaf4:	68bb      	ldr	r3, [r7, #8]
}
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	371c      	adds	r7, #28
 800eafa:	46bd      	mov	sp, r7
 800eafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb00:	4770      	bx	lr

0800eb02 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800eb02:	b480      	push	{r7}
 800eb04:	b083      	sub	sp, #12
 800eb06:	af00      	add	r7, sp, #0
 800eb08:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	695b      	ldr	r3, [r3, #20]
 800eb0e:	f003 0301 	and.w	r3, r3, #1
}
 800eb12:	4618      	mov	r0, r3
 800eb14:	370c      	adds	r7, #12
 800eb16:	46bd      	mov	sp, r7
 800eb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb1c:	4770      	bx	lr
	...

0800eb20 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800eb20:	b480      	push	{r7}
 800eb22:	b085      	sub	sp, #20
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb32:	681a      	ldr	r2, [r3, #0]
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb3a:	4619      	mov	r1, r3
 800eb3c:	4b09      	ldr	r3, [pc, #36]	; (800eb64 <USB_ActivateSetup+0x44>)
 800eb3e:	4013      	ands	r3, r2
 800eb40:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb48:	685b      	ldr	r3, [r3, #4]
 800eb4a:	68fa      	ldr	r2, [r7, #12]
 800eb4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800eb50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800eb54:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800eb56:	2300      	movs	r3, #0
}
 800eb58:	4618      	mov	r0, r3
 800eb5a:	3714      	adds	r7, #20
 800eb5c:	46bd      	mov	sp, r7
 800eb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb62:	4770      	bx	lr
 800eb64:	fffff800 	.word	0xfffff800

0800eb68 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800eb68:	b480      	push	{r7}
 800eb6a:	b087      	sub	sp, #28
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	60f8      	str	r0, [r7, #12]
 800eb70:	460b      	mov	r3, r1
 800eb72:	607a      	str	r2, [r7, #4]
 800eb74:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	333c      	adds	r3, #60	; 0x3c
 800eb7e:	3304      	adds	r3, #4
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800eb84:	693b      	ldr	r3, [r7, #16]
 800eb86:	4a26      	ldr	r2, [pc, #152]	; (800ec20 <USB_EP0_OutStart+0xb8>)
 800eb88:	4293      	cmp	r3, r2
 800eb8a:	d90a      	bls.n	800eba2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800eb8c:	697b      	ldr	r3, [r7, #20]
 800eb8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800eb98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800eb9c:	d101      	bne.n	800eba2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800eb9e:	2300      	movs	r3, #0
 800eba0:	e037      	b.n	800ec12 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800eba2:	697b      	ldr	r3, [r7, #20]
 800eba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eba8:	461a      	mov	r2, r3
 800ebaa:	2300      	movs	r3, #0
 800ebac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ebae:	697b      	ldr	r3, [r7, #20]
 800ebb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ebb4:	691b      	ldr	r3, [r3, #16]
 800ebb6:	697a      	ldr	r2, [r7, #20]
 800ebb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ebbc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ebc0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ebc2:	697b      	ldr	r3, [r7, #20]
 800ebc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ebc8:	691b      	ldr	r3, [r3, #16]
 800ebca:	697a      	ldr	r2, [r7, #20]
 800ebcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ebd0:	f043 0318 	orr.w	r3, r3, #24
 800ebd4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ebd6:	697b      	ldr	r3, [r7, #20]
 800ebd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ebdc:	691b      	ldr	r3, [r3, #16]
 800ebde:	697a      	ldr	r2, [r7, #20]
 800ebe0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ebe4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800ebe8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ebea:	7afb      	ldrb	r3, [r7, #11]
 800ebec:	2b01      	cmp	r3, #1
 800ebee:	d10f      	bne.n	800ec10 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ebf0:	697b      	ldr	r3, [r7, #20]
 800ebf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ebf6:	461a      	mov	r2, r3
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800ebfc:	697b      	ldr	r3, [r7, #20]
 800ebfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	697a      	ldr	r2, [r7, #20]
 800ec06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ec0a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800ec0e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ec10:	2300      	movs	r3, #0
}
 800ec12:	4618      	mov	r0, r3
 800ec14:	371c      	adds	r7, #28
 800ec16:	46bd      	mov	sp, r7
 800ec18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec1c:	4770      	bx	lr
 800ec1e:	bf00      	nop
 800ec20:	4f54300a 	.word	0x4f54300a

0800ec24 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ec24:	b480      	push	{r7}
 800ec26:	b085      	sub	sp, #20
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800ec2c:	2300      	movs	r3, #0
 800ec2e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	3301      	adds	r3, #1
 800ec34:	60fb      	str	r3, [r7, #12]
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	4a13      	ldr	r2, [pc, #76]	; (800ec88 <USB_CoreReset+0x64>)
 800ec3a:	4293      	cmp	r3, r2
 800ec3c:	d901      	bls.n	800ec42 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ec3e:	2303      	movs	r3, #3
 800ec40:	e01b      	b.n	800ec7a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	691b      	ldr	r3, [r3, #16]
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	daf2      	bge.n	800ec30 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ec4a:	2300      	movs	r3, #0
 800ec4c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	691b      	ldr	r3, [r3, #16]
 800ec52:	f043 0201 	orr.w	r2, r3, #1
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	3301      	adds	r3, #1
 800ec5e:	60fb      	str	r3, [r7, #12]
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	4a09      	ldr	r2, [pc, #36]	; (800ec88 <USB_CoreReset+0x64>)
 800ec64:	4293      	cmp	r3, r2
 800ec66:	d901      	bls.n	800ec6c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ec68:	2303      	movs	r3, #3
 800ec6a:	e006      	b.n	800ec7a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	691b      	ldr	r3, [r3, #16]
 800ec70:	f003 0301 	and.w	r3, r3, #1
 800ec74:	2b01      	cmp	r3, #1
 800ec76:	d0f0      	beq.n	800ec5a <USB_CoreReset+0x36>

  return HAL_OK;
 800ec78:	2300      	movs	r3, #0
}
 800ec7a:	4618      	mov	r0, r3
 800ec7c:	3714      	adds	r7, #20
 800ec7e:	46bd      	mov	sp, r7
 800ec80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec84:	4770      	bx	lr
 800ec86:	bf00      	nop
 800ec88:	00030d40 	.word	0x00030d40

0800ec8c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ec8c:	b580      	push	{r7, lr}
 800ec8e:	b082      	sub	sp, #8
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800ec94:	f000 f80e 	bl	800ecb4 <BSP_SD_WriteCpltCallback>
}
 800ec98:	bf00      	nop
 800ec9a:	3708      	adds	r7, #8
 800ec9c:	46bd      	mov	sp, r7
 800ec9e:	bd80      	pop	{r7, pc}

0800eca0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800eca0:	b580      	push	{r7, lr}
 800eca2:	b082      	sub	sp, #8
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800eca8:	f000 f810 	bl	800eccc <BSP_SD_ReadCpltCallback>
}
 800ecac:	bf00      	nop
 800ecae:	3708      	adds	r7, #8
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	bd80      	pop	{r7, pc}

0800ecb4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800ecb4:	b480      	push	{r7}
 800ecb6:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800ecb8:	4b03      	ldr	r3, [pc, #12]	; (800ecc8 <BSP_SD_WriteCpltCallback+0x14>)
 800ecba:	2201      	movs	r2, #1
 800ecbc:	601a      	str	r2, [r3, #0]
}
 800ecbe:	bf00      	nop
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc6:	4770      	bx	lr
 800ecc8:	24000754 	.word	0x24000754

0800eccc <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800eccc:	b480      	push	{r7}
 800ecce:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800ecd0:	4b03      	ldr	r3, [pc, #12]	; (800ece0 <BSP_SD_ReadCpltCallback+0x14>)
 800ecd2:	2201      	movs	r2, #1
 800ecd4:	601a      	str	r2, [r3, #0]
}
 800ecd6:	bf00      	nop
 800ecd8:	46bd      	mov	sp, r7
 800ecda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecde:	4770      	bx	lr
 800ece0:	24000758 	.word	0x24000758
 800ece4:	00000000 	.word	0x00000000

0800ece8 <_ZN8RCFilter6updateEf>:
#include <helpers.hpp>
#include <micros.hpp>


float RCFilter::update(float input)
{
 800ece8:	b510      	push	{r4, lr}
 800ecea:	ed2d 8b02 	vpush	{d8}
 800ecee:	4604      	mov	r4, r0
 800ecf0:	eeb0 8a40 	vmov.f32	s16, s0
	uint32_t now = micros();
 800ecf4:	f7f2 fb42 	bl	800137c <_Z6microsv>
	double dt = (now - prev_time) / MICROS_PER_SEC;
 800ecf8:	ee07 0a90 	vmov	s15, r0
 800ecfc:	ed94 6a01 	vldr	s12, [r4, #4]
	prev_time = now;

	// Compute equivalent RC constant from fc.
	float RC = 1.0/ (mathformulas::pi * 2 * cutoff_freq);
 800ed00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	double dt = (now - prev_time) / MICROS_PER_SEC;
 800ed04:	eef8 7a67 	vcvt.f32.u32	s15, s15
	float RC = 1.0/ (mathformulas::pi * 2 * cutoff_freq);
 800ed08:	eddf 6a17 	vldr	s13, [pc, #92]	; 800ed68 <_ZN8RCFilter6updateEf+0x80>
 800ed0c:	edd4 5a00 	vldr	s11, [r4]

	 // Precompute filter coefficients for first order low-pass filter
	float alpha = dt / (dt + RC);
	float beta = RC / (dt + RC);

	float output = alpha * input + beta * prev_output;
 800ed10:	ed94 0a02 	vldr	s0, [r4, #8]
	double dt = (now - prev_time) / MICROS_PER_SEC;
 800ed14:	ee37 6ac6 	vsub.f32	s12, s15, s12
	prev_time = now;
 800ed18:	edc4 7a01 	vstr	s15, [r4, #4]
	float RC = 1.0/ (mathformulas::pi * 2 * cutoff_freq);
 800ed1c:	ee65 5aa6 	vmul.f32	s11, s11, s13
	double dt = (now - prev_time) / MICROS_PER_SEC;
 800ed20:	ed9f 3b0f 	vldr	d3, [pc, #60]	; 800ed60 <_ZN8RCFilter6updateEf+0x78>
 800ed24:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
	float RC = 1.0/ (mathformulas::pi * 2 * cutoff_freq);
 800ed28:	eec7 7a25 	vdiv.f32	s15, s14, s11
	double dt = (now - prev_time) / MICROS_PER_SEC;
 800ed2c:	ee86 4b03 	vdiv.f64	d4, d6, d3
	float alpha = dt / (dt + RC);
 800ed30:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800ed34:	ee36 5b04 	vadd.f64	d5, d6, d4
	float beta = RC / (dt + RC);
 800ed38:	ee86 7b05 	vdiv.f64	d7, d6, d5
	float alpha = dt / (dt + RC);
 800ed3c:	ee84 6b05 	vdiv.f64	d6, d4, d5
	float beta = RC / (dt + RC);
 800ed40:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
	float output = alpha * input + beta * prev_output;
 800ed44:	ee27 7a00 	vmul.f32	s14, s14, s0
	float alpha = dt / (dt + RC);
 800ed48:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
	float output = alpha * input + beta * prev_output;
 800ed4c:	eea6 7a08 	vfma.f32	s14, s12, s16

	prev_output = output;

	return output;
}
 800ed50:	ecbd 8b02 	vpop	{d8}
	float output = alpha * input + beta * prev_output;
 800ed54:	eeb0 0a47 	vmov.f32	s0, s14
	prev_output = output;
 800ed58:	ed84 7a02 	vstr	s14, [r4, #8]
}
 800ed5c:	bd10      	pop	{r4, pc}
 800ed5e:	bf00      	nop
 800ed60:	00000000 	.word	0x00000000
 800ed64:	412e8480 	.word	0x412e8480
 800ed68:	40c90fdb 	.word	0x40c90fdb

0800ed6c <_ZN8RCFilter5resetEv>:

void RCFilter::reset()
{
	prev_output = 0;
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	6083      	str	r3, [r0, #8]
}
 800ed70:	4770      	bx	lr
 800ed72:	bf00      	nop

0800ed74 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ed74:	b580      	push	{r7, lr}
 800ed76:	b084      	sub	sp, #16
 800ed78:	af00      	add	r7, sp, #0
 800ed7a:	6078      	str	r0, [r7, #4]
 800ed7c:	460b      	mov	r3, r1
 800ed7e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ed80:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800ed84:	f002 f9be 	bl	8011104 <malloc>
 800ed88:	4603      	mov	r3, r0
 800ed8a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d105      	bne.n	800ed9e <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	2200      	movs	r2, #0
 800ed96:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800ed9a:	2302      	movs	r3, #2
 800ed9c:	e066      	b.n	800ee6c <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	68fa      	ldr	r2, [r7, #12]
 800eda2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	7c1b      	ldrb	r3, [r3, #16]
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d119      	bne.n	800ede2 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800edae:	f44f 7300 	mov.w	r3, #512	; 0x200
 800edb2:	2202      	movs	r2, #2
 800edb4:	2181      	movs	r1, #129	; 0x81
 800edb6:	6878      	ldr	r0, [r7, #4]
 800edb8:	f002 f82b 	bl	8010e12 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	2201      	movs	r2, #1
 800edc0:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800edc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800edc6:	2202      	movs	r2, #2
 800edc8:	2101      	movs	r1, #1
 800edca:	6878      	ldr	r0, [r7, #4]
 800edcc:	f002 f821 	bl	8010e12 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	2201      	movs	r2, #1
 800edd4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	2210      	movs	r2, #16
 800eddc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800ede0:	e016      	b.n	800ee10 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ede2:	2340      	movs	r3, #64	; 0x40
 800ede4:	2202      	movs	r2, #2
 800ede6:	2181      	movs	r1, #129	; 0x81
 800ede8:	6878      	ldr	r0, [r7, #4]
 800edea:	f002 f812 	bl	8010e12 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	2201      	movs	r2, #1
 800edf2:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800edf4:	2340      	movs	r3, #64	; 0x40
 800edf6:	2202      	movs	r2, #2
 800edf8:	2101      	movs	r1, #1
 800edfa:	6878      	ldr	r0, [r7, #4]
 800edfc:	f002 f809 	bl	8010e12 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	2201      	movs	r2, #1
 800ee04:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	2210      	movs	r2, #16
 800ee0c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ee10:	2308      	movs	r3, #8
 800ee12:	2203      	movs	r2, #3
 800ee14:	2182      	movs	r1, #130	; 0x82
 800ee16:	6878      	ldr	r0, [r7, #4]
 800ee18:	f001 fffb 	bl	8010e12 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	2201      	movs	r2, #1
 800ee20:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	2200      	movs	r2, #0
 800ee32:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	2200      	movs	r2, #0
 800ee3a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	7c1b      	ldrb	r3, [r3, #16]
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d109      	bne.n	800ee5a <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ee4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ee50:	2101      	movs	r1, #1
 800ee52:	6878      	ldr	r0, [r7, #4]
 800ee54:	f002 f8cc 	bl	8010ff0 <USBD_LL_PrepareReceive>
 800ee58:	e007      	b.n	800ee6a <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ee60:	2340      	movs	r3, #64	; 0x40
 800ee62:	2101      	movs	r1, #1
 800ee64:	6878      	ldr	r0, [r7, #4]
 800ee66:	f002 f8c3 	bl	8010ff0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ee6a:	2300      	movs	r3, #0
}
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	3710      	adds	r7, #16
 800ee70:	46bd      	mov	sp, r7
 800ee72:	bd80      	pop	{r7, pc}

0800ee74 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ee74:	b580      	push	{r7, lr}
 800ee76:	b084      	sub	sp, #16
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	6078      	str	r0, [r7, #4]
 800ee7c:	460b      	mov	r3, r1
 800ee7e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800ee80:	2300      	movs	r3, #0
 800ee82:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800ee84:	2181      	movs	r1, #129	; 0x81
 800ee86:	6878      	ldr	r0, [r7, #4]
 800ee88:	f001 ffe9 	bl	8010e5e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	2200      	movs	r2, #0
 800ee90:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800ee92:	2101      	movs	r1, #1
 800ee94:	6878      	ldr	r0, [r7, #4]
 800ee96:	f001 ffe2 	bl	8010e5e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	2200      	movs	r2, #0
 800ee9e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800eea2:	2182      	movs	r1, #130	; 0x82
 800eea4:	6878      	ldr	r0, [r7, #4]
 800eea6:	f001 ffda 	bl	8010e5e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	2200      	movs	r2, #0
 800eeae:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	2200      	movs	r2, #0
 800eeb6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d00e      	beq.n	800eee2 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800eeca:	685b      	ldr	r3, [r3, #4]
 800eecc:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eed4:	4618      	mov	r0, r3
 800eed6:	f002 f91d 	bl	8011114 <free>
    pdev->pClassData = NULL;
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	2200      	movs	r2, #0
 800eede:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800eee2:	7bfb      	ldrb	r3, [r7, #15]
}
 800eee4:	4618      	mov	r0, r3
 800eee6:	3710      	adds	r7, #16
 800eee8:	46bd      	mov	sp, r7
 800eeea:	bd80      	pop	{r7, pc}

0800eeec <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800eeec:	b580      	push	{r7, lr}
 800eeee:	b086      	sub	sp, #24
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	6078      	str	r0, [r7, #4]
 800eef4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eefc:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800eefe:	2300      	movs	r3, #0
 800ef00:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800ef02:	2300      	movs	r3, #0
 800ef04:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800ef06:	2300      	movs	r3, #0
 800ef08:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ef0a:	683b      	ldr	r3, [r7, #0]
 800ef0c:	781b      	ldrb	r3, [r3, #0]
 800ef0e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d03a      	beq.n	800ef8c <USBD_CDC_Setup+0xa0>
 800ef16:	2b20      	cmp	r3, #32
 800ef18:	f040 809a 	bne.w	800f050 <USBD_CDC_Setup+0x164>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800ef1c:	683b      	ldr	r3, [r7, #0]
 800ef1e:	88db      	ldrh	r3, [r3, #6]
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d029      	beq.n	800ef78 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800ef24:	683b      	ldr	r3, [r7, #0]
 800ef26:	781b      	ldrb	r3, [r3, #0]
 800ef28:	b25b      	sxtb	r3, r3
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	da11      	bge.n	800ef52 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ef34:	689b      	ldr	r3, [r3, #8]
 800ef36:	683a      	ldr	r2, [r7, #0]
 800ef38:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800ef3a:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ef3c:	683a      	ldr	r2, [r7, #0]
 800ef3e:	88d2      	ldrh	r2, [r2, #6]
 800ef40:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800ef42:	6939      	ldr	r1, [r7, #16]
 800ef44:	683b      	ldr	r3, [r7, #0]
 800ef46:	88db      	ldrh	r3, [r3, #6]
 800ef48:	461a      	mov	r2, r3
 800ef4a:	6878      	ldr	r0, [r7, #4]
 800ef4c:	f001 fabf 	bl	80104ce <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800ef50:	e085      	b.n	800f05e <USBD_CDC_Setup+0x172>
        hcdc->CmdOpCode = req->bRequest;
 800ef52:	683b      	ldr	r3, [r7, #0]
 800ef54:	785a      	ldrb	r2, [r3, #1]
 800ef56:	693b      	ldr	r3, [r7, #16]
 800ef58:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800ef5c:	683b      	ldr	r3, [r7, #0]
 800ef5e:	88db      	ldrh	r3, [r3, #6]
 800ef60:	b2da      	uxtb	r2, r3
 800ef62:	693b      	ldr	r3, [r7, #16]
 800ef64:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800ef68:	6939      	ldr	r1, [r7, #16]
 800ef6a:	683b      	ldr	r3, [r7, #0]
 800ef6c:	88db      	ldrh	r3, [r3, #6]
 800ef6e:	461a      	mov	r2, r3
 800ef70:	6878      	ldr	r0, [r7, #4]
 800ef72:	f001 fad8 	bl	8010526 <USBD_CtlPrepareRx>
    break;
 800ef76:	e072      	b.n	800f05e <USBD_CDC_Setup+0x172>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ef7e:	689b      	ldr	r3, [r3, #8]
 800ef80:	683a      	ldr	r2, [r7, #0]
 800ef82:	7850      	ldrb	r0, [r2, #1]
 800ef84:	2200      	movs	r2, #0
 800ef86:	6839      	ldr	r1, [r7, #0]
 800ef88:	4798      	blx	r3
    break;
 800ef8a:	e068      	b.n	800f05e <USBD_CDC_Setup+0x172>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800ef8c:	683b      	ldr	r3, [r7, #0]
 800ef8e:	785b      	ldrb	r3, [r3, #1]
 800ef90:	2b0b      	cmp	r3, #11
 800ef92:	d852      	bhi.n	800f03a <USBD_CDC_Setup+0x14e>
 800ef94:	a201      	add	r2, pc, #4	; (adr r2, 800ef9c <USBD_CDC_Setup+0xb0>)
 800ef96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef9a:	bf00      	nop
 800ef9c:	0800efcd 	.word	0x0800efcd
 800efa0:	0800f049 	.word	0x0800f049
 800efa4:	0800f03b 	.word	0x0800f03b
 800efa8:	0800f03b 	.word	0x0800f03b
 800efac:	0800f03b 	.word	0x0800f03b
 800efb0:	0800f03b 	.word	0x0800f03b
 800efb4:	0800f03b 	.word	0x0800f03b
 800efb8:	0800f03b 	.word	0x0800f03b
 800efbc:	0800f03b 	.word	0x0800f03b
 800efc0:	0800f03b 	.word	0x0800f03b
 800efc4:	0800eff7 	.word	0x0800eff7
 800efc8:	0800f021 	.word	0x0800f021
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800efd2:	b2db      	uxtb	r3, r3
 800efd4:	2b03      	cmp	r3, #3
 800efd6:	d107      	bne.n	800efe8 <USBD_CDC_Setup+0xfc>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800efd8:	f107 030c 	add.w	r3, r7, #12
 800efdc:	2202      	movs	r2, #2
 800efde:	4619      	mov	r1, r3
 800efe0:	6878      	ldr	r0, [r7, #4]
 800efe2:	f001 fa74 	bl	80104ce <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800efe6:	e032      	b.n	800f04e <USBD_CDC_Setup+0x162>
        USBD_CtlError(pdev, req);
 800efe8:	6839      	ldr	r1, [r7, #0]
 800efea:	6878      	ldr	r0, [r7, #4]
 800efec:	f001 f9fe 	bl	80103ec <USBD_CtlError>
        ret = USBD_FAIL;
 800eff0:	2303      	movs	r3, #3
 800eff2:	75fb      	strb	r3, [r7, #23]
      break;
 800eff4:	e02b      	b.n	800f04e <USBD_CDC_Setup+0x162>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800effc:	b2db      	uxtb	r3, r3
 800effe:	2b03      	cmp	r3, #3
 800f000:	d107      	bne.n	800f012 <USBD_CDC_Setup+0x126>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800f002:	f107 030f 	add.w	r3, r7, #15
 800f006:	2201      	movs	r2, #1
 800f008:	4619      	mov	r1, r3
 800f00a:	6878      	ldr	r0, [r7, #4]
 800f00c:	f001 fa5f 	bl	80104ce <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800f010:	e01d      	b.n	800f04e <USBD_CDC_Setup+0x162>
        USBD_CtlError(pdev, req);
 800f012:	6839      	ldr	r1, [r7, #0]
 800f014:	6878      	ldr	r0, [r7, #4]
 800f016:	f001 f9e9 	bl	80103ec <USBD_CtlError>
        ret = USBD_FAIL;
 800f01a:	2303      	movs	r3, #3
 800f01c:	75fb      	strb	r3, [r7, #23]
      break;
 800f01e:	e016      	b.n	800f04e <USBD_CDC_Setup+0x162>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f026:	b2db      	uxtb	r3, r3
 800f028:	2b03      	cmp	r3, #3
 800f02a:	d00f      	beq.n	800f04c <USBD_CDC_Setup+0x160>
      {
        USBD_CtlError(pdev, req);
 800f02c:	6839      	ldr	r1, [r7, #0]
 800f02e:	6878      	ldr	r0, [r7, #4]
 800f030:	f001 f9dc 	bl	80103ec <USBD_CtlError>
        ret = USBD_FAIL;
 800f034:	2303      	movs	r3, #3
 800f036:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800f038:	e008      	b.n	800f04c <USBD_CDC_Setup+0x160>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800f03a:	6839      	ldr	r1, [r7, #0]
 800f03c:	6878      	ldr	r0, [r7, #4]
 800f03e:	f001 f9d5 	bl	80103ec <USBD_CtlError>
      ret = USBD_FAIL;
 800f042:	2303      	movs	r3, #3
 800f044:	75fb      	strb	r3, [r7, #23]
      break;
 800f046:	e002      	b.n	800f04e <USBD_CDC_Setup+0x162>
      break;
 800f048:	bf00      	nop
 800f04a:	e008      	b.n	800f05e <USBD_CDC_Setup+0x172>
      break;
 800f04c:	bf00      	nop
    }
    break;
 800f04e:	e006      	b.n	800f05e <USBD_CDC_Setup+0x172>

  default:
    USBD_CtlError(pdev, req);
 800f050:	6839      	ldr	r1, [r7, #0]
 800f052:	6878      	ldr	r0, [r7, #4]
 800f054:	f001 f9ca 	bl	80103ec <USBD_CtlError>
    ret = USBD_FAIL;
 800f058:	2303      	movs	r3, #3
 800f05a:	75fb      	strb	r3, [r7, #23]
    break;
 800f05c:	bf00      	nop
  }

  return (uint8_t)ret;
 800f05e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f060:	4618      	mov	r0, r3
 800f062:	3718      	adds	r7, #24
 800f064:	46bd      	mov	sp, r7
 800f066:	bd80      	pop	{r7, pc}

0800f068 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f068:	b580      	push	{r7, lr}
 800f06a:	b084      	sub	sp, #16
 800f06c:	af00      	add	r7, sp, #0
 800f06e:	6078      	str	r0, [r7, #4]
 800f070:	460b      	mov	r3, r1
 800f072:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f07a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f082:	2b00      	cmp	r3, #0
 800f084:	d101      	bne.n	800f08a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f086:	2303      	movs	r3, #3
 800f088:	e049      	b.n	800f11e <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f090:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800f092:	78fa      	ldrb	r2, [r7, #3]
 800f094:	6879      	ldr	r1, [r7, #4]
 800f096:	4613      	mov	r3, r2
 800f098:	009b      	lsls	r3, r3, #2
 800f09a:	4413      	add	r3, r2
 800f09c:	009b      	lsls	r3, r3, #2
 800f09e:	440b      	add	r3, r1
 800f0a0:	3318      	adds	r3, #24
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d029      	beq.n	800f0fc <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800f0a8:	78fa      	ldrb	r2, [r7, #3]
 800f0aa:	6879      	ldr	r1, [r7, #4]
 800f0ac:	4613      	mov	r3, r2
 800f0ae:	009b      	lsls	r3, r3, #2
 800f0b0:	4413      	add	r3, r2
 800f0b2:	009b      	lsls	r3, r3, #2
 800f0b4:	440b      	add	r3, r1
 800f0b6:	3318      	adds	r3, #24
 800f0b8:	681a      	ldr	r2, [r3, #0]
 800f0ba:	78f9      	ldrb	r1, [r7, #3]
 800f0bc:	68f8      	ldr	r0, [r7, #12]
 800f0be:	460b      	mov	r3, r1
 800f0c0:	00db      	lsls	r3, r3, #3
 800f0c2:	1a5b      	subs	r3, r3, r1
 800f0c4:	009b      	lsls	r3, r3, #2
 800f0c6:	4403      	add	r3, r0
 800f0c8:	3344      	adds	r3, #68	; 0x44
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	fbb2 f1f3 	udiv	r1, r2, r3
 800f0d0:	fb01 f303 	mul.w	r3, r1, r3
 800f0d4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d110      	bne.n	800f0fc <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800f0da:	78fa      	ldrb	r2, [r7, #3]
 800f0dc:	6879      	ldr	r1, [r7, #4]
 800f0de:	4613      	mov	r3, r2
 800f0e0:	009b      	lsls	r3, r3, #2
 800f0e2:	4413      	add	r3, r2
 800f0e4:	009b      	lsls	r3, r3, #2
 800f0e6:	440b      	add	r3, r1
 800f0e8:	3318      	adds	r3, #24
 800f0ea:	2200      	movs	r2, #0
 800f0ec:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800f0ee:	78f9      	ldrb	r1, [r7, #3]
 800f0f0:	2300      	movs	r3, #0
 800f0f2:	2200      	movs	r2, #0
 800f0f4:	6878      	ldr	r0, [r7, #4]
 800f0f6:	f001 ff5a 	bl	8010fae <USBD_LL_Transmit>
 800f0fa:	e00f      	b.n	800f11c <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 800f0fc:	68bb      	ldr	r3, [r7, #8]
 800f0fe:	2200      	movs	r2, #0
 800f100:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f10a:	691b      	ldr	r3, [r3, #16]
 800f10c:	68ba      	ldr	r2, [r7, #8]
 800f10e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800f112:	68ba      	ldr	r2, [r7, #8]
 800f114:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800f118:	78fa      	ldrb	r2, [r7, #3]
 800f11a:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800f11c:	2300      	movs	r3, #0
}
 800f11e:	4618      	mov	r0, r3
 800f120:	3710      	adds	r7, #16
 800f122:	46bd      	mov	sp, r7
 800f124:	bd80      	pop	{r7, pc}

0800f126 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f126:	b580      	push	{r7, lr}
 800f128:	b084      	sub	sp, #16
 800f12a:	af00      	add	r7, sp, #0
 800f12c:	6078      	str	r0, [r7, #4]
 800f12e:	460b      	mov	r3, r1
 800f130:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f138:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f140:	2b00      	cmp	r3, #0
 800f142:	d101      	bne.n	800f148 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f144:	2303      	movs	r3, #3
 800f146:	e015      	b.n	800f174 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800f148:	78fb      	ldrb	r3, [r7, #3]
 800f14a:	4619      	mov	r1, r3
 800f14c:	6878      	ldr	r0, [r7, #4]
 800f14e:	f001 ff70 	bl	8011032 <USBD_LL_GetRxDataSize>
 800f152:	4602      	mov	r2, r0
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f160:	68db      	ldr	r3, [r3, #12]
 800f162:	68fa      	ldr	r2, [r7, #12]
 800f164:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800f168:	68fa      	ldr	r2, [r7, #12]
 800f16a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800f16e:	4611      	mov	r1, r2
 800f170:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800f172:	2300      	movs	r3, #0
}
 800f174:	4618      	mov	r0, r3
 800f176:	3710      	adds	r7, #16
 800f178:	46bd      	mov	sp, r7
 800f17a:	bd80      	pop	{r7, pc}

0800f17c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800f17c:	b580      	push	{r7, lr}
 800f17e:	b084      	sub	sp, #16
 800f180:	af00      	add	r7, sp, #0
 800f182:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f18a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f192:	2b00      	cmp	r3, #0
 800f194:	d015      	beq.n	800f1c2 <USBD_CDC_EP0_RxReady+0x46>
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800f19c:	2bff      	cmp	r3, #255	; 0xff
 800f19e:	d010      	beq.n	800f1c2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f1a6:	689b      	ldr	r3, [r3, #8]
 800f1a8:	68fa      	ldr	r2, [r7, #12]
 800f1aa:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800f1ae:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800f1b0:	68fa      	ldr	r2, [r7, #12]
 800f1b2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800f1b6:	b292      	uxth	r2, r2
 800f1b8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	22ff      	movs	r2, #255	; 0xff
 800f1be:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800f1c2:	2300      	movs	r3, #0
}
 800f1c4:	4618      	mov	r0, r3
 800f1c6:	3710      	adds	r7, #16
 800f1c8:	46bd      	mov	sp, r7
 800f1ca:	bd80      	pop	{r7, pc}

0800f1cc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800f1cc:	b480      	push	{r7}
 800f1ce:	b083      	sub	sp, #12
 800f1d0:	af00      	add	r7, sp, #0
 800f1d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	2243      	movs	r2, #67	; 0x43
 800f1d8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800f1da:	4b03      	ldr	r3, [pc, #12]	; (800f1e8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800f1dc:	4618      	mov	r0, r3
 800f1de:	370c      	adds	r7, #12
 800f1e0:	46bd      	mov	sp, r7
 800f1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e6:	4770      	bx	lr
 800f1e8:	24000098 	.word	0x24000098

0800f1ec <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800f1ec:	b480      	push	{r7}
 800f1ee:	b083      	sub	sp, #12
 800f1f0:	af00      	add	r7, sp, #0
 800f1f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	2243      	movs	r2, #67	; 0x43
 800f1f8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800f1fa:	4b03      	ldr	r3, [pc, #12]	; (800f208 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800f1fc:	4618      	mov	r0, r3
 800f1fe:	370c      	adds	r7, #12
 800f200:	46bd      	mov	sp, r7
 800f202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f206:	4770      	bx	lr
 800f208:	24000054 	.word	0x24000054

0800f20c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800f20c:	b480      	push	{r7}
 800f20e:	b083      	sub	sp, #12
 800f210:	af00      	add	r7, sp, #0
 800f212:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	2243      	movs	r2, #67	; 0x43
 800f218:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800f21a:	4b03      	ldr	r3, [pc, #12]	; (800f228 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800f21c:	4618      	mov	r0, r3
 800f21e:	370c      	adds	r7, #12
 800f220:	46bd      	mov	sp, r7
 800f222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f226:	4770      	bx	lr
 800f228:	240000dc 	.word	0x240000dc

0800f22c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800f22c:	b480      	push	{r7}
 800f22e:	b083      	sub	sp, #12
 800f230:	af00      	add	r7, sp, #0
 800f232:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	220a      	movs	r2, #10
 800f238:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800f23a:	4b03      	ldr	r3, [pc, #12]	; (800f248 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800f23c:	4618      	mov	r0, r3
 800f23e:	370c      	adds	r7, #12
 800f240:	46bd      	mov	sp, r7
 800f242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f246:	4770      	bx	lr
 800f248:	24000010 	.word	0x24000010

0800f24c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800f24c:	b480      	push	{r7}
 800f24e:	b083      	sub	sp, #12
 800f250:	af00      	add	r7, sp, #0
 800f252:	6078      	str	r0, [r7, #4]
 800f254:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800f256:	683b      	ldr	r3, [r7, #0]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d101      	bne.n	800f260 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800f25c:	2303      	movs	r3, #3
 800f25e:	e004      	b.n	800f26a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	683a      	ldr	r2, [r7, #0]
 800f264:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800f268:	2300      	movs	r3, #0
}
 800f26a:	4618      	mov	r0, r3
 800f26c:	370c      	adds	r7, #12
 800f26e:	46bd      	mov	sp, r7
 800f270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f274:	4770      	bx	lr

0800f276 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800f276:	b480      	push	{r7}
 800f278:	b087      	sub	sp, #28
 800f27a:	af00      	add	r7, sp, #0
 800f27c:	60f8      	str	r0, [r7, #12]
 800f27e:	60b9      	str	r1, [r7, #8]
 800f280:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f288:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800f28a:	697b      	ldr	r3, [r7, #20]
 800f28c:	68ba      	ldr	r2, [r7, #8]
 800f28e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800f292:	697b      	ldr	r3, [r7, #20]
 800f294:	687a      	ldr	r2, [r7, #4]
 800f296:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800f29a:	2300      	movs	r3, #0
}
 800f29c:	4618      	mov	r0, r3
 800f29e:	371c      	adds	r7, #28
 800f2a0:	46bd      	mov	sp, r7
 800f2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a6:	4770      	bx	lr

0800f2a8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800f2a8:	b480      	push	{r7}
 800f2aa:	b085      	sub	sp, #20
 800f2ac:	af00      	add	r7, sp, #0
 800f2ae:	6078      	str	r0, [r7, #4]
 800f2b0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f2b8:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	683a      	ldr	r2, [r7, #0]
 800f2be:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800f2c2:	2300      	movs	r3, #0
}
 800f2c4:	4618      	mov	r0, r3
 800f2c6:	3714      	adds	r7, #20
 800f2c8:	46bd      	mov	sp, r7
 800f2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ce:	4770      	bx	lr

0800f2d0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800f2d0:	b580      	push	{r7, lr}
 800f2d2:	b084      	sub	sp, #16
 800f2d4:	af00      	add	r7, sp, #0
 800f2d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f2de:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800f2e0:	2301      	movs	r3, #1
 800f2e2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d101      	bne.n	800f2f2 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f2ee:	2303      	movs	r3, #3
 800f2f0:	e01a      	b.n	800f328 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800f2f2:	68bb      	ldr	r3, [r7, #8]
 800f2f4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d114      	bne.n	800f326 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800f2fc:	68bb      	ldr	r3, [r7, #8]
 800f2fe:	2201      	movs	r2, #1
 800f300:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800f304:	68bb      	ldr	r3, [r7, #8]
 800f306:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800f30e:	68bb      	ldr	r3, [r7, #8]
 800f310:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800f314:	68bb      	ldr	r3, [r7, #8]
 800f316:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800f31a:	2181      	movs	r1, #129	; 0x81
 800f31c:	6878      	ldr	r0, [r7, #4]
 800f31e:	f001 fe46 	bl	8010fae <USBD_LL_Transmit>

    ret = USBD_OK;
 800f322:	2300      	movs	r3, #0
 800f324:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800f326:	7bfb      	ldrb	r3, [r7, #15]
}
 800f328:	4618      	mov	r0, r3
 800f32a:	3710      	adds	r7, #16
 800f32c:	46bd      	mov	sp, r7
 800f32e:	bd80      	pop	{r7, pc}

0800f330 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800f330:	b580      	push	{r7, lr}
 800f332:	b084      	sub	sp, #16
 800f334:	af00      	add	r7, sp, #0
 800f336:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f33e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f346:	2b00      	cmp	r3, #0
 800f348:	d101      	bne.n	800f34e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800f34a:	2303      	movs	r3, #3
 800f34c:	e016      	b.n	800f37c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	7c1b      	ldrb	r3, [r3, #16]
 800f352:	2b00      	cmp	r3, #0
 800f354:	d109      	bne.n	800f36a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f35c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f360:	2101      	movs	r1, #1
 800f362:	6878      	ldr	r0, [r7, #4]
 800f364:	f001 fe44 	bl	8010ff0 <USBD_LL_PrepareReceive>
 800f368:	e007      	b.n	800f37a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f370:	2340      	movs	r3, #64	; 0x40
 800f372:	2101      	movs	r1, #1
 800f374:	6878      	ldr	r0, [r7, #4]
 800f376:	f001 fe3b 	bl	8010ff0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f37a:	2300      	movs	r3, #0
}
 800f37c:	4618      	mov	r0, r3
 800f37e:	3710      	adds	r7, #16
 800f380:	46bd      	mov	sp, r7
 800f382:	bd80      	pop	{r7, pc}

0800f384 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800f384:	b580      	push	{r7, lr}
 800f386:	b086      	sub	sp, #24
 800f388:	af00      	add	r7, sp, #0
 800f38a:	60f8      	str	r0, [r7, #12]
 800f38c:	60b9      	str	r1, [r7, #8]
 800f38e:	4613      	mov	r3, r2
 800f390:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	2b00      	cmp	r3, #0
 800f396:	d101      	bne.n	800f39c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800f398:	2303      	movs	r3, #3
 800f39a:	e025      	b.n	800f3e8 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d003      	beq.n	800f3ae <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	2200      	movs	r2, #0
 800f3aa:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d003      	beq.n	800f3c0 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	2200      	movs	r2, #0
 800f3bc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800f3c0:	68bb      	ldr	r3, [r7, #8]
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d003      	beq.n	800f3ce <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	68ba      	ldr	r2, [r7, #8]
 800f3ca:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	2201      	movs	r2, #1
 800f3d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	79fa      	ldrb	r2, [r7, #7]
 800f3da:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800f3dc:	68f8      	ldr	r0, [r7, #12]
 800f3de:	f001 fcad 	bl	8010d3c <USBD_LL_Init>
 800f3e2:	4603      	mov	r3, r0
 800f3e4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800f3e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800f3e8:	4618      	mov	r0, r3
 800f3ea:	3718      	adds	r7, #24
 800f3ec:	46bd      	mov	sp, r7
 800f3ee:	bd80      	pop	{r7, pc}

0800f3f0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800f3f0:	b580      	push	{r7, lr}
 800f3f2:	b084      	sub	sp, #16
 800f3f4:	af00      	add	r7, sp, #0
 800f3f6:	6078      	str	r0, [r7, #4]
 800f3f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f3fa:	2300      	movs	r3, #0
 800f3fc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800f3fe:	683b      	ldr	r3, [r7, #0]
 800f400:	2b00      	cmp	r3, #0
 800f402:	d101      	bne.n	800f408 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800f404:	2303      	movs	r3, #3
 800f406:	e010      	b.n	800f42a <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	683a      	ldr	r2, [r7, #0]
 800f40c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f418:	f107 020e 	add.w	r2, r7, #14
 800f41c:	4610      	mov	r0, r2
 800f41e:	4798      	blx	r3
 800f420:	4602      	mov	r2, r0
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800f428:	2300      	movs	r3, #0
}
 800f42a:	4618      	mov	r0, r3
 800f42c:	3710      	adds	r7, #16
 800f42e:	46bd      	mov	sp, r7
 800f430:	bd80      	pop	{r7, pc}

0800f432 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800f432:	b580      	push	{r7, lr}
 800f434:	b082      	sub	sp, #8
 800f436:	af00      	add	r7, sp, #0
 800f438:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800f43a:	6878      	ldr	r0, [r7, #4]
 800f43c:	f001 fcce 	bl	8010ddc <USBD_LL_Start>
 800f440:	4603      	mov	r3, r0
}
 800f442:	4618      	mov	r0, r3
 800f444:	3708      	adds	r7, #8
 800f446:	46bd      	mov	sp, r7
 800f448:	bd80      	pop	{r7, pc}

0800f44a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800f44a:	b480      	push	{r7}
 800f44c:	b083      	sub	sp, #12
 800f44e:	af00      	add	r7, sp, #0
 800f450:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f452:	2300      	movs	r3, #0
}
 800f454:	4618      	mov	r0, r3
 800f456:	370c      	adds	r7, #12
 800f458:	46bd      	mov	sp, r7
 800f45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f45e:	4770      	bx	lr

0800f460 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f460:	b580      	push	{r7, lr}
 800f462:	b084      	sub	sp, #16
 800f464:	af00      	add	r7, sp, #0
 800f466:	6078      	str	r0, [r7, #4]
 800f468:	460b      	mov	r3, r1
 800f46a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800f46c:	2303      	movs	r3, #3
 800f46e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f476:	2b00      	cmp	r3, #0
 800f478:	d009      	beq.n	800f48e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	78fa      	ldrb	r2, [r7, #3]
 800f484:	4611      	mov	r1, r2
 800f486:	6878      	ldr	r0, [r7, #4]
 800f488:	4798      	blx	r3
 800f48a:	4603      	mov	r3, r0
 800f48c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800f48e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f490:	4618      	mov	r0, r3
 800f492:	3710      	adds	r7, #16
 800f494:	46bd      	mov	sp, r7
 800f496:	bd80      	pop	{r7, pc}

0800f498 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f498:	b580      	push	{r7, lr}
 800f49a:	b082      	sub	sp, #8
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	6078      	str	r0, [r7, #4]
 800f4a0:	460b      	mov	r3, r1
 800f4a2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d007      	beq.n	800f4be <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f4b4:	685b      	ldr	r3, [r3, #4]
 800f4b6:	78fa      	ldrb	r2, [r7, #3]
 800f4b8:	4611      	mov	r1, r2
 800f4ba:	6878      	ldr	r0, [r7, #4]
 800f4bc:	4798      	blx	r3
  }

  return USBD_OK;
 800f4be:	2300      	movs	r3, #0
}
 800f4c0:	4618      	mov	r0, r3
 800f4c2:	3708      	adds	r7, #8
 800f4c4:	46bd      	mov	sp, r7
 800f4c6:	bd80      	pop	{r7, pc}

0800f4c8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f4c8:	b580      	push	{r7, lr}
 800f4ca:	b084      	sub	sp, #16
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	6078      	str	r0, [r7, #4]
 800f4d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f4d8:	6839      	ldr	r1, [r7, #0]
 800f4da:	4618      	mov	r0, r3
 800f4dc:	f000 ff4c 	bl	8010378 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	2201      	movs	r2, #1
 800f4e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800f4ee:	461a      	mov	r2, r3
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f4fc:	f003 031f 	and.w	r3, r3, #31
 800f500:	2b02      	cmp	r3, #2
 800f502:	d01a      	beq.n	800f53a <USBD_LL_SetupStage+0x72>
 800f504:	2b02      	cmp	r3, #2
 800f506:	d822      	bhi.n	800f54e <USBD_LL_SetupStage+0x86>
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d002      	beq.n	800f512 <USBD_LL_SetupStage+0x4a>
 800f50c:	2b01      	cmp	r3, #1
 800f50e:	d00a      	beq.n	800f526 <USBD_LL_SetupStage+0x5e>
 800f510:	e01d      	b.n	800f54e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f518:	4619      	mov	r1, r3
 800f51a:	6878      	ldr	r0, [r7, #4]
 800f51c:	f000 fa20 	bl	800f960 <USBD_StdDevReq>
 800f520:	4603      	mov	r3, r0
 800f522:	73fb      	strb	r3, [r7, #15]
      break;
 800f524:	e020      	b.n	800f568 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f52c:	4619      	mov	r1, r3
 800f52e:	6878      	ldr	r0, [r7, #4]
 800f530:	f000 fa84 	bl	800fa3c <USBD_StdItfReq>
 800f534:	4603      	mov	r3, r0
 800f536:	73fb      	strb	r3, [r7, #15]
      break;
 800f538:	e016      	b.n	800f568 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f540:	4619      	mov	r1, r3
 800f542:	6878      	ldr	r0, [r7, #4]
 800f544:	f000 fac3 	bl	800face <USBD_StdEPReq>
 800f548:	4603      	mov	r3, r0
 800f54a:	73fb      	strb	r3, [r7, #15]
      break;
 800f54c:	e00c      	b.n	800f568 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f554:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f558:	b2db      	uxtb	r3, r3
 800f55a:	4619      	mov	r1, r3
 800f55c:	6878      	ldr	r0, [r7, #4]
 800f55e:	f001 fc9d 	bl	8010e9c <USBD_LL_StallEP>
 800f562:	4603      	mov	r3, r0
 800f564:	73fb      	strb	r3, [r7, #15]
      break;
 800f566:	bf00      	nop
  }

  return ret;
 800f568:	7bfb      	ldrb	r3, [r7, #15]
}
 800f56a:	4618      	mov	r0, r3
 800f56c:	3710      	adds	r7, #16
 800f56e:	46bd      	mov	sp, r7
 800f570:	bd80      	pop	{r7, pc}

0800f572 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f572:	b580      	push	{r7, lr}
 800f574:	b086      	sub	sp, #24
 800f576:	af00      	add	r7, sp, #0
 800f578:	60f8      	str	r0, [r7, #12]
 800f57a:	460b      	mov	r3, r1
 800f57c:	607a      	str	r2, [r7, #4]
 800f57e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f580:	7afb      	ldrb	r3, [r7, #11]
 800f582:	2b00      	cmp	r3, #0
 800f584:	d138      	bne.n	800f5f8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800f58c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f594:	2b03      	cmp	r3, #3
 800f596:	d14c      	bne.n	800f632 <USBD_LL_DataOutStage+0xc0>
    {
      if (pep->rem_length > pep->maxpacket)
 800f598:	693b      	ldr	r3, [r7, #16]
 800f59a:	689a      	ldr	r2, [r3, #8]
 800f59c:	693b      	ldr	r3, [r7, #16]
 800f59e:	68db      	ldr	r3, [r3, #12]
 800f5a0:	429a      	cmp	r2, r3
 800f5a2:	d913      	bls.n	800f5cc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f5a4:	693b      	ldr	r3, [r7, #16]
 800f5a6:	689a      	ldr	r2, [r3, #8]
 800f5a8:	693b      	ldr	r3, [r7, #16]
 800f5aa:	68db      	ldr	r3, [r3, #12]
 800f5ac:	1ad2      	subs	r2, r2, r3
 800f5ae:	693b      	ldr	r3, [r7, #16]
 800f5b0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800f5b2:	693b      	ldr	r3, [r7, #16]
 800f5b4:	68da      	ldr	r2, [r3, #12]
 800f5b6:	693b      	ldr	r3, [r7, #16]
 800f5b8:	689b      	ldr	r3, [r3, #8]
 800f5ba:	4293      	cmp	r3, r2
 800f5bc:	bf28      	it	cs
 800f5be:	4613      	movcs	r3, r2
 800f5c0:	461a      	mov	r2, r3
 800f5c2:	6879      	ldr	r1, [r7, #4]
 800f5c4:	68f8      	ldr	r0, [r7, #12]
 800f5c6:	f000 ffcb 	bl	8010560 <USBD_CtlContinueRx>
 800f5ca:	e032      	b.n	800f632 <USBD_LL_DataOutStage+0xc0>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f5d2:	691b      	ldr	r3, [r3, #16]
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d00b      	beq.n	800f5f0 <USBD_LL_DataOutStage+0x7e>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f5de:	b2db      	uxtb	r3, r3
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800f5e0:	2b03      	cmp	r3, #3
 800f5e2:	d105      	bne.n	800f5f0 <USBD_LL_DataOutStage+0x7e>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f5ea:	691b      	ldr	r3, [r3, #16]
 800f5ec:	68f8      	ldr	r0, [r7, #12]
 800f5ee:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800f5f0:	68f8      	ldr	r0, [r7, #12]
 800f5f2:	f000 ffc6 	bl	8010582 <USBD_CtlSendStatus>
 800f5f6:	e01c      	b.n	800f632 <USBD_LL_DataOutStage+0xc0>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f5fe:	699b      	ldr	r3, [r3, #24]
 800f600:	2b00      	cmp	r3, #0
 800f602:	d014      	beq.n	800f62e <USBD_LL_DataOutStage+0xbc>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f60a:	b2db      	uxtb	r3, r3
  else if ((pdev->pClass->DataOut != NULL) &&
 800f60c:	2b03      	cmp	r3, #3
 800f60e:	d10e      	bne.n	800f62e <USBD_LL_DataOutStage+0xbc>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f616:	699b      	ldr	r3, [r3, #24]
 800f618:	7afa      	ldrb	r2, [r7, #11]
 800f61a:	4611      	mov	r1, r2
 800f61c:	68f8      	ldr	r0, [r7, #12]
 800f61e:	4798      	blx	r3
 800f620:	4603      	mov	r3, r0
 800f622:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800f624:	7dfb      	ldrb	r3, [r7, #23]
 800f626:	2b00      	cmp	r3, #0
 800f628:	d003      	beq.n	800f632 <USBD_LL_DataOutStage+0xc0>
    {
      return ret;
 800f62a:	7dfb      	ldrb	r3, [r7, #23]
 800f62c:	e002      	b.n	800f634 <USBD_LL_DataOutStage+0xc2>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800f62e:	2303      	movs	r3, #3
 800f630:	e000      	b.n	800f634 <USBD_LL_DataOutStage+0xc2>
  }

  return USBD_OK;
 800f632:	2300      	movs	r3, #0
}
 800f634:	4618      	mov	r0, r3
 800f636:	3718      	adds	r7, #24
 800f638:	46bd      	mov	sp, r7
 800f63a:	bd80      	pop	{r7, pc}

0800f63c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f63c:	b580      	push	{r7, lr}
 800f63e:	b086      	sub	sp, #24
 800f640:	af00      	add	r7, sp, #0
 800f642:	60f8      	str	r0, [r7, #12]
 800f644:	460b      	mov	r3, r1
 800f646:	607a      	str	r2, [r7, #4]
 800f648:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f64a:	7afb      	ldrb	r3, [r7, #11]
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d16b      	bne.n	800f728 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	3314      	adds	r3, #20
 800f654:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f65c:	2b02      	cmp	r3, #2
 800f65e:	d156      	bne.n	800f70e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800f660:	693b      	ldr	r3, [r7, #16]
 800f662:	689a      	ldr	r2, [r3, #8]
 800f664:	693b      	ldr	r3, [r7, #16]
 800f666:	68db      	ldr	r3, [r3, #12]
 800f668:	429a      	cmp	r2, r3
 800f66a:	d914      	bls.n	800f696 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f66c:	693b      	ldr	r3, [r7, #16]
 800f66e:	689a      	ldr	r2, [r3, #8]
 800f670:	693b      	ldr	r3, [r7, #16]
 800f672:	68db      	ldr	r3, [r3, #12]
 800f674:	1ad2      	subs	r2, r2, r3
 800f676:	693b      	ldr	r3, [r7, #16]
 800f678:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800f67a:	693b      	ldr	r3, [r7, #16]
 800f67c:	689b      	ldr	r3, [r3, #8]
 800f67e:	461a      	mov	r2, r3
 800f680:	6879      	ldr	r1, [r7, #4]
 800f682:	68f8      	ldr	r0, [r7, #12]
 800f684:	f000 ff3e 	bl	8010504 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f688:	2300      	movs	r3, #0
 800f68a:	2200      	movs	r2, #0
 800f68c:	2100      	movs	r1, #0
 800f68e:	68f8      	ldr	r0, [r7, #12]
 800f690:	f001 fcae 	bl	8010ff0 <USBD_LL_PrepareReceive>
 800f694:	e03b      	b.n	800f70e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800f696:	693b      	ldr	r3, [r7, #16]
 800f698:	68da      	ldr	r2, [r3, #12]
 800f69a:	693b      	ldr	r3, [r7, #16]
 800f69c:	689b      	ldr	r3, [r3, #8]
 800f69e:	429a      	cmp	r2, r3
 800f6a0:	d11c      	bne.n	800f6dc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800f6a2:	693b      	ldr	r3, [r7, #16]
 800f6a4:	685a      	ldr	r2, [r3, #4]
 800f6a6:	693b      	ldr	r3, [r7, #16]
 800f6a8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800f6aa:	429a      	cmp	r2, r3
 800f6ac:	d316      	bcc.n	800f6dc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800f6ae:	693b      	ldr	r3, [r7, #16]
 800f6b0:	685a      	ldr	r2, [r3, #4]
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f6b8:	429a      	cmp	r2, r3
 800f6ba:	d20f      	bcs.n	800f6dc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f6bc:	2200      	movs	r2, #0
 800f6be:	2100      	movs	r1, #0
 800f6c0:	68f8      	ldr	r0, [r7, #12]
 800f6c2:	f000 ff1f 	bl	8010504 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	2200      	movs	r2, #0
 800f6ca:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f6ce:	2300      	movs	r3, #0
 800f6d0:	2200      	movs	r2, #0
 800f6d2:	2100      	movs	r1, #0
 800f6d4:	68f8      	ldr	r0, [r7, #12]
 800f6d6:	f001 fc8b 	bl	8010ff0 <USBD_LL_PrepareReceive>
 800f6da:	e018      	b.n	800f70e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f6e2:	68db      	ldr	r3, [r3, #12]
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d00b      	beq.n	800f700 <USBD_LL_DataInStage+0xc4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f6ee:	b2db      	uxtb	r3, r3
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800f6f0:	2b03      	cmp	r3, #3
 800f6f2:	d105      	bne.n	800f700 <USBD_LL_DataInStage+0xc4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f6fa:	68db      	ldr	r3, [r3, #12]
 800f6fc:	68f8      	ldr	r0, [r7, #12]
 800f6fe:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f700:	2180      	movs	r1, #128	; 0x80
 800f702:	68f8      	ldr	r0, [r7, #12]
 800f704:	f001 fbca 	bl	8010e9c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800f708:	68f8      	ldr	r0, [r7, #12]
 800f70a:	f000 ff4d 	bl	80105a8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800f714:	2b01      	cmp	r3, #1
 800f716:	d124      	bne.n	800f762 <USBD_LL_DataInStage+0x126>
    {
      (void)USBD_RunTestMode(pdev);
 800f718:	68f8      	ldr	r0, [r7, #12]
 800f71a:	f7ff fe96 	bl	800f44a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	2200      	movs	r2, #0
 800f722:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800f726:	e01c      	b.n	800f762 <USBD_LL_DataInStage+0x126>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f72e:	695b      	ldr	r3, [r3, #20]
 800f730:	2b00      	cmp	r3, #0
 800f732:	d014      	beq.n	800f75e <USBD_LL_DataInStage+0x122>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f73a:	b2db      	uxtb	r3, r3
  else if ((pdev->pClass->DataIn != NULL) &&
 800f73c:	2b03      	cmp	r3, #3
 800f73e:	d10e      	bne.n	800f75e <USBD_LL_DataInStage+0x122>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f746:	695b      	ldr	r3, [r3, #20]
 800f748:	7afa      	ldrb	r2, [r7, #11]
 800f74a:	4611      	mov	r1, r2
 800f74c:	68f8      	ldr	r0, [r7, #12]
 800f74e:	4798      	blx	r3
 800f750:	4603      	mov	r3, r0
 800f752:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800f754:	7dfb      	ldrb	r3, [r7, #23]
 800f756:	2b00      	cmp	r3, #0
 800f758:	d003      	beq.n	800f762 <USBD_LL_DataInStage+0x126>
    {
      return ret;
 800f75a:	7dfb      	ldrb	r3, [r7, #23]
 800f75c:	e002      	b.n	800f764 <USBD_LL_DataInStage+0x128>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800f75e:	2303      	movs	r3, #3
 800f760:	e000      	b.n	800f764 <USBD_LL_DataInStage+0x128>
  }

  return USBD_OK;
 800f762:	2300      	movs	r3, #0
}
 800f764:	4618      	mov	r0, r3
 800f766:	3718      	adds	r7, #24
 800f768:	46bd      	mov	sp, r7
 800f76a:	bd80      	pop	{r7, pc}

0800f76c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f76c:	b580      	push	{r7, lr}
 800f76e:	b082      	sub	sp, #8
 800f770:	af00      	add	r7, sp, #0
 800f772:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	2201      	movs	r2, #1
 800f778:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	2200      	movs	r2, #0
 800f780:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	2200      	movs	r2, #0
 800f788:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	2200      	movs	r2, #0
 800f78e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d009      	beq.n	800f7b0 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f7a2:	685b      	ldr	r3, [r3, #4]
 800f7a4:	687a      	ldr	r2, [r7, #4]
 800f7a6:	6852      	ldr	r2, [r2, #4]
 800f7a8:	b2d2      	uxtb	r2, r2
 800f7aa:	4611      	mov	r1, r2
 800f7ac:	6878      	ldr	r0, [r7, #4]
 800f7ae:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f7b0:	2340      	movs	r3, #64	; 0x40
 800f7b2:	2200      	movs	r2, #0
 800f7b4:	2100      	movs	r1, #0
 800f7b6:	6878      	ldr	r0, [r7, #4]
 800f7b8:	f001 fb2b 	bl	8010e12 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	2201      	movs	r2, #1
 800f7c0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	2240      	movs	r2, #64	; 0x40
 800f7c8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f7cc:	2340      	movs	r3, #64	; 0x40
 800f7ce:	2200      	movs	r2, #0
 800f7d0:	2180      	movs	r1, #128	; 0x80
 800f7d2:	6878      	ldr	r0, [r7, #4]
 800f7d4:	f001 fb1d 	bl	8010e12 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	2201      	movs	r2, #1
 800f7dc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	2240      	movs	r2, #64	; 0x40
 800f7e2:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800f7e4:	2300      	movs	r3, #0
}
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	3708      	adds	r7, #8
 800f7ea:	46bd      	mov	sp, r7
 800f7ec:	bd80      	pop	{r7, pc}

0800f7ee <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f7ee:	b480      	push	{r7}
 800f7f0:	b083      	sub	sp, #12
 800f7f2:	af00      	add	r7, sp, #0
 800f7f4:	6078      	str	r0, [r7, #4]
 800f7f6:	460b      	mov	r3, r1
 800f7f8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	78fa      	ldrb	r2, [r7, #3]
 800f7fe:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f800:	2300      	movs	r3, #0
}
 800f802:	4618      	mov	r0, r3
 800f804:	370c      	adds	r7, #12
 800f806:	46bd      	mov	sp, r7
 800f808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f80c:	4770      	bx	lr

0800f80e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800f80e:	b480      	push	{r7}
 800f810:	b083      	sub	sp, #12
 800f812:	af00      	add	r7, sp, #0
 800f814:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f81c:	b2da      	uxtb	r2, r3
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	2204      	movs	r2, #4
 800f828:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800f82c:	2300      	movs	r3, #0
}
 800f82e:	4618      	mov	r0, r3
 800f830:	370c      	adds	r7, #12
 800f832:	46bd      	mov	sp, r7
 800f834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f838:	4770      	bx	lr

0800f83a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800f83a:	b480      	push	{r7}
 800f83c:	b083      	sub	sp, #12
 800f83e:	af00      	add	r7, sp, #0
 800f840:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f848:	b2db      	uxtb	r3, r3
 800f84a:	2b04      	cmp	r3, #4
 800f84c:	d106      	bne.n	800f85c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800f854:	b2da      	uxtb	r2, r3
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800f85c:	2300      	movs	r3, #0
}
 800f85e:	4618      	mov	r0, r3
 800f860:	370c      	adds	r7, #12
 800f862:	46bd      	mov	sp, r7
 800f864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f868:	4770      	bx	lr

0800f86a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f86a:	b580      	push	{r7, lr}
 800f86c:	b082      	sub	sp, #8
 800f86e:	af00      	add	r7, sp, #0
 800f870:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f878:	b2db      	uxtb	r3, r3
 800f87a:	2b03      	cmp	r3, #3
 800f87c:	d10b      	bne.n	800f896 <USBD_LL_SOF+0x2c>
  {
    if (pdev->pClass->SOF != NULL)
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f884:	69db      	ldr	r3, [r3, #28]
 800f886:	2b00      	cmp	r3, #0
 800f888:	d005      	beq.n	800f896 <USBD_LL_SOF+0x2c>
    {
      pdev->pClass->SOF(pdev);
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f890:	69db      	ldr	r3, [r3, #28]
 800f892:	6878      	ldr	r0, [r7, #4]
 800f894:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f896:	2300      	movs	r3, #0
}
 800f898:	4618      	mov	r0, r3
 800f89a:	3708      	adds	r7, #8
 800f89c:	46bd      	mov	sp, r7
 800f89e:	bd80      	pop	{r7, pc}

0800f8a0 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800f8a0:	b480      	push	{r7}
 800f8a2:	b083      	sub	sp, #12
 800f8a4:	af00      	add	r7, sp, #0
 800f8a6:	6078      	str	r0, [r7, #4]
 800f8a8:	460b      	mov	r3, r1
 800f8aa:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800f8ac:	2300      	movs	r3, #0
}
 800f8ae:	4618      	mov	r0, r3
 800f8b0:	370c      	adds	r7, #12
 800f8b2:	46bd      	mov	sp, r7
 800f8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8b8:	4770      	bx	lr

0800f8ba <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800f8ba:	b480      	push	{r7}
 800f8bc:	b083      	sub	sp, #12
 800f8be:	af00      	add	r7, sp, #0
 800f8c0:	6078      	str	r0, [r7, #4]
 800f8c2:	460b      	mov	r3, r1
 800f8c4:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800f8c6:	2300      	movs	r3, #0
}
 800f8c8:	4618      	mov	r0, r3
 800f8ca:	370c      	adds	r7, #12
 800f8cc:	46bd      	mov	sp, r7
 800f8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d2:	4770      	bx	lr

0800f8d4 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800f8d4:	b480      	push	{r7}
 800f8d6:	b083      	sub	sp, #12
 800f8d8:	af00      	add	r7, sp, #0
 800f8da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f8dc:	2300      	movs	r3, #0
}
 800f8de:	4618      	mov	r0, r3
 800f8e0:	370c      	adds	r7, #12
 800f8e2:	46bd      	mov	sp, r7
 800f8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e8:	4770      	bx	lr

0800f8ea <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800f8ea:	b580      	push	{r7, lr}
 800f8ec:	b082      	sub	sp, #8
 800f8ee:	af00      	add	r7, sp, #0
 800f8f0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	2201      	movs	r2, #1
 800f8f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f900:	2b00      	cmp	r3, #0
 800f902:	d009      	beq.n	800f918 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f90a:	685b      	ldr	r3, [r3, #4]
 800f90c:	687a      	ldr	r2, [r7, #4]
 800f90e:	6852      	ldr	r2, [r2, #4]
 800f910:	b2d2      	uxtb	r2, r2
 800f912:	4611      	mov	r1, r2
 800f914:	6878      	ldr	r0, [r7, #4]
 800f916:	4798      	blx	r3
  }

  return USBD_OK;
 800f918:	2300      	movs	r3, #0
}
 800f91a:	4618      	mov	r0, r3
 800f91c:	3708      	adds	r7, #8
 800f91e:	46bd      	mov	sp, r7
 800f920:	bd80      	pop	{r7, pc}

0800f922 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f922:	b480      	push	{r7}
 800f924:	b087      	sub	sp, #28
 800f926:	af00      	add	r7, sp, #0
 800f928:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f92e:	697b      	ldr	r3, [r7, #20]
 800f930:	781b      	ldrb	r3, [r3, #0]
 800f932:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f934:	697b      	ldr	r3, [r7, #20]
 800f936:	3301      	adds	r3, #1
 800f938:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f93a:	697b      	ldr	r3, [r7, #20]
 800f93c:	781b      	ldrb	r3, [r3, #0]
 800f93e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f940:	8a3b      	ldrh	r3, [r7, #16]
 800f942:	021b      	lsls	r3, r3, #8
 800f944:	b21a      	sxth	r2, r3
 800f946:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f94a:	4313      	orrs	r3, r2
 800f94c:	b21b      	sxth	r3, r3
 800f94e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f950:	89fb      	ldrh	r3, [r7, #14]
}
 800f952:	4618      	mov	r0, r3
 800f954:	371c      	adds	r7, #28
 800f956:	46bd      	mov	sp, r7
 800f958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f95c:	4770      	bx	lr
	...

0800f960 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f960:	b580      	push	{r7, lr}
 800f962:	b084      	sub	sp, #16
 800f964:	af00      	add	r7, sp, #0
 800f966:	6078      	str	r0, [r7, #4]
 800f968:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f96a:	2300      	movs	r3, #0
 800f96c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f96e:	683b      	ldr	r3, [r7, #0]
 800f970:	781b      	ldrb	r3, [r3, #0]
 800f972:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f976:	2b40      	cmp	r3, #64	; 0x40
 800f978:	d005      	beq.n	800f986 <USBD_StdDevReq+0x26>
 800f97a:	2b40      	cmp	r3, #64	; 0x40
 800f97c:	d853      	bhi.n	800fa26 <USBD_StdDevReq+0xc6>
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d00b      	beq.n	800f99a <USBD_StdDevReq+0x3a>
 800f982:	2b20      	cmp	r3, #32
 800f984:	d14f      	bne.n	800fa26 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f98c:	689b      	ldr	r3, [r3, #8]
 800f98e:	6839      	ldr	r1, [r7, #0]
 800f990:	6878      	ldr	r0, [r7, #4]
 800f992:	4798      	blx	r3
 800f994:	4603      	mov	r3, r0
 800f996:	73fb      	strb	r3, [r7, #15]
    break;
 800f998:	e04a      	b.n	800fa30 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800f99a:	683b      	ldr	r3, [r7, #0]
 800f99c:	785b      	ldrb	r3, [r3, #1]
 800f99e:	2b09      	cmp	r3, #9
 800f9a0:	d83b      	bhi.n	800fa1a <USBD_StdDevReq+0xba>
 800f9a2:	a201      	add	r2, pc, #4	; (adr r2, 800f9a8 <USBD_StdDevReq+0x48>)
 800f9a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9a8:	0800f9fd 	.word	0x0800f9fd
 800f9ac:	0800fa11 	.word	0x0800fa11
 800f9b0:	0800fa1b 	.word	0x0800fa1b
 800f9b4:	0800fa07 	.word	0x0800fa07
 800f9b8:	0800fa1b 	.word	0x0800fa1b
 800f9bc:	0800f9db 	.word	0x0800f9db
 800f9c0:	0800f9d1 	.word	0x0800f9d1
 800f9c4:	0800fa1b 	.word	0x0800fa1b
 800f9c8:	0800f9f3 	.word	0x0800f9f3
 800f9cc:	0800f9e5 	.word	0x0800f9e5
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800f9d0:	6839      	ldr	r1, [r7, #0]
 800f9d2:	6878      	ldr	r0, [r7, #4]
 800f9d4:	f000 f9dc 	bl	800fd90 <USBD_GetDescriptor>
      break;
 800f9d8:	e024      	b.n	800fa24 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800f9da:	6839      	ldr	r1, [r7, #0]
 800f9dc:	6878      	ldr	r0, [r7, #4]
 800f9de:	f000 fb41 	bl	8010064 <USBD_SetAddress>
      break;
 800f9e2:	e01f      	b.n	800fa24 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800f9e4:	6839      	ldr	r1, [r7, #0]
 800f9e6:	6878      	ldr	r0, [r7, #4]
 800f9e8:	f000 fb80 	bl	80100ec <USBD_SetConfig>
 800f9ec:	4603      	mov	r3, r0
 800f9ee:	73fb      	strb	r3, [r7, #15]
      break;
 800f9f0:	e018      	b.n	800fa24 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800f9f2:	6839      	ldr	r1, [r7, #0]
 800f9f4:	6878      	ldr	r0, [r7, #4]
 800f9f6:	f000 fc1f 	bl	8010238 <USBD_GetConfig>
      break;
 800f9fa:	e013      	b.n	800fa24 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800f9fc:	6839      	ldr	r1, [r7, #0]
 800f9fe:	6878      	ldr	r0, [r7, #4]
 800fa00:	f000 fc50 	bl	80102a4 <USBD_GetStatus>
      break;
 800fa04:	e00e      	b.n	800fa24 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800fa06:	6839      	ldr	r1, [r7, #0]
 800fa08:	6878      	ldr	r0, [r7, #4]
 800fa0a:	f000 fc7f 	bl	801030c <USBD_SetFeature>
      break;
 800fa0e:	e009      	b.n	800fa24 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800fa10:	6839      	ldr	r1, [r7, #0]
 800fa12:	6878      	ldr	r0, [r7, #4]
 800fa14:	f000 fc8e 	bl	8010334 <USBD_ClrFeature>
      break;
 800fa18:	e004      	b.n	800fa24 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800fa1a:	6839      	ldr	r1, [r7, #0]
 800fa1c:	6878      	ldr	r0, [r7, #4]
 800fa1e:	f000 fce5 	bl	80103ec <USBD_CtlError>
      break;
 800fa22:	bf00      	nop
    }
    break;
 800fa24:	e004      	b.n	800fa30 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800fa26:	6839      	ldr	r1, [r7, #0]
 800fa28:	6878      	ldr	r0, [r7, #4]
 800fa2a:	f000 fcdf 	bl	80103ec <USBD_CtlError>
    break;
 800fa2e:	bf00      	nop
  }

  return ret;
 800fa30:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa32:	4618      	mov	r0, r3
 800fa34:	3710      	adds	r7, #16
 800fa36:	46bd      	mov	sp, r7
 800fa38:	bd80      	pop	{r7, pc}
 800fa3a:	bf00      	nop

0800fa3c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fa3c:	b580      	push	{r7, lr}
 800fa3e:	b084      	sub	sp, #16
 800fa40:	af00      	add	r7, sp, #0
 800fa42:	6078      	str	r0, [r7, #4]
 800fa44:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fa46:	2300      	movs	r3, #0
 800fa48:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fa4a:	683b      	ldr	r3, [r7, #0]
 800fa4c:	781b      	ldrb	r3, [r3, #0]
 800fa4e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fa52:	2b40      	cmp	r3, #64	; 0x40
 800fa54:	d005      	beq.n	800fa62 <USBD_StdItfReq+0x26>
 800fa56:	2b40      	cmp	r3, #64	; 0x40
 800fa58:	d82f      	bhi.n	800faba <USBD_StdItfReq+0x7e>
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d001      	beq.n	800fa62 <USBD_StdItfReq+0x26>
 800fa5e:	2b20      	cmp	r3, #32
 800fa60:	d12b      	bne.n	800faba <USBD_StdItfReq+0x7e>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fa68:	b2db      	uxtb	r3, r3
 800fa6a:	3b01      	subs	r3, #1
 800fa6c:	2b02      	cmp	r3, #2
 800fa6e:	d81d      	bhi.n	800faac <USBD_StdItfReq+0x70>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800fa70:	683b      	ldr	r3, [r7, #0]
 800fa72:	889b      	ldrh	r3, [r3, #4]
 800fa74:	b2db      	uxtb	r3, r3
 800fa76:	2b01      	cmp	r3, #1
 800fa78:	d813      	bhi.n	800faa2 <USBD_StdItfReq+0x66>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa80:	689b      	ldr	r3, [r3, #8]
 800fa82:	6839      	ldr	r1, [r7, #0]
 800fa84:	6878      	ldr	r0, [r7, #4]
 800fa86:	4798      	blx	r3
 800fa88:	4603      	mov	r3, r0
 800fa8a:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800fa8c:	683b      	ldr	r3, [r7, #0]
 800fa8e:	88db      	ldrh	r3, [r3, #6]
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d110      	bne.n	800fab6 <USBD_StdItfReq+0x7a>
 800fa94:	7bfb      	ldrb	r3, [r7, #15]
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d10d      	bne.n	800fab6 <USBD_StdItfReq+0x7a>
        {
          (void)USBD_CtlSendStatus(pdev);
 800fa9a:	6878      	ldr	r0, [r7, #4]
 800fa9c:	f000 fd71 	bl	8010582 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800faa0:	e009      	b.n	800fab6 <USBD_StdItfReq+0x7a>
        USBD_CtlError(pdev, req);
 800faa2:	6839      	ldr	r1, [r7, #0]
 800faa4:	6878      	ldr	r0, [r7, #4]
 800faa6:	f000 fca1 	bl	80103ec <USBD_CtlError>
      break;
 800faaa:	e004      	b.n	800fab6 <USBD_StdItfReq+0x7a>

    default:
      USBD_CtlError(pdev, req);
 800faac:	6839      	ldr	r1, [r7, #0]
 800faae:	6878      	ldr	r0, [r7, #4]
 800fab0:	f000 fc9c 	bl	80103ec <USBD_CtlError>
      break;
 800fab4:	e000      	b.n	800fab8 <USBD_StdItfReq+0x7c>
      break;
 800fab6:	bf00      	nop
    }
    break;
 800fab8:	e004      	b.n	800fac4 <USBD_StdItfReq+0x88>

  default:
    USBD_CtlError(pdev, req);
 800faba:	6839      	ldr	r1, [r7, #0]
 800fabc:	6878      	ldr	r0, [r7, #4]
 800fabe:	f000 fc95 	bl	80103ec <USBD_CtlError>
    break;
 800fac2:	bf00      	nop
  }

  return ret;
 800fac4:	7bfb      	ldrb	r3, [r7, #15]
}
 800fac6:	4618      	mov	r0, r3
 800fac8:	3710      	adds	r7, #16
 800faca:	46bd      	mov	sp, r7
 800facc:	bd80      	pop	{r7, pc}

0800face <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800face:	b580      	push	{r7, lr}
 800fad0:	b084      	sub	sp, #16
 800fad2:	af00      	add	r7, sp, #0
 800fad4:	6078      	str	r0, [r7, #4]
 800fad6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800fad8:	2300      	movs	r3, #0
 800fada:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800fadc:	683b      	ldr	r3, [r7, #0]
 800fade:	889b      	ldrh	r3, [r3, #4]
 800fae0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fae2:	683b      	ldr	r3, [r7, #0]
 800fae4:	781b      	ldrb	r3, [r3, #0]
 800fae6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800faea:	2b40      	cmp	r3, #64	; 0x40
 800faec:	d007      	beq.n	800fafe <USBD_StdEPReq+0x30>
 800faee:	2b40      	cmp	r3, #64	; 0x40
 800faf0:	f200 8143 	bhi.w	800fd7a <USBD_StdEPReq+0x2ac>
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d00c      	beq.n	800fb12 <USBD_StdEPReq+0x44>
 800faf8:	2b20      	cmp	r3, #32
 800fafa:	f040 813e 	bne.w	800fd7a <USBD_StdEPReq+0x2ac>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fb04:	689b      	ldr	r3, [r3, #8]
 800fb06:	6839      	ldr	r1, [r7, #0]
 800fb08:	6878      	ldr	r0, [r7, #4]
 800fb0a:	4798      	blx	r3
 800fb0c:	4603      	mov	r3, r0
 800fb0e:	73fb      	strb	r3, [r7, #15]
    break;
 800fb10:	e138      	b.n	800fd84 <USBD_StdEPReq+0x2b6>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800fb12:	683b      	ldr	r3, [r7, #0]
 800fb14:	785b      	ldrb	r3, [r3, #1]
 800fb16:	2b03      	cmp	r3, #3
 800fb18:	d007      	beq.n	800fb2a <USBD_StdEPReq+0x5c>
 800fb1a:	2b03      	cmp	r3, #3
 800fb1c:	f300 8127 	bgt.w	800fd6e <USBD_StdEPReq+0x2a0>
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d07d      	beq.n	800fc20 <USBD_StdEPReq+0x152>
 800fb24:	2b01      	cmp	r3, #1
 800fb26:	d03c      	beq.n	800fba2 <USBD_StdEPReq+0xd4>
 800fb28:	e121      	b.n	800fd6e <USBD_StdEPReq+0x2a0>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fb30:	b2db      	uxtb	r3, r3
 800fb32:	2b02      	cmp	r3, #2
 800fb34:	d002      	beq.n	800fb3c <USBD_StdEPReq+0x6e>
 800fb36:	2b03      	cmp	r3, #3
 800fb38:	d016      	beq.n	800fb68 <USBD_StdEPReq+0x9a>
 800fb3a:	e02c      	b.n	800fb96 <USBD_StdEPReq+0xc8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fb3c:	7bbb      	ldrb	r3, [r7, #14]
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d00d      	beq.n	800fb5e <USBD_StdEPReq+0x90>
 800fb42:	7bbb      	ldrb	r3, [r7, #14]
 800fb44:	2b80      	cmp	r3, #128	; 0x80
 800fb46:	d00a      	beq.n	800fb5e <USBD_StdEPReq+0x90>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800fb48:	7bbb      	ldrb	r3, [r7, #14]
 800fb4a:	4619      	mov	r1, r3
 800fb4c:	6878      	ldr	r0, [r7, #4]
 800fb4e:	f001 f9a5 	bl	8010e9c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800fb52:	2180      	movs	r1, #128	; 0x80
 800fb54:	6878      	ldr	r0, [r7, #4]
 800fb56:	f001 f9a1 	bl	8010e9c <USBD_LL_StallEP>
 800fb5a:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800fb5c:	e020      	b.n	800fba0 <USBD_StdEPReq+0xd2>
          USBD_CtlError(pdev, req);
 800fb5e:	6839      	ldr	r1, [r7, #0]
 800fb60:	6878      	ldr	r0, [r7, #4]
 800fb62:	f000 fc43 	bl	80103ec <USBD_CtlError>
        break;
 800fb66:	e01b      	b.n	800fba0 <USBD_StdEPReq+0xd2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800fb68:	683b      	ldr	r3, [r7, #0]
 800fb6a:	885b      	ldrh	r3, [r3, #2]
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d10e      	bne.n	800fb8e <USBD_StdEPReq+0xc0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800fb70:	7bbb      	ldrb	r3, [r7, #14]
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d00b      	beq.n	800fb8e <USBD_StdEPReq+0xc0>
 800fb76:	7bbb      	ldrb	r3, [r7, #14]
 800fb78:	2b80      	cmp	r3, #128	; 0x80
 800fb7a:	d008      	beq.n	800fb8e <USBD_StdEPReq+0xc0>
 800fb7c:	683b      	ldr	r3, [r7, #0]
 800fb7e:	88db      	ldrh	r3, [r3, #6]
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d104      	bne.n	800fb8e <USBD_StdEPReq+0xc0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800fb84:	7bbb      	ldrb	r3, [r7, #14]
 800fb86:	4619      	mov	r1, r3
 800fb88:	6878      	ldr	r0, [r7, #4]
 800fb8a:	f001 f987 	bl	8010e9c <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800fb8e:	6878      	ldr	r0, [r7, #4]
 800fb90:	f000 fcf7 	bl	8010582 <USBD_CtlSendStatus>

        break;
 800fb94:	e004      	b.n	800fba0 <USBD_StdEPReq+0xd2>

      default:
        USBD_CtlError(pdev, req);
 800fb96:	6839      	ldr	r1, [r7, #0]
 800fb98:	6878      	ldr	r0, [r7, #4]
 800fb9a:	f000 fc27 	bl	80103ec <USBD_CtlError>
        break;
 800fb9e:	bf00      	nop
      }
      break;
 800fba0:	e0ea      	b.n	800fd78 <USBD_StdEPReq+0x2aa>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fba8:	b2db      	uxtb	r3, r3
 800fbaa:	2b02      	cmp	r3, #2
 800fbac:	d002      	beq.n	800fbb4 <USBD_StdEPReq+0xe6>
 800fbae:	2b03      	cmp	r3, #3
 800fbb0:	d016      	beq.n	800fbe0 <USBD_StdEPReq+0x112>
 800fbb2:	e02e      	b.n	800fc12 <USBD_StdEPReq+0x144>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fbb4:	7bbb      	ldrb	r3, [r7, #14]
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d00d      	beq.n	800fbd6 <USBD_StdEPReq+0x108>
 800fbba:	7bbb      	ldrb	r3, [r7, #14]
 800fbbc:	2b80      	cmp	r3, #128	; 0x80
 800fbbe:	d00a      	beq.n	800fbd6 <USBD_StdEPReq+0x108>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800fbc0:	7bbb      	ldrb	r3, [r7, #14]
 800fbc2:	4619      	mov	r1, r3
 800fbc4:	6878      	ldr	r0, [r7, #4]
 800fbc6:	f001 f969 	bl	8010e9c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800fbca:	2180      	movs	r1, #128	; 0x80
 800fbcc:	6878      	ldr	r0, [r7, #4]
 800fbce:	f001 f965 	bl	8010e9c <USBD_LL_StallEP>
 800fbd2:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800fbd4:	e023      	b.n	800fc1e <USBD_StdEPReq+0x150>
          USBD_CtlError(pdev, req);
 800fbd6:	6839      	ldr	r1, [r7, #0]
 800fbd8:	6878      	ldr	r0, [r7, #4]
 800fbda:	f000 fc07 	bl	80103ec <USBD_CtlError>
        break;
 800fbde:	e01e      	b.n	800fc1e <USBD_StdEPReq+0x150>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800fbe0:	683b      	ldr	r3, [r7, #0]
 800fbe2:	885b      	ldrh	r3, [r3, #2]
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d119      	bne.n	800fc1c <USBD_StdEPReq+0x14e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800fbe8:	7bbb      	ldrb	r3, [r7, #14]
 800fbea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d004      	beq.n	800fbfc <USBD_StdEPReq+0x12e>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800fbf2:	7bbb      	ldrb	r3, [r7, #14]
 800fbf4:	4619      	mov	r1, r3
 800fbf6:	6878      	ldr	r0, [r7, #4]
 800fbf8:	f001 f96f 	bl	8010eda <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800fbfc:	6878      	ldr	r0, [r7, #4]
 800fbfe:	f000 fcc0 	bl	8010582 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc08:	689b      	ldr	r3, [r3, #8]
 800fc0a:	6839      	ldr	r1, [r7, #0]
 800fc0c:	6878      	ldr	r0, [r7, #4]
 800fc0e:	4798      	blx	r3
        }
        break;
 800fc10:	e004      	b.n	800fc1c <USBD_StdEPReq+0x14e>

      default:
        USBD_CtlError(pdev, req);
 800fc12:	6839      	ldr	r1, [r7, #0]
 800fc14:	6878      	ldr	r0, [r7, #4]
 800fc16:	f000 fbe9 	bl	80103ec <USBD_CtlError>
        break;
 800fc1a:	e000      	b.n	800fc1e <USBD_StdEPReq+0x150>
        break;
 800fc1c:	bf00      	nop
      }
      break;
 800fc1e:	e0ab      	b.n	800fd78 <USBD_StdEPReq+0x2aa>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fc26:	b2db      	uxtb	r3, r3
 800fc28:	2b02      	cmp	r3, #2
 800fc2a:	d002      	beq.n	800fc32 <USBD_StdEPReq+0x164>
 800fc2c:	2b03      	cmp	r3, #3
 800fc2e:	d032      	beq.n	800fc96 <USBD_StdEPReq+0x1c8>
 800fc30:	e097      	b.n	800fd62 <USBD_StdEPReq+0x294>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fc32:	7bbb      	ldrb	r3, [r7, #14]
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d007      	beq.n	800fc48 <USBD_StdEPReq+0x17a>
 800fc38:	7bbb      	ldrb	r3, [r7, #14]
 800fc3a:	2b80      	cmp	r3, #128	; 0x80
 800fc3c:	d004      	beq.n	800fc48 <USBD_StdEPReq+0x17a>
        {
          USBD_CtlError(pdev, req);
 800fc3e:	6839      	ldr	r1, [r7, #0]
 800fc40:	6878      	ldr	r0, [r7, #4]
 800fc42:	f000 fbd3 	bl	80103ec <USBD_CtlError>
          break;
 800fc46:	e091      	b.n	800fd6c <USBD_StdEPReq+0x29e>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fc48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	da0b      	bge.n	800fc68 <USBD_StdEPReq+0x19a>
 800fc50:	7bbb      	ldrb	r3, [r7, #14]
 800fc52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fc56:	4613      	mov	r3, r2
 800fc58:	009b      	lsls	r3, r3, #2
 800fc5a:	4413      	add	r3, r2
 800fc5c:	009b      	lsls	r3, r3, #2
 800fc5e:	3310      	adds	r3, #16
 800fc60:	687a      	ldr	r2, [r7, #4]
 800fc62:	4413      	add	r3, r2
 800fc64:	3304      	adds	r3, #4
 800fc66:	e00b      	b.n	800fc80 <USBD_StdEPReq+0x1b2>
              &pdev->ep_out[ep_addr & 0x7FU];
 800fc68:	7bbb      	ldrb	r3, [r7, #14]
 800fc6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fc6e:	4613      	mov	r3, r2
 800fc70:	009b      	lsls	r3, r3, #2
 800fc72:	4413      	add	r3, r2
 800fc74:	009b      	lsls	r3, r3, #2
 800fc76:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800fc7a:	687a      	ldr	r2, [r7, #4]
 800fc7c:	4413      	add	r3, r2
 800fc7e:	3304      	adds	r3, #4
 800fc80:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800fc82:	68bb      	ldr	r3, [r7, #8]
 800fc84:	2200      	movs	r2, #0
 800fc86:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800fc88:	68bb      	ldr	r3, [r7, #8]
 800fc8a:	2202      	movs	r2, #2
 800fc8c:	4619      	mov	r1, r3
 800fc8e:	6878      	ldr	r0, [r7, #4]
 800fc90:	f000 fc1d 	bl	80104ce <USBD_CtlSendData>
        break;
 800fc94:	e06a      	b.n	800fd6c <USBD_StdEPReq+0x29e>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800fc96:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	da11      	bge.n	800fcc2 <USBD_StdEPReq+0x1f4>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800fc9e:	7bbb      	ldrb	r3, [r7, #14]
 800fca0:	f003 020f 	and.w	r2, r3, #15
 800fca4:	6879      	ldr	r1, [r7, #4]
 800fca6:	4613      	mov	r3, r2
 800fca8:	009b      	lsls	r3, r3, #2
 800fcaa:	4413      	add	r3, r2
 800fcac:	009b      	lsls	r3, r3, #2
 800fcae:	440b      	add	r3, r1
 800fcb0:	3324      	adds	r3, #36	; 0x24
 800fcb2:	881b      	ldrh	r3, [r3, #0]
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d117      	bne.n	800fce8 <USBD_StdEPReq+0x21a>
          {
            USBD_CtlError(pdev, req);
 800fcb8:	6839      	ldr	r1, [r7, #0]
 800fcba:	6878      	ldr	r0, [r7, #4]
 800fcbc:	f000 fb96 	bl	80103ec <USBD_CtlError>
            break;
 800fcc0:	e054      	b.n	800fd6c <USBD_StdEPReq+0x29e>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800fcc2:	7bbb      	ldrb	r3, [r7, #14]
 800fcc4:	f003 020f 	and.w	r2, r3, #15
 800fcc8:	6879      	ldr	r1, [r7, #4]
 800fcca:	4613      	mov	r3, r2
 800fccc:	009b      	lsls	r3, r3, #2
 800fcce:	4413      	add	r3, r2
 800fcd0:	009b      	lsls	r3, r3, #2
 800fcd2:	440b      	add	r3, r1
 800fcd4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800fcd8:	881b      	ldrh	r3, [r3, #0]
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d104      	bne.n	800fce8 <USBD_StdEPReq+0x21a>
          {
            USBD_CtlError(pdev, req);
 800fcde:	6839      	ldr	r1, [r7, #0]
 800fce0:	6878      	ldr	r0, [r7, #4]
 800fce2:	f000 fb83 	bl	80103ec <USBD_CtlError>
            break;
 800fce6:	e041      	b.n	800fd6c <USBD_StdEPReq+0x29e>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fce8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	da0b      	bge.n	800fd08 <USBD_StdEPReq+0x23a>
 800fcf0:	7bbb      	ldrb	r3, [r7, #14]
 800fcf2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fcf6:	4613      	mov	r3, r2
 800fcf8:	009b      	lsls	r3, r3, #2
 800fcfa:	4413      	add	r3, r2
 800fcfc:	009b      	lsls	r3, r3, #2
 800fcfe:	3310      	adds	r3, #16
 800fd00:	687a      	ldr	r2, [r7, #4]
 800fd02:	4413      	add	r3, r2
 800fd04:	3304      	adds	r3, #4
 800fd06:	e00b      	b.n	800fd20 <USBD_StdEPReq+0x252>
              &pdev->ep_out[ep_addr & 0x7FU];
 800fd08:	7bbb      	ldrb	r3, [r7, #14]
 800fd0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fd0e:	4613      	mov	r3, r2
 800fd10:	009b      	lsls	r3, r3, #2
 800fd12:	4413      	add	r3, r2
 800fd14:	009b      	lsls	r3, r3, #2
 800fd16:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800fd1a:	687a      	ldr	r2, [r7, #4]
 800fd1c:	4413      	add	r3, r2
 800fd1e:	3304      	adds	r3, #4
 800fd20:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800fd22:	7bbb      	ldrb	r3, [r7, #14]
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d002      	beq.n	800fd2e <USBD_StdEPReq+0x260>
 800fd28:	7bbb      	ldrb	r3, [r7, #14]
 800fd2a:	2b80      	cmp	r3, #128	; 0x80
 800fd2c:	d103      	bne.n	800fd36 <USBD_StdEPReq+0x268>
          {
            pep->status = 0x0000U;
 800fd2e:	68bb      	ldr	r3, [r7, #8]
 800fd30:	2200      	movs	r2, #0
 800fd32:	601a      	str	r2, [r3, #0]
 800fd34:	e00e      	b.n	800fd54 <USBD_StdEPReq+0x286>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800fd36:	7bbb      	ldrb	r3, [r7, #14]
 800fd38:	4619      	mov	r1, r3
 800fd3a:	6878      	ldr	r0, [r7, #4]
 800fd3c:	f001 f8ec 	bl	8010f18 <USBD_LL_IsStallEP>
 800fd40:	4603      	mov	r3, r0
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d003      	beq.n	800fd4e <USBD_StdEPReq+0x280>
          {
            pep->status = 0x0001U;
 800fd46:	68bb      	ldr	r3, [r7, #8]
 800fd48:	2201      	movs	r2, #1
 800fd4a:	601a      	str	r2, [r3, #0]
 800fd4c:	e002      	b.n	800fd54 <USBD_StdEPReq+0x286>
          }
          else
          {
            pep->status = 0x0000U;
 800fd4e:	68bb      	ldr	r3, [r7, #8]
 800fd50:	2200      	movs	r2, #0
 800fd52:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800fd54:	68bb      	ldr	r3, [r7, #8]
 800fd56:	2202      	movs	r2, #2
 800fd58:	4619      	mov	r1, r3
 800fd5a:	6878      	ldr	r0, [r7, #4]
 800fd5c:	f000 fbb7 	bl	80104ce <USBD_CtlSendData>
          break;
 800fd60:	e004      	b.n	800fd6c <USBD_StdEPReq+0x29e>

      default:
        USBD_CtlError(pdev, req);
 800fd62:	6839      	ldr	r1, [r7, #0]
 800fd64:	6878      	ldr	r0, [r7, #4]
 800fd66:	f000 fb41 	bl	80103ec <USBD_CtlError>
        break;
 800fd6a:	bf00      	nop
      }
      break;
 800fd6c:	e004      	b.n	800fd78 <USBD_StdEPReq+0x2aa>

    default:
      USBD_CtlError(pdev, req);
 800fd6e:	6839      	ldr	r1, [r7, #0]
 800fd70:	6878      	ldr	r0, [r7, #4]
 800fd72:	f000 fb3b 	bl	80103ec <USBD_CtlError>
      break;
 800fd76:	bf00      	nop
    }
    break;
 800fd78:	e004      	b.n	800fd84 <USBD_StdEPReq+0x2b6>

  default:
    USBD_CtlError(pdev, req);
 800fd7a:	6839      	ldr	r1, [r7, #0]
 800fd7c:	6878      	ldr	r0, [r7, #4]
 800fd7e:	f000 fb35 	bl	80103ec <USBD_CtlError>
    break;
 800fd82:	bf00      	nop
  }

  return ret;
 800fd84:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd86:	4618      	mov	r0, r3
 800fd88:	3710      	adds	r7, #16
 800fd8a:	46bd      	mov	sp, r7
 800fd8c:	bd80      	pop	{r7, pc}
	...

0800fd90 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fd90:	b580      	push	{r7, lr}
 800fd92:	b084      	sub	sp, #16
 800fd94:	af00      	add	r7, sp, #0
 800fd96:	6078      	str	r0, [r7, #4]
 800fd98:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800fd9a:	2300      	movs	r3, #0
 800fd9c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800fd9e:	2300      	movs	r3, #0
 800fda0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800fda2:	2300      	movs	r3, #0
 800fda4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800fda6:	683b      	ldr	r3, [r7, #0]
 800fda8:	885b      	ldrh	r3, [r3, #2]
 800fdaa:	0a1b      	lsrs	r3, r3, #8
 800fdac:	b29b      	uxth	r3, r3
 800fdae:	3b01      	subs	r3, #1
 800fdb0:	2b06      	cmp	r3, #6
 800fdb2:	f200 8128 	bhi.w	8010006 <USBD_GetDescriptor+0x276>
 800fdb6:	a201      	add	r2, pc, #4	; (adr r2, 800fdbc <USBD_GetDescriptor+0x2c>)
 800fdb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdbc:	0800fdd9 	.word	0x0800fdd9
 800fdc0:	0800fdf1 	.word	0x0800fdf1
 800fdc4:	0800fe31 	.word	0x0800fe31
 800fdc8:	08010007 	.word	0x08010007
 800fdcc:	08010007 	.word	0x08010007
 800fdd0:	0800ffa7 	.word	0x0800ffa7
 800fdd4:	0800ffd3 	.word	0x0800ffd3
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	687a      	ldr	r2, [r7, #4]
 800fde2:	7c12      	ldrb	r2, [r2, #16]
 800fde4:	f107 0108 	add.w	r1, r7, #8
 800fde8:	4610      	mov	r0, r2
 800fdea:	4798      	blx	r3
 800fdec:	60f8      	str	r0, [r7, #12]
    break;
 800fdee:	e112      	b.n	8010016 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	7c1b      	ldrb	r3, [r3, #16]
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d10d      	bne.n	800fe14 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fdfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe00:	f107 0208 	add.w	r2, r7, #8
 800fe04:	4610      	mov	r0, r2
 800fe06:	4798      	blx	r3
 800fe08:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	3301      	adds	r3, #1
 800fe0e:	2202      	movs	r2, #2
 800fe10:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800fe12:	e100      	b.n	8010016 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fe1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe1c:	f107 0208 	add.w	r2, r7, #8
 800fe20:	4610      	mov	r0, r2
 800fe22:	4798      	blx	r3
 800fe24:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	3301      	adds	r3, #1
 800fe2a:	2202      	movs	r2, #2
 800fe2c:	701a      	strb	r2, [r3, #0]
    break;
 800fe2e:	e0f2      	b.n	8010016 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800fe30:	683b      	ldr	r3, [r7, #0]
 800fe32:	885b      	ldrh	r3, [r3, #2]
 800fe34:	b2db      	uxtb	r3, r3
 800fe36:	2b05      	cmp	r3, #5
 800fe38:	f200 80ac 	bhi.w	800ff94 <USBD_GetDescriptor+0x204>
 800fe3c:	a201      	add	r2, pc, #4	; (adr r2, 800fe44 <USBD_GetDescriptor+0xb4>)
 800fe3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe42:	bf00      	nop
 800fe44:	0800fe5d 	.word	0x0800fe5d
 800fe48:	0800fe91 	.word	0x0800fe91
 800fe4c:	0800fec5 	.word	0x0800fec5
 800fe50:	0800fef9 	.word	0x0800fef9
 800fe54:	0800ff2d 	.word	0x0800ff2d
 800fe58:	0800ff61 	.word	0x0800ff61
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fe62:	685b      	ldr	r3, [r3, #4]
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d00b      	beq.n	800fe80 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fe6e:	685b      	ldr	r3, [r3, #4]
 800fe70:	687a      	ldr	r2, [r7, #4]
 800fe72:	7c12      	ldrb	r2, [r2, #16]
 800fe74:	f107 0108 	add.w	r1, r7, #8
 800fe78:	4610      	mov	r0, r2
 800fe7a:	4798      	blx	r3
 800fe7c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fe7e:	e091      	b.n	800ffa4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800fe80:	6839      	ldr	r1, [r7, #0]
 800fe82:	6878      	ldr	r0, [r7, #4]
 800fe84:	f000 fab2 	bl	80103ec <USBD_CtlError>
        err++;
 800fe88:	7afb      	ldrb	r3, [r7, #11]
 800fe8a:	3301      	adds	r3, #1
 800fe8c:	72fb      	strb	r3, [r7, #11]
      break;
 800fe8e:	e089      	b.n	800ffa4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fe96:	689b      	ldr	r3, [r3, #8]
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d00b      	beq.n	800feb4 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fea2:	689b      	ldr	r3, [r3, #8]
 800fea4:	687a      	ldr	r2, [r7, #4]
 800fea6:	7c12      	ldrb	r2, [r2, #16]
 800fea8:	f107 0108 	add.w	r1, r7, #8
 800feac:	4610      	mov	r0, r2
 800feae:	4798      	blx	r3
 800feb0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800feb2:	e077      	b.n	800ffa4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800feb4:	6839      	ldr	r1, [r7, #0]
 800feb6:	6878      	ldr	r0, [r7, #4]
 800feb8:	f000 fa98 	bl	80103ec <USBD_CtlError>
        err++;
 800febc:	7afb      	ldrb	r3, [r7, #11]
 800febe:	3301      	adds	r3, #1
 800fec0:	72fb      	strb	r3, [r7, #11]
      break;
 800fec2:	e06f      	b.n	800ffa4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800feca:	68db      	ldr	r3, [r3, #12]
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d00b      	beq.n	800fee8 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fed6:	68db      	ldr	r3, [r3, #12]
 800fed8:	687a      	ldr	r2, [r7, #4]
 800feda:	7c12      	ldrb	r2, [r2, #16]
 800fedc:	f107 0108 	add.w	r1, r7, #8
 800fee0:	4610      	mov	r0, r2
 800fee2:	4798      	blx	r3
 800fee4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fee6:	e05d      	b.n	800ffa4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800fee8:	6839      	ldr	r1, [r7, #0]
 800feea:	6878      	ldr	r0, [r7, #4]
 800feec:	f000 fa7e 	bl	80103ec <USBD_CtlError>
        err++;
 800fef0:	7afb      	ldrb	r3, [r7, #11]
 800fef2:	3301      	adds	r3, #1
 800fef4:	72fb      	strb	r3, [r7, #11]
      break;
 800fef6:	e055      	b.n	800ffa4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fefe:	691b      	ldr	r3, [r3, #16]
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d00b      	beq.n	800ff1c <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ff0a:	691b      	ldr	r3, [r3, #16]
 800ff0c:	687a      	ldr	r2, [r7, #4]
 800ff0e:	7c12      	ldrb	r2, [r2, #16]
 800ff10:	f107 0108 	add.w	r1, r7, #8
 800ff14:	4610      	mov	r0, r2
 800ff16:	4798      	blx	r3
 800ff18:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ff1a:	e043      	b.n	800ffa4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800ff1c:	6839      	ldr	r1, [r7, #0]
 800ff1e:	6878      	ldr	r0, [r7, #4]
 800ff20:	f000 fa64 	bl	80103ec <USBD_CtlError>
        err++;
 800ff24:	7afb      	ldrb	r3, [r7, #11]
 800ff26:	3301      	adds	r3, #1
 800ff28:	72fb      	strb	r3, [r7, #11]
      break;
 800ff2a:	e03b      	b.n	800ffa4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ff32:	695b      	ldr	r3, [r3, #20]
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d00b      	beq.n	800ff50 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ff3e:	695b      	ldr	r3, [r3, #20]
 800ff40:	687a      	ldr	r2, [r7, #4]
 800ff42:	7c12      	ldrb	r2, [r2, #16]
 800ff44:	f107 0108 	add.w	r1, r7, #8
 800ff48:	4610      	mov	r0, r2
 800ff4a:	4798      	blx	r3
 800ff4c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ff4e:	e029      	b.n	800ffa4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800ff50:	6839      	ldr	r1, [r7, #0]
 800ff52:	6878      	ldr	r0, [r7, #4]
 800ff54:	f000 fa4a 	bl	80103ec <USBD_CtlError>
        err++;
 800ff58:	7afb      	ldrb	r3, [r7, #11]
 800ff5a:	3301      	adds	r3, #1
 800ff5c:	72fb      	strb	r3, [r7, #11]
      break;
 800ff5e:	e021      	b.n	800ffa4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ff66:	699b      	ldr	r3, [r3, #24]
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d00b      	beq.n	800ff84 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ff72:	699b      	ldr	r3, [r3, #24]
 800ff74:	687a      	ldr	r2, [r7, #4]
 800ff76:	7c12      	ldrb	r2, [r2, #16]
 800ff78:	f107 0108 	add.w	r1, r7, #8
 800ff7c:	4610      	mov	r0, r2
 800ff7e:	4798      	blx	r3
 800ff80:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ff82:	e00f      	b.n	800ffa4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800ff84:	6839      	ldr	r1, [r7, #0]
 800ff86:	6878      	ldr	r0, [r7, #4]
 800ff88:	f000 fa30 	bl	80103ec <USBD_CtlError>
        err++;
 800ff8c:	7afb      	ldrb	r3, [r7, #11]
 800ff8e:	3301      	adds	r3, #1
 800ff90:	72fb      	strb	r3, [r7, #11]
      break;
 800ff92:	e007      	b.n	800ffa4 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800ff94:	6839      	ldr	r1, [r7, #0]
 800ff96:	6878      	ldr	r0, [r7, #4]
 800ff98:	f000 fa28 	bl	80103ec <USBD_CtlError>
      err++;
 800ff9c:	7afb      	ldrb	r3, [r7, #11]
 800ff9e:	3301      	adds	r3, #1
 800ffa0:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800ffa2:	bf00      	nop
    }
    break;
 800ffa4:	e037      	b.n	8010016 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	7c1b      	ldrb	r3, [r3, #16]
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d109      	bne.n	800ffc2 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ffb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ffb6:	f107 0208 	add.w	r2, r7, #8
 800ffba:	4610      	mov	r0, r2
 800ffbc:	4798      	blx	r3
 800ffbe:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800ffc0:	e029      	b.n	8010016 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800ffc2:	6839      	ldr	r1, [r7, #0]
 800ffc4:	6878      	ldr	r0, [r7, #4]
 800ffc6:	f000 fa11 	bl	80103ec <USBD_CtlError>
      err++;
 800ffca:	7afb      	ldrb	r3, [r7, #11]
 800ffcc:	3301      	adds	r3, #1
 800ffce:	72fb      	strb	r3, [r7, #11]
    break;
 800ffd0:	e021      	b.n	8010016 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	7c1b      	ldrb	r3, [r3, #16]
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d10d      	bne.n	800fff6 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ffe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ffe2:	f107 0208 	add.w	r2, r7, #8
 800ffe6:	4610      	mov	r0, r2
 800ffe8:	4798      	blx	r3
 800ffea:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	3301      	adds	r3, #1
 800fff0:	2207      	movs	r2, #7
 800fff2:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800fff4:	e00f      	b.n	8010016 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800fff6:	6839      	ldr	r1, [r7, #0]
 800fff8:	6878      	ldr	r0, [r7, #4]
 800fffa:	f000 f9f7 	bl	80103ec <USBD_CtlError>
      err++;
 800fffe:	7afb      	ldrb	r3, [r7, #11]
 8010000:	3301      	adds	r3, #1
 8010002:	72fb      	strb	r3, [r7, #11]
    break;
 8010004:	e007      	b.n	8010016 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8010006:	6839      	ldr	r1, [r7, #0]
 8010008:	6878      	ldr	r0, [r7, #4]
 801000a:	f000 f9ef 	bl	80103ec <USBD_CtlError>
    err++;
 801000e:	7afb      	ldrb	r3, [r7, #11]
 8010010:	3301      	adds	r3, #1
 8010012:	72fb      	strb	r3, [r7, #11]
    break;
 8010014:	bf00      	nop
  }

  if (err != 0U)
 8010016:	7afb      	ldrb	r3, [r7, #11]
 8010018:	2b00      	cmp	r3, #0
 801001a:	d11e      	bne.n	801005a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 801001c:	683b      	ldr	r3, [r7, #0]
 801001e:	88db      	ldrh	r3, [r3, #6]
 8010020:	2b00      	cmp	r3, #0
 8010022:	d016      	beq.n	8010052 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8010024:	893b      	ldrh	r3, [r7, #8]
 8010026:	2b00      	cmp	r3, #0
 8010028:	d00e      	beq.n	8010048 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 801002a:	683b      	ldr	r3, [r7, #0]
 801002c:	88da      	ldrh	r2, [r3, #6]
 801002e:	893b      	ldrh	r3, [r7, #8]
 8010030:	4293      	cmp	r3, r2
 8010032:	bf28      	it	cs
 8010034:	4613      	movcs	r3, r2
 8010036:	b29b      	uxth	r3, r3
 8010038:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 801003a:	893b      	ldrh	r3, [r7, #8]
 801003c:	461a      	mov	r2, r3
 801003e:	68f9      	ldr	r1, [r7, #12]
 8010040:	6878      	ldr	r0, [r7, #4]
 8010042:	f000 fa44 	bl	80104ce <USBD_CtlSendData>
 8010046:	e009      	b.n	801005c <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8010048:	6839      	ldr	r1, [r7, #0]
 801004a:	6878      	ldr	r0, [r7, #4]
 801004c:	f000 f9ce 	bl	80103ec <USBD_CtlError>
 8010050:	e004      	b.n	801005c <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8010052:	6878      	ldr	r0, [r7, #4]
 8010054:	f000 fa95 	bl	8010582 <USBD_CtlSendStatus>
 8010058:	e000      	b.n	801005c <USBD_GetDescriptor+0x2cc>
    return;
 801005a:	bf00      	nop
    }
  }
}
 801005c:	3710      	adds	r7, #16
 801005e:	46bd      	mov	sp, r7
 8010060:	bd80      	pop	{r7, pc}
 8010062:	bf00      	nop

08010064 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010064:	b580      	push	{r7, lr}
 8010066:	b084      	sub	sp, #16
 8010068:	af00      	add	r7, sp, #0
 801006a:	6078      	str	r0, [r7, #4]
 801006c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801006e:	683b      	ldr	r3, [r7, #0]
 8010070:	889b      	ldrh	r3, [r3, #4]
 8010072:	2b00      	cmp	r3, #0
 8010074:	d131      	bne.n	80100da <USBD_SetAddress+0x76>
 8010076:	683b      	ldr	r3, [r7, #0]
 8010078:	88db      	ldrh	r3, [r3, #6]
 801007a:	2b00      	cmp	r3, #0
 801007c:	d12d      	bne.n	80100da <USBD_SetAddress+0x76>
 801007e:	683b      	ldr	r3, [r7, #0]
 8010080:	885b      	ldrh	r3, [r3, #2]
 8010082:	2b7f      	cmp	r3, #127	; 0x7f
 8010084:	d829      	bhi.n	80100da <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8010086:	683b      	ldr	r3, [r7, #0]
 8010088:	885b      	ldrh	r3, [r3, #2]
 801008a:	b2db      	uxtb	r3, r3
 801008c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010090:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010098:	b2db      	uxtb	r3, r3
 801009a:	2b03      	cmp	r3, #3
 801009c:	d104      	bne.n	80100a8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801009e:	6839      	ldr	r1, [r7, #0]
 80100a0:	6878      	ldr	r0, [r7, #4]
 80100a2:	f000 f9a3 	bl	80103ec <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80100a6:	e01d      	b.n	80100e4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	7bfa      	ldrb	r2, [r7, #15]
 80100ac:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80100b0:	7bfb      	ldrb	r3, [r7, #15]
 80100b2:	4619      	mov	r1, r3
 80100b4:	6878      	ldr	r0, [r7, #4]
 80100b6:	f000 ff5b 	bl	8010f70 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80100ba:	6878      	ldr	r0, [r7, #4]
 80100bc:	f000 fa61 	bl	8010582 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80100c0:	7bfb      	ldrb	r3, [r7, #15]
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d004      	beq.n	80100d0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	2202      	movs	r2, #2
 80100ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80100ce:	e009      	b.n	80100e4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	2201      	movs	r2, #1
 80100d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80100d8:	e004      	b.n	80100e4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80100da:	6839      	ldr	r1, [r7, #0]
 80100dc:	6878      	ldr	r0, [r7, #4]
 80100de:	f000 f985 	bl	80103ec <USBD_CtlError>
  }
}
 80100e2:	bf00      	nop
 80100e4:	bf00      	nop
 80100e6:	3710      	adds	r7, #16
 80100e8:	46bd      	mov	sp, r7
 80100ea:	bd80      	pop	{r7, pc}

080100ec <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80100ec:	b580      	push	{r7, lr}
 80100ee:	b084      	sub	sp, #16
 80100f0:	af00      	add	r7, sp, #0
 80100f2:	6078      	str	r0, [r7, #4]
 80100f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80100f6:	2300      	movs	r3, #0
 80100f8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80100fa:	683b      	ldr	r3, [r7, #0]
 80100fc:	885b      	ldrh	r3, [r3, #2]
 80100fe:	b2da      	uxtb	r2, r3
 8010100:	4b4c      	ldr	r3, [pc, #304]	; (8010234 <USBD_SetConfig+0x148>)
 8010102:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8010104:	4b4b      	ldr	r3, [pc, #300]	; (8010234 <USBD_SetConfig+0x148>)
 8010106:	781b      	ldrb	r3, [r3, #0]
 8010108:	2b01      	cmp	r3, #1
 801010a:	d905      	bls.n	8010118 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 801010c:	6839      	ldr	r1, [r7, #0]
 801010e:	6878      	ldr	r0, [r7, #4]
 8010110:	f000 f96c 	bl	80103ec <USBD_CtlError>
    return USBD_FAIL;
 8010114:	2303      	movs	r3, #3
 8010116:	e088      	b.n	801022a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801011e:	b2db      	uxtb	r3, r3
 8010120:	2b02      	cmp	r3, #2
 8010122:	d002      	beq.n	801012a <USBD_SetConfig+0x3e>
 8010124:	2b03      	cmp	r3, #3
 8010126:	d025      	beq.n	8010174 <USBD_SetConfig+0x88>
 8010128:	e071      	b.n	801020e <USBD_SetConfig+0x122>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 801012a:	4b42      	ldr	r3, [pc, #264]	; (8010234 <USBD_SetConfig+0x148>)
 801012c:	781b      	ldrb	r3, [r3, #0]
 801012e:	2b00      	cmp	r3, #0
 8010130:	d01c      	beq.n	801016c <USBD_SetConfig+0x80>
    {
      pdev->dev_config = cfgidx;
 8010132:	4b40      	ldr	r3, [pc, #256]	; (8010234 <USBD_SetConfig+0x148>)
 8010134:	781b      	ldrb	r3, [r3, #0]
 8010136:	461a      	mov	r2, r3
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 801013c:	4b3d      	ldr	r3, [pc, #244]	; (8010234 <USBD_SetConfig+0x148>)
 801013e:	781b      	ldrb	r3, [r3, #0]
 8010140:	4619      	mov	r1, r3
 8010142:	6878      	ldr	r0, [r7, #4]
 8010144:	f7ff f98c 	bl	800f460 <USBD_SetClassConfig>
 8010148:	4603      	mov	r3, r0
 801014a:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 801014c:	7bfb      	ldrb	r3, [r7, #15]
 801014e:	2b00      	cmp	r3, #0
 8010150:	d004      	beq.n	801015c <USBD_SetConfig+0x70>
      {
        USBD_CtlError(pdev, req);
 8010152:	6839      	ldr	r1, [r7, #0]
 8010154:	6878      	ldr	r0, [r7, #4]
 8010156:	f000 f949 	bl	80103ec <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 801015a:	e065      	b.n	8010228 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 801015c:	6878      	ldr	r0, [r7, #4]
 801015e:	f000 fa10 	bl	8010582 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	2203      	movs	r2, #3
 8010166:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 801016a:	e05d      	b.n	8010228 <USBD_SetConfig+0x13c>
      (void)USBD_CtlSendStatus(pdev);
 801016c:	6878      	ldr	r0, [r7, #4]
 801016e:	f000 fa08 	bl	8010582 <USBD_CtlSendStatus>
    break;
 8010172:	e059      	b.n	8010228 <USBD_SetConfig+0x13c>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8010174:	4b2f      	ldr	r3, [pc, #188]	; (8010234 <USBD_SetConfig+0x148>)
 8010176:	781b      	ldrb	r3, [r3, #0]
 8010178:	2b00      	cmp	r3, #0
 801017a:	d112      	bne.n	80101a2 <USBD_SetConfig+0xb6>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	2202      	movs	r2, #2
 8010180:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8010184:	4b2b      	ldr	r3, [pc, #172]	; (8010234 <USBD_SetConfig+0x148>)
 8010186:	781b      	ldrb	r3, [r3, #0]
 8010188:	461a      	mov	r2, r3
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801018e:	4b29      	ldr	r3, [pc, #164]	; (8010234 <USBD_SetConfig+0x148>)
 8010190:	781b      	ldrb	r3, [r3, #0]
 8010192:	4619      	mov	r1, r3
 8010194:	6878      	ldr	r0, [r7, #4]
 8010196:	f7ff f97f 	bl	800f498 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 801019a:	6878      	ldr	r0, [r7, #4]
 801019c:	f000 f9f1 	bl	8010582 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80101a0:	e042      	b.n	8010228 <USBD_SetConfig+0x13c>
    else if (cfgidx != pdev->dev_config)
 80101a2:	4b24      	ldr	r3, [pc, #144]	; (8010234 <USBD_SetConfig+0x148>)
 80101a4:	781b      	ldrb	r3, [r3, #0]
 80101a6:	461a      	mov	r2, r3
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	685b      	ldr	r3, [r3, #4]
 80101ac:	429a      	cmp	r2, r3
 80101ae:	d02a      	beq.n	8010206 <USBD_SetConfig+0x11a>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	685b      	ldr	r3, [r3, #4]
 80101b4:	b2db      	uxtb	r3, r3
 80101b6:	4619      	mov	r1, r3
 80101b8:	6878      	ldr	r0, [r7, #4]
 80101ba:	f7ff f96d 	bl	800f498 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80101be:	4b1d      	ldr	r3, [pc, #116]	; (8010234 <USBD_SetConfig+0x148>)
 80101c0:	781b      	ldrb	r3, [r3, #0]
 80101c2:	461a      	mov	r2, r3
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80101c8:	4b1a      	ldr	r3, [pc, #104]	; (8010234 <USBD_SetConfig+0x148>)
 80101ca:	781b      	ldrb	r3, [r3, #0]
 80101cc:	4619      	mov	r1, r3
 80101ce:	6878      	ldr	r0, [r7, #4]
 80101d0:	f7ff f946 	bl	800f460 <USBD_SetClassConfig>
 80101d4:	4603      	mov	r3, r0
 80101d6:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 80101d8:	7bfb      	ldrb	r3, [r7, #15]
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d00f      	beq.n	80101fe <USBD_SetConfig+0x112>
        USBD_CtlError(pdev, req);
 80101de:	6839      	ldr	r1, [r7, #0]
 80101e0:	6878      	ldr	r0, [r7, #4]
 80101e2:	f000 f903 	bl	80103ec <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	685b      	ldr	r3, [r3, #4]
 80101ea:	b2db      	uxtb	r3, r3
 80101ec:	4619      	mov	r1, r3
 80101ee:	6878      	ldr	r0, [r7, #4]
 80101f0:	f7ff f952 	bl	800f498 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	2202      	movs	r2, #2
 80101f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80101fc:	e014      	b.n	8010228 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80101fe:	6878      	ldr	r0, [r7, #4]
 8010200:	f000 f9bf 	bl	8010582 <USBD_CtlSendStatus>
    break;
 8010204:	e010      	b.n	8010228 <USBD_SetConfig+0x13c>
      (void)USBD_CtlSendStatus(pdev);
 8010206:	6878      	ldr	r0, [r7, #4]
 8010208:	f000 f9bb 	bl	8010582 <USBD_CtlSendStatus>
    break;
 801020c:	e00c      	b.n	8010228 <USBD_SetConfig+0x13c>

  default:
    USBD_CtlError(pdev, req);
 801020e:	6839      	ldr	r1, [r7, #0]
 8010210:	6878      	ldr	r0, [r7, #4]
 8010212:	f000 f8eb 	bl	80103ec <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010216:	4b07      	ldr	r3, [pc, #28]	; (8010234 <USBD_SetConfig+0x148>)
 8010218:	781b      	ldrb	r3, [r3, #0]
 801021a:	4619      	mov	r1, r3
 801021c:	6878      	ldr	r0, [r7, #4]
 801021e:	f7ff f93b 	bl	800f498 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8010222:	2303      	movs	r3, #3
 8010224:	73fb      	strb	r3, [r7, #15]
    break;
 8010226:	bf00      	nop
  }

  return ret;
 8010228:	7bfb      	ldrb	r3, [r7, #15]
}
 801022a:	4618      	mov	r0, r3
 801022c:	3710      	adds	r7, #16
 801022e:	46bd      	mov	sp, r7
 8010230:	bd80      	pop	{r7, pc}
 8010232:	bf00      	nop
 8010234:	2400075c 	.word	0x2400075c

08010238 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010238:	b580      	push	{r7, lr}
 801023a:	b082      	sub	sp, #8
 801023c:	af00      	add	r7, sp, #0
 801023e:	6078      	str	r0, [r7, #4]
 8010240:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8010242:	683b      	ldr	r3, [r7, #0]
 8010244:	88db      	ldrh	r3, [r3, #6]
 8010246:	2b01      	cmp	r3, #1
 8010248:	d004      	beq.n	8010254 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801024a:	6839      	ldr	r1, [r7, #0]
 801024c:	6878      	ldr	r0, [r7, #4]
 801024e:	f000 f8cd 	bl	80103ec <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8010252:	e023      	b.n	801029c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801025a:	b2db      	uxtb	r3, r3
 801025c:	2b02      	cmp	r3, #2
 801025e:	dc02      	bgt.n	8010266 <USBD_GetConfig+0x2e>
 8010260:	2b00      	cmp	r3, #0
 8010262:	dc03      	bgt.n	801026c <USBD_GetConfig+0x34>
 8010264:	e015      	b.n	8010292 <USBD_GetConfig+0x5a>
 8010266:	2b03      	cmp	r3, #3
 8010268:	d00b      	beq.n	8010282 <USBD_GetConfig+0x4a>
 801026a:	e012      	b.n	8010292 <USBD_GetConfig+0x5a>
      pdev->dev_default_config = 0U;
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	2200      	movs	r2, #0
 8010270:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	3308      	adds	r3, #8
 8010276:	2201      	movs	r2, #1
 8010278:	4619      	mov	r1, r3
 801027a:	6878      	ldr	r0, [r7, #4]
 801027c:	f000 f927 	bl	80104ce <USBD_CtlSendData>
      break;
 8010280:	e00c      	b.n	801029c <USBD_GetConfig+0x64>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	3304      	adds	r3, #4
 8010286:	2201      	movs	r2, #1
 8010288:	4619      	mov	r1, r3
 801028a:	6878      	ldr	r0, [r7, #4]
 801028c:	f000 f91f 	bl	80104ce <USBD_CtlSendData>
      break;
 8010290:	e004      	b.n	801029c <USBD_GetConfig+0x64>
      USBD_CtlError(pdev, req);
 8010292:	6839      	ldr	r1, [r7, #0]
 8010294:	6878      	ldr	r0, [r7, #4]
 8010296:	f000 f8a9 	bl	80103ec <USBD_CtlError>
      break;
 801029a:	bf00      	nop
}
 801029c:	bf00      	nop
 801029e:	3708      	adds	r7, #8
 80102a0:	46bd      	mov	sp, r7
 80102a2:	bd80      	pop	{r7, pc}

080102a4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80102a4:	b580      	push	{r7, lr}
 80102a6:	b082      	sub	sp, #8
 80102a8:	af00      	add	r7, sp, #0
 80102aa:	6078      	str	r0, [r7, #4]
 80102ac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80102b4:	b2db      	uxtb	r3, r3
 80102b6:	3b01      	subs	r3, #1
 80102b8:	2b02      	cmp	r3, #2
 80102ba:	d81e      	bhi.n	80102fa <USBD_GetStatus+0x56>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80102bc:	683b      	ldr	r3, [r7, #0]
 80102be:	88db      	ldrh	r3, [r3, #6]
 80102c0:	2b02      	cmp	r3, #2
 80102c2:	d004      	beq.n	80102ce <USBD_GetStatus+0x2a>
    {
      USBD_CtlError(pdev, req);
 80102c4:	6839      	ldr	r1, [r7, #0]
 80102c6:	6878      	ldr	r0, [r7, #4]
 80102c8:	f000 f890 	bl	80103ec <USBD_CtlError>
      break;
 80102cc:	e01a      	b.n	8010304 <USBD_GetStatus+0x60>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	2201      	movs	r2, #1
 80102d2:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d005      	beq.n	80102ea <USBD_GetStatus+0x46>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	68db      	ldr	r3, [r3, #12]
 80102e2:	f043 0202 	orr.w	r2, r3, #2
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	330c      	adds	r3, #12
 80102ee:	2202      	movs	r2, #2
 80102f0:	4619      	mov	r1, r3
 80102f2:	6878      	ldr	r0, [r7, #4]
 80102f4:	f000 f8eb 	bl	80104ce <USBD_CtlSendData>
    break;
 80102f8:	e004      	b.n	8010304 <USBD_GetStatus+0x60>

  default:
    USBD_CtlError(pdev, req);
 80102fa:	6839      	ldr	r1, [r7, #0]
 80102fc:	6878      	ldr	r0, [r7, #4]
 80102fe:	f000 f875 	bl	80103ec <USBD_CtlError>
    break;
 8010302:	bf00      	nop
  }
}
 8010304:	bf00      	nop
 8010306:	3708      	adds	r7, #8
 8010308:	46bd      	mov	sp, r7
 801030a:	bd80      	pop	{r7, pc}

0801030c <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801030c:	b580      	push	{r7, lr}
 801030e:	b082      	sub	sp, #8
 8010310:	af00      	add	r7, sp, #0
 8010312:	6078      	str	r0, [r7, #4]
 8010314:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010316:	683b      	ldr	r3, [r7, #0]
 8010318:	885b      	ldrh	r3, [r3, #2]
 801031a:	2b01      	cmp	r3, #1
 801031c:	d106      	bne.n	801032c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	2201      	movs	r2, #1
 8010322:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8010326:	6878      	ldr	r0, [r7, #4]
 8010328:	f000 f92b 	bl	8010582 <USBD_CtlSendStatus>
  }
}
 801032c:	bf00      	nop
 801032e:	3708      	adds	r7, #8
 8010330:	46bd      	mov	sp, r7
 8010332:	bd80      	pop	{r7, pc}

08010334 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010334:	b580      	push	{r7, lr}
 8010336:	b082      	sub	sp, #8
 8010338:	af00      	add	r7, sp, #0
 801033a:	6078      	str	r0, [r7, #4]
 801033c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010344:	b2db      	uxtb	r3, r3
 8010346:	3b01      	subs	r3, #1
 8010348:	2b02      	cmp	r3, #2
 801034a:	d80b      	bhi.n	8010364 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801034c:	683b      	ldr	r3, [r7, #0]
 801034e:	885b      	ldrh	r3, [r3, #2]
 8010350:	2b01      	cmp	r3, #1
 8010352:	d10c      	bne.n	801036e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	2200      	movs	r2, #0
 8010358:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801035c:	6878      	ldr	r0, [r7, #4]
 801035e:	f000 f910 	bl	8010582 <USBD_CtlSendStatus>
      }
      break;
 8010362:	e004      	b.n	801036e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8010364:	6839      	ldr	r1, [r7, #0]
 8010366:	6878      	ldr	r0, [r7, #4]
 8010368:	f000 f840 	bl	80103ec <USBD_CtlError>
      break;
 801036c:	e000      	b.n	8010370 <USBD_ClrFeature+0x3c>
      break;
 801036e:	bf00      	nop
  }
}
 8010370:	bf00      	nop
 8010372:	3708      	adds	r7, #8
 8010374:	46bd      	mov	sp, r7
 8010376:	bd80      	pop	{r7, pc}

08010378 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8010378:	b580      	push	{r7, lr}
 801037a:	b084      	sub	sp, #16
 801037c:	af00      	add	r7, sp, #0
 801037e:	6078      	str	r0, [r7, #4]
 8010380:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8010382:	683b      	ldr	r3, [r7, #0]
 8010384:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	781a      	ldrb	r2, [r3, #0]
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	3301      	adds	r3, #1
 8010392:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	781a      	ldrb	r2, [r3, #0]
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801039c:	68fb      	ldr	r3, [r7, #12]
 801039e:	3301      	adds	r3, #1
 80103a0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80103a2:	68f8      	ldr	r0, [r7, #12]
 80103a4:	f7ff fabd 	bl	800f922 <SWAPBYTE>
 80103a8:	4603      	mov	r3, r0
 80103aa:	461a      	mov	r2, r3
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	3301      	adds	r3, #1
 80103b4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	3301      	adds	r3, #1
 80103ba:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80103bc:	68f8      	ldr	r0, [r7, #12]
 80103be:	f7ff fab0 	bl	800f922 <SWAPBYTE>
 80103c2:	4603      	mov	r3, r0
 80103c4:	461a      	mov	r2, r3
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	3301      	adds	r3, #1
 80103ce:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80103d0:	68fb      	ldr	r3, [r7, #12]
 80103d2:	3301      	adds	r3, #1
 80103d4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80103d6:	68f8      	ldr	r0, [r7, #12]
 80103d8:	f7ff faa3 	bl	800f922 <SWAPBYTE>
 80103dc:	4603      	mov	r3, r0
 80103de:	461a      	mov	r2, r3
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	80da      	strh	r2, [r3, #6]
}
 80103e4:	bf00      	nop
 80103e6:	3710      	adds	r7, #16
 80103e8:	46bd      	mov	sp, r7
 80103ea:	bd80      	pop	{r7, pc}

080103ec <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80103ec:	b580      	push	{r7, lr}
 80103ee:	b082      	sub	sp, #8
 80103f0:	af00      	add	r7, sp, #0
 80103f2:	6078      	str	r0, [r7, #4]
 80103f4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80103f6:	2180      	movs	r1, #128	; 0x80
 80103f8:	6878      	ldr	r0, [r7, #4]
 80103fa:	f000 fd4f 	bl	8010e9c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80103fe:	2100      	movs	r1, #0
 8010400:	6878      	ldr	r0, [r7, #4]
 8010402:	f000 fd4b 	bl	8010e9c <USBD_LL_StallEP>
}
 8010406:	bf00      	nop
 8010408:	3708      	adds	r7, #8
 801040a:	46bd      	mov	sp, r7
 801040c:	bd80      	pop	{r7, pc}

0801040e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801040e:	b580      	push	{r7, lr}
 8010410:	b086      	sub	sp, #24
 8010412:	af00      	add	r7, sp, #0
 8010414:	60f8      	str	r0, [r7, #12]
 8010416:	60b9      	str	r1, [r7, #8]
 8010418:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801041a:	2300      	movs	r3, #0
 801041c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	2b00      	cmp	r3, #0
 8010422:	d036      	beq.n	8010492 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8010424:	68fb      	ldr	r3, [r7, #12]
 8010426:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8010428:	6938      	ldr	r0, [r7, #16]
 801042a:	f000 f836 	bl	801049a <USBD_GetLen>
 801042e:	4603      	mov	r3, r0
 8010430:	3301      	adds	r3, #1
 8010432:	b29b      	uxth	r3, r3
 8010434:	005b      	lsls	r3, r3, #1
 8010436:	b29a      	uxth	r2, r3
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801043c:	7dfb      	ldrb	r3, [r7, #23]
 801043e:	68ba      	ldr	r2, [r7, #8]
 8010440:	4413      	add	r3, r2
 8010442:	687a      	ldr	r2, [r7, #4]
 8010444:	7812      	ldrb	r2, [r2, #0]
 8010446:	701a      	strb	r2, [r3, #0]
  idx++;
 8010448:	7dfb      	ldrb	r3, [r7, #23]
 801044a:	3301      	adds	r3, #1
 801044c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801044e:	7dfb      	ldrb	r3, [r7, #23]
 8010450:	68ba      	ldr	r2, [r7, #8]
 8010452:	4413      	add	r3, r2
 8010454:	2203      	movs	r2, #3
 8010456:	701a      	strb	r2, [r3, #0]
  idx++;
 8010458:	7dfb      	ldrb	r3, [r7, #23]
 801045a:	3301      	adds	r3, #1
 801045c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801045e:	e013      	b.n	8010488 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8010460:	7dfb      	ldrb	r3, [r7, #23]
 8010462:	68ba      	ldr	r2, [r7, #8]
 8010464:	4413      	add	r3, r2
 8010466:	693a      	ldr	r2, [r7, #16]
 8010468:	7812      	ldrb	r2, [r2, #0]
 801046a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801046c:	693b      	ldr	r3, [r7, #16]
 801046e:	3301      	adds	r3, #1
 8010470:	613b      	str	r3, [r7, #16]
    idx++;
 8010472:	7dfb      	ldrb	r3, [r7, #23]
 8010474:	3301      	adds	r3, #1
 8010476:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8010478:	7dfb      	ldrb	r3, [r7, #23]
 801047a:	68ba      	ldr	r2, [r7, #8]
 801047c:	4413      	add	r3, r2
 801047e:	2200      	movs	r2, #0
 8010480:	701a      	strb	r2, [r3, #0]
    idx++;
 8010482:	7dfb      	ldrb	r3, [r7, #23]
 8010484:	3301      	adds	r3, #1
 8010486:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8010488:	693b      	ldr	r3, [r7, #16]
 801048a:	781b      	ldrb	r3, [r3, #0]
 801048c:	2b00      	cmp	r3, #0
 801048e:	d1e7      	bne.n	8010460 <USBD_GetString+0x52>
 8010490:	e000      	b.n	8010494 <USBD_GetString+0x86>
    return;
 8010492:	bf00      	nop
  }
}
 8010494:	3718      	adds	r7, #24
 8010496:	46bd      	mov	sp, r7
 8010498:	bd80      	pop	{r7, pc}

0801049a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801049a:	b480      	push	{r7}
 801049c:	b085      	sub	sp, #20
 801049e:	af00      	add	r7, sp, #0
 80104a0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80104a2:	2300      	movs	r3, #0
 80104a4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80104aa:	e005      	b.n	80104b8 <USBD_GetLen+0x1e>
  {
    len++;
 80104ac:	7bfb      	ldrb	r3, [r7, #15]
 80104ae:	3301      	adds	r3, #1
 80104b0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80104b2:	68bb      	ldr	r3, [r7, #8]
 80104b4:	3301      	adds	r3, #1
 80104b6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80104b8:	68bb      	ldr	r3, [r7, #8]
 80104ba:	781b      	ldrb	r3, [r3, #0]
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d1f5      	bne.n	80104ac <USBD_GetLen+0x12>
  }

  return len;
 80104c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80104c2:	4618      	mov	r0, r3
 80104c4:	3714      	adds	r7, #20
 80104c6:	46bd      	mov	sp, r7
 80104c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104cc:	4770      	bx	lr

080104ce <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80104ce:	b580      	push	{r7, lr}
 80104d0:	b084      	sub	sp, #16
 80104d2:	af00      	add	r7, sp, #0
 80104d4:	60f8      	str	r0, [r7, #12]
 80104d6:	60b9      	str	r1, [r7, #8]
 80104d8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	2202      	movs	r2, #2
 80104de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	687a      	ldr	r2, [r7, #4]
 80104e6:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	687a      	ldr	r2, [r7, #4]
 80104ec:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	68ba      	ldr	r2, [r7, #8]
 80104f2:	2100      	movs	r1, #0
 80104f4:	68f8      	ldr	r0, [r7, #12]
 80104f6:	f000 fd5a 	bl	8010fae <USBD_LL_Transmit>

  return USBD_OK;
 80104fa:	2300      	movs	r3, #0
}
 80104fc:	4618      	mov	r0, r3
 80104fe:	3710      	adds	r7, #16
 8010500:	46bd      	mov	sp, r7
 8010502:	bd80      	pop	{r7, pc}

08010504 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8010504:	b580      	push	{r7, lr}
 8010506:	b084      	sub	sp, #16
 8010508:	af00      	add	r7, sp, #0
 801050a:	60f8      	str	r0, [r7, #12]
 801050c:	60b9      	str	r1, [r7, #8]
 801050e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	68ba      	ldr	r2, [r7, #8]
 8010514:	2100      	movs	r1, #0
 8010516:	68f8      	ldr	r0, [r7, #12]
 8010518:	f000 fd49 	bl	8010fae <USBD_LL_Transmit>

  return USBD_OK;
 801051c:	2300      	movs	r3, #0
}
 801051e:	4618      	mov	r0, r3
 8010520:	3710      	adds	r7, #16
 8010522:	46bd      	mov	sp, r7
 8010524:	bd80      	pop	{r7, pc}

08010526 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8010526:	b580      	push	{r7, lr}
 8010528:	b084      	sub	sp, #16
 801052a:	af00      	add	r7, sp, #0
 801052c:	60f8      	str	r0, [r7, #12]
 801052e:	60b9      	str	r1, [r7, #8]
 8010530:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	2203      	movs	r2, #3
 8010536:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801053a:	68fb      	ldr	r3, [r7, #12]
 801053c:	687a      	ldr	r2, [r7, #4]
 801053e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8010542:	68fb      	ldr	r3, [r7, #12]
 8010544:	687a      	ldr	r2, [r7, #4]
 8010546:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	68ba      	ldr	r2, [r7, #8]
 801054e:	2100      	movs	r1, #0
 8010550:	68f8      	ldr	r0, [r7, #12]
 8010552:	f000 fd4d 	bl	8010ff0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010556:	2300      	movs	r3, #0
}
 8010558:	4618      	mov	r0, r3
 801055a:	3710      	adds	r7, #16
 801055c:	46bd      	mov	sp, r7
 801055e:	bd80      	pop	{r7, pc}

08010560 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8010560:	b580      	push	{r7, lr}
 8010562:	b084      	sub	sp, #16
 8010564:	af00      	add	r7, sp, #0
 8010566:	60f8      	str	r0, [r7, #12]
 8010568:	60b9      	str	r1, [r7, #8]
 801056a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	68ba      	ldr	r2, [r7, #8]
 8010570:	2100      	movs	r1, #0
 8010572:	68f8      	ldr	r0, [r7, #12]
 8010574:	f000 fd3c 	bl	8010ff0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010578:	2300      	movs	r3, #0
}
 801057a:	4618      	mov	r0, r3
 801057c:	3710      	adds	r7, #16
 801057e:	46bd      	mov	sp, r7
 8010580:	bd80      	pop	{r7, pc}

08010582 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8010582:	b580      	push	{r7, lr}
 8010584:	b082      	sub	sp, #8
 8010586:	af00      	add	r7, sp, #0
 8010588:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	2204      	movs	r2, #4
 801058e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8010592:	2300      	movs	r3, #0
 8010594:	2200      	movs	r2, #0
 8010596:	2100      	movs	r1, #0
 8010598:	6878      	ldr	r0, [r7, #4]
 801059a:	f000 fd08 	bl	8010fae <USBD_LL_Transmit>

  return USBD_OK;
 801059e:	2300      	movs	r3, #0
}
 80105a0:	4618      	mov	r0, r3
 80105a2:	3708      	adds	r7, #8
 80105a4:	46bd      	mov	sp, r7
 80105a6:	bd80      	pop	{r7, pc}

080105a8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80105a8:	b580      	push	{r7, lr}
 80105aa:	b082      	sub	sp, #8
 80105ac:	af00      	add	r7, sp, #0
 80105ae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	2205      	movs	r2, #5
 80105b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80105b8:	2300      	movs	r3, #0
 80105ba:	2200      	movs	r2, #0
 80105bc:	2100      	movs	r1, #0
 80105be:	6878      	ldr	r0, [r7, #4]
 80105c0:	f000 fd16 	bl	8010ff0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80105c4:	2300      	movs	r3, #0
}
 80105c6:	4618      	mov	r0, r3
 80105c8:	3708      	adds	r7, #8
 80105ca:	46bd      	mov	sp, r7
 80105cc:	bd80      	pop	{r7, pc}
	...

080105d0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80105d0:	b580      	push	{r7, lr}
 80105d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80105d4:	2200      	movs	r2, #0
 80105d6:	4913      	ldr	r1, [pc, #76]	; (8010624 <MX_USB_DEVICE_Init+0x54>)
 80105d8:	4813      	ldr	r0, [pc, #76]	; (8010628 <MX_USB_DEVICE_Init+0x58>)
 80105da:	f7fe fed3 	bl	800f384 <USBD_Init>
 80105de:	4603      	mov	r3, r0
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d001      	beq.n	80105e8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80105e4:	f7f0 fe8a 	bl	80012fc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80105e8:	4910      	ldr	r1, [pc, #64]	; (801062c <MX_USB_DEVICE_Init+0x5c>)
 80105ea:	480f      	ldr	r0, [pc, #60]	; (8010628 <MX_USB_DEVICE_Init+0x58>)
 80105ec:	f7fe ff00 	bl	800f3f0 <USBD_RegisterClass>
 80105f0:	4603      	mov	r3, r0
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d001      	beq.n	80105fa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80105f6:	f7f0 fe81 	bl	80012fc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80105fa:	490d      	ldr	r1, [pc, #52]	; (8010630 <MX_USB_DEVICE_Init+0x60>)
 80105fc:	480a      	ldr	r0, [pc, #40]	; (8010628 <MX_USB_DEVICE_Init+0x58>)
 80105fe:	f7fe fe25 	bl	800f24c <USBD_CDC_RegisterInterface>
 8010602:	4603      	mov	r3, r0
 8010604:	2b00      	cmp	r3, #0
 8010606:	d001      	beq.n	801060c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8010608:	f7f0 fe78 	bl	80012fc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801060c:	4806      	ldr	r0, [pc, #24]	; (8010628 <MX_USB_DEVICE_Init+0x58>)
 801060e:	f7fe ff10 	bl	800f432 <USBD_Start>
 8010612:	4603      	mov	r3, r0
 8010614:	2b00      	cmp	r3, #0
 8010616:	d001      	beq.n	801061c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8010618:	f7f0 fe70 	bl	80012fc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 801061c:	f7f7 f9b0 	bl	8007980 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010620:	bf00      	nop
 8010622:	bd80      	pop	{r7, pc}
 8010624:	24000134 	.word	0x24000134
 8010628:	24000760 	.word	0x24000760
 801062c:	2400001c 	.word	0x2400001c
 8010630:	24000120 	.word	0x24000120

08010634 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8010634:	b580      	push	{r7, lr}
 8010636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010638:	2200      	movs	r2, #0
 801063a:	4905      	ldr	r1, [pc, #20]	; (8010650 <CDC_Init_FS+0x1c>)
 801063c:	4805      	ldr	r0, [pc, #20]	; (8010654 <CDC_Init_FS+0x20>)
 801063e:	f7fe fe1a 	bl	800f276 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8010642:	4905      	ldr	r1, [pc, #20]	; (8010658 <CDC_Init_FS+0x24>)
 8010644:	4803      	ldr	r0, [pc, #12]	; (8010654 <CDC_Init_FS+0x20>)
 8010646:	f7fe fe2f 	bl	800f2a8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801064a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801064c:	4618      	mov	r0, r3
 801064e:	bd80      	pop	{r7, pc}
 8010650:	24001230 	.word	0x24001230
 8010654:	24000760 	.word	0x24000760
 8010658:	24000a30 	.word	0x24000a30

0801065c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801065c:	b480      	push	{r7}
 801065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010660:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8010662:	4618      	mov	r0, r3
 8010664:	46bd      	mov	sp, r7
 8010666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801066a:	4770      	bx	lr

0801066c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801066c:	b480      	push	{r7}
 801066e:	b083      	sub	sp, #12
 8010670:	af00      	add	r7, sp, #0
 8010672:	4603      	mov	r3, r0
 8010674:	6039      	str	r1, [r7, #0]
 8010676:	71fb      	strb	r3, [r7, #7]
 8010678:	4613      	mov	r3, r2
 801067a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801067c:	79fb      	ldrb	r3, [r7, #7]
 801067e:	2b23      	cmp	r3, #35	; 0x23
 8010680:	f200 808c 	bhi.w	801079c <CDC_Control_FS+0x130>
 8010684:	a201      	add	r2, pc, #4	; (adr r2, 801068c <CDC_Control_FS+0x20>)
 8010686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801068a:	bf00      	nop
 801068c:	0801079d 	.word	0x0801079d
 8010690:	0801079d 	.word	0x0801079d
 8010694:	0801079d 	.word	0x0801079d
 8010698:	0801079d 	.word	0x0801079d
 801069c:	0801079d 	.word	0x0801079d
 80106a0:	0801079d 	.word	0x0801079d
 80106a4:	0801079d 	.word	0x0801079d
 80106a8:	0801079d 	.word	0x0801079d
 80106ac:	0801079d 	.word	0x0801079d
 80106b0:	0801079d 	.word	0x0801079d
 80106b4:	0801079d 	.word	0x0801079d
 80106b8:	0801079d 	.word	0x0801079d
 80106bc:	0801079d 	.word	0x0801079d
 80106c0:	0801079d 	.word	0x0801079d
 80106c4:	0801079d 	.word	0x0801079d
 80106c8:	0801079d 	.word	0x0801079d
 80106cc:	0801079d 	.word	0x0801079d
 80106d0:	0801079d 	.word	0x0801079d
 80106d4:	0801079d 	.word	0x0801079d
 80106d8:	0801079d 	.word	0x0801079d
 80106dc:	0801079d 	.word	0x0801079d
 80106e0:	0801079d 	.word	0x0801079d
 80106e4:	0801079d 	.word	0x0801079d
 80106e8:	0801079d 	.word	0x0801079d
 80106ec:	0801079d 	.word	0x0801079d
 80106f0:	0801079d 	.word	0x0801079d
 80106f4:	0801079d 	.word	0x0801079d
 80106f8:	0801079d 	.word	0x0801079d
 80106fc:	0801079d 	.word	0x0801079d
 8010700:	0801079d 	.word	0x0801079d
 8010704:	0801079d 	.word	0x0801079d
 8010708:	0801079d 	.word	0x0801079d
 801070c:	0801071d 	.word	0x0801071d
 8010710:	08010757 	.word	0x08010757
 8010714:	0801079d 	.word	0x0801079d
 8010718:	0801079d 	.word	0x0801079d
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      tempbuf[0]=pbuf[0];
 801071c:	683b      	ldr	r3, [r7, #0]
 801071e:	781a      	ldrb	r2, [r3, #0]
 8010720:	4b22      	ldr	r3, [pc, #136]	; (80107ac <CDC_Control_FS+0x140>)
 8010722:	701a      	strb	r2, [r3, #0]
      tempbuf[1]=pbuf[1];
 8010724:	683b      	ldr	r3, [r7, #0]
 8010726:	785a      	ldrb	r2, [r3, #1]
 8010728:	4b20      	ldr	r3, [pc, #128]	; (80107ac <CDC_Control_FS+0x140>)
 801072a:	705a      	strb	r2, [r3, #1]
      tempbuf[2]=pbuf[2];
 801072c:	683b      	ldr	r3, [r7, #0]
 801072e:	789a      	ldrb	r2, [r3, #2]
 8010730:	4b1e      	ldr	r3, [pc, #120]	; (80107ac <CDC_Control_FS+0x140>)
 8010732:	709a      	strb	r2, [r3, #2]
      tempbuf[3]=pbuf[3];
 8010734:	683b      	ldr	r3, [r7, #0]
 8010736:	78da      	ldrb	r2, [r3, #3]
 8010738:	4b1c      	ldr	r3, [pc, #112]	; (80107ac <CDC_Control_FS+0x140>)
 801073a:	70da      	strb	r2, [r3, #3]
      tempbuf[4]=pbuf[4];
 801073c:	683b      	ldr	r3, [r7, #0]
 801073e:	791a      	ldrb	r2, [r3, #4]
 8010740:	4b1a      	ldr	r3, [pc, #104]	; (80107ac <CDC_Control_FS+0x140>)
 8010742:	711a      	strb	r2, [r3, #4]
      tempbuf[5]=pbuf[5];
 8010744:	683b      	ldr	r3, [r7, #0]
 8010746:	795a      	ldrb	r2, [r3, #5]
 8010748:	4b18      	ldr	r3, [pc, #96]	; (80107ac <CDC_Control_FS+0x140>)
 801074a:	715a      	strb	r2, [r3, #5]
      tempbuf[6]=pbuf[6];
 801074c:	683b      	ldr	r3, [r7, #0]
 801074e:	799a      	ldrb	r2, [r3, #6]
 8010750:	4b16      	ldr	r3, [pc, #88]	; (80107ac <CDC_Control_FS+0x140>)
 8010752:	719a      	strb	r2, [r3, #6]

    break;
 8010754:	e023      	b.n	801079e <CDC_Control_FS+0x132>

    case CDC_GET_LINE_CODING:
      pbuf[0]=tempbuf[0];
 8010756:	4b15      	ldr	r3, [pc, #84]	; (80107ac <CDC_Control_FS+0x140>)
 8010758:	781a      	ldrb	r2, [r3, #0]
 801075a:	683b      	ldr	r3, [r7, #0]
 801075c:	701a      	strb	r2, [r3, #0]
      pbuf[1]=tempbuf[1];
 801075e:	683b      	ldr	r3, [r7, #0]
 8010760:	3301      	adds	r3, #1
 8010762:	4a12      	ldr	r2, [pc, #72]	; (80107ac <CDC_Control_FS+0x140>)
 8010764:	7852      	ldrb	r2, [r2, #1]
 8010766:	701a      	strb	r2, [r3, #0]
      pbuf[2]=tempbuf[2];
 8010768:	683b      	ldr	r3, [r7, #0]
 801076a:	3302      	adds	r3, #2
 801076c:	4a0f      	ldr	r2, [pc, #60]	; (80107ac <CDC_Control_FS+0x140>)
 801076e:	7892      	ldrb	r2, [r2, #2]
 8010770:	701a      	strb	r2, [r3, #0]
      pbuf[3]=tempbuf[3];
 8010772:	683b      	ldr	r3, [r7, #0]
 8010774:	3303      	adds	r3, #3
 8010776:	4a0d      	ldr	r2, [pc, #52]	; (80107ac <CDC_Control_FS+0x140>)
 8010778:	78d2      	ldrb	r2, [r2, #3]
 801077a:	701a      	strb	r2, [r3, #0]
      pbuf[4]=tempbuf[4];
 801077c:	683b      	ldr	r3, [r7, #0]
 801077e:	3304      	adds	r3, #4
 8010780:	4a0a      	ldr	r2, [pc, #40]	; (80107ac <CDC_Control_FS+0x140>)
 8010782:	7912      	ldrb	r2, [r2, #4]
 8010784:	701a      	strb	r2, [r3, #0]
      pbuf[5]=tempbuf[5];
 8010786:	683b      	ldr	r3, [r7, #0]
 8010788:	3305      	adds	r3, #5
 801078a:	4a08      	ldr	r2, [pc, #32]	; (80107ac <CDC_Control_FS+0x140>)
 801078c:	7952      	ldrb	r2, [r2, #5]
 801078e:	701a      	strb	r2, [r3, #0]
      pbuf[6]=tempbuf[6];
 8010790:	683b      	ldr	r3, [r7, #0]
 8010792:	3306      	adds	r3, #6
 8010794:	4a05      	ldr	r2, [pc, #20]	; (80107ac <CDC_Control_FS+0x140>)
 8010796:	7992      	ldrb	r2, [r2, #6]
 8010798:	701a      	strb	r2, [r3, #0]

    break;
 801079a:	e000      	b.n	801079e <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801079c:	bf00      	nop
  }

  return (USBD_OK);
 801079e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80107a0:	4618      	mov	r0, r3
 80107a2:	370c      	adds	r7, #12
 80107a4:	46bd      	mov	sp, r7
 80107a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107aa:	4770      	bx	lr
 80107ac:	24001a30 	.word	0x24001a30

080107b0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80107b0:	b580      	push	{r7, lr}
 80107b2:	b084      	sub	sp, #16
 80107b4:	af00      	add	r7, sp, #0
 80107b6:	6078      	str	r0, [r7, #4]
 80107b8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80107ba:	6879      	ldr	r1, [r7, #4]
 80107bc:	4809      	ldr	r0, [pc, #36]	; (80107e4 <CDC_Receive_FS+0x34>)
 80107be:	f7fe fd73 	bl	800f2a8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80107c2:	4808      	ldr	r0, [pc, #32]	; (80107e4 <CDC_Receive_FS+0x34>)
 80107c4:	f7fe fdb4 	bl	800f330 <USBD_CDC_ReceivePacket>
  uint16_t len = *Len;
 80107c8:	683b      	ldr	r3, [r7, #0]
 80107ca:	681b      	ldr	r3, [r3, #0]
 80107cc:	81fb      	strh	r3, [r7, #14]
  CDC_Transmit_FS(Buf, len);
 80107ce:	89fb      	ldrh	r3, [r7, #14]
 80107d0:	4619      	mov	r1, r3
 80107d2:	6878      	ldr	r0, [r7, #4]
 80107d4:	f000 f808 	bl	80107e8 <CDC_Transmit_FS>
  return (USBD_OK);
 80107d8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80107da:	4618      	mov	r0, r3
 80107dc:	3710      	adds	r7, #16
 80107de:	46bd      	mov	sp, r7
 80107e0:	bd80      	pop	{r7, pc}
 80107e2:	bf00      	nop
 80107e4:	24000760 	.word	0x24000760

080107e8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80107e8:	b580      	push	{r7, lr}
 80107ea:	b084      	sub	sp, #16
 80107ec:	af00      	add	r7, sp, #0
 80107ee:	6078      	str	r0, [r7, #4]
 80107f0:	460b      	mov	r3, r1
 80107f2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80107f4:	2300      	movs	r3, #0
 80107f6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80107f8:	4b0d      	ldr	r3, [pc, #52]	; (8010830 <CDC_Transmit_FS+0x48>)
 80107fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80107fe:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8010800:	68bb      	ldr	r3, [r7, #8]
 8010802:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010806:	2b00      	cmp	r3, #0
 8010808:	d001      	beq.n	801080e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801080a:	2301      	movs	r3, #1
 801080c:	e00b      	b.n	8010826 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801080e:	887b      	ldrh	r3, [r7, #2]
 8010810:	461a      	mov	r2, r3
 8010812:	6879      	ldr	r1, [r7, #4]
 8010814:	4806      	ldr	r0, [pc, #24]	; (8010830 <CDC_Transmit_FS+0x48>)
 8010816:	f7fe fd2e 	bl	800f276 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801081a:	4805      	ldr	r0, [pc, #20]	; (8010830 <CDC_Transmit_FS+0x48>)
 801081c:	f7fe fd58 	bl	800f2d0 <USBD_CDC_TransmitPacket>
 8010820:	4603      	mov	r3, r0
 8010822:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8010824:	7bfb      	ldrb	r3, [r7, #15]
}
 8010826:	4618      	mov	r0, r3
 8010828:	3710      	adds	r7, #16
 801082a:	46bd      	mov	sp, r7
 801082c:	bd80      	pop	{r7, pc}
 801082e:	bf00      	nop
 8010830:	24000760 	.word	0x24000760

08010834 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010834:	b480      	push	{r7}
 8010836:	b087      	sub	sp, #28
 8010838:	af00      	add	r7, sp, #0
 801083a:	60f8      	str	r0, [r7, #12]
 801083c:	60b9      	str	r1, [r7, #8]
 801083e:	4613      	mov	r3, r2
 8010840:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8010842:	2300      	movs	r3, #0
 8010844:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8010846:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801084a:	4618      	mov	r0, r3
 801084c:	371c      	adds	r7, #28
 801084e:	46bd      	mov	sp, r7
 8010850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010854:	4770      	bx	lr
	...

08010858 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010858:	b480      	push	{r7}
 801085a:	b083      	sub	sp, #12
 801085c:	af00      	add	r7, sp, #0
 801085e:	4603      	mov	r3, r0
 8010860:	6039      	str	r1, [r7, #0]
 8010862:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8010864:	683b      	ldr	r3, [r7, #0]
 8010866:	2212      	movs	r2, #18
 8010868:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801086a:	4b03      	ldr	r3, [pc, #12]	; (8010878 <USBD_FS_DeviceDescriptor+0x20>)
}
 801086c:	4618      	mov	r0, r3
 801086e:	370c      	adds	r7, #12
 8010870:	46bd      	mov	sp, r7
 8010872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010876:	4770      	bx	lr
 8010878:	24000150 	.word	0x24000150

0801087c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801087c:	b480      	push	{r7}
 801087e:	b083      	sub	sp, #12
 8010880:	af00      	add	r7, sp, #0
 8010882:	4603      	mov	r3, r0
 8010884:	6039      	str	r1, [r7, #0]
 8010886:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010888:	683b      	ldr	r3, [r7, #0]
 801088a:	2204      	movs	r2, #4
 801088c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801088e:	4b03      	ldr	r3, [pc, #12]	; (801089c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010890:	4618      	mov	r0, r3
 8010892:	370c      	adds	r7, #12
 8010894:	46bd      	mov	sp, r7
 8010896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801089a:	4770      	bx	lr
 801089c:	24000164 	.word	0x24000164

080108a0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80108a0:	b580      	push	{r7, lr}
 80108a2:	b082      	sub	sp, #8
 80108a4:	af00      	add	r7, sp, #0
 80108a6:	4603      	mov	r3, r0
 80108a8:	6039      	str	r1, [r7, #0]
 80108aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80108ac:	79fb      	ldrb	r3, [r7, #7]
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d105      	bne.n	80108be <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80108b2:	683a      	ldr	r2, [r7, #0]
 80108b4:	4907      	ldr	r1, [pc, #28]	; (80108d4 <USBD_FS_ProductStrDescriptor+0x34>)
 80108b6:	4808      	ldr	r0, [pc, #32]	; (80108d8 <USBD_FS_ProductStrDescriptor+0x38>)
 80108b8:	f7ff fda9 	bl	801040e <USBD_GetString>
 80108bc:	e004      	b.n	80108c8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80108be:	683a      	ldr	r2, [r7, #0]
 80108c0:	4904      	ldr	r1, [pc, #16]	; (80108d4 <USBD_FS_ProductStrDescriptor+0x34>)
 80108c2:	4805      	ldr	r0, [pc, #20]	; (80108d8 <USBD_FS_ProductStrDescriptor+0x38>)
 80108c4:	f7ff fda3 	bl	801040e <USBD_GetString>
  }
  return USBD_StrDesc;
 80108c8:	4b02      	ldr	r3, [pc, #8]	; (80108d4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80108ca:	4618      	mov	r0, r3
 80108cc:	3708      	adds	r7, #8
 80108ce:	46bd      	mov	sp, r7
 80108d0:	bd80      	pop	{r7, pc}
 80108d2:	bf00      	nop
 80108d4:	24001a38 	.word	0x24001a38
 80108d8:	08013a18 	.word	0x08013a18

080108dc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80108dc:	b580      	push	{r7, lr}
 80108de:	b082      	sub	sp, #8
 80108e0:	af00      	add	r7, sp, #0
 80108e2:	4603      	mov	r3, r0
 80108e4:	6039      	str	r1, [r7, #0]
 80108e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80108e8:	683a      	ldr	r2, [r7, #0]
 80108ea:	4904      	ldr	r1, [pc, #16]	; (80108fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80108ec:	4804      	ldr	r0, [pc, #16]	; (8010900 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80108ee:	f7ff fd8e 	bl	801040e <USBD_GetString>
  return USBD_StrDesc;
 80108f2:	4b02      	ldr	r3, [pc, #8]	; (80108fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80108f4:	4618      	mov	r0, r3
 80108f6:	3708      	adds	r7, #8
 80108f8:	46bd      	mov	sp, r7
 80108fa:	bd80      	pop	{r7, pc}
 80108fc:	24001a38 	.word	0x24001a38
 8010900:	08013a30 	.word	0x08013a30

08010904 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010904:	b580      	push	{r7, lr}
 8010906:	b082      	sub	sp, #8
 8010908:	af00      	add	r7, sp, #0
 801090a:	4603      	mov	r3, r0
 801090c:	6039      	str	r1, [r7, #0]
 801090e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010910:	683b      	ldr	r3, [r7, #0]
 8010912:	221a      	movs	r2, #26
 8010914:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010916:	f000 f843 	bl	80109a0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801091a:	4b02      	ldr	r3, [pc, #8]	; (8010924 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801091c:	4618      	mov	r0, r3
 801091e:	3708      	adds	r7, #8
 8010920:	46bd      	mov	sp, r7
 8010922:	bd80      	pop	{r7, pc}
 8010924:	24000168 	.word	0x24000168

08010928 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010928:	b580      	push	{r7, lr}
 801092a:	b082      	sub	sp, #8
 801092c:	af00      	add	r7, sp, #0
 801092e:	4603      	mov	r3, r0
 8010930:	6039      	str	r1, [r7, #0]
 8010932:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010934:	79fb      	ldrb	r3, [r7, #7]
 8010936:	2b00      	cmp	r3, #0
 8010938:	d105      	bne.n	8010946 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801093a:	683a      	ldr	r2, [r7, #0]
 801093c:	4907      	ldr	r1, [pc, #28]	; (801095c <USBD_FS_ConfigStrDescriptor+0x34>)
 801093e:	4808      	ldr	r0, [pc, #32]	; (8010960 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010940:	f7ff fd65 	bl	801040e <USBD_GetString>
 8010944:	e004      	b.n	8010950 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010946:	683a      	ldr	r2, [r7, #0]
 8010948:	4904      	ldr	r1, [pc, #16]	; (801095c <USBD_FS_ConfigStrDescriptor+0x34>)
 801094a:	4805      	ldr	r0, [pc, #20]	; (8010960 <USBD_FS_ConfigStrDescriptor+0x38>)
 801094c:	f7ff fd5f 	bl	801040e <USBD_GetString>
  }
  return USBD_StrDesc;
 8010950:	4b02      	ldr	r3, [pc, #8]	; (801095c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8010952:	4618      	mov	r0, r3
 8010954:	3708      	adds	r7, #8
 8010956:	46bd      	mov	sp, r7
 8010958:	bd80      	pop	{r7, pc}
 801095a:	bf00      	nop
 801095c:	24001a38 	.word	0x24001a38
 8010960:	08013a44 	.word	0x08013a44

08010964 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010964:	b580      	push	{r7, lr}
 8010966:	b082      	sub	sp, #8
 8010968:	af00      	add	r7, sp, #0
 801096a:	4603      	mov	r3, r0
 801096c:	6039      	str	r1, [r7, #0]
 801096e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010970:	79fb      	ldrb	r3, [r7, #7]
 8010972:	2b00      	cmp	r3, #0
 8010974:	d105      	bne.n	8010982 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010976:	683a      	ldr	r2, [r7, #0]
 8010978:	4907      	ldr	r1, [pc, #28]	; (8010998 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801097a:	4808      	ldr	r0, [pc, #32]	; (801099c <USBD_FS_InterfaceStrDescriptor+0x38>)
 801097c:	f7ff fd47 	bl	801040e <USBD_GetString>
 8010980:	e004      	b.n	801098c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010982:	683a      	ldr	r2, [r7, #0]
 8010984:	4904      	ldr	r1, [pc, #16]	; (8010998 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010986:	4805      	ldr	r0, [pc, #20]	; (801099c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010988:	f7ff fd41 	bl	801040e <USBD_GetString>
  }
  return USBD_StrDesc;
 801098c:	4b02      	ldr	r3, [pc, #8]	; (8010998 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801098e:	4618      	mov	r0, r3
 8010990:	3708      	adds	r7, #8
 8010992:	46bd      	mov	sp, r7
 8010994:	bd80      	pop	{r7, pc}
 8010996:	bf00      	nop
 8010998:	24001a38 	.word	0x24001a38
 801099c:	08013a50 	.word	0x08013a50

080109a0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80109a0:	b580      	push	{r7, lr}
 80109a2:	b084      	sub	sp, #16
 80109a4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80109a6:	4b0f      	ldr	r3, [pc, #60]	; (80109e4 <Get_SerialNum+0x44>)
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80109ac:	4b0e      	ldr	r3, [pc, #56]	; (80109e8 <Get_SerialNum+0x48>)
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80109b2:	4b0e      	ldr	r3, [pc, #56]	; (80109ec <Get_SerialNum+0x4c>)
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80109b8:	68fa      	ldr	r2, [r7, #12]
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	4413      	add	r3, r2
 80109be:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d009      	beq.n	80109da <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80109c6:	2208      	movs	r2, #8
 80109c8:	4909      	ldr	r1, [pc, #36]	; (80109f0 <Get_SerialNum+0x50>)
 80109ca:	68f8      	ldr	r0, [r7, #12]
 80109cc:	f000 f814 	bl	80109f8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80109d0:	2204      	movs	r2, #4
 80109d2:	4908      	ldr	r1, [pc, #32]	; (80109f4 <Get_SerialNum+0x54>)
 80109d4:	68b8      	ldr	r0, [r7, #8]
 80109d6:	f000 f80f 	bl	80109f8 <IntToUnicode>
  }
}
 80109da:	bf00      	nop
 80109dc:	3710      	adds	r7, #16
 80109de:	46bd      	mov	sp, r7
 80109e0:	bd80      	pop	{r7, pc}
 80109e2:	bf00      	nop
 80109e4:	1ff1e800 	.word	0x1ff1e800
 80109e8:	1ff1e804 	.word	0x1ff1e804
 80109ec:	1ff1e808 	.word	0x1ff1e808
 80109f0:	2400016a 	.word	0x2400016a
 80109f4:	2400017a 	.word	0x2400017a

080109f8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80109f8:	b480      	push	{r7}
 80109fa:	b087      	sub	sp, #28
 80109fc:	af00      	add	r7, sp, #0
 80109fe:	60f8      	str	r0, [r7, #12]
 8010a00:	60b9      	str	r1, [r7, #8]
 8010a02:	4613      	mov	r3, r2
 8010a04:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010a06:	2300      	movs	r3, #0
 8010a08:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010a0a:	2300      	movs	r3, #0
 8010a0c:	75fb      	strb	r3, [r7, #23]
 8010a0e:	e027      	b.n	8010a60 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010a10:	68fb      	ldr	r3, [r7, #12]
 8010a12:	0f1b      	lsrs	r3, r3, #28
 8010a14:	2b09      	cmp	r3, #9
 8010a16:	d80b      	bhi.n	8010a30 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	0f1b      	lsrs	r3, r3, #28
 8010a1c:	b2da      	uxtb	r2, r3
 8010a1e:	7dfb      	ldrb	r3, [r7, #23]
 8010a20:	005b      	lsls	r3, r3, #1
 8010a22:	4619      	mov	r1, r3
 8010a24:	68bb      	ldr	r3, [r7, #8]
 8010a26:	440b      	add	r3, r1
 8010a28:	3230      	adds	r2, #48	; 0x30
 8010a2a:	b2d2      	uxtb	r2, r2
 8010a2c:	701a      	strb	r2, [r3, #0]
 8010a2e:	e00a      	b.n	8010a46 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	0f1b      	lsrs	r3, r3, #28
 8010a34:	b2da      	uxtb	r2, r3
 8010a36:	7dfb      	ldrb	r3, [r7, #23]
 8010a38:	005b      	lsls	r3, r3, #1
 8010a3a:	4619      	mov	r1, r3
 8010a3c:	68bb      	ldr	r3, [r7, #8]
 8010a3e:	440b      	add	r3, r1
 8010a40:	3237      	adds	r2, #55	; 0x37
 8010a42:	b2d2      	uxtb	r2, r2
 8010a44:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	011b      	lsls	r3, r3, #4
 8010a4a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010a4c:	7dfb      	ldrb	r3, [r7, #23]
 8010a4e:	005b      	lsls	r3, r3, #1
 8010a50:	3301      	adds	r3, #1
 8010a52:	68ba      	ldr	r2, [r7, #8]
 8010a54:	4413      	add	r3, r2
 8010a56:	2200      	movs	r2, #0
 8010a58:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010a5a:	7dfb      	ldrb	r3, [r7, #23]
 8010a5c:	3301      	adds	r3, #1
 8010a5e:	75fb      	strb	r3, [r7, #23]
 8010a60:	7dfa      	ldrb	r2, [r7, #23]
 8010a62:	79fb      	ldrb	r3, [r7, #7]
 8010a64:	429a      	cmp	r2, r3
 8010a66:	d3d3      	bcc.n	8010a10 <IntToUnicode+0x18>
  }
}
 8010a68:	bf00      	nop
 8010a6a:	bf00      	nop
 8010a6c:	371c      	adds	r7, #28
 8010a6e:	46bd      	mov	sp, r7
 8010a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a74:	4770      	bx	lr
	...

08010a78 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010a78:	b580      	push	{r7, lr}
 8010a7a:	b0b8      	sub	sp, #224	; 0xe0
 8010a7c:	af00      	add	r7, sp, #0
 8010a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010a80:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8010a84:	2200      	movs	r2, #0
 8010a86:	601a      	str	r2, [r3, #0]
 8010a88:	605a      	str	r2, [r3, #4]
 8010a8a:	609a      	str	r2, [r3, #8]
 8010a8c:	60da      	str	r2, [r3, #12]
 8010a8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8010a90:	f107 0310 	add.w	r3, r7, #16
 8010a94:	22bc      	movs	r2, #188	; 0xbc
 8010a96:	2100      	movs	r1, #0
 8010a98:	4618      	mov	r0, r3
 8010a9a:	f000 fb51 	bl	8011140 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	4a2a      	ldr	r2, [pc, #168]	; (8010b4c <HAL_PCD_MspInit+0xd4>)
 8010aa4:	4293      	cmp	r3, r2
 8010aa6:	d14c      	bne.n	8010b42 <HAL_PCD_MspInit+0xca>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

     /* USER CODE END SPI1_MspInit 0 */
     /** Initializes the peripherals clock
     */
       PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8010aa8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010aac:	613b      	str	r3, [r7, #16]
      PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8010aae:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8010ab2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
          if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8010ab6:	f107 0310 	add.w	r3, r7, #16
 8010aba:	4618      	mov	r0, r3
 8010abc:	f7f7 ff4c 	bl	8008958 <HAL_RCCEx_PeriphCLKConfig>
 8010ac0:	4603      	mov	r3, r0
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d001      	beq.n	8010aca <HAL_PCD_MspInit+0x52>
          {
            Error_Handler();
 8010ac6:	f7f0 fc19 	bl	80012fc <Error_Handler>
          }
  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010aca:	4b21      	ldr	r3, [pc, #132]	; (8010b50 <HAL_PCD_MspInit+0xd8>)
 8010acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010ad0:	4a1f      	ldr	r2, [pc, #124]	; (8010b50 <HAL_PCD_MspInit+0xd8>)
 8010ad2:	f043 0301 	orr.w	r3, r3, #1
 8010ad6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8010ada:	4b1d      	ldr	r3, [pc, #116]	; (8010b50 <HAL_PCD_MspInit+0xd8>)
 8010adc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010ae0:	f003 0301 	and.w	r3, r3, #1
 8010ae4:	60fb      	str	r3, [r7, #12]
 8010ae6:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8010ae8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8010aec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010af0:	2302      	movs	r3, #2
 8010af2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010af6:	2300      	movs	r3, #0
 8010af8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010afc:	2300      	movs	r3, #0
 8010afe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8010b02:	230a      	movs	r3, #10
 8010b04:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010b08:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8010b0c:	4619      	mov	r1, r3
 8010b0e:	4811      	ldr	r0, [pc, #68]	; (8010b54 <HAL_PCD_MspInit+0xdc>)
 8010b10:	f7f4 fb5c 	bl	80051cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010b14:	4b0e      	ldr	r3, [pc, #56]	; (8010b50 <HAL_PCD_MspInit+0xd8>)
 8010b16:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8010b1a:	4a0d      	ldr	r2, [pc, #52]	; (8010b50 <HAL_PCD_MspInit+0xd8>)
 8010b1c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8010b20:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8010b24:	4b0a      	ldr	r3, [pc, #40]	; (8010b50 <HAL_PCD_MspInit+0xd8>)
 8010b26:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8010b2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010b2e:	60bb      	str	r3, [r7, #8]
 8010b30:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8010b32:	2200      	movs	r2, #0
 8010b34:	2100      	movs	r1, #0
 8010b36:	2065      	movs	r0, #101	; 0x65
 8010b38:	f7f1 fc33 	bl	80023a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010b3c:	2065      	movs	r0, #101	; 0x65
 8010b3e:	f7f1 fc4a 	bl	80023d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010b42:	bf00      	nop
 8010b44:	37e0      	adds	r7, #224	; 0xe0
 8010b46:	46bd      	mov	sp, r7
 8010b48:	bd80      	pop	{r7, pc}
 8010b4a:	bf00      	nop
 8010b4c:	40080000 	.word	0x40080000
 8010b50:	58024400 	.word	0x58024400
 8010b54:	58020000 	.word	0x58020000

08010b58 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010b58:	b580      	push	{r7, lr}
 8010b5a:	b082      	sub	sp, #8
 8010b5c:	af00      	add	r7, sp, #0
 8010b5e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8010b6c:	4619      	mov	r1, r3
 8010b6e:	4610      	mov	r0, r2
 8010b70:	f7fe fcaa 	bl	800f4c8 <USBD_LL_SetupStage>
}
 8010b74:	bf00      	nop
 8010b76:	3708      	adds	r7, #8
 8010b78:	46bd      	mov	sp, r7
 8010b7a:	bd80      	pop	{r7, pc}

08010b7c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010b7c:	b580      	push	{r7, lr}
 8010b7e:	b082      	sub	sp, #8
 8010b80:	af00      	add	r7, sp, #0
 8010b82:	6078      	str	r0, [r7, #4]
 8010b84:	460b      	mov	r3, r1
 8010b86:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8010b8e:	78fa      	ldrb	r2, [r7, #3]
 8010b90:	6879      	ldr	r1, [r7, #4]
 8010b92:	4613      	mov	r3, r2
 8010b94:	00db      	lsls	r3, r3, #3
 8010b96:	1a9b      	subs	r3, r3, r2
 8010b98:	009b      	lsls	r3, r3, #2
 8010b9a:	440b      	add	r3, r1
 8010b9c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8010ba0:	681a      	ldr	r2, [r3, #0]
 8010ba2:	78fb      	ldrb	r3, [r7, #3]
 8010ba4:	4619      	mov	r1, r3
 8010ba6:	f7fe fce4 	bl	800f572 <USBD_LL_DataOutStage>
}
 8010baa:	bf00      	nop
 8010bac:	3708      	adds	r7, #8
 8010bae:	46bd      	mov	sp, r7
 8010bb0:	bd80      	pop	{r7, pc}

08010bb2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010bb2:	b580      	push	{r7, lr}
 8010bb4:	b082      	sub	sp, #8
 8010bb6:	af00      	add	r7, sp, #0
 8010bb8:	6078      	str	r0, [r7, #4]
 8010bba:	460b      	mov	r3, r1
 8010bbc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8010bc4:	78fa      	ldrb	r2, [r7, #3]
 8010bc6:	6879      	ldr	r1, [r7, #4]
 8010bc8:	4613      	mov	r3, r2
 8010bca:	00db      	lsls	r3, r3, #3
 8010bcc:	1a9b      	subs	r3, r3, r2
 8010bce:	009b      	lsls	r3, r3, #2
 8010bd0:	440b      	add	r3, r1
 8010bd2:	3348      	adds	r3, #72	; 0x48
 8010bd4:	681a      	ldr	r2, [r3, #0]
 8010bd6:	78fb      	ldrb	r3, [r7, #3]
 8010bd8:	4619      	mov	r1, r3
 8010bda:	f7fe fd2f 	bl	800f63c <USBD_LL_DataInStage>
}
 8010bde:	bf00      	nop
 8010be0:	3708      	adds	r7, #8
 8010be2:	46bd      	mov	sp, r7
 8010be4:	bd80      	pop	{r7, pc}

08010be6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010be6:	b580      	push	{r7, lr}
 8010be8:	b082      	sub	sp, #8
 8010bea:	af00      	add	r7, sp, #0
 8010bec:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010bf4:	4618      	mov	r0, r3
 8010bf6:	f7fe fe38 	bl	800f86a <USBD_LL_SOF>
}
 8010bfa:	bf00      	nop
 8010bfc:	3708      	adds	r7, #8
 8010bfe:	46bd      	mov	sp, r7
 8010c00:	bd80      	pop	{r7, pc}

08010c02 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010c02:	b580      	push	{r7, lr}
 8010c04:	b084      	sub	sp, #16
 8010c06:	af00      	add	r7, sp, #0
 8010c08:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010c0a:	2301      	movs	r3, #1
 8010c0c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	68db      	ldr	r3, [r3, #12]
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d102      	bne.n	8010c1c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8010c16:	2300      	movs	r3, #0
 8010c18:	73fb      	strb	r3, [r7, #15]
 8010c1a:	e008      	b.n	8010c2e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	68db      	ldr	r3, [r3, #12]
 8010c20:	2b02      	cmp	r3, #2
 8010c22:	d102      	bne.n	8010c2a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8010c24:	2301      	movs	r3, #1
 8010c26:	73fb      	strb	r3, [r7, #15]
 8010c28:	e001      	b.n	8010c2e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8010c2a:	f7f0 fb67 	bl	80012fc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010c34:	7bfa      	ldrb	r2, [r7, #15]
 8010c36:	4611      	mov	r1, r2
 8010c38:	4618      	mov	r0, r3
 8010c3a:	f7fe fdd8 	bl	800f7ee <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010c44:	4618      	mov	r0, r3
 8010c46:	f7fe fd91 	bl	800f76c <USBD_LL_Reset>
}
 8010c4a:	bf00      	nop
 8010c4c:	3710      	adds	r7, #16
 8010c4e:	46bd      	mov	sp, r7
 8010c50:	bd80      	pop	{r7, pc}
	...

08010c54 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010c54:	b580      	push	{r7, lr}
 8010c56:	b082      	sub	sp, #8
 8010c58:	af00      	add	r7, sp, #0
 8010c5a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010c62:	4618      	mov	r0, r3
 8010c64:	f7fe fdd3 	bl	800f80e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	681b      	ldr	r3, [r3, #0]
 8010c6c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010c70:	681b      	ldr	r3, [r3, #0]
 8010c72:	687a      	ldr	r2, [r7, #4]
 8010c74:	6812      	ldr	r2, [r2, #0]
 8010c76:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010c7a:	f043 0301 	orr.w	r3, r3, #1
 8010c7e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	6a1b      	ldr	r3, [r3, #32]
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d005      	beq.n	8010c94 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010c88:	4b04      	ldr	r3, [pc, #16]	; (8010c9c <HAL_PCD_SuspendCallback+0x48>)
 8010c8a:	691b      	ldr	r3, [r3, #16]
 8010c8c:	4a03      	ldr	r2, [pc, #12]	; (8010c9c <HAL_PCD_SuspendCallback+0x48>)
 8010c8e:	f043 0306 	orr.w	r3, r3, #6
 8010c92:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010c94:	bf00      	nop
 8010c96:	3708      	adds	r7, #8
 8010c98:	46bd      	mov	sp, r7
 8010c9a:	bd80      	pop	{r7, pc}
 8010c9c:	e000ed00 	.word	0xe000ed00

08010ca0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010ca0:	b580      	push	{r7, lr}
 8010ca2:	b082      	sub	sp, #8
 8010ca4:	af00      	add	r7, sp, #0
 8010ca6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010cae:	4618      	mov	r0, r3
 8010cb0:	f7fe fdc3 	bl	800f83a <USBD_LL_Resume>
}
 8010cb4:	bf00      	nop
 8010cb6:	3708      	adds	r7, #8
 8010cb8:	46bd      	mov	sp, r7
 8010cba:	bd80      	pop	{r7, pc}

08010cbc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010cbc:	b580      	push	{r7, lr}
 8010cbe:	b082      	sub	sp, #8
 8010cc0:	af00      	add	r7, sp, #0
 8010cc2:	6078      	str	r0, [r7, #4]
 8010cc4:	460b      	mov	r3, r1
 8010cc6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010cce:	78fa      	ldrb	r2, [r7, #3]
 8010cd0:	4611      	mov	r1, r2
 8010cd2:	4618      	mov	r0, r3
 8010cd4:	f7fe fdf1 	bl	800f8ba <USBD_LL_IsoOUTIncomplete>
}
 8010cd8:	bf00      	nop
 8010cda:	3708      	adds	r7, #8
 8010cdc:	46bd      	mov	sp, r7
 8010cde:	bd80      	pop	{r7, pc}

08010ce0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010ce0:	b580      	push	{r7, lr}
 8010ce2:	b082      	sub	sp, #8
 8010ce4:	af00      	add	r7, sp, #0
 8010ce6:	6078      	str	r0, [r7, #4]
 8010ce8:	460b      	mov	r3, r1
 8010cea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010cf2:	78fa      	ldrb	r2, [r7, #3]
 8010cf4:	4611      	mov	r1, r2
 8010cf6:	4618      	mov	r0, r3
 8010cf8:	f7fe fdd2 	bl	800f8a0 <USBD_LL_IsoINIncomplete>
}
 8010cfc:	bf00      	nop
 8010cfe:	3708      	adds	r7, #8
 8010d00:	46bd      	mov	sp, r7
 8010d02:	bd80      	pop	{r7, pc}

08010d04 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010d04:	b580      	push	{r7, lr}
 8010d06:	b082      	sub	sp, #8
 8010d08:	af00      	add	r7, sp, #0
 8010d0a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010d12:	4618      	mov	r0, r3
 8010d14:	f7fe fdde 	bl	800f8d4 <USBD_LL_DevConnected>
}
 8010d18:	bf00      	nop
 8010d1a:	3708      	adds	r7, #8
 8010d1c:	46bd      	mov	sp, r7
 8010d1e:	bd80      	pop	{r7, pc}

08010d20 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010d20:	b580      	push	{r7, lr}
 8010d22:	b082      	sub	sp, #8
 8010d24:	af00      	add	r7, sp, #0
 8010d26:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010d2e:	4618      	mov	r0, r3
 8010d30:	f7fe fddb 	bl	800f8ea <USBD_LL_DevDisconnected>
}
 8010d34:	bf00      	nop
 8010d36:	3708      	adds	r7, #8
 8010d38:	46bd      	mov	sp, r7
 8010d3a:	bd80      	pop	{r7, pc}

08010d3c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010d3c:	b580      	push	{r7, lr}
 8010d3e:	b082      	sub	sp, #8
 8010d40:	af00      	add	r7, sp, #0
 8010d42:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	781b      	ldrb	r3, [r3, #0]
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d13e      	bne.n	8010dca <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8010d4c:	4a21      	ldr	r2, [pc, #132]	; (8010dd4 <USBD_LL_Init+0x98>)
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	4a1f      	ldr	r2, [pc, #124]	; (8010dd4 <USBD_LL_Init+0x98>)
 8010d58:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010d5c:	4b1d      	ldr	r3, [pc, #116]	; (8010dd4 <USBD_LL_Init+0x98>)
 8010d5e:	4a1e      	ldr	r2, [pc, #120]	; (8010dd8 <USBD_LL_Init+0x9c>)
 8010d60:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8010d62:	4b1c      	ldr	r3, [pc, #112]	; (8010dd4 <USBD_LL_Init+0x98>)
 8010d64:	2209      	movs	r2, #9
 8010d66:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8010d68:	4b1a      	ldr	r3, [pc, #104]	; (8010dd4 <USBD_LL_Init+0x98>)
 8010d6a:	2202      	movs	r2, #2
 8010d6c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010d6e:	4b19      	ldr	r3, [pc, #100]	; (8010dd4 <USBD_LL_Init+0x98>)
 8010d70:	2200      	movs	r2, #0
 8010d72:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010d74:	4b17      	ldr	r3, [pc, #92]	; (8010dd4 <USBD_LL_Init+0x98>)
 8010d76:	2202      	movs	r2, #2
 8010d78:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010d7a:	4b16      	ldr	r3, [pc, #88]	; (8010dd4 <USBD_LL_Init+0x98>)
 8010d7c:	2200      	movs	r2, #0
 8010d7e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8010d80:	4b14      	ldr	r3, [pc, #80]	; (8010dd4 <USBD_LL_Init+0x98>)
 8010d82:	2200      	movs	r2, #0
 8010d84:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8010d86:	4b13      	ldr	r3, [pc, #76]	; (8010dd4 <USBD_LL_Init+0x98>)
 8010d88:	2200      	movs	r2, #0
 8010d8a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8010d8c:	4b11      	ldr	r3, [pc, #68]	; (8010dd4 <USBD_LL_Init+0x98>)
 8010d8e:	2200      	movs	r2, #0
 8010d90:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8010d92:	4b10      	ldr	r3, [pc, #64]	; (8010dd4 <USBD_LL_Init+0x98>)
 8010d94:	2200      	movs	r2, #0
 8010d96:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8010d98:	4b0e      	ldr	r3, [pc, #56]	; (8010dd4 <USBD_LL_Init+0x98>)
 8010d9a:	2200      	movs	r2, #0
 8010d9c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8010d9e:	480d      	ldr	r0, [pc, #52]	; (8010dd4 <USBD_LL_Init+0x98>)
 8010da0:	f7f5 fbb8 	bl	8006514 <HAL_PCD_Init>
 8010da4:	4603      	mov	r3, r0
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d001      	beq.n	8010dae <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8010daa:	f7f0 faa7 	bl	80012fc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8010dae:	2180      	movs	r1, #128	; 0x80
 8010db0:	4808      	ldr	r0, [pc, #32]	; (8010dd4 <USBD_LL_Init+0x98>)
 8010db2:	f7f6 fd4a 	bl	800784a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8010db6:	2240      	movs	r2, #64	; 0x40
 8010db8:	2100      	movs	r1, #0
 8010dba:	4806      	ldr	r0, [pc, #24]	; (8010dd4 <USBD_LL_Init+0x98>)
 8010dbc:	f7f6 fcfe 	bl	80077bc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8010dc0:	2280      	movs	r2, #128	; 0x80
 8010dc2:	2101      	movs	r1, #1
 8010dc4:	4803      	ldr	r0, [pc, #12]	; (8010dd4 <USBD_LL_Init+0x98>)
 8010dc6:	f7f6 fcf9 	bl	80077bc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8010dca:	2300      	movs	r3, #0
}
 8010dcc:	4618      	mov	r0, r3
 8010dce:	3708      	adds	r7, #8
 8010dd0:	46bd      	mov	sp, r7
 8010dd2:	bd80      	pop	{r7, pc}
 8010dd4:	24001c38 	.word	0x24001c38
 8010dd8:	40080000 	.word	0x40080000

08010ddc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010ddc:	b580      	push	{r7, lr}
 8010dde:	b084      	sub	sp, #16
 8010de0:	af00      	add	r7, sp, #0
 8010de2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010de4:	2300      	movs	r3, #0
 8010de6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010de8:	2300      	movs	r3, #0
 8010dea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010df2:	4618      	mov	r0, r3
 8010df4:	f7f5 fcb2 	bl	800675c <HAL_PCD_Start>
 8010df8:	4603      	mov	r3, r0
 8010dfa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010dfc:	7bfb      	ldrb	r3, [r7, #15]
 8010dfe:	4618      	mov	r0, r3
 8010e00:	f000 f92a 	bl	8011058 <USBD_Get_USB_Status>
 8010e04:	4603      	mov	r3, r0
 8010e06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010e08:	7bbb      	ldrb	r3, [r7, #14]
}
 8010e0a:	4618      	mov	r0, r3
 8010e0c:	3710      	adds	r7, #16
 8010e0e:	46bd      	mov	sp, r7
 8010e10:	bd80      	pop	{r7, pc}

08010e12 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010e12:	b580      	push	{r7, lr}
 8010e14:	b084      	sub	sp, #16
 8010e16:	af00      	add	r7, sp, #0
 8010e18:	6078      	str	r0, [r7, #4]
 8010e1a:	4608      	mov	r0, r1
 8010e1c:	4611      	mov	r1, r2
 8010e1e:	461a      	mov	r2, r3
 8010e20:	4603      	mov	r3, r0
 8010e22:	70fb      	strb	r3, [r7, #3]
 8010e24:	460b      	mov	r3, r1
 8010e26:	70bb      	strb	r3, [r7, #2]
 8010e28:	4613      	mov	r3, r2
 8010e2a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010e2c:	2300      	movs	r3, #0
 8010e2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010e30:	2300      	movs	r3, #0
 8010e32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010e3a:	78bb      	ldrb	r3, [r7, #2]
 8010e3c:	883a      	ldrh	r2, [r7, #0]
 8010e3e:	78f9      	ldrb	r1, [r7, #3]
 8010e40:	f7f6 f8c3 	bl	8006fca <HAL_PCD_EP_Open>
 8010e44:	4603      	mov	r3, r0
 8010e46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010e48:	7bfb      	ldrb	r3, [r7, #15]
 8010e4a:	4618      	mov	r0, r3
 8010e4c:	f000 f904 	bl	8011058 <USBD_Get_USB_Status>
 8010e50:	4603      	mov	r3, r0
 8010e52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010e54:	7bbb      	ldrb	r3, [r7, #14]
}
 8010e56:	4618      	mov	r0, r3
 8010e58:	3710      	adds	r7, #16
 8010e5a:	46bd      	mov	sp, r7
 8010e5c:	bd80      	pop	{r7, pc}

08010e5e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010e5e:	b580      	push	{r7, lr}
 8010e60:	b084      	sub	sp, #16
 8010e62:	af00      	add	r7, sp, #0
 8010e64:	6078      	str	r0, [r7, #4]
 8010e66:	460b      	mov	r3, r1
 8010e68:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010e6a:	2300      	movs	r3, #0
 8010e6c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010e6e:	2300      	movs	r3, #0
 8010e70:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010e78:	78fa      	ldrb	r2, [r7, #3]
 8010e7a:	4611      	mov	r1, r2
 8010e7c:	4618      	mov	r0, r3
 8010e7e:	f7f6 f90c 	bl	800709a <HAL_PCD_EP_Close>
 8010e82:	4603      	mov	r3, r0
 8010e84:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010e86:	7bfb      	ldrb	r3, [r7, #15]
 8010e88:	4618      	mov	r0, r3
 8010e8a:	f000 f8e5 	bl	8011058 <USBD_Get_USB_Status>
 8010e8e:	4603      	mov	r3, r0
 8010e90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010e92:	7bbb      	ldrb	r3, [r7, #14]
}
 8010e94:	4618      	mov	r0, r3
 8010e96:	3710      	adds	r7, #16
 8010e98:	46bd      	mov	sp, r7
 8010e9a:	bd80      	pop	{r7, pc}

08010e9c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010e9c:	b580      	push	{r7, lr}
 8010e9e:	b084      	sub	sp, #16
 8010ea0:	af00      	add	r7, sp, #0
 8010ea2:	6078      	str	r0, [r7, #4]
 8010ea4:	460b      	mov	r3, r1
 8010ea6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010ea8:	2300      	movs	r3, #0
 8010eaa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010eac:	2300      	movs	r3, #0
 8010eae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010eb6:	78fa      	ldrb	r2, [r7, #3]
 8010eb8:	4611      	mov	r1, r2
 8010eba:	4618      	mov	r0, r3
 8010ebc:	f7f6 f9e4 	bl	8007288 <HAL_PCD_EP_SetStall>
 8010ec0:	4603      	mov	r3, r0
 8010ec2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010ec4:	7bfb      	ldrb	r3, [r7, #15]
 8010ec6:	4618      	mov	r0, r3
 8010ec8:	f000 f8c6 	bl	8011058 <USBD_Get_USB_Status>
 8010ecc:	4603      	mov	r3, r0
 8010ece:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010ed0:	7bbb      	ldrb	r3, [r7, #14]
}
 8010ed2:	4618      	mov	r0, r3
 8010ed4:	3710      	adds	r7, #16
 8010ed6:	46bd      	mov	sp, r7
 8010ed8:	bd80      	pop	{r7, pc}

08010eda <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010eda:	b580      	push	{r7, lr}
 8010edc:	b084      	sub	sp, #16
 8010ede:	af00      	add	r7, sp, #0
 8010ee0:	6078      	str	r0, [r7, #4]
 8010ee2:	460b      	mov	r3, r1
 8010ee4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010ee6:	2300      	movs	r3, #0
 8010ee8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010eea:	2300      	movs	r3, #0
 8010eec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010ef4:	78fa      	ldrb	r2, [r7, #3]
 8010ef6:	4611      	mov	r1, r2
 8010ef8:	4618      	mov	r0, r3
 8010efa:	f7f6 fa29 	bl	8007350 <HAL_PCD_EP_ClrStall>
 8010efe:	4603      	mov	r3, r0
 8010f00:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010f02:	7bfb      	ldrb	r3, [r7, #15]
 8010f04:	4618      	mov	r0, r3
 8010f06:	f000 f8a7 	bl	8011058 <USBD_Get_USB_Status>
 8010f0a:	4603      	mov	r3, r0
 8010f0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010f0e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010f10:	4618      	mov	r0, r3
 8010f12:	3710      	adds	r7, #16
 8010f14:	46bd      	mov	sp, r7
 8010f16:	bd80      	pop	{r7, pc}

08010f18 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010f18:	b480      	push	{r7}
 8010f1a:	b085      	sub	sp, #20
 8010f1c:	af00      	add	r7, sp, #0
 8010f1e:	6078      	str	r0, [r7, #4]
 8010f20:	460b      	mov	r3, r1
 8010f22:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010f2a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010f2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	da0b      	bge.n	8010f4c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010f34:	78fb      	ldrb	r3, [r7, #3]
 8010f36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010f3a:	68f9      	ldr	r1, [r7, #12]
 8010f3c:	4613      	mov	r3, r2
 8010f3e:	00db      	lsls	r3, r3, #3
 8010f40:	1a9b      	subs	r3, r3, r2
 8010f42:	009b      	lsls	r3, r3, #2
 8010f44:	440b      	add	r3, r1
 8010f46:	333e      	adds	r3, #62	; 0x3e
 8010f48:	781b      	ldrb	r3, [r3, #0]
 8010f4a:	e00b      	b.n	8010f64 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010f4c:	78fb      	ldrb	r3, [r7, #3]
 8010f4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010f52:	68f9      	ldr	r1, [r7, #12]
 8010f54:	4613      	mov	r3, r2
 8010f56:	00db      	lsls	r3, r3, #3
 8010f58:	1a9b      	subs	r3, r3, r2
 8010f5a:	009b      	lsls	r3, r3, #2
 8010f5c:	440b      	add	r3, r1
 8010f5e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010f62:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010f64:	4618      	mov	r0, r3
 8010f66:	3714      	adds	r7, #20
 8010f68:	46bd      	mov	sp, r7
 8010f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f6e:	4770      	bx	lr

08010f70 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010f70:	b580      	push	{r7, lr}
 8010f72:	b084      	sub	sp, #16
 8010f74:	af00      	add	r7, sp, #0
 8010f76:	6078      	str	r0, [r7, #4]
 8010f78:	460b      	mov	r3, r1
 8010f7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010f7c:	2300      	movs	r3, #0
 8010f7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010f80:	2300      	movs	r3, #0
 8010f82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010f8a:	78fa      	ldrb	r2, [r7, #3]
 8010f8c:	4611      	mov	r1, r2
 8010f8e:	4618      	mov	r0, r3
 8010f90:	f7f5 fff6 	bl	8006f80 <HAL_PCD_SetAddress>
 8010f94:	4603      	mov	r3, r0
 8010f96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010f98:	7bfb      	ldrb	r3, [r7, #15]
 8010f9a:	4618      	mov	r0, r3
 8010f9c:	f000 f85c 	bl	8011058 <USBD_Get_USB_Status>
 8010fa0:	4603      	mov	r3, r0
 8010fa2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010fa4:	7bbb      	ldrb	r3, [r7, #14]
}
 8010fa6:	4618      	mov	r0, r3
 8010fa8:	3710      	adds	r7, #16
 8010faa:	46bd      	mov	sp, r7
 8010fac:	bd80      	pop	{r7, pc}

08010fae <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010fae:	b580      	push	{r7, lr}
 8010fb0:	b086      	sub	sp, #24
 8010fb2:	af00      	add	r7, sp, #0
 8010fb4:	60f8      	str	r0, [r7, #12]
 8010fb6:	607a      	str	r2, [r7, #4]
 8010fb8:	603b      	str	r3, [r7, #0]
 8010fba:	460b      	mov	r3, r1
 8010fbc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010fbe:	2300      	movs	r3, #0
 8010fc0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010fc2:	2300      	movs	r3, #0
 8010fc4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010fc6:	68fb      	ldr	r3, [r7, #12]
 8010fc8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010fcc:	7af9      	ldrb	r1, [r7, #11]
 8010fce:	683b      	ldr	r3, [r7, #0]
 8010fd0:	687a      	ldr	r2, [r7, #4]
 8010fd2:	f7f6 f90f 	bl	80071f4 <HAL_PCD_EP_Transmit>
 8010fd6:	4603      	mov	r3, r0
 8010fd8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010fda:	7dfb      	ldrb	r3, [r7, #23]
 8010fdc:	4618      	mov	r0, r3
 8010fde:	f000 f83b 	bl	8011058 <USBD_Get_USB_Status>
 8010fe2:	4603      	mov	r3, r0
 8010fe4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010fe6:	7dbb      	ldrb	r3, [r7, #22]
}
 8010fe8:	4618      	mov	r0, r3
 8010fea:	3718      	adds	r7, #24
 8010fec:	46bd      	mov	sp, r7
 8010fee:	bd80      	pop	{r7, pc}

08010ff0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010ff0:	b580      	push	{r7, lr}
 8010ff2:	b086      	sub	sp, #24
 8010ff4:	af00      	add	r7, sp, #0
 8010ff6:	60f8      	str	r0, [r7, #12]
 8010ff8:	607a      	str	r2, [r7, #4]
 8010ffa:	603b      	str	r3, [r7, #0]
 8010ffc:	460b      	mov	r3, r1
 8010ffe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011000:	2300      	movs	r3, #0
 8011002:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011004:	2300      	movs	r3, #0
 8011006:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801100e:	7af9      	ldrb	r1, [r7, #11]
 8011010:	683b      	ldr	r3, [r7, #0]
 8011012:	687a      	ldr	r2, [r7, #4]
 8011014:	f7f6 f88b 	bl	800712e <HAL_PCD_EP_Receive>
 8011018:	4603      	mov	r3, r0
 801101a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801101c:	7dfb      	ldrb	r3, [r7, #23]
 801101e:	4618      	mov	r0, r3
 8011020:	f000 f81a 	bl	8011058 <USBD_Get_USB_Status>
 8011024:	4603      	mov	r3, r0
 8011026:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011028:	7dbb      	ldrb	r3, [r7, #22]
}
 801102a:	4618      	mov	r0, r3
 801102c:	3718      	adds	r7, #24
 801102e:	46bd      	mov	sp, r7
 8011030:	bd80      	pop	{r7, pc}

08011032 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011032:	b580      	push	{r7, lr}
 8011034:	b082      	sub	sp, #8
 8011036:	af00      	add	r7, sp, #0
 8011038:	6078      	str	r0, [r7, #4]
 801103a:	460b      	mov	r3, r1
 801103c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011044:	78fa      	ldrb	r2, [r7, #3]
 8011046:	4611      	mov	r1, r2
 8011048:	4618      	mov	r0, r3
 801104a:	f7f6 f8bb 	bl	80071c4 <HAL_PCD_EP_GetRxCount>
 801104e:	4603      	mov	r3, r0
}
 8011050:	4618      	mov	r0, r3
 8011052:	3708      	adds	r7, #8
 8011054:	46bd      	mov	sp, r7
 8011056:	bd80      	pop	{r7, pc}

08011058 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011058:	b480      	push	{r7}
 801105a:	b085      	sub	sp, #20
 801105c:	af00      	add	r7, sp, #0
 801105e:	4603      	mov	r3, r0
 8011060:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011062:	2300      	movs	r3, #0
 8011064:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011066:	79fb      	ldrb	r3, [r7, #7]
 8011068:	2b03      	cmp	r3, #3
 801106a:	d817      	bhi.n	801109c <USBD_Get_USB_Status+0x44>
 801106c:	a201      	add	r2, pc, #4	; (adr r2, 8011074 <USBD_Get_USB_Status+0x1c>)
 801106e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011072:	bf00      	nop
 8011074:	08011085 	.word	0x08011085
 8011078:	0801108b 	.word	0x0801108b
 801107c:	08011091 	.word	0x08011091
 8011080:	08011097 	.word	0x08011097
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011084:	2300      	movs	r3, #0
 8011086:	73fb      	strb	r3, [r7, #15]
    break;
 8011088:	e00b      	b.n	80110a2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801108a:	2303      	movs	r3, #3
 801108c:	73fb      	strb	r3, [r7, #15]
    break;
 801108e:	e008      	b.n	80110a2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011090:	2301      	movs	r3, #1
 8011092:	73fb      	strb	r3, [r7, #15]
    break;
 8011094:	e005      	b.n	80110a2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011096:	2303      	movs	r3, #3
 8011098:	73fb      	strb	r3, [r7, #15]
    break;
 801109a:	e002      	b.n	80110a2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801109c:	2303      	movs	r3, #3
 801109e:	73fb      	strb	r3, [r7, #15]
    break;
 80110a0:	bf00      	nop
  }
  return usb_status;
 80110a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80110a4:	4618      	mov	r0, r3
 80110a6:	3714      	adds	r7, #20
 80110a8:	46bd      	mov	sp, r7
 80110aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ae:	4770      	bx	lr

080110b0 <__errno>:
 80110b0:	4b01      	ldr	r3, [pc, #4]	; (80110b8 <__errno+0x8>)
 80110b2:	6818      	ldr	r0, [r3, #0]
 80110b4:	4770      	bx	lr
 80110b6:	bf00      	nop
 80110b8:	24000184 	.word	0x24000184

080110bc <__libc_init_array>:
 80110bc:	b570      	push	{r4, r5, r6, lr}
 80110be:	4d0d      	ldr	r5, [pc, #52]	; (80110f4 <__libc_init_array+0x38>)
 80110c0:	4c0d      	ldr	r4, [pc, #52]	; (80110f8 <__libc_init_array+0x3c>)
 80110c2:	1b64      	subs	r4, r4, r5
 80110c4:	10a4      	asrs	r4, r4, #2
 80110c6:	2600      	movs	r6, #0
 80110c8:	42a6      	cmp	r6, r4
 80110ca:	d109      	bne.n	80110e0 <__libc_init_array+0x24>
 80110cc:	4d0b      	ldr	r5, [pc, #44]	; (80110fc <__libc_init_array+0x40>)
 80110ce:	4c0c      	ldr	r4, [pc, #48]	; (8011100 <__libc_init_array+0x44>)
 80110d0:	f002 fc96 	bl	8013a00 <_init>
 80110d4:	1b64      	subs	r4, r4, r5
 80110d6:	10a4      	asrs	r4, r4, #2
 80110d8:	2600      	movs	r6, #0
 80110da:	42a6      	cmp	r6, r4
 80110dc:	d105      	bne.n	80110ea <__libc_init_array+0x2e>
 80110de:	bd70      	pop	{r4, r5, r6, pc}
 80110e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80110e4:	4798      	blx	r3
 80110e6:	3601      	adds	r6, #1
 80110e8:	e7ee      	b.n	80110c8 <__libc_init_array+0xc>
 80110ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80110ee:	4798      	blx	r3
 80110f0:	3601      	adds	r6, #1
 80110f2:	e7f2      	b.n	80110da <__libc_init_array+0x1e>
 80110f4:	08013e84 	.word	0x08013e84
 80110f8:	08013e84 	.word	0x08013e84
 80110fc:	08013e84 	.word	0x08013e84
 8011100:	08013e8c 	.word	0x08013e8c

08011104 <malloc>:
 8011104:	4b02      	ldr	r3, [pc, #8]	; (8011110 <malloc+0xc>)
 8011106:	4601      	mov	r1, r0
 8011108:	6818      	ldr	r0, [r3, #0]
 801110a:	f000 b88d 	b.w	8011228 <_malloc_r>
 801110e:	bf00      	nop
 8011110:	24000184 	.word	0x24000184

08011114 <free>:
 8011114:	4b02      	ldr	r3, [pc, #8]	; (8011120 <free+0xc>)
 8011116:	4601      	mov	r1, r0
 8011118:	6818      	ldr	r0, [r3, #0]
 801111a:	f000 b819 	b.w	8011150 <_free_r>
 801111e:	bf00      	nop
 8011120:	24000184 	.word	0x24000184

08011124 <memcpy>:
 8011124:	440a      	add	r2, r1
 8011126:	4291      	cmp	r1, r2
 8011128:	f100 33ff 	add.w	r3, r0, #4294967295
 801112c:	d100      	bne.n	8011130 <memcpy+0xc>
 801112e:	4770      	bx	lr
 8011130:	b510      	push	{r4, lr}
 8011132:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011136:	f803 4f01 	strb.w	r4, [r3, #1]!
 801113a:	4291      	cmp	r1, r2
 801113c:	d1f9      	bne.n	8011132 <memcpy+0xe>
 801113e:	bd10      	pop	{r4, pc}

08011140 <memset>:
 8011140:	4402      	add	r2, r0
 8011142:	4603      	mov	r3, r0
 8011144:	4293      	cmp	r3, r2
 8011146:	d100      	bne.n	801114a <memset+0xa>
 8011148:	4770      	bx	lr
 801114a:	f803 1b01 	strb.w	r1, [r3], #1
 801114e:	e7f9      	b.n	8011144 <memset+0x4>

08011150 <_free_r>:
 8011150:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011152:	2900      	cmp	r1, #0
 8011154:	d044      	beq.n	80111e0 <_free_r+0x90>
 8011156:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801115a:	9001      	str	r0, [sp, #4]
 801115c:	2b00      	cmp	r3, #0
 801115e:	f1a1 0404 	sub.w	r4, r1, #4
 8011162:	bfb8      	it	lt
 8011164:	18e4      	addlt	r4, r4, r3
 8011166:	f001 fb25 	bl	80127b4 <__malloc_lock>
 801116a:	4a1e      	ldr	r2, [pc, #120]	; (80111e4 <_free_r+0x94>)
 801116c:	9801      	ldr	r0, [sp, #4]
 801116e:	6813      	ldr	r3, [r2, #0]
 8011170:	b933      	cbnz	r3, 8011180 <_free_r+0x30>
 8011172:	6063      	str	r3, [r4, #4]
 8011174:	6014      	str	r4, [r2, #0]
 8011176:	b003      	add	sp, #12
 8011178:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801117c:	f001 bb20 	b.w	80127c0 <__malloc_unlock>
 8011180:	42a3      	cmp	r3, r4
 8011182:	d908      	bls.n	8011196 <_free_r+0x46>
 8011184:	6825      	ldr	r5, [r4, #0]
 8011186:	1961      	adds	r1, r4, r5
 8011188:	428b      	cmp	r3, r1
 801118a:	bf01      	itttt	eq
 801118c:	6819      	ldreq	r1, [r3, #0]
 801118e:	685b      	ldreq	r3, [r3, #4]
 8011190:	1949      	addeq	r1, r1, r5
 8011192:	6021      	streq	r1, [r4, #0]
 8011194:	e7ed      	b.n	8011172 <_free_r+0x22>
 8011196:	461a      	mov	r2, r3
 8011198:	685b      	ldr	r3, [r3, #4]
 801119a:	b10b      	cbz	r3, 80111a0 <_free_r+0x50>
 801119c:	42a3      	cmp	r3, r4
 801119e:	d9fa      	bls.n	8011196 <_free_r+0x46>
 80111a0:	6811      	ldr	r1, [r2, #0]
 80111a2:	1855      	adds	r5, r2, r1
 80111a4:	42a5      	cmp	r5, r4
 80111a6:	d10b      	bne.n	80111c0 <_free_r+0x70>
 80111a8:	6824      	ldr	r4, [r4, #0]
 80111aa:	4421      	add	r1, r4
 80111ac:	1854      	adds	r4, r2, r1
 80111ae:	42a3      	cmp	r3, r4
 80111b0:	6011      	str	r1, [r2, #0]
 80111b2:	d1e0      	bne.n	8011176 <_free_r+0x26>
 80111b4:	681c      	ldr	r4, [r3, #0]
 80111b6:	685b      	ldr	r3, [r3, #4]
 80111b8:	6053      	str	r3, [r2, #4]
 80111ba:	4421      	add	r1, r4
 80111bc:	6011      	str	r1, [r2, #0]
 80111be:	e7da      	b.n	8011176 <_free_r+0x26>
 80111c0:	d902      	bls.n	80111c8 <_free_r+0x78>
 80111c2:	230c      	movs	r3, #12
 80111c4:	6003      	str	r3, [r0, #0]
 80111c6:	e7d6      	b.n	8011176 <_free_r+0x26>
 80111c8:	6825      	ldr	r5, [r4, #0]
 80111ca:	1961      	adds	r1, r4, r5
 80111cc:	428b      	cmp	r3, r1
 80111ce:	bf04      	itt	eq
 80111d0:	6819      	ldreq	r1, [r3, #0]
 80111d2:	685b      	ldreq	r3, [r3, #4]
 80111d4:	6063      	str	r3, [r4, #4]
 80111d6:	bf04      	itt	eq
 80111d8:	1949      	addeq	r1, r1, r5
 80111da:	6021      	streq	r1, [r4, #0]
 80111dc:	6054      	str	r4, [r2, #4]
 80111de:	e7ca      	b.n	8011176 <_free_r+0x26>
 80111e0:	b003      	add	sp, #12
 80111e2:	bd30      	pop	{r4, r5, pc}
 80111e4:	24002040 	.word	0x24002040

080111e8 <sbrk_aligned>:
 80111e8:	b570      	push	{r4, r5, r6, lr}
 80111ea:	4e0e      	ldr	r6, [pc, #56]	; (8011224 <sbrk_aligned+0x3c>)
 80111ec:	460c      	mov	r4, r1
 80111ee:	6831      	ldr	r1, [r6, #0]
 80111f0:	4605      	mov	r5, r0
 80111f2:	b911      	cbnz	r1, 80111fa <sbrk_aligned+0x12>
 80111f4:	f000 fcce 	bl	8011b94 <_sbrk_r>
 80111f8:	6030      	str	r0, [r6, #0]
 80111fa:	4621      	mov	r1, r4
 80111fc:	4628      	mov	r0, r5
 80111fe:	f000 fcc9 	bl	8011b94 <_sbrk_r>
 8011202:	1c43      	adds	r3, r0, #1
 8011204:	d00a      	beq.n	801121c <sbrk_aligned+0x34>
 8011206:	1cc4      	adds	r4, r0, #3
 8011208:	f024 0403 	bic.w	r4, r4, #3
 801120c:	42a0      	cmp	r0, r4
 801120e:	d007      	beq.n	8011220 <sbrk_aligned+0x38>
 8011210:	1a21      	subs	r1, r4, r0
 8011212:	4628      	mov	r0, r5
 8011214:	f000 fcbe 	bl	8011b94 <_sbrk_r>
 8011218:	3001      	adds	r0, #1
 801121a:	d101      	bne.n	8011220 <sbrk_aligned+0x38>
 801121c:	f04f 34ff 	mov.w	r4, #4294967295
 8011220:	4620      	mov	r0, r4
 8011222:	bd70      	pop	{r4, r5, r6, pc}
 8011224:	24002044 	.word	0x24002044

08011228 <_malloc_r>:
 8011228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801122c:	1ccd      	adds	r5, r1, #3
 801122e:	f025 0503 	bic.w	r5, r5, #3
 8011232:	3508      	adds	r5, #8
 8011234:	2d0c      	cmp	r5, #12
 8011236:	bf38      	it	cc
 8011238:	250c      	movcc	r5, #12
 801123a:	2d00      	cmp	r5, #0
 801123c:	4607      	mov	r7, r0
 801123e:	db01      	blt.n	8011244 <_malloc_r+0x1c>
 8011240:	42a9      	cmp	r1, r5
 8011242:	d905      	bls.n	8011250 <_malloc_r+0x28>
 8011244:	230c      	movs	r3, #12
 8011246:	603b      	str	r3, [r7, #0]
 8011248:	2600      	movs	r6, #0
 801124a:	4630      	mov	r0, r6
 801124c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011250:	4e2e      	ldr	r6, [pc, #184]	; (801130c <_malloc_r+0xe4>)
 8011252:	f001 faaf 	bl	80127b4 <__malloc_lock>
 8011256:	6833      	ldr	r3, [r6, #0]
 8011258:	461c      	mov	r4, r3
 801125a:	bb34      	cbnz	r4, 80112aa <_malloc_r+0x82>
 801125c:	4629      	mov	r1, r5
 801125e:	4638      	mov	r0, r7
 8011260:	f7ff ffc2 	bl	80111e8 <sbrk_aligned>
 8011264:	1c43      	adds	r3, r0, #1
 8011266:	4604      	mov	r4, r0
 8011268:	d14d      	bne.n	8011306 <_malloc_r+0xde>
 801126a:	6834      	ldr	r4, [r6, #0]
 801126c:	4626      	mov	r6, r4
 801126e:	2e00      	cmp	r6, #0
 8011270:	d140      	bne.n	80112f4 <_malloc_r+0xcc>
 8011272:	6823      	ldr	r3, [r4, #0]
 8011274:	4631      	mov	r1, r6
 8011276:	4638      	mov	r0, r7
 8011278:	eb04 0803 	add.w	r8, r4, r3
 801127c:	f000 fc8a 	bl	8011b94 <_sbrk_r>
 8011280:	4580      	cmp	r8, r0
 8011282:	d13a      	bne.n	80112fa <_malloc_r+0xd2>
 8011284:	6821      	ldr	r1, [r4, #0]
 8011286:	3503      	adds	r5, #3
 8011288:	1a6d      	subs	r5, r5, r1
 801128a:	f025 0503 	bic.w	r5, r5, #3
 801128e:	3508      	adds	r5, #8
 8011290:	2d0c      	cmp	r5, #12
 8011292:	bf38      	it	cc
 8011294:	250c      	movcc	r5, #12
 8011296:	4629      	mov	r1, r5
 8011298:	4638      	mov	r0, r7
 801129a:	f7ff ffa5 	bl	80111e8 <sbrk_aligned>
 801129e:	3001      	adds	r0, #1
 80112a0:	d02b      	beq.n	80112fa <_malloc_r+0xd2>
 80112a2:	6823      	ldr	r3, [r4, #0]
 80112a4:	442b      	add	r3, r5
 80112a6:	6023      	str	r3, [r4, #0]
 80112a8:	e00e      	b.n	80112c8 <_malloc_r+0xa0>
 80112aa:	6822      	ldr	r2, [r4, #0]
 80112ac:	1b52      	subs	r2, r2, r5
 80112ae:	d41e      	bmi.n	80112ee <_malloc_r+0xc6>
 80112b0:	2a0b      	cmp	r2, #11
 80112b2:	d916      	bls.n	80112e2 <_malloc_r+0xba>
 80112b4:	1961      	adds	r1, r4, r5
 80112b6:	42a3      	cmp	r3, r4
 80112b8:	6025      	str	r5, [r4, #0]
 80112ba:	bf18      	it	ne
 80112bc:	6059      	strne	r1, [r3, #4]
 80112be:	6863      	ldr	r3, [r4, #4]
 80112c0:	bf08      	it	eq
 80112c2:	6031      	streq	r1, [r6, #0]
 80112c4:	5162      	str	r2, [r4, r5]
 80112c6:	604b      	str	r3, [r1, #4]
 80112c8:	4638      	mov	r0, r7
 80112ca:	f104 060b 	add.w	r6, r4, #11
 80112ce:	f001 fa77 	bl	80127c0 <__malloc_unlock>
 80112d2:	f026 0607 	bic.w	r6, r6, #7
 80112d6:	1d23      	adds	r3, r4, #4
 80112d8:	1af2      	subs	r2, r6, r3
 80112da:	d0b6      	beq.n	801124a <_malloc_r+0x22>
 80112dc:	1b9b      	subs	r3, r3, r6
 80112de:	50a3      	str	r3, [r4, r2]
 80112e0:	e7b3      	b.n	801124a <_malloc_r+0x22>
 80112e2:	6862      	ldr	r2, [r4, #4]
 80112e4:	42a3      	cmp	r3, r4
 80112e6:	bf0c      	ite	eq
 80112e8:	6032      	streq	r2, [r6, #0]
 80112ea:	605a      	strne	r2, [r3, #4]
 80112ec:	e7ec      	b.n	80112c8 <_malloc_r+0xa0>
 80112ee:	4623      	mov	r3, r4
 80112f0:	6864      	ldr	r4, [r4, #4]
 80112f2:	e7b2      	b.n	801125a <_malloc_r+0x32>
 80112f4:	4634      	mov	r4, r6
 80112f6:	6876      	ldr	r6, [r6, #4]
 80112f8:	e7b9      	b.n	801126e <_malloc_r+0x46>
 80112fa:	230c      	movs	r3, #12
 80112fc:	603b      	str	r3, [r7, #0]
 80112fe:	4638      	mov	r0, r7
 8011300:	f001 fa5e 	bl	80127c0 <__malloc_unlock>
 8011304:	e7a1      	b.n	801124a <_malloc_r+0x22>
 8011306:	6025      	str	r5, [r4, #0]
 8011308:	e7de      	b.n	80112c8 <_malloc_r+0xa0>
 801130a:	bf00      	nop
 801130c:	24002040 	.word	0x24002040

08011310 <__cvt>:
 8011310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011312:	ed2d 8b02 	vpush	{d8}
 8011316:	eeb0 8b40 	vmov.f64	d8, d0
 801131a:	b085      	sub	sp, #20
 801131c:	4617      	mov	r7, r2
 801131e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8011320:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8011322:	ee18 2a90 	vmov	r2, s17
 8011326:	f025 0520 	bic.w	r5, r5, #32
 801132a:	2a00      	cmp	r2, #0
 801132c:	bfb6      	itet	lt
 801132e:	222d      	movlt	r2, #45	; 0x2d
 8011330:	2200      	movge	r2, #0
 8011332:	eeb1 8b40 	vneglt.f64	d8, d0
 8011336:	2d46      	cmp	r5, #70	; 0x46
 8011338:	460c      	mov	r4, r1
 801133a:	701a      	strb	r2, [r3, #0]
 801133c:	d004      	beq.n	8011348 <__cvt+0x38>
 801133e:	2d45      	cmp	r5, #69	; 0x45
 8011340:	d100      	bne.n	8011344 <__cvt+0x34>
 8011342:	3401      	adds	r4, #1
 8011344:	2102      	movs	r1, #2
 8011346:	e000      	b.n	801134a <__cvt+0x3a>
 8011348:	2103      	movs	r1, #3
 801134a:	ab03      	add	r3, sp, #12
 801134c:	9301      	str	r3, [sp, #4]
 801134e:	ab02      	add	r3, sp, #8
 8011350:	9300      	str	r3, [sp, #0]
 8011352:	4622      	mov	r2, r4
 8011354:	4633      	mov	r3, r6
 8011356:	eeb0 0b48 	vmov.f64	d0, d8
 801135a:	f000 fcb9 	bl	8011cd0 <_dtoa_r>
 801135e:	2d47      	cmp	r5, #71	; 0x47
 8011360:	d101      	bne.n	8011366 <__cvt+0x56>
 8011362:	07fb      	lsls	r3, r7, #31
 8011364:	d51a      	bpl.n	801139c <__cvt+0x8c>
 8011366:	2d46      	cmp	r5, #70	; 0x46
 8011368:	eb00 0204 	add.w	r2, r0, r4
 801136c:	d10c      	bne.n	8011388 <__cvt+0x78>
 801136e:	7803      	ldrb	r3, [r0, #0]
 8011370:	2b30      	cmp	r3, #48	; 0x30
 8011372:	d107      	bne.n	8011384 <__cvt+0x74>
 8011374:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801137c:	bf1c      	itt	ne
 801137e:	f1c4 0401 	rsbne	r4, r4, #1
 8011382:	6034      	strne	r4, [r6, #0]
 8011384:	6833      	ldr	r3, [r6, #0]
 8011386:	441a      	add	r2, r3
 8011388:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801138c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011390:	bf08      	it	eq
 8011392:	9203      	streq	r2, [sp, #12]
 8011394:	2130      	movs	r1, #48	; 0x30
 8011396:	9b03      	ldr	r3, [sp, #12]
 8011398:	4293      	cmp	r3, r2
 801139a:	d307      	bcc.n	80113ac <__cvt+0x9c>
 801139c:	9b03      	ldr	r3, [sp, #12]
 801139e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80113a0:	1a1b      	subs	r3, r3, r0
 80113a2:	6013      	str	r3, [r2, #0]
 80113a4:	b005      	add	sp, #20
 80113a6:	ecbd 8b02 	vpop	{d8}
 80113aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80113ac:	1c5c      	adds	r4, r3, #1
 80113ae:	9403      	str	r4, [sp, #12]
 80113b0:	7019      	strb	r1, [r3, #0]
 80113b2:	e7f0      	b.n	8011396 <__cvt+0x86>

080113b4 <__exponent>:
 80113b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80113b6:	4603      	mov	r3, r0
 80113b8:	2900      	cmp	r1, #0
 80113ba:	bfb8      	it	lt
 80113bc:	4249      	neglt	r1, r1
 80113be:	f803 2b02 	strb.w	r2, [r3], #2
 80113c2:	bfb4      	ite	lt
 80113c4:	222d      	movlt	r2, #45	; 0x2d
 80113c6:	222b      	movge	r2, #43	; 0x2b
 80113c8:	2909      	cmp	r1, #9
 80113ca:	7042      	strb	r2, [r0, #1]
 80113cc:	dd2a      	ble.n	8011424 <__exponent+0x70>
 80113ce:	f10d 0407 	add.w	r4, sp, #7
 80113d2:	46a4      	mov	ip, r4
 80113d4:	270a      	movs	r7, #10
 80113d6:	46a6      	mov	lr, r4
 80113d8:	460a      	mov	r2, r1
 80113da:	fb91 f6f7 	sdiv	r6, r1, r7
 80113de:	fb07 1516 	mls	r5, r7, r6, r1
 80113e2:	3530      	adds	r5, #48	; 0x30
 80113e4:	2a63      	cmp	r2, #99	; 0x63
 80113e6:	f104 34ff 	add.w	r4, r4, #4294967295
 80113ea:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80113ee:	4631      	mov	r1, r6
 80113f0:	dcf1      	bgt.n	80113d6 <__exponent+0x22>
 80113f2:	3130      	adds	r1, #48	; 0x30
 80113f4:	f1ae 0502 	sub.w	r5, lr, #2
 80113f8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80113fc:	1c44      	adds	r4, r0, #1
 80113fe:	4629      	mov	r1, r5
 8011400:	4561      	cmp	r1, ip
 8011402:	d30a      	bcc.n	801141a <__exponent+0x66>
 8011404:	f10d 0209 	add.w	r2, sp, #9
 8011408:	eba2 020e 	sub.w	r2, r2, lr
 801140c:	4565      	cmp	r5, ip
 801140e:	bf88      	it	hi
 8011410:	2200      	movhi	r2, #0
 8011412:	4413      	add	r3, r2
 8011414:	1a18      	subs	r0, r3, r0
 8011416:	b003      	add	sp, #12
 8011418:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801141a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801141e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8011422:	e7ed      	b.n	8011400 <__exponent+0x4c>
 8011424:	2330      	movs	r3, #48	; 0x30
 8011426:	3130      	adds	r1, #48	; 0x30
 8011428:	7083      	strb	r3, [r0, #2]
 801142a:	70c1      	strb	r1, [r0, #3]
 801142c:	1d03      	adds	r3, r0, #4
 801142e:	e7f1      	b.n	8011414 <__exponent+0x60>

08011430 <_printf_float>:
 8011430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011434:	b08b      	sub	sp, #44	; 0x2c
 8011436:	460c      	mov	r4, r1
 8011438:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801143c:	4616      	mov	r6, r2
 801143e:	461f      	mov	r7, r3
 8011440:	4605      	mov	r5, r0
 8011442:	f001 f9b3 	bl	80127ac <_localeconv_r>
 8011446:	f8d0 b000 	ldr.w	fp, [r0]
 801144a:	4658      	mov	r0, fp
 801144c:	f7ee ff48 	bl	80002e0 <strlen>
 8011450:	2300      	movs	r3, #0
 8011452:	9308      	str	r3, [sp, #32]
 8011454:	f8d8 3000 	ldr.w	r3, [r8]
 8011458:	f894 9018 	ldrb.w	r9, [r4, #24]
 801145c:	6822      	ldr	r2, [r4, #0]
 801145e:	3307      	adds	r3, #7
 8011460:	f023 0307 	bic.w	r3, r3, #7
 8011464:	f103 0108 	add.w	r1, r3, #8
 8011468:	f8c8 1000 	str.w	r1, [r8]
 801146c:	4682      	mov	sl, r0
 801146e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011472:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8011476:	ed9f 7b98 	vldr	d7, [pc, #608]	; 80116d8 <_printf_float+0x2a8>
 801147a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 801147e:	eeb0 6bc0 	vabs.f64	d6, d0
 8011482:	eeb4 6b47 	vcmp.f64	d6, d7
 8011486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801148a:	dd24      	ble.n	80114d6 <_printf_float+0xa6>
 801148c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011494:	d502      	bpl.n	801149c <_printf_float+0x6c>
 8011496:	232d      	movs	r3, #45	; 0x2d
 8011498:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801149c:	4b90      	ldr	r3, [pc, #576]	; (80116e0 <_printf_float+0x2b0>)
 801149e:	4891      	ldr	r0, [pc, #580]	; (80116e4 <_printf_float+0x2b4>)
 80114a0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80114a4:	bf94      	ite	ls
 80114a6:	4698      	movls	r8, r3
 80114a8:	4680      	movhi	r8, r0
 80114aa:	2303      	movs	r3, #3
 80114ac:	6123      	str	r3, [r4, #16]
 80114ae:	f022 0204 	bic.w	r2, r2, #4
 80114b2:	2300      	movs	r3, #0
 80114b4:	6022      	str	r2, [r4, #0]
 80114b6:	9304      	str	r3, [sp, #16]
 80114b8:	9700      	str	r7, [sp, #0]
 80114ba:	4633      	mov	r3, r6
 80114bc:	aa09      	add	r2, sp, #36	; 0x24
 80114be:	4621      	mov	r1, r4
 80114c0:	4628      	mov	r0, r5
 80114c2:	f000 f9d3 	bl	801186c <_printf_common>
 80114c6:	3001      	adds	r0, #1
 80114c8:	f040 808a 	bne.w	80115e0 <_printf_float+0x1b0>
 80114cc:	f04f 30ff 	mov.w	r0, #4294967295
 80114d0:	b00b      	add	sp, #44	; 0x2c
 80114d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114d6:	eeb4 0b40 	vcmp.f64	d0, d0
 80114da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114de:	d709      	bvc.n	80114f4 <_printf_float+0xc4>
 80114e0:	ee10 3a90 	vmov	r3, s1
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	bfbc      	itt	lt
 80114e8:	232d      	movlt	r3, #45	; 0x2d
 80114ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80114ee:	487e      	ldr	r0, [pc, #504]	; (80116e8 <_printf_float+0x2b8>)
 80114f0:	4b7e      	ldr	r3, [pc, #504]	; (80116ec <_printf_float+0x2bc>)
 80114f2:	e7d5      	b.n	80114a0 <_printf_float+0x70>
 80114f4:	6863      	ldr	r3, [r4, #4]
 80114f6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80114fa:	9104      	str	r1, [sp, #16]
 80114fc:	1c59      	adds	r1, r3, #1
 80114fe:	d13c      	bne.n	801157a <_printf_float+0x14a>
 8011500:	2306      	movs	r3, #6
 8011502:	6063      	str	r3, [r4, #4]
 8011504:	2300      	movs	r3, #0
 8011506:	9303      	str	r3, [sp, #12]
 8011508:	ab08      	add	r3, sp, #32
 801150a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801150e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8011512:	ab07      	add	r3, sp, #28
 8011514:	6861      	ldr	r1, [r4, #4]
 8011516:	9300      	str	r3, [sp, #0]
 8011518:	6022      	str	r2, [r4, #0]
 801151a:	f10d 031b 	add.w	r3, sp, #27
 801151e:	4628      	mov	r0, r5
 8011520:	f7ff fef6 	bl	8011310 <__cvt>
 8011524:	9b04      	ldr	r3, [sp, #16]
 8011526:	9907      	ldr	r1, [sp, #28]
 8011528:	2b47      	cmp	r3, #71	; 0x47
 801152a:	4680      	mov	r8, r0
 801152c:	d108      	bne.n	8011540 <_printf_float+0x110>
 801152e:	1cc8      	adds	r0, r1, #3
 8011530:	db02      	blt.n	8011538 <_printf_float+0x108>
 8011532:	6863      	ldr	r3, [r4, #4]
 8011534:	4299      	cmp	r1, r3
 8011536:	dd41      	ble.n	80115bc <_printf_float+0x18c>
 8011538:	f1a9 0902 	sub.w	r9, r9, #2
 801153c:	fa5f f989 	uxtb.w	r9, r9
 8011540:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8011544:	d820      	bhi.n	8011588 <_printf_float+0x158>
 8011546:	3901      	subs	r1, #1
 8011548:	464a      	mov	r2, r9
 801154a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801154e:	9107      	str	r1, [sp, #28]
 8011550:	f7ff ff30 	bl	80113b4 <__exponent>
 8011554:	9a08      	ldr	r2, [sp, #32]
 8011556:	9004      	str	r0, [sp, #16]
 8011558:	1813      	adds	r3, r2, r0
 801155a:	2a01      	cmp	r2, #1
 801155c:	6123      	str	r3, [r4, #16]
 801155e:	dc02      	bgt.n	8011566 <_printf_float+0x136>
 8011560:	6822      	ldr	r2, [r4, #0]
 8011562:	07d2      	lsls	r2, r2, #31
 8011564:	d501      	bpl.n	801156a <_printf_float+0x13a>
 8011566:	3301      	adds	r3, #1
 8011568:	6123      	str	r3, [r4, #16]
 801156a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801156e:	2b00      	cmp	r3, #0
 8011570:	d0a2      	beq.n	80114b8 <_printf_float+0x88>
 8011572:	232d      	movs	r3, #45	; 0x2d
 8011574:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011578:	e79e      	b.n	80114b8 <_printf_float+0x88>
 801157a:	9904      	ldr	r1, [sp, #16]
 801157c:	2947      	cmp	r1, #71	; 0x47
 801157e:	d1c1      	bne.n	8011504 <_printf_float+0xd4>
 8011580:	2b00      	cmp	r3, #0
 8011582:	d1bf      	bne.n	8011504 <_printf_float+0xd4>
 8011584:	2301      	movs	r3, #1
 8011586:	e7bc      	b.n	8011502 <_printf_float+0xd2>
 8011588:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801158c:	d118      	bne.n	80115c0 <_printf_float+0x190>
 801158e:	2900      	cmp	r1, #0
 8011590:	6863      	ldr	r3, [r4, #4]
 8011592:	dd0b      	ble.n	80115ac <_printf_float+0x17c>
 8011594:	6121      	str	r1, [r4, #16]
 8011596:	b913      	cbnz	r3, 801159e <_printf_float+0x16e>
 8011598:	6822      	ldr	r2, [r4, #0]
 801159a:	07d0      	lsls	r0, r2, #31
 801159c:	d502      	bpl.n	80115a4 <_printf_float+0x174>
 801159e:	3301      	adds	r3, #1
 80115a0:	440b      	add	r3, r1
 80115a2:	6123      	str	r3, [r4, #16]
 80115a4:	2300      	movs	r3, #0
 80115a6:	65a1      	str	r1, [r4, #88]	; 0x58
 80115a8:	9304      	str	r3, [sp, #16]
 80115aa:	e7de      	b.n	801156a <_printf_float+0x13a>
 80115ac:	b913      	cbnz	r3, 80115b4 <_printf_float+0x184>
 80115ae:	6822      	ldr	r2, [r4, #0]
 80115b0:	07d2      	lsls	r2, r2, #31
 80115b2:	d501      	bpl.n	80115b8 <_printf_float+0x188>
 80115b4:	3302      	adds	r3, #2
 80115b6:	e7f4      	b.n	80115a2 <_printf_float+0x172>
 80115b8:	2301      	movs	r3, #1
 80115ba:	e7f2      	b.n	80115a2 <_printf_float+0x172>
 80115bc:	f04f 0967 	mov.w	r9, #103	; 0x67
 80115c0:	9b08      	ldr	r3, [sp, #32]
 80115c2:	4299      	cmp	r1, r3
 80115c4:	db05      	blt.n	80115d2 <_printf_float+0x1a2>
 80115c6:	6823      	ldr	r3, [r4, #0]
 80115c8:	6121      	str	r1, [r4, #16]
 80115ca:	07d8      	lsls	r0, r3, #31
 80115cc:	d5ea      	bpl.n	80115a4 <_printf_float+0x174>
 80115ce:	1c4b      	adds	r3, r1, #1
 80115d0:	e7e7      	b.n	80115a2 <_printf_float+0x172>
 80115d2:	2900      	cmp	r1, #0
 80115d4:	bfd4      	ite	le
 80115d6:	f1c1 0202 	rsble	r2, r1, #2
 80115da:	2201      	movgt	r2, #1
 80115dc:	4413      	add	r3, r2
 80115de:	e7e0      	b.n	80115a2 <_printf_float+0x172>
 80115e0:	6823      	ldr	r3, [r4, #0]
 80115e2:	055a      	lsls	r2, r3, #21
 80115e4:	d407      	bmi.n	80115f6 <_printf_float+0x1c6>
 80115e6:	6923      	ldr	r3, [r4, #16]
 80115e8:	4642      	mov	r2, r8
 80115ea:	4631      	mov	r1, r6
 80115ec:	4628      	mov	r0, r5
 80115ee:	47b8      	blx	r7
 80115f0:	3001      	adds	r0, #1
 80115f2:	d12a      	bne.n	801164a <_printf_float+0x21a>
 80115f4:	e76a      	b.n	80114cc <_printf_float+0x9c>
 80115f6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80115fa:	f240 80e2 	bls.w	80117c2 <_printf_float+0x392>
 80115fe:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8011602:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801160a:	d133      	bne.n	8011674 <_printf_float+0x244>
 801160c:	4a38      	ldr	r2, [pc, #224]	; (80116f0 <_printf_float+0x2c0>)
 801160e:	2301      	movs	r3, #1
 8011610:	4631      	mov	r1, r6
 8011612:	4628      	mov	r0, r5
 8011614:	47b8      	blx	r7
 8011616:	3001      	adds	r0, #1
 8011618:	f43f af58 	beq.w	80114cc <_printf_float+0x9c>
 801161c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8011620:	429a      	cmp	r2, r3
 8011622:	db02      	blt.n	801162a <_printf_float+0x1fa>
 8011624:	6823      	ldr	r3, [r4, #0]
 8011626:	07d8      	lsls	r0, r3, #31
 8011628:	d50f      	bpl.n	801164a <_printf_float+0x21a>
 801162a:	4653      	mov	r3, sl
 801162c:	465a      	mov	r2, fp
 801162e:	4631      	mov	r1, r6
 8011630:	4628      	mov	r0, r5
 8011632:	47b8      	blx	r7
 8011634:	3001      	adds	r0, #1
 8011636:	f43f af49 	beq.w	80114cc <_printf_float+0x9c>
 801163a:	f04f 0800 	mov.w	r8, #0
 801163e:	f104 091a 	add.w	r9, r4, #26
 8011642:	9b08      	ldr	r3, [sp, #32]
 8011644:	3b01      	subs	r3, #1
 8011646:	4543      	cmp	r3, r8
 8011648:	dc09      	bgt.n	801165e <_printf_float+0x22e>
 801164a:	6823      	ldr	r3, [r4, #0]
 801164c:	079b      	lsls	r3, r3, #30
 801164e:	f100 8108 	bmi.w	8011862 <_printf_float+0x432>
 8011652:	68e0      	ldr	r0, [r4, #12]
 8011654:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011656:	4298      	cmp	r0, r3
 8011658:	bfb8      	it	lt
 801165a:	4618      	movlt	r0, r3
 801165c:	e738      	b.n	80114d0 <_printf_float+0xa0>
 801165e:	2301      	movs	r3, #1
 8011660:	464a      	mov	r2, r9
 8011662:	4631      	mov	r1, r6
 8011664:	4628      	mov	r0, r5
 8011666:	47b8      	blx	r7
 8011668:	3001      	adds	r0, #1
 801166a:	f43f af2f 	beq.w	80114cc <_printf_float+0x9c>
 801166e:	f108 0801 	add.w	r8, r8, #1
 8011672:	e7e6      	b.n	8011642 <_printf_float+0x212>
 8011674:	9b07      	ldr	r3, [sp, #28]
 8011676:	2b00      	cmp	r3, #0
 8011678:	dc3c      	bgt.n	80116f4 <_printf_float+0x2c4>
 801167a:	4a1d      	ldr	r2, [pc, #116]	; (80116f0 <_printf_float+0x2c0>)
 801167c:	2301      	movs	r3, #1
 801167e:	4631      	mov	r1, r6
 8011680:	4628      	mov	r0, r5
 8011682:	47b8      	blx	r7
 8011684:	3001      	adds	r0, #1
 8011686:	f43f af21 	beq.w	80114cc <_printf_float+0x9c>
 801168a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801168e:	4313      	orrs	r3, r2
 8011690:	d102      	bne.n	8011698 <_printf_float+0x268>
 8011692:	6823      	ldr	r3, [r4, #0]
 8011694:	07d9      	lsls	r1, r3, #31
 8011696:	d5d8      	bpl.n	801164a <_printf_float+0x21a>
 8011698:	4653      	mov	r3, sl
 801169a:	465a      	mov	r2, fp
 801169c:	4631      	mov	r1, r6
 801169e:	4628      	mov	r0, r5
 80116a0:	47b8      	blx	r7
 80116a2:	3001      	adds	r0, #1
 80116a4:	f43f af12 	beq.w	80114cc <_printf_float+0x9c>
 80116a8:	f04f 0900 	mov.w	r9, #0
 80116ac:	f104 0a1a 	add.w	sl, r4, #26
 80116b0:	9b07      	ldr	r3, [sp, #28]
 80116b2:	425b      	negs	r3, r3
 80116b4:	454b      	cmp	r3, r9
 80116b6:	dc01      	bgt.n	80116bc <_printf_float+0x28c>
 80116b8:	9b08      	ldr	r3, [sp, #32]
 80116ba:	e795      	b.n	80115e8 <_printf_float+0x1b8>
 80116bc:	2301      	movs	r3, #1
 80116be:	4652      	mov	r2, sl
 80116c0:	4631      	mov	r1, r6
 80116c2:	4628      	mov	r0, r5
 80116c4:	47b8      	blx	r7
 80116c6:	3001      	adds	r0, #1
 80116c8:	f43f af00 	beq.w	80114cc <_printf_float+0x9c>
 80116cc:	f109 0901 	add.w	r9, r9, #1
 80116d0:	e7ee      	b.n	80116b0 <_printf_float+0x280>
 80116d2:	bf00      	nop
 80116d4:	f3af 8000 	nop.w
 80116d8:	ffffffff 	.word	0xffffffff
 80116dc:	7fefffff 	.word	0x7fefffff
 80116e0:	08013aa4 	.word	0x08013aa4
 80116e4:	08013aa8 	.word	0x08013aa8
 80116e8:	08013ab0 	.word	0x08013ab0
 80116ec:	08013aac 	.word	0x08013aac
 80116f0:	08013ab4 	.word	0x08013ab4
 80116f4:	9a08      	ldr	r2, [sp, #32]
 80116f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80116f8:	429a      	cmp	r2, r3
 80116fa:	bfa8      	it	ge
 80116fc:	461a      	movge	r2, r3
 80116fe:	2a00      	cmp	r2, #0
 8011700:	4691      	mov	r9, r2
 8011702:	dc38      	bgt.n	8011776 <_printf_float+0x346>
 8011704:	2300      	movs	r3, #0
 8011706:	9305      	str	r3, [sp, #20]
 8011708:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801170c:	f104 021a 	add.w	r2, r4, #26
 8011710:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011712:	9905      	ldr	r1, [sp, #20]
 8011714:	9304      	str	r3, [sp, #16]
 8011716:	eba3 0309 	sub.w	r3, r3, r9
 801171a:	428b      	cmp	r3, r1
 801171c:	dc33      	bgt.n	8011786 <_printf_float+0x356>
 801171e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8011722:	429a      	cmp	r2, r3
 8011724:	db3c      	blt.n	80117a0 <_printf_float+0x370>
 8011726:	6823      	ldr	r3, [r4, #0]
 8011728:	07da      	lsls	r2, r3, #31
 801172a:	d439      	bmi.n	80117a0 <_printf_float+0x370>
 801172c:	9b08      	ldr	r3, [sp, #32]
 801172e:	9a04      	ldr	r2, [sp, #16]
 8011730:	9907      	ldr	r1, [sp, #28]
 8011732:	1a9a      	subs	r2, r3, r2
 8011734:	eba3 0901 	sub.w	r9, r3, r1
 8011738:	4591      	cmp	r9, r2
 801173a:	bfa8      	it	ge
 801173c:	4691      	movge	r9, r2
 801173e:	f1b9 0f00 	cmp.w	r9, #0
 8011742:	dc35      	bgt.n	80117b0 <_printf_float+0x380>
 8011744:	f04f 0800 	mov.w	r8, #0
 8011748:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801174c:	f104 0a1a 	add.w	sl, r4, #26
 8011750:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8011754:	1a9b      	subs	r3, r3, r2
 8011756:	eba3 0309 	sub.w	r3, r3, r9
 801175a:	4543      	cmp	r3, r8
 801175c:	f77f af75 	ble.w	801164a <_printf_float+0x21a>
 8011760:	2301      	movs	r3, #1
 8011762:	4652      	mov	r2, sl
 8011764:	4631      	mov	r1, r6
 8011766:	4628      	mov	r0, r5
 8011768:	47b8      	blx	r7
 801176a:	3001      	adds	r0, #1
 801176c:	f43f aeae 	beq.w	80114cc <_printf_float+0x9c>
 8011770:	f108 0801 	add.w	r8, r8, #1
 8011774:	e7ec      	b.n	8011750 <_printf_float+0x320>
 8011776:	4613      	mov	r3, r2
 8011778:	4631      	mov	r1, r6
 801177a:	4642      	mov	r2, r8
 801177c:	4628      	mov	r0, r5
 801177e:	47b8      	blx	r7
 8011780:	3001      	adds	r0, #1
 8011782:	d1bf      	bne.n	8011704 <_printf_float+0x2d4>
 8011784:	e6a2      	b.n	80114cc <_printf_float+0x9c>
 8011786:	2301      	movs	r3, #1
 8011788:	4631      	mov	r1, r6
 801178a:	4628      	mov	r0, r5
 801178c:	9204      	str	r2, [sp, #16]
 801178e:	47b8      	blx	r7
 8011790:	3001      	adds	r0, #1
 8011792:	f43f ae9b 	beq.w	80114cc <_printf_float+0x9c>
 8011796:	9b05      	ldr	r3, [sp, #20]
 8011798:	9a04      	ldr	r2, [sp, #16]
 801179a:	3301      	adds	r3, #1
 801179c:	9305      	str	r3, [sp, #20]
 801179e:	e7b7      	b.n	8011710 <_printf_float+0x2e0>
 80117a0:	4653      	mov	r3, sl
 80117a2:	465a      	mov	r2, fp
 80117a4:	4631      	mov	r1, r6
 80117a6:	4628      	mov	r0, r5
 80117a8:	47b8      	blx	r7
 80117aa:	3001      	adds	r0, #1
 80117ac:	d1be      	bne.n	801172c <_printf_float+0x2fc>
 80117ae:	e68d      	b.n	80114cc <_printf_float+0x9c>
 80117b0:	9a04      	ldr	r2, [sp, #16]
 80117b2:	464b      	mov	r3, r9
 80117b4:	4442      	add	r2, r8
 80117b6:	4631      	mov	r1, r6
 80117b8:	4628      	mov	r0, r5
 80117ba:	47b8      	blx	r7
 80117bc:	3001      	adds	r0, #1
 80117be:	d1c1      	bne.n	8011744 <_printf_float+0x314>
 80117c0:	e684      	b.n	80114cc <_printf_float+0x9c>
 80117c2:	9a08      	ldr	r2, [sp, #32]
 80117c4:	2a01      	cmp	r2, #1
 80117c6:	dc01      	bgt.n	80117cc <_printf_float+0x39c>
 80117c8:	07db      	lsls	r3, r3, #31
 80117ca:	d537      	bpl.n	801183c <_printf_float+0x40c>
 80117cc:	2301      	movs	r3, #1
 80117ce:	4642      	mov	r2, r8
 80117d0:	4631      	mov	r1, r6
 80117d2:	4628      	mov	r0, r5
 80117d4:	47b8      	blx	r7
 80117d6:	3001      	adds	r0, #1
 80117d8:	f43f ae78 	beq.w	80114cc <_printf_float+0x9c>
 80117dc:	4653      	mov	r3, sl
 80117de:	465a      	mov	r2, fp
 80117e0:	4631      	mov	r1, r6
 80117e2:	4628      	mov	r0, r5
 80117e4:	47b8      	blx	r7
 80117e6:	3001      	adds	r0, #1
 80117e8:	f43f ae70 	beq.w	80114cc <_printf_float+0x9c>
 80117ec:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80117f0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80117f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117f8:	d01b      	beq.n	8011832 <_printf_float+0x402>
 80117fa:	9b08      	ldr	r3, [sp, #32]
 80117fc:	f108 0201 	add.w	r2, r8, #1
 8011800:	3b01      	subs	r3, #1
 8011802:	4631      	mov	r1, r6
 8011804:	4628      	mov	r0, r5
 8011806:	47b8      	blx	r7
 8011808:	3001      	adds	r0, #1
 801180a:	d10e      	bne.n	801182a <_printf_float+0x3fa>
 801180c:	e65e      	b.n	80114cc <_printf_float+0x9c>
 801180e:	2301      	movs	r3, #1
 8011810:	464a      	mov	r2, r9
 8011812:	4631      	mov	r1, r6
 8011814:	4628      	mov	r0, r5
 8011816:	47b8      	blx	r7
 8011818:	3001      	adds	r0, #1
 801181a:	f43f ae57 	beq.w	80114cc <_printf_float+0x9c>
 801181e:	f108 0801 	add.w	r8, r8, #1
 8011822:	9b08      	ldr	r3, [sp, #32]
 8011824:	3b01      	subs	r3, #1
 8011826:	4543      	cmp	r3, r8
 8011828:	dcf1      	bgt.n	801180e <_printf_float+0x3de>
 801182a:	9b04      	ldr	r3, [sp, #16]
 801182c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011830:	e6db      	b.n	80115ea <_printf_float+0x1ba>
 8011832:	f04f 0800 	mov.w	r8, #0
 8011836:	f104 091a 	add.w	r9, r4, #26
 801183a:	e7f2      	b.n	8011822 <_printf_float+0x3f2>
 801183c:	2301      	movs	r3, #1
 801183e:	4642      	mov	r2, r8
 8011840:	e7df      	b.n	8011802 <_printf_float+0x3d2>
 8011842:	2301      	movs	r3, #1
 8011844:	464a      	mov	r2, r9
 8011846:	4631      	mov	r1, r6
 8011848:	4628      	mov	r0, r5
 801184a:	47b8      	blx	r7
 801184c:	3001      	adds	r0, #1
 801184e:	f43f ae3d 	beq.w	80114cc <_printf_float+0x9c>
 8011852:	f108 0801 	add.w	r8, r8, #1
 8011856:	68e3      	ldr	r3, [r4, #12]
 8011858:	9909      	ldr	r1, [sp, #36]	; 0x24
 801185a:	1a5b      	subs	r3, r3, r1
 801185c:	4543      	cmp	r3, r8
 801185e:	dcf0      	bgt.n	8011842 <_printf_float+0x412>
 8011860:	e6f7      	b.n	8011652 <_printf_float+0x222>
 8011862:	f04f 0800 	mov.w	r8, #0
 8011866:	f104 0919 	add.w	r9, r4, #25
 801186a:	e7f4      	b.n	8011856 <_printf_float+0x426>

0801186c <_printf_common>:
 801186c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011870:	4616      	mov	r6, r2
 8011872:	4699      	mov	r9, r3
 8011874:	688a      	ldr	r2, [r1, #8]
 8011876:	690b      	ldr	r3, [r1, #16]
 8011878:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801187c:	4293      	cmp	r3, r2
 801187e:	bfb8      	it	lt
 8011880:	4613      	movlt	r3, r2
 8011882:	6033      	str	r3, [r6, #0]
 8011884:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011888:	4607      	mov	r7, r0
 801188a:	460c      	mov	r4, r1
 801188c:	b10a      	cbz	r2, 8011892 <_printf_common+0x26>
 801188e:	3301      	adds	r3, #1
 8011890:	6033      	str	r3, [r6, #0]
 8011892:	6823      	ldr	r3, [r4, #0]
 8011894:	0699      	lsls	r1, r3, #26
 8011896:	bf42      	ittt	mi
 8011898:	6833      	ldrmi	r3, [r6, #0]
 801189a:	3302      	addmi	r3, #2
 801189c:	6033      	strmi	r3, [r6, #0]
 801189e:	6825      	ldr	r5, [r4, #0]
 80118a0:	f015 0506 	ands.w	r5, r5, #6
 80118a4:	d106      	bne.n	80118b4 <_printf_common+0x48>
 80118a6:	f104 0a19 	add.w	sl, r4, #25
 80118aa:	68e3      	ldr	r3, [r4, #12]
 80118ac:	6832      	ldr	r2, [r6, #0]
 80118ae:	1a9b      	subs	r3, r3, r2
 80118b0:	42ab      	cmp	r3, r5
 80118b2:	dc26      	bgt.n	8011902 <_printf_common+0x96>
 80118b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80118b8:	1e13      	subs	r3, r2, #0
 80118ba:	6822      	ldr	r2, [r4, #0]
 80118bc:	bf18      	it	ne
 80118be:	2301      	movne	r3, #1
 80118c0:	0692      	lsls	r2, r2, #26
 80118c2:	d42b      	bmi.n	801191c <_printf_common+0xb0>
 80118c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80118c8:	4649      	mov	r1, r9
 80118ca:	4638      	mov	r0, r7
 80118cc:	47c0      	blx	r8
 80118ce:	3001      	adds	r0, #1
 80118d0:	d01e      	beq.n	8011910 <_printf_common+0xa4>
 80118d2:	6823      	ldr	r3, [r4, #0]
 80118d4:	68e5      	ldr	r5, [r4, #12]
 80118d6:	6832      	ldr	r2, [r6, #0]
 80118d8:	f003 0306 	and.w	r3, r3, #6
 80118dc:	2b04      	cmp	r3, #4
 80118de:	bf08      	it	eq
 80118e0:	1aad      	subeq	r5, r5, r2
 80118e2:	68a3      	ldr	r3, [r4, #8]
 80118e4:	6922      	ldr	r2, [r4, #16]
 80118e6:	bf0c      	ite	eq
 80118e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80118ec:	2500      	movne	r5, #0
 80118ee:	4293      	cmp	r3, r2
 80118f0:	bfc4      	itt	gt
 80118f2:	1a9b      	subgt	r3, r3, r2
 80118f4:	18ed      	addgt	r5, r5, r3
 80118f6:	2600      	movs	r6, #0
 80118f8:	341a      	adds	r4, #26
 80118fa:	42b5      	cmp	r5, r6
 80118fc:	d11a      	bne.n	8011934 <_printf_common+0xc8>
 80118fe:	2000      	movs	r0, #0
 8011900:	e008      	b.n	8011914 <_printf_common+0xa8>
 8011902:	2301      	movs	r3, #1
 8011904:	4652      	mov	r2, sl
 8011906:	4649      	mov	r1, r9
 8011908:	4638      	mov	r0, r7
 801190a:	47c0      	blx	r8
 801190c:	3001      	adds	r0, #1
 801190e:	d103      	bne.n	8011918 <_printf_common+0xac>
 8011910:	f04f 30ff 	mov.w	r0, #4294967295
 8011914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011918:	3501      	adds	r5, #1
 801191a:	e7c6      	b.n	80118aa <_printf_common+0x3e>
 801191c:	18e1      	adds	r1, r4, r3
 801191e:	1c5a      	adds	r2, r3, #1
 8011920:	2030      	movs	r0, #48	; 0x30
 8011922:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011926:	4422      	add	r2, r4
 8011928:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801192c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011930:	3302      	adds	r3, #2
 8011932:	e7c7      	b.n	80118c4 <_printf_common+0x58>
 8011934:	2301      	movs	r3, #1
 8011936:	4622      	mov	r2, r4
 8011938:	4649      	mov	r1, r9
 801193a:	4638      	mov	r0, r7
 801193c:	47c0      	blx	r8
 801193e:	3001      	adds	r0, #1
 8011940:	d0e6      	beq.n	8011910 <_printf_common+0xa4>
 8011942:	3601      	adds	r6, #1
 8011944:	e7d9      	b.n	80118fa <_printf_common+0x8e>
	...

08011948 <_printf_i>:
 8011948:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801194c:	7e0f      	ldrb	r7, [r1, #24]
 801194e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011950:	2f78      	cmp	r7, #120	; 0x78
 8011952:	4691      	mov	r9, r2
 8011954:	4680      	mov	r8, r0
 8011956:	460c      	mov	r4, r1
 8011958:	469a      	mov	sl, r3
 801195a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801195e:	d807      	bhi.n	8011970 <_printf_i+0x28>
 8011960:	2f62      	cmp	r7, #98	; 0x62
 8011962:	d80a      	bhi.n	801197a <_printf_i+0x32>
 8011964:	2f00      	cmp	r7, #0
 8011966:	f000 80d8 	beq.w	8011b1a <_printf_i+0x1d2>
 801196a:	2f58      	cmp	r7, #88	; 0x58
 801196c:	f000 80a3 	beq.w	8011ab6 <_printf_i+0x16e>
 8011970:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011974:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011978:	e03a      	b.n	80119f0 <_printf_i+0xa8>
 801197a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801197e:	2b15      	cmp	r3, #21
 8011980:	d8f6      	bhi.n	8011970 <_printf_i+0x28>
 8011982:	a101      	add	r1, pc, #4	; (adr r1, 8011988 <_printf_i+0x40>)
 8011984:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011988:	080119e1 	.word	0x080119e1
 801198c:	080119f5 	.word	0x080119f5
 8011990:	08011971 	.word	0x08011971
 8011994:	08011971 	.word	0x08011971
 8011998:	08011971 	.word	0x08011971
 801199c:	08011971 	.word	0x08011971
 80119a0:	080119f5 	.word	0x080119f5
 80119a4:	08011971 	.word	0x08011971
 80119a8:	08011971 	.word	0x08011971
 80119ac:	08011971 	.word	0x08011971
 80119b0:	08011971 	.word	0x08011971
 80119b4:	08011b01 	.word	0x08011b01
 80119b8:	08011a25 	.word	0x08011a25
 80119bc:	08011ae3 	.word	0x08011ae3
 80119c0:	08011971 	.word	0x08011971
 80119c4:	08011971 	.word	0x08011971
 80119c8:	08011b23 	.word	0x08011b23
 80119cc:	08011971 	.word	0x08011971
 80119d0:	08011a25 	.word	0x08011a25
 80119d4:	08011971 	.word	0x08011971
 80119d8:	08011971 	.word	0x08011971
 80119dc:	08011aeb 	.word	0x08011aeb
 80119e0:	682b      	ldr	r3, [r5, #0]
 80119e2:	1d1a      	adds	r2, r3, #4
 80119e4:	681b      	ldr	r3, [r3, #0]
 80119e6:	602a      	str	r2, [r5, #0]
 80119e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80119ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80119f0:	2301      	movs	r3, #1
 80119f2:	e0a3      	b.n	8011b3c <_printf_i+0x1f4>
 80119f4:	6820      	ldr	r0, [r4, #0]
 80119f6:	6829      	ldr	r1, [r5, #0]
 80119f8:	0606      	lsls	r6, r0, #24
 80119fa:	f101 0304 	add.w	r3, r1, #4
 80119fe:	d50a      	bpl.n	8011a16 <_printf_i+0xce>
 8011a00:	680e      	ldr	r6, [r1, #0]
 8011a02:	602b      	str	r3, [r5, #0]
 8011a04:	2e00      	cmp	r6, #0
 8011a06:	da03      	bge.n	8011a10 <_printf_i+0xc8>
 8011a08:	232d      	movs	r3, #45	; 0x2d
 8011a0a:	4276      	negs	r6, r6
 8011a0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011a10:	485e      	ldr	r0, [pc, #376]	; (8011b8c <_printf_i+0x244>)
 8011a12:	230a      	movs	r3, #10
 8011a14:	e019      	b.n	8011a4a <_printf_i+0x102>
 8011a16:	680e      	ldr	r6, [r1, #0]
 8011a18:	602b      	str	r3, [r5, #0]
 8011a1a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011a1e:	bf18      	it	ne
 8011a20:	b236      	sxthne	r6, r6
 8011a22:	e7ef      	b.n	8011a04 <_printf_i+0xbc>
 8011a24:	682b      	ldr	r3, [r5, #0]
 8011a26:	6820      	ldr	r0, [r4, #0]
 8011a28:	1d19      	adds	r1, r3, #4
 8011a2a:	6029      	str	r1, [r5, #0]
 8011a2c:	0601      	lsls	r1, r0, #24
 8011a2e:	d501      	bpl.n	8011a34 <_printf_i+0xec>
 8011a30:	681e      	ldr	r6, [r3, #0]
 8011a32:	e002      	b.n	8011a3a <_printf_i+0xf2>
 8011a34:	0646      	lsls	r6, r0, #25
 8011a36:	d5fb      	bpl.n	8011a30 <_printf_i+0xe8>
 8011a38:	881e      	ldrh	r6, [r3, #0]
 8011a3a:	4854      	ldr	r0, [pc, #336]	; (8011b8c <_printf_i+0x244>)
 8011a3c:	2f6f      	cmp	r7, #111	; 0x6f
 8011a3e:	bf0c      	ite	eq
 8011a40:	2308      	moveq	r3, #8
 8011a42:	230a      	movne	r3, #10
 8011a44:	2100      	movs	r1, #0
 8011a46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011a4a:	6865      	ldr	r5, [r4, #4]
 8011a4c:	60a5      	str	r5, [r4, #8]
 8011a4e:	2d00      	cmp	r5, #0
 8011a50:	bfa2      	ittt	ge
 8011a52:	6821      	ldrge	r1, [r4, #0]
 8011a54:	f021 0104 	bicge.w	r1, r1, #4
 8011a58:	6021      	strge	r1, [r4, #0]
 8011a5a:	b90e      	cbnz	r6, 8011a60 <_printf_i+0x118>
 8011a5c:	2d00      	cmp	r5, #0
 8011a5e:	d04d      	beq.n	8011afc <_printf_i+0x1b4>
 8011a60:	4615      	mov	r5, r2
 8011a62:	fbb6 f1f3 	udiv	r1, r6, r3
 8011a66:	fb03 6711 	mls	r7, r3, r1, r6
 8011a6a:	5dc7      	ldrb	r7, [r0, r7]
 8011a6c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011a70:	4637      	mov	r7, r6
 8011a72:	42bb      	cmp	r3, r7
 8011a74:	460e      	mov	r6, r1
 8011a76:	d9f4      	bls.n	8011a62 <_printf_i+0x11a>
 8011a78:	2b08      	cmp	r3, #8
 8011a7a:	d10b      	bne.n	8011a94 <_printf_i+0x14c>
 8011a7c:	6823      	ldr	r3, [r4, #0]
 8011a7e:	07de      	lsls	r6, r3, #31
 8011a80:	d508      	bpl.n	8011a94 <_printf_i+0x14c>
 8011a82:	6923      	ldr	r3, [r4, #16]
 8011a84:	6861      	ldr	r1, [r4, #4]
 8011a86:	4299      	cmp	r1, r3
 8011a88:	bfde      	ittt	le
 8011a8a:	2330      	movle	r3, #48	; 0x30
 8011a8c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011a90:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011a94:	1b52      	subs	r2, r2, r5
 8011a96:	6122      	str	r2, [r4, #16]
 8011a98:	f8cd a000 	str.w	sl, [sp]
 8011a9c:	464b      	mov	r3, r9
 8011a9e:	aa03      	add	r2, sp, #12
 8011aa0:	4621      	mov	r1, r4
 8011aa2:	4640      	mov	r0, r8
 8011aa4:	f7ff fee2 	bl	801186c <_printf_common>
 8011aa8:	3001      	adds	r0, #1
 8011aaa:	d14c      	bne.n	8011b46 <_printf_i+0x1fe>
 8011aac:	f04f 30ff 	mov.w	r0, #4294967295
 8011ab0:	b004      	add	sp, #16
 8011ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ab6:	4835      	ldr	r0, [pc, #212]	; (8011b8c <_printf_i+0x244>)
 8011ab8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011abc:	6829      	ldr	r1, [r5, #0]
 8011abe:	6823      	ldr	r3, [r4, #0]
 8011ac0:	f851 6b04 	ldr.w	r6, [r1], #4
 8011ac4:	6029      	str	r1, [r5, #0]
 8011ac6:	061d      	lsls	r5, r3, #24
 8011ac8:	d514      	bpl.n	8011af4 <_printf_i+0x1ac>
 8011aca:	07df      	lsls	r7, r3, #31
 8011acc:	bf44      	itt	mi
 8011ace:	f043 0320 	orrmi.w	r3, r3, #32
 8011ad2:	6023      	strmi	r3, [r4, #0]
 8011ad4:	b91e      	cbnz	r6, 8011ade <_printf_i+0x196>
 8011ad6:	6823      	ldr	r3, [r4, #0]
 8011ad8:	f023 0320 	bic.w	r3, r3, #32
 8011adc:	6023      	str	r3, [r4, #0]
 8011ade:	2310      	movs	r3, #16
 8011ae0:	e7b0      	b.n	8011a44 <_printf_i+0xfc>
 8011ae2:	6823      	ldr	r3, [r4, #0]
 8011ae4:	f043 0320 	orr.w	r3, r3, #32
 8011ae8:	6023      	str	r3, [r4, #0]
 8011aea:	2378      	movs	r3, #120	; 0x78
 8011aec:	4828      	ldr	r0, [pc, #160]	; (8011b90 <_printf_i+0x248>)
 8011aee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011af2:	e7e3      	b.n	8011abc <_printf_i+0x174>
 8011af4:	0659      	lsls	r1, r3, #25
 8011af6:	bf48      	it	mi
 8011af8:	b2b6      	uxthmi	r6, r6
 8011afa:	e7e6      	b.n	8011aca <_printf_i+0x182>
 8011afc:	4615      	mov	r5, r2
 8011afe:	e7bb      	b.n	8011a78 <_printf_i+0x130>
 8011b00:	682b      	ldr	r3, [r5, #0]
 8011b02:	6826      	ldr	r6, [r4, #0]
 8011b04:	6961      	ldr	r1, [r4, #20]
 8011b06:	1d18      	adds	r0, r3, #4
 8011b08:	6028      	str	r0, [r5, #0]
 8011b0a:	0635      	lsls	r5, r6, #24
 8011b0c:	681b      	ldr	r3, [r3, #0]
 8011b0e:	d501      	bpl.n	8011b14 <_printf_i+0x1cc>
 8011b10:	6019      	str	r1, [r3, #0]
 8011b12:	e002      	b.n	8011b1a <_printf_i+0x1d2>
 8011b14:	0670      	lsls	r0, r6, #25
 8011b16:	d5fb      	bpl.n	8011b10 <_printf_i+0x1c8>
 8011b18:	8019      	strh	r1, [r3, #0]
 8011b1a:	2300      	movs	r3, #0
 8011b1c:	6123      	str	r3, [r4, #16]
 8011b1e:	4615      	mov	r5, r2
 8011b20:	e7ba      	b.n	8011a98 <_printf_i+0x150>
 8011b22:	682b      	ldr	r3, [r5, #0]
 8011b24:	1d1a      	adds	r2, r3, #4
 8011b26:	602a      	str	r2, [r5, #0]
 8011b28:	681d      	ldr	r5, [r3, #0]
 8011b2a:	6862      	ldr	r2, [r4, #4]
 8011b2c:	2100      	movs	r1, #0
 8011b2e:	4628      	mov	r0, r5
 8011b30:	f7ee fbde 	bl	80002f0 <memchr>
 8011b34:	b108      	cbz	r0, 8011b3a <_printf_i+0x1f2>
 8011b36:	1b40      	subs	r0, r0, r5
 8011b38:	6060      	str	r0, [r4, #4]
 8011b3a:	6863      	ldr	r3, [r4, #4]
 8011b3c:	6123      	str	r3, [r4, #16]
 8011b3e:	2300      	movs	r3, #0
 8011b40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011b44:	e7a8      	b.n	8011a98 <_printf_i+0x150>
 8011b46:	6923      	ldr	r3, [r4, #16]
 8011b48:	462a      	mov	r2, r5
 8011b4a:	4649      	mov	r1, r9
 8011b4c:	4640      	mov	r0, r8
 8011b4e:	47d0      	blx	sl
 8011b50:	3001      	adds	r0, #1
 8011b52:	d0ab      	beq.n	8011aac <_printf_i+0x164>
 8011b54:	6823      	ldr	r3, [r4, #0]
 8011b56:	079b      	lsls	r3, r3, #30
 8011b58:	d413      	bmi.n	8011b82 <_printf_i+0x23a>
 8011b5a:	68e0      	ldr	r0, [r4, #12]
 8011b5c:	9b03      	ldr	r3, [sp, #12]
 8011b5e:	4298      	cmp	r0, r3
 8011b60:	bfb8      	it	lt
 8011b62:	4618      	movlt	r0, r3
 8011b64:	e7a4      	b.n	8011ab0 <_printf_i+0x168>
 8011b66:	2301      	movs	r3, #1
 8011b68:	4632      	mov	r2, r6
 8011b6a:	4649      	mov	r1, r9
 8011b6c:	4640      	mov	r0, r8
 8011b6e:	47d0      	blx	sl
 8011b70:	3001      	adds	r0, #1
 8011b72:	d09b      	beq.n	8011aac <_printf_i+0x164>
 8011b74:	3501      	adds	r5, #1
 8011b76:	68e3      	ldr	r3, [r4, #12]
 8011b78:	9903      	ldr	r1, [sp, #12]
 8011b7a:	1a5b      	subs	r3, r3, r1
 8011b7c:	42ab      	cmp	r3, r5
 8011b7e:	dcf2      	bgt.n	8011b66 <_printf_i+0x21e>
 8011b80:	e7eb      	b.n	8011b5a <_printf_i+0x212>
 8011b82:	2500      	movs	r5, #0
 8011b84:	f104 0619 	add.w	r6, r4, #25
 8011b88:	e7f5      	b.n	8011b76 <_printf_i+0x22e>
 8011b8a:	bf00      	nop
 8011b8c:	08013ab6 	.word	0x08013ab6
 8011b90:	08013ac7 	.word	0x08013ac7

08011b94 <_sbrk_r>:
 8011b94:	b538      	push	{r3, r4, r5, lr}
 8011b96:	4d06      	ldr	r5, [pc, #24]	; (8011bb0 <_sbrk_r+0x1c>)
 8011b98:	2300      	movs	r3, #0
 8011b9a:	4604      	mov	r4, r0
 8011b9c:	4608      	mov	r0, r1
 8011b9e:	602b      	str	r3, [r5, #0]
 8011ba0:	f7ef fe70 	bl	8001884 <_sbrk>
 8011ba4:	1c43      	adds	r3, r0, #1
 8011ba6:	d102      	bne.n	8011bae <_sbrk_r+0x1a>
 8011ba8:	682b      	ldr	r3, [r5, #0]
 8011baa:	b103      	cbz	r3, 8011bae <_sbrk_r+0x1a>
 8011bac:	6023      	str	r3, [r4, #0]
 8011bae:	bd38      	pop	{r3, r4, r5, pc}
 8011bb0:	24002048 	.word	0x24002048

08011bb4 <quorem>:
 8011bb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011bb8:	6903      	ldr	r3, [r0, #16]
 8011bba:	690c      	ldr	r4, [r1, #16]
 8011bbc:	42a3      	cmp	r3, r4
 8011bbe:	4607      	mov	r7, r0
 8011bc0:	f2c0 8081 	blt.w	8011cc6 <quorem+0x112>
 8011bc4:	3c01      	subs	r4, #1
 8011bc6:	f101 0814 	add.w	r8, r1, #20
 8011bca:	f100 0514 	add.w	r5, r0, #20
 8011bce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011bd2:	9301      	str	r3, [sp, #4]
 8011bd4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011bd8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011bdc:	3301      	adds	r3, #1
 8011bde:	429a      	cmp	r2, r3
 8011be0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011be4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011be8:	fbb2 f6f3 	udiv	r6, r2, r3
 8011bec:	d331      	bcc.n	8011c52 <quorem+0x9e>
 8011bee:	f04f 0e00 	mov.w	lr, #0
 8011bf2:	4640      	mov	r0, r8
 8011bf4:	46ac      	mov	ip, r5
 8011bf6:	46f2      	mov	sl, lr
 8011bf8:	f850 2b04 	ldr.w	r2, [r0], #4
 8011bfc:	b293      	uxth	r3, r2
 8011bfe:	fb06 e303 	mla	r3, r6, r3, lr
 8011c02:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8011c06:	b29b      	uxth	r3, r3
 8011c08:	ebaa 0303 	sub.w	r3, sl, r3
 8011c0c:	f8dc a000 	ldr.w	sl, [ip]
 8011c10:	0c12      	lsrs	r2, r2, #16
 8011c12:	fa13 f38a 	uxtah	r3, r3, sl
 8011c16:	fb06 e202 	mla	r2, r6, r2, lr
 8011c1a:	9300      	str	r3, [sp, #0]
 8011c1c:	9b00      	ldr	r3, [sp, #0]
 8011c1e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011c22:	b292      	uxth	r2, r2
 8011c24:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8011c28:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011c2c:	f8bd 3000 	ldrh.w	r3, [sp]
 8011c30:	4581      	cmp	r9, r0
 8011c32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011c36:	f84c 3b04 	str.w	r3, [ip], #4
 8011c3a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011c3e:	d2db      	bcs.n	8011bf8 <quorem+0x44>
 8011c40:	f855 300b 	ldr.w	r3, [r5, fp]
 8011c44:	b92b      	cbnz	r3, 8011c52 <quorem+0x9e>
 8011c46:	9b01      	ldr	r3, [sp, #4]
 8011c48:	3b04      	subs	r3, #4
 8011c4a:	429d      	cmp	r5, r3
 8011c4c:	461a      	mov	r2, r3
 8011c4e:	d32e      	bcc.n	8011cae <quorem+0xfa>
 8011c50:	613c      	str	r4, [r7, #16]
 8011c52:	4638      	mov	r0, r7
 8011c54:	f001 f83c 	bl	8012cd0 <__mcmp>
 8011c58:	2800      	cmp	r0, #0
 8011c5a:	db24      	blt.n	8011ca6 <quorem+0xf2>
 8011c5c:	3601      	adds	r6, #1
 8011c5e:	4628      	mov	r0, r5
 8011c60:	f04f 0c00 	mov.w	ip, #0
 8011c64:	f858 2b04 	ldr.w	r2, [r8], #4
 8011c68:	f8d0 e000 	ldr.w	lr, [r0]
 8011c6c:	b293      	uxth	r3, r2
 8011c6e:	ebac 0303 	sub.w	r3, ip, r3
 8011c72:	0c12      	lsrs	r2, r2, #16
 8011c74:	fa13 f38e 	uxtah	r3, r3, lr
 8011c78:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011c7c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011c80:	b29b      	uxth	r3, r3
 8011c82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011c86:	45c1      	cmp	r9, r8
 8011c88:	f840 3b04 	str.w	r3, [r0], #4
 8011c8c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011c90:	d2e8      	bcs.n	8011c64 <quorem+0xb0>
 8011c92:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011c96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011c9a:	b922      	cbnz	r2, 8011ca6 <quorem+0xf2>
 8011c9c:	3b04      	subs	r3, #4
 8011c9e:	429d      	cmp	r5, r3
 8011ca0:	461a      	mov	r2, r3
 8011ca2:	d30a      	bcc.n	8011cba <quorem+0x106>
 8011ca4:	613c      	str	r4, [r7, #16]
 8011ca6:	4630      	mov	r0, r6
 8011ca8:	b003      	add	sp, #12
 8011caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cae:	6812      	ldr	r2, [r2, #0]
 8011cb0:	3b04      	subs	r3, #4
 8011cb2:	2a00      	cmp	r2, #0
 8011cb4:	d1cc      	bne.n	8011c50 <quorem+0x9c>
 8011cb6:	3c01      	subs	r4, #1
 8011cb8:	e7c7      	b.n	8011c4a <quorem+0x96>
 8011cba:	6812      	ldr	r2, [r2, #0]
 8011cbc:	3b04      	subs	r3, #4
 8011cbe:	2a00      	cmp	r2, #0
 8011cc0:	d1f0      	bne.n	8011ca4 <quorem+0xf0>
 8011cc2:	3c01      	subs	r4, #1
 8011cc4:	e7eb      	b.n	8011c9e <quorem+0xea>
 8011cc6:	2000      	movs	r0, #0
 8011cc8:	e7ee      	b.n	8011ca8 <quorem+0xf4>
 8011cca:	0000      	movs	r0, r0
 8011ccc:	0000      	movs	r0, r0
	...

08011cd0 <_dtoa_r>:
 8011cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cd4:	ed2d 8b02 	vpush	{d8}
 8011cd8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011cda:	b091      	sub	sp, #68	; 0x44
 8011cdc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8011ce0:	ec59 8b10 	vmov	r8, r9, d0
 8011ce4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8011ce6:	9106      	str	r1, [sp, #24]
 8011ce8:	4606      	mov	r6, r0
 8011cea:	9208      	str	r2, [sp, #32]
 8011cec:	930c      	str	r3, [sp, #48]	; 0x30
 8011cee:	b975      	cbnz	r5, 8011d0e <_dtoa_r+0x3e>
 8011cf0:	2010      	movs	r0, #16
 8011cf2:	f7ff fa07 	bl	8011104 <malloc>
 8011cf6:	4602      	mov	r2, r0
 8011cf8:	6270      	str	r0, [r6, #36]	; 0x24
 8011cfa:	b920      	cbnz	r0, 8011d06 <_dtoa_r+0x36>
 8011cfc:	4baa      	ldr	r3, [pc, #680]	; (8011fa8 <_dtoa_r+0x2d8>)
 8011cfe:	21ea      	movs	r1, #234	; 0xea
 8011d00:	48aa      	ldr	r0, [pc, #680]	; (8011fac <_dtoa_r+0x2dc>)
 8011d02:	f001 f8fd 	bl	8012f00 <__assert_func>
 8011d06:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011d0a:	6005      	str	r5, [r0, #0]
 8011d0c:	60c5      	str	r5, [r0, #12]
 8011d0e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8011d10:	6819      	ldr	r1, [r3, #0]
 8011d12:	b151      	cbz	r1, 8011d2a <_dtoa_r+0x5a>
 8011d14:	685a      	ldr	r2, [r3, #4]
 8011d16:	604a      	str	r2, [r1, #4]
 8011d18:	2301      	movs	r3, #1
 8011d1a:	4093      	lsls	r3, r2
 8011d1c:	608b      	str	r3, [r1, #8]
 8011d1e:	4630      	mov	r0, r6
 8011d20:	f000 fd94 	bl	801284c <_Bfree>
 8011d24:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8011d26:	2200      	movs	r2, #0
 8011d28:	601a      	str	r2, [r3, #0]
 8011d2a:	f1b9 0300 	subs.w	r3, r9, #0
 8011d2e:	bfbb      	ittet	lt
 8011d30:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8011d34:	9303      	strlt	r3, [sp, #12]
 8011d36:	2300      	movge	r3, #0
 8011d38:	2201      	movlt	r2, #1
 8011d3a:	bfac      	ite	ge
 8011d3c:	6023      	strge	r3, [r4, #0]
 8011d3e:	6022      	strlt	r2, [r4, #0]
 8011d40:	4b9b      	ldr	r3, [pc, #620]	; (8011fb0 <_dtoa_r+0x2e0>)
 8011d42:	9c03      	ldr	r4, [sp, #12]
 8011d44:	43a3      	bics	r3, r4
 8011d46:	d11c      	bne.n	8011d82 <_dtoa_r+0xb2>
 8011d48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011d4a:	f242 730f 	movw	r3, #9999	; 0x270f
 8011d4e:	6013      	str	r3, [r2, #0]
 8011d50:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8011d54:	ea53 0308 	orrs.w	r3, r3, r8
 8011d58:	f000 84fd 	beq.w	8012756 <_dtoa_r+0xa86>
 8011d5c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011d5e:	b963      	cbnz	r3, 8011d7a <_dtoa_r+0xaa>
 8011d60:	4b94      	ldr	r3, [pc, #592]	; (8011fb4 <_dtoa_r+0x2e4>)
 8011d62:	e01f      	b.n	8011da4 <_dtoa_r+0xd4>
 8011d64:	4b94      	ldr	r3, [pc, #592]	; (8011fb8 <_dtoa_r+0x2e8>)
 8011d66:	9301      	str	r3, [sp, #4]
 8011d68:	3308      	adds	r3, #8
 8011d6a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8011d6c:	6013      	str	r3, [r2, #0]
 8011d6e:	9801      	ldr	r0, [sp, #4]
 8011d70:	b011      	add	sp, #68	; 0x44
 8011d72:	ecbd 8b02 	vpop	{d8}
 8011d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d7a:	4b8e      	ldr	r3, [pc, #568]	; (8011fb4 <_dtoa_r+0x2e4>)
 8011d7c:	9301      	str	r3, [sp, #4]
 8011d7e:	3303      	adds	r3, #3
 8011d80:	e7f3      	b.n	8011d6a <_dtoa_r+0x9a>
 8011d82:	ed9d 8b02 	vldr	d8, [sp, #8]
 8011d86:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d8e:	d10b      	bne.n	8011da8 <_dtoa_r+0xd8>
 8011d90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011d92:	2301      	movs	r3, #1
 8011d94:	6013      	str	r3, [r2, #0]
 8011d96:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	f000 84d9 	beq.w	8012750 <_dtoa_r+0xa80>
 8011d9e:	4887      	ldr	r0, [pc, #540]	; (8011fbc <_dtoa_r+0x2ec>)
 8011da0:	6018      	str	r0, [r3, #0]
 8011da2:	1e43      	subs	r3, r0, #1
 8011da4:	9301      	str	r3, [sp, #4]
 8011da6:	e7e2      	b.n	8011d6e <_dtoa_r+0x9e>
 8011da8:	a90f      	add	r1, sp, #60	; 0x3c
 8011daa:	aa0e      	add	r2, sp, #56	; 0x38
 8011dac:	4630      	mov	r0, r6
 8011dae:	eeb0 0b48 	vmov.f64	d0, d8
 8011db2:	f001 f833 	bl	8012e1c <__d2b>
 8011db6:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8011dba:	4605      	mov	r5, r0
 8011dbc:	980e      	ldr	r0, [sp, #56]	; 0x38
 8011dbe:	2900      	cmp	r1, #0
 8011dc0:	d046      	beq.n	8011e50 <_dtoa_r+0x180>
 8011dc2:	ee18 4a90 	vmov	r4, s17
 8011dc6:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8011dca:	ec53 2b18 	vmov	r2, r3, d8
 8011dce:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8011dd2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011dd6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8011dda:	2400      	movs	r4, #0
 8011ddc:	ec43 2b16 	vmov	d6, r2, r3
 8011de0:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8011de4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8011f90 <_dtoa_r+0x2c0>
 8011de8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011dec:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8011f98 <_dtoa_r+0x2c8>
 8011df0:	eea7 6b05 	vfma.f64	d6, d7, d5
 8011df4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8011fa0 <_dtoa_r+0x2d0>
 8011df8:	ee07 1a90 	vmov	s15, r1
 8011dfc:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8011e00:	eeb0 7b46 	vmov.f64	d7, d6
 8011e04:	eea4 7b05 	vfma.f64	d7, d4, d5
 8011e08:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8011e0c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8011e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e14:	ee16 ba90 	vmov	fp, s13
 8011e18:	940a      	str	r4, [sp, #40]	; 0x28
 8011e1a:	d508      	bpl.n	8011e2e <_dtoa_r+0x15e>
 8011e1c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8011e20:	eeb4 6b47 	vcmp.f64	d6, d7
 8011e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e28:	bf18      	it	ne
 8011e2a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8011e2e:	f1bb 0f16 	cmp.w	fp, #22
 8011e32:	d82f      	bhi.n	8011e94 <_dtoa_r+0x1c4>
 8011e34:	4b62      	ldr	r3, [pc, #392]	; (8011fc0 <_dtoa_r+0x2f0>)
 8011e36:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8011e3a:	ed93 7b00 	vldr	d7, [r3]
 8011e3e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8011e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e46:	d501      	bpl.n	8011e4c <_dtoa_r+0x17c>
 8011e48:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011e4c:	2300      	movs	r3, #0
 8011e4e:	e022      	b.n	8011e96 <_dtoa_r+0x1c6>
 8011e50:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011e52:	4401      	add	r1, r0
 8011e54:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8011e58:	2b20      	cmp	r3, #32
 8011e5a:	bfc1      	itttt	gt
 8011e5c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8011e60:	fa04 f303 	lslgt.w	r3, r4, r3
 8011e64:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8011e68:	fa28 f804 	lsrgt.w	r8, r8, r4
 8011e6c:	bfd6      	itet	le
 8011e6e:	f1c3 0320 	rsble	r3, r3, #32
 8011e72:	ea43 0808 	orrgt.w	r8, r3, r8
 8011e76:	fa08 f803 	lslle.w	r8, r8, r3
 8011e7a:	ee07 8a90 	vmov	s15, r8
 8011e7e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8011e82:	3901      	subs	r1, #1
 8011e84:	ee17 4a90 	vmov	r4, s15
 8011e88:	ec53 2b17 	vmov	r2, r3, d7
 8011e8c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8011e90:	2401      	movs	r4, #1
 8011e92:	e7a3      	b.n	8011ddc <_dtoa_r+0x10c>
 8011e94:	2301      	movs	r3, #1
 8011e96:	930b      	str	r3, [sp, #44]	; 0x2c
 8011e98:	1a43      	subs	r3, r0, r1
 8011e9a:	1e5a      	subs	r2, r3, #1
 8011e9c:	bf45      	ittet	mi
 8011e9e:	f1c3 0301 	rsbmi	r3, r3, #1
 8011ea2:	9304      	strmi	r3, [sp, #16]
 8011ea4:	2300      	movpl	r3, #0
 8011ea6:	2300      	movmi	r3, #0
 8011ea8:	9205      	str	r2, [sp, #20]
 8011eaa:	bf54      	ite	pl
 8011eac:	9304      	strpl	r3, [sp, #16]
 8011eae:	9305      	strmi	r3, [sp, #20]
 8011eb0:	f1bb 0f00 	cmp.w	fp, #0
 8011eb4:	db18      	blt.n	8011ee8 <_dtoa_r+0x218>
 8011eb6:	9b05      	ldr	r3, [sp, #20]
 8011eb8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8011ebc:	445b      	add	r3, fp
 8011ebe:	9305      	str	r3, [sp, #20]
 8011ec0:	2300      	movs	r3, #0
 8011ec2:	9a06      	ldr	r2, [sp, #24]
 8011ec4:	2a09      	cmp	r2, #9
 8011ec6:	d849      	bhi.n	8011f5c <_dtoa_r+0x28c>
 8011ec8:	2a05      	cmp	r2, #5
 8011eca:	bfc4      	itt	gt
 8011ecc:	3a04      	subgt	r2, #4
 8011ece:	9206      	strgt	r2, [sp, #24]
 8011ed0:	9a06      	ldr	r2, [sp, #24]
 8011ed2:	f1a2 0202 	sub.w	r2, r2, #2
 8011ed6:	bfcc      	ite	gt
 8011ed8:	2400      	movgt	r4, #0
 8011eda:	2401      	movle	r4, #1
 8011edc:	2a03      	cmp	r2, #3
 8011ede:	d848      	bhi.n	8011f72 <_dtoa_r+0x2a2>
 8011ee0:	e8df f002 	tbb	[pc, r2]
 8011ee4:	3a2c2e0b 	.word	0x3a2c2e0b
 8011ee8:	9b04      	ldr	r3, [sp, #16]
 8011eea:	2200      	movs	r2, #0
 8011eec:	eba3 030b 	sub.w	r3, r3, fp
 8011ef0:	9304      	str	r3, [sp, #16]
 8011ef2:	9209      	str	r2, [sp, #36]	; 0x24
 8011ef4:	f1cb 0300 	rsb	r3, fp, #0
 8011ef8:	e7e3      	b.n	8011ec2 <_dtoa_r+0x1f2>
 8011efa:	2200      	movs	r2, #0
 8011efc:	9207      	str	r2, [sp, #28]
 8011efe:	9a08      	ldr	r2, [sp, #32]
 8011f00:	2a00      	cmp	r2, #0
 8011f02:	dc39      	bgt.n	8011f78 <_dtoa_r+0x2a8>
 8011f04:	f04f 0a01 	mov.w	sl, #1
 8011f08:	46d1      	mov	r9, sl
 8011f0a:	4652      	mov	r2, sl
 8011f0c:	f8cd a020 	str.w	sl, [sp, #32]
 8011f10:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8011f12:	2100      	movs	r1, #0
 8011f14:	6079      	str	r1, [r7, #4]
 8011f16:	2004      	movs	r0, #4
 8011f18:	f100 0c14 	add.w	ip, r0, #20
 8011f1c:	4594      	cmp	ip, r2
 8011f1e:	6879      	ldr	r1, [r7, #4]
 8011f20:	d92f      	bls.n	8011f82 <_dtoa_r+0x2b2>
 8011f22:	4630      	mov	r0, r6
 8011f24:	930d      	str	r3, [sp, #52]	; 0x34
 8011f26:	f000 fc51 	bl	80127cc <_Balloc>
 8011f2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011f2c:	9001      	str	r0, [sp, #4]
 8011f2e:	4602      	mov	r2, r0
 8011f30:	2800      	cmp	r0, #0
 8011f32:	d149      	bne.n	8011fc8 <_dtoa_r+0x2f8>
 8011f34:	4b23      	ldr	r3, [pc, #140]	; (8011fc4 <_dtoa_r+0x2f4>)
 8011f36:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8011f3a:	e6e1      	b.n	8011d00 <_dtoa_r+0x30>
 8011f3c:	2201      	movs	r2, #1
 8011f3e:	e7dd      	b.n	8011efc <_dtoa_r+0x22c>
 8011f40:	2200      	movs	r2, #0
 8011f42:	9207      	str	r2, [sp, #28]
 8011f44:	9a08      	ldr	r2, [sp, #32]
 8011f46:	eb0b 0a02 	add.w	sl, fp, r2
 8011f4a:	f10a 0901 	add.w	r9, sl, #1
 8011f4e:	464a      	mov	r2, r9
 8011f50:	2a01      	cmp	r2, #1
 8011f52:	bfb8      	it	lt
 8011f54:	2201      	movlt	r2, #1
 8011f56:	e7db      	b.n	8011f10 <_dtoa_r+0x240>
 8011f58:	2201      	movs	r2, #1
 8011f5a:	e7f2      	b.n	8011f42 <_dtoa_r+0x272>
 8011f5c:	2401      	movs	r4, #1
 8011f5e:	2200      	movs	r2, #0
 8011f60:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8011f64:	f04f 3aff 	mov.w	sl, #4294967295
 8011f68:	2100      	movs	r1, #0
 8011f6a:	46d1      	mov	r9, sl
 8011f6c:	2212      	movs	r2, #18
 8011f6e:	9108      	str	r1, [sp, #32]
 8011f70:	e7ce      	b.n	8011f10 <_dtoa_r+0x240>
 8011f72:	2201      	movs	r2, #1
 8011f74:	9207      	str	r2, [sp, #28]
 8011f76:	e7f5      	b.n	8011f64 <_dtoa_r+0x294>
 8011f78:	f8dd a020 	ldr.w	sl, [sp, #32]
 8011f7c:	46d1      	mov	r9, sl
 8011f7e:	4652      	mov	r2, sl
 8011f80:	e7c6      	b.n	8011f10 <_dtoa_r+0x240>
 8011f82:	3101      	adds	r1, #1
 8011f84:	6079      	str	r1, [r7, #4]
 8011f86:	0040      	lsls	r0, r0, #1
 8011f88:	e7c6      	b.n	8011f18 <_dtoa_r+0x248>
 8011f8a:	bf00      	nop
 8011f8c:	f3af 8000 	nop.w
 8011f90:	636f4361 	.word	0x636f4361
 8011f94:	3fd287a7 	.word	0x3fd287a7
 8011f98:	8b60c8b3 	.word	0x8b60c8b3
 8011f9c:	3fc68a28 	.word	0x3fc68a28
 8011fa0:	509f79fb 	.word	0x509f79fb
 8011fa4:	3fd34413 	.word	0x3fd34413
 8011fa8:	08013ae5 	.word	0x08013ae5
 8011fac:	08013afc 	.word	0x08013afc
 8011fb0:	7ff00000 	.word	0x7ff00000
 8011fb4:	08013ae1 	.word	0x08013ae1
 8011fb8:	08013ad8 	.word	0x08013ad8
 8011fbc:	08013ab5 	.word	0x08013ab5
 8011fc0:	08013bf0 	.word	0x08013bf0
 8011fc4:	08013b57 	.word	0x08013b57
 8011fc8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8011fca:	9901      	ldr	r1, [sp, #4]
 8011fcc:	6011      	str	r1, [r2, #0]
 8011fce:	f1b9 0f0e 	cmp.w	r9, #14
 8011fd2:	d86c      	bhi.n	80120ae <_dtoa_r+0x3de>
 8011fd4:	2c00      	cmp	r4, #0
 8011fd6:	d06a      	beq.n	80120ae <_dtoa_r+0x3de>
 8011fd8:	f1bb 0f00 	cmp.w	fp, #0
 8011fdc:	f340 80a0 	ble.w	8012120 <_dtoa_r+0x450>
 8011fe0:	49c1      	ldr	r1, [pc, #772]	; (80122e8 <_dtoa_r+0x618>)
 8011fe2:	f00b 020f 	and.w	r2, fp, #15
 8011fe6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8011fea:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8011fee:	ed92 7b00 	vldr	d7, [r2]
 8011ff2:	ea4f 112b 	mov.w	r1, fp, asr #4
 8011ff6:	f000 8087 	beq.w	8012108 <_dtoa_r+0x438>
 8011ffa:	4abc      	ldr	r2, [pc, #752]	; (80122ec <_dtoa_r+0x61c>)
 8011ffc:	ed92 6b08 	vldr	d6, [r2, #32]
 8012000:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8012004:	ed8d 6b02 	vstr	d6, [sp, #8]
 8012008:	f001 010f 	and.w	r1, r1, #15
 801200c:	2203      	movs	r2, #3
 801200e:	48b7      	ldr	r0, [pc, #732]	; (80122ec <_dtoa_r+0x61c>)
 8012010:	2900      	cmp	r1, #0
 8012012:	d17b      	bne.n	801210c <_dtoa_r+0x43c>
 8012014:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012018:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801201c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012020:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012022:	2900      	cmp	r1, #0
 8012024:	f000 80a2 	beq.w	801216c <_dtoa_r+0x49c>
 8012028:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801202c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012030:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012038:	f140 8098 	bpl.w	801216c <_dtoa_r+0x49c>
 801203c:	f1b9 0f00 	cmp.w	r9, #0
 8012040:	f000 8094 	beq.w	801216c <_dtoa_r+0x49c>
 8012044:	f1ba 0f00 	cmp.w	sl, #0
 8012048:	dd2f      	ble.n	80120aa <_dtoa_r+0x3da>
 801204a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801204e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012052:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012056:	f10b 37ff 	add.w	r7, fp, #4294967295
 801205a:	3201      	adds	r2, #1
 801205c:	4650      	mov	r0, sl
 801205e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012062:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8012066:	ee07 2a90 	vmov	s15, r2
 801206a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801206e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8012072:	ee15 4a90 	vmov	r4, s11
 8012076:	ec52 1b15 	vmov	r1, r2, d5
 801207a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 801207e:	2800      	cmp	r0, #0
 8012080:	d177      	bne.n	8012172 <_dtoa_r+0x4a2>
 8012082:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8012086:	ee36 6b47 	vsub.f64	d6, d6, d7
 801208a:	ec42 1b17 	vmov	d7, r1, r2
 801208e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012096:	f300 8263 	bgt.w	8012560 <_dtoa_r+0x890>
 801209a:	eeb1 7b47 	vneg.f64	d7, d7
 801209e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80120a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120a6:	f100 8258 	bmi.w	801255a <_dtoa_r+0x88a>
 80120aa:	ed8d 8b02 	vstr	d8, [sp, #8]
 80120ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80120b0:	2a00      	cmp	r2, #0
 80120b2:	f2c0 811d 	blt.w	80122f0 <_dtoa_r+0x620>
 80120b6:	f1bb 0f0e 	cmp.w	fp, #14
 80120ba:	f300 8119 	bgt.w	80122f0 <_dtoa_r+0x620>
 80120be:	4b8a      	ldr	r3, [pc, #552]	; (80122e8 <_dtoa_r+0x618>)
 80120c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80120c4:	ed93 6b00 	vldr	d6, [r3]
 80120c8:	9b08      	ldr	r3, [sp, #32]
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	f280 80b7 	bge.w	801223e <_dtoa_r+0x56e>
 80120d0:	f1b9 0f00 	cmp.w	r9, #0
 80120d4:	f300 80b3 	bgt.w	801223e <_dtoa_r+0x56e>
 80120d8:	f040 823f 	bne.w	801255a <_dtoa_r+0x88a>
 80120dc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80120e0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80120e4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80120e8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80120ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120f0:	464c      	mov	r4, r9
 80120f2:	464f      	mov	r7, r9
 80120f4:	f280 8215 	bge.w	8012522 <_dtoa_r+0x852>
 80120f8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80120fc:	2331      	movs	r3, #49	; 0x31
 80120fe:	f808 3b01 	strb.w	r3, [r8], #1
 8012102:	f10b 0b01 	add.w	fp, fp, #1
 8012106:	e211      	b.n	801252c <_dtoa_r+0x85c>
 8012108:	2202      	movs	r2, #2
 801210a:	e780      	b.n	801200e <_dtoa_r+0x33e>
 801210c:	07cc      	lsls	r4, r1, #31
 801210e:	d504      	bpl.n	801211a <_dtoa_r+0x44a>
 8012110:	ed90 6b00 	vldr	d6, [r0]
 8012114:	3201      	adds	r2, #1
 8012116:	ee27 7b06 	vmul.f64	d7, d7, d6
 801211a:	1049      	asrs	r1, r1, #1
 801211c:	3008      	adds	r0, #8
 801211e:	e777      	b.n	8012010 <_dtoa_r+0x340>
 8012120:	d022      	beq.n	8012168 <_dtoa_r+0x498>
 8012122:	f1cb 0100 	rsb	r1, fp, #0
 8012126:	4a70      	ldr	r2, [pc, #448]	; (80122e8 <_dtoa_r+0x618>)
 8012128:	f001 000f 	and.w	r0, r1, #15
 801212c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8012130:	ed92 7b00 	vldr	d7, [r2]
 8012134:	ee28 7b07 	vmul.f64	d7, d8, d7
 8012138:	ed8d 7b02 	vstr	d7, [sp, #8]
 801213c:	486b      	ldr	r0, [pc, #428]	; (80122ec <_dtoa_r+0x61c>)
 801213e:	1109      	asrs	r1, r1, #4
 8012140:	2400      	movs	r4, #0
 8012142:	2202      	movs	r2, #2
 8012144:	b929      	cbnz	r1, 8012152 <_dtoa_r+0x482>
 8012146:	2c00      	cmp	r4, #0
 8012148:	f43f af6a 	beq.w	8012020 <_dtoa_r+0x350>
 801214c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012150:	e766      	b.n	8012020 <_dtoa_r+0x350>
 8012152:	07cf      	lsls	r7, r1, #31
 8012154:	d505      	bpl.n	8012162 <_dtoa_r+0x492>
 8012156:	ed90 6b00 	vldr	d6, [r0]
 801215a:	3201      	adds	r2, #1
 801215c:	2401      	movs	r4, #1
 801215e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012162:	1049      	asrs	r1, r1, #1
 8012164:	3008      	adds	r0, #8
 8012166:	e7ed      	b.n	8012144 <_dtoa_r+0x474>
 8012168:	2202      	movs	r2, #2
 801216a:	e759      	b.n	8012020 <_dtoa_r+0x350>
 801216c:	465f      	mov	r7, fp
 801216e:	4648      	mov	r0, r9
 8012170:	e775      	b.n	801205e <_dtoa_r+0x38e>
 8012172:	ec42 1b17 	vmov	d7, r1, r2
 8012176:	4a5c      	ldr	r2, [pc, #368]	; (80122e8 <_dtoa_r+0x618>)
 8012178:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801217c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8012180:	9a01      	ldr	r2, [sp, #4]
 8012182:	1814      	adds	r4, r2, r0
 8012184:	9a07      	ldr	r2, [sp, #28]
 8012186:	b352      	cbz	r2, 80121de <_dtoa_r+0x50e>
 8012188:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801218c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8012190:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012194:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8012198:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801219c:	ee35 7b47 	vsub.f64	d7, d5, d7
 80121a0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80121a4:	ee14 2a90 	vmov	r2, s9
 80121a8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80121ac:	3230      	adds	r2, #48	; 0x30
 80121ae:	ee36 6b45 	vsub.f64	d6, d6, d5
 80121b2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80121b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121ba:	f808 2b01 	strb.w	r2, [r8], #1
 80121be:	d439      	bmi.n	8012234 <_dtoa_r+0x564>
 80121c0:	ee32 5b46 	vsub.f64	d5, d2, d6
 80121c4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80121c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121cc:	d472      	bmi.n	80122b4 <_dtoa_r+0x5e4>
 80121ce:	45a0      	cmp	r8, r4
 80121d0:	f43f af6b 	beq.w	80120aa <_dtoa_r+0x3da>
 80121d4:	ee27 7b03 	vmul.f64	d7, d7, d3
 80121d8:	ee26 6b03 	vmul.f64	d6, d6, d3
 80121dc:	e7e0      	b.n	80121a0 <_dtoa_r+0x4d0>
 80121de:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80121e2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80121e6:	4621      	mov	r1, r4
 80121e8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80121ec:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80121f0:	ee14 2a90 	vmov	r2, s9
 80121f4:	3230      	adds	r2, #48	; 0x30
 80121f6:	f808 2b01 	strb.w	r2, [r8], #1
 80121fa:	45a0      	cmp	r8, r4
 80121fc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012200:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012204:	d118      	bne.n	8012238 <_dtoa_r+0x568>
 8012206:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801220a:	ee37 4b05 	vadd.f64	d4, d7, d5
 801220e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8012212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012216:	dc4d      	bgt.n	80122b4 <_dtoa_r+0x5e4>
 8012218:	ee35 7b47 	vsub.f64	d7, d5, d7
 801221c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012224:	f57f af41 	bpl.w	80120aa <_dtoa_r+0x3da>
 8012228:	4688      	mov	r8, r1
 801222a:	3901      	subs	r1, #1
 801222c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8012230:	2b30      	cmp	r3, #48	; 0x30
 8012232:	d0f9      	beq.n	8012228 <_dtoa_r+0x558>
 8012234:	46bb      	mov	fp, r7
 8012236:	e02a      	b.n	801228e <_dtoa_r+0x5be>
 8012238:	ee26 6b03 	vmul.f64	d6, d6, d3
 801223c:	e7d6      	b.n	80121ec <_dtoa_r+0x51c>
 801223e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012242:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8012246:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801224a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801224e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8012252:	ee15 3a10 	vmov	r3, s10
 8012256:	3330      	adds	r3, #48	; 0x30
 8012258:	f808 3b01 	strb.w	r3, [r8], #1
 801225c:	9b01      	ldr	r3, [sp, #4]
 801225e:	eba8 0303 	sub.w	r3, r8, r3
 8012262:	4599      	cmp	r9, r3
 8012264:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8012268:	eea3 7b46 	vfms.f64	d7, d3, d6
 801226c:	d133      	bne.n	80122d6 <_dtoa_r+0x606>
 801226e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8012272:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801227a:	dc1a      	bgt.n	80122b2 <_dtoa_r+0x5e2>
 801227c:	eeb4 7b46 	vcmp.f64	d7, d6
 8012280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012284:	d103      	bne.n	801228e <_dtoa_r+0x5be>
 8012286:	ee15 3a10 	vmov	r3, s10
 801228a:	07d9      	lsls	r1, r3, #31
 801228c:	d411      	bmi.n	80122b2 <_dtoa_r+0x5e2>
 801228e:	4629      	mov	r1, r5
 8012290:	4630      	mov	r0, r6
 8012292:	f000 fadb 	bl	801284c <_Bfree>
 8012296:	2300      	movs	r3, #0
 8012298:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801229a:	f888 3000 	strb.w	r3, [r8]
 801229e:	f10b 0301 	add.w	r3, fp, #1
 80122a2:	6013      	str	r3, [r2, #0]
 80122a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	f43f ad61 	beq.w	8011d6e <_dtoa_r+0x9e>
 80122ac:	f8c3 8000 	str.w	r8, [r3]
 80122b0:	e55d      	b.n	8011d6e <_dtoa_r+0x9e>
 80122b2:	465f      	mov	r7, fp
 80122b4:	4643      	mov	r3, r8
 80122b6:	4698      	mov	r8, r3
 80122b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80122bc:	2a39      	cmp	r2, #57	; 0x39
 80122be:	d106      	bne.n	80122ce <_dtoa_r+0x5fe>
 80122c0:	9a01      	ldr	r2, [sp, #4]
 80122c2:	429a      	cmp	r2, r3
 80122c4:	d1f7      	bne.n	80122b6 <_dtoa_r+0x5e6>
 80122c6:	9901      	ldr	r1, [sp, #4]
 80122c8:	2230      	movs	r2, #48	; 0x30
 80122ca:	3701      	adds	r7, #1
 80122cc:	700a      	strb	r2, [r1, #0]
 80122ce:	781a      	ldrb	r2, [r3, #0]
 80122d0:	3201      	adds	r2, #1
 80122d2:	701a      	strb	r2, [r3, #0]
 80122d4:	e7ae      	b.n	8012234 <_dtoa_r+0x564>
 80122d6:	ee27 7b04 	vmul.f64	d7, d7, d4
 80122da:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80122de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122e2:	d1b2      	bne.n	801224a <_dtoa_r+0x57a>
 80122e4:	e7d3      	b.n	801228e <_dtoa_r+0x5be>
 80122e6:	bf00      	nop
 80122e8:	08013bf0 	.word	0x08013bf0
 80122ec:	08013bc8 	.word	0x08013bc8
 80122f0:	9907      	ldr	r1, [sp, #28]
 80122f2:	2900      	cmp	r1, #0
 80122f4:	f000 80d0 	beq.w	8012498 <_dtoa_r+0x7c8>
 80122f8:	9906      	ldr	r1, [sp, #24]
 80122fa:	2901      	cmp	r1, #1
 80122fc:	f300 80b4 	bgt.w	8012468 <_dtoa_r+0x798>
 8012300:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012302:	2900      	cmp	r1, #0
 8012304:	f000 80ac 	beq.w	8012460 <_dtoa_r+0x790>
 8012308:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801230c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8012310:	461c      	mov	r4, r3
 8012312:	930a      	str	r3, [sp, #40]	; 0x28
 8012314:	9b04      	ldr	r3, [sp, #16]
 8012316:	4413      	add	r3, r2
 8012318:	9304      	str	r3, [sp, #16]
 801231a:	9b05      	ldr	r3, [sp, #20]
 801231c:	2101      	movs	r1, #1
 801231e:	4413      	add	r3, r2
 8012320:	4630      	mov	r0, r6
 8012322:	9305      	str	r3, [sp, #20]
 8012324:	f000 fb4a 	bl	80129bc <__i2b>
 8012328:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801232a:	4607      	mov	r7, r0
 801232c:	f1b8 0f00 	cmp.w	r8, #0
 8012330:	dd0d      	ble.n	801234e <_dtoa_r+0x67e>
 8012332:	9a05      	ldr	r2, [sp, #20]
 8012334:	2a00      	cmp	r2, #0
 8012336:	dd0a      	ble.n	801234e <_dtoa_r+0x67e>
 8012338:	4542      	cmp	r2, r8
 801233a:	9904      	ldr	r1, [sp, #16]
 801233c:	bfa8      	it	ge
 801233e:	4642      	movge	r2, r8
 8012340:	1a89      	subs	r1, r1, r2
 8012342:	9104      	str	r1, [sp, #16]
 8012344:	9905      	ldr	r1, [sp, #20]
 8012346:	eba8 0802 	sub.w	r8, r8, r2
 801234a:	1a8a      	subs	r2, r1, r2
 801234c:	9205      	str	r2, [sp, #20]
 801234e:	b303      	cbz	r3, 8012392 <_dtoa_r+0x6c2>
 8012350:	9a07      	ldr	r2, [sp, #28]
 8012352:	2a00      	cmp	r2, #0
 8012354:	f000 80a5 	beq.w	80124a2 <_dtoa_r+0x7d2>
 8012358:	2c00      	cmp	r4, #0
 801235a:	dd13      	ble.n	8012384 <_dtoa_r+0x6b4>
 801235c:	4639      	mov	r1, r7
 801235e:	4622      	mov	r2, r4
 8012360:	4630      	mov	r0, r6
 8012362:	930d      	str	r3, [sp, #52]	; 0x34
 8012364:	f000 fbea 	bl	8012b3c <__pow5mult>
 8012368:	462a      	mov	r2, r5
 801236a:	4601      	mov	r1, r0
 801236c:	4607      	mov	r7, r0
 801236e:	4630      	mov	r0, r6
 8012370:	f000 fb3a 	bl	80129e8 <__multiply>
 8012374:	4629      	mov	r1, r5
 8012376:	900a      	str	r0, [sp, #40]	; 0x28
 8012378:	4630      	mov	r0, r6
 801237a:	f000 fa67 	bl	801284c <_Bfree>
 801237e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012380:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012382:	4615      	mov	r5, r2
 8012384:	1b1a      	subs	r2, r3, r4
 8012386:	d004      	beq.n	8012392 <_dtoa_r+0x6c2>
 8012388:	4629      	mov	r1, r5
 801238a:	4630      	mov	r0, r6
 801238c:	f000 fbd6 	bl	8012b3c <__pow5mult>
 8012390:	4605      	mov	r5, r0
 8012392:	2101      	movs	r1, #1
 8012394:	4630      	mov	r0, r6
 8012396:	f000 fb11 	bl	80129bc <__i2b>
 801239a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801239c:	2b00      	cmp	r3, #0
 801239e:	4604      	mov	r4, r0
 80123a0:	f340 8081 	ble.w	80124a6 <_dtoa_r+0x7d6>
 80123a4:	461a      	mov	r2, r3
 80123a6:	4601      	mov	r1, r0
 80123a8:	4630      	mov	r0, r6
 80123aa:	f000 fbc7 	bl	8012b3c <__pow5mult>
 80123ae:	9b06      	ldr	r3, [sp, #24]
 80123b0:	2b01      	cmp	r3, #1
 80123b2:	4604      	mov	r4, r0
 80123b4:	dd7a      	ble.n	80124ac <_dtoa_r+0x7dc>
 80123b6:	2300      	movs	r3, #0
 80123b8:	930a      	str	r3, [sp, #40]	; 0x28
 80123ba:	6922      	ldr	r2, [r4, #16]
 80123bc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80123c0:	6910      	ldr	r0, [r2, #16]
 80123c2:	f000 faab 	bl	801291c <__hi0bits>
 80123c6:	f1c0 0020 	rsb	r0, r0, #32
 80123ca:	9b05      	ldr	r3, [sp, #20]
 80123cc:	4418      	add	r0, r3
 80123ce:	f010 001f 	ands.w	r0, r0, #31
 80123d2:	f000 808c 	beq.w	80124ee <_dtoa_r+0x81e>
 80123d6:	f1c0 0220 	rsb	r2, r0, #32
 80123da:	2a04      	cmp	r2, #4
 80123dc:	f340 8085 	ble.w	80124ea <_dtoa_r+0x81a>
 80123e0:	f1c0 001c 	rsb	r0, r0, #28
 80123e4:	9b04      	ldr	r3, [sp, #16]
 80123e6:	4403      	add	r3, r0
 80123e8:	9304      	str	r3, [sp, #16]
 80123ea:	9b05      	ldr	r3, [sp, #20]
 80123ec:	4403      	add	r3, r0
 80123ee:	4480      	add	r8, r0
 80123f0:	9305      	str	r3, [sp, #20]
 80123f2:	9b04      	ldr	r3, [sp, #16]
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	dd05      	ble.n	8012404 <_dtoa_r+0x734>
 80123f8:	4629      	mov	r1, r5
 80123fa:	461a      	mov	r2, r3
 80123fc:	4630      	mov	r0, r6
 80123fe:	f000 fbf7 	bl	8012bf0 <__lshift>
 8012402:	4605      	mov	r5, r0
 8012404:	9b05      	ldr	r3, [sp, #20]
 8012406:	2b00      	cmp	r3, #0
 8012408:	dd05      	ble.n	8012416 <_dtoa_r+0x746>
 801240a:	4621      	mov	r1, r4
 801240c:	461a      	mov	r2, r3
 801240e:	4630      	mov	r0, r6
 8012410:	f000 fbee 	bl	8012bf0 <__lshift>
 8012414:	4604      	mov	r4, r0
 8012416:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012418:	2b00      	cmp	r3, #0
 801241a:	d06a      	beq.n	80124f2 <_dtoa_r+0x822>
 801241c:	4621      	mov	r1, r4
 801241e:	4628      	mov	r0, r5
 8012420:	f000 fc56 	bl	8012cd0 <__mcmp>
 8012424:	2800      	cmp	r0, #0
 8012426:	da64      	bge.n	80124f2 <_dtoa_r+0x822>
 8012428:	2300      	movs	r3, #0
 801242a:	4629      	mov	r1, r5
 801242c:	220a      	movs	r2, #10
 801242e:	4630      	mov	r0, r6
 8012430:	f000 fa2e 	bl	8012890 <__multadd>
 8012434:	9b07      	ldr	r3, [sp, #28]
 8012436:	f10b 3bff 	add.w	fp, fp, #4294967295
 801243a:	4605      	mov	r5, r0
 801243c:	2b00      	cmp	r3, #0
 801243e:	f000 8191 	beq.w	8012764 <_dtoa_r+0xa94>
 8012442:	4639      	mov	r1, r7
 8012444:	2300      	movs	r3, #0
 8012446:	220a      	movs	r2, #10
 8012448:	4630      	mov	r0, r6
 801244a:	f000 fa21 	bl	8012890 <__multadd>
 801244e:	f1ba 0f00 	cmp.w	sl, #0
 8012452:	4607      	mov	r7, r0
 8012454:	f300 808d 	bgt.w	8012572 <_dtoa_r+0x8a2>
 8012458:	9b06      	ldr	r3, [sp, #24]
 801245a:	2b02      	cmp	r3, #2
 801245c:	dc50      	bgt.n	8012500 <_dtoa_r+0x830>
 801245e:	e088      	b.n	8012572 <_dtoa_r+0x8a2>
 8012460:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012462:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8012466:	e751      	b.n	801230c <_dtoa_r+0x63c>
 8012468:	f109 34ff 	add.w	r4, r9, #4294967295
 801246c:	42a3      	cmp	r3, r4
 801246e:	bfbf      	itttt	lt
 8012470:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8012472:	1ae3      	sublt	r3, r4, r3
 8012474:	18d2      	addlt	r2, r2, r3
 8012476:	9209      	strlt	r2, [sp, #36]	; 0x24
 8012478:	bfb6      	itet	lt
 801247a:	4623      	movlt	r3, r4
 801247c:	1b1c      	subge	r4, r3, r4
 801247e:	2400      	movlt	r4, #0
 8012480:	f1b9 0f00 	cmp.w	r9, #0
 8012484:	bfb5      	itete	lt
 8012486:	9a04      	ldrlt	r2, [sp, #16]
 8012488:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 801248c:	eba2 0809 	sublt.w	r8, r2, r9
 8012490:	464a      	movge	r2, r9
 8012492:	bfb8      	it	lt
 8012494:	2200      	movlt	r2, #0
 8012496:	e73c      	b.n	8012312 <_dtoa_r+0x642>
 8012498:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801249c:	9f07      	ldr	r7, [sp, #28]
 801249e:	461c      	mov	r4, r3
 80124a0:	e744      	b.n	801232c <_dtoa_r+0x65c>
 80124a2:	461a      	mov	r2, r3
 80124a4:	e770      	b.n	8012388 <_dtoa_r+0x6b8>
 80124a6:	9b06      	ldr	r3, [sp, #24]
 80124a8:	2b01      	cmp	r3, #1
 80124aa:	dc18      	bgt.n	80124de <_dtoa_r+0x80e>
 80124ac:	9b02      	ldr	r3, [sp, #8]
 80124ae:	b9b3      	cbnz	r3, 80124de <_dtoa_r+0x80e>
 80124b0:	9b03      	ldr	r3, [sp, #12]
 80124b2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80124b6:	b9a2      	cbnz	r2, 80124e2 <_dtoa_r+0x812>
 80124b8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80124bc:	0d12      	lsrs	r2, r2, #20
 80124be:	0512      	lsls	r2, r2, #20
 80124c0:	b18a      	cbz	r2, 80124e6 <_dtoa_r+0x816>
 80124c2:	9b04      	ldr	r3, [sp, #16]
 80124c4:	3301      	adds	r3, #1
 80124c6:	9304      	str	r3, [sp, #16]
 80124c8:	9b05      	ldr	r3, [sp, #20]
 80124ca:	3301      	adds	r3, #1
 80124cc:	9305      	str	r3, [sp, #20]
 80124ce:	2301      	movs	r3, #1
 80124d0:	930a      	str	r3, [sp, #40]	; 0x28
 80124d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	f47f af70 	bne.w	80123ba <_dtoa_r+0x6ea>
 80124da:	2001      	movs	r0, #1
 80124dc:	e775      	b.n	80123ca <_dtoa_r+0x6fa>
 80124de:	2300      	movs	r3, #0
 80124e0:	e7f6      	b.n	80124d0 <_dtoa_r+0x800>
 80124e2:	9b02      	ldr	r3, [sp, #8]
 80124e4:	e7f4      	b.n	80124d0 <_dtoa_r+0x800>
 80124e6:	920a      	str	r2, [sp, #40]	; 0x28
 80124e8:	e7f3      	b.n	80124d2 <_dtoa_r+0x802>
 80124ea:	d082      	beq.n	80123f2 <_dtoa_r+0x722>
 80124ec:	4610      	mov	r0, r2
 80124ee:	301c      	adds	r0, #28
 80124f0:	e778      	b.n	80123e4 <_dtoa_r+0x714>
 80124f2:	f1b9 0f00 	cmp.w	r9, #0
 80124f6:	dc37      	bgt.n	8012568 <_dtoa_r+0x898>
 80124f8:	9b06      	ldr	r3, [sp, #24]
 80124fa:	2b02      	cmp	r3, #2
 80124fc:	dd34      	ble.n	8012568 <_dtoa_r+0x898>
 80124fe:	46ca      	mov	sl, r9
 8012500:	f1ba 0f00 	cmp.w	sl, #0
 8012504:	d10d      	bne.n	8012522 <_dtoa_r+0x852>
 8012506:	4621      	mov	r1, r4
 8012508:	4653      	mov	r3, sl
 801250a:	2205      	movs	r2, #5
 801250c:	4630      	mov	r0, r6
 801250e:	f000 f9bf 	bl	8012890 <__multadd>
 8012512:	4601      	mov	r1, r0
 8012514:	4604      	mov	r4, r0
 8012516:	4628      	mov	r0, r5
 8012518:	f000 fbda 	bl	8012cd0 <__mcmp>
 801251c:	2800      	cmp	r0, #0
 801251e:	f73f adeb 	bgt.w	80120f8 <_dtoa_r+0x428>
 8012522:	9b08      	ldr	r3, [sp, #32]
 8012524:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012528:	ea6f 0b03 	mvn.w	fp, r3
 801252c:	f04f 0900 	mov.w	r9, #0
 8012530:	4621      	mov	r1, r4
 8012532:	4630      	mov	r0, r6
 8012534:	f000 f98a 	bl	801284c <_Bfree>
 8012538:	2f00      	cmp	r7, #0
 801253a:	f43f aea8 	beq.w	801228e <_dtoa_r+0x5be>
 801253e:	f1b9 0f00 	cmp.w	r9, #0
 8012542:	d005      	beq.n	8012550 <_dtoa_r+0x880>
 8012544:	45b9      	cmp	r9, r7
 8012546:	d003      	beq.n	8012550 <_dtoa_r+0x880>
 8012548:	4649      	mov	r1, r9
 801254a:	4630      	mov	r0, r6
 801254c:	f000 f97e 	bl	801284c <_Bfree>
 8012550:	4639      	mov	r1, r7
 8012552:	4630      	mov	r0, r6
 8012554:	f000 f97a 	bl	801284c <_Bfree>
 8012558:	e699      	b.n	801228e <_dtoa_r+0x5be>
 801255a:	2400      	movs	r4, #0
 801255c:	4627      	mov	r7, r4
 801255e:	e7e0      	b.n	8012522 <_dtoa_r+0x852>
 8012560:	46bb      	mov	fp, r7
 8012562:	4604      	mov	r4, r0
 8012564:	4607      	mov	r7, r0
 8012566:	e5c7      	b.n	80120f8 <_dtoa_r+0x428>
 8012568:	9b07      	ldr	r3, [sp, #28]
 801256a:	46ca      	mov	sl, r9
 801256c:	2b00      	cmp	r3, #0
 801256e:	f000 8100 	beq.w	8012772 <_dtoa_r+0xaa2>
 8012572:	f1b8 0f00 	cmp.w	r8, #0
 8012576:	dd05      	ble.n	8012584 <_dtoa_r+0x8b4>
 8012578:	4639      	mov	r1, r7
 801257a:	4642      	mov	r2, r8
 801257c:	4630      	mov	r0, r6
 801257e:	f000 fb37 	bl	8012bf0 <__lshift>
 8012582:	4607      	mov	r7, r0
 8012584:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012586:	2b00      	cmp	r3, #0
 8012588:	d05d      	beq.n	8012646 <_dtoa_r+0x976>
 801258a:	6879      	ldr	r1, [r7, #4]
 801258c:	4630      	mov	r0, r6
 801258e:	f000 f91d 	bl	80127cc <_Balloc>
 8012592:	4680      	mov	r8, r0
 8012594:	b928      	cbnz	r0, 80125a2 <_dtoa_r+0x8d2>
 8012596:	4b82      	ldr	r3, [pc, #520]	; (80127a0 <_dtoa_r+0xad0>)
 8012598:	4602      	mov	r2, r0
 801259a:	f240 21ea 	movw	r1, #746	; 0x2ea
 801259e:	f7ff bbaf 	b.w	8011d00 <_dtoa_r+0x30>
 80125a2:	693a      	ldr	r2, [r7, #16]
 80125a4:	3202      	adds	r2, #2
 80125a6:	0092      	lsls	r2, r2, #2
 80125a8:	f107 010c 	add.w	r1, r7, #12
 80125ac:	300c      	adds	r0, #12
 80125ae:	f7fe fdb9 	bl	8011124 <memcpy>
 80125b2:	2201      	movs	r2, #1
 80125b4:	4641      	mov	r1, r8
 80125b6:	4630      	mov	r0, r6
 80125b8:	f000 fb1a 	bl	8012bf0 <__lshift>
 80125bc:	9b01      	ldr	r3, [sp, #4]
 80125be:	3301      	adds	r3, #1
 80125c0:	9304      	str	r3, [sp, #16]
 80125c2:	9b01      	ldr	r3, [sp, #4]
 80125c4:	4453      	add	r3, sl
 80125c6:	9308      	str	r3, [sp, #32]
 80125c8:	9b02      	ldr	r3, [sp, #8]
 80125ca:	f003 0301 	and.w	r3, r3, #1
 80125ce:	46b9      	mov	r9, r7
 80125d0:	9307      	str	r3, [sp, #28]
 80125d2:	4607      	mov	r7, r0
 80125d4:	9b04      	ldr	r3, [sp, #16]
 80125d6:	4621      	mov	r1, r4
 80125d8:	3b01      	subs	r3, #1
 80125da:	4628      	mov	r0, r5
 80125dc:	9302      	str	r3, [sp, #8]
 80125de:	f7ff fae9 	bl	8011bb4 <quorem>
 80125e2:	4603      	mov	r3, r0
 80125e4:	3330      	adds	r3, #48	; 0x30
 80125e6:	9005      	str	r0, [sp, #20]
 80125e8:	4649      	mov	r1, r9
 80125ea:	4628      	mov	r0, r5
 80125ec:	9309      	str	r3, [sp, #36]	; 0x24
 80125ee:	f000 fb6f 	bl	8012cd0 <__mcmp>
 80125f2:	463a      	mov	r2, r7
 80125f4:	4682      	mov	sl, r0
 80125f6:	4621      	mov	r1, r4
 80125f8:	4630      	mov	r0, r6
 80125fa:	f000 fb85 	bl	8012d08 <__mdiff>
 80125fe:	68c2      	ldr	r2, [r0, #12]
 8012600:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012602:	4680      	mov	r8, r0
 8012604:	bb0a      	cbnz	r2, 801264a <_dtoa_r+0x97a>
 8012606:	4601      	mov	r1, r0
 8012608:	4628      	mov	r0, r5
 801260a:	f000 fb61 	bl	8012cd0 <__mcmp>
 801260e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012610:	4602      	mov	r2, r0
 8012612:	4641      	mov	r1, r8
 8012614:	4630      	mov	r0, r6
 8012616:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 801261a:	f000 f917 	bl	801284c <_Bfree>
 801261e:	9b06      	ldr	r3, [sp, #24]
 8012620:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012622:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8012626:	ea43 0102 	orr.w	r1, r3, r2
 801262a:	9b07      	ldr	r3, [sp, #28]
 801262c:	430b      	orrs	r3, r1
 801262e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012630:	d10d      	bne.n	801264e <_dtoa_r+0x97e>
 8012632:	2b39      	cmp	r3, #57	; 0x39
 8012634:	d029      	beq.n	801268a <_dtoa_r+0x9ba>
 8012636:	f1ba 0f00 	cmp.w	sl, #0
 801263a:	dd01      	ble.n	8012640 <_dtoa_r+0x970>
 801263c:	9b05      	ldr	r3, [sp, #20]
 801263e:	3331      	adds	r3, #49	; 0x31
 8012640:	9a02      	ldr	r2, [sp, #8]
 8012642:	7013      	strb	r3, [r2, #0]
 8012644:	e774      	b.n	8012530 <_dtoa_r+0x860>
 8012646:	4638      	mov	r0, r7
 8012648:	e7b8      	b.n	80125bc <_dtoa_r+0x8ec>
 801264a:	2201      	movs	r2, #1
 801264c:	e7e1      	b.n	8012612 <_dtoa_r+0x942>
 801264e:	f1ba 0f00 	cmp.w	sl, #0
 8012652:	db06      	blt.n	8012662 <_dtoa_r+0x992>
 8012654:	9906      	ldr	r1, [sp, #24]
 8012656:	ea41 0a0a 	orr.w	sl, r1, sl
 801265a:	9907      	ldr	r1, [sp, #28]
 801265c:	ea5a 0101 	orrs.w	r1, sl, r1
 8012660:	d120      	bne.n	80126a4 <_dtoa_r+0x9d4>
 8012662:	2a00      	cmp	r2, #0
 8012664:	ddec      	ble.n	8012640 <_dtoa_r+0x970>
 8012666:	4629      	mov	r1, r5
 8012668:	2201      	movs	r2, #1
 801266a:	4630      	mov	r0, r6
 801266c:	9304      	str	r3, [sp, #16]
 801266e:	f000 fabf 	bl	8012bf0 <__lshift>
 8012672:	4621      	mov	r1, r4
 8012674:	4605      	mov	r5, r0
 8012676:	f000 fb2b 	bl	8012cd0 <__mcmp>
 801267a:	2800      	cmp	r0, #0
 801267c:	9b04      	ldr	r3, [sp, #16]
 801267e:	dc02      	bgt.n	8012686 <_dtoa_r+0x9b6>
 8012680:	d1de      	bne.n	8012640 <_dtoa_r+0x970>
 8012682:	07da      	lsls	r2, r3, #31
 8012684:	d5dc      	bpl.n	8012640 <_dtoa_r+0x970>
 8012686:	2b39      	cmp	r3, #57	; 0x39
 8012688:	d1d8      	bne.n	801263c <_dtoa_r+0x96c>
 801268a:	9a02      	ldr	r2, [sp, #8]
 801268c:	2339      	movs	r3, #57	; 0x39
 801268e:	7013      	strb	r3, [r2, #0]
 8012690:	4643      	mov	r3, r8
 8012692:	4698      	mov	r8, r3
 8012694:	3b01      	subs	r3, #1
 8012696:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801269a:	2a39      	cmp	r2, #57	; 0x39
 801269c:	d051      	beq.n	8012742 <_dtoa_r+0xa72>
 801269e:	3201      	adds	r2, #1
 80126a0:	701a      	strb	r2, [r3, #0]
 80126a2:	e745      	b.n	8012530 <_dtoa_r+0x860>
 80126a4:	2a00      	cmp	r2, #0
 80126a6:	dd03      	ble.n	80126b0 <_dtoa_r+0x9e0>
 80126a8:	2b39      	cmp	r3, #57	; 0x39
 80126aa:	d0ee      	beq.n	801268a <_dtoa_r+0x9ba>
 80126ac:	3301      	adds	r3, #1
 80126ae:	e7c7      	b.n	8012640 <_dtoa_r+0x970>
 80126b0:	9a04      	ldr	r2, [sp, #16]
 80126b2:	9908      	ldr	r1, [sp, #32]
 80126b4:	f802 3c01 	strb.w	r3, [r2, #-1]
 80126b8:	428a      	cmp	r2, r1
 80126ba:	d02b      	beq.n	8012714 <_dtoa_r+0xa44>
 80126bc:	4629      	mov	r1, r5
 80126be:	2300      	movs	r3, #0
 80126c0:	220a      	movs	r2, #10
 80126c2:	4630      	mov	r0, r6
 80126c4:	f000 f8e4 	bl	8012890 <__multadd>
 80126c8:	45b9      	cmp	r9, r7
 80126ca:	4605      	mov	r5, r0
 80126cc:	f04f 0300 	mov.w	r3, #0
 80126d0:	f04f 020a 	mov.w	r2, #10
 80126d4:	4649      	mov	r1, r9
 80126d6:	4630      	mov	r0, r6
 80126d8:	d107      	bne.n	80126ea <_dtoa_r+0xa1a>
 80126da:	f000 f8d9 	bl	8012890 <__multadd>
 80126de:	4681      	mov	r9, r0
 80126e0:	4607      	mov	r7, r0
 80126e2:	9b04      	ldr	r3, [sp, #16]
 80126e4:	3301      	adds	r3, #1
 80126e6:	9304      	str	r3, [sp, #16]
 80126e8:	e774      	b.n	80125d4 <_dtoa_r+0x904>
 80126ea:	f000 f8d1 	bl	8012890 <__multadd>
 80126ee:	4639      	mov	r1, r7
 80126f0:	4681      	mov	r9, r0
 80126f2:	2300      	movs	r3, #0
 80126f4:	220a      	movs	r2, #10
 80126f6:	4630      	mov	r0, r6
 80126f8:	f000 f8ca 	bl	8012890 <__multadd>
 80126fc:	4607      	mov	r7, r0
 80126fe:	e7f0      	b.n	80126e2 <_dtoa_r+0xa12>
 8012700:	f1ba 0f00 	cmp.w	sl, #0
 8012704:	9a01      	ldr	r2, [sp, #4]
 8012706:	bfcc      	ite	gt
 8012708:	46d0      	movgt	r8, sl
 801270a:	f04f 0801 	movle.w	r8, #1
 801270e:	4490      	add	r8, r2
 8012710:	f04f 0900 	mov.w	r9, #0
 8012714:	4629      	mov	r1, r5
 8012716:	2201      	movs	r2, #1
 8012718:	4630      	mov	r0, r6
 801271a:	9302      	str	r3, [sp, #8]
 801271c:	f000 fa68 	bl	8012bf0 <__lshift>
 8012720:	4621      	mov	r1, r4
 8012722:	4605      	mov	r5, r0
 8012724:	f000 fad4 	bl	8012cd0 <__mcmp>
 8012728:	2800      	cmp	r0, #0
 801272a:	dcb1      	bgt.n	8012690 <_dtoa_r+0x9c0>
 801272c:	d102      	bne.n	8012734 <_dtoa_r+0xa64>
 801272e:	9b02      	ldr	r3, [sp, #8]
 8012730:	07db      	lsls	r3, r3, #31
 8012732:	d4ad      	bmi.n	8012690 <_dtoa_r+0x9c0>
 8012734:	4643      	mov	r3, r8
 8012736:	4698      	mov	r8, r3
 8012738:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801273c:	2a30      	cmp	r2, #48	; 0x30
 801273e:	d0fa      	beq.n	8012736 <_dtoa_r+0xa66>
 8012740:	e6f6      	b.n	8012530 <_dtoa_r+0x860>
 8012742:	9a01      	ldr	r2, [sp, #4]
 8012744:	429a      	cmp	r2, r3
 8012746:	d1a4      	bne.n	8012692 <_dtoa_r+0x9c2>
 8012748:	f10b 0b01 	add.w	fp, fp, #1
 801274c:	2331      	movs	r3, #49	; 0x31
 801274e:	e778      	b.n	8012642 <_dtoa_r+0x972>
 8012750:	4b14      	ldr	r3, [pc, #80]	; (80127a4 <_dtoa_r+0xad4>)
 8012752:	f7ff bb27 	b.w	8011da4 <_dtoa_r+0xd4>
 8012756:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012758:	2b00      	cmp	r3, #0
 801275a:	f47f ab03 	bne.w	8011d64 <_dtoa_r+0x94>
 801275e:	4b12      	ldr	r3, [pc, #72]	; (80127a8 <_dtoa_r+0xad8>)
 8012760:	f7ff bb20 	b.w	8011da4 <_dtoa_r+0xd4>
 8012764:	f1ba 0f00 	cmp.w	sl, #0
 8012768:	dc03      	bgt.n	8012772 <_dtoa_r+0xaa2>
 801276a:	9b06      	ldr	r3, [sp, #24]
 801276c:	2b02      	cmp	r3, #2
 801276e:	f73f aec7 	bgt.w	8012500 <_dtoa_r+0x830>
 8012772:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012776:	4621      	mov	r1, r4
 8012778:	4628      	mov	r0, r5
 801277a:	f7ff fa1b 	bl	8011bb4 <quorem>
 801277e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8012782:	f808 3b01 	strb.w	r3, [r8], #1
 8012786:	9a01      	ldr	r2, [sp, #4]
 8012788:	eba8 0202 	sub.w	r2, r8, r2
 801278c:	4592      	cmp	sl, r2
 801278e:	ddb7      	ble.n	8012700 <_dtoa_r+0xa30>
 8012790:	4629      	mov	r1, r5
 8012792:	2300      	movs	r3, #0
 8012794:	220a      	movs	r2, #10
 8012796:	4630      	mov	r0, r6
 8012798:	f000 f87a 	bl	8012890 <__multadd>
 801279c:	4605      	mov	r5, r0
 801279e:	e7ea      	b.n	8012776 <_dtoa_r+0xaa6>
 80127a0:	08013b57 	.word	0x08013b57
 80127a4:	08013ab4 	.word	0x08013ab4
 80127a8:	08013ad8 	.word	0x08013ad8

080127ac <_localeconv_r>:
 80127ac:	4800      	ldr	r0, [pc, #0]	; (80127b0 <_localeconv_r+0x4>)
 80127ae:	4770      	bx	lr
 80127b0:	240002d8 	.word	0x240002d8

080127b4 <__malloc_lock>:
 80127b4:	4801      	ldr	r0, [pc, #4]	; (80127bc <__malloc_lock+0x8>)
 80127b6:	f000 bbd4 	b.w	8012f62 <__retarget_lock_acquire_recursive>
 80127ba:	bf00      	nop
 80127bc:	2400204c 	.word	0x2400204c

080127c0 <__malloc_unlock>:
 80127c0:	4801      	ldr	r0, [pc, #4]	; (80127c8 <__malloc_unlock+0x8>)
 80127c2:	f000 bbcf 	b.w	8012f64 <__retarget_lock_release_recursive>
 80127c6:	bf00      	nop
 80127c8:	2400204c 	.word	0x2400204c

080127cc <_Balloc>:
 80127cc:	b570      	push	{r4, r5, r6, lr}
 80127ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80127d0:	4604      	mov	r4, r0
 80127d2:	460d      	mov	r5, r1
 80127d4:	b976      	cbnz	r6, 80127f4 <_Balloc+0x28>
 80127d6:	2010      	movs	r0, #16
 80127d8:	f7fe fc94 	bl	8011104 <malloc>
 80127dc:	4602      	mov	r2, r0
 80127de:	6260      	str	r0, [r4, #36]	; 0x24
 80127e0:	b920      	cbnz	r0, 80127ec <_Balloc+0x20>
 80127e2:	4b18      	ldr	r3, [pc, #96]	; (8012844 <_Balloc+0x78>)
 80127e4:	4818      	ldr	r0, [pc, #96]	; (8012848 <_Balloc+0x7c>)
 80127e6:	2166      	movs	r1, #102	; 0x66
 80127e8:	f000 fb8a 	bl	8012f00 <__assert_func>
 80127ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80127f0:	6006      	str	r6, [r0, #0]
 80127f2:	60c6      	str	r6, [r0, #12]
 80127f4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80127f6:	68f3      	ldr	r3, [r6, #12]
 80127f8:	b183      	cbz	r3, 801281c <_Balloc+0x50>
 80127fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80127fc:	68db      	ldr	r3, [r3, #12]
 80127fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012802:	b9b8      	cbnz	r0, 8012834 <_Balloc+0x68>
 8012804:	2101      	movs	r1, #1
 8012806:	fa01 f605 	lsl.w	r6, r1, r5
 801280a:	1d72      	adds	r2, r6, #5
 801280c:	0092      	lsls	r2, r2, #2
 801280e:	4620      	mov	r0, r4
 8012810:	f000 fb60 	bl	8012ed4 <_calloc_r>
 8012814:	b160      	cbz	r0, 8012830 <_Balloc+0x64>
 8012816:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801281a:	e00e      	b.n	801283a <_Balloc+0x6e>
 801281c:	2221      	movs	r2, #33	; 0x21
 801281e:	2104      	movs	r1, #4
 8012820:	4620      	mov	r0, r4
 8012822:	f000 fb57 	bl	8012ed4 <_calloc_r>
 8012826:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012828:	60f0      	str	r0, [r6, #12]
 801282a:	68db      	ldr	r3, [r3, #12]
 801282c:	2b00      	cmp	r3, #0
 801282e:	d1e4      	bne.n	80127fa <_Balloc+0x2e>
 8012830:	2000      	movs	r0, #0
 8012832:	bd70      	pop	{r4, r5, r6, pc}
 8012834:	6802      	ldr	r2, [r0, #0]
 8012836:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801283a:	2300      	movs	r3, #0
 801283c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012840:	e7f7      	b.n	8012832 <_Balloc+0x66>
 8012842:	bf00      	nop
 8012844:	08013ae5 	.word	0x08013ae5
 8012848:	08013b68 	.word	0x08013b68

0801284c <_Bfree>:
 801284c:	b570      	push	{r4, r5, r6, lr}
 801284e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012850:	4605      	mov	r5, r0
 8012852:	460c      	mov	r4, r1
 8012854:	b976      	cbnz	r6, 8012874 <_Bfree+0x28>
 8012856:	2010      	movs	r0, #16
 8012858:	f7fe fc54 	bl	8011104 <malloc>
 801285c:	4602      	mov	r2, r0
 801285e:	6268      	str	r0, [r5, #36]	; 0x24
 8012860:	b920      	cbnz	r0, 801286c <_Bfree+0x20>
 8012862:	4b09      	ldr	r3, [pc, #36]	; (8012888 <_Bfree+0x3c>)
 8012864:	4809      	ldr	r0, [pc, #36]	; (801288c <_Bfree+0x40>)
 8012866:	218a      	movs	r1, #138	; 0x8a
 8012868:	f000 fb4a 	bl	8012f00 <__assert_func>
 801286c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012870:	6006      	str	r6, [r0, #0]
 8012872:	60c6      	str	r6, [r0, #12]
 8012874:	b13c      	cbz	r4, 8012886 <_Bfree+0x3a>
 8012876:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012878:	6862      	ldr	r2, [r4, #4]
 801287a:	68db      	ldr	r3, [r3, #12]
 801287c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012880:	6021      	str	r1, [r4, #0]
 8012882:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012886:	bd70      	pop	{r4, r5, r6, pc}
 8012888:	08013ae5 	.word	0x08013ae5
 801288c:	08013b68 	.word	0x08013b68

08012890 <__multadd>:
 8012890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012894:	690d      	ldr	r5, [r1, #16]
 8012896:	4607      	mov	r7, r0
 8012898:	460c      	mov	r4, r1
 801289a:	461e      	mov	r6, r3
 801289c:	f101 0c14 	add.w	ip, r1, #20
 80128a0:	2000      	movs	r0, #0
 80128a2:	f8dc 3000 	ldr.w	r3, [ip]
 80128a6:	b299      	uxth	r1, r3
 80128a8:	fb02 6101 	mla	r1, r2, r1, r6
 80128ac:	0c1e      	lsrs	r6, r3, #16
 80128ae:	0c0b      	lsrs	r3, r1, #16
 80128b0:	fb02 3306 	mla	r3, r2, r6, r3
 80128b4:	b289      	uxth	r1, r1
 80128b6:	3001      	adds	r0, #1
 80128b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80128bc:	4285      	cmp	r5, r0
 80128be:	f84c 1b04 	str.w	r1, [ip], #4
 80128c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80128c6:	dcec      	bgt.n	80128a2 <__multadd+0x12>
 80128c8:	b30e      	cbz	r6, 801290e <__multadd+0x7e>
 80128ca:	68a3      	ldr	r3, [r4, #8]
 80128cc:	42ab      	cmp	r3, r5
 80128ce:	dc19      	bgt.n	8012904 <__multadd+0x74>
 80128d0:	6861      	ldr	r1, [r4, #4]
 80128d2:	4638      	mov	r0, r7
 80128d4:	3101      	adds	r1, #1
 80128d6:	f7ff ff79 	bl	80127cc <_Balloc>
 80128da:	4680      	mov	r8, r0
 80128dc:	b928      	cbnz	r0, 80128ea <__multadd+0x5a>
 80128de:	4602      	mov	r2, r0
 80128e0:	4b0c      	ldr	r3, [pc, #48]	; (8012914 <__multadd+0x84>)
 80128e2:	480d      	ldr	r0, [pc, #52]	; (8012918 <__multadd+0x88>)
 80128e4:	21b5      	movs	r1, #181	; 0xb5
 80128e6:	f000 fb0b 	bl	8012f00 <__assert_func>
 80128ea:	6922      	ldr	r2, [r4, #16]
 80128ec:	3202      	adds	r2, #2
 80128ee:	f104 010c 	add.w	r1, r4, #12
 80128f2:	0092      	lsls	r2, r2, #2
 80128f4:	300c      	adds	r0, #12
 80128f6:	f7fe fc15 	bl	8011124 <memcpy>
 80128fa:	4621      	mov	r1, r4
 80128fc:	4638      	mov	r0, r7
 80128fe:	f7ff ffa5 	bl	801284c <_Bfree>
 8012902:	4644      	mov	r4, r8
 8012904:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012908:	3501      	adds	r5, #1
 801290a:	615e      	str	r6, [r3, #20]
 801290c:	6125      	str	r5, [r4, #16]
 801290e:	4620      	mov	r0, r4
 8012910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012914:	08013b57 	.word	0x08013b57
 8012918:	08013b68 	.word	0x08013b68

0801291c <__hi0bits>:
 801291c:	0c03      	lsrs	r3, r0, #16
 801291e:	041b      	lsls	r3, r3, #16
 8012920:	b9d3      	cbnz	r3, 8012958 <__hi0bits+0x3c>
 8012922:	0400      	lsls	r0, r0, #16
 8012924:	2310      	movs	r3, #16
 8012926:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801292a:	bf04      	itt	eq
 801292c:	0200      	lsleq	r0, r0, #8
 801292e:	3308      	addeq	r3, #8
 8012930:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012934:	bf04      	itt	eq
 8012936:	0100      	lsleq	r0, r0, #4
 8012938:	3304      	addeq	r3, #4
 801293a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801293e:	bf04      	itt	eq
 8012940:	0080      	lsleq	r0, r0, #2
 8012942:	3302      	addeq	r3, #2
 8012944:	2800      	cmp	r0, #0
 8012946:	db05      	blt.n	8012954 <__hi0bits+0x38>
 8012948:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801294c:	f103 0301 	add.w	r3, r3, #1
 8012950:	bf08      	it	eq
 8012952:	2320      	moveq	r3, #32
 8012954:	4618      	mov	r0, r3
 8012956:	4770      	bx	lr
 8012958:	2300      	movs	r3, #0
 801295a:	e7e4      	b.n	8012926 <__hi0bits+0xa>

0801295c <__lo0bits>:
 801295c:	6803      	ldr	r3, [r0, #0]
 801295e:	f013 0207 	ands.w	r2, r3, #7
 8012962:	4601      	mov	r1, r0
 8012964:	d00b      	beq.n	801297e <__lo0bits+0x22>
 8012966:	07da      	lsls	r2, r3, #31
 8012968:	d423      	bmi.n	80129b2 <__lo0bits+0x56>
 801296a:	0798      	lsls	r0, r3, #30
 801296c:	bf49      	itett	mi
 801296e:	085b      	lsrmi	r3, r3, #1
 8012970:	089b      	lsrpl	r3, r3, #2
 8012972:	2001      	movmi	r0, #1
 8012974:	600b      	strmi	r3, [r1, #0]
 8012976:	bf5c      	itt	pl
 8012978:	600b      	strpl	r3, [r1, #0]
 801297a:	2002      	movpl	r0, #2
 801297c:	4770      	bx	lr
 801297e:	b298      	uxth	r0, r3
 8012980:	b9a8      	cbnz	r0, 80129ae <__lo0bits+0x52>
 8012982:	0c1b      	lsrs	r3, r3, #16
 8012984:	2010      	movs	r0, #16
 8012986:	b2da      	uxtb	r2, r3
 8012988:	b90a      	cbnz	r2, 801298e <__lo0bits+0x32>
 801298a:	3008      	adds	r0, #8
 801298c:	0a1b      	lsrs	r3, r3, #8
 801298e:	071a      	lsls	r2, r3, #28
 8012990:	bf04      	itt	eq
 8012992:	091b      	lsreq	r3, r3, #4
 8012994:	3004      	addeq	r0, #4
 8012996:	079a      	lsls	r2, r3, #30
 8012998:	bf04      	itt	eq
 801299a:	089b      	lsreq	r3, r3, #2
 801299c:	3002      	addeq	r0, #2
 801299e:	07da      	lsls	r2, r3, #31
 80129a0:	d403      	bmi.n	80129aa <__lo0bits+0x4e>
 80129a2:	085b      	lsrs	r3, r3, #1
 80129a4:	f100 0001 	add.w	r0, r0, #1
 80129a8:	d005      	beq.n	80129b6 <__lo0bits+0x5a>
 80129aa:	600b      	str	r3, [r1, #0]
 80129ac:	4770      	bx	lr
 80129ae:	4610      	mov	r0, r2
 80129b0:	e7e9      	b.n	8012986 <__lo0bits+0x2a>
 80129b2:	2000      	movs	r0, #0
 80129b4:	4770      	bx	lr
 80129b6:	2020      	movs	r0, #32
 80129b8:	4770      	bx	lr
	...

080129bc <__i2b>:
 80129bc:	b510      	push	{r4, lr}
 80129be:	460c      	mov	r4, r1
 80129c0:	2101      	movs	r1, #1
 80129c2:	f7ff ff03 	bl	80127cc <_Balloc>
 80129c6:	4602      	mov	r2, r0
 80129c8:	b928      	cbnz	r0, 80129d6 <__i2b+0x1a>
 80129ca:	4b05      	ldr	r3, [pc, #20]	; (80129e0 <__i2b+0x24>)
 80129cc:	4805      	ldr	r0, [pc, #20]	; (80129e4 <__i2b+0x28>)
 80129ce:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80129d2:	f000 fa95 	bl	8012f00 <__assert_func>
 80129d6:	2301      	movs	r3, #1
 80129d8:	6144      	str	r4, [r0, #20]
 80129da:	6103      	str	r3, [r0, #16]
 80129dc:	bd10      	pop	{r4, pc}
 80129de:	bf00      	nop
 80129e0:	08013b57 	.word	0x08013b57
 80129e4:	08013b68 	.word	0x08013b68

080129e8 <__multiply>:
 80129e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129ec:	4691      	mov	r9, r2
 80129ee:	690a      	ldr	r2, [r1, #16]
 80129f0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80129f4:	429a      	cmp	r2, r3
 80129f6:	bfb8      	it	lt
 80129f8:	460b      	movlt	r3, r1
 80129fa:	460c      	mov	r4, r1
 80129fc:	bfbc      	itt	lt
 80129fe:	464c      	movlt	r4, r9
 8012a00:	4699      	movlt	r9, r3
 8012a02:	6927      	ldr	r7, [r4, #16]
 8012a04:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012a08:	68a3      	ldr	r3, [r4, #8]
 8012a0a:	6861      	ldr	r1, [r4, #4]
 8012a0c:	eb07 060a 	add.w	r6, r7, sl
 8012a10:	42b3      	cmp	r3, r6
 8012a12:	b085      	sub	sp, #20
 8012a14:	bfb8      	it	lt
 8012a16:	3101      	addlt	r1, #1
 8012a18:	f7ff fed8 	bl	80127cc <_Balloc>
 8012a1c:	b930      	cbnz	r0, 8012a2c <__multiply+0x44>
 8012a1e:	4602      	mov	r2, r0
 8012a20:	4b44      	ldr	r3, [pc, #272]	; (8012b34 <__multiply+0x14c>)
 8012a22:	4845      	ldr	r0, [pc, #276]	; (8012b38 <__multiply+0x150>)
 8012a24:	f240 115d 	movw	r1, #349	; 0x15d
 8012a28:	f000 fa6a 	bl	8012f00 <__assert_func>
 8012a2c:	f100 0514 	add.w	r5, r0, #20
 8012a30:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012a34:	462b      	mov	r3, r5
 8012a36:	2200      	movs	r2, #0
 8012a38:	4543      	cmp	r3, r8
 8012a3a:	d321      	bcc.n	8012a80 <__multiply+0x98>
 8012a3c:	f104 0314 	add.w	r3, r4, #20
 8012a40:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012a44:	f109 0314 	add.w	r3, r9, #20
 8012a48:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8012a4c:	9202      	str	r2, [sp, #8]
 8012a4e:	1b3a      	subs	r2, r7, r4
 8012a50:	3a15      	subs	r2, #21
 8012a52:	f022 0203 	bic.w	r2, r2, #3
 8012a56:	3204      	adds	r2, #4
 8012a58:	f104 0115 	add.w	r1, r4, #21
 8012a5c:	428f      	cmp	r7, r1
 8012a5e:	bf38      	it	cc
 8012a60:	2204      	movcc	r2, #4
 8012a62:	9201      	str	r2, [sp, #4]
 8012a64:	9a02      	ldr	r2, [sp, #8]
 8012a66:	9303      	str	r3, [sp, #12]
 8012a68:	429a      	cmp	r2, r3
 8012a6a:	d80c      	bhi.n	8012a86 <__multiply+0x9e>
 8012a6c:	2e00      	cmp	r6, #0
 8012a6e:	dd03      	ble.n	8012a78 <__multiply+0x90>
 8012a70:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	d05a      	beq.n	8012b2e <__multiply+0x146>
 8012a78:	6106      	str	r6, [r0, #16]
 8012a7a:	b005      	add	sp, #20
 8012a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a80:	f843 2b04 	str.w	r2, [r3], #4
 8012a84:	e7d8      	b.n	8012a38 <__multiply+0x50>
 8012a86:	f8b3 a000 	ldrh.w	sl, [r3]
 8012a8a:	f1ba 0f00 	cmp.w	sl, #0
 8012a8e:	d024      	beq.n	8012ada <__multiply+0xf2>
 8012a90:	f104 0e14 	add.w	lr, r4, #20
 8012a94:	46a9      	mov	r9, r5
 8012a96:	f04f 0c00 	mov.w	ip, #0
 8012a9a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8012a9e:	f8d9 1000 	ldr.w	r1, [r9]
 8012aa2:	fa1f fb82 	uxth.w	fp, r2
 8012aa6:	b289      	uxth	r1, r1
 8012aa8:	fb0a 110b 	mla	r1, sl, fp, r1
 8012aac:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8012ab0:	f8d9 2000 	ldr.w	r2, [r9]
 8012ab4:	4461      	add	r1, ip
 8012ab6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012aba:	fb0a c20b 	mla	r2, sl, fp, ip
 8012abe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8012ac2:	b289      	uxth	r1, r1
 8012ac4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012ac8:	4577      	cmp	r7, lr
 8012aca:	f849 1b04 	str.w	r1, [r9], #4
 8012ace:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012ad2:	d8e2      	bhi.n	8012a9a <__multiply+0xb2>
 8012ad4:	9a01      	ldr	r2, [sp, #4]
 8012ad6:	f845 c002 	str.w	ip, [r5, r2]
 8012ada:	9a03      	ldr	r2, [sp, #12]
 8012adc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012ae0:	3304      	adds	r3, #4
 8012ae2:	f1b9 0f00 	cmp.w	r9, #0
 8012ae6:	d020      	beq.n	8012b2a <__multiply+0x142>
 8012ae8:	6829      	ldr	r1, [r5, #0]
 8012aea:	f104 0c14 	add.w	ip, r4, #20
 8012aee:	46ae      	mov	lr, r5
 8012af0:	f04f 0a00 	mov.w	sl, #0
 8012af4:	f8bc b000 	ldrh.w	fp, [ip]
 8012af8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8012afc:	fb09 220b 	mla	r2, r9, fp, r2
 8012b00:	4492      	add	sl, r2
 8012b02:	b289      	uxth	r1, r1
 8012b04:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8012b08:	f84e 1b04 	str.w	r1, [lr], #4
 8012b0c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8012b10:	f8be 1000 	ldrh.w	r1, [lr]
 8012b14:	0c12      	lsrs	r2, r2, #16
 8012b16:	fb09 1102 	mla	r1, r9, r2, r1
 8012b1a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8012b1e:	4567      	cmp	r7, ip
 8012b20:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012b24:	d8e6      	bhi.n	8012af4 <__multiply+0x10c>
 8012b26:	9a01      	ldr	r2, [sp, #4]
 8012b28:	50a9      	str	r1, [r5, r2]
 8012b2a:	3504      	adds	r5, #4
 8012b2c:	e79a      	b.n	8012a64 <__multiply+0x7c>
 8012b2e:	3e01      	subs	r6, #1
 8012b30:	e79c      	b.n	8012a6c <__multiply+0x84>
 8012b32:	bf00      	nop
 8012b34:	08013b57 	.word	0x08013b57
 8012b38:	08013b68 	.word	0x08013b68

08012b3c <__pow5mult>:
 8012b3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012b40:	4615      	mov	r5, r2
 8012b42:	f012 0203 	ands.w	r2, r2, #3
 8012b46:	4606      	mov	r6, r0
 8012b48:	460f      	mov	r7, r1
 8012b4a:	d007      	beq.n	8012b5c <__pow5mult+0x20>
 8012b4c:	4c25      	ldr	r4, [pc, #148]	; (8012be4 <__pow5mult+0xa8>)
 8012b4e:	3a01      	subs	r2, #1
 8012b50:	2300      	movs	r3, #0
 8012b52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012b56:	f7ff fe9b 	bl	8012890 <__multadd>
 8012b5a:	4607      	mov	r7, r0
 8012b5c:	10ad      	asrs	r5, r5, #2
 8012b5e:	d03d      	beq.n	8012bdc <__pow5mult+0xa0>
 8012b60:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8012b62:	b97c      	cbnz	r4, 8012b84 <__pow5mult+0x48>
 8012b64:	2010      	movs	r0, #16
 8012b66:	f7fe facd 	bl	8011104 <malloc>
 8012b6a:	4602      	mov	r2, r0
 8012b6c:	6270      	str	r0, [r6, #36]	; 0x24
 8012b6e:	b928      	cbnz	r0, 8012b7c <__pow5mult+0x40>
 8012b70:	4b1d      	ldr	r3, [pc, #116]	; (8012be8 <__pow5mult+0xac>)
 8012b72:	481e      	ldr	r0, [pc, #120]	; (8012bec <__pow5mult+0xb0>)
 8012b74:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012b78:	f000 f9c2 	bl	8012f00 <__assert_func>
 8012b7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012b80:	6004      	str	r4, [r0, #0]
 8012b82:	60c4      	str	r4, [r0, #12]
 8012b84:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012b88:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012b8c:	b94c      	cbnz	r4, 8012ba2 <__pow5mult+0x66>
 8012b8e:	f240 2171 	movw	r1, #625	; 0x271
 8012b92:	4630      	mov	r0, r6
 8012b94:	f7ff ff12 	bl	80129bc <__i2b>
 8012b98:	2300      	movs	r3, #0
 8012b9a:	f8c8 0008 	str.w	r0, [r8, #8]
 8012b9e:	4604      	mov	r4, r0
 8012ba0:	6003      	str	r3, [r0, #0]
 8012ba2:	f04f 0900 	mov.w	r9, #0
 8012ba6:	07eb      	lsls	r3, r5, #31
 8012ba8:	d50a      	bpl.n	8012bc0 <__pow5mult+0x84>
 8012baa:	4639      	mov	r1, r7
 8012bac:	4622      	mov	r2, r4
 8012bae:	4630      	mov	r0, r6
 8012bb0:	f7ff ff1a 	bl	80129e8 <__multiply>
 8012bb4:	4639      	mov	r1, r7
 8012bb6:	4680      	mov	r8, r0
 8012bb8:	4630      	mov	r0, r6
 8012bba:	f7ff fe47 	bl	801284c <_Bfree>
 8012bbe:	4647      	mov	r7, r8
 8012bc0:	106d      	asrs	r5, r5, #1
 8012bc2:	d00b      	beq.n	8012bdc <__pow5mult+0xa0>
 8012bc4:	6820      	ldr	r0, [r4, #0]
 8012bc6:	b938      	cbnz	r0, 8012bd8 <__pow5mult+0x9c>
 8012bc8:	4622      	mov	r2, r4
 8012bca:	4621      	mov	r1, r4
 8012bcc:	4630      	mov	r0, r6
 8012bce:	f7ff ff0b 	bl	80129e8 <__multiply>
 8012bd2:	6020      	str	r0, [r4, #0]
 8012bd4:	f8c0 9000 	str.w	r9, [r0]
 8012bd8:	4604      	mov	r4, r0
 8012bda:	e7e4      	b.n	8012ba6 <__pow5mult+0x6a>
 8012bdc:	4638      	mov	r0, r7
 8012bde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012be2:	bf00      	nop
 8012be4:	08013cb8 	.word	0x08013cb8
 8012be8:	08013ae5 	.word	0x08013ae5
 8012bec:	08013b68 	.word	0x08013b68

08012bf0 <__lshift>:
 8012bf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012bf4:	460c      	mov	r4, r1
 8012bf6:	6849      	ldr	r1, [r1, #4]
 8012bf8:	6923      	ldr	r3, [r4, #16]
 8012bfa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012bfe:	68a3      	ldr	r3, [r4, #8]
 8012c00:	4607      	mov	r7, r0
 8012c02:	4691      	mov	r9, r2
 8012c04:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012c08:	f108 0601 	add.w	r6, r8, #1
 8012c0c:	42b3      	cmp	r3, r6
 8012c0e:	db0b      	blt.n	8012c28 <__lshift+0x38>
 8012c10:	4638      	mov	r0, r7
 8012c12:	f7ff fddb 	bl	80127cc <_Balloc>
 8012c16:	4605      	mov	r5, r0
 8012c18:	b948      	cbnz	r0, 8012c2e <__lshift+0x3e>
 8012c1a:	4602      	mov	r2, r0
 8012c1c:	4b2a      	ldr	r3, [pc, #168]	; (8012cc8 <__lshift+0xd8>)
 8012c1e:	482b      	ldr	r0, [pc, #172]	; (8012ccc <__lshift+0xdc>)
 8012c20:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012c24:	f000 f96c 	bl	8012f00 <__assert_func>
 8012c28:	3101      	adds	r1, #1
 8012c2a:	005b      	lsls	r3, r3, #1
 8012c2c:	e7ee      	b.n	8012c0c <__lshift+0x1c>
 8012c2e:	2300      	movs	r3, #0
 8012c30:	f100 0114 	add.w	r1, r0, #20
 8012c34:	f100 0210 	add.w	r2, r0, #16
 8012c38:	4618      	mov	r0, r3
 8012c3a:	4553      	cmp	r3, sl
 8012c3c:	db37      	blt.n	8012cae <__lshift+0xbe>
 8012c3e:	6920      	ldr	r0, [r4, #16]
 8012c40:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012c44:	f104 0314 	add.w	r3, r4, #20
 8012c48:	f019 091f 	ands.w	r9, r9, #31
 8012c4c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012c50:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8012c54:	d02f      	beq.n	8012cb6 <__lshift+0xc6>
 8012c56:	f1c9 0e20 	rsb	lr, r9, #32
 8012c5a:	468a      	mov	sl, r1
 8012c5c:	f04f 0c00 	mov.w	ip, #0
 8012c60:	681a      	ldr	r2, [r3, #0]
 8012c62:	fa02 f209 	lsl.w	r2, r2, r9
 8012c66:	ea42 020c 	orr.w	r2, r2, ip
 8012c6a:	f84a 2b04 	str.w	r2, [sl], #4
 8012c6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012c72:	4298      	cmp	r0, r3
 8012c74:	fa22 fc0e 	lsr.w	ip, r2, lr
 8012c78:	d8f2      	bhi.n	8012c60 <__lshift+0x70>
 8012c7a:	1b03      	subs	r3, r0, r4
 8012c7c:	3b15      	subs	r3, #21
 8012c7e:	f023 0303 	bic.w	r3, r3, #3
 8012c82:	3304      	adds	r3, #4
 8012c84:	f104 0215 	add.w	r2, r4, #21
 8012c88:	4290      	cmp	r0, r2
 8012c8a:	bf38      	it	cc
 8012c8c:	2304      	movcc	r3, #4
 8012c8e:	f841 c003 	str.w	ip, [r1, r3]
 8012c92:	f1bc 0f00 	cmp.w	ip, #0
 8012c96:	d001      	beq.n	8012c9c <__lshift+0xac>
 8012c98:	f108 0602 	add.w	r6, r8, #2
 8012c9c:	3e01      	subs	r6, #1
 8012c9e:	4638      	mov	r0, r7
 8012ca0:	612e      	str	r6, [r5, #16]
 8012ca2:	4621      	mov	r1, r4
 8012ca4:	f7ff fdd2 	bl	801284c <_Bfree>
 8012ca8:	4628      	mov	r0, r5
 8012caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012cae:	f842 0f04 	str.w	r0, [r2, #4]!
 8012cb2:	3301      	adds	r3, #1
 8012cb4:	e7c1      	b.n	8012c3a <__lshift+0x4a>
 8012cb6:	3904      	subs	r1, #4
 8012cb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8012cbc:	f841 2f04 	str.w	r2, [r1, #4]!
 8012cc0:	4298      	cmp	r0, r3
 8012cc2:	d8f9      	bhi.n	8012cb8 <__lshift+0xc8>
 8012cc4:	e7ea      	b.n	8012c9c <__lshift+0xac>
 8012cc6:	bf00      	nop
 8012cc8:	08013b57 	.word	0x08013b57
 8012ccc:	08013b68 	.word	0x08013b68

08012cd0 <__mcmp>:
 8012cd0:	b530      	push	{r4, r5, lr}
 8012cd2:	6902      	ldr	r2, [r0, #16]
 8012cd4:	690c      	ldr	r4, [r1, #16]
 8012cd6:	1b12      	subs	r2, r2, r4
 8012cd8:	d10e      	bne.n	8012cf8 <__mcmp+0x28>
 8012cda:	f100 0314 	add.w	r3, r0, #20
 8012cde:	3114      	adds	r1, #20
 8012ce0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012ce4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012ce8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012cec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012cf0:	42a5      	cmp	r5, r4
 8012cf2:	d003      	beq.n	8012cfc <__mcmp+0x2c>
 8012cf4:	d305      	bcc.n	8012d02 <__mcmp+0x32>
 8012cf6:	2201      	movs	r2, #1
 8012cf8:	4610      	mov	r0, r2
 8012cfa:	bd30      	pop	{r4, r5, pc}
 8012cfc:	4283      	cmp	r3, r0
 8012cfe:	d3f3      	bcc.n	8012ce8 <__mcmp+0x18>
 8012d00:	e7fa      	b.n	8012cf8 <__mcmp+0x28>
 8012d02:	f04f 32ff 	mov.w	r2, #4294967295
 8012d06:	e7f7      	b.n	8012cf8 <__mcmp+0x28>

08012d08 <__mdiff>:
 8012d08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d0c:	460c      	mov	r4, r1
 8012d0e:	4606      	mov	r6, r0
 8012d10:	4611      	mov	r1, r2
 8012d12:	4620      	mov	r0, r4
 8012d14:	4690      	mov	r8, r2
 8012d16:	f7ff ffdb 	bl	8012cd0 <__mcmp>
 8012d1a:	1e05      	subs	r5, r0, #0
 8012d1c:	d110      	bne.n	8012d40 <__mdiff+0x38>
 8012d1e:	4629      	mov	r1, r5
 8012d20:	4630      	mov	r0, r6
 8012d22:	f7ff fd53 	bl	80127cc <_Balloc>
 8012d26:	b930      	cbnz	r0, 8012d36 <__mdiff+0x2e>
 8012d28:	4b3a      	ldr	r3, [pc, #232]	; (8012e14 <__mdiff+0x10c>)
 8012d2a:	4602      	mov	r2, r0
 8012d2c:	f240 2132 	movw	r1, #562	; 0x232
 8012d30:	4839      	ldr	r0, [pc, #228]	; (8012e18 <__mdiff+0x110>)
 8012d32:	f000 f8e5 	bl	8012f00 <__assert_func>
 8012d36:	2301      	movs	r3, #1
 8012d38:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012d3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d40:	bfa4      	itt	ge
 8012d42:	4643      	movge	r3, r8
 8012d44:	46a0      	movge	r8, r4
 8012d46:	4630      	mov	r0, r6
 8012d48:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012d4c:	bfa6      	itte	ge
 8012d4e:	461c      	movge	r4, r3
 8012d50:	2500      	movge	r5, #0
 8012d52:	2501      	movlt	r5, #1
 8012d54:	f7ff fd3a 	bl	80127cc <_Balloc>
 8012d58:	b920      	cbnz	r0, 8012d64 <__mdiff+0x5c>
 8012d5a:	4b2e      	ldr	r3, [pc, #184]	; (8012e14 <__mdiff+0x10c>)
 8012d5c:	4602      	mov	r2, r0
 8012d5e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8012d62:	e7e5      	b.n	8012d30 <__mdiff+0x28>
 8012d64:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8012d68:	6926      	ldr	r6, [r4, #16]
 8012d6a:	60c5      	str	r5, [r0, #12]
 8012d6c:	f104 0914 	add.w	r9, r4, #20
 8012d70:	f108 0514 	add.w	r5, r8, #20
 8012d74:	f100 0e14 	add.w	lr, r0, #20
 8012d78:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8012d7c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8012d80:	f108 0210 	add.w	r2, r8, #16
 8012d84:	46f2      	mov	sl, lr
 8012d86:	2100      	movs	r1, #0
 8012d88:	f859 3b04 	ldr.w	r3, [r9], #4
 8012d8c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012d90:	fa1f f883 	uxth.w	r8, r3
 8012d94:	fa11 f18b 	uxtah	r1, r1, fp
 8012d98:	0c1b      	lsrs	r3, r3, #16
 8012d9a:	eba1 0808 	sub.w	r8, r1, r8
 8012d9e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012da2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012da6:	fa1f f888 	uxth.w	r8, r8
 8012daa:	1419      	asrs	r1, r3, #16
 8012dac:	454e      	cmp	r6, r9
 8012dae:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012db2:	f84a 3b04 	str.w	r3, [sl], #4
 8012db6:	d8e7      	bhi.n	8012d88 <__mdiff+0x80>
 8012db8:	1b33      	subs	r3, r6, r4
 8012dba:	3b15      	subs	r3, #21
 8012dbc:	f023 0303 	bic.w	r3, r3, #3
 8012dc0:	3304      	adds	r3, #4
 8012dc2:	3415      	adds	r4, #21
 8012dc4:	42a6      	cmp	r6, r4
 8012dc6:	bf38      	it	cc
 8012dc8:	2304      	movcc	r3, #4
 8012dca:	441d      	add	r5, r3
 8012dcc:	4473      	add	r3, lr
 8012dce:	469e      	mov	lr, r3
 8012dd0:	462e      	mov	r6, r5
 8012dd2:	4566      	cmp	r6, ip
 8012dd4:	d30e      	bcc.n	8012df4 <__mdiff+0xec>
 8012dd6:	f10c 0203 	add.w	r2, ip, #3
 8012dda:	1b52      	subs	r2, r2, r5
 8012ddc:	f022 0203 	bic.w	r2, r2, #3
 8012de0:	3d03      	subs	r5, #3
 8012de2:	45ac      	cmp	ip, r5
 8012de4:	bf38      	it	cc
 8012de6:	2200      	movcc	r2, #0
 8012de8:	441a      	add	r2, r3
 8012dea:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8012dee:	b17b      	cbz	r3, 8012e10 <__mdiff+0x108>
 8012df0:	6107      	str	r7, [r0, #16]
 8012df2:	e7a3      	b.n	8012d3c <__mdiff+0x34>
 8012df4:	f856 8b04 	ldr.w	r8, [r6], #4
 8012df8:	fa11 f288 	uxtah	r2, r1, r8
 8012dfc:	1414      	asrs	r4, r2, #16
 8012dfe:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8012e02:	b292      	uxth	r2, r2
 8012e04:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8012e08:	f84e 2b04 	str.w	r2, [lr], #4
 8012e0c:	1421      	asrs	r1, r4, #16
 8012e0e:	e7e0      	b.n	8012dd2 <__mdiff+0xca>
 8012e10:	3f01      	subs	r7, #1
 8012e12:	e7ea      	b.n	8012dea <__mdiff+0xe2>
 8012e14:	08013b57 	.word	0x08013b57
 8012e18:	08013b68 	.word	0x08013b68

08012e1c <__d2b>:
 8012e1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012e20:	4689      	mov	r9, r1
 8012e22:	2101      	movs	r1, #1
 8012e24:	ec57 6b10 	vmov	r6, r7, d0
 8012e28:	4690      	mov	r8, r2
 8012e2a:	f7ff fccf 	bl	80127cc <_Balloc>
 8012e2e:	4604      	mov	r4, r0
 8012e30:	b930      	cbnz	r0, 8012e40 <__d2b+0x24>
 8012e32:	4602      	mov	r2, r0
 8012e34:	4b25      	ldr	r3, [pc, #148]	; (8012ecc <__d2b+0xb0>)
 8012e36:	4826      	ldr	r0, [pc, #152]	; (8012ed0 <__d2b+0xb4>)
 8012e38:	f240 310a 	movw	r1, #778	; 0x30a
 8012e3c:	f000 f860 	bl	8012f00 <__assert_func>
 8012e40:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8012e44:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012e48:	bb35      	cbnz	r5, 8012e98 <__d2b+0x7c>
 8012e4a:	2e00      	cmp	r6, #0
 8012e4c:	9301      	str	r3, [sp, #4]
 8012e4e:	d028      	beq.n	8012ea2 <__d2b+0x86>
 8012e50:	4668      	mov	r0, sp
 8012e52:	9600      	str	r6, [sp, #0]
 8012e54:	f7ff fd82 	bl	801295c <__lo0bits>
 8012e58:	9900      	ldr	r1, [sp, #0]
 8012e5a:	b300      	cbz	r0, 8012e9e <__d2b+0x82>
 8012e5c:	9a01      	ldr	r2, [sp, #4]
 8012e5e:	f1c0 0320 	rsb	r3, r0, #32
 8012e62:	fa02 f303 	lsl.w	r3, r2, r3
 8012e66:	430b      	orrs	r3, r1
 8012e68:	40c2      	lsrs	r2, r0
 8012e6a:	6163      	str	r3, [r4, #20]
 8012e6c:	9201      	str	r2, [sp, #4]
 8012e6e:	9b01      	ldr	r3, [sp, #4]
 8012e70:	61a3      	str	r3, [r4, #24]
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	bf14      	ite	ne
 8012e76:	2202      	movne	r2, #2
 8012e78:	2201      	moveq	r2, #1
 8012e7a:	6122      	str	r2, [r4, #16]
 8012e7c:	b1d5      	cbz	r5, 8012eb4 <__d2b+0x98>
 8012e7e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012e82:	4405      	add	r5, r0
 8012e84:	f8c9 5000 	str.w	r5, [r9]
 8012e88:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012e8c:	f8c8 0000 	str.w	r0, [r8]
 8012e90:	4620      	mov	r0, r4
 8012e92:	b003      	add	sp, #12
 8012e94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012e98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012e9c:	e7d5      	b.n	8012e4a <__d2b+0x2e>
 8012e9e:	6161      	str	r1, [r4, #20]
 8012ea0:	e7e5      	b.n	8012e6e <__d2b+0x52>
 8012ea2:	a801      	add	r0, sp, #4
 8012ea4:	f7ff fd5a 	bl	801295c <__lo0bits>
 8012ea8:	9b01      	ldr	r3, [sp, #4]
 8012eaa:	6163      	str	r3, [r4, #20]
 8012eac:	2201      	movs	r2, #1
 8012eae:	6122      	str	r2, [r4, #16]
 8012eb0:	3020      	adds	r0, #32
 8012eb2:	e7e3      	b.n	8012e7c <__d2b+0x60>
 8012eb4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012eb8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012ebc:	f8c9 0000 	str.w	r0, [r9]
 8012ec0:	6918      	ldr	r0, [r3, #16]
 8012ec2:	f7ff fd2b 	bl	801291c <__hi0bits>
 8012ec6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012eca:	e7df      	b.n	8012e8c <__d2b+0x70>
 8012ecc:	08013b57 	.word	0x08013b57
 8012ed0:	08013b68 	.word	0x08013b68

08012ed4 <_calloc_r>:
 8012ed4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012ed6:	fba1 2402 	umull	r2, r4, r1, r2
 8012eda:	b94c      	cbnz	r4, 8012ef0 <_calloc_r+0x1c>
 8012edc:	4611      	mov	r1, r2
 8012ede:	9201      	str	r2, [sp, #4]
 8012ee0:	f7fe f9a2 	bl	8011228 <_malloc_r>
 8012ee4:	9a01      	ldr	r2, [sp, #4]
 8012ee6:	4605      	mov	r5, r0
 8012ee8:	b930      	cbnz	r0, 8012ef8 <_calloc_r+0x24>
 8012eea:	4628      	mov	r0, r5
 8012eec:	b003      	add	sp, #12
 8012eee:	bd30      	pop	{r4, r5, pc}
 8012ef0:	220c      	movs	r2, #12
 8012ef2:	6002      	str	r2, [r0, #0]
 8012ef4:	2500      	movs	r5, #0
 8012ef6:	e7f8      	b.n	8012eea <_calloc_r+0x16>
 8012ef8:	4621      	mov	r1, r4
 8012efa:	f7fe f921 	bl	8011140 <memset>
 8012efe:	e7f4      	b.n	8012eea <_calloc_r+0x16>

08012f00 <__assert_func>:
 8012f00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012f02:	4614      	mov	r4, r2
 8012f04:	461a      	mov	r2, r3
 8012f06:	4b09      	ldr	r3, [pc, #36]	; (8012f2c <__assert_func+0x2c>)
 8012f08:	681b      	ldr	r3, [r3, #0]
 8012f0a:	4605      	mov	r5, r0
 8012f0c:	68d8      	ldr	r0, [r3, #12]
 8012f0e:	b14c      	cbz	r4, 8012f24 <__assert_func+0x24>
 8012f10:	4b07      	ldr	r3, [pc, #28]	; (8012f30 <__assert_func+0x30>)
 8012f12:	9100      	str	r1, [sp, #0]
 8012f14:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012f18:	4906      	ldr	r1, [pc, #24]	; (8012f34 <__assert_func+0x34>)
 8012f1a:	462b      	mov	r3, r5
 8012f1c:	f000 f80e 	bl	8012f3c <fiprintf>
 8012f20:	f000 fa5a 	bl	80133d8 <abort>
 8012f24:	4b04      	ldr	r3, [pc, #16]	; (8012f38 <__assert_func+0x38>)
 8012f26:	461c      	mov	r4, r3
 8012f28:	e7f3      	b.n	8012f12 <__assert_func+0x12>
 8012f2a:	bf00      	nop
 8012f2c:	24000184 	.word	0x24000184
 8012f30:	08013cc4 	.word	0x08013cc4
 8012f34:	08013cd1 	.word	0x08013cd1
 8012f38:	08013cff 	.word	0x08013cff

08012f3c <fiprintf>:
 8012f3c:	b40e      	push	{r1, r2, r3}
 8012f3e:	b503      	push	{r0, r1, lr}
 8012f40:	4601      	mov	r1, r0
 8012f42:	ab03      	add	r3, sp, #12
 8012f44:	4805      	ldr	r0, [pc, #20]	; (8012f5c <fiprintf+0x20>)
 8012f46:	f853 2b04 	ldr.w	r2, [r3], #4
 8012f4a:	6800      	ldr	r0, [r0, #0]
 8012f4c:	9301      	str	r3, [sp, #4]
 8012f4e:	f000 f845 	bl	8012fdc <_vfiprintf_r>
 8012f52:	b002      	add	sp, #8
 8012f54:	f85d eb04 	ldr.w	lr, [sp], #4
 8012f58:	b003      	add	sp, #12
 8012f5a:	4770      	bx	lr
 8012f5c:	24000184 	.word	0x24000184

08012f60 <__retarget_lock_init_recursive>:
 8012f60:	4770      	bx	lr

08012f62 <__retarget_lock_acquire_recursive>:
 8012f62:	4770      	bx	lr

08012f64 <__retarget_lock_release_recursive>:
 8012f64:	4770      	bx	lr

08012f66 <__ascii_mbtowc>:
 8012f66:	b082      	sub	sp, #8
 8012f68:	b901      	cbnz	r1, 8012f6c <__ascii_mbtowc+0x6>
 8012f6a:	a901      	add	r1, sp, #4
 8012f6c:	b142      	cbz	r2, 8012f80 <__ascii_mbtowc+0x1a>
 8012f6e:	b14b      	cbz	r3, 8012f84 <__ascii_mbtowc+0x1e>
 8012f70:	7813      	ldrb	r3, [r2, #0]
 8012f72:	600b      	str	r3, [r1, #0]
 8012f74:	7812      	ldrb	r2, [r2, #0]
 8012f76:	1e10      	subs	r0, r2, #0
 8012f78:	bf18      	it	ne
 8012f7a:	2001      	movne	r0, #1
 8012f7c:	b002      	add	sp, #8
 8012f7e:	4770      	bx	lr
 8012f80:	4610      	mov	r0, r2
 8012f82:	e7fb      	b.n	8012f7c <__ascii_mbtowc+0x16>
 8012f84:	f06f 0001 	mvn.w	r0, #1
 8012f88:	e7f8      	b.n	8012f7c <__ascii_mbtowc+0x16>

08012f8a <__sfputc_r>:
 8012f8a:	6893      	ldr	r3, [r2, #8]
 8012f8c:	3b01      	subs	r3, #1
 8012f8e:	2b00      	cmp	r3, #0
 8012f90:	b410      	push	{r4}
 8012f92:	6093      	str	r3, [r2, #8]
 8012f94:	da08      	bge.n	8012fa8 <__sfputc_r+0x1e>
 8012f96:	6994      	ldr	r4, [r2, #24]
 8012f98:	42a3      	cmp	r3, r4
 8012f9a:	db01      	blt.n	8012fa0 <__sfputc_r+0x16>
 8012f9c:	290a      	cmp	r1, #10
 8012f9e:	d103      	bne.n	8012fa8 <__sfputc_r+0x1e>
 8012fa0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012fa4:	f000 b94a 	b.w	801323c <__swbuf_r>
 8012fa8:	6813      	ldr	r3, [r2, #0]
 8012faa:	1c58      	adds	r0, r3, #1
 8012fac:	6010      	str	r0, [r2, #0]
 8012fae:	7019      	strb	r1, [r3, #0]
 8012fb0:	4608      	mov	r0, r1
 8012fb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012fb6:	4770      	bx	lr

08012fb8 <__sfputs_r>:
 8012fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012fba:	4606      	mov	r6, r0
 8012fbc:	460f      	mov	r7, r1
 8012fbe:	4614      	mov	r4, r2
 8012fc0:	18d5      	adds	r5, r2, r3
 8012fc2:	42ac      	cmp	r4, r5
 8012fc4:	d101      	bne.n	8012fca <__sfputs_r+0x12>
 8012fc6:	2000      	movs	r0, #0
 8012fc8:	e007      	b.n	8012fda <__sfputs_r+0x22>
 8012fca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012fce:	463a      	mov	r2, r7
 8012fd0:	4630      	mov	r0, r6
 8012fd2:	f7ff ffda 	bl	8012f8a <__sfputc_r>
 8012fd6:	1c43      	adds	r3, r0, #1
 8012fd8:	d1f3      	bne.n	8012fc2 <__sfputs_r+0xa>
 8012fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012fdc <_vfiprintf_r>:
 8012fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fe0:	460d      	mov	r5, r1
 8012fe2:	b09d      	sub	sp, #116	; 0x74
 8012fe4:	4614      	mov	r4, r2
 8012fe6:	4698      	mov	r8, r3
 8012fe8:	4606      	mov	r6, r0
 8012fea:	b118      	cbz	r0, 8012ff4 <_vfiprintf_r+0x18>
 8012fec:	6983      	ldr	r3, [r0, #24]
 8012fee:	b90b      	cbnz	r3, 8012ff4 <_vfiprintf_r+0x18>
 8012ff0:	f000 fb14 	bl	801361c <__sinit>
 8012ff4:	4b89      	ldr	r3, [pc, #548]	; (801321c <_vfiprintf_r+0x240>)
 8012ff6:	429d      	cmp	r5, r3
 8012ff8:	d11b      	bne.n	8013032 <_vfiprintf_r+0x56>
 8012ffa:	6875      	ldr	r5, [r6, #4]
 8012ffc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012ffe:	07d9      	lsls	r1, r3, #31
 8013000:	d405      	bmi.n	801300e <_vfiprintf_r+0x32>
 8013002:	89ab      	ldrh	r3, [r5, #12]
 8013004:	059a      	lsls	r2, r3, #22
 8013006:	d402      	bmi.n	801300e <_vfiprintf_r+0x32>
 8013008:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801300a:	f7ff ffaa 	bl	8012f62 <__retarget_lock_acquire_recursive>
 801300e:	89ab      	ldrh	r3, [r5, #12]
 8013010:	071b      	lsls	r3, r3, #28
 8013012:	d501      	bpl.n	8013018 <_vfiprintf_r+0x3c>
 8013014:	692b      	ldr	r3, [r5, #16]
 8013016:	b9eb      	cbnz	r3, 8013054 <_vfiprintf_r+0x78>
 8013018:	4629      	mov	r1, r5
 801301a:	4630      	mov	r0, r6
 801301c:	f000 f96e 	bl	80132fc <__swsetup_r>
 8013020:	b1c0      	cbz	r0, 8013054 <_vfiprintf_r+0x78>
 8013022:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013024:	07dc      	lsls	r4, r3, #31
 8013026:	d50e      	bpl.n	8013046 <_vfiprintf_r+0x6a>
 8013028:	f04f 30ff 	mov.w	r0, #4294967295
 801302c:	b01d      	add	sp, #116	; 0x74
 801302e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013032:	4b7b      	ldr	r3, [pc, #492]	; (8013220 <_vfiprintf_r+0x244>)
 8013034:	429d      	cmp	r5, r3
 8013036:	d101      	bne.n	801303c <_vfiprintf_r+0x60>
 8013038:	68b5      	ldr	r5, [r6, #8]
 801303a:	e7df      	b.n	8012ffc <_vfiprintf_r+0x20>
 801303c:	4b79      	ldr	r3, [pc, #484]	; (8013224 <_vfiprintf_r+0x248>)
 801303e:	429d      	cmp	r5, r3
 8013040:	bf08      	it	eq
 8013042:	68f5      	ldreq	r5, [r6, #12]
 8013044:	e7da      	b.n	8012ffc <_vfiprintf_r+0x20>
 8013046:	89ab      	ldrh	r3, [r5, #12]
 8013048:	0598      	lsls	r0, r3, #22
 801304a:	d4ed      	bmi.n	8013028 <_vfiprintf_r+0x4c>
 801304c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801304e:	f7ff ff89 	bl	8012f64 <__retarget_lock_release_recursive>
 8013052:	e7e9      	b.n	8013028 <_vfiprintf_r+0x4c>
 8013054:	2300      	movs	r3, #0
 8013056:	9309      	str	r3, [sp, #36]	; 0x24
 8013058:	2320      	movs	r3, #32
 801305a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801305e:	f8cd 800c 	str.w	r8, [sp, #12]
 8013062:	2330      	movs	r3, #48	; 0x30
 8013064:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013228 <_vfiprintf_r+0x24c>
 8013068:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801306c:	f04f 0901 	mov.w	r9, #1
 8013070:	4623      	mov	r3, r4
 8013072:	469a      	mov	sl, r3
 8013074:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013078:	b10a      	cbz	r2, 801307e <_vfiprintf_r+0xa2>
 801307a:	2a25      	cmp	r2, #37	; 0x25
 801307c:	d1f9      	bne.n	8013072 <_vfiprintf_r+0x96>
 801307e:	ebba 0b04 	subs.w	fp, sl, r4
 8013082:	d00b      	beq.n	801309c <_vfiprintf_r+0xc0>
 8013084:	465b      	mov	r3, fp
 8013086:	4622      	mov	r2, r4
 8013088:	4629      	mov	r1, r5
 801308a:	4630      	mov	r0, r6
 801308c:	f7ff ff94 	bl	8012fb8 <__sfputs_r>
 8013090:	3001      	adds	r0, #1
 8013092:	f000 80aa 	beq.w	80131ea <_vfiprintf_r+0x20e>
 8013096:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013098:	445a      	add	r2, fp
 801309a:	9209      	str	r2, [sp, #36]	; 0x24
 801309c:	f89a 3000 	ldrb.w	r3, [sl]
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	f000 80a2 	beq.w	80131ea <_vfiprintf_r+0x20e>
 80130a6:	2300      	movs	r3, #0
 80130a8:	f04f 32ff 	mov.w	r2, #4294967295
 80130ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80130b0:	f10a 0a01 	add.w	sl, sl, #1
 80130b4:	9304      	str	r3, [sp, #16]
 80130b6:	9307      	str	r3, [sp, #28]
 80130b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80130bc:	931a      	str	r3, [sp, #104]	; 0x68
 80130be:	4654      	mov	r4, sl
 80130c0:	2205      	movs	r2, #5
 80130c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80130c6:	4858      	ldr	r0, [pc, #352]	; (8013228 <_vfiprintf_r+0x24c>)
 80130c8:	f7ed f912 	bl	80002f0 <memchr>
 80130cc:	9a04      	ldr	r2, [sp, #16]
 80130ce:	b9d8      	cbnz	r0, 8013108 <_vfiprintf_r+0x12c>
 80130d0:	06d1      	lsls	r1, r2, #27
 80130d2:	bf44      	itt	mi
 80130d4:	2320      	movmi	r3, #32
 80130d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80130da:	0713      	lsls	r3, r2, #28
 80130dc:	bf44      	itt	mi
 80130de:	232b      	movmi	r3, #43	; 0x2b
 80130e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80130e4:	f89a 3000 	ldrb.w	r3, [sl]
 80130e8:	2b2a      	cmp	r3, #42	; 0x2a
 80130ea:	d015      	beq.n	8013118 <_vfiprintf_r+0x13c>
 80130ec:	9a07      	ldr	r2, [sp, #28]
 80130ee:	4654      	mov	r4, sl
 80130f0:	2000      	movs	r0, #0
 80130f2:	f04f 0c0a 	mov.w	ip, #10
 80130f6:	4621      	mov	r1, r4
 80130f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80130fc:	3b30      	subs	r3, #48	; 0x30
 80130fe:	2b09      	cmp	r3, #9
 8013100:	d94e      	bls.n	80131a0 <_vfiprintf_r+0x1c4>
 8013102:	b1b0      	cbz	r0, 8013132 <_vfiprintf_r+0x156>
 8013104:	9207      	str	r2, [sp, #28]
 8013106:	e014      	b.n	8013132 <_vfiprintf_r+0x156>
 8013108:	eba0 0308 	sub.w	r3, r0, r8
 801310c:	fa09 f303 	lsl.w	r3, r9, r3
 8013110:	4313      	orrs	r3, r2
 8013112:	9304      	str	r3, [sp, #16]
 8013114:	46a2      	mov	sl, r4
 8013116:	e7d2      	b.n	80130be <_vfiprintf_r+0xe2>
 8013118:	9b03      	ldr	r3, [sp, #12]
 801311a:	1d19      	adds	r1, r3, #4
 801311c:	681b      	ldr	r3, [r3, #0]
 801311e:	9103      	str	r1, [sp, #12]
 8013120:	2b00      	cmp	r3, #0
 8013122:	bfbb      	ittet	lt
 8013124:	425b      	neglt	r3, r3
 8013126:	f042 0202 	orrlt.w	r2, r2, #2
 801312a:	9307      	strge	r3, [sp, #28]
 801312c:	9307      	strlt	r3, [sp, #28]
 801312e:	bfb8      	it	lt
 8013130:	9204      	strlt	r2, [sp, #16]
 8013132:	7823      	ldrb	r3, [r4, #0]
 8013134:	2b2e      	cmp	r3, #46	; 0x2e
 8013136:	d10c      	bne.n	8013152 <_vfiprintf_r+0x176>
 8013138:	7863      	ldrb	r3, [r4, #1]
 801313a:	2b2a      	cmp	r3, #42	; 0x2a
 801313c:	d135      	bne.n	80131aa <_vfiprintf_r+0x1ce>
 801313e:	9b03      	ldr	r3, [sp, #12]
 8013140:	1d1a      	adds	r2, r3, #4
 8013142:	681b      	ldr	r3, [r3, #0]
 8013144:	9203      	str	r2, [sp, #12]
 8013146:	2b00      	cmp	r3, #0
 8013148:	bfb8      	it	lt
 801314a:	f04f 33ff 	movlt.w	r3, #4294967295
 801314e:	3402      	adds	r4, #2
 8013150:	9305      	str	r3, [sp, #20]
 8013152:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013238 <_vfiprintf_r+0x25c>
 8013156:	7821      	ldrb	r1, [r4, #0]
 8013158:	2203      	movs	r2, #3
 801315a:	4650      	mov	r0, sl
 801315c:	f7ed f8c8 	bl	80002f0 <memchr>
 8013160:	b140      	cbz	r0, 8013174 <_vfiprintf_r+0x198>
 8013162:	2340      	movs	r3, #64	; 0x40
 8013164:	eba0 000a 	sub.w	r0, r0, sl
 8013168:	fa03 f000 	lsl.w	r0, r3, r0
 801316c:	9b04      	ldr	r3, [sp, #16]
 801316e:	4303      	orrs	r3, r0
 8013170:	3401      	adds	r4, #1
 8013172:	9304      	str	r3, [sp, #16]
 8013174:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013178:	482c      	ldr	r0, [pc, #176]	; (801322c <_vfiprintf_r+0x250>)
 801317a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801317e:	2206      	movs	r2, #6
 8013180:	f7ed f8b6 	bl	80002f0 <memchr>
 8013184:	2800      	cmp	r0, #0
 8013186:	d03f      	beq.n	8013208 <_vfiprintf_r+0x22c>
 8013188:	4b29      	ldr	r3, [pc, #164]	; (8013230 <_vfiprintf_r+0x254>)
 801318a:	bb1b      	cbnz	r3, 80131d4 <_vfiprintf_r+0x1f8>
 801318c:	9b03      	ldr	r3, [sp, #12]
 801318e:	3307      	adds	r3, #7
 8013190:	f023 0307 	bic.w	r3, r3, #7
 8013194:	3308      	adds	r3, #8
 8013196:	9303      	str	r3, [sp, #12]
 8013198:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801319a:	443b      	add	r3, r7
 801319c:	9309      	str	r3, [sp, #36]	; 0x24
 801319e:	e767      	b.n	8013070 <_vfiprintf_r+0x94>
 80131a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80131a4:	460c      	mov	r4, r1
 80131a6:	2001      	movs	r0, #1
 80131a8:	e7a5      	b.n	80130f6 <_vfiprintf_r+0x11a>
 80131aa:	2300      	movs	r3, #0
 80131ac:	3401      	adds	r4, #1
 80131ae:	9305      	str	r3, [sp, #20]
 80131b0:	4619      	mov	r1, r3
 80131b2:	f04f 0c0a 	mov.w	ip, #10
 80131b6:	4620      	mov	r0, r4
 80131b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80131bc:	3a30      	subs	r2, #48	; 0x30
 80131be:	2a09      	cmp	r2, #9
 80131c0:	d903      	bls.n	80131ca <_vfiprintf_r+0x1ee>
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	d0c5      	beq.n	8013152 <_vfiprintf_r+0x176>
 80131c6:	9105      	str	r1, [sp, #20]
 80131c8:	e7c3      	b.n	8013152 <_vfiprintf_r+0x176>
 80131ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80131ce:	4604      	mov	r4, r0
 80131d0:	2301      	movs	r3, #1
 80131d2:	e7f0      	b.n	80131b6 <_vfiprintf_r+0x1da>
 80131d4:	ab03      	add	r3, sp, #12
 80131d6:	9300      	str	r3, [sp, #0]
 80131d8:	462a      	mov	r2, r5
 80131da:	4b16      	ldr	r3, [pc, #88]	; (8013234 <_vfiprintf_r+0x258>)
 80131dc:	a904      	add	r1, sp, #16
 80131de:	4630      	mov	r0, r6
 80131e0:	f7fe f926 	bl	8011430 <_printf_float>
 80131e4:	4607      	mov	r7, r0
 80131e6:	1c78      	adds	r0, r7, #1
 80131e8:	d1d6      	bne.n	8013198 <_vfiprintf_r+0x1bc>
 80131ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80131ec:	07d9      	lsls	r1, r3, #31
 80131ee:	d405      	bmi.n	80131fc <_vfiprintf_r+0x220>
 80131f0:	89ab      	ldrh	r3, [r5, #12]
 80131f2:	059a      	lsls	r2, r3, #22
 80131f4:	d402      	bmi.n	80131fc <_vfiprintf_r+0x220>
 80131f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80131f8:	f7ff feb4 	bl	8012f64 <__retarget_lock_release_recursive>
 80131fc:	89ab      	ldrh	r3, [r5, #12]
 80131fe:	065b      	lsls	r3, r3, #25
 8013200:	f53f af12 	bmi.w	8013028 <_vfiprintf_r+0x4c>
 8013204:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013206:	e711      	b.n	801302c <_vfiprintf_r+0x50>
 8013208:	ab03      	add	r3, sp, #12
 801320a:	9300      	str	r3, [sp, #0]
 801320c:	462a      	mov	r2, r5
 801320e:	4b09      	ldr	r3, [pc, #36]	; (8013234 <_vfiprintf_r+0x258>)
 8013210:	a904      	add	r1, sp, #16
 8013212:	4630      	mov	r0, r6
 8013214:	f7fe fb98 	bl	8011948 <_printf_i>
 8013218:	e7e4      	b.n	80131e4 <_vfiprintf_r+0x208>
 801321a:	bf00      	nop
 801321c:	08013e3c 	.word	0x08013e3c
 8013220:	08013e5c 	.word	0x08013e5c
 8013224:	08013e1c 	.word	0x08013e1c
 8013228:	08013d0a 	.word	0x08013d0a
 801322c:	08013d14 	.word	0x08013d14
 8013230:	08011431 	.word	0x08011431
 8013234:	08012fb9 	.word	0x08012fb9
 8013238:	08013d10 	.word	0x08013d10

0801323c <__swbuf_r>:
 801323c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801323e:	460e      	mov	r6, r1
 8013240:	4614      	mov	r4, r2
 8013242:	4605      	mov	r5, r0
 8013244:	b118      	cbz	r0, 801324e <__swbuf_r+0x12>
 8013246:	6983      	ldr	r3, [r0, #24]
 8013248:	b90b      	cbnz	r3, 801324e <__swbuf_r+0x12>
 801324a:	f000 f9e7 	bl	801361c <__sinit>
 801324e:	4b21      	ldr	r3, [pc, #132]	; (80132d4 <__swbuf_r+0x98>)
 8013250:	429c      	cmp	r4, r3
 8013252:	d12b      	bne.n	80132ac <__swbuf_r+0x70>
 8013254:	686c      	ldr	r4, [r5, #4]
 8013256:	69a3      	ldr	r3, [r4, #24]
 8013258:	60a3      	str	r3, [r4, #8]
 801325a:	89a3      	ldrh	r3, [r4, #12]
 801325c:	071a      	lsls	r2, r3, #28
 801325e:	d52f      	bpl.n	80132c0 <__swbuf_r+0x84>
 8013260:	6923      	ldr	r3, [r4, #16]
 8013262:	b36b      	cbz	r3, 80132c0 <__swbuf_r+0x84>
 8013264:	6923      	ldr	r3, [r4, #16]
 8013266:	6820      	ldr	r0, [r4, #0]
 8013268:	1ac0      	subs	r0, r0, r3
 801326a:	6963      	ldr	r3, [r4, #20]
 801326c:	b2f6      	uxtb	r6, r6
 801326e:	4283      	cmp	r3, r0
 8013270:	4637      	mov	r7, r6
 8013272:	dc04      	bgt.n	801327e <__swbuf_r+0x42>
 8013274:	4621      	mov	r1, r4
 8013276:	4628      	mov	r0, r5
 8013278:	f000 f93c 	bl	80134f4 <_fflush_r>
 801327c:	bb30      	cbnz	r0, 80132cc <__swbuf_r+0x90>
 801327e:	68a3      	ldr	r3, [r4, #8]
 8013280:	3b01      	subs	r3, #1
 8013282:	60a3      	str	r3, [r4, #8]
 8013284:	6823      	ldr	r3, [r4, #0]
 8013286:	1c5a      	adds	r2, r3, #1
 8013288:	6022      	str	r2, [r4, #0]
 801328a:	701e      	strb	r6, [r3, #0]
 801328c:	6963      	ldr	r3, [r4, #20]
 801328e:	3001      	adds	r0, #1
 8013290:	4283      	cmp	r3, r0
 8013292:	d004      	beq.n	801329e <__swbuf_r+0x62>
 8013294:	89a3      	ldrh	r3, [r4, #12]
 8013296:	07db      	lsls	r3, r3, #31
 8013298:	d506      	bpl.n	80132a8 <__swbuf_r+0x6c>
 801329a:	2e0a      	cmp	r6, #10
 801329c:	d104      	bne.n	80132a8 <__swbuf_r+0x6c>
 801329e:	4621      	mov	r1, r4
 80132a0:	4628      	mov	r0, r5
 80132a2:	f000 f927 	bl	80134f4 <_fflush_r>
 80132a6:	b988      	cbnz	r0, 80132cc <__swbuf_r+0x90>
 80132a8:	4638      	mov	r0, r7
 80132aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80132ac:	4b0a      	ldr	r3, [pc, #40]	; (80132d8 <__swbuf_r+0x9c>)
 80132ae:	429c      	cmp	r4, r3
 80132b0:	d101      	bne.n	80132b6 <__swbuf_r+0x7a>
 80132b2:	68ac      	ldr	r4, [r5, #8]
 80132b4:	e7cf      	b.n	8013256 <__swbuf_r+0x1a>
 80132b6:	4b09      	ldr	r3, [pc, #36]	; (80132dc <__swbuf_r+0xa0>)
 80132b8:	429c      	cmp	r4, r3
 80132ba:	bf08      	it	eq
 80132bc:	68ec      	ldreq	r4, [r5, #12]
 80132be:	e7ca      	b.n	8013256 <__swbuf_r+0x1a>
 80132c0:	4621      	mov	r1, r4
 80132c2:	4628      	mov	r0, r5
 80132c4:	f000 f81a 	bl	80132fc <__swsetup_r>
 80132c8:	2800      	cmp	r0, #0
 80132ca:	d0cb      	beq.n	8013264 <__swbuf_r+0x28>
 80132cc:	f04f 37ff 	mov.w	r7, #4294967295
 80132d0:	e7ea      	b.n	80132a8 <__swbuf_r+0x6c>
 80132d2:	bf00      	nop
 80132d4:	08013e3c 	.word	0x08013e3c
 80132d8:	08013e5c 	.word	0x08013e5c
 80132dc:	08013e1c 	.word	0x08013e1c

080132e0 <__ascii_wctomb>:
 80132e0:	b149      	cbz	r1, 80132f6 <__ascii_wctomb+0x16>
 80132e2:	2aff      	cmp	r2, #255	; 0xff
 80132e4:	bf85      	ittet	hi
 80132e6:	238a      	movhi	r3, #138	; 0x8a
 80132e8:	6003      	strhi	r3, [r0, #0]
 80132ea:	700a      	strbls	r2, [r1, #0]
 80132ec:	f04f 30ff 	movhi.w	r0, #4294967295
 80132f0:	bf98      	it	ls
 80132f2:	2001      	movls	r0, #1
 80132f4:	4770      	bx	lr
 80132f6:	4608      	mov	r0, r1
 80132f8:	4770      	bx	lr
	...

080132fc <__swsetup_r>:
 80132fc:	4b32      	ldr	r3, [pc, #200]	; (80133c8 <__swsetup_r+0xcc>)
 80132fe:	b570      	push	{r4, r5, r6, lr}
 8013300:	681d      	ldr	r5, [r3, #0]
 8013302:	4606      	mov	r6, r0
 8013304:	460c      	mov	r4, r1
 8013306:	b125      	cbz	r5, 8013312 <__swsetup_r+0x16>
 8013308:	69ab      	ldr	r3, [r5, #24]
 801330a:	b913      	cbnz	r3, 8013312 <__swsetup_r+0x16>
 801330c:	4628      	mov	r0, r5
 801330e:	f000 f985 	bl	801361c <__sinit>
 8013312:	4b2e      	ldr	r3, [pc, #184]	; (80133cc <__swsetup_r+0xd0>)
 8013314:	429c      	cmp	r4, r3
 8013316:	d10f      	bne.n	8013338 <__swsetup_r+0x3c>
 8013318:	686c      	ldr	r4, [r5, #4]
 801331a:	89a3      	ldrh	r3, [r4, #12]
 801331c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013320:	0719      	lsls	r1, r3, #28
 8013322:	d42c      	bmi.n	801337e <__swsetup_r+0x82>
 8013324:	06dd      	lsls	r5, r3, #27
 8013326:	d411      	bmi.n	801334c <__swsetup_r+0x50>
 8013328:	2309      	movs	r3, #9
 801332a:	6033      	str	r3, [r6, #0]
 801332c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013330:	81a3      	strh	r3, [r4, #12]
 8013332:	f04f 30ff 	mov.w	r0, #4294967295
 8013336:	e03e      	b.n	80133b6 <__swsetup_r+0xba>
 8013338:	4b25      	ldr	r3, [pc, #148]	; (80133d0 <__swsetup_r+0xd4>)
 801333a:	429c      	cmp	r4, r3
 801333c:	d101      	bne.n	8013342 <__swsetup_r+0x46>
 801333e:	68ac      	ldr	r4, [r5, #8]
 8013340:	e7eb      	b.n	801331a <__swsetup_r+0x1e>
 8013342:	4b24      	ldr	r3, [pc, #144]	; (80133d4 <__swsetup_r+0xd8>)
 8013344:	429c      	cmp	r4, r3
 8013346:	bf08      	it	eq
 8013348:	68ec      	ldreq	r4, [r5, #12]
 801334a:	e7e6      	b.n	801331a <__swsetup_r+0x1e>
 801334c:	0758      	lsls	r0, r3, #29
 801334e:	d512      	bpl.n	8013376 <__swsetup_r+0x7a>
 8013350:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013352:	b141      	cbz	r1, 8013366 <__swsetup_r+0x6a>
 8013354:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013358:	4299      	cmp	r1, r3
 801335a:	d002      	beq.n	8013362 <__swsetup_r+0x66>
 801335c:	4630      	mov	r0, r6
 801335e:	f7fd fef7 	bl	8011150 <_free_r>
 8013362:	2300      	movs	r3, #0
 8013364:	6363      	str	r3, [r4, #52]	; 0x34
 8013366:	89a3      	ldrh	r3, [r4, #12]
 8013368:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801336c:	81a3      	strh	r3, [r4, #12]
 801336e:	2300      	movs	r3, #0
 8013370:	6063      	str	r3, [r4, #4]
 8013372:	6923      	ldr	r3, [r4, #16]
 8013374:	6023      	str	r3, [r4, #0]
 8013376:	89a3      	ldrh	r3, [r4, #12]
 8013378:	f043 0308 	orr.w	r3, r3, #8
 801337c:	81a3      	strh	r3, [r4, #12]
 801337e:	6923      	ldr	r3, [r4, #16]
 8013380:	b94b      	cbnz	r3, 8013396 <__swsetup_r+0x9a>
 8013382:	89a3      	ldrh	r3, [r4, #12]
 8013384:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013388:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801338c:	d003      	beq.n	8013396 <__swsetup_r+0x9a>
 801338e:	4621      	mov	r1, r4
 8013390:	4630      	mov	r0, r6
 8013392:	f000 fa05 	bl	80137a0 <__smakebuf_r>
 8013396:	89a0      	ldrh	r0, [r4, #12]
 8013398:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801339c:	f010 0301 	ands.w	r3, r0, #1
 80133a0:	d00a      	beq.n	80133b8 <__swsetup_r+0xbc>
 80133a2:	2300      	movs	r3, #0
 80133a4:	60a3      	str	r3, [r4, #8]
 80133a6:	6963      	ldr	r3, [r4, #20]
 80133a8:	425b      	negs	r3, r3
 80133aa:	61a3      	str	r3, [r4, #24]
 80133ac:	6923      	ldr	r3, [r4, #16]
 80133ae:	b943      	cbnz	r3, 80133c2 <__swsetup_r+0xc6>
 80133b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80133b4:	d1ba      	bne.n	801332c <__swsetup_r+0x30>
 80133b6:	bd70      	pop	{r4, r5, r6, pc}
 80133b8:	0781      	lsls	r1, r0, #30
 80133ba:	bf58      	it	pl
 80133bc:	6963      	ldrpl	r3, [r4, #20]
 80133be:	60a3      	str	r3, [r4, #8]
 80133c0:	e7f4      	b.n	80133ac <__swsetup_r+0xb0>
 80133c2:	2000      	movs	r0, #0
 80133c4:	e7f7      	b.n	80133b6 <__swsetup_r+0xba>
 80133c6:	bf00      	nop
 80133c8:	24000184 	.word	0x24000184
 80133cc:	08013e3c 	.word	0x08013e3c
 80133d0:	08013e5c 	.word	0x08013e5c
 80133d4:	08013e1c 	.word	0x08013e1c

080133d8 <abort>:
 80133d8:	b508      	push	{r3, lr}
 80133da:	2006      	movs	r0, #6
 80133dc:	f000 fa48 	bl	8013870 <raise>
 80133e0:	2001      	movs	r0, #1
 80133e2:	f7ee f9d7 	bl	8001794 <_exit>
	...

080133e8 <__sflush_r>:
 80133e8:	898a      	ldrh	r2, [r1, #12]
 80133ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133ee:	4605      	mov	r5, r0
 80133f0:	0710      	lsls	r0, r2, #28
 80133f2:	460c      	mov	r4, r1
 80133f4:	d458      	bmi.n	80134a8 <__sflush_r+0xc0>
 80133f6:	684b      	ldr	r3, [r1, #4]
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	dc05      	bgt.n	8013408 <__sflush_r+0x20>
 80133fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80133fe:	2b00      	cmp	r3, #0
 8013400:	dc02      	bgt.n	8013408 <__sflush_r+0x20>
 8013402:	2000      	movs	r0, #0
 8013404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013408:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801340a:	2e00      	cmp	r6, #0
 801340c:	d0f9      	beq.n	8013402 <__sflush_r+0x1a>
 801340e:	2300      	movs	r3, #0
 8013410:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013414:	682f      	ldr	r7, [r5, #0]
 8013416:	602b      	str	r3, [r5, #0]
 8013418:	d032      	beq.n	8013480 <__sflush_r+0x98>
 801341a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801341c:	89a3      	ldrh	r3, [r4, #12]
 801341e:	075a      	lsls	r2, r3, #29
 8013420:	d505      	bpl.n	801342e <__sflush_r+0x46>
 8013422:	6863      	ldr	r3, [r4, #4]
 8013424:	1ac0      	subs	r0, r0, r3
 8013426:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013428:	b10b      	cbz	r3, 801342e <__sflush_r+0x46>
 801342a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801342c:	1ac0      	subs	r0, r0, r3
 801342e:	2300      	movs	r3, #0
 8013430:	4602      	mov	r2, r0
 8013432:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013434:	6a21      	ldr	r1, [r4, #32]
 8013436:	4628      	mov	r0, r5
 8013438:	47b0      	blx	r6
 801343a:	1c43      	adds	r3, r0, #1
 801343c:	89a3      	ldrh	r3, [r4, #12]
 801343e:	d106      	bne.n	801344e <__sflush_r+0x66>
 8013440:	6829      	ldr	r1, [r5, #0]
 8013442:	291d      	cmp	r1, #29
 8013444:	d82c      	bhi.n	80134a0 <__sflush_r+0xb8>
 8013446:	4a2a      	ldr	r2, [pc, #168]	; (80134f0 <__sflush_r+0x108>)
 8013448:	40ca      	lsrs	r2, r1
 801344a:	07d6      	lsls	r6, r2, #31
 801344c:	d528      	bpl.n	80134a0 <__sflush_r+0xb8>
 801344e:	2200      	movs	r2, #0
 8013450:	6062      	str	r2, [r4, #4]
 8013452:	04d9      	lsls	r1, r3, #19
 8013454:	6922      	ldr	r2, [r4, #16]
 8013456:	6022      	str	r2, [r4, #0]
 8013458:	d504      	bpl.n	8013464 <__sflush_r+0x7c>
 801345a:	1c42      	adds	r2, r0, #1
 801345c:	d101      	bne.n	8013462 <__sflush_r+0x7a>
 801345e:	682b      	ldr	r3, [r5, #0]
 8013460:	b903      	cbnz	r3, 8013464 <__sflush_r+0x7c>
 8013462:	6560      	str	r0, [r4, #84]	; 0x54
 8013464:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013466:	602f      	str	r7, [r5, #0]
 8013468:	2900      	cmp	r1, #0
 801346a:	d0ca      	beq.n	8013402 <__sflush_r+0x1a>
 801346c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013470:	4299      	cmp	r1, r3
 8013472:	d002      	beq.n	801347a <__sflush_r+0x92>
 8013474:	4628      	mov	r0, r5
 8013476:	f7fd fe6b 	bl	8011150 <_free_r>
 801347a:	2000      	movs	r0, #0
 801347c:	6360      	str	r0, [r4, #52]	; 0x34
 801347e:	e7c1      	b.n	8013404 <__sflush_r+0x1c>
 8013480:	6a21      	ldr	r1, [r4, #32]
 8013482:	2301      	movs	r3, #1
 8013484:	4628      	mov	r0, r5
 8013486:	47b0      	blx	r6
 8013488:	1c41      	adds	r1, r0, #1
 801348a:	d1c7      	bne.n	801341c <__sflush_r+0x34>
 801348c:	682b      	ldr	r3, [r5, #0]
 801348e:	2b00      	cmp	r3, #0
 8013490:	d0c4      	beq.n	801341c <__sflush_r+0x34>
 8013492:	2b1d      	cmp	r3, #29
 8013494:	d001      	beq.n	801349a <__sflush_r+0xb2>
 8013496:	2b16      	cmp	r3, #22
 8013498:	d101      	bne.n	801349e <__sflush_r+0xb6>
 801349a:	602f      	str	r7, [r5, #0]
 801349c:	e7b1      	b.n	8013402 <__sflush_r+0x1a>
 801349e:	89a3      	ldrh	r3, [r4, #12]
 80134a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80134a4:	81a3      	strh	r3, [r4, #12]
 80134a6:	e7ad      	b.n	8013404 <__sflush_r+0x1c>
 80134a8:	690f      	ldr	r7, [r1, #16]
 80134aa:	2f00      	cmp	r7, #0
 80134ac:	d0a9      	beq.n	8013402 <__sflush_r+0x1a>
 80134ae:	0793      	lsls	r3, r2, #30
 80134b0:	680e      	ldr	r6, [r1, #0]
 80134b2:	bf08      	it	eq
 80134b4:	694b      	ldreq	r3, [r1, #20]
 80134b6:	600f      	str	r7, [r1, #0]
 80134b8:	bf18      	it	ne
 80134ba:	2300      	movne	r3, #0
 80134bc:	eba6 0807 	sub.w	r8, r6, r7
 80134c0:	608b      	str	r3, [r1, #8]
 80134c2:	f1b8 0f00 	cmp.w	r8, #0
 80134c6:	dd9c      	ble.n	8013402 <__sflush_r+0x1a>
 80134c8:	6a21      	ldr	r1, [r4, #32]
 80134ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80134cc:	4643      	mov	r3, r8
 80134ce:	463a      	mov	r2, r7
 80134d0:	4628      	mov	r0, r5
 80134d2:	47b0      	blx	r6
 80134d4:	2800      	cmp	r0, #0
 80134d6:	dc06      	bgt.n	80134e6 <__sflush_r+0xfe>
 80134d8:	89a3      	ldrh	r3, [r4, #12]
 80134da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80134de:	81a3      	strh	r3, [r4, #12]
 80134e0:	f04f 30ff 	mov.w	r0, #4294967295
 80134e4:	e78e      	b.n	8013404 <__sflush_r+0x1c>
 80134e6:	4407      	add	r7, r0
 80134e8:	eba8 0800 	sub.w	r8, r8, r0
 80134ec:	e7e9      	b.n	80134c2 <__sflush_r+0xda>
 80134ee:	bf00      	nop
 80134f0:	20400001 	.word	0x20400001

080134f4 <_fflush_r>:
 80134f4:	b538      	push	{r3, r4, r5, lr}
 80134f6:	690b      	ldr	r3, [r1, #16]
 80134f8:	4605      	mov	r5, r0
 80134fa:	460c      	mov	r4, r1
 80134fc:	b913      	cbnz	r3, 8013504 <_fflush_r+0x10>
 80134fe:	2500      	movs	r5, #0
 8013500:	4628      	mov	r0, r5
 8013502:	bd38      	pop	{r3, r4, r5, pc}
 8013504:	b118      	cbz	r0, 801350e <_fflush_r+0x1a>
 8013506:	6983      	ldr	r3, [r0, #24]
 8013508:	b90b      	cbnz	r3, 801350e <_fflush_r+0x1a>
 801350a:	f000 f887 	bl	801361c <__sinit>
 801350e:	4b14      	ldr	r3, [pc, #80]	; (8013560 <_fflush_r+0x6c>)
 8013510:	429c      	cmp	r4, r3
 8013512:	d11b      	bne.n	801354c <_fflush_r+0x58>
 8013514:	686c      	ldr	r4, [r5, #4]
 8013516:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801351a:	2b00      	cmp	r3, #0
 801351c:	d0ef      	beq.n	80134fe <_fflush_r+0xa>
 801351e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013520:	07d0      	lsls	r0, r2, #31
 8013522:	d404      	bmi.n	801352e <_fflush_r+0x3a>
 8013524:	0599      	lsls	r1, r3, #22
 8013526:	d402      	bmi.n	801352e <_fflush_r+0x3a>
 8013528:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801352a:	f7ff fd1a 	bl	8012f62 <__retarget_lock_acquire_recursive>
 801352e:	4628      	mov	r0, r5
 8013530:	4621      	mov	r1, r4
 8013532:	f7ff ff59 	bl	80133e8 <__sflush_r>
 8013536:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013538:	07da      	lsls	r2, r3, #31
 801353a:	4605      	mov	r5, r0
 801353c:	d4e0      	bmi.n	8013500 <_fflush_r+0xc>
 801353e:	89a3      	ldrh	r3, [r4, #12]
 8013540:	059b      	lsls	r3, r3, #22
 8013542:	d4dd      	bmi.n	8013500 <_fflush_r+0xc>
 8013544:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013546:	f7ff fd0d 	bl	8012f64 <__retarget_lock_release_recursive>
 801354a:	e7d9      	b.n	8013500 <_fflush_r+0xc>
 801354c:	4b05      	ldr	r3, [pc, #20]	; (8013564 <_fflush_r+0x70>)
 801354e:	429c      	cmp	r4, r3
 8013550:	d101      	bne.n	8013556 <_fflush_r+0x62>
 8013552:	68ac      	ldr	r4, [r5, #8]
 8013554:	e7df      	b.n	8013516 <_fflush_r+0x22>
 8013556:	4b04      	ldr	r3, [pc, #16]	; (8013568 <_fflush_r+0x74>)
 8013558:	429c      	cmp	r4, r3
 801355a:	bf08      	it	eq
 801355c:	68ec      	ldreq	r4, [r5, #12]
 801355e:	e7da      	b.n	8013516 <_fflush_r+0x22>
 8013560:	08013e3c 	.word	0x08013e3c
 8013564:	08013e5c 	.word	0x08013e5c
 8013568:	08013e1c 	.word	0x08013e1c

0801356c <std>:
 801356c:	2300      	movs	r3, #0
 801356e:	b510      	push	{r4, lr}
 8013570:	4604      	mov	r4, r0
 8013572:	e9c0 3300 	strd	r3, r3, [r0]
 8013576:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801357a:	6083      	str	r3, [r0, #8]
 801357c:	8181      	strh	r1, [r0, #12]
 801357e:	6643      	str	r3, [r0, #100]	; 0x64
 8013580:	81c2      	strh	r2, [r0, #14]
 8013582:	6183      	str	r3, [r0, #24]
 8013584:	4619      	mov	r1, r3
 8013586:	2208      	movs	r2, #8
 8013588:	305c      	adds	r0, #92	; 0x5c
 801358a:	f7fd fdd9 	bl	8011140 <memset>
 801358e:	4b05      	ldr	r3, [pc, #20]	; (80135a4 <std+0x38>)
 8013590:	6263      	str	r3, [r4, #36]	; 0x24
 8013592:	4b05      	ldr	r3, [pc, #20]	; (80135a8 <std+0x3c>)
 8013594:	62a3      	str	r3, [r4, #40]	; 0x28
 8013596:	4b05      	ldr	r3, [pc, #20]	; (80135ac <std+0x40>)
 8013598:	62e3      	str	r3, [r4, #44]	; 0x2c
 801359a:	4b05      	ldr	r3, [pc, #20]	; (80135b0 <std+0x44>)
 801359c:	6224      	str	r4, [r4, #32]
 801359e:	6323      	str	r3, [r4, #48]	; 0x30
 80135a0:	bd10      	pop	{r4, pc}
 80135a2:	bf00      	nop
 80135a4:	080138a9 	.word	0x080138a9
 80135a8:	080138cb 	.word	0x080138cb
 80135ac:	08013903 	.word	0x08013903
 80135b0:	08013927 	.word	0x08013927

080135b4 <_cleanup_r>:
 80135b4:	4901      	ldr	r1, [pc, #4]	; (80135bc <_cleanup_r+0x8>)
 80135b6:	f000 b8af 	b.w	8013718 <_fwalk_reent>
 80135ba:	bf00      	nop
 80135bc:	080134f5 	.word	0x080134f5

080135c0 <__sfmoreglue>:
 80135c0:	b570      	push	{r4, r5, r6, lr}
 80135c2:	2268      	movs	r2, #104	; 0x68
 80135c4:	1e4d      	subs	r5, r1, #1
 80135c6:	4355      	muls	r5, r2
 80135c8:	460e      	mov	r6, r1
 80135ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80135ce:	f7fd fe2b 	bl	8011228 <_malloc_r>
 80135d2:	4604      	mov	r4, r0
 80135d4:	b140      	cbz	r0, 80135e8 <__sfmoreglue+0x28>
 80135d6:	2100      	movs	r1, #0
 80135d8:	e9c0 1600 	strd	r1, r6, [r0]
 80135dc:	300c      	adds	r0, #12
 80135de:	60a0      	str	r0, [r4, #8]
 80135e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80135e4:	f7fd fdac 	bl	8011140 <memset>
 80135e8:	4620      	mov	r0, r4
 80135ea:	bd70      	pop	{r4, r5, r6, pc}

080135ec <__sfp_lock_acquire>:
 80135ec:	4801      	ldr	r0, [pc, #4]	; (80135f4 <__sfp_lock_acquire+0x8>)
 80135ee:	f7ff bcb8 	b.w	8012f62 <__retarget_lock_acquire_recursive>
 80135f2:	bf00      	nop
 80135f4:	2400204d 	.word	0x2400204d

080135f8 <__sfp_lock_release>:
 80135f8:	4801      	ldr	r0, [pc, #4]	; (8013600 <__sfp_lock_release+0x8>)
 80135fa:	f7ff bcb3 	b.w	8012f64 <__retarget_lock_release_recursive>
 80135fe:	bf00      	nop
 8013600:	2400204d 	.word	0x2400204d

08013604 <__sinit_lock_acquire>:
 8013604:	4801      	ldr	r0, [pc, #4]	; (801360c <__sinit_lock_acquire+0x8>)
 8013606:	f7ff bcac 	b.w	8012f62 <__retarget_lock_acquire_recursive>
 801360a:	bf00      	nop
 801360c:	2400204e 	.word	0x2400204e

08013610 <__sinit_lock_release>:
 8013610:	4801      	ldr	r0, [pc, #4]	; (8013618 <__sinit_lock_release+0x8>)
 8013612:	f7ff bca7 	b.w	8012f64 <__retarget_lock_release_recursive>
 8013616:	bf00      	nop
 8013618:	2400204e 	.word	0x2400204e

0801361c <__sinit>:
 801361c:	b510      	push	{r4, lr}
 801361e:	4604      	mov	r4, r0
 8013620:	f7ff fff0 	bl	8013604 <__sinit_lock_acquire>
 8013624:	69a3      	ldr	r3, [r4, #24]
 8013626:	b11b      	cbz	r3, 8013630 <__sinit+0x14>
 8013628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801362c:	f7ff bff0 	b.w	8013610 <__sinit_lock_release>
 8013630:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013634:	6523      	str	r3, [r4, #80]	; 0x50
 8013636:	4b13      	ldr	r3, [pc, #76]	; (8013684 <__sinit+0x68>)
 8013638:	4a13      	ldr	r2, [pc, #76]	; (8013688 <__sinit+0x6c>)
 801363a:	681b      	ldr	r3, [r3, #0]
 801363c:	62a2      	str	r2, [r4, #40]	; 0x28
 801363e:	42a3      	cmp	r3, r4
 8013640:	bf04      	itt	eq
 8013642:	2301      	moveq	r3, #1
 8013644:	61a3      	streq	r3, [r4, #24]
 8013646:	4620      	mov	r0, r4
 8013648:	f000 f820 	bl	801368c <__sfp>
 801364c:	6060      	str	r0, [r4, #4]
 801364e:	4620      	mov	r0, r4
 8013650:	f000 f81c 	bl	801368c <__sfp>
 8013654:	60a0      	str	r0, [r4, #8]
 8013656:	4620      	mov	r0, r4
 8013658:	f000 f818 	bl	801368c <__sfp>
 801365c:	2200      	movs	r2, #0
 801365e:	60e0      	str	r0, [r4, #12]
 8013660:	2104      	movs	r1, #4
 8013662:	6860      	ldr	r0, [r4, #4]
 8013664:	f7ff ff82 	bl	801356c <std>
 8013668:	68a0      	ldr	r0, [r4, #8]
 801366a:	2201      	movs	r2, #1
 801366c:	2109      	movs	r1, #9
 801366e:	f7ff ff7d 	bl	801356c <std>
 8013672:	68e0      	ldr	r0, [r4, #12]
 8013674:	2202      	movs	r2, #2
 8013676:	2112      	movs	r1, #18
 8013678:	f7ff ff78 	bl	801356c <std>
 801367c:	2301      	movs	r3, #1
 801367e:	61a3      	str	r3, [r4, #24]
 8013680:	e7d2      	b.n	8013628 <__sinit+0xc>
 8013682:	bf00      	nop
 8013684:	08013aa0 	.word	0x08013aa0
 8013688:	080135b5 	.word	0x080135b5

0801368c <__sfp>:
 801368c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801368e:	4607      	mov	r7, r0
 8013690:	f7ff ffac 	bl	80135ec <__sfp_lock_acquire>
 8013694:	4b1e      	ldr	r3, [pc, #120]	; (8013710 <__sfp+0x84>)
 8013696:	681e      	ldr	r6, [r3, #0]
 8013698:	69b3      	ldr	r3, [r6, #24]
 801369a:	b913      	cbnz	r3, 80136a2 <__sfp+0x16>
 801369c:	4630      	mov	r0, r6
 801369e:	f7ff ffbd 	bl	801361c <__sinit>
 80136a2:	3648      	adds	r6, #72	; 0x48
 80136a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80136a8:	3b01      	subs	r3, #1
 80136aa:	d503      	bpl.n	80136b4 <__sfp+0x28>
 80136ac:	6833      	ldr	r3, [r6, #0]
 80136ae:	b30b      	cbz	r3, 80136f4 <__sfp+0x68>
 80136b0:	6836      	ldr	r6, [r6, #0]
 80136b2:	e7f7      	b.n	80136a4 <__sfp+0x18>
 80136b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80136b8:	b9d5      	cbnz	r5, 80136f0 <__sfp+0x64>
 80136ba:	4b16      	ldr	r3, [pc, #88]	; (8013714 <__sfp+0x88>)
 80136bc:	60e3      	str	r3, [r4, #12]
 80136be:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80136c2:	6665      	str	r5, [r4, #100]	; 0x64
 80136c4:	f7ff fc4c 	bl	8012f60 <__retarget_lock_init_recursive>
 80136c8:	f7ff ff96 	bl	80135f8 <__sfp_lock_release>
 80136cc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80136d0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80136d4:	6025      	str	r5, [r4, #0]
 80136d6:	61a5      	str	r5, [r4, #24]
 80136d8:	2208      	movs	r2, #8
 80136da:	4629      	mov	r1, r5
 80136dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80136e0:	f7fd fd2e 	bl	8011140 <memset>
 80136e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80136e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80136ec:	4620      	mov	r0, r4
 80136ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80136f0:	3468      	adds	r4, #104	; 0x68
 80136f2:	e7d9      	b.n	80136a8 <__sfp+0x1c>
 80136f4:	2104      	movs	r1, #4
 80136f6:	4638      	mov	r0, r7
 80136f8:	f7ff ff62 	bl	80135c0 <__sfmoreglue>
 80136fc:	4604      	mov	r4, r0
 80136fe:	6030      	str	r0, [r6, #0]
 8013700:	2800      	cmp	r0, #0
 8013702:	d1d5      	bne.n	80136b0 <__sfp+0x24>
 8013704:	f7ff ff78 	bl	80135f8 <__sfp_lock_release>
 8013708:	230c      	movs	r3, #12
 801370a:	603b      	str	r3, [r7, #0]
 801370c:	e7ee      	b.n	80136ec <__sfp+0x60>
 801370e:	bf00      	nop
 8013710:	08013aa0 	.word	0x08013aa0
 8013714:	ffff0001 	.word	0xffff0001

08013718 <_fwalk_reent>:
 8013718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801371c:	4606      	mov	r6, r0
 801371e:	4688      	mov	r8, r1
 8013720:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013724:	2700      	movs	r7, #0
 8013726:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801372a:	f1b9 0901 	subs.w	r9, r9, #1
 801372e:	d505      	bpl.n	801373c <_fwalk_reent+0x24>
 8013730:	6824      	ldr	r4, [r4, #0]
 8013732:	2c00      	cmp	r4, #0
 8013734:	d1f7      	bne.n	8013726 <_fwalk_reent+0xe>
 8013736:	4638      	mov	r0, r7
 8013738:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801373c:	89ab      	ldrh	r3, [r5, #12]
 801373e:	2b01      	cmp	r3, #1
 8013740:	d907      	bls.n	8013752 <_fwalk_reent+0x3a>
 8013742:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013746:	3301      	adds	r3, #1
 8013748:	d003      	beq.n	8013752 <_fwalk_reent+0x3a>
 801374a:	4629      	mov	r1, r5
 801374c:	4630      	mov	r0, r6
 801374e:	47c0      	blx	r8
 8013750:	4307      	orrs	r7, r0
 8013752:	3568      	adds	r5, #104	; 0x68
 8013754:	e7e9      	b.n	801372a <_fwalk_reent+0x12>

08013756 <__swhatbuf_r>:
 8013756:	b570      	push	{r4, r5, r6, lr}
 8013758:	460e      	mov	r6, r1
 801375a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801375e:	2900      	cmp	r1, #0
 8013760:	b096      	sub	sp, #88	; 0x58
 8013762:	4614      	mov	r4, r2
 8013764:	461d      	mov	r5, r3
 8013766:	da08      	bge.n	801377a <__swhatbuf_r+0x24>
 8013768:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801376c:	2200      	movs	r2, #0
 801376e:	602a      	str	r2, [r5, #0]
 8013770:	061a      	lsls	r2, r3, #24
 8013772:	d410      	bmi.n	8013796 <__swhatbuf_r+0x40>
 8013774:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013778:	e00e      	b.n	8013798 <__swhatbuf_r+0x42>
 801377a:	466a      	mov	r2, sp
 801377c:	f000 f8fa 	bl	8013974 <_fstat_r>
 8013780:	2800      	cmp	r0, #0
 8013782:	dbf1      	blt.n	8013768 <__swhatbuf_r+0x12>
 8013784:	9a01      	ldr	r2, [sp, #4]
 8013786:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801378a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801378e:	425a      	negs	r2, r3
 8013790:	415a      	adcs	r2, r3
 8013792:	602a      	str	r2, [r5, #0]
 8013794:	e7ee      	b.n	8013774 <__swhatbuf_r+0x1e>
 8013796:	2340      	movs	r3, #64	; 0x40
 8013798:	2000      	movs	r0, #0
 801379a:	6023      	str	r3, [r4, #0]
 801379c:	b016      	add	sp, #88	; 0x58
 801379e:	bd70      	pop	{r4, r5, r6, pc}

080137a0 <__smakebuf_r>:
 80137a0:	898b      	ldrh	r3, [r1, #12]
 80137a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80137a4:	079d      	lsls	r5, r3, #30
 80137a6:	4606      	mov	r6, r0
 80137a8:	460c      	mov	r4, r1
 80137aa:	d507      	bpl.n	80137bc <__smakebuf_r+0x1c>
 80137ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80137b0:	6023      	str	r3, [r4, #0]
 80137b2:	6123      	str	r3, [r4, #16]
 80137b4:	2301      	movs	r3, #1
 80137b6:	6163      	str	r3, [r4, #20]
 80137b8:	b002      	add	sp, #8
 80137ba:	bd70      	pop	{r4, r5, r6, pc}
 80137bc:	ab01      	add	r3, sp, #4
 80137be:	466a      	mov	r2, sp
 80137c0:	f7ff ffc9 	bl	8013756 <__swhatbuf_r>
 80137c4:	9900      	ldr	r1, [sp, #0]
 80137c6:	4605      	mov	r5, r0
 80137c8:	4630      	mov	r0, r6
 80137ca:	f7fd fd2d 	bl	8011228 <_malloc_r>
 80137ce:	b948      	cbnz	r0, 80137e4 <__smakebuf_r+0x44>
 80137d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80137d4:	059a      	lsls	r2, r3, #22
 80137d6:	d4ef      	bmi.n	80137b8 <__smakebuf_r+0x18>
 80137d8:	f023 0303 	bic.w	r3, r3, #3
 80137dc:	f043 0302 	orr.w	r3, r3, #2
 80137e0:	81a3      	strh	r3, [r4, #12]
 80137e2:	e7e3      	b.n	80137ac <__smakebuf_r+0xc>
 80137e4:	4b0d      	ldr	r3, [pc, #52]	; (801381c <__smakebuf_r+0x7c>)
 80137e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80137e8:	89a3      	ldrh	r3, [r4, #12]
 80137ea:	6020      	str	r0, [r4, #0]
 80137ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80137f0:	81a3      	strh	r3, [r4, #12]
 80137f2:	9b00      	ldr	r3, [sp, #0]
 80137f4:	6163      	str	r3, [r4, #20]
 80137f6:	9b01      	ldr	r3, [sp, #4]
 80137f8:	6120      	str	r0, [r4, #16]
 80137fa:	b15b      	cbz	r3, 8013814 <__smakebuf_r+0x74>
 80137fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013800:	4630      	mov	r0, r6
 8013802:	f000 f8c9 	bl	8013998 <_isatty_r>
 8013806:	b128      	cbz	r0, 8013814 <__smakebuf_r+0x74>
 8013808:	89a3      	ldrh	r3, [r4, #12]
 801380a:	f023 0303 	bic.w	r3, r3, #3
 801380e:	f043 0301 	orr.w	r3, r3, #1
 8013812:	81a3      	strh	r3, [r4, #12]
 8013814:	89a0      	ldrh	r0, [r4, #12]
 8013816:	4305      	orrs	r5, r0
 8013818:	81a5      	strh	r5, [r4, #12]
 801381a:	e7cd      	b.n	80137b8 <__smakebuf_r+0x18>
 801381c:	080135b5 	.word	0x080135b5

08013820 <_raise_r>:
 8013820:	291f      	cmp	r1, #31
 8013822:	b538      	push	{r3, r4, r5, lr}
 8013824:	4604      	mov	r4, r0
 8013826:	460d      	mov	r5, r1
 8013828:	d904      	bls.n	8013834 <_raise_r+0x14>
 801382a:	2316      	movs	r3, #22
 801382c:	6003      	str	r3, [r0, #0]
 801382e:	f04f 30ff 	mov.w	r0, #4294967295
 8013832:	bd38      	pop	{r3, r4, r5, pc}
 8013834:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013836:	b112      	cbz	r2, 801383e <_raise_r+0x1e>
 8013838:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801383c:	b94b      	cbnz	r3, 8013852 <_raise_r+0x32>
 801383e:	4620      	mov	r0, r4
 8013840:	f000 f830 	bl	80138a4 <_getpid_r>
 8013844:	462a      	mov	r2, r5
 8013846:	4601      	mov	r1, r0
 8013848:	4620      	mov	r0, r4
 801384a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801384e:	f000 b817 	b.w	8013880 <_kill_r>
 8013852:	2b01      	cmp	r3, #1
 8013854:	d00a      	beq.n	801386c <_raise_r+0x4c>
 8013856:	1c59      	adds	r1, r3, #1
 8013858:	d103      	bne.n	8013862 <_raise_r+0x42>
 801385a:	2316      	movs	r3, #22
 801385c:	6003      	str	r3, [r0, #0]
 801385e:	2001      	movs	r0, #1
 8013860:	e7e7      	b.n	8013832 <_raise_r+0x12>
 8013862:	2400      	movs	r4, #0
 8013864:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013868:	4628      	mov	r0, r5
 801386a:	4798      	blx	r3
 801386c:	2000      	movs	r0, #0
 801386e:	e7e0      	b.n	8013832 <_raise_r+0x12>

08013870 <raise>:
 8013870:	4b02      	ldr	r3, [pc, #8]	; (801387c <raise+0xc>)
 8013872:	4601      	mov	r1, r0
 8013874:	6818      	ldr	r0, [r3, #0]
 8013876:	f7ff bfd3 	b.w	8013820 <_raise_r>
 801387a:	bf00      	nop
 801387c:	24000184 	.word	0x24000184

08013880 <_kill_r>:
 8013880:	b538      	push	{r3, r4, r5, lr}
 8013882:	4d07      	ldr	r5, [pc, #28]	; (80138a0 <_kill_r+0x20>)
 8013884:	2300      	movs	r3, #0
 8013886:	4604      	mov	r4, r0
 8013888:	4608      	mov	r0, r1
 801388a:	4611      	mov	r1, r2
 801388c:	602b      	str	r3, [r5, #0]
 801388e:	f7ed ff71 	bl	8001774 <_kill>
 8013892:	1c43      	adds	r3, r0, #1
 8013894:	d102      	bne.n	801389c <_kill_r+0x1c>
 8013896:	682b      	ldr	r3, [r5, #0]
 8013898:	b103      	cbz	r3, 801389c <_kill_r+0x1c>
 801389a:	6023      	str	r3, [r4, #0]
 801389c:	bd38      	pop	{r3, r4, r5, pc}
 801389e:	bf00      	nop
 80138a0:	24002048 	.word	0x24002048

080138a4 <_getpid_r>:
 80138a4:	f7ed bf5e 	b.w	8001764 <_getpid>

080138a8 <__sread>:
 80138a8:	b510      	push	{r4, lr}
 80138aa:	460c      	mov	r4, r1
 80138ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80138b0:	f000 f894 	bl	80139dc <_read_r>
 80138b4:	2800      	cmp	r0, #0
 80138b6:	bfab      	itete	ge
 80138b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80138ba:	89a3      	ldrhlt	r3, [r4, #12]
 80138bc:	181b      	addge	r3, r3, r0
 80138be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80138c2:	bfac      	ite	ge
 80138c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80138c6:	81a3      	strhlt	r3, [r4, #12]
 80138c8:	bd10      	pop	{r4, pc}

080138ca <__swrite>:
 80138ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80138ce:	461f      	mov	r7, r3
 80138d0:	898b      	ldrh	r3, [r1, #12]
 80138d2:	05db      	lsls	r3, r3, #23
 80138d4:	4605      	mov	r5, r0
 80138d6:	460c      	mov	r4, r1
 80138d8:	4616      	mov	r6, r2
 80138da:	d505      	bpl.n	80138e8 <__swrite+0x1e>
 80138dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80138e0:	2302      	movs	r3, #2
 80138e2:	2200      	movs	r2, #0
 80138e4:	f000 f868 	bl	80139b8 <_lseek_r>
 80138e8:	89a3      	ldrh	r3, [r4, #12]
 80138ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80138ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80138f2:	81a3      	strh	r3, [r4, #12]
 80138f4:	4632      	mov	r2, r6
 80138f6:	463b      	mov	r3, r7
 80138f8:	4628      	mov	r0, r5
 80138fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80138fe:	f000 b817 	b.w	8013930 <_write_r>

08013902 <__sseek>:
 8013902:	b510      	push	{r4, lr}
 8013904:	460c      	mov	r4, r1
 8013906:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801390a:	f000 f855 	bl	80139b8 <_lseek_r>
 801390e:	1c43      	adds	r3, r0, #1
 8013910:	89a3      	ldrh	r3, [r4, #12]
 8013912:	bf15      	itete	ne
 8013914:	6560      	strne	r0, [r4, #84]	; 0x54
 8013916:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801391a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801391e:	81a3      	strheq	r3, [r4, #12]
 8013920:	bf18      	it	ne
 8013922:	81a3      	strhne	r3, [r4, #12]
 8013924:	bd10      	pop	{r4, pc}

08013926 <__sclose>:
 8013926:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801392a:	f000 b813 	b.w	8013954 <_close_r>
	...

08013930 <_write_r>:
 8013930:	b538      	push	{r3, r4, r5, lr}
 8013932:	4d07      	ldr	r5, [pc, #28]	; (8013950 <_write_r+0x20>)
 8013934:	4604      	mov	r4, r0
 8013936:	4608      	mov	r0, r1
 8013938:	4611      	mov	r1, r2
 801393a:	2200      	movs	r2, #0
 801393c:	602a      	str	r2, [r5, #0]
 801393e:	461a      	mov	r2, r3
 8013940:	f7ed ff4f 	bl	80017e2 <_write>
 8013944:	1c43      	adds	r3, r0, #1
 8013946:	d102      	bne.n	801394e <_write_r+0x1e>
 8013948:	682b      	ldr	r3, [r5, #0]
 801394a:	b103      	cbz	r3, 801394e <_write_r+0x1e>
 801394c:	6023      	str	r3, [r4, #0]
 801394e:	bd38      	pop	{r3, r4, r5, pc}
 8013950:	24002048 	.word	0x24002048

08013954 <_close_r>:
 8013954:	b538      	push	{r3, r4, r5, lr}
 8013956:	4d06      	ldr	r5, [pc, #24]	; (8013970 <_close_r+0x1c>)
 8013958:	2300      	movs	r3, #0
 801395a:	4604      	mov	r4, r0
 801395c:	4608      	mov	r0, r1
 801395e:	602b      	str	r3, [r5, #0]
 8013960:	f7ed ff5b 	bl	800181a <_close>
 8013964:	1c43      	adds	r3, r0, #1
 8013966:	d102      	bne.n	801396e <_close_r+0x1a>
 8013968:	682b      	ldr	r3, [r5, #0]
 801396a:	b103      	cbz	r3, 801396e <_close_r+0x1a>
 801396c:	6023      	str	r3, [r4, #0]
 801396e:	bd38      	pop	{r3, r4, r5, pc}
 8013970:	24002048 	.word	0x24002048

08013974 <_fstat_r>:
 8013974:	b538      	push	{r3, r4, r5, lr}
 8013976:	4d07      	ldr	r5, [pc, #28]	; (8013994 <_fstat_r+0x20>)
 8013978:	2300      	movs	r3, #0
 801397a:	4604      	mov	r4, r0
 801397c:	4608      	mov	r0, r1
 801397e:	4611      	mov	r1, r2
 8013980:	602b      	str	r3, [r5, #0]
 8013982:	f7ed ff56 	bl	8001832 <_fstat>
 8013986:	1c43      	adds	r3, r0, #1
 8013988:	d102      	bne.n	8013990 <_fstat_r+0x1c>
 801398a:	682b      	ldr	r3, [r5, #0]
 801398c:	b103      	cbz	r3, 8013990 <_fstat_r+0x1c>
 801398e:	6023      	str	r3, [r4, #0]
 8013990:	bd38      	pop	{r3, r4, r5, pc}
 8013992:	bf00      	nop
 8013994:	24002048 	.word	0x24002048

08013998 <_isatty_r>:
 8013998:	b538      	push	{r3, r4, r5, lr}
 801399a:	4d06      	ldr	r5, [pc, #24]	; (80139b4 <_isatty_r+0x1c>)
 801399c:	2300      	movs	r3, #0
 801399e:	4604      	mov	r4, r0
 80139a0:	4608      	mov	r0, r1
 80139a2:	602b      	str	r3, [r5, #0]
 80139a4:	f7ed ff55 	bl	8001852 <_isatty>
 80139a8:	1c43      	adds	r3, r0, #1
 80139aa:	d102      	bne.n	80139b2 <_isatty_r+0x1a>
 80139ac:	682b      	ldr	r3, [r5, #0]
 80139ae:	b103      	cbz	r3, 80139b2 <_isatty_r+0x1a>
 80139b0:	6023      	str	r3, [r4, #0]
 80139b2:	bd38      	pop	{r3, r4, r5, pc}
 80139b4:	24002048 	.word	0x24002048

080139b8 <_lseek_r>:
 80139b8:	b538      	push	{r3, r4, r5, lr}
 80139ba:	4d07      	ldr	r5, [pc, #28]	; (80139d8 <_lseek_r+0x20>)
 80139bc:	4604      	mov	r4, r0
 80139be:	4608      	mov	r0, r1
 80139c0:	4611      	mov	r1, r2
 80139c2:	2200      	movs	r2, #0
 80139c4:	602a      	str	r2, [r5, #0]
 80139c6:	461a      	mov	r2, r3
 80139c8:	f7ed ff4e 	bl	8001868 <_lseek>
 80139cc:	1c43      	adds	r3, r0, #1
 80139ce:	d102      	bne.n	80139d6 <_lseek_r+0x1e>
 80139d0:	682b      	ldr	r3, [r5, #0]
 80139d2:	b103      	cbz	r3, 80139d6 <_lseek_r+0x1e>
 80139d4:	6023      	str	r3, [r4, #0]
 80139d6:	bd38      	pop	{r3, r4, r5, pc}
 80139d8:	24002048 	.word	0x24002048

080139dc <_read_r>:
 80139dc:	b538      	push	{r3, r4, r5, lr}
 80139de:	4d07      	ldr	r5, [pc, #28]	; (80139fc <_read_r+0x20>)
 80139e0:	4604      	mov	r4, r0
 80139e2:	4608      	mov	r0, r1
 80139e4:	4611      	mov	r1, r2
 80139e6:	2200      	movs	r2, #0
 80139e8:	602a      	str	r2, [r5, #0]
 80139ea:	461a      	mov	r2, r3
 80139ec:	f7ed fedc 	bl	80017a8 <_read>
 80139f0:	1c43      	adds	r3, r0, #1
 80139f2:	d102      	bne.n	80139fa <_read_r+0x1e>
 80139f4:	682b      	ldr	r3, [r5, #0]
 80139f6:	b103      	cbz	r3, 80139fa <_read_r+0x1e>
 80139f8:	6023      	str	r3, [r4, #0]
 80139fa:	bd38      	pop	{r3, r4, r5, pc}
 80139fc:	24002048 	.word	0x24002048

08013a00 <_init>:
 8013a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a02:	bf00      	nop
 8013a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013a06:	bc08      	pop	{r3}
 8013a08:	469e      	mov	lr, r3
 8013a0a:	4770      	bx	lr

08013a0c <_fini>:
 8013a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a0e:	bf00      	nop
 8013a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013a12:	bc08      	pop	{r3}
 8013a14:	469e      	mov	lr, r3
 8013a16:	4770      	bx	lr
