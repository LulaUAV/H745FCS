
baremetal_2_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000131d0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  08013470  08013470  00023470  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080138d4  080138d4  00030354  2**0
                  CONTENTS
  4 .ARM          00000008  080138d4  080138d4  000238d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080138dc  080138dc  00030354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080138dc  080138dc  000238dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080138e4  080138e4  000238e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000354  24000000  080138ec  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002d00  24000354  08013c40  00030354  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  24003054  08013c40  00033054  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030354  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003551e  00000000  00000000  00030382  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006af2  00000000  00000000  000658a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002260  00000000  00000000  0006c398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002238  00000000  00000000  0006e5f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f206  00000000  00000000  00070830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000339c1  00000000  00000000  0007fa36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001a197b  00000000  00000000  000b33f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00254d72  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009b88  00000000  00000000  00254dc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00000faf  00000000  00000000  0025e94c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000354 	.word	0x24000354
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08013458 	.word	0x08013458

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000358 	.word	0x24000358
 80002dc:	08013458 	.word	0x08013458

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000698:	4b3f      	ldr	r3, [pc, #252]	; (8000798 <SystemInit+0x104>)
 800069a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069e:	4a3e      	ldr	r2, [pc, #248]	; (8000798 <SystemInit+0x104>)
 80006a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a8:	4b3b      	ldr	r3, [pc, #236]	; (8000798 <SystemInit+0x104>)
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	4a3a      	ldr	r2, [pc, #232]	; (8000798 <SystemInit+0x104>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006b4:	4b39      	ldr	r3, [pc, #228]	; (800079c <SystemInit+0x108>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f003 030f 	and.w	r3, r3, #15
 80006bc:	2b06      	cmp	r3, #6
 80006be:	d807      	bhi.n	80006d0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006c0:	4b36      	ldr	r3, [pc, #216]	; (800079c <SystemInit+0x108>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f023 030f 	bic.w	r3, r3, #15
 80006c8:	4a34      	ldr	r2, [pc, #208]	; (800079c <SystemInit+0x108>)
 80006ca:	f043 0307 	orr.w	r3, r3, #7
 80006ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006d0:	4b33      	ldr	r3, [pc, #204]	; (80007a0 <SystemInit+0x10c>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a32      	ldr	r2, [pc, #200]	; (80007a0 <SystemInit+0x10c>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006dc:	4b30      	ldr	r3, [pc, #192]	; (80007a0 <SystemInit+0x10c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006e2:	4b2f      	ldr	r3, [pc, #188]	; (80007a0 <SystemInit+0x10c>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	492e      	ldr	r1, [pc, #184]	; (80007a0 <SystemInit+0x10c>)
 80006e8:	4b2e      	ldr	r3, [pc, #184]	; (80007a4 <SystemInit+0x110>)
 80006ea:	4013      	ands	r3, r2
 80006ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ee:	4b2b      	ldr	r3, [pc, #172]	; (800079c <SystemInit+0x108>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d007      	beq.n	800070a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006fa:	4b28      	ldr	r3, [pc, #160]	; (800079c <SystemInit+0x108>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f023 030f 	bic.w	r3, r3, #15
 8000702:	4a26      	ldr	r2, [pc, #152]	; (800079c <SystemInit+0x108>)
 8000704:	f043 0307 	orr.w	r3, r3, #7
 8000708:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800070a:	4b25      	ldr	r3, [pc, #148]	; (80007a0 <SystemInit+0x10c>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000710:	4b23      	ldr	r3, [pc, #140]	; (80007a0 <SystemInit+0x10c>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000716:	4b22      	ldr	r3, [pc, #136]	; (80007a0 <SystemInit+0x10c>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800071c:	4b20      	ldr	r3, [pc, #128]	; (80007a0 <SystemInit+0x10c>)
 800071e:	4a22      	ldr	r2, [pc, #136]	; (80007a8 <SystemInit+0x114>)
 8000720:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000722:	4b1f      	ldr	r3, [pc, #124]	; (80007a0 <SystemInit+0x10c>)
 8000724:	4a21      	ldr	r2, [pc, #132]	; (80007ac <SystemInit+0x118>)
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000728:	4b1d      	ldr	r3, [pc, #116]	; (80007a0 <SystemInit+0x10c>)
 800072a:	4a21      	ldr	r2, [pc, #132]	; (80007b0 <SystemInit+0x11c>)
 800072c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800072e:	4b1c      	ldr	r3, [pc, #112]	; (80007a0 <SystemInit+0x10c>)
 8000730:	2200      	movs	r2, #0
 8000732:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000734:	4b1a      	ldr	r3, [pc, #104]	; (80007a0 <SystemInit+0x10c>)
 8000736:	4a1e      	ldr	r2, [pc, #120]	; (80007b0 <SystemInit+0x11c>)
 8000738:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800073a:	4b19      	ldr	r3, [pc, #100]	; (80007a0 <SystemInit+0x10c>)
 800073c:	2200      	movs	r2, #0
 800073e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000740:	4b17      	ldr	r3, [pc, #92]	; (80007a0 <SystemInit+0x10c>)
 8000742:	4a1b      	ldr	r2, [pc, #108]	; (80007b0 <SystemInit+0x11c>)
 8000744:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000746:	4b16      	ldr	r3, [pc, #88]	; (80007a0 <SystemInit+0x10c>)
 8000748:	2200      	movs	r2, #0
 800074a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800074c:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <SystemInit+0x10c>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a13      	ldr	r2, [pc, #76]	; (80007a0 <SystemInit+0x10c>)
 8000752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000756:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000758:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <SystemInit+0x10c>)
 800075a:	2200      	movs	r2, #0
 800075c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800075e:	4b15      	ldr	r3, [pc, #84]	; (80007b4 <SystemInit+0x120>)
 8000760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000762:	4a14      	ldr	r2, [pc, #80]	; (80007b4 <SystemInit+0x120>)
 8000764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000768:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800076a:	4b13      	ldr	r3, [pc, #76]	; (80007b8 <SystemInit+0x124>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4b13      	ldr	r3, [pc, #76]	; (80007bc <SystemInit+0x128>)
 8000770:	4013      	ands	r3, r2
 8000772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000776:	d202      	bcs.n	800077e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000778:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <SystemInit+0x12c>)
 800077a:	2201      	movs	r2, #1
 800077c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800077e:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <SystemInit+0x130>)
 8000780:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000784:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000786:	4b04      	ldr	r3, [pc, #16]	; (8000798 <SystemInit+0x104>)
 8000788:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800078c:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800078e:	bf00      	nop
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	e000ed00 	.word	0xe000ed00
 800079c:	52002000 	.word	0x52002000
 80007a0:	58024400 	.word	0x58024400
 80007a4:	eaf6ed7f 	.word	0xeaf6ed7f
 80007a8:	02020200 	.word	0x02020200
 80007ac:	01ff0000 	.word	0x01ff0000
 80007b0:	01010280 	.word	0x01010280
 80007b4:	580000c0 	.word	0x580000c0
 80007b8:	5c001000 	.word	0x5c001000
 80007bc:	ffff0000 	.word	0xffff0000
 80007c0:	51008108 	.word	0x51008108
 80007c4:	52004000 	.word	0x52004000

080007c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007ce:	4b1d      	ldr	r3, [pc, #116]	; (8000844 <MX_DMA_Init+0x7c>)
 80007d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007d4:	4a1b      	ldr	r2, [pc, #108]	; (8000844 <MX_DMA_Init+0x7c>)
 80007d6:	f043 0301 	orr.w	r3, r3, #1
 80007da:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80007de:	4b19      	ldr	r3, [pc, #100]	; (8000844 <MX_DMA_Init+0x7c>)
 80007e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007e4:	f003 0301 	and.w	r3, r3, #1
 80007e8:	607b      	str	r3, [r7, #4]
 80007ea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007ec:	4b15      	ldr	r3, [pc, #84]	; (8000844 <MX_DMA_Init+0x7c>)
 80007ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007f2:	4a14      	ldr	r2, [pc, #80]	; (8000844 <MX_DMA_Init+0x7c>)
 80007f4:	f043 0302 	orr.w	r3, r3, #2
 80007f8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80007fc:	4b11      	ldr	r3, [pc, #68]	; (8000844 <MX_DMA_Init+0x7c>)
 80007fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000802:	f003 0302 	and.w	r3, r3, #2
 8000806:	603b      	str	r3, [r7, #0]
 8000808:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 1, 0);
 800080a:	2200      	movs	r2, #0
 800080c:	2101      	movs	r1, #1
 800080e:	2010      	movs	r0, #16
 8000810:	f001 fb2b 	bl	8001e6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000814:	2010      	movs	r0, #16
 8000816:	f001 fb42 	bl	8001e9e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 1, 0);
 800081a:	2200      	movs	r2, #0
 800081c:	2101      	movs	r1, #1
 800081e:	2011      	movs	r0, #17
 8000820:	f001 fb23 	bl	8001e6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000824:	2011      	movs	r0, #17
 8000826:	f001 fb3a 	bl	8001e9e <HAL_NVIC_EnableIRQ>

  /* DMA2_Stream7 Interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 1, 0);
 800082a:	2200      	movs	r2, #0
 800082c:	2101      	movs	r1, #1
 800082e:	2046      	movs	r0, #70	; 0x46
 8000830:	f001 fb1b 	bl	8001e6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000834:	2046      	movs	r0, #70	; 0x46
 8000836:	f001 fb32 	bl	8001e9e <HAL_NVIC_EnableIRQ>

}
 800083a:	bf00      	nop
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	58024400 	.word	0x58024400

08000848 <MX_GPIO_Init>:
/** Configure pins
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b088      	sub	sp, #32
 800084c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800084e:	4b37      	ldr	r3, [pc, #220]	; (800092c <MX_GPIO_Init+0xe4>)
 8000850:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000854:	4a35      	ldr	r2, [pc, #212]	; (800092c <MX_GPIO_Init+0xe4>)
 8000856:	f043 0320 	orr.w	r3, r3, #32
 800085a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800085e:	4b33      	ldr	r3, [pc, #204]	; (800092c <MX_GPIO_Init+0xe4>)
 8000860:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000864:	f003 0320 	and.w	r3, r3, #32
 8000868:	61fb      	str	r3, [r7, #28]
 800086a:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800086c:	4b2f      	ldr	r3, [pc, #188]	; (800092c <MX_GPIO_Init+0xe4>)
 800086e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000872:	4a2e      	ldr	r2, [pc, #184]	; (800092c <MX_GPIO_Init+0xe4>)
 8000874:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000878:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800087c:	4b2b      	ldr	r3, [pc, #172]	; (800092c <MX_GPIO_Init+0xe4>)
 800087e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000886:	61bb      	str	r3, [r7, #24]
 8000888:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088a:	4b28      	ldr	r3, [pc, #160]	; (800092c <MX_GPIO_Init+0xe4>)
 800088c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000890:	4a26      	ldr	r2, [pc, #152]	; (800092c <MX_GPIO_Init+0xe4>)
 8000892:	f043 0301 	orr.w	r3, r3, #1
 8000896:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800089a:	4b24      	ldr	r3, [pc, #144]	; (800092c <MX_GPIO_Init+0xe4>)
 800089c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008a0:	f003 0301 	and.w	r3, r3, #1
 80008a4:	617b      	str	r3, [r7, #20]
 80008a6:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008a8:	4b20      	ldr	r3, [pc, #128]	; (800092c <MX_GPIO_Init+0xe4>)
 80008aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ae:	4a1f      	ldr	r2, [pc, #124]	; (800092c <MX_GPIO_Init+0xe4>)
 80008b0:	f043 0310 	orr.w	r3, r3, #16
 80008b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008b8:	4b1c      	ldr	r3, [pc, #112]	; (800092c <MX_GPIO_Init+0xe4>)
 80008ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008be:	f003 0310 	and.w	r3, r3, #16
 80008c2:	613b      	str	r3, [r7, #16]
 80008c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c6:	4b19      	ldr	r3, [pc, #100]	; (800092c <MX_GPIO_Init+0xe4>)
 80008c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008cc:	4a17      	ldr	r2, [pc, #92]	; (800092c <MX_GPIO_Init+0xe4>)
 80008ce:	f043 0302 	orr.w	r3, r3, #2
 80008d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008d6:	4b15      	ldr	r3, [pc, #84]	; (800092c <MX_GPIO_Init+0xe4>)
 80008d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008dc:	f003 0302 	and.w	r3, r3, #2
 80008e0:	60fb      	str	r3, [r7, #12]
 80008e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e4:	4b11      	ldr	r3, [pc, #68]	; (800092c <MX_GPIO_Init+0xe4>)
 80008e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ea:	4a10      	ldr	r2, [pc, #64]	; (800092c <MX_GPIO_Init+0xe4>)
 80008ec:	f043 0304 	orr.w	r3, r3, #4
 80008f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008f4:	4b0d      	ldr	r3, [pc, #52]	; (800092c <MX_GPIO_Init+0xe4>)
 80008f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008fa:	f003 0304 	and.w	r3, r3, #4
 80008fe:	60bb      	str	r3, [r7, #8]
 8000900:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000902:	4b0a      	ldr	r3, [pc, #40]	; (800092c <MX_GPIO_Init+0xe4>)
 8000904:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000908:	4a08      	ldr	r2, [pc, #32]	; (800092c <MX_GPIO_Init+0xe4>)
 800090a:	f043 0308 	orr.w	r3, r3, #8
 800090e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000912:	4b06      	ldr	r3, [pc, #24]	; (800092c <MX_GPIO_Init+0xe4>)
 8000914:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000918:	f003 0308 	and.w	r3, r3, #8
 800091c:	607b      	str	r3, [r7, #4]
 800091e:	687b      	ldr	r3, [r7, #4]

  // Set LED Ports
  GPIO_Port_Config();
 8000920:	f000 f806 	bl	8000930 <GPIO_Port_Config>

}
 8000924:	bf00      	nop
 8000926:	3720      	adds	r7, #32
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	58024400 	.word	0x58024400

08000930 <GPIO_Port_Config>:

/* USER CODE BEGIN 2 */
void GPIO_Port_Config(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b086      	sub	sp, #24
 8000934:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
 8000942:	611a      	str	r2, [r3, #16]

  // Configure GPIO Pin Output Level:
  //LEDS
  HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_RESET);
 8000944:	2200      	movs	r2, #0
 8000946:	2180      	movs	r1, #128	; 0x80
 8000948:	4827      	ldr	r0, [pc, #156]	; (80009e8 <GPIO_Port_Config+0xb8>)
 800094a:	f004 fb53 	bl	8004ff4 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = LED_A_Pin;
 800094e:	2380      	movs	r3, #128	; 0x80
 8000950:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000952:	2301      	movs	r3, #1
 8000954:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095a:	2300      	movs	r3, #0
 800095c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_A_GPIO_Port, &GPIO_InitStruct);
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	4619      	mov	r1, r3
 8000962:	4821      	ldr	r0, [pc, #132]	; (80009e8 <GPIO_Port_Config+0xb8>)
 8000964:	f004 f996 	bl	8004c94 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8000968:	2200      	movs	r2, #0
 800096a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800096e:	481e      	ldr	r0, [pc, #120]	; (80009e8 <GPIO_Port_Config+0xb8>)
 8000970:	f004 fb40 	bl	8004ff4 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = LED_B_Pin;
 8000974:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000978:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097a:	2301      	movs	r3, #1
 800097c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2300      	movs	r3, #0
 8000984:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_B_GPIO_Port, &GPIO_InitStruct);
 8000986:	1d3b      	adds	r3, r7, #4
 8000988:	4619      	mov	r1, r3
 800098a:	4817      	ldr	r0, [pc, #92]	; (80009e8 <GPIO_Port_Config+0xb8>)
 800098c:	f004 f982 	bl	8004c94 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_RESET);
 8000990:	2200      	movs	r2, #0
 8000992:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000996:	4815      	ldr	r0, [pc, #84]	; (80009ec <GPIO_Port_Config+0xbc>)
 8000998:	f004 fb2c 	bl	8004ff4 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = LED_C_Pin;
 800099c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a2:	2301      	movs	r3, #1
 80009a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_C_GPIO_Port, &GPIO_InitStruct);
 80009ae:	1d3b      	adds	r3, r7, #4
 80009b0:	4619      	mov	r1, r3
 80009b2:	480e      	ldr	r0, [pc, #56]	; (80009ec <GPIO_Port_Config+0xbc>)
 80009b4:	f004 f96e 	bl	8004c94 <HAL_GPIO_Init>


  HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_RESET);
 80009b8:	2200      	movs	r2, #0
 80009ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009be:	480b      	ldr	r0, [pc, #44]	; (80009ec <GPIO_Port_Config+0xbc>)
 80009c0:	f004 fb18 	bl	8004ff4 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = LED_D_Pin;
 80009c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009c8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ca:	2301      	movs	r3, #1
 80009cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d2:	2300      	movs	r3, #0
 80009d4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_D_GPIO_Port, &GPIO_InitStruct);
 80009d6:	1d3b      	adds	r3, r7, #4
 80009d8:	4619      	mov	r1, r3
 80009da:	4804      	ldr	r0, [pc, #16]	; (80009ec <GPIO_Port_Config+0xbc>)
 80009dc:	f004 f95a 	bl	8004c94 <HAL_GPIO_Init>

}
 80009e0:	bf00      	nop
 80009e2:	3718      	adds	r7, #24
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	58021000 	.word	0x58021000
 80009ec:	58021400 	.word	0x58021400

080009f0 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80009f4:	4b1b      	ldr	r3, [pc, #108]	; (8000a64 <MX_I2C2_Init+0x74>)
 80009f6:	4a1c      	ldr	r2, [pc, #112]	; (8000a68 <MX_I2C2_Init+0x78>)
 80009f8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 80009fa:	4b1a      	ldr	r3, [pc, #104]	; (8000a64 <MX_I2C2_Init+0x74>)
 80009fc:	4a1b      	ldr	r2, [pc, #108]	; (8000a6c <MX_I2C2_Init+0x7c>)
 80009fe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000a00:	4b18      	ldr	r3, [pc, #96]	; (8000a64 <MX_I2C2_Init+0x74>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a06:	4b17      	ldr	r3, [pc, #92]	; (8000a64 <MX_I2C2_Init+0x74>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a0c:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <MX_I2C2_Init+0x74>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a12:	4b14      	ldr	r3, [pc, #80]	; (8000a64 <MX_I2C2_Init+0x74>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a18:	4b12      	ldr	r3, [pc, #72]	; (8000a64 <MX_I2C2_Init+0x74>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a1e:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <MX_I2C2_Init+0x74>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a24:	4b0f      	ldr	r3, [pc, #60]	; (8000a64 <MX_I2C2_Init+0x74>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a2a:	480e      	ldr	r0, [pc, #56]	; (8000a64 <MX_I2C2_Init+0x74>)
 8000a2c:	f004 fb2a 	bl	8005084 <HAL_I2C_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000a36:	f000 f9e9 	bl	8000e0c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	4809      	ldr	r0, [pc, #36]	; (8000a64 <MX_I2C2_Init+0x74>)
 8000a3e:	f005 fa36 	bl	8005eae <HAL_I2CEx_ConfigAnalogFilter>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000a48:	f000 f9e0 	bl	8000e0c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	4805      	ldr	r0, [pc, #20]	; (8000a64 <MX_I2C2_Init+0x74>)
 8000a50:	f005 fa78 	bl	8005f44 <HAL_I2CEx_ConfigDigitalFilter>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000a5a:	f000 f9d7 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	24000370 	.word	0x24000370
 8000a68:	40005800 	.word	0x40005800
 8000a6c:	307075b1 	.word	0x307075b1

08000a70 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b0b8      	sub	sp, #224	; 0xe0
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a78:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a88:	f107 0310 	add.w	r3, r7, #16
 8000a8c:	22bc      	movs	r2, #188	; 0xbc
 8000a8e:	2100      	movs	r1, #0
 8000a90:	4618      	mov	r0, r3
 8000a92:	f010 f87f 	bl	8010b94 <memset>
  if(i2cHandle->Instance==I2C2)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4a2d      	ldr	r2, [pc, #180]	; (8000b50 <HAL_I2C_MspInit+0xe0>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d152      	bne.n	8000b46 <HAL_I2C_MspInit+0xd6>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000aa0:	2308      	movs	r3, #8
 8000aa2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000aaa:	f107 0310 	add.w	r3, r7, #16
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f007 fcb6 	bl	8008420 <HAL_RCCEx_PeriphCLKConfig>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000aba:	f000 f9a7 	bl	8000e0c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000abe:	4b25      	ldr	r3, [pc, #148]	; (8000b54 <HAL_I2C_MspInit+0xe4>)
 8000ac0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac4:	4a23      	ldr	r2, [pc, #140]	; (8000b54 <HAL_I2C_MspInit+0xe4>)
 8000ac6:	f043 0302 	orr.w	r3, r3, #2
 8000aca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ace:	4b21      	ldr	r3, [pc, #132]	; (8000b54 <HAL_I2C_MspInit+0xe4>)
 8000ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad4:	f003 0302 	and.w	r3, r3, #2
 8000ad8:	60fb      	str	r3, [r7, #12]
 8000ada:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000adc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ae0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ae4:	2312      	movs	r3, #18
 8000ae6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aea:	2301      	movs	r3, #1
 8000aec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af0:	2300      	movs	r3, #0
 8000af2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000af6:	2304      	movs	r3, #4
 8000af8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000afc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000b00:	4619      	mov	r1, r3
 8000b02:	4815      	ldr	r0, [pc, #84]	; (8000b58 <HAL_I2C_MspInit+0xe8>)
 8000b04:	f004 f8c6 	bl	8004c94 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000b08:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <HAL_I2C_MspInit+0xe4>)
 8000b0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b0e:	4a11      	ldr	r2, [pc, #68]	; (8000b54 <HAL_I2C_MspInit+0xe4>)
 8000b10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b14:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000b18:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <HAL_I2C_MspInit+0xe4>)
 8000b1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b22:	60bb      	str	r3, [r7, #8]
 8000b24:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2100      	movs	r1, #0
 8000b2a:	2021      	movs	r0, #33	; 0x21
 8000b2c:	f001 f99d 	bl	8001e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000b30:	2021      	movs	r0, #33	; 0x21
 8000b32:	f001 f9b4 	bl	8001e9e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8000b36:	2200      	movs	r2, #0
 8000b38:	2100      	movs	r1, #0
 8000b3a:	2022      	movs	r0, #34	; 0x22
 8000b3c:	f001 f995 	bl	8001e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8000b40:	2022      	movs	r0, #34	; 0x22
 8000b42:	f001 f9ac 	bl	8001e9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000b46:	bf00      	nop
 8000b48:	37e0      	adds	r7, #224	; 0xe0
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40005800 	.word	0x40005800
 8000b54:	58024400 	.word	0x58024400
 8000b58:	58020400 	.word	0x58020400
 8000b5c:	00000000 	.word	0x00000000

08000b60 <_Z18SystemClock_Configv>:
///**
//  * @brief System Clock Configuration
//  * @retval None
//  */
void SystemClock_Config(void)
{
 8000b60:	b510      	push	{r4, lr}
 8000b62:	b09e      	sub	sp, #120	; 0x78
  // Defective warning for missing initialiser member
  RCC_OscInitTypeDef RCC_OscInitStruct = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
 8000b64:	224c      	movs	r2, #76	; 0x4c
 8000b66:	2100      	movs	r1, #0
 8000b68:	a80a      	add	r0, sp, #40	; 0x28
 8000b6a:	f010 f813 	bl	8010b94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0,0,0,0,0,0,0,0};
 8000b6e:	2220      	movs	r2, #32
 8000b70:	2100      	movs	r1, #0
 8000b72:	a802      	add	r0, sp, #8
 8000b74:	f010 f80e 	bl	8010b94 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000b78:	2002      	movs	r0, #2
 8000b7a:	f006 fc0b 	bl	8007394 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b7e:	4a32      	ldr	r2, [pc, #200]	; (8000c48 <_Z18SystemClock_Configv+0xe8>)
 8000b80:	2100      	movs	r1, #0
 8000b82:	4b32      	ldr	r3, [pc, #200]	; (8000c4c <_Z18SystemClock_Configv+0xec>)
 8000b84:	9101      	str	r1, [sp, #4]
 8000b86:	6991      	ldr	r1, [r2, #24]
 8000b88:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8000b8c:	6191      	str	r1, [r2, #24]
 8000b8e:	6991      	ldr	r1, [r2, #24]
 8000b90:	f401 4140 	and.w	r1, r1, #49152	; 0xc000
 8000b94:	9101      	str	r1, [sp, #4]
 8000b96:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000b98:	f041 0101 	orr.w	r1, r1, #1
 8000b9c:	62d9      	str	r1, [r3, #44]	; 0x2c
 8000b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ba0:	f003 0301 	and.w	r3, r3, #1
 8000ba4:	9301      	str	r3, [sp, #4]
 8000ba6:	9b01      	ldr	r3, [sp, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ba8:	6993      	ldr	r3, [r2, #24]
 8000baa:	049b      	lsls	r3, r3, #18
 8000bac:	d5fc      	bpl.n	8000ba8 <_Z18SystemClock_Configv+0x48>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000bae:	4a28      	ldr	r2, [pc, #160]	; (8000c50 <_Z18SystemClock_Configv+0xf0>)
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000bb0:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000bb2:	243c      	movs	r4, #60	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = 15;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bb4:	a80a      	add	r0, sp, #40	; 0x28
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000bb6:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8000bb8:	f023 0303 	bic.w	r3, r3, #3
 8000bbc:	f043 0302 	orr.w	r3, r3, #2
 8000bc0:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bc2:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000bc4:	2200      	movs	r2, #0
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000bc6:	9110      	str	r1, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000bc8:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000bca:	210c      	movs	r1, #12
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000bcc:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bce:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000bd0:	9416      	str	r4, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000bd2:	921c      	str	r2, [sp, #112]	; 0x70
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000bd4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8000c30 <_Z18SystemClock_Configv+0xd0>
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bd8:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = 15;
 8000bdc:	230f      	movs	r3, #15
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000bde:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000be2:	e9cd 121a 	strd	r1, r2, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLQ = 15;
 8000be6:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000be8:	f006 fc3e 	bl	8007468 <HAL_RCC_OscConfig>
 8000bec:	b108      	cbz	r0, 8000bf2 <_Z18SystemClock_Configv+0x92>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bee:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <_Z18SystemClock_Configv+0x90>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bf2:	ed9f 7b11 	vldr	d7, [pc, #68]	; 8000c38 <_Z18SystemClock_Configv+0xd8>
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2308      	movs	r3, #8
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000bfa:	a802      	add	r0, sp, #8
 8000bfc:	2104      	movs	r1, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bfe:	ed8d 7b02 	vstr	d7, [sp, #8]
 8000c02:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8000c40 <_Z18SystemClock_Configv+0xe0>
 8000c06:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8000c0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c0e:	2340      	movs	r3, #64	; 0x40
 8000c10:	ed8d 7b06 	vstr	d7, [sp, #24]
 8000c14:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c18:	f007 f834 	bl	8007c84 <HAL_RCC_ClockConfig>
 8000c1c:	b108      	cbz	r0, 8000c22 <_Z18SystemClock_Configv+0xc2>
 8000c1e:	b672      	cpsid	i
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <_Z18SystemClock_Configv+0xc0>
  HAL_PWREx_EnableUSBVoltageDetector();
 8000c22:	f006 fc11 	bl	8007448 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8000c26:	b01e      	add	sp, #120	; 0x78
 8000c28:	bd10      	pop	{r4, pc}
 8000c2a:	bf00      	nop
 8000c2c:	f3af 8000 	nop.w
 8000c30:	00000021 	.word	0x00000021
 8000c34:	00010000 	.word	0x00010000
 8000c38:	0000003f 	.word	0x0000003f
 8000c3c:	00000003 	.word	0x00000003
 8000c40:	00000040 	.word	0x00000040
 8000c44:	00000040 	.word	0x00000040
 8000c48:	58024800 	.word	0x58024800
 8000c4c:	58000400 	.word	0x58000400
 8000c50:	58024400 	.word	0x58024400

08000c54 <main>:
{
 8000c54:	b5f0      	push	{r4, r5, r6, r7, lr}
	  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000c56:	2400      	movs	r4, #0
{
 8000c58:	b095      	sub	sp, #84	; 0x54
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000c5a:	2501      	movs	r5, #1
	  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000c5c:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8000c60:	e9cd 4406 	strd	r4, r4, [sp, #24]
  HAL_MPU_Disable();
 8000c64:	f001 f936 	bl	8001ed4 <HAL_MPU_Disable>
    MPU_InitStruct.BaseAddress = 0x24000000;
 8000c68:	f04f 5210 	mov.w	r2, #603979776	; 0x24000000
    MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000c6c:	4b5e      	ldr	r3, [pc, #376]	; (8000de8 <main+0x194>)
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c6e:	a804      	add	r0, sp, #16
    MPU_InitStruct.BaseAddress = 0x24000000;
 8000c70:	9205      	str	r2, [sp, #20]
    MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000c72:	9306      	str	r3, [sp, #24]
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000c74:	f8ad 5010 	strh.w	r5, [sp, #16]
    MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000c78:	9407      	str	r4, [sp, #28]
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c7a:	f001 f963 	bl	8001f44 <HAL_MPU_ConfigRegion>
    MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8000c7e:	4a5b      	ldr	r2, [pc, #364]	; (8000dec <main+0x198>)
 8000c80:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
    MPU_InitStruct.BaseAddress = 0x38000000;
 8000c84:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c88:	a804      	add	r0, sp, #16
    MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000c8a:	f88d 5011 	strb.w	r5, [sp, #17]
    MPU_InitStruct.BaseAddress = 0x38000000;
 8000c8e:	9105      	str	r1, [sp, #20]
    MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8000c90:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c94:	f001 f956 	bl	8001f44 <HAL_MPU_ConfigRegion>
    HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000c98:	2004      	movs	r0, #4
 8000c9a:	f001 f933 	bl	8001f04 <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000c9e:	4a54      	ldr	r2, [pc, #336]	; (8000df0 <main+0x19c>)
 8000ca0:	6953      	ldr	r3, [r2, #20]
 8000ca2:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
 8000ca6:	d111      	bne.n	8000ccc <main+0x78>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000ca8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000cac:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000cb0:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000cb4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000cb8:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000cbc:	6953      	ldr	r3, [r2, #20]
 8000cbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000cc4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000cc8:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000ccc:	4848      	ldr	r0, [pc, #288]	; (8000df0 <main+0x19c>)
 8000cce:	6943      	ldr	r3, [r0, #20]
 8000cd0:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8000cd4:	d124      	bne.n	8000d20 <main+0xcc>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000cd6:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000cda:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000cde:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000ce2:	f643 76e0 	movw	r6, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000ce6:	f3c5 344e 	ubfx	r4, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000cea:	f3c5 05c9 	ubfx	r5, r5, #3, #10
 8000cee:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000cf0:	ea04 0106 	and.w	r1, r4, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000cf4:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000cf6:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000cfa:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000cfc:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 8000d00:	1c5a      	adds	r2, r3, #1
 8000d02:	d1f8      	bne.n	8000cf6 <main+0xa2>
    } while(sets-- != 0U);
 8000d04:	3c20      	subs	r4, #32
 8000d06:	f114 0f20 	cmn.w	r4, #32
 8000d0a:	d1f1      	bne.n	8000cf0 <main+0x9c>
 8000d0c:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000d10:	6943      	ldr	r3, [r0, #20]
 8000d12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d16:	6143      	str	r3, [r0, #20]
 8000d18:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000d1c:	f3bf 8f6f 	isb	sy
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000d20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000d24:	4d33      	ldr	r5, [pc, #204]	; (8000df4 <main+0x1a0>)
 8000d26:	e001      	b.n	8000d2c <main+0xd8>
 8000d28:	3b01      	subs	r3, #1
 8000d2a:	d05b      	beq.n	8000de4 <main+0x190>
 8000d2c:	682c      	ldr	r4, [r5, #0]
 8000d2e:	f414 4400 	ands.w	r4, r4, #32768	; 0x8000
 8000d32:	d1f9      	bne.n	8000d28 <main+0xd4>
  HAL_Init();
 8000d34:	f000 fefc 	bl	8001b30 <HAL_Init>
  SystemClock_Config();
 8000d38:	f7ff ff12 	bl	8000b60 <_Z18SystemClock_Configv>
  __HAL_RCC_HSEM_CLK_ENABLE();
 8000d3c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
HAL_HSEM_FastTake(HSEM_ID_0);
 8000d40:	4620      	mov	r0, r4
  __HAL_RCC_HSEM_CLK_ENABLE();
 8000d42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d46:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8000d4a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8000d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d52:	9300      	str	r3, [sp, #0]
 8000d54:	9b00      	ldr	r3, [sp, #0]
HAL_HSEM_FastTake(HSEM_ID_0);
 8000d56:	f004 f967 	bl	8005028 <HAL_HSEM_FastTake>
HAL_HSEM_Release(HSEM_ID_0,0);
 8000d5a:	4621      	mov	r1, r4
 8000d5c:	4620      	mov	r0, r4
 8000d5e:	f004 f97d 	bl	800505c <HAL_HSEM_Release>
  MX_GPIO_Init();
 8000d62:	f7ff fd71 	bl	8000848 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d66:	f7ff fd2f 	bl	80007c8 <MX_DMA_Init>
  MX_UART4_Init();
 8000d6a:	f000 fccd 	bl	8001708 <MX_UART4_Init>
  MX_I2C2_Init();
 8000d6e:	f7ff fe3f 	bl	80009f0 <MX_I2C2_Init>
  MX_TIM1_Init();
 8000d72:	f000 fb21 	bl	80013b8 <MX_TIM1_Init>
  MX_UART7_Init();
 8000d76:	f000 fd0f 	bl	8001798 <MX_UART7_Init>
  MX_USB_DEVICE_Init();
 8000d7a:	f00f f945 	bl	8010008 <MX_USB_DEVICE_Init>
  DWT_Init();
 8000d7e:	f000 f87b 	bl	8000e78 <_Z8DWT_Initv>
  __HAL_UART_ENABLE_IT(&huart4, UART_IT_IDLE);
 8000d82:	481d      	ldr	r0, [pc, #116]	; (8000df8 <main+0x1a4>)
  HAL_UART_Receive_DMA(&huart4, sbus_buffer, SBUS_PACKET_LEN);
 8000d84:	2219      	movs	r2, #25
 8000d86:	491d      	ldr	r1, [pc, #116]	; (8000dfc <main+0x1a8>)
  __HAL_UART_ENABLE_IT(&huart4, UART_IT_IDLE);
 8000d88:	6804      	ldr	r4, [r0, #0]
 8000d8a:	6823      	ldr	r3, [r4, #0]
 8000d8c:	f043 0310 	orr.w	r3, r3, #16
 8000d90:	6023      	str	r3, [r4, #0]
  HAL_UART_Receive_DMA(&huart4, sbus_buffer, SBUS_PACKET_LEN);
 8000d92:	f00a faaf 	bl	800b2f4 <HAL_UART_Receive_DMA>
  while (!CDC_Class_Init_Ok());
 8000d96:	f00f f97d 	bl	8010094 <CDC_Class_Init_Ok>
 8000d9a:	2800      	cmp	r0, #0
 8000d9c:	d0fb      	beq.n	8000d96 <main+0x142>
  Serializer serializer;
 8000d9e:	a804      	add	r0, sp, #16
 8000da0:	4f17      	ldr	r7, [pc, #92]	; (8000e00 <main+0x1ac>)
 8000da2:	f000 f95d 	bl	8001060 <_ZN10SerializerC1Ev>
  HAL_Delay(10000);
 8000da6:	f242 7010 	movw	r0, #10000	; 0x2710
int count = 0;
 8000daa:	2600      	movs	r6, #0
 8000dac:	4d15      	ldr	r5, [pc, #84]	; (8000e04 <main+0x1b0>)
	  	  sensors.ReadRawData();
 8000dae:	4c16      	ldr	r4, [pc, #88]	; (8000e08 <main+0x1b4>)
  HAL_Delay(10000);
 8000db0:	f000 ff50 	bl	8001c54 <HAL_Delay>
	  	  sensors.ReadRawData();
 8000db4:	4620      	mov	r0, r4
 8000db6:	f000 f931 	bl	800101c <_ZN10SensorData11ReadRawDataEv>
		  if((HAL_GetTick() - usb_timer) >= USB_UPDATE_RATE_MS)
 8000dba:	f000 ff3f 	bl	8001c3c <HAL_GetTick>
 8000dbe:	682b      	ldr	r3, [r5, #0]
 8000dc0:	1ac0      	subs	r0, r0, r3
 8000dc2:	2809      	cmp	r0, #9
 8000dc4:	d9f6      	bls.n	8000db4 <main+0x160>
			  if(count < 1000)
 8000dc6:	f5b6 7f7a 	cmp.w	r6, #1000	; 0x3e8
				  gyro_vec[count] =  sensors.GetGyroData().imu_gyro_x;
 8000dca:	4620      	mov	r0, r4
			  count++;
 8000dcc:	f106 0601 	add.w	r6, r6, #1
			  if(count < 1000)
 8000dd0:	da03      	bge.n	8000dda <main+0x186>
				  gyro_vec[count] =  sensors.GetGyroData().imu_gyro_x;
 8000dd2:	f000 f937 	bl	8001044 <_ZN10SensorData11GetGyroDataEv>
 8000dd6:	ed87 0a00 	vstr	s0, [r7]
			  usb_timer = HAL_GetTick();
 8000dda:	f000 ff2f 	bl	8001c3c <HAL_GetTick>
 8000dde:	3704      	adds	r7, #4
 8000de0:	6028      	str	r0, [r5, #0]
 8000de2:	e7e7      	b.n	8000db4 <main+0x160>
  __ASM volatile ("cpsid i" : : : "memory");
 8000de4:	b672      	cpsid	i
  while (1)
 8000de6:	e7fe      	b.n	8000de6 <main+0x192>
 8000de8:	03000012 	.word	0x03000012
 8000dec:	0301000f 	.word	0x0301000f
 8000df0:	e000ed00 	.word	0xe000ed00
 8000df4:	58024400 	.word	0x58024400
 8000df8:	240014cc 	.word	0x240014cc
 8000dfc:	24001460 	.word	0x24001460
 8000e00:	240003e0 	.word	0x240003e0
 8000e04:	240013e0 	.word	0x240013e0
 8000e08:	24001380 	.word	0x24001380

08000e0c <Error_Handler>:
 8000e0c:	b672      	cpsid	i
 8000e0e:	e7fe      	b.n	8000e0e <Error_Handler+0x2>

08000e10 <HAL_UART_RxCpltCallback>:
  /* USER CODE END Error_Handler_Debug */
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  if (huart->Instance == UART4)
 8000e10:	4b0b      	ldr	r3, [pc, #44]	; (8000e40 <HAL_UART_RxCpltCallback+0x30>)
 8000e12:	6802      	ldr	r2, [r0, #0]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	d000      	beq.n	8000e1a <HAL_UART_RxCpltCallback+0xa>
 8000e18:	4770      	bx	lr
  {
    if(sbus_buffer[0] != SBUS_HEADER)
 8000e1a:	490a      	ldr	r1, [pc, #40]	; (8000e44 <HAL_UART_RxCpltCallback+0x34>)
 8000e1c:	780b      	ldrb	r3, [r1, #0]
 8000e1e:	2b0f      	cmp	r3, #15
 8000e20:	d00a      	beq.n	8000e38 <HAL_UART_RxCpltCallback+0x28>
{
 8000e22:	b510      	push	{r4, lr}
    {
      HAL_UART_DMAStop(&huart4);
 8000e24:	4c08      	ldr	r4, [pc, #32]	; (8000e48 <HAL_UART_RxCpltCallback+0x38>)
 8000e26:	4620      	mov	r0, r4
 8000e28:	f00a faaa 	bl	800b380 <HAL_UART_DMAStop>
      __HAL_UART_ENABLE_IT(&huart4, UART_IT_IDLE);
 8000e2c:	6822      	ldr	r2, [r4, #0]
 8000e2e:	6813      	ldr	r3, [r2, #0]
 8000e30:	f043 0310 	orr.w	r3, r3, #16
 8000e34:	6013      	str	r3, [r2, #0]
    {
    	frkskyRC.UpdateSbus(sbus_buffer);
    }
  }

}
 8000e36:	bd10      	pop	{r4, pc}
    	frkskyRC.UpdateSbus(sbus_buffer);
 8000e38:	4804      	ldr	r0, [pc, #16]	; (8000e4c <HAL_UART_RxCpltCallback+0x3c>)
 8000e3a:	f000 b833 	b.w	8000ea4 <_ZN14SbusController10UpdateSbusEPh>
 8000e3e:	bf00      	nop
 8000e40:	40004c00 	.word	0x40004c00
 8000e44:	24001460 	.word	0x24001460
 8000e48:	240014cc 	.word	0x240014cc
 8000e4c:	240003bc 	.word	0x240003bc

08000e50 <_GLOBAL__sub_I_sensors>:
}
 8000e50:	b508      	push	{r3, lr}
SensorData sensors;
 8000e52:	4804      	ldr	r0, [pc, #16]	; (8000e64 <_GLOBAL__sub_I_sensors+0x14>)
 8000e54:	f000 f8ce 	bl	8000ff4 <_ZN10SensorDataC1Ev>
SbusController frkskyRC;
 8000e58:	4803      	ldr	r0, [pc, #12]	; (8000e68 <_GLOBAL__sub_I_sensors+0x18>)
}
 8000e5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
SbusController frkskyRC;
 8000e5e:	f000 b81d 	b.w	8000e9c <_ZN14SbusControllerC1Ev>
 8000e62:	bf00      	nop
 8000e64:	24001380 	.word	0x24001380
 8000e68:	240003bc 	.word	0x240003bc

08000e6c <_GLOBAL__sub_D_sensors>:
 8000e6c:	4801      	ldr	r0, [pc, #4]	; (8000e74 <_GLOBAL__sub_D_sensors+0x8>)
 8000e6e:	f000 b817 	b.w	8000ea0 <_ZN14SbusControllerD1Ev>
 8000e72:	bf00      	nop
 8000e74:	240003bc 	.word	0x240003bc

08000e78 <_Z8DWT_Initv>:



void DWT_Init(void)
{
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000e78:	4906      	ldr	r1, [pc, #24]	; (8000e94 <_Z8DWT_Initv+0x1c>)
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000e7a:	4a07      	ldr	r2, [pc, #28]	; (8000e98 <_Z8DWT_Initv+0x20>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000e7c:	f8d1 30fc 	ldr.w	r3, [r1, #252]	; 0xfc
 8000e80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e84:	f8c1 30fc 	str.w	r3, [r1, #252]	; 0xfc
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000e88:	6813      	ldr	r3, [r2, #0]
 8000e8a:	f043 0301 	orr.w	r3, r3, #1
 8000e8e:	6013      	str	r3, [r2, #0]
}
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	e000ed00 	.word	0xe000ed00
 8000e98:	e0001000 	.word	0xe0001000

08000e9c <_ZN14SbusControllerC1Ev>:
#include <sbus.h>

SbusController::SbusController()
{

}
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <_ZN14SbusControllerD1Ev>:

SbusController::~SbusController()
{

}
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <_ZN14SbusController10UpdateSbusEPh>:

void SbusController::UpdateSbus(uint8_t *buf)
{
	sbus_channel.channel1 = (buf[1] >> 0 | (buf[2] << 8)) & 0x07FF;
 8000ea4:	f8b1 3001 	ldrh.w	r3, [r1, #1]
	else
	{
	  channel_17 = 0;
	}
	// Failsafe
	failsafe_status = SBUS_SIGNAL_OK;
 8000ea8:	2200      	movs	r2, #0
	sbus_channel.channel1 = (buf[1] >> 0 | (buf[2] << 8)) & 0x07FF;
 8000eaa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000eae:	8083      	strh	r3, [r0, #4]
	sbus_channel.channel2 = (buf[2] >> 3 | (buf[3] << 5)) & 0x07FF;
 8000eb0:	78cb      	ldrb	r3, [r1, #3]
 8000eb2:	f891 c002 	ldrb.w	ip, [r1, #2]
 8000eb6:	015b      	lsls	r3, r3, #5
 8000eb8:	ea43 03dc 	orr.w	r3, r3, ip, lsr #3
 8000ebc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000ec0:	80c3      	strh	r3, [r0, #6]
	sbus_channel.channel3 = (buf[3] >> 6 | (buf[4] << 2) | buf[5] << 10) & 0x07FF;
 8000ec2:	794b      	ldrb	r3, [r1, #5]
 8000ec4:	f891 c004 	ldrb.w	ip, [r1, #4]
 8000ec8:	029b      	lsls	r3, r3, #10
 8000eca:	ea43 038c 	orr.w	r3, r3, ip, lsl #2
 8000ece:	f891 c003 	ldrb.w	ip, [r1, #3]
 8000ed2:	ea43 139c 	orr.w	r3, r3, ip, lsr #6
 8000ed6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000eda:	8103      	strh	r3, [r0, #8]
	sbus_channel.channel4 = (buf[5] >> 1 | (buf[6] << 7)) & 0x07FF;
 8000edc:	798b      	ldrb	r3, [r1, #6]
 8000ede:	f891 c005 	ldrb.w	ip, [r1, #5]
 8000ee2:	01db      	lsls	r3, r3, #7
 8000ee4:	ea43 035c 	orr.w	r3, r3, ip, lsr #1
 8000ee8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000eec:	8143      	strh	r3, [r0, #10]
	sbus_channel.channel5 = (buf[6] >> 4 | (buf[7] << 4)) & 0x07FF;
 8000eee:	79cb      	ldrb	r3, [r1, #7]
 8000ef0:	f891 c006 	ldrb.w	ip, [r1, #6]
 8000ef4:	011b      	lsls	r3, r3, #4
 8000ef6:	ea43 131c 	orr.w	r3, r3, ip, lsr #4
 8000efa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000efe:	8183      	strh	r3, [r0, #12]
	sbus_channel.channel6 = (buf[7] >> 7 | (buf[8] << 1) | buf[9] << 9) & 0x07FF;
 8000f00:	7a4b      	ldrb	r3, [r1, #9]
 8000f02:	f891 c008 	ldrb.w	ip, [r1, #8]
 8000f06:	025b      	lsls	r3, r3, #9
 8000f08:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
 8000f0c:	f891 c007 	ldrb.w	ip, [r1, #7]
 8000f10:	ea43 13dc 	orr.w	r3, r3, ip, lsr #7
 8000f14:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f18:	81c3      	strh	r3, [r0, #14]
	sbus_channel.channel7 = (buf[9] >> 2 | (buf[10] << 6)) & 0x07FF;
 8000f1a:	7a8b      	ldrb	r3, [r1, #10]
 8000f1c:	f891 c009 	ldrb.w	ip, [r1, #9]
 8000f20:	019b      	lsls	r3, r3, #6
 8000f22:	ea43 039c 	orr.w	r3, r3, ip, lsr #2
 8000f26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f2a:	8203      	strh	r3, [r0, #16]
	sbus_channel.channel8 = (buf[10] >> 5 | (buf[11] << 3)) & 0x07FF;
 8000f2c:	7acb      	ldrb	r3, [r1, #11]
 8000f2e:	f891 c00a 	ldrb.w	ip, [r1, #10]
 8000f32:	00db      	lsls	r3, r3, #3
 8000f34:	ea43 135c 	orr.w	r3, r3, ip, lsr #5
 8000f38:	8243      	strh	r3, [r0, #18]
	sbus_channel.channel9 = (buf[12] << 0 | (buf[13] << 8)) & 0x07FF;
 8000f3a:	898b      	ldrh	r3, [r1, #12]
 8000f3c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f40:	8283      	strh	r3, [r0, #20]
	sbus_channel.channel10 = (buf[13] >> 3 | (buf[14] << 5)) & 0x07FF;
 8000f42:	7b8b      	ldrb	r3, [r1, #14]
 8000f44:	f891 c00d 	ldrb.w	ip, [r1, #13]
 8000f48:	015b      	lsls	r3, r3, #5
 8000f4a:	ea43 03dc 	orr.w	r3, r3, ip, lsr #3
 8000f4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f52:	82c3      	strh	r3, [r0, #22]
	sbus_channel.channel11 = (buf[14] >> 6 | (buf[15] << 2) | buf[16] << 10) & 0x07FF;
 8000f54:	7c0b      	ldrb	r3, [r1, #16]
 8000f56:	f891 c00f 	ldrb.w	ip, [r1, #15]
 8000f5a:	029b      	lsls	r3, r3, #10
 8000f5c:	ea43 038c 	orr.w	r3, r3, ip, lsl #2
 8000f60:	f891 c00e 	ldrb.w	ip, [r1, #14]
 8000f64:	ea43 139c 	orr.w	r3, r3, ip, lsr #6
 8000f68:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f6c:	8303      	strh	r3, [r0, #24]
	sbus_channel.channel12 = (buf[16] >> 1 | (buf[17] << 7)) & 0x07FF;
 8000f6e:	7c4b      	ldrb	r3, [r1, #17]
 8000f70:	f891 c010 	ldrb.w	ip, [r1, #16]
 8000f74:	01db      	lsls	r3, r3, #7
 8000f76:	ea43 035c 	orr.w	r3, r3, ip, lsr #1
 8000f7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f7e:	8343      	strh	r3, [r0, #26]
	sbus_channel.channel13 = (buf[17] >> 4 | (buf[18] << 4)) & 0x07FF;
 8000f80:	7c8b      	ldrb	r3, [r1, #18]
 8000f82:	f891 c011 	ldrb.w	ip, [r1, #17]
 8000f86:	011b      	lsls	r3, r3, #4
 8000f88:	ea43 131c 	orr.w	r3, r3, ip, lsr #4
 8000f8c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f90:	8383      	strh	r3, [r0, #28]
	sbus_channel.channel14 = (buf[18] >> 7 | (buf[19] << 1) | buf[20] << 9) & 0x07FF;
 8000f92:	7d0b      	ldrb	r3, [r1, #20]
 8000f94:	f891 c013 	ldrb.w	ip, [r1, #19]
 8000f98:	025b      	lsls	r3, r3, #9
 8000f9a:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
 8000f9e:	f891 c012 	ldrb.w	ip, [r1, #18]
 8000fa2:	ea43 13dc 	orr.w	r3, r3, ip, lsr #7
 8000fa6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000faa:	83c3      	strh	r3, [r0, #30]
	sbus_channel.channel15 = (buf[20] >> 2 | (buf[21] << 6)) & 0x07FF;
 8000fac:	7d4b      	ldrb	r3, [r1, #21]
 8000fae:	f891 c014 	ldrb.w	ip, [r1, #20]
 8000fb2:	019b      	lsls	r3, r3, #6
 8000fb4:	ea43 039c 	orr.w	r3, r3, ip, lsr #2
 8000fb8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000fbc:	8403      	strh	r3, [r0, #32]
	sbus_channel.channel16 = (buf[21] >> 5 | (buf[22] << 3)) & 0x07FF;
 8000fbe:	7d8b      	ldrb	r3, [r1, #22]
 8000fc0:	f891 c015 	ldrb.w	ip, [r1, #21]
 8000fc4:	00db      	lsls	r3, r3, #3
 8000fc6:	ea43 135c 	orr.w	r3, r3, ip, lsr #5
 8000fca:	8443      	strh	r3, [r0, #34]	; 0x22
	if (buf[24] & (1 << 0))
 8000fcc:	7e0b      	ldrb	r3, [r1, #24]
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	8003      	strh	r3, [r0, #0]
	if (buf[24] & (1 << 1))
 8000fd4:	7e0b      	ldrb	r3, [r1, #24]
	failsafe_status = SBUS_SIGNAL_OK;
 8000fd6:	7082      	strb	r2, [r0, #2]
	if (buf[24] & (1 << 1))
 8000fd8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000fdc:	8003      	strh	r3, [r0, #0]
	if (buf[24] & (1 << 2))
 8000fde:	7e0b      	ldrb	r3, [r1, #24]
 8000fe0:	075a      	lsls	r2, r3, #29
 8000fe2:	d502      	bpl.n	8000fea <_ZN14SbusController10UpdateSbusEPh+0x146>
	{
	  failsafe_status = SBUS_SIGNAL_LOST;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	7083      	strb	r3, [r0, #2]
	}

	if (buf[24] & (1 << 3))
 8000fe8:	7e0b      	ldrb	r3, [r1, #24]
 8000fea:	071b      	lsls	r3, r3, #28
 8000fec:	d501      	bpl.n	8000ff2 <_ZN14SbusController10UpdateSbusEPh+0x14e>
	{
	  failsafe_status = SBUS_SIGNAL_FAILSAFE;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	7083      	strb	r3, [r0, #2]
	}
}
 8000ff2:	4770      	bx	lr

08000ff4 <_ZN10SensorDataC1Ev>:
#include <sensors.hpp>


SensorData::SensorData()
 8000ff4:	4906      	ldr	r1, [pc, #24]	; (8001010 <_ZN10SensorDataC1Ev+0x1c>)
 8000ff6:	4a07      	ldr	r2, [pc, #28]	; (8001014 <_ZN10SensorDataC1Ev+0x20>)
 8000ff8:	b410      	push	{r4}
 8000ffa:	e9c0 1200 	strd	r1, r2, [r0]
 8000ffe:	4c06      	ldr	r4, [pc, #24]	; (8001018 <_ZN10SensorDataC1Ev+0x24>)
 8001000:	3160      	adds	r1, #96	; 0x60
 8001002:	3260      	adds	r2, #96	; 0x60
 8001004:	e9c0 4102 	strd	r4, r1, [r0, #8]
 8001008:	6102      	str	r2, [r0, #16]
{

}
 800100a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	38001000 	.word	0x38001000
 8001014:	38001020 	.word	0x38001020
 8001018:	38001040 	.word	0x38001040

0800101c <_ZN10SensorData11ReadRawDataEv>:

void SensorData::ReadRawData()
{
 800101c:	b510      	push	{r4, lr}
 800101e:	4604      	mov	r4, r0
	  HAL_HSEM_Release(HSEM_ID_0,0);
}

void SensorData::ReadGyro()
{
	  if(HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK)
 8001020:	2000      	movs	r0, #0
 8001022:	f004 f801 	bl	8005028 <HAL_HSEM_FastTake>
 8001026:	b930      	cbnz	r0, 8001036 <_ZN10SensorData11ReadRawDataEv+0x1a>
	  {
	     gyro_values.imu_gyro_x = gyro_values_m7->imu_gyro_x;
 8001028:	6863      	ldr	r3, [r4, #4]
 800102a:	6819      	ldr	r1, [r3, #0]
	     gyro_values.imu_gyro_y = gyro_values_m7->imu_gyro_y;
 800102c:	685a      	ldr	r2, [r3, #4]
	     gyro_values.imu_gyro_z = gyro_values_m7->imu_gyro_z;
 800102e:	689b      	ldr	r3, [r3, #8]
	     gyro_values.imu_gyro_x = gyro_values_m7->imu_gyro_x;
 8001030:	6421      	str	r1, [r4, #64]	; 0x40
	     gyro_values.imu_gyro_y = gyro_values_m7->imu_gyro_y;
 8001032:	6462      	str	r2, [r4, #68]	; 0x44
	     gyro_values.imu_gyro_z = gyro_values_m7->imu_gyro_z;
 8001034:	64a3      	str	r3, [r4, #72]	; 0x48
	  }
	  HAL_HSEM_Release(HSEM_ID_0,0);
 8001036:	2100      	movs	r1, #0
}
 8001038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	  HAL_HSEM_Release(HSEM_ID_0,0);
 800103c:	4608      	mov	r0, r1
 800103e:	f004 b80d 	b.w	800505c <HAL_HSEM_Release>
 8001042:	bf00      	nop

08001044 <_ZN10SensorData11GetGyroDataEv>:
acc_data SensorData::GetAccData()
{
	return acc_values;
}
gyro_data SensorData::GetGyroData()
{
 8001044:	b088      	sub	sp, #32
	return gyro_values;
 8001046:	3040      	adds	r0, #64	; 0x40
 8001048:	ab08      	add	r3, sp, #32
 800104a:	c807      	ldmia	r0, {r0, r1, r2}
 800104c:	e903 0007 	stmdb	r3, {r0, r1, r2}
}
 8001050:	eddd 0a06 	vldr	s1, [sp, #24]
 8001054:	ed9d 1a07 	vldr	s2, [sp, #28]
 8001058:	ed9d 0a05 	vldr	s0, [sp, #20]
 800105c:	b008      	add	sp, #32
 800105e:	4770      	bx	lr

08001060 <_ZN10SerializerC1Ev>:
		usb_timer(0),
		acc_timer(0),
		gyro_timer(0),
		gps_timer(0),
		mag_timer(0),
		baro_timer(0)
 8001060:	2200      	movs	r2, #0
 8001062:	e9c0 2200 	strd	r2, r2, [r0]
 8001066:	e9c0 2202 	strd	r2, r2, [r0, #8]
 800106a:	e9c0 2204 	strd	r2, r2, [r0, #16]
{

}
 800106e:	4770      	bx	lr

08001070 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001076:	4b0a      	ldr	r3, [pc, #40]	; (80010a0 <HAL_MspInit+0x30>)
 8001078:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800107c:	4a08      	ldr	r2, [pc, #32]	; (80010a0 <HAL_MspInit+0x30>)
 800107e:	f043 0302 	orr.w	r3, r3, #2
 8001082:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001086:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <HAL_MspInit+0x30>)
 8001088:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800108c:	f003 0302 	and.w	r3, r3, #2
 8001090:	607b      	str	r3, [r7, #4]
 8001092:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	58024400 	.word	0x58024400

080010a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010a8:	e7fe      	b.n	80010a8 <NMI_Handler+0x4>

080010aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010aa:	b480      	push	{r7}
 80010ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ae:	e7fe      	b.n	80010ae <HardFault_Handler+0x4>

080010b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010b4:	e7fe      	b.n	80010b4 <MemManage_Handler+0x4>

080010b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010b6:	b480      	push	{r7}
 80010b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ba:	e7fe      	b.n	80010ba <BusFault_Handler+0x4>

080010bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010c0:	e7fe      	b.n	80010c0 <UsageFault_Handler+0x4>

080010c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010c2:	b480      	push	{r7}
 80010c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010c6:	bf00      	nop
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr

080010de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010de:	b480      	push	{r7}
 80010e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010e2:	bf00      	nop
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010f0:	f000 fd90 	bl	8001c14 <HAL_IncTick>

  HAL_SYSTICK_IRQHandler();
 80010f4:	f000 ff6a 	bl	8001fcc <HAL_SYSTICK_IRQHandler>

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010f8:	bf00      	nop
 80010fa:	bd80      	pop	{r7, pc}

080010fc <DMA2_Stream7_IRQHandler>:
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32h7xx.s).                    */
/******************************************************************************/

void DMA2_Stream7_IRQHandler(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001100:	4802      	ldr	r0, [pc, #8]	; (800110c <DMA2_Stream7_IRQHandler+0x10>)
 8001102:	f002 fa9b 	bl	800363c <HAL_DMA_IRQHandler>
}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	240016dc 	.word	0x240016dc

08001110 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 8001114:	4802      	ldr	r0, [pc, #8]	; (8001120 <DMA1_Stream5_IRQHandler+0x10>)
 8001116:	f002 fa91 	bl	800363c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	240015ec 	.word	0x240015ec

08001124 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_tx);
 8001128:	4802      	ldr	r0, [pc, #8]	; (8001134 <DMA1_Stream6_IRQHandler+0x10>)
 800112a:	f002 fa87 	bl	800363c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	24001664 	.word	0x24001664

08001138 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800113c:	4802      	ldr	r0, [pc, #8]	; (8001148 <TIM1_BRK_IRQHandler+0x10>)
 800113e:	f009 f809 	bl	800a154 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	24001480 	.word	0x24001480

0800114c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001150:	4802      	ldr	r0, [pc, #8]	; (800115c <TIM1_UP_IRQHandler+0x10>)
 8001152:	f008 ffff 	bl	800a154 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	24001480 	.word	0x24001480

08001160 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001164:	4802      	ldr	r0, [pc, #8]	; (8001170 <TIM1_TRG_COM_IRQHandler+0x10>)
 8001166:	f008 fff5 	bl	800a154 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	24001480 	.word	0x24001480

08001174 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001178:	4802      	ldr	r0, [pc, #8]	; (8001184 <TIM1_CC_IRQHandler+0x10>)
 800117a:	f008 ffeb 	bl	800a154 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	24001480 	.word	0x24001480

08001188 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800118c:	4802      	ldr	r0, [pc, #8]	; (8001198 <I2C2_EV_IRQHandler+0x10>)
 800118e:	f004 f809 	bl	80051a4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	24000370 	.word	0x24000370

0800119c <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80011a0:	4802      	ldr	r0, [pc, #8]	; (80011ac <I2C2_ER_IRQHandler+0x10>)
 80011a2:	f004 f819 	bl	80051d8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	24000370 	.word	0x24000370

080011b0 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80011b4:	4802      	ldr	r0, [pc, #8]	; (80011c0 <SDMMC1_IRQHandler+0x10>)
 80011b6:	f008 fc9b 	bl	8009af0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	240013e4 	.word	0x240013e4

080011c4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
  if(__HAL_UART_GET_IT_SOURCE(&huart4, UART_IT_IDLE))
 80011c8:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <UART4_IRQHandler+0x38>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0310 	and.w	r3, r3, #16
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d00c      	beq.n	80011f0 <UART4_IRQHandler+0x2c>
  {
     HAL_UART_Receive_DMA(&huart4, sbus_buffer, SBUS_PACKET_LEN);
 80011d6:	2219      	movs	r2, #25
 80011d8:	4909      	ldr	r1, [pc, #36]	; (8001200 <UART4_IRQHandler+0x3c>)
 80011da:	4808      	ldr	r0, [pc, #32]	; (80011fc <UART4_IRQHandler+0x38>)
 80011dc:	f00a f88a 	bl	800b2f4 <HAL_UART_Receive_DMA>
    __HAL_UART_DISABLE_IT(&huart4, UART_IT_IDLE);
 80011e0:	4b06      	ldr	r3, [pc, #24]	; (80011fc <UART4_IRQHandler+0x38>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	4b05      	ldr	r3, [pc, #20]	; (80011fc <UART4_IRQHandler+0x38>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f022 0210 	bic.w	r2, r2, #16
 80011ee:	601a      	str	r2, [r3, #0]
  }
  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80011f0:	4802      	ldr	r0, [pc, #8]	; (80011fc <UART4_IRQHandler+0x38>)
 80011f2:	f00a f935 	bl	800b460 <HAL_UART_IRQHandler>

  /* USER CODE END UART4_IRQn 1 */
}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	240014cc 	.word	0x240014cc
 8001200:	24001460 	.word	0x24001460

08001204 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8001208:	4802      	ldr	r0, [pc, #8]	; (8001214 <UART7_IRQHandler+0x10>)
 800120a:	f00a f929 	bl	800b460 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	2400155c 	.word	0x2400155c

08001218 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800121c:	4802      	ldr	r0, [pc, #8]	; (8001228 <OTG_FS_IRQHandler+0x10>)
 800121e:	f005 f834 	bl	800628a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	24002c3c 	.word	0x24002c3c

0800122c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
	return 1;
 8001230:	2301      	movs	r3, #1
}
 8001232:	4618      	mov	r0, r3
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <_kill>:

int _kill(int pid, int sig)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001246:	f00f fc5d 	bl	8010b04 <__errno>
 800124a:	4603      	mov	r3, r0
 800124c:	2216      	movs	r2, #22
 800124e:	601a      	str	r2, [r3, #0]
	return -1;
 8001250:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001254:	4618      	mov	r0, r3
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <_exit>:

void _exit (int status)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001264:	f04f 31ff 	mov.w	r1, #4294967295
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7ff ffe7 	bl	800123c <_kill>
	while (1) {}		/* Make sure we hang here */
 800126e:	e7fe      	b.n	800126e <_exit+0x12>

08001270 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]
 8001280:	e00a      	b.n	8001298 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001282:	f3af 8000 	nop.w
 8001286:	4601      	mov	r1, r0
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	1c5a      	adds	r2, r3, #1
 800128c:	60ba      	str	r2, [r7, #8]
 800128e:	b2ca      	uxtb	r2, r1
 8001290:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	3301      	adds	r3, #1
 8001296:	617b      	str	r3, [r7, #20]
 8001298:	697a      	ldr	r2, [r7, #20]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	429a      	cmp	r2, r3
 800129e:	dbf0      	blt.n	8001282 <_read+0x12>
	}

return len;
 80012a0:	687b      	ldr	r3, [r7, #4]
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3718      	adds	r7, #24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b086      	sub	sp, #24
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	60f8      	str	r0, [r7, #12]
 80012b2:	60b9      	str	r1, [r7, #8]
 80012b4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012b6:	2300      	movs	r3, #0
 80012b8:	617b      	str	r3, [r7, #20]
 80012ba:	e009      	b.n	80012d0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	1c5a      	adds	r2, r3, #1
 80012c0:	60ba      	str	r2, [r7, #8]
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	3301      	adds	r3, #1
 80012ce:	617b      	str	r3, [r7, #20]
 80012d0:	697a      	ldr	r2, [r7, #20]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	dbf1      	blt.n	80012bc <_write+0x12>
	}
	return len;
 80012d8:	687b      	ldr	r3, [r7, #4]
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3718      	adds	r7, #24
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <_close>:

int _close(int file)
{
 80012e2:	b480      	push	{r7}
 80012e4:	b083      	sub	sp, #12
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
	return -1;
 80012ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr

080012fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012fa:	b480      	push	{r7}
 80012fc:	b083      	sub	sp, #12
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
 8001302:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800130a:	605a      	str	r2, [r3, #4]
	return 0;
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr

0800131a <_isatty>:

int _isatty(int file)
{
 800131a:	b480      	push	{r7}
 800131c:	b083      	sub	sp, #12
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
	return 1;
 8001322:	2301      	movs	r3, #1
}
 8001324:	4618      	mov	r0, r3
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001330:	b480      	push	{r7}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
	return 0;
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3714      	adds	r7, #20
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
	...

0800134c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b086      	sub	sp, #24
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001354:	4a14      	ldr	r2, [pc, #80]	; (80013a8 <_sbrk+0x5c>)
 8001356:	4b15      	ldr	r3, [pc, #84]	; (80013ac <_sbrk+0x60>)
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001360:	4b13      	ldr	r3, [pc, #76]	; (80013b0 <_sbrk+0x64>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d102      	bne.n	800136e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001368:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <_sbrk+0x64>)
 800136a:	4a12      	ldr	r2, [pc, #72]	; (80013b4 <_sbrk+0x68>)
 800136c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800136e:	4b10      	ldr	r3, [pc, #64]	; (80013b0 <_sbrk+0x64>)
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4413      	add	r3, r2
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	429a      	cmp	r2, r3
 800137a:	d207      	bcs.n	800138c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800137c:	f00f fbc2 	bl	8010b04 <__errno>
 8001380:	4603      	mov	r3, r0
 8001382:	220c      	movs	r2, #12
 8001384:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001386:	f04f 33ff 	mov.w	r3, #4294967295
 800138a:	e009      	b.n	80013a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800138c:	4b08      	ldr	r3, [pc, #32]	; (80013b0 <_sbrk+0x64>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001392:	4b07      	ldr	r3, [pc, #28]	; (80013b0 <_sbrk+0x64>)
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4413      	add	r3, r2
 800139a:	4a05      	ldr	r2, [pc, #20]	; (80013b0 <_sbrk+0x64>)
 800139c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800139e:	68fb      	ldr	r3, [r7, #12]
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3718      	adds	r7, #24
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	24080000 	.word	0x24080000
 80013ac:	00000400 	.word	0x00000400
 80013b0:	2400147c 	.word	0x2400147c
 80013b4:	24003058 	.word	0x24003058

080013b8 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b0a4      	sub	sp, #144	; 0x90
 80013bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013be:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	605a      	str	r2, [r3, #4]
 80013c8:	609a      	str	r2, [r3, #8]
 80013ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013cc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013d8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	611a      	str	r2, [r3, #16]
 80013e8:	615a      	str	r2, [r3, #20]
 80013ea:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013f0:	222c      	movs	r2, #44	; 0x2c
 80013f2:	2100      	movs	r1, #0
 80013f4:	4618      	mov	r0, r3
 80013f6:	f00f fbcd 	bl	8010b94 <memset>
  RCC_ClkInitTypeDef clk_init_struct = {0};
 80013fa:	1d3b      	adds	r3, r7, #4
 80013fc:	2220      	movs	r2, #32
 80013fe:	2100      	movs	r1, #0
 8001400:	4618      	mov	r0, r3
 8001402:	f00f fbc7 	bl	8010b94 <memset>


  /* USER CODE BEGIN TIM1_Init 1 */

  uint32_t latency = 0;
 8001406:	2300      	movs	r3, #0
 8001408:	603b      	str	r3, [r7, #0]
  uint32_t timer_clock_frequency = 0;
 800140a:	2300      	movs	r3, #0
 800140c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t timer_prescaler = 0;
 8001410:	2300      	movs	r3, #0
 8001412:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  /* USER CODE END TIM1_Init 1 */

  HAL_RCC_GetClockConfig(&clk_init_struct, &latency);
 8001416:	463a      	mov	r2, r7
 8001418:	1d3b      	adds	r3, r7, #4
 800141a:	4611      	mov	r1, r2
 800141c:	4618      	mov	r0, r3
 800141e:	f006 ffbd 	bl	800839c <HAL_RCC_GetClockConfig>

  if(clk_init_struct.APB1CLKDivider == RCC_HCLK_DIV1)
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d104      	bne.n	8001432 <MX_TIM1_Init+0x7a>
  {
    timer_clock_frequency = HAL_RCC_GetPCLK1Freq();
 8001428:	f006 ff8c 	bl	8008344 <HAL_RCC_GetPCLK1Freq>
 800142c:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 8001430:	e005      	b.n	800143e <MX_TIM1_Init+0x86>
  }

  else
  {
    timer_clock_frequency = HAL_RCC_GetPCLK1Freq() * 2;
 8001432:	f006 ff87 	bl	8008344 <HAL_RCC_GetPCLK1Freq>
 8001436:	4603      	mov	r3, r0
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  }

  timer_prescaler = (timer_clock_frequency / (TIMER_PRESCALER_MAX_VALUE * TIMER_FREQUENCY_RANGE_MIN)) +1;
 800143e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001442:	4a5f      	ldr	r2, [pc, #380]	; (80015c0 <MX_TIM1_Init+0x208>)
 8001444:	fba2 2303 	umull	r2, r3, r2, r3
 8001448:	0c9b      	lsrs	r3, r3, #18
 800144a:	3301      	adds	r3, #1
 800144c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  htim1.Instance = TIM1;
 8001450:	4b5c      	ldr	r3, [pc, #368]	; (80015c4 <MX_TIM1_Init+0x20c>)
 8001452:	4a5d      	ldr	r2, [pc, #372]	; (80015c8 <MX_TIM1_Init+0x210>)
 8001454:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = (timer_prescaler - 1);
 8001456:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800145a:	3b01      	subs	r3, #1
 800145c:	4a59      	ldr	r2, [pc, #356]	; (80015c4 <MX_TIM1_Init+0x20c>)
 800145e:	6053      	str	r3, [r2, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001460:	4b58      	ldr	r3, [pc, #352]	; (80015c4 <MX_TIM1_Init+0x20c>)
 8001462:	2200      	movs	r2, #0
 8001464:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = ((timer_clock_frequency / (timer_prescaler * TIMER_FREQUENCY)) - 1);
 8001466:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800146a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800146e:	fb02 f303 	mul.w	r3, r2, r3
 8001472:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001476:	fbb2 f3f3 	udiv	r3, r2, r3
 800147a:	3b01      	subs	r3, #1
 800147c:	4a51      	ldr	r2, [pc, #324]	; (80015c4 <MX_TIM1_Init+0x20c>)
 800147e:	60d3      	str	r3, [r2, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001480:	4b50      	ldr	r3, [pc, #320]	; (80015c4 <MX_TIM1_Init+0x20c>)
 8001482:	2200      	movs	r2, #0
 8001484:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001486:	4b4f      	ldr	r3, [pc, #316]	; (80015c4 <MX_TIM1_Init+0x20c>)
 8001488:	2200      	movs	r2, #0
 800148a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800148c:	4b4d      	ldr	r3, [pc, #308]	; (80015c4 <MX_TIM1_Init+0x20c>)
 800148e:	2200      	movs	r2, #0
 8001490:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001492:	484c      	ldr	r0, [pc, #304]	; (80015c4 <MX_TIM1_Init+0x20c>)
 8001494:	f008 fda6 	bl	8009fe4 <HAL_TIM_Base_Init>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_TIM1_Init+0xea>
  {
    Error_Handler();
 800149e:	f7ff fcb5 	bl	8000e0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014a6:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014a8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80014ac:	4619      	mov	r1, r3
 80014ae:	4845      	ldr	r0, [pc, #276]	; (80015c4 <MX_TIM1_Init+0x20c>)
 80014b0:	f009 f880 	bl	800a5b4 <HAL_TIM_ConfigClockSource>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 80014ba:	f7ff fca7 	bl	8000e0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80014be:	4841      	ldr	r0, [pc, #260]	; (80015c4 <MX_TIM1_Init+0x20c>)
 80014c0:	f008 fde7 	bl	800a092 <HAL_TIM_PWM_Init>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80014ca:	f7ff fc9f 	bl	8000e0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ce:	2300      	movs	r3, #0
 80014d0:	66fb      	str	r3, [r7, #108]	; 0x6c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80014d2:	2300      	movs	r3, #0
 80014d4:	673b      	str	r3, [r7, #112]	; 0x70
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d6:	2300      	movs	r3, #0
 80014d8:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014da:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80014de:	4619      	mov	r1, r3
 80014e0:	4838      	ldr	r0, [pc, #224]	; (80015c4 <MX_TIM1_Init+0x20c>)
 80014e2:	f009 fd93 	bl	800b00c <HAL_TIMEx_MasterConfigSynchronization>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 80014ec:	f7ff fc8e 	bl	8000e0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014f0:	2360      	movs	r3, #96	; 0x60
 80014f2:	653b      	str	r3, [r7, #80]	; 0x50
  sConfigOC.Pulse = 50;
 80014f4:	2332      	movs	r3, #50	; 0x32
 80014f6:	657b      	str	r3, [r7, #84]	; 0x54
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014f8:	2300      	movs	r3, #0
 80014fa:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014fc:	2300      	movs	r3, #0
 80014fe:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001500:	2300      	movs	r3, #0
 8001502:	663b      	str	r3, [r7, #96]	; 0x60
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001504:	2300      	movs	r3, #0
 8001506:	667b      	str	r3, [r7, #100]	; 0x64
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001508:	2300      	movs	r3, #0
 800150a:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800150c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001510:	2200      	movs	r2, #0
 8001512:	4619      	mov	r1, r3
 8001514:	482b      	ldr	r0, [pc, #172]	; (80015c4 <MX_TIM1_Init+0x20c>)
 8001516:	f008 ff3d 	bl	800a394 <HAL_TIM_PWM_ConfigChannel>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_TIM1_Init+0x16c>
  {
    Error_Handler();
 8001520:	f7ff fc74 	bl	8000e0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001524:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001528:	2204      	movs	r2, #4
 800152a:	4619      	mov	r1, r3
 800152c:	4825      	ldr	r0, [pc, #148]	; (80015c4 <MX_TIM1_Init+0x20c>)
 800152e:	f008 ff31 	bl	800a394 <HAL_TIM_PWM_ConfigChannel>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_TIM1_Init+0x184>
  {
    Error_Handler();
 8001538:	f7ff fc68 	bl	8000e0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800153c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001540:	2208      	movs	r2, #8
 8001542:	4619      	mov	r1, r3
 8001544:	481f      	ldr	r0, [pc, #124]	; (80015c4 <MX_TIM1_Init+0x20c>)
 8001546:	f008 ff25 	bl	800a394 <HAL_TIM_PWM_ConfigChannel>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_TIM1_Init+0x19c>
  {
    Error_Handler();
 8001550:	f7ff fc5c 	bl	8000e0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001554:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001558:	220c      	movs	r2, #12
 800155a:	4619      	mov	r1, r3
 800155c:	4819      	ldr	r0, [pc, #100]	; (80015c4 <MX_TIM1_Init+0x20c>)
 800155e:	f008 ff19 	bl	800a394 <HAL_TIM_PWM_ConfigChannel>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_TIM1_Init+0x1b4>
  {
    Error_Handler();
 8001568:	f7ff fc50 	bl	8000e0c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800156c:	2300      	movs	r3, #0
 800156e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001570:	2300      	movs	r3, #0
 8001572:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001574:	2300      	movs	r3, #0
 8001576:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.DeadTime = 0;
 8001578:	2300      	movs	r3, #0
 800157a:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800157c:	2300      	movs	r3, #0
 800157e:	637b      	str	r3, [r7, #52]	; 0x34
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001580:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001584:	63bb      	str	r3, [r7, #56]	; 0x38
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001586:	2300      	movs	r3, #0
 8001588:	63fb      	str	r3, [r7, #60]	; 0x3c
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800158a:	2300      	movs	r3, #0
 800158c:	643b      	str	r3, [r7, #64]	; 0x40
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800158e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001592:	647b      	str	r3, [r7, #68]	; 0x44
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001594:	2300      	movs	r3, #0
 8001596:	64bb      	str	r3, [r7, #72]	; 0x48
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001598:	2300      	movs	r3, #0
 800159a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800159c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015a0:	4619      	mov	r1, r3
 80015a2:	4808      	ldr	r0, [pc, #32]	; (80015c4 <MX_TIM1_Init+0x20c>)
 80015a4:	f009 fdba 	bl	800b11c <HAL_TIMEx_ConfigBreakDeadTime>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_TIM1_Init+0x1fa>
  {
    Error_Handler();
 80015ae:	f7ff fc2d 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80015b2:	4804      	ldr	r0, [pc, #16]	; (80015c4 <MX_TIM1_Init+0x20c>)
 80015b4:	f000 f84a 	bl	800164c <HAL_TIM_MspPostInit>

}
 80015b8:	bf00      	nop
 80015ba:	3790      	adds	r7, #144	; 0x90
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	66673335 	.word	0x66673335
 80015c4:	24001480 	.word	0x24001480
 80015c8:	40010000 	.word	0x40010000

080015cc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a1a      	ldr	r2, [pc, #104]	; (8001644 <HAL_TIM_Base_MspInit+0x78>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d12e      	bne.n	800163c <HAL_TIM_Base_MspInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015de:	4b1a      	ldr	r3, [pc, #104]	; (8001648 <HAL_TIM_Base_MspInit+0x7c>)
 80015e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80015e4:	4a18      	ldr	r2, [pc, #96]	; (8001648 <HAL_TIM_Base_MspInit+0x7c>)
 80015e6:	f043 0301 	orr.w	r3, r3, #1
 80015ea:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80015ee:	4b16      	ldr	r3, [pc, #88]	; (8001648 <HAL_TIM_Base_MspInit+0x7c>)
 80015f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80015f4:	f003 0301 	and.w	r3, r3, #1
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 80015fc:	2200      	movs	r2, #0
 80015fe:	2100      	movs	r1, #0
 8001600:	2018      	movs	r0, #24
 8001602:	f000 fc32 	bl	8001e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8001606:	2018      	movs	r0, #24
 8001608:	f000 fc49 	bl	8001e9e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800160c:	2200      	movs	r2, #0
 800160e:	2100      	movs	r1, #0
 8001610:	2019      	movs	r0, #25
 8001612:	f000 fc2a 	bl	8001e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001616:	2019      	movs	r0, #25
 8001618:	f000 fc41 	bl	8001e9e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 800161c:	2200      	movs	r2, #0
 800161e:	2100      	movs	r1, #0
 8001620:	201a      	movs	r0, #26
 8001622:	f000 fc22 	bl	8001e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8001626:	201a      	movs	r0, #26
 8001628:	f000 fc39 	bl	8001e9e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800162c:	2200      	movs	r2, #0
 800162e:	2100      	movs	r1, #0
 8001630:	201b      	movs	r0, #27
 8001632:	f000 fc1a 	bl	8001e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001636:	201b      	movs	r0, #27
 8001638:	f000 fc31 	bl	8001e9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800163c:	bf00      	nop
 800163e:	3710      	adds	r7, #16
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40010000 	.word	0x40010000
 8001648:	58024400 	.word	0x58024400

0800164c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b08a      	sub	sp, #40	; 0x28
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001654:	f107 0314 	add.w	r3, r7, #20
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	609a      	str	r2, [r3, #8]
 8001660:	60da      	str	r2, [r3, #12]
 8001662:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a23      	ldr	r2, [pc, #140]	; (80016f8 <HAL_TIM_MspPostInit+0xac>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d13f      	bne.n	80016ee <HAL_TIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800166e:	4b23      	ldr	r3, [pc, #140]	; (80016fc <HAL_TIM_MspPostInit+0xb0>)
 8001670:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001674:	4a21      	ldr	r2, [pc, #132]	; (80016fc <HAL_TIM_MspPostInit+0xb0>)
 8001676:	f043 0310 	orr.w	r3, r3, #16
 800167a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800167e:	4b1f      	ldr	r3, [pc, #124]	; (80016fc <HAL_TIM_MspPostInit+0xb0>)
 8001680:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001684:	f003 0310 	and.w	r3, r3, #16
 8001688:	613b      	str	r3, [r7, #16]
 800168a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800168c:	4b1b      	ldr	r3, [pc, #108]	; (80016fc <HAL_TIM_MspPostInit+0xb0>)
 800168e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001692:	4a1a      	ldr	r2, [pc, #104]	; (80016fc <HAL_TIM_MspPostInit+0xb0>)
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800169c:	4b17      	ldr	r3, [pc, #92]	; (80016fc <HAL_TIM_MspPostInit+0xb0>)
 800169e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 80016aa:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80016ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b0:	2302      	movs	r3, #2
 80016b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b4:	2300      	movs	r3, #0
 80016b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b8:	2300      	movs	r3, #0
 80016ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80016bc:	2301      	movs	r3, #1
 80016be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016c0:	f107 0314 	add.w	r3, r7, #20
 80016c4:	4619      	mov	r1, r3
 80016c6:	480e      	ldr	r0, [pc, #56]	; (8001700 <HAL_TIM_MspPostInit+0xb4>)
 80016c8:	f003 fae4 	bl	8004c94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80016cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d2:	2302      	movs	r3, #2
 80016d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d6:	2300      	movs	r3, #0
 80016d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016da:	2300      	movs	r3, #0
 80016dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80016de:	2301      	movs	r3, #1
 80016e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e2:	f107 0314 	add.w	r3, r7, #20
 80016e6:	4619      	mov	r1, r3
 80016e8:	4806      	ldr	r0, [pc, #24]	; (8001704 <HAL_TIM_MspPostInit+0xb8>)
 80016ea:	f003 fad3 	bl	8004c94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80016ee:	bf00      	nop
 80016f0:	3728      	adds	r7, #40	; 0x28
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40010000 	.word	0x40010000
 80016fc:	58024400 	.word	0x58024400
 8001700:	58021000 	.word	0x58021000
 8001704:	58020000 	.word	0x58020000

08001708 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart7_rx;
DMA_HandleTypeDef hdma_uart7_tx;
DMA_HandleTypeDef hdma_uart4_rx;
/* UART4 init function */
void MX_UART4_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800170c:	4b1f      	ldr	r3, [pc, #124]	; (800178c <MX_UART4_Init+0x84>)
 800170e:	4a20      	ldr	r2, [pc, #128]	; (8001790 <MX_UART4_Init+0x88>)
 8001710:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 100000;
 8001712:	4b1e      	ldr	r3, [pc, #120]	; (800178c <MX_UART4_Init+0x84>)
 8001714:	4a1f      	ldr	r2, [pc, #124]	; (8001794 <MX_UART4_Init+0x8c>)
 8001716:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_9B;
 8001718:	4b1c      	ldr	r3, [pc, #112]	; (800178c <MX_UART4_Init+0x84>)
 800171a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800171e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_2;
 8001720:	4b1a      	ldr	r3, [pc, #104]	; (800178c <MX_UART4_Init+0x84>)
 8001722:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001726:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 8001728:	4b18      	ldr	r3, [pc, #96]	; (800178c <MX_UART4_Init+0x84>)
 800172a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800172e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_RX;
 8001730:	4b16      	ldr	r3, [pc, #88]	; (800178c <MX_UART4_Init+0x84>)
 8001732:	2204      	movs	r2, #4
 8001734:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001736:	4b15      	ldr	r3, [pc, #84]	; (800178c <MX_UART4_Init+0x84>)
 8001738:	2200      	movs	r2, #0
 800173a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800173c:	4b13      	ldr	r3, [pc, #76]	; (800178c <MX_UART4_Init+0x84>)
 800173e:	2200      	movs	r2, #0
 8001740:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001742:	4b12      	ldr	r3, [pc, #72]	; (800178c <MX_UART4_Init+0x84>)
 8001744:	2200      	movs	r2, #0
 8001746:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV4;
 8001748:	4b10      	ldr	r3, [pc, #64]	; (800178c <MX_UART4_Init+0x84>)
 800174a:	2202      	movs	r2, #2
 800174c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800174e:	4b0f      	ldr	r3, [pc, #60]	; (800178c <MX_UART4_Init+0x84>)
 8001750:	2200      	movs	r2, #0
 8001752:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001754:	480d      	ldr	r0, [pc, #52]	; (800178c <MX_UART4_Init+0x84>)
 8001756:	f009 fd7d 	bl	800b254 <HAL_UART_Init>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_UART4_Init+0x5c>
  {
    Error_Handler();
 8001760:	f7ff fb54 	bl	8000e0c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001764:	2100      	movs	r1, #0
 8001766:	4809      	ldr	r0, [pc, #36]	; (800178c <MX_UART4_Init+0x84>)
 8001768:	f00b fa60 	bl	800cc2c <HAL_UARTEx_SetRxFifoThreshold>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_UART4_Init+0x6e>
  {
    Error_Handler();
 8001772:	f7ff fb4b 	bl	8000e0c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001776:	4805      	ldr	r0, [pc, #20]	; (800178c <MX_UART4_Init+0x84>)
 8001778:	f00b f9e1 	bl	800cb3e <HAL_UARTEx_DisableFifoMode>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <MX_UART4_Init+0x7e>
  {
    Error_Handler();
 8001782:	f7ff fb43 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	240014cc 	.word	0x240014cc
 8001790:	40004c00 	.word	0x40004c00
 8001794:	000186a0 	.word	0x000186a0

08001798 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 800179c:	4b22      	ldr	r3, [pc, #136]	; (8001828 <MX_UART7_Init+0x90>)
 800179e:	4a23      	ldr	r2, [pc, #140]	; (800182c <MX_UART7_Init+0x94>)
 80017a0:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 921600;
 80017a2:	4b21      	ldr	r3, [pc, #132]	; (8001828 <MX_UART7_Init+0x90>)
 80017a4:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80017a8:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80017aa:	4b1f      	ldr	r3, [pc, #124]	; (8001828 <MX_UART7_Init+0x90>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80017b0:	4b1d      	ldr	r3, [pc, #116]	; (8001828 <MX_UART7_Init+0x90>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80017b6:	4b1c      	ldr	r3, [pc, #112]	; (8001828 <MX_UART7_Init+0x90>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80017bc:	4b1a      	ldr	r3, [pc, #104]	; (8001828 <MX_UART7_Init+0x90>)
 80017be:	220c      	movs	r2, #12
 80017c0:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017c2:	4b19      	ldr	r3, [pc, #100]	; (8001828 <MX_UART7_Init+0x90>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80017c8:	4b17      	ldr	r3, [pc, #92]	; (8001828 <MX_UART7_Init+0x90>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017ce:	4b16      	ldr	r3, [pc, #88]	; (8001828 <MX_UART7_Init+0x90>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017d4:	4b14      	ldr	r3, [pc, #80]	; (8001828 <MX_UART7_Init+0x90>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017da:	4b13      	ldr	r3, [pc, #76]	; (8001828 <MX_UART7_Init+0x90>)
 80017dc:	2200      	movs	r2, #0
 80017de:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80017e0:	4811      	ldr	r0, [pc, #68]	; (8001828 <MX_UART7_Init+0x90>)
 80017e2:	f009 fd37 	bl	800b254 <HAL_UART_Init>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 80017ec:	f7ff fb0e 	bl	8000e0c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017f0:	2100      	movs	r1, #0
 80017f2:	480d      	ldr	r0, [pc, #52]	; (8001828 <MX_UART7_Init+0x90>)
 80017f4:	f00b f9dc 	bl	800cbb0 <HAL_UARTEx_SetTxFifoThreshold>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 80017fe:	f7ff fb05 	bl	8000e0c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001802:	2100      	movs	r1, #0
 8001804:	4808      	ldr	r0, [pc, #32]	; (8001828 <MX_UART7_Init+0x90>)
 8001806:	f00b fa11 	bl	800cc2c <HAL_UARTEx_SetRxFifoThreshold>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8001810:	f7ff fafc 	bl	8000e0c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8001814:	4804      	ldr	r0, [pc, #16]	; (8001828 <MX_UART7_Init+0x90>)
 8001816:	f00b f992 	bl	800cb3e <HAL_UARTEx_DisableFifoMode>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8001820:	f7ff faf4 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001824:	bf00      	nop
 8001826:	bd80      	pop	{r7, pc}
 8001828:	2400155c 	.word	0x2400155c
 800182c:	40007800 	.word	0x40007800

08001830 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b0ba      	sub	sp, #232	; 0xe8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001838:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]
 8001846:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001848:	f107 0318 	add.w	r3, r7, #24
 800184c:	22bc      	movs	r2, #188	; 0xbc
 800184e:	2100      	movs	r1, #0
 8001850:	4618      	mov	r0, r3
 8001852:	f00f f99f 	bl	8010b94 <memset>
  if(uartHandle->Instance==UART4)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a95      	ldr	r2, [pc, #596]	; (8001ab0 <HAL_UART_MspInit+0x280>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d179      	bne.n	8001954 <HAL_UART_MspInit+0x124>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001860:	2302      	movs	r3, #2
 8001862:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001864:	2300      	movs	r3, #0
 8001866:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800186a:	f107 0318 	add.w	r3, r7, #24
 800186e:	4618      	mov	r0, r3
 8001870:	f006 fdd6 	bl	8008420 <HAL_RCCEx_PeriphCLKConfig>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800187a:	f7ff fac7 	bl	8000e0c <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800187e:	4b8d      	ldr	r3, [pc, #564]	; (8001ab4 <HAL_UART_MspInit+0x284>)
 8001880:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001884:	4a8b      	ldr	r2, [pc, #556]	; (8001ab4 <HAL_UART_MspInit+0x284>)
 8001886:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800188a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800188e:	4b89      	ldr	r3, [pc, #548]	; (8001ab4 <HAL_UART_MspInit+0x284>)
 8001890:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001894:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001898:	617b      	str	r3, [r7, #20]
 800189a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800189c:	4b85      	ldr	r3, [pc, #532]	; (8001ab4 <HAL_UART_MspInit+0x284>)
 800189e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018a2:	4a84      	ldr	r2, [pc, #528]	; (8001ab4 <HAL_UART_MspInit+0x284>)
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018ac:	4b81      	ldr	r3, [pc, #516]	; (8001ab4 <HAL_UART_MspInit+0x284>)
 80018ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	613b      	str	r3, [r7, #16]
 80018b8:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80018ba:	2303      	movs	r3, #3
 80018bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c0:	2302      	movs	r3, #2
 80018c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018cc:	2300      	movs	r3, #0
 80018ce:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80018d2:	2308      	movs	r3, #8
 80018d4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80018dc:	4619      	mov	r1, r3
 80018de:	4876      	ldr	r0, [pc, #472]	; (8001ab8 <HAL_UART_MspInit+0x288>)
 80018e0:	f003 f9d8 	bl	8004c94 <HAL_GPIO_Init>

    /*UART4 RX Init
     *
     */

    hdma_uart4_rx.Instance = DMA2_Stream7;
 80018e4:	4b75      	ldr	r3, [pc, #468]	; (8001abc <HAL_UART_MspInit+0x28c>)
 80018e6:	4a76      	ldr	r2, [pc, #472]	; (8001ac0 <HAL_UART_MspInit+0x290>)
 80018e8:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 80018ea:	4b74      	ldr	r3, [pc, #464]	; (8001abc <HAL_UART_MspInit+0x28c>)
 80018ec:	223f      	movs	r2, #63	; 0x3f
 80018ee:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018f0:	4b72      	ldr	r3, [pc, #456]	; (8001abc <HAL_UART_MspInit+0x28c>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018f6:	4b71      	ldr	r3, [pc, #452]	; (8001abc <HAL_UART_MspInit+0x28c>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018fc:	4b6f      	ldr	r3, [pc, #444]	; (8001abc <HAL_UART_MspInit+0x28c>)
 80018fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001902:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001904:	4b6d      	ldr	r3, [pc, #436]	; (8001abc <HAL_UART_MspInit+0x28c>)
 8001906:	2200      	movs	r2, #0
 8001908:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800190a:	4b6c      	ldr	r3, [pc, #432]	; (8001abc <HAL_UART_MspInit+0x28c>)
 800190c:	2200      	movs	r2, #0
 800190e:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8001910:	4b6a      	ldr	r3, [pc, #424]	; (8001abc <HAL_UART_MspInit+0x28c>)
 8001912:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001916:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001918:	4b68      	ldr	r3, [pc, #416]	; (8001abc <HAL_UART_MspInit+0x28c>)
 800191a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800191e:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001920:	4b66      	ldr	r3, [pc, #408]	; (8001abc <HAL_UART_MspInit+0x28c>)
 8001922:	2200      	movs	r2, #0
 8001924:	625a      	str	r2, [r3, #36]	; 0x24

    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001926:	4865      	ldr	r0, [pc, #404]	; (8001abc <HAL_UART_MspInit+0x28c>)
 8001928:	f000 fb5e 	bl	8001fe8 <HAL_DMA_Init>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <HAL_UART_MspInit+0x106>
    {
      Error_Handler();
 8001932:	f7ff fa6b 	bl	8000e0c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle, hdmarx, hdma_uart4_rx);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a60      	ldr	r2, [pc, #384]	; (8001abc <HAL_UART_MspInit+0x28c>)
 800193a:	67da      	str	r2, [r3, #124]	; 0x7c
 800193c:	4a5f      	ldr	r2, [pc, #380]	; (8001abc <HAL_UART_MspInit+0x28c>)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6393      	str	r3, [r2, #56]	; 0x38
    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001942:	2200      	movs	r2, #0
 8001944:	2100      	movs	r1, #0
 8001946:	2034      	movs	r0, #52	; 0x34
 8001948:	f000 fa8f 	bl	8001e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800194c:	2034      	movs	r0, #52	; 0x34
 800194e:	f000 faa6 	bl	8001e9e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
}
 8001952:	e0a9      	b.n	8001aa8 <HAL_UART_MspInit+0x278>
  else if(uartHandle->Instance==UART7)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a5a      	ldr	r2, [pc, #360]	; (8001ac4 <HAL_UART_MspInit+0x294>)
 800195a:	4293      	cmp	r3, r2
 800195c:	f040 80a4 	bne.w	8001aa8 <HAL_UART_MspInit+0x278>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8001960:	2302      	movs	r3, #2
 8001962:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001964:	2300      	movs	r3, #0
 8001966:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800196a:	f107 0318 	add.w	r3, r7, #24
 800196e:	4618      	mov	r0, r3
 8001970:	f006 fd56 	bl	8008420 <HAL_RCCEx_PeriphCLKConfig>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <HAL_UART_MspInit+0x14e>
      Error_Handler();
 800197a:	f7ff fa47 	bl	8000e0c <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 800197e:	4b4d      	ldr	r3, [pc, #308]	; (8001ab4 <HAL_UART_MspInit+0x284>)
 8001980:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001984:	4a4b      	ldr	r2, [pc, #300]	; (8001ab4 <HAL_UART_MspInit+0x284>)
 8001986:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800198a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800198e:	4b49      	ldr	r3, [pc, #292]	; (8001ab4 <HAL_UART_MspInit+0x284>)
 8001990:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001994:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001998:	60fb      	str	r3, [r7, #12]
 800199a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800199c:	4b45      	ldr	r3, [pc, #276]	; (8001ab4 <HAL_UART_MspInit+0x284>)
 800199e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019a2:	4a44      	ldr	r2, [pc, #272]	; (8001ab4 <HAL_UART_MspInit+0x284>)
 80019a4:	f043 0320 	orr.w	r3, r3, #32
 80019a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019ac:	4b41      	ldr	r3, [pc, #260]	; (8001ab4 <HAL_UART_MspInit+0x284>)
 80019ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019b2:	f003 0320 	and.w	r3, r3, #32
 80019b6:	60bb      	str	r3, [r7, #8]
 80019b8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019ba:	23c0      	movs	r3, #192	; 0xc0
 80019bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c0:	2302      	movs	r3, #2
 80019c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c6:	2300      	movs	r3, #0
 80019c8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019cc:	2300      	movs	r3, #0
 80019ce:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 80019d2:	2307      	movs	r3, #7
 80019d4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019d8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80019dc:	4619      	mov	r1, r3
 80019de:	483a      	ldr	r0, [pc, #232]	; (8001ac8 <HAL_UART_MspInit+0x298>)
 80019e0:	f003 f958 	bl	8004c94 <HAL_GPIO_Init>
    hdma_uart7_rx.Instance = DMA1_Stream5;
 80019e4:	4b39      	ldr	r3, [pc, #228]	; (8001acc <HAL_UART_MspInit+0x29c>)
 80019e6:	4a3a      	ldr	r2, [pc, #232]	; (8001ad0 <HAL_UART_MspInit+0x2a0>)
 80019e8:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Request = DMA_REQUEST_UART7_RX;
 80019ea:	4b38      	ldr	r3, [pc, #224]	; (8001acc <HAL_UART_MspInit+0x29c>)
 80019ec:	224f      	movs	r2, #79	; 0x4f
 80019ee:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019f0:	4b36      	ldr	r3, [pc, #216]	; (8001acc <HAL_UART_MspInit+0x29c>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019f6:	4b35      	ldr	r3, [pc, #212]	; (8001acc <HAL_UART_MspInit+0x29c>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019fc:	4b33      	ldr	r3, [pc, #204]	; (8001acc <HAL_UART_MspInit+0x29c>)
 80019fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a02:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a04:	4b31      	ldr	r3, [pc, #196]	; (8001acc <HAL_UART_MspInit+0x29c>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a0a:	4b30      	ldr	r3, [pc, #192]	; (8001acc <HAL_UART_MspInit+0x29c>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_NORMAL;
 8001a10:	4b2e      	ldr	r3, [pc, #184]	; (8001acc <HAL_UART_MspInit+0x29c>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a16:	4b2d      	ldr	r3, [pc, #180]	; (8001acc <HAL_UART_MspInit+0x29c>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a1c:	4b2b      	ldr	r3, [pc, #172]	; (8001acc <HAL_UART_MspInit+0x29c>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 8001a22:	482a      	ldr	r0, [pc, #168]	; (8001acc <HAL_UART_MspInit+0x29c>)
 8001a24:	f000 fae0 	bl	8001fe8 <HAL_DMA_Init>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <HAL_UART_MspInit+0x202>
      Error_Handler();
 8001a2e:	f7ff f9ed 	bl	8000e0c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart7_rx);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a25      	ldr	r2, [pc, #148]	; (8001acc <HAL_UART_MspInit+0x29c>)
 8001a36:	67da      	str	r2, [r3, #124]	; 0x7c
 8001a38:	4a24      	ldr	r2, [pc, #144]	; (8001acc <HAL_UART_MspInit+0x29c>)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart7_tx.Instance = DMA1_Stream6;
 8001a3e:	4b25      	ldr	r3, [pc, #148]	; (8001ad4 <HAL_UART_MspInit+0x2a4>)
 8001a40:	4a25      	ldr	r2, [pc, #148]	; (8001ad8 <HAL_UART_MspInit+0x2a8>)
 8001a42:	601a      	str	r2, [r3, #0]
    hdma_uart7_tx.Init.Request = DMA_REQUEST_UART7_TX;
 8001a44:	4b23      	ldr	r3, [pc, #140]	; (8001ad4 <HAL_UART_MspInit+0x2a4>)
 8001a46:	2250      	movs	r2, #80	; 0x50
 8001a48:	605a      	str	r2, [r3, #4]
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a4a:	4b22      	ldr	r3, [pc, #136]	; (8001ad4 <HAL_UART_MspInit+0x2a4>)
 8001a4c:	2240      	movs	r2, #64	; 0x40
 8001a4e:	609a      	str	r2, [r3, #8]
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a50:	4b20      	ldr	r3, [pc, #128]	; (8001ad4 <HAL_UART_MspInit+0x2a4>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	60da      	str	r2, [r3, #12]
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a56:	4b1f      	ldr	r3, [pc, #124]	; (8001ad4 <HAL_UART_MspInit+0x2a4>)
 8001a58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a5c:	611a      	str	r2, [r3, #16]
    hdma_uart7_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a5e:	4b1d      	ldr	r3, [pc, #116]	; (8001ad4 <HAL_UART_MspInit+0x2a4>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	615a      	str	r2, [r3, #20]
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a64:	4b1b      	ldr	r3, [pc, #108]	; (8001ad4 <HAL_UART_MspInit+0x2a4>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	619a      	str	r2, [r3, #24]
    hdma_uart7_tx.Init.Mode = DMA_NORMAL;
 8001a6a:	4b1a      	ldr	r3, [pc, #104]	; (8001ad4 <HAL_UART_MspInit+0x2a4>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	61da      	str	r2, [r3, #28]
    hdma_uart7_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a70:	4b18      	ldr	r3, [pc, #96]	; (8001ad4 <HAL_UART_MspInit+0x2a4>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	621a      	str	r2, [r3, #32]
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a76:	4b17      	ldr	r3, [pc, #92]	; (8001ad4 <HAL_UART_MspInit+0x2a4>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 8001a7c:	4815      	ldr	r0, [pc, #84]	; (8001ad4 <HAL_UART_MspInit+0x2a4>)
 8001a7e:	f000 fab3 	bl	8001fe8 <HAL_DMA_Init>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <HAL_UART_MspInit+0x25c>
      Error_Handler();
 8001a88:	f7ff f9c0 	bl	8000e0c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart7_tx);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	4a11      	ldr	r2, [pc, #68]	; (8001ad4 <HAL_UART_MspInit+0x2a4>)
 8001a90:	679a      	str	r2, [r3, #120]	; 0x78
 8001a92:	4a10      	ldr	r2, [pc, #64]	; (8001ad4 <HAL_UART_MspInit+0x2a4>)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8001a98:	2200      	movs	r2, #0
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	2052      	movs	r0, #82	; 0x52
 8001a9e:	f000 f9e4 	bl	8001e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8001aa2:	2052      	movs	r0, #82	; 0x52
 8001aa4:	f000 f9fb 	bl	8001e9e <HAL_NVIC_EnableIRQ>
}
 8001aa8:	bf00      	nop
 8001aaa:	37e8      	adds	r7, #232	; 0xe8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40004c00 	.word	0x40004c00
 8001ab4:	58024400 	.word	0x58024400
 8001ab8:	58020000 	.word	0x58020000
 8001abc:	240016dc 	.word	0x240016dc
 8001ac0:	400204b8 	.word	0x400204b8
 8001ac4:	40007800 	.word	0x40007800
 8001ac8:	58021400 	.word	0x58021400
 8001acc:	240015ec 	.word	0x240015ec
 8001ad0:	40020088 	.word	0x40020088
 8001ad4:	24001664 	.word	0x24001664
 8001ad8:	400200a0 	.word	0x400200a0

08001adc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001adc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b14 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ae0:	f7fe fdd8 	bl	8000694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ae4:	480c      	ldr	r0, [pc, #48]	; (8001b18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ae6:	490d      	ldr	r1, [pc, #52]	; (8001b1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ae8:	4a0d      	ldr	r2, [pc, #52]	; (8001b20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001aea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001aec:	e002      	b.n	8001af4 <LoopCopyDataInit>

08001aee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001af0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001af2:	3304      	adds	r3, #4

08001af4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001af4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001af6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001af8:	d3f9      	bcc.n	8001aee <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001afa:	4a0a      	ldr	r2, [pc, #40]	; (8001b24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001afc:	4c0a      	ldr	r4, [pc, #40]	; (8001b28 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001afe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b00:	e001      	b.n	8001b06 <LoopFillZerobss>

08001b02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b04:	3204      	adds	r2, #4

08001b06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b08:	d3fb      	bcc.n	8001b02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b0a:	f00f f801 	bl	8010b10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b0e:	f7ff f8a1 	bl	8000c54 <main>
  bx  lr
 8001b12:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b14:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001b18:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001b1c:	24000354 	.word	0x24000354
  ldr r2, =_sidata
 8001b20:	080138ec 	.word	0x080138ec
  ldr r2, =_sbss
 8001b24:	24000354 	.word	0x24000354
  ldr r4, =_ebss
 8001b28:	24003054 	.word	0x24003054

08001b2c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b2c:	e7fe      	b.n	8001b2c <ADC3_IRQHandler>
	...

08001b30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b36:	2003      	movs	r0, #3
 8001b38:	f000 f98c 	bl	8001e54 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001b3c:	f006 fa58 	bl	8007ff0 <HAL_RCC_GetSysClockFreq>
 8001b40:	4602      	mov	r2, r0
 8001b42:	4b15      	ldr	r3, [pc, #84]	; (8001b98 <HAL_Init+0x68>)
 8001b44:	699b      	ldr	r3, [r3, #24]
 8001b46:	0a1b      	lsrs	r3, r3, #8
 8001b48:	f003 030f 	and.w	r3, r3, #15
 8001b4c:	4913      	ldr	r1, [pc, #76]	; (8001b9c <HAL_Init+0x6c>)
 8001b4e:	5ccb      	ldrb	r3, [r1, r3]
 8001b50:	f003 031f 	and.w	r3, r3, #31
 8001b54:	fa22 f303 	lsr.w	r3, r2, r3
 8001b58:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001b5a:	4b0f      	ldr	r3, [pc, #60]	; (8001b98 <HAL_Init+0x68>)
 8001b5c:	699b      	ldr	r3, [r3, #24]
 8001b5e:	f003 030f 	and.w	r3, r3, #15
 8001b62:	4a0e      	ldr	r2, [pc, #56]	; (8001b9c <HAL_Init+0x6c>)
 8001b64:	5cd3      	ldrb	r3, [r2, r3]
 8001b66:	f003 031f 	and.w	r3, r3, #31
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b70:	4a0b      	ldr	r2, [pc, #44]	; (8001ba0 <HAL_Init+0x70>)
 8001b72:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001b74:	4a0b      	ldr	r2, [pc, #44]	; (8001ba4 <HAL_Init+0x74>)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b7a:	2000      	movs	r0, #0
 8001b7c:	f000 f814 	bl	8001ba8 <HAL_InitTick>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e002      	b.n	8001b90 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001b8a:	f7ff fa71 	bl	8001070 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b8e:	2300      	movs	r3, #0
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3708      	adds	r7, #8
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	58024400 	.word	0x58024400
 8001b9c:	080134b8 	.word	0x080134b8
 8001ba0:	24000004 	.word	0x24000004
 8001ba4:	24000000 	.word	0x24000000

08001ba8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001bb0:	4b15      	ldr	r3, [pc, #84]	; (8001c08 <HAL_InitTick+0x60>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d101      	bne.n	8001bbc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e021      	b.n	8001c00 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001bbc:	4b13      	ldr	r3, [pc, #76]	; (8001c0c <HAL_InitTick+0x64>)
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	4b11      	ldr	r3, [pc, #68]	; (8001c08 <HAL_InitTick+0x60>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bca:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f000 f971 	bl	8001eba <HAL_SYSTICK_Config>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e00e      	b.n	8001c00 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2b0f      	cmp	r3, #15
 8001be6:	d80a      	bhi.n	8001bfe <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001be8:	2200      	movs	r2, #0
 8001bea:	6879      	ldr	r1, [r7, #4]
 8001bec:	f04f 30ff 	mov.w	r0, #4294967295
 8001bf0:	f000 f93b 	bl	8001e6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bf4:	4a06      	ldr	r2, [pc, #24]	; (8001c10 <HAL_InitTick+0x68>)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	e000      	b.n	8001c00 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3708      	adds	r7, #8
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	2400000c 	.word	0x2400000c
 8001c0c:	24000000 	.word	0x24000000
 8001c10:	24000008 	.word	0x24000008

08001c14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c18:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <HAL_IncTick+0x20>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <HAL_IncTick+0x24>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4413      	add	r3, r2
 8001c24:	4a04      	ldr	r2, [pc, #16]	; (8001c38 <HAL_IncTick+0x24>)
 8001c26:	6013      	str	r3, [r2, #0]
}
 8001c28:	bf00      	nop
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	2400000c 	.word	0x2400000c
 8001c38:	24001754 	.word	0x24001754

08001c3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c40:	4b03      	ldr	r3, [pc, #12]	; (8001c50 <HAL_GetTick+0x14>)
 8001c42:	681b      	ldr	r3, [r3, #0]
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	24001754 	.word	0x24001754

08001c54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c5c:	f7ff ffee 	bl	8001c3c <HAL_GetTick>
 8001c60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c6c:	d005      	beq.n	8001c7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c6e:	4b0a      	ldr	r3, [pc, #40]	; (8001c98 <HAL_Delay+0x44>)
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	461a      	mov	r2, r3
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	4413      	add	r3, r2
 8001c78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c7a:	bf00      	nop
 8001c7c:	f7ff ffde 	bl	8001c3c <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	68fa      	ldr	r2, [r7, #12]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d8f7      	bhi.n	8001c7c <HAL_Delay+0x28>
  {
  }
}
 8001c8c:	bf00      	nop
 8001c8e:	bf00      	nop
 8001c90:	3710      	adds	r7, #16
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	2400000c 	.word	0x2400000c

08001c9c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001ca0:	4b03      	ldr	r3, [pc, #12]	; (8001cb0 <HAL_GetREVID+0x14>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	0c1b      	lsrs	r3, r3, #16
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	5c001000 	.word	0x5c001000

08001cb4 <__NVIC_SetPriorityGrouping>:
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b085      	sub	sp, #20
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f003 0307 	and.w	r3, r3, #7
 8001cc2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cc4:	4b0b      	ldr	r3, [pc, #44]	; (8001cf4 <__NVIC_SetPriorityGrouping+0x40>)
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cca:	68ba      	ldr	r2, [r7, #8]
 8001ccc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001cdc:	4b06      	ldr	r3, [pc, #24]	; (8001cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ce2:	4a04      	ldr	r2, [pc, #16]	; (8001cf4 <__NVIC_SetPriorityGrouping+0x40>)
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	60d3      	str	r3, [r2, #12]
}
 8001ce8:	bf00      	nop
 8001cea:	3714      	adds	r7, #20
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	e000ed00 	.word	0xe000ed00
 8001cf8:	05fa0000 	.word	0x05fa0000

08001cfc <__NVIC_GetPriorityGrouping>:
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d00:	4b04      	ldr	r3, [pc, #16]	; (8001d14 <__NVIC_GetPriorityGrouping+0x18>)
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	0a1b      	lsrs	r3, r3, #8
 8001d06:	f003 0307 	and.w	r3, r3, #7
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr
 8001d14:	e000ed00 	.word	0xe000ed00

08001d18 <__NVIC_EnableIRQ>:
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	4603      	mov	r3, r0
 8001d20:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	db0b      	blt.n	8001d42 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d2a:	88fb      	ldrh	r3, [r7, #6]
 8001d2c:	f003 021f 	and.w	r2, r3, #31
 8001d30:	4907      	ldr	r1, [pc, #28]	; (8001d50 <__NVIC_EnableIRQ+0x38>)
 8001d32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d36:	095b      	lsrs	r3, r3, #5
 8001d38:	2001      	movs	r0, #1
 8001d3a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001d42:	bf00      	nop
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	e000e100 	.word	0xe000e100

08001d54 <__NVIC_SetPriority>:
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	6039      	str	r1, [r7, #0]
 8001d5e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	db0a      	blt.n	8001d7e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	b2da      	uxtb	r2, r3
 8001d6c:	490c      	ldr	r1, [pc, #48]	; (8001da0 <__NVIC_SetPriority+0x4c>)
 8001d6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d72:	0112      	lsls	r2, r2, #4
 8001d74:	b2d2      	uxtb	r2, r2
 8001d76:	440b      	add	r3, r1
 8001d78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001d7c:	e00a      	b.n	8001d94 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	b2da      	uxtb	r2, r3
 8001d82:	4908      	ldr	r1, [pc, #32]	; (8001da4 <__NVIC_SetPriority+0x50>)
 8001d84:	88fb      	ldrh	r3, [r7, #6]
 8001d86:	f003 030f 	and.w	r3, r3, #15
 8001d8a:	3b04      	subs	r3, #4
 8001d8c:	0112      	lsls	r2, r2, #4
 8001d8e:	b2d2      	uxtb	r2, r2
 8001d90:	440b      	add	r3, r1
 8001d92:	761a      	strb	r2, [r3, #24]
}
 8001d94:	bf00      	nop
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr
 8001da0:	e000e100 	.word	0xe000e100
 8001da4:	e000ed00 	.word	0xe000ed00

08001da8 <NVIC_EncodePriority>:
{
 8001da8:	b480      	push	{r7}
 8001daa:	b089      	sub	sp, #36	; 0x24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f003 0307 	and.w	r3, r3, #7
 8001dba:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	f1c3 0307 	rsb	r3, r3, #7
 8001dc2:	2b04      	cmp	r3, #4
 8001dc4:	bf28      	it	cs
 8001dc6:	2304      	movcs	r3, #4
 8001dc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	3304      	adds	r3, #4
 8001dce:	2b06      	cmp	r3, #6
 8001dd0:	d902      	bls.n	8001dd8 <NVIC_EncodePriority+0x30>
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	3b03      	subs	r3, #3
 8001dd6:	e000      	b.n	8001dda <NVIC_EncodePriority+0x32>
 8001dd8:	2300      	movs	r3, #0
 8001dda:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	43da      	mvns	r2, r3
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	401a      	ands	r2, r3
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001df0:	f04f 31ff 	mov.w	r1, #4294967295
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dfa:	43d9      	mvns	r1, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e00:	4313      	orrs	r3, r2
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3724      	adds	r7, #36	; 0x24
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
	...

08001e10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e20:	d301      	bcc.n	8001e26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e22:	2301      	movs	r3, #1
 8001e24:	e00f      	b.n	8001e46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e26:	4a0a      	ldr	r2, [pc, #40]	; (8001e50 <SysTick_Config+0x40>)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e2e:	210f      	movs	r1, #15
 8001e30:	f04f 30ff 	mov.w	r0, #4294967295
 8001e34:	f7ff ff8e 	bl	8001d54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e38:	4b05      	ldr	r3, [pc, #20]	; (8001e50 <SysTick_Config+0x40>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e3e:	4b04      	ldr	r3, [pc, #16]	; (8001e50 <SysTick_Config+0x40>)
 8001e40:	2207      	movs	r2, #7
 8001e42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	e000e010 	.word	0xe000e010

08001e54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f7ff ff29 	bl	8001cb4 <__NVIC_SetPriorityGrouping>
}
 8001e62:	bf00      	nop
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b086      	sub	sp, #24
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	4603      	mov	r3, r0
 8001e72:	60b9      	str	r1, [r7, #8]
 8001e74:	607a      	str	r2, [r7, #4]
 8001e76:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e78:	f7ff ff40 	bl	8001cfc <__NVIC_GetPriorityGrouping>
 8001e7c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	68b9      	ldr	r1, [r7, #8]
 8001e82:	6978      	ldr	r0, [r7, #20]
 8001e84:	f7ff ff90 	bl	8001da8 <NVIC_EncodePriority>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e8e:	4611      	mov	r1, r2
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff ff5f 	bl	8001d54 <__NVIC_SetPriority>
}
 8001e96:	bf00      	nop
 8001e98:	3718      	adds	r7, #24
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b082      	sub	sp, #8
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ea8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff ff33 	bl	8001d18 <__NVIC_EnableIRQ>
}
 8001eb2:	bf00      	nop
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b082      	sub	sp, #8
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f7ff ffa4 	bl	8001e10 <SysTick_Config>
 8001ec8:	4603      	mov	r3, r0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
	...

08001ed4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001ed8:	f3bf 8f5f 	dmb	sy
}
 8001edc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001ede:	4b07      	ldr	r3, [pc, #28]	; (8001efc <HAL_MPU_Disable+0x28>)
 8001ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee2:	4a06      	ldr	r2, [pc, #24]	; (8001efc <HAL_MPU_Disable+0x28>)
 8001ee4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ee8:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001eea:	4b05      	ldr	r3, [pc, #20]	; (8001f00 <HAL_MPU_Disable+0x2c>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	605a      	str	r2, [r3, #4]
}
 8001ef0:	bf00      	nop
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	e000ed00 	.word	0xe000ed00
 8001f00:	e000ed90 	.word	0xe000ed90

08001f04 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001f0c:	4a0b      	ldr	r2, [pc, #44]	; (8001f3c <HAL_MPU_Enable+0x38>)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f043 0301 	orr.w	r3, r3, #1
 8001f14:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001f16:	4b0a      	ldr	r3, [pc, #40]	; (8001f40 <HAL_MPU_Enable+0x3c>)
 8001f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1a:	4a09      	ldr	r2, [pc, #36]	; (8001f40 <HAL_MPU_Enable+0x3c>)
 8001f1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f20:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001f22:	f3bf 8f4f 	dsb	sy
}
 8001f26:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001f28:	f3bf 8f6f 	isb	sy
}
 8001f2c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001f2e:	bf00      	nop
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	e000ed90 	.word	0xe000ed90
 8001f40:	e000ed00 	.word	0xe000ed00

08001f44 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	785a      	ldrb	r2, [r3, #1]
 8001f50:	4b1d      	ldr	r3, [pc, #116]	; (8001fc8 <HAL_MPU_ConfigRegion+0x84>)
 8001f52:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d029      	beq.n	8001fb0 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001f5c:	4a1a      	ldr	r2, [pc, #104]	; (8001fc8 <HAL_MPU_ConfigRegion+0x84>)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	7b1b      	ldrb	r3, [r3, #12]
 8001f68:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	7adb      	ldrb	r3, [r3, #11]
 8001f6e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001f70:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	7a9b      	ldrb	r3, [r3, #10]
 8001f76:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001f78:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	7b5b      	ldrb	r3, [r3, #13]
 8001f7e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001f80:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	7b9b      	ldrb	r3, [r3, #14]
 8001f86:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001f88:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	7bdb      	ldrb	r3, [r3, #15]
 8001f8e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001f90:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	7a5b      	ldrb	r3, [r3, #9]
 8001f96:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001f98:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	7a1b      	ldrb	r3, [r3, #8]
 8001f9e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001fa0:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	7812      	ldrb	r2, [r2, #0]
 8001fa6:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001fa8:	4a07      	ldr	r2, [pc, #28]	; (8001fc8 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001faa:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001fac:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001fae:	e005      	b.n	8001fbc <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001fb0:	4b05      	ldr	r3, [pc, #20]	; (8001fc8 <HAL_MPU_ConfigRegion+0x84>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001fb6:	4b04      	ldr	r3, [pc, #16]	; (8001fc8 <HAL_MPU_ConfigRegion+0x84>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	611a      	str	r2, [r3, #16]
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr
 8001fc8:	e000ed90 	.word	0xe000ed90

08001fcc <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001fd0:	f000 f802 	bl	8001fd8 <HAL_SYSTICK_Callback>
}
 8001fd4:	bf00      	nop
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001fdc:	bf00      	nop
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
	...

08001fe8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001ff0:	f7ff fe24 	bl	8001c3c <HAL_GetTick>
 8001ff4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d101      	bne.n	8002000 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e316      	b.n	800262e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a66      	ldr	r2, [pc, #408]	; (80021a0 <HAL_DMA_Init+0x1b8>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d04a      	beq.n	80020a0 <HAL_DMA_Init+0xb8>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a65      	ldr	r2, [pc, #404]	; (80021a4 <HAL_DMA_Init+0x1bc>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d045      	beq.n	80020a0 <HAL_DMA_Init+0xb8>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a63      	ldr	r2, [pc, #396]	; (80021a8 <HAL_DMA_Init+0x1c0>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d040      	beq.n	80020a0 <HAL_DMA_Init+0xb8>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a62      	ldr	r2, [pc, #392]	; (80021ac <HAL_DMA_Init+0x1c4>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d03b      	beq.n	80020a0 <HAL_DMA_Init+0xb8>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a60      	ldr	r2, [pc, #384]	; (80021b0 <HAL_DMA_Init+0x1c8>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d036      	beq.n	80020a0 <HAL_DMA_Init+0xb8>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a5f      	ldr	r2, [pc, #380]	; (80021b4 <HAL_DMA_Init+0x1cc>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d031      	beq.n	80020a0 <HAL_DMA_Init+0xb8>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a5d      	ldr	r2, [pc, #372]	; (80021b8 <HAL_DMA_Init+0x1d0>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d02c      	beq.n	80020a0 <HAL_DMA_Init+0xb8>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a5c      	ldr	r2, [pc, #368]	; (80021bc <HAL_DMA_Init+0x1d4>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d027      	beq.n	80020a0 <HAL_DMA_Init+0xb8>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a5a      	ldr	r2, [pc, #360]	; (80021c0 <HAL_DMA_Init+0x1d8>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d022      	beq.n	80020a0 <HAL_DMA_Init+0xb8>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a59      	ldr	r2, [pc, #356]	; (80021c4 <HAL_DMA_Init+0x1dc>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d01d      	beq.n	80020a0 <HAL_DMA_Init+0xb8>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a57      	ldr	r2, [pc, #348]	; (80021c8 <HAL_DMA_Init+0x1e0>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d018      	beq.n	80020a0 <HAL_DMA_Init+0xb8>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a56      	ldr	r2, [pc, #344]	; (80021cc <HAL_DMA_Init+0x1e4>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d013      	beq.n	80020a0 <HAL_DMA_Init+0xb8>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a54      	ldr	r2, [pc, #336]	; (80021d0 <HAL_DMA_Init+0x1e8>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d00e      	beq.n	80020a0 <HAL_DMA_Init+0xb8>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a53      	ldr	r2, [pc, #332]	; (80021d4 <HAL_DMA_Init+0x1ec>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d009      	beq.n	80020a0 <HAL_DMA_Init+0xb8>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a51      	ldr	r2, [pc, #324]	; (80021d8 <HAL_DMA_Init+0x1f0>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d004      	beq.n	80020a0 <HAL_DMA_Init+0xb8>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a50      	ldr	r2, [pc, #320]	; (80021dc <HAL_DMA_Init+0x1f4>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d101      	bne.n	80020a4 <HAL_DMA_Init+0xbc>
 80020a0:	2301      	movs	r3, #1
 80020a2:	e000      	b.n	80020a6 <HAL_DMA_Init+0xbe>
 80020a4:	2300      	movs	r3, #0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	f000 813b 	beq.w	8002322 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2202      	movs	r2, #2
 80020b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a37      	ldr	r2, [pc, #220]	; (80021a0 <HAL_DMA_Init+0x1b8>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d04a      	beq.n	800215c <HAL_DMA_Init+0x174>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a36      	ldr	r2, [pc, #216]	; (80021a4 <HAL_DMA_Init+0x1bc>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d045      	beq.n	800215c <HAL_DMA_Init+0x174>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a34      	ldr	r2, [pc, #208]	; (80021a8 <HAL_DMA_Init+0x1c0>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d040      	beq.n	800215c <HAL_DMA_Init+0x174>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a33      	ldr	r2, [pc, #204]	; (80021ac <HAL_DMA_Init+0x1c4>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d03b      	beq.n	800215c <HAL_DMA_Init+0x174>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a31      	ldr	r2, [pc, #196]	; (80021b0 <HAL_DMA_Init+0x1c8>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d036      	beq.n	800215c <HAL_DMA_Init+0x174>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a30      	ldr	r2, [pc, #192]	; (80021b4 <HAL_DMA_Init+0x1cc>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d031      	beq.n	800215c <HAL_DMA_Init+0x174>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a2e      	ldr	r2, [pc, #184]	; (80021b8 <HAL_DMA_Init+0x1d0>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d02c      	beq.n	800215c <HAL_DMA_Init+0x174>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a2d      	ldr	r2, [pc, #180]	; (80021bc <HAL_DMA_Init+0x1d4>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d027      	beq.n	800215c <HAL_DMA_Init+0x174>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a2b      	ldr	r2, [pc, #172]	; (80021c0 <HAL_DMA_Init+0x1d8>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d022      	beq.n	800215c <HAL_DMA_Init+0x174>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a2a      	ldr	r2, [pc, #168]	; (80021c4 <HAL_DMA_Init+0x1dc>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d01d      	beq.n	800215c <HAL_DMA_Init+0x174>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a28      	ldr	r2, [pc, #160]	; (80021c8 <HAL_DMA_Init+0x1e0>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d018      	beq.n	800215c <HAL_DMA_Init+0x174>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a27      	ldr	r2, [pc, #156]	; (80021cc <HAL_DMA_Init+0x1e4>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d013      	beq.n	800215c <HAL_DMA_Init+0x174>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a25      	ldr	r2, [pc, #148]	; (80021d0 <HAL_DMA_Init+0x1e8>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d00e      	beq.n	800215c <HAL_DMA_Init+0x174>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a24      	ldr	r2, [pc, #144]	; (80021d4 <HAL_DMA_Init+0x1ec>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d009      	beq.n	800215c <HAL_DMA_Init+0x174>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a22      	ldr	r2, [pc, #136]	; (80021d8 <HAL_DMA_Init+0x1f0>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d004      	beq.n	800215c <HAL_DMA_Init+0x174>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a21      	ldr	r2, [pc, #132]	; (80021dc <HAL_DMA_Init+0x1f4>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d108      	bne.n	800216e <HAL_DMA_Init+0x186>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f022 0201 	bic.w	r2, r2, #1
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	e007      	b.n	800217e <HAL_DMA_Init+0x196>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f022 0201 	bic.w	r2, r2, #1
 800217c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800217e:	e02f      	b.n	80021e0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002180:	f7ff fd5c 	bl	8001c3c <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	2b05      	cmp	r3, #5
 800218c:	d928      	bls.n	80021e0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2220      	movs	r2, #32
 8002192:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2203      	movs	r2, #3
 8002198:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e246      	b.n	800262e <HAL_DMA_Init+0x646>
 80021a0:	40020010 	.word	0x40020010
 80021a4:	40020028 	.word	0x40020028
 80021a8:	40020040 	.word	0x40020040
 80021ac:	40020058 	.word	0x40020058
 80021b0:	40020070 	.word	0x40020070
 80021b4:	40020088 	.word	0x40020088
 80021b8:	400200a0 	.word	0x400200a0
 80021bc:	400200b8 	.word	0x400200b8
 80021c0:	40020410 	.word	0x40020410
 80021c4:	40020428 	.word	0x40020428
 80021c8:	40020440 	.word	0x40020440
 80021cc:	40020458 	.word	0x40020458
 80021d0:	40020470 	.word	0x40020470
 80021d4:	40020488 	.word	0x40020488
 80021d8:	400204a0 	.word	0x400204a0
 80021dc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1c8      	bne.n	8002180 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80021f6:	697a      	ldr	r2, [r7, #20]
 80021f8:	4b83      	ldr	r3, [pc, #524]	; (8002408 <HAL_DMA_Init+0x420>)
 80021fa:	4013      	ands	r3, r2
 80021fc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002206:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	691b      	ldr	r3, [r3, #16]
 800220c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002212:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800221e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a1b      	ldr	r3, [r3, #32]
 8002224:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002226:	697a      	ldr	r2, [r7, #20]
 8002228:	4313      	orrs	r3, r2
 800222a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002230:	2b04      	cmp	r3, #4
 8002232:	d107      	bne.n	8002244 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223c:	4313      	orrs	r3, r2
 800223e:	697a      	ldr	r2, [r7, #20]
 8002240:	4313      	orrs	r3, r2
 8002242:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002244:	4b71      	ldr	r3, [pc, #452]	; (800240c <HAL_DMA_Init+0x424>)
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	4b71      	ldr	r3, [pc, #452]	; (8002410 <HAL_DMA_Init+0x428>)
 800224a:	4013      	ands	r3, r2
 800224c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002250:	d328      	bcc.n	80022a4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	2b28      	cmp	r3, #40	; 0x28
 8002258:	d903      	bls.n	8002262 <HAL_DMA_Init+0x27a>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	2b2e      	cmp	r3, #46	; 0x2e
 8002260:	d917      	bls.n	8002292 <HAL_DMA_Init+0x2aa>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	2b3e      	cmp	r3, #62	; 0x3e
 8002268:	d903      	bls.n	8002272 <HAL_DMA_Init+0x28a>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	2b42      	cmp	r3, #66	; 0x42
 8002270:	d90f      	bls.n	8002292 <HAL_DMA_Init+0x2aa>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	2b46      	cmp	r3, #70	; 0x46
 8002278:	d903      	bls.n	8002282 <HAL_DMA_Init+0x29a>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	2b48      	cmp	r3, #72	; 0x48
 8002280:	d907      	bls.n	8002292 <HAL_DMA_Init+0x2aa>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	2b4e      	cmp	r3, #78	; 0x4e
 8002288:	d905      	bls.n	8002296 <HAL_DMA_Init+0x2ae>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	2b52      	cmp	r3, #82	; 0x52
 8002290:	d801      	bhi.n	8002296 <HAL_DMA_Init+0x2ae>
 8002292:	2301      	movs	r3, #1
 8002294:	e000      	b.n	8002298 <HAL_DMA_Init+0x2b0>
 8002296:	2300      	movs	r3, #0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d003      	beq.n	80022a4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022a2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	697a      	ldr	r2, [r7, #20]
 80022aa:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	f023 0307 	bic.w	r3, r3, #7
 80022ba:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c0:	697a      	ldr	r2, [r7, #20]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ca:	2b04      	cmp	r3, #4
 80022cc:	d117      	bne.n	80022fe <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d2:	697a      	ldr	r2, [r7, #20]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d00e      	beq.n	80022fe <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f002 fb4d 	bl	8004980 <DMA_CheckFifoParam>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d008      	beq.n	80022fe <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2240      	movs	r2, #64	; 0x40
 80022f0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2201      	movs	r2, #1
 80022f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e197      	b.n	800262e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	697a      	ldr	r2, [r7, #20]
 8002304:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f002 fa88 	bl	800481c <DMA_CalcBaseAndBitshift>
 800230c:	4603      	mov	r3, r0
 800230e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002314:	f003 031f 	and.w	r3, r3, #31
 8002318:	223f      	movs	r2, #63	; 0x3f
 800231a:	409a      	lsls	r2, r3
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	609a      	str	r2, [r3, #8]
 8002320:	e0cd      	b.n	80024be <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a3b      	ldr	r2, [pc, #236]	; (8002414 <HAL_DMA_Init+0x42c>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d022      	beq.n	8002372 <HAL_DMA_Init+0x38a>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a39      	ldr	r2, [pc, #228]	; (8002418 <HAL_DMA_Init+0x430>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d01d      	beq.n	8002372 <HAL_DMA_Init+0x38a>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a38      	ldr	r2, [pc, #224]	; (800241c <HAL_DMA_Init+0x434>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d018      	beq.n	8002372 <HAL_DMA_Init+0x38a>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a36      	ldr	r2, [pc, #216]	; (8002420 <HAL_DMA_Init+0x438>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d013      	beq.n	8002372 <HAL_DMA_Init+0x38a>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a35      	ldr	r2, [pc, #212]	; (8002424 <HAL_DMA_Init+0x43c>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d00e      	beq.n	8002372 <HAL_DMA_Init+0x38a>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a33      	ldr	r2, [pc, #204]	; (8002428 <HAL_DMA_Init+0x440>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d009      	beq.n	8002372 <HAL_DMA_Init+0x38a>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a32      	ldr	r2, [pc, #200]	; (800242c <HAL_DMA_Init+0x444>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d004      	beq.n	8002372 <HAL_DMA_Init+0x38a>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a30      	ldr	r2, [pc, #192]	; (8002430 <HAL_DMA_Init+0x448>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d101      	bne.n	8002376 <HAL_DMA_Init+0x38e>
 8002372:	2301      	movs	r3, #1
 8002374:	e000      	b.n	8002378 <HAL_DMA_Init+0x390>
 8002376:	2300      	movs	r3, #0
 8002378:	2b00      	cmp	r3, #0
 800237a:	f000 8097 	beq.w	80024ac <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a24      	ldr	r2, [pc, #144]	; (8002414 <HAL_DMA_Init+0x42c>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d021      	beq.n	80023cc <HAL_DMA_Init+0x3e4>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a22      	ldr	r2, [pc, #136]	; (8002418 <HAL_DMA_Init+0x430>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d01c      	beq.n	80023cc <HAL_DMA_Init+0x3e4>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a21      	ldr	r2, [pc, #132]	; (800241c <HAL_DMA_Init+0x434>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d017      	beq.n	80023cc <HAL_DMA_Init+0x3e4>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a1f      	ldr	r2, [pc, #124]	; (8002420 <HAL_DMA_Init+0x438>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d012      	beq.n	80023cc <HAL_DMA_Init+0x3e4>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a1e      	ldr	r2, [pc, #120]	; (8002424 <HAL_DMA_Init+0x43c>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d00d      	beq.n	80023cc <HAL_DMA_Init+0x3e4>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a1c      	ldr	r2, [pc, #112]	; (8002428 <HAL_DMA_Init+0x440>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d008      	beq.n	80023cc <HAL_DMA_Init+0x3e4>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a1b      	ldr	r2, [pc, #108]	; (800242c <HAL_DMA_Init+0x444>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d003      	beq.n	80023cc <HAL_DMA_Init+0x3e4>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a19      	ldr	r2, [pc, #100]	; (8002430 <HAL_DMA_Init+0x448>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2202      	movs	r2, #2
 80023da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80023e6:	697a      	ldr	r2, [r7, #20]
 80023e8:	4b12      	ldr	r3, [pc, #72]	; (8002434 <HAL_DMA_Init+0x44c>)
 80023ea:	4013      	ands	r3, r2
 80023ec:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	2b40      	cmp	r3, #64	; 0x40
 80023f4:	d020      	beq.n	8002438 <HAL_DMA_Init+0x450>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	2b80      	cmp	r3, #128	; 0x80
 80023fc:	d102      	bne.n	8002404 <HAL_DMA_Init+0x41c>
 80023fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002402:	e01a      	b.n	800243a <HAL_DMA_Init+0x452>
 8002404:	2300      	movs	r3, #0
 8002406:	e018      	b.n	800243a <HAL_DMA_Init+0x452>
 8002408:	fe10803f 	.word	0xfe10803f
 800240c:	5c001000 	.word	0x5c001000
 8002410:	ffff0000 	.word	0xffff0000
 8002414:	58025408 	.word	0x58025408
 8002418:	5802541c 	.word	0x5802541c
 800241c:	58025430 	.word	0x58025430
 8002420:	58025444 	.word	0x58025444
 8002424:	58025458 	.word	0x58025458
 8002428:	5802546c 	.word	0x5802546c
 800242c:	58025480 	.word	0x58025480
 8002430:	58025494 	.word	0x58025494
 8002434:	fffe000f 	.word	0xfffe000f
 8002438:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	68d2      	ldr	r2, [r2, #12]
 800243e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002440:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002448:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	695b      	ldr	r3, [r3, #20]
 800244e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002450:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	699b      	ldr	r3, [r3, #24]
 8002456:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002458:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	69db      	ldr	r3, [r3, #28]
 800245e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002460:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a1b      	ldr	r3, [r3, #32]
 8002466:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002468:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800246a:	697a      	ldr	r2, [r7, #20]
 800246c:	4313      	orrs	r3, r2
 800246e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	697a      	ldr	r2, [r7, #20]
 8002476:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	461a      	mov	r2, r3
 800247e:	4b6e      	ldr	r3, [pc, #440]	; (8002638 <HAL_DMA_Init+0x650>)
 8002480:	4413      	add	r3, r2
 8002482:	4a6e      	ldr	r2, [pc, #440]	; (800263c <HAL_DMA_Init+0x654>)
 8002484:	fba2 2303 	umull	r2, r3, r2, r3
 8002488:	091b      	lsrs	r3, r3, #4
 800248a:	009a      	lsls	r2, r3, #2
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f002 f9c3 	bl	800481c <DMA_CalcBaseAndBitshift>
 8002496:	4603      	mov	r3, r0
 8002498:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800249e:	f003 031f 	and.w	r3, r3, #31
 80024a2:	2201      	movs	r2, #1
 80024a4:	409a      	lsls	r2, r3
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	605a      	str	r2, [r3, #4]
 80024aa:	e008      	b.n	80024be <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2240      	movs	r2, #64	; 0x40
 80024b0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2203      	movs	r2, #3
 80024b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e0b7      	b.n	800262e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a5f      	ldr	r2, [pc, #380]	; (8002640 <HAL_DMA_Init+0x658>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d072      	beq.n	80025ae <HAL_DMA_Init+0x5c6>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a5d      	ldr	r2, [pc, #372]	; (8002644 <HAL_DMA_Init+0x65c>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d06d      	beq.n	80025ae <HAL_DMA_Init+0x5c6>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a5c      	ldr	r2, [pc, #368]	; (8002648 <HAL_DMA_Init+0x660>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d068      	beq.n	80025ae <HAL_DMA_Init+0x5c6>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a5a      	ldr	r2, [pc, #360]	; (800264c <HAL_DMA_Init+0x664>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d063      	beq.n	80025ae <HAL_DMA_Init+0x5c6>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a59      	ldr	r2, [pc, #356]	; (8002650 <HAL_DMA_Init+0x668>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d05e      	beq.n	80025ae <HAL_DMA_Init+0x5c6>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a57      	ldr	r2, [pc, #348]	; (8002654 <HAL_DMA_Init+0x66c>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d059      	beq.n	80025ae <HAL_DMA_Init+0x5c6>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a56      	ldr	r2, [pc, #344]	; (8002658 <HAL_DMA_Init+0x670>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d054      	beq.n	80025ae <HAL_DMA_Init+0x5c6>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a54      	ldr	r2, [pc, #336]	; (800265c <HAL_DMA_Init+0x674>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d04f      	beq.n	80025ae <HAL_DMA_Init+0x5c6>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a53      	ldr	r2, [pc, #332]	; (8002660 <HAL_DMA_Init+0x678>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d04a      	beq.n	80025ae <HAL_DMA_Init+0x5c6>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a51      	ldr	r2, [pc, #324]	; (8002664 <HAL_DMA_Init+0x67c>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d045      	beq.n	80025ae <HAL_DMA_Init+0x5c6>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a50      	ldr	r2, [pc, #320]	; (8002668 <HAL_DMA_Init+0x680>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d040      	beq.n	80025ae <HAL_DMA_Init+0x5c6>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a4e      	ldr	r2, [pc, #312]	; (800266c <HAL_DMA_Init+0x684>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d03b      	beq.n	80025ae <HAL_DMA_Init+0x5c6>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a4d      	ldr	r2, [pc, #308]	; (8002670 <HAL_DMA_Init+0x688>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d036      	beq.n	80025ae <HAL_DMA_Init+0x5c6>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a4b      	ldr	r2, [pc, #300]	; (8002674 <HAL_DMA_Init+0x68c>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d031      	beq.n	80025ae <HAL_DMA_Init+0x5c6>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a4a      	ldr	r2, [pc, #296]	; (8002678 <HAL_DMA_Init+0x690>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d02c      	beq.n	80025ae <HAL_DMA_Init+0x5c6>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a48      	ldr	r2, [pc, #288]	; (800267c <HAL_DMA_Init+0x694>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d027      	beq.n	80025ae <HAL_DMA_Init+0x5c6>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a47      	ldr	r2, [pc, #284]	; (8002680 <HAL_DMA_Init+0x698>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d022      	beq.n	80025ae <HAL_DMA_Init+0x5c6>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a45      	ldr	r2, [pc, #276]	; (8002684 <HAL_DMA_Init+0x69c>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d01d      	beq.n	80025ae <HAL_DMA_Init+0x5c6>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a44      	ldr	r2, [pc, #272]	; (8002688 <HAL_DMA_Init+0x6a0>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d018      	beq.n	80025ae <HAL_DMA_Init+0x5c6>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a42      	ldr	r2, [pc, #264]	; (800268c <HAL_DMA_Init+0x6a4>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d013      	beq.n	80025ae <HAL_DMA_Init+0x5c6>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a41      	ldr	r2, [pc, #260]	; (8002690 <HAL_DMA_Init+0x6a8>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d00e      	beq.n	80025ae <HAL_DMA_Init+0x5c6>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a3f      	ldr	r2, [pc, #252]	; (8002694 <HAL_DMA_Init+0x6ac>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d009      	beq.n	80025ae <HAL_DMA_Init+0x5c6>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a3e      	ldr	r2, [pc, #248]	; (8002698 <HAL_DMA_Init+0x6b0>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d004      	beq.n	80025ae <HAL_DMA_Init+0x5c6>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a3c      	ldr	r2, [pc, #240]	; (800269c <HAL_DMA_Init+0x6b4>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d101      	bne.n	80025b2 <HAL_DMA_Init+0x5ca>
 80025ae:	2301      	movs	r3, #1
 80025b0:	e000      	b.n	80025b4 <HAL_DMA_Init+0x5cc>
 80025b2:	2300      	movs	r3, #0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d032      	beq.n	800261e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f002 fa5d 	bl	8004a78 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	2b80      	cmp	r3, #128	; 0x80
 80025c4:	d102      	bne.n	80025cc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685a      	ldr	r2, [r3, #4]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025d4:	b2d2      	uxtb	r2, r2
 80025d6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80025e0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d010      	beq.n	800260c <HAL_DMA_Init+0x624>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	2b08      	cmp	r3, #8
 80025f0:	d80c      	bhi.n	800260c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f002 fada 	bl	8004bac <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002608:	605a      	str	r2, [r3, #4]
 800260a:	e008      	b.n	800261e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3718      	adds	r7, #24
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	a7fdabf8 	.word	0xa7fdabf8
 800263c:	cccccccd 	.word	0xcccccccd
 8002640:	40020010 	.word	0x40020010
 8002644:	40020028 	.word	0x40020028
 8002648:	40020040 	.word	0x40020040
 800264c:	40020058 	.word	0x40020058
 8002650:	40020070 	.word	0x40020070
 8002654:	40020088 	.word	0x40020088
 8002658:	400200a0 	.word	0x400200a0
 800265c:	400200b8 	.word	0x400200b8
 8002660:	40020410 	.word	0x40020410
 8002664:	40020428 	.word	0x40020428
 8002668:	40020440 	.word	0x40020440
 800266c:	40020458 	.word	0x40020458
 8002670:	40020470 	.word	0x40020470
 8002674:	40020488 	.word	0x40020488
 8002678:	400204a0 	.word	0x400204a0
 800267c:	400204b8 	.word	0x400204b8
 8002680:	58025408 	.word	0x58025408
 8002684:	5802541c 	.word	0x5802541c
 8002688:	58025430 	.word	0x58025430
 800268c:	58025444 	.word	0x58025444
 8002690:	58025458 	.word	0x58025458
 8002694:	5802546c 	.word	0x5802546c
 8002698:	58025480 	.word	0x58025480
 800269c:	58025494 	.word	0x58025494

080026a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b086      	sub	sp, #24
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	607a      	str	r2, [r7, #4]
 80026ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026ae:	2300      	movs	r3, #0
 80026b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d101      	bne.n	80026bc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e226      	b.n	8002b0a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d101      	bne.n	80026ca <HAL_DMA_Start_IT+0x2a>
 80026c6:	2302      	movs	r3, #2
 80026c8:	e21f      	b.n	8002b0a <HAL_DMA_Start_IT+0x46a>
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2201      	movs	r2, #1
 80026ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b01      	cmp	r3, #1
 80026dc:	f040 820a 	bne.w	8002af4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2202      	movs	r2, #2
 80026e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2200      	movs	r2, #0
 80026ec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a68      	ldr	r2, [pc, #416]	; (8002894 <HAL_DMA_Start_IT+0x1f4>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d04a      	beq.n	800278e <HAL_DMA_Start_IT+0xee>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a66      	ldr	r2, [pc, #408]	; (8002898 <HAL_DMA_Start_IT+0x1f8>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d045      	beq.n	800278e <HAL_DMA_Start_IT+0xee>
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a65      	ldr	r2, [pc, #404]	; (800289c <HAL_DMA_Start_IT+0x1fc>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d040      	beq.n	800278e <HAL_DMA_Start_IT+0xee>
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a63      	ldr	r2, [pc, #396]	; (80028a0 <HAL_DMA_Start_IT+0x200>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d03b      	beq.n	800278e <HAL_DMA_Start_IT+0xee>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a62      	ldr	r2, [pc, #392]	; (80028a4 <HAL_DMA_Start_IT+0x204>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d036      	beq.n	800278e <HAL_DMA_Start_IT+0xee>
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a60      	ldr	r2, [pc, #384]	; (80028a8 <HAL_DMA_Start_IT+0x208>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d031      	beq.n	800278e <HAL_DMA_Start_IT+0xee>
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a5f      	ldr	r2, [pc, #380]	; (80028ac <HAL_DMA_Start_IT+0x20c>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d02c      	beq.n	800278e <HAL_DMA_Start_IT+0xee>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a5d      	ldr	r2, [pc, #372]	; (80028b0 <HAL_DMA_Start_IT+0x210>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d027      	beq.n	800278e <HAL_DMA_Start_IT+0xee>
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a5c      	ldr	r2, [pc, #368]	; (80028b4 <HAL_DMA_Start_IT+0x214>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d022      	beq.n	800278e <HAL_DMA_Start_IT+0xee>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a5a      	ldr	r2, [pc, #360]	; (80028b8 <HAL_DMA_Start_IT+0x218>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d01d      	beq.n	800278e <HAL_DMA_Start_IT+0xee>
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a59      	ldr	r2, [pc, #356]	; (80028bc <HAL_DMA_Start_IT+0x21c>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d018      	beq.n	800278e <HAL_DMA_Start_IT+0xee>
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a57      	ldr	r2, [pc, #348]	; (80028c0 <HAL_DMA_Start_IT+0x220>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d013      	beq.n	800278e <HAL_DMA_Start_IT+0xee>
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a56      	ldr	r2, [pc, #344]	; (80028c4 <HAL_DMA_Start_IT+0x224>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d00e      	beq.n	800278e <HAL_DMA_Start_IT+0xee>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a54      	ldr	r2, [pc, #336]	; (80028c8 <HAL_DMA_Start_IT+0x228>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d009      	beq.n	800278e <HAL_DMA_Start_IT+0xee>
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a53      	ldr	r2, [pc, #332]	; (80028cc <HAL_DMA_Start_IT+0x22c>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d004      	beq.n	800278e <HAL_DMA_Start_IT+0xee>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a51      	ldr	r2, [pc, #324]	; (80028d0 <HAL_DMA_Start_IT+0x230>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d108      	bne.n	80027a0 <HAL_DMA_Start_IT+0x100>
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f022 0201 	bic.w	r2, r2, #1
 800279c:	601a      	str	r2, [r3, #0]
 800279e:	e007      	b.n	80027b0 <HAL_DMA_Start_IT+0x110>
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f022 0201 	bic.w	r2, r2, #1
 80027ae:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	68b9      	ldr	r1, [r7, #8]
 80027b6:	68f8      	ldr	r0, [r7, #12]
 80027b8:	f001 fe84 	bl	80044c4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a34      	ldr	r2, [pc, #208]	; (8002894 <HAL_DMA_Start_IT+0x1f4>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d04a      	beq.n	800285c <HAL_DMA_Start_IT+0x1bc>
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a33      	ldr	r2, [pc, #204]	; (8002898 <HAL_DMA_Start_IT+0x1f8>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d045      	beq.n	800285c <HAL_DMA_Start_IT+0x1bc>
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a31      	ldr	r2, [pc, #196]	; (800289c <HAL_DMA_Start_IT+0x1fc>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d040      	beq.n	800285c <HAL_DMA_Start_IT+0x1bc>
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a30      	ldr	r2, [pc, #192]	; (80028a0 <HAL_DMA_Start_IT+0x200>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d03b      	beq.n	800285c <HAL_DMA_Start_IT+0x1bc>
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a2e      	ldr	r2, [pc, #184]	; (80028a4 <HAL_DMA_Start_IT+0x204>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d036      	beq.n	800285c <HAL_DMA_Start_IT+0x1bc>
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a2d      	ldr	r2, [pc, #180]	; (80028a8 <HAL_DMA_Start_IT+0x208>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d031      	beq.n	800285c <HAL_DMA_Start_IT+0x1bc>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a2b      	ldr	r2, [pc, #172]	; (80028ac <HAL_DMA_Start_IT+0x20c>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d02c      	beq.n	800285c <HAL_DMA_Start_IT+0x1bc>
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a2a      	ldr	r2, [pc, #168]	; (80028b0 <HAL_DMA_Start_IT+0x210>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d027      	beq.n	800285c <HAL_DMA_Start_IT+0x1bc>
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a28      	ldr	r2, [pc, #160]	; (80028b4 <HAL_DMA_Start_IT+0x214>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d022      	beq.n	800285c <HAL_DMA_Start_IT+0x1bc>
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a27      	ldr	r2, [pc, #156]	; (80028b8 <HAL_DMA_Start_IT+0x218>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d01d      	beq.n	800285c <HAL_DMA_Start_IT+0x1bc>
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a25      	ldr	r2, [pc, #148]	; (80028bc <HAL_DMA_Start_IT+0x21c>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d018      	beq.n	800285c <HAL_DMA_Start_IT+0x1bc>
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a24      	ldr	r2, [pc, #144]	; (80028c0 <HAL_DMA_Start_IT+0x220>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d013      	beq.n	800285c <HAL_DMA_Start_IT+0x1bc>
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a22      	ldr	r2, [pc, #136]	; (80028c4 <HAL_DMA_Start_IT+0x224>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d00e      	beq.n	800285c <HAL_DMA_Start_IT+0x1bc>
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a21      	ldr	r2, [pc, #132]	; (80028c8 <HAL_DMA_Start_IT+0x228>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d009      	beq.n	800285c <HAL_DMA_Start_IT+0x1bc>
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a1f      	ldr	r2, [pc, #124]	; (80028cc <HAL_DMA_Start_IT+0x22c>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d004      	beq.n	800285c <HAL_DMA_Start_IT+0x1bc>
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a1e      	ldr	r2, [pc, #120]	; (80028d0 <HAL_DMA_Start_IT+0x230>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d101      	bne.n	8002860 <HAL_DMA_Start_IT+0x1c0>
 800285c:	2301      	movs	r3, #1
 800285e:	e000      	b.n	8002862 <HAL_DMA_Start_IT+0x1c2>
 8002860:	2300      	movs	r3, #0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d036      	beq.n	80028d4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f023 021e 	bic.w	r2, r3, #30
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f042 0216 	orr.w	r2, r2, #22
 8002878:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287e:	2b00      	cmp	r3, #0
 8002880:	d03e      	beq.n	8002900 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f042 0208 	orr.w	r2, r2, #8
 8002890:	601a      	str	r2, [r3, #0]
 8002892:	e035      	b.n	8002900 <HAL_DMA_Start_IT+0x260>
 8002894:	40020010 	.word	0x40020010
 8002898:	40020028 	.word	0x40020028
 800289c:	40020040 	.word	0x40020040
 80028a0:	40020058 	.word	0x40020058
 80028a4:	40020070 	.word	0x40020070
 80028a8:	40020088 	.word	0x40020088
 80028ac:	400200a0 	.word	0x400200a0
 80028b0:	400200b8 	.word	0x400200b8
 80028b4:	40020410 	.word	0x40020410
 80028b8:	40020428 	.word	0x40020428
 80028bc:	40020440 	.word	0x40020440
 80028c0:	40020458 	.word	0x40020458
 80028c4:	40020470 	.word	0x40020470
 80028c8:	40020488 	.word	0x40020488
 80028cc:	400204a0 	.word	0x400204a0
 80028d0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f023 020e 	bic.w	r2, r3, #14
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f042 020a 	orr.w	r2, r2, #10
 80028e6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d007      	beq.n	8002900 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f042 0204 	orr.w	r2, r2, #4
 80028fe:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a83      	ldr	r2, [pc, #524]	; (8002b14 <HAL_DMA_Start_IT+0x474>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d072      	beq.n	80029f0 <HAL_DMA_Start_IT+0x350>
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a82      	ldr	r2, [pc, #520]	; (8002b18 <HAL_DMA_Start_IT+0x478>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d06d      	beq.n	80029f0 <HAL_DMA_Start_IT+0x350>
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a80      	ldr	r2, [pc, #512]	; (8002b1c <HAL_DMA_Start_IT+0x47c>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d068      	beq.n	80029f0 <HAL_DMA_Start_IT+0x350>
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a7f      	ldr	r2, [pc, #508]	; (8002b20 <HAL_DMA_Start_IT+0x480>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d063      	beq.n	80029f0 <HAL_DMA_Start_IT+0x350>
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a7d      	ldr	r2, [pc, #500]	; (8002b24 <HAL_DMA_Start_IT+0x484>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d05e      	beq.n	80029f0 <HAL_DMA_Start_IT+0x350>
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a7c      	ldr	r2, [pc, #496]	; (8002b28 <HAL_DMA_Start_IT+0x488>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d059      	beq.n	80029f0 <HAL_DMA_Start_IT+0x350>
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a7a      	ldr	r2, [pc, #488]	; (8002b2c <HAL_DMA_Start_IT+0x48c>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d054      	beq.n	80029f0 <HAL_DMA_Start_IT+0x350>
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a79      	ldr	r2, [pc, #484]	; (8002b30 <HAL_DMA_Start_IT+0x490>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d04f      	beq.n	80029f0 <HAL_DMA_Start_IT+0x350>
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a77      	ldr	r2, [pc, #476]	; (8002b34 <HAL_DMA_Start_IT+0x494>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d04a      	beq.n	80029f0 <HAL_DMA_Start_IT+0x350>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a76      	ldr	r2, [pc, #472]	; (8002b38 <HAL_DMA_Start_IT+0x498>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d045      	beq.n	80029f0 <HAL_DMA_Start_IT+0x350>
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a74      	ldr	r2, [pc, #464]	; (8002b3c <HAL_DMA_Start_IT+0x49c>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d040      	beq.n	80029f0 <HAL_DMA_Start_IT+0x350>
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a73      	ldr	r2, [pc, #460]	; (8002b40 <HAL_DMA_Start_IT+0x4a0>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d03b      	beq.n	80029f0 <HAL_DMA_Start_IT+0x350>
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a71      	ldr	r2, [pc, #452]	; (8002b44 <HAL_DMA_Start_IT+0x4a4>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d036      	beq.n	80029f0 <HAL_DMA_Start_IT+0x350>
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a70      	ldr	r2, [pc, #448]	; (8002b48 <HAL_DMA_Start_IT+0x4a8>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d031      	beq.n	80029f0 <HAL_DMA_Start_IT+0x350>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a6e      	ldr	r2, [pc, #440]	; (8002b4c <HAL_DMA_Start_IT+0x4ac>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d02c      	beq.n	80029f0 <HAL_DMA_Start_IT+0x350>
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a6d      	ldr	r2, [pc, #436]	; (8002b50 <HAL_DMA_Start_IT+0x4b0>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d027      	beq.n	80029f0 <HAL_DMA_Start_IT+0x350>
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a6b      	ldr	r2, [pc, #428]	; (8002b54 <HAL_DMA_Start_IT+0x4b4>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d022      	beq.n	80029f0 <HAL_DMA_Start_IT+0x350>
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a6a      	ldr	r2, [pc, #424]	; (8002b58 <HAL_DMA_Start_IT+0x4b8>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d01d      	beq.n	80029f0 <HAL_DMA_Start_IT+0x350>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a68      	ldr	r2, [pc, #416]	; (8002b5c <HAL_DMA_Start_IT+0x4bc>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d018      	beq.n	80029f0 <HAL_DMA_Start_IT+0x350>
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a67      	ldr	r2, [pc, #412]	; (8002b60 <HAL_DMA_Start_IT+0x4c0>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d013      	beq.n	80029f0 <HAL_DMA_Start_IT+0x350>
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a65      	ldr	r2, [pc, #404]	; (8002b64 <HAL_DMA_Start_IT+0x4c4>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d00e      	beq.n	80029f0 <HAL_DMA_Start_IT+0x350>
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a64      	ldr	r2, [pc, #400]	; (8002b68 <HAL_DMA_Start_IT+0x4c8>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d009      	beq.n	80029f0 <HAL_DMA_Start_IT+0x350>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a62      	ldr	r2, [pc, #392]	; (8002b6c <HAL_DMA_Start_IT+0x4cc>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d004      	beq.n	80029f0 <HAL_DMA_Start_IT+0x350>
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a61      	ldr	r2, [pc, #388]	; (8002b70 <HAL_DMA_Start_IT+0x4d0>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d101      	bne.n	80029f4 <HAL_DMA_Start_IT+0x354>
 80029f0:	2301      	movs	r3, #1
 80029f2:	e000      	b.n	80029f6 <HAL_DMA_Start_IT+0x356>
 80029f4:	2300      	movs	r3, #0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d01a      	beq.n	8002a30 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d007      	beq.n	8002a18 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a16:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d007      	beq.n	8002a30 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a2e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a37      	ldr	r2, [pc, #220]	; (8002b14 <HAL_DMA_Start_IT+0x474>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d04a      	beq.n	8002ad0 <HAL_DMA_Start_IT+0x430>
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a36      	ldr	r2, [pc, #216]	; (8002b18 <HAL_DMA_Start_IT+0x478>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d045      	beq.n	8002ad0 <HAL_DMA_Start_IT+0x430>
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a34      	ldr	r2, [pc, #208]	; (8002b1c <HAL_DMA_Start_IT+0x47c>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d040      	beq.n	8002ad0 <HAL_DMA_Start_IT+0x430>
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a33      	ldr	r2, [pc, #204]	; (8002b20 <HAL_DMA_Start_IT+0x480>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d03b      	beq.n	8002ad0 <HAL_DMA_Start_IT+0x430>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a31      	ldr	r2, [pc, #196]	; (8002b24 <HAL_DMA_Start_IT+0x484>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d036      	beq.n	8002ad0 <HAL_DMA_Start_IT+0x430>
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a30      	ldr	r2, [pc, #192]	; (8002b28 <HAL_DMA_Start_IT+0x488>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d031      	beq.n	8002ad0 <HAL_DMA_Start_IT+0x430>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a2e      	ldr	r2, [pc, #184]	; (8002b2c <HAL_DMA_Start_IT+0x48c>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d02c      	beq.n	8002ad0 <HAL_DMA_Start_IT+0x430>
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a2d      	ldr	r2, [pc, #180]	; (8002b30 <HAL_DMA_Start_IT+0x490>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d027      	beq.n	8002ad0 <HAL_DMA_Start_IT+0x430>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a2b      	ldr	r2, [pc, #172]	; (8002b34 <HAL_DMA_Start_IT+0x494>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d022      	beq.n	8002ad0 <HAL_DMA_Start_IT+0x430>
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a2a      	ldr	r2, [pc, #168]	; (8002b38 <HAL_DMA_Start_IT+0x498>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d01d      	beq.n	8002ad0 <HAL_DMA_Start_IT+0x430>
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a28      	ldr	r2, [pc, #160]	; (8002b3c <HAL_DMA_Start_IT+0x49c>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d018      	beq.n	8002ad0 <HAL_DMA_Start_IT+0x430>
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a27      	ldr	r2, [pc, #156]	; (8002b40 <HAL_DMA_Start_IT+0x4a0>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d013      	beq.n	8002ad0 <HAL_DMA_Start_IT+0x430>
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a25      	ldr	r2, [pc, #148]	; (8002b44 <HAL_DMA_Start_IT+0x4a4>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d00e      	beq.n	8002ad0 <HAL_DMA_Start_IT+0x430>
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a24      	ldr	r2, [pc, #144]	; (8002b48 <HAL_DMA_Start_IT+0x4a8>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d009      	beq.n	8002ad0 <HAL_DMA_Start_IT+0x430>
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a22      	ldr	r2, [pc, #136]	; (8002b4c <HAL_DMA_Start_IT+0x4ac>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d004      	beq.n	8002ad0 <HAL_DMA_Start_IT+0x430>
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a21      	ldr	r2, [pc, #132]	; (8002b50 <HAL_DMA_Start_IT+0x4b0>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d108      	bne.n	8002ae2 <HAL_DMA_Start_IT+0x442>
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f042 0201 	orr.w	r2, r2, #1
 8002ade:	601a      	str	r2, [r3, #0]
 8002ae0:	e012      	b.n	8002b08 <HAL_DMA_Start_IT+0x468>
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f042 0201 	orr.w	r2, r2, #1
 8002af0:	601a      	str	r2, [r3, #0]
 8002af2:	e009      	b.n	8002b08 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b02:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002b08:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3718      	adds	r7, #24
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	40020010 	.word	0x40020010
 8002b18:	40020028 	.word	0x40020028
 8002b1c:	40020040 	.word	0x40020040
 8002b20:	40020058 	.word	0x40020058
 8002b24:	40020070 	.word	0x40020070
 8002b28:	40020088 	.word	0x40020088
 8002b2c:	400200a0 	.word	0x400200a0
 8002b30:	400200b8 	.word	0x400200b8
 8002b34:	40020410 	.word	0x40020410
 8002b38:	40020428 	.word	0x40020428
 8002b3c:	40020440 	.word	0x40020440
 8002b40:	40020458 	.word	0x40020458
 8002b44:	40020470 	.word	0x40020470
 8002b48:	40020488 	.word	0x40020488
 8002b4c:	400204a0 	.word	0x400204a0
 8002b50:	400204b8 	.word	0x400204b8
 8002b54:	58025408 	.word	0x58025408
 8002b58:	5802541c 	.word	0x5802541c
 8002b5c:	58025430 	.word	0x58025430
 8002b60:	58025444 	.word	0x58025444
 8002b64:	58025458 	.word	0x58025458
 8002b68:	5802546c 	.word	0x5802546c
 8002b6c:	58025480 	.word	0x58025480
 8002b70:	58025494 	.word	0x58025494

08002b74 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b086      	sub	sp, #24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002b7c:	f7ff f85e 	bl	8001c3c <HAL_GetTick>
 8002b80:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d101      	bne.n	8002b8c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e2dc      	b.n	8003146 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d008      	beq.n	8002baa <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2280      	movs	r2, #128	; 0x80
 8002b9c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e2cd      	b.n	8003146 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a76      	ldr	r2, [pc, #472]	; (8002d88 <HAL_DMA_Abort+0x214>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d04a      	beq.n	8002c4a <HAL_DMA_Abort+0xd6>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a74      	ldr	r2, [pc, #464]	; (8002d8c <HAL_DMA_Abort+0x218>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d045      	beq.n	8002c4a <HAL_DMA_Abort+0xd6>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a73      	ldr	r2, [pc, #460]	; (8002d90 <HAL_DMA_Abort+0x21c>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d040      	beq.n	8002c4a <HAL_DMA_Abort+0xd6>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a71      	ldr	r2, [pc, #452]	; (8002d94 <HAL_DMA_Abort+0x220>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d03b      	beq.n	8002c4a <HAL_DMA_Abort+0xd6>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a70      	ldr	r2, [pc, #448]	; (8002d98 <HAL_DMA_Abort+0x224>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d036      	beq.n	8002c4a <HAL_DMA_Abort+0xd6>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a6e      	ldr	r2, [pc, #440]	; (8002d9c <HAL_DMA_Abort+0x228>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d031      	beq.n	8002c4a <HAL_DMA_Abort+0xd6>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a6d      	ldr	r2, [pc, #436]	; (8002da0 <HAL_DMA_Abort+0x22c>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d02c      	beq.n	8002c4a <HAL_DMA_Abort+0xd6>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a6b      	ldr	r2, [pc, #428]	; (8002da4 <HAL_DMA_Abort+0x230>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d027      	beq.n	8002c4a <HAL_DMA_Abort+0xd6>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a6a      	ldr	r2, [pc, #424]	; (8002da8 <HAL_DMA_Abort+0x234>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d022      	beq.n	8002c4a <HAL_DMA_Abort+0xd6>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a68      	ldr	r2, [pc, #416]	; (8002dac <HAL_DMA_Abort+0x238>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d01d      	beq.n	8002c4a <HAL_DMA_Abort+0xd6>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a67      	ldr	r2, [pc, #412]	; (8002db0 <HAL_DMA_Abort+0x23c>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d018      	beq.n	8002c4a <HAL_DMA_Abort+0xd6>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a65      	ldr	r2, [pc, #404]	; (8002db4 <HAL_DMA_Abort+0x240>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d013      	beq.n	8002c4a <HAL_DMA_Abort+0xd6>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a64      	ldr	r2, [pc, #400]	; (8002db8 <HAL_DMA_Abort+0x244>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d00e      	beq.n	8002c4a <HAL_DMA_Abort+0xd6>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a62      	ldr	r2, [pc, #392]	; (8002dbc <HAL_DMA_Abort+0x248>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d009      	beq.n	8002c4a <HAL_DMA_Abort+0xd6>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a61      	ldr	r2, [pc, #388]	; (8002dc0 <HAL_DMA_Abort+0x24c>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d004      	beq.n	8002c4a <HAL_DMA_Abort+0xd6>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a5f      	ldr	r2, [pc, #380]	; (8002dc4 <HAL_DMA_Abort+0x250>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d101      	bne.n	8002c4e <HAL_DMA_Abort+0xda>
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e000      	b.n	8002c50 <HAL_DMA_Abort+0xdc>
 8002c4e:	2300      	movs	r3, #0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d013      	beq.n	8002c7c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f022 021e 	bic.w	r2, r2, #30
 8002c62:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	695a      	ldr	r2, [r3, #20]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c72:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	617b      	str	r3, [r7, #20]
 8002c7a:	e00a      	b.n	8002c92 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f022 020e 	bic.w	r2, r2, #14
 8002c8a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a3c      	ldr	r2, [pc, #240]	; (8002d88 <HAL_DMA_Abort+0x214>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d072      	beq.n	8002d82 <HAL_DMA_Abort+0x20e>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a3a      	ldr	r2, [pc, #232]	; (8002d8c <HAL_DMA_Abort+0x218>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d06d      	beq.n	8002d82 <HAL_DMA_Abort+0x20e>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a39      	ldr	r2, [pc, #228]	; (8002d90 <HAL_DMA_Abort+0x21c>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d068      	beq.n	8002d82 <HAL_DMA_Abort+0x20e>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a37      	ldr	r2, [pc, #220]	; (8002d94 <HAL_DMA_Abort+0x220>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d063      	beq.n	8002d82 <HAL_DMA_Abort+0x20e>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a36      	ldr	r2, [pc, #216]	; (8002d98 <HAL_DMA_Abort+0x224>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d05e      	beq.n	8002d82 <HAL_DMA_Abort+0x20e>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a34      	ldr	r2, [pc, #208]	; (8002d9c <HAL_DMA_Abort+0x228>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d059      	beq.n	8002d82 <HAL_DMA_Abort+0x20e>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a33      	ldr	r2, [pc, #204]	; (8002da0 <HAL_DMA_Abort+0x22c>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d054      	beq.n	8002d82 <HAL_DMA_Abort+0x20e>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a31      	ldr	r2, [pc, #196]	; (8002da4 <HAL_DMA_Abort+0x230>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d04f      	beq.n	8002d82 <HAL_DMA_Abort+0x20e>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a30      	ldr	r2, [pc, #192]	; (8002da8 <HAL_DMA_Abort+0x234>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d04a      	beq.n	8002d82 <HAL_DMA_Abort+0x20e>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a2e      	ldr	r2, [pc, #184]	; (8002dac <HAL_DMA_Abort+0x238>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d045      	beq.n	8002d82 <HAL_DMA_Abort+0x20e>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a2d      	ldr	r2, [pc, #180]	; (8002db0 <HAL_DMA_Abort+0x23c>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d040      	beq.n	8002d82 <HAL_DMA_Abort+0x20e>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a2b      	ldr	r2, [pc, #172]	; (8002db4 <HAL_DMA_Abort+0x240>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d03b      	beq.n	8002d82 <HAL_DMA_Abort+0x20e>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a2a      	ldr	r2, [pc, #168]	; (8002db8 <HAL_DMA_Abort+0x244>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d036      	beq.n	8002d82 <HAL_DMA_Abort+0x20e>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a28      	ldr	r2, [pc, #160]	; (8002dbc <HAL_DMA_Abort+0x248>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d031      	beq.n	8002d82 <HAL_DMA_Abort+0x20e>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a27      	ldr	r2, [pc, #156]	; (8002dc0 <HAL_DMA_Abort+0x24c>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d02c      	beq.n	8002d82 <HAL_DMA_Abort+0x20e>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a25      	ldr	r2, [pc, #148]	; (8002dc4 <HAL_DMA_Abort+0x250>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d027      	beq.n	8002d82 <HAL_DMA_Abort+0x20e>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a24      	ldr	r2, [pc, #144]	; (8002dc8 <HAL_DMA_Abort+0x254>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d022      	beq.n	8002d82 <HAL_DMA_Abort+0x20e>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a22      	ldr	r2, [pc, #136]	; (8002dcc <HAL_DMA_Abort+0x258>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d01d      	beq.n	8002d82 <HAL_DMA_Abort+0x20e>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a21      	ldr	r2, [pc, #132]	; (8002dd0 <HAL_DMA_Abort+0x25c>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d018      	beq.n	8002d82 <HAL_DMA_Abort+0x20e>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a1f      	ldr	r2, [pc, #124]	; (8002dd4 <HAL_DMA_Abort+0x260>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d013      	beq.n	8002d82 <HAL_DMA_Abort+0x20e>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a1e      	ldr	r2, [pc, #120]	; (8002dd8 <HAL_DMA_Abort+0x264>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d00e      	beq.n	8002d82 <HAL_DMA_Abort+0x20e>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a1c      	ldr	r2, [pc, #112]	; (8002ddc <HAL_DMA_Abort+0x268>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d009      	beq.n	8002d82 <HAL_DMA_Abort+0x20e>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a1b      	ldr	r2, [pc, #108]	; (8002de0 <HAL_DMA_Abort+0x26c>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d004      	beq.n	8002d82 <HAL_DMA_Abort+0x20e>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a19      	ldr	r2, [pc, #100]	; (8002de4 <HAL_DMA_Abort+0x270>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d132      	bne.n	8002de8 <HAL_DMA_Abort+0x274>
 8002d82:	2301      	movs	r3, #1
 8002d84:	e031      	b.n	8002dea <HAL_DMA_Abort+0x276>
 8002d86:	bf00      	nop
 8002d88:	40020010 	.word	0x40020010
 8002d8c:	40020028 	.word	0x40020028
 8002d90:	40020040 	.word	0x40020040
 8002d94:	40020058 	.word	0x40020058
 8002d98:	40020070 	.word	0x40020070
 8002d9c:	40020088 	.word	0x40020088
 8002da0:	400200a0 	.word	0x400200a0
 8002da4:	400200b8 	.word	0x400200b8
 8002da8:	40020410 	.word	0x40020410
 8002dac:	40020428 	.word	0x40020428
 8002db0:	40020440 	.word	0x40020440
 8002db4:	40020458 	.word	0x40020458
 8002db8:	40020470 	.word	0x40020470
 8002dbc:	40020488 	.word	0x40020488
 8002dc0:	400204a0 	.word	0x400204a0
 8002dc4:	400204b8 	.word	0x400204b8
 8002dc8:	58025408 	.word	0x58025408
 8002dcc:	5802541c 	.word	0x5802541c
 8002dd0:	58025430 	.word	0x58025430
 8002dd4:	58025444 	.word	0x58025444
 8002dd8:	58025458 	.word	0x58025458
 8002ddc:	5802546c 	.word	0x5802546c
 8002de0:	58025480 	.word	0x58025480
 8002de4:	58025494 	.word	0x58025494
 8002de8:	2300      	movs	r3, #0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d007      	beq.n	8002dfe <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002df8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002dfc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a6d      	ldr	r2, [pc, #436]	; (8002fb8 <HAL_DMA_Abort+0x444>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d04a      	beq.n	8002e9e <HAL_DMA_Abort+0x32a>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a6b      	ldr	r2, [pc, #428]	; (8002fbc <HAL_DMA_Abort+0x448>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d045      	beq.n	8002e9e <HAL_DMA_Abort+0x32a>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a6a      	ldr	r2, [pc, #424]	; (8002fc0 <HAL_DMA_Abort+0x44c>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d040      	beq.n	8002e9e <HAL_DMA_Abort+0x32a>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a68      	ldr	r2, [pc, #416]	; (8002fc4 <HAL_DMA_Abort+0x450>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d03b      	beq.n	8002e9e <HAL_DMA_Abort+0x32a>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a67      	ldr	r2, [pc, #412]	; (8002fc8 <HAL_DMA_Abort+0x454>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d036      	beq.n	8002e9e <HAL_DMA_Abort+0x32a>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a65      	ldr	r2, [pc, #404]	; (8002fcc <HAL_DMA_Abort+0x458>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d031      	beq.n	8002e9e <HAL_DMA_Abort+0x32a>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a64      	ldr	r2, [pc, #400]	; (8002fd0 <HAL_DMA_Abort+0x45c>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d02c      	beq.n	8002e9e <HAL_DMA_Abort+0x32a>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a62      	ldr	r2, [pc, #392]	; (8002fd4 <HAL_DMA_Abort+0x460>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d027      	beq.n	8002e9e <HAL_DMA_Abort+0x32a>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a61      	ldr	r2, [pc, #388]	; (8002fd8 <HAL_DMA_Abort+0x464>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d022      	beq.n	8002e9e <HAL_DMA_Abort+0x32a>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a5f      	ldr	r2, [pc, #380]	; (8002fdc <HAL_DMA_Abort+0x468>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d01d      	beq.n	8002e9e <HAL_DMA_Abort+0x32a>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a5e      	ldr	r2, [pc, #376]	; (8002fe0 <HAL_DMA_Abort+0x46c>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d018      	beq.n	8002e9e <HAL_DMA_Abort+0x32a>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a5c      	ldr	r2, [pc, #368]	; (8002fe4 <HAL_DMA_Abort+0x470>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d013      	beq.n	8002e9e <HAL_DMA_Abort+0x32a>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a5b      	ldr	r2, [pc, #364]	; (8002fe8 <HAL_DMA_Abort+0x474>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d00e      	beq.n	8002e9e <HAL_DMA_Abort+0x32a>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a59      	ldr	r2, [pc, #356]	; (8002fec <HAL_DMA_Abort+0x478>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d009      	beq.n	8002e9e <HAL_DMA_Abort+0x32a>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a58      	ldr	r2, [pc, #352]	; (8002ff0 <HAL_DMA_Abort+0x47c>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d004      	beq.n	8002e9e <HAL_DMA_Abort+0x32a>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a56      	ldr	r2, [pc, #344]	; (8002ff4 <HAL_DMA_Abort+0x480>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d108      	bne.n	8002eb0 <HAL_DMA_Abort+0x33c>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f022 0201 	bic.w	r2, r2, #1
 8002eac:	601a      	str	r2, [r3, #0]
 8002eae:	e007      	b.n	8002ec0 <HAL_DMA_Abort+0x34c>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f022 0201 	bic.w	r2, r2, #1
 8002ebe:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002ec0:	e013      	b.n	8002eea <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ec2:	f7fe febb 	bl	8001c3c <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	2b05      	cmp	r3, #5
 8002ece:	d90c      	bls.n	8002eea <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2220      	movs	r2, #32
 8002ed4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2203      	movs	r2, #3
 8002ee2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e12d      	b.n	8003146 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0301 	and.w	r3, r3, #1
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d1e5      	bne.n	8002ec2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a2f      	ldr	r2, [pc, #188]	; (8002fb8 <HAL_DMA_Abort+0x444>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d04a      	beq.n	8002f96 <HAL_DMA_Abort+0x422>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a2d      	ldr	r2, [pc, #180]	; (8002fbc <HAL_DMA_Abort+0x448>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d045      	beq.n	8002f96 <HAL_DMA_Abort+0x422>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a2c      	ldr	r2, [pc, #176]	; (8002fc0 <HAL_DMA_Abort+0x44c>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d040      	beq.n	8002f96 <HAL_DMA_Abort+0x422>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a2a      	ldr	r2, [pc, #168]	; (8002fc4 <HAL_DMA_Abort+0x450>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d03b      	beq.n	8002f96 <HAL_DMA_Abort+0x422>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a29      	ldr	r2, [pc, #164]	; (8002fc8 <HAL_DMA_Abort+0x454>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d036      	beq.n	8002f96 <HAL_DMA_Abort+0x422>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a27      	ldr	r2, [pc, #156]	; (8002fcc <HAL_DMA_Abort+0x458>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d031      	beq.n	8002f96 <HAL_DMA_Abort+0x422>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a26      	ldr	r2, [pc, #152]	; (8002fd0 <HAL_DMA_Abort+0x45c>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d02c      	beq.n	8002f96 <HAL_DMA_Abort+0x422>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a24      	ldr	r2, [pc, #144]	; (8002fd4 <HAL_DMA_Abort+0x460>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d027      	beq.n	8002f96 <HAL_DMA_Abort+0x422>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a23      	ldr	r2, [pc, #140]	; (8002fd8 <HAL_DMA_Abort+0x464>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d022      	beq.n	8002f96 <HAL_DMA_Abort+0x422>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a21      	ldr	r2, [pc, #132]	; (8002fdc <HAL_DMA_Abort+0x468>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d01d      	beq.n	8002f96 <HAL_DMA_Abort+0x422>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a20      	ldr	r2, [pc, #128]	; (8002fe0 <HAL_DMA_Abort+0x46c>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d018      	beq.n	8002f96 <HAL_DMA_Abort+0x422>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a1e      	ldr	r2, [pc, #120]	; (8002fe4 <HAL_DMA_Abort+0x470>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d013      	beq.n	8002f96 <HAL_DMA_Abort+0x422>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a1d      	ldr	r2, [pc, #116]	; (8002fe8 <HAL_DMA_Abort+0x474>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d00e      	beq.n	8002f96 <HAL_DMA_Abort+0x422>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a1b      	ldr	r2, [pc, #108]	; (8002fec <HAL_DMA_Abort+0x478>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d009      	beq.n	8002f96 <HAL_DMA_Abort+0x422>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a1a      	ldr	r2, [pc, #104]	; (8002ff0 <HAL_DMA_Abort+0x47c>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d004      	beq.n	8002f96 <HAL_DMA_Abort+0x422>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a18      	ldr	r2, [pc, #96]	; (8002ff4 <HAL_DMA_Abort+0x480>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d101      	bne.n	8002f9a <HAL_DMA_Abort+0x426>
 8002f96:	2301      	movs	r3, #1
 8002f98:	e000      	b.n	8002f9c <HAL_DMA_Abort+0x428>
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d02b      	beq.n	8002ff8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002faa:	f003 031f 	and.w	r3, r3, #31
 8002fae:	223f      	movs	r2, #63	; 0x3f
 8002fb0:	409a      	lsls	r2, r3
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	609a      	str	r2, [r3, #8]
 8002fb6:	e02a      	b.n	800300e <HAL_DMA_Abort+0x49a>
 8002fb8:	40020010 	.word	0x40020010
 8002fbc:	40020028 	.word	0x40020028
 8002fc0:	40020040 	.word	0x40020040
 8002fc4:	40020058 	.word	0x40020058
 8002fc8:	40020070 	.word	0x40020070
 8002fcc:	40020088 	.word	0x40020088
 8002fd0:	400200a0 	.word	0x400200a0
 8002fd4:	400200b8 	.word	0x400200b8
 8002fd8:	40020410 	.word	0x40020410
 8002fdc:	40020428 	.word	0x40020428
 8002fe0:	40020440 	.word	0x40020440
 8002fe4:	40020458 	.word	0x40020458
 8002fe8:	40020470 	.word	0x40020470
 8002fec:	40020488 	.word	0x40020488
 8002ff0:	400204a0 	.word	0x400204a0
 8002ff4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ffc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003002:	f003 031f 	and.w	r3, r3, #31
 8003006:	2201      	movs	r2, #1
 8003008:	409a      	lsls	r2, r3
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a4f      	ldr	r2, [pc, #316]	; (8003150 <HAL_DMA_Abort+0x5dc>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d072      	beq.n	80030fe <HAL_DMA_Abort+0x58a>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a4d      	ldr	r2, [pc, #308]	; (8003154 <HAL_DMA_Abort+0x5e0>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d06d      	beq.n	80030fe <HAL_DMA_Abort+0x58a>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a4c      	ldr	r2, [pc, #304]	; (8003158 <HAL_DMA_Abort+0x5e4>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d068      	beq.n	80030fe <HAL_DMA_Abort+0x58a>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a4a      	ldr	r2, [pc, #296]	; (800315c <HAL_DMA_Abort+0x5e8>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d063      	beq.n	80030fe <HAL_DMA_Abort+0x58a>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a49      	ldr	r2, [pc, #292]	; (8003160 <HAL_DMA_Abort+0x5ec>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d05e      	beq.n	80030fe <HAL_DMA_Abort+0x58a>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a47      	ldr	r2, [pc, #284]	; (8003164 <HAL_DMA_Abort+0x5f0>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d059      	beq.n	80030fe <HAL_DMA_Abort+0x58a>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a46      	ldr	r2, [pc, #280]	; (8003168 <HAL_DMA_Abort+0x5f4>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d054      	beq.n	80030fe <HAL_DMA_Abort+0x58a>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a44      	ldr	r2, [pc, #272]	; (800316c <HAL_DMA_Abort+0x5f8>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d04f      	beq.n	80030fe <HAL_DMA_Abort+0x58a>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a43      	ldr	r2, [pc, #268]	; (8003170 <HAL_DMA_Abort+0x5fc>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d04a      	beq.n	80030fe <HAL_DMA_Abort+0x58a>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a41      	ldr	r2, [pc, #260]	; (8003174 <HAL_DMA_Abort+0x600>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d045      	beq.n	80030fe <HAL_DMA_Abort+0x58a>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a40      	ldr	r2, [pc, #256]	; (8003178 <HAL_DMA_Abort+0x604>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d040      	beq.n	80030fe <HAL_DMA_Abort+0x58a>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a3e      	ldr	r2, [pc, #248]	; (800317c <HAL_DMA_Abort+0x608>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d03b      	beq.n	80030fe <HAL_DMA_Abort+0x58a>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a3d      	ldr	r2, [pc, #244]	; (8003180 <HAL_DMA_Abort+0x60c>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d036      	beq.n	80030fe <HAL_DMA_Abort+0x58a>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a3b      	ldr	r2, [pc, #236]	; (8003184 <HAL_DMA_Abort+0x610>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d031      	beq.n	80030fe <HAL_DMA_Abort+0x58a>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a3a      	ldr	r2, [pc, #232]	; (8003188 <HAL_DMA_Abort+0x614>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d02c      	beq.n	80030fe <HAL_DMA_Abort+0x58a>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a38      	ldr	r2, [pc, #224]	; (800318c <HAL_DMA_Abort+0x618>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d027      	beq.n	80030fe <HAL_DMA_Abort+0x58a>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a37      	ldr	r2, [pc, #220]	; (8003190 <HAL_DMA_Abort+0x61c>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d022      	beq.n	80030fe <HAL_DMA_Abort+0x58a>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a35      	ldr	r2, [pc, #212]	; (8003194 <HAL_DMA_Abort+0x620>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d01d      	beq.n	80030fe <HAL_DMA_Abort+0x58a>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a34      	ldr	r2, [pc, #208]	; (8003198 <HAL_DMA_Abort+0x624>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d018      	beq.n	80030fe <HAL_DMA_Abort+0x58a>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a32      	ldr	r2, [pc, #200]	; (800319c <HAL_DMA_Abort+0x628>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d013      	beq.n	80030fe <HAL_DMA_Abort+0x58a>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a31      	ldr	r2, [pc, #196]	; (80031a0 <HAL_DMA_Abort+0x62c>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d00e      	beq.n	80030fe <HAL_DMA_Abort+0x58a>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a2f      	ldr	r2, [pc, #188]	; (80031a4 <HAL_DMA_Abort+0x630>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d009      	beq.n	80030fe <HAL_DMA_Abort+0x58a>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a2e      	ldr	r2, [pc, #184]	; (80031a8 <HAL_DMA_Abort+0x634>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d004      	beq.n	80030fe <HAL_DMA_Abort+0x58a>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a2c      	ldr	r2, [pc, #176]	; (80031ac <HAL_DMA_Abort+0x638>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d101      	bne.n	8003102 <HAL_DMA_Abort+0x58e>
 80030fe:	2301      	movs	r3, #1
 8003100:	e000      	b.n	8003104 <HAL_DMA_Abort+0x590>
 8003102:	2300      	movs	r3, #0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d015      	beq.n	8003134 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003110:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003116:	2b00      	cmp	r3, #0
 8003118:	d00c      	beq.n	8003134 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003124:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003128:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003132:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	3718      	adds	r7, #24
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	40020010 	.word	0x40020010
 8003154:	40020028 	.word	0x40020028
 8003158:	40020040 	.word	0x40020040
 800315c:	40020058 	.word	0x40020058
 8003160:	40020070 	.word	0x40020070
 8003164:	40020088 	.word	0x40020088
 8003168:	400200a0 	.word	0x400200a0
 800316c:	400200b8 	.word	0x400200b8
 8003170:	40020410 	.word	0x40020410
 8003174:	40020428 	.word	0x40020428
 8003178:	40020440 	.word	0x40020440
 800317c:	40020458 	.word	0x40020458
 8003180:	40020470 	.word	0x40020470
 8003184:	40020488 	.word	0x40020488
 8003188:	400204a0 	.word	0x400204a0
 800318c:	400204b8 	.word	0x400204b8
 8003190:	58025408 	.word	0x58025408
 8003194:	5802541c 	.word	0x5802541c
 8003198:	58025430 	.word	0x58025430
 800319c:	58025444 	.word	0x58025444
 80031a0:	58025458 	.word	0x58025458
 80031a4:	5802546c 	.word	0x5802546c
 80031a8:	58025480 	.word	0x58025480
 80031ac:	58025494 	.word	0x58025494

080031b0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d101      	bne.n	80031c2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e237      	b.n	8003632 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d004      	beq.n	80031d8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2280      	movs	r2, #128	; 0x80
 80031d2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e22c      	b.n	8003632 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a5c      	ldr	r2, [pc, #368]	; (8003350 <HAL_DMA_Abort_IT+0x1a0>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d04a      	beq.n	8003278 <HAL_DMA_Abort_IT+0xc8>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a5b      	ldr	r2, [pc, #364]	; (8003354 <HAL_DMA_Abort_IT+0x1a4>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d045      	beq.n	8003278 <HAL_DMA_Abort_IT+0xc8>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a59      	ldr	r2, [pc, #356]	; (8003358 <HAL_DMA_Abort_IT+0x1a8>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d040      	beq.n	8003278 <HAL_DMA_Abort_IT+0xc8>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a58      	ldr	r2, [pc, #352]	; (800335c <HAL_DMA_Abort_IT+0x1ac>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d03b      	beq.n	8003278 <HAL_DMA_Abort_IT+0xc8>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a56      	ldr	r2, [pc, #344]	; (8003360 <HAL_DMA_Abort_IT+0x1b0>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d036      	beq.n	8003278 <HAL_DMA_Abort_IT+0xc8>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a55      	ldr	r2, [pc, #340]	; (8003364 <HAL_DMA_Abort_IT+0x1b4>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d031      	beq.n	8003278 <HAL_DMA_Abort_IT+0xc8>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a53      	ldr	r2, [pc, #332]	; (8003368 <HAL_DMA_Abort_IT+0x1b8>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d02c      	beq.n	8003278 <HAL_DMA_Abort_IT+0xc8>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a52      	ldr	r2, [pc, #328]	; (800336c <HAL_DMA_Abort_IT+0x1bc>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d027      	beq.n	8003278 <HAL_DMA_Abort_IT+0xc8>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a50      	ldr	r2, [pc, #320]	; (8003370 <HAL_DMA_Abort_IT+0x1c0>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d022      	beq.n	8003278 <HAL_DMA_Abort_IT+0xc8>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a4f      	ldr	r2, [pc, #316]	; (8003374 <HAL_DMA_Abort_IT+0x1c4>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d01d      	beq.n	8003278 <HAL_DMA_Abort_IT+0xc8>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a4d      	ldr	r2, [pc, #308]	; (8003378 <HAL_DMA_Abort_IT+0x1c8>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d018      	beq.n	8003278 <HAL_DMA_Abort_IT+0xc8>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a4c      	ldr	r2, [pc, #304]	; (800337c <HAL_DMA_Abort_IT+0x1cc>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d013      	beq.n	8003278 <HAL_DMA_Abort_IT+0xc8>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a4a      	ldr	r2, [pc, #296]	; (8003380 <HAL_DMA_Abort_IT+0x1d0>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d00e      	beq.n	8003278 <HAL_DMA_Abort_IT+0xc8>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a49      	ldr	r2, [pc, #292]	; (8003384 <HAL_DMA_Abort_IT+0x1d4>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d009      	beq.n	8003278 <HAL_DMA_Abort_IT+0xc8>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a47      	ldr	r2, [pc, #284]	; (8003388 <HAL_DMA_Abort_IT+0x1d8>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d004      	beq.n	8003278 <HAL_DMA_Abort_IT+0xc8>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a46      	ldr	r2, [pc, #280]	; (800338c <HAL_DMA_Abort_IT+0x1dc>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d101      	bne.n	800327c <HAL_DMA_Abort_IT+0xcc>
 8003278:	2301      	movs	r3, #1
 800327a:	e000      	b.n	800327e <HAL_DMA_Abort_IT+0xce>
 800327c:	2300      	movs	r3, #0
 800327e:	2b00      	cmp	r3, #0
 8003280:	f000 8086 	beq.w	8003390 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2204      	movs	r2, #4
 8003288:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a2f      	ldr	r2, [pc, #188]	; (8003350 <HAL_DMA_Abort_IT+0x1a0>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d04a      	beq.n	800332c <HAL_DMA_Abort_IT+0x17c>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a2e      	ldr	r2, [pc, #184]	; (8003354 <HAL_DMA_Abort_IT+0x1a4>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d045      	beq.n	800332c <HAL_DMA_Abort_IT+0x17c>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a2c      	ldr	r2, [pc, #176]	; (8003358 <HAL_DMA_Abort_IT+0x1a8>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d040      	beq.n	800332c <HAL_DMA_Abort_IT+0x17c>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a2b      	ldr	r2, [pc, #172]	; (800335c <HAL_DMA_Abort_IT+0x1ac>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d03b      	beq.n	800332c <HAL_DMA_Abort_IT+0x17c>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a29      	ldr	r2, [pc, #164]	; (8003360 <HAL_DMA_Abort_IT+0x1b0>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d036      	beq.n	800332c <HAL_DMA_Abort_IT+0x17c>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a28      	ldr	r2, [pc, #160]	; (8003364 <HAL_DMA_Abort_IT+0x1b4>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d031      	beq.n	800332c <HAL_DMA_Abort_IT+0x17c>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a26      	ldr	r2, [pc, #152]	; (8003368 <HAL_DMA_Abort_IT+0x1b8>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d02c      	beq.n	800332c <HAL_DMA_Abort_IT+0x17c>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a25      	ldr	r2, [pc, #148]	; (800336c <HAL_DMA_Abort_IT+0x1bc>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d027      	beq.n	800332c <HAL_DMA_Abort_IT+0x17c>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a23      	ldr	r2, [pc, #140]	; (8003370 <HAL_DMA_Abort_IT+0x1c0>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d022      	beq.n	800332c <HAL_DMA_Abort_IT+0x17c>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a22      	ldr	r2, [pc, #136]	; (8003374 <HAL_DMA_Abort_IT+0x1c4>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d01d      	beq.n	800332c <HAL_DMA_Abort_IT+0x17c>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a20      	ldr	r2, [pc, #128]	; (8003378 <HAL_DMA_Abort_IT+0x1c8>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d018      	beq.n	800332c <HAL_DMA_Abort_IT+0x17c>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a1f      	ldr	r2, [pc, #124]	; (800337c <HAL_DMA_Abort_IT+0x1cc>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d013      	beq.n	800332c <HAL_DMA_Abort_IT+0x17c>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a1d      	ldr	r2, [pc, #116]	; (8003380 <HAL_DMA_Abort_IT+0x1d0>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d00e      	beq.n	800332c <HAL_DMA_Abort_IT+0x17c>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a1c      	ldr	r2, [pc, #112]	; (8003384 <HAL_DMA_Abort_IT+0x1d4>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d009      	beq.n	800332c <HAL_DMA_Abort_IT+0x17c>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a1a      	ldr	r2, [pc, #104]	; (8003388 <HAL_DMA_Abort_IT+0x1d8>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d004      	beq.n	800332c <HAL_DMA_Abort_IT+0x17c>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a19      	ldr	r2, [pc, #100]	; (800338c <HAL_DMA_Abort_IT+0x1dc>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d108      	bne.n	800333e <HAL_DMA_Abort_IT+0x18e>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f022 0201 	bic.w	r2, r2, #1
 800333a:	601a      	str	r2, [r3, #0]
 800333c:	e178      	b.n	8003630 <HAL_DMA_Abort_IT+0x480>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f022 0201 	bic.w	r2, r2, #1
 800334c:	601a      	str	r2, [r3, #0]
 800334e:	e16f      	b.n	8003630 <HAL_DMA_Abort_IT+0x480>
 8003350:	40020010 	.word	0x40020010
 8003354:	40020028 	.word	0x40020028
 8003358:	40020040 	.word	0x40020040
 800335c:	40020058 	.word	0x40020058
 8003360:	40020070 	.word	0x40020070
 8003364:	40020088 	.word	0x40020088
 8003368:	400200a0 	.word	0x400200a0
 800336c:	400200b8 	.word	0x400200b8
 8003370:	40020410 	.word	0x40020410
 8003374:	40020428 	.word	0x40020428
 8003378:	40020440 	.word	0x40020440
 800337c:	40020458 	.word	0x40020458
 8003380:	40020470 	.word	0x40020470
 8003384:	40020488 	.word	0x40020488
 8003388:	400204a0 	.word	0x400204a0
 800338c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f022 020e 	bic.w	r2, r2, #14
 800339e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a6c      	ldr	r2, [pc, #432]	; (8003558 <HAL_DMA_Abort_IT+0x3a8>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d04a      	beq.n	8003440 <HAL_DMA_Abort_IT+0x290>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a6b      	ldr	r2, [pc, #428]	; (800355c <HAL_DMA_Abort_IT+0x3ac>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d045      	beq.n	8003440 <HAL_DMA_Abort_IT+0x290>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a69      	ldr	r2, [pc, #420]	; (8003560 <HAL_DMA_Abort_IT+0x3b0>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d040      	beq.n	8003440 <HAL_DMA_Abort_IT+0x290>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a68      	ldr	r2, [pc, #416]	; (8003564 <HAL_DMA_Abort_IT+0x3b4>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d03b      	beq.n	8003440 <HAL_DMA_Abort_IT+0x290>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a66      	ldr	r2, [pc, #408]	; (8003568 <HAL_DMA_Abort_IT+0x3b8>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d036      	beq.n	8003440 <HAL_DMA_Abort_IT+0x290>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a65      	ldr	r2, [pc, #404]	; (800356c <HAL_DMA_Abort_IT+0x3bc>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d031      	beq.n	8003440 <HAL_DMA_Abort_IT+0x290>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a63      	ldr	r2, [pc, #396]	; (8003570 <HAL_DMA_Abort_IT+0x3c0>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d02c      	beq.n	8003440 <HAL_DMA_Abort_IT+0x290>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a62      	ldr	r2, [pc, #392]	; (8003574 <HAL_DMA_Abort_IT+0x3c4>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d027      	beq.n	8003440 <HAL_DMA_Abort_IT+0x290>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a60      	ldr	r2, [pc, #384]	; (8003578 <HAL_DMA_Abort_IT+0x3c8>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d022      	beq.n	8003440 <HAL_DMA_Abort_IT+0x290>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a5f      	ldr	r2, [pc, #380]	; (800357c <HAL_DMA_Abort_IT+0x3cc>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d01d      	beq.n	8003440 <HAL_DMA_Abort_IT+0x290>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a5d      	ldr	r2, [pc, #372]	; (8003580 <HAL_DMA_Abort_IT+0x3d0>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d018      	beq.n	8003440 <HAL_DMA_Abort_IT+0x290>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a5c      	ldr	r2, [pc, #368]	; (8003584 <HAL_DMA_Abort_IT+0x3d4>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d013      	beq.n	8003440 <HAL_DMA_Abort_IT+0x290>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a5a      	ldr	r2, [pc, #360]	; (8003588 <HAL_DMA_Abort_IT+0x3d8>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d00e      	beq.n	8003440 <HAL_DMA_Abort_IT+0x290>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a59      	ldr	r2, [pc, #356]	; (800358c <HAL_DMA_Abort_IT+0x3dc>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d009      	beq.n	8003440 <HAL_DMA_Abort_IT+0x290>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a57      	ldr	r2, [pc, #348]	; (8003590 <HAL_DMA_Abort_IT+0x3e0>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d004      	beq.n	8003440 <HAL_DMA_Abort_IT+0x290>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a56      	ldr	r2, [pc, #344]	; (8003594 <HAL_DMA_Abort_IT+0x3e4>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d108      	bne.n	8003452 <HAL_DMA_Abort_IT+0x2a2>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f022 0201 	bic.w	r2, r2, #1
 800344e:	601a      	str	r2, [r3, #0]
 8003450:	e007      	b.n	8003462 <HAL_DMA_Abort_IT+0x2b2>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f022 0201 	bic.w	r2, r2, #1
 8003460:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a3c      	ldr	r2, [pc, #240]	; (8003558 <HAL_DMA_Abort_IT+0x3a8>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d072      	beq.n	8003552 <HAL_DMA_Abort_IT+0x3a2>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a3a      	ldr	r2, [pc, #232]	; (800355c <HAL_DMA_Abort_IT+0x3ac>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d06d      	beq.n	8003552 <HAL_DMA_Abort_IT+0x3a2>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a39      	ldr	r2, [pc, #228]	; (8003560 <HAL_DMA_Abort_IT+0x3b0>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d068      	beq.n	8003552 <HAL_DMA_Abort_IT+0x3a2>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a37      	ldr	r2, [pc, #220]	; (8003564 <HAL_DMA_Abort_IT+0x3b4>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d063      	beq.n	8003552 <HAL_DMA_Abort_IT+0x3a2>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a36      	ldr	r2, [pc, #216]	; (8003568 <HAL_DMA_Abort_IT+0x3b8>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d05e      	beq.n	8003552 <HAL_DMA_Abort_IT+0x3a2>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a34      	ldr	r2, [pc, #208]	; (800356c <HAL_DMA_Abort_IT+0x3bc>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d059      	beq.n	8003552 <HAL_DMA_Abort_IT+0x3a2>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a33      	ldr	r2, [pc, #204]	; (8003570 <HAL_DMA_Abort_IT+0x3c0>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d054      	beq.n	8003552 <HAL_DMA_Abort_IT+0x3a2>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a31      	ldr	r2, [pc, #196]	; (8003574 <HAL_DMA_Abort_IT+0x3c4>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d04f      	beq.n	8003552 <HAL_DMA_Abort_IT+0x3a2>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a30      	ldr	r2, [pc, #192]	; (8003578 <HAL_DMA_Abort_IT+0x3c8>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d04a      	beq.n	8003552 <HAL_DMA_Abort_IT+0x3a2>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a2e      	ldr	r2, [pc, #184]	; (800357c <HAL_DMA_Abort_IT+0x3cc>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d045      	beq.n	8003552 <HAL_DMA_Abort_IT+0x3a2>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a2d      	ldr	r2, [pc, #180]	; (8003580 <HAL_DMA_Abort_IT+0x3d0>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d040      	beq.n	8003552 <HAL_DMA_Abort_IT+0x3a2>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a2b      	ldr	r2, [pc, #172]	; (8003584 <HAL_DMA_Abort_IT+0x3d4>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d03b      	beq.n	8003552 <HAL_DMA_Abort_IT+0x3a2>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a2a      	ldr	r2, [pc, #168]	; (8003588 <HAL_DMA_Abort_IT+0x3d8>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d036      	beq.n	8003552 <HAL_DMA_Abort_IT+0x3a2>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a28      	ldr	r2, [pc, #160]	; (800358c <HAL_DMA_Abort_IT+0x3dc>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d031      	beq.n	8003552 <HAL_DMA_Abort_IT+0x3a2>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a27      	ldr	r2, [pc, #156]	; (8003590 <HAL_DMA_Abort_IT+0x3e0>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d02c      	beq.n	8003552 <HAL_DMA_Abort_IT+0x3a2>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a25      	ldr	r2, [pc, #148]	; (8003594 <HAL_DMA_Abort_IT+0x3e4>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d027      	beq.n	8003552 <HAL_DMA_Abort_IT+0x3a2>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a24      	ldr	r2, [pc, #144]	; (8003598 <HAL_DMA_Abort_IT+0x3e8>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d022      	beq.n	8003552 <HAL_DMA_Abort_IT+0x3a2>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a22      	ldr	r2, [pc, #136]	; (800359c <HAL_DMA_Abort_IT+0x3ec>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d01d      	beq.n	8003552 <HAL_DMA_Abort_IT+0x3a2>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a21      	ldr	r2, [pc, #132]	; (80035a0 <HAL_DMA_Abort_IT+0x3f0>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d018      	beq.n	8003552 <HAL_DMA_Abort_IT+0x3a2>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a1f      	ldr	r2, [pc, #124]	; (80035a4 <HAL_DMA_Abort_IT+0x3f4>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d013      	beq.n	8003552 <HAL_DMA_Abort_IT+0x3a2>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a1e      	ldr	r2, [pc, #120]	; (80035a8 <HAL_DMA_Abort_IT+0x3f8>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d00e      	beq.n	8003552 <HAL_DMA_Abort_IT+0x3a2>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a1c      	ldr	r2, [pc, #112]	; (80035ac <HAL_DMA_Abort_IT+0x3fc>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d009      	beq.n	8003552 <HAL_DMA_Abort_IT+0x3a2>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a1b      	ldr	r2, [pc, #108]	; (80035b0 <HAL_DMA_Abort_IT+0x400>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d004      	beq.n	8003552 <HAL_DMA_Abort_IT+0x3a2>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a19      	ldr	r2, [pc, #100]	; (80035b4 <HAL_DMA_Abort_IT+0x404>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d132      	bne.n	80035b8 <HAL_DMA_Abort_IT+0x408>
 8003552:	2301      	movs	r3, #1
 8003554:	e031      	b.n	80035ba <HAL_DMA_Abort_IT+0x40a>
 8003556:	bf00      	nop
 8003558:	40020010 	.word	0x40020010
 800355c:	40020028 	.word	0x40020028
 8003560:	40020040 	.word	0x40020040
 8003564:	40020058 	.word	0x40020058
 8003568:	40020070 	.word	0x40020070
 800356c:	40020088 	.word	0x40020088
 8003570:	400200a0 	.word	0x400200a0
 8003574:	400200b8 	.word	0x400200b8
 8003578:	40020410 	.word	0x40020410
 800357c:	40020428 	.word	0x40020428
 8003580:	40020440 	.word	0x40020440
 8003584:	40020458 	.word	0x40020458
 8003588:	40020470 	.word	0x40020470
 800358c:	40020488 	.word	0x40020488
 8003590:	400204a0 	.word	0x400204a0
 8003594:	400204b8 	.word	0x400204b8
 8003598:	58025408 	.word	0x58025408
 800359c:	5802541c 	.word	0x5802541c
 80035a0:	58025430 	.word	0x58025430
 80035a4:	58025444 	.word	0x58025444
 80035a8:	58025458 	.word	0x58025458
 80035ac:	5802546c 	.word	0x5802546c
 80035b0:	58025480 	.word	0x58025480
 80035b4:	58025494 	.word	0x58025494
 80035b8:	2300      	movs	r3, #0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d028      	beq.n	8003610 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035cc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035d8:	f003 031f 	and.w	r3, r3, #31
 80035dc:	2201      	movs	r2, #1
 80035de:	409a      	lsls	r2, r3
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80035ec:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00c      	beq.n	8003610 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003600:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003604:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800360e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003624:	2b00      	cmp	r3, #0
 8003626:	d003      	beq.n	8003630 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3710      	adds	r7, #16
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop

0800363c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b08a      	sub	sp, #40	; 0x28
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003644:	2300      	movs	r3, #0
 8003646:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003648:	4b67      	ldr	r3, [pc, #412]	; (80037e8 <HAL_DMA_IRQHandler+0x1ac>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a67      	ldr	r2, [pc, #412]	; (80037ec <HAL_DMA_IRQHandler+0x1b0>)
 800364e:	fba2 2303 	umull	r2, r3, r2, r3
 8003652:	0a9b      	lsrs	r3, r3, #10
 8003654:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800365a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003660:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003662:	6a3b      	ldr	r3, [r7, #32]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a5f      	ldr	r2, [pc, #380]	; (80037f0 <HAL_DMA_IRQHandler+0x1b4>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d04a      	beq.n	800370e <HAL_DMA_IRQHandler+0xd2>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a5d      	ldr	r2, [pc, #372]	; (80037f4 <HAL_DMA_IRQHandler+0x1b8>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d045      	beq.n	800370e <HAL_DMA_IRQHandler+0xd2>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a5c      	ldr	r2, [pc, #368]	; (80037f8 <HAL_DMA_IRQHandler+0x1bc>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d040      	beq.n	800370e <HAL_DMA_IRQHandler+0xd2>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a5a      	ldr	r2, [pc, #360]	; (80037fc <HAL_DMA_IRQHandler+0x1c0>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d03b      	beq.n	800370e <HAL_DMA_IRQHandler+0xd2>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a59      	ldr	r2, [pc, #356]	; (8003800 <HAL_DMA_IRQHandler+0x1c4>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d036      	beq.n	800370e <HAL_DMA_IRQHandler+0xd2>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a57      	ldr	r2, [pc, #348]	; (8003804 <HAL_DMA_IRQHandler+0x1c8>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d031      	beq.n	800370e <HAL_DMA_IRQHandler+0xd2>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a56      	ldr	r2, [pc, #344]	; (8003808 <HAL_DMA_IRQHandler+0x1cc>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d02c      	beq.n	800370e <HAL_DMA_IRQHandler+0xd2>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a54      	ldr	r2, [pc, #336]	; (800380c <HAL_DMA_IRQHandler+0x1d0>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d027      	beq.n	800370e <HAL_DMA_IRQHandler+0xd2>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a53      	ldr	r2, [pc, #332]	; (8003810 <HAL_DMA_IRQHandler+0x1d4>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d022      	beq.n	800370e <HAL_DMA_IRQHandler+0xd2>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a51      	ldr	r2, [pc, #324]	; (8003814 <HAL_DMA_IRQHandler+0x1d8>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d01d      	beq.n	800370e <HAL_DMA_IRQHandler+0xd2>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a50      	ldr	r2, [pc, #320]	; (8003818 <HAL_DMA_IRQHandler+0x1dc>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d018      	beq.n	800370e <HAL_DMA_IRQHandler+0xd2>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a4e      	ldr	r2, [pc, #312]	; (800381c <HAL_DMA_IRQHandler+0x1e0>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d013      	beq.n	800370e <HAL_DMA_IRQHandler+0xd2>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a4d      	ldr	r2, [pc, #308]	; (8003820 <HAL_DMA_IRQHandler+0x1e4>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d00e      	beq.n	800370e <HAL_DMA_IRQHandler+0xd2>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a4b      	ldr	r2, [pc, #300]	; (8003824 <HAL_DMA_IRQHandler+0x1e8>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d009      	beq.n	800370e <HAL_DMA_IRQHandler+0xd2>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a4a      	ldr	r2, [pc, #296]	; (8003828 <HAL_DMA_IRQHandler+0x1ec>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d004      	beq.n	800370e <HAL_DMA_IRQHandler+0xd2>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a48      	ldr	r2, [pc, #288]	; (800382c <HAL_DMA_IRQHandler+0x1f0>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d101      	bne.n	8003712 <HAL_DMA_IRQHandler+0xd6>
 800370e:	2301      	movs	r3, #1
 8003710:	e000      	b.n	8003714 <HAL_DMA_IRQHandler+0xd8>
 8003712:	2300      	movs	r3, #0
 8003714:	2b00      	cmp	r3, #0
 8003716:	f000 842b 	beq.w	8003f70 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800371e:	f003 031f 	and.w	r3, r3, #31
 8003722:	2208      	movs	r2, #8
 8003724:	409a      	lsls	r2, r3
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	4013      	ands	r3, r2
 800372a:	2b00      	cmp	r3, #0
 800372c:	f000 80a2 	beq.w	8003874 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a2e      	ldr	r2, [pc, #184]	; (80037f0 <HAL_DMA_IRQHandler+0x1b4>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d04a      	beq.n	80037d0 <HAL_DMA_IRQHandler+0x194>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a2d      	ldr	r2, [pc, #180]	; (80037f4 <HAL_DMA_IRQHandler+0x1b8>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d045      	beq.n	80037d0 <HAL_DMA_IRQHandler+0x194>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a2b      	ldr	r2, [pc, #172]	; (80037f8 <HAL_DMA_IRQHandler+0x1bc>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d040      	beq.n	80037d0 <HAL_DMA_IRQHandler+0x194>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a2a      	ldr	r2, [pc, #168]	; (80037fc <HAL_DMA_IRQHandler+0x1c0>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d03b      	beq.n	80037d0 <HAL_DMA_IRQHandler+0x194>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a28      	ldr	r2, [pc, #160]	; (8003800 <HAL_DMA_IRQHandler+0x1c4>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d036      	beq.n	80037d0 <HAL_DMA_IRQHandler+0x194>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a27      	ldr	r2, [pc, #156]	; (8003804 <HAL_DMA_IRQHandler+0x1c8>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d031      	beq.n	80037d0 <HAL_DMA_IRQHandler+0x194>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a25      	ldr	r2, [pc, #148]	; (8003808 <HAL_DMA_IRQHandler+0x1cc>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d02c      	beq.n	80037d0 <HAL_DMA_IRQHandler+0x194>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a24      	ldr	r2, [pc, #144]	; (800380c <HAL_DMA_IRQHandler+0x1d0>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d027      	beq.n	80037d0 <HAL_DMA_IRQHandler+0x194>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a22      	ldr	r2, [pc, #136]	; (8003810 <HAL_DMA_IRQHandler+0x1d4>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d022      	beq.n	80037d0 <HAL_DMA_IRQHandler+0x194>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a21      	ldr	r2, [pc, #132]	; (8003814 <HAL_DMA_IRQHandler+0x1d8>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d01d      	beq.n	80037d0 <HAL_DMA_IRQHandler+0x194>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a1f      	ldr	r2, [pc, #124]	; (8003818 <HAL_DMA_IRQHandler+0x1dc>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d018      	beq.n	80037d0 <HAL_DMA_IRQHandler+0x194>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a1e      	ldr	r2, [pc, #120]	; (800381c <HAL_DMA_IRQHandler+0x1e0>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d013      	beq.n	80037d0 <HAL_DMA_IRQHandler+0x194>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a1c      	ldr	r2, [pc, #112]	; (8003820 <HAL_DMA_IRQHandler+0x1e4>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d00e      	beq.n	80037d0 <HAL_DMA_IRQHandler+0x194>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a1b      	ldr	r2, [pc, #108]	; (8003824 <HAL_DMA_IRQHandler+0x1e8>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d009      	beq.n	80037d0 <HAL_DMA_IRQHandler+0x194>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a19      	ldr	r2, [pc, #100]	; (8003828 <HAL_DMA_IRQHandler+0x1ec>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d004      	beq.n	80037d0 <HAL_DMA_IRQHandler+0x194>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a18      	ldr	r2, [pc, #96]	; (800382c <HAL_DMA_IRQHandler+0x1f0>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d12f      	bne.n	8003830 <HAL_DMA_IRQHandler+0x1f4>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0304 	and.w	r3, r3, #4
 80037da:	2b00      	cmp	r3, #0
 80037dc:	bf14      	ite	ne
 80037de:	2301      	movne	r3, #1
 80037e0:	2300      	moveq	r3, #0
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	e02e      	b.n	8003844 <HAL_DMA_IRQHandler+0x208>
 80037e6:	bf00      	nop
 80037e8:	24000000 	.word	0x24000000
 80037ec:	1b4e81b5 	.word	0x1b4e81b5
 80037f0:	40020010 	.word	0x40020010
 80037f4:	40020028 	.word	0x40020028
 80037f8:	40020040 	.word	0x40020040
 80037fc:	40020058 	.word	0x40020058
 8003800:	40020070 	.word	0x40020070
 8003804:	40020088 	.word	0x40020088
 8003808:	400200a0 	.word	0x400200a0
 800380c:	400200b8 	.word	0x400200b8
 8003810:	40020410 	.word	0x40020410
 8003814:	40020428 	.word	0x40020428
 8003818:	40020440 	.word	0x40020440
 800381c:	40020458 	.word	0x40020458
 8003820:	40020470 	.word	0x40020470
 8003824:	40020488 	.word	0x40020488
 8003828:	400204a0 	.word	0x400204a0
 800382c:	400204b8 	.word	0x400204b8
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0308 	and.w	r3, r3, #8
 800383a:	2b00      	cmp	r3, #0
 800383c:	bf14      	ite	ne
 800383e:	2301      	movne	r3, #1
 8003840:	2300      	moveq	r3, #0
 8003842:	b2db      	uxtb	r3, r3
 8003844:	2b00      	cmp	r3, #0
 8003846:	d015      	beq.n	8003874 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f022 0204 	bic.w	r2, r2, #4
 8003856:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800385c:	f003 031f 	and.w	r3, r3, #31
 8003860:	2208      	movs	r2, #8
 8003862:	409a      	lsls	r2, r3
 8003864:	6a3b      	ldr	r3, [r7, #32]
 8003866:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800386c:	f043 0201 	orr.w	r2, r3, #1
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003878:	f003 031f 	and.w	r3, r3, #31
 800387c:	69ba      	ldr	r2, [r7, #24]
 800387e:	fa22 f303 	lsr.w	r3, r2, r3
 8003882:	f003 0301 	and.w	r3, r3, #1
 8003886:	2b00      	cmp	r3, #0
 8003888:	d06e      	beq.n	8003968 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a69      	ldr	r2, [pc, #420]	; (8003a34 <HAL_DMA_IRQHandler+0x3f8>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d04a      	beq.n	800392a <HAL_DMA_IRQHandler+0x2ee>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a67      	ldr	r2, [pc, #412]	; (8003a38 <HAL_DMA_IRQHandler+0x3fc>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d045      	beq.n	800392a <HAL_DMA_IRQHandler+0x2ee>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a66      	ldr	r2, [pc, #408]	; (8003a3c <HAL_DMA_IRQHandler+0x400>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d040      	beq.n	800392a <HAL_DMA_IRQHandler+0x2ee>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a64      	ldr	r2, [pc, #400]	; (8003a40 <HAL_DMA_IRQHandler+0x404>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d03b      	beq.n	800392a <HAL_DMA_IRQHandler+0x2ee>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a63      	ldr	r2, [pc, #396]	; (8003a44 <HAL_DMA_IRQHandler+0x408>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d036      	beq.n	800392a <HAL_DMA_IRQHandler+0x2ee>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a61      	ldr	r2, [pc, #388]	; (8003a48 <HAL_DMA_IRQHandler+0x40c>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d031      	beq.n	800392a <HAL_DMA_IRQHandler+0x2ee>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a60      	ldr	r2, [pc, #384]	; (8003a4c <HAL_DMA_IRQHandler+0x410>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d02c      	beq.n	800392a <HAL_DMA_IRQHandler+0x2ee>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a5e      	ldr	r2, [pc, #376]	; (8003a50 <HAL_DMA_IRQHandler+0x414>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d027      	beq.n	800392a <HAL_DMA_IRQHandler+0x2ee>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a5d      	ldr	r2, [pc, #372]	; (8003a54 <HAL_DMA_IRQHandler+0x418>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d022      	beq.n	800392a <HAL_DMA_IRQHandler+0x2ee>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a5b      	ldr	r2, [pc, #364]	; (8003a58 <HAL_DMA_IRQHandler+0x41c>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d01d      	beq.n	800392a <HAL_DMA_IRQHandler+0x2ee>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a5a      	ldr	r2, [pc, #360]	; (8003a5c <HAL_DMA_IRQHandler+0x420>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d018      	beq.n	800392a <HAL_DMA_IRQHandler+0x2ee>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a58      	ldr	r2, [pc, #352]	; (8003a60 <HAL_DMA_IRQHandler+0x424>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d013      	beq.n	800392a <HAL_DMA_IRQHandler+0x2ee>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a57      	ldr	r2, [pc, #348]	; (8003a64 <HAL_DMA_IRQHandler+0x428>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d00e      	beq.n	800392a <HAL_DMA_IRQHandler+0x2ee>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a55      	ldr	r2, [pc, #340]	; (8003a68 <HAL_DMA_IRQHandler+0x42c>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d009      	beq.n	800392a <HAL_DMA_IRQHandler+0x2ee>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a54      	ldr	r2, [pc, #336]	; (8003a6c <HAL_DMA_IRQHandler+0x430>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d004      	beq.n	800392a <HAL_DMA_IRQHandler+0x2ee>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a52      	ldr	r2, [pc, #328]	; (8003a70 <HAL_DMA_IRQHandler+0x434>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d10a      	bne.n	8003940 <HAL_DMA_IRQHandler+0x304>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	695b      	ldr	r3, [r3, #20]
 8003930:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003934:	2b00      	cmp	r3, #0
 8003936:	bf14      	ite	ne
 8003938:	2301      	movne	r3, #1
 800393a:	2300      	moveq	r3, #0
 800393c:	b2db      	uxtb	r3, r3
 800393e:	e003      	b.n	8003948 <HAL_DMA_IRQHandler+0x30c>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2300      	movs	r3, #0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d00d      	beq.n	8003968 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003950:	f003 031f 	and.w	r3, r3, #31
 8003954:	2201      	movs	r2, #1
 8003956:	409a      	lsls	r2, r3
 8003958:	6a3b      	ldr	r3, [r7, #32]
 800395a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003960:	f043 0202 	orr.w	r2, r3, #2
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800396c:	f003 031f 	and.w	r3, r3, #31
 8003970:	2204      	movs	r2, #4
 8003972:	409a      	lsls	r2, r3
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	4013      	ands	r3, r2
 8003978:	2b00      	cmp	r3, #0
 800397a:	f000 808f 	beq.w	8003a9c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a2c      	ldr	r2, [pc, #176]	; (8003a34 <HAL_DMA_IRQHandler+0x3f8>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d04a      	beq.n	8003a1e <HAL_DMA_IRQHandler+0x3e2>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a2a      	ldr	r2, [pc, #168]	; (8003a38 <HAL_DMA_IRQHandler+0x3fc>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d045      	beq.n	8003a1e <HAL_DMA_IRQHandler+0x3e2>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a29      	ldr	r2, [pc, #164]	; (8003a3c <HAL_DMA_IRQHandler+0x400>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d040      	beq.n	8003a1e <HAL_DMA_IRQHandler+0x3e2>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a27      	ldr	r2, [pc, #156]	; (8003a40 <HAL_DMA_IRQHandler+0x404>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d03b      	beq.n	8003a1e <HAL_DMA_IRQHandler+0x3e2>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a26      	ldr	r2, [pc, #152]	; (8003a44 <HAL_DMA_IRQHandler+0x408>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d036      	beq.n	8003a1e <HAL_DMA_IRQHandler+0x3e2>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a24      	ldr	r2, [pc, #144]	; (8003a48 <HAL_DMA_IRQHandler+0x40c>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d031      	beq.n	8003a1e <HAL_DMA_IRQHandler+0x3e2>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a23      	ldr	r2, [pc, #140]	; (8003a4c <HAL_DMA_IRQHandler+0x410>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d02c      	beq.n	8003a1e <HAL_DMA_IRQHandler+0x3e2>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a21      	ldr	r2, [pc, #132]	; (8003a50 <HAL_DMA_IRQHandler+0x414>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d027      	beq.n	8003a1e <HAL_DMA_IRQHandler+0x3e2>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a20      	ldr	r2, [pc, #128]	; (8003a54 <HAL_DMA_IRQHandler+0x418>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d022      	beq.n	8003a1e <HAL_DMA_IRQHandler+0x3e2>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a1e      	ldr	r2, [pc, #120]	; (8003a58 <HAL_DMA_IRQHandler+0x41c>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d01d      	beq.n	8003a1e <HAL_DMA_IRQHandler+0x3e2>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a1d      	ldr	r2, [pc, #116]	; (8003a5c <HAL_DMA_IRQHandler+0x420>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d018      	beq.n	8003a1e <HAL_DMA_IRQHandler+0x3e2>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a1b      	ldr	r2, [pc, #108]	; (8003a60 <HAL_DMA_IRQHandler+0x424>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d013      	beq.n	8003a1e <HAL_DMA_IRQHandler+0x3e2>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a1a      	ldr	r2, [pc, #104]	; (8003a64 <HAL_DMA_IRQHandler+0x428>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d00e      	beq.n	8003a1e <HAL_DMA_IRQHandler+0x3e2>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a18      	ldr	r2, [pc, #96]	; (8003a68 <HAL_DMA_IRQHandler+0x42c>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d009      	beq.n	8003a1e <HAL_DMA_IRQHandler+0x3e2>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a17      	ldr	r2, [pc, #92]	; (8003a6c <HAL_DMA_IRQHandler+0x430>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d004      	beq.n	8003a1e <HAL_DMA_IRQHandler+0x3e2>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a15      	ldr	r2, [pc, #84]	; (8003a70 <HAL_DMA_IRQHandler+0x434>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d12a      	bne.n	8003a74 <HAL_DMA_IRQHandler+0x438>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0302 	and.w	r3, r3, #2
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	bf14      	ite	ne
 8003a2c:	2301      	movne	r3, #1
 8003a2e:	2300      	moveq	r3, #0
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	e023      	b.n	8003a7c <HAL_DMA_IRQHandler+0x440>
 8003a34:	40020010 	.word	0x40020010
 8003a38:	40020028 	.word	0x40020028
 8003a3c:	40020040 	.word	0x40020040
 8003a40:	40020058 	.word	0x40020058
 8003a44:	40020070 	.word	0x40020070
 8003a48:	40020088 	.word	0x40020088
 8003a4c:	400200a0 	.word	0x400200a0
 8003a50:	400200b8 	.word	0x400200b8
 8003a54:	40020410 	.word	0x40020410
 8003a58:	40020428 	.word	0x40020428
 8003a5c:	40020440 	.word	0x40020440
 8003a60:	40020458 	.word	0x40020458
 8003a64:	40020470 	.word	0x40020470
 8003a68:	40020488 	.word	0x40020488
 8003a6c:	400204a0 	.word	0x400204a0
 8003a70:	400204b8 	.word	0x400204b8
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d00d      	beq.n	8003a9c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a84:	f003 031f 	and.w	r3, r3, #31
 8003a88:	2204      	movs	r2, #4
 8003a8a:	409a      	lsls	r2, r3
 8003a8c:	6a3b      	ldr	r3, [r7, #32]
 8003a8e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a94:	f043 0204 	orr.w	r2, r3, #4
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aa0:	f003 031f 	and.w	r3, r3, #31
 8003aa4:	2210      	movs	r2, #16
 8003aa6:	409a      	lsls	r2, r3
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	4013      	ands	r3, r2
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	f000 80a6 	beq.w	8003bfe <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a85      	ldr	r2, [pc, #532]	; (8003ccc <HAL_DMA_IRQHandler+0x690>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d04a      	beq.n	8003b52 <HAL_DMA_IRQHandler+0x516>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a83      	ldr	r2, [pc, #524]	; (8003cd0 <HAL_DMA_IRQHandler+0x694>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d045      	beq.n	8003b52 <HAL_DMA_IRQHandler+0x516>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a82      	ldr	r2, [pc, #520]	; (8003cd4 <HAL_DMA_IRQHandler+0x698>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d040      	beq.n	8003b52 <HAL_DMA_IRQHandler+0x516>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a80      	ldr	r2, [pc, #512]	; (8003cd8 <HAL_DMA_IRQHandler+0x69c>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d03b      	beq.n	8003b52 <HAL_DMA_IRQHandler+0x516>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a7f      	ldr	r2, [pc, #508]	; (8003cdc <HAL_DMA_IRQHandler+0x6a0>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d036      	beq.n	8003b52 <HAL_DMA_IRQHandler+0x516>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a7d      	ldr	r2, [pc, #500]	; (8003ce0 <HAL_DMA_IRQHandler+0x6a4>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d031      	beq.n	8003b52 <HAL_DMA_IRQHandler+0x516>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a7c      	ldr	r2, [pc, #496]	; (8003ce4 <HAL_DMA_IRQHandler+0x6a8>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d02c      	beq.n	8003b52 <HAL_DMA_IRQHandler+0x516>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a7a      	ldr	r2, [pc, #488]	; (8003ce8 <HAL_DMA_IRQHandler+0x6ac>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d027      	beq.n	8003b52 <HAL_DMA_IRQHandler+0x516>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a79      	ldr	r2, [pc, #484]	; (8003cec <HAL_DMA_IRQHandler+0x6b0>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d022      	beq.n	8003b52 <HAL_DMA_IRQHandler+0x516>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a77      	ldr	r2, [pc, #476]	; (8003cf0 <HAL_DMA_IRQHandler+0x6b4>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d01d      	beq.n	8003b52 <HAL_DMA_IRQHandler+0x516>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a76      	ldr	r2, [pc, #472]	; (8003cf4 <HAL_DMA_IRQHandler+0x6b8>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d018      	beq.n	8003b52 <HAL_DMA_IRQHandler+0x516>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a74      	ldr	r2, [pc, #464]	; (8003cf8 <HAL_DMA_IRQHandler+0x6bc>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d013      	beq.n	8003b52 <HAL_DMA_IRQHandler+0x516>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a73      	ldr	r2, [pc, #460]	; (8003cfc <HAL_DMA_IRQHandler+0x6c0>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d00e      	beq.n	8003b52 <HAL_DMA_IRQHandler+0x516>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a71      	ldr	r2, [pc, #452]	; (8003d00 <HAL_DMA_IRQHandler+0x6c4>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d009      	beq.n	8003b52 <HAL_DMA_IRQHandler+0x516>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a70      	ldr	r2, [pc, #448]	; (8003d04 <HAL_DMA_IRQHandler+0x6c8>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d004      	beq.n	8003b52 <HAL_DMA_IRQHandler+0x516>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a6e      	ldr	r2, [pc, #440]	; (8003d08 <HAL_DMA_IRQHandler+0x6cc>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d10a      	bne.n	8003b68 <HAL_DMA_IRQHandler+0x52c>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0308 	and.w	r3, r3, #8
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	bf14      	ite	ne
 8003b60:	2301      	movne	r3, #1
 8003b62:	2300      	moveq	r3, #0
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	e009      	b.n	8003b7c <HAL_DMA_IRQHandler+0x540>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0304 	and.w	r3, r3, #4
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	bf14      	ite	ne
 8003b76:	2301      	movne	r3, #1
 8003b78:	2300      	moveq	r3, #0
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d03e      	beq.n	8003bfe <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b84:	f003 031f 	and.w	r3, r3, #31
 8003b88:	2210      	movs	r2, #16
 8003b8a:	409a      	lsls	r2, r3
 8003b8c:	6a3b      	ldr	r3, [r7, #32]
 8003b8e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d018      	beq.n	8003bd0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d108      	bne.n	8003bbe <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d024      	beq.n	8003bfe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	4798      	blx	r3
 8003bbc:	e01f      	b.n	8003bfe <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d01b      	beq.n	8003bfe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	4798      	blx	r3
 8003bce:	e016      	b.n	8003bfe <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d107      	bne.n	8003bee <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f022 0208 	bic.w	r2, r2, #8
 8003bec:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d003      	beq.n	8003bfe <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c02:	f003 031f 	and.w	r3, r3, #31
 8003c06:	2220      	movs	r2, #32
 8003c08:	409a      	lsls	r2, r3
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	f000 8110 	beq.w	8003e34 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a2c      	ldr	r2, [pc, #176]	; (8003ccc <HAL_DMA_IRQHandler+0x690>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d04a      	beq.n	8003cb4 <HAL_DMA_IRQHandler+0x678>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a2b      	ldr	r2, [pc, #172]	; (8003cd0 <HAL_DMA_IRQHandler+0x694>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d045      	beq.n	8003cb4 <HAL_DMA_IRQHandler+0x678>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a29      	ldr	r2, [pc, #164]	; (8003cd4 <HAL_DMA_IRQHandler+0x698>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d040      	beq.n	8003cb4 <HAL_DMA_IRQHandler+0x678>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a28      	ldr	r2, [pc, #160]	; (8003cd8 <HAL_DMA_IRQHandler+0x69c>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d03b      	beq.n	8003cb4 <HAL_DMA_IRQHandler+0x678>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a26      	ldr	r2, [pc, #152]	; (8003cdc <HAL_DMA_IRQHandler+0x6a0>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d036      	beq.n	8003cb4 <HAL_DMA_IRQHandler+0x678>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a25      	ldr	r2, [pc, #148]	; (8003ce0 <HAL_DMA_IRQHandler+0x6a4>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d031      	beq.n	8003cb4 <HAL_DMA_IRQHandler+0x678>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a23      	ldr	r2, [pc, #140]	; (8003ce4 <HAL_DMA_IRQHandler+0x6a8>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d02c      	beq.n	8003cb4 <HAL_DMA_IRQHandler+0x678>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a22      	ldr	r2, [pc, #136]	; (8003ce8 <HAL_DMA_IRQHandler+0x6ac>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d027      	beq.n	8003cb4 <HAL_DMA_IRQHandler+0x678>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a20      	ldr	r2, [pc, #128]	; (8003cec <HAL_DMA_IRQHandler+0x6b0>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d022      	beq.n	8003cb4 <HAL_DMA_IRQHandler+0x678>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a1f      	ldr	r2, [pc, #124]	; (8003cf0 <HAL_DMA_IRQHandler+0x6b4>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d01d      	beq.n	8003cb4 <HAL_DMA_IRQHandler+0x678>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a1d      	ldr	r2, [pc, #116]	; (8003cf4 <HAL_DMA_IRQHandler+0x6b8>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d018      	beq.n	8003cb4 <HAL_DMA_IRQHandler+0x678>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a1c      	ldr	r2, [pc, #112]	; (8003cf8 <HAL_DMA_IRQHandler+0x6bc>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d013      	beq.n	8003cb4 <HAL_DMA_IRQHandler+0x678>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a1a      	ldr	r2, [pc, #104]	; (8003cfc <HAL_DMA_IRQHandler+0x6c0>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d00e      	beq.n	8003cb4 <HAL_DMA_IRQHandler+0x678>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a19      	ldr	r2, [pc, #100]	; (8003d00 <HAL_DMA_IRQHandler+0x6c4>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d009      	beq.n	8003cb4 <HAL_DMA_IRQHandler+0x678>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a17      	ldr	r2, [pc, #92]	; (8003d04 <HAL_DMA_IRQHandler+0x6c8>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d004      	beq.n	8003cb4 <HAL_DMA_IRQHandler+0x678>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a16      	ldr	r2, [pc, #88]	; (8003d08 <HAL_DMA_IRQHandler+0x6cc>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d12b      	bne.n	8003d0c <HAL_DMA_IRQHandler+0x6d0>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0310 	and.w	r3, r3, #16
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	bf14      	ite	ne
 8003cc2:	2301      	movne	r3, #1
 8003cc4:	2300      	moveq	r3, #0
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	e02a      	b.n	8003d20 <HAL_DMA_IRQHandler+0x6e4>
 8003cca:	bf00      	nop
 8003ccc:	40020010 	.word	0x40020010
 8003cd0:	40020028 	.word	0x40020028
 8003cd4:	40020040 	.word	0x40020040
 8003cd8:	40020058 	.word	0x40020058
 8003cdc:	40020070 	.word	0x40020070
 8003ce0:	40020088 	.word	0x40020088
 8003ce4:	400200a0 	.word	0x400200a0
 8003ce8:	400200b8 	.word	0x400200b8
 8003cec:	40020410 	.word	0x40020410
 8003cf0:	40020428 	.word	0x40020428
 8003cf4:	40020440 	.word	0x40020440
 8003cf8:	40020458 	.word	0x40020458
 8003cfc:	40020470 	.word	0x40020470
 8003d00:	40020488 	.word	0x40020488
 8003d04:	400204a0 	.word	0x400204a0
 8003d08:	400204b8 	.word	0x400204b8
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	bf14      	ite	ne
 8003d1a:	2301      	movne	r3, #1
 8003d1c:	2300      	moveq	r3, #0
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	f000 8087 	beq.w	8003e34 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d2a:	f003 031f 	and.w	r3, r3, #31
 8003d2e:	2220      	movs	r2, #32
 8003d30:	409a      	lsls	r2, r3
 8003d32:	6a3b      	ldr	r3, [r7, #32]
 8003d34:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	2b04      	cmp	r3, #4
 8003d40:	d139      	bne.n	8003db6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f022 0216 	bic.w	r2, r2, #22
 8003d50:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	695a      	ldr	r2, [r3, #20]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d60:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d103      	bne.n	8003d72 <HAL_DMA_IRQHandler+0x736>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d007      	beq.n	8003d82 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f022 0208 	bic.w	r2, r2, #8
 8003d80:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d86:	f003 031f 	and.w	r3, r3, #31
 8003d8a:	223f      	movs	r2, #63	; 0x3f
 8003d8c:	409a      	lsls	r2, r3
 8003d8e:	6a3b      	ldr	r3, [r7, #32]
 8003d90:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	f000 834a 	beq.w	8004440 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	4798      	blx	r3
          }
          return;
 8003db4:	e344      	b.n	8004440 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d018      	beq.n	8003df6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d108      	bne.n	8003de4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d02c      	beq.n	8003e34 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	4798      	blx	r3
 8003de2:	e027      	b.n	8003e34 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d023      	beq.n	8003e34 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	4798      	blx	r3
 8003df4:	e01e      	b.n	8003e34 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d10f      	bne.n	8003e24 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f022 0210 	bic.w	r2, r2, #16
 8003e12:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d003      	beq.n	8003e34 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	f000 8306 	beq.w	800444a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e42:	f003 0301 	and.w	r3, r3, #1
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	f000 8088 	beq.w	8003f5c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2204      	movs	r2, #4
 8003e50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a7a      	ldr	r2, [pc, #488]	; (8004044 <HAL_DMA_IRQHandler+0xa08>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d04a      	beq.n	8003ef4 <HAL_DMA_IRQHandler+0x8b8>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a79      	ldr	r2, [pc, #484]	; (8004048 <HAL_DMA_IRQHandler+0xa0c>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d045      	beq.n	8003ef4 <HAL_DMA_IRQHandler+0x8b8>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a77      	ldr	r2, [pc, #476]	; (800404c <HAL_DMA_IRQHandler+0xa10>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d040      	beq.n	8003ef4 <HAL_DMA_IRQHandler+0x8b8>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a76      	ldr	r2, [pc, #472]	; (8004050 <HAL_DMA_IRQHandler+0xa14>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d03b      	beq.n	8003ef4 <HAL_DMA_IRQHandler+0x8b8>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a74      	ldr	r2, [pc, #464]	; (8004054 <HAL_DMA_IRQHandler+0xa18>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d036      	beq.n	8003ef4 <HAL_DMA_IRQHandler+0x8b8>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a73      	ldr	r2, [pc, #460]	; (8004058 <HAL_DMA_IRQHandler+0xa1c>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d031      	beq.n	8003ef4 <HAL_DMA_IRQHandler+0x8b8>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a71      	ldr	r2, [pc, #452]	; (800405c <HAL_DMA_IRQHandler+0xa20>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d02c      	beq.n	8003ef4 <HAL_DMA_IRQHandler+0x8b8>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a70      	ldr	r2, [pc, #448]	; (8004060 <HAL_DMA_IRQHandler+0xa24>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d027      	beq.n	8003ef4 <HAL_DMA_IRQHandler+0x8b8>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a6e      	ldr	r2, [pc, #440]	; (8004064 <HAL_DMA_IRQHandler+0xa28>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d022      	beq.n	8003ef4 <HAL_DMA_IRQHandler+0x8b8>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a6d      	ldr	r2, [pc, #436]	; (8004068 <HAL_DMA_IRQHandler+0xa2c>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d01d      	beq.n	8003ef4 <HAL_DMA_IRQHandler+0x8b8>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a6b      	ldr	r2, [pc, #428]	; (800406c <HAL_DMA_IRQHandler+0xa30>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d018      	beq.n	8003ef4 <HAL_DMA_IRQHandler+0x8b8>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a6a      	ldr	r2, [pc, #424]	; (8004070 <HAL_DMA_IRQHandler+0xa34>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d013      	beq.n	8003ef4 <HAL_DMA_IRQHandler+0x8b8>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a68      	ldr	r2, [pc, #416]	; (8004074 <HAL_DMA_IRQHandler+0xa38>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d00e      	beq.n	8003ef4 <HAL_DMA_IRQHandler+0x8b8>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a67      	ldr	r2, [pc, #412]	; (8004078 <HAL_DMA_IRQHandler+0xa3c>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d009      	beq.n	8003ef4 <HAL_DMA_IRQHandler+0x8b8>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a65      	ldr	r2, [pc, #404]	; (800407c <HAL_DMA_IRQHandler+0xa40>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d004      	beq.n	8003ef4 <HAL_DMA_IRQHandler+0x8b8>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a64      	ldr	r2, [pc, #400]	; (8004080 <HAL_DMA_IRQHandler+0xa44>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d108      	bne.n	8003f06 <HAL_DMA_IRQHandler+0x8ca>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f022 0201 	bic.w	r2, r2, #1
 8003f02:	601a      	str	r2, [r3, #0]
 8003f04:	e007      	b.n	8003f16 <HAL_DMA_IRQHandler+0x8da>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f022 0201 	bic.w	r2, r2, #1
 8003f14:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	3301      	adds	r3, #1
 8003f1a:	60fb      	str	r3, [r7, #12]
 8003f1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d307      	bcc.n	8003f32 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0301 	and.w	r3, r3, #1
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d1f2      	bne.n	8003f16 <HAL_DMA_IRQHandler+0x8da>
 8003f30:	e000      	b.n	8003f34 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003f32:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0301 	and.w	r3, r3, #1
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d004      	beq.n	8003f54 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2203      	movs	r2, #3
 8003f4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003f52:	e003      	b.n	8003f5c <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f000 8272 	beq.w	800444a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	4798      	blx	r3
 8003f6e:	e26c      	b.n	800444a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a43      	ldr	r2, [pc, #268]	; (8004084 <HAL_DMA_IRQHandler+0xa48>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d022      	beq.n	8003fc0 <HAL_DMA_IRQHandler+0x984>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a42      	ldr	r2, [pc, #264]	; (8004088 <HAL_DMA_IRQHandler+0xa4c>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d01d      	beq.n	8003fc0 <HAL_DMA_IRQHandler+0x984>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a40      	ldr	r2, [pc, #256]	; (800408c <HAL_DMA_IRQHandler+0xa50>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d018      	beq.n	8003fc0 <HAL_DMA_IRQHandler+0x984>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a3f      	ldr	r2, [pc, #252]	; (8004090 <HAL_DMA_IRQHandler+0xa54>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d013      	beq.n	8003fc0 <HAL_DMA_IRQHandler+0x984>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a3d      	ldr	r2, [pc, #244]	; (8004094 <HAL_DMA_IRQHandler+0xa58>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d00e      	beq.n	8003fc0 <HAL_DMA_IRQHandler+0x984>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a3c      	ldr	r2, [pc, #240]	; (8004098 <HAL_DMA_IRQHandler+0xa5c>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d009      	beq.n	8003fc0 <HAL_DMA_IRQHandler+0x984>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a3a      	ldr	r2, [pc, #232]	; (800409c <HAL_DMA_IRQHandler+0xa60>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d004      	beq.n	8003fc0 <HAL_DMA_IRQHandler+0x984>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a39      	ldr	r2, [pc, #228]	; (80040a0 <HAL_DMA_IRQHandler+0xa64>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d101      	bne.n	8003fc4 <HAL_DMA_IRQHandler+0x988>
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e000      	b.n	8003fc6 <HAL_DMA_IRQHandler+0x98a>
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	f000 823f 	beq.w	800444a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fd8:	f003 031f 	and.w	r3, r3, #31
 8003fdc:	2204      	movs	r2, #4
 8003fde:	409a      	lsls	r2, r3
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	f000 80cd 	beq.w	8004184 <HAL_DMA_IRQHandler+0xb48>
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	f003 0304 	and.w	r3, r3, #4
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	f000 80c7 	beq.w	8004184 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ffa:	f003 031f 	and.w	r3, r3, #31
 8003ffe:	2204      	movs	r2, #4
 8004000:	409a      	lsls	r2, r3
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d049      	beq.n	80040a4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d109      	bne.n	800402e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800401e:	2b00      	cmp	r3, #0
 8004020:	f000 8210 	beq.w	8004444 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800402c:	e20a      	b.n	8004444 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004032:	2b00      	cmp	r3, #0
 8004034:	f000 8206 	beq.w	8004444 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004040:	e200      	b.n	8004444 <HAL_DMA_IRQHandler+0xe08>
 8004042:	bf00      	nop
 8004044:	40020010 	.word	0x40020010
 8004048:	40020028 	.word	0x40020028
 800404c:	40020040 	.word	0x40020040
 8004050:	40020058 	.word	0x40020058
 8004054:	40020070 	.word	0x40020070
 8004058:	40020088 	.word	0x40020088
 800405c:	400200a0 	.word	0x400200a0
 8004060:	400200b8 	.word	0x400200b8
 8004064:	40020410 	.word	0x40020410
 8004068:	40020428 	.word	0x40020428
 800406c:	40020440 	.word	0x40020440
 8004070:	40020458 	.word	0x40020458
 8004074:	40020470 	.word	0x40020470
 8004078:	40020488 	.word	0x40020488
 800407c:	400204a0 	.word	0x400204a0
 8004080:	400204b8 	.word	0x400204b8
 8004084:	58025408 	.word	0x58025408
 8004088:	5802541c 	.word	0x5802541c
 800408c:	58025430 	.word	0x58025430
 8004090:	58025444 	.word	0x58025444
 8004094:	58025458 	.word	0x58025458
 8004098:	5802546c 	.word	0x5802546c
 800409c:	58025480 	.word	0x58025480
 80040a0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	f003 0320 	and.w	r3, r3, #32
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d160      	bne.n	8004170 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a7f      	ldr	r2, [pc, #508]	; (80042b0 <HAL_DMA_IRQHandler+0xc74>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d04a      	beq.n	800414e <HAL_DMA_IRQHandler+0xb12>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a7d      	ldr	r2, [pc, #500]	; (80042b4 <HAL_DMA_IRQHandler+0xc78>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d045      	beq.n	800414e <HAL_DMA_IRQHandler+0xb12>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a7c      	ldr	r2, [pc, #496]	; (80042b8 <HAL_DMA_IRQHandler+0xc7c>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d040      	beq.n	800414e <HAL_DMA_IRQHandler+0xb12>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a7a      	ldr	r2, [pc, #488]	; (80042bc <HAL_DMA_IRQHandler+0xc80>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d03b      	beq.n	800414e <HAL_DMA_IRQHandler+0xb12>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a79      	ldr	r2, [pc, #484]	; (80042c0 <HAL_DMA_IRQHandler+0xc84>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d036      	beq.n	800414e <HAL_DMA_IRQHandler+0xb12>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a77      	ldr	r2, [pc, #476]	; (80042c4 <HAL_DMA_IRQHandler+0xc88>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d031      	beq.n	800414e <HAL_DMA_IRQHandler+0xb12>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a76      	ldr	r2, [pc, #472]	; (80042c8 <HAL_DMA_IRQHandler+0xc8c>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d02c      	beq.n	800414e <HAL_DMA_IRQHandler+0xb12>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a74      	ldr	r2, [pc, #464]	; (80042cc <HAL_DMA_IRQHandler+0xc90>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d027      	beq.n	800414e <HAL_DMA_IRQHandler+0xb12>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a73      	ldr	r2, [pc, #460]	; (80042d0 <HAL_DMA_IRQHandler+0xc94>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d022      	beq.n	800414e <HAL_DMA_IRQHandler+0xb12>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a71      	ldr	r2, [pc, #452]	; (80042d4 <HAL_DMA_IRQHandler+0xc98>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d01d      	beq.n	800414e <HAL_DMA_IRQHandler+0xb12>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a70      	ldr	r2, [pc, #448]	; (80042d8 <HAL_DMA_IRQHandler+0xc9c>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d018      	beq.n	800414e <HAL_DMA_IRQHandler+0xb12>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a6e      	ldr	r2, [pc, #440]	; (80042dc <HAL_DMA_IRQHandler+0xca0>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d013      	beq.n	800414e <HAL_DMA_IRQHandler+0xb12>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a6d      	ldr	r2, [pc, #436]	; (80042e0 <HAL_DMA_IRQHandler+0xca4>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d00e      	beq.n	800414e <HAL_DMA_IRQHandler+0xb12>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a6b      	ldr	r2, [pc, #428]	; (80042e4 <HAL_DMA_IRQHandler+0xca8>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d009      	beq.n	800414e <HAL_DMA_IRQHandler+0xb12>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a6a      	ldr	r2, [pc, #424]	; (80042e8 <HAL_DMA_IRQHandler+0xcac>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d004      	beq.n	800414e <HAL_DMA_IRQHandler+0xb12>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a68      	ldr	r2, [pc, #416]	; (80042ec <HAL_DMA_IRQHandler+0xcb0>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d108      	bne.n	8004160 <HAL_DMA_IRQHandler+0xb24>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f022 0208 	bic.w	r2, r2, #8
 800415c:	601a      	str	r2, [r3, #0]
 800415e:	e007      	b.n	8004170 <HAL_DMA_IRQHandler+0xb34>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f022 0204 	bic.w	r2, r2, #4
 800416e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004174:	2b00      	cmp	r3, #0
 8004176:	f000 8165 	beq.w	8004444 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004182:	e15f      	b.n	8004444 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004188:	f003 031f 	and.w	r3, r3, #31
 800418c:	2202      	movs	r2, #2
 800418e:	409a      	lsls	r2, r3
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	4013      	ands	r3, r2
 8004194:	2b00      	cmp	r3, #0
 8004196:	f000 80c5 	beq.w	8004324 <HAL_DMA_IRQHandler+0xce8>
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	f003 0302 	and.w	r3, r3, #2
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	f000 80bf 	beq.w	8004324 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041aa:	f003 031f 	and.w	r3, r3, #31
 80041ae:	2202      	movs	r2, #2
 80041b0:	409a      	lsls	r2, r3
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d018      	beq.n	80041f2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d109      	bne.n	80041de <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	f000 813a 	beq.w	8004448 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80041dc:	e134      	b.n	8004448 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	f000 8130 	beq.w	8004448 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80041f0:	e12a      	b.n	8004448 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	f003 0320 	and.w	r3, r3, #32
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	f040 8089 	bne.w	8004310 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a2b      	ldr	r2, [pc, #172]	; (80042b0 <HAL_DMA_IRQHandler+0xc74>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d04a      	beq.n	800429e <HAL_DMA_IRQHandler+0xc62>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a29      	ldr	r2, [pc, #164]	; (80042b4 <HAL_DMA_IRQHandler+0xc78>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d045      	beq.n	800429e <HAL_DMA_IRQHandler+0xc62>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a28      	ldr	r2, [pc, #160]	; (80042b8 <HAL_DMA_IRQHandler+0xc7c>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d040      	beq.n	800429e <HAL_DMA_IRQHandler+0xc62>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a26      	ldr	r2, [pc, #152]	; (80042bc <HAL_DMA_IRQHandler+0xc80>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d03b      	beq.n	800429e <HAL_DMA_IRQHandler+0xc62>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a25      	ldr	r2, [pc, #148]	; (80042c0 <HAL_DMA_IRQHandler+0xc84>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d036      	beq.n	800429e <HAL_DMA_IRQHandler+0xc62>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a23      	ldr	r2, [pc, #140]	; (80042c4 <HAL_DMA_IRQHandler+0xc88>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d031      	beq.n	800429e <HAL_DMA_IRQHandler+0xc62>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a22      	ldr	r2, [pc, #136]	; (80042c8 <HAL_DMA_IRQHandler+0xc8c>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d02c      	beq.n	800429e <HAL_DMA_IRQHandler+0xc62>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a20      	ldr	r2, [pc, #128]	; (80042cc <HAL_DMA_IRQHandler+0xc90>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d027      	beq.n	800429e <HAL_DMA_IRQHandler+0xc62>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a1f      	ldr	r2, [pc, #124]	; (80042d0 <HAL_DMA_IRQHandler+0xc94>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d022      	beq.n	800429e <HAL_DMA_IRQHandler+0xc62>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a1d      	ldr	r2, [pc, #116]	; (80042d4 <HAL_DMA_IRQHandler+0xc98>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d01d      	beq.n	800429e <HAL_DMA_IRQHandler+0xc62>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a1c      	ldr	r2, [pc, #112]	; (80042d8 <HAL_DMA_IRQHandler+0xc9c>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d018      	beq.n	800429e <HAL_DMA_IRQHandler+0xc62>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a1a      	ldr	r2, [pc, #104]	; (80042dc <HAL_DMA_IRQHandler+0xca0>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d013      	beq.n	800429e <HAL_DMA_IRQHandler+0xc62>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a19      	ldr	r2, [pc, #100]	; (80042e0 <HAL_DMA_IRQHandler+0xca4>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d00e      	beq.n	800429e <HAL_DMA_IRQHandler+0xc62>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a17      	ldr	r2, [pc, #92]	; (80042e4 <HAL_DMA_IRQHandler+0xca8>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d009      	beq.n	800429e <HAL_DMA_IRQHandler+0xc62>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a16      	ldr	r2, [pc, #88]	; (80042e8 <HAL_DMA_IRQHandler+0xcac>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d004      	beq.n	800429e <HAL_DMA_IRQHandler+0xc62>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a14      	ldr	r2, [pc, #80]	; (80042ec <HAL_DMA_IRQHandler+0xcb0>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d128      	bne.n	80042f0 <HAL_DMA_IRQHandler+0xcb4>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f022 0214 	bic.w	r2, r2, #20
 80042ac:	601a      	str	r2, [r3, #0]
 80042ae:	e027      	b.n	8004300 <HAL_DMA_IRQHandler+0xcc4>
 80042b0:	40020010 	.word	0x40020010
 80042b4:	40020028 	.word	0x40020028
 80042b8:	40020040 	.word	0x40020040
 80042bc:	40020058 	.word	0x40020058
 80042c0:	40020070 	.word	0x40020070
 80042c4:	40020088 	.word	0x40020088
 80042c8:	400200a0 	.word	0x400200a0
 80042cc:	400200b8 	.word	0x400200b8
 80042d0:	40020410 	.word	0x40020410
 80042d4:	40020428 	.word	0x40020428
 80042d8:	40020440 	.word	0x40020440
 80042dc:	40020458 	.word	0x40020458
 80042e0:	40020470 	.word	0x40020470
 80042e4:	40020488 	.word	0x40020488
 80042e8:	400204a0 	.word	0x400204a0
 80042ec:	400204b8 	.word	0x400204b8
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f022 020a 	bic.w	r2, r2, #10
 80042fe:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004314:	2b00      	cmp	r3, #0
 8004316:	f000 8097 	beq.w	8004448 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004322:	e091      	b.n	8004448 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004328:	f003 031f 	and.w	r3, r3, #31
 800432c:	2208      	movs	r2, #8
 800432e:	409a      	lsls	r2, r3
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	4013      	ands	r3, r2
 8004334:	2b00      	cmp	r3, #0
 8004336:	f000 8088 	beq.w	800444a <HAL_DMA_IRQHandler+0xe0e>
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	f003 0308 	and.w	r3, r3, #8
 8004340:	2b00      	cmp	r3, #0
 8004342:	f000 8082 	beq.w	800444a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a41      	ldr	r2, [pc, #260]	; (8004450 <HAL_DMA_IRQHandler+0xe14>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d04a      	beq.n	80043e6 <HAL_DMA_IRQHandler+0xdaa>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a3f      	ldr	r2, [pc, #252]	; (8004454 <HAL_DMA_IRQHandler+0xe18>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d045      	beq.n	80043e6 <HAL_DMA_IRQHandler+0xdaa>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a3e      	ldr	r2, [pc, #248]	; (8004458 <HAL_DMA_IRQHandler+0xe1c>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d040      	beq.n	80043e6 <HAL_DMA_IRQHandler+0xdaa>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a3c      	ldr	r2, [pc, #240]	; (800445c <HAL_DMA_IRQHandler+0xe20>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d03b      	beq.n	80043e6 <HAL_DMA_IRQHandler+0xdaa>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a3b      	ldr	r2, [pc, #236]	; (8004460 <HAL_DMA_IRQHandler+0xe24>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d036      	beq.n	80043e6 <HAL_DMA_IRQHandler+0xdaa>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a39      	ldr	r2, [pc, #228]	; (8004464 <HAL_DMA_IRQHandler+0xe28>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d031      	beq.n	80043e6 <HAL_DMA_IRQHandler+0xdaa>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a38      	ldr	r2, [pc, #224]	; (8004468 <HAL_DMA_IRQHandler+0xe2c>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d02c      	beq.n	80043e6 <HAL_DMA_IRQHandler+0xdaa>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a36      	ldr	r2, [pc, #216]	; (800446c <HAL_DMA_IRQHandler+0xe30>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d027      	beq.n	80043e6 <HAL_DMA_IRQHandler+0xdaa>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a35      	ldr	r2, [pc, #212]	; (8004470 <HAL_DMA_IRQHandler+0xe34>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d022      	beq.n	80043e6 <HAL_DMA_IRQHandler+0xdaa>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a33      	ldr	r2, [pc, #204]	; (8004474 <HAL_DMA_IRQHandler+0xe38>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d01d      	beq.n	80043e6 <HAL_DMA_IRQHandler+0xdaa>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a32      	ldr	r2, [pc, #200]	; (8004478 <HAL_DMA_IRQHandler+0xe3c>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d018      	beq.n	80043e6 <HAL_DMA_IRQHandler+0xdaa>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a30      	ldr	r2, [pc, #192]	; (800447c <HAL_DMA_IRQHandler+0xe40>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d013      	beq.n	80043e6 <HAL_DMA_IRQHandler+0xdaa>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a2f      	ldr	r2, [pc, #188]	; (8004480 <HAL_DMA_IRQHandler+0xe44>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d00e      	beq.n	80043e6 <HAL_DMA_IRQHandler+0xdaa>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a2d      	ldr	r2, [pc, #180]	; (8004484 <HAL_DMA_IRQHandler+0xe48>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d009      	beq.n	80043e6 <HAL_DMA_IRQHandler+0xdaa>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a2c      	ldr	r2, [pc, #176]	; (8004488 <HAL_DMA_IRQHandler+0xe4c>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d004      	beq.n	80043e6 <HAL_DMA_IRQHandler+0xdaa>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a2a      	ldr	r2, [pc, #168]	; (800448c <HAL_DMA_IRQHandler+0xe50>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d108      	bne.n	80043f8 <HAL_DMA_IRQHandler+0xdbc>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f022 021c 	bic.w	r2, r2, #28
 80043f4:	601a      	str	r2, [r3, #0]
 80043f6:	e007      	b.n	8004408 <HAL_DMA_IRQHandler+0xdcc>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f022 020e 	bic.w	r2, r2, #14
 8004406:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800440c:	f003 031f 	and.w	r3, r3, #31
 8004410:	2201      	movs	r2, #1
 8004412:	409a      	lsls	r2, r3
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2201      	movs	r2, #1
 800442a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004432:	2b00      	cmp	r3, #0
 8004434:	d009      	beq.n	800444a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	4798      	blx	r3
 800443e:	e004      	b.n	800444a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004440:	bf00      	nop
 8004442:	e002      	b.n	800444a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004444:	bf00      	nop
 8004446:	e000      	b.n	800444a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004448:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800444a:	3728      	adds	r7, #40	; 0x28
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}
 8004450:	40020010 	.word	0x40020010
 8004454:	40020028 	.word	0x40020028
 8004458:	40020040 	.word	0x40020040
 800445c:	40020058 	.word	0x40020058
 8004460:	40020070 	.word	0x40020070
 8004464:	40020088 	.word	0x40020088
 8004468:	400200a0 	.word	0x400200a0
 800446c:	400200b8 	.word	0x400200b8
 8004470:	40020410 	.word	0x40020410
 8004474:	40020428 	.word	0x40020428
 8004478:	40020440 	.word	0x40020440
 800447c:	40020458 	.word	0x40020458
 8004480:	40020470 	.word	0x40020470
 8004484:	40020488 	.word	0x40020488
 8004488:	400204a0 	.word	0x400204a0
 800448c:	400204b8 	.word	0x400204b8

08004490 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800449e:	b2db      	uxtb	r3, r3
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b087      	sub	sp, #28
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	607a      	str	r2, [r7, #4]
 80044d0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044d6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044dc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a7f      	ldr	r2, [pc, #508]	; (80046e0 <DMA_SetConfig+0x21c>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d072      	beq.n	80045ce <DMA_SetConfig+0x10a>
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a7d      	ldr	r2, [pc, #500]	; (80046e4 <DMA_SetConfig+0x220>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d06d      	beq.n	80045ce <DMA_SetConfig+0x10a>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a7c      	ldr	r2, [pc, #496]	; (80046e8 <DMA_SetConfig+0x224>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d068      	beq.n	80045ce <DMA_SetConfig+0x10a>
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a7a      	ldr	r2, [pc, #488]	; (80046ec <DMA_SetConfig+0x228>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d063      	beq.n	80045ce <DMA_SetConfig+0x10a>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a79      	ldr	r2, [pc, #484]	; (80046f0 <DMA_SetConfig+0x22c>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d05e      	beq.n	80045ce <DMA_SetConfig+0x10a>
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a77      	ldr	r2, [pc, #476]	; (80046f4 <DMA_SetConfig+0x230>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d059      	beq.n	80045ce <DMA_SetConfig+0x10a>
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a76      	ldr	r2, [pc, #472]	; (80046f8 <DMA_SetConfig+0x234>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d054      	beq.n	80045ce <DMA_SetConfig+0x10a>
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a74      	ldr	r2, [pc, #464]	; (80046fc <DMA_SetConfig+0x238>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d04f      	beq.n	80045ce <DMA_SetConfig+0x10a>
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a73      	ldr	r2, [pc, #460]	; (8004700 <DMA_SetConfig+0x23c>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d04a      	beq.n	80045ce <DMA_SetConfig+0x10a>
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a71      	ldr	r2, [pc, #452]	; (8004704 <DMA_SetConfig+0x240>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d045      	beq.n	80045ce <DMA_SetConfig+0x10a>
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a70      	ldr	r2, [pc, #448]	; (8004708 <DMA_SetConfig+0x244>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d040      	beq.n	80045ce <DMA_SetConfig+0x10a>
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a6e      	ldr	r2, [pc, #440]	; (800470c <DMA_SetConfig+0x248>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d03b      	beq.n	80045ce <DMA_SetConfig+0x10a>
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a6d      	ldr	r2, [pc, #436]	; (8004710 <DMA_SetConfig+0x24c>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d036      	beq.n	80045ce <DMA_SetConfig+0x10a>
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a6b      	ldr	r2, [pc, #428]	; (8004714 <DMA_SetConfig+0x250>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d031      	beq.n	80045ce <DMA_SetConfig+0x10a>
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a6a      	ldr	r2, [pc, #424]	; (8004718 <DMA_SetConfig+0x254>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d02c      	beq.n	80045ce <DMA_SetConfig+0x10a>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a68      	ldr	r2, [pc, #416]	; (800471c <DMA_SetConfig+0x258>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d027      	beq.n	80045ce <DMA_SetConfig+0x10a>
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a67      	ldr	r2, [pc, #412]	; (8004720 <DMA_SetConfig+0x25c>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d022      	beq.n	80045ce <DMA_SetConfig+0x10a>
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a65      	ldr	r2, [pc, #404]	; (8004724 <DMA_SetConfig+0x260>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d01d      	beq.n	80045ce <DMA_SetConfig+0x10a>
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a64      	ldr	r2, [pc, #400]	; (8004728 <DMA_SetConfig+0x264>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d018      	beq.n	80045ce <DMA_SetConfig+0x10a>
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a62      	ldr	r2, [pc, #392]	; (800472c <DMA_SetConfig+0x268>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d013      	beq.n	80045ce <DMA_SetConfig+0x10a>
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a61      	ldr	r2, [pc, #388]	; (8004730 <DMA_SetConfig+0x26c>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d00e      	beq.n	80045ce <DMA_SetConfig+0x10a>
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a5f      	ldr	r2, [pc, #380]	; (8004734 <DMA_SetConfig+0x270>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d009      	beq.n	80045ce <DMA_SetConfig+0x10a>
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a5e      	ldr	r2, [pc, #376]	; (8004738 <DMA_SetConfig+0x274>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d004      	beq.n	80045ce <DMA_SetConfig+0x10a>
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a5c      	ldr	r2, [pc, #368]	; (800473c <DMA_SetConfig+0x278>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d101      	bne.n	80045d2 <DMA_SetConfig+0x10e>
 80045ce:	2301      	movs	r3, #1
 80045d0:	e000      	b.n	80045d4 <DMA_SetConfig+0x110>
 80045d2:	2300      	movs	r3, #0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00d      	beq.n	80045f4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045dc:	68fa      	ldr	r2, [r7, #12]
 80045de:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80045e0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d004      	beq.n	80045f4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80045f2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a39      	ldr	r2, [pc, #228]	; (80046e0 <DMA_SetConfig+0x21c>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d04a      	beq.n	8004694 <DMA_SetConfig+0x1d0>
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a38      	ldr	r2, [pc, #224]	; (80046e4 <DMA_SetConfig+0x220>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d045      	beq.n	8004694 <DMA_SetConfig+0x1d0>
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a36      	ldr	r2, [pc, #216]	; (80046e8 <DMA_SetConfig+0x224>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d040      	beq.n	8004694 <DMA_SetConfig+0x1d0>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a35      	ldr	r2, [pc, #212]	; (80046ec <DMA_SetConfig+0x228>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d03b      	beq.n	8004694 <DMA_SetConfig+0x1d0>
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a33      	ldr	r2, [pc, #204]	; (80046f0 <DMA_SetConfig+0x22c>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d036      	beq.n	8004694 <DMA_SetConfig+0x1d0>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a32      	ldr	r2, [pc, #200]	; (80046f4 <DMA_SetConfig+0x230>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d031      	beq.n	8004694 <DMA_SetConfig+0x1d0>
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a30      	ldr	r2, [pc, #192]	; (80046f8 <DMA_SetConfig+0x234>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d02c      	beq.n	8004694 <DMA_SetConfig+0x1d0>
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a2f      	ldr	r2, [pc, #188]	; (80046fc <DMA_SetConfig+0x238>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d027      	beq.n	8004694 <DMA_SetConfig+0x1d0>
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a2d      	ldr	r2, [pc, #180]	; (8004700 <DMA_SetConfig+0x23c>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d022      	beq.n	8004694 <DMA_SetConfig+0x1d0>
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a2c      	ldr	r2, [pc, #176]	; (8004704 <DMA_SetConfig+0x240>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d01d      	beq.n	8004694 <DMA_SetConfig+0x1d0>
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a2a      	ldr	r2, [pc, #168]	; (8004708 <DMA_SetConfig+0x244>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d018      	beq.n	8004694 <DMA_SetConfig+0x1d0>
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a29      	ldr	r2, [pc, #164]	; (800470c <DMA_SetConfig+0x248>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d013      	beq.n	8004694 <DMA_SetConfig+0x1d0>
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a27      	ldr	r2, [pc, #156]	; (8004710 <DMA_SetConfig+0x24c>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d00e      	beq.n	8004694 <DMA_SetConfig+0x1d0>
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a26      	ldr	r2, [pc, #152]	; (8004714 <DMA_SetConfig+0x250>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d009      	beq.n	8004694 <DMA_SetConfig+0x1d0>
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a24      	ldr	r2, [pc, #144]	; (8004718 <DMA_SetConfig+0x254>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d004      	beq.n	8004694 <DMA_SetConfig+0x1d0>
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a23      	ldr	r2, [pc, #140]	; (800471c <DMA_SetConfig+0x258>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d101      	bne.n	8004698 <DMA_SetConfig+0x1d4>
 8004694:	2301      	movs	r3, #1
 8004696:	e000      	b.n	800469a <DMA_SetConfig+0x1d6>
 8004698:	2300      	movs	r3, #0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d059      	beq.n	8004752 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046a2:	f003 031f 	and.w	r3, r3, #31
 80046a6:	223f      	movs	r2, #63	; 0x3f
 80046a8:	409a      	lsls	r2, r3
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80046bc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	683a      	ldr	r2, [r7, #0]
 80046c4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	2b40      	cmp	r3, #64	; 0x40
 80046cc:	d138      	bne.n	8004740 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68ba      	ldr	r2, [r7, #8]
 80046dc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80046de:	e086      	b.n	80047ee <DMA_SetConfig+0x32a>
 80046e0:	40020010 	.word	0x40020010
 80046e4:	40020028 	.word	0x40020028
 80046e8:	40020040 	.word	0x40020040
 80046ec:	40020058 	.word	0x40020058
 80046f0:	40020070 	.word	0x40020070
 80046f4:	40020088 	.word	0x40020088
 80046f8:	400200a0 	.word	0x400200a0
 80046fc:	400200b8 	.word	0x400200b8
 8004700:	40020410 	.word	0x40020410
 8004704:	40020428 	.word	0x40020428
 8004708:	40020440 	.word	0x40020440
 800470c:	40020458 	.word	0x40020458
 8004710:	40020470 	.word	0x40020470
 8004714:	40020488 	.word	0x40020488
 8004718:	400204a0 	.word	0x400204a0
 800471c:	400204b8 	.word	0x400204b8
 8004720:	58025408 	.word	0x58025408
 8004724:	5802541c 	.word	0x5802541c
 8004728:	58025430 	.word	0x58025430
 800472c:	58025444 	.word	0x58025444
 8004730:	58025458 	.word	0x58025458
 8004734:	5802546c 	.word	0x5802546c
 8004738:	58025480 	.word	0x58025480
 800473c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	68ba      	ldr	r2, [r7, #8]
 8004746:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	60da      	str	r2, [r3, #12]
}
 8004750:	e04d      	b.n	80047ee <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a29      	ldr	r2, [pc, #164]	; (80047fc <DMA_SetConfig+0x338>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d022      	beq.n	80047a2 <DMA_SetConfig+0x2de>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a27      	ldr	r2, [pc, #156]	; (8004800 <DMA_SetConfig+0x33c>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d01d      	beq.n	80047a2 <DMA_SetConfig+0x2de>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a26      	ldr	r2, [pc, #152]	; (8004804 <DMA_SetConfig+0x340>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d018      	beq.n	80047a2 <DMA_SetConfig+0x2de>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a24      	ldr	r2, [pc, #144]	; (8004808 <DMA_SetConfig+0x344>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d013      	beq.n	80047a2 <DMA_SetConfig+0x2de>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a23      	ldr	r2, [pc, #140]	; (800480c <DMA_SetConfig+0x348>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d00e      	beq.n	80047a2 <DMA_SetConfig+0x2de>
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a21      	ldr	r2, [pc, #132]	; (8004810 <DMA_SetConfig+0x34c>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d009      	beq.n	80047a2 <DMA_SetConfig+0x2de>
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a20      	ldr	r2, [pc, #128]	; (8004814 <DMA_SetConfig+0x350>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d004      	beq.n	80047a2 <DMA_SetConfig+0x2de>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a1e      	ldr	r2, [pc, #120]	; (8004818 <DMA_SetConfig+0x354>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d101      	bne.n	80047a6 <DMA_SetConfig+0x2e2>
 80047a2:	2301      	movs	r3, #1
 80047a4:	e000      	b.n	80047a8 <DMA_SetConfig+0x2e4>
 80047a6:	2300      	movs	r3, #0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d020      	beq.n	80047ee <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047b0:	f003 031f 	and.w	r3, r3, #31
 80047b4:	2201      	movs	r2, #1
 80047b6:	409a      	lsls	r2, r3
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	683a      	ldr	r2, [r7, #0]
 80047c2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	2b40      	cmp	r3, #64	; 0x40
 80047ca:	d108      	bne.n	80047de <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68ba      	ldr	r2, [r7, #8]
 80047da:	60da      	str	r2, [r3, #12]
}
 80047dc:	e007      	b.n	80047ee <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	68ba      	ldr	r2, [r7, #8]
 80047e4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	60da      	str	r2, [r3, #12]
}
 80047ee:	bf00      	nop
 80047f0:	371c      	adds	r7, #28
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop
 80047fc:	58025408 	.word	0x58025408
 8004800:	5802541c 	.word	0x5802541c
 8004804:	58025430 	.word	0x58025430
 8004808:	58025444 	.word	0x58025444
 800480c:	58025458 	.word	0x58025458
 8004810:	5802546c 	.word	0x5802546c
 8004814:	58025480 	.word	0x58025480
 8004818:	58025494 	.word	0x58025494

0800481c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800481c:	b480      	push	{r7}
 800481e:	b085      	sub	sp, #20
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a42      	ldr	r2, [pc, #264]	; (8004934 <DMA_CalcBaseAndBitshift+0x118>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d04a      	beq.n	80048c4 <DMA_CalcBaseAndBitshift+0xa8>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a41      	ldr	r2, [pc, #260]	; (8004938 <DMA_CalcBaseAndBitshift+0x11c>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d045      	beq.n	80048c4 <DMA_CalcBaseAndBitshift+0xa8>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a3f      	ldr	r2, [pc, #252]	; (800493c <DMA_CalcBaseAndBitshift+0x120>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d040      	beq.n	80048c4 <DMA_CalcBaseAndBitshift+0xa8>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a3e      	ldr	r2, [pc, #248]	; (8004940 <DMA_CalcBaseAndBitshift+0x124>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d03b      	beq.n	80048c4 <DMA_CalcBaseAndBitshift+0xa8>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a3c      	ldr	r2, [pc, #240]	; (8004944 <DMA_CalcBaseAndBitshift+0x128>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d036      	beq.n	80048c4 <DMA_CalcBaseAndBitshift+0xa8>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a3b      	ldr	r2, [pc, #236]	; (8004948 <DMA_CalcBaseAndBitshift+0x12c>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d031      	beq.n	80048c4 <DMA_CalcBaseAndBitshift+0xa8>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a39      	ldr	r2, [pc, #228]	; (800494c <DMA_CalcBaseAndBitshift+0x130>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d02c      	beq.n	80048c4 <DMA_CalcBaseAndBitshift+0xa8>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a38      	ldr	r2, [pc, #224]	; (8004950 <DMA_CalcBaseAndBitshift+0x134>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d027      	beq.n	80048c4 <DMA_CalcBaseAndBitshift+0xa8>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a36      	ldr	r2, [pc, #216]	; (8004954 <DMA_CalcBaseAndBitshift+0x138>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d022      	beq.n	80048c4 <DMA_CalcBaseAndBitshift+0xa8>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a35      	ldr	r2, [pc, #212]	; (8004958 <DMA_CalcBaseAndBitshift+0x13c>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d01d      	beq.n	80048c4 <DMA_CalcBaseAndBitshift+0xa8>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a33      	ldr	r2, [pc, #204]	; (800495c <DMA_CalcBaseAndBitshift+0x140>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d018      	beq.n	80048c4 <DMA_CalcBaseAndBitshift+0xa8>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a32      	ldr	r2, [pc, #200]	; (8004960 <DMA_CalcBaseAndBitshift+0x144>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d013      	beq.n	80048c4 <DMA_CalcBaseAndBitshift+0xa8>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a30      	ldr	r2, [pc, #192]	; (8004964 <DMA_CalcBaseAndBitshift+0x148>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d00e      	beq.n	80048c4 <DMA_CalcBaseAndBitshift+0xa8>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a2f      	ldr	r2, [pc, #188]	; (8004968 <DMA_CalcBaseAndBitshift+0x14c>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d009      	beq.n	80048c4 <DMA_CalcBaseAndBitshift+0xa8>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a2d      	ldr	r2, [pc, #180]	; (800496c <DMA_CalcBaseAndBitshift+0x150>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d004      	beq.n	80048c4 <DMA_CalcBaseAndBitshift+0xa8>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a2c      	ldr	r2, [pc, #176]	; (8004970 <DMA_CalcBaseAndBitshift+0x154>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d101      	bne.n	80048c8 <DMA_CalcBaseAndBitshift+0xac>
 80048c4:	2301      	movs	r3, #1
 80048c6:	e000      	b.n	80048ca <DMA_CalcBaseAndBitshift+0xae>
 80048c8:	2300      	movs	r3, #0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d024      	beq.n	8004918 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	3b10      	subs	r3, #16
 80048d6:	4a27      	ldr	r2, [pc, #156]	; (8004974 <DMA_CalcBaseAndBitshift+0x158>)
 80048d8:	fba2 2303 	umull	r2, r3, r2, r3
 80048dc:	091b      	lsrs	r3, r3, #4
 80048de:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f003 0307 	and.w	r3, r3, #7
 80048e6:	4a24      	ldr	r2, [pc, #144]	; (8004978 <DMA_CalcBaseAndBitshift+0x15c>)
 80048e8:	5cd3      	ldrb	r3, [r2, r3]
 80048ea:	461a      	mov	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2b03      	cmp	r3, #3
 80048f4:	d908      	bls.n	8004908 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	461a      	mov	r2, r3
 80048fc:	4b1f      	ldr	r3, [pc, #124]	; (800497c <DMA_CalcBaseAndBitshift+0x160>)
 80048fe:	4013      	ands	r3, r2
 8004900:	1d1a      	adds	r2, r3, #4
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	659a      	str	r2, [r3, #88]	; 0x58
 8004906:	e00d      	b.n	8004924 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	461a      	mov	r2, r3
 800490e:	4b1b      	ldr	r3, [pc, #108]	; (800497c <DMA_CalcBaseAndBitshift+0x160>)
 8004910:	4013      	ands	r3, r2
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	6593      	str	r3, [r2, #88]	; 0x58
 8004916:	e005      	b.n	8004924 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004928:	4618      	mov	r0, r3
 800492a:	3714      	adds	r7, #20
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr
 8004934:	40020010 	.word	0x40020010
 8004938:	40020028 	.word	0x40020028
 800493c:	40020040 	.word	0x40020040
 8004940:	40020058 	.word	0x40020058
 8004944:	40020070 	.word	0x40020070
 8004948:	40020088 	.word	0x40020088
 800494c:	400200a0 	.word	0x400200a0
 8004950:	400200b8 	.word	0x400200b8
 8004954:	40020410 	.word	0x40020410
 8004958:	40020428 	.word	0x40020428
 800495c:	40020440 	.word	0x40020440
 8004960:	40020458 	.word	0x40020458
 8004964:	40020470 	.word	0x40020470
 8004968:	40020488 	.word	0x40020488
 800496c:	400204a0 	.word	0x400204a0
 8004970:	400204b8 	.word	0x400204b8
 8004974:	aaaaaaab 	.word	0xaaaaaaab
 8004978:	080134c8 	.word	0x080134c8
 800497c:	fffffc00 	.word	0xfffffc00

08004980 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004980:	b480      	push	{r7}
 8004982:	b085      	sub	sp, #20
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004988:	2300      	movs	r3, #0
 800498a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	699b      	ldr	r3, [r3, #24]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d120      	bne.n	80049d6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004998:	2b03      	cmp	r3, #3
 800499a:	d858      	bhi.n	8004a4e <DMA_CheckFifoParam+0xce>
 800499c:	a201      	add	r2, pc, #4	; (adr r2, 80049a4 <DMA_CheckFifoParam+0x24>)
 800499e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a2:	bf00      	nop
 80049a4:	080049b5 	.word	0x080049b5
 80049a8:	080049c7 	.word	0x080049c7
 80049ac:	080049b5 	.word	0x080049b5
 80049b0:	08004a4f 	.word	0x08004a4f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d048      	beq.n	8004a52 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80049c4:	e045      	b.n	8004a52 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80049ce:	d142      	bne.n	8004a56 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80049d4:	e03f      	b.n	8004a56 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	699b      	ldr	r3, [r3, #24]
 80049da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049de:	d123      	bne.n	8004a28 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e4:	2b03      	cmp	r3, #3
 80049e6:	d838      	bhi.n	8004a5a <DMA_CheckFifoParam+0xda>
 80049e8:	a201      	add	r2, pc, #4	; (adr r2, 80049f0 <DMA_CheckFifoParam+0x70>)
 80049ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ee:	bf00      	nop
 80049f0:	08004a01 	.word	0x08004a01
 80049f4:	08004a07 	.word	0x08004a07
 80049f8:	08004a01 	.word	0x08004a01
 80049fc:	08004a19 	.word	0x08004a19
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	73fb      	strb	r3, [r7, #15]
        break;
 8004a04:	e030      	b.n	8004a68 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d025      	beq.n	8004a5e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004a16:	e022      	b.n	8004a5e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a1c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004a20:	d11f      	bne.n	8004a62 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004a26:	e01c      	b.n	8004a62 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	d902      	bls.n	8004a36 <DMA_CheckFifoParam+0xb6>
 8004a30:	2b03      	cmp	r3, #3
 8004a32:	d003      	beq.n	8004a3c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004a34:	e018      	b.n	8004a68 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	73fb      	strb	r3, [r7, #15]
        break;
 8004a3a:	e015      	b.n	8004a68 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d00e      	beq.n	8004a66 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	73fb      	strb	r3, [r7, #15]
    break;
 8004a4c:	e00b      	b.n	8004a66 <DMA_CheckFifoParam+0xe6>
        break;
 8004a4e:	bf00      	nop
 8004a50:	e00a      	b.n	8004a68 <DMA_CheckFifoParam+0xe8>
        break;
 8004a52:	bf00      	nop
 8004a54:	e008      	b.n	8004a68 <DMA_CheckFifoParam+0xe8>
        break;
 8004a56:	bf00      	nop
 8004a58:	e006      	b.n	8004a68 <DMA_CheckFifoParam+0xe8>
        break;
 8004a5a:	bf00      	nop
 8004a5c:	e004      	b.n	8004a68 <DMA_CheckFifoParam+0xe8>
        break;
 8004a5e:	bf00      	nop
 8004a60:	e002      	b.n	8004a68 <DMA_CheckFifoParam+0xe8>
        break;
 8004a62:	bf00      	nop
 8004a64:	e000      	b.n	8004a68 <DMA_CheckFifoParam+0xe8>
    break;
 8004a66:	bf00      	nop
    }
  }

  return status;
 8004a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3714      	adds	r7, #20
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop

08004a78 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b085      	sub	sp, #20
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a38      	ldr	r2, [pc, #224]	; (8004b6c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d022      	beq.n	8004ad6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a36      	ldr	r2, [pc, #216]	; (8004b70 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d01d      	beq.n	8004ad6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a35      	ldr	r2, [pc, #212]	; (8004b74 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d018      	beq.n	8004ad6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a33      	ldr	r2, [pc, #204]	; (8004b78 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d013      	beq.n	8004ad6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a32      	ldr	r2, [pc, #200]	; (8004b7c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d00e      	beq.n	8004ad6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a30      	ldr	r2, [pc, #192]	; (8004b80 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d009      	beq.n	8004ad6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a2f      	ldr	r2, [pc, #188]	; (8004b84 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d004      	beq.n	8004ad6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a2d      	ldr	r2, [pc, #180]	; (8004b88 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d101      	bne.n	8004ada <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e000      	b.n	8004adc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004ada:	2300      	movs	r3, #0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d01a      	beq.n	8004b16 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	3b08      	subs	r3, #8
 8004ae8:	4a28      	ldr	r2, [pc, #160]	; (8004b8c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004aea:	fba2 2303 	umull	r2, r3, r2, r3
 8004aee:	091b      	lsrs	r3, r3, #4
 8004af0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	4b26      	ldr	r3, [pc, #152]	; (8004b90 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004af6:	4413      	add	r3, r2
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	461a      	mov	r2, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	4a24      	ldr	r2, [pc, #144]	; (8004b94 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004b04:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f003 031f 	and.w	r3, r3, #31
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	409a      	lsls	r2, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004b14:	e024      	b.n	8004b60 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	3b10      	subs	r3, #16
 8004b1e:	4a1e      	ldr	r2, [pc, #120]	; (8004b98 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004b20:	fba2 2303 	umull	r2, r3, r2, r3
 8004b24:	091b      	lsrs	r3, r3, #4
 8004b26:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	4a1c      	ldr	r2, [pc, #112]	; (8004b9c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d806      	bhi.n	8004b3e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	4a1b      	ldr	r2, [pc, #108]	; (8004ba0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d902      	bls.n	8004b3e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	3308      	adds	r3, #8
 8004b3c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004b3e:	68fa      	ldr	r2, [r7, #12]
 8004b40:	4b18      	ldr	r3, [pc, #96]	; (8004ba4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004b42:	4413      	add	r3, r2
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	461a      	mov	r2, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4a16      	ldr	r2, [pc, #88]	; (8004ba8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004b50:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f003 031f 	and.w	r3, r3, #31
 8004b58:	2201      	movs	r2, #1
 8004b5a:	409a      	lsls	r2, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004b60:	bf00      	nop
 8004b62:	3714      	adds	r7, #20
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr
 8004b6c:	58025408 	.word	0x58025408
 8004b70:	5802541c 	.word	0x5802541c
 8004b74:	58025430 	.word	0x58025430
 8004b78:	58025444 	.word	0x58025444
 8004b7c:	58025458 	.word	0x58025458
 8004b80:	5802546c 	.word	0x5802546c
 8004b84:	58025480 	.word	0x58025480
 8004b88:	58025494 	.word	0x58025494
 8004b8c:	cccccccd 	.word	0xcccccccd
 8004b90:	16009600 	.word	0x16009600
 8004b94:	58025880 	.word	0x58025880
 8004b98:	aaaaaaab 	.word	0xaaaaaaab
 8004b9c:	400204b8 	.word	0x400204b8
 8004ba0:	4002040f 	.word	0x4002040f
 8004ba4:	10008200 	.word	0x10008200
 8004ba8:	40020880 	.word	0x40020880

08004bac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b085      	sub	sp, #20
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d04a      	beq.n	8004c58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2b08      	cmp	r3, #8
 8004bc6:	d847      	bhi.n	8004c58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a25      	ldr	r2, [pc, #148]	; (8004c64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d022      	beq.n	8004c18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a24      	ldr	r2, [pc, #144]	; (8004c68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d01d      	beq.n	8004c18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a22      	ldr	r2, [pc, #136]	; (8004c6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d018      	beq.n	8004c18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a21      	ldr	r2, [pc, #132]	; (8004c70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d013      	beq.n	8004c18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a1f      	ldr	r2, [pc, #124]	; (8004c74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d00e      	beq.n	8004c18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a1e      	ldr	r2, [pc, #120]	; (8004c78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d009      	beq.n	8004c18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a1c      	ldr	r2, [pc, #112]	; (8004c7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d004      	beq.n	8004c18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a1b      	ldr	r2, [pc, #108]	; (8004c80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d101      	bne.n	8004c1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e000      	b.n	8004c1e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d00a      	beq.n	8004c38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004c22:	68fa      	ldr	r2, [r7, #12]
 8004c24:	4b17      	ldr	r3, [pc, #92]	; (8004c84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004c26:	4413      	add	r3, r2
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4a15      	ldr	r2, [pc, #84]	; (8004c88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004c34:	671a      	str	r2, [r3, #112]	; 0x70
 8004c36:	e009      	b.n	8004c4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	4b14      	ldr	r3, [pc, #80]	; (8004c8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004c3c:	4413      	add	r3, r2
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	461a      	mov	r2, r3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a11      	ldr	r2, [pc, #68]	; (8004c90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004c4a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	2201      	movs	r2, #1
 8004c52:	409a      	lsls	r2, r3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004c58:	bf00      	nop
 8004c5a:	3714      	adds	r7, #20
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr
 8004c64:	58025408 	.word	0x58025408
 8004c68:	5802541c 	.word	0x5802541c
 8004c6c:	58025430 	.word	0x58025430
 8004c70:	58025444 	.word	0x58025444
 8004c74:	58025458 	.word	0x58025458
 8004c78:	5802546c 	.word	0x5802546c
 8004c7c:	58025480 	.word	0x58025480
 8004c80:	58025494 	.word	0x58025494
 8004c84:	1600963f 	.word	0x1600963f
 8004c88:	58025940 	.word	0x58025940
 8004c8c:	1000823f 	.word	0x1000823f
 8004c90:	40020940 	.word	0x40020940

08004c94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b089      	sub	sp, #36	; 0x24
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004ca2:	4b89      	ldr	r3, [pc, #548]	; (8004ec8 <HAL_GPIO_Init+0x234>)
 8004ca4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004ca6:	e194      	b.n	8004fd2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	2101      	movs	r1, #1
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	f000 8186 	beq.w	8004fcc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d00b      	beq.n	8004ce0 <HAL_GPIO_Init+0x4c>
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	d007      	beq.n	8004ce0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004cd4:	2b11      	cmp	r3, #17
 8004cd6:	d003      	beq.n	8004ce0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	2b12      	cmp	r3, #18
 8004cde:	d130      	bne.n	8004d42 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	005b      	lsls	r3, r3, #1
 8004cea:	2203      	movs	r2, #3
 8004cec:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf0:	43db      	mvns	r3, r3
 8004cf2:	69ba      	ldr	r2, [r7, #24]
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	68da      	ldr	r2, [r3, #12]
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	005b      	lsls	r3, r3, #1
 8004d00:	fa02 f303 	lsl.w	r3, r2, r3
 8004d04:	69ba      	ldr	r2, [r7, #24]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	69ba      	ldr	r2, [r7, #24]
 8004d0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004d16:	2201      	movs	r2, #1
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d1e:	43db      	mvns	r3, r3
 8004d20:	69ba      	ldr	r2, [r7, #24]
 8004d22:	4013      	ands	r3, r2
 8004d24:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	091b      	lsrs	r3, r3, #4
 8004d2c:	f003 0201 	and.w	r2, r3, #1
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	fa02 f303 	lsl.w	r3, r2, r3
 8004d36:	69ba      	ldr	r2, [r7, #24]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	69ba      	ldr	r2, [r7, #24]
 8004d40:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	005b      	lsls	r3, r3, #1
 8004d4c:	2203      	movs	r2, #3
 8004d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d52:	43db      	mvns	r3, r3
 8004d54:	69ba      	ldr	r2, [r7, #24]
 8004d56:	4013      	ands	r3, r2
 8004d58:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	689a      	ldr	r2, [r3, #8]
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	005b      	lsls	r3, r3, #1
 8004d62:	fa02 f303 	lsl.w	r3, r2, r3
 8004d66:	69ba      	ldr	r2, [r7, #24]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	69ba      	ldr	r2, [r7, #24]
 8004d70:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d003      	beq.n	8004d82 <HAL_GPIO_Init+0xee>
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	2b12      	cmp	r3, #18
 8004d80:	d123      	bne.n	8004dca <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	08da      	lsrs	r2, r3, #3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	3208      	adds	r2, #8
 8004d8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	f003 0307 	and.w	r3, r3, #7
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	220f      	movs	r2, #15
 8004d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9e:	43db      	mvns	r3, r3
 8004da0:	69ba      	ldr	r2, [r7, #24]
 8004da2:	4013      	ands	r3, r2
 8004da4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	691a      	ldr	r2, [r3, #16]
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	f003 0307 	and.w	r3, r3, #7
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	fa02 f303 	lsl.w	r3, r2, r3
 8004db6:	69ba      	ldr	r2, [r7, #24]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	08da      	lsrs	r2, r3, #3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	3208      	adds	r2, #8
 8004dc4:	69b9      	ldr	r1, [r7, #24]
 8004dc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	005b      	lsls	r3, r3, #1
 8004dd4:	2203      	movs	r2, #3
 8004dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dda:	43db      	mvns	r3, r3
 8004ddc:	69ba      	ldr	r2, [r7, #24]
 8004dde:	4013      	ands	r3, r2
 8004de0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	f003 0203 	and.w	r2, r3, #3
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	005b      	lsls	r3, r3, #1
 8004dee:	fa02 f303 	lsl.w	r3, r2, r3
 8004df2:	69ba      	ldr	r2, [r7, #24]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	69ba      	ldr	r2, [r7, #24]
 8004dfc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	f000 80e0 	beq.w	8004fcc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e0c:	4b2f      	ldr	r3, [pc, #188]	; (8004ecc <HAL_GPIO_Init+0x238>)
 8004e0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004e12:	4a2e      	ldr	r2, [pc, #184]	; (8004ecc <HAL_GPIO_Init+0x238>)
 8004e14:	f043 0302 	orr.w	r3, r3, #2
 8004e18:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004e1c:	4b2b      	ldr	r3, [pc, #172]	; (8004ecc <HAL_GPIO_Init+0x238>)
 8004e1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004e22:	f003 0302 	and.w	r3, r3, #2
 8004e26:	60fb      	str	r3, [r7, #12]
 8004e28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e2a:	4a29      	ldr	r2, [pc, #164]	; (8004ed0 <HAL_GPIO_Init+0x23c>)
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	089b      	lsrs	r3, r3, #2
 8004e30:	3302      	adds	r3, #2
 8004e32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	f003 0303 	and.w	r3, r3, #3
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	220f      	movs	r2, #15
 8004e42:	fa02 f303 	lsl.w	r3, r2, r3
 8004e46:	43db      	mvns	r3, r3
 8004e48:	69ba      	ldr	r2, [r7, #24]
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a20      	ldr	r2, [pc, #128]	; (8004ed4 <HAL_GPIO_Init+0x240>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d052      	beq.n	8004efc <HAL_GPIO_Init+0x268>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a1f      	ldr	r2, [pc, #124]	; (8004ed8 <HAL_GPIO_Init+0x244>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d031      	beq.n	8004ec2 <HAL_GPIO_Init+0x22e>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a1e      	ldr	r2, [pc, #120]	; (8004edc <HAL_GPIO_Init+0x248>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d02b      	beq.n	8004ebe <HAL_GPIO_Init+0x22a>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a1d      	ldr	r2, [pc, #116]	; (8004ee0 <HAL_GPIO_Init+0x24c>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d025      	beq.n	8004eba <HAL_GPIO_Init+0x226>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a1c      	ldr	r2, [pc, #112]	; (8004ee4 <HAL_GPIO_Init+0x250>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d01f      	beq.n	8004eb6 <HAL_GPIO_Init+0x222>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a1b      	ldr	r2, [pc, #108]	; (8004ee8 <HAL_GPIO_Init+0x254>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d019      	beq.n	8004eb2 <HAL_GPIO_Init+0x21e>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a1a      	ldr	r2, [pc, #104]	; (8004eec <HAL_GPIO_Init+0x258>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d013      	beq.n	8004eae <HAL_GPIO_Init+0x21a>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a19      	ldr	r2, [pc, #100]	; (8004ef0 <HAL_GPIO_Init+0x25c>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d00d      	beq.n	8004eaa <HAL_GPIO_Init+0x216>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a18      	ldr	r2, [pc, #96]	; (8004ef4 <HAL_GPIO_Init+0x260>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d007      	beq.n	8004ea6 <HAL_GPIO_Init+0x212>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a17      	ldr	r2, [pc, #92]	; (8004ef8 <HAL_GPIO_Init+0x264>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d101      	bne.n	8004ea2 <HAL_GPIO_Init+0x20e>
 8004e9e:	2309      	movs	r3, #9
 8004ea0:	e02d      	b.n	8004efe <HAL_GPIO_Init+0x26a>
 8004ea2:	230a      	movs	r3, #10
 8004ea4:	e02b      	b.n	8004efe <HAL_GPIO_Init+0x26a>
 8004ea6:	2308      	movs	r3, #8
 8004ea8:	e029      	b.n	8004efe <HAL_GPIO_Init+0x26a>
 8004eaa:	2307      	movs	r3, #7
 8004eac:	e027      	b.n	8004efe <HAL_GPIO_Init+0x26a>
 8004eae:	2306      	movs	r3, #6
 8004eb0:	e025      	b.n	8004efe <HAL_GPIO_Init+0x26a>
 8004eb2:	2305      	movs	r3, #5
 8004eb4:	e023      	b.n	8004efe <HAL_GPIO_Init+0x26a>
 8004eb6:	2304      	movs	r3, #4
 8004eb8:	e021      	b.n	8004efe <HAL_GPIO_Init+0x26a>
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e01f      	b.n	8004efe <HAL_GPIO_Init+0x26a>
 8004ebe:	2302      	movs	r3, #2
 8004ec0:	e01d      	b.n	8004efe <HAL_GPIO_Init+0x26a>
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e01b      	b.n	8004efe <HAL_GPIO_Init+0x26a>
 8004ec6:	bf00      	nop
 8004ec8:	58000080 	.word	0x58000080
 8004ecc:	58024400 	.word	0x58024400
 8004ed0:	58000400 	.word	0x58000400
 8004ed4:	58020000 	.word	0x58020000
 8004ed8:	58020400 	.word	0x58020400
 8004edc:	58020800 	.word	0x58020800
 8004ee0:	58020c00 	.word	0x58020c00
 8004ee4:	58021000 	.word	0x58021000
 8004ee8:	58021400 	.word	0x58021400
 8004eec:	58021800 	.word	0x58021800
 8004ef0:	58021c00 	.word	0x58021c00
 8004ef4:	58022000 	.word	0x58022000
 8004ef8:	58022400 	.word	0x58022400
 8004efc:	2300      	movs	r3, #0
 8004efe:	69fa      	ldr	r2, [r7, #28]
 8004f00:	f002 0203 	and.w	r2, r2, #3
 8004f04:	0092      	lsls	r2, r2, #2
 8004f06:	4093      	lsls	r3, r2
 8004f08:	69ba      	ldr	r2, [r7, #24]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f0e:	4938      	ldr	r1, [pc, #224]	; (8004ff0 <HAL_GPIO_Init+0x35c>)
 8004f10:	69fb      	ldr	r3, [r7, #28]
 8004f12:	089b      	lsrs	r3, r3, #2
 8004f14:	3302      	adds	r3, #2
 8004f16:	69ba      	ldr	r2, [r7, #24]
 8004f18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	43db      	mvns	r3, r3
 8004f26:	69ba      	ldr	r2, [r7, #24]
 8004f28:	4013      	ands	r3, r2
 8004f2a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d003      	beq.n	8004f40 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004f38:	69ba      	ldr	r2, [r7, #24]
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	69ba      	ldr	r2, [r7, #24]
 8004f44:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	43db      	mvns	r3, r3
 8004f50:	69ba      	ldr	r2, [r7, #24]
 8004f52:	4013      	ands	r3, r2
 8004f54:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d003      	beq.n	8004f6a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004f62:	69ba      	ldr	r2, [r7, #24]
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	69ba      	ldr	r2, [r7, #24]
 8004f6e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004f70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	43db      	mvns	r3, r3
 8004f7c:	69ba      	ldr	r2, [r7, #24]
 8004f7e:	4013      	ands	r3, r2
 8004f80:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d003      	beq.n	8004f96 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8004f8e:	69ba      	ldr	r2, [r7, #24]
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004f96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004f9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	43db      	mvns	r3, r3
 8004faa:	69ba      	ldr	r2, [r7, #24]
 8004fac:	4013      	ands	r3, r2
 8004fae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d003      	beq.n	8004fc4 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8004fbc:	69ba      	ldr	r2, [r7, #24]
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004fc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	3301      	adds	r3, #1
 8004fd0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	fa22 f303 	lsr.w	r3, r2, r3
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	f47f ae63 	bne.w	8004ca8 <HAL_GPIO_Init+0x14>
  }
}
 8004fe2:	bf00      	nop
 8004fe4:	bf00      	nop
 8004fe6:	3724      	adds	r7, #36	; 0x24
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr
 8004ff0:	58000400 	.word	0x58000400

08004ff4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	460b      	mov	r3, r1
 8004ffe:	807b      	strh	r3, [r7, #2]
 8005000:	4613      	mov	r3, r2
 8005002:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005004:	787b      	ldrb	r3, [r7, #1]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d003      	beq.n	8005012 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800500a:	887a      	ldrh	r2, [r7, #2]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005010:	e003      	b.n	800501a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005012:	887b      	ldrh	r3, [r7, #2]
 8005014:	041a      	lsls	r2, r3, #16
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	619a      	str	r2, [r3, #24]
}
 800501a:	bf00      	nop
 800501c:	370c      	adds	r7, #12
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr
	...

08005028 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8005030:	4a08      	ldr	r2, [pc, #32]	; (8005054 <HAL_HSEM_FastTake+0x2c>)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	3320      	adds	r3, #32
 8005036:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800503a:	4a07      	ldr	r2, [pc, #28]	; (8005058 <HAL_HSEM_FastTake+0x30>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d101      	bne.n	8005044 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8005040:	2300      	movs	r3, #0
 8005042:	e000      	b.n	8005046 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
}
 8005046:	4618      	mov	r0, r3
 8005048:	370c      	adds	r7, #12
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr
 8005052:	bf00      	nop
 8005054:	58026400 	.word	0x58026400
 8005058:	80000300 	.word	0x80000300

0800505c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8005066:	4906      	ldr	r1, [pc, #24]	; (8005080 <HAL_HSEM_Release+0x24>)
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8005074:	bf00      	nop
 8005076:	370c      	adds	r7, #12
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr
 8005080:	58026400 	.word	0x58026400

08005084 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b082      	sub	sp, #8
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d101      	bne.n	8005096 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e07f      	b.n	8005196 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800509c:	b2db      	uxtb	r3, r3
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d106      	bne.n	80050b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f7fb fce0 	bl	8000a70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2224      	movs	r2, #36	; 0x24
 80050b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f022 0201 	bic.w	r2, r2, #1
 80050c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	685a      	ldr	r2, [r3, #4]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80050d4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	689a      	ldr	r2, [r3, #8]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80050e4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d107      	bne.n	80050fe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	689a      	ldr	r2, [r3, #8]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80050fa:	609a      	str	r2, [r3, #8]
 80050fc:	e006      	b.n	800510c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	689a      	ldr	r2, [r3, #8]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800510a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	2b02      	cmp	r3, #2
 8005112:	d104      	bne.n	800511e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800511c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	6859      	ldr	r1, [r3, #4]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	4b1d      	ldr	r3, [pc, #116]	; (80051a0 <HAL_I2C_Init+0x11c>)
 800512a:	430b      	orrs	r3, r1
 800512c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	68da      	ldr	r2, [r3, #12]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800513c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	691a      	ldr	r2, [r3, #16]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	695b      	ldr	r3, [r3, #20]
 8005146:	ea42 0103 	orr.w	r1, r2, r3
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	699b      	ldr	r3, [r3, #24]
 800514e:	021a      	lsls	r2, r3, #8
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	430a      	orrs	r2, r1
 8005156:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	69d9      	ldr	r1, [r3, #28]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a1a      	ldr	r2, [r3, #32]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	430a      	orrs	r2, r1
 8005166:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f042 0201 	orr.w	r2, r2, #1
 8005176:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2220      	movs	r2, #32
 8005182:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	3708      	adds	r7, #8
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop
 80051a0:	02008000 	.word	0x02008000

080051a4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b084      	sub	sp, #16
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	699b      	ldr	r3, [r3, #24]
 80051b2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d005      	beq.n	80051d0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051c8:	68ba      	ldr	r2, [r7, #8]
 80051ca:	68f9      	ldr	r1, [r7, #12]
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	4798      	blx	r3
  }
}
 80051d0:	bf00      	nop
 80051d2:	3710      	adds	r7, #16
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b086      	sub	sp, #24
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	699b      	ldr	r3, [r3, #24]
 80051e6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	0a1b      	lsrs	r3, r3, #8
 80051f4:	f003 0301 	and.w	r3, r3, #1
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d010      	beq.n	800521e <HAL_I2C_ER_IRQHandler+0x46>
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	09db      	lsrs	r3, r3, #7
 8005200:	f003 0301 	and.w	r3, r3, #1
 8005204:	2b00      	cmp	r3, #0
 8005206:	d00a      	beq.n	800521e <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800520c:	f043 0201 	orr.w	r2, r3, #1
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f44f 7280 	mov.w	r2, #256	; 0x100
 800521c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	0a9b      	lsrs	r3, r3, #10
 8005222:	f003 0301 	and.w	r3, r3, #1
 8005226:	2b00      	cmp	r3, #0
 8005228:	d010      	beq.n	800524c <HAL_I2C_ER_IRQHandler+0x74>
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	09db      	lsrs	r3, r3, #7
 800522e:	f003 0301 	and.w	r3, r3, #1
 8005232:	2b00      	cmp	r3, #0
 8005234:	d00a      	beq.n	800524c <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800523a:	f043 0208 	orr.w	r2, r3, #8
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800524a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	0a5b      	lsrs	r3, r3, #9
 8005250:	f003 0301 	and.w	r3, r3, #1
 8005254:	2b00      	cmp	r3, #0
 8005256:	d010      	beq.n	800527a <HAL_I2C_ER_IRQHandler+0xa2>
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	09db      	lsrs	r3, r3, #7
 800525c:	f003 0301 	and.w	r3, r3, #1
 8005260:	2b00      	cmp	r3, #0
 8005262:	d00a      	beq.n	800527a <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005268:	f043 0202 	orr.w	r2, r3, #2
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005278:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800527e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f003 030b 	and.w	r3, r3, #11
 8005286:	2b00      	cmp	r3, #0
 8005288:	d003      	beq.n	8005292 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800528a:	68f9      	ldr	r1, [r7, #12]
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 fc77 	bl	8005b80 <I2C_ITError>
  }
}
 8005292:	bf00      	nop
 8005294:	3718      	adds	r7, #24
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}

0800529a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800529a:	b480      	push	{r7}
 800529c:	b083      	sub	sp, #12
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80052a2:	bf00      	nop
 80052a4:	370c      	adds	r7, #12
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr

080052ae <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80052ae:	b480      	push	{r7}
 80052b0:	b083      	sub	sp, #12
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80052b6:	bf00      	nop
 80052b8:	370c      	adds	r7, #12
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr

080052c2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80052c2:	b480      	push	{r7}
 80052c4:	b083      	sub	sp, #12
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
 80052ca:	460b      	mov	r3, r1
 80052cc:	70fb      	strb	r3, [r7, #3]
 80052ce:	4613      	mov	r3, r2
 80052d0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80052d2:	bf00      	nop
 80052d4:	370c      	adds	r7, #12
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr

080052de <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80052de:	b480      	push	{r7}
 80052e0:	b083      	sub	sp, #12
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80052e6:	bf00      	nop
 80052e8:	370c      	adds	r7, #12
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr

080052f2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80052f2:	b480      	push	{r7}
 80052f4:	b083      	sub	sp, #12
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80052fa:	bf00      	nop
 80052fc:	370c      	adds	r7, #12
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr

08005306 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005306:	b480      	push	{r7}
 8005308:	b083      	sub	sp, #12
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800530e:	bf00      	nop
 8005310:	370c      	adds	r7, #12
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr

0800531a <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800531a:	b580      	push	{r7, lr}
 800531c:	b086      	sub	sp, #24
 800531e:	af00      	add	r7, sp, #0
 8005320:	60f8      	str	r0, [r7, #12]
 8005322:	60b9      	str	r1, [r7, #8]
 8005324:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800532a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005336:	2b01      	cmp	r3, #1
 8005338:	d101      	bne.n	800533e <I2C_Slave_ISR_IT+0x24>
 800533a:	2302      	movs	r3, #2
 800533c:	e0ec      	b.n	8005518 <I2C_Slave_ISR_IT+0x1fe>
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2201      	movs	r2, #1
 8005342:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	095b      	lsrs	r3, r3, #5
 800534a:	f003 0301 	and.w	r3, r3, #1
 800534e:	2b00      	cmp	r3, #0
 8005350:	d009      	beq.n	8005366 <I2C_Slave_ISR_IT+0x4c>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	095b      	lsrs	r3, r3, #5
 8005356:	f003 0301 	and.w	r3, r3, #1
 800535a:	2b00      	cmp	r3, #0
 800535c:	d003      	beq.n	8005366 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800535e:	6939      	ldr	r1, [r7, #16]
 8005360:	68f8      	ldr	r0, [r7, #12]
 8005362:	f000 f9bf 	bl	80056e4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	091b      	lsrs	r3, r3, #4
 800536a:	f003 0301 	and.w	r3, r3, #1
 800536e:	2b00      	cmp	r3, #0
 8005370:	d04d      	beq.n	800540e <I2C_Slave_ISR_IT+0xf4>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	091b      	lsrs	r3, r3, #4
 8005376:	f003 0301 	and.w	r3, r3, #1
 800537a:	2b00      	cmp	r3, #0
 800537c:	d047      	beq.n	800540e <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005382:	b29b      	uxth	r3, r3
 8005384:	2b00      	cmp	r3, #0
 8005386:	d128      	bne.n	80053da <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800538e:	b2db      	uxtb	r3, r3
 8005390:	2b28      	cmp	r3, #40	; 0x28
 8005392:	d108      	bne.n	80053a6 <I2C_Slave_ISR_IT+0x8c>
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800539a:	d104      	bne.n	80053a6 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800539c:	6939      	ldr	r1, [r7, #16]
 800539e:	68f8      	ldr	r0, [r7, #12]
 80053a0:	f000 fb98 	bl	8005ad4 <I2C_ITListenCplt>
 80053a4:	e032      	b.n	800540c <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	2b29      	cmp	r3, #41	; 0x29
 80053b0:	d10e      	bne.n	80053d0 <I2C_Slave_ISR_IT+0xb6>
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80053b8:	d00a      	beq.n	80053d0 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	2210      	movs	r2, #16
 80053c0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80053c2:	68f8      	ldr	r0, [r7, #12]
 80053c4:	f000 fcd3 	bl	8005d6e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80053c8:	68f8      	ldr	r0, [r7, #12]
 80053ca:	f000 f92d 	bl	8005628 <I2C_ITSlaveSeqCplt>
 80053ce:	e01d      	b.n	800540c <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2210      	movs	r2, #16
 80053d6:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80053d8:	e096      	b.n	8005508 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2210      	movs	r2, #16
 80053e0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053e6:	f043 0204 	orr.w	r2, r3, #4
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d004      	beq.n	80053fe <I2C_Slave_ISR_IT+0xe4>
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80053fa:	f040 8085 	bne.w	8005508 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005402:	4619      	mov	r1, r3
 8005404:	68f8      	ldr	r0, [r7, #12]
 8005406:	f000 fbbb 	bl	8005b80 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800540a:	e07d      	b.n	8005508 <I2C_Slave_ISR_IT+0x1ee>
 800540c:	e07c      	b.n	8005508 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	089b      	lsrs	r3, r3, #2
 8005412:	f003 0301 	and.w	r3, r3, #1
 8005416:	2b00      	cmp	r3, #0
 8005418:	d030      	beq.n	800547c <I2C_Slave_ISR_IT+0x162>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	089b      	lsrs	r3, r3, #2
 800541e:	f003 0301 	and.w	r3, r3, #1
 8005422:	2b00      	cmp	r3, #0
 8005424:	d02a      	beq.n	800547c <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800542a:	b29b      	uxth	r3, r3
 800542c:	2b00      	cmp	r3, #0
 800542e:	d018      	beq.n	8005462 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543a:	b2d2      	uxtb	r2, r2
 800543c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005442:	1c5a      	adds	r2, r3, #1
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800544c:	3b01      	subs	r3, #1
 800544e:	b29a      	uxth	r2, r3
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005458:	b29b      	uxth	r3, r3
 800545a:	3b01      	subs	r3, #1
 800545c:	b29a      	uxth	r2, r3
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005466:	b29b      	uxth	r3, r3
 8005468:	2b00      	cmp	r3, #0
 800546a:	d14f      	bne.n	800550c <I2C_Slave_ISR_IT+0x1f2>
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005472:	d04b      	beq.n	800550c <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005474:	68f8      	ldr	r0, [r7, #12]
 8005476:	f000 f8d7 	bl	8005628 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800547a:	e047      	b.n	800550c <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	08db      	lsrs	r3, r3, #3
 8005480:	f003 0301 	and.w	r3, r3, #1
 8005484:	2b00      	cmp	r3, #0
 8005486:	d00a      	beq.n	800549e <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	08db      	lsrs	r3, r3, #3
 800548c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005490:	2b00      	cmp	r3, #0
 8005492:	d004      	beq.n	800549e <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005494:	6939      	ldr	r1, [r7, #16]
 8005496:	68f8      	ldr	r0, [r7, #12]
 8005498:	f000 f842 	bl	8005520 <I2C_ITAddrCplt>
 800549c:	e037      	b.n	800550e <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	085b      	lsrs	r3, r3, #1
 80054a2:	f003 0301 	and.w	r3, r3, #1
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d031      	beq.n	800550e <I2C_Slave_ISR_IT+0x1f4>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	085b      	lsrs	r3, r3, #1
 80054ae:	f003 0301 	and.w	r3, r3, #1
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d02b      	beq.n	800550e <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d018      	beq.n	80054f2 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c4:	781a      	ldrb	r2, [r3, #0]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d0:	1c5a      	adds	r2, r3, #1
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054da:	b29b      	uxth	r3, r3
 80054dc:	3b01      	subs	r3, #1
 80054de:	b29a      	uxth	r2, r3
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054e8:	3b01      	subs	r3, #1
 80054ea:	b29a      	uxth	r2, r3
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	851a      	strh	r2, [r3, #40]	; 0x28
 80054f0:	e00d      	b.n	800550e <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80054f8:	d002      	beq.n	8005500 <I2C_Slave_ISR_IT+0x1e6>
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d106      	bne.n	800550e <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005500:	68f8      	ldr	r0, [r7, #12]
 8005502:	f000 f891 	bl	8005628 <I2C_ITSlaveSeqCplt>
 8005506:	e002      	b.n	800550e <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8005508:	bf00      	nop
 800550a:	e000      	b.n	800550e <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800550c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005516:	2300      	movs	r3, #0
}
 8005518:	4618      	mov	r0, r3
 800551a:	3718      	adds	r7, #24
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b084      	sub	sp, #16
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005530:	b2db      	uxtb	r3, r3
 8005532:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005536:	2b28      	cmp	r3, #40	; 0x28
 8005538:	d16a      	bne.n	8005610 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	699b      	ldr	r3, [r3, #24]
 8005540:	0c1b      	lsrs	r3, r3, #16
 8005542:	b2db      	uxtb	r3, r3
 8005544:	f003 0301 	and.w	r3, r3, #1
 8005548:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	699b      	ldr	r3, [r3, #24]
 8005550:	0c1b      	lsrs	r3, r3, #16
 8005552:	b29b      	uxth	r3, r3
 8005554:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005558:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	b29b      	uxth	r3, r3
 8005562:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005566:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	b29b      	uxth	r3, r3
 8005570:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005574:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	2b02      	cmp	r3, #2
 800557c:	d138      	bne.n	80055f0 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800557e:	897b      	ldrh	r3, [r7, #10]
 8005580:	09db      	lsrs	r3, r3, #7
 8005582:	b29a      	uxth	r2, r3
 8005584:	89bb      	ldrh	r3, [r7, #12]
 8005586:	4053      	eors	r3, r2
 8005588:	b29b      	uxth	r3, r3
 800558a:	f003 0306 	and.w	r3, r3, #6
 800558e:	2b00      	cmp	r3, #0
 8005590:	d11c      	bne.n	80055cc <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8005592:	897b      	ldrh	r3, [r7, #10]
 8005594:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800559a:	1c5a      	adds	r2, r3, #1
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055a4:	2b02      	cmp	r3, #2
 80055a6:	d13b      	bne.n	8005620 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2208      	movs	r2, #8
 80055b4:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80055be:	89ba      	ldrh	r2, [r7, #12]
 80055c0:	7bfb      	ldrb	r3, [r7, #15]
 80055c2:	4619      	mov	r1, r3
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f7ff fe7c 	bl	80052c2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80055ca:	e029      	b.n	8005620 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80055cc:	893b      	ldrh	r3, [r7, #8]
 80055ce:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80055d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f000 fc0c 	bl	8005df2 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80055e2:	89ba      	ldrh	r2, [r7, #12]
 80055e4:	7bfb      	ldrb	r3, [r7, #15]
 80055e6:	4619      	mov	r1, r3
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f7ff fe6a 	bl	80052c2 <HAL_I2C_AddrCallback>
}
 80055ee:	e017      	b.n	8005620 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80055f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f000 fbfc 	bl	8005df2 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005602:	89ba      	ldrh	r2, [r7, #12]
 8005604:	7bfb      	ldrb	r3, [r7, #15]
 8005606:	4619      	mov	r1, r3
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f7ff fe5a 	bl	80052c2 <HAL_I2C_AddrCallback>
}
 800560e:	e007      	b.n	8005620 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	2208      	movs	r2, #8
 8005616:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8005620:	bf00      	nop
 8005622:	3710      	adds	r7, #16
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	0b9b      	lsrs	r3, r3, #14
 8005644:	f003 0301 	and.w	r3, r3, #1
 8005648:	2b00      	cmp	r3, #0
 800564a:	d008      	beq.n	800565e <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800565a:	601a      	str	r2, [r3, #0]
 800565c:	e00d      	b.n	800567a <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	0bdb      	lsrs	r3, r3, #15
 8005662:	f003 0301 	and.w	r3, r3, #1
 8005666:	2b00      	cmp	r3, #0
 8005668:	d007      	beq.n	800567a <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005678:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005680:	b2db      	uxtb	r3, r3
 8005682:	2b29      	cmp	r3, #41	; 0x29
 8005684:	d112      	bne.n	80056ac <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2228      	movs	r2, #40	; 0x28
 800568a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2221      	movs	r2, #33	; 0x21
 8005692:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005694:	2101      	movs	r1, #1
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 fbab 	bl	8005df2 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f7ff fdf8 	bl	800529a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80056aa:	e017      	b.n	80056dc <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	2b2a      	cmp	r3, #42	; 0x2a
 80056b6:	d111      	bne.n	80056dc <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2228      	movs	r2, #40	; 0x28
 80056bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2222      	movs	r2, #34	; 0x22
 80056c4:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80056c6:	2102      	movs	r1, #2
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f000 fb92 	bl	8005df2 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f7ff fde9 	bl	80052ae <HAL_I2C_SlaveRxCpltCallback>
}
 80056dc:	bf00      	nop
 80056de:	3710      	adds	r7, #16
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}

080056e4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b086      	sub	sp, #24
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005700:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2220      	movs	r2, #32
 8005708:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800570a:	7bfb      	ldrb	r3, [r7, #15]
 800570c:	2b21      	cmp	r3, #33	; 0x21
 800570e:	d002      	beq.n	8005716 <I2C_ITSlaveCplt+0x32>
 8005710:	7bfb      	ldrb	r3, [r7, #15]
 8005712:	2b29      	cmp	r3, #41	; 0x29
 8005714:	d108      	bne.n	8005728 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005716:	f248 0101 	movw	r1, #32769	; 0x8001
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 fb69 	bl	8005df2 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2221      	movs	r2, #33	; 0x21
 8005724:	631a      	str	r2, [r3, #48]	; 0x30
 8005726:	e00d      	b.n	8005744 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005728:	7bfb      	ldrb	r3, [r7, #15]
 800572a:	2b22      	cmp	r3, #34	; 0x22
 800572c:	d002      	beq.n	8005734 <I2C_ITSlaveCplt+0x50>
 800572e:	7bfb      	ldrb	r3, [r7, #15]
 8005730:	2b2a      	cmp	r3, #42	; 0x2a
 8005732:	d107      	bne.n	8005744 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005734:	f248 0102 	movw	r1, #32770	; 0x8002
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f000 fb5a 	bl	8005df2 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2222      	movs	r2, #34	; 0x22
 8005742:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	685a      	ldr	r2, [r3, #4]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005752:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	6859      	ldr	r1, [r3, #4]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	4b80      	ldr	r3, [pc, #512]	; (8005960 <I2C_ITSlaveCplt+0x27c>)
 8005760:	400b      	ands	r3, r1
 8005762:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f000 fb02 	bl	8005d6e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	0b9b      	lsrs	r3, r3, #14
 800576e:	f003 0301 	and.w	r3, r3, #1
 8005772:	2b00      	cmp	r3, #0
 8005774:	d07a      	beq.n	800586c <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005784:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800578a:	2b00      	cmp	r3, #0
 800578c:	f000 8111 	beq.w	80059b2 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a73      	ldr	r2, [pc, #460]	; (8005964 <I2C_ITSlaveCplt+0x280>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d059      	beq.n	8005850 <I2C_ITSlaveCplt+0x16c>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a71      	ldr	r2, [pc, #452]	; (8005968 <I2C_ITSlaveCplt+0x284>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d053      	beq.n	8005850 <I2C_ITSlaveCplt+0x16c>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a6f      	ldr	r2, [pc, #444]	; (800596c <I2C_ITSlaveCplt+0x288>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d04d      	beq.n	8005850 <I2C_ITSlaveCplt+0x16c>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a6d      	ldr	r2, [pc, #436]	; (8005970 <I2C_ITSlaveCplt+0x28c>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d047      	beq.n	8005850 <I2C_ITSlaveCplt+0x16c>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a6b      	ldr	r2, [pc, #428]	; (8005974 <I2C_ITSlaveCplt+0x290>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d041      	beq.n	8005850 <I2C_ITSlaveCplt+0x16c>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a69      	ldr	r2, [pc, #420]	; (8005978 <I2C_ITSlaveCplt+0x294>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d03b      	beq.n	8005850 <I2C_ITSlaveCplt+0x16c>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a67      	ldr	r2, [pc, #412]	; (800597c <I2C_ITSlaveCplt+0x298>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d035      	beq.n	8005850 <I2C_ITSlaveCplt+0x16c>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a65      	ldr	r2, [pc, #404]	; (8005980 <I2C_ITSlaveCplt+0x29c>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d02f      	beq.n	8005850 <I2C_ITSlaveCplt+0x16c>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a63      	ldr	r2, [pc, #396]	; (8005984 <I2C_ITSlaveCplt+0x2a0>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d029      	beq.n	8005850 <I2C_ITSlaveCplt+0x16c>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a61      	ldr	r2, [pc, #388]	; (8005988 <I2C_ITSlaveCplt+0x2a4>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d023      	beq.n	8005850 <I2C_ITSlaveCplt+0x16c>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a5f      	ldr	r2, [pc, #380]	; (800598c <I2C_ITSlaveCplt+0x2a8>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d01d      	beq.n	8005850 <I2C_ITSlaveCplt+0x16c>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a5d      	ldr	r2, [pc, #372]	; (8005990 <I2C_ITSlaveCplt+0x2ac>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d017      	beq.n	8005850 <I2C_ITSlaveCplt+0x16c>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a5b      	ldr	r2, [pc, #364]	; (8005994 <I2C_ITSlaveCplt+0x2b0>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d011      	beq.n	8005850 <I2C_ITSlaveCplt+0x16c>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a59      	ldr	r2, [pc, #356]	; (8005998 <I2C_ITSlaveCplt+0x2b4>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d00b      	beq.n	8005850 <I2C_ITSlaveCplt+0x16c>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a57      	ldr	r2, [pc, #348]	; (800599c <I2C_ITSlaveCplt+0x2b8>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d005      	beq.n	8005850 <I2C_ITSlaveCplt+0x16c>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a55      	ldr	r2, [pc, #340]	; (80059a0 <I2C_ITSlaveCplt+0x2bc>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d105      	bne.n	800585c <I2C_ITSlaveCplt+0x178>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	b29b      	uxth	r3, r3
 800585a:	e004      	b.n	8005866 <I2C_ITSlaveCplt+0x182>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	b29b      	uxth	r3, r3
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	8553      	strh	r3, [r2, #42]	; 0x2a
 800586a:	e0a2      	b.n	80059b2 <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	0bdb      	lsrs	r3, r3, #15
 8005870:	f003 0301 	and.w	r3, r3, #1
 8005874:	2b00      	cmp	r3, #0
 8005876:	f000 809c 	beq.w	80059b2 <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005888:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800588e:	2b00      	cmp	r3, #0
 8005890:	f000 808f 	beq.w	80059b2 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a32      	ldr	r2, [pc, #200]	; (8005964 <I2C_ITSlaveCplt+0x280>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d059      	beq.n	8005954 <I2C_ITSlaveCplt+0x270>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a30      	ldr	r2, [pc, #192]	; (8005968 <I2C_ITSlaveCplt+0x284>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d053      	beq.n	8005954 <I2C_ITSlaveCplt+0x270>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a2e      	ldr	r2, [pc, #184]	; (800596c <I2C_ITSlaveCplt+0x288>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d04d      	beq.n	8005954 <I2C_ITSlaveCplt+0x270>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a2c      	ldr	r2, [pc, #176]	; (8005970 <I2C_ITSlaveCplt+0x28c>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d047      	beq.n	8005954 <I2C_ITSlaveCplt+0x270>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a2a      	ldr	r2, [pc, #168]	; (8005974 <I2C_ITSlaveCplt+0x290>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d041      	beq.n	8005954 <I2C_ITSlaveCplt+0x270>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a28      	ldr	r2, [pc, #160]	; (8005978 <I2C_ITSlaveCplt+0x294>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d03b      	beq.n	8005954 <I2C_ITSlaveCplt+0x270>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a26      	ldr	r2, [pc, #152]	; (800597c <I2C_ITSlaveCplt+0x298>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d035      	beq.n	8005954 <I2C_ITSlaveCplt+0x270>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a24      	ldr	r2, [pc, #144]	; (8005980 <I2C_ITSlaveCplt+0x29c>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d02f      	beq.n	8005954 <I2C_ITSlaveCplt+0x270>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a22      	ldr	r2, [pc, #136]	; (8005984 <I2C_ITSlaveCplt+0x2a0>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d029      	beq.n	8005954 <I2C_ITSlaveCplt+0x270>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a20      	ldr	r2, [pc, #128]	; (8005988 <I2C_ITSlaveCplt+0x2a4>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d023      	beq.n	8005954 <I2C_ITSlaveCplt+0x270>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a1e      	ldr	r2, [pc, #120]	; (800598c <I2C_ITSlaveCplt+0x2a8>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d01d      	beq.n	8005954 <I2C_ITSlaveCplt+0x270>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a1c      	ldr	r2, [pc, #112]	; (8005990 <I2C_ITSlaveCplt+0x2ac>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d017      	beq.n	8005954 <I2C_ITSlaveCplt+0x270>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a1a      	ldr	r2, [pc, #104]	; (8005994 <I2C_ITSlaveCplt+0x2b0>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d011      	beq.n	8005954 <I2C_ITSlaveCplt+0x270>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a18      	ldr	r2, [pc, #96]	; (8005998 <I2C_ITSlaveCplt+0x2b4>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d00b      	beq.n	8005954 <I2C_ITSlaveCplt+0x270>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a16      	ldr	r2, [pc, #88]	; (800599c <I2C_ITSlaveCplt+0x2b8>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d005      	beq.n	8005954 <I2C_ITSlaveCplt+0x270>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a14      	ldr	r2, [pc, #80]	; (80059a0 <I2C_ITSlaveCplt+0x2bc>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d127      	bne.n	80059a4 <I2C_ITSlaveCplt+0x2c0>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	b29b      	uxth	r3, r3
 800595e:	e026      	b.n	80059ae <I2C_ITSlaveCplt+0x2ca>
 8005960:	fe00e800 	.word	0xfe00e800
 8005964:	40020010 	.word	0x40020010
 8005968:	40020028 	.word	0x40020028
 800596c:	40020040 	.word	0x40020040
 8005970:	40020058 	.word	0x40020058
 8005974:	40020070 	.word	0x40020070
 8005978:	40020088 	.word	0x40020088
 800597c:	400200a0 	.word	0x400200a0
 8005980:	400200b8 	.word	0x400200b8
 8005984:	40020410 	.word	0x40020410
 8005988:	40020428 	.word	0x40020428
 800598c:	40020440 	.word	0x40020440
 8005990:	40020458 	.word	0x40020458
 8005994:	40020470 	.word	0x40020470
 8005998:	40020488 	.word	0x40020488
 800599c:	400204a0 	.word	0x400204a0
 80059a0:	400204b8 	.word	0x400204b8
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	089b      	lsrs	r3, r3, #2
 80059b6:	f003 0301 	and.w	r3, r3, #1
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d020      	beq.n	8005a00 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	f023 0304 	bic.w	r3, r3, #4
 80059c4:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d0:	b2d2      	uxtb	r2, r2
 80059d2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d8:	1c5a      	adds	r2, r3, #1
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d00c      	beq.n	8005a00 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059ea:	3b01      	subs	r3, #1
 80059ec:	b29a      	uxth	r2, r3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	3b01      	subs	r3, #1
 80059fa:	b29a      	uxth	r2, r3
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d005      	beq.n	8005a16 <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a0e:	f043 0204 	orr.w	r2, r3, #4
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d010      	beq.n	8005a4e <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a30:	4619      	mov	r1, r3
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 f8a4 	bl	8005b80 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	2b28      	cmp	r3, #40	; 0x28
 8005a42:	d141      	bne.n	8005ac8 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8005a44:	6979      	ldr	r1, [r7, #20]
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f000 f844 	bl	8005ad4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005a4c:	e03c      	b.n	8005ac8 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a52:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005a56:	d014      	beq.n	8005a82 <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f7ff fde5 	bl	8005628 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a1b      	ldr	r2, [pc, #108]	; (8005ad0 <I2C_ITSlaveCplt+0x3ec>)
 8005a62:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2220      	movs	r2, #32
 8005a68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f7ff fc2f 	bl	80052de <HAL_I2C_ListenCpltCallback>
}
 8005a80:	e022      	b.n	8005ac8 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	2b22      	cmp	r3, #34	; 0x22
 8005a8c:	d10e      	bne.n	8005aac <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2220      	movs	r2, #32
 8005a92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f7ff fc02 	bl	80052ae <HAL_I2C_SlaveRxCpltCallback>
}
 8005aaa:	e00d      	b.n	8005ac8 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2220      	movs	r2, #32
 8005ab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f7ff fbe9 	bl	800529a <HAL_I2C_SlaveTxCpltCallback>
}
 8005ac8:	bf00      	nop
 8005aca:	3718      	adds	r7, #24
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}
 8005ad0:	ffff0000 	.word	0xffff0000

08005ad4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b082      	sub	sp, #8
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a26      	ldr	r2, [pc, #152]	; (8005b7c <I2C_ITListenCplt+0xa8>)
 8005ae2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2220      	movs	r2, #32
 8005aee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	089b      	lsrs	r3, r3, #2
 8005b04:	f003 0301 	and.w	r3, r3, #1
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d022      	beq.n	8005b52 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b16:	b2d2      	uxtb	r2, r2
 8005b18:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1e:	1c5a      	adds	r2, r3, #1
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d012      	beq.n	8005b52 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b30:	3b01      	subs	r3, #1
 8005b32:	b29a      	uxth	r2, r3
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	3b01      	subs	r3, #1
 8005b40:	b29a      	uxth	r2, r3
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b4a:	f043 0204 	orr.w	r2, r3, #4
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005b52:	f248 0103 	movw	r1, #32771	; 0x8003
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 f94b 	bl	8005df2 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	2210      	movs	r2, #16
 8005b62:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f7ff fbb6 	bl	80052de <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005b72:	bf00      	nop
 8005b74:	3708      	adds	r7, #8
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	ffff0000 	.word	0xffff0000

08005b80 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b084      	sub	sp, #16
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4a5d      	ldr	r2, [pc, #372]	; (8005d14 <I2C_ITError+0x194>)
 8005b9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	431a      	orrs	r2, r3
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8005bb2:	7bfb      	ldrb	r3, [r7, #15]
 8005bb4:	2b28      	cmp	r3, #40	; 0x28
 8005bb6:	d005      	beq.n	8005bc4 <I2C_ITError+0x44>
 8005bb8:	7bfb      	ldrb	r3, [r7, #15]
 8005bba:	2b29      	cmp	r3, #41	; 0x29
 8005bbc:	d002      	beq.n	8005bc4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8005bbe:	7bfb      	ldrb	r3, [r7, #15]
 8005bc0:	2b2a      	cmp	r3, #42	; 0x2a
 8005bc2:	d10b      	bne.n	8005bdc <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005bc4:	2103      	movs	r1, #3
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 f913 	bl	8005df2 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2228      	movs	r2, #40	; 0x28
 8005bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	4a50      	ldr	r2, [pc, #320]	; (8005d18 <I2C_ITError+0x198>)
 8005bd8:	635a      	str	r2, [r3, #52]	; 0x34
 8005bda:	e011      	b.n	8005c00 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005bdc:	f248 0103 	movw	r1, #32771	; 0x8003
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f000 f906 	bl	8005df2 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	2b60      	cmp	r3, #96	; 0x60
 8005bf0:	d003      	beq.n	8005bfa <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2220      	movs	r2, #32
 8005bf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c04:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d039      	beq.n	8005c82 <I2C_ITError+0x102>
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	2b11      	cmp	r3, #17
 8005c12:	d002      	beq.n	8005c1a <I2C_ITError+0x9a>
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	2b21      	cmp	r3, #33	; 0x21
 8005c18:	d133      	bne.n	8005c82 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c28:	d107      	bne.n	8005c3a <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005c38:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f7fe fc26 	bl	8004490 <HAL_DMA_GetState>
 8005c44:	4603      	mov	r3, r0
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d017      	beq.n	8005c7a <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c4e:	4a33      	ldr	r2, [pc, #204]	; (8005d1c <I2C_ITError+0x19c>)
 8005c50:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2200      	movs	r2, #0
 8005c56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f7fd faa6 	bl	80031b0 <HAL_DMA_Abort_IT>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d04d      	beq.n	8005d06 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005c74:	4610      	mov	r0, r2
 8005c76:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005c78:	e045      	b.n	8005d06 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f000 f850 	bl	8005d20 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005c80:	e041      	b.n	8005d06 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d039      	beq.n	8005cfe <I2C_ITError+0x17e>
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	2b12      	cmp	r3, #18
 8005c8e:	d002      	beq.n	8005c96 <I2C_ITError+0x116>
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	2b22      	cmp	r3, #34	; 0x22
 8005c94:	d133      	bne.n	8005cfe <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ca0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ca4:	d107      	bne.n	8005cb6 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005cb4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f7fe fbe8 	bl	8004490 <HAL_DMA_GetState>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d017      	beq.n	8005cf6 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cca:	4a14      	ldr	r2, [pc, #80]	; (8005d1c <I2C_ITError+0x19c>)
 8005ccc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f7fd fa68 	bl	80031b0 <HAL_DMA_Abort_IT>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d011      	beq.n	8005d0a <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005cf0:	4610      	mov	r0, r2
 8005cf2:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005cf4:	e009      	b.n	8005d0a <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f000 f812 	bl	8005d20 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005cfc:	e005      	b.n	8005d0a <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 f80e 	bl	8005d20 <I2C_TreatErrorCallback>
  }
}
 8005d04:	e002      	b.n	8005d0c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005d06:	bf00      	nop
 8005d08:	e000      	b.n	8005d0c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005d0a:	bf00      	nop
}
 8005d0c:	bf00      	nop
 8005d0e:	3710      	adds	r7, #16
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}
 8005d14:	ffff0000 	.word	0xffff0000
 8005d18:	0800531b 	.word	0x0800531b
 8005d1c:	08005db7 	.word	0x08005db7

08005d20 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b082      	sub	sp, #8
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	2b60      	cmp	r3, #96	; 0x60
 8005d32:	d10e      	bne.n	8005d52 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2220      	movs	r2, #32
 8005d38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f7ff fadb 	bl	8005306 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005d50:	e009      	b.n	8005d66 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2200      	movs	r2, #0
 8005d56:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f7ff fac6 	bl	80052f2 <HAL_I2C_ErrorCallback>
}
 8005d66:	bf00      	nop
 8005d68:	3708      	adds	r7, #8
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}

08005d6e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005d6e:	b480      	push	{r7}
 8005d70:	b083      	sub	sp, #12
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	699b      	ldr	r3, [r3, #24]
 8005d7c:	f003 0302 	and.w	r3, r3, #2
 8005d80:	2b02      	cmp	r3, #2
 8005d82:	d103      	bne.n	8005d8c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	699b      	ldr	r3, [r3, #24]
 8005d92:	f003 0301 	and.w	r3, r3, #1
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d007      	beq.n	8005daa <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	699a      	ldr	r2, [r3, #24]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f042 0201 	orr.w	r2, r2, #1
 8005da8:	619a      	str	r2, [r3, #24]
  }
}
 8005daa:	bf00      	nop
 8005dac:	370c      	adds	r7, #12
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr

08005db6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005db6:	b580      	push	{r7, lr}
 8005db8:	b084      	sub	sp, #16
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d003      	beq.n	8005dd4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d003      	beq.n	8005de4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005de0:	2200      	movs	r2, #0
 8005de2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8005de4:	68f8      	ldr	r0, [r7, #12]
 8005de6:	f7ff ff9b 	bl	8005d20 <I2C_TreatErrorCallback>
}
 8005dea:	bf00      	nop
 8005dec:	3710      	adds	r7, #16
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}

08005df2 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005df2:	b480      	push	{r7}
 8005df4:	b085      	sub	sp, #20
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
 8005dfa:	460b      	mov	r3, r1
 8005dfc:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005e02:	887b      	ldrh	r3, [r7, #2]
 8005e04:	f003 0301 	and.w	r3, r3, #1
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d00f      	beq.n	8005e2c <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8005e12:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005e20:	2b28      	cmp	r3, #40	; 0x28
 8005e22:	d003      	beq.n	8005e2c <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005e2a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005e2c:	887b      	ldrh	r3, [r7, #2]
 8005e2e:	f003 0302 	and.w	r3, r3, #2
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d00f      	beq.n	8005e56 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8005e3c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005e4a:	2b28      	cmp	r3, #40	; 0x28
 8005e4c:	d003      	beq.n	8005e56 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005e54:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005e56:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	da03      	bge.n	8005e66 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8005e64:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005e66:	887b      	ldrh	r3, [r7, #2]
 8005e68:	2b10      	cmp	r3, #16
 8005e6a:	d103      	bne.n	8005e74 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005e72:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005e74:	887b      	ldrh	r3, [r7, #2]
 8005e76:	2b20      	cmp	r3, #32
 8005e78:	d103      	bne.n	8005e82 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f043 0320 	orr.w	r3, r3, #32
 8005e80:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005e82:	887b      	ldrh	r3, [r7, #2]
 8005e84:	2b40      	cmp	r3, #64	; 0x40
 8005e86:	d103      	bne.n	8005e90 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e8e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	6819      	ldr	r1, [r3, #0]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	43da      	mvns	r2, r3
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	400a      	ands	r2, r1
 8005ea0:	601a      	str	r2, [r3, #0]
}
 8005ea2:	bf00      	nop
 8005ea4:	3714      	adds	r7, #20
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr

08005eae <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005eae:	b480      	push	{r7}
 8005eb0:	b083      	sub	sp, #12
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
 8005eb6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	2b20      	cmp	r3, #32
 8005ec2:	d138      	bne.n	8005f36 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d101      	bne.n	8005ed2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005ece:	2302      	movs	r3, #2
 8005ed0:	e032      	b.n	8005f38 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2224      	movs	r2, #36	; 0x24
 8005ede:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f022 0201 	bic.w	r2, r2, #1
 8005ef0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005f00:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	6819      	ldr	r1, [r3, #0]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	683a      	ldr	r2, [r7, #0]
 8005f0e:	430a      	orrs	r2, r1
 8005f10:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f042 0201 	orr.w	r2, r2, #1
 8005f20:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2220      	movs	r2, #32
 8005f26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005f32:	2300      	movs	r3, #0
 8005f34:	e000      	b.n	8005f38 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005f36:	2302      	movs	r3, #2
  }
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	370c      	adds	r7, #12
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr

08005f44 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b085      	sub	sp, #20
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	2b20      	cmp	r3, #32
 8005f58:	d139      	bne.n	8005fce <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d101      	bne.n	8005f68 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005f64:	2302      	movs	r3, #2
 8005f66:	e033      	b.n	8005fd0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2224      	movs	r2, #36	; 0x24
 8005f74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f022 0201 	bic.w	r2, r2, #1
 8005f86:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005f96:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	021b      	lsls	r3, r3, #8
 8005f9c:	68fa      	ldr	r2, [r7, #12]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	68fa      	ldr	r2, [r7, #12]
 8005fa8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f042 0201 	orr.w	r2, r2, #1
 8005fb8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2220      	movs	r2, #32
 8005fbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	e000      	b.n	8005fd0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005fce:	2302      	movs	r3, #2
  }
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3714      	adds	r7, #20
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fde:	b08f      	sub	sp, #60	; 0x3c
 8005fe0:	af0a      	add	r7, sp, #40	; 0x28
 8005fe2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d101      	bne.n	8005fee <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	e116      	b.n	800621c <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d106      	bne.n	800600e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2200      	movs	r2, #0
 8006004:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f00a fa5f 	bl	80104cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2203      	movs	r2, #3
 8006012:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800601a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800601e:	2b00      	cmp	r3, #0
 8006020:	d102      	bne.n	8006028 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2200      	movs	r2, #0
 8006026:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4618      	mov	r0, r3
 800602e:	f007 f940 	bl	800d2b2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	603b      	str	r3, [r7, #0]
 8006038:	687e      	ldr	r6, [r7, #4]
 800603a:	466d      	mov	r5, sp
 800603c:	f106 0410 	add.w	r4, r6, #16
 8006040:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006042:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006044:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006046:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006048:	e894 0003 	ldmia.w	r4, {r0, r1}
 800604c:	e885 0003 	stmia.w	r5, {r0, r1}
 8006050:	1d33      	adds	r3, r6, #4
 8006052:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006054:	6838      	ldr	r0, [r7, #0]
 8006056:	f007 f80b 	bl	800d070 <USB_CoreInit>
 800605a:	4603      	mov	r3, r0
 800605c:	2b00      	cmp	r3, #0
 800605e:	d005      	beq.n	800606c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2202      	movs	r2, #2
 8006064:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	e0d7      	b.n	800621c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	2100      	movs	r1, #0
 8006072:	4618      	mov	r0, r3
 8006074:	f007 f92e 	bl	800d2d4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006078:	2300      	movs	r3, #0
 800607a:	73fb      	strb	r3, [r7, #15]
 800607c:	e04a      	b.n	8006114 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800607e:	7bfa      	ldrb	r2, [r7, #15]
 8006080:	6879      	ldr	r1, [r7, #4]
 8006082:	4613      	mov	r3, r2
 8006084:	00db      	lsls	r3, r3, #3
 8006086:	1a9b      	subs	r3, r3, r2
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	440b      	add	r3, r1
 800608c:	333d      	adds	r3, #61	; 0x3d
 800608e:	2201      	movs	r2, #1
 8006090:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006092:	7bfa      	ldrb	r2, [r7, #15]
 8006094:	6879      	ldr	r1, [r7, #4]
 8006096:	4613      	mov	r3, r2
 8006098:	00db      	lsls	r3, r3, #3
 800609a:	1a9b      	subs	r3, r3, r2
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	440b      	add	r3, r1
 80060a0:	333c      	adds	r3, #60	; 0x3c
 80060a2:	7bfa      	ldrb	r2, [r7, #15]
 80060a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80060a6:	7bfa      	ldrb	r2, [r7, #15]
 80060a8:	7bfb      	ldrb	r3, [r7, #15]
 80060aa:	b298      	uxth	r0, r3
 80060ac:	6879      	ldr	r1, [r7, #4]
 80060ae:	4613      	mov	r3, r2
 80060b0:	00db      	lsls	r3, r3, #3
 80060b2:	1a9b      	subs	r3, r3, r2
 80060b4:	009b      	lsls	r3, r3, #2
 80060b6:	440b      	add	r3, r1
 80060b8:	3342      	adds	r3, #66	; 0x42
 80060ba:	4602      	mov	r2, r0
 80060bc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80060be:	7bfa      	ldrb	r2, [r7, #15]
 80060c0:	6879      	ldr	r1, [r7, #4]
 80060c2:	4613      	mov	r3, r2
 80060c4:	00db      	lsls	r3, r3, #3
 80060c6:	1a9b      	subs	r3, r3, r2
 80060c8:	009b      	lsls	r3, r3, #2
 80060ca:	440b      	add	r3, r1
 80060cc:	333f      	adds	r3, #63	; 0x3f
 80060ce:	2200      	movs	r2, #0
 80060d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80060d2:	7bfa      	ldrb	r2, [r7, #15]
 80060d4:	6879      	ldr	r1, [r7, #4]
 80060d6:	4613      	mov	r3, r2
 80060d8:	00db      	lsls	r3, r3, #3
 80060da:	1a9b      	subs	r3, r3, r2
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	440b      	add	r3, r1
 80060e0:	3344      	adds	r3, #68	; 0x44
 80060e2:	2200      	movs	r2, #0
 80060e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80060e6:	7bfa      	ldrb	r2, [r7, #15]
 80060e8:	6879      	ldr	r1, [r7, #4]
 80060ea:	4613      	mov	r3, r2
 80060ec:	00db      	lsls	r3, r3, #3
 80060ee:	1a9b      	subs	r3, r3, r2
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	440b      	add	r3, r1
 80060f4:	3348      	adds	r3, #72	; 0x48
 80060f6:	2200      	movs	r2, #0
 80060f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80060fa:	7bfa      	ldrb	r2, [r7, #15]
 80060fc:	6879      	ldr	r1, [r7, #4]
 80060fe:	4613      	mov	r3, r2
 8006100:	00db      	lsls	r3, r3, #3
 8006102:	1a9b      	subs	r3, r3, r2
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	440b      	add	r3, r1
 8006108:	3350      	adds	r3, #80	; 0x50
 800610a:	2200      	movs	r2, #0
 800610c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800610e:	7bfb      	ldrb	r3, [r7, #15]
 8006110:	3301      	adds	r3, #1
 8006112:	73fb      	strb	r3, [r7, #15]
 8006114:	7bfa      	ldrb	r2, [r7, #15]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	429a      	cmp	r2, r3
 800611c:	d3af      	bcc.n	800607e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800611e:	2300      	movs	r3, #0
 8006120:	73fb      	strb	r3, [r7, #15]
 8006122:	e044      	b.n	80061ae <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006124:	7bfa      	ldrb	r2, [r7, #15]
 8006126:	6879      	ldr	r1, [r7, #4]
 8006128:	4613      	mov	r3, r2
 800612a:	00db      	lsls	r3, r3, #3
 800612c:	1a9b      	subs	r3, r3, r2
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	440b      	add	r3, r1
 8006132:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8006136:	2200      	movs	r2, #0
 8006138:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800613a:	7bfa      	ldrb	r2, [r7, #15]
 800613c:	6879      	ldr	r1, [r7, #4]
 800613e:	4613      	mov	r3, r2
 8006140:	00db      	lsls	r3, r3, #3
 8006142:	1a9b      	subs	r3, r3, r2
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	440b      	add	r3, r1
 8006148:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800614c:	7bfa      	ldrb	r2, [r7, #15]
 800614e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006150:	7bfa      	ldrb	r2, [r7, #15]
 8006152:	6879      	ldr	r1, [r7, #4]
 8006154:	4613      	mov	r3, r2
 8006156:	00db      	lsls	r3, r3, #3
 8006158:	1a9b      	subs	r3, r3, r2
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	440b      	add	r3, r1
 800615e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006162:	2200      	movs	r2, #0
 8006164:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006166:	7bfa      	ldrb	r2, [r7, #15]
 8006168:	6879      	ldr	r1, [r7, #4]
 800616a:	4613      	mov	r3, r2
 800616c:	00db      	lsls	r3, r3, #3
 800616e:	1a9b      	subs	r3, r3, r2
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	440b      	add	r3, r1
 8006174:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006178:	2200      	movs	r2, #0
 800617a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800617c:	7bfa      	ldrb	r2, [r7, #15]
 800617e:	6879      	ldr	r1, [r7, #4]
 8006180:	4613      	mov	r3, r2
 8006182:	00db      	lsls	r3, r3, #3
 8006184:	1a9b      	subs	r3, r3, r2
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	440b      	add	r3, r1
 800618a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800618e:	2200      	movs	r2, #0
 8006190:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006192:	7bfa      	ldrb	r2, [r7, #15]
 8006194:	6879      	ldr	r1, [r7, #4]
 8006196:	4613      	mov	r3, r2
 8006198:	00db      	lsls	r3, r3, #3
 800619a:	1a9b      	subs	r3, r3, r2
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	440b      	add	r3, r1
 80061a0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80061a4:	2200      	movs	r2, #0
 80061a6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80061a8:	7bfb      	ldrb	r3, [r7, #15]
 80061aa:	3301      	adds	r3, #1
 80061ac:	73fb      	strb	r3, [r7, #15]
 80061ae:	7bfa      	ldrb	r2, [r7, #15]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d3b5      	bcc.n	8006124 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	603b      	str	r3, [r7, #0]
 80061be:	687e      	ldr	r6, [r7, #4]
 80061c0:	466d      	mov	r5, sp
 80061c2:	f106 0410 	add.w	r4, r6, #16
 80061c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80061c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80061ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80061cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80061ce:	e894 0003 	ldmia.w	r4, {r0, r1}
 80061d2:	e885 0003 	stmia.w	r5, {r0, r1}
 80061d6:	1d33      	adds	r3, r6, #4
 80061d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80061da:	6838      	ldr	r0, [r7, #0]
 80061dc:	f007 f8a4 	bl	800d328 <USB_DevInit>
 80061e0:	4603      	mov	r3, r0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d005      	beq.n	80061f2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2202      	movs	r2, #2
 80061ea:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	e014      	b.n	800621c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2200      	movs	r2, #0
 80061f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2201      	movs	r2, #1
 80061fe:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006206:	2b01      	cmp	r3, #1
 8006208:	d102      	bne.n	8006210 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f001 f892 	bl	8007334 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4618      	mov	r0, r3
 8006216:	f008 f924 	bl	800e462 <USB_DevDisconnect>

  return HAL_OK;
 800621a:	2300      	movs	r3, #0
}
 800621c:	4618      	mov	r0, r3
 800621e:	3714      	adds	r7, #20
 8006220:	46bd      	mov	sp, r7
 8006222:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006224 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b084      	sub	sp, #16
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006238:	2b01      	cmp	r3, #1
 800623a:	d101      	bne.n	8006240 <HAL_PCD_Start+0x1c>
 800623c:	2302      	movs	r3, #2
 800623e:	e020      	b.n	8006282 <HAL_PCD_Start+0x5e>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2201      	movs	r2, #1
 8006244:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800624c:	2b01      	cmp	r3, #1
 800624e:	d109      	bne.n	8006264 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006254:	2b01      	cmp	r3, #1
 8006256:	d005      	beq.n	8006264 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800625c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4618      	mov	r0, r3
 800626a:	f007 f811 	bl	800d290 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4618      	mov	r0, r3
 8006274:	f008 f8d4 	bl	800e420 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006280:	2300      	movs	r3, #0
}
 8006282:	4618      	mov	r0, r3
 8006284:	3710      	adds	r7, #16
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}

0800628a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800628a:	b590      	push	{r4, r7, lr}
 800628c:	b08d      	sub	sp, #52	; 0x34
 800628e:	af00      	add	r7, sp, #0
 8006290:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006298:	6a3b      	ldr	r3, [r7, #32]
 800629a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4618      	mov	r0, r3
 80062a2:	f008 f992 	bl	800e5ca <USB_GetMode>
 80062a6:	4603      	mov	r3, r0
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	f040 83ca 	bne.w	8006a42 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4618      	mov	r0, r3
 80062b4:	f008 f8f6 	bl	800e4a4 <USB_ReadInterrupts>
 80062b8:	4603      	mov	r3, r0
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	f000 83c0 	beq.w	8006a40 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4618      	mov	r0, r3
 80062c6:	f008 f8ed 	bl	800e4a4 <USB_ReadInterrupts>
 80062ca:	4603      	mov	r3, r0
 80062cc:	f003 0302 	and.w	r3, r3, #2
 80062d0:	2b02      	cmp	r3, #2
 80062d2:	d107      	bne.n	80062e4 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	695a      	ldr	r2, [r3, #20]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f002 0202 	and.w	r2, r2, #2
 80062e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4618      	mov	r0, r3
 80062ea:	f008 f8db 	bl	800e4a4 <USB_ReadInterrupts>
 80062ee:	4603      	mov	r3, r0
 80062f0:	f003 0310 	and.w	r3, r3, #16
 80062f4:	2b10      	cmp	r3, #16
 80062f6:	d161      	bne.n	80063bc <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	699a      	ldr	r2, [r3, #24]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f022 0210 	bic.w	r2, r2, #16
 8006306:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8006308:	6a3b      	ldr	r3, [r7, #32]
 800630a:	6a1b      	ldr	r3, [r3, #32]
 800630c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800630e:	69bb      	ldr	r3, [r7, #24]
 8006310:	f003 020f 	and.w	r2, r3, #15
 8006314:	4613      	mov	r3, r2
 8006316:	00db      	lsls	r3, r3, #3
 8006318:	1a9b      	subs	r3, r3, r2
 800631a:	009b      	lsls	r3, r3, #2
 800631c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	4413      	add	r3, r2
 8006324:	3304      	adds	r3, #4
 8006326:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006328:	69bb      	ldr	r3, [r7, #24]
 800632a:	0c5b      	lsrs	r3, r3, #17
 800632c:	f003 030f 	and.w	r3, r3, #15
 8006330:	2b02      	cmp	r3, #2
 8006332:	d124      	bne.n	800637e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006334:	69ba      	ldr	r2, [r7, #24]
 8006336:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800633a:	4013      	ands	r3, r2
 800633c:	2b00      	cmp	r3, #0
 800633e:	d035      	beq.n	80063ac <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006344:	69bb      	ldr	r3, [r7, #24]
 8006346:	091b      	lsrs	r3, r3, #4
 8006348:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800634a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800634e:	b29b      	uxth	r3, r3
 8006350:	461a      	mov	r2, r3
 8006352:	6a38      	ldr	r0, [r7, #32]
 8006354:	f007 ff12 	bl	800e17c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	68da      	ldr	r2, [r3, #12]
 800635c:	69bb      	ldr	r3, [r7, #24]
 800635e:	091b      	lsrs	r3, r3, #4
 8006360:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006364:	441a      	add	r2, r3
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	699a      	ldr	r2, [r3, #24]
 800636e:	69bb      	ldr	r3, [r7, #24]
 8006370:	091b      	lsrs	r3, r3, #4
 8006372:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006376:	441a      	add	r2, r3
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	619a      	str	r2, [r3, #24]
 800637c:	e016      	b.n	80063ac <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800637e:	69bb      	ldr	r3, [r7, #24]
 8006380:	0c5b      	lsrs	r3, r3, #17
 8006382:	f003 030f 	and.w	r3, r3, #15
 8006386:	2b06      	cmp	r3, #6
 8006388:	d110      	bne.n	80063ac <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006390:	2208      	movs	r2, #8
 8006392:	4619      	mov	r1, r3
 8006394:	6a38      	ldr	r0, [r7, #32]
 8006396:	f007 fef1 	bl	800e17c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	699a      	ldr	r2, [r3, #24]
 800639e:	69bb      	ldr	r3, [r7, #24]
 80063a0:	091b      	lsrs	r3, r3, #4
 80063a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80063a6:	441a      	add	r2, r3
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	699a      	ldr	r2, [r3, #24]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f042 0210 	orr.w	r2, r2, #16
 80063ba:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4618      	mov	r0, r3
 80063c2:	f008 f86f 	bl	800e4a4 <USB_ReadInterrupts>
 80063c6:	4603      	mov	r3, r0
 80063c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80063cc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80063d0:	d16e      	bne.n	80064b0 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80063d2:	2300      	movs	r3, #0
 80063d4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4618      	mov	r0, r3
 80063dc:	f008 f875 	bl	800e4ca <USB_ReadDevAllOutEpInterrupt>
 80063e0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80063e2:	e062      	b.n	80064aa <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80063e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e6:	f003 0301 	and.w	r3, r3, #1
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d057      	beq.n	800649e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063f4:	b2d2      	uxtb	r2, r2
 80063f6:	4611      	mov	r1, r2
 80063f8:	4618      	mov	r0, r3
 80063fa:	f008 f89a 	bl	800e532 <USB_ReadDevOutEPInterrupt>
 80063fe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	f003 0301 	and.w	r3, r3, #1
 8006406:	2b00      	cmp	r3, #0
 8006408:	d00c      	beq.n	8006424 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800640a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640c:	015a      	lsls	r2, r3, #5
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	4413      	add	r3, r2
 8006412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006416:	461a      	mov	r2, r3
 8006418:	2301      	movs	r3, #1
 800641a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800641c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 fdde 	bl	8006fe0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	f003 0308 	and.w	r3, r3, #8
 800642a:	2b00      	cmp	r3, #0
 800642c:	d00c      	beq.n	8006448 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800642e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006430:	015a      	lsls	r2, r3, #5
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	4413      	add	r3, r2
 8006436:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800643a:	461a      	mov	r2, r3
 800643c:	2308      	movs	r3, #8
 800643e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006440:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f000 fed8 	bl	80071f8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	f003 0310 	and.w	r3, r3, #16
 800644e:	2b00      	cmp	r3, #0
 8006450:	d008      	beq.n	8006464 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006454:	015a      	lsls	r2, r3, #5
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	4413      	add	r3, r2
 800645a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800645e:	461a      	mov	r2, r3
 8006460:	2310      	movs	r3, #16
 8006462:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	f003 0320 	and.w	r3, r3, #32
 800646a:	2b00      	cmp	r3, #0
 800646c:	d008      	beq.n	8006480 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800646e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006470:	015a      	lsls	r2, r3, #5
 8006472:	69fb      	ldr	r3, [r7, #28]
 8006474:	4413      	add	r3, r2
 8006476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800647a:	461a      	mov	r2, r3
 800647c:	2320      	movs	r3, #32
 800647e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006486:	2b00      	cmp	r3, #0
 8006488:	d009      	beq.n	800649e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800648a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648c:	015a      	lsls	r2, r3, #5
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	4413      	add	r3, r2
 8006492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006496:	461a      	mov	r2, r3
 8006498:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800649c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800649e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a0:	3301      	adds	r3, #1
 80064a2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80064a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a6:	085b      	lsrs	r3, r3, #1
 80064a8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80064aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d199      	bne.n	80063e4 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4618      	mov	r0, r3
 80064b6:	f007 fff5 	bl	800e4a4 <USB_ReadInterrupts>
 80064ba:	4603      	mov	r3, r0
 80064bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064c0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80064c4:	f040 80c0 	bne.w	8006648 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4618      	mov	r0, r3
 80064ce:	f008 f816 	bl	800e4fe <USB_ReadDevAllInEpInterrupt>
 80064d2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80064d4:	2300      	movs	r3, #0
 80064d6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80064d8:	e0b2      	b.n	8006640 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80064da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064dc:	f003 0301 	and.w	r3, r3, #1
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	f000 80a7 	beq.w	8006634 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064ec:	b2d2      	uxtb	r2, r2
 80064ee:	4611      	mov	r1, r2
 80064f0:	4618      	mov	r0, r3
 80064f2:	f008 f83c 	bl	800e56e <USB_ReadDevInEPInterrupt>
 80064f6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	f003 0301 	and.w	r3, r3, #1
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d057      	beq.n	80065b2 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006504:	f003 030f 	and.w	r3, r3, #15
 8006508:	2201      	movs	r2, #1
 800650a:	fa02 f303 	lsl.w	r3, r2, r3
 800650e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006516:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	43db      	mvns	r3, r3
 800651c:	69f9      	ldr	r1, [r7, #28]
 800651e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006522:	4013      	ands	r3, r2
 8006524:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006528:	015a      	lsls	r2, r3, #5
 800652a:	69fb      	ldr	r3, [r7, #28]
 800652c:	4413      	add	r3, r2
 800652e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006532:	461a      	mov	r2, r3
 8006534:	2301      	movs	r3, #1
 8006536:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	691b      	ldr	r3, [r3, #16]
 800653c:	2b01      	cmp	r3, #1
 800653e:	d132      	bne.n	80065a6 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006540:	6879      	ldr	r1, [r7, #4]
 8006542:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006544:	4613      	mov	r3, r2
 8006546:	00db      	lsls	r3, r3, #3
 8006548:	1a9b      	subs	r3, r3, r2
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	440b      	add	r3, r1
 800654e:	3348      	adds	r3, #72	; 0x48
 8006550:	6819      	ldr	r1, [r3, #0]
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006556:	4613      	mov	r3, r2
 8006558:	00db      	lsls	r3, r3, #3
 800655a:	1a9b      	subs	r3, r3, r2
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	4403      	add	r3, r0
 8006560:	3344      	adds	r3, #68	; 0x44
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4419      	add	r1, r3
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800656a:	4613      	mov	r3, r2
 800656c:	00db      	lsls	r3, r3, #3
 800656e:	1a9b      	subs	r3, r3, r2
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	4403      	add	r3, r0
 8006574:	3348      	adds	r3, #72	; 0x48
 8006576:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657a:	2b00      	cmp	r3, #0
 800657c:	d113      	bne.n	80065a6 <HAL_PCD_IRQHandler+0x31c>
 800657e:	6879      	ldr	r1, [r7, #4]
 8006580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006582:	4613      	mov	r3, r2
 8006584:	00db      	lsls	r3, r3, #3
 8006586:	1a9b      	subs	r3, r3, r2
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	440b      	add	r3, r1
 800658c:	3350      	adds	r3, #80	; 0x50
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d108      	bne.n	80065a6 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6818      	ldr	r0, [r3, #0]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800659e:	461a      	mov	r2, r3
 80065a0:	2101      	movs	r1, #1
 80065a2:	f008 f845 	bl	800e630 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80065a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	4619      	mov	r1, r3
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f00a f82a 	bl	8010606 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	f003 0308 	and.w	r3, r3, #8
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d008      	beq.n	80065ce <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80065bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065be:	015a      	lsls	r2, r3, #5
 80065c0:	69fb      	ldr	r3, [r7, #28]
 80065c2:	4413      	add	r3, r2
 80065c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065c8:	461a      	mov	r2, r3
 80065ca:	2308      	movs	r3, #8
 80065cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	f003 0310 	and.w	r3, r3, #16
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d008      	beq.n	80065ea <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80065d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065da:	015a      	lsls	r2, r3, #5
 80065dc:	69fb      	ldr	r3, [r7, #28]
 80065de:	4413      	add	r3, r2
 80065e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065e4:	461a      	mov	r2, r3
 80065e6:	2310      	movs	r3, #16
 80065e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d008      	beq.n	8006606 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80065f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f6:	015a      	lsls	r2, r3, #5
 80065f8:	69fb      	ldr	r3, [r7, #28]
 80065fa:	4413      	add	r3, r2
 80065fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006600:	461a      	mov	r2, r3
 8006602:	2340      	movs	r3, #64	; 0x40
 8006604:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	f003 0302 	and.w	r3, r3, #2
 800660c:	2b00      	cmp	r3, #0
 800660e:	d008      	beq.n	8006622 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006612:	015a      	lsls	r2, r3, #5
 8006614:	69fb      	ldr	r3, [r7, #28]
 8006616:	4413      	add	r3, r2
 8006618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800661c:	461a      	mov	r2, r3
 800661e:	2302      	movs	r3, #2
 8006620:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006628:	2b00      	cmp	r3, #0
 800662a:	d003      	beq.n	8006634 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800662c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 fc48 	bl	8006ec4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006636:	3301      	adds	r3, #1
 8006638:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800663a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800663c:	085b      	lsrs	r3, r3, #1
 800663e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006642:	2b00      	cmp	r3, #0
 8006644:	f47f af49 	bne.w	80064da <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4618      	mov	r0, r3
 800664e:	f007 ff29 	bl	800e4a4 <USB_ReadInterrupts>
 8006652:	4603      	mov	r3, r0
 8006654:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006658:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800665c:	d122      	bne.n	80066a4 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800665e:	69fb      	ldr	r3, [r7, #28]
 8006660:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	69fa      	ldr	r2, [r7, #28]
 8006668:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800666c:	f023 0301 	bic.w	r3, r3, #1
 8006670:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8006678:	2b01      	cmp	r3, #1
 800667a:	d108      	bne.n	800668e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006684:	2100      	movs	r1, #0
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 fe78 	bl	800737c <HAL_PCDEx_LPM_Callback>
 800668c:	e002      	b.n	8006694 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f00a f830 	bl	80106f4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	695a      	ldr	r2, [r3, #20]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80066a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4618      	mov	r0, r3
 80066aa:	f007 fefb 	bl	800e4a4 <USB_ReadInterrupts>
 80066ae:	4603      	mov	r3, r0
 80066b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066b8:	d112      	bne.n	80066e0 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80066ba:	69fb      	ldr	r3, [r7, #28]
 80066bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	f003 0301 	and.w	r3, r3, #1
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d102      	bne.n	80066d0 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f009 ffec 	bl	80106a8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	695a      	ldr	r2, [r3, #20]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80066de:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4618      	mov	r0, r3
 80066e6:	f007 fedd 	bl	800e4a4 <USB_ReadInterrupts>
 80066ea:	4603      	mov	r3, r0
 80066ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066f4:	d121      	bne.n	800673a <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	695a      	ldr	r2, [r3, #20]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8006704:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800670c:	2b00      	cmp	r3, #0
 800670e:	d111      	bne.n	8006734 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2201      	movs	r2, #1
 8006714:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800671e:	089b      	lsrs	r3, r3, #2
 8006720:	f003 020f 	and.w	r2, r3, #15
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800672a:	2101      	movs	r1, #1
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f000 fe25 	bl	800737c <HAL_PCDEx_LPM_Callback>
 8006732:	e002      	b.n	800673a <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f009 ffb7 	bl	80106a8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4618      	mov	r0, r3
 8006740:	f007 feb0 	bl	800e4a4 <USB_ReadInterrupts>
 8006744:	4603      	mov	r3, r0
 8006746:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800674a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800674e:	f040 80c7 	bne.w	80068e0 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006752:	69fb      	ldr	r3, [r7, #28]
 8006754:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	69fa      	ldr	r2, [r7, #28]
 800675c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006760:	f023 0301 	bic.w	r3, r3, #1
 8006764:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	2110      	movs	r1, #16
 800676c:	4618      	mov	r0, r3
 800676e:	f006 ff39 	bl	800d5e4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006772:	2300      	movs	r3, #0
 8006774:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006776:	e056      	b.n	8006826 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800677a:	015a      	lsls	r2, r3, #5
 800677c:	69fb      	ldr	r3, [r7, #28]
 800677e:	4413      	add	r3, r2
 8006780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006784:	461a      	mov	r2, r3
 8006786:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800678a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800678c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800678e:	015a      	lsls	r2, r3, #5
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	4413      	add	r3, r2
 8006794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800679c:	0151      	lsls	r1, r2, #5
 800679e:	69fa      	ldr	r2, [r7, #28]
 80067a0:	440a      	add	r2, r1
 80067a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80067aa:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80067ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ae:	015a      	lsls	r2, r3, #5
 80067b0:	69fb      	ldr	r3, [r7, #28]
 80067b2:	4413      	add	r3, r2
 80067b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067bc:	0151      	lsls	r1, r2, #5
 80067be:	69fa      	ldr	r2, [r7, #28]
 80067c0:	440a      	add	r2, r1
 80067c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80067ca:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80067cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ce:	015a      	lsls	r2, r3, #5
 80067d0:	69fb      	ldr	r3, [r7, #28]
 80067d2:	4413      	add	r3, r2
 80067d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067d8:	461a      	mov	r2, r3
 80067da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80067de:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80067e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e2:	015a      	lsls	r2, r3, #5
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	4413      	add	r3, r2
 80067e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067f0:	0151      	lsls	r1, r2, #5
 80067f2:	69fa      	ldr	r2, [r7, #28]
 80067f4:	440a      	add	r2, r1
 80067f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80067fe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006802:	015a      	lsls	r2, r3, #5
 8006804:	69fb      	ldr	r3, [r7, #28]
 8006806:	4413      	add	r3, r2
 8006808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006810:	0151      	lsls	r1, r2, #5
 8006812:	69fa      	ldr	r2, [r7, #28]
 8006814:	440a      	add	r2, r1
 8006816:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800681a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800681e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006822:	3301      	adds	r3, #1
 8006824:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800682c:	429a      	cmp	r2, r3
 800682e:	d3a3      	bcc.n	8006778 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006830:	69fb      	ldr	r3, [r7, #28]
 8006832:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006836:	69db      	ldr	r3, [r3, #28]
 8006838:	69fa      	ldr	r2, [r7, #28]
 800683a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800683e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006842:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006848:	2b00      	cmp	r3, #0
 800684a:	d016      	beq.n	800687a <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800684c:	69fb      	ldr	r3, [r7, #28]
 800684e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006852:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006856:	69fa      	ldr	r2, [r7, #28]
 8006858:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800685c:	f043 030b 	orr.w	r3, r3, #11
 8006860:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800686a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800686c:	69fa      	ldr	r2, [r7, #28]
 800686e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006872:	f043 030b 	orr.w	r3, r3, #11
 8006876:	6453      	str	r3, [r2, #68]	; 0x44
 8006878:	e015      	b.n	80068a6 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800687a:	69fb      	ldr	r3, [r7, #28]
 800687c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006880:	695a      	ldr	r2, [r3, #20]
 8006882:	69fb      	ldr	r3, [r7, #28]
 8006884:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006888:	4619      	mov	r1, r3
 800688a:	f242 032b 	movw	r3, #8235	; 0x202b
 800688e:	4313      	orrs	r3, r2
 8006890:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006892:	69fb      	ldr	r3, [r7, #28]
 8006894:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006898:	691b      	ldr	r3, [r3, #16]
 800689a:	69fa      	ldr	r2, [r7, #28]
 800689c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068a0:	f043 030b 	orr.w	r3, r3, #11
 80068a4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80068a6:	69fb      	ldr	r3, [r7, #28]
 80068a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	69fa      	ldr	r2, [r7, #28]
 80068b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068b4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80068b8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6818      	ldr	r0, [r3, #0]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	691b      	ldr	r3, [r3, #16]
 80068c2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80068ca:	461a      	mov	r2, r3
 80068cc:	f007 feb0 	bl	800e630 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	695a      	ldr	r2, [r3, #20]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80068de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4618      	mov	r0, r3
 80068e6:	f007 fddd 	bl	800e4a4 <USB_ReadInterrupts>
 80068ea:	4603      	mov	r3, r0
 80068ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80068f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068f4:	d124      	bne.n	8006940 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4618      	mov	r0, r3
 80068fc:	f007 fe74 	bl	800e5e8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4618      	mov	r0, r3
 8006906:	f006 fece 	bl	800d6a6 <USB_GetDevSpeed>
 800690a:	4603      	mov	r3, r0
 800690c:	461a      	mov	r2, r3
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681c      	ldr	r4, [r3, #0]
 8006916:	f001 fce5 	bl	80082e4 <HAL_RCC_GetHCLKFreq>
 800691a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006920:	b2db      	uxtb	r3, r3
 8006922:	461a      	mov	r2, r3
 8006924:	4620      	mov	r0, r4
 8006926:	f006 fc11 	bl	800d14c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f009 fe93 	bl	8010656 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	695a      	ldr	r2, [r3, #20]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800693e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4618      	mov	r0, r3
 8006946:	f007 fdad 	bl	800e4a4 <USB_ReadInterrupts>
 800694a:	4603      	mov	r3, r0
 800694c:	f003 0308 	and.w	r3, r3, #8
 8006950:	2b08      	cmp	r3, #8
 8006952:	d10a      	bne.n	800696a <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f009 fe70 	bl	801063a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	695a      	ldr	r2, [r3, #20]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f002 0208 	and.w	r2, r2, #8
 8006968:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4618      	mov	r0, r3
 8006970:	f007 fd98 	bl	800e4a4 <USB_ReadInterrupts>
 8006974:	4603      	mov	r3, r0
 8006976:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800697a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800697e:	d10f      	bne.n	80069a0 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8006980:	2300      	movs	r3, #0
 8006982:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006986:	b2db      	uxtb	r3, r3
 8006988:	4619      	mov	r1, r3
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f009 fed2 	bl	8010734 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	695a      	ldr	r2, [r3, #20]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800699e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4618      	mov	r0, r3
 80069a6:	f007 fd7d 	bl	800e4a4 <USB_ReadInterrupts>
 80069aa:	4603      	mov	r3, r0
 80069ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80069b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80069b4:	d10f      	bne.n	80069d6 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80069b6:	2300      	movs	r3, #0
 80069b8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80069ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	4619      	mov	r1, r3
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f009 fea5 	bl	8010710 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	695a      	ldr	r2, [r3, #20]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80069d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4618      	mov	r0, r3
 80069dc:	f007 fd62 	bl	800e4a4 <USB_ReadInterrupts>
 80069e0:	4603      	mov	r3, r0
 80069e2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80069e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069ea:	d10a      	bne.n	8006a02 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f009 feb3 	bl	8010758 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	695a      	ldr	r2, [r3, #20]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006a00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4618      	mov	r0, r3
 8006a08:	f007 fd4c 	bl	800e4a4 <USB_ReadInterrupts>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	f003 0304 	and.w	r3, r3, #4
 8006a12:	2b04      	cmp	r3, #4
 8006a14:	d115      	bne.n	8006a42 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006a1e:	69bb      	ldr	r3, [r7, #24]
 8006a20:	f003 0304 	and.w	r3, r3, #4
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d002      	beq.n	8006a2e <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f009 fea3 	bl	8010774 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	6859      	ldr	r1, [r3, #4]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	69ba      	ldr	r2, [r7, #24]
 8006a3a:	430a      	orrs	r2, r1
 8006a3c:	605a      	str	r2, [r3, #4]
 8006a3e:	e000      	b.n	8006a42 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8006a40:	bf00      	nop
    }
  }
}
 8006a42:	3734      	adds	r7, #52	; 0x34
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd90      	pop	{r4, r7, pc}

08006a48 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b082      	sub	sp, #8
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	460b      	mov	r3, r1
 8006a52:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006a5a:	2b01      	cmp	r3, #1
 8006a5c:	d101      	bne.n	8006a62 <HAL_PCD_SetAddress+0x1a>
 8006a5e:	2302      	movs	r3, #2
 8006a60:	e013      	b.n	8006a8a <HAL_PCD_SetAddress+0x42>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2201      	movs	r2, #1
 8006a66:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	78fa      	ldrb	r2, [r7, #3]
 8006a6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	78fa      	ldrb	r2, [r7, #3]
 8006a78:	4611      	mov	r1, r2
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f007 fcaa 	bl	800e3d4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006a88:	2300      	movs	r3, #0
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3708      	adds	r7, #8
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}

08006a92 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006a92:	b580      	push	{r7, lr}
 8006a94:	b084      	sub	sp, #16
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	6078      	str	r0, [r7, #4]
 8006a9a:	4608      	mov	r0, r1
 8006a9c:	4611      	mov	r1, r2
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	70fb      	strb	r3, [r7, #3]
 8006aa4:	460b      	mov	r3, r1
 8006aa6:	803b      	strh	r3, [r7, #0]
 8006aa8:	4613      	mov	r3, r2
 8006aaa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006aac:	2300      	movs	r3, #0
 8006aae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006ab0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	da0f      	bge.n	8006ad8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006ab8:	78fb      	ldrb	r3, [r7, #3]
 8006aba:	f003 020f 	and.w	r2, r3, #15
 8006abe:	4613      	mov	r3, r2
 8006ac0:	00db      	lsls	r3, r3, #3
 8006ac2:	1a9b      	subs	r3, r3, r2
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	3338      	adds	r3, #56	; 0x38
 8006ac8:	687a      	ldr	r2, [r7, #4]
 8006aca:	4413      	add	r3, r2
 8006acc:	3304      	adds	r3, #4
 8006ace:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	705a      	strb	r2, [r3, #1]
 8006ad6:	e00f      	b.n	8006af8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006ad8:	78fb      	ldrb	r3, [r7, #3]
 8006ada:	f003 020f 	and.w	r2, r3, #15
 8006ade:	4613      	mov	r3, r2
 8006ae0:	00db      	lsls	r3, r3, #3
 8006ae2:	1a9b      	subs	r3, r3, r2
 8006ae4:	009b      	lsls	r3, r3, #2
 8006ae6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	4413      	add	r3, r2
 8006aee:	3304      	adds	r3, #4
 8006af0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2200      	movs	r2, #0
 8006af6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006af8:	78fb      	ldrb	r3, [r7, #3]
 8006afa:	f003 030f 	and.w	r3, r3, #15
 8006afe:	b2da      	uxtb	r2, r3
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006b04:	883a      	ldrh	r2, [r7, #0]
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	78ba      	ldrb	r2, [r7, #2]
 8006b0e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	785b      	ldrb	r3, [r3, #1]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d004      	beq.n	8006b22 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	b29a      	uxth	r2, r3
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006b22:	78bb      	ldrb	r3, [r7, #2]
 8006b24:	2b02      	cmp	r3, #2
 8006b26:	d102      	bne.n	8006b2e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d101      	bne.n	8006b3c <HAL_PCD_EP_Open+0xaa>
 8006b38:	2302      	movs	r3, #2
 8006b3a:	e00e      	b.n	8006b5a <HAL_PCD_EP_Open+0xc8>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	68f9      	ldr	r1, [r7, #12]
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f006 fdd0 	bl	800d6f0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2200      	movs	r2, #0
 8006b54:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8006b58:	7afb      	ldrb	r3, [r7, #11]
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3710      	adds	r7, #16
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}

08006b62 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006b62:	b580      	push	{r7, lr}
 8006b64:	b084      	sub	sp, #16
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
 8006b6a:	460b      	mov	r3, r1
 8006b6c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006b6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	da0f      	bge.n	8006b96 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b76:	78fb      	ldrb	r3, [r7, #3]
 8006b78:	f003 020f 	and.w	r2, r3, #15
 8006b7c:	4613      	mov	r3, r2
 8006b7e:	00db      	lsls	r3, r3, #3
 8006b80:	1a9b      	subs	r3, r3, r2
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	3338      	adds	r3, #56	; 0x38
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	4413      	add	r3, r2
 8006b8a:	3304      	adds	r3, #4
 8006b8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2201      	movs	r2, #1
 8006b92:	705a      	strb	r2, [r3, #1]
 8006b94:	e00f      	b.n	8006bb6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006b96:	78fb      	ldrb	r3, [r7, #3]
 8006b98:	f003 020f 	and.w	r2, r3, #15
 8006b9c:	4613      	mov	r3, r2
 8006b9e:	00db      	lsls	r3, r3, #3
 8006ba0:	1a9b      	subs	r3, r3, r2
 8006ba2:	009b      	lsls	r3, r3, #2
 8006ba4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006ba8:	687a      	ldr	r2, [r7, #4]
 8006baa:	4413      	add	r3, r2
 8006bac:	3304      	adds	r3, #4
 8006bae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006bb6:	78fb      	ldrb	r3, [r7, #3]
 8006bb8:	f003 030f 	and.w	r3, r3, #15
 8006bbc:	b2da      	uxtb	r2, r3
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d101      	bne.n	8006bd0 <HAL_PCD_EP_Close+0x6e>
 8006bcc:	2302      	movs	r3, #2
 8006bce:	e00e      	b.n	8006bee <HAL_PCD_EP_Close+0x8c>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	68f9      	ldr	r1, [r7, #12]
 8006bde:	4618      	mov	r0, r3
 8006be0:	f006 fe0e 	bl	800d800 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2200      	movs	r2, #0
 8006be8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8006bec:	2300      	movs	r3, #0
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3710      	adds	r7, #16
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}

08006bf6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006bf6:	b580      	push	{r7, lr}
 8006bf8:	b086      	sub	sp, #24
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	60f8      	str	r0, [r7, #12]
 8006bfe:	607a      	str	r2, [r7, #4]
 8006c00:	603b      	str	r3, [r7, #0]
 8006c02:	460b      	mov	r3, r1
 8006c04:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006c06:	7afb      	ldrb	r3, [r7, #11]
 8006c08:	f003 020f 	and.w	r2, r3, #15
 8006c0c:	4613      	mov	r3, r2
 8006c0e:	00db      	lsls	r3, r3, #3
 8006c10:	1a9b      	subs	r3, r3, r2
 8006c12:	009b      	lsls	r3, r3, #2
 8006c14:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006c18:	68fa      	ldr	r2, [r7, #12]
 8006c1a:	4413      	add	r3, r2
 8006c1c:	3304      	adds	r3, #4
 8006c1e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	683a      	ldr	r2, [r7, #0]
 8006c2a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	2200      	movs	r2, #0
 8006c36:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006c38:	7afb      	ldrb	r3, [r7, #11]
 8006c3a:	f003 030f 	and.w	r3, r3, #15
 8006c3e:	b2da      	uxtb	r2, r3
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	691b      	ldr	r3, [r3, #16]
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d102      	bne.n	8006c52 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006c4c:	687a      	ldr	r2, [r7, #4]
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006c52:	7afb      	ldrb	r3, [r7, #11]
 8006c54:	f003 030f 	and.w	r3, r3, #15
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d109      	bne.n	8006c70 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	6818      	ldr	r0, [r3, #0]
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	691b      	ldr	r3, [r3, #16]
 8006c64:	b2db      	uxtb	r3, r3
 8006c66:	461a      	mov	r2, r3
 8006c68:	6979      	ldr	r1, [r7, #20]
 8006c6a:	f007 f8f1 	bl	800de50 <USB_EP0StartXfer>
 8006c6e:	e008      	b.n	8006c82 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	6818      	ldr	r0, [r3, #0]
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	691b      	ldr	r3, [r3, #16]
 8006c78:	b2db      	uxtb	r3, r3
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	6979      	ldr	r1, [r7, #20]
 8006c7e:	f006 fe9b 	bl	800d9b8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006c82:	2300      	movs	r3, #0
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3718      	adds	r7, #24
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	460b      	mov	r3, r1
 8006c96:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006c98:	78fb      	ldrb	r3, [r7, #3]
 8006c9a:	f003 020f 	and.w	r2, r3, #15
 8006c9e:	6879      	ldr	r1, [r7, #4]
 8006ca0:	4613      	mov	r3, r2
 8006ca2:	00db      	lsls	r3, r3, #3
 8006ca4:	1a9b      	subs	r3, r3, r2
 8006ca6:	009b      	lsls	r3, r3, #2
 8006ca8:	440b      	add	r3, r1
 8006caa:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006cae:	681b      	ldr	r3, [r3, #0]
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	370c      	adds	r7, #12
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr

08006cbc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b086      	sub	sp, #24
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	60f8      	str	r0, [r7, #12]
 8006cc4:	607a      	str	r2, [r7, #4]
 8006cc6:	603b      	str	r3, [r7, #0]
 8006cc8:	460b      	mov	r3, r1
 8006cca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006ccc:	7afb      	ldrb	r3, [r7, #11]
 8006cce:	f003 020f 	and.w	r2, r3, #15
 8006cd2:	4613      	mov	r3, r2
 8006cd4:	00db      	lsls	r3, r3, #3
 8006cd6:	1a9b      	subs	r3, r3, r2
 8006cd8:	009b      	lsls	r3, r3, #2
 8006cda:	3338      	adds	r3, #56	; 0x38
 8006cdc:	68fa      	ldr	r2, [r7, #12]
 8006cde:	4413      	add	r3, r2
 8006ce0:	3304      	adds	r3, #4
 8006ce2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	683a      	ldr	r2, [r7, #0]
 8006cee:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006cfc:	7afb      	ldrb	r3, [r7, #11]
 8006cfe:	f003 030f 	and.w	r3, r3, #15
 8006d02:	b2da      	uxtb	r2, r3
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	691b      	ldr	r3, [r3, #16]
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d102      	bne.n	8006d16 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006d10:	687a      	ldr	r2, [r7, #4]
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006d16:	7afb      	ldrb	r3, [r7, #11]
 8006d18:	f003 030f 	and.w	r3, r3, #15
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d109      	bne.n	8006d34 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	6818      	ldr	r0, [r3, #0]
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	691b      	ldr	r3, [r3, #16]
 8006d28:	b2db      	uxtb	r3, r3
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	6979      	ldr	r1, [r7, #20]
 8006d2e:	f007 f88f 	bl	800de50 <USB_EP0StartXfer>
 8006d32:	e008      	b.n	8006d46 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	6818      	ldr	r0, [r3, #0]
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	691b      	ldr	r3, [r3, #16]
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	461a      	mov	r2, r3
 8006d40:	6979      	ldr	r1, [r7, #20]
 8006d42:	f006 fe39 	bl	800d9b8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006d46:	2300      	movs	r3, #0
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3718      	adds	r7, #24
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}

08006d50 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b084      	sub	sp, #16
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	460b      	mov	r3, r1
 8006d5a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006d5c:	78fb      	ldrb	r3, [r7, #3]
 8006d5e:	f003 020f 	and.w	r2, r3, #15
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	429a      	cmp	r2, r3
 8006d68:	d901      	bls.n	8006d6e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	e050      	b.n	8006e10 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006d6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	da0f      	bge.n	8006d96 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006d76:	78fb      	ldrb	r3, [r7, #3]
 8006d78:	f003 020f 	and.w	r2, r3, #15
 8006d7c:	4613      	mov	r3, r2
 8006d7e:	00db      	lsls	r3, r3, #3
 8006d80:	1a9b      	subs	r3, r3, r2
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	3338      	adds	r3, #56	; 0x38
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	4413      	add	r3, r2
 8006d8a:	3304      	adds	r3, #4
 8006d8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2201      	movs	r2, #1
 8006d92:	705a      	strb	r2, [r3, #1]
 8006d94:	e00d      	b.n	8006db2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006d96:	78fa      	ldrb	r2, [r7, #3]
 8006d98:	4613      	mov	r3, r2
 8006d9a:	00db      	lsls	r3, r3, #3
 8006d9c:	1a9b      	subs	r3, r3, r2
 8006d9e:	009b      	lsls	r3, r3, #2
 8006da0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006da4:	687a      	ldr	r2, [r7, #4]
 8006da6:	4413      	add	r3, r2
 8006da8:	3304      	adds	r3, #4
 8006daa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2200      	movs	r2, #0
 8006db0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2201      	movs	r2, #1
 8006db6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006db8:	78fb      	ldrb	r3, [r7, #3]
 8006dba:	f003 030f 	and.w	r3, r3, #15
 8006dbe:	b2da      	uxtb	r2, r3
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006dca:	2b01      	cmp	r3, #1
 8006dcc:	d101      	bne.n	8006dd2 <HAL_PCD_EP_SetStall+0x82>
 8006dce:	2302      	movs	r3, #2
 8006dd0:	e01e      	b.n	8006e10 <HAL_PCD_EP_SetStall+0xc0>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	68f9      	ldr	r1, [r7, #12]
 8006de0:	4618      	mov	r0, r3
 8006de2:	f007 fa23 	bl	800e22c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006de6:	78fb      	ldrb	r3, [r7, #3]
 8006de8:	f003 030f 	and.w	r3, r3, #15
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d10a      	bne.n	8006e06 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6818      	ldr	r0, [r3, #0]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	691b      	ldr	r3, [r3, #16]
 8006df8:	b2d9      	uxtb	r1, r3
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006e00:	461a      	mov	r2, r3
 8006e02:	f007 fc15 	bl	800e630 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006e0e:	2300      	movs	r3, #0
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3710      	adds	r7, #16
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b084      	sub	sp, #16
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	460b      	mov	r3, r1
 8006e22:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006e24:	78fb      	ldrb	r3, [r7, #3]
 8006e26:	f003 020f 	and.w	r2, r3, #15
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d901      	bls.n	8006e36 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	e042      	b.n	8006ebc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006e36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	da0f      	bge.n	8006e5e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006e3e:	78fb      	ldrb	r3, [r7, #3]
 8006e40:	f003 020f 	and.w	r2, r3, #15
 8006e44:	4613      	mov	r3, r2
 8006e46:	00db      	lsls	r3, r3, #3
 8006e48:	1a9b      	subs	r3, r3, r2
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	3338      	adds	r3, #56	; 0x38
 8006e4e:	687a      	ldr	r2, [r7, #4]
 8006e50:	4413      	add	r3, r2
 8006e52:	3304      	adds	r3, #4
 8006e54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2201      	movs	r2, #1
 8006e5a:	705a      	strb	r2, [r3, #1]
 8006e5c:	e00f      	b.n	8006e7e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006e5e:	78fb      	ldrb	r3, [r7, #3]
 8006e60:	f003 020f 	and.w	r2, r3, #15
 8006e64:	4613      	mov	r3, r2
 8006e66:	00db      	lsls	r3, r3, #3
 8006e68:	1a9b      	subs	r3, r3, r2
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	4413      	add	r3, r2
 8006e74:	3304      	adds	r3, #4
 8006e76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2200      	movs	r2, #0
 8006e82:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006e84:	78fb      	ldrb	r3, [r7, #3]
 8006e86:	f003 030f 	and.w	r3, r3, #15
 8006e8a:	b2da      	uxtb	r2, r3
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006e96:	2b01      	cmp	r3, #1
 8006e98:	d101      	bne.n	8006e9e <HAL_PCD_EP_ClrStall+0x86>
 8006e9a:	2302      	movs	r3, #2
 8006e9c:	e00e      	b.n	8006ebc <HAL_PCD_EP_ClrStall+0xa4>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	68f9      	ldr	r1, [r7, #12]
 8006eac:	4618      	mov	r0, r3
 8006eae:	f007 fa2b 	bl	800e308 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006eba:	2300      	movs	r3, #0
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3710      	adds	r7, #16
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b08a      	sub	sp, #40	; 0x28
 8006ec8:	af02      	add	r7, sp, #8
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006ed8:	683a      	ldr	r2, [r7, #0]
 8006eda:	4613      	mov	r3, r2
 8006edc:	00db      	lsls	r3, r3, #3
 8006ede:	1a9b      	subs	r3, r3, r2
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	3338      	adds	r3, #56	; 0x38
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	4413      	add	r3, r2
 8006ee8:	3304      	adds	r3, #4
 8006eea:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	699a      	ldr	r2, [r3, #24]
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	695b      	ldr	r3, [r3, #20]
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d901      	bls.n	8006efc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006ef8:	2301      	movs	r3, #1
 8006efa:	e06c      	b.n	8006fd6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	695a      	ldr	r2, [r3, #20]
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	699b      	ldr	r3, [r3, #24]
 8006f04:	1ad3      	subs	r3, r2, r3
 8006f06:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	689b      	ldr	r3, [r3, #8]
 8006f0c:	69fa      	ldr	r2, [r7, #28]
 8006f0e:	429a      	cmp	r2, r3
 8006f10:	d902      	bls.n	8006f18 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006f18:	69fb      	ldr	r3, [r7, #28]
 8006f1a:	3303      	adds	r3, #3
 8006f1c:	089b      	lsrs	r3, r3, #2
 8006f1e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006f20:	e02b      	b.n	8006f7a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	695a      	ldr	r2, [r3, #20]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	699b      	ldr	r3, [r3, #24]
 8006f2a:	1ad3      	subs	r3, r2, r3
 8006f2c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	69fa      	ldr	r2, [r7, #28]
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d902      	bls.n	8006f3e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006f3e:	69fb      	ldr	r3, [r7, #28]
 8006f40:	3303      	adds	r3, #3
 8006f42:	089b      	lsrs	r3, r3, #2
 8006f44:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	68d9      	ldr	r1, [r3, #12]
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	b2da      	uxtb	r2, r3
 8006f4e:	69fb      	ldr	r3, [r7, #28]
 8006f50:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006f56:	b2db      	uxtb	r3, r3
 8006f58:	9300      	str	r3, [sp, #0]
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	6978      	ldr	r0, [r7, #20]
 8006f5e:	f007 f8cf 	bl	800e100 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	68da      	ldr	r2, [r3, #12]
 8006f66:	69fb      	ldr	r3, [r7, #28]
 8006f68:	441a      	add	r2, r3
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	699a      	ldr	r2, [r3, #24]
 8006f72:	69fb      	ldr	r3, [r7, #28]
 8006f74:	441a      	add	r2, r3
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	015a      	lsls	r2, r3, #5
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	4413      	add	r3, r2
 8006f82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f86:	699b      	ldr	r3, [r3, #24]
 8006f88:	b29b      	uxth	r3, r3
 8006f8a:	69ba      	ldr	r2, [r7, #24]
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d809      	bhi.n	8006fa4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	699a      	ldr	r2, [r3, #24]
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d203      	bcs.n	8006fa4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	695b      	ldr	r3, [r3, #20]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d1be      	bne.n	8006f22 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	695a      	ldr	r2, [r3, #20]
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	699b      	ldr	r3, [r3, #24]
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d811      	bhi.n	8006fd4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	f003 030f 	and.w	r3, r3, #15
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8006fbc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	43db      	mvns	r3, r3
 8006fca:	6939      	ldr	r1, [r7, #16]
 8006fcc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006fd0:	4013      	ands	r3, r2
 8006fd2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006fd4:	2300      	movs	r3, #0
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3720      	adds	r7, #32
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}
	...

08006fe0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b086      	sub	sp, #24
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	333c      	adds	r3, #60	; 0x3c
 8006ff8:	3304      	adds	r3, #4
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	015a      	lsls	r2, r3, #5
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	4413      	add	r3, r2
 8007006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	691b      	ldr	r3, [r3, #16]
 8007012:	2b01      	cmp	r3, #1
 8007014:	f040 80a0 	bne.w	8007158 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	f003 0308 	and.w	r3, r3, #8
 800701e:	2b00      	cmp	r3, #0
 8007020:	d015      	beq.n	800704e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	4a72      	ldr	r2, [pc, #456]	; (80071f0 <PCD_EP_OutXfrComplete_int+0x210>)
 8007026:	4293      	cmp	r3, r2
 8007028:	f240 80dd 	bls.w	80071e6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007032:	2b00      	cmp	r3, #0
 8007034:	f000 80d7 	beq.w	80071e6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	015a      	lsls	r2, r3, #5
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	4413      	add	r3, r2
 8007040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007044:	461a      	mov	r2, r3
 8007046:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800704a:	6093      	str	r3, [r2, #8]
 800704c:	e0cb      	b.n	80071e6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	f003 0320 	and.w	r3, r3, #32
 8007054:	2b00      	cmp	r3, #0
 8007056:	d009      	beq.n	800706c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	015a      	lsls	r2, r3, #5
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	4413      	add	r3, r2
 8007060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007064:	461a      	mov	r2, r3
 8007066:	2320      	movs	r3, #32
 8007068:	6093      	str	r3, [r2, #8]
 800706a:	e0bc      	b.n	80071e6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007072:	2b00      	cmp	r3, #0
 8007074:	f040 80b7 	bne.w	80071e6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	4a5d      	ldr	r2, [pc, #372]	; (80071f0 <PCD_EP_OutXfrComplete_int+0x210>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d90f      	bls.n	80070a0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007086:	2b00      	cmp	r3, #0
 8007088:	d00a      	beq.n	80070a0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	015a      	lsls	r2, r3, #5
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	4413      	add	r3, r2
 8007092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007096:	461a      	mov	r2, r3
 8007098:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800709c:	6093      	str	r3, [r2, #8]
 800709e:	e0a2      	b.n	80071e6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80070a0:	6879      	ldr	r1, [r7, #4]
 80070a2:	683a      	ldr	r2, [r7, #0]
 80070a4:	4613      	mov	r3, r2
 80070a6:	00db      	lsls	r3, r3, #3
 80070a8:	1a9b      	subs	r3, r3, r2
 80070aa:	009b      	lsls	r3, r3, #2
 80070ac:	440b      	add	r3, r1
 80070ae:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80070b2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	0159      	lsls	r1, r3, #5
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	440b      	add	r3, r1
 80070bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070c0:	691b      	ldr	r3, [r3, #16]
 80070c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80070c6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	683a      	ldr	r2, [r7, #0]
 80070cc:	4613      	mov	r3, r2
 80070ce:	00db      	lsls	r3, r3, #3
 80070d0:	1a9b      	subs	r3, r3, r2
 80070d2:	009b      	lsls	r3, r3, #2
 80070d4:	4403      	add	r3, r0
 80070d6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80070da:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80070dc:	6879      	ldr	r1, [r7, #4]
 80070de:	683a      	ldr	r2, [r7, #0]
 80070e0:	4613      	mov	r3, r2
 80070e2:	00db      	lsls	r3, r3, #3
 80070e4:	1a9b      	subs	r3, r3, r2
 80070e6:	009b      	lsls	r3, r3, #2
 80070e8:	440b      	add	r3, r1
 80070ea:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80070ee:	6819      	ldr	r1, [r3, #0]
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	683a      	ldr	r2, [r7, #0]
 80070f4:	4613      	mov	r3, r2
 80070f6:	00db      	lsls	r3, r3, #3
 80070f8:	1a9b      	subs	r3, r3, r2
 80070fa:	009b      	lsls	r3, r3, #2
 80070fc:	4403      	add	r3, r0
 80070fe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4419      	add	r1, r3
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	683a      	ldr	r2, [r7, #0]
 800710a:	4613      	mov	r3, r2
 800710c:	00db      	lsls	r3, r3, #3
 800710e:	1a9b      	subs	r3, r3, r2
 8007110:	009b      	lsls	r3, r3, #2
 8007112:	4403      	add	r3, r0
 8007114:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007118:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d114      	bne.n	800714a <PCD_EP_OutXfrComplete_int+0x16a>
 8007120:	6879      	ldr	r1, [r7, #4]
 8007122:	683a      	ldr	r2, [r7, #0]
 8007124:	4613      	mov	r3, r2
 8007126:	00db      	lsls	r3, r3, #3
 8007128:	1a9b      	subs	r3, r3, r2
 800712a:	009b      	lsls	r3, r3, #2
 800712c:	440b      	add	r3, r1
 800712e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d108      	bne.n	800714a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6818      	ldr	r0, [r3, #0]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007142:	461a      	mov	r2, r3
 8007144:	2101      	movs	r1, #1
 8007146:	f007 fa73 	bl	800e630 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	b2db      	uxtb	r3, r3
 800714e:	4619      	mov	r1, r3
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f009 fa3d 	bl	80105d0 <HAL_PCD_DataOutStageCallback>
 8007156:	e046      	b.n	80071e6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	4a26      	ldr	r2, [pc, #152]	; (80071f4 <PCD_EP_OutXfrComplete_int+0x214>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d124      	bne.n	80071aa <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007166:	2b00      	cmp	r3, #0
 8007168:	d00a      	beq.n	8007180 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	015a      	lsls	r2, r3, #5
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	4413      	add	r3, r2
 8007172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007176:	461a      	mov	r2, r3
 8007178:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800717c:	6093      	str	r3, [r2, #8]
 800717e:	e032      	b.n	80071e6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	f003 0320 	and.w	r3, r3, #32
 8007186:	2b00      	cmp	r3, #0
 8007188:	d008      	beq.n	800719c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	015a      	lsls	r2, r3, #5
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	4413      	add	r3, r2
 8007192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007196:	461a      	mov	r2, r3
 8007198:	2320      	movs	r3, #32
 800719a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	b2db      	uxtb	r3, r3
 80071a0:	4619      	mov	r1, r3
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f009 fa14 	bl	80105d0 <HAL_PCD_DataOutStageCallback>
 80071a8:	e01d      	b.n	80071e6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d114      	bne.n	80071da <PCD_EP_OutXfrComplete_int+0x1fa>
 80071b0:	6879      	ldr	r1, [r7, #4]
 80071b2:	683a      	ldr	r2, [r7, #0]
 80071b4:	4613      	mov	r3, r2
 80071b6:	00db      	lsls	r3, r3, #3
 80071b8:	1a9b      	subs	r3, r3, r2
 80071ba:	009b      	lsls	r3, r3, #2
 80071bc:	440b      	add	r3, r1
 80071be:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d108      	bne.n	80071da <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6818      	ldr	r0, [r3, #0]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80071d2:	461a      	mov	r2, r3
 80071d4:	2100      	movs	r1, #0
 80071d6:	f007 fa2b 	bl	800e630 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	b2db      	uxtb	r3, r3
 80071de:	4619      	mov	r1, r3
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f009 f9f5 	bl	80105d0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80071e6:	2300      	movs	r3, #0
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3718      	adds	r7, #24
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}
 80071f0:	4f54300a 	.word	0x4f54300a
 80071f4:	4f54310a 	.word	0x4f54310a

080071f8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b086      	sub	sp, #24
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	333c      	adds	r3, #60	; 0x3c
 8007210:	3304      	adds	r3, #4
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	015a      	lsls	r2, r3, #5
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	4413      	add	r3, r2
 800721e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	4a15      	ldr	r2, [pc, #84]	; (8007280 <PCD_EP_OutSetupPacket_int+0x88>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d90e      	bls.n	800724c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007234:	2b00      	cmp	r3, #0
 8007236:	d009      	beq.n	800724c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	015a      	lsls	r2, r3, #5
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	4413      	add	r3, r2
 8007240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007244:	461a      	mov	r2, r3
 8007246:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800724a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f009 f9ad 	bl	80105ac <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	4a0a      	ldr	r2, [pc, #40]	; (8007280 <PCD_EP_OutSetupPacket_int+0x88>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d90c      	bls.n	8007274 <PCD_EP_OutSetupPacket_int+0x7c>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	691b      	ldr	r3, [r3, #16]
 800725e:	2b01      	cmp	r3, #1
 8007260:	d108      	bne.n	8007274 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6818      	ldr	r0, [r3, #0]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800726c:	461a      	mov	r2, r3
 800726e:	2101      	movs	r1, #1
 8007270:	f007 f9de 	bl	800e630 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007274:	2300      	movs	r3, #0
}
 8007276:	4618      	mov	r0, r3
 8007278:	3718      	adds	r7, #24
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
 800727e:	bf00      	nop
 8007280:	4f54300a 	.word	0x4f54300a

08007284 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007284:	b480      	push	{r7}
 8007286:	b085      	sub	sp, #20
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	460b      	mov	r3, r1
 800728e:	70fb      	strb	r3, [r7, #3]
 8007290:	4613      	mov	r3, r2
 8007292:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800729a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800729c:	78fb      	ldrb	r3, [r7, #3]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d107      	bne.n	80072b2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80072a2:	883b      	ldrh	r3, [r7, #0]
 80072a4:	0419      	lsls	r1, r3, #16
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	68ba      	ldr	r2, [r7, #8]
 80072ac:	430a      	orrs	r2, r1
 80072ae:	629a      	str	r2, [r3, #40]	; 0x28
 80072b0:	e028      	b.n	8007304 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072b8:	0c1b      	lsrs	r3, r3, #16
 80072ba:	68ba      	ldr	r2, [r7, #8]
 80072bc:	4413      	add	r3, r2
 80072be:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80072c0:	2300      	movs	r3, #0
 80072c2:	73fb      	strb	r3, [r7, #15]
 80072c4:	e00d      	b.n	80072e2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681a      	ldr	r2, [r3, #0]
 80072ca:	7bfb      	ldrb	r3, [r7, #15]
 80072cc:	3340      	adds	r3, #64	; 0x40
 80072ce:	009b      	lsls	r3, r3, #2
 80072d0:	4413      	add	r3, r2
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	0c1b      	lsrs	r3, r3, #16
 80072d6:	68ba      	ldr	r2, [r7, #8]
 80072d8:	4413      	add	r3, r2
 80072da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80072dc:	7bfb      	ldrb	r3, [r7, #15]
 80072de:	3301      	adds	r3, #1
 80072e0:	73fb      	strb	r3, [r7, #15]
 80072e2:	7bfa      	ldrb	r2, [r7, #15]
 80072e4:	78fb      	ldrb	r3, [r7, #3]
 80072e6:	3b01      	subs	r3, #1
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d3ec      	bcc.n	80072c6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80072ec:	883b      	ldrh	r3, [r7, #0]
 80072ee:	0418      	lsls	r0, r3, #16
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6819      	ldr	r1, [r3, #0]
 80072f4:	78fb      	ldrb	r3, [r7, #3]
 80072f6:	3b01      	subs	r3, #1
 80072f8:	68ba      	ldr	r2, [r7, #8]
 80072fa:	4302      	orrs	r2, r0
 80072fc:	3340      	adds	r3, #64	; 0x40
 80072fe:	009b      	lsls	r3, r3, #2
 8007300:	440b      	add	r3, r1
 8007302:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007304:	2300      	movs	r3, #0
}
 8007306:	4618      	mov	r0, r3
 8007308:	3714      	adds	r7, #20
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr

08007312 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007312:	b480      	push	{r7}
 8007314:	b083      	sub	sp, #12
 8007316:	af00      	add	r7, sp, #0
 8007318:	6078      	str	r0, [r7, #4]
 800731a:	460b      	mov	r3, r1
 800731c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	887a      	ldrh	r2, [r7, #2]
 8007324:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007326:	2300      	movs	r3, #0
}
 8007328:	4618      	mov	r0, r3
 800732a:	370c      	adds	r7, #12
 800732c:	46bd      	mov	sp, r7
 800732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007332:	4770      	bx	lr

08007334 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007334:	b480      	push	{r7}
 8007336:	b085      	sub	sp, #20
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2201      	movs	r2, #1
 8007346:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2200      	movs	r2, #0
 800734e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	699b      	ldr	r3, [r3, #24]
 8007356:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007362:	4b05      	ldr	r3, [pc, #20]	; (8007378 <HAL_PCDEx_ActivateLPM+0x44>)
 8007364:	4313      	orrs	r3, r2
 8007366:	68fa      	ldr	r2, [r7, #12]
 8007368:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800736a:	2300      	movs	r3, #0
}
 800736c:	4618      	mov	r0, r3
 800736e:	3714      	adds	r7, #20
 8007370:	46bd      	mov	sp, r7
 8007372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007376:	4770      	bx	lr
 8007378:	10000003 	.word	0x10000003

0800737c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800737c:	b480      	push	{r7}
 800737e:	b083      	sub	sp, #12
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	460b      	mov	r3, r1
 8007386:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007388:	bf00      	nop
 800738a:	370c      	adds	r7, #12
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr

08007394 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800739c:	4b29      	ldr	r3, [pc, #164]	; (8007444 <HAL_PWREx_ConfigSupply+0xb0>)
 800739e:	68db      	ldr	r3, [r3, #12]
 80073a0:	f003 0307 	and.w	r3, r3, #7
 80073a4:	2b06      	cmp	r3, #6
 80073a6:	d00a      	beq.n	80073be <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80073a8:	4b26      	ldr	r3, [pc, #152]	; (8007444 <HAL_PWREx_ConfigSupply+0xb0>)
 80073aa:	68db      	ldr	r3, [r3, #12]
 80073ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073b0:	687a      	ldr	r2, [r7, #4]
 80073b2:	429a      	cmp	r2, r3
 80073b4:	d001      	beq.n	80073ba <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80073b6:	2301      	movs	r3, #1
 80073b8:	e040      	b.n	800743c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80073ba:	2300      	movs	r3, #0
 80073bc:	e03e      	b.n	800743c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80073be:	4b21      	ldr	r3, [pc, #132]	; (8007444 <HAL_PWREx_ConfigSupply+0xb0>)
 80073c0:	68db      	ldr	r3, [r3, #12]
 80073c2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80073c6:	491f      	ldr	r1, [pc, #124]	; (8007444 <HAL_PWREx_ConfigSupply+0xb0>)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	4313      	orrs	r3, r2
 80073cc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80073ce:	f7fa fc35 	bl	8001c3c <HAL_GetTick>
 80073d2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80073d4:	e009      	b.n	80073ea <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80073d6:	f7fa fc31 	bl	8001c3c <HAL_GetTick>
 80073da:	4602      	mov	r2, r0
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	1ad3      	subs	r3, r2, r3
 80073e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80073e4:	d901      	bls.n	80073ea <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80073e6:	2301      	movs	r3, #1
 80073e8:	e028      	b.n	800743c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80073ea:	4b16      	ldr	r3, [pc, #88]	; (8007444 <HAL_PWREx_ConfigSupply+0xb0>)
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80073f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073f6:	d1ee      	bne.n	80073d6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2b1e      	cmp	r3, #30
 80073fc:	d008      	beq.n	8007410 <HAL_PWREx_ConfigSupply+0x7c>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2b2e      	cmp	r3, #46	; 0x2e
 8007402:	d005      	beq.n	8007410 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2b1d      	cmp	r3, #29
 8007408:	d002      	beq.n	8007410 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2b2d      	cmp	r3, #45	; 0x2d
 800740e:	d114      	bne.n	800743a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8007410:	f7fa fc14 	bl	8001c3c <HAL_GetTick>
 8007414:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8007416:	e009      	b.n	800742c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007418:	f7fa fc10 	bl	8001c3c <HAL_GetTick>
 800741c:	4602      	mov	r2, r0
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	1ad3      	subs	r3, r2, r3
 8007422:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007426:	d901      	bls.n	800742c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8007428:	2301      	movs	r3, #1
 800742a:	e007      	b.n	800743c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800742c:	4b05      	ldr	r3, [pc, #20]	; (8007444 <HAL_PWREx_ConfigSupply+0xb0>)
 800742e:	68db      	ldr	r3, [r3, #12]
 8007430:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007438:	d1ee      	bne.n	8007418 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800743a:	2300      	movs	r3, #0
}
 800743c:	4618      	mov	r0, r3
 800743e:	3710      	adds	r7, #16
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}
 8007444:	58024800 	.word	0x58024800

08007448 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8007448:	b480      	push	{r7}
 800744a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800744c:	4b05      	ldr	r3, [pc, #20]	; (8007464 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800744e:	68db      	ldr	r3, [r3, #12]
 8007450:	4a04      	ldr	r2, [pc, #16]	; (8007464 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007452:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007456:	60d3      	str	r3, [r2, #12]
}
 8007458:	bf00      	nop
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr
 8007462:	bf00      	nop
 8007464:	58024800 	.word	0x58024800

08007468 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b08c      	sub	sp, #48	; 0x30
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d101      	bne.n	800747a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	e3fd      	b.n	8007c76 <HAL_RCC_OscConfig+0x80e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f003 0301 	and.w	r3, r3, #1
 8007482:	2b00      	cmp	r3, #0
 8007484:	f000 8087 	beq.w	8007596 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007488:	4b99      	ldr	r3, [pc, #612]	; (80076f0 <HAL_RCC_OscConfig+0x288>)
 800748a:	691b      	ldr	r3, [r3, #16]
 800748c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007490:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007492:	4b97      	ldr	r3, [pc, #604]	; (80076f0 <HAL_RCC_OscConfig+0x288>)
 8007494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007496:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800749a:	2b10      	cmp	r3, #16
 800749c:	d007      	beq.n	80074ae <HAL_RCC_OscConfig+0x46>
 800749e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074a0:	2b18      	cmp	r3, #24
 80074a2:	d110      	bne.n	80074c6 <HAL_RCC_OscConfig+0x5e>
 80074a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a6:	f003 0303 	and.w	r3, r3, #3
 80074aa:	2b02      	cmp	r3, #2
 80074ac:	d10b      	bne.n	80074c6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80074ae:	4b90      	ldr	r3, [pc, #576]	; (80076f0 <HAL_RCC_OscConfig+0x288>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d06c      	beq.n	8007594 <HAL_RCC_OscConfig+0x12c>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d168      	bne.n	8007594 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80074c2:	2301      	movs	r3, #1
 80074c4:	e3d7      	b.n	8007c76 <HAL_RCC_OscConfig+0x80e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074ce:	d106      	bne.n	80074de <HAL_RCC_OscConfig+0x76>
 80074d0:	4b87      	ldr	r3, [pc, #540]	; (80076f0 <HAL_RCC_OscConfig+0x288>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a86      	ldr	r2, [pc, #536]	; (80076f0 <HAL_RCC_OscConfig+0x288>)
 80074d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074da:	6013      	str	r3, [r2, #0]
 80074dc:	e02e      	b.n	800753c <HAL_RCC_OscConfig+0xd4>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d10c      	bne.n	8007500 <HAL_RCC_OscConfig+0x98>
 80074e6:	4b82      	ldr	r3, [pc, #520]	; (80076f0 <HAL_RCC_OscConfig+0x288>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a81      	ldr	r2, [pc, #516]	; (80076f0 <HAL_RCC_OscConfig+0x288>)
 80074ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074f0:	6013      	str	r3, [r2, #0]
 80074f2:	4b7f      	ldr	r3, [pc, #508]	; (80076f0 <HAL_RCC_OscConfig+0x288>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a7e      	ldr	r2, [pc, #504]	; (80076f0 <HAL_RCC_OscConfig+0x288>)
 80074f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80074fc:	6013      	str	r3, [r2, #0]
 80074fe:	e01d      	b.n	800753c <HAL_RCC_OscConfig+0xd4>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007508:	d10c      	bne.n	8007524 <HAL_RCC_OscConfig+0xbc>
 800750a:	4b79      	ldr	r3, [pc, #484]	; (80076f0 <HAL_RCC_OscConfig+0x288>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a78      	ldr	r2, [pc, #480]	; (80076f0 <HAL_RCC_OscConfig+0x288>)
 8007510:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007514:	6013      	str	r3, [r2, #0]
 8007516:	4b76      	ldr	r3, [pc, #472]	; (80076f0 <HAL_RCC_OscConfig+0x288>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a75      	ldr	r2, [pc, #468]	; (80076f0 <HAL_RCC_OscConfig+0x288>)
 800751c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007520:	6013      	str	r3, [r2, #0]
 8007522:	e00b      	b.n	800753c <HAL_RCC_OscConfig+0xd4>
 8007524:	4b72      	ldr	r3, [pc, #456]	; (80076f0 <HAL_RCC_OscConfig+0x288>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a71      	ldr	r2, [pc, #452]	; (80076f0 <HAL_RCC_OscConfig+0x288>)
 800752a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800752e:	6013      	str	r3, [r2, #0]
 8007530:	4b6f      	ldr	r3, [pc, #444]	; (80076f0 <HAL_RCC_OscConfig+0x288>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a6e      	ldr	r2, [pc, #440]	; (80076f0 <HAL_RCC_OscConfig+0x288>)
 8007536:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800753a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d013      	beq.n	800756c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007544:	f7fa fb7a 	bl	8001c3c <HAL_GetTick>
 8007548:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800754a:	e008      	b.n	800755e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800754c:	f7fa fb76 	bl	8001c3c <HAL_GetTick>
 8007550:	4602      	mov	r2, r0
 8007552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007554:	1ad3      	subs	r3, r2, r3
 8007556:	2b64      	cmp	r3, #100	; 0x64
 8007558:	d901      	bls.n	800755e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800755a:	2303      	movs	r3, #3
 800755c:	e38b      	b.n	8007c76 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800755e:	4b64      	ldr	r3, [pc, #400]	; (80076f0 <HAL_RCC_OscConfig+0x288>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007566:	2b00      	cmp	r3, #0
 8007568:	d0f0      	beq.n	800754c <HAL_RCC_OscConfig+0xe4>
 800756a:	e014      	b.n	8007596 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800756c:	f7fa fb66 	bl	8001c3c <HAL_GetTick>
 8007570:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007572:	e008      	b.n	8007586 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007574:	f7fa fb62 	bl	8001c3c <HAL_GetTick>
 8007578:	4602      	mov	r2, r0
 800757a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800757c:	1ad3      	subs	r3, r2, r3
 800757e:	2b64      	cmp	r3, #100	; 0x64
 8007580:	d901      	bls.n	8007586 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007582:	2303      	movs	r3, #3
 8007584:	e377      	b.n	8007c76 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007586:	4b5a      	ldr	r3, [pc, #360]	; (80076f0 <HAL_RCC_OscConfig+0x288>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800758e:	2b00      	cmp	r3, #0
 8007590:	d1f0      	bne.n	8007574 <HAL_RCC_OscConfig+0x10c>
 8007592:	e000      	b.n	8007596 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007594:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f003 0302 	and.w	r3, r3, #2
 800759e:	2b00      	cmp	r3, #0
 80075a0:	f000 80ae 	beq.w	8007700 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80075a4:	4b52      	ldr	r3, [pc, #328]	; (80076f0 <HAL_RCC_OscConfig+0x288>)
 80075a6:	691b      	ldr	r3, [r3, #16]
 80075a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80075ac:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80075ae:	4b50      	ldr	r3, [pc, #320]	; (80076f0 <HAL_RCC_OscConfig+0x288>)
 80075b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075b2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80075b4:	6a3b      	ldr	r3, [r7, #32]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d007      	beq.n	80075ca <HAL_RCC_OscConfig+0x162>
 80075ba:	6a3b      	ldr	r3, [r7, #32]
 80075bc:	2b18      	cmp	r3, #24
 80075be:	d13a      	bne.n	8007636 <HAL_RCC_OscConfig+0x1ce>
 80075c0:	69fb      	ldr	r3, [r7, #28]
 80075c2:	f003 0303 	and.w	r3, r3, #3
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d135      	bne.n	8007636 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80075ca:	4b49      	ldr	r3, [pc, #292]	; (80076f0 <HAL_RCC_OscConfig+0x288>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f003 0304 	and.w	r3, r3, #4
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d005      	beq.n	80075e2 <HAL_RCC_OscConfig+0x17a>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	68db      	ldr	r3, [r3, #12]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d101      	bne.n	80075e2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80075de:	2301      	movs	r3, #1
 80075e0:	e349      	b.n	8007c76 <HAL_RCC_OscConfig+0x80e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075e2:	f7fa fb5b 	bl	8001c9c <HAL_GetREVID>
 80075e6:	4603      	mov	r3, r0
 80075e8:	f241 0203 	movw	r2, #4099	; 0x1003
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d817      	bhi.n	8007620 <HAL_RCC_OscConfig+0x1b8>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	691b      	ldr	r3, [r3, #16]
 80075f4:	2b40      	cmp	r3, #64	; 0x40
 80075f6:	d108      	bne.n	800760a <HAL_RCC_OscConfig+0x1a2>
 80075f8:	4b3d      	ldr	r3, [pc, #244]	; (80076f0 <HAL_RCC_OscConfig+0x288>)
 80075fa:	685b      	ldr	r3, [r3, #4]
 80075fc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007600:	4a3b      	ldr	r2, [pc, #236]	; (80076f0 <HAL_RCC_OscConfig+0x288>)
 8007602:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007606:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007608:	e07a      	b.n	8007700 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800760a:	4b39      	ldr	r3, [pc, #228]	; (80076f0 <HAL_RCC_OscConfig+0x288>)
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	691b      	ldr	r3, [r3, #16]
 8007616:	031b      	lsls	r3, r3, #12
 8007618:	4935      	ldr	r1, [pc, #212]	; (80076f0 <HAL_RCC_OscConfig+0x288>)
 800761a:	4313      	orrs	r3, r2
 800761c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800761e:	e06f      	b.n	8007700 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007620:	4b33      	ldr	r3, [pc, #204]	; (80076f0 <HAL_RCC_OscConfig+0x288>)
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	691b      	ldr	r3, [r3, #16]
 800762c:	061b      	lsls	r3, r3, #24
 800762e:	4930      	ldr	r1, [pc, #192]	; (80076f0 <HAL_RCC_OscConfig+0x288>)
 8007630:	4313      	orrs	r3, r2
 8007632:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007634:	e064      	b.n	8007700 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	68db      	ldr	r3, [r3, #12]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d045      	beq.n	80076ca <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800763e:	4b2c      	ldr	r3, [pc, #176]	; (80076f0 <HAL_RCC_OscConfig+0x288>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f023 0219 	bic.w	r2, r3, #25
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	68db      	ldr	r3, [r3, #12]
 800764a:	4929      	ldr	r1, [pc, #164]	; (80076f0 <HAL_RCC_OscConfig+0x288>)
 800764c:	4313      	orrs	r3, r2
 800764e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007650:	f7fa faf4 	bl	8001c3c <HAL_GetTick>
 8007654:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007656:	e008      	b.n	800766a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007658:	f7fa faf0 	bl	8001c3c <HAL_GetTick>
 800765c:	4602      	mov	r2, r0
 800765e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007660:	1ad3      	subs	r3, r2, r3
 8007662:	2b02      	cmp	r3, #2
 8007664:	d901      	bls.n	800766a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8007666:	2303      	movs	r3, #3
 8007668:	e305      	b.n	8007c76 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800766a:	4b21      	ldr	r3, [pc, #132]	; (80076f0 <HAL_RCC_OscConfig+0x288>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f003 0304 	and.w	r3, r3, #4
 8007672:	2b00      	cmp	r3, #0
 8007674:	d0f0      	beq.n	8007658 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007676:	f7fa fb11 	bl	8001c9c <HAL_GetREVID>
 800767a:	4603      	mov	r3, r0
 800767c:	f241 0203 	movw	r2, #4099	; 0x1003
 8007680:	4293      	cmp	r3, r2
 8007682:	d817      	bhi.n	80076b4 <HAL_RCC_OscConfig+0x24c>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	691b      	ldr	r3, [r3, #16]
 8007688:	2b40      	cmp	r3, #64	; 0x40
 800768a:	d108      	bne.n	800769e <HAL_RCC_OscConfig+0x236>
 800768c:	4b18      	ldr	r3, [pc, #96]	; (80076f0 <HAL_RCC_OscConfig+0x288>)
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007694:	4a16      	ldr	r2, [pc, #88]	; (80076f0 <HAL_RCC_OscConfig+0x288>)
 8007696:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800769a:	6053      	str	r3, [r2, #4]
 800769c:	e030      	b.n	8007700 <HAL_RCC_OscConfig+0x298>
 800769e:	4b14      	ldr	r3, [pc, #80]	; (80076f0 <HAL_RCC_OscConfig+0x288>)
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	691b      	ldr	r3, [r3, #16]
 80076aa:	031b      	lsls	r3, r3, #12
 80076ac:	4910      	ldr	r1, [pc, #64]	; (80076f0 <HAL_RCC_OscConfig+0x288>)
 80076ae:	4313      	orrs	r3, r2
 80076b0:	604b      	str	r3, [r1, #4]
 80076b2:	e025      	b.n	8007700 <HAL_RCC_OscConfig+0x298>
 80076b4:	4b0e      	ldr	r3, [pc, #56]	; (80076f0 <HAL_RCC_OscConfig+0x288>)
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	691b      	ldr	r3, [r3, #16]
 80076c0:	061b      	lsls	r3, r3, #24
 80076c2:	490b      	ldr	r1, [pc, #44]	; (80076f0 <HAL_RCC_OscConfig+0x288>)
 80076c4:	4313      	orrs	r3, r2
 80076c6:	604b      	str	r3, [r1, #4]
 80076c8:	e01a      	b.n	8007700 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80076ca:	4b09      	ldr	r3, [pc, #36]	; (80076f0 <HAL_RCC_OscConfig+0x288>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a08      	ldr	r2, [pc, #32]	; (80076f0 <HAL_RCC_OscConfig+0x288>)
 80076d0:	f023 0301 	bic.w	r3, r3, #1
 80076d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076d6:	f7fa fab1 	bl	8001c3c <HAL_GetTick>
 80076da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80076dc:	e00a      	b.n	80076f4 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80076de:	f7fa faad 	bl	8001c3c <HAL_GetTick>
 80076e2:	4602      	mov	r2, r0
 80076e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e6:	1ad3      	subs	r3, r2, r3
 80076e8:	2b02      	cmp	r3, #2
 80076ea:	d903      	bls.n	80076f4 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80076ec:	2303      	movs	r3, #3
 80076ee:	e2c2      	b.n	8007c76 <HAL_RCC_OscConfig+0x80e>
 80076f0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80076f4:	4b94      	ldr	r3, [pc, #592]	; (8007948 <HAL_RCC_OscConfig+0x4e0>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f003 0304 	and.w	r3, r3, #4
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d1ee      	bne.n	80076de <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f003 0310 	and.w	r3, r3, #16
 8007708:	2b00      	cmp	r3, #0
 800770a:	f000 80a9 	beq.w	8007860 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800770e:	4b8e      	ldr	r3, [pc, #568]	; (8007948 <HAL_RCC_OscConfig+0x4e0>)
 8007710:	691b      	ldr	r3, [r3, #16]
 8007712:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007716:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007718:	4b8b      	ldr	r3, [pc, #556]	; (8007948 <HAL_RCC_OscConfig+0x4e0>)
 800771a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800771c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800771e:	69bb      	ldr	r3, [r7, #24]
 8007720:	2b08      	cmp	r3, #8
 8007722:	d007      	beq.n	8007734 <HAL_RCC_OscConfig+0x2cc>
 8007724:	69bb      	ldr	r3, [r7, #24]
 8007726:	2b18      	cmp	r3, #24
 8007728:	d13a      	bne.n	80077a0 <HAL_RCC_OscConfig+0x338>
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	f003 0303 	and.w	r3, r3, #3
 8007730:	2b01      	cmp	r3, #1
 8007732:	d135      	bne.n	80077a0 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007734:	4b84      	ldr	r3, [pc, #528]	; (8007948 <HAL_RCC_OscConfig+0x4e0>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800773c:	2b00      	cmp	r3, #0
 800773e:	d005      	beq.n	800774c <HAL_RCC_OscConfig+0x2e4>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	69db      	ldr	r3, [r3, #28]
 8007744:	2b80      	cmp	r3, #128	; 0x80
 8007746:	d001      	beq.n	800774c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8007748:	2301      	movs	r3, #1
 800774a:	e294      	b.n	8007c76 <HAL_RCC_OscConfig+0x80e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800774c:	f7fa faa6 	bl	8001c9c <HAL_GetREVID>
 8007750:	4603      	mov	r3, r0
 8007752:	f241 0203 	movw	r2, #4099	; 0x1003
 8007756:	4293      	cmp	r3, r2
 8007758:	d817      	bhi.n	800778a <HAL_RCC_OscConfig+0x322>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6a1b      	ldr	r3, [r3, #32]
 800775e:	2b20      	cmp	r3, #32
 8007760:	d108      	bne.n	8007774 <HAL_RCC_OscConfig+0x30c>
 8007762:	4b79      	ldr	r3, [pc, #484]	; (8007948 <HAL_RCC_OscConfig+0x4e0>)
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800776a:	4a77      	ldr	r2, [pc, #476]	; (8007948 <HAL_RCC_OscConfig+0x4e0>)
 800776c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007770:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007772:	e075      	b.n	8007860 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007774:	4b74      	ldr	r3, [pc, #464]	; (8007948 <HAL_RCC_OscConfig+0x4e0>)
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6a1b      	ldr	r3, [r3, #32]
 8007780:	069b      	lsls	r3, r3, #26
 8007782:	4971      	ldr	r1, [pc, #452]	; (8007948 <HAL_RCC_OscConfig+0x4e0>)
 8007784:	4313      	orrs	r3, r2
 8007786:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007788:	e06a      	b.n	8007860 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800778a:	4b6f      	ldr	r3, [pc, #444]	; (8007948 <HAL_RCC_OscConfig+0x4e0>)
 800778c:	68db      	ldr	r3, [r3, #12]
 800778e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6a1b      	ldr	r3, [r3, #32]
 8007796:	061b      	lsls	r3, r3, #24
 8007798:	496b      	ldr	r1, [pc, #428]	; (8007948 <HAL_RCC_OscConfig+0x4e0>)
 800779a:	4313      	orrs	r3, r2
 800779c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800779e:	e05f      	b.n	8007860 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	69db      	ldr	r3, [r3, #28]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d042      	beq.n	800782e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80077a8:	4b67      	ldr	r3, [pc, #412]	; (8007948 <HAL_RCC_OscConfig+0x4e0>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a66      	ldr	r2, [pc, #408]	; (8007948 <HAL_RCC_OscConfig+0x4e0>)
 80077ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077b4:	f7fa fa42 	bl	8001c3c <HAL_GetTick>
 80077b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80077ba:	e008      	b.n	80077ce <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80077bc:	f7fa fa3e 	bl	8001c3c <HAL_GetTick>
 80077c0:	4602      	mov	r2, r0
 80077c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c4:	1ad3      	subs	r3, r2, r3
 80077c6:	2b02      	cmp	r3, #2
 80077c8:	d901      	bls.n	80077ce <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80077ca:	2303      	movs	r3, #3
 80077cc:	e253      	b.n	8007c76 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80077ce:	4b5e      	ldr	r3, [pc, #376]	; (8007948 <HAL_RCC_OscConfig+0x4e0>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d0f0      	beq.n	80077bc <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80077da:	f7fa fa5f 	bl	8001c9c <HAL_GetREVID>
 80077de:	4603      	mov	r3, r0
 80077e0:	f241 0203 	movw	r2, #4099	; 0x1003
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d817      	bhi.n	8007818 <HAL_RCC_OscConfig+0x3b0>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6a1b      	ldr	r3, [r3, #32]
 80077ec:	2b20      	cmp	r3, #32
 80077ee:	d108      	bne.n	8007802 <HAL_RCC_OscConfig+0x39a>
 80077f0:	4b55      	ldr	r3, [pc, #340]	; (8007948 <HAL_RCC_OscConfig+0x4e0>)
 80077f2:	685b      	ldr	r3, [r3, #4]
 80077f4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80077f8:	4a53      	ldr	r2, [pc, #332]	; (8007948 <HAL_RCC_OscConfig+0x4e0>)
 80077fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80077fe:	6053      	str	r3, [r2, #4]
 8007800:	e02e      	b.n	8007860 <HAL_RCC_OscConfig+0x3f8>
 8007802:	4b51      	ldr	r3, [pc, #324]	; (8007948 <HAL_RCC_OscConfig+0x4e0>)
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6a1b      	ldr	r3, [r3, #32]
 800780e:	069b      	lsls	r3, r3, #26
 8007810:	494d      	ldr	r1, [pc, #308]	; (8007948 <HAL_RCC_OscConfig+0x4e0>)
 8007812:	4313      	orrs	r3, r2
 8007814:	604b      	str	r3, [r1, #4]
 8007816:	e023      	b.n	8007860 <HAL_RCC_OscConfig+0x3f8>
 8007818:	4b4b      	ldr	r3, [pc, #300]	; (8007948 <HAL_RCC_OscConfig+0x4e0>)
 800781a:	68db      	ldr	r3, [r3, #12]
 800781c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6a1b      	ldr	r3, [r3, #32]
 8007824:	061b      	lsls	r3, r3, #24
 8007826:	4948      	ldr	r1, [pc, #288]	; (8007948 <HAL_RCC_OscConfig+0x4e0>)
 8007828:	4313      	orrs	r3, r2
 800782a:	60cb      	str	r3, [r1, #12]
 800782c:	e018      	b.n	8007860 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800782e:	4b46      	ldr	r3, [pc, #280]	; (8007948 <HAL_RCC_OscConfig+0x4e0>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a45      	ldr	r2, [pc, #276]	; (8007948 <HAL_RCC_OscConfig+0x4e0>)
 8007834:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007838:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800783a:	f7fa f9ff 	bl	8001c3c <HAL_GetTick>
 800783e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007840:	e008      	b.n	8007854 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007842:	f7fa f9fb 	bl	8001c3c <HAL_GetTick>
 8007846:	4602      	mov	r2, r0
 8007848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784a:	1ad3      	subs	r3, r2, r3
 800784c:	2b02      	cmp	r3, #2
 800784e:	d901      	bls.n	8007854 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8007850:	2303      	movs	r3, #3
 8007852:	e210      	b.n	8007c76 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007854:	4b3c      	ldr	r3, [pc, #240]	; (8007948 <HAL_RCC_OscConfig+0x4e0>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800785c:	2b00      	cmp	r3, #0
 800785e:	d1f0      	bne.n	8007842 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f003 0308 	and.w	r3, r3, #8
 8007868:	2b00      	cmp	r3, #0
 800786a:	d036      	beq.n	80078da <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	695b      	ldr	r3, [r3, #20]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d019      	beq.n	80078a8 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007874:	4b34      	ldr	r3, [pc, #208]	; (8007948 <HAL_RCC_OscConfig+0x4e0>)
 8007876:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007878:	4a33      	ldr	r2, [pc, #204]	; (8007948 <HAL_RCC_OscConfig+0x4e0>)
 800787a:	f043 0301 	orr.w	r3, r3, #1
 800787e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007880:	f7fa f9dc 	bl	8001c3c <HAL_GetTick>
 8007884:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007886:	e008      	b.n	800789a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007888:	f7fa f9d8 	bl	8001c3c <HAL_GetTick>
 800788c:	4602      	mov	r2, r0
 800788e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007890:	1ad3      	subs	r3, r2, r3
 8007892:	2b02      	cmp	r3, #2
 8007894:	d901      	bls.n	800789a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8007896:	2303      	movs	r3, #3
 8007898:	e1ed      	b.n	8007c76 <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800789a:	4b2b      	ldr	r3, [pc, #172]	; (8007948 <HAL_RCC_OscConfig+0x4e0>)
 800789c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800789e:	f003 0302 	and.w	r3, r3, #2
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d0f0      	beq.n	8007888 <HAL_RCC_OscConfig+0x420>
 80078a6:	e018      	b.n	80078da <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80078a8:	4b27      	ldr	r3, [pc, #156]	; (8007948 <HAL_RCC_OscConfig+0x4e0>)
 80078aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078ac:	4a26      	ldr	r2, [pc, #152]	; (8007948 <HAL_RCC_OscConfig+0x4e0>)
 80078ae:	f023 0301 	bic.w	r3, r3, #1
 80078b2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078b4:	f7fa f9c2 	bl	8001c3c <HAL_GetTick>
 80078b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80078ba:	e008      	b.n	80078ce <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80078bc:	f7fa f9be 	bl	8001c3c <HAL_GetTick>
 80078c0:	4602      	mov	r2, r0
 80078c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c4:	1ad3      	subs	r3, r2, r3
 80078c6:	2b02      	cmp	r3, #2
 80078c8:	d901      	bls.n	80078ce <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80078ca:	2303      	movs	r3, #3
 80078cc:	e1d3      	b.n	8007c76 <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80078ce:	4b1e      	ldr	r3, [pc, #120]	; (8007948 <HAL_RCC_OscConfig+0x4e0>)
 80078d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078d2:	f003 0302 	and.w	r3, r3, #2
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d1f0      	bne.n	80078bc <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f003 0320 	and.w	r3, r3, #32
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d038      	beq.n	8007958 <HAL_RCC_OscConfig+0x4f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	699b      	ldr	r3, [r3, #24]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d019      	beq.n	8007922 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80078ee:	4b16      	ldr	r3, [pc, #88]	; (8007948 <HAL_RCC_OscConfig+0x4e0>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4a15      	ldr	r2, [pc, #84]	; (8007948 <HAL_RCC_OscConfig+0x4e0>)
 80078f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80078f8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80078fa:	f7fa f99f 	bl	8001c3c <HAL_GetTick>
 80078fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007900:	e008      	b.n	8007914 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007902:	f7fa f99b 	bl	8001c3c <HAL_GetTick>
 8007906:	4602      	mov	r2, r0
 8007908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790a:	1ad3      	subs	r3, r2, r3
 800790c:	2b02      	cmp	r3, #2
 800790e:	d901      	bls.n	8007914 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8007910:	2303      	movs	r3, #3
 8007912:	e1b0      	b.n	8007c76 <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007914:	4b0c      	ldr	r3, [pc, #48]	; (8007948 <HAL_RCC_OscConfig+0x4e0>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800791c:	2b00      	cmp	r3, #0
 800791e:	d0f0      	beq.n	8007902 <HAL_RCC_OscConfig+0x49a>
 8007920:	e01a      	b.n	8007958 <HAL_RCC_OscConfig+0x4f0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007922:	4b09      	ldr	r3, [pc, #36]	; (8007948 <HAL_RCC_OscConfig+0x4e0>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a08      	ldr	r2, [pc, #32]	; (8007948 <HAL_RCC_OscConfig+0x4e0>)
 8007928:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800792c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800792e:	f7fa f985 	bl	8001c3c <HAL_GetTick>
 8007932:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007934:	e00a      	b.n	800794c <HAL_RCC_OscConfig+0x4e4>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007936:	f7fa f981 	bl	8001c3c <HAL_GetTick>
 800793a:	4602      	mov	r2, r0
 800793c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800793e:	1ad3      	subs	r3, r2, r3
 8007940:	2b02      	cmp	r3, #2
 8007942:	d903      	bls.n	800794c <HAL_RCC_OscConfig+0x4e4>
        {
          return HAL_TIMEOUT;
 8007944:	2303      	movs	r3, #3
 8007946:	e196      	b.n	8007c76 <HAL_RCC_OscConfig+0x80e>
 8007948:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800794c:	4b99      	ldr	r3, [pc, #612]	; (8007bb4 <HAL_RCC_OscConfig+0x74c>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007954:	2b00      	cmp	r3, #0
 8007956:	d1ee      	bne.n	8007936 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f003 0304 	and.w	r3, r3, #4
 8007960:	2b00      	cmp	r3, #0
 8007962:	f000 8081 	beq.w	8007a68 <HAL_RCC_OscConfig+0x600>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007966:	4b94      	ldr	r3, [pc, #592]	; (8007bb8 <HAL_RCC_OscConfig+0x750>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a93      	ldr	r2, [pc, #588]	; (8007bb8 <HAL_RCC_OscConfig+0x750>)
 800796c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007970:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007972:	f7fa f963 	bl	8001c3c <HAL_GetTick>
 8007976:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007978:	e008      	b.n	800798c <HAL_RCC_OscConfig+0x524>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800797a:	f7fa f95f 	bl	8001c3c <HAL_GetTick>
 800797e:	4602      	mov	r2, r0
 8007980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007982:	1ad3      	subs	r3, r2, r3
 8007984:	2b64      	cmp	r3, #100	; 0x64
 8007986:	d901      	bls.n	800798c <HAL_RCC_OscConfig+0x524>
      {
        return HAL_TIMEOUT;
 8007988:	2303      	movs	r3, #3
 800798a:	e174      	b.n	8007c76 <HAL_RCC_OscConfig+0x80e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800798c:	4b8a      	ldr	r3, [pc, #552]	; (8007bb8 <HAL_RCC_OscConfig+0x750>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007994:	2b00      	cmp	r3, #0
 8007996:	d0f0      	beq.n	800797a <HAL_RCC_OscConfig+0x512>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	689b      	ldr	r3, [r3, #8]
 800799c:	2b01      	cmp	r3, #1
 800799e:	d106      	bne.n	80079ae <HAL_RCC_OscConfig+0x546>
 80079a0:	4b84      	ldr	r3, [pc, #528]	; (8007bb4 <HAL_RCC_OscConfig+0x74c>)
 80079a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079a4:	4a83      	ldr	r2, [pc, #524]	; (8007bb4 <HAL_RCC_OscConfig+0x74c>)
 80079a6:	f043 0301 	orr.w	r3, r3, #1
 80079aa:	6713      	str	r3, [r2, #112]	; 0x70
 80079ac:	e02d      	b.n	8007a0a <HAL_RCC_OscConfig+0x5a2>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	689b      	ldr	r3, [r3, #8]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d10c      	bne.n	80079d0 <HAL_RCC_OscConfig+0x568>
 80079b6:	4b7f      	ldr	r3, [pc, #508]	; (8007bb4 <HAL_RCC_OscConfig+0x74c>)
 80079b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079ba:	4a7e      	ldr	r2, [pc, #504]	; (8007bb4 <HAL_RCC_OscConfig+0x74c>)
 80079bc:	f023 0301 	bic.w	r3, r3, #1
 80079c0:	6713      	str	r3, [r2, #112]	; 0x70
 80079c2:	4b7c      	ldr	r3, [pc, #496]	; (8007bb4 <HAL_RCC_OscConfig+0x74c>)
 80079c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079c6:	4a7b      	ldr	r2, [pc, #492]	; (8007bb4 <HAL_RCC_OscConfig+0x74c>)
 80079c8:	f023 0304 	bic.w	r3, r3, #4
 80079cc:	6713      	str	r3, [r2, #112]	; 0x70
 80079ce:	e01c      	b.n	8007a0a <HAL_RCC_OscConfig+0x5a2>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	2b05      	cmp	r3, #5
 80079d6:	d10c      	bne.n	80079f2 <HAL_RCC_OscConfig+0x58a>
 80079d8:	4b76      	ldr	r3, [pc, #472]	; (8007bb4 <HAL_RCC_OscConfig+0x74c>)
 80079da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079dc:	4a75      	ldr	r2, [pc, #468]	; (8007bb4 <HAL_RCC_OscConfig+0x74c>)
 80079de:	f043 0304 	orr.w	r3, r3, #4
 80079e2:	6713      	str	r3, [r2, #112]	; 0x70
 80079e4:	4b73      	ldr	r3, [pc, #460]	; (8007bb4 <HAL_RCC_OscConfig+0x74c>)
 80079e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079e8:	4a72      	ldr	r2, [pc, #456]	; (8007bb4 <HAL_RCC_OscConfig+0x74c>)
 80079ea:	f043 0301 	orr.w	r3, r3, #1
 80079ee:	6713      	str	r3, [r2, #112]	; 0x70
 80079f0:	e00b      	b.n	8007a0a <HAL_RCC_OscConfig+0x5a2>
 80079f2:	4b70      	ldr	r3, [pc, #448]	; (8007bb4 <HAL_RCC_OscConfig+0x74c>)
 80079f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079f6:	4a6f      	ldr	r2, [pc, #444]	; (8007bb4 <HAL_RCC_OscConfig+0x74c>)
 80079f8:	f023 0301 	bic.w	r3, r3, #1
 80079fc:	6713      	str	r3, [r2, #112]	; 0x70
 80079fe:	4b6d      	ldr	r3, [pc, #436]	; (8007bb4 <HAL_RCC_OscConfig+0x74c>)
 8007a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a02:	4a6c      	ldr	r2, [pc, #432]	; (8007bb4 <HAL_RCC_OscConfig+0x74c>)
 8007a04:	f023 0304 	bic.w	r3, r3, #4
 8007a08:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	689b      	ldr	r3, [r3, #8]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d015      	beq.n	8007a3e <HAL_RCC_OscConfig+0x5d6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a12:	f7fa f913 	bl	8001c3c <HAL_GetTick>
 8007a16:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007a18:	e00a      	b.n	8007a30 <HAL_RCC_OscConfig+0x5c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a1a:	f7fa f90f 	bl	8001c3c <HAL_GetTick>
 8007a1e:	4602      	mov	r2, r0
 8007a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a22:	1ad3      	subs	r3, r2, r3
 8007a24:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d901      	bls.n	8007a30 <HAL_RCC_OscConfig+0x5c8>
        {
          return HAL_TIMEOUT;
 8007a2c:	2303      	movs	r3, #3
 8007a2e:	e122      	b.n	8007c76 <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007a30:	4b60      	ldr	r3, [pc, #384]	; (8007bb4 <HAL_RCC_OscConfig+0x74c>)
 8007a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a34:	f003 0302 	and.w	r3, r3, #2
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d0ee      	beq.n	8007a1a <HAL_RCC_OscConfig+0x5b2>
 8007a3c:	e014      	b.n	8007a68 <HAL_RCC_OscConfig+0x600>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a3e:	f7fa f8fd 	bl	8001c3c <HAL_GetTick>
 8007a42:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007a44:	e00a      	b.n	8007a5c <HAL_RCC_OscConfig+0x5f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a46:	f7fa f8f9 	bl	8001c3c <HAL_GetTick>
 8007a4a:	4602      	mov	r2, r0
 8007a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a4e:	1ad3      	subs	r3, r2, r3
 8007a50:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d901      	bls.n	8007a5c <HAL_RCC_OscConfig+0x5f4>
        {
          return HAL_TIMEOUT;
 8007a58:	2303      	movs	r3, #3
 8007a5a:	e10c      	b.n	8007c76 <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007a5c:	4b55      	ldr	r3, [pc, #340]	; (8007bb4 <HAL_RCC_OscConfig+0x74c>)
 8007a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a60:	f003 0302 	and.w	r3, r3, #2
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d1ee      	bne.n	8007a46 <HAL_RCC_OscConfig+0x5de>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	f000 8101 	beq.w	8007c74 <HAL_RCC_OscConfig+0x80c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007a72:	4b50      	ldr	r3, [pc, #320]	; (8007bb4 <HAL_RCC_OscConfig+0x74c>)
 8007a74:	691b      	ldr	r3, [r3, #16]
 8007a76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a7a:	2b18      	cmp	r3, #24
 8007a7c:	f000 80bc 	beq.w	8007bf8 <HAL_RCC_OscConfig+0x790>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a84:	2b02      	cmp	r3, #2
 8007a86:	f040 809d 	bne.w	8007bc4 <HAL_RCC_OscConfig+0x75c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a8a:	4b4a      	ldr	r3, [pc, #296]	; (8007bb4 <HAL_RCC_OscConfig+0x74c>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a49      	ldr	r2, [pc, #292]	; (8007bb4 <HAL_RCC_OscConfig+0x74c>)
 8007a90:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a96:	f7fa f8d1 	bl	8001c3c <HAL_GetTick>
 8007a9a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007a9c:	e008      	b.n	8007ab0 <HAL_RCC_OscConfig+0x648>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a9e:	f7fa f8cd 	bl	8001c3c <HAL_GetTick>
 8007aa2:	4602      	mov	r2, r0
 8007aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa6:	1ad3      	subs	r3, r2, r3
 8007aa8:	2b02      	cmp	r3, #2
 8007aaa:	d901      	bls.n	8007ab0 <HAL_RCC_OscConfig+0x648>
          {
            return HAL_TIMEOUT;
 8007aac:	2303      	movs	r3, #3
 8007aae:	e0e2      	b.n	8007c76 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007ab0:	4b40      	ldr	r3, [pc, #256]	; (8007bb4 <HAL_RCC_OscConfig+0x74c>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d1f0      	bne.n	8007a9e <HAL_RCC_OscConfig+0x636>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007abc:	4b3d      	ldr	r3, [pc, #244]	; (8007bb4 <HAL_RCC_OscConfig+0x74c>)
 8007abe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007ac0:	4b3e      	ldr	r3, [pc, #248]	; (8007bbc <HAL_RCC_OscConfig+0x754>)
 8007ac2:	4013      	ands	r3, r2
 8007ac4:	687a      	ldr	r2, [r7, #4]
 8007ac6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007ac8:	687a      	ldr	r2, [r7, #4]
 8007aca:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007acc:	0112      	lsls	r2, r2, #4
 8007ace:	430a      	orrs	r2, r1
 8007ad0:	4938      	ldr	r1, [pc, #224]	; (8007bb4 <HAL_RCC_OscConfig+0x74c>)
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	628b      	str	r3, [r1, #40]	; 0x28
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ada:	3b01      	subs	r3, #1
 8007adc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ae4:	3b01      	subs	r3, #1
 8007ae6:	025b      	lsls	r3, r3, #9
 8007ae8:	b29b      	uxth	r3, r3
 8007aea:	431a      	orrs	r2, r3
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007af0:	3b01      	subs	r3, #1
 8007af2:	041b      	lsls	r3, r3, #16
 8007af4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007af8:	431a      	orrs	r2, r3
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007afe:	3b01      	subs	r3, #1
 8007b00:	061b      	lsls	r3, r3, #24
 8007b02:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007b06:	492b      	ldr	r1, [pc, #172]	; (8007bb4 <HAL_RCC_OscConfig+0x74c>)
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007b0c:	4b29      	ldr	r3, [pc, #164]	; (8007bb4 <HAL_RCC_OscConfig+0x74c>)
 8007b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b10:	4a28      	ldr	r2, [pc, #160]	; (8007bb4 <HAL_RCC_OscConfig+0x74c>)
 8007b12:	f023 0301 	bic.w	r3, r3, #1
 8007b16:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007b18:	4b26      	ldr	r3, [pc, #152]	; (8007bb4 <HAL_RCC_OscConfig+0x74c>)
 8007b1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b1c:	4b28      	ldr	r3, [pc, #160]	; (8007bc0 <HAL_RCC_OscConfig+0x758>)
 8007b1e:	4013      	ands	r3, r2
 8007b20:	687a      	ldr	r2, [r7, #4]
 8007b22:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007b24:	00d2      	lsls	r2, r2, #3
 8007b26:	4923      	ldr	r1, [pc, #140]	; (8007bb4 <HAL_RCC_OscConfig+0x74c>)
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007b2c:	4b21      	ldr	r3, [pc, #132]	; (8007bb4 <HAL_RCC_OscConfig+0x74c>)
 8007b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b30:	f023 020c 	bic.w	r2, r3, #12
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b38:	491e      	ldr	r1, [pc, #120]	; (8007bb4 <HAL_RCC_OscConfig+0x74c>)
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007b3e:	4b1d      	ldr	r3, [pc, #116]	; (8007bb4 <HAL_RCC_OscConfig+0x74c>)
 8007b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b42:	f023 0202 	bic.w	r2, r3, #2
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b4a:	491a      	ldr	r1, [pc, #104]	; (8007bb4 <HAL_RCC_OscConfig+0x74c>)
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007b50:	4b18      	ldr	r3, [pc, #96]	; (8007bb4 <HAL_RCC_OscConfig+0x74c>)
 8007b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b54:	4a17      	ldr	r2, [pc, #92]	; (8007bb4 <HAL_RCC_OscConfig+0x74c>)
 8007b56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b5a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b5c:	4b15      	ldr	r3, [pc, #84]	; (8007bb4 <HAL_RCC_OscConfig+0x74c>)
 8007b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b60:	4a14      	ldr	r2, [pc, #80]	; (8007bb4 <HAL_RCC_OscConfig+0x74c>)
 8007b62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b66:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007b68:	4b12      	ldr	r3, [pc, #72]	; (8007bb4 <HAL_RCC_OscConfig+0x74c>)
 8007b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b6c:	4a11      	ldr	r2, [pc, #68]	; (8007bb4 <HAL_RCC_OscConfig+0x74c>)
 8007b6e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007b72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8007b74:	4b0f      	ldr	r3, [pc, #60]	; (8007bb4 <HAL_RCC_OscConfig+0x74c>)
 8007b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b78:	4a0e      	ldr	r2, [pc, #56]	; (8007bb4 <HAL_RCC_OscConfig+0x74c>)
 8007b7a:	f043 0301 	orr.w	r3, r3, #1
 8007b7e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007b80:	4b0c      	ldr	r3, [pc, #48]	; (8007bb4 <HAL_RCC_OscConfig+0x74c>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a0b      	ldr	r2, [pc, #44]	; (8007bb4 <HAL_RCC_OscConfig+0x74c>)
 8007b86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007b8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b8c:	f7fa f856 	bl	8001c3c <HAL_GetTick>
 8007b90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007b92:	e008      	b.n	8007ba6 <HAL_RCC_OscConfig+0x73e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b94:	f7fa f852 	bl	8001c3c <HAL_GetTick>
 8007b98:	4602      	mov	r2, r0
 8007b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9c:	1ad3      	subs	r3, r2, r3
 8007b9e:	2b02      	cmp	r3, #2
 8007ba0:	d901      	bls.n	8007ba6 <HAL_RCC_OscConfig+0x73e>
          {
            return HAL_TIMEOUT;
 8007ba2:	2303      	movs	r3, #3
 8007ba4:	e067      	b.n	8007c76 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007ba6:	4b03      	ldr	r3, [pc, #12]	; (8007bb4 <HAL_RCC_OscConfig+0x74c>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d0f0      	beq.n	8007b94 <HAL_RCC_OscConfig+0x72c>
 8007bb2:	e05f      	b.n	8007c74 <HAL_RCC_OscConfig+0x80c>
 8007bb4:	58024400 	.word	0x58024400
 8007bb8:	58024800 	.word	0x58024800
 8007bbc:	fffffc0c 	.word	0xfffffc0c
 8007bc0:	ffff0007 	.word	0xffff0007
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007bc4:	4b2e      	ldr	r3, [pc, #184]	; (8007c80 <HAL_RCC_OscConfig+0x818>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a2d      	ldr	r2, [pc, #180]	; (8007c80 <HAL_RCC_OscConfig+0x818>)
 8007bca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007bce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bd0:	f7fa f834 	bl	8001c3c <HAL_GetTick>
 8007bd4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007bd6:	e008      	b.n	8007bea <HAL_RCC_OscConfig+0x782>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007bd8:	f7fa f830 	bl	8001c3c <HAL_GetTick>
 8007bdc:	4602      	mov	r2, r0
 8007bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be0:	1ad3      	subs	r3, r2, r3
 8007be2:	2b02      	cmp	r3, #2
 8007be4:	d901      	bls.n	8007bea <HAL_RCC_OscConfig+0x782>
          {
            return HAL_TIMEOUT;
 8007be6:	2303      	movs	r3, #3
 8007be8:	e045      	b.n	8007c76 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007bea:	4b25      	ldr	r3, [pc, #148]	; (8007c80 <HAL_RCC_OscConfig+0x818>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d1f0      	bne.n	8007bd8 <HAL_RCC_OscConfig+0x770>
 8007bf6:	e03d      	b.n	8007c74 <HAL_RCC_OscConfig+0x80c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007bf8:	4b21      	ldr	r3, [pc, #132]	; (8007c80 <HAL_RCC_OscConfig+0x818>)
 8007bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bfc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007bfe:	4b20      	ldr	r3, [pc, #128]	; (8007c80 <HAL_RCC_OscConfig+0x818>)
 8007c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c02:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c08:	2b01      	cmp	r3, #1
 8007c0a:	d031      	beq.n	8007c70 <HAL_RCC_OscConfig+0x808>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	f003 0203 	and.w	r2, r3, #3
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d12a      	bne.n	8007c70 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	091b      	lsrs	r3, r3, #4
 8007c1e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d122      	bne.n	8007c70 <HAL_RCC_OscConfig+0x808>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c34:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007c36:	429a      	cmp	r2, r3
 8007c38:	d11a      	bne.n	8007c70 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	0a5b      	lsrs	r3, r3, #9
 8007c3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c46:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	d111      	bne.n	8007c70 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	0c1b      	lsrs	r3, r3, #16
 8007c50:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c58:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d108      	bne.n	8007c70 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	0e1b      	lsrs	r3, r3, #24
 8007c62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c6a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	d001      	beq.n	8007c74 <HAL_RCC_OscConfig+0x80c>
      {
        return HAL_ERROR;
 8007c70:	2301      	movs	r3, #1
 8007c72:	e000      	b.n	8007c76 <HAL_RCC_OscConfig+0x80e>
      }
    }
  }
  return HAL_OK;
 8007c74:	2300      	movs	r3, #0
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3730      	adds	r7, #48	; 0x30
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}
 8007c7e:	bf00      	nop
 8007c80:	58024400 	.word	0x58024400

08007c84 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b086      	sub	sp, #24
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d101      	bne.n	8007c98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007c94:	2301      	movs	r3, #1
 8007c96:	e19c      	b.n	8007fd2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007c98:	4b8a      	ldr	r3, [pc, #552]	; (8007ec4 <HAL_RCC_ClockConfig+0x240>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f003 030f 	and.w	r3, r3, #15
 8007ca0:	683a      	ldr	r2, [r7, #0]
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d910      	bls.n	8007cc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ca6:	4b87      	ldr	r3, [pc, #540]	; (8007ec4 <HAL_RCC_ClockConfig+0x240>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f023 020f 	bic.w	r2, r3, #15
 8007cae:	4985      	ldr	r1, [pc, #532]	; (8007ec4 <HAL_RCC_ClockConfig+0x240>)
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007cb6:	4b83      	ldr	r3, [pc, #524]	; (8007ec4 <HAL_RCC_ClockConfig+0x240>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f003 030f 	and.w	r3, r3, #15
 8007cbe:	683a      	ldr	r2, [r7, #0]
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	d001      	beq.n	8007cc8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	e184      	b.n	8007fd2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f003 0304 	and.w	r3, r3, #4
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d010      	beq.n	8007cf6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	691a      	ldr	r2, [r3, #16]
 8007cd8:	4b7b      	ldr	r3, [pc, #492]	; (8007ec8 <HAL_RCC_ClockConfig+0x244>)
 8007cda:	699b      	ldr	r3, [r3, #24]
 8007cdc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d908      	bls.n	8007cf6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007ce4:	4b78      	ldr	r3, [pc, #480]	; (8007ec8 <HAL_RCC_ClockConfig+0x244>)
 8007ce6:	699b      	ldr	r3, [r3, #24]
 8007ce8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	691b      	ldr	r3, [r3, #16]
 8007cf0:	4975      	ldr	r1, [pc, #468]	; (8007ec8 <HAL_RCC_ClockConfig+0x244>)
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f003 0308 	and.w	r3, r3, #8
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d010      	beq.n	8007d24 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	695a      	ldr	r2, [r3, #20]
 8007d06:	4b70      	ldr	r3, [pc, #448]	; (8007ec8 <HAL_RCC_ClockConfig+0x244>)
 8007d08:	69db      	ldr	r3, [r3, #28]
 8007d0a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007d0e:	429a      	cmp	r2, r3
 8007d10:	d908      	bls.n	8007d24 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007d12:	4b6d      	ldr	r3, [pc, #436]	; (8007ec8 <HAL_RCC_ClockConfig+0x244>)
 8007d14:	69db      	ldr	r3, [r3, #28]
 8007d16:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	695b      	ldr	r3, [r3, #20]
 8007d1e:	496a      	ldr	r1, [pc, #424]	; (8007ec8 <HAL_RCC_ClockConfig+0x244>)
 8007d20:	4313      	orrs	r3, r2
 8007d22:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f003 0310 	and.w	r3, r3, #16
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d010      	beq.n	8007d52 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	699a      	ldr	r2, [r3, #24]
 8007d34:	4b64      	ldr	r3, [pc, #400]	; (8007ec8 <HAL_RCC_ClockConfig+0x244>)
 8007d36:	69db      	ldr	r3, [r3, #28]
 8007d38:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007d3c:	429a      	cmp	r2, r3
 8007d3e:	d908      	bls.n	8007d52 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007d40:	4b61      	ldr	r3, [pc, #388]	; (8007ec8 <HAL_RCC_ClockConfig+0x244>)
 8007d42:	69db      	ldr	r3, [r3, #28]
 8007d44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	699b      	ldr	r3, [r3, #24]
 8007d4c:	495e      	ldr	r1, [pc, #376]	; (8007ec8 <HAL_RCC_ClockConfig+0x244>)
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f003 0320 	and.w	r3, r3, #32
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d010      	beq.n	8007d80 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	69da      	ldr	r2, [r3, #28]
 8007d62:	4b59      	ldr	r3, [pc, #356]	; (8007ec8 <HAL_RCC_ClockConfig+0x244>)
 8007d64:	6a1b      	ldr	r3, [r3, #32]
 8007d66:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007d6a:	429a      	cmp	r2, r3
 8007d6c:	d908      	bls.n	8007d80 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007d6e:	4b56      	ldr	r3, [pc, #344]	; (8007ec8 <HAL_RCC_ClockConfig+0x244>)
 8007d70:	6a1b      	ldr	r3, [r3, #32]
 8007d72:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	69db      	ldr	r3, [r3, #28]
 8007d7a:	4953      	ldr	r1, [pc, #332]	; (8007ec8 <HAL_RCC_ClockConfig+0x244>)
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f003 0302 	and.w	r3, r3, #2
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d010      	beq.n	8007dae <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	68da      	ldr	r2, [r3, #12]
 8007d90:	4b4d      	ldr	r3, [pc, #308]	; (8007ec8 <HAL_RCC_ClockConfig+0x244>)
 8007d92:	699b      	ldr	r3, [r3, #24]
 8007d94:	f003 030f 	and.w	r3, r3, #15
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	d908      	bls.n	8007dae <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d9c:	4b4a      	ldr	r3, [pc, #296]	; (8007ec8 <HAL_RCC_ClockConfig+0x244>)
 8007d9e:	699b      	ldr	r3, [r3, #24]
 8007da0:	f023 020f 	bic.w	r2, r3, #15
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	68db      	ldr	r3, [r3, #12]
 8007da8:	4947      	ldr	r1, [pc, #284]	; (8007ec8 <HAL_RCC_ClockConfig+0x244>)
 8007daa:	4313      	orrs	r3, r2
 8007dac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f003 0301 	and.w	r3, r3, #1
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d055      	beq.n	8007e66 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007dba:	4b43      	ldr	r3, [pc, #268]	; (8007ec8 <HAL_RCC_ClockConfig+0x244>)
 8007dbc:	699b      	ldr	r3, [r3, #24]
 8007dbe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	689b      	ldr	r3, [r3, #8]
 8007dc6:	4940      	ldr	r1, [pc, #256]	; (8007ec8 <HAL_RCC_ClockConfig+0x244>)
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	2b02      	cmp	r3, #2
 8007dd2:	d107      	bne.n	8007de4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007dd4:	4b3c      	ldr	r3, [pc, #240]	; (8007ec8 <HAL_RCC_ClockConfig+0x244>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d121      	bne.n	8007e24 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007de0:	2301      	movs	r3, #1
 8007de2:	e0f6      	b.n	8007fd2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	685b      	ldr	r3, [r3, #4]
 8007de8:	2b03      	cmp	r3, #3
 8007dea:	d107      	bne.n	8007dfc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007dec:	4b36      	ldr	r3, [pc, #216]	; (8007ec8 <HAL_RCC_ClockConfig+0x244>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d115      	bne.n	8007e24 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007df8:	2301      	movs	r3, #1
 8007dfa:	e0ea      	b.n	8007fd2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	2b01      	cmp	r3, #1
 8007e02:	d107      	bne.n	8007e14 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007e04:	4b30      	ldr	r3, [pc, #192]	; (8007ec8 <HAL_RCC_ClockConfig+0x244>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d109      	bne.n	8007e24 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007e10:	2301      	movs	r3, #1
 8007e12:	e0de      	b.n	8007fd2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007e14:	4b2c      	ldr	r3, [pc, #176]	; (8007ec8 <HAL_RCC_ClockConfig+0x244>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f003 0304 	and.w	r3, r3, #4
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d101      	bne.n	8007e24 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007e20:	2301      	movs	r3, #1
 8007e22:	e0d6      	b.n	8007fd2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007e24:	4b28      	ldr	r3, [pc, #160]	; (8007ec8 <HAL_RCC_ClockConfig+0x244>)
 8007e26:	691b      	ldr	r3, [r3, #16]
 8007e28:	f023 0207 	bic.w	r2, r3, #7
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	4925      	ldr	r1, [pc, #148]	; (8007ec8 <HAL_RCC_ClockConfig+0x244>)
 8007e32:	4313      	orrs	r3, r2
 8007e34:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e36:	f7f9 ff01 	bl	8001c3c <HAL_GetTick>
 8007e3a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e3c:	e00a      	b.n	8007e54 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e3e:	f7f9 fefd 	bl	8001c3c <HAL_GetTick>
 8007e42:	4602      	mov	r2, r0
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	1ad3      	subs	r3, r2, r3
 8007e48:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d901      	bls.n	8007e54 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007e50:	2303      	movs	r3, #3
 8007e52:	e0be      	b.n	8007fd2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e54:	4b1c      	ldr	r3, [pc, #112]	; (8007ec8 <HAL_RCC_ClockConfig+0x244>)
 8007e56:	691b      	ldr	r3, [r3, #16]
 8007e58:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	00db      	lsls	r3, r3, #3
 8007e62:	429a      	cmp	r2, r3
 8007e64:	d1eb      	bne.n	8007e3e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f003 0302 	and.w	r3, r3, #2
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d010      	beq.n	8007e94 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	68da      	ldr	r2, [r3, #12]
 8007e76:	4b14      	ldr	r3, [pc, #80]	; (8007ec8 <HAL_RCC_ClockConfig+0x244>)
 8007e78:	699b      	ldr	r3, [r3, #24]
 8007e7a:	f003 030f 	and.w	r3, r3, #15
 8007e7e:	429a      	cmp	r2, r3
 8007e80:	d208      	bcs.n	8007e94 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007e82:	4b11      	ldr	r3, [pc, #68]	; (8007ec8 <HAL_RCC_ClockConfig+0x244>)
 8007e84:	699b      	ldr	r3, [r3, #24]
 8007e86:	f023 020f 	bic.w	r2, r3, #15
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	68db      	ldr	r3, [r3, #12]
 8007e8e:	490e      	ldr	r1, [pc, #56]	; (8007ec8 <HAL_RCC_ClockConfig+0x244>)
 8007e90:	4313      	orrs	r3, r2
 8007e92:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007e94:	4b0b      	ldr	r3, [pc, #44]	; (8007ec4 <HAL_RCC_ClockConfig+0x240>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f003 030f 	and.w	r3, r3, #15
 8007e9c:	683a      	ldr	r2, [r7, #0]
 8007e9e:	429a      	cmp	r2, r3
 8007ea0:	d214      	bcs.n	8007ecc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ea2:	4b08      	ldr	r3, [pc, #32]	; (8007ec4 <HAL_RCC_ClockConfig+0x240>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f023 020f 	bic.w	r2, r3, #15
 8007eaa:	4906      	ldr	r1, [pc, #24]	; (8007ec4 <HAL_RCC_ClockConfig+0x240>)
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007eb2:	4b04      	ldr	r3, [pc, #16]	; (8007ec4 <HAL_RCC_ClockConfig+0x240>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f003 030f 	and.w	r3, r3, #15
 8007eba:	683a      	ldr	r2, [r7, #0]
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d005      	beq.n	8007ecc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	e086      	b.n	8007fd2 <HAL_RCC_ClockConfig+0x34e>
 8007ec4:	52002000 	.word	0x52002000
 8007ec8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f003 0304 	and.w	r3, r3, #4
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d010      	beq.n	8007efa <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	691a      	ldr	r2, [r3, #16]
 8007edc:	4b3f      	ldr	r3, [pc, #252]	; (8007fdc <HAL_RCC_ClockConfig+0x358>)
 8007ede:	699b      	ldr	r3, [r3, #24]
 8007ee0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	d208      	bcs.n	8007efa <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007ee8:	4b3c      	ldr	r3, [pc, #240]	; (8007fdc <HAL_RCC_ClockConfig+0x358>)
 8007eea:	699b      	ldr	r3, [r3, #24]
 8007eec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	691b      	ldr	r3, [r3, #16]
 8007ef4:	4939      	ldr	r1, [pc, #228]	; (8007fdc <HAL_RCC_ClockConfig+0x358>)
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f003 0308 	and.w	r3, r3, #8
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d010      	beq.n	8007f28 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	695a      	ldr	r2, [r3, #20]
 8007f0a:	4b34      	ldr	r3, [pc, #208]	; (8007fdc <HAL_RCC_ClockConfig+0x358>)
 8007f0c:	69db      	ldr	r3, [r3, #28]
 8007f0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007f12:	429a      	cmp	r2, r3
 8007f14:	d208      	bcs.n	8007f28 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007f16:	4b31      	ldr	r3, [pc, #196]	; (8007fdc <HAL_RCC_ClockConfig+0x358>)
 8007f18:	69db      	ldr	r3, [r3, #28]
 8007f1a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	695b      	ldr	r3, [r3, #20]
 8007f22:	492e      	ldr	r1, [pc, #184]	; (8007fdc <HAL_RCC_ClockConfig+0x358>)
 8007f24:	4313      	orrs	r3, r2
 8007f26:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f003 0310 	and.w	r3, r3, #16
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d010      	beq.n	8007f56 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	699a      	ldr	r2, [r3, #24]
 8007f38:	4b28      	ldr	r3, [pc, #160]	; (8007fdc <HAL_RCC_ClockConfig+0x358>)
 8007f3a:	69db      	ldr	r3, [r3, #28]
 8007f3c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007f40:	429a      	cmp	r2, r3
 8007f42:	d208      	bcs.n	8007f56 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007f44:	4b25      	ldr	r3, [pc, #148]	; (8007fdc <HAL_RCC_ClockConfig+0x358>)
 8007f46:	69db      	ldr	r3, [r3, #28]
 8007f48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	699b      	ldr	r3, [r3, #24]
 8007f50:	4922      	ldr	r1, [pc, #136]	; (8007fdc <HAL_RCC_ClockConfig+0x358>)
 8007f52:	4313      	orrs	r3, r2
 8007f54:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f003 0320 	and.w	r3, r3, #32
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d010      	beq.n	8007f84 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	69da      	ldr	r2, [r3, #28]
 8007f66:	4b1d      	ldr	r3, [pc, #116]	; (8007fdc <HAL_RCC_ClockConfig+0x358>)
 8007f68:	6a1b      	ldr	r3, [r3, #32]
 8007f6a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007f6e:	429a      	cmp	r2, r3
 8007f70:	d208      	bcs.n	8007f84 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007f72:	4b1a      	ldr	r3, [pc, #104]	; (8007fdc <HAL_RCC_ClockConfig+0x358>)
 8007f74:	6a1b      	ldr	r3, [r3, #32]
 8007f76:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	69db      	ldr	r3, [r3, #28]
 8007f7e:	4917      	ldr	r1, [pc, #92]	; (8007fdc <HAL_RCC_ClockConfig+0x358>)
 8007f80:	4313      	orrs	r3, r2
 8007f82:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007f84:	f000 f834 	bl	8007ff0 <HAL_RCC_GetSysClockFreq>
 8007f88:	4602      	mov	r2, r0
 8007f8a:	4b14      	ldr	r3, [pc, #80]	; (8007fdc <HAL_RCC_ClockConfig+0x358>)
 8007f8c:	699b      	ldr	r3, [r3, #24]
 8007f8e:	0a1b      	lsrs	r3, r3, #8
 8007f90:	f003 030f 	and.w	r3, r3, #15
 8007f94:	4912      	ldr	r1, [pc, #72]	; (8007fe0 <HAL_RCC_ClockConfig+0x35c>)
 8007f96:	5ccb      	ldrb	r3, [r1, r3]
 8007f98:	f003 031f 	and.w	r3, r3, #31
 8007f9c:	fa22 f303 	lsr.w	r3, r2, r3
 8007fa0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007fa2:	4b0e      	ldr	r3, [pc, #56]	; (8007fdc <HAL_RCC_ClockConfig+0x358>)
 8007fa4:	699b      	ldr	r3, [r3, #24]
 8007fa6:	f003 030f 	and.w	r3, r3, #15
 8007faa:	4a0d      	ldr	r2, [pc, #52]	; (8007fe0 <HAL_RCC_ClockConfig+0x35c>)
 8007fac:	5cd3      	ldrb	r3, [r2, r3]
 8007fae:	f003 031f 	and.w	r3, r3, #31
 8007fb2:	693a      	ldr	r2, [r7, #16]
 8007fb4:	fa22 f303 	lsr.w	r3, r2, r3
 8007fb8:	4a0a      	ldr	r2, [pc, #40]	; (8007fe4 <HAL_RCC_ClockConfig+0x360>)
 8007fba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007fbc:	4a0a      	ldr	r2, [pc, #40]	; (8007fe8 <HAL_RCC_ClockConfig+0x364>)
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8007fc2:	4b0a      	ldr	r3, [pc, #40]	; (8007fec <HAL_RCC_ClockConfig+0x368>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f7f9 fdee 	bl	8001ba8 <HAL_InitTick>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3718      	adds	r7, #24
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}
 8007fda:	bf00      	nop
 8007fdc:	58024400 	.word	0x58024400
 8007fe0:	080134b8 	.word	0x080134b8
 8007fe4:	24000004 	.word	0x24000004
 8007fe8:	24000000 	.word	0x24000000
 8007fec:	24000008 	.word	0x24000008

08007ff0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b089      	sub	sp, #36	; 0x24
 8007ff4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007ff6:	4bb3      	ldr	r3, [pc, #716]	; (80082c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ff8:	691b      	ldr	r3, [r3, #16]
 8007ffa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007ffe:	2b18      	cmp	r3, #24
 8008000:	f200 8155 	bhi.w	80082ae <HAL_RCC_GetSysClockFreq+0x2be>
 8008004:	a201      	add	r2, pc, #4	; (adr r2, 800800c <HAL_RCC_GetSysClockFreq+0x1c>)
 8008006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800800a:	bf00      	nop
 800800c:	08008071 	.word	0x08008071
 8008010:	080082af 	.word	0x080082af
 8008014:	080082af 	.word	0x080082af
 8008018:	080082af 	.word	0x080082af
 800801c:	080082af 	.word	0x080082af
 8008020:	080082af 	.word	0x080082af
 8008024:	080082af 	.word	0x080082af
 8008028:	080082af 	.word	0x080082af
 800802c:	08008097 	.word	0x08008097
 8008030:	080082af 	.word	0x080082af
 8008034:	080082af 	.word	0x080082af
 8008038:	080082af 	.word	0x080082af
 800803c:	080082af 	.word	0x080082af
 8008040:	080082af 	.word	0x080082af
 8008044:	080082af 	.word	0x080082af
 8008048:	080082af 	.word	0x080082af
 800804c:	0800809d 	.word	0x0800809d
 8008050:	080082af 	.word	0x080082af
 8008054:	080082af 	.word	0x080082af
 8008058:	080082af 	.word	0x080082af
 800805c:	080082af 	.word	0x080082af
 8008060:	080082af 	.word	0x080082af
 8008064:	080082af 	.word	0x080082af
 8008068:	080082af 	.word	0x080082af
 800806c:	080080a3 	.word	0x080080a3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008070:	4b94      	ldr	r3, [pc, #592]	; (80082c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f003 0320 	and.w	r3, r3, #32
 8008078:	2b00      	cmp	r3, #0
 800807a:	d009      	beq.n	8008090 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800807c:	4b91      	ldr	r3, [pc, #580]	; (80082c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	08db      	lsrs	r3, r3, #3
 8008082:	f003 0303 	and.w	r3, r3, #3
 8008086:	4a90      	ldr	r2, [pc, #576]	; (80082c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008088:	fa22 f303 	lsr.w	r3, r2, r3
 800808c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800808e:	e111      	b.n	80082b4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008090:	4b8d      	ldr	r3, [pc, #564]	; (80082c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008092:	61bb      	str	r3, [r7, #24]
    break;
 8008094:	e10e      	b.n	80082b4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008096:	4b8d      	ldr	r3, [pc, #564]	; (80082cc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008098:	61bb      	str	r3, [r7, #24]
    break;
 800809a:	e10b      	b.n	80082b4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800809c:	4b8c      	ldr	r3, [pc, #560]	; (80082d0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800809e:	61bb      	str	r3, [r7, #24]
    break;
 80080a0:	e108      	b.n	80082b4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80080a2:	4b88      	ldr	r3, [pc, #544]	; (80082c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80080a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080a6:	f003 0303 	and.w	r3, r3, #3
 80080aa:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80080ac:	4b85      	ldr	r3, [pc, #532]	; (80082c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80080ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080b0:	091b      	lsrs	r3, r3, #4
 80080b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80080b6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80080b8:	4b82      	ldr	r3, [pc, #520]	; (80082c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80080ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080bc:	f003 0301 	and.w	r3, r3, #1
 80080c0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80080c2:	4b80      	ldr	r3, [pc, #512]	; (80082c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80080c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080c6:	08db      	lsrs	r3, r3, #3
 80080c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80080cc:	68fa      	ldr	r2, [r7, #12]
 80080ce:	fb02 f303 	mul.w	r3, r2, r3
 80080d2:	ee07 3a90 	vmov	s15, r3
 80080d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080da:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	f000 80e1 	beq.w	80082a8 <HAL_RCC_GetSysClockFreq+0x2b8>
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	2b02      	cmp	r3, #2
 80080ea:	f000 8083 	beq.w	80081f4 <HAL_RCC_GetSysClockFreq+0x204>
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	2b02      	cmp	r3, #2
 80080f2:	f200 80a1 	bhi.w	8008238 <HAL_RCC_GetSysClockFreq+0x248>
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d003      	beq.n	8008104 <HAL_RCC_GetSysClockFreq+0x114>
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	2b01      	cmp	r3, #1
 8008100:	d056      	beq.n	80081b0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008102:	e099      	b.n	8008238 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008104:	4b6f      	ldr	r3, [pc, #444]	; (80082c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f003 0320 	and.w	r3, r3, #32
 800810c:	2b00      	cmp	r3, #0
 800810e:	d02d      	beq.n	800816c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008110:	4b6c      	ldr	r3, [pc, #432]	; (80082c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	08db      	lsrs	r3, r3, #3
 8008116:	f003 0303 	and.w	r3, r3, #3
 800811a:	4a6b      	ldr	r2, [pc, #428]	; (80082c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800811c:	fa22 f303 	lsr.w	r3, r2, r3
 8008120:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	ee07 3a90 	vmov	s15, r3
 8008128:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	ee07 3a90 	vmov	s15, r3
 8008132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008136:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800813a:	4b62      	ldr	r3, [pc, #392]	; (80082c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800813c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800813e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008142:	ee07 3a90 	vmov	s15, r3
 8008146:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800814a:	ed97 6a02 	vldr	s12, [r7, #8]
 800814e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80082d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008152:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008156:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800815a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800815e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008162:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008166:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800816a:	e087      	b.n	800827c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	ee07 3a90 	vmov	s15, r3
 8008172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008176:	eddf 6a58 	vldr	s13, [pc, #352]	; 80082d8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800817a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800817e:	4b51      	ldr	r3, [pc, #324]	; (80082c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008186:	ee07 3a90 	vmov	s15, r3
 800818a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800818e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008192:	eddf 5a50 	vldr	s11, [pc, #320]	; 80082d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008196:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800819a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800819e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80081ae:	e065      	b.n	800827c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	ee07 3a90 	vmov	s15, r3
 80081b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081ba:	eddf 6a48 	vldr	s13, [pc, #288]	; 80082dc <HAL_RCC_GetSysClockFreq+0x2ec>
 80081be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081c2:	4b40      	ldr	r3, [pc, #256]	; (80082c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80081c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081ca:	ee07 3a90 	vmov	s15, r3
 80081ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80081d6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80082d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80081da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80081f2:	e043      	b.n	800827c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	ee07 3a90 	vmov	s15, r3
 80081fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081fe:	eddf 6a38 	vldr	s13, [pc, #224]	; 80082e0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008202:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008206:	4b2f      	ldr	r3, [pc, #188]	; (80082c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800820a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800820e:	ee07 3a90 	vmov	s15, r3
 8008212:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008216:	ed97 6a02 	vldr	s12, [r7, #8]
 800821a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80082d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800821e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008222:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008226:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800822a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800822e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008232:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008236:	e021      	b.n	800827c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	ee07 3a90 	vmov	s15, r3
 800823e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008242:	eddf 6a26 	vldr	s13, [pc, #152]	; 80082dc <HAL_RCC_GetSysClockFreq+0x2ec>
 8008246:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800824a:	4b1e      	ldr	r3, [pc, #120]	; (80082c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800824c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800824e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008252:	ee07 3a90 	vmov	s15, r3
 8008256:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800825a:	ed97 6a02 	vldr	s12, [r7, #8]
 800825e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80082d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008262:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008266:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800826a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800826e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008272:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008276:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800827a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800827c:	4b11      	ldr	r3, [pc, #68]	; (80082c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800827e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008280:	0a5b      	lsrs	r3, r3, #9
 8008282:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008286:	3301      	adds	r3, #1
 8008288:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	ee07 3a90 	vmov	s15, r3
 8008290:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008294:	edd7 6a07 	vldr	s13, [r7, #28]
 8008298:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800829c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80082a0:	ee17 3a90 	vmov	r3, s15
 80082a4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80082a6:	e005      	b.n	80082b4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80082a8:	2300      	movs	r3, #0
 80082aa:	61bb      	str	r3, [r7, #24]
    break;
 80082ac:	e002      	b.n	80082b4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80082ae:	4b07      	ldr	r3, [pc, #28]	; (80082cc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80082b0:	61bb      	str	r3, [r7, #24]
    break;
 80082b2:	bf00      	nop
  }

  return sysclockfreq;
 80082b4:	69bb      	ldr	r3, [r7, #24]
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3724      	adds	r7, #36	; 0x24
 80082ba:	46bd      	mov	sp, r7
 80082bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c0:	4770      	bx	lr
 80082c2:	bf00      	nop
 80082c4:	58024400 	.word	0x58024400
 80082c8:	03d09000 	.word	0x03d09000
 80082cc:	003d0900 	.word	0x003d0900
 80082d0:	00f42400 	.word	0x00f42400
 80082d4:	46000000 	.word	0x46000000
 80082d8:	4c742400 	.word	0x4c742400
 80082dc:	4a742400 	.word	0x4a742400
 80082e0:	4b742400 	.word	0x4b742400

080082e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b082      	sub	sp, #8
 80082e8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80082ea:	f7ff fe81 	bl	8007ff0 <HAL_RCC_GetSysClockFreq>
 80082ee:	4602      	mov	r2, r0
 80082f0:	4b10      	ldr	r3, [pc, #64]	; (8008334 <HAL_RCC_GetHCLKFreq+0x50>)
 80082f2:	699b      	ldr	r3, [r3, #24]
 80082f4:	0a1b      	lsrs	r3, r3, #8
 80082f6:	f003 030f 	and.w	r3, r3, #15
 80082fa:	490f      	ldr	r1, [pc, #60]	; (8008338 <HAL_RCC_GetHCLKFreq+0x54>)
 80082fc:	5ccb      	ldrb	r3, [r1, r3]
 80082fe:	f003 031f 	and.w	r3, r3, #31
 8008302:	fa22 f303 	lsr.w	r3, r2, r3
 8008306:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008308:	4b0a      	ldr	r3, [pc, #40]	; (8008334 <HAL_RCC_GetHCLKFreq+0x50>)
 800830a:	699b      	ldr	r3, [r3, #24]
 800830c:	f003 030f 	and.w	r3, r3, #15
 8008310:	4a09      	ldr	r2, [pc, #36]	; (8008338 <HAL_RCC_GetHCLKFreq+0x54>)
 8008312:	5cd3      	ldrb	r3, [r2, r3]
 8008314:	f003 031f 	and.w	r3, r3, #31
 8008318:	687a      	ldr	r2, [r7, #4]
 800831a:	fa22 f303 	lsr.w	r3, r2, r3
 800831e:	4a07      	ldr	r2, [pc, #28]	; (800833c <HAL_RCC_GetHCLKFreq+0x58>)
 8008320:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008322:	4a07      	ldr	r2, [pc, #28]	; (8008340 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008328:	4b04      	ldr	r3, [pc, #16]	; (800833c <HAL_RCC_GetHCLKFreq+0x58>)
 800832a:	681b      	ldr	r3, [r3, #0]
}
 800832c:	4618      	mov	r0, r3
 800832e:	3708      	adds	r7, #8
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}
 8008334:	58024400 	.word	0x58024400
 8008338:	080134b8 	.word	0x080134b8
 800833c:	24000004 	.word	0x24000004
 8008340:	24000000 	.word	0x24000000

08008344 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008348:	f7ff ffcc 	bl	80082e4 <HAL_RCC_GetHCLKFreq>
 800834c:	4602      	mov	r2, r0
 800834e:	4b06      	ldr	r3, [pc, #24]	; (8008368 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008350:	69db      	ldr	r3, [r3, #28]
 8008352:	091b      	lsrs	r3, r3, #4
 8008354:	f003 0307 	and.w	r3, r3, #7
 8008358:	4904      	ldr	r1, [pc, #16]	; (800836c <HAL_RCC_GetPCLK1Freq+0x28>)
 800835a:	5ccb      	ldrb	r3, [r1, r3]
 800835c:	f003 031f 	and.w	r3, r3, #31
 8008360:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008364:	4618      	mov	r0, r3
 8008366:	bd80      	pop	{r7, pc}
 8008368:	58024400 	.word	0x58024400
 800836c:	080134b8 	.word	0x080134b8

08008370 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008374:	f7ff ffb6 	bl	80082e4 <HAL_RCC_GetHCLKFreq>
 8008378:	4602      	mov	r2, r0
 800837a:	4b06      	ldr	r3, [pc, #24]	; (8008394 <HAL_RCC_GetPCLK2Freq+0x24>)
 800837c:	69db      	ldr	r3, [r3, #28]
 800837e:	0a1b      	lsrs	r3, r3, #8
 8008380:	f003 0307 	and.w	r3, r3, #7
 8008384:	4904      	ldr	r1, [pc, #16]	; (8008398 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008386:	5ccb      	ldrb	r3, [r1, r3]
 8008388:	f003 031f 	and.w	r3, r3, #31
 800838c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008390:	4618      	mov	r0, r3
 8008392:	bd80      	pop	{r7, pc}
 8008394:	58024400 	.word	0x58024400
 8008398:	080134b8 	.word	0x080134b8

0800839c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800839c:	b480      	push	{r7}
 800839e:	b083      	sub	sp, #12
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
 80083a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	223f      	movs	r2, #63	; 0x3f
 80083aa:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80083ac:	4b1a      	ldr	r3, [pc, #104]	; (8008418 <HAL_RCC_GetClockConfig+0x7c>)
 80083ae:	691b      	ldr	r3, [r3, #16]
 80083b0:	f003 0207 	and.w	r2, r3, #7
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80083b8:	4b17      	ldr	r3, [pc, #92]	; (8008418 <HAL_RCC_GetClockConfig+0x7c>)
 80083ba:	699b      	ldr	r3, [r3, #24]
 80083bc:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80083c4:	4b14      	ldr	r3, [pc, #80]	; (8008418 <HAL_RCC_GetClockConfig+0x7c>)
 80083c6:	699b      	ldr	r3, [r3, #24]
 80083c8:	f003 020f 	and.w	r2, r3, #15
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80083d0:	4b11      	ldr	r3, [pc, #68]	; (8008418 <HAL_RCC_GetClockConfig+0x7c>)
 80083d2:	699b      	ldr	r3, [r3, #24]
 80083d4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80083dc:	4b0e      	ldr	r3, [pc, #56]	; (8008418 <HAL_RCC_GetClockConfig+0x7c>)
 80083de:	69db      	ldr	r3, [r3, #28]
 80083e0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80083e8:	4b0b      	ldr	r3, [pc, #44]	; (8008418 <HAL_RCC_GetClockConfig+0x7c>)
 80083ea:	69db      	ldr	r3, [r3, #28]
 80083ec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80083f4:	4b08      	ldr	r3, [pc, #32]	; (8008418 <HAL_RCC_GetClockConfig+0x7c>)
 80083f6:	6a1b      	ldr	r3, [r3, #32]
 80083f8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008400:	4b06      	ldr	r3, [pc, #24]	; (800841c <HAL_RCC_GetClockConfig+0x80>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f003 020f 	and.w	r2, r3, #15
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	601a      	str	r2, [r3, #0]
}
 800840c:	bf00      	nop
 800840e:	370c      	adds	r7, #12
 8008410:	46bd      	mov	sp, r7
 8008412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008416:	4770      	bx	lr
 8008418:	58024400 	.word	0x58024400
 800841c:	52002000 	.word	0x52002000

08008420 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b086      	sub	sp, #24
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008428:	2300      	movs	r3, #0
 800842a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800842c:	2300      	movs	r3, #0
 800842e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008438:	2b00      	cmp	r3, #0
 800843a:	d03f      	beq.n	80084bc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008440:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008444:	d02a      	beq.n	800849c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008446:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800844a:	d824      	bhi.n	8008496 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800844c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008450:	d018      	beq.n	8008484 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008452:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008456:	d81e      	bhi.n	8008496 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008458:	2b00      	cmp	r3, #0
 800845a:	d003      	beq.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800845c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008460:	d007      	beq.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008462:	e018      	b.n	8008496 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008464:	4ba3      	ldr	r3, [pc, #652]	; (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008468:	4aa2      	ldr	r2, [pc, #648]	; (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800846a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800846e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008470:	e015      	b.n	800849e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	3304      	adds	r3, #4
 8008476:	2102      	movs	r1, #2
 8008478:	4618      	mov	r0, r3
 800847a:	f001 f9d5 	bl	8009828 <RCCEx_PLL2_Config>
 800847e:	4603      	mov	r3, r0
 8008480:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008482:	e00c      	b.n	800849e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	3324      	adds	r3, #36	; 0x24
 8008488:	2102      	movs	r1, #2
 800848a:	4618      	mov	r0, r3
 800848c:	f001 fa7e 	bl	800998c <RCCEx_PLL3_Config>
 8008490:	4603      	mov	r3, r0
 8008492:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008494:	e003      	b.n	800849e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008496:	2301      	movs	r3, #1
 8008498:	75fb      	strb	r3, [r7, #23]
      break;
 800849a:	e000      	b.n	800849e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800849c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800849e:	7dfb      	ldrb	r3, [r7, #23]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d109      	bne.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80084a4:	4b93      	ldr	r3, [pc, #588]	; (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80084a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084b0:	4990      	ldr	r1, [pc, #576]	; (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80084b2:	4313      	orrs	r3, r2
 80084b4:	650b      	str	r3, [r1, #80]	; 0x50
 80084b6:	e001      	b.n	80084bc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084b8:	7dfb      	ldrb	r3, [r7, #23]
 80084ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d03d      	beq.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084cc:	2b04      	cmp	r3, #4
 80084ce:	d826      	bhi.n	800851e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80084d0:	a201      	add	r2, pc, #4	; (adr r2, 80084d8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80084d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084d6:	bf00      	nop
 80084d8:	080084ed 	.word	0x080084ed
 80084dc:	080084fb 	.word	0x080084fb
 80084e0:	0800850d 	.word	0x0800850d
 80084e4:	08008525 	.word	0x08008525
 80084e8:	08008525 	.word	0x08008525
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084ec:	4b81      	ldr	r3, [pc, #516]	; (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80084ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084f0:	4a80      	ldr	r2, [pc, #512]	; (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80084f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80084f8:	e015      	b.n	8008526 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	3304      	adds	r3, #4
 80084fe:	2100      	movs	r1, #0
 8008500:	4618      	mov	r0, r3
 8008502:	f001 f991 	bl	8009828 <RCCEx_PLL2_Config>
 8008506:	4603      	mov	r3, r0
 8008508:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800850a:	e00c      	b.n	8008526 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	3324      	adds	r3, #36	; 0x24
 8008510:	2100      	movs	r1, #0
 8008512:	4618      	mov	r0, r3
 8008514:	f001 fa3a 	bl	800998c <RCCEx_PLL3_Config>
 8008518:	4603      	mov	r3, r0
 800851a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800851c:	e003      	b.n	8008526 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800851e:	2301      	movs	r3, #1
 8008520:	75fb      	strb	r3, [r7, #23]
      break;
 8008522:	e000      	b.n	8008526 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8008524:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008526:	7dfb      	ldrb	r3, [r7, #23]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d109      	bne.n	8008540 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800852c:	4b71      	ldr	r3, [pc, #452]	; (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800852e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008530:	f023 0207 	bic.w	r2, r3, #7
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008538:	496e      	ldr	r1, [pc, #440]	; (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800853a:	4313      	orrs	r3, r2
 800853c:	650b      	str	r3, [r1, #80]	; 0x50
 800853e:	e001      	b.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008540:	7dfb      	ldrb	r3, [r7, #23]
 8008542:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800854c:	2b00      	cmp	r3, #0
 800854e:	d042      	beq.n	80085d6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008554:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008558:	d02b      	beq.n	80085b2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800855a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800855e:	d825      	bhi.n	80085ac <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008560:	2bc0      	cmp	r3, #192	; 0xc0
 8008562:	d028      	beq.n	80085b6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008564:	2bc0      	cmp	r3, #192	; 0xc0
 8008566:	d821      	bhi.n	80085ac <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008568:	2b80      	cmp	r3, #128	; 0x80
 800856a:	d016      	beq.n	800859a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800856c:	2b80      	cmp	r3, #128	; 0x80
 800856e:	d81d      	bhi.n	80085ac <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008570:	2b00      	cmp	r3, #0
 8008572:	d002      	beq.n	800857a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8008574:	2b40      	cmp	r3, #64	; 0x40
 8008576:	d007      	beq.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8008578:	e018      	b.n	80085ac <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800857a:	4b5e      	ldr	r3, [pc, #376]	; (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800857c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800857e:	4a5d      	ldr	r2, [pc, #372]	; (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008580:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008584:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008586:	e017      	b.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	3304      	adds	r3, #4
 800858c:	2100      	movs	r1, #0
 800858e:	4618      	mov	r0, r3
 8008590:	f001 f94a 	bl	8009828 <RCCEx_PLL2_Config>
 8008594:	4603      	mov	r3, r0
 8008596:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008598:	e00e      	b.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	3324      	adds	r3, #36	; 0x24
 800859e:	2100      	movs	r1, #0
 80085a0:	4618      	mov	r0, r3
 80085a2:	f001 f9f3 	bl	800998c <RCCEx_PLL3_Config>
 80085a6:	4603      	mov	r3, r0
 80085a8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80085aa:	e005      	b.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80085ac:	2301      	movs	r3, #1
 80085ae:	75fb      	strb	r3, [r7, #23]
      break;
 80085b0:	e002      	b.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80085b2:	bf00      	nop
 80085b4:	e000      	b.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80085b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80085b8:	7dfb      	ldrb	r3, [r7, #23]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d109      	bne.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80085be:	4b4d      	ldr	r3, [pc, #308]	; (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80085c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085c2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085ca:	494a      	ldr	r1, [pc, #296]	; (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80085cc:	4313      	orrs	r3, r2
 80085ce:	650b      	str	r3, [r1, #80]	; 0x50
 80085d0:	e001      	b.n	80085d6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085d2:	7dfb      	ldrb	r3, [r7, #23]
 80085d4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d049      	beq.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80085e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80085ec:	d030      	beq.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80085ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80085f2:	d82a      	bhi.n	800864a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80085f4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80085f8:	d02c      	beq.n	8008654 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80085fa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80085fe:	d824      	bhi.n	800864a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008600:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008604:	d018      	beq.n	8008638 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8008606:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800860a:	d81e      	bhi.n	800864a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800860c:	2b00      	cmp	r3, #0
 800860e:	d003      	beq.n	8008618 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8008610:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008614:	d007      	beq.n	8008626 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8008616:	e018      	b.n	800864a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008618:	4b36      	ldr	r3, [pc, #216]	; (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800861a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800861c:	4a35      	ldr	r2, [pc, #212]	; (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800861e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008622:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008624:	e017      	b.n	8008656 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	3304      	adds	r3, #4
 800862a:	2100      	movs	r1, #0
 800862c:	4618      	mov	r0, r3
 800862e:	f001 f8fb 	bl	8009828 <RCCEx_PLL2_Config>
 8008632:	4603      	mov	r3, r0
 8008634:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008636:	e00e      	b.n	8008656 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	3324      	adds	r3, #36	; 0x24
 800863c:	2100      	movs	r1, #0
 800863e:	4618      	mov	r0, r3
 8008640:	f001 f9a4 	bl	800998c <RCCEx_PLL3_Config>
 8008644:	4603      	mov	r3, r0
 8008646:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008648:	e005      	b.n	8008656 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800864a:	2301      	movs	r3, #1
 800864c:	75fb      	strb	r3, [r7, #23]
      break;
 800864e:	e002      	b.n	8008656 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008650:	bf00      	nop
 8008652:	e000      	b.n	8008656 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008654:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008656:	7dfb      	ldrb	r3, [r7, #23]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d10a      	bne.n	8008672 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800865c:	4b25      	ldr	r3, [pc, #148]	; (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800865e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008660:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800866a:	4922      	ldr	r1, [pc, #136]	; (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800866c:	4313      	orrs	r3, r2
 800866e:	658b      	str	r3, [r1, #88]	; 0x58
 8008670:	e001      	b.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008672:	7dfb      	ldrb	r3, [r7, #23]
 8008674:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800867e:	2b00      	cmp	r3, #0
 8008680:	d04b      	beq.n	800871a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008688:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800868c:	d030      	beq.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800868e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008692:	d82a      	bhi.n	80086ea <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008694:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008698:	d02e      	beq.n	80086f8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800869a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800869e:	d824      	bhi.n	80086ea <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80086a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80086a4:	d018      	beq.n	80086d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80086a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80086aa:	d81e      	bhi.n	80086ea <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d003      	beq.n	80086b8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80086b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80086b4:	d007      	beq.n	80086c6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80086b6:	e018      	b.n	80086ea <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086b8:	4b0e      	ldr	r3, [pc, #56]	; (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80086ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086bc:	4a0d      	ldr	r2, [pc, #52]	; (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80086be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80086c4:	e019      	b.n	80086fa <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	3304      	adds	r3, #4
 80086ca:	2100      	movs	r1, #0
 80086cc:	4618      	mov	r0, r3
 80086ce:	f001 f8ab 	bl	8009828 <RCCEx_PLL2_Config>
 80086d2:	4603      	mov	r3, r0
 80086d4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80086d6:	e010      	b.n	80086fa <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	3324      	adds	r3, #36	; 0x24
 80086dc:	2100      	movs	r1, #0
 80086de:	4618      	mov	r0, r3
 80086e0:	f001 f954 	bl	800998c <RCCEx_PLL3_Config>
 80086e4:	4603      	mov	r3, r0
 80086e6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80086e8:	e007      	b.n	80086fa <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80086ea:	2301      	movs	r3, #1
 80086ec:	75fb      	strb	r3, [r7, #23]
      break;
 80086ee:	e004      	b.n	80086fa <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80086f0:	bf00      	nop
 80086f2:	e002      	b.n	80086fa <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80086f4:	58024400 	.word	0x58024400
      break;
 80086f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80086fa:	7dfb      	ldrb	r3, [r7, #23]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d10a      	bne.n	8008716 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008700:	4b99      	ldr	r3, [pc, #612]	; (8008968 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008704:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800870e:	4996      	ldr	r1, [pc, #600]	; (8008968 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008710:	4313      	orrs	r3, r2
 8008712:	658b      	str	r3, [r1, #88]	; 0x58
 8008714:	e001      	b.n	800871a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008716:	7dfb      	ldrb	r3, [r7, #23]
 8008718:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008722:	2b00      	cmp	r3, #0
 8008724:	d032      	beq.n	800878c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800872a:	2b30      	cmp	r3, #48	; 0x30
 800872c:	d01c      	beq.n	8008768 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800872e:	2b30      	cmp	r3, #48	; 0x30
 8008730:	d817      	bhi.n	8008762 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8008732:	2b20      	cmp	r3, #32
 8008734:	d00c      	beq.n	8008750 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8008736:	2b20      	cmp	r3, #32
 8008738:	d813      	bhi.n	8008762 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800873a:	2b00      	cmp	r3, #0
 800873c:	d016      	beq.n	800876c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800873e:	2b10      	cmp	r3, #16
 8008740:	d10f      	bne.n	8008762 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008742:	4b89      	ldr	r3, [pc, #548]	; (8008968 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008746:	4a88      	ldr	r2, [pc, #544]	; (8008968 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008748:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800874c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800874e:	e00e      	b.n	800876e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	3304      	adds	r3, #4
 8008754:	2102      	movs	r1, #2
 8008756:	4618      	mov	r0, r3
 8008758:	f001 f866 	bl	8009828 <RCCEx_PLL2_Config>
 800875c:	4603      	mov	r3, r0
 800875e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008760:	e005      	b.n	800876e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008762:	2301      	movs	r3, #1
 8008764:	75fb      	strb	r3, [r7, #23]
      break;
 8008766:	e002      	b.n	800876e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8008768:	bf00      	nop
 800876a:	e000      	b.n	800876e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800876c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800876e:	7dfb      	ldrb	r3, [r7, #23]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d109      	bne.n	8008788 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008774:	4b7c      	ldr	r3, [pc, #496]	; (8008968 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008778:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008780:	4979      	ldr	r1, [pc, #484]	; (8008968 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008782:	4313      	orrs	r3, r2
 8008784:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008786:	e001      	b.n	800878c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008788:	7dfb      	ldrb	r3, [r7, #23]
 800878a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008794:	2b00      	cmp	r3, #0
 8008796:	d047      	beq.n	8008828 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800879c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80087a0:	d030      	beq.n	8008804 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80087a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80087a6:	d82a      	bhi.n	80087fe <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80087a8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80087ac:	d02c      	beq.n	8008808 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80087ae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80087b2:	d824      	bhi.n	80087fe <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80087b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087b8:	d018      	beq.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80087ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087be:	d81e      	bhi.n	80087fe <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d003      	beq.n	80087cc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80087c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087c8:	d007      	beq.n	80087da <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80087ca:	e018      	b.n	80087fe <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087cc:	4b66      	ldr	r3, [pc, #408]	; (8008968 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80087ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087d0:	4a65      	ldr	r2, [pc, #404]	; (8008968 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80087d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80087d8:	e017      	b.n	800880a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	3304      	adds	r3, #4
 80087de:	2100      	movs	r1, #0
 80087e0:	4618      	mov	r0, r3
 80087e2:	f001 f821 	bl	8009828 <RCCEx_PLL2_Config>
 80087e6:	4603      	mov	r3, r0
 80087e8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80087ea:	e00e      	b.n	800880a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	3324      	adds	r3, #36	; 0x24
 80087f0:	2100      	movs	r1, #0
 80087f2:	4618      	mov	r0, r3
 80087f4:	f001 f8ca 	bl	800998c <RCCEx_PLL3_Config>
 80087f8:	4603      	mov	r3, r0
 80087fa:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80087fc:	e005      	b.n	800880a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80087fe:	2301      	movs	r3, #1
 8008800:	75fb      	strb	r3, [r7, #23]
      break;
 8008802:	e002      	b.n	800880a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8008804:	bf00      	nop
 8008806:	e000      	b.n	800880a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8008808:	bf00      	nop
    }

    if(ret == HAL_OK)
 800880a:	7dfb      	ldrb	r3, [r7, #23]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d109      	bne.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008810:	4b55      	ldr	r3, [pc, #340]	; (8008968 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008812:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008814:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800881c:	4952      	ldr	r1, [pc, #328]	; (8008968 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800881e:	4313      	orrs	r3, r2
 8008820:	650b      	str	r3, [r1, #80]	; 0x50
 8008822:	e001      	b.n	8008828 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008824:	7dfb      	ldrb	r3, [r7, #23]
 8008826:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008830:	2b00      	cmp	r3, #0
 8008832:	d049      	beq.n	80088c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008838:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800883c:	d02e      	beq.n	800889c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800883e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008842:	d828      	bhi.n	8008896 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008844:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008848:	d02a      	beq.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800884a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800884e:	d822      	bhi.n	8008896 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008850:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008854:	d026      	beq.n	80088a4 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8008856:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800885a:	d81c      	bhi.n	8008896 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800885c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008860:	d010      	beq.n	8008884 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8008862:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008866:	d816      	bhi.n	8008896 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008868:	2b00      	cmp	r3, #0
 800886a:	d01d      	beq.n	80088a8 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800886c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008870:	d111      	bne.n	8008896 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	3304      	adds	r3, #4
 8008876:	2101      	movs	r1, #1
 8008878:	4618      	mov	r0, r3
 800887a:	f000 ffd5 	bl	8009828 <RCCEx_PLL2_Config>
 800887e:	4603      	mov	r3, r0
 8008880:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008882:	e012      	b.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	3324      	adds	r3, #36	; 0x24
 8008888:	2101      	movs	r1, #1
 800888a:	4618      	mov	r0, r3
 800888c:	f001 f87e 	bl	800998c <RCCEx_PLL3_Config>
 8008890:	4603      	mov	r3, r0
 8008892:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008894:	e009      	b.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008896:	2301      	movs	r3, #1
 8008898:	75fb      	strb	r3, [r7, #23]
      break;
 800889a:	e006      	b.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800889c:	bf00      	nop
 800889e:	e004      	b.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80088a0:	bf00      	nop
 80088a2:	e002      	b.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80088a4:	bf00      	nop
 80088a6:	e000      	b.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80088a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80088aa:	7dfb      	ldrb	r3, [r7, #23]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d109      	bne.n	80088c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80088b0:	4b2d      	ldr	r3, [pc, #180]	; (8008968 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80088b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088b4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088bc:	492a      	ldr	r1, [pc, #168]	; (8008968 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80088be:	4313      	orrs	r3, r2
 80088c0:	650b      	str	r3, [r1, #80]	; 0x50
 80088c2:	e001      	b.n	80088c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088c4:	7dfb      	ldrb	r3, [r7, #23]
 80088c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d04d      	beq.n	8008970 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80088da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80088de:	d02e      	beq.n	800893e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80088e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80088e4:	d828      	bhi.n	8008938 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80088e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088ea:	d02a      	beq.n	8008942 <HAL_RCCEx_PeriphCLKConfig+0x522>
 80088ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088f0:	d822      	bhi.n	8008938 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80088f2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80088f6:	d026      	beq.n	8008946 <HAL_RCCEx_PeriphCLKConfig+0x526>
 80088f8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80088fc:	d81c      	bhi.n	8008938 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80088fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008902:	d010      	beq.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8008904:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008908:	d816      	bhi.n	8008938 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800890a:	2b00      	cmp	r3, #0
 800890c:	d01d      	beq.n	800894a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800890e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008912:	d111      	bne.n	8008938 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	3304      	adds	r3, #4
 8008918:	2101      	movs	r1, #1
 800891a:	4618      	mov	r0, r3
 800891c:	f000 ff84 	bl	8009828 <RCCEx_PLL2_Config>
 8008920:	4603      	mov	r3, r0
 8008922:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008924:	e012      	b.n	800894c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	3324      	adds	r3, #36	; 0x24
 800892a:	2101      	movs	r1, #1
 800892c:	4618      	mov	r0, r3
 800892e:	f001 f82d 	bl	800998c <RCCEx_PLL3_Config>
 8008932:	4603      	mov	r3, r0
 8008934:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008936:	e009      	b.n	800894c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008938:	2301      	movs	r3, #1
 800893a:	75fb      	strb	r3, [r7, #23]
      break;
 800893c:	e006      	b.n	800894c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800893e:	bf00      	nop
 8008940:	e004      	b.n	800894c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008942:	bf00      	nop
 8008944:	e002      	b.n	800894c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008946:	bf00      	nop
 8008948:	e000      	b.n	800894c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800894a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800894c:	7dfb      	ldrb	r3, [r7, #23]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d10c      	bne.n	800896c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008952:	4b05      	ldr	r3, [pc, #20]	; (8008968 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008956:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008960:	4901      	ldr	r1, [pc, #4]	; (8008968 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008962:	4313      	orrs	r3, r2
 8008964:	658b      	str	r3, [r1, #88]	; 0x58
 8008966:	e003      	b.n	8008970 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8008968:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800896c:	7dfb      	ldrb	r3, [r7, #23]
 800896e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008978:	2b00      	cmp	r3, #0
 800897a:	d02f      	beq.n	80089dc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008980:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008984:	d00e      	beq.n	80089a4 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8008986:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800898a:	d814      	bhi.n	80089b6 <HAL_RCCEx_PeriphCLKConfig+0x596>
 800898c:	2b00      	cmp	r3, #0
 800898e:	d015      	beq.n	80089bc <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8008990:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008994:	d10f      	bne.n	80089b6 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008996:	4baf      	ldr	r3, [pc, #700]	; (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800899a:	4aae      	ldr	r2, [pc, #696]	; (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800899c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80089a2:	e00c      	b.n	80089be <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	3304      	adds	r3, #4
 80089a8:	2101      	movs	r1, #1
 80089aa:	4618      	mov	r0, r3
 80089ac:	f000 ff3c 	bl	8009828 <RCCEx_PLL2_Config>
 80089b0:	4603      	mov	r3, r0
 80089b2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80089b4:	e003      	b.n	80089be <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80089b6:	2301      	movs	r3, #1
 80089b8:	75fb      	strb	r3, [r7, #23]
      break;
 80089ba:	e000      	b.n	80089be <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80089bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80089be:	7dfb      	ldrb	r3, [r7, #23]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d109      	bne.n	80089d8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80089c4:	4ba3      	ldr	r3, [pc, #652]	; (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80089c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089c8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089d0:	49a0      	ldr	r1, [pc, #640]	; (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80089d2:	4313      	orrs	r3, r2
 80089d4:	650b      	str	r3, [r1, #80]	; 0x50
 80089d6:	e001      	b.n	80089dc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089d8:	7dfb      	ldrb	r3, [r7, #23]
 80089da:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d032      	beq.n	8008a4e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089ec:	2b03      	cmp	r3, #3
 80089ee:	d81b      	bhi.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80089f0:	a201      	add	r2, pc, #4	; (adr r2, 80089f8 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80089f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089f6:	bf00      	nop
 80089f8:	08008a2f 	.word	0x08008a2f
 80089fc:	08008a09 	.word	0x08008a09
 8008a00:	08008a17 	.word	0x08008a17
 8008a04:	08008a2f 	.word	0x08008a2f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a08:	4b92      	ldr	r3, [pc, #584]	; (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a0c:	4a91      	ldr	r2, [pc, #580]	; (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008a0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a12:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008a14:	e00c      	b.n	8008a30 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	3304      	adds	r3, #4
 8008a1a:	2102      	movs	r1, #2
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f000 ff03 	bl	8009828 <RCCEx_PLL2_Config>
 8008a22:	4603      	mov	r3, r0
 8008a24:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008a26:	e003      	b.n	8008a30 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008a28:	2301      	movs	r3, #1
 8008a2a:	75fb      	strb	r3, [r7, #23]
      break;
 8008a2c:	e000      	b.n	8008a30 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8008a2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a30:	7dfb      	ldrb	r3, [r7, #23]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d109      	bne.n	8008a4a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008a36:	4b87      	ldr	r3, [pc, #540]	; (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a3a:	f023 0203 	bic.w	r2, r3, #3
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a42:	4984      	ldr	r1, [pc, #528]	; (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008a44:	4313      	orrs	r3, r2
 8008a46:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008a48:	e001      	b.n	8008a4e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a4a:	7dfb      	ldrb	r3, [r7, #23]
 8008a4c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	f000 8086 	beq.w	8008b68 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008a5c:	4b7e      	ldr	r3, [pc, #504]	; (8008c58 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4a7d      	ldr	r2, [pc, #500]	; (8008c58 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8008a62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a66:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008a68:	f7f9 f8e8 	bl	8001c3c <HAL_GetTick>
 8008a6c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008a6e:	e009      	b.n	8008a84 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008a70:	f7f9 f8e4 	bl	8001c3c <HAL_GetTick>
 8008a74:	4602      	mov	r2, r0
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	1ad3      	subs	r3, r2, r3
 8008a7a:	2b64      	cmp	r3, #100	; 0x64
 8008a7c:	d902      	bls.n	8008a84 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8008a7e:	2303      	movs	r3, #3
 8008a80:	75fb      	strb	r3, [r7, #23]
        break;
 8008a82:	e005      	b.n	8008a90 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008a84:	4b74      	ldr	r3, [pc, #464]	; (8008c58 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d0ef      	beq.n	8008a70 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8008a90:	7dfb      	ldrb	r3, [r7, #23]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d166      	bne.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008a96:	4b6f      	ldr	r3, [pc, #444]	; (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008a98:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008aa0:	4053      	eors	r3, r2
 8008aa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d013      	beq.n	8008ad2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008aaa:	4b6a      	ldr	r3, [pc, #424]	; (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008aae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ab2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008ab4:	4b67      	ldr	r3, [pc, #412]	; (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ab8:	4a66      	ldr	r2, [pc, #408]	; (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008aba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008abe:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008ac0:	4b64      	ldr	r3, [pc, #400]	; (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ac4:	4a63      	ldr	r2, [pc, #396]	; (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008ac6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008aca:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008acc:	4a61      	ldr	r2, [pc, #388]	; (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008ad8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008adc:	d115      	bne.n	8008b0a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ade:	f7f9 f8ad 	bl	8001c3c <HAL_GetTick>
 8008ae2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008ae4:	e00b      	b.n	8008afe <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ae6:	f7f9 f8a9 	bl	8001c3c <HAL_GetTick>
 8008aea:	4602      	mov	r2, r0
 8008aec:	693b      	ldr	r3, [r7, #16]
 8008aee:	1ad3      	subs	r3, r2, r3
 8008af0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d902      	bls.n	8008afe <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8008af8:	2303      	movs	r3, #3
 8008afa:	75fb      	strb	r3, [r7, #23]
            break;
 8008afc:	e005      	b.n	8008b0a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008afe:	4b55      	ldr	r3, [pc, #340]	; (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b02:	f003 0302 	and.w	r3, r3, #2
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d0ed      	beq.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8008b0a:	7dfb      	ldrb	r3, [r7, #23]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d126      	bne.n	8008b5e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008b16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b1e:	d10d      	bne.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8008b20:	4b4c      	ldr	r3, [pc, #304]	; (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008b22:	691b      	ldr	r3, [r3, #16]
 8008b24:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008b2e:	0919      	lsrs	r1, r3, #4
 8008b30:	4b4a      	ldr	r3, [pc, #296]	; (8008c5c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8008b32:	400b      	ands	r3, r1
 8008b34:	4947      	ldr	r1, [pc, #284]	; (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008b36:	4313      	orrs	r3, r2
 8008b38:	610b      	str	r3, [r1, #16]
 8008b3a:	e005      	b.n	8008b48 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8008b3c:	4b45      	ldr	r3, [pc, #276]	; (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008b3e:	691b      	ldr	r3, [r3, #16]
 8008b40:	4a44      	ldr	r2, [pc, #272]	; (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008b42:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008b46:	6113      	str	r3, [r2, #16]
 8008b48:	4b42      	ldr	r3, [pc, #264]	; (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008b4a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008b52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008b56:	493f      	ldr	r1, [pc, #252]	; (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008b58:	4313      	orrs	r3, r2
 8008b5a:	670b      	str	r3, [r1, #112]	; 0x70
 8008b5c:	e004      	b.n	8008b68 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008b5e:	7dfb      	ldrb	r3, [r7, #23]
 8008b60:	75bb      	strb	r3, [r7, #22]
 8008b62:	e001      	b.n	8008b68 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b64:	7dfb      	ldrb	r3, [r7, #23]
 8008b66:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f003 0301 	and.w	r3, r3, #1
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	f000 8085 	beq.w	8008c80 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008b7a:	2b28      	cmp	r3, #40	; 0x28
 8008b7c:	d866      	bhi.n	8008c4c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8008b7e:	a201      	add	r2, pc, #4	; (adr r2, 8008b84 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8008b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b84:	08008c61 	.word	0x08008c61
 8008b88:	08008c4d 	.word	0x08008c4d
 8008b8c:	08008c4d 	.word	0x08008c4d
 8008b90:	08008c4d 	.word	0x08008c4d
 8008b94:	08008c4d 	.word	0x08008c4d
 8008b98:	08008c4d 	.word	0x08008c4d
 8008b9c:	08008c4d 	.word	0x08008c4d
 8008ba0:	08008c4d 	.word	0x08008c4d
 8008ba4:	08008c29 	.word	0x08008c29
 8008ba8:	08008c4d 	.word	0x08008c4d
 8008bac:	08008c4d 	.word	0x08008c4d
 8008bb0:	08008c4d 	.word	0x08008c4d
 8008bb4:	08008c4d 	.word	0x08008c4d
 8008bb8:	08008c4d 	.word	0x08008c4d
 8008bbc:	08008c4d 	.word	0x08008c4d
 8008bc0:	08008c4d 	.word	0x08008c4d
 8008bc4:	08008c3b 	.word	0x08008c3b
 8008bc8:	08008c4d 	.word	0x08008c4d
 8008bcc:	08008c4d 	.word	0x08008c4d
 8008bd0:	08008c4d 	.word	0x08008c4d
 8008bd4:	08008c4d 	.word	0x08008c4d
 8008bd8:	08008c4d 	.word	0x08008c4d
 8008bdc:	08008c4d 	.word	0x08008c4d
 8008be0:	08008c4d 	.word	0x08008c4d
 8008be4:	08008c61 	.word	0x08008c61
 8008be8:	08008c4d 	.word	0x08008c4d
 8008bec:	08008c4d 	.word	0x08008c4d
 8008bf0:	08008c4d 	.word	0x08008c4d
 8008bf4:	08008c4d 	.word	0x08008c4d
 8008bf8:	08008c4d 	.word	0x08008c4d
 8008bfc:	08008c4d 	.word	0x08008c4d
 8008c00:	08008c4d 	.word	0x08008c4d
 8008c04:	08008c61 	.word	0x08008c61
 8008c08:	08008c4d 	.word	0x08008c4d
 8008c0c:	08008c4d 	.word	0x08008c4d
 8008c10:	08008c4d 	.word	0x08008c4d
 8008c14:	08008c4d 	.word	0x08008c4d
 8008c18:	08008c4d 	.word	0x08008c4d
 8008c1c:	08008c4d 	.word	0x08008c4d
 8008c20:	08008c4d 	.word	0x08008c4d
 8008c24:	08008c61 	.word	0x08008c61
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	3304      	adds	r3, #4
 8008c2c:	2101      	movs	r1, #1
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f000 fdfa 	bl	8009828 <RCCEx_PLL2_Config>
 8008c34:	4603      	mov	r3, r0
 8008c36:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008c38:	e013      	b.n	8008c62 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	3324      	adds	r3, #36	; 0x24
 8008c3e:	2101      	movs	r1, #1
 8008c40:	4618      	mov	r0, r3
 8008c42:	f000 fea3 	bl	800998c <RCCEx_PLL3_Config>
 8008c46:	4603      	mov	r3, r0
 8008c48:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008c4a:	e00a      	b.n	8008c62 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	75fb      	strb	r3, [r7, #23]
      break;
 8008c50:	e007      	b.n	8008c62 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8008c52:	bf00      	nop
 8008c54:	58024400 	.word	0x58024400
 8008c58:	58024800 	.word	0x58024800
 8008c5c:	00ffffcf 	.word	0x00ffffcf
      break;
 8008c60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c62:	7dfb      	ldrb	r3, [r7, #23]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d109      	bne.n	8008c7c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008c68:	4b96      	ldr	r3, [pc, #600]	; (8008ec4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c6c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008c74:	4993      	ldr	r1, [pc, #588]	; (8008ec4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008c76:	4313      	orrs	r3, r2
 8008c78:	654b      	str	r3, [r1, #84]	; 0x54
 8008c7a:	e001      	b.n	8008c80 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c7c:	7dfb      	ldrb	r3, [r7, #23]
 8008c7e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f003 0302 	and.w	r3, r3, #2
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d038      	beq.n	8008cfe <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c90:	2b05      	cmp	r3, #5
 8008c92:	d821      	bhi.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8008c94:	a201      	add	r2, pc, #4	; (adr r2, 8008c9c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8008c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c9a:	bf00      	nop
 8008c9c:	08008cdf 	.word	0x08008cdf
 8008ca0:	08008cb5 	.word	0x08008cb5
 8008ca4:	08008cc7 	.word	0x08008cc7
 8008ca8:	08008cdf 	.word	0x08008cdf
 8008cac:	08008cdf 	.word	0x08008cdf
 8008cb0:	08008cdf 	.word	0x08008cdf
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	3304      	adds	r3, #4
 8008cb8:	2101      	movs	r1, #1
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f000 fdb4 	bl	8009828 <RCCEx_PLL2_Config>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008cc4:	e00c      	b.n	8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	3324      	adds	r3, #36	; 0x24
 8008cca:	2101      	movs	r1, #1
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f000 fe5d 	bl	800998c <RCCEx_PLL3_Config>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008cd6:	e003      	b.n	8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008cd8:	2301      	movs	r3, #1
 8008cda:	75fb      	strb	r3, [r7, #23]
      break;
 8008cdc:	e000      	b.n	8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8008cde:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ce0:	7dfb      	ldrb	r3, [r7, #23]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d109      	bne.n	8008cfa <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008ce6:	4b77      	ldr	r3, [pc, #476]	; (8008ec4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cea:	f023 0207 	bic.w	r2, r3, #7
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008cf2:	4974      	ldr	r1, [pc, #464]	; (8008ec4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008cf4:	4313      	orrs	r3, r2
 8008cf6:	654b      	str	r3, [r1, #84]	; 0x54
 8008cf8:	e001      	b.n	8008cfe <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cfa:	7dfb      	ldrb	r3, [r7, #23]
 8008cfc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f003 0304 	and.w	r3, r3, #4
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d03a      	beq.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d10:	2b05      	cmp	r3, #5
 8008d12:	d821      	bhi.n	8008d58 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8008d14:	a201      	add	r2, pc, #4	; (adr r2, 8008d1c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8008d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d1a:	bf00      	nop
 8008d1c:	08008d5f 	.word	0x08008d5f
 8008d20:	08008d35 	.word	0x08008d35
 8008d24:	08008d47 	.word	0x08008d47
 8008d28:	08008d5f 	.word	0x08008d5f
 8008d2c:	08008d5f 	.word	0x08008d5f
 8008d30:	08008d5f 	.word	0x08008d5f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	3304      	adds	r3, #4
 8008d38:	2101      	movs	r1, #1
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f000 fd74 	bl	8009828 <RCCEx_PLL2_Config>
 8008d40:	4603      	mov	r3, r0
 8008d42:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008d44:	e00c      	b.n	8008d60 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	3324      	adds	r3, #36	; 0x24
 8008d4a:	2101      	movs	r1, #1
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f000 fe1d 	bl	800998c <RCCEx_PLL3_Config>
 8008d52:	4603      	mov	r3, r0
 8008d54:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008d56:	e003      	b.n	8008d60 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008d58:	2301      	movs	r3, #1
 8008d5a:	75fb      	strb	r3, [r7, #23]
      break;
 8008d5c:	e000      	b.n	8008d60 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8008d5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d60:	7dfb      	ldrb	r3, [r7, #23]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d10a      	bne.n	8008d7c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008d66:	4b57      	ldr	r3, [pc, #348]	; (8008ec4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d6a:	f023 0207 	bic.w	r2, r3, #7
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d74:	4953      	ldr	r1, [pc, #332]	; (8008ec4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008d76:	4313      	orrs	r3, r2
 8008d78:	658b      	str	r3, [r1, #88]	; 0x58
 8008d7a:	e001      	b.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d7c:	7dfb      	ldrb	r3, [r7, #23]
 8008d7e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f003 0320 	and.w	r3, r3, #32
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d04b      	beq.n	8008e24 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008d96:	d02e      	beq.n	8008df6 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8008d98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008d9c:	d828      	bhi.n	8008df0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8008d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008da2:	d02a      	beq.n	8008dfa <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8008da4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008da8:	d822      	bhi.n	8008df0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8008daa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008dae:	d026      	beq.n	8008dfe <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8008db0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008db4:	d81c      	bhi.n	8008df0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8008db6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008dba:	d010      	beq.n	8008dde <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8008dbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008dc0:	d816      	bhi.n	8008df0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d01d      	beq.n	8008e02 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8008dc6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008dca:	d111      	bne.n	8008df0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	3304      	adds	r3, #4
 8008dd0:	2100      	movs	r1, #0
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f000 fd28 	bl	8009828 <RCCEx_PLL2_Config>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008ddc:	e012      	b.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	3324      	adds	r3, #36	; 0x24
 8008de2:	2102      	movs	r1, #2
 8008de4:	4618      	mov	r0, r3
 8008de6:	f000 fdd1 	bl	800998c <RCCEx_PLL3_Config>
 8008dea:	4603      	mov	r3, r0
 8008dec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008dee:	e009      	b.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008df0:	2301      	movs	r3, #1
 8008df2:	75fb      	strb	r3, [r7, #23]
      break;
 8008df4:	e006      	b.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8008df6:	bf00      	nop
 8008df8:	e004      	b.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8008dfa:	bf00      	nop
 8008dfc:	e002      	b.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8008dfe:	bf00      	nop
 8008e00:	e000      	b.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8008e02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e04:	7dfb      	ldrb	r3, [r7, #23]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d10a      	bne.n	8008e20 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008e0a:	4b2e      	ldr	r3, [pc, #184]	; (8008ec4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e0e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e18:	492a      	ldr	r1, [pc, #168]	; (8008ec4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008e1a:	4313      	orrs	r3, r2
 8008e1c:	654b      	str	r3, [r1, #84]	; 0x54
 8008e1e:	e001      	b.n	8008e24 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e20:	7dfb      	ldrb	r3, [r7, #23]
 8008e22:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d04d      	beq.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008e36:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008e3a:	d02e      	beq.n	8008e9a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8008e3c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008e40:	d828      	bhi.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8008e42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e46:	d02a      	beq.n	8008e9e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8008e48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e4c:	d822      	bhi.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8008e4e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008e52:	d026      	beq.n	8008ea2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8008e54:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008e58:	d81c      	bhi.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8008e5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e5e:	d010      	beq.n	8008e82 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8008e60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e64:	d816      	bhi.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d01d      	beq.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8008e6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e6e:	d111      	bne.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	3304      	adds	r3, #4
 8008e74:	2100      	movs	r1, #0
 8008e76:	4618      	mov	r0, r3
 8008e78:	f000 fcd6 	bl	8009828 <RCCEx_PLL2_Config>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008e80:	e012      	b.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	3324      	adds	r3, #36	; 0x24
 8008e86:	2102      	movs	r1, #2
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f000 fd7f 	bl	800998c <RCCEx_PLL3_Config>
 8008e8e:	4603      	mov	r3, r0
 8008e90:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008e92:	e009      	b.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008e94:	2301      	movs	r3, #1
 8008e96:	75fb      	strb	r3, [r7, #23]
      break;
 8008e98:	e006      	b.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8008e9a:	bf00      	nop
 8008e9c:	e004      	b.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8008e9e:	bf00      	nop
 8008ea0:	e002      	b.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8008ea2:	bf00      	nop
 8008ea4:	e000      	b.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8008ea6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ea8:	7dfb      	ldrb	r3, [r7, #23]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d10c      	bne.n	8008ec8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008eae:	4b05      	ldr	r3, [pc, #20]	; (8008ec4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008eb2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008ebc:	4901      	ldr	r1, [pc, #4]	; (8008ec4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008ebe:	4313      	orrs	r3, r2
 8008ec0:	658b      	str	r3, [r1, #88]	; 0x58
 8008ec2:	e003      	b.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8008ec4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ec8:	7dfb      	ldrb	r3, [r7, #23]
 8008eca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d04b      	beq.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008ede:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008ee2:	d02e      	beq.n	8008f42 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8008ee4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008ee8:	d828      	bhi.n	8008f3c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8008eea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008eee:	d02a      	beq.n	8008f46 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8008ef0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ef4:	d822      	bhi.n	8008f3c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8008ef6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008efa:	d026      	beq.n	8008f4a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8008efc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008f00:	d81c      	bhi.n	8008f3c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8008f02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f06:	d010      	beq.n	8008f2a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8008f08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f0c:	d816      	bhi.n	8008f3c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d01d      	beq.n	8008f4e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8008f12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f16:	d111      	bne.n	8008f3c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	3304      	adds	r3, #4
 8008f1c:	2100      	movs	r1, #0
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f000 fc82 	bl	8009828 <RCCEx_PLL2_Config>
 8008f24:	4603      	mov	r3, r0
 8008f26:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008f28:	e012      	b.n	8008f50 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	3324      	adds	r3, #36	; 0x24
 8008f2e:	2102      	movs	r1, #2
 8008f30:	4618      	mov	r0, r3
 8008f32:	f000 fd2b 	bl	800998c <RCCEx_PLL3_Config>
 8008f36:	4603      	mov	r3, r0
 8008f38:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008f3a:	e009      	b.n	8008f50 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	75fb      	strb	r3, [r7, #23]
      break;
 8008f40:	e006      	b.n	8008f50 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8008f42:	bf00      	nop
 8008f44:	e004      	b.n	8008f50 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8008f46:	bf00      	nop
 8008f48:	e002      	b.n	8008f50 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8008f4a:	bf00      	nop
 8008f4c:	e000      	b.n	8008f50 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8008f4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f50:	7dfb      	ldrb	r3, [r7, #23]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d10a      	bne.n	8008f6c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008f56:	4b9d      	ldr	r3, [pc, #628]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008f64:	4999      	ldr	r1, [pc, #612]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008f66:	4313      	orrs	r3, r2
 8008f68:	658b      	str	r3, [r1, #88]	; 0x58
 8008f6a:	e001      	b.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f6c:	7dfb      	ldrb	r3, [r7, #23]
 8008f6e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f003 0308 	and.w	r3, r3, #8
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d01a      	beq.n	8008fb2 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f86:	d10a      	bne.n	8008f9e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	3324      	adds	r3, #36	; 0x24
 8008f8c:	2102      	movs	r1, #2
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f000 fcfc 	bl	800998c <RCCEx_PLL3_Config>
 8008f94:	4603      	mov	r3, r0
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d001      	beq.n	8008f9e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008f9e:	4b8b      	ldr	r3, [pc, #556]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fa2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008fac:	4987      	ldr	r1, [pc, #540]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008fae:	4313      	orrs	r3, r2
 8008fb0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f003 0310 	and.w	r3, r3, #16
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d01a      	beq.n	8008ff4 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008fc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fc8:	d10a      	bne.n	8008fe0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	3324      	adds	r3, #36	; 0x24
 8008fce:	2102      	movs	r1, #2
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f000 fcdb 	bl	800998c <RCCEx_PLL3_Config>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d001      	beq.n	8008fe0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8008fdc:	2301      	movs	r3, #1
 8008fde:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008fe0:	4b7a      	ldr	r3, [pc, #488]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fe4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008fee:	4977      	ldr	r1, [pc, #476]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008ff0:	4313      	orrs	r3, r2
 8008ff2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d034      	beq.n	800906a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009006:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800900a:	d01d      	beq.n	8009048 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800900c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009010:	d817      	bhi.n	8009042 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8009012:	2b00      	cmp	r3, #0
 8009014:	d003      	beq.n	800901e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8009016:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800901a:	d009      	beq.n	8009030 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800901c:	e011      	b.n	8009042 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	3304      	adds	r3, #4
 8009022:	2100      	movs	r1, #0
 8009024:	4618      	mov	r0, r3
 8009026:	f000 fbff 	bl	8009828 <RCCEx_PLL2_Config>
 800902a:	4603      	mov	r3, r0
 800902c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800902e:	e00c      	b.n	800904a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	3324      	adds	r3, #36	; 0x24
 8009034:	2102      	movs	r1, #2
 8009036:	4618      	mov	r0, r3
 8009038:	f000 fca8 	bl	800998c <RCCEx_PLL3_Config>
 800903c:	4603      	mov	r3, r0
 800903e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009040:	e003      	b.n	800904a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009042:	2301      	movs	r3, #1
 8009044:	75fb      	strb	r3, [r7, #23]
      break;
 8009046:	e000      	b.n	800904a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8009048:	bf00      	nop
    }

    if(ret == HAL_OK)
 800904a:	7dfb      	ldrb	r3, [r7, #23]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d10a      	bne.n	8009066 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009050:	4b5e      	ldr	r3, [pc, #376]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009054:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800905e:	495b      	ldr	r1, [pc, #364]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009060:	4313      	orrs	r3, r2
 8009062:	658b      	str	r3, [r1, #88]	; 0x58
 8009064:	e001      	b.n	800906a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009066:	7dfb      	ldrb	r3, [r7, #23]
 8009068:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009072:	2b00      	cmp	r3, #0
 8009074:	d033      	beq.n	80090de <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800907c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009080:	d01c      	beq.n	80090bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8009082:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009086:	d816      	bhi.n	80090b6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8009088:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800908c:	d003      	beq.n	8009096 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800908e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009092:	d007      	beq.n	80090a4 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8009094:	e00f      	b.n	80090b6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009096:	4b4d      	ldr	r3, [pc, #308]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800909a:	4a4c      	ldr	r2, [pc, #304]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800909c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80090a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80090a2:	e00c      	b.n	80090be <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	3324      	adds	r3, #36	; 0x24
 80090a8:	2101      	movs	r1, #1
 80090aa:	4618      	mov	r0, r3
 80090ac:	f000 fc6e 	bl	800998c <RCCEx_PLL3_Config>
 80090b0:	4603      	mov	r3, r0
 80090b2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80090b4:	e003      	b.n	80090be <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80090b6:	2301      	movs	r3, #1
 80090b8:	75fb      	strb	r3, [r7, #23]
      break;
 80090ba:	e000      	b.n	80090be <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80090bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80090be:	7dfb      	ldrb	r3, [r7, #23]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d10a      	bne.n	80090da <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80090c4:	4b41      	ldr	r3, [pc, #260]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80090c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090d2:	493e      	ldr	r1, [pc, #248]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80090d4:	4313      	orrs	r3, r2
 80090d6:	654b      	str	r3, [r1, #84]	; 0x54
 80090d8:	e001      	b.n	80090de <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090da:	7dfb      	ldrb	r3, [r7, #23]
 80090dc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d029      	beq.n	800913e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d003      	beq.n	80090fa <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80090f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090f6:	d007      	beq.n	8009108 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80090f8:	e00f      	b.n	800911a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090fa:	4b34      	ldr	r3, [pc, #208]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80090fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090fe:	4a33      	ldr	r2, [pc, #204]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009100:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009104:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009106:	e00b      	b.n	8009120 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	3304      	adds	r3, #4
 800910c:	2102      	movs	r1, #2
 800910e:	4618      	mov	r0, r3
 8009110:	f000 fb8a 	bl	8009828 <RCCEx_PLL2_Config>
 8009114:	4603      	mov	r3, r0
 8009116:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009118:	e002      	b.n	8009120 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800911a:	2301      	movs	r3, #1
 800911c:	75fb      	strb	r3, [r7, #23]
      break;
 800911e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009120:	7dfb      	ldrb	r3, [r7, #23]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d109      	bne.n	800913a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009126:	4b29      	ldr	r3, [pc, #164]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800912a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009132:	4926      	ldr	r1, [pc, #152]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009134:	4313      	orrs	r3, r2
 8009136:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009138:	e001      	b.n	800913e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800913a:	7dfb      	ldrb	r3, [r7, #23]
 800913c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009146:	2b00      	cmp	r3, #0
 8009148:	d00a      	beq.n	8009160 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	3324      	adds	r3, #36	; 0x24
 800914e:	2102      	movs	r1, #2
 8009150:	4618      	mov	r0, r3
 8009152:	f000 fc1b 	bl	800998c <RCCEx_PLL3_Config>
 8009156:	4603      	mov	r3, r0
 8009158:	2b00      	cmp	r3, #0
 800915a:	d001      	beq.n	8009160 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800915c:	2301      	movs	r3, #1
 800915e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009168:	2b00      	cmp	r3, #0
 800916a:	d033      	beq.n	80091d4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009170:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009174:	d017      	beq.n	80091a6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8009176:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800917a:	d811      	bhi.n	80091a0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800917c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009180:	d013      	beq.n	80091aa <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8009182:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009186:	d80b      	bhi.n	80091a0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8009188:	2b00      	cmp	r3, #0
 800918a:	d010      	beq.n	80091ae <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800918c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009190:	d106      	bne.n	80091a0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009192:	4b0e      	ldr	r3, [pc, #56]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009196:	4a0d      	ldr	r2, [pc, #52]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009198:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800919c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800919e:	e007      	b.n	80091b0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80091a0:	2301      	movs	r3, #1
 80091a2:	75fb      	strb	r3, [r7, #23]
      break;
 80091a4:	e004      	b.n	80091b0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80091a6:	bf00      	nop
 80091a8:	e002      	b.n	80091b0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80091aa:	bf00      	nop
 80091ac:	e000      	b.n	80091b0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80091ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80091b0:	7dfb      	ldrb	r3, [r7, #23]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d10c      	bne.n	80091d0 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80091b6:	4b05      	ldr	r3, [pc, #20]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80091b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091ba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80091c2:	4902      	ldr	r1, [pc, #8]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80091c4:	4313      	orrs	r3, r2
 80091c6:	654b      	str	r3, [r1, #84]	; 0x54
 80091c8:	e004      	b.n	80091d4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80091ca:	bf00      	nop
 80091cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091d0:	7dfb      	ldrb	r3, [r7, #23]
 80091d2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d008      	beq.n	80091f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80091e0:	4b31      	ldr	r3, [pc, #196]	; (80092a8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80091e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091e4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091ec:	492e      	ldr	r1, [pc, #184]	; (80092a8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80091ee:	4313      	orrs	r3, r2
 80091f0:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d009      	beq.n	8009212 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80091fe:	4b2a      	ldr	r3, [pc, #168]	; (80092a8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009200:	691b      	ldr	r3, [r3, #16]
 8009202:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800920c:	4926      	ldr	r1, [pc, #152]	; (80092a8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800920e:	4313      	orrs	r3, r2
 8009210:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800921a:	2b00      	cmp	r3, #0
 800921c:	d008      	beq.n	8009230 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800921e:	4b22      	ldr	r3, [pc, #136]	; (80092a8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009220:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009222:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800922a:	491f      	ldr	r1, [pc, #124]	; (80092a8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800922c:	4313      	orrs	r3, r2
 800922e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009238:	2b00      	cmp	r3, #0
 800923a:	d00d      	beq.n	8009258 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800923c:	4b1a      	ldr	r3, [pc, #104]	; (80092a8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800923e:	691b      	ldr	r3, [r3, #16]
 8009240:	4a19      	ldr	r2, [pc, #100]	; (80092a8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009242:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009246:	6113      	str	r3, [r2, #16]
 8009248:	4b17      	ldr	r3, [pc, #92]	; (80092a8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800924a:	691a      	ldr	r2, [r3, #16]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009252:	4915      	ldr	r1, [pc, #84]	; (80092a8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009254:	4313      	orrs	r3, r2
 8009256:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	2b00      	cmp	r3, #0
 800925e:	da08      	bge.n	8009272 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009260:	4b11      	ldr	r3, [pc, #68]	; (80092a8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009262:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009264:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800926c:	490e      	ldr	r1, [pc, #56]	; (80092a8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800926e:	4313      	orrs	r3, r2
 8009270:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800927a:	2b00      	cmp	r3, #0
 800927c:	d009      	beq.n	8009292 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800927e:	4b0a      	ldr	r3, [pc, #40]	; (80092a8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009282:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800928c:	4906      	ldr	r1, [pc, #24]	; (80092a8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800928e:	4313      	orrs	r3, r2
 8009290:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8009292:	7dbb      	ldrb	r3, [r7, #22]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d101      	bne.n	800929c <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8009298:	2300      	movs	r3, #0
 800929a:	e000      	b.n	800929e <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800929c:	2301      	movs	r3, #1
}
 800929e:	4618      	mov	r0, r3
 80092a0:	3718      	adds	r7, #24
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}
 80092a6:	bf00      	nop
 80092a8:	58024400 	.word	0x58024400

080092ac <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80092b0:	f7ff f818 	bl	80082e4 <HAL_RCC_GetHCLKFreq>
 80092b4:	4602      	mov	r2, r0
 80092b6:	4b06      	ldr	r3, [pc, #24]	; (80092d0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80092b8:	6a1b      	ldr	r3, [r3, #32]
 80092ba:	091b      	lsrs	r3, r3, #4
 80092bc:	f003 0307 	and.w	r3, r3, #7
 80092c0:	4904      	ldr	r1, [pc, #16]	; (80092d4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80092c2:	5ccb      	ldrb	r3, [r1, r3]
 80092c4:	f003 031f 	and.w	r3, r3, #31
 80092c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	bd80      	pop	{r7, pc}
 80092d0:	58024400 	.word	0x58024400
 80092d4:	080134b8 	.word	0x080134b8

080092d8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80092d8:	b480      	push	{r7}
 80092da:	b089      	sub	sp, #36	; 0x24
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80092e0:	4ba1      	ldr	r3, [pc, #644]	; (8009568 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092e4:	f003 0303 	and.w	r3, r3, #3
 80092e8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80092ea:	4b9f      	ldr	r3, [pc, #636]	; (8009568 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092ee:	0b1b      	lsrs	r3, r3, #12
 80092f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80092f4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80092f6:	4b9c      	ldr	r3, [pc, #624]	; (8009568 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092fa:	091b      	lsrs	r3, r3, #4
 80092fc:	f003 0301 	and.w	r3, r3, #1
 8009300:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009302:	4b99      	ldr	r3, [pc, #612]	; (8009568 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009306:	08db      	lsrs	r3, r3, #3
 8009308:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800930c:	693a      	ldr	r2, [r7, #16]
 800930e:	fb02 f303 	mul.w	r3, r2, r3
 8009312:	ee07 3a90 	vmov	s15, r3
 8009316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800931a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	2b00      	cmp	r3, #0
 8009322:	f000 8111 	beq.w	8009548 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009326:	69bb      	ldr	r3, [r7, #24]
 8009328:	2b02      	cmp	r3, #2
 800932a:	f000 8083 	beq.w	8009434 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800932e:	69bb      	ldr	r3, [r7, #24]
 8009330:	2b02      	cmp	r3, #2
 8009332:	f200 80a1 	bhi.w	8009478 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009336:	69bb      	ldr	r3, [r7, #24]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d003      	beq.n	8009344 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800933c:	69bb      	ldr	r3, [r7, #24]
 800933e:	2b01      	cmp	r3, #1
 8009340:	d056      	beq.n	80093f0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009342:	e099      	b.n	8009478 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009344:	4b88      	ldr	r3, [pc, #544]	; (8009568 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f003 0320 	and.w	r3, r3, #32
 800934c:	2b00      	cmp	r3, #0
 800934e:	d02d      	beq.n	80093ac <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009350:	4b85      	ldr	r3, [pc, #532]	; (8009568 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	08db      	lsrs	r3, r3, #3
 8009356:	f003 0303 	and.w	r3, r3, #3
 800935a:	4a84      	ldr	r2, [pc, #528]	; (800956c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800935c:	fa22 f303 	lsr.w	r3, r2, r3
 8009360:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	ee07 3a90 	vmov	s15, r3
 8009368:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	ee07 3a90 	vmov	s15, r3
 8009372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009376:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800937a:	4b7b      	ldr	r3, [pc, #492]	; (8009568 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800937c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800937e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009382:	ee07 3a90 	vmov	s15, r3
 8009386:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800938a:	ed97 6a03 	vldr	s12, [r7, #12]
 800938e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009570 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009392:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009396:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800939a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800939e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093a6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80093aa:	e087      	b.n	80094bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	ee07 3a90 	vmov	s15, r3
 80093b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093b6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009574 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80093ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093be:	4b6a      	ldr	r3, [pc, #424]	; (8009568 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093c6:	ee07 3a90 	vmov	s15, r3
 80093ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80093d2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009570 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80093d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80093ee:	e065      	b.n	80094bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80093f0:	697b      	ldr	r3, [r7, #20]
 80093f2:	ee07 3a90 	vmov	s15, r3
 80093f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093fa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009578 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80093fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009402:	4b59      	ldr	r3, [pc, #356]	; (8009568 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009406:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800940a:	ee07 3a90 	vmov	s15, r3
 800940e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009412:	ed97 6a03 	vldr	s12, [r7, #12]
 8009416:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009570 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800941a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800941e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009422:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009426:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800942a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800942e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009432:	e043      	b.n	80094bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009434:	697b      	ldr	r3, [r7, #20]
 8009436:	ee07 3a90 	vmov	s15, r3
 800943a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800943e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800957c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009442:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009446:	4b48      	ldr	r3, [pc, #288]	; (8009568 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800944a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800944e:	ee07 3a90 	vmov	s15, r3
 8009452:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009456:	ed97 6a03 	vldr	s12, [r7, #12]
 800945a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009570 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800945e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009462:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009466:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800946a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800946e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009472:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009476:	e021      	b.n	80094bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009478:	697b      	ldr	r3, [r7, #20]
 800947a:	ee07 3a90 	vmov	s15, r3
 800947e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009482:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009578 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009486:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800948a:	4b37      	ldr	r3, [pc, #220]	; (8009568 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800948c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800948e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009492:	ee07 3a90 	vmov	s15, r3
 8009496:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800949a:	ed97 6a03 	vldr	s12, [r7, #12]
 800949e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009570 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80094a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80094ba:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80094bc:	4b2a      	ldr	r3, [pc, #168]	; (8009568 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80094be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094c0:	0a5b      	lsrs	r3, r3, #9
 80094c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094c6:	ee07 3a90 	vmov	s15, r3
 80094ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80094d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80094d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80094da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094e2:	ee17 2a90 	vmov	r2, s15
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80094ea:	4b1f      	ldr	r3, [pc, #124]	; (8009568 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80094ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094ee:	0c1b      	lsrs	r3, r3, #16
 80094f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094f4:	ee07 3a90 	vmov	s15, r3
 80094f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009500:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009504:	edd7 6a07 	vldr	s13, [r7, #28]
 8009508:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800950c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009510:	ee17 2a90 	vmov	r2, s15
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009518:	4b13      	ldr	r3, [pc, #76]	; (8009568 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800951a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800951c:	0e1b      	lsrs	r3, r3, #24
 800951e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009522:	ee07 3a90 	vmov	s15, r3
 8009526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800952a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800952e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009532:	edd7 6a07 	vldr	s13, [r7, #28]
 8009536:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800953a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800953e:	ee17 2a90 	vmov	r2, s15
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009546:	e008      	b.n	800955a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2200      	movs	r2, #0
 800954c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2200      	movs	r2, #0
 8009552:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2200      	movs	r2, #0
 8009558:	609a      	str	r2, [r3, #8]
}
 800955a:	bf00      	nop
 800955c:	3724      	adds	r7, #36	; 0x24
 800955e:	46bd      	mov	sp, r7
 8009560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009564:	4770      	bx	lr
 8009566:	bf00      	nop
 8009568:	58024400 	.word	0x58024400
 800956c:	03d09000 	.word	0x03d09000
 8009570:	46000000 	.word	0x46000000
 8009574:	4c742400 	.word	0x4c742400
 8009578:	4a742400 	.word	0x4a742400
 800957c:	4b742400 	.word	0x4b742400

08009580 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009580:	b480      	push	{r7}
 8009582:	b089      	sub	sp, #36	; 0x24
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009588:	4ba1      	ldr	r3, [pc, #644]	; (8009810 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800958a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800958c:	f003 0303 	and.w	r3, r3, #3
 8009590:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009592:	4b9f      	ldr	r3, [pc, #636]	; (8009810 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009596:	0d1b      	lsrs	r3, r3, #20
 8009598:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800959c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800959e:	4b9c      	ldr	r3, [pc, #624]	; (8009810 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095a2:	0a1b      	lsrs	r3, r3, #8
 80095a4:	f003 0301 	and.w	r3, r3, #1
 80095a8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80095aa:	4b99      	ldr	r3, [pc, #612]	; (8009810 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095ae:	08db      	lsrs	r3, r3, #3
 80095b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80095b4:	693a      	ldr	r2, [r7, #16]
 80095b6:	fb02 f303 	mul.w	r3, r2, r3
 80095ba:	ee07 3a90 	vmov	s15, r3
 80095be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095c2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	f000 8111 	beq.w	80097f0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80095ce:	69bb      	ldr	r3, [r7, #24]
 80095d0:	2b02      	cmp	r3, #2
 80095d2:	f000 8083 	beq.w	80096dc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80095d6:	69bb      	ldr	r3, [r7, #24]
 80095d8:	2b02      	cmp	r3, #2
 80095da:	f200 80a1 	bhi.w	8009720 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80095de:	69bb      	ldr	r3, [r7, #24]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d003      	beq.n	80095ec <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80095e4:	69bb      	ldr	r3, [r7, #24]
 80095e6:	2b01      	cmp	r3, #1
 80095e8:	d056      	beq.n	8009698 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80095ea:	e099      	b.n	8009720 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80095ec:	4b88      	ldr	r3, [pc, #544]	; (8009810 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f003 0320 	and.w	r3, r3, #32
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d02d      	beq.n	8009654 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80095f8:	4b85      	ldr	r3, [pc, #532]	; (8009810 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	08db      	lsrs	r3, r3, #3
 80095fe:	f003 0303 	and.w	r3, r3, #3
 8009602:	4a84      	ldr	r2, [pc, #528]	; (8009814 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009604:	fa22 f303 	lsr.w	r3, r2, r3
 8009608:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800960a:	68bb      	ldr	r3, [r7, #8]
 800960c:	ee07 3a90 	vmov	s15, r3
 8009610:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009614:	697b      	ldr	r3, [r7, #20]
 8009616:	ee07 3a90 	vmov	s15, r3
 800961a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800961e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009622:	4b7b      	ldr	r3, [pc, #492]	; (8009810 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009626:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800962a:	ee07 3a90 	vmov	s15, r3
 800962e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009632:	ed97 6a03 	vldr	s12, [r7, #12]
 8009636:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009818 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800963a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800963e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009642:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009646:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800964a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800964e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009652:	e087      	b.n	8009764 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009654:	697b      	ldr	r3, [r7, #20]
 8009656:	ee07 3a90 	vmov	s15, r3
 800965a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800965e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800981c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009662:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009666:	4b6a      	ldr	r3, [pc, #424]	; (8009810 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800966a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800966e:	ee07 3a90 	vmov	s15, r3
 8009672:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009676:	ed97 6a03 	vldr	s12, [r7, #12]
 800967a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009818 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800967e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009682:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009686:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800968a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800968e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009692:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009696:	e065      	b.n	8009764 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009698:	697b      	ldr	r3, [r7, #20]
 800969a:	ee07 3a90 	vmov	s15, r3
 800969e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096a2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009820 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80096a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096aa:	4b59      	ldr	r3, [pc, #356]	; (8009810 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096b2:	ee07 3a90 	vmov	s15, r3
 80096b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80096be:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009818 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80096c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80096da:	e043      	b.n	8009764 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80096dc:	697b      	ldr	r3, [r7, #20]
 80096de:	ee07 3a90 	vmov	s15, r3
 80096e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096e6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009824 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80096ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096ee:	4b48      	ldr	r3, [pc, #288]	; (8009810 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096f6:	ee07 3a90 	vmov	s15, r3
 80096fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8009702:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009818 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009706:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800970a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800970e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009712:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009716:	ee67 7a27 	vmul.f32	s15, s14, s15
 800971a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800971e:	e021      	b.n	8009764 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009720:	697b      	ldr	r3, [r7, #20]
 8009722:	ee07 3a90 	vmov	s15, r3
 8009726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800972a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009820 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800972e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009732:	4b37      	ldr	r3, [pc, #220]	; (8009810 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800973a:	ee07 3a90 	vmov	s15, r3
 800973e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009742:	ed97 6a03 	vldr	s12, [r7, #12]
 8009746:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009818 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800974a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800974e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009752:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009756:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800975a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800975e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009762:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009764:	4b2a      	ldr	r3, [pc, #168]	; (8009810 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009768:	0a5b      	lsrs	r3, r3, #9
 800976a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800976e:	ee07 3a90 	vmov	s15, r3
 8009772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009776:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800977a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800977e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009782:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009786:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800978a:	ee17 2a90 	vmov	r2, s15
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009792:	4b1f      	ldr	r3, [pc, #124]	; (8009810 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009796:	0c1b      	lsrs	r3, r3, #16
 8009798:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800979c:	ee07 3a90 	vmov	s15, r3
 80097a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80097a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80097ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80097b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097b8:	ee17 2a90 	vmov	r2, s15
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80097c0:	4b13      	ldr	r3, [pc, #76]	; (8009810 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80097c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097c4:	0e1b      	lsrs	r3, r3, #24
 80097c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097ca:	ee07 3a90 	vmov	s15, r3
 80097ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80097d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80097da:	edd7 6a07 	vldr	s13, [r7, #28]
 80097de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097e6:	ee17 2a90 	vmov	r2, s15
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80097ee:	e008      	b.n	8009802 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2200      	movs	r2, #0
 80097f4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2200      	movs	r2, #0
 80097fa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2200      	movs	r2, #0
 8009800:	609a      	str	r2, [r3, #8]
}
 8009802:	bf00      	nop
 8009804:	3724      	adds	r7, #36	; 0x24
 8009806:	46bd      	mov	sp, r7
 8009808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980c:	4770      	bx	lr
 800980e:	bf00      	nop
 8009810:	58024400 	.word	0x58024400
 8009814:	03d09000 	.word	0x03d09000
 8009818:	46000000 	.word	0x46000000
 800981c:	4c742400 	.word	0x4c742400
 8009820:	4a742400 	.word	0x4a742400
 8009824:	4b742400 	.word	0x4b742400

08009828 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b084      	sub	sp, #16
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
 8009830:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009832:	2300      	movs	r3, #0
 8009834:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009836:	4b53      	ldr	r3, [pc, #332]	; (8009984 <RCCEx_PLL2_Config+0x15c>)
 8009838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800983a:	f003 0303 	and.w	r3, r3, #3
 800983e:	2b03      	cmp	r3, #3
 8009840:	d101      	bne.n	8009846 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009842:	2301      	movs	r3, #1
 8009844:	e099      	b.n	800997a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009846:	4b4f      	ldr	r3, [pc, #316]	; (8009984 <RCCEx_PLL2_Config+0x15c>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	4a4e      	ldr	r2, [pc, #312]	; (8009984 <RCCEx_PLL2_Config+0x15c>)
 800984c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009850:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009852:	f7f8 f9f3 	bl	8001c3c <HAL_GetTick>
 8009856:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009858:	e008      	b.n	800986c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800985a:	f7f8 f9ef 	bl	8001c3c <HAL_GetTick>
 800985e:	4602      	mov	r2, r0
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	1ad3      	subs	r3, r2, r3
 8009864:	2b02      	cmp	r3, #2
 8009866:	d901      	bls.n	800986c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009868:	2303      	movs	r3, #3
 800986a:	e086      	b.n	800997a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800986c:	4b45      	ldr	r3, [pc, #276]	; (8009984 <RCCEx_PLL2_Config+0x15c>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009874:	2b00      	cmp	r3, #0
 8009876:	d1f0      	bne.n	800985a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009878:	4b42      	ldr	r3, [pc, #264]	; (8009984 <RCCEx_PLL2_Config+0x15c>)
 800987a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800987c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	031b      	lsls	r3, r3, #12
 8009886:	493f      	ldr	r1, [pc, #252]	; (8009984 <RCCEx_PLL2_Config+0x15c>)
 8009888:	4313      	orrs	r3, r2
 800988a:	628b      	str	r3, [r1, #40]	; 0x28
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	685b      	ldr	r3, [r3, #4]
 8009890:	3b01      	subs	r3, #1
 8009892:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	689b      	ldr	r3, [r3, #8]
 800989a:	3b01      	subs	r3, #1
 800989c:	025b      	lsls	r3, r3, #9
 800989e:	b29b      	uxth	r3, r3
 80098a0:	431a      	orrs	r2, r3
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	68db      	ldr	r3, [r3, #12]
 80098a6:	3b01      	subs	r3, #1
 80098a8:	041b      	lsls	r3, r3, #16
 80098aa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80098ae:	431a      	orrs	r2, r3
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	691b      	ldr	r3, [r3, #16]
 80098b4:	3b01      	subs	r3, #1
 80098b6:	061b      	lsls	r3, r3, #24
 80098b8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80098bc:	4931      	ldr	r1, [pc, #196]	; (8009984 <RCCEx_PLL2_Config+0x15c>)
 80098be:	4313      	orrs	r3, r2
 80098c0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80098c2:	4b30      	ldr	r3, [pc, #192]	; (8009984 <RCCEx_PLL2_Config+0x15c>)
 80098c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	695b      	ldr	r3, [r3, #20]
 80098ce:	492d      	ldr	r1, [pc, #180]	; (8009984 <RCCEx_PLL2_Config+0x15c>)
 80098d0:	4313      	orrs	r3, r2
 80098d2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80098d4:	4b2b      	ldr	r3, [pc, #172]	; (8009984 <RCCEx_PLL2_Config+0x15c>)
 80098d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098d8:	f023 0220 	bic.w	r2, r3, #32
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	699b      	ldr	r3, [r3, #24]
 80098e0:	4928      	ldr	r1, [pc, #160]	; (8009984 <RCCEx_PLL2_Config+0x15c>)
 80098e2:	4313      	orrs	r3, r2
 80098e4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80098e6:	4b27      	ldr	r3, [pc, #156]	; (8009984 <RCCEx_PLL2_Config+0x15c>)
 80098e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098ea:	4a26      	ldr	r2, [pc, #152]	; (8009984 <RCCEx_PLL2_Config+0x15c>)
 80098ec:	f023 0310 	bic.w	r3, r3, #16
 80098f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80098f2:	4b24      	ldr	r3, [pc, #144]	; (8009984 <RCCEx_PLL2_Config+0x15c>)
 80098f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80098f6:	4b24      	ldr	r3, [pc, #144]	; (8009988 <RCCEx_PLL2_Config+0x160>)
 80098f8:	4013      	ands	r3, r2
 80098fa:	687a      	ldr	r2, [r7, #4]
 80098fc:	69d2      	ldr	r2, [r2, #28]
 80098fe:	00d2      	lsls	r2, r2, #3
 8009900:	4920      	ldr	r1, [pc, #128]	; (8009984 <RCCEx_PLL2_Config+0x15c>)
 8009902:	4313      	orrs	r3, r2
 8009904:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009906:	4b1f      	ldr	r3, [pc, #124]	; (8009984 <RCCEx_PLL2_Config+0x15c>)
 8009908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800990a:	4a1e      	ldr	r2, [pc, #120]	; (8009984 <RCCEx_PLL2_Config+0x15c>)
 800990c:	f043 0310 	orr.w	r3, r3, #16
 8009910:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d106      	bne.n	8009926 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009918:	4b1a      	ldr	r3, [pc, #104]	; (8009984 <RCCEx_PLL2_Config+0x15c>)
 800991a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800991c:	4a19      	ldr	r2, [pc, #100]	; (8009984 <RCCEx_PLL2_Config+0x15c>)
 800991e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009922:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009924:	e00f      	b.n	8009946 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	2b01      	cmp	r3, #1
 800992a:	d106      	bne.n	800993a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800992c:	4b15      	ldr	r3, [pc, #84]	; (8009984 <RCCEx_PLL2_Config+0x15c>)
 800992e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009930:	4a14      	ldr	r2, [pc, #80]	; (8009984 <RCCEx_PLL2_Config+0x15c>)
 8009932:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009936:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009938:	e005      	b.n	8009946 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800993a:	4b12      	ldr	r3, [pc, #72]	; (8009984 <RCCEx_PLL2_Config+0x15c>)
 800993c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800993e:	4a11      	ldr	r2, [pc, #68]	; (8009984 <RCCEx_PLL2_Config+0x15c>)
 8009940:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009944:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009946:	4b0f      	ldr	r3, [pc, #60]	; (8009984 <RCCEx_PLL2_Config+0x15c>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	4a0e      	ldr	r2, [pc, #56]	; (8009984 <RCCEx_PLL2_Config+0x15c>)
 800994c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009950:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009952:	f7f8 f973 	bl	8001c3c <HAL_GetTick>
 8009956:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009958:	e008      	b.n	800996c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800995a:	f7f8 f96f 	bl	8001c3c <HAL_GetTick>
 800995e:	4602      	mov	r2, r0
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	1ad3      	subs	r3, r2, r3
 8009964:	2b02      	cmp	r3, #2
 8009966:	d901      	bls.n	800996c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009968:	2303      	movs	r3, #3
 800996a:	e006      	b.n	800997a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800996c:	4b05      	ldr	r3, [pc, #20]	; (8009984 <RCCEx_PLL2_Config+0x15c>)
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009974:	2b00      	cmp	r3, #0
 8009976:	d0f0      	beq.n	800995a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009978:	7bfb      	ldrb	r3, [r7, #15]
}
 800997a:	4618      	mov	r0, r3
 800997c:	3710      	adds	r7, #16
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}
 8009982:	bf00      	nop
 8009984:	58024400 	.word	0x58024400
 8009988:	ffff0007 	.word	0xffff0007

0800998c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b084      	sub	sp, #16
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
 8009994:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009996:	2300      	movs	r3, #0
 8009998:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800999a:	4b53      	ldr	r3, [pc, #332]	; (8009ae8 <RCCEx_PLL3_Config+0x15c>)
 800999c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800999e:	f003 0303 	and.w	r3, r3, #3
 80099a2:	2b03      	cmp	r3, #3
 80099a4:	d101      	bne.n	80099aa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80099a6:	2301      	movs	r3, #1
 80099a8:	e099      	b.n	8009ade <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80099aa:	4b4f      	ldr	r3, [pc, #316]	; (8009ae8 <RCCEx_PLL3_Config+0x15c>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	4a4e      	ldr	r2, [pc, #312]	; (8009ae8 <RCCEx_PLL3_Config+0x15c>)
 80099b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80099b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80099b6:	f7f8 f941 	bl	8001c3c <HAL_GetTick>
 80099ba:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80099bc:	e008      	b.n	80099d0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80099be:	f7f8 f93d 	bl	8001c3c <HAL_GetTick>
 80099c2:	4602      	mov	r2, r0
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	1ad3      	subs	r3, r2, r3
 80099c8:	2b02      	cmp	r3, #2
 80099ca:	d901      	bls.n	80099d0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80099cc:	2303      	movs	r3, #3
 80099ce:	e086      	b.n	8009ade <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80099d0:	4b45      	ldr	r3, [pc, #276]	; (8009ae8 <RCCEx_PLL3_Config+0x15c>)
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d1f0      	bne.n	80099be <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80099dc:	4b42      	ldr	r3, [pc, #264]	; (8009ae8 <RCCEx_PLL3_Config+0x15c>)
 80099de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099e0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	051b      	lsls	r3, r3, #20
 80099ea:	493f      	ldr	r1, [pc, #252]	; (8009ae8 <RCCEx_PLL3_Config+0x15c>)
 80099ec:	4313      	orrs	r3, r2
 80099ee:	628b      	str	r3, [r1, #40]	; 0x28
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	685b      	ldr	r3, [r3, #4]
 80099f4:	3b01      	subs	r3, #1
 80099f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	689b      	ldr	r3, [r3, #8]
 80099fe:	3b01      	subs	r3, #1
 8009a00:	025b      	lsls	r3, r3, #9
 8009a02:	b29b      	uxth	r3, r3
 8009a04:	431a      	orrs	r2, r3
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	68db      	ldr	r3, [r3, #12]
 8009a0a:	3b01      	subs	r3, #1
 8009a0c:	041b      	lsls	r3, r3, #16
 8009a0e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009a12:	431a      	orrs	r2, r3
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	691b      	ldr	r3, [r3, #16]
 8009a18:	3b01      	subs	r3, #1
 8009a1a:	061b      	lsls	r3, r3, #24
 8009a1c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009a20:	4931      	ldr	r1, [pc, #196]	; (8009ae8 <RCCEx_PLL3_Config+0x15c>)
 8009a22:	4313      	orrs	r3, r2
 8009a24:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009a26:	4b30      	ldr	r3, [pc, #192]	; (8009ae8 <RCCEx_PLL3_Config+0x15c>)
 8009a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a2a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	695b      	ldr	r3, [r3, #20]
 8009a32:	492d      	ldr	r1, [pc, #180]	; (8009ae8 <RCCEx_PLL3_Config+0x15c>)
 8009a34:	4313      	orrs	r3, r2
 8009a36:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009a38:	4b2b      	ldr	r3, [pc, #172]	; (8009ae8 <RCCEx_PLL3_Config+0x15c>)
 8009a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a3c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	699b      	ldr	r3, [r3, #24]
 8009a44:	4928      	ldr	r1, [pc, #160]	; (8009ae8 <RCCEx_PLL3_Config+0x15c>)
 8009a46:	4313      	orrs	r3, r2
 8009a48:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009a4a:	4b27      	ldr	r3, [pc, #156]	; (8009ae8 <RCCEx_PLL3_Config+0x15c>)
 8009a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a4e:	4a26      	ldr	r2, [pc, #152]	; (8009ae8 <RCCEx_PLL3_Config+0x15c>)
 8009a50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a54:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009a56:	4b24      	ldr	r3, [pc, #144]	; (8009ae8 <RCCEx_PLL3_Config+0x15c>)
 8009a58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009a5a:	4b24      	ldr	r3, [pc, #144]	; (8009aec <RCCEx_PLL3_Config+0x160>)
 8009a5c:	4013      	ands	r3, r2
 8009a5e:	687a      	ldr	r2, [r7, #4]
 8009a60:	69d2      	ldr	r2, [r2, #28]
 8009a62:	00d2      	lsls	r2, r2, #3
 8009a64:	4920      	ldr	r1, [pc, #128]	; (8009ae8 <RCCEx_PLL3_Config+0x15c>)
 8009a66:	4313      	orrs	r3, r2
 8009a68:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009a6a:	4b1f      	ldr	r3, [pc, #124]	; (8009ae8 <RCCEx_PLL3_Config+0x15c>)
 8009a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a6e:	4a1e      	ldr	r2, [pc, #120]	; (8009ae8 <RCCEx_PLL3_Config+0x15c>)
 8009a70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a74:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d106      	bne.n	8009a8a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009a7c:	4b1a      	ldr	r3, [pc, #104]	; (8009ae8 <RCCEx_PLL3_Config+0x15c>)
 8009a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a80:	4a19      	ldr	r2, [pc, #100]	; (8009ae8 <RCCEx_PLL3_Config+0x15c>)
 8009a82:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009a86:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009a88:	e00f      	b.n	8009aaa <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	2b01      	cmp	r3, #1
 8009a8e:	d106      	bne.n	8009a9e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009a90:	4b15      	ldr	r3, [pc, #84]	; (8009ae8 <RCCEx_PLL3_Config+0x15c>)
 8009a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a94:	4a14      	ldr	r2, [pc, #80]	; (8009ae8 <RCCEx_PLL3_Config+0x15c>)
 8009a96:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009a9a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009a9c:	e005      	b.n	8009aaa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009a9e:	4b12      	ldr	r3, [pc, #72]	; (8009ae8 <RCCEx_PLL3_Config+0x15c>)
 8009aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aa2:	4a11      	ldr	r2, [pc, #68]	; (8009ae8 <RCCEx_PLL3_Config+0x15c>)
 8009aa4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009aa8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009aaa:	4b0f      	ldr	r3, [pc, #60]	; (8009ae8 <RCCEx_PLL3_Config+0x15c>)
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	4a0e      	ldr	r2, [pc, #56]	; (8009ae8 <RCCEx_PLL3_Config+0x15c>)
 8009ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ab4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ab6:	f7f8 f8c1 	bl	8001c3c <HAL_GetTick>
 8009aba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009abc:	e008      	b.n	8009ad0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009abe:	f7f8 f8bd 	bl	8001c3c <HAL_GetTick>
 8009ac2:	4602      	mov	r2, r0
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	1ad3      	subs	r3, r2, r3
 8009ac8:	2b02      	cmp	r3, #2
 8009aca:	d901      	bls.n	8009ad0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009acc:	2303      	movs	r3, #3
 8009ace:	e006      	b.n	8009ade <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009ad0:	4b05      	ldr	r3, [pc, #20]	; (8009ae8 <RCCEx_PLL3_Config+0x15c>)
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d0f0      	beq.n	8009abe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ade:	4618      	mov	r0, r3
 8009ae0:	3710      	adds	r7, #16
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bd80      	pop	{r7, pc}
 8009ae6:	bf00      	nop
 8009ae8:	58024400 	.word	0x58024400
 8009aec:	ffff0007 	.word	0xffff0007

08009af0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b084      	sub	sp, #16
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009afc:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d008      	beq.n	8009b1e <HAL_SD_IRQHandler+0x2e>
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	f003 0308 	and.w	r3, r3, #8
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d003      	beq.n	8009b1e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	f000 f9ac 	bl	8009e74 <SD_Read_IT>
 8009b1c:	e19a      	b.n	8009e54 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	f000 80ac 	beq.w	8009c86 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009b36:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681a      	ldr	r2, [r3, #0]
 8009b42:	4b59      	ldr	r3, [pc, #356]	; (8009ca8 <HAL_SD_IRQHandler+0x1b8>)
 8009b44:	400b      	ands	r3, r1
 8009b46:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8009b56:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	68da      	ldr	r2, [r3, #12]
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b66:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	f003 0308 	and.w	r3, r3, #8
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d038      	beq.n	8009be4 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	f003 0302 	and.w	r3, r3, #2
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d104      	bne.n	8009b86 <HAL_SD_IRQHandler+0x96>
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	f003 0320 	and.w	r3, r3, #32
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d011      	beq.n	8009baa <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f003 f942 	bl	800ce14 <SDMMC_CmdStopTransfer>
 8009b90:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8009b92:	68bb      	ldr	r3, [r7, #8]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d008      	beq.n	8009baa <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	431a      	orrs	r2, r3
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f000 f95b 	bl	8009e60 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	4a3f      	ldr	r2, [pc, #252]	; (8009cac <HAL_SD_IRQHandler+0x1bc>)
 8009bb0:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2201      	movs	r2, #1
 8009bb6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	f003 0301 	and.w	r3, r3, #1
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d104      	bne.n	8009bd4 <HAL_SD_IRQHandler+0xe4>
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	f003 0302 	and.w	r3, r3, #2
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d003      	beq.n	8009bdc <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f004 fdc7 	bl	800e768 <HAL_SD_RxCpltCallback>
 8009bda:	e13b      	b.n	8009e54 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f004 fdb9 	bl	800e754 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009be2:	e137      	b.n	8009e54 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	f000 8132 	beq.w	8009e54 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	2200      	movs	r2, #0
 8009c06:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	f003 0302 	and.w	r3, r3, #2
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d104      	bne.n	8009c1c <HAL_SD_IRQHandler+0x12c>
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	f003 0320 	and.w	r3, r3, #32
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d011      	beq.n	8009c40 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	4618      	mov	r0, r3
 8009c22:	f003 f8f7 	bl	800ce14 <SDMMC_CmdStopTransfer>
 8009c26:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d008      	beq.n	8009c40 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	431a      	orrs	r2, r3
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	f000 f910 	bl	8009e60 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2201      	movs	r2, #1
 8009c44:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	f003 0310 	and.w	r3, r3, #16
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d104      	bne.n	8009c62 <HAL_SD_IRQHandler+0x172>
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	f003 0320 	and.w	r3, r3, #32
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d002      	beq.n	8009c68 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f004 fd76 	bl	800e754 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	f003 0301 	and.w	r3, r3, #1
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d105      	bne.n	8009c7e <HAL_SD_IRQHandler+0x18e>
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	f003 0302 	and.w	r3, r3, #2
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	f000 80eb 	beq.w	8009e54 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f004 fd72 	bl	800e768 <HAL_SD_RxCpltCallback>
}
 8009c84:	e0e6      	b.n	8009e54 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d00d      	beq.n	8009cb0 <HAL_SD_IRQHandler+0x1c0>
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	f003 0308 	and.w	r3, r3, #8
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d008      	beq.n	8009cb0 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f000 f92e 	bl	8009f00 <SD_Write_IT>
 8009ca4:	e0d6      	b.n	8009e54 <HAL_SD_IRQHandler+0x364>
 8009ca6:	bf00      	nop
 8009ca8:	ffff3ec5 	.word	0xffff3ec5
 8009cac:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cb6:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	f000 809d 	beq.w	8009dfa <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cc6:	f003 0302 	and.w	r3, r3, #2
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d005      	beq.n	8009cda <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cd2:	f043 0202 	orr.w	r2, r3, #2
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ce0:	f003 0308 	and.w	r3, r3, #8
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d005      	beq.n	8009cf4 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cec:	f043 0208 	orr.w	r2, r3, #8
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cfa:	f003 0320 	and.w	r3, r3, #32
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d005      	beq.n	8009d0e <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d06:	f043 0220 	orr.w	r2, r3, #32
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d14:	f003 0310 	and.w	r3, r3, #16
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d005      	beq.n	8009d28 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d20:	f043 0210 	orr.w	r2, r3, #16
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	4a4b      	ldr	r2, [pc, #300]	; (8009e5c <HAL_SD_IRQHandler+0x36c>)
 8009d2e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8009d3e:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	68da      	ldr	r2, [r3, #12]
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009d4e:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009d5e:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	68da      	ldr	r2, [r3, #12]
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009d6e:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	4618      	mov	r0, r3
 8009d76:	f003 f84d 	bl	800ce14 <SDMMC_CmdStopTransfer>
 8009d7a:	4602      	mov	r2, r0
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d80:	431a      	orrs	r2, r3
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	68da      	ldr	r2, [r3, #12]
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009d94:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009d9e:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	f003 0308 	and.w	r3, r3, #8
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d00a      	beq.n	8009dc0 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2201      	movs	r2, #1
 8009dae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2200      	movs	r2, #0
 8009db6:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f000 f851 	bl	8009e60 <HAL_SD_ErrorCallback>
}
 8009dbe:	e049      	b.n	8009e54 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d044      	beq.n	8009e54 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d040      	beq.n	8009e54 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8009de0:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	2200      	movs	r2, #0
 8009de8:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2201      	movs	r2, #1
 8009dee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f000 f834 	bl	8009e60 <HAL_SD_ErrorCallback>
}
 8009df8:	e02c      	b.n	8009e54 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d025      	beq.n	8009e54 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e10:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e18:	f003 0304 	and.w	r3, r3, #4
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d10c      	bne.n	8009e3a <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	f003 0320 	and.w	r3, r3, #32
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d003      	beq.n	8009e32 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f000 f8d0 	bl	8009fd0 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8009e30:	e010      	b.n	8009e54 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8009e32:	6878      	ldr	r0, [r7, #4]
 8009e34:	f000 f8b8 	bl	8009fa8 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8009e38:	e00c      	b.n	8009e54 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	f003 0320 	and.w	r3, r3, #32
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d003      	beq.n	8009e4c <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	f000 f8b9 	bl	8009fbc <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 8009e4a:	e003      	b.n	8009e54 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f000 f8a1 	bl	8009f94 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8009e52:	e7ff      	b.n	8009e54 <HAL_SD_IRQHandler+0x364>
 8009e54:	bf00      	nop
 8009e56:	3710      	adds	r7, #16
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bd80      	pop	{r7, pc}
 8009e5c:	18000f3a 	.word	0x18000f3a

08009e60 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8009e60:	b480      	push	{r7}
 8009e62:	b083      	sub	sp, #12
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8009e68:	bf00      	nop
 8009e6a:	370c      	adds	r7, #12
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e72:	4770      	bx	lr

08009e74 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b086      	sub	sp, #24
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e80:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e86:	2b1f      	cmp	r3, #31
 8009e88:	d936      	bls.n	8009ef8 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	617b      	str	r3, [r7, #20]
 8009e8e:	e027      	b.n	8009ee0 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	4618      	mov	r0, r3
 8009e96:	f002 ff55 	bl	800cd44 <SDMMC_ReadFIFO>
 8009e9a:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	b2da      	uxtb	r2, r3
 8009ea0:	693b      	ldr	r3, [r7, #16]
 8009ea2:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	3301      	adds	r3, #1
 8009ea8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	0a1b      	lsrs	r3, r3, #8
 8009eae:	b2da      	uxtb	r2, r3
 8009eb0:	693b      	ldr	r3, [r7, #16]
 8009eb2:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009eb4:	693b      	ldr	r3, [r7, #16]
 8009eb6:	3301      	adds	r3, #1
 8009eb8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	0c1b      	lsrs	r3, r3, #16
 8009ebe:	b2da      	uxtb	r2, r3
 8009ec0:	693b      	ldr	r3, [r7, #16]
 8009ec2:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009ec4:	693b      	ldr	r3, [r7, #16]
 8009ec6:	3301      	adds	r3, #1
 8009ec8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	0e1b      	lsrs	r3, r3, #24
 8009ece:	b2da      	uxtb	r2, r3
 8009ed0:	693b      	ldr	r3, [r7, #16]
 8009ed2:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009ed4:	693b      	ldr	r3, [r7, #16]
 8009ed6:	3301      	adds	r3, #1
 8009ed8:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 8009eda:	697b      	ldr	r3, [r7, #20]
 8009edc:	3301      	adds	r3, #1
 8009ede:	617b      	str	r3, [r7, #20]
 8009ee0:	697b      	ldr	r3, [r7, #20]
 8009ee2:	2b07      	cmp	r3, #7
 8009ee4:	d9d4      	bls.n	8009e90 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	693a      	ldr	r2, [r7, #16]
 8009eea:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ef0:	f1a3 0220 	sub.w	r2, r3, #32
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 8009ef8:	bf00      	nop
 8009efa:	3718      	adds	r7, #24
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}

08009f00 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b086      	sub	sp, #24
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	69db      	ldr	r3, [r3, #28]
 8009f0c:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	6a1b      	ldr	r3, [r3, #32]
 8009f12:	2b1f      	cmp	r3, #31
 8009f14:	d93a      	bls.n	8009f8c <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 8009f16:	2300      	movs	r3, #0
 8009f18:	617b      	str	r3, [r7, #20]
 8009f1a:	e02b      	b.n	8009f74 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8009f1c:	693b      	ldr	r3, [r7, #16]
 8009f1e:	781b      	ldrb	r3, [r3, #0]
 8009f20:	60fb      	str	r3, [r7, #12]
      tmp++;
 8009f22:	693b      	ldr	r3, [r7, #16]
 8009f24:	3301      	adds	r3, #1
 8009f26:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8009f28:	693b      	ldr	r3, [r7, #16]
 8009f2a:	781b      	ldrb	r3, [r3, #0]
 8009f2c:	021a      	lsls	r2, r3, #8
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	4313      	orrs	r3, r2
 8009f32:	60fb      	str	r3, [r7, #12]
      tmp++;
 8009f34:	693b      	ldr	r3, [r7, #16]
 8009f36:	3301      	adds	r3, #1
 8009f38:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8009f3a:	693b      	ldr	r3, [r7, #16]
 8009f3c:	781b      	ldrb	r3, [r3, #0]
 8009f3e:	041a      	lsls	r2, r3, #16
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	4313      	orrs	r3, r2
 8009f44:	60fb      	str	r3, [r7, #12]
      tmp++;
 8009f46:	693b      	ldr	r3, [r7, #16]
 8009f48:	3301      	adds	r3, #1
 8009f4a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8009f4c:	693b      	ldr	r3, [r7, #16]
 8009f4e:	781b      	ldrb	r3, [r3, #0]
 8009f50:	061a      	lsls	r2, r3, #24
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	4313      	orrs	r3, r2
 8009f56:	60fb      	str	r3, [r7, #12]
      tmp++;
 8009f58:	693b      	ldr	r3, [r7, #16]
 8009f5a:	3301      	adds	r3, #1
 8009f5c:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	f107 020c 	add.w	r2, r7, #12
 8009f66:	4611      	mov	r1, r2
 8009f68:	4618      	mov	r0, r3
 8009f6a:	f002 fef8 	bl	800cd5e <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 8009f6e:	697b      	ldr	r3, [r7, #20]
 8009f70:	3301      	adds	r3, #1
 8009f72:	617b      	str	r3, [r7, #20]
 8009f74:	697b      	ldr	r3, [r7, #20]
 8009f76:	2b07      	cmp	r3, #7
 8009f78:	d9d0      	bls.n	8009f1c <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	693a      	ldr	r2, [r7, #16]
 8009f7e:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	6a1b      	ldr	r3, [r3, #32]
 8009f84:	f1a3 0220 	sub.w	r2, r3, #32
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	621a      	str	r2, [r3, #32]
  }
}
 8009f8c:	bf00      	nop
 8009f8e:	3718      	adds	r7, #24
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}

08009f94 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8009f94:	b480      	push	{r7}
 8009f96:	b083      	sub	sp, #12
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8009f9c:	bf00      	nop
 8009f9e:	370c      	adds	r7, #12
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa6:	4770      	bx	lr

08009fa8 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8009fa8:	b480      	push	{r7}
 8009faa:	b083      	sub	sp, #12
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8009fb0:	bf00      	nop
 8009fb2:	370c      	adds	r7, #12
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fba:	4770      	bx	lr

08009fbc <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	b083      	sub	sp, #12
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8009fc4:	bf00      	nop
 8009fc6:	370c      	adds	r7, #12
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fce:	4770      	bx	lr

08009fd0 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8009fd0:	b480      	push	{r7}
 8009fd2:	b083      	sub	sp, #12
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8009fd8:	bf00      	nop
 8009fda:	370c      	adds	r7, #12
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe2:	4770      	bx	lr

08009fe4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b082      	sub	sp, #8
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d101      	bne.n	8009ff6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009ff2:	2301      	movs	r3, #1
 8009ff4:	e049      	b.n	800a08a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ffc:	b2db      	uxtb	r3, r3
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d106      	bne.n	800a010 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2200      	movs	r2, #0
 800a006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f7f7 fade 	bl	80015cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2202      	movs	r2, #2
 800a014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681a      	ldr	r2, [r3, #0]
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	3304      	adds	r3, #4
 800a020:	4619      	mov	r1, r3
 800a022:	4610      	mov	r0, r2
 800a024:	f000 fbec 	bl	800a800 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2201      	movs	r2, #1
 800a02c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2201      	movs	r2, #1
 800a034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2201      	movs	r2, #1
 800a03c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2201      	movs	r2, #1
 800a044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2201      	movs	r2, #1
 800a04c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2201      	movs	r2, #1
 800a054:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2201      	movs	r2, #1
 800a05c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2201      	movs	r2, #1
 800a064:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2201      	movs	r2, #1
 800a06c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2201      	movs	r2, #1
 800a074:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2201      	movs	r2, #1
 800a07c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2201      	movs	r2, #1
 800a084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a088:	2300      	movs	r3, #0
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	3708      	adds	r7, #8
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}

0800a092 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a092:	b580      	push	{r7, lr}
 800a094:	b082      	sub	sp, #8
 800a096:	af00      	add	r7, sp, #0
 800a098:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d101      	bne.n	800a0a4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	e049      	b.n	800a138 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a0aa:	b2db      	uxtb	r3, r3
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d106      	bne.n	800a0be <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a0b8:	6878      	ldr	r0, [r7, #4]
 800a0ba:	f000 f841 	bl	800a140 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2202      	movs	r2, #2
 800a0c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681a      	ldr	r2, [r3, #0]
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	3304      	adds	r3, #4
 800a0ce:	4619      	mov	r1, r3
 800a0d0:	4610      	mov	r0, r2
 800a0d2:	f000 fb95 	bl	800a800 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2201      	movs	r2, #1
 800a0da:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2201      	movs	r2, #1
 800a0e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2201      	movs	r2, #1
 800a0ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2201      	movs	r2, #1
 800a0f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2201      	movs	r2, #1
 800a0fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2201      	movs	r2, #1
 800a102:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2201      	movs	r2, #1
 800a10a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2201      	movs	r2, #1
 800a112:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2201      	movs	r2, #1
 800a11a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2201      	movs	r2, #1
 800a122:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2201      	movs	r2, #1
 800a12a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2201      	movs	r2, #1
 800a132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a136:	2300      	movs	r3, #0
}
 800a138:	4618      	mov	r0, r3
 800a13a:	3708      	adds	r7, #8
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bd80      	pop	{r7, pc}

0800a140 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a140:	b480      	push	{r7}
 800a142:	b083      	sub	sp, #12
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a148:	bf00      	nop
 800a14a:	370c      	adds	r7, #12
 800a14c:	46bd      	mov	sp, r7
 800a14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a152:	4770      	bx	lr

0800a154 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b082      	sub	sp, #8
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	691b      	ldr	r3, [r3, #16]
 800a162:	f003 0302 	and.w	r3, r3, #2
 800a166:	2b02      	cmp	r3, #2
 800a168:	d122      	bne.n	800a1b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	68db      	ldr	r3, [r3, #12]
 800a170:	f003 0302 	and.w	r3, r3, #2
 800a174:	2b02      	cmp	r3, #2
 800a176:	d11b      	bne.n	800a1b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	f06f 0202 	mvn.w	r2, #2
 800a180:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2201      	movs	r2, #1
 800a186:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	699b      	ldr	r3, [r3, #24]
 800a18e:	f003 0303 	and.w	r3, r3, #3
 800a192:	2b00      	cmp	r3, #0
 800a194:	d003      	beq.n	800a19e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f000 fb14 	bl	800a7c4 <HAL_TIM_IC_CaptureCallback>
 800a19c:	e005      	b.n	800a1aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	f000 fb06 	bl	800a7b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a1a4:	6878      	ldr	r0, [r7, #4]
 800a1a6:	f000 fb17 	bl	800a7d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	691b      	ldr	r3, [r3, #16]
 800a1b6:	f003 0304 	and.w	r3, r3, #4
 800a1ba:	2b04      	cmp	r3, #4
 800a1bc:	d122      	bne.n	800a204 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	68db      	ldr	r3, [r3, #12]
 800a1c4:	f003 0304 	and.w	r3, r3, #4
 800a1c8:	2b04      	cmp	r3, #4
 800a1ca:	d11b      	bne.n	800a204 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	f06f 0204 	mvn.w	r2, #4
 800a1d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2202      	movs	r2, #2
 800a1da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	699b      	ldr	r3, [r3, #24]
 800a1e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d003      	beq.n	800a1f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f000 faea 	bl	800a7c4 <HAL_TIM_IC_CaptureCallback>
 800a1f0:	e005      	b.n	800a1fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a1f2:	6878      	ldr	r0, [r7, #4]
 800a1f4:	f000 fadc 	bl	800a7b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a1f8:	6878      	ldr	r0, [r7, #4]
 800a1fa:	f000 faed 	bl	800a7d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	2200      	movs	r2, #0
 800a202:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	691b      	ldr	r3, [r3, #16]
 800a20a:	f003 0308 	and.w	r3, r3, #8
 800a20e:	2b08      	cmp	r3, #8
 800a210:	d122      	bne.n	800a258 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	68db      	ldr	r3, [r3, #12]
 800a218:	f003 0308 	and.w	r3, r3, #8
 800a21c:	2b08      	cmp	r3, #8
 800a21e:	d11b      	bne.n	800a258 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f06f 0208 	mvn.w	r2, #8
 800a228:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2204      	movs	r2, #4
 800a22e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	69db      	ldr	r3, [r3, #28]
 800a236:	f003 0303 	and.w	r3, r3, #3
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d003      	beq.n	800a246 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a23e:	6878      	ldr	r0, [r7, #4]
 800a240:	f000 fac0 	bl	800a7c4 <HAL_TIM_IC_CaptureCallback>
 800a244:	e005      	b.n	800a252 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	f000 fab2 	bl	800a7b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a24c:	6878      	ldr	r0, [r7, #4]
 800a24e:	f000 fac3 	bl	800a7d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2200      	movs	r2, #0
 800a256:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	691b      	ldr	r3, [r3, #16]
 800a25e:	f003 0310 	and.w	r3, r3, #16
 800a262:	2b10      	cmp	r3, #16
 800a264:	d122      	bne.n	800a2ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	68db      	ldr	r3, [r3, #12]
 800a26c:	f003 0310 	and.w	r3, r3, #16
 800a270:	2b10      	cmp	r3, #16
 800a272:	d11b      	bne.n	800a2ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	f06f 0210 	mvn.w	r2, #16
 800a27c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2208      	movs	r2, #8
 800a282:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	69db      	ldr	r3, [r3, #28]
 800a28a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d003      	beq.n	800a29a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f000 fa96 	bl	800a7c4 <HAL_TIM_IC_CaptureCallback>
 800a298:	e005      	b.n	800a2a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f000 fa88 	bl	800a7b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a2a0:	6878      	ldr	r0, [r7, #4]
 800a2a2:	f000 fa99 	bl	800a7d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	691b      	ldr	r3, [r3, #16]
 800a2b2:	f003 0301 	and.w	r3, r3, #1
 800a2b6:	2b01      	cmp	r3, #1
 800a2b8:	d10e      	bne.n	800a2d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	68db      	ldr	r3, [r3, #12]
 800a2c0:	f003 0301 	and.w	r3, r3, #1
 800a2c4:	2b01      	cmp	r3, #1
 800a2c6:	d107      	bne.n	800a2d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	f06f 0201 	mvn.w	r2, #1
 800a2d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a2d2:	6878      	ldr	r0, [r7, #4]
 800a2d4:	f000 fa62 	bl	800a79c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	691b      	ldr	r3, [r3, #16]
 800a2de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2e2:	2b80      	cmp	r3, #128	; 0x80
 800a2e4:	d10e      	bne.n	800a304 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	68db      	ldr	r3, [r3, #12]
 800a2ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2f0:	2b80      	cmp	r3, #128	; 0x80
 800a2f2:	d107      	bne.n	800a304 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a2fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f000 ff94 	bl	800b22c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	691b      	ldr	r3, [r3, #16]
 800a30a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a30e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a312:	d10e      	bne.n	800a332 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	68db      	ldr	r3, [r3, #12]
 800a31a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a31e:	2b80      	cmp	r3, #128	; 0x80
 800a320:	d107      	bne.n	800a332 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a32a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	f000 ff87 	bl	800b240 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	691b      	ldr	r3, [r3, #16]
 800a338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a33c:	2b40      	cmp	r3, #64	; 0x40
 800a33e:	d10e      	bne.n	800a35e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	68db      	ldr	r3, [r3, #12]
 800a346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a34a:	2b40      	cmp	r3, #64	; 0x40
 800a34c:	d107      	bne.n	800a35e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a356:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a358:	6878      	ldr	r0, [r7, #4]
 800a35a:	f000 fa47 	bl	800a7ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	691b      	ldr	r3, [r3, #16]
 800a364:	f003 0320 	and.w	r3, r3, #32
 800a368:	2b20      	cmp	r3, #32
 800a36a:	d10e      	bne.n	800a38a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	68db      	ldr	r3, [r3, #12]
 800a372:	f003 0320 	and.w	r3, r3, #32
 800a376:	2b20      	cmp	r3, #32
 800a378:	d107      	bne.n	800a38a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f06f 0220 	mvn.w	r2, #32
 800a382:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a384:	6878      	ldr	r0, [r7, #4]
 800a386:	f000 ff47 	bl	800b218 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a38a:	bf00      	nop
 800a38c:	3708      	adds	r7, #8
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}
	...

0800a394 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b084      	sub	sp, #16
 800a398:	af00      	add	r7, sp, #0
 800a39a:	60f8      	str	r0, [r7, #12]
 800a39c:	60b9      	str	r1, [r7, #8]
 800a39e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a3a6:	2b01      	cmp	r3, #1
 800a3a8:	d101      	bne.n	800a3ae <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a3aa:	2302      	movs	r3, #2
 800a3ac:	e0fd      	b.n	800a5aa <HAL_TIM_PWM_ConfigChannel+0x216>
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	2201      	movs	r2, #1
 800a3b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	2b14      	cmp	r3, #20
 800a3ba:	f200 80f0 	bhi.w	800a59e <HAL_TIM_PWM_ConfigChannel+0x20a>
 800a3be:	a201      	add	r2, pc, #4	; (adr r2, 800a3c4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800a3c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3c4:	0800a419 	.word	0x0800a419
 800a3c8:	0800a59f 	.word	0x0800a59f
 800a3cc:	0800a59f 	.word	0x0800a59f
 800a3d0:	0800a59f 	.word	0x0800a59f
 800a3d4:	0800a459 	.word	0x0800a459
 800a3d8:	0800a59f 	.word	0x0800a59f
 800a3dc:	0800a59f 	.word	0x0800a59f
 800a3e0:	0800a59f 	.word	0x0800a59f
 800a3e4:	0800a49b 	.word	0x0800a49b
 800a3e8:	0800a59f 	.word	0x0800a59f
 800a3ec:	0800a59f 	.word	0x0800a59f
 800a3f0:	0800a59f 	.word	0x0800a59f
 800a3f4:	0800a4db 	.word	0x0800a4db
 800a3f8:	0800a59f 	.word	0x0800a59f
 800a3fc:	0800a59f 	.word	0x0800a59f
 800a400:	0800a59f 	.word	0x0800a59f
 800a404:	0800a51d 	.word	0x0800a51d
 800a408:	0800a59f 	.word	0x0800a59f
 800a40c:	0800a59f 	.word	0x0800a59f
 800a410:	0800a59f 	.word	0x0800a59f
 800a414:	0800a55d 	.word	0x0800a55d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	68b9      	ldr	r1, [r7, #8]
 800a41e:	4618      	mov	r0, r3
 800a420:	f000 fa88 	bl	800a934 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	699a      	ldr	r2, [r3, #24]
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	f042 0208 	orr.w	r2, r2, #8
 800a432:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	699a      	ldr	r2, [r3, #24]
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	f022 0204 	bic.w	r2, r2, #4
 800a442:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	6999      	ldr	r1, [r3, #24]
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	691a      	ldr	r2, [r3, #16]
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	430a      	orrs	r2, r1
 800a454:	619a      	str	r2, [r3, #24]
      break;
 800a456:	e0a3      	b.n	800a5a0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	68b9      	ldr	r1, [r7, #8]
 800a45e:	4618      	mov	r0, r3
 800a460:	f000 faf8 	bl	800aa54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	699a      	ldr	r2, [r3, #24]
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a472:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	699a      	ldr	r2, [r3, #24]
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a482:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	6999      	ldr	r1, [r3, #24]
 800a48a:	68bb      	ldr	r3, [r7, #8]
 800a48c:	691b      	ldr	r3, [r3, #16]
 800a48e:	021a      	lsls	r2, r3, #8
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	430a      	orrs	r2, r1
 800a496:	619a      	str	r2, [r3, #24]
      break;
 800a498:	e082      	b.n	800a5a0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	68b9      	ldr	r1, [r7, #8]
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	f000 fb61 	bl	800ab68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	69da      	ldr	r2, [r3, #28]
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	f042 0208 	orr.w	r2, r2, #8
 800a4b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	69da      	ldr	r2, [r3, #28]
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	f022 0204 	bic.w	r2, r2, #4
 800a4c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	69d9      	ldr	r1, [r3, #28]
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	691a      	ldr	r2, [r3, #16]
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	430a      	orrs	r2, r1
 800a4d6:	61da      	str	r2, [r3, #28]
      break;
 800a4d8:	e062      	b.n	800a5a0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	68b9      	ldr	r1, [r7, #8]
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	f000 fbc7 	bl	800ac74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	69da      	ldr	r2, [r3, #28]
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a4f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	69da      	ldr	r2, [r3, #28]
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a504:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	69d9      	ldr	r1, [r3, #28]
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	691b      	ldr	r3, [r3, #16]
 800a510:	021a      	lsls	r2, r3, #8
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	430a      	orrs	r2, r1
 800a518:	61da      	str	r2, [r3, #28]
      break;
 800a51a:	e041      	b.n	800a5a0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	68b9      	ldr	r1, [r7, #8]
 800a522:	4618      	mov	r0, r3
 800a524:	f000 fc0e 	bl	800ad44 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	f042 0208 	orr.w	r2, r2, #8
 800a536:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	f022 0204 	bic.w	r2, r2, #4
 800a546:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a54e:	68bb      	ldr	r3, [r7, #8]
 800a550:	691a      	ldr	r2, [r3, #16]
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	430a      	orrs	r2, r1
 800a558:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a55a:	e021      	b.n	800a5a0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	68b9      	ldr	r1, [r7, #8]
 800a562:	4618      	mov	r0, r3
 800a564:	f000 fc50 	bl	800ae08 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a576:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a586:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a58e:	68bb      	ldr	r3, [r7, #8]
 800a590:	691b      	ldr	r3, [r3, #16]
 800a592:	021a      	lsls	r2, r3, #8
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	430a      	orrs	r2, r1
 800a59a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a59c:	e000      	b.n	800a5a0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800a59e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a5a8:	2300      	movs	r3, #0
}
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	3710      	adds	r7, #16
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd80      	pop	{r7, pc}
 800a5b2:	bf00      	nop

0800a5b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b084      	sub	sp, #16
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
 800a5bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a5c4:	2b01      	cmp	r3, #1
 800a5c6:	d101      	bne.n	800a5cc <HAL_TIM_ConfigClockSource+0x18>
 800a5c8:	2302      	movs	r3, #2
 800a5ca:	e0db      	b.n	800a784 <HAL_TIM_ConfigClockSource+0x1d0>
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2201      	movs	r2, #1
 800a5d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2202      	movs	r2, #2
 800a5d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	689b      	ldr	r3, [r3, #8]
 800a5e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a5e4:	68fa      	ldr	r2, [r7, #12]
 800a5e6:	4b69      	ldr	r3, [pc, #420]	; (800a78c <HAL_TIM_ConfigClockSource+0x1d8>)
 800a5e8:	4013      	ands	r3, r2
 800a5ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a5f2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	68fa      	ldr	r2, [r7, #12]
 800a5fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	4a63      	ldr	r2, [pc, #396]	; (800a790 <HAL_TIM_ConfigClockSource+0x1dc>)
 800a602:	4293      	cmp	r3, r2
 800a604:	f000 80a9 	beq.w	800a75a <HAL_TIM_ConfigClockSource+0x1a6>
 800a608:	4a61      	ldr	r2, [pc, #388]	; (800a790 <HAL_TIM_ConfigClockSource+0x1dc>)
 800a60a:	4293      	cmp	r3, r2
 800a60c:	f200 80ae 	bhi.w	800a76c <HAL_TIM_ConfigClockSource+0x1b8>
 800a610:	4a60      	ldr	r2, [pc, #384]	; (800a794 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a612:	4293      	cmp	r3, r2
 800a614:	f000 80a1 	beq.w	800a75a <HAL_TIM_ConfigClockSource+0x1a6>
 800a618:	4a5e      	ldr	r2, [pc, #376]	; (800a794 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a61a:	4293      	cmp	r3, r2
 800a61c:	f200 80a6 	bhi.w	800a76c <HAL_TIM_ConfigClockSource+0x1b8>
 800a620:	4a5d      	ldr	r2, [pc, #372]	; (800a798 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a622:	4293      	cmp	r3, r2
 800a624:	f000 8099 	beq.w	800a75a <HAL_TIM_ConfigClockSource+0x1a6>
 800a628:	4a5b      	ldr	r2, [pc, #364]	; (800a798 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a62a:	4293      	cmp	r3, r2
 800a62c:	f200 809e 	bhi.w	800a76c <HAL_TIM_ConfigClockSource+0x1b8>
 800a630:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a634:	f000 8091 	beq.w	800a75a <HAL_TIM_ConfigClockSource+0x1a6>
 800a638:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a63c:	f200 8096 	bhi.w	800a76c <HAL_TIM_ConfigClockSource+0x1b8>
 800a640:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a644:	f000 8089 	beq.w	800a75a <HAL_TIM_ConfigClockSource+0x1a6>
 800a648:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a64c:	f200 808e 	bhi.w	800a76c <HAL_TIM_ConfigClockSource+0x1b8>
 800a650:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a654:	d03e      	beq.n	800a6d4 <HAL_TIM_ConfigClockSource+0x120>
 800a656:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a65a:	f200 8087 	bhi.w	800a76c <HAL_TIM_ConfigClockSource+0x1b8>
 800a65e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a662:	f000 8085 	beq.w	800a770 <HAL_TIM_ConfigClockSource+0x1bc>
 800a666:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a66a:	d87f      	bhi.n	800a76c <HAL_TIM_ConfigClockSource+0x1b8>
 800a66c:	2b70      	cmp	r3, #112	; 0x70
 800a66e:	d01a      	beq.n	800a6a6 <HAL_TIM_ConfigClockSource+0xf2>
 800a670:	2b70      	cmp	r3, #112	; 0x70
 800a672:	d87b      	bhi.n	800a76c <HAL_TIM_ConfigClockSource+0x1b8>
 800a674:	2b60      	cmp	r3, #96	; 0x60
 800a676:	d050      	beq.n	800a71a <HAL_TIM_ConfigClockSource+0x166>
 800a678:	2b60      	cmp	r3, #96	; 0x60
 800a67a:	d877      	bhi.n	800a76c <HAL_TIM_ConfigClockSource+0x1b8>
 800a67c:	2b50      	cmp	r3, #80	; 0x50
 800a67e:	d03c      	beq.n	800a6fa <HAL_TIM_ConfigClockSource+0x146>
 800a680:	2b50      	cmp	r3, #80	; 0x50
 800a682:	d873      	bhi.n	800a76c <HAL_TIM_ConfigClockSource+0x1b8>
 800a684:	2b40      	cmp	r3, #64	; 0x40
 800a686:	d058      	beq.n	800a73a <HAL_TIM_ConfigClockSource+0x186>
 800a688:	2b40      	cmp	r3, #64	; 0x40
 800a68a:	d86f      	bhi.n	800a76c <HAL_TIM_ConfigClockSource+0x1b8>
 800a68c:	2b30      	cmp	r3, #48	; 0x30
 800a68e:	d064      	beq.n	800a75a <HAL_TIM_ConfigClockSource+0x1a6>
 800a690:	2b30      	cmp	r3, #48	; 0x30
 800a692:	d86b      	bhi.n	800a76c <HAL_TIM_ConfigClockSource+0x1b8>
 800a694:	2b20      	cmp	r3, #32
 800a696:	d060      	beq.n	800a75a <HAL_TIM_ConfigClockSource+0x1a6>
 800a698:	2b20      	cmp	r3, #32
 800a69a:	d867      	bhi.n	800a76c <HAL_TIM_ConfigClockSource+0x1b8>
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d05c      	beq.n	800a75a <HAL_TIM_ConfigClockSource+0x1a6>
 800a6a0:	2b10      	cmp	r3, #16
 800a6a2:	d05a      	beq.n	800a75a <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800a6a4:	e062      	b.n	800a76c <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	6818      	ldr	r0, [r3, #0]
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	6899      	ldr	r1, [r3, #8]
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	685a      	ldr	r2, [r3, #4]
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	68db      	ldr	r3, [r3, #12]
 800a6b6:	f000 fc89 	bl	800afcc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	689b      	ldr	r3, [r3, #8]
 800a6c0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a6c8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	68fa      	ldr	r2, [r7, #12]
 800a6d0:	609a      	str	r2, [r3, #8]
      break;
 800a6d2:	e04e      	b.n	800a772 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	6818      	ldr	r0, [r3, #0]
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	6899      	ldr	r1, [r3, #8]
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	685a      	ldr	r2, [r3, #4]
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	68db      	ldr	r3, [r3, #12]
 800a6e4:	f000 fc72 	bl	800afcc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	689a      	ldr	r2, [r3, #8]
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a6f6:	609a      	str	r2, [r3, #8]
      break;
 800a6f8:	e03b      	b.n	800a772 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6818      	ldr	r0, [r3, #0]
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	6859      	ldr	r1, [r3, #4]
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	68db      	ldr	r3, [r3, #12]
 800a706:	461a      	mov	r2, r3
 800a708:	f000 fbe2 	bl	800aed0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	2150      	movs	r1, #80	; 0x50
 800a712:	4618      	mov	r0, r3
 800a714:	f000 fc3c 	bl	800af90 <TIM_ITRx_SetConfig>
      break;
 800a718:	e02b      	b.n	800a772 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6818      	ldr	r0, [r3, #0]
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	6859      	ldr	r1, [r3, #4]
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	68db      	ldr	r3, [r3, #12]
 800a726:	461a      	mov	r2, r3
 800a728:	f000 fc01 	bl	800af2e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	2160      	movs	r1, #96	; 0x60
 800a732:	4618      	mov	r0, r3
 800a734:	f000 fc2c 	bl	800af90 <TIM_ITRx_SetConfig>
      break;
 800a738:	e01b      	b.n	800a772 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6818      	ldr	r0, [r3, #0]
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	6859      	ldr	r1, [r3, #4]
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	68db      	ldr	r3, [r3, #12]
 800a746:	461a      	mov	r2, r3
 800a748:	f000 fbc2 	bl	800aed0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	2140      	movs	r1, #64	; 0x40
 800a752:	4618      	mov	r0, r3
 800a754:	f000 fc1c 	bl	800af90 <TIM_ITRx_SetConfig>
      break;
 800a758:	e00b      	b.n	800a772 <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681a      	ldr	r2, [r3, #0]
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	4619      	mov	r1, r3
 800a764:	4610      	mov	r0, r2
 800a766:	f000 fc13 	bl	800af90 <TIM_ITRx_SetConfig>
        break;
 800a76a:	e002      	b.n	800a772 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800a76c:	bf00      	nop
 800a76e:	e000      	b.n	800a772 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800a770:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	2201      	movs	r2, #1
 800a776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2200      	movs	r2, #0
 800a77e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a782:	2300      	movs	r3, #0
}
 800a784:	4618      	mov	r0, r3
 800a786:	3710      	adds	r7, #16
 800a788:	46bd      	mov	sp, r7
 800a78a:	bd80      	pop	{r7, pc}
 800a78c:	ffceff88 	.word	0xffceff88
 800a790:	00100040 	.word	0x00100040
 800a794:	00100030 	.word	0x00100030
 800a798:	00100020 	.word	0x00100020

0800a79c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a79c:	b480      	push	{r7}
 800a79e:	b083      	sub	sp, #12
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a7a4:	bf00      	nop
 800a7a6:	370c      	adds	r7, #12
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ae:	4770      	bx	lr

0800a7b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a7b0:	b480      	push	{r7}
 800a7b2:	b083      	sub	sp, #12
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a7b8:	bf00      	nop
 800a7ba:	370c      	adds	r7, #12
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c2:	4770      	bx	lr

0800a7c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a7c4:	b480      	push	{r7}
 800a7c6:	b083      	sub	sp, #12
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a7cc:	bf00      	nop
 800a7ce:	370c      	adds	r7, #12
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d6:	4770      	bx	lr

0800a7d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a7d8:	b480      	push	{r7}
 800a7da:	b083      	sub	sp, #12
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a7e0:	bf00      	nop
 800a7e2:	370c      	adds	r7, #12
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ea:	4770      	bx	lr

0800a7ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	b083      	sub	sp, #12
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a7f4:	bf00      	nop
 800a7f6:	370c      	adds	r7, #12
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fe:	4770      	bx	lr

0800a800 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a800:	b480      	push	{r7}
 800a802:	b085      	sub	sp, #20
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
 800a808:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	4a40      	ldr	r2, [pc, #256]	; (800a914 <TIM_Base_SetConfig+0x114>)
 800a814:	4293      	cmp	r3, r2
 800a816:	d013      	beq.n	800a840 <TIM_Base_SetConfig+0x40>
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a81e:	d00f      	beq.n	800a840 <TIM_Base_SetConfig+0x40>
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	4a3d      	ldr	r2, [pc, #244]	; (800a918 <TIM_Base_SetConfig+0x118>)
 800a824:	4293      	cmp	r3, r2
 800a826:	d00b      	beq.n	800a840 <TIM_Base_SetConfig+0x40>
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	4a3c      	ldr	r2, [pc, #240]	; (800a91c <TIM_Base_SetConfig+0x11c>)
 800a82c:	4293      	cmp	r3, r2
 800a82e:	d007      	beq.n	800a840 <TIM_Base_SetConfig+0x40>
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	4a3b      	ldr	r2, [pc, #236]	; (800a920 <TIM_Base_SetConfig+0x120>)
 800a834:	4293      	cmp	r3, r2
 800a836:	d003      	beq.n	800a840 <TIM_Base_SetConfig+0x40>
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	4a3a      	ldr	r2, [pc, #232]	; (800a924 <TIM_Base_SetConfig+0x124>)
 800a83c:	4293      	cmp	r3, r2
 800a83e:	d108      	bne.n	800a852 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a846:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	685b      	ldr	r3, [r3, #4]
 800a84c:	68fa      	ldr	r2, [r7, #12]
 800a84e:	4313      	orrs	r3, r2
 800a850:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	4a2f      	ldr	r2, [pc, #188]	; (800a914 <TIM_Base_SetConfig+0x114>)
 800a856:	4293      	cmp	r3, r2
 800a858:	d01f      	beq.n	800a89a <TIM_Base_SetConfig+0x9a>
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a860:	d01b      	beq.n	800a89a <TIM_Base_SetConfig+0x9a>
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	4a2c      	ldr	r2, [pc, #176]	; (800a918 <TIM_Base_SetConfig+0x118>)
 800a866:	4293      	cmp	r3, r2
 800a868:	d017      	beq.n	800a89a <TIM_Base_SetConfig+0x9a>
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	4a2b      	ldr	r2, [pc, #172]	; (800a91c <TIM_Base_SetConfig+0x11c>)
 800a86e:	4293      	cmp	r3, r2
 800a870:	d013      	beq.n	800a89a <TIM_Base_SetConfig+0x9a>
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	4a2a      	ldr	r2, [pc, #168]	; (800a920 <TIM_Base_SetConfig+0x120>)
 800a876:	4293      	cmp	r3, r2
 800a878:	d00f      	beq.n	800a89a <TIM_Base_SetConfig+0x9a>
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	4a29      	ldr	r2, [pc, #164]	; (800a924 <TIM_Base_SetConfig+0x124>)
 800a87e:	4293      	cmp	r3, r2
 800a880:	d00b      	beq.n	800a89a <TIM_Base_SetConfig+0x9a>
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	4a28      	ldr	r2, [pc, #160]	; (800a928 <TIM_Base_SetConfig+0x128>)
 800a886:	4293      	cmp	r3, r2
 800a888:	d007      	beq.n	800a89a <TIM_Base_SetConfig+0x9a>
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	4a27      	ldr	r2, [pc, #156]	; (800a92c <TIM_Base_SetConfig+0x12c>)
 800a88e:	4293      	cmp	r3, r2
 800a890:	d003      	beq.n	800a89a <TIM_Base_SetConfig+0x9a>
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	4a26      	ldr	r2, [pc, #152]	; (800a930 <TIM_Base_SetConfig+0x130>)
 800a896:	4293      	cmp	r3, r2
 800a898:	d108      	bne.n	800a8ac <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a8a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	68db      	ldr	r3, [r3, #12]
 800a8a6:	68fa      	ldr	r2, [r7, #12]
 800a8a8:	4313      	orrs	r3, r2
 800a8aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	695b      	ldr	r3, [r3, #20]
 800a8b6:	4313      	orrs	r3, r2
 800a8b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	68fa      	ldr	r2, [r7, #12]
 800a8be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	689a      	ldr	r2, [r3, #8]
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	681a      	ldr	r2, [r3, #0]
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	4a10      	ldr	r2, [pc, #64]	; (800a914 <TIM_Base_SetConfig+0x114>)
 800a8d4:	4293      	cmp	r3, r2
 800a8d6:	d00f      	beq.n	800a8f8 <TIM_Base_SetConfig+0xf8>
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	4a12      	ldr	r2, [pc, #72]	; (800a924 <TIM_Base_SetConfig+0x124>)
 800a8dc:	4293      	cmp	r3, r2
 800a8de:	d00b      	beq.n	800a8f8 <TIM_Base_SetConfig+0xf8>
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	4a11      	ldr	r2, [pc, #68]	; (800a928 <TIM_Base_SetConfig+0x128>)
 800a8e4:	4293      	cmp	r3, r2
 800a8e6:	d007      	beq.n	800a8f8 <TIM_Base_SetConfig+0xf8>
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	4a10      	ldr	r2, [pc, #64]	; (800a92c <TIM_Base_SetConfig+0x12c>)
 800a8ec:	4293      	cmp	r3, r2
 800a8ee:	d003      	beq.n	800a8f8 <TIM_Base_SetConfig+0xf8>
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	4a0f      	ldr	r2, [pc, #60]	; (800a930 <TIM_Base_SetConfig+0x130>)
 800a8f4:	4293      	cmp	r3, r2
 800a8f6:	d103      	bne.n	800a900 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a8f8:	683b      	ldr	r3, [r7, #0]
 800a8fa:	691a      	ldr	r2, [r3, #16]
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2201      	movs	r2, #1
 800a904:	615a      	str	r2, [r3, #20]
}
 800a906:	bf00      	nop
 800a908:	3714      	adds	r7, #20
 800a90a:	46bd      	mov	sp, r7
 800a90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a910:	4770      	bx	lr
 800a912:	bf00      	nop
 800a914:	40010000 	.word	0x40010000
 800a918:	40000400 	.word	0x40000400
 800a91c:	40000800 	.word	0x40000800
 800a920:	40000c00 	.word	0x40000c00
 800a924:	40010400 	.word	0x40010400
 800a928:	40014000 	.word	0x40014000
 800a92c:	40014400 	.word	0x40014400
 800a930:	40014800 	.word	0x40014800

0800a934 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a934:	b480      	push	{r7}
 800a936:	b087      	sub	sp, #28
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
 800a93c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6a1b      	ldr	r3, [r3, #32]
 800a942:	f023 0201 	bic.w	r2, r3, #1
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	6a1b      	ldr	r3, [r3, #32]
 800a94e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	685b      	ldr	r3, [r3, #4]
 800a954:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	699b      	ldr	r3, [r3, #24]
 800a95a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a95c:	68fa      	ldr	r2, [r7, #12]
 800a95e:	4b37      	ldr	r3, [pc, #220]	; (800aa3c <TIM_OC1_SetConfig+0x108>)
 800a960:	4013      	ands	r3, r2
 800a962:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	f023 0303 	bic.w	r3, r3, #3
 800a96a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	68fa      	ldr	r2, [r7, #12]
 800a972:	4313      	orrs	r3, r2
 800a974:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a976:	697b      	ldr	r3, [r7, #20]
 800a978:	f023 0302 	bic.w	r3, r3, #2
 800a97c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	689b      	ldr	r3, [r3, #8]
 800a982:	697a      	ldr	r2, [r7, #20]
 800a984:	4313      	orrs	r3, r2
 800a986:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	4a2d      	ldr	r2, [pc, #180]	; (800aa40 <TIM_OC1_SetConfig+0x10c>)
 800a98c:	4293      	cmp	r3, r2
 800a98e:	d00f      	beq.n	800a9b0 <TIM_OC1_SetConfig+0x7c>
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	4a2c      	ldr	r2, [pc, #176]	; (800aa44 <TIM_OC1_SetConfig+0x110>)
 800a994:	4293      	cmp	r3, r2
 800a996:	d00b      	beq.n	800a9b0 <TIM_OC1_SetConfig+0x7c>
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	4a2b      	ldr	r2, [pc, #172]	; (800aa48 <TIM_OC1_SetConfig+0x114>)
 800a99c:	4293      	cmp	r3, r2
 800a99e:	d007      	beq.n	800a9b0 <TIM_OC1_SetConfig+0x7c>
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	4a2a      	ldr	r2, [pc, #168]	; (800aa4c <TIM_OC1_SetConfig+0x118>)
 800a9a4:	4293      	cmp	r3, r2
 800a9a6:	d003      	beq.n	800a9b0 <TIM_OC1_SetConfig+0x7c>
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	4a29      	ldr	r2, [pc, #164]	; (800aa50 <TIM_OC1_SetConfig+0x11c>)
 800a9ac:	4293      	cmp	r3, r2
 800a9ae:	d10c      	bne.n	800a9ca <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a9b0:	697b      	ldr	r3, [r7, #20]
 800a9b2:	f023 0308 	bic.w	r3, r3, #8
 800a9b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	68db      	ldr	r3, [r3, #12]
 800a9bc:	697a      	ldr	r2, [r7, #20]
 800a9be:	4313      	orrs	r3, r2
 800a9c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a9c2:	697b      	ldr	r3, [r7, #20]
 800a9c4:	f023 0304 	bic.w	r3, r3, #4
 800a9c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	4a1c      	ldr	r2, [pc, #112]	; (800aa40 <TIM_OC1_SetConfig+0x10c>)
 800a9ce:	4293      	cmp	r3, r2
 800a9d0:	d00f      	beq.n	800a9f2 <TIM_OC1_SetConfig+0xbe>
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	4a1b      	ldr	r2, [pc, #108]	; (800aa44 <TIM_OC1_SetConfig+0x110>)
 800a9d6:	4293      	cmp	r3, r2
 800a9d8:	d00b      	beq.n	800a9f2 <TIM_OC1_SetConfig+0xbe>
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	4a1a      	ldr	r2, [pc, #104]	; (800aa48 <TIM_OC1_SetConfig+0x114>)
 800a9de:	4293      	cmp	r3, r2
 800a9e0:	d007      	beq.n	800a9f2 <TIM_OC1_SetConfig+0xbe>
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	4a19      	ldr	r2, [pc, #100]	; (800aa4c <TIM_OC1_SetConfig+0x118>)
 800a9e6:	4293      	cmp	r3, r2
 800a9e8:	d003      	beq.n	800a9f2 <TIM_OC1_SetConfig+0xbe>
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	4a18      	ldr	r2, [pc, #96]	; (800aa50 <TIM_OC1_SetConfig+0x11c>)
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	d111      	bne.n	800aa16 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a9f2:	693b      	ldr	r3, [r7, #16]
 800a9f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a9f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a9fa:	693b      	ldr	r3, [r7, #16]
 800a9fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aa00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	695b      	ldr	r3, [r3, #20]
 800aa06:	693a      	ldr	r2, [r7, #16]
 800aa08:	4313      	orrs	r3, r2
 800aa0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	699b      	ldr	r3, [r3, #24]
 800aa10:	693a      	ldr	r2, [r7, #16]
 800aa12:	4313      	orrs	r3, r2
 800aa14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	693a      	ldr	r2, [r7, #16]
 800aa1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	68fa      	ldr	r2, [r7, #12]
 800aa20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800aa22:	683b      	ldr	r3, [r7, #0]
 800aa24:	685a      	ldr	r2, [r3, #4]
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	697a      	ldr	r2, [r7, #20]
 800aa2e:	621a      	str	r2, [r3, #32]
}
 800aa30:	bf00      	nop
 800aa32:	371c      	adds	r7, #28
 800aa34:	46bd      	mov	sp, r7
 800aa36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3a:	4770      	bx	lr
 800aa3c:	fffeff8f 	.word	0xfffeff8f
 800aa40:	40010000 	.word	0x40010000
 800aa44:	40010400 	.word	0x40010400
 800aa48:	40014000 	.word	0x40014000
 800aa4c:	40014400 	.word	0x40014400
 800aa50:	40014800 	.word	0x40014800

0800aa54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aa54:	b480      	push	{r7}
 800aa56:	b087      	sub	sp, #28
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
 800aa5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	6a1b      	ldr	r3, [r3, #32]
 800aa62:	f023 0210 	bic.w	r2, r3, #16
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6a1b      	ldr	r3, [r3, #32]
 800aa6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	685b      	ldr	r3, [r3, #4]
 800aa74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	699b      	ldr	r3, [r3, #24]
 800aa7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800aa7c:	68fa      	ldr	r2, [r7, #12]
 800aa7e:	4b34      	ldr	r3, [pc, #208]	; (800ab50 <TIM_OC2_SetConfig+0xfc>)
 800aa80:	4013      	ands	r3, r2
 800aa82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aa8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	021b      	lsls	r3, r3, #8
 800aa92:	68fa      	ldr	r2, [r7, #12]
 800aa94:	4313      	orrs	r3, r2
 800aa96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800aa98:	697b      	ldr	r3, [r7, #20]
 800aa9a:	f023 0320 	bic.w	r3, r3, #32
 800aa9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	689b      	ldr	r3, [r3, #8]
 800aaa4:	011b      	lsls	r3, r3, #4
 800aaa6:	697a      	ldr	r2, [r7, #20]
 800aaa8:	4313      	orrs	r3, r2
 800aaaa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	4a29      	ldr	r2, [pc, #164]	; (800ab54 <TIM_OC2_SetConfig+0x100>)
 800aab0:	4293      	cmp	r3, r2
 800aab2:	d003      	beq.n	800aabc <TIM_OC2_SetConfig+0x68>
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	4a28      	ldr	r2, [pc, #160]	; (800ab58 <TIM_OC2_SetConfig+0x104>)
 800aab8:	4293      	cmp	r3, r2
 800aaba:	d10d      	bne.n	800aad8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800aabc:	697b      	ldr	r3, [r7, #20]
 800aabe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aac2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	68db      	ldr	r3, [r3, #12]
 800aac8:	011b      	lsls	r3, r3, #4
 800aaca:	697a      	ldr	r2, [r7, #20]
 800aacc:	4313      	orrs	r3, r2
 800aace:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800aad0:	697b      	ldr	r3, [r7, #20]
 800aad2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aad6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	4a1e      	ldr	r2, [pc, #120]	; (800ab54 <TIM_OC2_SetConfig+0x100>)
 800aadc:	4293      	cmp	r3, r2
 800aade:	d00f      	beq.n	800ab00 <TIM_OC2_SetConfig+0xac>
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	4a1d      	ldr	r2, [pc, #116]	; (800ab58 <TIM_OC2_SetConfig+0x104>)
 800aae4:	4293      	cmp	r3, r2
 800aae6:	d00b      	beq.n	800ab00 <TIM_OC2_SetConfig+0xac>
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	4a1c      	ldr	r2, [pc, #112]	; (800ab5c <TIM_OC2_SetConfig+0x108>)
 800aaec:	4293      	cmp	r3, r2
 800aaee:	d007      	beq.n	800ab00 <TIM_OC2_SetConfig+0xac>
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	4a1b      	ldr	r2, [pc, #108]	; (800ab60 <TIM_OC2_SetConfig+0x10c>)
 800aaf4:	4293      	cmp	r3, r2
 800aaf6:	d003      	beq.n	800ab00 <TIM_OC2_SetConfig+0xac>
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	4a1a      	ldr	r2, [pc, #104]	; (800ab64 <TIM_OC2_SetConfig+0x110>)
 800aafc:	4293      	cmp	r3, r2
 800aafe:	d113      	bne.n	800ab28 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ab00:	693b      	ldr	r3, [r7, #16]
 800ab02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ab06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ab08:	693b      	ldr	r3, [r7, #16]
 800ab0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ab0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	695b      	ldr	r3, [r3, #20]
 800ab14:	009b      	lsls	r3, r3, #2
 800ab16:	693a      	ldr	r2, [r7, #16]
 800ab18:	4313      	orrs	r3, r2
 800ab1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	699b      	ldr	r3, [r3, #24]
 800ab20:	009b      	lsls	r3, r3, #2
 800ab22:	693a      	ldr	r2, [r7, #16]
 800ab24:	4313      	orrs	r3, r2
 800ab26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	693a      	ldr	r2, [r7, #16]
 800ab2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	68fa      	ldr	r2, [r7, #12]
 800ab32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	685a      	ldr	r2, [r3, #4]
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	697a      	ldr	r2, [r7, #20]
 800ab40:	621a      	str	r2, [r3, #32]
}
 800ab42:	bf00      	nop
 800ab44:	371c      	adds	r7, #28
 800ab46:	46bd      	mov	sp, r7
 800ab48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4c:	4770      	bx	lr
 800ab4e:	bf00      	nop
 800ab50:	feff8fff 	.word	0xfeff8fff
 800ab54:	40010000 	.word	0x40010000
 800ab58:	40010400 	.word	0x40010400
 800ab5c:	40014000 	.word	0x40014000
 800ab60:	40014400 	.word	0x40014400
 800ab64:	40014800 	.word	0x40014800

0800ab68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ab68:	b480      	push	{r7}
 800ab6a:	b087      	sub	sp, #28
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
 800ab70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	6a1b      	ldr	r3, [r3, #32]
 800ab76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	6a1b      	ldr	r3, [r3, #32]
 800ab82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	685b      	ldr	r3, [r3, #4]
 800ab88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	69db      	ldr	r3, [r3, #28]
 800ab8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	f023 0303 	bic.w	r3, r3, #3
 800ab9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	68fa      	ldr	r2, [r7, #12]
 800aba6:	4313      	orrs	r3, r2
 800aba8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800abaa:	697b      	ldr	r3, [r7, #20]
 800abac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800abb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	689b      	ldr	r3, [r3, #8]
 800abb6:	021b      	lsls	r3, r3, #8
 800abb8:	697a      	ldr	r2, [r7, #20]
 800abba:	4313      	orrs	r3, r2
 800abbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	4a27      	ldr	r2, [pc, #156]	; (800ac60 <TIM_OC3_SetConfig+0xf8>)
 800abc2:	4293      	cmp	r3, r2
 800abc4:	d003      	beq.n	800abce <TIM_OC3_SetConfig+0x66>
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	4a26      	ldr	r2, [pc, #152]	; (800ac64 <TIM_OC3_SetConfig+0xfc>)
 800abca:	4293      	cmp	r3, r2
 800abcc:	d10d      	bne.n	800abea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800abce:	697b      	ldr	r3, [r7, #20]
 800abd0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800abd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	68db      	ldr	r3, [r3, #12]
 800abda:	021b      	lsls	r3, r3, #8
 800abdc:	697a      	ldr	r2, [r7, #20]
 800abde:	4313      	orrs	r3, r2
 800abe0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800abe2:	697b      	ldr	r3, [r7, #20]
 800abe4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800abe8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	4a1c      	ldr	r2, [pc, #112]	; (800ac60 <TIM_OC3_SetConfig+0xf8>)
 800abee:	4293      	cmp	r3, r2
 800abf0:	d00f      	beq.n	800ac12 <TIM_OC3_SetConfig+0xaa>
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	4a1b      	ldr	r2, [pc, #108]	; (800ac64 <TIM_OC3_SetConfig+0xfc>)
 800abf6:	4293      	cmp	r3, r2
 800abf8:	d00b      	beq.n	800ac12 <TIM_OC3_SetConfig+0xaa>
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	4a1a      	ldr	r2, [pc, #104]	; (800ac68 <TIM_OC3_SetConfig+0x100>)
 800abfe:	4293      	cmp	r3, r2
 800ac00:	d007      	beq.n	800ac12 <TIM_OC3_SetConfig+0xaa>
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	4a19      	ldr	r2, [pc, #100]	; (800ac6c <TIM_OC3_SetConfig+0x104>)
 800ac06:	4293      	cmp	r3, r2
 800ac08:	d003      	beq.n	800ac12 <TIM_OC3_SetConfig+0xaa>
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	4a18      	ldr	r2, [pc, #96]	; (800ac70 <TIM_OC3_SetConfig+0x108>)
 800ac0e:	4293      	cmp	r3, r2
 800ac10:	d113      	bne.n	800ac3a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ac12:	693b      	ldr	r3, [r7, #16]
 800ac14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ac18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ac1a:	693b      	ldr	r3, [r7, #16]
 800ac1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ac20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	695b      	ldr	r3, [r3, #20]
 800ac26:	011b      	lsls	r3, r3, #4
 800ac28:	693a      	ldr	r2, [r7, #16]
 800ac2a:	4313      	orrs	r3, r2
 800ac2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	699b      	ldr	r3, [r3, #24]
 800ac32:	011b      	lsls	r3, r3, #4
 800ac34:	693a      	ldr	r2, [r7, #16]
 800ac36:	4313      	orrs	r3, r2
 800ac38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	693a      	ldr	r2, [r7, #16]
 800ac3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	68fa      	ldr	r2, [r7, #12]
 800ac44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	685a      	ldr	r2, [r3, #4]
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	697a      	ldr	r2, [r7, #20]
 800ac52:	621a      	str	r2, [r3, #32]
}
 800ac54:	bf00      	nop
 800ac56:	371c      	adds	r7, #28
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5e:	4770      	bx	lr
 800ac60:	40010000 	.word	0x40010000
 800ac64:	40010400 	.word	0x40010400
 800ac68:	40014000 	.word	0x40014000
 800ac6c:	40014400 	.word	0x40014400
 800ac70:	40014800 	.word	0x40014800

0800ac74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ac74:	b480      	push	{r7}
 800ac76:	b087      	sub	sp, #28
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
 800ac7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6a1b      	ldr	r3, [r3, #32]
 800ac82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6a1b      	ldr	r3, [r3, #32]
 800ac8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	685b      	ldr	r3, [r3, #4]
 800ac94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	69db      	ldr	r3, [r3, #28]
 800ac9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aca2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800acaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	021b      	lsls	r3, r3, #8
 800acb2:	68fa      	ldr	r2, [r7, #12]
 800acb4:	4313      	orrs	r3, r2
 800acb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800acb8:	693b      	ldr	r3, [r7, #16]
 800acba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800acbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	689b      	ldr	r3, [r3, #8]
 800acc4:	031b      	lsls	r3, r3, #12
 800acc6:	693a      	ldr	r2, [r7, #16]
 800acc8:	4313      	orrs	r3, r2
 800acca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	4a18      	ldr	r2, [pc, #96]	; (800ad30 <TIM_OC4_SetConfig+0xbc>)
 800acd0:	4293      	cmp	r3, r2
 800acd2:	d00f      	beq.n	800acf4 <TIM_OC4_SetConfig+0x80>
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	4a17      	ldr	r2, [pc, #92]	; (800ad34 <TIM_OC4_SetConfig+0xc0>)
 800acd8:	4293      	cmp	r3, r2
 800acda:	d00b      	beq.n	800acf4 <TIM_OC4_SetConfig+0x80>
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	4a16      	ldr	r2, [pc, #88]	; (800ad38 <TIM_OC4_SetConfig+0xc4>)
 800ace0:	4293      	cmp	r3, r2
 800ace2:	d007      	beq.n	800acf4 <TIM_OC4_SetConfig+0x80>
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	4a15      	ldr	r2, [pc, #84]	; (800ad3c <TIM_OC4_SetConfig+0xc8>)
 800ace8:	4293      	cmp	r3, r2
 800acea:	d003      	beq.n	800acf4 <TIM_OC4_SetConfig+0x80>
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	4a14      	ldr	r2, [pc, #80]	; (800ad40 <TIM_OC4_SetConfig+0xcc>)
 800acf0:	4293      	cmp	r3, r2
 800acf2:	d109      	bne.n	800ad08 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800acf4:	697b      	ldr	r3, [r7, #20]
 800acf6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800acfa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	695b      	ldr	r3, [r3, #20]
 800ad00:	019b      	lsls	r3, r3, #6
 800ad02:	697a      	ldr	r2, [r7, #20]
 800ad04:	4313      	orrs	r3, r2
 800ad06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	697a      	ldr	r2, [r7, #20]
 800ad0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	68fa      	ldr	r2, [r7, #12]
 800ad12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	685a      	ldr	r2, [r3, #4]
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	693a      	ldr	r2, [r7, #16]
 800ad20:	621a      	str	r2, [r3, #32]
}
 800ad22:	bf00      	nop
 800ad24:	371c      	adds	r7, #28
 800ad26:	46bd      	mov	sp, r7
 800ad28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2c:	4770      	bx	lr
 800ad2e:	bf00      	nop
 800ad30:	40010000 	.word	0x40010000
 800ad34:	40010400 	.word	0x40010400
 800ad38:	40014000 	.word	0x40014000
 800ad3c:	40014400 	.word	0x40014400
 800ad40:	40014800 	.word	0x40014800

0800ad44 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ad44:	b480      	push	{r7}
 800ad46:	b087      	sub	sp, #28
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
 800ad4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	6a1b      	ldr	r3, [r3, #32]
 800ad52:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	6a1b      	ldr	r3, [r3, #32]
 800ad5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	685b      	ldr	r3, [r3, #4]
 800ad64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	68fa      	ldr	r2, [r7, #12]
 800ad7a:	4313      	orrs	r3, r2
 800ad7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ad7e:	693b      	ldr	r3, [r7, #16]
 800ad80:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ad84:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	689b      	ldr	r3, [r3, #8]
 800ad8a:	041b      	lsls	r3, r3, #16
 800ad8c:	693a      	ldr	r2, [r7, #16]
 800ad8e:	4313      	orrs	r3, r2
 800ad90:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	4a17      	ldr	r2, [pc, #92]	; (800adf4 <TIM_OC5_SetConfig+0xb0>)
 800ad96:	4293      	cmp	r3, r2
 800ad98:	d00f      	beq.n	800adba <TIM_OC5_SetConfig+0x76>
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	4a16      	ldr	r2, [pc, #88]	; (800adf8 <TIM_OC5_SetConfig+0xb4>)
 800ad9e:	4293      	cmp	r3, r2
 800ada0:	d00b      	beq.n	800adba <TIM_OC5_SetConfig+0x76>
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	4a15      	ldr	r2, [pc, #84]	; (800adfc <TIM_OC5_SetConfig+0xb8>)
 800ada6:	4293      	cmp	r3, r2
 800ada8:	d007      	beq.n	800adba <TIM_OC5_SetConfig+0x76>
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	4a14      	ldr	r2, [pc, #80]	; (800ae00 <TIM_OC5_SetConfig+0xbc>)
 800adae:	4293      	cmp	r3, r2
 800adb0:	d003      	beq.n	800adba <TIM_OC5_SetConfig+0x76>
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	4a13      	ldr	r2, [pc, #76]	; (800ae04 <TIM_OC5_SetConfig+0xc0>)
 800adb6:	4293      	cmp	r3, r2
 800adb8:	d109      	bne.n	800adce <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800adba:	697b      	ldr	r3, [r7, #20]
 800adbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800adc0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	695b      	ldr	r3, [r3, #20]
 800adc6:	021b      	lsls	r3, r3, #8
 800adc8:	697a      	ldr	r2, [r7, #20]
 800adca:	4313      	orrs	r3, r2
 800adcc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	697a      	ldr	r2, [r7, #20]
 800add2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	68fa      	ldr	r2, [r7, #12]
 800add8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	685a      	ldr	r2, [r3, #4]
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	693a      	ldr	r2, [r7, #16]
 800ade6:	621a      	str	r2, [r3, #32]
}
 800ade8:	bf00      	nop
 800adea:	371c      	adds	r7, #28
 800adec:	46bd      	mov	sp, r7
 800adee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf2:	4770      	bx	lr
 800adf4:	40010000 	.word	0x40010000
 800adf8:	40010400 	.word	0x40010400
 800adfc:	40014000 	.word	0x40014000
 800ae00:	40014400 	.word	0x40014400
 800ae04:	40014800 	.word	0x40014800

0800ae08 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ae08:	b480      	push	{r7}
 800ae0a:	b087      	sub	sp, #28
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
 800ae10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6a1b      	ldr	r3, [r3, #32]
 800ae16:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	6a1b      	ldr	r3, [r3, #32]
 800ae22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	685b      	ldr	r3, [r3, #4]
 800ae28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	021b      	lsls	r3, r3, #8
 800ae3e:	68fa      	ldr	r2, [r7, #12]
 800ae40:	4313      	orrs	r3, r2
 800ae42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ae44:	693b      	ldr	r3, [r7, #16]
 800ae46:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ae4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	689b      	ldr	r3, [r3, #8]
 800ae50:	051b      	lsls	r3, r3, #20
 800ae52:	693a      	ldr	r2, [r7, #16]
 800ae54:	4313      	orrs	r3, r2
 800ae56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	4a18      	ldr	r2, [pc, #96]	; (800aebc <TIM_OC6_SetConfig+0xb4>)
 800ae5c:	4293      	cmp	r3, r2
 800ae5e:	d00f      	beq.n	800ae80 <TIM_OC6_SetConfig+0x78>
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	4a17      	ldr	r2, [pc, #92]	; (800aec0 <TIM_OC6_SetConfig+0xb8>)
 800ae64:	4293      	cmp	r3, r2
 800ae66:	d00b      	beq.n	800ae80 <TIM_OC6_SetConfig+0x78>
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	4a16      	ldr	r2, [pc, #88]	; (800aec4 <TIM_OC6_SetConfig+0xbc>)
 800ae6c:	4293      	cmp	r3, r2
 800ae6e:	d007      	beq.n	800ae80 <TIM_OC6_SetConfig+0x78>
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	4a15      	ldr	r2, [pc, #84]	; (800aec8 <TIM_OC6_SetConfig+0xc0>)
 800ae74:	4293      	cmp	r3, r2
 800ae76:	d003      	beq.n	800ae80 <TIM_OC6_SetConfig+0x78>
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	4a14      	ldr	r2, [pc, #80]	; (800aecc <TIM_OC6_SetConfig+0xc4>)
 800ae7c:	4293      	cmp	r3, r2
 800ae7e:	d109      	bne.n	800ae94 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ae80:	697b      	ldr	r3, [r7, #20]
 800ae82:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ae86:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	695b      	ldr	r3, [r3, #20]
 800ae8c:	029b      	lsls	r3, r3, #10
 800ae8e:	697a      	ldr	r2, [r7, #20]
 800ae90:	4313      	orrs	r3, r2
 800ae92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	697a      	ldr	r2, [r7, #20]
 800ae98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	68fa      	ldr	r2, [r7, #12]
 800ae9e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	685a      	ldr	r2, [r3, #4]
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	693a      	ldr	r2, [r7, #16]
 800aeac:	621a      	str	r2, [r3, #32]
}
 800aeae:	bf00      	nop
 800aeb0:	371c      	adds	r7, #28
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb8:	4770      	bx	lr
 800aeba:	bf00      	nop
 800aebc:	40010000 	.word	0x40010000
 800aec0:	40010400 	.word	0x40010400
 800aec4:	40014000 	.word	0x40014000
 800aec8:	40014400 	.word	0x40014400
 800aecc:	40014800 	.word	0x40014800

0800aed0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aed0:	b480      	push	{r7}
 800aed2:	b087      	sub	sp, #28
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	60f8      	str	r0, [r7, #12]
 800aed8:	60b9      	str	r1, [r7, #8]
 800aeda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	6a1b      	ldr	r3, [r3, #32]
 800aee0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	6a1b      	ldr	r3, [r3, #32]
 800aee6:	f023 0201 	bic.w	r2, r3, #1
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	699b      	ldr	r3, [r3, #24]
 800aef2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aef4:	693b      	ldr	r3, [r7, #16]
 800aef6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aefa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	011b      	lsls	r3, r3, #4
 800af00:	693a      	ldr	r2, [r7, #16]
 800af02:	4313      	orrs	r3, r2
 800af04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800af06:	697b      	ldr	r3, [r7, #20]
 800af08:	f023 030a 	bic.w	r3, r3, #10
 800af0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800af0e:	697a      	ldr	r2, [r7, #20]
 800af10:	68bb      	ldr	r3, [r7, #8]
 800af12:	4313      	orrs	r3, r2
 800af14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	693a      	ldr	r2, [r7, #16]
 800af1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	697a      	ldr	r2, [r7, #20]
 800af20:	621a      	str	r2, [r3, #32]
}
 800af22:	bf00      	nop
 800af24:	371c      	adds	r7, #28
 800af26:	46bd      	mov	sp, r7
 800af28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2c:	4770      	bx	lr

0800af2e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800af2e:	b480      	push	{r7}
 800af30:	b087      	sub	sp, #28
 800af32:	af00      	add	r7, sp, #0
 800af34:	60f8      	str	r0, [r7, #12]
 800af36:	60b9      	str	r1, [r7, #8]
 800af38:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	6a1b      	ldr	r3, [r3, #32]
 800af3e:	f023 0210 	bic.w	r2, r3, #16
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	699b      	ldr	r3, [r3, #24]
 800af4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	6a1b      	ldr	r3, [r3, #32]
 800af50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800af52:	697b      	ldr	r3, [r7, #20]
 800af54:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800af58:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	031b      	lsls	r3, r3, #12
 800af5e:	697a      	ldr	r2, [r7, #20]
 800af60:	4313      	orrs	r3, r2
 800af62:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800af64:	693b      	ldr	r3, [r7, #16]
 800af66:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800af6a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800af6c:	68bb      	ldr	r3, [r7, #8]
 800af6e:	011b      	lsls	r3, r3, #4
 800af70:	693a      	ldr	r2, [r7, #16]
 800af72:	4313      	orrs	r3, r2
 800af74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	697a      	ldr	r2, [r7, #20]
 800af7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	693a      	ldr	r2, [r7, #16]
 800af80:	621a      	str	r2, [r3, #32]
}
 800af82:	bf00      	nop
 800af84:	371c      	adds	r7, #28
 800af86:	46bd      	mov	sp, r7
 800af88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8c:	4770      	bx	lr
	...

0800af90 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800af90:	b480      	push	{r7}
 800af92:	b085      	sub	sp, #20
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
 800af98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	689b      	ldr	r3, [r3, #8]
 800af9e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800afa0:	68fa      	ldr	r2, [r7, #12]
 800afa2:	4b09      	ldr	r3, [pc, #36]	; (800afc8 <TIM_ITRx_SetConfig+0x38>)
 800afa4:	4013      	ands	r3, r2
 800afa6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800afa8:	683a      	ldr	r2, [r7, #0]
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	4313      	orrs	r3, r2
 800afae:	f043 0307 	orr.w	r3, r3, #7
 800afb2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	68fa      	ldr	r2, [r7, #12]
 800afb8:	609a      	str	r2, [r3, #8]
}
 800afba:	bf00      	nop
 800afbc:	3714      	adds	r7, #20
 800afbe:	46bd      	mov	sp, r7
 800afc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc4:	4770      	bx	lr
 800afc6:	bf00      	nop
 800afc8:	ffcfff8f 	.word	0xffcfff8f

0800afcc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800afcc:	b480      	push	{r7}
 800afce:	b087      	sub	sp, #28
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	60f8      	str	r0, [r7, #12]
 800afd4:	60b9      	str	r1, [r7, #8]
 800afd6:	607a      	str	r2, [r7, #4]
 800afd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	689b      	ldr	r3, [r3, #8]
 800afde:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800afe0:	697b      	ldr	r3, [r7, #20]
 800afe2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800afe6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	021a      	lsls	r2, r3, #8
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	431a      	orrs	r2, r3
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	4313      	orrs	r3, r2
 800aff4:	697a      	ldr	r2, [r7, #20]
 800aff6:	4313      	orrs	r3, r2
 800aff8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	697a      	ldr	r2, [r7, #20]
 800affe:	609a      	str	r2, [r3, #8]
}
 800b000:	bf00      	nop
 800b002:	371c      	adds	r7, #28
 800b004:	46bd      	mov	sp, r7
 800b006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00a:	4770      	bx	lr

0800b00c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b00c:	b480      	push	{r7}
 800b00e:	b085      	sub	sp, #20
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
 800b014:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b01c:	2b01      	cmp	r3, #1
 800b01e:	d101      	bne.n	800b024 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b020:	2302      	movs	r3, #2
 800b022:	e068      	b.n	800b0f6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2201      	movs	r2, #1
 800b028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2202      	movs	r2, #2
 800b030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	685b      	ldr	r3, [r3, #4]
 800b03a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	689b      	ldr	r3, [r3, #8]
 800b042:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	4a2e      	ldr	r2, [pc, #184]	; (800b104 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b04a:	4293      	cmp	r3, r2
 800b04c:	d004      	beq.n	800b058 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	4a2d      	ldr	r2, [pc, #180]	; (800b108 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b054:	4293      	cmp	r3, r2
 800b056:	d108      	bne.n	800b06a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b05e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	685b      	ldr	r3, [r3, #4]
 800b064:	68fa      	ldr	r2, [r7, #12]
 800b066:	4313      	orrs	r3, r2
 800b068:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b070:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	68fa      	ldr	r2, [r7, #12]
 800b078:	4313      	orrs	r3, r2
 800b07a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	68fa      	ldr	r2, [r7, #12]
 800b082:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	4a1e      	ldr	r2, [pc, #120]	; (800b104 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b08a:	4293      	cmp	r3, r2
 800b08c:	d01d      	beq.n	800b0ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b096:	d018      	beq.n	800b0ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	4a1b      	ldr	r2, [pc, #108]	; (800b10c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b09e:	4293      	cmp	r3, r2
 800b0a0:	d013      	beq.n	800b0ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	4a1a      	ldr	r2, [pc, #104]	; (800b110 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b0a8:	4293      	cmp	r3, r2
 800b0aa:	d00e      	beq.n	800b0ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	4a18      	ldr	r2, [pc, #96]	; (800b114 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b0b2:	4293      	cmp	r3, r2
 800b0b4:	d009      	beq.n	800b0ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	4a13      	ldr	r2, [pc, #76]	; (800b108 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b0bc:	4293      	cmp	r3, r2
 800b0be:	d004      	beq.n	800b0ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	4a14      	ldr	r2, [pc, #80]	; (800b118 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b0c6:	4293      	cmp	r3, r2
 800b0c8:	d10c      	bne.n	800b0e4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b0ca:	68bb      	ldr	r3, [r7, #8]
 800b0cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b0d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b0d2:	683b      	ldr	r3, [r7, #0]
 800b0d4:	689b      	ldr	r3, [r3, #8]
 800b0d6:	68ba      	ldr	r2, [r7, #8]
 800b0d8:	4313      	orrs	r3, r2
 800b0da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	68ba      	ldr	r2, [r7, #8]
 800b0e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2201      	movs	r2, #1
 800b0e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b0f4:	2300      	movs	r3, #0
}
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	3714      	adds	r7, #20
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b100:	4770      	bx	lr
 800b102:	bf00      	nop
 800b104:	40010000 	.word	0x40010000
 800b108:	40010400 	.word	0x40010400
 800b10c:	40000400 	.word	0x40000400
 800b110:	40000800 	.word	0x40000800
 800b114:	40000c00 	.word	0x40000c00
 800b118:	40001800 	.word	0x40001800

0800b11c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b11c:	b480      	push	{r7}
 800b11e:	b085      	sub	sp, #20
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
 800b124:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b126:	2300      	movs	r3, #0
 800b128:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b130:	2b01      	cmp	r3, #1
 800b132:	d101      	bne.n	800b138 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b134:	2302      	movs	r3, #2
 800b136:	e065      	b.n	800b204 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2201      	movs	r2, #1
 800b13c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b146:	683b      	ldr	r3, [r7, #0]
 800b148:	68db      	ldr	r3, [r3, #12]
 800b14a:	4313      	orrs	r3, r2
 800b14c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b154:	683b      	ldr	r3, [r7, #0]
 800b156:	689b      	ldr	r3, [r3, #8]
 800b158:	4313      	orrs	r3, r2
 800b15a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b162:	683b      	ldr	r3, [r7, #0]
 800b164:	685b      	ldr	r3, [r3, #4]
 800b166:	4313      	orrs	r3, r2
 800b168:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	4313      	orrs	r3, r2
 800b176:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	691b      	ldr	r3, [r3, #16]
 800b182:	4313      	orrs	r3, r2
 800b184:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	695b      	ldr	r3, [r3, #20]
 800b190:	4313      	orrs	r3, r2
 800b192:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b19e:	4313      	orrs	r3, r2
 800b1a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	699b      	ldr	r3, [r3, #24]
 800b1ac:	041b      	lsls	r3, r3, #16
 800b1ae:	4313      	orrs	r3, r2
 800b1b0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	4a16      	ldr	r2, [pc, #88]	; (800b210 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b1b8:	4293      	cmp	r3, r2
 800b1ba:	d004      	beq.n	800b1c6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	4a14      	ldr	r2, [pc, #80]	; (800b214 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b1c2:	4293      	cmp	r3, r2
 800b1c4:	d115      	bne.n	800b1f2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1d0:	051b      	lsls	r3, r3, #20
 800b1d2:	4313      	orrs	r3, r2
 800b1d4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	69db      	ldr	r3, [r3, #28]
 800b1e0:	4313      	orrs	r3, r2
 800b1e2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	6a1b      	ldr	r3, [r3, #32]
 800b1ee:	4313      	orrs	r3, r2
 800b1f0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	68fa      	ldr	r2, [r7, #12]
 800b1f8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b202:	2300      	movs	r3, #0
}
 800b204:	4618      	mov	r0, r3
 800b206:	3714      	adds	r7, #20
 800b208:	46bd      	mov	sp, r7
 800b20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20e:	4770      	bx	lr
 800b210:	40010000 	.word	0x40010000
 800b214:	40010400 	.word	0x40010400

0800b218 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b218:	b480      	push	{r7}
 800b21a:	b083      	sub	sp, #12
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b220:	bf00      	nop
 800b222:	370c      	adds	r7, #12
 800b224:	46bd      	mov	sp, r7
 800b226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22a:	4770      	bx	lr

0800b22c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b22c:	b480      	push	{r7}
 800b22e:	b083      	sub	sp, #12
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b234:	bf00      	nop
 800b236:	370c      	adds	r7, #12
 800b238:	46bd      	mov	sp, r7
 800b23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23e:	4770      	bx	lr

0800b240 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b240:	b480      	push	{r7}
 800b242:	b083      	sub	sp, #12
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b248:	bf00      	nop
 800b24a:	370c      	adds	r7, #12
 800b24c:	46bd      	mov	sp, r7
 800b24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b252:	4770      	bx	lr

0800b254 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b254:	b580      	push	{r7, lr}
 800b256:	b082      	sub	sp, #8
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d101      	bne.n	800b266 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b262:	2301      	movs	r3, #1
 800b264:	e042      	b.n	800b2ec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d106      	bne.n	800b27e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2200      	movs	r2, #0
 800b274:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b278:	6878      	ldr	r0, [r7, #4]
 800b27a:	f7f6 fad9 	bl	8001830 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	2224      	movs	r2, #36	; 0x24
 800b282:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	681a      	ldr	r2, [r3, #0]
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	f022 0201 	bic.w	r2, r2, #1
 800b294:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	f000 fbc6 	bl	800ba28 <UART_SetConfig>
 800b29c:	4603      	mov	r3, r0
 800b29e:	2b01      	cmp	r3, #1
 800b2a0:	d101      	bne.n	800b2a6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b2a2:	2301      	movs	r3, #1
 800b2a4:	e022      	b.n	800b2ec <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d002      	beq.n	800b2b4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b2ae:	6878      	ldr	r0, [r7, #4]
 800b2b0:	f001 f924 	bl	800c4fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	685a      	ldr	r2, [r3, #4]
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b2c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	689a      	ldr	r2, [r3, #8]
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b2d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	681a      	ldr	r2, [r3, #0]
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	f042 0201 	orr.w	r2, r2, #1
 800b2e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b2e4:	6878      	ldr	r0, [r7, #4]
 800b2e6:	f001 f9ab 	bl	800c640 <UART_CheckIdleState>
 800b2ea:	4603      	mov	r3, r0
}
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	3708      	adds	r7, #8
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	bd80      	pop	{r7, pc}

0800b2f4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b084      	sub	sp, #16
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	60f8      	str	r0, [r7, #12]
 800b2fc:	60b9      	str	r1, [r7, #8]
 800b2fe:	4613      	mov	r3, r2
 800b300:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b308:	2b20      	cmp	r3, #32
 800b30a:	d131      	bne.n	800b370 <HAL_UART_Receive_DMA+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800b30c:	68bb      	ldr	r3, [r7, #8]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d002      	beq.n	800b318 <HAL_UART_Receive_DMA+0x24>
 800b312:	88fb      	ldrh	r3, [r7, #6]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d101      	bne.n	800b31c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800b318:	2301      	movs	r3, #1
 800b31a:	e02a      	b.n	800b372 <HAL_UART_Receive_DMA+0x7e>
    }

    __HAL_LOCK(huart);
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b322:	2b01      	cmp	r3, #1
 800b324:	d101      	bne.n	800b32a <HAL_UART_Receive_DMA+0x36>
 800b326:	2302      	movs	r3, #2
 800b328:	e023      	b.n	800b372 <HAL_UART_Receive_DMA+0x7e>
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	2201      	movs	r2, #1
 800b32e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	2200      	movs	r2, #0
 800b336:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	4a0f      	ldr	r2, [pc, #60]	; (800b37c <HAL_UART_Receive_DMA+0x88>)
 800b33e:	4293      	cmp	r3, r2
 800b340:	d00e      	beq.n	800b360 <HAL_UART_Receive_DMA+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	685b      	ldr	r3, [r3, #4]
 800b348:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d007      	beq.n	800b360 <HAL_UART_Receive_DMA+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	681a      	ldr	r2, [r3, #0]
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800b35e:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b360:	88fb      	ldrh	r3, [r7, #6]
 800b362:	461a      	mov	r2, r3
 800b364:	68b9      	ldr	r1, [r7, #8]
 800b366:	68f8      	ldr	r0, [r7, #12]
 800b368:	f001 fa36 	bl	800c7d8 <UART_Start_Receive_DMA>
 800b36c:	4603      	mov	r3, r0
 800b36e:	e000      	b.n	800b372 <HAL_UART_Receive_DMA+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800b370:	2302      	movs	r3, #2
  }
}
 800b372:	4618      	mov	r0, r3
 800b374:	3710      	adds	r7, #16
 800b376:	46bd      	mov	sp, r7
 800b378:	bd80      	pop	{r7, pc}
 800b37a:	bf00      	nop
 800b37c:	58000c00 	.word	0x58000c00

0800b380 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b084      	sub	sp, #16
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b38e:	60fb      	str	r3, [r7, #12]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b396:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	689b      	ldr	r3, [r3, #8]
 800b39e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3a2:	2b80      	cmp	r3, #128	; 0x80
 800b3a4:	d127      	bne.n	800b3f6 <HAL_UART_DMAStop+0x76>
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	2b21      	cmp	r3, #33	; 0x21
 800b3aa:	d124      	bne.n	800b3f6 <HAL_UART_DMAStop+0x76>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	689a      	ldr	r2, [r3, #8]
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b3ba:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d015      	beq.n	800b3f0 <HAL_UART_DMAStop+0x70>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	f7f7 fbd3 	bl	8002b74 <HAL_DMA_Abort>
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d00d      	beq.n	800b3f0 <HAL_UART_DMAStop+0x70>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b3d8:	4618      	mov	r0, r3
 800b3da:	f7f9 f867 	bl	80044ac <HAL_DMA_GetError>
 800b3de:	4603      	mov	r3, r0
 800b3e0:	2b20      	cmp	r3, #32
 800b3e2:	d105      	bne.n	800b3f0 <HAL_UART_DMAStop+0x70>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2210      	movs	r2, #16
 800b3e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 800b3ec:	2303      	movs	r3, #3
 800b3ee:	e032      	b.n	800b456 <HAL_UART_DMAStop+0xd6>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800b3f0:	6878      	ldr	r0, [r7, #4]
 800b3f2:	f001 fa5f 	bl	800c8b4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	689b      	ldr	r3, [r3, #8]
 800b3fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b400:	2b40      	cmp	r3, #64	; 0x40
 800b402:	d127      	bne.n	800b454 <HAL_UART_DMAStop+0xd4>
 800b404:	68bb      	ldr	r3, [r7, #8]
 800b406:	2b22      	cmp	r3, #34	; 0x22
 800b408:	d124      	bne.n	800b454 <HAL_UART_DMAStop+0xd4>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	689a      	ldr	r2, [r3, #8]
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b418:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d015      	beq.n	800b44e <HAL_UART_DMAStop+0xce>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b426:	4618      	mov	r0, r3
 800b428:	f7f7 fba4 	bl	8002b74 <HAL_DMA_Abort>
 800b42c:	4603      	mov	r3, r0
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d00d      	beq.n	800b44e <HAL_UART_DMAStop+0xce>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b436:	4618      	mov	r0, r3
 800b438:	f7f9 f838 	bl	80044ac <HAL_DMA_GetError>
 800b43c:	4603      	mov	r3, r0
 800b43e:	2b20      	cmp	r3, #32
 800b440:	d105      	bne.n	800b44e <HAL_UART_DMAStop+0xce>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	2210      	movs	r2, #16
 800b446:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 800b44a:	2303      	movs	r3, #3
 800b44c:	e003      	b.n	800b456 <HAL_UART_DMAStop+0xd6>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800b44e:	6878      	ldr	r0, [r7, #4]
 800b450:	f001 fa4e 	bl	800c8f0 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800b454:	2300      	movs	r3, #0
}
 800b456:	4618      	mov	r0, r3
 800b458:	3710      	adds	r7, #16
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bd80      	pop	{r7, pc}
	...

0800b460 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b088      	sub	sp, #32
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	69db      	ldr	r3, [r3, #28]
 800b46e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	689b      	ldr	r3, [r3, #8]
 800b47e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b480:	69fa      	ldr	r2, [r7, #28]
 800b482:	f640 030f 	movw	r3, #2063	; 0x80f
 800b486:	4013      	ands	r3, r2
 800b488:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800b48a:	693b      	ldr	r3, [r7, #16]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d118      	bne.n	800b4c2 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b490:	69fb      	ldr	r3, [r7, #28]
 800b492:	f003 0320 	and.w	r3, r3, #32
 800b496:	2b00      	cmp	r3, #0
 800b498:	d013      	beq.n	800b4c2 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b49a:	69bb      	ldr	r3, [r7, #24]
 800b49c:	f003 0320 	and.w	r3, r3, #32
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d104      	bne.n	800b4ae <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b4a4:	697b      	ldr	r3, [r7, #20]
 800b4a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d009      	beq.n	800b4c2 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	f000 8282 	beq.w	800b9bc <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4bc:	6878      	ldr	r0, [r7, #4]
 800b4be:	4798      	blx	r3
      }
      return;
 800b4c0:	e27c      	b.n	800b9bc <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b4c2:	693b      	ldr	r3, [r7, #16]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	f000 80ef 	beq.w	800b6a8 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b4ca:	697a      	ldr	r2, [r7, #20]
 800b4cc:	4b73      	ldr	r3, [pc, #460]	; (800b69c <HAL_UART_IRQHandler+0x23c>)
 800b4ce:	4013      	ands	r3, r2
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d105      	bne.n	800b4e0 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b4d4:	69ba      	ldr	r2, [r7, #24]
 800b4d6:	4b72      	ldr	r3, [pc, #456]	; (800b6a0 <HAL_UART_IRQHandler+0x240>)
 800b4d8:	4013      	ands	r3, r2
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	f000 80e4 	beq.w	800b6a8 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b4e0:	69fb      	ldr	r3, [r7, #28]
 800b4e2:	f003 0301 	and.w	r3, r3, #1
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d010      	beq.n	800b50c <HAL_UART_IRQHandler+0xac>
 800b4ea:	69bb      	ldr	r3, [r7, #24]
 800b4ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d00b      	beq.n	800b50c <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	2201      	movs	r2, #1
 800b4fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b502:	f043 0201 	orr.w	r2, r3, #1
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b50c:	69fb      	ldr	r3, [r7, #28]
 800b50e:	f003 0302 	and.w	r3, r3, #2
 800b512:	2b00      	cmp	r3, #0
 800b514:	d010      	beq.n	800b538 <HAL_UART_IRQHandler+0xd8>
 800b516:	697b      	ldr	r3, [r7, #20]
 800b518:	f003 0301 	and.w	r3, r3, #1
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d00b      	beq.n	800b538 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	2202      	movs	r2, #2
 800b526:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b52e:	f043 0204 	orr.w	r2, r3, #4
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b538:	69fb      	ldr	r3, [r7, #28]
 800b53a:	f003 0304 	and.w	r3, r3, #4
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d010      	beq.n	800b564 <HAL_UART_IRQHandler+0x104>
 800b542:	697b      	ldr	r3, [r7, #20]
 800b544:	f003 0301 	and.w	r3, r3, #1
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d00b      	beq.n	800b564 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	2204      	movs	r2, #4
 800b552:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b55a:	f043 0202 	orr.w	r2, r3, #2
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b564:	69fb      	ldr	r3, [r7, #28]
 800b566:	f003 0308 	and.w	r3, r3, #8
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d015      	beq.n	800b59a <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b56e:	69bb      	ldr	r3, [r7, #24]
 800b570:	f003 0320 	and.w	r3, r3, #32
 800b574:	2b00      	cmp	r3, #0
 800b576:	d104      	bne.n	800b582 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b578:	697a      	ldr	r2, [r7, #20]
 800b57a:	4b48      	ldr	r3, [pc, #288]	; (800b69c <HAL_UART_IRQHandler+0x23c>)
 800b57c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d00b      	beq.n	800b59a <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	2208      	movs	r2, #8
 800b588:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b590:	f043 0208 	orr.w	r2, r3, #8
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b59a:	69fb      	ldr	r3, [r7, #28]
 800b59c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d011      	beq.n	800b5c8 <HAL_UART_IRQHandler+0x168>
 800b5a4:	69bb      	ldr	r3, [r7, #24]
 800b5a6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d00c      	beq.n	800b5c8 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b5b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b5be:	f043 0220 	orr.w	r2, r3, #32
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	f000 81f6 	beq.w	800b9c0 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b5d4:	69fb      	ldr	r3, [r7, #28]
 800b5d6:	f003 0320 	and.w	r3, r3, #32
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d011      	beq.n	800b602 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b5de:	69bb      	ldr	r3, [r7, #24]
 800b5e0:	f003 0320 	and.w	r3, r3, #32
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d104      	bne.n	800b5f2 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b5e8:	697b      	ldr	r3, [r7, #20]
 800b5ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d007      	beq.n	800b602 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d003      	beq.n	800b602 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5fe:	6878      	ldr	r0, [r7, #4]
 800b600:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b608:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	689b      	ldr	r3, [r3, #8]
 800b610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b614:	2b40      	cmp	r3, #64	; 0x40
 800b616:	d004      	beq.n	800b622 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d031      	beq.n	800b686 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b622:	6878      	ldr	r0, [r7, #4]
 800b624:	f001 f964 	bl	800c8f0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	689b      	ldr	r3, [r3, #8]
 800b62e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b632:	2b40      	cmp	r3, #64	; 0x40
 800b634:	d123      	bne.n	800b67e <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	689a      	ldr	r2, [r3, #8]
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b644:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d013      	beq.n	800b676 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b652:	4a14      	ldr	r2, [pc, #80]	; (800b6a4 <HAL_UART_IRQHandler+0x244>)
 800b654:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b65a:	4618      	mov	r0, r3
 800b65c:	f7f7 fda8 	bl	80031b0 <HAL_DMA_Abort_IT>
 800b660:	4603      	mov	r3, r0
 800b662:	2b00      	cmp	r3, #0
 800b664:	d017      	beq.n	800b696 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b66a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b66c:	687a      	ldr	r2, [r7, #4]
 800b66e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800b670:	4610      	mov	r0, r2
 800b672:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b674:	e00f      	b.n	800b696 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b676:	6878      	ldr	r0, [r7, #4]
 800b678:	f000 f9c0 	bl	800b9fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b67c:	e00b      	b.n	800b696 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b67e:	6878      	ldr	r0, [r7, #4]
 800b680:	f000 f9bc 	bl	800b9fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b684:	e007      	b.n	800b696 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b686:	6878      	ldr	r0, [r7, #4]
 800b688:	f000 f9b8 	bl	800b9fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	2200      	movs	r2, #0
 800b690:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800b694:	e194      	b.n	800b9c0 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b696:	bf00      	nop
    return;
 800b698:	e192      	b.n	800b9c0 <HAL_UART_IRQHandler+0x560>
 800b69a:	bf00      	nop
 800b69c:	10000001 	.word	0x10000001
 800b6a0:	04000120 	.word	0x04000120
 800b6a4:	0800caa3 	.word	0x0800caa3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b6ac:	2b01      	cmp	r3, #1
 800b6ae:	f040 810f 	bne.w	800b8d0 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b6b2:	69fb      	ldr	r3, [r7, #28]
 800b6b4:	f003 0310 	and.w	r3, r3, #16
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	f000 8109 	beq.w	800b8d0 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b6be:	69bb      	ldr	r3, [r7, #24]
 800b6c0:	f003 0310 	and.w	r3, r3, #16
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	f000 8103 	beq.w	800b8d0 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	2210      	movs	r2, #16
 800b6d0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	689b      	ldr	r3, [r3, #8]
 800b6d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6dc:	2b40      	cmp	r3, #64	; 0x40
 800b6de:	f040 80bb 	bne.w	800b858 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	4a8f      	ldr	r2, [pc, #572]	; (800b928 <HAL_UART_IRQHandler+0x4c8>)
 800b6ea:	4293      	cmp	r3, r2
 800b6ec:	d059      	beq.n	800b7a2 <HAL_UART_IRQHandler+0x342>
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	4a8d      	ldr	r2, [pc, #564]	; (800b92c <HAL_UART_IRQHandler+0x4cc>)
 800b6f6:	4293      	cmp	r3, r2
 800b6f8:	d053      	beq.n	800b7a2 <HAL_UART_IRQHandler+0x342>
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	4a8b      	ldr	r2, [pc, #556]	; (800b930 <HAL_UART_IRQHandler+0x4d0>)
 800b702:	4293      	cmp	r3, r2
 800b704:	d04d      	beq.n	800b7a2 <HAL_UART_IRQHandler+0x342>
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	4a89      	ldr	r2, [pc, #548]	; (800b934 <HAL_UART_IRQHandler+0x4d4>)
 800b70e:	4293      	cmp	r3, r2
 800b710:	d047      	beq.n	800b7a2 <HAL_UART_IRQHandler+0x342>
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	4a87      	ldr	r2, [pc, #540]	; (800b938 <HAL_UART_IRQHandler+0x4d8>)
 800b71a:	4293      	cmp	r3, r2
 800b71c:	d041      	beq.n	800b7a2 <HAL_UART_IRQHandler+0x342>
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	4a85      	ldr	r2, [pc, #532]	; (800b93c <HAL_UART_IRQHandler+0x4dc>)
 800b726:	4293      	cmp	r3, r2
 800b728:	d03b      	beq.n	800b7a2 <HAL_UART_IRQHandler+0x342>
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	4a83      	ldr	r2, [pc, #524]	; (800b940 <HAL_UART_IRQHandler+0x4e0>)
 800b732:	4293      	cmp	r3, r2
 800b734:	d035      	beq.n	800b7a2 <HAL_UART_IRQHandler+0x342>
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	4a81      	ldr	r2, [pc, #516]	; (800b944 <HAL_UART_IRQHandler+0x4e4>)
 800b73e:	4293      	cmp	r3, r2
 800b740:	d02f      	beq.n	800b7a2 <HAL_UART_IRQHandler+0x342>
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	4a7f      	ldr	r2, [pc, #508]	; (800b948 <HAL_UART_IRQHandler+0x4e8>)
 800b74a:	4293      	cmp	r3, r2
 800b74c:	d029      	beq.n	800b7a2 <HAL_UART_IRQHandler+0x342>
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	4a7d      	ldr	r2, [pc, #500]	; (800b94c <HAL_UART_IRQHandler+0x4ec>)
 800b756:	4293      	cmp	r3, r2
 800b758:	d023      	beq.n	800b7a2 <HAL_UART_IRQHandler+0x342>
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	4a7b      	ldr	r2, [pc, #492]	; (800b950 <HAL_UART_IRQHandler+0x4f0>)
 800b762:	4293      	cmp	r3, r2
 800b764:	d01d      	beq.n	800b7a2 <HAL_UART_IRQHandler+0x342>
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	4a79      	ldr	r2, [pc, #484]	; (800b954 <HAL_UART_IRQHandler+0x4f4>)
 800b76e:	4293      	cmp	r3, r2
 800b770:	d017      	beq.n	800b7a2 <HAL_UART_IRQHandler+0x342>
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	4a77      	ldr	r2, [pc, #476]	; (800b958 <HAL_UART_IRQHandler+0x4f8>)
 800b77a:	4293      	cmp	r3, r2
 800b77c:	d011      	beq.n	800b7a2 <HAL_UART_IRQHandler+0x342>
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	4a75      	ldr	r2, [pc, #468]	; (800b95c <HAL_UART_IRQHandler+0x4fc>)
 800b786:	4293      	cmp	r3, r2
 800b788:	d00b      	beq.n	800b7a2 <HAL_UART_IRQHandler+0x342>
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	4a73      	ldr	r2, [pc, #460]	; (800b960 <HAL_UART_IRQHandler+0x500>)
 800b792:	4293      	cmp	r3, r2
 800b794:	d005      	beq.n	800b7a2 <HAL_UART_IRQHandler+0x342>
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	4a71      	ldr	r2, [pc, #452]	; (800b964 <HAL_UART_IRQHandler+0x504>)
 800b79e:	4293      	cmp	r3, r2
 800b7a0:	d105      	bne.n	800b7ae <HAL_UART_IRQHandler+0x34e>
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	685b      	ldr	r3, [r3, #4]
 800b7aa:	b29b      	uxth	r3, r3
 800b7ac:	e004      	b.n	800b7b8 <HAL_UART_IRQHandler+0x358>
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	685b      	ldr	r3, [r3, #4]
 800b7b6:	b29b      	uxth	r3, r3
 800b7b8:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800b7ba:	893b      	ldrh	r3, [r7, #8]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	f000 8101 	beq.w	800b9c4 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b7c8:	893a      	ldrh	r2, [r7, #8]
 800b7ca:	429a      	cmp	r2, r3
 800b7cc:	f080 80fa 	bcs.w	800b9c4 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	893a      	ldrh	r2, [r7, #8]
 800b7d4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b7dc:	69db      	ldr	r3, [r3, #28]
 800b7de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b7e2:	d02b      	beq.n	800b83c <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	681a      	ldr	r2, [r3, #0]
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b7f2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	689a      	ldr	r2, [r3, #8]
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	f022 0201 	bic.w	r2, r2, #1
 800b802:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	689a      	ldr	r2, [r3, #8]
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b812:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2220      	movs	r2, #32
 800b818:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2200      	movs	r2, #0
 800b820:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	681a      	ldr	r2, [r3, #0]
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	f022 0210 	bic.w	r2, r2, #16
 800b830:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b836:	4618      	mov	r0, r3
 800b838:	f7f7 f99c 	bl	8002b74 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b848:	b29b      	uxth	r3, r3
 800b84a:	1ad3      	subs	r3, r2, r3
 800b84c:	b29b      	uxth	r3, r3
 800b84e:	4619      	mov	r1, r3
 800b850:	6878      	ldr	r0, [r7, #4]
 800b852:	f000 f8dd 	bl	800ba10 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b856:	e0b5      	b.n	800b9c4 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b864:	b29b      	uxth	r3, r3
 800b866:	1ad3      	subs	r3, r2, r3
 800b868:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b870:	b29b      	uxth	r3, r3
 800b872:	2b00      	cmp	r3, #0
 800b874:	f000 80a8 	beq.w	800b9c8 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 800b878:	897b      	ldrh	r3, [r7, #10]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	f000 80a4 	beq.w	800b9c8 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	681a      	ldr	r2, [r3, #0]
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b88e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	6899      	ldr	r1, [r3, #8]
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681a      	ldr	r2, [r3, #0]
 800b89a:	4b33      	ldr	r3, [pc, #204]	; (800b968 <HAL_UART_IRQHandler+0x508>)
 800b89c:	400b      	ands	r3, r1
 800b89e:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	2220      	movs	r2, #32
 800b8a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	681a      	ldr	r2, [r3, #0]
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	f022 0210 	bic.w	r2, r2, #16
 800b8c2:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b8c4:	897b      	ldrh	r3, [r7, #10]
 800b8c6:	4619      	mov	r1, r3
 800b8c8:	6878      	ldr	r0, [r7, #4]
 800b8ca:	f000 f8a1 	bl	800ba10 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b8ce:	e07b      	b.n	800b9c8 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b8d0:	69fb      	ldr	r3, [r7, #28]
 800b8d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d00d      	beq.n	800b8f6 <HAL_UART_IRQHandler+0x496>
 800b8da:	697b      	ldr	r3, [r7, #20]
 800b8dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d008      	beq.n	800b8f6 <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b8ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b8ee:	6878      	ldr	r0, [r7, #4]
 800b8f0:	f001 f907 	bl	800cb02 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b8f4:	e06b      	b.n	800b9ce <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b8f6:	69fb      	ldr	r3, [r7, #28]
 800b8f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d035      	beq.n	800b96c <HAL_UART_IRQHandler+0x50c>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b900:	69bb      	ldr	r3, [r7, #24]
 800b902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b906:	2b00      	cmp	r3, #0
 800b908:	d104      	bne.n	800b914 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b90a:	697b      	ldr	r3, [r7, #20]
 800b90c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b910:	2b00      	cmp	r3, #0
 800b912:	d02b      	beq.n	800b96c <HAL_UART_IRQHandler+0x50c>
  {
    if (huart->TxISR != NULL)
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d057      	beq.n	800b9cc <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b920:	6878      	ldr	r0, [r7, #4]
 800b922:	4798      	blx	r3
    }
    return;
 800b924:	e052      	b.n	800b9cc <HAL_UART_IRQHandler+0x56c>
 800b926:	bf00      	nop
 800b928:	40020010 	.word	0x40020010
 800b92c:	40020028 	.word	0x40020028
 800b930:	40020040 	.word	0x40020040
 800b934:	40020058 	.word	0x40020058
 800b938:	40020070 	.word	0x40020070
 800b93c:	40020088 	.word	0x40020088
 800b940:	400200a0 	.word	0x400200a0
 800b944:	400200b8 	.word	0x400200b8
 800b948:	40020410 	.word	0x40020410
 800b94c:	40020428 	.word	0x40020428
 800b950:	40020440 	.word	0x40020440
 800b954:	40020458 	.word	0x40020458
 800b958:	40020470 	.word	0x40020470
 800b95c:	40020488 	.word	0x40020488
 800b960:	400204a0 	.word	0x400204a0
 800b964:	400204b8 	.word	0x400204b8
 800b968:	effffffe 	.word	0xeffffffe
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b96c:	69fb      	ldr	r3, [r7, #28]
 800b96e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b972:	2b00      	cmp	r3, #0
 800b974:	d008      	beq.n	800b988 <HAL_UART_IRQHandler+0x528>
 800b976:	69bb      	ldr	r3, [r7, #24]
 800b978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d003      	beq.n	800b988 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800b980:	6878      	ldr	r0, [r7, #4]
 800b982:	f001 f8a4 	bl	800cace <UART_EndTransmit_IT>
    return;
 800b986:	e022      	b.n	800b9ce <HAL_UART_IRQHandler+0x56e>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b988:	69fb      	ldr	r3, [r7, #28]
 800b98a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d008      	beq.n	800b9a4 <HAL_UART_IRQHandler+0x544>
 800b992:	69bb      	ldr	r3, [r7, #24]
 800b994:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d003      	beq.n	800b9a4 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b99c:	6878      	ldr	r0, [r7, #4]
 800b99e:	f001 f8c4 	bl	800cb2a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b9a2:	e014      	b.n	800b9ce <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b9a4:	69fb      	ldr	r3, [r7, #28]
 800b9a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d00f      	beq.n	800b9ce <HAL_UART_IRQHandler+0x56e>
 800b9ae:	69bb      	ldr	r3, [r7, #24]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	da0c      	bge.n	800b9ce <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b9b4:	6878      	ldr	r0, [r7, #4]
 800b9b6:	f001 f8ae 	bl	800cb16 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b9ba:	e008      	b.n	800b9ce <HAL_UART_IRQHandler+0x56e>
      return;
 800b9bc:	bf00      	nop
 800b9be:	e006      	b.n	800b9ce <HAL_UART_IRQHandler+0x56e>
    return;
 800b9c0:	bf00      	nop
 800b9c2:	e004      	b.n	800b9ce <HAL_UART_IRQHandler+0x56e>
      return;
 800b9c4:	bf00      	nop
 800b9c6:	e002      	b.n	800b9ce <HAL_UART_IRQHandler+0x56e>
      return;
 800b9c8:	bf00      	nop
 800b9ca:	e000      	b.n	800b9ce <HAL_UART_IRQHandler+0x56e>
    return;
 800b9cc:	bf00      	nop
  }
}
 800b9ce:	3720      	adds	r7, #32
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	bd80      	pop	{r7, pc}

0800b9d4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b9d4:	b480      	push	{r7}
 800b9d6:	b083      	sub	sp, #12
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b9dc:	bf00      	nop
 800b9de:	370c      	adds	r7, #12
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e6:	4770      	bx	lr

0800b9e8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b9e8:	b480      	push	{r7}
 800b9ea:	b083      	sub	sp, #12
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800b9f0:	bf00      	nop
 800b9f2:	370c      	adds	r7, #12
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fa:	4770      	bx	lr

0800b9fc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b9fc:	b480      	push	{r7}
 800b9fe:	b083      	sub	sp, #12
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ba04:	bf00      	nop
 800ba06:	370c      	adds	r7, #12
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0e:	4770      	bx	lr

0800ba10 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ba10:	b480      	push	{r7}
 800ba12:	b083      	sub	sp, #12
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
 800ba18:	460b      	mov	r3, r1
 800ba1a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ba1c:	bf00      	nop
 800ba1e:	370c      	adds	r7, #12
 800ba20:	46bd      	mov	sp, r7
 800ba22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba26:	4770      	bx	lr

0800ba28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ba28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ba2c:	b092      	sub	sp, #72	; 0x48
 800ba2e:	af00      	add	r7, sp, #0
 800ba30:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ba32:	2300      	movs	r3, #0
 800ba34:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ba38:	697b      	ldr	r3, [r7, #20]
 800ba3a:	689a      	ldr	r2, [r3, #8]
 800ba3c:	697b      	ldr	r3, [r7, #20]
 800ba3e:	691b      	ldr	r3, [r3, #16]
 800ba40:	431a      	orrs	r2, r3
 800ba42:	697b      	ldr	r3, [r7, #20]
 800ba44:	695b      	ldr	r3, [r3, #20]
 800ba46:	431a      	orrs	r2, r3
 800ba48:	697b      	ldr	r3, [r7, #20]
 800ba4a:	69db      	ldr	r3, [r3, #28]
 800ba4c:	4313      	orrs	r3, r2
 800ba4e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ba50:	697b      	ldr	r3, [r7, #20]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	681a      	ldr	r2, [r3, #0]
 800ba56:	4bbe      	ldr	r3, [pc, #760]	; (800bd50 <UART_SetConfig+0x328>)
 800ba58:	4013      	ands	r3, r2
 800ba5a:	697a      	ldr	r2, [r7, #20]
 800ba5c:	6812      	ldr	r2, [r2, #0]
 800ba5e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ba60:	430b      	orrs	r3, r1
 800ba62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ba64:	697b      	ldr	r3, [r7, #20]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	685b      	ldr	r3, [r3, #4]
 800ba6a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ba6e:	697b      	ldr	r3, [r7, #20]
 800ba70:	68da      	ldr	r2, [r3, #12]
 800ba72:	697b      	ldr	r3, [r7, #20]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	430a      	orrs	r2, r1
 800ba78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ba7a:	697b      	ldr	r3, [r7, #20]
 800ba7c:	699b      	ldr	r3, [r3, #24]
 800ba7e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ba80:	697b      	ldr	r3, [r7, #20]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	4ab3      	ldr	r2, [pc, #716]	; (800bd54 <UART_SetConfig+0x32c>)
 800ba86:	4293      	cmp	r3, r2
 800ba88:	d004      	beq.n	800ba94 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ba8a:	697b      	ldr	r3, [r7, #20]
 800ba8c:	6a1b      	ldr	r3, [r3, #32]
 800ba8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ba90:	4313      	orrs	r3, r2
 800ba92:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ba94:	697b      	ldr	r3, [r7, #20]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	689a      	ldr	r2, [r3, #8]
 800ba9a:	4baf      	ldr	r3, [pc, #700]	; (800bd58 <UART_SetConfig+0x330>)
 800ba9c:	4013      	ands	r3, r2
 800ba9e:	697a      	ldr	r2, [r7, #20]
 800baa0:	6812      	ldr	r2, [r2, #0]
 800baa2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800baa4:	430b      	orrs	r3, r1
 800baa6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800baa8:	697b      	ldr	r3, [r7, #20]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baae:	f023 010f 	bic.w	r1, r3, #15
 800bab2:	697b      	ldr	r3, [r7, #20]
 800bab4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bab6:	697b      	ldr	r3, [r7, #20]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	430a      	orrs	r2, r1
 800babc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800babe:	697b      	ldr	r3, [r7, #20]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	4aa6      	ldr	r2, [pc, #664]	; (800bd5c <UART_SetConfig+0x334>)
 800bac4:	4293      	cmp	r3, r2
 800bac6:	d177      	bne.n	800bbb8 <UART_SetConfig+0x190>
 800bac8:	4ba5      	ldr	r3, [pc, #660]	; (800bd60 <UART_SetConfig+0x338>)
 800baca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bacc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bad0:	2b28      	cmp	r3, #40	; 0x28
 800bad2:	d86d      	bhi.n	800bbb0 <UART_SetConfig+0x188>
 800bad4:	a201      	add	r2, pc, #4	; (adr r2, 800badc <UART_SetConfig+0xb4>)
 800bad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bada:	bf00      	nop
 800badc:	0800bb81 	.word	0x0800bb81
 800bae0:	0800bbb1 	.word	0x0800bbb1
 800bae4:	0800bbb1 	.word	0x0800bbb1
 800bae8:	0800bbb1 	.word	0x0800bbb1
 800baec:	0800bbb1 	.word	0x0800bbb1
 800baf0:	0800bbb1 	.word	0x0800bbb1
 800baf4:	0800bbb1 	.word	0x0800bbb1
 800baf8:	0800bbb1 	.word	0x0800bbb1
 800bafc:	0800bb89 	.word	0x0800bb89
 800bb00:	0800bbb1 	.word	0x0800bbb1
 800bb04:	0800bbb1 	.word	0x0800bbb1
 800bb08:	0800bbb1 	.word	0x0800bbb1
 800bb0c:	0800bbb1 	.word	0x0800bbb1
 800bb10:	0800bbb1 	.word	0x0800bbb1
 800bb14:	0800bbb1 	.word	0x0800bbb1
 800bb18:	0800bbb1 	.word	0x0800bbb1
 800bb1c:	0800bb91 	.word	0x0800bb91
 800bb20:	0800bbb1 	.word	0x0800bbb1
 800bb24:	0800bbb1 	.word	0x0800bbb1
 800bb28:	0800bbb1 	.word	0x0800bbb1
 800bb2c:	0800bbb1 	.word	0x0800bbb1
 800bb30:	0800bbb1 	.word	0x0800bbb1
 800bb34:	0800bbb1 	.word	0x0800bbb1
 800bb38:	0800bbb1 	.word	0x0800bbb1
 800bb3c:	0800bb99 	.word	0x0800bb99
 800bb40:	0800bbb1 	.word	0x0800bbb1
 800bb44:	0800bbb1 	.word	0x0800bbb1
 800bb48:	0800bbb1 	.word	0x0800bbb1
 800bb4c:	0800bbb1 	.word	0x0800bbb1
 800bb50:	0800bbb1 	.word	0x0800bbb1
 800bb54:	0800bbb1 	.word	0x0800bbb1
 800bb58:	0800bbb1 	.word	0x0800bbb1
 800bb5c:	0800bba1 	.word	0x0800bba1
 800bb60:	0800bbb1 	.word	0x0800bbb1
 800bb64:	0800bbb1 	.word	0x0800bbb1
 800bb68:	0800bbb1 	.word	0x0800bbb1
 800bb6c:	0800bbb1 	.word	0x0800bbb1
 800bb70:	0800bbb1 	.word	0x0800bbb1
 800bb74:	0800bbb1 	.word	0x0800bbb1
 800bb78:	0800bbb1 	.word	0x0800bbb1
 800bb7c:	0800bba9 	.word	0x0800bba9
 800bb80:	2301      	movs	r3, #1
 800bb82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bb86:	e222      	b.n	800bfce <UART_SetConfig+0x5a6>
 800bb88:	2304      	movs	r3, #4
 800bb8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bb8e:	e21e      	b.n	800bfce <UART_SetConfig+0x5a6>
 800bb90:	2308      	movs	r3, #8
 800bb92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bb96:	e21a      	b.n	800bfce <UART_SetConfig+0x5a6>
 800bb98:	2310      	movs	r3, #16
 800bb9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bb9e:	e216      	b.n	800bfce <UART_SetConfig+0x5a6>
 800bba0:	2320      	movs	r3, #32
 800bba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bba6:	e212      	b.n	800bfce <UART_SetConfig+0x5a6>
 800bba8:	2340      	movs	r3, #64	; 0x40
 800bbaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bbae:	e20e      	b.n	800bfce <UART_SetConfig+0x5a6>
 800bbb0:	2380      	movs	r3, #128	; 0x80
 800bbb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bbb6:	e20a      	b.n	800bfce <UART_SetConfig+0x5a6>
 800bbb8:	697b      	ldr	r3, [r7, #20]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	4a69      	ldr	r2, [pc, #420]	; (800bd64 <UART_SetConfig+0x33c>)
 800bbbe:	4293      	cmp	r3, r2
 800bbc0:	d130      	bne.n	800bc24 <UART_SetConfig+0x1fc>
 800bbc2:	4b67      	ldr	r3, [pc, #412]	; (800bd60 <UART_SetConfig+0x338>)
 800bbc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbc6:	f003 0307 	and.w	r3, r3, #7
 800bbca:	2b05      	cmp	r3, #5
 800bbcc:	d826      	bhi.n	800bc1c <UART_SetConfig+0x1f4>
 800bbce:	a201      	add	r2, pc, #4	; (adr r2, 800bbd4 <UART_SetConfig+0x1ac>)
 800bbd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbd4:	0800bbed 	.word	0x0800bbed
 800bbd8:	0800bbf5 	.word	0x0800bbf5
 800bbdc:	0800bbfd 	.word	0x0800bbfd
 800bbe0:	0800bc05 	.word	0x0800bc05
 800bbe4:	0800bc0d 	.word	0x0800bc0d
 800bbe8:	0800bc15 	.word	0x0800bc15
 800bbec:	2300      	movs	r3, #0
 800bbee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bbf2:	e1ec      	b.n	800bfce <UART_SetConfig+0x5a6>
 800bbf4:	2304      	movs	r3, #4
 800bbf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bbfa:	e1e8      	b.n	800bfce <UART_SetConfig+0x5a6>
 800bbfc:	2308      	movs	r3, #8
 800bbfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc02:	e1e4      	b.n	800bfce <UART_SetConfig+0x5a6>
 800bc04:	2310      	movs	r3, #16
 800bc06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc0a:	e1e0      	b.n	800bfce <UART_SetConfig+0x5a6>
 800bc0c:	2320      	movs	r3, #32
 800bc0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc12:	e1dc      	b.n	800bfce <UART_SetConfig+0x5a6>
 800bc14:	2340      	movs	r3, #64	; 0x40
 800bc16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc1a:	e1d8      	b.n	800bfce <UART_SetConfig+0x5a6>
 800bc1c:	2380      	movs	r3, #128	; 0x80
 800bc1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc22:	e1d4      	b.n	800bfce <UART_SetConfig+0x5a6>
 800bc24:	697b      	ldr	r3, [r7, #20]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	4a4f      	ldr	r2, [pc, #316]	; (800bd68 <UART_SetConfig+0x340>)
 800bc2a:	4293      	cmp	r3, r2
 800bc2c:	d130      	bne.n	800bc90 <UART_SetConfig+0x268>
 800bc2e:	4b4c      	ldr	r3, [pc, #304]	; (800bd60 <UART_SetConfig+0x338>)
 800bc30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc32:	f003 0307 	and.w	r3, r3, #7
 800bc36:	2b05      	cmp	r3, #5
 800bc38:	d826      	bhi.n	800bc88 <UART_SetConfig+0x260>
 800bc3a:	a201      	add	r2, pc, #4	; (adr r2, 800bc40 <UART_SetConfig+0x218>)
 800bc3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc40:	0800bc59 	.word	0x0800bc59
 800bc44:	0800bc61 	.word	0x0800bc61
 800bc48:	0800bc69 	.word	0x0800bc69
 800bc4c:	0800bc71 	.word	0x0800bc71
 800bc50:	0800bc79 	.word	0x0800bc79
 800bc54:	0800bc81 	.word	0x0800bc81
 800bc58:	2300      	movs	r3, #0
 800bc5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc5e:	e1b6      	b.n	800bfce <UART_SetConfig+0x5a6>
 800bc60:	2304      	movs	r3, #4
 800bc62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc66:	e1b2      	b.n	800bfce <UART_SetConfig+0x5a6>
 800bc68:	2308      	movs	r3, #8
 800bc6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc6e:	e1ae      	b.n	800bfce <UART_SetConfig+0x5a6>
 800bc70:	2310      	movs	r3, #16
 800bc72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc76:	e1aa      	b.n	800bfce <UART_SetConfig+0x5a6>
 800bc78:	2320      	movs	r3, #32
 800bc7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc7e:	e1a6      	b.n	800bfce <UART_SetConfig+0x5a6>
 800bc80:	2340      	movs	r3, #64	; 0x40
 800bc82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc86:	e1a2      	b.n	800bfce <UART_SetConfig+0x5a6>
 800bc88:	2380      	movs	r3, #128	; 0x80
 800bc8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc8e:	e19e      	b.n	800bfce <UART_SetConfig+0x5a6>
 800bc90:	697b      	ldr	r3, [r7, #20]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	4a35      	ldr	r2, [pc, #212]	; (800bd6c <UART_SetConfig+0x344>)
 800bc96:	4293      	cmp	r3, r2
 800bc98:	d130      	bne.n	800bcfc <UART_SetConfig+0x2d4>
 800bc9a:	4b31      	ldr	r3, [pc, #196]	; (800bd60 <UART_SetConfig+0x338>)
 800bc9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc9e:	f003 0307 	and.w	r3, r3, #7
 800bca2:	2b05      	cmp	r3, #5
 800bca4:	d826      	bhi.n	800bcf4 <UART_SetConfig+0x2cc>
 800bca6:	a201      	add	r2, pc, #4	; (adr r2, 800bcac <UART_SetConfig+0x284>)
 800bca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcac:	0800bcc5 	.word	0x0800bcc5
 800bcb0:	0800bccd 	.word	0x0800bccd
 800bcb4:	0800bcd5 	.word	0x0800bcd5
 800bcb8:	0800bcdd 	.word	0x0800bcdd
 800bcbc:	0800bce5 	.word	0x0800bce5
 800bcc0:	0800bced 	.word	0x0800bced
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bcca:	e180      	b.n	800bfce <UART_SetConfig+0x5a6>
 800bccc:	2304      	movs	r3, #4
 800bcce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bcd2:	e17c      	b.n	800bfce <UART_SetConfig+0x5a6>
 800bcd4:	2308      	movs	r3, #8
 800bcd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bcda:	e178      	b.n	800bfce <UART_SetConfig+0x5a6>
 800bcdc:	2310      	movs	r3, #16
 800bcde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bce2:	e174      	b.n	800bfce <UART_SetConfig+0x5a6>
 800bce4:	2320      	movs	r3, #32
 800bce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bcea:	e170      	b.n	800bfce <UART_SetConfig+0x5a6>
 800bcec:	2340      	movs	r3, #64	; 0x40
 800bcee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bcf2:	e16c      	b.n	800bfce <UART_SetConfig+0x5a6>
 800bcf4:	2380      	movs	r3, #128	; 0x80
 800bcf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bcfa:	e168      	b.n	800bfce <UART_SetConfig+0x5a6>
 800bcfc:	697b      	ldr	r3, [r7, #20]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	4a1b      	ldr	r2, [pc, #108]	; (800bd70 <UART_SetConfig+0x348>)
 800bd02:	4293      	cmp	r3, r2
 800bd04:	d142      	bne.n	800bd8c <UART_SetConfig+0x364>
 800bd06:	4b16      	ldr	r3, [pc, #88]	; (800bd60 <UART_SetConfig+0x338>)
 800bd08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd0a:	f003 0307 	and.w	r3, r3, #7
 800bd0e:	2b05      	cmp	r3, #5
 800bd10:	d838      	bhi.n	800bd84 <UART_SetConfig+0x35c>
 800bd12:	a201      	add	r2, pc, #4	; (adr r2, 800bd18 <UART_SetConfig+0x2f0>)
 800bd14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd18:	0800bd31 	.word	0x0800bd31
 800bd1c:	0800bd39 	.word	0x0800bd39
 800bd20:	0800bd41 	.word	0x0800bd41
 800bd24:	0800bd49 	.word	0x0800bd49
 800bd28:	0800bd75 	.word	0x0800bd75
 800bd2c:	0800bd7d 	.word	0x0800bd7d
 800bd30:	2300      	movs	r3, #0
 800bd32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd36:	e14a      	b.n	800bfce <UART_SetConfig+0x5a6>
 800bd38:	2304      	movs	r3, #4
 800bd3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd3e:	e146      	b.n	800bfce <UART_SetConfig+0x5a6>
 800bd40:	2308      	movs	r3, #8
 800bd42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd46:	e142      	b.n	800bfce <UART_SetConfig+0x5a6>
 800bd48:	2310      	movs	r3, #16
 800bd4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd4e:	e13e      	b.n	800bfce <UART_SetConfig+0x5a6>
 800bd50:	cfff69f3 	.word	0xcfff69f3
 800bd54:	58000c00 	.word	0x58000c00
 800bd58:	11fff4ff 	.word	0x11fff4ff
 800bd5c:	40011000 	.word	0x40011000
 800bd60:	58024400 	.word	0x58024400
 800bd64:	40004400 	.word	0x40004400
 800bd68:	40004800 	.word	0x40004800
 800bd6c:	40004c00 	.word	0x40004c00
 800bd70:	40005000 	.word	0x40005000
 800bd74:	2320      	movs	r3, #32
 800bd76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd7a:	e128      	b.n	800bfce <UART_SetConfig+0x5a6>
 800bd7c:	2340      	movs	r3, #64	; 0x40
 800bd7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd82:	e124      	b.n	800bfce <UART_SetConfig+0x5a6>
 800bd84:	2380      	movs	r3, #128	; 0x80
 800bd86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd8a:	e120      	b.n	800bfce <UART_SetConfig+0x5a6>
 800bd8c:	697b      	ldr	r3, [r7, #20]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	4acb      	ldr	r2, [pc, #812]	; (800c0c0 <UART_SetConfig+0x698>)
 800bd92:	4293      	cmp	r3, r2
 800bd94:	d176      	bne.n	800be84 <UART_SetConfig+0x45c>
 800bd96:	4bcb      	ldr	r3, [pc, #812]	; (800c0c4 <UART_SetConfig+0x69c>)
 800bd98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bd9e:	2b28      	cmp	r3, #40	; 0x28
 800bda0:	d86c      	bhi.n	800be7c <UART_SetConfig+0x454>
 800bda2:	a201      	add	r2, pc, #4	; (adr r2, 800bda8 <UART_SetConfig+0x380>)
 800bda4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bda8:	0800be4d 	.word	0x0800be4d
 800bdac:	0800be7d 	.word	0x0800be7d
 800bdb0:	0800be7d 	.word	0x0800be7d
 800bdb4:	0800be7d 	.word	0x0800be7d
 800bdb8:	0800be7d 	.word	0x0800be7d
 800bdbc:	0800be7d 	.word	0x0800be7d
 800bdc0:	0800be7d 	.word	0x0800be7d
 800bdc4:	0800be7d 	.word	0x0800be7d
 800bdc8:	0800be55 	.word	0x0800be55
 800bdcc:	0800be7d 	.word	0x0800be7d
 800bdd0:	0800be7d 	.word	0x0800be7d
 800bdd4:	0800be7d 	.word	0x0800be7d
 800bdd8:	0800be7d 	.word	0x0800be7d
 800bddc:	0800be7d 	.word	0x0800be7d
 800bde0:	0800be7d 	.word	0x0800be7d
 800bde4:	0800be7d 	.word	0x0800be7d
 800bde8:	0800be5d 	.word	0x0800be5d
 800bdec:	0800be7d 	.word	0x0800be7d
 800bdf0:	0800be7d 	.word	0x0800be7d
 800bdf4:	0800be7d 	.word	0x0800be7d
 800bdf8:	0800be7d 	.word	0x0800be7d
 800bdfc:	0800be7d 	.word	0x0800be7d
 800be00:	0800be7d 	.word	0x0800be7d
 800be04:	0800be7d 	.word	0x0800be7d
 800be08:	0800be65 	.word	0x0800be65
 800be0c:	0800be7d 	.word	0x0800be7d
 800be10:	0800be7d 	.word	0x0800be7d
 800be14:	0800be7d 	.word	0x0800be7d
 800be18:	0800be7d 	.word	0x0800be7d
 800be1c:	0800be7d 	.word	0x0800be7d
 800be20:	0800be7d 	.word	0x0800be7d
 800be24:	0800be7d 	.word	0x0800be7d
 800be28:	0800be6d 	.word	0x0800be6d
 800be2c:	0800be7d 	.word	0x0800be7d
 800be30:	0800be7d 	.word	0x0800be7d
 800be34:	0800be7d 	.word	0x0800be7d
 800be38:	0800be7d 	.word	0x0800be7d
 800be3c:	0800be7d 	.word	0x0800be7d
 800be40:	0800be7d 	.word	0x0800be7d
 800be44:	0800be7d 	.word	0x0800be7d
 800be48:	0800be75 	.word	0x0800be75
 800be4c:	2301      	movs	r3, #1
 800be4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be52:	e0bc      	b.n	800bfce <UART_SetConfig+0x5a6>
 800be54:	2304      	movs	r3, #4
 800be56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be5a:	e0b8      	b.n	800bfce <UART_SetConfig+0x5a6>
 800be5c:	2308      	movs	r3, #8
 800be5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be62:	e0b4      	b.n	800bfce <UART_SetConfig+0x5a6>
 800be64:	2310      	movs	r3, #16
 800be66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be6a:	e0b0      	b.n	800bfce <UART_SetConfig+0x5a6>
 800be6c:	2320      	movs	r3, #32
 800be6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be72:	e0ac      	b.n	800bfce <UART_SetConfig+0x5a6>
 800be74:	2340      	movs	r3, #64	; 0x40
 800be76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be7a:	e0a8      	b.n	800bfce <UART_SetConfig+0x5a6>
 800be7c:	2380      	movs	r3, #128	; 0x80
 800be7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be82:	e0a4      	b.n	800bfce <UART_SetConfig+0x5a6>
 800be84:	697b      	ldr	r3, [r7, #20]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	4a8f      	ldr	r2, [pc, #572]	; (800c0c8 <UART_SetConfig+0x6a0>)
 800be8a:	4293      	cmp	r3, r2
 800be8c:	d130      	bne.n	800bef0 <UART_SetConfig+0x4c8>
 800be8e:	4b8d      	ldr	r3, [pc, #564]	; (800c0c4 <UART_SetConfig+0x69c>)
 800be90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be92:	f003 0307 	and.w	r3, r3, #7
 800be96:	2b05      	cmp	r3, #5
 800be98:	d826      	bhi.n	800bee8 <UART_SetConfig+0x4c0>
 800be9a:	a201      	add	r2, pc, #4	; (adr r2, 800bea0 <UART_SetConfig+0x478>)
 800be9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bea0:	0800beb9 	.word	0x0800beb9
 800bea4:	0800bec1 	.word	0x0800bec1
 800bea8:	0800bec9 	.word	0x0800bec9
 800beac:	0800bed1 	.word	0x0800bed1
 800beb0:	0800bed9 	.word	0x0800bed9
 800beb4:	0800bee1 	.word	0x0800bee1
 800beb8:	2300      	movs	r3, #0
 800beba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bebe:	e086      	b.n	800bfce <UART_SetConfig+0x5a6>
 800bec0:	2304      	movs	r3, #4
 800bec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bec6:	e082      	b.n	800bfce <UART_SetConfig+0x5a6>
 800bec8:	2308      	movs	r3, #8
 800beca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bece:	e07e      	b.n	800bfce <UART_SetConfig+0x5a6>
 800bed0:	2310      	movs	r3, #16
 800bed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bed6:	e07a      	b.n	800bfce <UART_SetConfig+0x5a6>
 800bed8:	2320      	movs	r3, #32
 800beda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bede:	e076      	b.n	800bfce <UART_SetConfig+0x5a6>
 800bee0:	2340      	movs	r3, #64	; 0x40
 800bee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bee6:	e072      	b.n	800bfce <UART_SetConfig+0x5a6>
 800bee8:	2380      	movs	r3, #128	; 0x80
 800beea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800beee:	e06e      	b.n	800bfce <UART_SetConfig+0x5a6>
 800bef0:	697b      	ldr	r3, [r7, #20]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	4a75      	ldr	r2, [pc, #468]	; (800c0cc <UART_SetConfig+0x6a4>)
 800bef6:	4293      	cmp	r3, r2
 800bef8:	d130      	bne.n	800bf5c <UART_SetConfig+0x534>
 800befa:	4b72      	ldr	r3, [pc, #456]	; (800c0c4 <UART_SetConfig+0x69c>)
 800befc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800befe:	f003 0307 	and.w	r3, r3, #7
 800bf02:	2b05      	cmp	r3, #5
 800bf04:	d826      	bhi.n	800bf54 <UART_SetConfig+0x52c>
 800bf06:	a201      	add	r2, pc, #4	; (adr r2, 800bf0c <UART_SetConfig+0x4e4>)
 800bf08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf0c:	0800bf25 	.word	0x0800bf25
 800bf10:	0800bf2d 	.word	0x0800bf2d
 800bf14:	0800bf35 	.word	0x0800bf35
 800bf18:	0800bf3d 	.word	0x0800bf3d
 800bf1c:	0800bf45 	.word	0x0800bf45
 800bf20:	0800bf4d 	.word	0x0800bf4d
 800bf24:	2300      	movs	r3, #0
 800bf26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf2a:	e050      	b.n	800bfce <UART_SetConfig+0x5a6>
 800bf2c:	2304      	movs	r3, #4
 800bf2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf32:	e04c      	b.n	800bfce <UART_SetConfig+0x5a6>
 800bf34:	2308      	movs	r3, #8
 800bf36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf3a:	e048      	b.n	800bfce <UART_SetConfig+0x5a6>
 800bf3c:	2310      	movs	r3, #16
 800bf3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf42:	e044      	b.n	800bfce <UART_SetConfig+0x5a6>
 800bf44:	2320      	movs	r3, #32
 800bf46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf4a:	e040      	b.n	800bfce <UART_SetConfig+0x5a6>
 800bf4c:	2340      	movs	r3, #64	; 0x40
 800bf4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf52:	e03c      	b.n	800bfce <UART_SetConfig+0x5a6>
 800bf54:	2380      	movs	r3, #128	; 0x80
 800bf56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf5a:	e038      	b.n	800bfce <UART_SetConfig+0x5a6>
 800bf5c:	697b      	ldr	r3, [r7, #20]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	4a5b      	ldr	r2, [pc, #364]	; (800c0d0 <UART_SetConfig+0x6a8>)
 800bf62:	4293      	cmp	r3, r2
 800bf64:	d130      	bne.n	800bfc8 <UART_SetConfig+0x5a0>
 800bf66:	4b57      	ldr	r3, [pc, #348]	; (800c0c4 <UART_SetConfig+0x69c>)
 800bf68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf6a:	f003 0307 	and.w	r3, r3, #7
 800bf6e:	2b05      	cmp	r3, #5
 800bf70:	d826      	bhi.n	800bfc0 <UART_SetConfig+0x598>
 800bf72:	a201      	add	r2, pc, #4	; (adr r2, 800bf78 <UART_SetConfig+0x550>)
 800bf74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf78:	0800bf91 	.word	0x0800bf91
 800bf7c:	0800bf99 	.word	0x0800bf99
 800bf80:	0800bfa1 	.word	0x0800bfa1
 800bf84:	0800bfa9 	.word	0x0800bfa9
 800bf88:	0800bfb1 	.word	0x0800bfb1
 800bf8c:	0800bfb9 	.word	0x0800bfb9
 800bf90:	2302      	movs	r3, #2
 800bf92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf96:	e01a      	b.n	800bfce <UART_SetConfig+0x5a6>
 800bf98:	2304      	movs	r3, #4
 800bf9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf9e:	e016      	b.n	800bfce <UART_SetConfig+0x5a6>
 800bfa0:	2308      	movs	r3, #8
 800bfa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfa6:	e012      	b.n	800bfce <UART_SetConfig+0x5a6>
 800bfa8:	2310      	movs	r3, #16
 800bfaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfae:	e00e      	b.n	800bfce <UART_SetConfig+0x5a6>
 800bfb0:	2320      	movs	r3, #32
 800bfb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfb6:	e00a      	b.n	800bfce <UART_SetConfig+0x5a6>
 800bfb8:	2340      	movs	r3, #64	; 0x40
 800bfba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfbe:	e006      	b.n	800bfce <UART_SetConfig+0x5a6>
 800bfc0:	2380      	movs	r3, #128	; 0x80
 800bfc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfc6:	e002      	b.n	800bfce <UART_SetConfig+0x5a6>
 800bfc8:	2380      	movs	r3, #128	; 0x80
 800bfca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bfce:	697b      	ldr	r3, [r7, #20]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	4a3f      	ldr	r2, [pc, #252]	; (800c0d0 <UART_SetConfig+0x6a8>)
 800bfd4:	4293      	cmp	r3, r2
 800bfd6:	f040 80f8 	bne.w	800c1ca <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bfda:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800bfde:	2b20      	cmp	r3, #32
 800bfe0:	dc46      	bgt.n	800c070 <UART_SetConfig+0x648>
 800bfe2:	2b02      	cmp	r3, #2
 800bfe4:	f2c0 8082 	blt.w	800c0ec <UART_SetConfig+0x6c4>
 800bfe8:	3b02      	subs	r3, #2
 800bfea:	2b1e      	cmp	r3, #30
 800bfec:	d87e      	bhi.n	800c0ec <UART_SetConfig+0x6c4>
 800bfee:	a201      	add	r2, pc, #4	; (adr r2, 800bff4 <UART_SetConfig+0x5cc>)
 800bff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bff4:	0800c077 	.word	0x0800c077
 800bff8:	0800c0ed 	.word	0x0800c0ed
 800bffc:	0800c07f 	.word	0x0800c07f
 800c000:	0800c0ed 	.word	0x0800c0ed
 800c004:	0800c0ed 	.word	0x0800c0ed
 800c008:	0800c0ed 	.word	0x0800c0ed
 800c00c:	0800c08f 	.word	0x0800c08f
 800c010:	0800c0ed 	.word	0x0800c0ed
 800c014:	0800c0ed 	.word	0x0800c0ed
 800c018:	0800c0ed 	.word	0x0800c0ed
 800c01c:	0800c0ed 	.word	0x0800c0ed
 800c020:	0800c0ed 	.word	0x0800c0ed
 800c024:	0800c0ed 	.word	0x0800c0ed
 800c028:	0800c0ed 	.word	0x0800c0ed
 800c02c:	0800c09f 	.word	0x0800c09f
 800c030:	0800c0ed 	.word	0x0800c0ed
 800c034:	0800c0ed 	.word	0x0800c0ed
 800c038:	0800c0ed 	.word	0x0800c0ed
 800c03c:	0800c0ed 	.word	0x0800c0ed
 800c040:	0800c0ed 	.word	0x0800c0ed
 800c044:	0800c0ed 	.word	0x0800c0ed
 800c048:	0800c0ed 	.word	0x0800c0ed
 800c04c:	0800c0ed 	.word	0x0800c0ed
 800c050:	0800c0ed 	.word	0x0800c0ed
 800c054:	0800c0ed 	.word	0x0800c0ed
 800c058:	0800c0ed 	.word	0x0800c0ed
 800c05c:	0800c0ed 	.word	0x0800c0ed
 800c060:	0800c0ed 	.word	0x0800c0ed
 800c064:	0800c0ed 	.word	0x0800c0ed
 800c068:	0800c0ed 	.word	0x0800c0ed
 800c06c:	0800c0df 	.word	0x0800c0df
 800c070:	2b40      	cmp	r3, #64	; 0x40
 800c072:	d037      	beq.n	800c0e4 <UART_SetConfig+0x6bc>
 800c074:	e03a      	b.n	800c0ec <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c076:	f7fd f919 	bl	80092ac <HAL_RCCEx_GetD3PCLK1Freq>
 800c07a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c07c:	e03c      	b.n	800c0f8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c07e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c082:	4618      	mov	r0, r3
 800c084:	f7fd f928 	bl	80092d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c08a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c08c:	e034      	b.n	800c0f8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c08e:	f107 0318 	add.w	r3, r7, #24
 800c092:	4618      	mov	r0, r3
 800c094:	f7fd fa74 	bl	8009580 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c098:	69fb      	ldr	r3, [r7, #28]
 800c09a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c09c:	e02c      	b.n	800c0f8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c09e:	4b09      	ldr	r3, [pc, #36]	; (800c0c4 <UART_SetConfig+0x69c>)
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	f003 0320 	and.w	r3, r3, #32
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d016      	beq.n	800c0d8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c0aa:	4b06      	ldr	r3, [pc, #24]	; (800c0c4 <UART_SetConfig+0x69c>)
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	08db      	lsrs	r3, r3, #3
 800c0b0:	f003 0303 	and.w	r3, r3, #3
 800c0b4:	4a07      	ldr	r2, [pc, #28]	; (800c0d4 <UART_SetConfig+0x6ac>)
 800c0b6:	fa22 f303 	lsr.w	r3, r2, r3
 800c0ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c0bc:	e01c      	b.n	800c0f8 <UART_SetConfig+0x6d0>
 800c0be:	bf00      	nop
 800c0c0:	40011400 	.word	0x40011400
 800c0c4:	58024400 	.word	0x58024400
 800c0c8:	40007800 	.word	0x40007800
 800c0cc:	40007c00 	.word	0x40007c00
 800c0d0:	58000c00 	.word	0x58000c00
 800c0d4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800c0d8:	4b9e      	ldr	r3, [pc, #632]	; (800c354 <UART_SetConfig+0x92c>)
 800c0da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0dc:	e00c      	b.n	800c0f8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c0de:	4b9e      	ldr	r3, [pc, #632]	; (800c358 <UART_SetConfig+0x930>)
 800c0e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0e2:	e009      	b.n	800c0f8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c0e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c0e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0ea:	e005      	b.n	800c0f8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c0f0:	2301      	movs	r3, #1
 800c0f2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c0f6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c0f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	f000 81e0 	beq.w	800c4c0 <UART_SetConfig+0xa98>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c100:	697b      	ldr	r3, [r7, #20]
 800c102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c104:	4a95      	ldr	r2, [pc, #596]	; (800c35c <UART_SetConfig+0x934>)
 800c106:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c10a:	461a      	mov	r2, r3
 800c10c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c10e:	fbb3 f3f2 	udiv	r3, r3, r2
 800c112:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c114:	697b      	ldr	r3, [r7, #20]
 800c116:	685a      	ldr	r2, [r3, #4]
 800c118:	4613      	mov	r3, r2
 800c11a:	005b      	lsls	r3, r3, #1
 800c11c:	4413      	add	r3, r2
 800c11e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c120:	429a      	cmp	r2, r3
 800c122:	d305      	bcc.n	800c130 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c124:	697b      	ldr	r3, [r7, #20]
 800c126:	685b      	ldr	r3, [r3, #4]
 800c128:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c12a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c12c:	429a      	cmp	r2, r3
 800c12e:	d903      	bls.n	800c138 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800c130:	2301      	movs	r3, #1
 800c132:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c136:	e1c3      	b.n	800c4c0 <UART_SetConfig+0xa98>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c138:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c13a:	2200      	movs	r2, #0
 800c13c:	60bb      	str	r3, [r7, #8]
 800c13e:	60fa      	str	r2, [r7, #12]
 800c140:	697b      	ldr	r3, [r7, #20]
 800c142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c144:	4a85      	ldr	r2, [pc, #532]	; (800c35c <UART_SetConfig+0x934>)
 800c146:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c14a:	b29b      	uxth	r3, r3
 800c14c:	2200      	movs	r2, #0
 800c14e:	603b      	str	r3, [r7, #0]
 800c150:	607a      	str	r2, [r7, #4]
 800c152:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c156:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c15a:	f7f4 f919 	bl	8000390 <__aeabi_uldivmod>
 800c15e:	4602      	mov	r2, r0
 800c160:	460b      	mov	r3, r1
 800c162:	4610      	mov	r0, r2
 800c164:	4619      	mov	r1, r3
 800c166:	f04f 0200 	mov.w	r2, #0
 800c16a:	f04f 0300 	mov.w	r3, #0
 800c16e:	020b      	lsls	r3, r1, #8
 800c170:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c174:	0202      	lsls	r2, r0, #8
 800c176:	6979      	ldr	r1, [r7, #20]
 800c178:	6849      	ldr	r1, [r1, #4]
 800c17a:	0849      	lsrs	r1, r1, #1
 800c17c:	2000      	movs	r0, #0
 800c17e:	460c      	mov	r4, r1
 800c180:	4605      	mov	r5, r0
 800c182:	eb12 0804 	adds.w	r8, r2, r4
 800c186:	eb43 0905 	adc.w	r9, r3, r5
 800c18a:	697b      	ldr	r3, [r7, #20]
 800c18c:	685b      	ldr	r3, [r3, #4]
 800c18e:	2200      	movs	r2, #0
 800c190:	469a      	mov	sl, r3
 800c192:	4693      	mov	fp, r2
 800c194:	4652      	mov	r2, sl
 800c196:	465b      	mov	r3, fp
 800c198:	4640      	mov	r0, r8
 800c19a:	4649      	mov	r1, r9
 800c19c:	f7f4 f8f8 	bl	8000390 <__aeabi_uldivmod>
 800c1a0:	4602      	mov	r2, r0
 800c1a2:	460b      	mov	r3, r1
 800c1a4:	4613      	mov	r3, r2
 800c1a6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c1a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c1ae:	d308      	bcc.n	800c1c2 <UART_SetConfig+0x79a>
 800c1b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c1b6:	d204      	bcs.n	800c1c2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800c1b8:	697b      	ldr	r3, [r7, #20]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c1be:	60da      	str	r2, [r3, #12]
 800c1c0:	e17e      	b.n	800c4c0 <UART_SetConfig+0xa98>
        }
        else
        {
          ret = HAL_ERROR;
 800c1c2:	2301      	movs	r3, #1
 800c1c4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c1c8:	e17a      	b.n	800c4c0 <UART_SetConfig+0xa98>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c1ca:	697b      	ldr	r3, [r7, #20]
 800c1cc:	69db      	ldr	r3, [r3, #28]
 800c1ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c1d2:	f040 80c7 	bne.w	800c364 <UART_SetConfig+0x93c>
  {
    switch (clocksource)
 800c1d6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c1da:	2b20      	cmp	r3, #32
 800c1dc:	dc48      	bgt.n	800c270 <UART_SetConfig+0x848>
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	db7b      	blt.n	800c2da <UART_SetConfig+0x8b2>
 800c1e2:	2b20      	cmp	r3, #32
 800c1e4:	d879      	bhi.n	800c2da <UART_SetConfig+0x8b2>
 800c1e6:	a201      	add	r2, pc, #4	; (adr r2, 800c1ec <UART_SetConfig+0x7c4>)
 800c1e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1ec:	0800c277 	.word	0x0800c277
 800c1f0:	0800c27f 	.word	0x0800c27f
 800c1f4:	0800c2db 	.word	0x0800c2db
 800c1f8:	0800c2db 	.word	0x0800c2db
 800c1fc:	0800c287 	.word	0x0800c287
 800c200:	0800c2db 	.word	0x0800c2db
 800c204:	0800c2db 	.word	0x0800c2db
 800c208:	0800c2db 	.word	0x0800c2db
 800c20c:	0800c297 	.word	0x0800c297
 800c210:	0800c2db 	.word	0x0800c2db
 800c214:	0800c2db 	.word	0x0800c2db
 800c218:	0800c2db 	.word	0x0800c2db
 800c21c:	0800c2db 	.word	0x0800c2db
 800c220:	0800c2db 	.word	0x0800c2db
 800c224:	0800c2db 	.word	0x0800c2db
 800c228:	0800c2db 	.word	0x0800c2db
 800c22c:	0800c2a7 	.word	0x0800c2a7
 800c230:	0800c2db 	.word	0x0800c2db
 800c234:	0800c2db 	.word	0x0800c2db
 800c238:	0800c2db 	.word	0x0800c2db
 800c23c:	0800c2db 	.word	0x0800c2db
 800c240:	0800c2db 	.word	0x0800c2db
 800c244:	0800c2db 	.word	0x0800c2db
 800c248:	0800c2db 	.word	0x0800c2db
 800c24c:	0800c2db 	.word	0x0800c2db
 800c250:	0800c2db 	.word	0x0800c2db
 800c254:	0800c2db 	.word	0x0800c2db
 800c258:	0800c2db 	.word	0x0800c2db
 800c25c:	0800c2db 	.word	0x0800c2db
 800c260:	0800c2db 	.word	0x0800c2db
 800c264:	0800c2db 	.word	0x0800c2db
 800c268:	0800c2db 	.word	0x0800c2db
 800c26c:	0800c2cd 	.word	0x0800c2cd
 800c270:	2b40      	cmp	r3, #64	; 0x40
 800c272:	d02e      	beq.n	800c2d2 <UART_SetConfig+0x8aa>
 800c274:	e031      	b.n	800c2da <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c276:	f7fc f865 	bl	8008344 <HAL_RCC_GetPCLK1Freq>
 800c27a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c27c:	e033      	b.n	800c2e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c27e:	f7fc f877 	bl	8008370 <HAL_RCC_GetPCLK2Freq>
 800c282:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c284:	e02f      	b.n	800c2e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c286:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c28a:	4618      	mov	r0, r3
 800c28c:	f7fd f824 	bl	80092d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c292:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c294:	e027      	b.n	800c2e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c296:	f107 0318 	add.w	r3, r7, #24
 800c29a:	4618      	mov	r0, r3
 800c29c:	f7fd f970 	bl	8009580 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c2a0:	69fb      	ldr	r3, [r7, #28]
 800c2a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2a4:	e01f      	b.n	800c2e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c2a6:	4b2e      	ldr	r3, [pc, #184]	; (800c360 <UART_SetConfig+0x938>)
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	f003 0320 	and.w	r3, r3, #32
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d009      	beq.n	800c2c6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c2b2:	4b2b      	ldr	r3, [pc, #172]	; (800c360 <UART_SetConfig+0x938>)
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	08db      	lsrs	r3, r3, #3
 800c2b8:	f003 0303 	and.w	r3, r3, #3
 800c2bc:	4a25      	ldr	r2, [pc, #148]	; (800c354 <UART_SetConfig+0x92c>)
 800c2be:	fa22 f303 	lsr.w	r3, r2, r3
 800c2c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c2c4:	e00f      	b.n	800c2e6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c2c6:	4b23      	ldr	r3, [pc, #140]	; (800c354 <UART_SetConfig+0x92c>)
 800c2c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2ca:	e00c      	b.n	800c2e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c2cc:	4b22      	ldr	r3, [pc, #136]	; (800c358 <UART_SetConfig+0x930>)
 800c2ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2d0:	e009      	b.n	800c2e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c2d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c2d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2d8:	e005      	b.n	800c2e6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c2da:	2300      	movs	r3, #0
 800c2dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c2de:	2301      	movs	r3, #1
 800c2e0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c2e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c2e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	f000 80e9 	beq.w	800c4c0 <UART_SetConfig+0xa98>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c2ee:	697b      	ldr	r3, [r7, #20]
 800c2f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2f2:	4a1a      	ldr	r2, [pc, #104]	; (800c35c <UART_SetConfig+0x934>)
 800c2f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c2f8:	461a      	mov	r2, r3
 800c2fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2fc:	fbb3 f3f2 	udiv	r3, r3, r2
 800c300:	005a      	lsls	r2, r3, #1
 800c302:	697b      	ldr	r3, [r7, #20]
 800c304:	685b      	ldr	r3, [r3, #4]
 800c306:	085b      	lsrs	r3, r3, #1
 800c308:	441a      	add	r2, r3
 800c30a:	697b      	ldr	r3, [r7, #20]
 800c30c:	685b      	ldr	r3, [r3, #4]
 800c30e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c312:	b29b      	uxth	r3, r3
 800c314:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c318:	2b0f      	cmp	r3, #15
 800c31a:	d916      	bls.n	800c34a <UART_SetConfig+0x922>
 800c31c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c31e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c322:	d212      	bcs.n	800c34a <UART_SetConfig+0x922>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c326:	b29b      	uxth	r3, r3
 800c328:	f023 030f 	bic.w	r3, r3, #15
 800c32c:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c32e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c330:	085b      	lsrs	r3, r3, #1
 800c332:	b29b      	uxth	r3, r3
 800c334:	f003 0307 	and.w	r3, r3, #7
 800c338:	b29a      	uxth	r2, r3
 800c33a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c33c:	4313      	orrs	r3, r2
 800c33e:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800c340:	697b      	ldr	r3, [r7, #20]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c346:	60da      	str	r2, [r3, #12]
 800c348:	e0ba      	b.n	800c4c0 <UART_SetConfig+0xa98>
      }
      else
      {
        ret = HAL_ERROR;
 800c34a:	2301      	movs	r3, #1
 800c34c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c350:	e0b6      	b.n	800c4c0 <UART_SetConfig+0xa98>
 800c352:	bf00      	nop
 800c354:	03d09000 	.word	0x03d09000
 800c358:	003d0900 	.word	0x003d0900
 800c35c:	080134d0 	.word	0x080134d0
 800c360:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800c364:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c368:	2b20      	cmp	r3, #32
 800c36a:	dc49      	bgt.n	800c400 <UART_SetConfig+0x9d8>
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	db7c      	blt.n	800c46a <UART_SetConfig+0xa42>
 800c370:	2b20      	cmp	r3, #32
 800c372:	d87a      	bhi.n	800c46a <UART_SetConfig+0xa42>
 800c374:	a201      	add	r2, pc, #4	; (adr r2, 800c37c <UART_SetConfig+0x954>)
 800c376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c37a:	bf00      	nop
 800c37c:	0800c407 	.word	0x0800c407
 800c380:	0800c40f 	.word	0x0800c40f
 800c384:	0800c46b 	.word	0x0800c46b
 800c388:	0800c46b 	.word	0x0800c46b
 800c38c:	0800c417 	.word	0x0800c417
 800c390:	0800c46b 	.word	0x0800c46b
 800c394:	0800c46b 	.word	0x0800c46b
 800c398:	0800c46b 	.word	0x0800c46b
 800c39c:	0800c427 	.word	0x0800c427
 800c3a0:	0800c46b 	.word	0x0800c46b
 800c3a4:	0800c46b 	.word	0x0800c46b
 800c3a8:	0800c46b 	.word	0x0800c46b
 800c3ac:	0800c46b 	.word	0x0800c46b
 800c3b0:	0800c46b 	.word	0x0800c46b
 800c3b4:	0800c46b 	.word	0x0800c46b
 800c3b8:	0800c46b 	.word	0x0800c46b
 800c3bc:	0800c437 	.word	0x0800c437
 800c3c0:	0800c46b 	.word	0x0800c46b
 800c3c4:	0800c46b 	.word	0x0800c46b
 800c3c8:	0800c46b 	.word	0x0800c46b
 800c3cc:	0800c46b 	.word	0x0800c46b
 800c3d0:	0800c46b 	.word	0x0800c46b
 800c3d4:	0800c46b 	.word	0x0800c46b
 800c3d8:	0800c46b 	.word	0x0800c46b
 800c3dc:	0800c46b 	.word	0x0800c46b
 800c3e0:	0800c46b 	.word	0x0800c46b
 800c3e4:	0800c46b 	.word	0x0800c46b
 800c3e8:	0800c46b 	.word	0x0800c46b
 800c3ec:	0800c46b 	.word	0x0800c46b
 800c3f0:	0800c46b 	.word	0x0800c46b
 800c3f4:	0800c46b 	.word	0x0800c46b
 800c3f8:	0800c46b 	.word	0x0800c46b
 800c3fc:	0800c45d 	.word	0x0800c45d
 800c400:	2b40      	cmp	r3, #64	; 0x40
 800c402:	d02e      	beq.n	800c462 <UART_SetConfig+0xa3a>
 800c404:	e031      	b.n	800c46a <UART_SetConfig+0xa42>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c406:	f7fb ff9d 	bl	8008344 <HAL_RCC_GetPCLK1Freq>
 800c40a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c40c:	e033      	b.n	800c476 <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c40e:	f7fb ffaf 	bl	8008370 <HAL_RCC_GetPCLK2Freq>
 800c412:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c414:	e02f      	b.n	800c476 <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c416:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c41a:	4618      	mov	r0, r3
 800c41c:	f7fc ff5c 	bl	80092d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c422:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c424:	e027      	b.n	800c476 <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c426:	f107 0318 	add.w	r3, r7, #24
 800c42a:	4618      	mov	r0, r3
 800c42c:	f7fd f8a8 	bl	8009580 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c430:	69fb      	ldr	r3, [r7, #28]
 800c432:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c434:	e01f      	b.n	800c476 <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c436:	4b2d      	ldr	r3, [pc, #180]	; (800c4ec <UART_SetConfig+0xac4>)
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	f003 0320 	and.w	r3, r3, #32
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d009      	beq.n	800c456 <UART_SetConfig+0xa2e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c442:	4b2a      	ldr	r3, [pc, #168]	; (800c4ec <UART_SetConfig+0xac4>)
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	08db      	lsrs	r3, r3, #3
 800c448:	f003 0303 	and.w	r3, r3, #3
 800c44c:	4a28      	ldr	r2, [pc, #160]	; (800c4f0 <UART_SetConfig+0xac8>)
 800c44e:	fa22 f303 	lsr.w	r3, r2, r3
 800c452:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c454:	e00f      	b.n	800c476 <UART_SetConfig+0xa4e>
          pclk = (uint32_t) HSI_VALUE;
 800c456:	4b26      	ldr	r3, [pc, #152]	; (800c4f0 <UART_SetConfig+0xac8>)
 800c458:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c45a:	e00c      	b.n	800c476 <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c45c:	4b25      	ldr	r3, [pc, #148]	; (800c4f4 <UART_SetConfig+0xacc>)
 800c45e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c460:	e009      	b.n	800c476 <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c462:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c466:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c468:	e005      	b.n	800c476 <UART_SetConfig+0xa4e>
      default:
        pclk = 0U;
 800c46a:	2300      	movs	r3, #0
 800c46c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c46e:	2301      	movs	r3, #1
 800c470:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c474:	bf00      	nop
    }

    if (pclk != 0U)
 800c476:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d021      	beq.n	800c4c0 <UART_SetConfig+0xa98>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c47c:	697b      	ldr	r3, [r7, #20]
 800c47e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c480:	4a1d      	ldr	r2, [pc, #116]	; (800c4f8 <UART_SetConfig+0xad0>)
 800c482:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c486:	461a      	mov	r2, r3
 800c488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c48a:	fbb3 f2f2 	udiv	r2, r3, r2
 800c48e:	697b      	ldr	r3, [r7, #20]
 800c490:	685b      	ldr	r3, [r3, #4]
 800c492:	085b      	lsrs	r3, r3, #1
 800c494:	441a      	add	r2, r3
 800c496:	697b      	ldr	r3, [r7, #20]
 800c498:	685b      	ldr	r3, [r3, #4]
 800c49a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c49e:	b29b      	uxth	r3, r3
 800c4a0:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c4a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4a4:	2b0f      	cmp	r3, #15
 800c4a6:	d908      	bls.n	800c4ba <UART_SetConfig+0xa92>
 800c4a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c4ae:	d204      	bcs.n	800c4ba <UART_SetConfig+0xa92>
      {
        huart->Instance->BRR = usartdiv;
 800c4b0:	697b      	ldr	r3, [r7, #20]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c4b6:	60da      	str	r2, [r3, #12]
 800c4b8:	e002      	b.n	800c4c0 <UART_SetConfig+0xa98>
      }
      else
      {
        ret = HAL_ERROR;
 800c4ba:	2301      	movs	r3, #1
 800c4bc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c4c0:	697b      	ldr	r3, [r7, #20]
 800c4c2:	2201      	movs	r2, #1
 800c4c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c4c8:	697b      	ldr	r3, [r7, #20]
 800c4ca:	2201      	movs	r2, #1
 800c4cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c4d0:	697b      	ldr	r3, [r7, #20]
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800c4d6:	697b      	ldr	r3, [r7, #20]
 800c4d8:	2200      	movs	r2, #0
 800c4da:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800c4dc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	3748      	adds	r7, #72	; 0x48
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c4ea:	bf00      	nop
 800c4ec:	58024400 	.word	0x58024400
 800c4f0:	03d09000 	.word	0x03d09000
 800c4f4:	003d0900 	.word	0x003d0900
 800c4f8:	080134d0 	.word	0x080134d0

0800c4fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c4fc:	b480      	push	{r7}
 800c4fe:	b083      	sub	sp, #12
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c508:	f003 0301 	and.w	r3, r3, #1
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d00a      	beq.n	800c526 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	685b      	ldr	r3, [r3, #4]
 800c516:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	430a      	orrs	r2, r1
 800c524:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c52a:	f003 0302 	and.w	r3, r3, #2
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d00a      	beq.n	800c548 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	685b      	ldr	r3, [r3, #4]
 800c538:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	430a      	orrs	r2, r1
 800c546:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c54c:	f003 0304 	and.w	r3, r3, #4
 800c550:	2b00      	cmp	r3, #0
 800c552:	d00a      	beq.n	800c56a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	685b      	ldr	r3, [r3, #4]
 800c55a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	430a      	orrs	r2, r1
 800c568:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c56e:	f003 0308 	and.w	r3, r3, #8
 800c572:	2b00      	cmp	r3, #0
 800c574:	d00a      	beq.n	800c58c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	685b      	ldr	r3, [r3, #4]
 800c57c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	430a      	orrs	r2, r1
 800c58a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c590:	f003 0310 	and.w	r3, r3, #16
 800c594:	2b00      	cmp	r3, #0
 800c596:	d00a      	beq.n	800c5ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	689b      	ldr	r3, [r3, #8]
 800c59e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	430a      	orrs	r2, r1
 800c5ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5b2:	f003 0320 	and.w	r3, r3, #32
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d00a      	beq.n	800c5d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	689b      	ldr	r3, [r3, #8]
 800c5c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	430a      	orrs	r2, r1
 800c5ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d01a      	beq.n	800c612 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	685b      	ldr	r3, [r3, #4]
 800c5e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	430a      	orrs	r2, r1
 800c5f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c5f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c5fa:	d10a      	bne.n	800c612 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	685b      	ldr	r3, [r3, #4]
 800c602:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	430a      	orrs	r2, r1
 800c610:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d00a      	beq.n	800c634 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	685b      	ldr	r3, [r3, #4]
 800c624:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	430a      	orrs	r2, r1
 800c632:	605a      	str	r2, [r3, #4]
  }
}
 800c634:	bf00      	nop
 800c636:	370c      	adds	r7, #12
 800c638:	46bd      	mov	sp, r7
 800c63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63e:	4770      	bx	lr

0800c640 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b086      	sub	sp, #24
 800c644:	af02      	add	r7, sp, #8
 800c646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	2200      	movs	r2, #0
 800c64c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c650:	f7f5 faf4 	bl	8001c3c <HAL_GetTick>
 800c654:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	f003 0308 	and.w	r3, r3, #8
 800c660:	2b08      	cmp	r3, #8
 800c662:	d10e      	bne.n	800c682 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c664:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c668:	9300      	str	r3, [sp, #0]
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	2200      	movs	r2, #0
 800c66e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c672:	6878      	ldr	r0, [r7, #4]
 800c674:	f000 f82f 	bl	800c6d6 <UART_WaitOnFlagUntilTimeout>
 800c678:	4603      	mov	r3, r0
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d001      	beq.n	800c682 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c67e:	2303      	movs	r3, #3
 800c680:	e025      	b.n	800c6ce <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	f003 0304 	and.w	r3, r3, #4
 800c68c:	2b04      	cmp	r3, #4
 800c68e:	d10e      	bne.n	800c6ae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c690:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c694:	9300      	str	r3, [sp, #0]
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	2200      	movs	r2, #0
 800c69a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c69e:	6878      	ldr	r0, [r7, #4]
 800c6a0:	f000 f819 	bl	800c6d6 <UART_WaitOnFlagUntilTimeout>
 800c6a4:	4603      	mov	r3, r0
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d001      	beq.n	800c6ae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c6aa:	2303      	movs	r3, #3
 800c6ac:	e00f      	b.n	800c6ce <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	2220      	movs	r2, #32
 800c6b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	2220      	movs	r2, #32
 800c6ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c6cc:	2300      	movs	r3, #0
}
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	3710      	adds	r7, #16
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	bd80      	pop	{r7, pc}

0800c6d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c6d6:	b580      	push	{r7, lr}
 800c6d8:	b084      	sub	sp, #16
 800c6da:	af00      	add	r7, sp, #0
 800c6dc:	60f8      	str	r0, [r7, #12]
 800c6de:	60b9      	str	r1, [r7, #8]
 800c6e0:	603b      	str	r3, [r7, #0]
 800c6e2:	4613      	mov	r3, r2
 800c6e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c6e6:	e062      	b.n	800c7ae <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c6e8:	69bb      	ldr	r3, [r7, #24]
 800c6ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6ee:	d05e      	beq.n	800c7ae <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c6f0:	f7f5 faa4 	bl	8001c3c <HAL_GetTick>
 800c6f4:	4602      	mov	r2, r0
 800c6f6:	683b      	ldr	r3, [r7, #0]
 800c6f8:	1ad3      	subs	r3, r2, r3
 800c6fa:	69ba      	ldr	r2, [r7, #24]
 800c6fc:	429a      	cmp	r2, r3
 800c6fe:	d302      	bcc.n	800c706 <UART_WaitOnFlagUntilTimeout+0x30>
 800c700:	69bb      	ldr	r3, [r7, #24]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d11d      	bne.n	800c742 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	681a      	ldr	r2, [r3, #0]
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c714:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	689a      	ldr	r2, [r3, #8]
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	f022 0201 	bic.w	r2, r2, #1
 800c724:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	2220      	movs	r2, #32
 800c72a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	2220      	movs	r2, #32
 800c732:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	2200      	movs	r2, #0
 800c73a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800c73e:	2303      	movs	r3, #3
 800c740:	e045      	b.n	800c7ce <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	f003 0304 	and.w	r3, r3, #4
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d02e      	beq.n	800c7ae <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	69db      	ldr	r3, [r3, #28]
 800c756:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c75a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c75e:	d126      	bne.n	800c7ae <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c768:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	681a      	ldr	r2, [r3, #0]
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c778:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	689a      	ldr	r2, [r3, #8]
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	f022 0201 	bic.w	r2, r2, #1
 800c788:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	2220      	movs	r2, #32
 800c78e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	2220      	movs	r2, #32
 800c796:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	2220      	movs	r2, #32
 800c79e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	2200      	movs	r2, #0
 800c7a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c7aa:	2303      	movs	r3, #3
 800c7ac:	e00f      	b.n	800c7ce <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	69da      	ldr	r2, [r3, #28]
 800c7b4:	68bb      	ldr	r3, [r7, #8]
 800c7b6:	4013      	ands	r3, r2
 800c7b8:	68ba      	ldr	r2, [r7, #8]
 800c7ba:	429a      	cmp	r2, r3
 800c7bc:	bf0c      	ite	eq
 800c7be:	2301      	moveq	r3, #1
 800c7c0:	2300      	movne	r3, #0
 800c7c2:	b2db      	uxtb	r3, r3
 800c7c4:	461a      	mov	r2, r3
 800c7c6:	79fb      	ldrb	r3, [r7, #7]
 800c7c8:	429a      	cmp	r2, r3
 800c7ca:	d08d      	beq.n	800c6e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c7cc:	2300      	movs	r3, #0
}
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	3710      	adds	r7, #16
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	bd80      	pop	{r7, pc}
	...

0800c7d8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b084      	sub	sp, #16
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	60f8      	str	r0, [r7, #12]
 800c7e0:	60b9      	str	r1, [r7, #8]
 800c7e2:	4613      	mov	r3, r2
 800c7e4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	68ba      	ldr	r2, [r7, #8]
 800c7ea:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	88fa      	ldrh	r2, [r7, #6]
 800c7f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	2222      	movs	r2, #34	; 0x22
 800c800:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d02c      	beq.n	800c866 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c810:	4a25      	ldr	r2, [pc, #148]	; (800c8a8 <UART_Start_Receive_DMA+0xd0>)
 800c812:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c818:	4a24      	ldr	r2, [pc, #144]	; (800c8ac <UART_Start_Receive_DMA+0xd4>)
 800c81a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c820:	4a23      	ldr	r2, [pc, #140]	; (800c8b0 <UART_Start_Receive_DMA+0xd8>)
 800c822:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c828:	2200      	movs	r2, #0
 800c82a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	3324      	adds	r3, #36	; 0x24
 800c836:	4619      	mov	r1, r3
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c83c:	461a      	mov	r2, r3
 800c83e:	88fb      	ldrh	r3, [r7, #6]
 800c840:	f7f5 ff2e 	bl	80026a0 <HAL_DMA_Start_IT>
 800c844:	4603      	mov	r3, r0
 800c846:	2b00      	cmp	r3, #0
 800c848:	d00d      	beq.n	800c866 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	2210      	movs	r2, #16
 800c84e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	2200      	movs	r2, #0
 800c856:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	2220      	movs	r2, #32
 800c85e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      return HAL_ERROR;
 800c862:	2301      	movs	r3, #1
 800c864:	e01c      	b.n	800c8a0 <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	2200      	movs	r2, #0
 800c86a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	681a      	ldr	r2, [r3, #0]
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c87c:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	689a      	ldr	r2, [r3, #8]
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	f042 0201 	orr.w	r2, r2, #1
 800c88c:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	689a      	ldr	r2, [r3, #8]
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c89c:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800c89e:	2300      	movs	r3, #0
}
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	3710      	adds	r7, #16
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	bd80      	pop	{r7, pc}
 800c8a8:	0800c955 	.word	0x0800c955
 800c8ac:	0800c9eb 	.word	0x0800c9eb
 800c8b0:	0800ca23 	.word	0x0800ca23

0800c8b4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c8b4:	b480      	push	{r7}
 800c8b6:	b083      	sub	sp, #12
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	681a      	ldr	r2, [r3, #0]
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800c8ca:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	689a      	ldr	r2, [r3, #8]
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800c8da:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	2220      	movs	r2, #32
 800c8e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800c8e4:	bf00      	nop
 800c8e6:	370c      	adds	r7, #12
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ee:	4770      	bx	lr

0800c8f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c8f0:	b480      	push	{r7}
 800c8f2:	b083      	sub	sp, #12
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	681a      	ldr	r2, [r3, #0]
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c906:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	6899      	ldr	r1, [r3, #8]
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	681a      	ldr	r2, [r3, #0]
 800c912:	4b0f      	ldr	r3, [pc, #60]	; (800c950 <UART_EndRxTransfer+0x60>)
 800c914:	400b      	ands	r3, r1
 800c916:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c91c:	2b01      	cmp	r3, #1
 800c91e:	d107      	bne.n	800c930 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	681a      	ldr	r2, [r3, #0]
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	f022 0210 	bic.w	r2, r2, #16
 800c92e:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	2220      	movs	r2, #32
 800c934:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	2200      	movs	r2, #0
 800c93c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	2200      	movs	r2, #0
 800c942:	671a      	str	r2, [r3, #112]	; 0x70
}
 800c944:	bf00      	nop
 800c946:	370c      	adds	r7, #12
 800c948:	46bd      	mov	sp, r7
 800c94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94e:	4770      	bx	lr
 800c950:	effffffe 	.word	0xeffffffe

0800c954 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c954:	b580      	push	{r7, lr}
 800c956:	b084      	sub	sp, #16
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c960:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	69db      	ldr	r3, [r3, #28]
 800c966:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c96a:	d02b      	beq.n	800c9c4 <UART_DMAReceiveCplt+0x70>
  {
    huart->RxXferCount = 0U;
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	2200      	movs	r2, #0
 800c970:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	681a      	ldr	r2, [r3, #0]
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c982:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	689a      	ldr	r2, [r3, #8]
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	f022 0201 	bic.w	r2, r2, #1
 800c992:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	689a      	ldr	r2, [r3, #8]
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c9a2:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	2220      	movs	r2, #32
 800c9a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c9b0:	2b01      	cmp	r3, #1
 800c9b2:	d107      	bne.n	800c9c4 <UART_DMAReceiveCplt+0x70>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	681a      	ldr	r2, [r3, #0]
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	f022 0210 	bic.w	r2, r2, #16
 800c9c2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c9c8:	2b01      	cmp	r3, #1
 800c9ca:	d107      	bne.n	800c9dc <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c9d2:	4619      	mov	r1, r3
 800c9d4:	68f8      	ldr	r0, [r7, #12]
 800c9d6:	f7ff f81b 	bl	800ba10 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c9da:	e002      	b.n	800c9e2 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800c9dc:	68f8      	ldr	r0, [r7, #12]
 800c9de:	f7f4 fa17 	bl	8000e10 <HAL_UART_RxCpltCallback>
}
 800c9e2:	bf00      	nop
 800c9e4:	3710      	adds	r7, #16
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	bd80      	pop	{r7, pc}

0800c9ea <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c9ea:	b580      	push	{r7, lr}
 800c9ec:	b084      	sub	sp, #16
 800c9ee:	af00      	add	r7, sp, #0
 800c9f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9f6:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c9fc:	2b01      	cmp	r3, #1
 800c9fe:	d109      	bne.n	800ca14 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ca06:	085b      	lsrs	r3, r3, #1
 800ca08:	b29b      	uxth	r3, r3
 800ca0a:	4619      	mov	r1, r3
 800ca0c:	68f8      	ldr	r0, [r7, #12]
 800ca0e:	f7fe ffff 	bl	800ba10 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ca12:	e002      	b.n	800ca1a <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800ca14:	68f8      	ldr	r0, [r7, #12]
 800ca16:	f7fe ffe7 	bl	800b9e8 <HAL_UART_RxHalfCpltCallback>
}
 800ca1a:	bf00      	nop
 800ca1c:	3710      	adds	r7, #16
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	bd80      	pop	{r7, pc}

0800ca22 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ca22:	b580      	push	{r7, lr}
 800ca24:	b086      	sub	sp, #24
 800ca26:	af00      	add	r7, sp, #0
 800ca28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca2e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ca30:	697b      	ldr	r3, [r7, #20]
 800ca32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ca36:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ca38:	697b      	ldr	r3, [r7, #20]
 800ca3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca3e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ca40:	697b      	ldr	r3, [r7, #20]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	689b      	ldr	r3, [r3, #8]
 800ca46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca4a:	2b80      	cmp	r3, #128	; 0x80
 800ca4c:	d109      	bne.n	800ca62 <UART_DMAError+0x40>
 800ca4e:	693b      	ldr	r3, [r7, #16]
 800ca50:	2b21      	cmp	r3, #33	; 0x21
 800ca52:	d106      	bne.n	800ca62 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ca54:	697b      	ldr	r3, [r7, #20]
 800ca56:	2200      	movs	r2, #0
 800ca58:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800ca5c:	6978      	ldr	r0, [r7, #20]
 800ca5e:	f7ff ff29 	bl	800c8b4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ca62:	697b      	ldr	r3, [r7, #20]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	689b      	ldr	r3, [r3, #8]
 800ca68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca6c:	2b40      	cmp	r3, #64	; 0x40
 800ca6e:	d109      	bne.n	800ca84 <UART_DMAError+0x62>
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	2b22      	cmp	r3, #34	; 0x22
 800ca74:	d106      	bne.n	800ca84 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ca76:	697b      	ldr	r3, [r7, #20]
 800ca78:	2200      	movs	r2, #0
 800ca7a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800ca7e:	6978      	ldr	r0, [r7, #20]
 800ca80:	f7ff ff36 	bl	800c8f0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ca84:	697b      	ldr	r3, [r7, #20]
 800ca86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ca8a:	f043 0210 	orr.w	r2, r3, #16
 800ca8e:	697b      	ldr	r3, [r7, #20]
 800ca90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ca94:	6978      	ldr	r0, [r7, #20]
 800ca96:	f7fe ffb1 	bl	800b9fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ca9a:	bf00      	nop
 800ca9c:	3718      	adds	r7, #24
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	bd80      	pop	{r7, pc}

0800caa2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800caa2:	b580      	push	{r7, lr}
 800caa4:	b084      	sub	sp, #16
 800caa6:	af00      	add	r7, sp, #0
 800caa8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	2200      	movs	r2, #0
 800cab4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	2200      	movs	r2, #0
 800cabc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cac0:	68f8      	ldr	r0, [r7, #12]
 800cac2:	f7fe ff9b 	bl	800b9fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cac6:	bf00      	nop
 800cac8:	3710      	adds	r7, #16
 800caca:	46bd      	mov	sp, r7
 800cacc:	bd80      	pop	{r7, pc}

0800cace <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cace:	b580      	push	{r7, lr}
 800cad0:	b082      	sub	sp, #8
 800cad2:	af00      	add	r7, sp, #0
 800cad4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	681a      	ldr	r2, [r3, #0]
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cae4:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	2220      	movs	r2, #32
 800caea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	2200      	movs	r2, #0
 800caf2:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800caf4:	6878      	ldr	r0, [r7, #4]
 800caf6:	f7fe ff6d 	bl	800b9d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cafa:	bf00      	nop
 800cafc:	3708      	adds	r7, #8
 800cafe:	46bd      	mov	sp, r7
 800cb00:	bd80      	pop	{r7, pc}

0800cb02 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800cb02:	b480      	push	{r7}
 800cb04:	b083      	sub	sp, #12
 800cb06:	af00      	add	r7, sp, #0
 800cb08:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800cb0a:	bf00      	nop
 800cb0c:	370c      	adds	r7, #12
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb14:	4770      	bx	lr

0800cb16 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800cb16:	b480      	push	{r7}
 800cb18:	b083      	sub	sp, #12
 800cb1a:	af00      	add	r7, sp, #0
 800cb1c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800cb1e:	bf00      	nop
 800cb20:	370c      	adds	r7, #12
 800cb22:	46bd      	mov	sp, r7
 800cb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb28:	4770      	bx	lr

0800cb2a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800cb2a:	b480      	push	{r7}
 800cb2c:	b083      	sub	sp, #12
 800cb2e:	af00      	add	r7, sp, #0
 800cb30:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800cb32:	bf00      	nop
 800cb34:	370c      	adds	r7, #12
 800cb36:	46bd      	mov	sp, r7
 800cb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3c:	4770      	bx	lr

0800cb3e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cb3e:	b480      	push	{r7}
 800cb40:	b085      	sub	sp, #20
 800cb42:	af00      	add	r7, sp, #0
 800cb44:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cb4c:	2b01      	cmp	r3, #1
 800cb4e:	d101      	bne.n	800cb54 <HAL_UARTEx_DisableFifoMode+0x16>
 800cb50:	2302      	movs	r3, #2
 800cb52:	e027      	b.n	800cba4 <HAL_UARTEx_DisableFifoMode+0x66>
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	2201      	movs	r2, #1
 800cb58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	2224      	movs	r2, #36	; 0x24
 800cb60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	681a      	ldr	r2, [r3, #0]
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	f022 0201 	bic.w	r2, r2, #1
 800cb7a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800cb82:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	2200      	movs	r2, #0
 800cb88:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	68fa      	ldr	r2, [r7, #12]
 800cb90:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	2220      	movs	r2, #32
 800cb96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cba2:	2300      	movs	r3, #0
}
 800cba4:	4618      	mov	r0, r3
 800cba6:	3714      	adds	r7, #20
 800cba8:	46bd      	mov	sp, r7
 800cbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbae:	4770      	bx	lr

0800cbb0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b084      	sub	sp, #16
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
 800cbb8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cbc0:	2b01      	cmp	r3, #1
 800cbc2:	d101      	bne.n	800cbc8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cbc4:	2302      	movs	r3, #2
 800cbc6:	e02d      	b.n	800cc24 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	2201      	movs	r2, #1
 800cbcc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	2224      	movs	r2, #36	; 0x24
 800cbd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	681a      	ldr	r2, [r3, #0]
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	f022 0201 	bic.w	r2, r2, #1
 800cbee:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	689b      	ldr	r3, [r3, #8]
 800cbf6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	683a      	ldr	r2, [r7, #0]
 800cc00:	430a      	orrs	r2, r1
 800cc02:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cc04:	6878      	ldr	r0, [r7, #4]
 800cc06:	f000 f84f 	bl	800cca8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	68fa      	ldr	r2, [r7, #12]
 800cc10:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	2220      	movs	r2, #32
 800cc16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	2200      	movs	r2, #0
 800cc1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cc22:	2300      	movs	r3, #0
}
 800cc24:	4618      	mov	r0, r3
 800cc26:	3710      	adds	r7, #16
 800cc28:	46bd      	mov	sp, r7
 800cc2a:	bd80      	pop	{r7, pc}

0800cc2c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b084      	sub	sp, #16
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
 800cc34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cc3c:	2b01      	cmp	r3, #1
 800cc3e:	d101      	bne.n	800cc44 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cc40:	2302      	movs	r3, #2
 800cc42:	e02d      	b.n	800cca0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	2201      	movs	r2, #1
 800cc48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	2224      	movs	r2, #36	; 0x24
 800cc50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	681a      	ldr	r2, [r3, #0]
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	f022 0201 	bic.w	r2, r2, #1
 800cc6a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	689b      	ldr	r3, [r3, #8]
 800cc72:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	683a      	ldr	r2, [r7, #0]
 800cc7c:	430a      	orrs	r2, r1
 800cc7e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cc80:	6878      	ldr	r0, [r7, #4]
 800cc82:	f000 f811 	bl	800cca8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	68fa      	ldr	r2, [r7, #12]
 800cc8c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	2220      	movs	r2, #32
 800cc92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	2200      	movs	r2, #0
 800cc9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cc9e:	2300      	movs	r3, #0
}
 800cca0:	4618      	mov	r0, r3
 800cca2:	3710      	adds	r7, #16
 800cca4:	46bd      	mov	sp, r7
 800cca6:	bd80      	pop	{r7, pc}

0800cca8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cca8:	b480      	push	{r7}
 800ccaa:	b085      	sub	sp, #20
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d108      	bne.n	800ccca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	2201      	movs	r2, #1
 800ccbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	2201      	movs	r2, #1
 800ccc4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ccc8:	e031      	b.n	800cd2e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ccca:	2310      	movs	r3, #16
 800cccc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ccce:	2310      	movs	r3, #16
 800ccd0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	689b      	ldr	r3, [r3, #8]
 800ccd8:	0e5b      	lsrs	r3, r3, #25
 800ccda:	b2db      	uxtb	r3, r3
 800ccdc:	f003 0307 	and.w	r3, r3, #7
 800cce0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	689b      	ldr	r3, [r3, #8]
 800cce8:	0f5b      	lsrs	r3, r3, #29
 800ccea:	b2db      	uxtb	r3, r3
 800ccec:	f003 0307 	and.w	r3, r3, #7
 800ccf0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ccf2:	7bbb      	ldrb	r3, [r7, #14]
 800ccf4:	7b3a      	ldrb	r2, [r7, #12]
 800ccf6:	4911      	ldr	r1, [pc, #68]	; (800cd3c <UARTEx_SetNbDataToProcess+0x94>)
 800ccf8:	5c8a      	ldrb	r2, [r1, r2]
 800ccfa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ccfe:	7b3a      	ldrb	r2, [r7, #12]
 800cd00:	490f      	ldr	r1, [pc, #60]	; (800cd40 <UARTEx_SetNbDataToProcess+0x98>)
 800cd02:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cd04:	fb93 f3f2 	sdiv	r3, r3, r2
 800cd08:	b29a      	uxth	r2, r3
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cd10:	7bfb      	ldrb	r3, [r7, #15]
 800cd12:	7b7a      	ldrb	r2, [r7, #13]
 800cd14:	4909      	ldr	r1, [pc, #36]	; (800cd3c <UARTEx_SetNbDataToProcess+0x94>)
 800cd16:	5c8a      	ldrb	r2, [r1, r2]
 800cd18:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cd1c:	7b7a      	ldrb	r2, [r7, #13]
 800cd1e:	4908      	ldr	r1, [pc, #32]	; (800cd40 <UARTEx_SetNbDataToProcess+0x98>)
 800cd20:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cd22:	fb93 f3f2 	sdiv	r3, r3, r2
 800cd26:	b29a      	uxth	r2, r3
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800cd2e:	bf00      	nop
 800cd30:	3714      	adds	r7, #20
 800cd32:	46bd      	mov	sp, r7
 800cd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd38:	4770      	bx	lr
 800cd3a:	bf00      	nop
 800cd3c:	080134e8 	.word	0x080134e8
 800cd40:	080134f0 	.word	0x080134f0

0800cd44 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800cd44:	b480      	push	{r7}
 800cd46:	b083      	sub	sp, #12
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800cd52:	4618      	mov	r0, r3
 800cd54:	370c      	adds	r7, #12
 800cd56:	46bd      	mov	sp, r7
 800cd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5c:	4770      	bx	lr

0800cd5e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800cd5e:	b480      	push	{r7}
 800cd60:	b083      	sub	sp, #12
 800cd62:	af00      	add	r7, sp, #0
 800cd64:	6078      	str	r0, [r7, #4]
 800cd66:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800cd68:	683b      	ldr	r3, [r7, #0]
 800cd6a:	681a      	ldr	r2, [r3, #0]
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cd72:	2300      	movs	r3, #0
}
 800cd74:	4618      	mov	r0, r3
 800cd76:	370c      	adds	r7, #12
 800cd78:	46bd      	mov	sp, r7
 800cd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd7e:	4770      	bx	lr

0800cd80 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800cd80:	b480      	push	{r7}
 800cd82:	b085      	sub	sp, #20
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]
 800cd88:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800cd8e:	683b      	ldr	r3, [r7, #0]
 800cd90:	681a      	ldr	r2, [r3, #0]
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800cd96:	683b      	ldr	r3, [r7, #0]
 800cd98:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800cd9a:	683b      	ldr	r3, [r7, #0]
 800cd9c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800cd9e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800cda0:	683b      	ldr	r3, [r7, #0]
 800cda2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800cda4:	431a      	orrs	r2, r3
                       Command->CPSM);
 800cda6:	683b      	ldr	r3, [r7, #0]
 800cda8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800cdaa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800cdac:	68fa      	ldr	r2, [r7, #12]
 800cdae:	4313      	orrs	r3, r2
 800cdb0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	68da      	ldr	r2, [r3, #12]
 800cdb6:	4b06      	ldr	r3, [pc, #24]	; (800cdd0 <SDMMC_SendCommand+0x50>)
 800cdb8:	4013      	ands	r3, r2
 800cdba:	68fa      	ldr	r2, [r7, #12]
 800cdbc:	431a      	orrs	r2, r3
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800cdc2:	2300      	movs	r3, #0
}
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	3714      	adds	r7, #20
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdce:	4770      	bx	lr
 800cdd0:	fffee0c0 	.word	0xfffee0c0

0800cdd4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800cdd4:	b480      	push	{r7}
 800cdd6:	b083      	sub	sp, #12
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	691b      	ldr	r3, [r3, #16]
 800cde0:	b2db      	uxtb	r3, r3
}
 800cde2:	4618      	mov	r0, r3
 800cde4:	370c      	adds	r7, #12
 800cde6:	46bd      	mov	sp, r7
 800cde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdec:	4770      	bx	lr

0800cdee <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800cdee:	b480      	push	{r7}
 800cdf0:	b085      	sub	sp, #20
 800cdf2:	af00      	add	r7, sp, #0
 800cdf4:	6078      	str	r0, [r7, #4]
 800cdf6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	3314      	adds	r3, #20
 800cdfc:	461a      	mov	r2, r3
 800cdfe:	683b      	ldr	r3, [r7, #0]
 800ce00:	4413      	add	r3, r2
 800ce02:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	681b      	ldr	r3, [r3, #0]
}
 800ce08:	4618      	mov	r0, r3
 800ce0a:	3714      	adds	r7, #20
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce12:	4770      	bx	lr

0800ce14 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800ce14:	b580      	push	{r7, lr}
 800ce16:	b088      	sub	sp, #32
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800ce20:	230c      	movs	r3, #12
 800ce22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ce24:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ce28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ce2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ce32:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	68db      	ldr	r3, [r3, #12]
 800ce38:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	68db      	ldr	r3, [r3, #12]
 800ce44:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ce4c:	f107 0308 	add.w	r3, r7, #8
 800ce50:	4619      	mov	r1, r3
 800ce52:	6878      	ldr	r0, [r7, #4]
 800ce54:	f7ff ff94 	bl	800cd80 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800ce58:	4a0b      	ldr	r2, [pc, #44]	; (800ce88 <SDMMC_CmdStopTransfer+0x74>)
 800ce5a:	210c      	movs	r1, #12
 800ce5c:	6878      	ldr	r0, [r7, #4]
 800ce5e:	f000 f815 	bl	800ce8c <SDMMC_GetCmdResp1>
 800ce62:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	68db      	ldr	r3, [r3, #12]
 800ce68:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800ce70:	69fb      	ldr	r3, [r7, #28]
 800ce72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ce76:	d101      	bne.n	800ce7c <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800ce78:	2300      	movs	r3, #0
 800ce7a:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800ce7c:	69fb      	ldr	r3, [r7, #28]
}
 800ce7e:	4618      	mov	r0, r3
 800ce80:	3720      	adds	r7, #32
 800ce82:	46bd      	mov	sp, r7
 800ce84:	bd80      	pop	{r7, pc}
 800ce86:	bf00      	nop
 800ce88:	05f5e100 	.word	0x05f5e100

0800ce8c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b088      	sub	sp, #32
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	60f8      	str	r0, [r7, #12]
 800ce94:	460b      	mov	r3, r1
 800ce96:	607a      	str	r2, [r7, #4]
 800ce98:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ce9a:	4b70      	ldr	r3, [pc, #448]	; (800d05c <SDMMC_GetCmdResp1+0x1d0>)
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	4a70      	ldr	r2, [pc, #448]	; (800d060 <SDMMC_GetCmdResp1+0x1d4>)
 800cea0:	fba2 2303 	umull	r2, r3, r2, r3
 800cea4:	0a5a      	lsrs	r2, r3, #9
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	fb02 f303 	mul.w	r3, r2, r3
 800ceac:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800ceae:	69fb      	ldr	r3, [r7, #28]
 800ceb0:	1e5a      	subs	r2, r3, #1
 800ceb2:	61fa      	str	r2, [r7, #28]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d102      	bne.n	800cebe <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ceb8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cebc:	e0c9      	b.n	800d052 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cec2:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800cec4:	69ba      	ldr	r2, [r7, #24]
 800cec6:	4b67      	ldr	r3, [pc, #412]	; (800d064 <SDMMC_GetCmdResp1+0x1d8>)
 800cec8:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d0ef      	beq.n	800ceae <SDMMC_GetCmdResp1+0x22>
 800cece:	69bb      	ldr	r3, [r7, #24]
 800ced0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d1ea      	bne.n	800ceae <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cedc:	f003 0304 	and.w	r3, r3, #4
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d004      	beq.n	800ceee <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	2204      	movs	r2, #4
 800cee8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ceea:	2304      	movs	r3, #4
 800ceec:	e0b1      	b.n	800d052 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cef2:	f003 0301 	and.w	r3, r3, #1
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d004      	beq.n	800cf04 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	2201      	movs	r2, #1
 800cefe:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cf00:	2301      	movs	r3, #1
 800cf02:	e0a6      	b.n	800d052 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	4a58      	ldr	r2, [pc, #352]	; (800d068 <SDMMC_GetCmdResp1+0x1dc>)
 800cf08:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800cf0a:	68f8      	ldr	r0, [r7, #12]
 800cf0c:	f7ff ff62 	bl	800cdd4 <SDMMC_GetCommandResponse>
 800cf10:	4603      	mov	r3, r0
 800cf12:	461a      	mov	r2, r3
 800cf14:	7afb      	ldrb	r3, [r7, #11]
 800cf16:	4293      	cmp	r3, r2
 800cf18:	d001      	beq.n	800cf1e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cf1a:	2301      	movs	r3, #1
 800cf1c:	e099      	b.n	800d052 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800cf1e:	2100      	movs	r1, #0
 800cf20:	68f8      	ldr	r0, [r7, #12]
 800cf22:	f7ff ff64 	bl	800cdee <SDMMC_GetResponse>
 800cf26:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800cf28:	697a      	ldr	r2, [r7, #20]
 800cf2a:	4b50      	ldr	r3, [pc, #320]	; (800d06c <SDMMC_GetCmdResp1+0x1e0>)
 800cf2c:	4013      	ands	r3, r2
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d101      	bne.n	800cf36 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800cf32:	2300      	movs	r3, #0
 800cf34:	e08d      	b.n	800d052 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800cf36:	697b      	ldr	r3, [r7, #20]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	da02      	bge.n	800cf42 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800cf3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800cf40:	e087      	b.n	800d052 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800cf42:	697b      	ldr	r3, [r7, #20]
 800cf44:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d001      	beq.n	800cf50 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800cf4c:	2340      	movs	r3, #64	; 0x40
 800cf4e:	e080      	b.n	800d052 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800cf50:	697b      	ldr	r3, [r7, #20]
 800cf52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d001      	beq.n	800cf5e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800cf5a:	2380      	movs	r3, #128	; 0x80
 800cf5c:	e079      	b.n	800d052 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800cf5e:	697b      	ldr	r3, [r7, #20]
 800cf60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d002      	beq.n	800cf6e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800cf68:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cf6c:	e071      	b.n	800d052 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800cf6e:	697b      	ldr	r3, [r7, #20]
 800cf70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d002      	beq.n	800cf7e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800cf78:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cf7c:	e069      	b.n	800d052 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800cf7e:	697b      	ldr	r3, [r7, #20]
 800cf80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d002      	beq.n	800cf8e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800cf88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cf8c:	e061      	b.n	800d052 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800cf8e:	697b      	ldr	r3, [r7, #20]
 800cf90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d002      	beq.n	800cf9e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800cf98:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cf9c:	e059      	b.n	800d052 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800cf9e:	697b      	ldr	r3, [r7, #20]
 800cfa0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d002      	beq.n	800cfae <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cfa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cfac:	e051      	b.n	800d052 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800cfae:	697b      	ldr	r3, [r7, #20]
 800cfb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d002      	beq.n	800cfbe <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cfb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cfbc:	e049      	b.n	800d052 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800cfbe:	697b      	ldr	r3, [r7, #20]
 800cfc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d002      	beq.n	800cfce <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800cfc8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800cfcc:	e041      	b.n	800d052 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800cfce:	697b      	ldr	r3, [r7, #20]
 800cfd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d002      	beq.n	800cfde <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800cfd8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cfdc:	e039      	b.n	800d052 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800cfde:	697b      	ldr	r3, [r7, #20]
 800cfe0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d002      	beq.n	800cfee <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800cfe8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800cfec:	e031      	b.n	800d052 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800cfee:	697b      	ldr	r3, [r7, #20]
 800cff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d002      	beq.n	800cffe <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800cff8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800cffc:	e029      	b.n	800d052 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800cffe:	697b      	ldr	r3, [r7, #20]
 800d000:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d004:	2b00      	cmp	r3, #0
 800d006:	d002      	beq.n	800d00e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d008:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d00c:	e021      	b.n	800d052 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d00e:	697b      	ldr	r3, [r7, #20]
 800d010:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d014:	2b00      	cmp	r3, #0
 800d016:	d002      	beq.n	800d01e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d018:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800d01c:	e019      	b.n	800d052 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d01e:	697b      	ldr	r3, [r7, #20]
 800d020:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d024:	2b00      	cmp	r3, #0
 800d026:	d002      	beq.n	800d02e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d028:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d02c:	e011      	b.n	800d052 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d02e:	697b      	ldr	r3, [r7, #20]
 800d030:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d034:	2b00      	cmp	r3, #0
 800d036:	d002      	beq.n	800d03e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d038:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d03c:	e009      	b.n	800d052 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d03e:	697b      	ldr	r3, [r7, #20]
 800d040:	f003 0308 	and.w	r3, r3, #8
 800d044:	2b00      	cmp	r3, #0
 800d046:	d002      	beq.n	800d04e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d048:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d04c:	e001      	b.n	800d052 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d04e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d052:	4618      	mov	r0, r3
 800d054:	3720      	adds	r7, #32
 800d056:	46bd      	mov	sp, r7
 800d058:	bd80      	pop	{r7, pc}
 800d05a:	bf00      	nop
 800d05c:	24000000 	.word	0x24000000
 800d060:	10624dd3 	.word	0x10624dd3
 800d064:	00200045 	.word	0x00200045
 800d068:	002000c5 	.word	0x002000c5
 800d06c:	fdffe008 	.word	0xfdffe008

0800d070 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d070:	b084      	sub	sp, #16
 800d072:	b580      	push	{r7, lr}
 800d074:	b084      	sub	sp, #16
 800d076:	af00      	add	r7, sp, #0
 800d078:	6078      	str	r0, [r7, #4]
 800d07a:	f107 001c 	add.w	r0, r7, #28
 800d07e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d084:	2b01      	cmp	r3, #1
 800d086:	d120      	bne.n	800d0ca <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d08c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	68da      	ldr	r2, [r3, #12]
 800d098:	4b2a      	ldr	r3, [pc, #168]	; (800d144 <USB_CoreInit+0xd4>)
 800d09a:	4013      	ands	r3, r2
 800d09c:	687a      	ldr	r2, [r7, #4]
 800d09e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	68db      	ldr	r3, [r3, #12]
 800d0a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d0ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d0ae:	2b01      	cmp	r3, #1
 800d0b0:	d105      	bne.n	800d0be <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	68db      	ldr	r3, [r3, #12]
 800d0b6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d0be:	6878      	ldr	r0, [r7, #4]
 800d0c0:	f001 fb14 	bl	800e6ec <USB_CoreReset>
 800d0c4:	4603      	mov	r3, r0
 800d0c6:	73fb      	strb	r3, [r7, #15]
 800d0c8:	e01a      	b.n	800d100 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	68db      	ldr	r3, [r3, #12]
 800d0ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d0d6:	6878      	ldr	r0, [r7, #4]
 800d0d8:	f001 fb08 	bl	800e6ec <USB_CoreReset>
 800d0dc:	4603      	mov	r3, r0
 800d0de:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800d0e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d106      	bne.n	800d0f4 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	639a      	str	r2, [r3, #56]	; 0x38
 800d0f2:	e005      	b.n	800d100 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800d100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d102:	2b01      	cmp	r3, #1
 800d104:	d116      	bne.n	800d134 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d10a:	b29a      	uxth	r2, r3
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d114:	4b0c      	ldr	r3, [pc, #48]	; (800d148 <USB_CoreInit+0xd8>)
 800d116:	4313      	orrs	r3, r2
 800d118:	687a      	ldr	r2, [r7, #4]
 800d11a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	689b      	ldr	r3, [r3, #8]
 800d120:	f043 0206 	orr.w	r2, r3, #6
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	689b      	ldr	r3, [r3, #8]
 800d12c:	f043 0220 	orr.w	r2, r3, #32
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d134:	7bfb      	ldrb	r3, [r7, #15]
}
 800d136:	4618      	mov	r0, r3
 800d138:	3710      	adds	r7, #16
 800d13a:	46bd      	mov	sp, r7
 800d13c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d140:	b004      	add	sp, #16
 800d142:	4770      	bx	lr
 800d144:	ffbdffbf 	.word	0xffbdffbf
 800d148:	03ee0000 	.word	0x03ee0000

0800d14c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800d14c:	b480      	push	{r7}
 800d14e:	b087      	sub	sp, #28
 800d150:	af00      	add	r7, sp, #0
 800d152:	60f8      	str	r0, [r7, #12]
 800d154:	60b9      	str	r1, [r7, #8]
 800d156:	4613      	mov	r3, r2
 800d158:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800d15a:	79fb      	ldrb	r3, [r7, #7]
 800d15c:	2b02      	cmp	r3, #2
 800d15e:	d165      	bne.n	800d22c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800d160:	68bb      	ldr	r3, [r7, #8]
 800d162:	4a41      	ldr	r2, [pc, #260]	; (800d268 <USB_SetTurnaroundTime+0x11c>)
 800d164:	4293      	cmp	r3, r2
 800d166:	d906      	bls.n	800d176 <USB_SetTurnaroundTime+0x2a>
 800d168:	68bb      	ldr	r3, [r7, #8]
 800d16a:	4a40      	ldr	r2, [pc, #256]	; (800d26c <USB_SetTurnaroundTime+0x120>)
 800d16c:	4293      	cmp	r3, r2
 800d16e:	d202      	bcs.n	800d176 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800d170:	230f      	movs	r3, #15
 800d172:	617b      	str	r3, [r7, #20]
 800d174:	e062      	b.n	800d23c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800d176:	68bb      	ldr	r3, [r7, #8]
 800d178:	4a3c      	ldr	r2, [pc, #240]	; (800d26c <USB_SetTurnaroundTime+0x120>)
 800d17a:	4293      	cmp	r3, r2
 800d17c:	d306      	bcc.n	800d18c <USB_SetTurnaroundTime+0x40>
 800d17e:	68bb      	ldr	r3, [r7, #8]
 800d180:	4a3b      	ldr	r2, [pc, #236]	; (800d270 <USB_SetTurnaroundTime+0x124>)
 800d182:	4293      	cmp	r3, r2
 800d184:	d202      	bcs.n	800d18c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800d186:	230e      	movs	r3, #14
 800d188:	617b      	str	r3, [r7, #20]
 800d18a:	e057      	b.n	800d23c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800d18c:	68bb      	ldr	r3, [r7, #8]
 800d18e:	4a38      	ldr	r2, [pc, #224]	; (800d270 <USB_SetTurnaroundTime+0x124>)
 800d190:	4293      	cmp	r3, r2
 800d192:	d306      	bcc.n	800d1a2 <USB_SetTurnaroundTime+0x56>
 800d194:	68bb      	ldr	r3, [r7, #8]
 800d196:	4a37      	ldr	r2, [pc, #220]	; (800d274 <USB_SetTurnaroundTime+0x128>)
 800d198:	4293      	cmp	r3, r2
 800d19a:	d202      	bcs.n	800d1a2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800d19c:	230d      	movs	r3, #13
 800d19e:	617b      	str	r3, [r7, #20]
 800d1a0:	e04c      	b.n	800d23c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800d1a2:	68bb      	ldr	r3, [r7, #8]
 800d1a4:	4a33      	ldr	r2, [pc, #204]	; (800d274 <USB_SetTurnaroundTime+0x128>)
 800d1a6:	4293      	cmp	r3, r2
 800d1a8:	d306      	bcc.n	800d1b8 <USB_SetTurnaroundTime+0x6c>
 800d1aa:	68bb      	ldr	r3, [r7, #8]
 800d1ac:	4a32      	ldr	r2, [pc, #200]	; (800d278 <USB_SetTurnaroundTime+0x12c>)
 800d1ae:	4293      	cmp	r3, r2
 800d1b0:	d802      	bhi.n	800d1b8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800d1b2:	230c      	movs	r3, #12
 800d1b4:	617b      	str	r3, [r7, #20]
 800d1b6:	e041      	b.n	800d23c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800d1b8:	68bb      	ldr	r3, [r7, #8]
 800d1ba:	4a2f      	ldr	r2, [pc, #188]	; (800d278 <USB_SetTurnaroundTime+0x12c>)
 800d1bc:	4293      	cmp	r3, r2
 800d1be:	d906      	bls.n	800d1ce <USB_SetTurnaroundTime+0x82>
 800d1c0:	68bb      	ldr	r3, [r7, #8]
 800d1c2:	4a2e      	ldr	r2, [pc, #184]	; (800d27c <USB_SetTurnaroundTime+0x130>)
 800d1c4:	4293      	cmp	r3, r2
 800d1c6:	d802      	bhi.n	800d1ce <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800d1c8:	230b      	movs	r3, #11
 800d1ca:	617b      	str	r3, [r7, #20]
 800d1cc:	e036      	b.n	800d23c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800d1ce:	68bb      	ldr	r3, [r7, #8]
 800d1d0:	4a2a      	ldr	r2, [pc, #168]	; (800d27c <USB_SetTurnaroundTime+0x130>)
 800d1d2:	4293      	cmp	r3, r2
 800d1d4:	d906      	bls.n	800d1e4 <USB_SetTurnaroundTime+0x98>
 800d1d6:	68bb      	ldr	r3, [r7, #8]
 800d1d8:	4a29      	ldr	r2, [pc, #164]	; (800d280 <USB_SetTurnaroundTime+0x134>)
 800d1da:	4293      	cmp	r3, r2
 800d1dc:	d802      	bhi.n	800d1e4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800d1de:	230a      	movs	r3, #10
 800d1e0:	617b      	str	r3, [r7, #20]
 800d1e2:	e02b      	b.n	800d23c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800d1e4:	68bb      	ldr	r3, [r7, #8]
 800d1e6:	4a26      	ldr	r2, [pc, #152]	; (800d280 <USB_SetTurnaroundTime+0x134>)
 800d1e8:	4293      	cmp	r3, r2
 800d1ea:	d906      	bls.n	800d1fa <USB_SetTurnaroundTime+0xae>
 800d1ec:	68bb      	ldr	r3, [r7, #8]
 800d1ee:	4a25      	ldr	r2, [pc, #148]	; (800d284 <USB_SetTurnaroundTime+0x138>)
 800d1f0:	4293      	cmp	r3, r2
 800d1f2:	d202      	bcs.n	800d1fa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800d1f4:	2309      	movs	r3, #9
 800d1f6:	617b      	str	r3, [r7, #20]
 800d1f8:	e020      	b.n	800d23c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800d1fa:	68bb      	ldr	r3, [r7, #8]
 800d1fc:	4a21      	ldr	r2, [pc, #132]	; (800d284 <USB_SetTurnaroundTime+0x138>)
 800d1fe:	4293      	cmp	r3, r2
 800d200:	d306      	bcc.n	800d210 <USB_SetTurnaroundTime+0xc4>
 800d202:	68bb      	ldr	r3, [r7, #8]
 800d204:	4a20      	ldr	r2, [pc, #128]	; (800d288 <USB_SetTurnaroundTime+0x13c>)
 800d206:	4293      	cmp	r3, r2
 800d208:	d802      	bhi.n	800d210 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800d20a:	2308      	movs	r3, #8
 800d20c:	617b      	str	r3, [r7, #20]
 800d20e:	e015      	b.n	800d23c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800d210:	68bb      	ldr	r3, [r7, #8]
 800d212:	4a1d      	ldr	r2, [pc, #116]	; (800d288 <USB_SetTurnaroundTime+0x13c>)
 800d214:	4293      	cmp	r3, r2
 800d216:	d906      	bls.n	800d226 <USB_SetTurnaroundTime+0xda>
 800d218:	68bb      	ldr	r3, [r7, #8]
 800d21a:	4a1c      	ldr	r2, [pc, #112]	; (800d28c <USB_SetTurnaroundTime+0x140>)
 800d21c:	4293      	cmp	r3, r2
 800d21e:	d202      	bcs.n	800d226 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800d220:	2307      	movs	r3, #7
 800d222:	617b      	str	r3, [r7, #20]
 800d224:	e00a      	b.n	800d23c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800d226:	2306      	movs	r3, #6
 800d228:	617b      	str	r3, [r7, #20]
 800d22a:	e007      	b.n	800d23c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800d22c:	79fb      	ldrb	r3, [r7, #7]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d102      	bne.n	800d238 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800d232:	2309      	movs	r3, #9
 800d234:	617b      	str	r3, [r7, #20]
 800d236:	e001      	b.n	800d23c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800d238:	2309      	movs	r3, #9
 800d23a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	68db      	ldr	r3, [r3, #12]
 800d240:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	68da      	ldr	r2, [r3, #12]
 800d24c:	697b      	ldr	r3, [r7, #20]
 800d24e:	029b      	lsls	r3, r3, #10
 800d250:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800d254:	431a      	orrs	r2, r3
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d25a:	2300      	movs	r3, #0
}
 800d25c:	4618      	mov	r0, r3
 800d25e:	371c      	adds	r7, #28
 800d260:	46bd      	mov	sp, r7
 800d262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d266:	4770      	bx	lr
 800d268:	00d8acbf 	.word	0x00d8acbf
 800d26c:	00e4e1c0 	.word	0x00e4e1c0
 800d270:	00f42400 	.word	0x00f42400
 800d274:	01067380 	.word	0x01067380
 800d278:	011a499f 	.word	0x011a499f
 800d27c:	01312cff 	.word	0x01312cff
 800d280:	014ca43f 	.word	0x014ca43f
 800d284:	016e3600 	.word	0x016e3600
 800d288:	01a6ab1f 	.word	0x01a6ab1f
 800d28c:	01e84800 	.word	0x01e84800

0800d290 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d290:	b480      	push	{r7}
 800d292:	b083      	sub	sp, #12
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	689b      	ldr	r3, [r3, #8]
 800d29c:	f043 0201 	orr.w	r2, r3, #1
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d2a4:	2300      	movs	r3, #0
}
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	370c      	adds	r7, #12
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b0:	4770      	bx	lr

0800d2b2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d2b2:	b480      	push	{r7}
 800d2b4:	b083      	sub	sp, #12
 800d2b6:	af00      	add	r7, sp, #0
 800d2b8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	689b      	ldr	r3, [r3, #8]
 800d2be:	f023 0201 	bic.w	r2, r3, #1
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d2c6:	2300      	movs	r3, #0
}
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	370c      	adds	r7, #12
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d2:	4770      	bx	lr

0800d2d4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b082      	sub	sp, #8
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
 800d2dc:	460b      	mov	r3, r1
 800d2de:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	68db      	ldr	r3, [r3, #12]
 800d2e4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d2ec:	78fb      	ldrb	r3, [r7, #3]
 800d2ee:	2b01      	cmp	r3, #1
 800d2f0:	d106      	bne.n	800d300 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	68db      	ldr	r3, [r3, #12]
 800d2f6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	60da      	str	r2, [r3, #12]
 800d2fe:	e00b      	b.n	800d318 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800d300:	78fb      	ldrb	r3, [r7, #3]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d106      	bne.n	800d314 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	68db      	ldr	r3, [r3, #12]
 800d30a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	60da      	str	r2, [r3, #12]
 800d312:	e001      	b.n	800d318 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800d314:	2301      	movs	r3, #1
 800d316:	e003      	b.n	800d320 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800d318:	2032      	movs	r0, #50	; 0x32
 800d31a:	f7f4 fc9b 	bl	8001c54 <HAL_Delay>

  return HAL_OK;
 800d31e:	2300      	movs	r3, #0
}
 800d320:	4618      	mov	r0, r3
 800d322:	3708      	adds	r7, #8
 800d324:	46bd      	mov	sp, r7
 800d326:	bd80      	pop	{r7, pc}

0800d328 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d328:	b084      	sub	sp, #16
 800d32a:	b580      	push	{r7, lr}
 800d32c:	b086      	sub	sp, #24
 800d32e:	af00      	add	r7, sp, #0
 800d330:	6078      	str	r0, [r7, #4]
 800d332:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800d336:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d33a:	2300      	movs	r3, #0
 800d33c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d342:	2300      	movs	r3, #0
 800d344:	613b      	str	r3, [r7, #16]
 800d346:	e009      	b.n	800d35c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d348:	687a      	ldr	r2, [r7, #4]
 800d34a:	693b      	ldr	r3, [r7, #16]
 800d34c:	3340      	adds	r3, #64	; 0x40
 800d34e:	009b      	lsls	r3, r3, #2
 800d350:	4413      	add	r3, r2
 800d352:	2200      	movs	r2, #0
 800d354:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d356:	693b      	ldr	r3, [r7, #16]
 800d358:	3301      	adds	r3, #1
 800d35a:	613b      	str	r3, [r7, #16]
 800d35c:	693b      	ldr	r3, [r7, #16]
 800d35e:	2b0e      	cmp	r3, #14
 800d360:	d9f2      	bls.n	800d348 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d362:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d364:	2b00      	cmp	r3, #0
 800d366:	d11c      	bne.n	800d3a2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d36e:	685b      	ldr	r3, [r3, #4]
 800d370:	68fa      	ldr	r2, [r7, #12]
 800d372:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d376:	f043 0302 	orr.w	r3, r3, #2
 800d37a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d380:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	601a      	str	r2, [r3, #0]
 800d3a0:	e005      	b.n	800d3ae <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3a6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d3b4:	461a      	mov	r2, r3
 800d3b6:	2300      	movs	r3, #0
 800d3b8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d3c0:	4619      	mov	r1, r3
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d3c8:	461a      	mov	r2, r3
 800d3ca:	680b      	ldr	r3, [r1, #0]
 800d3cc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d3ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3d0:	2b01      	cmp	r3, #1
 800d3d2:	d10c      	bne.n	800d3ee <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d3d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d104      	bne.n	800d3e4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d3da:	2100      	movs	r1, #0
 800d3dc:	6878      	ldr	r0, [r7, #4]
 800d3de:	f000 f949 	bl	800d674 <USB_SetDevSpeed>
 800d3e2:	e008      	b.n	800d3f6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d3e4:	2101      	movs	r1, #1
 800d3e6:	6878      	ldr	r0, [r7, #4]
 800d3e8:	f000 f944 	bl	800d674 <USB_SetDevSpeed>
 800d3ec:	e003      	b.n	800d3f6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d3ee:	2103      	movs	r1, #3
 800d3f0:	6878      	ldr	r0, [r7, #4]
 800d3f2:	f000 f93f 	bl	800d674 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d3f6:	2110      	movs	r1, #16
 800d3f8:	6878      	ldr	r0, [r7, #4]
 800d3fa:	f000 f8f3 	bl	800d5e4 <USB_FlushTxFifo>
 800d3fe:	4603      	mov	r3, r0
 800d400:	2b00      	cmp	r3, #0
 800d402:	d001      	beq.n	800d408 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800d404:	2301      	movs	r3, #1
 800d406:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d408:	6878      	ldr	r0, [r7, #4]
 800d40a:	f000 f911 	bl	800d630 <USB_FlushRxFifo>
 800d40e:	4603      	mov	r3, r0
 800d410:	2b00      	cmp	r3, #0
 800d412:	d001      	beq.n	800d418 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800d414:	2301      	movs	r3, #1
 800d416:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d41e:	461a      	mov	r2, r3
 800d420:	2300      	movs	r3, #0
 800d422:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d42a:	461a      	mov	r2, r3
 800d42c:	2300      	movs	r3, #0
 800d42e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d436:	461a      	mov	r2, r3
 800d438:	2300      	movs	r3, #0
 800d43a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d43c:	2300      	movs	r3, #0
 800d43e:	613b      	str	r3, [r7, #16]
 800d440:	e043      	b.n	800d4ca <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d442:	693b      	ldr	r3, [r7, #16]
 800d444:	015a      	lsls	r2, r3, #5
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	4413      	add	r3, r2
 800d44a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d454:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d458:	d118      	bne.n	800d48c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800d45a:	693b      	ldr	r3, [r7, #16]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d10a      	bne.n	800d476 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d460:	693b      	ldr	r3, [r7, #16]
 800d462:	015a      	lsls	r2, r3, #5
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	4413      	add	r3, r2
 800d468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d46c:	461a      	mov	r2, r3
 800d46e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d472:	6013      	str	r3, [r2, #0]
 800d474:	e013      	b.n	800d49e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d476:	693b      	ldr	r3, [r7, #16]
 800d478:	015a      	lsls	r2, r3, #5
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	4413      	add	r3, r2
 800d47e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d482:	461a      	mov	r2, r3
 800d484:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d488:	6013      	str	r3, [r2, #0]
 800d48a:	e008      	b.n	800d49e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d48c:	693b      	ldr	r3, [r7, #16]
 800d48e:	015a      	lsls	r2, r3, #5
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	4413      	add	r3, r2
 800d494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d498:	461a      	mov	r2, r3
 800d49a:	2300      	movs	r3, #0
 800d49c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d49e:	693b      	ldr	r3, [r7, #16]
 800d4a0:	015a      	lsls	r2, r3, #5
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	4413      	add	r3, r2
 800d4a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4aa:	461a      	mov	r2, r3
 800d4ac:	2300      	movs	r3, #0
 800d4ae:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d4b0:	693b      	ldr	r3, [r7, #16]
 800d4b2:	015a      	lsls	r2, r3, #5
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	4413      	add	r3, r2
 800d4b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4bc:	461a      	mov	r2, r3
 800d4be:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d4c2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d4c4:	693b      	ldr	r3, [r7, #16]
 800d4c6:	3301      	adds	r3, #1
 800d4c8:	613b      	str	r3, [r7, #16]
 800d4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4cc:	693a      	ldr	r2, [r7, #16]
 800d4ce:	429a      	cmp	r2, r3
 800d4d0:	d3b7      	bcc.n	800d442 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	613b      	str	r3, [r7, #16]
 800d4d6:	e043      	b.n	800d560 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d4d8:	693b      	ldr	r3, [r7, #16]
 800d4da:	015a      	lsls	r2, r3, #5
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	4413      	add	r3, r2
 800d4e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d4ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d4ee:	d118      	bne.n	800d522 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800d4f0:	693b      	ldr	r3, [r7, #16]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d10a      	bne.n	800d50c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d4f6:	693b      	ldr	r3, [r7, #16]
 800d4f8:	015a      	lsls	r2, r3, #5
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	4413      	add	r3, r2
 800d4fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d502:	461a      	mov	r2, r3
 800d504:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d508:	6013      	str	r3, [r2, #0]
 800d50a:	e013      	b.n	800d534 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d50c:	693b      	ldr	r3, [r7, #16]
 800d50e:	015a      	lsls	r2, r3, #5
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	4413      	add	r3, r2
 800d514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d518:	461a      	mov	r2, r3
 800d51a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d51e:	6013      	str	r3, [r2, #0]
 800d520:	e008      	b.n	800d534 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d522:	693b      	ldr	r3, [r7, #16]
 800d524:	015a      	lsls	r2, r3, #5
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	4413      	add	r3, r2
 800d52a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d52e:	461a      	mov	r2, r3
 800d530:	2300      	movs	r3, #0
 800d532:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d534:	693b      	ldr	r3, [r7, #16]
 800d536:	015a      	lsls	r2, r3, #5
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	4413      	add	r3, r2
 800d53c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d540:	461a      	mov	r2, r3
 800d542:	2300      	movs	r3, #0
 800d544:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d546:	693b      	ldr	r3, [r7, #16]
 800d548:	015a      	lsls	r2, r3, #5
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	4413      	add	r3, r2
 800d54e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d552:	461a      	mov	r2, r3
 800d554:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d558:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d55a:	693b      	ldr	r3, [r7, #16]
 800d55c:	3301      	adds	r3, #1
 800d55e:	613b      	str	r3, [r7, #16]
 800d560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d562:	693a      	ldr	r2, [r7, #16]
 800d564:	429a      	cmp	r2, r3
 800d566:	d3b7      	bcc.n	800d4d8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d56e:	691b      	ldr	r3, [r3, #16]
 800d570:	68fa      	ldr	r2, [r7, #12]
 800d572:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d576:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d57a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	2200      	movs	r2, #0
 800d580:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800d588:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d58a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d105      	bne.n	800d59c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	699b      	ldr	r3, [r3, #24]
 800d594:	f043 0210 	orr.w	r2, r3, #16
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	699a      	ldr	r2, [r3, #24]
 800d5a0:	4b0e      	ldr	r3, [pc, #56]	; (800d5dc <USB_DevInit+0x2b4>)
 800d5a2:	4313      	orrs	r3, r2
 800d5a4:	687a      	ldr	r2, [r7, #4]
 800d5a6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d5a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d005      	beq.n	800d5ba <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	699b      	ldr	r3, [r3, #24]
 800d5b2:	f043 0208 	orr.w	r2, r3, #8
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d5ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d5bc:	2b01      	cmp	r3, #1
 800d5be:	d105      	bne.n	800d5cc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	699a      	ldr	r2, [r3, #24]
 800d5c4:	4b06      	ldr	r3, [pc, #24]	; (800d5e0 <USB_DevInit+0x2b8>)
 800d5c6:	4313      	orrs	r3, r2
 800d5c8:	687a      	ldr	r2, [r7, #4]
 800d5ca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d5cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	3718      	adds	r7, #24
 800d5d2:	46bd      	mov	sp, r7
 800d5d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d5d8:	b004      	add	sp, #16
 800d5da:	4770      	bx	lr
 800d5dc:	803c3800 	.word	0x803c3800
 800d5e0:	40000004 	.word	0x40000004

0800d5e4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d5e4:	b480      	push	{r7}
 800d5e6:	b085      	sub	sp, #20
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	6078      	str	r0, [r7, #4]
 800d5ec:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d5f2:	683b      	ldr	r3, [r7, #0]
 800d5f4:	019b      	lsls	r3, r3, #6
 800d5f6:	f043 0220 	orr.w	r2, r3, #32
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	3301      	adds	r3, #1
 800d602:	60fb      	str	r3, [r7, #12]
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	4a09      	ldr	r2, [pc, #36]	; (800d62c <USB_FlushTxFifo+0x48>)
 800d608:	4293      	cmp	r3, r2
 800d60a:	d901      	bls.n	800d610 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800d60c:	2303      	movs	r3, #3
 800d60e:	e006      	b.n	800d61e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	691b      	ldr	r3, [r3, #16]
 800d614:	f003 0320 	and.w	r3, r3, #32
 800d618:	2b20      	cmp	r3, #32
 800d61a:	d0f0      	beq.n	800d5fe <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800d61c:	2300      	movs	r3, #0
}
 800d61e:	4618      	mov	r0, r3
 800d620:	3714      	adds	r7, #20
 800d622:	46bd      	mov	sp, r7
 800d624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d628:	4770      	bx	lr
 800d62a:	bf00      	nop
 800d62c:	00030d40 	.word	0x00030d40

0800d630 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d630:	b480      	push	{r7}
 800d632:	b085      	sub	sp, #20
 800d634:	af00      	add	r7, sp, #0
 800d636:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800d638:	2300      	movs	r3, #0
 800d63a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	2210      	movs	r2, #16
 800d640:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	3301      	adds	r3, #1
 800d646:	60fb      	str	r3, [r7, #12]
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	4a09      	ldr	r2, [pc, #36]	; (800d670 <USB_FlushRxFifo+0x40>)
 800d64c:	4293      	cmp	r3, r2
 800d64e:	d901      	bls.n	800d654 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800d650:	2303      	movs	r3, #3
 800d652:	e006      	b.n	800d662 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	691b      	ldr	r3, [r3, #16]
 800d658:	f003 0310 	and.w	r3, r3, #16
 800d65c:	2b10      	cmp	r3, #16
 800d65e:	d0f0      	beq.n	800d642 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800d660:	2300      	movs	r3, #0
}
 800d662:	4618      	mov	r0, r3
 800d664:	3714      	adds	r7, #20
 800d666:	46bd      	mov	sp, r7
 800d668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d66c:	4770      	bx	lr
 800d66e:	bf00      	nop
 800d670:	00030d40 	.word	0x00030d40

0800d674 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d674:	b480      	push	{r7}
 800d676:	b085      	sub	sp, #20
 800d678:	af00      	add	r7, sp, #0
 800d67a:	6078      	str	r0, [r7, #4]
 800d67c:	460b      	mov	r3, r1
 800d67e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d68a:	681a      	ldr	r2, [r3, #0]
 800d68c:	78fb      	ldrb	r3, [r7, #3]
 800d68e:	68f9      	ldr	r1, [r7, #12]
 800d690:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d694:	4313      	orrs	r3, r2
 800d696:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d698:	2300      	movs	r3, #0
}
 800d69a:	4618      	mov	r0, r3
 800d69c:	3714      	adds	r7, #20
 800d69e:	46bd      	mov	sp, r7
 800d6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a4:	4770      	bx	lr

0800d6a6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800d6a6:	b480      	push	{r7}
 800d6a8:	b087      	sub	sp, #28
 800d6aa:	af00      	add	r7, sp, #0
 800d6ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800d6b2:	693b      	ldr	r3, [r7, #16]
 800d6b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d6b8:	689b      	ldr	r3, [r3, #8]
 800d6ba:	f003 0306 	and.w	r3, r3, #6
 800d6be:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d102      	bne.n	800d6cc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	75fb      	strb	r3, [r7, #23]
 800d6ca:	e00a      	b.n	800d6e2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	2b02      	cmp	r3, #2
 800d6d0:	d002      	beq.n	800d6d8 <USB_GetDevSpeed+0x32>
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	2b06      	cmp	r3, #6
 800d6d6:	d102      	bne.n	800d6de <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800d6d8:	2302      	movs	r3, #2
 800d6da:	75fb      	strb	r3, [r7, #23]
 800d6dc:	e001      	b.n	800d6e2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800d6de:	230f      	movs	r3, #15
 800d6e0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800d6e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	371c      	adds	r7, #28
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ee:	4770      	bx	lr

0800d6f0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d6f0:	b480      	push	{r7}
 800d6f2:	b085      	sub	sp, #20
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	6078      	str	r0, [r7, #4]
 800d6f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d6fe:	683b      	ldr	r3, [r7, #0]
 800d700:	781b      	ldrb	r3, [r3, #0]
 800d702:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d704:	683b      	ldr	r3, [r7, #0]
 800d706:	785b      	ldrb	r3, [r3, #1]
 800d708:	2b01      	cmp	r3, #1
 800d70a:	d139      	bne.n	800d780 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d712:	69da      	ldr	r2, [r3, #28]
 800d714:	683b      	ldr	r3, [r7, #0]
 800d716:	781b      	ldrb	r3, [r3, #0]
 800d718:	f003 030f 	and.w	r3, r3, #15
 800d71c:	2101      	movs	r1, #1
 800d71e:	fa01 f303 	lsl.w	r3, r1, r3
 800d722:	b29b      	uxth	r3, r3
 800d724:	68f9      	ldr	r1, [r7, #12]
 800d726:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d72a:	4313      	orrs	r3, r2
 800d72c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800d72e:	68bb      	ldr	r3, [r7, #8]
 800d730:	015a      	lsls	r2, r3, #5
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	4413      	add	r3, r2
 800d736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d740:	2b00      	cmp	r3, #0
 800d742:	d153      	bne.n	800d7ec <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d744:	68bb      	ldr	r3, [r7, #8]
 800d746:	015a      	lsls	r2, r3, #5
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	4413      	add	r3, r2
 800d74c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d750:	681a      	ldr	r2, [r3, #0]
 800d752:	683b      	ldr	r3, [r7, #0]
 800d754:	689b      	ldr	r3, [r3, #8]
 800d756:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d75a:	683b      	ldr	r3, [r7, #0]
 800d75c:	78db      	ldrb	r3, [r3, #3]
 800d75e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d760:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d762:	68bb      	ldr	r3, [r7, #8]
 800d764:	059b      	lsls	r3, r3, #22
 800d766:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d768:	431a      	orrs	r2, r3
 800d76a:	68bb      	ldr	r3, [r7, #8]
 800d76c:	0159      	lsls	r1, r3, #5
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	440b      	add	r3, r1
 800d772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d776:	4619      	mov	r1, r3
 800d778:	4b20      	ldr	r3, [pc, #128]	; (800d7fc <USB_ActivateEndpoint+0x10c>)
 800d77a:	4313      	orrs	r3, r2
 800d77c:	600b      	str	r3, [r1, #0]
 800d77e:	e035      	b.n	800d7ec <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d786:	69da      	ldr	r2, [r3, #28]
 800d788:	683b      	ldr	r3, [r7, #0]
 800d78a:	781b      	ldrb	r3, [r3, #0]
 800d78c:	f003 030f 	and.w	r3, r3, #15
 800d790:	2101      	movs	r1, #1
 800d792:	fa01 f303 	lsl.w	r3, r1, r3
 800d796:	041b      	lsls	r3, r3, #16
 800d798:	68f9      	ldr	r1, [r7, #12]
 800d79a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d79e:	4313      	orrs	r3, r2
 800d7a0:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800d7a2:	68bb      	ldr	r3, [r7, #8]
 800d7a4:	015a      	lsls	r2, r3, #5
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	4413      	add	r3, r2
 800d7aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d119      	bne.n	800d7ec <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d7b8:	68bb      	ldr	r3, [r7, #8]
 800d7ba:	015a      	lsls	r2, r3, #5
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	4413      	add	r3, r2
 800d7c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7c4:	681a      	ldr	r2, [r3, #0]
 800d7c6:	683b      	ldr	r3, [r7, #0]
 800d7c8:	689b      	ldr	r3, [r3, #8]
 800d7ca:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800d7ce:	683b      	ldr	r3, [r7, #0]
 800d7d0:	78db      	ldrb	r3, [r3, #3]
 800d7d2:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d7d4:	430b      	orrs	r3, r1
 800d7d6:	431a      	orrs	r2, r3
 800d7d8:	68bb      	ldr	r3, [r7, #8]
 800d7da:	0159      	lsls	r1, r3, #5
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	440b      	add	r3, r1
 800d7e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7e4:	4619      	mov	r1, r3
 800d7e6:	4b05      	ldr	r3, [pc, #20]	; (800d7fc <USB_ActivateEndpoint+0x10c>)
 800d7e8:	4313      	orrs	r3, r2
 800d7ea:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800d7ec:	2300      	movs	r3, #0
}
 800d7ee:	4618      	mov	r0, r3
 800d7f0:	3714      	adds	r7, #20
 800d7f2:	46bd      	mov	sp, r7
 800d7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f8:	4770      	bx	lr
 800d7fa:	bf00      	nop
 800d7fc:	10008000 	.word	0x10008000

0800d800 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d800:	b480      	push	{r7}
 800d802:	b085      	sub	sp, #20
 800d804:	af00      	add	r7, sp, #0
 800d806:	6078      	str	r0, [r7, #4]
 800d808:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d80e:	683b      	ldr	r3, [r7, #0]
 800d810:	781b      	ldrb	r3, [r3, #0]
 800d812:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800d814:	683b      	ldr	r3, [r7, #0]
 800d816:	785b      	ldrb	r3, [r3, #1]
 800d818:	2b01      	cmp	r3, #1
 800d81a:	d161      	bne.n	800d8e0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d81c:	68bb      	ldr	r3, [r7, #8]
 800d81e:	015a      	lsls	r2, r3, #5
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	4413      	add	r3, r2
 800d824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d82e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d832:	d11f      	bne.n	800d874 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800d834:	68bb      	ldr	r3, [r7, #8]
 800d836:	015a      	lsls	r2, r3, #5
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	4413      	add	r3, r2
 800d83c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	68ba      	ldr	r2, [r7, #8]
 800d844:	0151      	lsls	r1, r2, #5
 800d846:	68fa      	ldr	r2, [r7, #12]
 800d848:	440a      	add	r2, r1
 800d84a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d84e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d852:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800d854:	68bb      	ldr	r3, [r7, #8]
 800d856:	015a      	lsls	r2, r3, #5
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	4413      	add	r3, r2
 800d85c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	68ba      	ldr	r2, [r7, #8]
 800d864:	0151      	lsls	r1, r2, #5
 800d866:	68fa      	ldr	r2, [r7, #12]
 800d868:	440a      	add	r2, r1
 800d86a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d86e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d872:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d87a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d87c:	683b      	ldr	r3, [r7, #0]
 800d87e:	781b      	ldrb	r3, [r3, #0]
 800d880:	f003 030f 	and.w	r3, r3, #15
 800d884:	2101      	movs	r1, #1
 800d886:	fa01 f303 	lsl.w	r3, r1, r3
 800d88a:	b29b      	uxth	r3, r3
 800d88c:	43db      	mvns	r3, r3
 800d88e:	68f9      	ldr	r1, [r7, #12]
 800d890:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d894:	4013      	ands	r3, r2
 800d896:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d89e:	69da      	ldr	r2, [r3, #28]
 800d8a0:	683b      	ldr	r3, [r7, #0]
 800d8a2:	781b      	ldrb	r3, [r3, #0]
 800d8a4:	f003 030f 	and.w	r3, r3, #15
 800d8a8:	2101      	movs	r1, #1
 800d8aa:	fa01 f303 	lsl.w	r3, r1, r3
 800d8ae:	b29b      	uxth	r3, r3
 800d8b0:	43db      	mvns	r3, r3
 800d8b2:	68f9      	ldr	r1, [r7, #12]
 800d8b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d8b8:	4013      	ands	r3, r2
 800d8ba:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800d8bc:	68bb      	ldr	r3, [r7, #8]
 800d8be:	015a      	lsls	r2, r3, #5
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	4413      	add	r3, r2
 800d8c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d8c8:	681a      	ldr	r2, [r3, #0]
 800d8ca:	68bb      	ldr	r3, [r7, #8]
 800d8cc:	0159      	lsls	r1, r3, #5
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	440b      	add	r3, r1
 800d8d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d8d6:	4619      	mov	r1, r3
 800d8d8:	4b35      	ldr	r3, [pc, #212]	; (800d9b0 <USB_DeactivateEndpoint+0x1b0>)
 800d8da:	4013      	ands	r3, r2
 800d8dc:	600b      	str	r3, [r1, #0]
 800d8de:	e060      	b.n	800d9a2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d8e0:	68bb      	ldr	r3, [r7, #8]
 800d8e2:	015a      	lsls	r2, r3, #5
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	4413      	add	r3, r2
 800d8e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d8f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d8f6:	d11f      	bne.n	800d938 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800d8f8:	68bb      	ldr	r3, [r7, #8]
 800d8fa:	015a      	lsls	r2, r3, #5
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	4413      	add	r3, r2
 800d900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	68ba      	ldr	r2, [r7, #8]
 800d908:	0151      	lsls	r1, r2, #5
 800d90a:	68fa      	ldr	r2, [r7, #12]
 800d90c:	440a      	add	r2, r1
 800d90e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d912:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d916:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800d918:	68bb      	ldr	r3, [r7, #8]
 800d91a:	015a      	lsls	r2, r3, #5
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	4413      	add	r3, r2
 800d920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	68ba      	ldr	r2, [r7, #8]
 800d928:	0151      	lsls	r1, r2, #5
 800d92a:	68fa      	ldr	r2, [r7, #12]
 800d92c:	440a      	add	r2, r1
 800d92e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d932:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d936:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d93e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d940:	683b      	ldr	r3, [r7, #0]
 800d942:	781b      	ldrb	r3, [r3, #0]
 800d944:	f003 030f 	and.w	r3, r3, #15
 800d948:	2101      	movs	r1, #1
 800d94a:	fa01 f303 	lsl.w	r3, r1, r3
 800d94e:	041b      	lsls	r3, r3, #16
 800d950:	43db      	mvns	r3, r3
 800d952:	68f9      	ldr	r1, [r7, #12]
 800d954:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d958:	4013      	ands	r3, r2
 800d95a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d962:	69da      	ldr	r2, [r3, #28]
 800d964:	683b      	ldr	r3, [r7, #0]
 800d966:	781b      	ldrb	r3, [r3, #0]
 800d968:	f003 030f 	and.w	r3, r3, #15
 800d96c:	2101      	movs	r1, #1
 800d96e:	fa01 f303 	lsl.w	r3, r1, r3
 800d972:	041b      	lsls	r3, r3, #16
 800d974:	43db      	mvns	r3, r3
 800d976:	68f9      	ldr	r1, [r7, #12]
 800d978:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d97c:	4013      	ands	r3, r2
 800d97e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800d980:	68bb      	ldr	r3, [r7, #8]
 800d982:	015a      	lsls	r2, r3, #5
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	4413      	add	r3, r2
 800d988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d98c:	681a      	ldr	r2, [r3, #0]
 800d98e:	68bb      	ldr	r3, [r7, #8]
 800d990:	0159      	lsls	r1, r3, #5
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	440b      	add	r3, r1
 800d996:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d99a:	4619      	mov	r1, r3
 800d99c:	4b05      	ldr	r3, [pc, #20]	; (800d9b4 <USB_DeactivateEndpoint+0x1b4>)
 800d99e:	4013      	ands	r3, r2
 800d9a0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800d9a2:	2300      	movs	r3, #0
}
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	3714      	adds	r7, #20
 800d9a8:	46bd      	mov	sp, r7
 800d9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ae:	4770      	bx	lr
 800d9b0:	ec337800 	.word	0xec337800
 800d9b4:	eff37800 	.word	0xeff37800

0800d9b8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d9b8:	b580      	push	{r7, lr}
 800d9ba:	b08a      	sub	sp, #40	; 0x28
 800d9bc:	af02      	add	r7, sp, #8
 800d9be:	60f8      	str	r0, [r7, #12]
 800d9c0:	60b9      	str	r1, [r7, #8]
 800d9c2:	4613      	mov	r3, r2
 800d9c4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800d9ca:	68bb      	ldr	r3, [r7, #8]
 800d9cc:	781b      	ldrb	r3, [r3, #0]
 800d9ce:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d9d0:	68bb      	ldr	r3, [r7, #8]
 800d9d2:	785b      	ldrb	r3, [r3, #1]
 800d9d4:	2b01      	cmp	r3, #1
 800d9d6:	f040 8163 	bne.w	800dca0 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d9da:	68bb      	ldr	r3, [r7, #8]
 800d9dc:	695b      	ldr	r3, [r3, #20]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d132      	bne.n	800da48 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d9e2:	69bb      	ldr	r3, [r7, #24]
 800d9e4:	015a      	lsls	r2, r3, #5
 800d9e6:	69fb      	ldr	r3, [r7, #28]
 800d9e8:	4413      	add	r3, r2
 800d9ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d9ee:	691a      	ldr	r2, [r3, #16]
 800d9f0:	69bb      	ldr	r3, [r7, #24]
 800d9f2:	0159      	lsls	r1, r3, #5
 800d9f4:	69fb      	ldr	r3, [r7, #28]
 800d9f6:	440b      	add	r3, r1
 800d9f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d9fc:	4619      	mov	r1, r3
 800d9fe:	4ba5      	ldr	r3, [pc, #660]	; (800dc94 <USB_EPStartXfer+0x2dc>)
 800da00:	4013      	ands	r3, r2
 800da02:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800da04:	69bb      	ldr	r3, [r7, #24]
 800da06:	015a      	lsls	r2, r3, #5
 800da08:	69fb      	ldr	r3, [r7, #28]
 800da0a:	4413      	add	r3, r2
 800da0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da10:	691b      	ldr	r3, [r3, #16]
 800da12:	69ba      	ldr	r2, [r7, #24]
 800da14:	0151      	lsls	r1, r2, #5
 800da16:	69fa      	ldr	r2, [r7, #28]
 800da18:	440a      	add	r2, r1
 800da1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800da1e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800da22:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800da24:	69bb      	ldr	r3, [r7, #24]
 800da26:	015a      	lsls	r2, r3, #5
 800da28:	69fb      	ldr	r3, [r7, #28]
 800da2a:	4413      	add	r3, r2
 800da2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da30:	691a      	ldr	r2, [r3, #16]
 800da32:	69bb      	ldr	r3, [r7, #24]
 800da34:	0159      	lsls	r1, r3, #5
 800da36:	69fb      	ldr	r3, [r7, #28]
 800da38:	440b      	add	r3, r1
 800da3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da3e:	4619      	mov	r1, r3
 800da40:	4b95      	ldr	r3, [pc, #596]	; (800dc98 <USB_EPStartXfer+0x2e0>)
 800da42:	4013      	ands	r3, r2
 800da44:	610b      	str	r3, [r1, #16]
 800da46:	e074      	b.n	800db32 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800da48:	69bb      	ldr	r3, [r7, #24]
 800da4a:	015a      	lsls	r2, r3, #5
 800da4c:	69fb      	ldr	r3, [r7, #28]
 800da4e:	4413      	add	r3, r2
 800da50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da54:	691a      	ldr	r2, [r3, #16]
 800da56:	69bb      	ldr	r3, [r7, #24]
 800da58:	0159      	lsls	r1, r3, #5
 800da5a:	69fb      	ldr	r3, [r7, #28]
 800da5c:	440b      	add	r3, r1
 800da5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da62:	4619      	mov	r1, r3
 800da64:	4b8c      	ldr	r3, [pc, #560]	; (800dc98 <USB_EPStartXfer+0x2e0>)
 800da66:	4013      	ands	r3, r2
 800da68:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800da6a:	69bb      	ldr	r3, [r7, #24]
 800da6c:	015a      	lsls	r2, r3, #5
 800da6e:	69fb      	ldr	r3, [r7, #28]
 800da70:	4413      	add	r3, r2
 800da72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da76:	691a      	ldr	r2, [r3, #16]
 800da78:	69bb      	ldr	r3, [r7, #24]
 800da7a:	0159      	lsls	r1, r3, #5
 800da7c:	69fb      	ldr	r3, [r7, #28]
 800da7e:	440b      	add	r3, r1
 800da80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da84:	4619      	mov	r1, r3
 800da86:	4b83      	ldr	r3, [pc, #524]	; (800dc94 <USB_EPStartXfer+0x2dc>)
 800da88:	4013      	ands	r3, r2
 800da8a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800da8c:	69bb      	ldr	r3, [r7, #24]
 800da8e:	015a      	lsls	r2, r3, #5
 800da90:	69fb      	ldr	r3, [r7, #28]
 800da92:	4413      	add	r3, r2
 800da94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da98:	691a      	ldr	r2, [r3, #16]
 800da9a:	68bb      	ldr	r3, [r7, #8]
 800da9c:	6959      	ldr	r1, [r3, #20]
 800da9e:	68bb      	ldr	r3, [r7, #8]
 800daa0:	689b      	ldr	r3, [r3, #8]
 800daa2:	440b      	add	r3, r1
 800daa4:	1e59      	subs	r1, r3, #1
 800daa6:	68bb      	ldr	r3, [r7, #8]
 800daa8:	689b      	ldr	r3, [r3, #8]
 800daaa:	fbb1 f3f3 	udiv	r3, r1, r3
 800daae:	04d9      	lsls	r1, r3, #19
 800dab0:	4b7a      	ldr	r3, [pc, #488]	; (800dc9c <USB_EPStartXfer+0x2e4>)
 800dab2:	400b      	ands	r3, r1
 800dab4:	69b9      	ldr	r1, [r7, #24]
 800dab6:	0148      	lsls	r0, r1, #5
 800dab8:	69f9      	ldr	r1, [r7, #28]
 800daba:	4401      	add	r1, r0
 800dabc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800dac0:	4313      	orrs	r3, r2
 800dac2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800dac4:	69bb      	ldr	r3, [r7, #24]
 800dac6:	015a      	lsls	r2, r3, #5
 800dac8:	69fb      	ldr	r3, [r7, #28]
 800daca:	4413      	add	r3, r2
 800dacc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dad0:	691a      	ldr	r2, [r3, #16]
 800dad2:	68bb      	ldr	r3, [r7, #8]
 800dad4:	695b      	ldr	r3, [r3, #20]
 800dad6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800dada:	69b9      	ldr	r1, [r7, #24]
 800dadc:	0148      	lsls	r0, r1, #5
 800dade:	69f9      	ldr	r1, [r7, #28]
 800dae0:	4401      	add	r1, r0
 800dae2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800dae6:	4313      	orrs	r3, r2
 800dae8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800daea:	68bb      	ldr	r3, [r7, #8]
 800daec:	78db      	ldrb	r3, [r3, #3]
 800daee:	2b01      	cmp	r3, #1
 800daf0:	d11f      	bne.n	800db32 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800daf2:	69bb      	ldr	r3, [r7, #24]
 800daf4:	015a      	lsls	r2, r3, #5
 800daf6:	69fb      	ldr	r3, [r7, #28]
 800daf8:	4413      	add	r3, r2
 800dafa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dafe:	691b      	ldr	r3, [r3, #16]
 800db00:	69ba      	ldr	r2, [r7, #24]
 800db02:	0151      	lsls	r1, r2, #5
 800db04:	69fa      	ldr	r2, [r7, #28]
 800db06:	440a      	add	r2, r1
 800db08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800db0c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800db10:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800db12:	69bb      	ldr	r3, [r7, #24]
 800db14:	015a      	lsls	r2, r3, #5
 800db16:	69fb      	ldr	r3, [r7, #28]
 800db18:	4413      	add	r3, r2
 800db1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db1e:	691b      	ldr	r3, [r3, #16]
 800db20:	69ba      	ldr	r2, [r7, #24]
 800db22:	0151      	lsls	r1, r2, #5
 800db24:	69fa      	ldr	r2, [r7, #28]
 800db26:	440a      	add	r2, r1
 800db28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800db2c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800db30:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800db32:	79fb      	ldrb	r3, [r7, #7]
 800db34:	2b01      	cmp	r3, #1
 800db36:	d14b      	bne.n	800dbd0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800db38:	68bb      	ldr	r3, [r7, #8]
 800db3a:	691b      	ldr	r3, [r3, #16]
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d009      	beq.n	800db54 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800db40:	69bb      	ldr	r3, [r7, #24]
 800db42:	015a      	lsls	r2, r3, #5
 800db44:	69fb      	ldr	r3, [r7, #28]
 800db46:	4413      	add	r3, r2
 800db48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db4c:	461a      	mov	r2, r3
 800db4e:	68bb      	ldr	r3, [r7, #8]
 800db50:	691b      	ldr	r3, [r3, #16]
 800db52:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800db54:	68bb      	ldr	r3, [r7, #8]
 800db56:	78db      	ldrb	r3, [r3, #3]
 800db58:	2b01      	cmp	r3, #1
 800db5a:	d128      	bne.n	800dbae <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800db5c:	69fb      	ldr	r3, [r7, #28]
 800db5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800db62:	689b      	ldr	r3, [r3, #8]
 800db64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d110      	bne.n	800db8e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800db6c:	69bb      	ldr	r3, [r7, #24]
 800db6e:	015a      	lsls	r2, r3, #5
 800db70:	69fb      	ldr	r3, [r7, #28]
 800db72:	4413      	add	r3, r2
 800db74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	69ba      	ldr	r2, [r7, #24]
 800db7c:	0151      	lsls	r1, r2, #5
 800db7e:	69fa      	ldr	r2, [r7, #28]
 800db80:	440a      	add	r2, r1
 800db82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800db86:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800db8a:	6013      	str	r3, [r2, #0]
 800db8c:	e00f      	b.n	800dbae <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800db8e:	69bb      	ldr	r3, [r7, #24]
 800db90:	015a      	lsls	r2, r3, #5
 800db92:	69fb      	ldr	r3, [r7, #28]
 800db94:	4413      	add	r3, r2
 800db96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	69ba      	ldr	r2, [r7, #24]
 800db9e:	0151      	lsls	r1, r2, #5
 800dba0:	69fa      	ldr	r2, [r7, #28]
 800dba2:	440a      	add	r2, r1
 800dba4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dbac:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800dbae:	69bb      	ldr	r3, [r7, #24]
 800dbb0:	015a      	lsls	r2, r3, #5
 800dbb2:	69fb      	ldr	r3, [r7, #28]
 800dbb4:	4413      	add	r3, r2
 800dbb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	69ba      	ldr	r2, [r7, #24]
 800dbbe:	0151      	lsls	r1, r2, #5
 800dbc0:	69fa      	ldr	r2, [r7, #28]
 800dbc2:	440a      	add	r2, r1
 800dbc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dbc8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800dbcc:	6013      	str	r3, [r2, #0]
 800dbce:	e133      	b.n	800de38 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800dbd0:	69bb      	ldr	r3, [r7, #24]
 800dbd2:	015a      	lsls	r2, r3, #5
 800dbd4:	69fb      	ldr	r3, [r7, #28]
 800dbd6:	4413      	add	r3, r2
 800dbd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	69ba      	ldr	r2, [r7, #24]
 800dbe0:	0151      	lsls	r1, r2, #5
 800dbe2:	69fa      	ldr	r2, [r7, #28]
 800dbe4:	440a      	add	r2, r1
 800dbe6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dbea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800dbee:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800dbf0:	68bb      	ldr	r3, [r7, #8]
 800dbf2:	78db      	ldrb	r3, [r3, #3]
 800dbf4:	2b01      	cmp	r3, #1
 800dbf6:	d015      	beq.n	800dc24 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800dbf8:	68bb      	ldr	r3, [r7, #8]
 800dbfa:	695b      	ldr	r3, [r3, #20]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	f000 811b 	beq.w	800de38 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800dc02:	69fb      	ldr	r3, [r7, #28]
 800dc04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dc0a:	68bb      	ldr	r3, [r7, #8]
 800dc0c:	781b      	ldrb	r3, [r3, #0]
 800dc0e:	f003 030f 	and.w	r3, r3, #15
 800dc12:	2101      	movs	r1, #1
 800dc14:	fa01 f303 	lsl.w	r3, r1, r3
 800dc18:	69f9      	ldr	r1, [r7, #28]
 800dc1a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dc1e:	4313      	orrs	r3, r2
 800dc20:	634b      	str	r3, [r1, #52]	; 0x34
 800dc22:	e109      	b.n	800de38 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800dc24:	69fb      	ldr	r3, [r7, #28]
 800dc26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc2a:	689b      	ldr	r3, [r3, #8]
 800dc2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d110      	bne.n	800dc56 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800dc34:	69bb      	ldr	r3, [r7, #24]
 800dc36:	015a      	lsls	r2, r3, #5
 800dc38:	69fb      	ldr	r3, [r7, #28]
 800dc3a:	4413      	add	r3, r2
 800dc3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	69ba      	ldr	r2, [r7, #24]
 800dc44:	0151      	lsls	r1, r2, #5
 800dc46:	69fa      	ldr	r2, [r7, #28]
 800dc48:	440a      	add	r2, r1
 800dc4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dc4e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800dc52:	6013      	str	r3, [r2, #0]
 800dc54:	e00f      	b.n	800dc76 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800dc56:	69bb      	ldr	r3, [r7, #24]
 800dc58:	015a      	lsls	r2, r3, #5
 800dc5a:	69fb      	ldr	r3, [r7, #28]
 800dc5c:	4413      	add	r3, r2
 800dc5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	69ba      	ldr	r2, [r7, #24]
 800dc66:	0151      	lsls	r1, r2, #5
 800dc68:	69fa      	ldr	r2, [r7, #28]
 800dc6a:	440a      	add	r2, r1
 800dc6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dc70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dc74:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800dc76:	68bb      	ldr	r3, [r7, #8]
 800dc78:	68d9      	ldr	r1, [r3, #12]
 800dc7a:	68bb      	ldr	r3, [r7, #8]
 800dc7c:	781a      	ldrb	r2, [r3, #0]
 800dc7e:	68bb      	ldr	r3, [r7, #8]
 800dc80:	695b      	ldr	r3, [r3, #20]
 800dc82:	b298      	uxth	r0, r3
 800dc84:	79fb      	ldrb	r3, [r7, #7]
 800dc86:	9300      	str	r3, [sp, #0]
 800dc88:	4603      	mov	r3, r0
 800dc8a:	68f8      	ldr	r0, [r7, #12]
 800dc8c:	f000 fa38 	bl	800e100 <USB_WritePacket>
 800dc90:	e0d2      	b.n	800de38 <USB_EPStartXfer+0x480>
 800dc92:	bf00      	nop
 800dc94:	e007ffff 	.word	0xe007ffff
 800dc98:	fff80000 	.word	0xfff80000
 800dc9c:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800dca0:	69bb      	ldr	r3, [r7, #24]
 800dca2:	015a      	lsls	r2, r3, #5
 800dca4:	69fb      	ldr	r3, [r7, #28]
 800dca6:	4413      	add	r3, r2
 800dca8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dcac:	691a      	ldr	r2, [r3, #16]
 800dcae:	69bb      	ldr	r3, [r7, #24]
 800dcb0:	0159      	lsls	r1, r3, #5
 800dcb2:	69fb      	ldr	r3, [r7, #28]
 800dcb4:	440b      	add	r3, r1
 800dcb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dcba:	4619      	mov	r1, r3
 800dcbc:	4b61      	ldr	r3, [pc, #388]	; (800de44 <USB_EPStartXfer+0x48c>)
 800dcbe:	4013      	ands	r3, r2
 800dcc0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800dcc2:	69bb      	ldr	r3, [r7, #24]
 800dcc4:	015a      	lsls	r2, r3, #5
 800dcc6:	69fb      	ldr	r3, [r7, #28]
 800dcc8:	4413      	add	r3, r2
 800dcca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dcce:	691a      	ldr	r2, [r3, #16]
 800dcd0:	69bb      	ldr	r3, [r7, #24]
 800dcd2:	0159      	lsls	r1, r3, #5
 800dcd4:	69fb      	ldr	r3, [r7, #28]
 800dcd6:	440b      	add	r3, r1
 800dcd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dcdc:	4619      	mov	r1, r3
 800dcde:	4b5a      	ldr	r3, [pc, #360]	; (800de48 <USB_EPStartXfer+0x490>)
 800dce0:	4013      	ands	r3, r2
 800dce2:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800dce4:	68bb      	ldr	r3, [r7, #8]
 800dce6:	695b      	ldr	r3, [r3, #20]
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d123      	bne.n	800dd34 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800dcec:	69bb      	ldr	r3, [r7, #24]
 800dcee:	015a      	lsls	r2, r3, #5
 800dcf0:	69fb      	ldr	r3, [r7, #28]
 800dcf2:	4413      	add	r3, r2
 800dcf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dcf8:	691a      	ldr	r2, [r3, #16]
 800dcfa:	68bb      	ldr	r3, [r7, #8]
 800dcfc:	689b      	ldr	r3, [r3, #8]
 800dcfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800dd02:	69b9      	ldr	r1, [r7, #24]
 800dd04:	0148      	lsls	r0, r1, #5
 800dd06:	69f9      	ldr	r1, [r7, #28]
 800dd08:	4401      	add	r1, r0
 800dd0a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800dd0e:	4313      	orrs	r3, r2
 800dd10:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800dd12:	69bb      	ldr	r3, [r7, #24]
 800dd14:	015a      	lsls	r2, r3, #5
 800dd16:	69fb      	ldr	r3, [r7, #28]
 800dd18:	4413      	add	r3, r2
 800dd1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd1e:	691b      	ldr	r3, [r3, #16]
 800dd20:	69ba      	ldr	r2, [r7, #24]
 800dd22:	0151      	lsls	r1, r2, #5
 800dd24:	69fa      	ldr	r2, [r7, #28]
 800dd26:	440a      	add	r2, r1
 800dd28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dd2c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dd30:	6113      	str	r3, [r2, #16]
 800dd32:	e033      	b.n	800dd9c <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800dd34:	68bb      	ldr	r3, [r7, #8]
 800dd36:	695a      	ldr	r2, [r3, #20]
 800dd38:	68bb      	ldr	r3, [r7, #8]
 800dd3a:	689b      	ldr	r3, [r3, #8]
 800dd3c:	4413      	add	r3, r2
 800dd3e:	1e5a      	subs	r2, r3, #1
 800dd40:	68bb      	ldr	r3, [r7, #8]
 800dd42:	689b      	ldr	r3, [r3, #8]
 800dd44:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd48:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800dd4a:	69bb      	ldr	r3, [r7, #24]
 800dd4c:	015a      	lsls	r2, r3, #5
 800dd4e:	69fb      	ldr	r3, [r7, #28]
 800dd50:	4413      	add	r3, r2
 800dd52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd56:	691a      	ldr	r2, [r3, #16]
 800dd58:	8afb      	ldrh	r3, [r7, #22]
 800dd5a:	04d9      	lsls	r1, r3, #19
 800dd5c:	4b3b      	ldr	r3, [pc, #236]	; (800de4c <USB_EPStartXfer+0x494>)
 800dd5e:	400b      	ands	r3, r1
 800dd60:	69b9      	ldr	r1, [r7, #24]
 800dd62:	0148      	lsls	r0, r1, #5
 800dd64:	69f9      	ldr	r1, [r7, #28]
 800dd66:	4401      	add	r1, r0
 800dd68:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800dd6c:	4313      	orrs	r3, r2
 800dd6e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800dd70:	69bb      	ldr	r3, [r7, #24]
 800dd72:	015a      	lsls	r2, r3, #5
 800dd74:	69fb      	ldr	r3, [r7, #28]
 800dd76:	4413      	add	r3, r2
 800dd78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd7c:	691a      	ldr	r2, [r3, #16]
 800dd7e:	68bb      	ldr	r3, [r7, #8]
 800dd80:	689b      	ldr	r3, [r3, #8]
 800dd82:	8af9      	ldrh	r1, [r7, #22]
 800dd84:	fb01 f303 	mul.w	r3, r1, r3
 800dd88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800dd8c:	69b9      	ldr	r1, [r7, #24]
 800dd8e:	0148      	lsls	r0, r1, #5
 800dd90:	69f9      	ldr	r1, [r7, #28]
 800dd92:	4401      	add	r1, r0
 800dd94:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800dd98:	4313      	orrs	r3, r2
 800dd9a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800dd9c:	79fb      	ldrb	r3, [r7, #7]
 800dd9e:	2b01      	cmp	r3, #1
 800dda0:	d10d      	bne.n	800ddbe <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800dda2:	68bb      	ldr	r3, [r7, #8]
 800dda4:	68db      	ldr	r3, [r3, #12]
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d009      	beq.n	800ddbe <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ddaa:	68bb      	ldr	r3, [r7, #8]
 800ddac:	68d9      	ldr	r1, [r3, #12]
 800ddae:	69bb      	ldr	r3, [r7, #24]
 800ddb0:	015a      	lsls	r2, r3, #5
 800ddb2:	69fb      	ldr	r3, [r7, #28]
 800ddb4:	4413      	add	r3, r2
 800ddb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ddba:	460a      	mov	r2, r1
 800ddbc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800ddbe:	68bb      	ldr	r3, [r7, #8]
 800ddc0:	78db      	ldrb	r3, [r3, #3]
 800ddc2:	2b01      	cmp	r3, #1
 800ddc4:	d128      	bne.n	800de18 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ddc6:	69fb      	ldr	r3, [r7, #28]
 800ddc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ddcc:	689b      	ldr	r3, [r3, #8]
 800ddce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d110      	bne.n	800ddf8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ddd6:	69bb      	ldr	r3, [r7, #24]
 800ddd8:	015a      	lsls	r2, r3, #5
 800ddda:	69fb      	ldr	r3, [r7, #28]
 800dddc:	4413      	add	r3, r2
 800ddde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	69ba      	ldr	r2, [r7, #24]
 800dde6:	0151      	lsls	r1, r2, #5
 800dde8:	69fa      	ldr	r2, [r7, #28]
 800ddea:	440a      	add	r2, r1
 800ddec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ddf0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ddf4:	6013      	str	r3, [r2, #0]
 800ddf6:	e00f      	b.n	800de18 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800ddf8:	69bb      	ldr	r3, [r7, #24]
 800ddfa:	015a      	lsls	r2, r3, #5
 800ddfc:	69fb      	ldr	r3, [r7, #28]
 800ddfe:	4413      	add	r3, r2
 800de00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	69ba      	ldr	r2, [r7, #24]
 800de08:	0151      	lsls	r1, r2, #5
 800de0a:	69fa      	ldr	r2, [r7, #28]
 800de0c:	440a      	add	r2, r1
 800de0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800de12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800de16:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800de18:	69bb      	ldr	r3, [r7, #24]
 800de1a:	015a      	lsls	r2, r3, #5
 800de1c:	69fb      	ldr	r3, [r7, #28]
 800de1e:	4413      	add	r3, r2
 800de20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	69ba      	ldr	r2, [r7, #24]
 800de28:	0151      	lsls	r1, r2, #5
 800de2a:	69fa      	ldr	r2, [r7, #28]
 800de2c:	440a      	add	r2, r1
 800de2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800de32:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800de36:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800de38:	2300      	movs	r3, #0
}
 800de3a:	4618      	mov	r0, r3
 800de3c:	3720      	adds	r7, #32
 800de3e:	46bd      	mov	sp, r7
 800de40:	bd80      	pop	{r7, pc}
 800de42:	bf00      	nop
 800de44:	fff80000 	.word	0xfff80000
 800de48:	e007ffff 	.word	0xe007ffff
 800de4c:	1ff80000 	.word	0x1ff80000

0800de50 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800de50:	b480      	push	{r7}
 800de52:	b087      	sub	sp, #28
 800de54:	af00      	add	r7, sp, #0
 800de56:	60f8      	str	r0, [r7, #12]
 800de58:	60b9      	str	r1, [r7, #8]
 800de5a:	4613      	mov	r3, r2
 800de5c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800de62:	68bb      	ldr	r3, [r7, #8]
 800de64:	781b      	ldrb	r3, [r3, #0]
 800de66:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800de68:	68bb      	ldr	r3, [r7, #8]
 800de6a:	785b      	ldrb	r3, [r3, #1]
 800de6c:	2b01      	cmp	r3, #1
 800de6e:	f040 80cd 	bne.w	800e00c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800de72:	68bb      	ldr	r3, [r7, #8]
 800de74:	695b      	ldr	r3, [r3, #20]
 800de76:	2b00      	cmp	r3, #0
 800de78:	d132      	bne.n	800dee0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800de7a:	693b      	ldr	r3, [r7, #16]
 800de7c:	015a      	lsls	r2, r3, #5
 800de7e:	697b      	ldr	r3, [r7, #20]
 800de80:	4413      	add	r3, r2
 800de82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de86:	691a      	ldr	r2, [r3, #16]
 800de88:	693b      	ldr	r3, [r7, #16]
 800de8a:	0159      	lsls	r1, r3, #5
 800de8c:	697b      	ldr	r3, [r7, #20]
 800de8e:	440b      	add	r3, r1
 800de90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de94:	4619      	mov	r1, r3
 800de96:	4b98      	ldr	r3, [pc, #608]	; (800e0f8 <USB_EP0StartXfer+0x2a8>)
 800de98:	4013      	ands	r3, r2
 800de9a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800de9c:	693b      	ldr	r3, [r7, #16]
 800de9e:	015a      	lsls	r2, r3, #5
 800dea0:	697b      	ldr	r3, [r7, #20]
 800dea2:	4413      	add	r3, r2
 800dea4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dea8:	691b      	ldr	r3, [r3, #16]
 800deaa:	693a      	ldr	r2, [r7, #16]
 800deac:	0151      	lsls	r1, r2, #5
 800deae:	697a      	ldr	r2, [r7, #20]
 800deb0:	440a      	add	r2, r1
 800deb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800deb6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800deba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800debc:	693b      	ldr	r3, [r7, #16]
 800debe:	015a      	lsls	r2, r3, #5
 800dec0:	697b      	ldr	r3, [r7, #20]
 800dec2:	4413      	add	r3, r2
 800dec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dec8:	691a      	ldr	r2, [r3, #16]
 800deca:	693b      	ldr	r3, [r7, #16]
 800decc:	0159      	lsls	r1, r3, #5
 800dece:	697b      	ldr	r3, [r7, #20]
 800ded0:	440b      	add	r3, r1
 800ded2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ded6:	4619      	mov	r1, r3
 800ded8:	4b88      	ldr	r3, [pc, #544]	; (800e0fc <USB_EP0StartXfer+0x2ac>)
 800deda:	4013      	ands	r3, r2
 800dedc:	610b      	str	r3, [r1, #16]
 800dede:	e04e      	b.n	800df7e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800dee0:	693b      	ldr	r3, [r7, #16]
 800dee2:	015a      	lsls	r2, r3, #5
 800dee4:	697b      	ldr	r3, [r7, #20]
 800dee6:	4413      	add	r3, r2
 800dee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800deec:	691a      	ldr	r2, [r3, #16]
 800deee:	693b      	ldr	r3, [r7, #16]
 800def0:	0159      	lsls	r1, r3, #5
 800def2:	697b      	ldr	r3, [r7, #20]
 800def4:	440b      	add	r3, r1
 800def6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800defa:	4619      	mov	r1, r3
 800defc:	4b7f      	ldr	r3, [pc, #508]	; (800e0fc <USB_EP0StartXfer+0x2ac>)
 800defe:	4013      	ands	r3, r2
 800df00:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800df02:	693b      	ldr	r3, [r7, #16]
 800df04:	015a      	lsls	r2, r3, #5
 800df06:	697b      	ldr	r3, [r7, #20]
 800df08:	4413      	add	r3, r2
 800df0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df0e:	691a      	ldr	r2, [r3, #16]
 800df10:	693b      	ldr	r3, [r7, #16]
 800df12:	0159      	lsls	r1, r3, #5
 800df14:	697b      	ldr	r3, [r7, #20]
 800df16:	440b      	add	r3, r1
 800df18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df1c:	4619      	mov	r1, r3
 800df1e:	4b76      	ldr	r3, [pc, #472]	; (800e0f8 <USB_EP0StartXfer+0x2a8>)
 800df20:	4013      	ands	r3, r2
 800df22:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800df24:	68bb      	ldr	r3, [r7, #8]
 800df26:	695a      	ldr	r2, [r3, #20]
 800df28:	68bb      	ldr	r3, [r7, #8]
 800df2a:	689b      	ldr	r3, [r3, #8]
 800df2c:	429a      	cmp	r2, r3
 800df2e:	d903      	bls.n	800df38 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800df30:	68bb      	ldr	r3, [r7, #8]
 800df32:	689a      	ldr	r2, [r3, #8]
 800df34:	68bb      	ldr	r3, [r7, #8]
 800df36:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800df38:	693b      	ldr	r3, [r7, #16]
 800df3a:	015a      	lsls	r2, r3, #5
 800df3c:	697b      	ldr	r3, [r7, #20]
 800df3e:	4413      	add	r3, r2
 800df40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df44:	691b      	ldr	r3, [r3, #16]
 800df46:	693a      	ldr	r2, [r7, #16]
 800df48:	0151      	lsls	r1, r2, #5
 800df4a:	697a      	ldr	r2, [r7, #20]
 800df4c:	440a      	add	r2, r1
 800df4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800df52:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800df56:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800df58:	693b      	ldr	r3, [r7, #16]
 800df5a:	015a      	lsls	r2, r3, #5
 800df5c:	697b      	ldr	r3, [r7, #20]
 800df5e:	4413      	add	r3, r2
 800df60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df64:	691a      	ldr	r2, [r3, #16]
 800df66:	68bb      	ldr	r3, [r7, #8]
 800df68:	695b      	ldr	r3, [r3, #20]
 800df6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800df6e:	6939      	ldr	r1, [r7, #16]
 800df70:	0148      	lsls	r0, r1, #5
 800df72:	6979      	ldr	r1, [r7, #20]
 800df74:	4401      	add	r1, r0
 800df76:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800df7a:	4313      	orrs	r3, r2
 800df7c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800df7e:	79fb      	ldrb	r3, [r7, #7]
 800df80:	2b01      	cmp	r3, #1
 800df82:	d11e      	bne.n	800dfc2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800df84:	68bb      	ldr	r3, [r7, #8]
 800df86:	691b      	ldr	r3, [r3, #16]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d009      	beq.n	800dfa0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800df8c:	693b      	ldr	r3, [r7, #16]
 800df8e:	015a      	lsls	r2, r3, #5
 800df90:	697b      	ldr	r3, [r7, #20]
 800df92:	4413      	add	r3, r2
 800df94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df98:	461a      	mov	r2, r3
 800df9a:	68bb      	ldr	r3, [r7, #8]
 800df9c:	691b      	ldr	r3, [r3, #16]
 800df9e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800dfa0:	693b      	ldr	r3, [r7, #16]
 800dfa2:	015a      	lsls	r2, r3, #5
 800dfa4:	697b      	ldr	r3, [r7, #20]
 800dfa6:	4413      	add	r3, r2
 800dfa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	693a      	ldr	r2, [r7, #16]
 800dfb0:	0151      	lsls	r1, r2, #5
 800dfb2:	697a      	ldr	r2, [r7, #20]
 800dfb4:	440a      	add	r2, r1
 800dfb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dfba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800dfbe:	6013      	str	r3, [r2, #0]
 800dfc0:	e092      	b.n	800e0e8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800dfc2:	693b      	ldr	r3, [r7, #16]
 800dfc4:	015a      	lsls	r2, r3, #5
 800dfc6:	697b      	ldr	r3, [r7, #20]
 800dfc8:	4413      	add	r3, r2
 800dfca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	693a      	ldr	r2, [r7, #16]
 800dfd2:	0151      	lsls	r1, r2, #5
 800dfd4:	697a      	ldr	r2, [r7, #20]
 800dfd6:	440a      	add	r2, r1
 800dfd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dfdc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800dfe0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800dfe2:	68bb      	ldr	r3, [r7, #8]
 800dfe4:	695b      	ldr	r3, [r3, #20]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d07e      	beq.n	800e0e8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800dfea:	697b      	ldr	r3, [r7, #20]
 800dfec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dff0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dff2:	68bb      	ldr	r3, [r7, #8]
 800dff4:	781b      	ldrb	r3, [r3, #0]
 800dff6:	f003 030f 	and.w	r3, r3, #15
 800dffa:	2101      	movs	r1, #1
 800dffc:	fa01 f303 	lsl.w	r3, r1, r3
 800e000:	6979      	ldr	r1, [r7, #20]
 800e002:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e006:	4313      	orrs	r3, r2
 800e008:	634b      	str	r3, [r1, #52]	; 0x34
 800e00a:	e06d      	b.n	800e0e8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e00c:	693b      	ldr	r3, [r7, #16]
 800e00e:	015a      	lsls	r2, r3, #5
 800e010:	697b      	ldr	r3, [r7, #20]
 800e012:	4413      	add	r3, r2
 800e014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e018:	691a      	ldr	r2, [r3, #16]
 800e01a:	693b      	ldr	r3, [r7, #16]
 800e01c:	0159      	lsls	r1, r3, #5
 800e01e:	697b      	ldr	r3, [r7, #20]
 800e020:	440b      	add	r3, r1
 800e022:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e026:	4619      	mov	r1, r3
 800e028:	4b34      	ldr	r3, [pc, #208]	; (800e0fc <USB_EP0StartXfer+0x2ac>)
 800e02a:	4013      	ands	r3, r2
 800e02c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e02e:	693b      	ldr	r3, [r7, #16]
 800e030:	015a      	lsls	r2, r3, #5
 800e032:	697b      	ldr	r3, [r7, #20]
 800e034:	4413      	add	r3, r2
 800e036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e03a:	691a      	ldr	r2, [r3, #16]
 800e03c:	693b      	ldr	r3, [r7, #16]
 800e03e:	0159      	lsls	r1, r3, #5
 800e040:	697b      	ldr	r3, [r7, #20]
 800e042:	440b      	add	r3, r1
 800e044:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e048:	4619      	mov	r1, r3
 800e04a:	4b2b      	ldr	r3, [pc, #172]	; (800e0f8 <USB_EP0StartXfer+0x2a8>)
 800e04c:	4013      	ands	r3, r2
 800e04e:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800e050:	68bb      	ldr	r3, [r7, #8]
 800e052:	695b      	ldr	r3, [r3, #20]
 800e054:	2b00      	cmp	r3, #0
 800e056:	d003      	beq.n	800e060 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800e058:	68bb      	ldr	r3, [r7, #8]
 800e05a:	689a      	ldr	r2, [r3, #8]
 800e05c:	68bb      	ldr	r3, [r7, #8]
 800e05e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e060:	693b      	ldr	r3, [r7, #16]
 800e062:	015a      	lsls	r2, r3, #5
 800e064:	697b      	ldr	r3, [r7, #20]
 800e066:	4413      	add	r3, r2
 800e068:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e06c:	691b      	ldr	r3, [r3, #16]
 800e06e:	693a      	ldr	r2, [r7, #16]
 800e070:	0151      	lsls	r1, r2, #5
 800e072:	697a      	ldr	r2, [r7, #20]
 800e074:	440a      	add	r2, r1
 800e076:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e07a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e07e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800e080:	693b      	ldr	r3, [r7, #16]
 800e082:	015a      	lsls	r2, r3, #5
 800e084:	697b      	ldr	r3, [r7, #20]
 800e086:	4413      	add	r3, r2
 800e088:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e08c:	691a      	ldr	r2, [r3, #16]
 800e08e:	68bb      	ldr	r3, [r7, #8]
 800e090:	689b      	ldr	r3, [r3, #8]
 800e092:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e096:	6939      	ldr	r1, [r7, #16]
 800e098:	0148      	lsls	r0, r1, #5
 800e09a:	6979      	ldr	r1, [r7, #20]
 800e09c:	4401      	add	r1, r0
 800e09e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e0a2:	4313      	orrs	r3, r2
 800e0a4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800e0a6:	79fb      	ldrb	r3, [r7, #7]
 800e0a8:	2b01      	cmp	r3, #1
 800e0aa:	d10d      	bne.n	800e0c8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800e0ac:	68bb      	ldr	r3, [r7, #8]
 800e0ae:	68db      	ldr	r3, [r3, #12]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d009      	beq.n	800e0c8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e0b4:	68bb      	ldr	r3, [r7, #8]
 800e0b6:	68d9      	ldr	r1, [r3, #12]
 800e0b8:	693b      	ldr	r3, [r7, #16]
 800e0ba:	015a      	lsls	r2, r3, #5
 800e0bc:	697b      	ldr	r3, [r7, #20]
 800e0be:	4413      	add	r3, r2
 800e0c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e0c4:	460a      	mov	r2, r1
 800e0c6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e0c8:	693b      	ldr	r3, [r7, #16]
 800e0ca:	015a      	lsls	r2, r3, #5
 800e0cc:	697b      	ldr	r3, [r7, #20]
 800e0ce:	4413      	add	r3, r2
 800e0d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	693a      	ldr	r2, [r7, #16]
 800e0d8:	0151      	lsls	r1, r2, #5
 800e0da:	697a      	ldr	r2, [r7, #20]
 800e0dc:	440a      	add	r2, r1
 800e0de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e0e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e0e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e0e8:	2300      	movs	r3, #0
}
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	371c      	adds	r7, #28
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f4:	4770      	bx	lr
 800e0f6:	bf00      	nop
 800e0f8:	e007ffff 	.word	0xe007ffff
 800e0fc:	fff80000 	.word	0xfff80000

0800e100 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800e100:	b480      	push	{r7}
 800e102:	b089      	sub	sp, #36	; 0x24
 800e104:	af00      	add	r7, sp, #0
 800e106:	60f8      	str	r0, [r7, #12]
 800e108:	60b9      	str	r1, [r7, #8]
 800e10a:	4611      	mov	r1, r2
 800e10c:	461a      	mov	r2, r3
 800e10e:	460b      	mov	r3, r1
 800e110:	71fb      	strb	r3, [r7, #7]
 800e112:	4613      	mov	r3, r2
 800e114:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800e11a:	68bb      	ldr	r3, [r7, #8]
 800e11c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800e11e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e122:	2b00      	cmp	r3, #0
 800e124:	d123      	bne.n	800e16e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800e126:	88bb      	ldrh	r3, [r7, #4]
 800e128:	3303      	adds	r3, #3
 800e12a:	089b      	lsrs	r3, r3, #2
 800e12c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800e12e:	2300      	movs	r3, #0
 800e130:	61bb      	str	r3, [r7, #24]
 800e132:	e018      	b.n	800e166 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800e134:	79fb      	ldrb	r3, [r7, #7]
 800e136:	031a      	lsls	r2, r3, #12
 800e138:	697b      	ldr	r3, [r7, #20]
 800e13a:	4413      	add	r3, r2
 800e13c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e140:	461a      	mov	r2, r3
 800e142:	69fb      	ldr	r3, [r7, #28]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	6013      	str	r3, [r2, #0]
      pSrc++;
 800e148:	69fb      	ldr	r3, [r7, #28]
 800e14a:	3301      	adds	r3, #1
 800e14c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e14e:	69fb      	ldr	r3, [r7, #28]
 800e150:	3301      	adds	r3, #1
 800e152:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e154:	69fb      	ldr	r3, [r7, #28]
 800e156:	3301      	adds	r3, #1
 800e158:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e15a:	69fb      	ldr	r3, [r7, #28]
 800e15c:	3301      	adds	r3, #1
 800e15e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800e160:	69bb      	ldr	r3, [r7, #24]
 800e162:	3301      	adds	r3, #1
 800e164:	61bb      	str	r3, [r7, #24]
 800e166:	69ba      	ldr	r2, [r7, #24]
 800e168:	693b      	ldr	r3, [r7, #16]
 800e16a:	429a      	cmp	r2, r3
 800e16c:	d3e2      	bcc.n	800e134 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800e16e:	2300      	movs	r3, #0
}
 800e170:	4618      	mov	r0, r3
 800e172:	3724      	adds	r7, #36	; 0x24
 800e174:	46bd      	mov	sp, r7
 800e176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e17a:	4770      	bx	lr

0800e17c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800e17c:	b480      	push	{r7}
 800e17e:	b08b      	sub	sp, #44	; 0x2c
 800e180:	af00      	add	r7, sp, #0
 800e182:	60f8      	str	r0, [r7, #12]
 800e184:	60b9      	str	r1, [r7, #8]
 800e186:	4613      	mov	r3, r2
 800e188:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800e18e:	68bb      	ldr	r3, [r7, #8]
 800e190:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800e192:	88fb      	ldrh	r3, [r7, #6]
 800e194:	089b      	lsrs	r3, r3, #2
 800e196:	b29b      	uxth	r3, r3
 800e198:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800e19a:	88fb      	ldrh	r3, [r7, #6]
 800e19c:	f003 0303 	and.w	r3, r3, #3
 800e1a0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800e1a2:	2300      	movs	r3, #0
 800e1a4:	623b      	str	r3, [r7, #32]
 800e1a6:	e014      	b.n	800e1d2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800e1a8:	69bb      	ldr	r3, [r7, #24]
 800e1aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e1ae:	681a      	ldr	r2, [r3, #0]
 800e1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1b2:	601a      	str	r2, [r3, #0]
    pDest++;
 800e1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1b6:	3301      	adds	r3, #1
 800e1b8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e1ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1bc:	3301      	adds	r3, #1
 800e1be:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1c2:	3301      	adds	r3, #1
 800e1c4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e1c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1c8:	3301      	adds	r3, #1
 800e1ca:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800e1cc:	6a3b      	ldr	r3, [r7, #32]
 800e1ce:	3301      	adds	r3, #1
 800e1d0:	623b      	str	r3, [r7, #32]
 800e1d2:	6a3a      	ldr	r2, [r7, #32]
 800e1d4:	697b      	ldr	r3, [r7, #20]
 800e1d6:	429a      	cmp	r2, r3
 800e1d8:	d3e6      	bcc.n	800e1a8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800e1da:	8bfb      	ldrh	r3, [r7, #30]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d01e      	beq.n	800e21e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800e1e0:	2300      	movs	r3, #0
 800e1e2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800e1e4:	69bb      	ldr	r3, [r7, #24]
 800e1e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e1ea:	461a      	mov	r2, r3
 800e1ec:	f107 0310 	add.w	r3, r7, #16
 800e1f0:	6812      	ldr	r2, [r2, #0]
 800e1f2:	601a      	str	r2, [r3, #0]
	
    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800e1f4:	693a      	ldr	r2, [r7, #16]
 800e1f6:	6a3b      	ldr	r3, [r7, #32]
 800e1f8:	b2db      	uxtb	r3, r3
 800e1fa:	00db      	lsls	r3, r3, #3
 800e1fc:	fa22 f303 	lsr.w	r3, r2, r3
 800e200:	b2da      	uxtb	r2, r3
 800e202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e204:	701a      	strb	r2, [r3, #0]
      i++;
 800e206:	6a3b      	ldr	r3, [r7, #32]
 800e208:	3301      	adds	r3, #1
 800e20a:	623b      	str	r3, [r7, #32]
      pDest++;
 800e20c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e20e:	3301      	adds	r3, #1
 800e210:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800e212:	8bfb      	ldrh	r3, [r7, #30]
 800e214:	3b01      	subs	r3, #1
 800e216:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800e218:	8bfb      	ldrh	r3, [r7, #30]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d1ea      	bne.n	800e1f4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800e21e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e220:	4618      	mov	r0, r3
 800e222:	372c      	adds	r7, #44	; 0x2c
 800e224:	46bd      	mov	sp, r7
 800e226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e22a:	4770      	bx	lr

0800e22c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e22c:	b480      	push	{r7}
 800e22e:	b085      	sub	sp, #20
 800e230:	af00      	add	r7, sp, #0
 800e232:	6078      	str	r0, [r7, #4]
 800e234:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e23a:	683b      	ldr	r3, [r7, #0]
 800e23c:	781b      	ldrb	r3, [r3, #0]
 800e23e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e240:	683b      	ldr	r3, [r7, #0]
 800e242:	785b      	ldrb	r3, [r3, #1]
 800e244:	2b01      	cmp	r3, #1
 800e246:	d12c      	bne.n	800e2a2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e248:	68bb      	ldr	r3, [r7, #8]
 800e24a:	015a      	lsls	r2, r3, #5
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	4413      	add	r3, r2
 800e250:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	2b00      	cmp	r3, #0
 800e258:	db12      	blt.n	800e280 <USB_EPSetStall+0x54>
 800e25a:	68bb      	ldr	r3, [r7, #8]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d00f      	beq.n	800e280 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800e260:	68bb      	ldr	r3, [r7, #8]
 800e262:	015a      	lsls	r2, r3, #5
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	4413      	add	r3, r2
 800e268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	68ba      	ldr	r2, [r7, #8]
 800e270:	0151      	lsls	r1, r2, #5
 800e272:	68fa      	ldr	r2, [r7, #12]
 800e274:	440a      	add	r2, r1
 800e276:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e27a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e27e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800e280:	68bb      	ldr	r3, [r7, #8]
 800e282:	015a      	lsls	r2, r3, #5
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	4413      	add	r3, r2
 800e288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	68ba      	ldr	r2, [r7, #8]
 800e290:	0151      	lsls	r1, r2, #5
 800e292:	68fa      	ldr	r2, [r7, #12]
 800e294:	440a      	add	r2, r1
 800e296:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e29a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e29e:	6013      	str	r3, [r2, #0]
 800e2a0:	e02b      	b.n	800e2fa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e2a2:	68bb      	ldr	r3, [r7, #8]
 800e2a4:	015a      	lsls	r2, r3, #5
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	4413      	add	r3, r2
 800e2aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	db12      	blt.n	800e2da <USB_EPSetStall+0xae>
 800e2b4:	68bb      	ldr	r3, [r7, #8]
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d00f      	beq.n	800e2da <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800e2ba:	68bb      	ldr	r3, [r7, #8]
 800e2bc:	015a      	lsls	r2, r3, #5
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	4413      	add	r3, r2
 800e2c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	68ba      	ldr	r2, [r7, #8]
 800e2ca:	0151      	lsls	r1, r2, #5
 800e2cc:	68fa      	ldr	r2, [r7, #12]
 800e2ce:	440a      	add	r2, r1
 800e2d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e2d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e2d8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800e2da:	68bb      	ldr	r3, [r7, #8]
 800e2dc:	015a      	lsls	r2, r3, #5
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	4413      	add	r3, r2
 800e2e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	68ba      	ldr	r2, [r7, #8]
 800e2ea:	0151      	lsls	r1, r2, #5
 800e2ec:	68fa      	ldr	r2, [r7, #12]
 800e2ee:	440a      	add	r2, r1
 800e2f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e2f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e2f8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e2fa:	2300      	movs	r3, #0
}
 800e2fc:	4618      	mov	r0, r3
 800e2fe:	3714      	adds	r7, #20
 800e300:	46bd      	mov	sp, r7
 800e302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e306:	4770      	bx	lr

0800e308 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e308:	b480      	push	{r7}
 800e30a:	b085      	sub	sp, #20
 800e30c:	af00      	add	r7, sp, #0
 800e30e:	6078      	str	r0, [r7, #4]
 800e310:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e316:	683b      	ldr	r3, [r7, #0]
 800e318:	781b      	ldrb	r3, [r3, #0]
 800e31a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e31c:	683b      	ldr	r3, [r7, #0]
 800e31e:	785b      	ldrb	r3, [r3, #1]
 800e320:	2b01      	cmp	r3, #1
 800e322:	d128      	bne.n	800e376 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e324:	68bb      	ldr	r3, [r7, #8]
 800e326:	015a      	lsls	r2, r3, #5
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	4413      	add	r3, r2
 800e32c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	68ba      	ldr	r2, [r7, #8]
 800e334:	0151      	lsls	r1, r2, #5
 800e336:	68fa      	ldr	r2, [r7, #12]
 800e338:	440a      	add	r2, r1
 800e33a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e33e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e342:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e344:	683b      	ldr	r3, [r7, #0]
 800e346:	78db      	ldrb	r3, [r3, #3]
 800e348:	2b03      	cmp	r3, #3
 800e34a:	d003      	beq.n	800e354 <USB_EPClearStall+0x4c>
 800e34c:	683b      	ldr	r3, [r7, #0]
 800e34e:	78db      	ldrb	r3, [r3, #3]
 800e350:	2b02      	cmp	r3, #2
 800e352:	d138      	bne.n	800e3c6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e354:	68bb      	ldr	r3, [r7, #8]
 800e356:	015a      	lsls	r2, r3, #5
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	4413      	add	r3, r2
 800e35c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	68ba      	ldr	r2, [r7, #8]
 800e364:	0151      	lsls	r1, r2, #5
 800e366:	68fa      	ldr	r2, [r7, #12]
 800e368:	440a      	add	r2, r1
 800e36a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e36e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e372:	6013      	str	r3, [r2, #0]
 800e374:	e027      	b.n	800e3c6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800e376:	68bb      	ldr	r3, [r7, #8]
 800e378:	015a      	lsls	r2, r3, #5
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	4413      	add	r3, r2
 800e37e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	68ba      	ldr	r2, [r7, #8]
 800e386:	0151      	lsls	r1, r2, #5
 800e388:	68fa      	ldr	r2, [r7, #12]
 800e38a:	440a      	add	r2, r1
 800e38c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e390:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e394:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e396:	683b      	ldr	r3, [r7, #0]
 800e398:	78db      	ldrb	r3, [r3, #3]
 800e39a:	2b03      	cmp	r3, #3
 800e39c:	d003      	beq.n	800e3a6 <USB_EPClearStall+0x9e>
 800e39e:	683b      	ldr	r3, [r7, #0]
 800e3a0:	78db      	ldrb	r3, [r3, #3]
 800e3a2:	2b02      	cmp	r3, #2
 800e3a4:	d10f      	bne.n	800e3c6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e3a6:	68bb      	ldr	r3, [r7, #8]
 800e3a8:	015a      	lsls	r2, r3, #5
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	4413      	add	r3, r2
 800e3ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	68ba      	ldr	r2, [r7, #8]
 800e3b6:	0151      	lsls	r1, r2, #5
 800e3b8:	68fa      	ldr	r2, [r7, #12]
 800e3ba:	440a      	add	r2, r1
 800e3bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e3c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e3c4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800e3c6:	2300      	movs	r3, #0
}
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	3714      	adds	r7, #20
 800e3cc:	46bd      	mov	sp, r7
 800e3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d2:	4770      	bx	lr

0800e3d4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800e3d4:	b480      	push	{r7}
 800e3d6:	b085      	sub	sp, #20
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	6078      	str	r0, [r7, #4]
 800e3dc:	460b      	mov	r3, r1
 800e3de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	68fa      	ldr	r2, [r7, #12]
 800e3ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e3f2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800e3f6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e3fe:	681a      	ldr	r2, [r3, #0]
 800e400:	78fb      	ldrb	r3, [r7, #3]
 800e402:	011b      	lsls	r3, r3, #4
 800e404:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800e408:	68f9      	ldr	r1, [r7, #12]
 800e40a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e40e:	4313      	orrs	r3, r2
 800e410:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800e412:	2300      	movs	r3, #0
}
 800e414:	4618      	mov	r0, r3
 800e416:	3714      	adds	r7, #20
 800e418:	46bd      	mov	sp, r7
 800e41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e41e:	4770      	bx	lr

0800e420 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e420:	b480      	push	{r7}
 800e422:	b085      	sub	sp, #20
 800e424:	af00      	add	r7, sp, #0
 800e426:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	68fa      	ldr	r2, [r7, #12]
 800e436:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e43a:	f023 0303 	bic.w	r3, r3, #3
 800e43e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e446:	685b      	ldr	r3, [r3, #4]
 800e448:	68fa      	ldr	r2, [r7, #12]
 800e44a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e44e:	f023 0302 	bic.w	r3, r3, #2
 800e452:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e454:	2300      	movs	r3, #0
}
 800e456:	4618      	mov	r0, r3
 800e458:	3714      	adds	r7, #20
 800e45a:	46bd      	mov	sp, r7
 800e45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e460:	4770      	bx	lr

0800e462 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e462:	b480      	push	{r7}
 800e464:	b085      	sub	sp, #20
 800e466:	af00      	add	r7, sp, #0
 800e468:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	68fa      	ldr	r2, [r7, #12]
 800e478:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e47c:	f023 0303 	bic.w	r3, r3, #3
 800e480:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e488:	685b      	ldr	r3, [r3, #4]
 800e48a:	68fa      	ldr	r2, [r7, #12]
 800e48c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e490:	f043 0302 	orr.w	r3, r3, #2
 800e494:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e496:	2300      	movs	r3, #0
}
 800e498:	4618      	mov	r0, r3
 800e49a:	3714      	adds	r7, #20
 800e49c:	46bd      	mov	sp, r7
 800e49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a2:	4770      	bx	lr

0800e4a4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800e4a4:	b480      	push	{r7}
 800e4a6:	b085      	sub	sp, #20
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	695b      	ldr	r3, [r3, #20]
 800e4b0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	699b      	ldr	r3, [r3, #24]
 800e4b6:	68fa      	ldr	r2, [r7, #12]
 800e4b8:	4013      	ands	r3, r2
 800e4ba:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800e4bc:	68fb      	ldr	r3, [r7, #12]
}
 800e4be:	4618      	mov	r0, r3
 800e4c0:	3714      	adds	r7, #20
 800e4c2:	46bd      	mov	sp, r7
 800e4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c8:	4770      	bx	lr

0800e4ca <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e4ca:	b480      	push	{r7}
 800e4cc:	b085      	sub	sp, #20
 800e4ce:	af00      	add	r7, sp, #0
 800e4d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e4dc:	699b      	ldr	r3, [r3, #24]
 800e4de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e4e6:	69db      	ldr	r3, [r3, #28]
 800e4e8:	68ba      	ldr	r2, [r7, #8]
 800e4ea:	4013      	ands	r3, r2
 800e4ec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800e4ee:	68bb      	ldr	r3, [r7, #8]
 800e4f0:	0c1b      	lsrs	r3, r3, #16
}
 800e4f2:	4618      	mov	r0, r3
 800e4f4:	3714      	adds	r7, #20
 800e4f6:	46bd      	mov	sp, r7
 800e4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4fc:	4770      	bx	lr

0800e4fe <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e4fe:	b480      	push	{r7}
 800e500:	b085      	sub	sp, #20
 800e502:	af00      	add	r7, sp, #0
 800e504:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e510:	699b      	ldr	r3, [r3, #24]
 800e512:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e51a:	69db      	ldr	r3, [r3, #28]
 800e51c:	68ba      	ldr	r2, [r7, #8]
 800e51e:	4013      	ands	r3, r2
 800e520:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800e522:	68bb      	ldr	r3, [r7, #8]
 800e524:	b29b      	uxth	r3, r3
}
 800e526:	4618      	mov	r0, r3
 800e528:	3714      	adds	r7, #20
 800e52a:	46bd      	mov	sp, r7
 800e52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e530:	4770      	bx	lr

0800e532 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e532:	b480      	push	{r7}
 800e534:	b085      	sub	sp, #20
 800e536:	af00      	add	r7, sp, #0
 800e538:	6078      	str	r0, [r7, #4]
 800e53a:	460b      	mov	r3, r1
 800e53c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800e542:	78fb      	ldrb	r3, [r7, #3]
 800e544:	015a      	lsls	r2, r3, #5
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	4413      	add	r3, r2
 800e54a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e54e:	689b      	ldr	r3, [r3, #8]
 800e550:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e558:	695b      	ldr	r3, [r3, #20]
 800e55a:	68ba      	ldr	r2, [r7, #8]
 800e55c:	4013      	ands	r3, r2
 800e55e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e560:	68bb      	ldr	r3, [r7, #8]
}
 800e562:	4618      	mov	r0, r3
 800e564:	3714      	adds	r7, #20
 800e566:	46bd      	mov	sp, r7
 800e568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e56c:	4770      	bx	lr

0800e56e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e56e:	b480      	push	{r7}
 800e570:	b087      	sub	sp, #28
 800e572:	af00      	add	r7, sp, #0
 800e574:	6078      	str	r0, [r7, #4]
 800e576:	460b      	mov	r3, r1
 800e578:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800e57e:	697b      	ldr	r3, [r7, #20]
 800e580:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e584:	691b      	ldr	r3, [r3, #16]
 800e586:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800e588:	697b      	ldr	r3, [r7, #20]
 800e58a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e58e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e590:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800e592:	78fb      	ldrb	r3, [r7, #3]
 800e594:	f003 030f 	and.w	r3, r3, #15
 800e598:	68fa      	ldr	r2, [r7, #12]
 800e59a:	fa22 f303 	lsr.w	r3, r2, r3
 800e59e:	01db      	lsls	r3, r3, #7
 800e5a0:	b2db      	uxtb	r3, r3
 800e5a2:	693a      	ldr	r2, [r7, #16]
 800e5a4:	4313      	orrs	r3, r2
 800e5a6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800e5a8:	78fb      	ldrb	r3, [r7, #3]
 800e5aa:	015a      	lsls	r2, r3, #5
 800e5ac:	697b      	ldr	r3, [r7, #20]
 800e5ae:	4413      	add	r3, r2
 800e5b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5b4:	689b      	ldr	r3, [r3, #8]
 800e5b6:	693a      	ldr	r2, [r7, #16]
 800e5b8:	4013      	ands	r3, r2
 800e5ba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e5bc:	68bb      	ldr	r3, [r7, #8]
}
 800e5be:	4618      	mov	r0, r3
 800e5c0:	371c      	adds	r7, #28
 800e5c2:	46bd      	mov	sp, r7
 800e5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5c8:	4770      	bx	lr

0800e5ca <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800e5ca:	b480      	push	{r7}
 800e5cc:	b083      	sub	sp, #12
 800e5ce:	af00      	add	r7, sp, #0
 800e5d0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	695b      	ldr	r3, [r3, #20]
 800e5d6:	f003 0301 	and.w	r3, r3, #1
}
 800e5da:	4618      	mov	r0, r3
 800e5dc:	370c      	adds	r7, #12
 800e5de:	46bd      	mov	sp, r7
 800e5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5e4:	4770      	bx	lr
	...

0800e5e8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800e5e8:	b480      	push	{r7}
 800e5ea:	b085      	sub	sp, #20
 800e5ec:	af00      	add	r7, sp, #0
 800e5ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5fa:	681a      	ldr	r2, [r3, #0]
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e602:	4619      	mov	r1, r3
 800e604:	4b09      	ldr	r3, [pc, #36]	; (800e62c <USB_ActivateSetup+0x44>)
 800e606:	4013      	ands	r3, r2
 800e608:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e610:	685b      	ldr	r3, [r3, #4]
 800e612:	68fa      	ldr	r2, [r7, #12]
 800e614:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e618:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e61c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e61e:	2300      	movs	r3, #0
}
 800e620:	4618      	mov	r0, r3
 800e622:	3714      	adds	r7, #20
 800e624:	46bd      	mov	sp, r7
 800e626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e62a:	4770      	bx	lr
 800e62c:	fffff800 	.word	0xfffff800

0800e630 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800e630:	b480      	push	{r7}
 800e632:	b087      	sub	sp, #28
 800e634:	af00      	add	r7, sp, #0
 800e636:	60f8      	str	r0, [r7, #12]
 800e638:	460b      	mov	r3, r1
 800e63a:	607a      	str	r2, [r7, #4]
 800e63c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	333c      	adds	r3, #60	; 0x3c
 800e646:	3304      	adds	r3, #4
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800e64c:	693b      	ldr	r3, [r7, #16]
 800e64e:	4a26      	ldr	r2, [pc, #152]	; (800e6e8 <USB_EP0_OutStart+0xb8>)
 800e650:	4293      	cmp	r3, r2
 800e652:	d90a      	bls.n	800e66a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e654:	697b      	ldr	r3, [r7, #20]
 800e656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e660:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e664:	d101      	bne.n	800e66a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800e666:	2300      	movs	r3, #0
 800e668:	e037      	b.n	800e6da <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800e66a:	697b      	ldr	r3, [r7, #20]
 800e66c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e670:	461a      	mov	r2, r3
 800e672:	2300      	movs	r3, #0
 800e674:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e676:	697b      	ldr	r3, [r7, #20]
 800e678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e67c:	691b      	ldr	r3, [r3, #16]
 800e67e:	697a      	ldr	r2, [r7, #20]
 800e680:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e684:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e688:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800e68a:	697b      	ldr	r3, [r7, #20]
 800e68c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e690:	691b      	ldr	r3, [r3, #16]
 800e692:	697a      	ldr	r2, [r7, #20]
 800e694:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e698:	f043 0318 	orr.w	r3, r3, #24
 800e69c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800e69e:	697b      	ldr	r3, [r7, #20]
 800e6a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e6a4:	691b      	ldr	r3, [r3, #16]
 800e6a6:	697a      	ldr	r2, [r7, #20]
 800e6a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e6ac:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800e6b0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800e6b2:	7afb      	ldrb	r3, [r7, #11]
 800e6b4:	2b01      	cmp	r3, #1
 800e6b6:	d10f      	bne.n	800e6d8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800e6b8:	697b      	ldr	r3, [r7, #20]
 800e6ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e6be:	461a      	mov	r2, r3
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800e6c4:	697b      	ldr	r3, [r7, #20]
 800e6c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	697a      	ldr	r2, [r7, #20]
 800e6ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e6d2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800e6d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e6d8:	2300      	movs	r3, #0
}
 800e6da:	4618      	mov	r0, r3
 800e6dc:	371c      	adds	r7, #28
 800e6de:	46bd      	mov	sp, r7
 800e6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e4:	4770      	bx	lr
 800e6e6:	bf00      	nop
 800e6e8:	4f54300a 	.word	0x4f54300a

0800e6ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e6ec:	b480      	push	{r7}
 800e6ee:	b085      	sub	sp, #20
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800e6f4:	2300      	movs	r3, #0
 800e6f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	3301      	adds	r3, #1
 800e6fc:	60fb      	str	r3, [r7, #12]
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	4a13      	ldr	r2, [pc, #76]	; (800e750 <USB_CoreReset+0x64>)
 800e702:	4293      	cmp	r3, r2
 800e704:	d901      	bls.n	800e70a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800e706:	2303      	movs	r3, #3
 800e708:	e01b      	b.n	800e742 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	691b      	ldr	r3, [r3, #16]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	daf2      	bge.n	800e6f8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800e712:	2300      	movs	r3, #0
 800e714:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	691b      	ldr	r3, [r3, #16]
 800e71a:	f043 0201 	orr.w	r2, r3, #1
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	3301      	adds	r3, #1
 800e726:	60fb      	str	r3, [r7, #12]
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	4a09      	ldr	r2, [pc, #36]	; (800e750 <USB_CoreReset+0x64>)
 800e72c:	4293      	cmp	r3, r2
 800e72e:	d901      	bls.n	800e734 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800e730:	2303      	movs	r3, #3
 800e732:	e006      	b.n	800e742 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	691b      	ldr	r3, [r3, #16]
 800e738:	f003 0301 	and.w	r3, r3, #1
 800e73c:	2b01      	cmp	r3, #1
 800e73e:	d0f0      	beq.n	800e722 <USB_CoreReset+0x36>

  return HAL_OK;
 800e740:	2300      	movs	r3, #0
}
 800e742:	4618      	mov	r0, r3
 800e744:	3714      	adds	r7, #20
 800e746:	46bd      	mov	sp, r7
 800e748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e74c:	4770      	bx	lr
 800e74e:	bf00      	nop
 800e750:	00030d40 	.word	0x00030d40

0800e754 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800e754:	b580      	push	{r7, lr}
 800e756:	b082      	sub	sp, #8
 800e758:	af00      	add	r7, sp, #0
 800e75a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800e75c:	f000 f80e 	bl	800e77c <BSP_SD_WriteCpltCallback>
}
 800e760:	bf00      	nop
 800e762:	3708      	adds	r7, #8
 800e764:	46bd      	mov	sp, r7
 800e766:	bd80      	pop	{r7, pc}

0800e768 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800e768:	b580      	push	{r7, lr}
 800e76a:	b082      	sub	sp, #8
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800e770:	f000 f810 	bl	800e794 <BSP_SD_ReadCpltCallback>
}
 800e774:	bf00      	nop
 800e776:	3708      	adds	r7, #8
 800e778:	46bd      	mov	sp, r7
 800e77a:	bd80      	pop	{r7, pc}

0800e77c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800e77c:	b480      	push	{r7}
 800e77e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800e780:	4b03      	ldr	r3, [pc, #12]	; (800e790 <BSP_SD_WriteCpltCallback+0x14>)
 800e782:	2201      	movs	r2, #1
 800e784:	601a      	str	r2, [r3, #0]
}
 800e786:	bf00      	nop
 800e788:	46bd      	mov	sp, r7
 800e78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e78e:	4770      	bx	lr
 800e790:	24001758 	.word	0x24001758

0800e794 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800e794:	b480      	push	{r7}
 800e796:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800e798:	4b03      	ldr	r3, [pc, #12]	; (800e7a8 <BSP_SD_ReadCpltCallback+0x14>)
 800e79a:	2201      	movs	r2, #1
 800e79c:	601a      	str	r2, [r3, #0]
}
 800e79e:	bf00      	nop
 800e7a0:	46bd      	mov	sp, r7
 800e7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a6:	4770      	bx	lr
 800e7a8:	2400175c 	.word	0x2400175c

0800e7ac <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e7ac:	b580      	push	{r7, lr}
 800e7ae:	b084      	sub	sp, #16
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	6078      	str	r0, [r7, #4]
 800e7b4:	460b      	mov	r3, r1
 800e7b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800e7b8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800e7bc:	f002 f9cc 	bl	8010b58 <malloc>
 800e7c0:	4603      	mov	r3, r0
 800e7c2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d105      	bne.n	800e7d6 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	2200      	movs	r2, #0
 800e7ce:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800e7d2:	2302      	movs	r3, #2
 800e7d4:	e066      	b.n	800e8a4 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	68fa      	ldr	r2, [r7, #12]
 800e7da:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	7c1b      	ldrb	r3, [r3, #16]
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d119      	bne.n	800e81a <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e7e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e7ea:	2202      	movs	r2, #2
 800e7ec:	2181      	movs	r1, #129	; 0x81
 800e7ee:	6878      	ldr	r0, [r7, #4]
 800e7f0:	f002 f839 	bl	8010866 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	2201      	movs	r2, #1
 800e7f8:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e7fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e7fe:	2202      	movs	r2, #2
 800e800:	2101      	movs	r1, #1
 800e802:	6878      	ldr	r0, [r7, #4]
 800e804:	f002 f82f 	bl	8010866 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	2201      	movs	r2, #1
 800e80c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	2210      	movs	r2, #16
 800e814:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800e818:	e016      	b.n	800e848 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e81a:	2340      	movs	r3, #64	; 0x40
 800e81c:	2202      	movs	r2, #2
 800e81e:	2181      	movs	r1, #129	; 0x81
 800e820:	6878      	ldr	r0, [r7, #4]
 800e822:	f002 f820 	bl	8010866 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	2201      	movs	r2, #1
 800e82a:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e82c:	2340      	movs	r3, #64	; 0x40
 800e82e:	2202      	movs	r2, #2
 800e830:	2101      	movs	r1, #1
 800e832:	6878      	ldr	r0, [r7, #4]
 800e834:	f002 f817 	bl	8010866 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	2201      	movs	r2, #1
 800e83c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	2210      	movs	r2, #16
 800e844:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e848:	2308      	movs	r3, #8
 800e84a:	2203      	movs	r2, #3
 800e84c:	2182      	movs	r1, #130	; 0x82
 800e84e:	6878      	ldr	r0, [r7, #4]
 800e850:	f002 f809 	bl	8010866 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	2201      	movs	r2, #1
 800e858:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	2200      	movs	r2, #0
 800e86a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	2200      	movs	r2, #0
 800e872:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	7c1b      	ldrb	r3, [r3, #16]
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d109      	bne.n	800e892 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e884:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e888:	2101      	movs	r1, #1
 800e88a:	6878      	ldr	r0, [r7, #4]
 800e88c:	f002 f8da 	bl	8010a44 <USBD_LL_PrepareReceive>
 800e890:	e007      	b.n	800e8a2 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e898:	2340      	movs	r3, #64	; 0x40
 800e89a:	2101      	movs	r1, #1
 800e89c:	6878      	ldr	r0, [r7, #4]
 800e89e:	f002 f8d1 	bl	8010a44 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e8a2:	2300      	movs	r3, #0
}
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	3710      	adds	r7, #16
 800e8a8:	46bd      	mov	sp, r7
 800e8aa:	bd80      	pop	{r7, pc}

0800e8ac <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e8ac:	b580      	push	{r7, lr}
 800e8ae:	b084      	sub	sp, #16
 800e8b0:	af00      	add	r7, sp, #0
 800e8b2:	6078      	str	r0, [r7, #4]
 800e8b4:	460b      	mov	r3, r1
 800e8b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800e8b8:	2300      	movs	r3, #0
 800e8ba:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800e8bc:	2181      	movs	r1, #129	; 0x81
 800e8be:	6878      	ldr	r0, [r7, #4]
 800e8c0:	f001 fff7 	bl	80108b2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	2200      	movs	r2, #0
 800e8c8:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800e8ca:	2101      	movs	r1, #1
 800e8cc:	6878      	ldr	r0, [r7, #4]
 800e8ce:	f001 fff0 	bl	80108b2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	2200      	movs	r2, #0
 800e8d6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800e8da:	2182      	movs	r1, #130	; 0x82
 800e8dc:	6878      	ldr	r0, [r7, #4]
 800e8de:	f001 ffe8 	bl	80108b2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	2200      	movs	r2, #0
 800e8e6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	2200      	movs	r2, #0
 800e8ee:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d00e      	beq.n	800e91a <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e902:	685b      	ldr	r3, [r3, #4]
 800e904:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e90c:	4618      	mov	r0, r3
 800e90e:	f002 f92b 	bl	8010b68 <free>
    pdev->pClassData = NULL;
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	2200      	movs	r2, #0
 800e916:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800e91a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e91c:	4618      	mov	r0, r3
 800e91e:	3710      	adds	r7, #16
 800e920:	46bd      	mov	sp, r7
 800e922:	bd80      	pop	{r7, pc}

0800e924 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e924:	b580      	push	{r7, lr}
 800e926:	b086      	sub	sp, #24
 800e928:	af00      	add	r7, sp, #0
 800e92a:	6078      	str	r0, [r7, #4]
 800e92c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e934:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800e936:	2300      	movs	r3, #0
 800e938:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800e93a:	2300      	movs	r3, #0
 800e93c:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800e93e:	2300      	movs	r3, #0
 800e940:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e942:	683b      	ldr	r3, [r7, #0]
 800e944:	781b      	ldrb	r3, [r3, #0]
 800e946:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d03a      	beq.n	800e9c4 <USBD_CDC_Setup+0xa0>
 800e94e:	2b20      	cmp	r3, #32
 800e950:	f040 809a 	bne.w	800ea88 <USBD_CDC_Setup+0x164>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800e954:	683b      	ldr	r3, [r7, #0]
 800e956:	88db      	ldrh	r3, [r3, #6]
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d029      	beq.n	800e9b0 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800e95c:	683b      	ldr	r3, [r7, #0]
 800e95e:	781b      	ldrb	r3, [r3, #0]
 800e960:	b25b      	sxtb	r3, r3
 800e962:	2b00      	cmp	r3, #0
 800e964:	da11      	bge.n	800e98a <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e96c:	689b      	ldr	r3, [r3, #8]
 800e96e:	683a      	ldr	r2, [r7, #0]
 800e970:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800e972:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e974:	683a      	ldr	r2, [r7, #0]
 800e976:	88d2      	ldrh	r2, [r2, #6]
 800e978:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800e97a:	6939      	ldr	r1, [r7, #16]
 800e97c:	683b      	ldr	r3, [r7, #0]
 800e97e:	88db      	ldrh	r3, [r3, #6]
 800e980:	461a      	mov	r2, r3
 800e982:	6878      	ldr	r0, [r7, #4]
 800e984:	f001 fabf 	bl	800ff06 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800e988:	e085      	b.n	800ea96 <USBD_CDC_Setup+0x172>
        hcdc->CmdOpCode = req->bRequest;
 800e98a:	683b      	ldr	r3, [r7, #0]
 800e98c:	785a      	ldrb	r2, [r3, #1]
 800e98e:	693b      	ldr	r3, [r7, #16]
 800e990:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800e994:	683b      	ldr	r3, [r7, #0]
 800e996:	88db      	ldrh	r3, [r3, #6]
 800e998:	b2da      	uxtb	r2, r3
 800e99a:	693b      	ldr	r3, [r7, #16]
 800e99c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800e9a0:	6939      	ldr	r1, [r7, #16]
 800e9a2:	683b      	ldr	r3, [r7, #0]
 800e9a4:	88db      	ldrh	r3, [r3, #6]
 800e9a6:	461a      	mov	r2, r3
 800e9a8:	6878      	ldr	r0, [r7, #4]
 800e9aa:	f001 fad8 	bl	800ff5e <USBD_CtlPrepareRx>
    break;
 800e9ae:	e072      	b.n	800ea96 <USBD_CDC_Setup+0x172>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e9b6:	689b      	ldr	r3, [r3, #8]
 800e9b8:	683a      	ldr	r2, [r7, #0]
 800e9ba:	7850      	ldrb	r0, [r2, #1]
 800e9bc:	2200      	movs	r2, #0
 800e9be:	6839      	ldr	r1, [r7, #0]
 800e9c0:	4798      	blx	r3
    break;
 800e9c2:	e068      	b.n	800ea96 <USBD_CDC_Setup+0x172>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800e9c4:	683b      	ldr	r3, [r7, #0]
 800e9c6:	785b      	ldrb	r3, [r3, #1]
 800e9c8:	2b0b      	cmp	r3, #11
 800e9ca:	d852      	bhi.n	800ea72 <USBD_CDC_Setup+0x14e>
 800e9cc:	a201      	add	r2, pc, #4	; (adr r2, 800e9d4 <USBD_CDC_Setup+0xb0>)
 800e9ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9d2:	bf00      	nop
 800e9d4:	0800ea05 	.word	0x0800ea05
 800e9d8:	0800ea81 	.word	0x0800ea81
 800e9dc:	0800ea73 	.word	0x0800ea73
 800e9e0:	0800ea73 	.word	0x0800ea73
 800e9e4:	0800ea73 	.word	0x0800ea73
 800e9e8:	0800ea73 	.word	0x0800ea73
 800e9ec:	0800ea73 	.word	0x0800ea73
 800e9f0:	0800ea73 	.word	0x0800ea73
 800e9f4:	0800ea73 	.word	0x0800ea73
 800e9f8:	0800ea73 	.word	0x0800ea73
 800e9fc:	0800ea2f 	.word	0x0800ea2f
 800ea00:	0800ea59 	.word	0x0800ea59
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea0a:	b2db      	uxtb	r3, r3
 800ea0c:	2b03      	cmp	r3, #3
 800ea0e:	d107      	bne.n	800ea20 <USBD_CDC_Setup+0xfc>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ea10:	f107 030c 	add.w	r3, r7, #12
 800ea14:	2202      	movs	r2, #2
 800ea16:	4619      	mov	r1, r3
 800ea18:	6878      	ldr	r0, [r7, #4]
 800ea1a:	f001 fa74 	bl	800ff06 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800ea1e:	e032      	b.n	800ea86 <USBD_CDC_Setup+0x162>
        USBD_CtlError(pdev, req);
 800ea20:	6839      	ldr	r1, [r7, #0]
 800ea22:	6878      	ldr	r0, [r7, #4]
 800ea24:	f001 f9fe 	bl	800fe24 <USBD_CtlError>
        ret = USBD_FAIL;
 800ea28:	2303      	movs	r3, #3
 800ea2a:	75fb      	strb	r3, [r7, #23]
      break;
 800ea2c:	e02b      	b.n	800ea86 <USBD_CDC_Setup+0x162>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea34:	b2db      	uxtb	r3, r3
 800ea36:	2b03      	cmp	r3, #3
 800ea38:	d107      	bne.n	800ea4a <USBD_CDC_Setup+0x126>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ea3a:	f107 030f 	add.w	r3, r7, #15
 800ea3e:	2201      	movs	r2, #1
 800ea40:	4619      	mov	r1, r3
 800ea42:	6878      	ldr	r0, [r7, #4]
 800ea44:	f001 fa5f 	bl	800ff06 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800ea48:	e01d      	b.n	800ea86 <USBD_CDC_Setup+0x162>
        USBD_CtlError(pdev, req);
 800ea4a:	6839      	ldr	r1, [r7, #0]
 800ea4c:	6878      	ldr	r0, [r7, #4]
 800ea4e:	f001 f9e9 	bl	800fe24 <USBD_CtlError>
        ret = USBD_FAIL;
 800ea52:	2303      	movs	r3, #3
 800ea54:	75fb      	strb	r3, [r7, #23]
      break;
 800ea56:	e016      	b.n	800ea86 <USBD_CDC_Setup+0x162>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea5e:	b2db      	uxtb	r3, r3
 800ea60:	2b03      	cmp	r3, #3
 800ea62:	d00f      	beq.n	800ea84 <USBD_CDC_Setup+0x160>
      {
        USBD_CtlError(pdev, req);
 800ea64:	6839      	ldr	r1, [r7, #0]
 800ea66:	6878      	ldr	r0, [r7, #4]
 800ea68:	f001 f9dc 	bl	800fe24 <USBD_CtlError>
        ret = USBD_FAIL;
 800ea6c:	2303      	movs	r3, #3
 800ea6e:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800ea70:	e008      	b.n	800ea84 <USBD_CDC_Setup+0x160>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800ea72:	6839      	ldr	r1, [r7, #0]
 800ea74:	6878      	ldr	r0, [r7, #4]
 800ea76:	f001 f9d5 	bl	800fe24 <USBD_CtlError>
      ret = USBD_FAIL;
 800ea7a:	2303      	movs	r3, #3
 800ea7c:	75fb      	strb	r3, [r7, #23]
      break;
 800ea7e:	e002      	b.n	800ea86 <USBD_CDC_Setup+0x162>
      break;
 800ea80:	bf00      	nop
 800ea82:	e008      	b.n	800ea96 <USBD_CDC_Setup+0x172>
      break;
 800ea84:	bf00      	nop
    }
    break;
 800ea86:	e006      	b.n	800ea96 <USBD_CDC_Setup+0x172>

  default:
    USBD_CtlError(pdev, req);
 800ea88:	6839      	ldr	r1, [r7, #0]
 800ea8a:	6878      	ldr	r0, [r7, #4]
 800ea8c:	f001 f9ca 	bl	800fe24 <USBD_CtlError>
    ret = USBD_FAIL;
 800ea90:	2303      	movs	r3, #3
 800ea92:	75fb      	strb	r3, [r7, #23]
    break;
 800ea94:	bf00      	nop
  }

  return (uint8_t)ret;
 800ea96:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea98:	4618      	mov	r0, r3
 800ea9a:	3718      	adds	r7, #24
 800ea9c:	46bd      	mov	sp, r7
 800ea9e:	bd80      	pop	{r7, pc}

0800eaa0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	b084      	sub	sp, #16
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	6078      	str	r0, [r7, #4]
 800eaa8:	460b      	mov	r3, r1
 800eaaa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800eab2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d101      	bne.n	800eac2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800eabe:	2303      	movs	r3, #3
 800eac0:	e049      	b.n	800eb56 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eac8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800eaca:	78fa      	ldrb	r2, [r7, #3]
 800eacc:	6879      	ldr	r1, [r7, #4]
 800eace:	4613      	mov	r3, r2
 800ead0:	009b      	lsls	r3, r3, #2
 800ead2:	4413      	add	r3, r2
 800ead4:	009b      	lsls	r3, r3, #2
 800ead6:	440b      	add	r3, r1
 800ead8:	3318      	adds	r3, #24
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d029      	beq.n	800eb34 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800eae0:	78fa      	ldrb	r2, [r7, #3]
 800eae2:	6879      	ldr	r1, [r7, #4]
 800eae4:	4613      	mov	r3, r2
 800eae6:	009b      	lsls	r3, r3, #2
 800eae8:	4413      	add	r3, r2
 800eaea:	009b      	lsls	r3, r3, #2
 800eaec:	440b      	add	r3, r1
 800eaee:	3318      	adds	r3, #24
 800eaf0:	681a      	ldr	r2, [r3, #0]
 800eaf2:	78f9      	ldrb	r1, [r7, #3]
 800eaf4:	68f8      	ldr	r0, [r7, #12]
 800eaf6:	460b      	mov	r3, r1
 800eaf8:	00db      	lsls	r3, r3, #3
 800eafa:	1a5b      	subs	r3, r3, r1
 800eafc:	009b      	lsls	r3, r3, #2
 800eafe:	4403      	add	r3, r0
 800eb00:	3344      	adds	r3, #68	; 0x44
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	fbb2 f1f3 	udiv	r1, r2, r3
 800eb08:	fb01 f303 	mul.w	r3, r1, r3
 800eb0c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d110      	bne.n	800eb34 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800eb12:	78fa      	ldrb	r2, [r7, #3]
 800eb14:	6879      	ldr	r1, [r7, #4]
 800eb16:	4613      	mov	r3, r2
 800eb18:	009b      	lsls	r3, r3, #2
 800eb1a:	4413      	add	r3, r2
 800eb1c:	009b      	lsls	r3, r3, #2
 800eb1e:	440b      	add	r3, r1
 800eb20:	3318      	adds	r3, #24
 800eb22:	2200      	movs	r2, #0
 800eb24:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800eb26:	78f9      	ldrb	r1, [r7, #3]
 800eb28:	2300      	movs	r3, #0
 800eb2a:	2200      	movs	r2, #0
 800eb2c:	6878      	ldr	r0, [r7, #4]
 800eb2e:	f001 ff68 	bl	8010a02 <USBD_LL_Transmit>
 800eb32:	e00f      	b.n	800eb54 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 800eb34:	68bb      	ldr	r3, [r7, #8]
 800eb36:	2200      	movs	r2, #0
 800eb38:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800eb42:	691b      	ldr	r3, [r3, #16]
 800eb44:	68ba      	ldr	r2, [r7, #8]
 800eb46:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800eb4a:	68ba      	ldr	r2, [r7, #8]
 800eb4c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800eb50:	78fa      	ldrb	r2, [r7, #3]
 800eb52:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800eb54:	2300      	movs	r3, #0
}
 800eb56:	4618      	mov	r0, r3
 800eb58:	3710      	adds	r7, #16
 800eb5a:	46bd      	mov	sp, r7
 800eb5c:	bd80      	pop	{r7, pc}

0800eb5e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800eb5e:	b580      	push	{r7, lr}
 800eb60:	b084      	sub	sp, #16
 800eb62:	af00      	add	r7, sp, #0
 800eb64:	6078      	str	r0, [r7, #4]
 800eb66:	460b      	mov	r3, r1
 800eb68:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eb70:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d101      	bne.n	800eb80 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800eb7c:	2303      	movs	r3, #3
 800eb7e:	e015      	b.n	800ebac <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800eb80:	78fb      	ldrb	r3, [r7, #3]
 800eb82:	4619      	mov	r1, r3
 800eb84:	6878      	ldr	r0, [r7, #4]
 800eb86:	f001 ff7e 	bl	8010a86 <USBD_LL_GetRxDataSize>
 800eb8a:	4602      	mov	r2, r0
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800eb98:	68db      	ldr	r3, [r3, #12]
 800eb9a:	68fa      	ldr	r2, [r7, #12]
 800eb9c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800eba0:	68fa      	ldr	r2, [r7, #12]
 800eba2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800eba6:	4611      	mov	r1, r2
 800eba8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ebaa:	2300      	movs	r3, #0
}
 800ebac:	4618      	mov	r0, r3
 800ebae:	3710      	adds	r7, #16
 800ebb0:	46bd      	mov	sp, r7
 800ebb2:	bd80      	pop	{r7, pc}

0800ebb4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ebb4:	b580      	push	{r7, lr}
 800ebb6:	b084      	sub	sp, #16
 800ebb8:	af00      	add	r7, sp, #0
 800ebba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ebc2:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d015      	beq.n	800ebfa <USBD_CDC_EP0_RxReady+0x46>
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ebd4:	2bff      	cmp	r3, #255	; 0xff
 800ebd6:	d010      	beq.n	800ebfa <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ebde:	689b      	ldr	r3, [r3, #8]
 800ebe0:	68fa      	ldr	r2, [r7, #12]
 800ebe2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800ebe6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800ebe8:	68fa      	ldr	r2, [r7, #12]
 800ebea:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ebee:	b292      	uxth	r2, r2
 800ebf0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	22ff      	movs	r2, #255	; 0xff
 800ebf6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800ebfa:	2300      	movs	r3, #0
}
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	3710      	adds	r7, #16
 800ec00:	46bd      	mov	sp, r7
 800ec02:	bd80      	pop	{r7, pc}

0800ec04 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ec04:	b480      	push	{r7}
 800ec06:	b083      	sub	sp, #12
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	2243      	movs	r2, #67	; 0x43
 800ec10:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800ec12:	4b03      	ldr	r3, [pc, #12]	; (800ec20 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800ec14:	4618      	mov	r0, r3
 800ec16:	370c      	adds	r7, #12
 800ec18:	46bd      	mov	sp, r7
 800ec1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec1e:	4770      	bx	lr
 800ec20:	24000098 	.word	0x24000098

0800ec24 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ec24:	b480      	push	{r7}
 800ec26:	b083      	sub	sp, #12
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	2243      	movs	r2, #67	; 0x43
 800ec30:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800ec32:	4b03      	ldr	r3, [pc, #12]	; (800ec40 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800ec34:	4618      	mov	r0, r3
 800ec36:	370c      	adds	r7, #12
 800ec38:	46bd      	mov	sp, r7
 800ec3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec3e:	4770      	bx	lr
 800ec40:	24000054 	.word	0x24000054

0800ec44 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ec44:	b480      	push	{r7}
 800ec46:	b083      	sub	sp, #12
 800ec48:	af00      	add	r7, sp, #0
 800ec4a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	2243      	movs	r2, #67	; 0x43
 800ec50:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800ec52:	4b03      	ldr	r3, [pc, #12]	; (800ec60 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800ec54:	4618      	mov	r0, r3
 800ec56:	370c      	adds	r7, #12
 800ec58:	46bd      	mov	sp, r7
 800ec5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec5e:	4770      	bx	lr
 800ec60:	240000dc 	.word	0x240000dc

0800ec64 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ec64:	b480      	push	{r7}
 800ec66:	b083      	sub	sp, #12
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	220a      	movs	r2, #10
 800ec70:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ec72:	4b03      	ldr	r3, [pc, #12]	; (800ec80 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ec74:	4618      	mov	r0, r3
 800ec76:	370c      	adds	r7, #12
 800ec78:	46bd      	mov	sp, r7
 800ec7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec7e:	4770      	bx	lr
 800ec80:	24000010 	.word	0x24000010

0800ec84 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ec84:	b480      	push	{r7}
 800ec86:	b083      	sub	sp, #12
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	6078      	str	r0, [r7, #4]
 800ec8c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ec8e:	683b      	ldr	r3, [r7, #0]
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d101      	bne.n	800ec98 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ec94:	2303      	movs	r3, #3
 800ec96:	e004      	b.n	800eca2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	683a      	ldr	r2, [r7, #0]
 800ec9c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800eca0:	2300      	movs	r3, #0
}
 800eca2:	4618      	mov	r0, r3
 800eca4:	370c      	adds	r7, #12
 800eca6:	46bd      	mov	sp, r7
 800eca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecac:	4770      	bx	lr

0800ecae <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ecae:	b480      	push	{r7}
 800ecb0:	b087      	sub	sp, #28
 800ecb2:	af00      	add	r7, sp, #0
 800ecb4:	60f8      	str	r0, [r7, #12]
 800ecb6:	60b9      	str	r1, [r7, #8]
 800ecb8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ecc0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800ecc2:	697b      	ldr	r3, [r7, #20]
 800ecc4:	68ba      	ldr	r2, [r7, #8]
 800ecc6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800ecca:	697b      	ldr	r3, [r7, #20]
 800eccc:	687a      	ldr	r2, [r7, #4]
 800ecce:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800ecd2:	2300      	movs	r3, #0
}
 800ecd4:	4618      	mov	r0, r3
 800ecd6:	371c      	adds	r7, #28
 800ecd8:	46bd      	mov	sp, r7
 800ecda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecde:	4770      	bx	lr

0800ece0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ece0:	b480      	push	{r7}
 800ece2:	b085      	sub	sp, #20
 800ece4:	af00      	add	r7, sp, #0
 800ece6:	6078      	str	r0, [r7, #4]
 800ece8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ecf0:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	683a      	ldr	r2, [r7, #0]
 800ecf6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800ecfa:	2300      	movs	r3, #0
}
 800ecfc:	4618      	mov	r0, r3
 800ecfe:	3714      	adds	r7, #20
 800ed00:	46bd      	mov	sp, r7
 800ed02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed06:	4770      	bx	lr

0800ed08 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800ed08:	b580      	push	{r7, lr}
 800ed0a:	b084      	sub	sp, #16
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ed16:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800ed18:	2301      	movs	r3, #1
 800ed1a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d101      	bne.n	800ed2a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ed26:	2303      	movs	r3, #3
 800ed28:	e01a      	b.n	800ed60 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800ed2a:	68bb      	ldr	r3, [r7, #8]
 800ed2c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d114      	bne.n	800ed5e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800ed34:	68bb      	ldr	r3, [r7, #8]
 800ed36:	2201      	movs	r2, #1
 800ed38:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800ed3c:	68bb      	ldr	r3, [r7, #8]
 800ed3e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800ed46:	68bb      	ldr	r3, [r7, #8]
 800ed48:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800ed4c:	68bb      	ldr	r3, [r7, #8]
 800ed4e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ed52:	2181      	movs	r1, #129	; 0x81
 800ed54:	6878      	ldr	r0, [r7, #4]
 800ed56:	f001 fe54 	bl	8010a02 <USBD_LL_Transmit>

    ret = USBD_OK;
 800ed5a:	2300      	movs	r3, #0
 800ed5c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800ed5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed60:	4618      	mov	r0, r3
 800ed62:	3710      	adds	r7, #16
 800ed64:	46bd      	mov	sp, r7
 800ed66:	bd80      	pop	{r7, pc}

0800ed68 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ed68:	b580      	push	{r7, lr}
 800ed6a:	b084      	sub	sp, #16
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ed76:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d101      	bne.n	800ed86 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800ed82:	2303      	movs	r3, #3
 800ed84:	e016      	b.n	800edb4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	7c1b      	ldrb	r3, [r3, #16]
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d109      	bne.n	800eda2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ed94:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ed98:	2101      	movs	r1, #1
 800ed9a:	6878      	ldr	r0, [r7, #4]
 800ed9c:	f001 fe52 	bl	8010a44 <USBD_LL_PrepareReceive>
 800eda0:	e007      	b.n	800edb2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800eda8:	2340      	movs	r3, #64	; 0x40
 800edaa:	2101      	movs	r1, #1
 800edac:	6878      	ldr	r0, [r7, #4]
 800edae:	f001 fe49 	bl	8010a44 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800edb2:	2300      	movs	r3, #0
}
 800edb4:	4618      	mov	r0, r3
 800edb6:	3710      	adds	r7, #16
 800edb8:	46bd      	mov	sp, r7
 800edba:	bd80      	pop	{r7, pc}

0800edbc <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800edbc:	b580      	push	{r7, lr}
 800edbe:	b086      	sub	sp, #24
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	60f8      	str	r0, [r7, #12]
 800edc4:	60b9      	str	r1, [r7, #8]
 800edc6:	4613      	mov	r3, r2
 800edc8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d101      	bne.n	800edd4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800edd0:	2303      	movs	r3, #3
 800edd2:	e025      	b.n	800ee20 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d003      	beq.n	800ede6 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	2200      	movs	r2, #0
 800ede2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800edec:	2b00      	cmp	r3, #0
 800edee:	d003      	beq.n	800edf8 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	2200      	movs	r2, #0
 800edf4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800edf8:	68bb      	ldr	r3, [r7, #8]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d003      	beq.n	800ee06 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	68ba      	ldr	r2, [r7, #8]
 800ee02:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	2201      	movs	r2, #1
 800ee0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	79fa      	ldrb	r2, [r7, #7]
 800ee12:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ee14:	68f8      	ldr	r0, [r7, #12]
 800ee16:	f001 fcbb 	bl	8010790 <USBD_LL_Init>
 800ee1a:	4603      	mov	r3, r0
 800ee1c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ee1e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee20:	4618      	mov	r0, r3
 800ee22:	3718      	adds	r7, #24
 800ee24:	46bd      	mov	sp, r7
 800ee26:	bd80      	pop	{r7, pc}

0800ee28 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ee28:	b580      	push	{r7, lr}
 800ee2a:	b084      	sub	sp, #16
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	6078      	str	r0, [r7, #4]
 800ee30:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ee32:	2300      	movs	r3, #0
 800ee34:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ee36:	683b      	ldr	r3, [r7, #0]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d101      	bne.n	800ee40 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800ee3c:	2303      	movs	r3, #3
 800ee3e:	e010      	b.n	800ee62 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	683a      	ldr	r2, [r7, #0]
 800ee44:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee50:	f107 020e 	add.w	r2, r7, #14
 800ee54:	4610      	mov	r0, r2
 800ee56:	4798      	blx	r3
 800ee58:	4602      	mov	r2, r0
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800ee60:	2300      	movs	r3, #0
}
 800ee62:	4618      	mov	r0, r3
 800ee64:	3710      	adds	r7, #16
 800ee66:	46bd      	mov	sp, r7
 800ee68:	bd80      	pop	{r7, pc}

0800ee6a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ee6a:	b580      	push	{r7, lr}
 800ee6c:	b082      	sub	sp, #8
 800ee6e:	af00      	add	r7, sp, #0
 800ee70:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ee72:	6878      	ldr	r0, [r7, #4]
 800ee74:	f001 fcdc 	bl	8010830 <USBD_LL_Start>
 800ee78:	4603      	mov	r3, r0
}
 800ee7a:	4618      	mov	r0, r3
 800ee7c:	3708      	adds	r7, #8
 800ee7e:	46bd      	mov	sp, r7
 800ee80:	bd80      	pop	{r7, pc}

0800ee82 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800ee82:	b480      	push	{r7}
 800ee84:	b083      	sub	sp, #12
 800ee86:	af00      	add	r7, sp, #0
 800ee88:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ee8a:	2300      	movs	r3, #0
}
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	370c      	adds	r7, #12
 800ee90:	46bd      	mov	sp, r7
 800ee92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee96:	4770      	bx	lr

0800ee98 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ee98:	b580      	push	{r7, lr}
 800ee9a:	b084      	sub	sp, #16
 800ee9c:	af00      	add	r7, sp, #0
 800ee9e:	6078      	str	r0, [r7, #4]
 800eea0:	460b      	mov	r3, r1
 800eea2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800eea4:	2303      	movs	r3, #3
 800eea6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d009      	beq.n	800eec6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	78fa      	ldrb	r2, [r7, #3]
 800eebc:	4611      	mov	r1, r2
 800eebe:	6878      	ldr	r0, [r7, #4]
 800eec0:	4798      	blx	r3
 800eec2:	4603      	mov	r3, r0
 800eec4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800eec6:	7bfb      	ldrb	r3, [r7, #15]
}
 800eec8:	4618      	mov	r0, r3
 800eeca:	3710      	adds	r7, #16
 800eecc:	46bd      	mov	sp, r7
 800eece:	bd80      	pop	{r7, pc}

0800eed0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800eed0:	b580      	push	{r7, lr}
 800eed2:	b082      	sub	sp, #8
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	6078      	str	r0, [r7, #4]
 800eed8:	460b      	mov	r3, r1
 800eeda:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d007      	beq.n	800eef6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eeec:	685b      	ldr	r3, [r3, #4]
 800eeee:	78fa      	ldrb	r2, [r7, #3]
 800eef0:	4611      	mov	r1, r2
 800eef2:	6878      	ldr	r0, [r7, #4]
 800eef4:	4798      	blx	r3
  }

  return USBD_OK;
 800eef6:	2300      	movs	r3, #0
}
 800eef8:	4618      	mov	r0, r3
 800eefa:	3708      	adds	r7, #8
 800eefc:	46bd      	mov	sp, r7
 800eefe:	bd80      	pop	{r7, pc}

0800ef00 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ef00:	b580      	push	{r7, lr}
 800ef02:	b084      	sub	sp, #16
 800ef04:	af00      	add	r7, sp, #0
 800ef06:	6078      	str	r0, [r7, #4]
 800ef08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ef10:	6839      	ldr	r1, [r7, #0]
 800ef12:	4618      	mov	r0, r3
 800ef14:	f000 ff4c 	bl	800fdb0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	2201      	movs	r2, #1
 800ef1c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ef26:	461a      	mov	r2, r3
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ef34:	f003 031f 	and.w	r3, r3, #31
 800ef38:	2b02      	cmp	r3, #2
 800ef3a:	d01a      	beq.n	800ef72 <USBD_LL_SetupStage+0x72>
 800ef3c:	2b02      	cmp	r3, #2
 800ef3e:	d822      	bhi.n	800ef86 <USBD_LL_SetupStage+0x86>
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d002      	beq.n	800ef4a <USBD_LL_SetupStage+0x4a>
 800ef44:	2b01      	cmp	r3, #1
 800ef46:	d00a      	beq.n	800ef5e <USBD_LL_SetupStage+0x5e>
 800ef48:	e01d      	b.n	800ef86 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ef50:	4619      	mov	r1, r3
 800ef52:	6878      	ldr	r0, [r7, #4]
 800ef54:	f000 fa20 	bl	800f398 <USBD_StdDevReq>
 800ef58:	4603      	mov	r3, r0
 800ef5a:	73fb      	strb	r3, [r7, #15]
      break;
 800ef5c:	e020      	b.n	800efa0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ef64:	4619      	mov	r1, r3
 800ef66:	6878      	ldr	r0, [r7, #4]
 800ef68:	f000 fa84 	bl	800f474 <USBD_StdItfReq>
 800ef6c:	4603      	mov	r3, r0
 800ef6e:	73fb      	strb	r3, [r7, #15]
      break;
 800ef70:	e016      	b.n	800efa0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ef78:	4619      	mov	r1, r3
 800ef7a:	6878      	ldr	r0, [r7, #4]
 800ef7c:	f000 fac3 	bl	800f506 <USBD_StdEPReq>
 800ef80:	4603      	mov	r3, r0
 800ef82:	73fb      	strb	r3, [r7, #15]
      break;
 800ef84:	e00c      	b.n	800efa0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ef8c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ef90:	b2db      	uxtb	r3, r3
 800ef92:	4619      	mov	r1, r3
 800ef94:	6878      	ldr	r0, [r7, #4]
 800ef96:	f001 fcab 	bl	80108f0 <USBD_LL_StallEP>
 800ef9a:	4603      	mov	r3, r0
 800ef9c:	73fb      	strb	r3, [r7, #15]
      break;
 800ef9e:	bf00      	nop
  }

  return ret;
 800efa0:	7bfb      	ldrb	r3, [r7, #15]
}
 800efa2:	4618      	mov	r0, r3
 800efa4:	3710      	adds	r7, #16
 800efa6:	46bd      	mov	sp, r7
 800efa8:	bd80      	pop	{r7, pc}

0800efaa <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800efaa:	b580      	push	{r7, lr}
 800efac:	b086      	sub	sp, #24
 800efae:	af00      	add	r7, sp, #0
 800efb0:	60f8      	str	r0, [r7, #12]
 800efb2:	460b      	mov	r3, r1
 800efb4:	607a      	str	r2, [r7, #4]
 800efb6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800efb8:	7afb      	ldrb	r3, [r7, #11]
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d138      	bne.n	800f030 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800efc4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800efcc:	2b03      	cmp	r3, #3
 800efce:	d14c      	bne.n	800f06a <USBD_LL_DataOutStage+0xc0>
    {
      if (pep->rem_length > pep->maxpacket)
 800efd0:	693b      	ldr	r3, [r7, #16]
 800efd2:	689a      	ldr	r2, [r3, #8]
 800efd4:	693b      	ldr	r3, [r7, #16]
 800efd6:	68db      	ldr	r3, [r3, #12]
 800efd8:	429a      	cmp	r2, r3
 800efda:	d913      	bls.n	800f004 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800efdc:	693b      	ldr	r3, [r7, #16]
 800efde:	689a      	ldr	r2, [r3, #8]
 800efe0:	693b      	ldr	r3, [r7, #16]
 800efe2:	68db      	ldr	r3, [r3, #12]
 800efe4:	1ad2      	subs	r2, r2, r3
 800efe6:	693b      	ldr	r3, [r7, #16]
 800efe8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800efea:	693b      	ldr	r3, [r7, #16]
 800efec:	68da      	ldr	r2, [r3, #12]
 800efee:	693b      	ldr	r3, [r7, #16]
 800eff0:	689b      	ldr	r3, [r3, #8]
 800eff2:	4293      	cmp	r3, r2
 800eff4:	bf28      	it	cs
 800eff6:	4613      	movcs	r3, r2
 800eff8:	461a      	mov	r2, r3
 800effa:	6879      	ldr	r1, [r7, #4]
 800effc:	68f8      	ldr	r0, [r7, #12]
 800effe:	f000 ffcb 	bl	800ff98 <USBD_CtlContinueRx>
 800f002:	e032      	b.n	800f06a <USBD_LL_DataOutStage+0xc0>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f00a:	691b      	ldr	r3, [r3, #16]
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d00b      	beq.n	800f028 <USBD_LL_DataOutStage+0x7e>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f016:	b2db      	uxtb	r3, r3
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800f018:	2b03      	cmp	r3, #3
 800f01a:	d105      	bne.n	800f028 <USBD_LL_DataOutStage+0x7e>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f022:	691b      	ldr	r3, [r3, #16]
 800f024:	68f8      	ldr	r0, [r7, #12]
 800f026:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800f028:	68f8      	ldr	r0, [r7, #12]
 800f02a:	f000 ffc6 	bl	800ffba <USBD_CtlSendStatus>
 800f02e:	e01c      	b.n	800f06a <USBD_LL_DataOutStage+0xc0>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f036:	699b      	ldr	r3, [r3, #24]
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d014      	beq.n	800f066 <USBD_LL_DataOutStage+0xbc>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f042:	b2db      	uxtb	r3, r3
  else if ((pdev->pClass->DataOut != NULL) &&
 800f044:	2b03      	cmp	r3, #3
 800f046:	d10e      	bne.n	800f066 <USBD_LL_DataOutStage+0xbc>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f04e:	699b      	ldr	r3, [r3, #24]
 800f050:	7afa      	ldrb	r2, [r7, #11]
 800f052:	4611      	mov	r1, r2
 800f054:	68f8      	ldr	r0, [r7, #12]
 800f056:	4798      	blx	r3
 800f058:	4603      	mov	r3, r0
 800f05a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800f05c:	7dfb      	ldrb	r3, [r7, #23]
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d003      	beq.n	800f06a <USBD_LL_DataOutStage+0xc0>
    {
      return ret;
 800f062:	7dfb      	ldrb	r3, [r7, #23]
 800f064:	e002      	b.n	800f06c <USBD_LL_DataOutStage+0xc2>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800f066:	2303      	movs	r3, #3
 800f068:	e000      	b.n	800f06c <USBD_LL_DataOutStage+0xc2>
  }

  return USBD_OK;
 800f06a:	2300      	movs	r3, #0
}
 800f06c:	4618      	mov	r0, r3
 800f06e:	3718      	adds	r7, #24
 800f070:	46bd      	mov	sp, r7
 800f072:	bd80      	pop	{r7, pc}

0800f074 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f074:	b580      	push	{r7, lr}
 800f076:	b086      	sub	sp, #24
 800f078:	af00      	add	r7, sp, #0
 800f07a:	60f8      	str	r0, [r7, #12]
 800f07c:	460b      	mov	r3, r1
 800f07e:	607a      	str	r2, [r7, #4]
 800f080:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f082:	7afb      	ldrb	r3, [r7, #11]
 800f084:	2b00      	cmp	r3, #0
 800f086:	d16b      	bne.n	800f160 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	3314      	adds	r3, #20
 800f08c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f094:	2b02      	cmp	r3, #2
 800f096:	d156      	bne.n	800f146 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800f098:	693b      	ldr	r3, [r7, #16]
 800f09a:	689a      	ldr	r2, [r3, #8]
 800f09c:	693b      	ldr	r3, [r7, #16]
 800f09e:	68db      	ldr	r3, [r3, #12]
 800f0a0:	429a      	cmp	r2, r3
 800f0a2:	d914      	bls.n	800f0ce <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f0a4:	693b      	ldr	r3, [r7, #16]
 800f0a6:	689a      	ldr	r2, [r3, #8]
 800f0a8:	693b      	ldr	r3, [r7, #16]
 800f0aa:	68db      	ldr	r3, [r3, #12]
 800f0ac:	1ad2      	subs	r2, r2, r3
 800f0ae:	693b      	ldr	r3, [r7, #16]
 800f0b0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800f0b2:	693b      	ldr	r3, [r7, #16]
 800f0b4:	689b      	ldr	r3, [r3, #8]
 800f0b6:	461a      	mov	r2, r3
 800f0b8:	6879      	ldr	r1, [r7, #4]
 800f0ba:	68f8      	ldr	r0, [r7, #12]
 800f0bc:	f000 ff3e 	bl	800ff3c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f0c0:	2300      	movs	r3, #0
 800f0c2:	2200      	movs	r2, #0
 800f0c4:	2100      	movs	r1, #0
 800f0c6:	68f8      	ldr	r0, [r7, #12]
 800f0c8:	f001 fcbc 	bl	8010a44 <USBD_LL_PrepareReceive>
 800f0cc:	e03b      	b.n	800f146 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800f0ce:	693b      	ldr	r3, [r7, #16]
 800f0d0:	68da      	ldr	r2, [r3, #12]
 800f0d2:	693b      	ldr	r3, [r7, #16]
 800f0d4:	689b      	ldr	r3, [r3, #8]
 800f0d6:	429a      	cmp	r2, r3
 800f0d8:	d11c      	bne.n	800f114 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800f0da:	693b      	ldr	r3, [r7, #16]
 800f0dc:	685a      	ldr	r2, [r3, #4]
 800f0de:	693b      	ldr	r3, [r7, #16]
 800f0e0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800f0e2:	429a      	cmp	r2, r3
 800f0e4:	d316      	bcc.n	800f114 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800f0e6:	693b      	ldr	r3, [r7, #16]
 800f0e8:	685a      	ldr	r2, [r3, #4]
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f0f0:	429a      	cmp	r2, r3
 800f0f2:	d20f      	bcs.n	800f114 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f0f4:	2200      	movs	r2, #0
 800f0f6:	2100      	movs	r1, #0
 800f0f8:	68f8      	ldr	r0, [r7, #12]
 800f0fa:	f000 ff1f 	bl	800ff3c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	2200      	movs	r2, #0
 800f102:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f106:	2300      	movs	r3, #0
 800f108:	2200      	movs	r2, #0
 800f10a:	2100      	movs	r1, #0
 800f10c:	68f8      	ldr	r0, [r7, #12]
 800f10e:	f001 fc99 	bl	8010a44 <USBD_LL_PrepareReceive>
 800f112:	e018      	b.n	800f146 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f11a:	68db      	ldr	r3, [r3, #12]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d00b      	beq.n	800f138 <USBD_LL_DataInStage+0xc4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f126:	b2db      	uxtb	r3, r3
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800f128:	2b03      	cmp	r3, #3
 800f12a:	d105      	bne.n	800f138 <USBD_LL_DataInStage+0xc4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f132:	68db      	ldr	r3, [r3, #12]
 800f134:	68f8      	ldr	r0, [r7, #12]
 800f136:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f138:	2180      	movs	r1, #128	; 0x80
 800f13a:	68f8      	ldr	r0, [r7, #12]
 800f13c:	f001 fbd8 	bl	80108f0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800f140:	68f8      	ldr	r0, [r7, #12]
 800f142:	f000 ff4d 	bl	800ffe0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800f14c:	2b01      	cmp	r3, #1
 800f14e:	d124      	bne.n	800f19a <USBD_LL_DataInStage+0x126>
    {
      (void)USBD_RunTestMode(pdev);
 800f150:	68f8      	ldr	r0, [r7, #12]
 800f152:	f7ff fe96 	bl	800ee82 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	2200      	movs	r2, #0
 800f15a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800f15e:	e01c      	b.n	800f19a <USBD_LL_DataInStage+0x126>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f166:	695b      	ldr	r3, [r3, #20]
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d014      	beq.n	800f196 <USBD_LL_DataInStage+0x122>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f172:	b2db      	uxtb	r3, r3
  else if ((pdev->pClass->DataIn != NULL) &&
 800f174:	2b03      	cmp	r3, #3
 800f176:	d10e      	bne.n	800f196 <USBD_LL_DataInStage+0x122>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f17e:	695b      	ldr	r3, [r3, #20]
 800f180:	7afa      	ldrb	r2, [r7, #11]
 800f182:	4611      	mov	r1, r2
 800f184:	68f8      	ldr	r0, [r7, #12]
 800f186:	4798      	blx	r3
 800f188:	4603      	mov	r3, r0
 800f18a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800f18c:	7dfb      	ldrb	r3, [r7, #23]
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d003      	beq.n	800f19a <USBD_LL_DataInStage+0x126>
    {
      return ret;
 800f192:	7dfb      	ldrb	r3, [r7, #23]
 800f194:	e002      	b.n	800f19c <USBD_LL_DataInStage+0x128>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800f196:	2303      	movs	r3, #3
 800f198:	e000      	b.n	800f19c <USBD_LL_DataInStage+0x128>
  }

  return USBD_OK;
 800f19a:	2300      	movs	r3, #0
}
 800f19c:	4618      	mov	r0, r3
 800f19e:	3718      	adds	r7, #24
 800f1a0:	46bd      	mov	sp, r7
 800f1a2:	bd80      	pop	{r7, pc}

0800f1a4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f1a4:	b580      	push	{r7, lr}
 800f1a6:	b082      	sub	sp, #8
 800f1a8:	af00      	add	r7, sp, #0
 800f1aa:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	2201      	movs	r2, #1
 800f1b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	2200      	movs	r2, #0
 800f1b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	2200      	movs	r2, #0
 800f1c0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	2200      	movs	r2, #0
 800f1c6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d009      	beq.n	800f1e8 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f1da:	685b      	ldr	r3, [r3, #4]
 800f1dc:	687a      	ldr	r2, [r7, #4]
 800f1de:	6852      	ldr	r2, [r2, #4]
 800f1e0:	b2d2      	uxtb	r2, r2
 800f1e2:	4611      	mov	r1, r2
 800f1e4:	6878      	ldr	r0, [r7, #4]
 800f1e6:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f1e8:	2340      	movs	r3, #64	; 0x40
 800f1ea:	2200      	movs	r2, #0
 800f1ec:	2100      	movs	r1, #0
 800f1ee:	6878      	ldr	r0, [r7, #4]
 800f1f0:	f001 fb39 	bl	8010866 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	2201      	movs	r2, #1
 800f1f8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	2240      	movs	r2, #64	; 0x40
 800f200:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f204:	2340      	movs	r3, #64	; 0x40
 800f206:	2200      	movs	r2, #0
 800f208:	2180      	movs	r1, #128	; 0x80
 800f20a:	6878      	ldr	r0, [r7, #4]
 800f20c:	f001 fb2b 	bl	8010866 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	2201      	movs	r2, #1
 800f214:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	2240      	movs	r2, #64	; 0x40
 800f21a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800f21c:	2300      	movs	r3, #0
}
 800f21e:	4618      	mov	r0, r3
 800f220:	3708      	adds	r7, #8
 800f222:	46bd      	mov	sp, r7
 800f224:	bd80      	pop	{r7, pc}

0800f226 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f226:	b480      	push	{r7}
 800f228:	b083      	sub	sp, #12
 800f22a:	af00      	add	r7, sp, #0
 800f22c:	6078      	str	r0, [r7, #4]
 800f22e:	460b      	mov	r3, r1
 800f230:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	78fa      	ldrb	r2, [r7, #3]
 800f236:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f238:	2300      	movs	r3, #0
}
 800f23a:	4618      	mov	r0, r3
 800f23c:	370c      	adds	r7, #12
 800f23e:	46bd      	mov	sp, r7
 800f240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f244:	4770      	bx	lr

0800f246 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800f246:	b480      	push	{r7}
 800f248:	b083      	sub	sp, #12
 800f24a:	af00      	add	r7, sp, #0
 800f24c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f254:	b2da      	uxtb	r2, r3
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	2204      	movs	r2, #4
 800f260:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800f264:	2300      	movs	r3, #0
}
 800f266:	4618      	mov	r0, r3
 800f268:	370c      	adds	r7, #12
 800f26a:	46bd      	mov	sp, r7
 800f26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f270:	4770      	bx	lr

0800f272 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800f272:	b480      	push	{r7}
 800f274:	b083      	sub	sp, #12
 800f276:	af00      	add	r7, sp, #0
 800f278:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f280:	b2db      	uxtb	r3, r3
 800f282:	2b04      	cmp	r3, #4
 800f284:	d106      	bne.n	800f294 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800f28c:	b2da      	uxtb	r2, r3
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800f294:	2300      	movs	r3, #0
}
 800f296:	4618      	mov	r0, r3
 800f298:	370c      	adds	r7, #12
 800f29a:	46bd      	mov	sp, r7
 800f29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a0:	4770      	bx	lr

0800f2a2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f2a2:	b580      	push	{r7, lr}
 800f2a4:	b082      	sub	sp, #8
 800f2a6:	af00      	add	r7, sp, #0
 800f2a8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f2b0:	b2db      	uxtb	r3, r3
 800f2b2:	2b03      	cmp	r3, #3
 800f2b4:	d10b      	bne.n	800f2ce <USBD_LL_SOF+0x2c>
  {
    if (pdev->pClass->SOF != NULL)
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f2bc:	69db      	ldr	r3, [r3, #28]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d005      	beq.n	800f2ce <USBD_LL_SOF+0x2c>
    {
      pdev->pClass->SOF(pdev);
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f2c8:	69db      	ldr	r3, [r3, #28]
 800f2ca:	6878      	ldr	r0, [r7, #4]
 800f2cc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f2ce:	2300      	movs	r3, #0
}
 800f2d0:	4618      	mov	r0, r3
 800f2d2:	3708      	adds	r7, #8
 800f2d4:	46bd      	mov	sp, r7
 800f2d6:	bd80      	pop	{r7, pc}

0800f2d8 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800f2d8:	b480      	push	{r7}
 800f2da:	b083      	sub	sp, #12
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	6078      	str	r0, [r7, #4]
 800f2e0:	460b      	mov	r3, r1
 800f2e2:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800f2e4:	2300      	movs	r3, #0
}
 800f2e6:	4618      	mov	r0, r3
 800f2e8:	370c      	adds	r7, #12
 800f2ea:	46bd      	mov	sp, r7
 800f2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f0:	4770      	bx	lr

0800f2f2 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800f2f2:	b480      	push	{r7}
 800f2f4:	b083      	sub	sp, #12
 800f2f6:	af00      	add	r7, sp, #0
 800f2f8:	6078      	str	r0, [r7, #4]
 800f2fa:	460b      	mov	r3, r1
 800f2fc:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800f2fe:	2300      	movs	r3, #0
}
 800f300:	4618      	mov	r0, r3
 800f302:	370c      	adds	r7, #12
 800f304:	46bd      	mov	sp, r7
 800f306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f30a:	4770      	bx	lr

0800f30c <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800f30c:	b480      	push	{r7}
 800f30e:	b083      	sub	sp, #12
 800f310:	af00      	add	r7, sp, #0
 800f312:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f314:	2300      	movs	r3, #0
}
 800f316:	4618      	mov	r0, r3
 800f318:	370c      	adds	r7, #12
 800f31a:	46bd      	mov	sp, r7
 800f31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f320:	4770      	bx	lr

0800f322 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800f322:	b580      	push	{r7, lr}
 800f324:	b082      	sub	sp, #8
 800f326:	af00      	add	r7, sp, #0
 800f328:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	2201      	movs	r2, #1
 800f32e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d009      	beq.n	800f350 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f342:	685b      	ldr	r3, [r3, #4]
 800f344:	687a      	ldr	r2, [r7, #4]
 800f346:	6852      	ldr	r2, [r2, #4]
 800f348:	b2d2      	uxtb	r2, r2
 800f34a:	4611      	mov	r1, r2
 800f34c:	6878      	ldr	r0, [r7, #4]
 800f34e:	4798      	blx	r3
  }

  return USBD_OK;
 800f350:	2300      	movs	r3, #0
}
 800f352:	4618      	mov	r0, r3
 800f354:	3708      	adds	r7, #8
 800f356:	46bd      	mov	sp, r7
 800f358:	bd80      	pop	{r7, pc}

0800f35a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f35a:	b480      	push	{r7}
 800f35c:	b087      	sub	sp, #28
 800f35e:	af00      	add	r7, sp, #0
 800f360:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f366:	697b      	ldr	r3, [r7, #20]
 800f368:	781b      	ldrb	r3, [r3, #0]
 800f36a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f36c:	697b      	ldr	r3, [r7, #20]
 800f36e:	3301      	adds	r3, #1
 800f370:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f372:	697b      	ldr	r3, [r7, #20]
 800f374:	781b      	ldrb	r3, [r3, #0]
 800f376:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f378:	8a3b      	ldrh	r3, [r7, #16]
 800f37a:	021b      	lsls	r3, r3, #8
 800f37c:	b21a      	sxth	r2, r3
 800f37e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f382:	4313      	orrs	r3, r2
 800f384:	b21b      	sxth	r3, r3
 800f386:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f388:	89fb      	ldrh	r3, [r7, #14]
}
 800f38a:	4618      	mov	r0, r3
 800f38c:	371c      	adds	r7, #28
 800f38e:	46bd      	mov	sp, r7
 800f390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f394:	4770      	bx	lr
	...

0800f398 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f398:	b580      	push	{r7, lr}
 800f39a:	b084      	sub	sp, #16
 800f39c:	af00      	add	r7, sp, #0
 800f39e:	6078      	str	r0, [r7, #4]
 800f3a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f3a2:	2300      	movs	r3, #0
 800f3a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f3a6:	683b      	ldr	r3, [r7, #0]
 800f3a8:	781b      	ldrb	r3, [r3, #0]
 800f3aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f3ae:	2b40      	cmp	r3, #64	; 0x40
 800f3b0:	d005      	beq.n	800f3be <USBD_StdDevReq+0x26>
 800f3b2:	2b40      	cmp	r3, #64	; 0x40
 800f3b4:	d853      	bhi.n	800f45e <USBD_StdDevReq+0xc6>
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d00b      	beq.n	800f3d2 <USBD_StdDevReq+0x3a>
 800f3ba:	2b20      	cmp	r3, #32
 800f3bc:	d14f      	bne.n	800f45e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f3c4:	689b      	ldr	r3, [r3, #8]
 800f3c6:	6839      	ldr	r1, [r7, #0]
 800f3c8:	6878      	ldr	r0, [r7, #4]
 800f3ca:	4798      	blx	r3
 800f3cc:	4603      	mov	r3, r0
 800f3ce:	73fb      	strb	r3, [r7, #15]
    break;
 800f3d0:	e04a      	b.n	800f468 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800f3d2:	683b      	ldr	r3, [r7, #0]
 800f3d4:	785b      	ldrb	r3, [r3, #1]
 800f3d6:	2b09      	cmp	r3, #9
 800f3d8:	d83b      	bhi.n	800f452 <USBD_StdDevReq+0xba>
 800f3da:	a201      	add	r2, pc, #4	; (adr r2, 800f3e0 <USBD_StdDevReq+0x48>)
 800f3dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3e0:	0800f435 	.word	0x0800f435
 800f3e4:	0800f449 	.word	0x0800f449
 800f3e8:	0800f453 	.word	0x0800f453
 800f3ec:	0800f43f 	.word	0x0800f43f
 800f3f0:	0800f453 	.word	0x0800f453
 800f3f4:	0800f413 	.word	0x0800f413
 800f3f8:	0800f409 	.word	0x0800f409
 800f3fc:	0800f453 	.word	0x0800f453
 800f400:	0800f42b 	.word	0x0800f42b
 800f404:	0800f41d 	.word	0x0800f41d
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800f408:	6839      	ldr	r1, [r7, #0]
 800f40a:	6878      	ldr	r0, [r7, #4]
 800f40c:	f000 f9dc 	bl	800f7c8 <USBD_GetDescriptor>
      break;
 800f410:	e024      	b.n	800f45c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800f412:	6839      	ldr	r1, [r7, #0]
 800f414:	6878      	ldr	r0, [r7, #4]
 800f416:	f000 fb41 	bl	800fa9c <USBD_SetAddress>
      break;
 800f41a:	e01f      	b.n	800f45c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800f41c:	6839      	ldr	r1, [r7, #0]
 800f41e:	6878      	ldr	r0, [r7, #4]
 800f420:	f000 fb80 	bl	800fb24 <USBD_SetConfig>
 800f424:	4603      	mov	r3, r0
 800f426:	73fb      	strb	r3, [r7, #15]
      break;
 800f428:	e018      	b.n	800f45c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800f42a:	6839      	ldr	r1, [r7, #0]
 800f42c:	6878      	ldr	r0, [r7, #4]
 800f42e:	f000 fc1f 	bl	800fc70 <USBD_GetConfig>
      break;
 800f432:	e013      	b.n	800f45c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800f434:	6839      	ldr	r1, [r7, #0]
 800f436:	6878      	ldr	r0, [r7, #4]
 800f438:	f000 fc50 	bl	800fcdc <USBD_GetStatus>
      break;
 800f43c:	e00e      	b.n	800f45c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800f43e:	6839      	ldr	r1, [r7, #0]
 800f440:	6878      	ldr	r0, [r7, #4]
 800f442:	f000 fc7f 	bl	800fd44 <USBD_SetFeature>
      break;
 800f446:	e009      	b.n	800f45c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800f448:	6839      	ldr	r1, [r7, #0]
 800f44a:	6878      	ldr	r0, [r7, #4]
 800f44c:	f000 fc8e 	bl	800fd6c <USBD_ClrFeature>
      break;
 800f450:	e004      	b.n	800f45c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800f452:	6839      	ldr	r1, [r7, #0]
 800f454:	6878      	ldr	r0, [r7, #4]
 800f456:	f000 fce5 	bl	800fe24 <USBD_CtlError>
      break;
 800f45a:	bf00      	nop
    }
    break;
 800f45c:	e004      	b.n	800f468 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800f45e:	6839      	ldr	r1, [r7, #0]
 800f460:	6878      	ldr	r0, [r7, #4]
 800f462:	f000 fcdf 	bl	800fe24 <USBD_CtlError>
    break;
 800f466:	bf00      	nop
  }

  return ret;
 800f468:	7bfb      	ldrb	r3, [r7, #15]
}
 800f46a:	4618      	mov	r0, r3
 800f46c:	3710      	adds	r7, #16
 800f46e:	46bd      	mov	sp, r7
 800f470:	bd80      	pop	{r7, pc}
 800f472:	bf00      	nop

0800f474 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f474:	b580      	push	{r7, lr}
 800f476:	b084      	sub	sp, #16
 800f478:	af00      	add	r7, sp, #0
 800f47a:	6078      	str	r0, [r7, #4]
 800f47c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f47e:	2300      	movs	r3, #0
 800f480:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f482:	683b      	ldr	r3, [r7, #0]
 800f484:	781b      	ldrb	r3, [r3, #0]
 800f486:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f48a:	2b40      	cmp	r3, #64	; 0x40
 800f48c:	d005      	beq.n	800f49a <USBD_StdItfReq+0x26>
 800f48e:	2b40      	cmp	r3, #64	; 0x40
 800f490:	d82f      	bhi.n	800f4f2 <USBD_StdItfReq+0x7e>
 800f492:	2b00      	cmp	r3, #0
 800f494:	d001      	beq.n	800f49a <USBD_StdItfReq+0x26>
 800f496:	2b20      	cmp	r3, #32
 800f498:	d12b      	bne.n	800f4f2 <USBD_StdItfReq+0x7e>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f4a0:	b2db      	uxtb	r3, r3
 800f4a2:	3b01      	subs	r3, #1
 800f4a4:	2b02      	cmp	r3, #2
 800f4a6:	d81d      	bhi.n	800f4e4 <USBD_StdItfReq+0x70>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f4a8:	683b      	ldr	r3, [r7, #0]
 800f4aa:	889b      	ldrh	r3, [r3, #4]
 800f4ac:	b2db      	uxtb	r3, r3
 800f4ae:	2b01      	cmp	r3, #1
 800f4b0:	d813      	bhi.n	800f4da <USBD_StdItfReq+0x66>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f4b8:	689b      	ldr	r3, [r3, #8]
 800f4ba:	6839      	ldr	r1, [r7, #0]
 800f4bc:	6878      	ldr	r0, [r7, #4]
 800f4be:	4798      	blx	r3
 800f4c0:	4603      	mov	r3, r0
 800f4c2:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800f4c4:	683b      	ldr	r3, [r7, #0]
 800f4c6:	88db      	ldrh	r3, [r3, #6]
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d110      	bne.n	800f4ee <USBD_StdItfReq+0x7a>
 800f4cc:	7bfb      	ldrb	r3, [r7, #15]
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d10d      	bne.n	800f4ee <USBD_StdItfReq+0x7a>
        {
          (void)USBD_CtlSendStatus(pdev);
 800f4d2:	6878      	ldr	r0, [r7, #4]
 800f4d4:	f000 fd71 	bl	800ffba <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800f4d8:	e009      	b.n	800f4ee <USBD_StdItfReq+0x7a>
        USBD_CtlError(pdev, req);
 800f4da:	6839      	ldr	r1, [r7, #0]
 800f4dc:	6878      	ldr	r0, [r7, #4]
 800f4de:	f000 fca1 	bl	800fe24 <USBD_CtlError>
      break;
 800f4e2:	e004      	b.n	800f4ee <USBD_StdItfReq+0x7a>

    default:
      USBD_CtlError(pdev, req);
 800f4e4:	6839      	ldr	r1, [r7, #0]
 800f4e6:	6878      	ldr	r0, [r7, #4]
 800f4e8:	f000 fc9c 	bl	800fe24 <USBD_CtlError>
      break;
 800f4ec:	e000      	b.n	800f4f0 <USBD_StdItfReq+0x7c>
      break;
 800f4ee:	bf00      	nop
    }
    break;
 800f4f0:	e004      	b.n	800f4fc <USBD_StdItfReq+0x88>

  default:
    USBD_CtlError(pdev, req);
 800f4f2:	6839      	ldr	r1, [r7, #0]
 800f4f4:	6878      	ldr	r0, [r7, #4]
 800f4f6:	f000 fc95 	bl	800fe24 <USBD_CtlError>
    break;
 800f4fa:	bf00      	nop
  }

  return ret;
 800f4fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4fe:	4618      	mov	r0, r3
 800f500:	3710      	adds	r7, #16
 800f502:	46bd      	mov	sp, r7
 800f504:	bd80      	pop	{r7, pc}

0800f506 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f506:	b580      	push	{r7, lr}
 800f508:	b084      	sub	sp, #16
 800f50a:	af00      	add	r7, sp, #0
 800f50c:	6078      	str	r0, [r7, #4]
 800f50e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800f510:	2300      	movs	r3, #0
 800f512:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800f514:	683b      	ldr	r3, [r7, #0]
 800f516:	889b      	ldrh	r3, [r3, #4]
 800f518:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f51a:	683b      	ldr	r3, [r7, #0]
 800f51c:	781b      	ldrb	r3, [r3, #0]
 800f51e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f522:	2b40      	cmp	r3, #64	; 0x40
 800f524:	d007      	beq.n	800f536 <USBD_StdEPReq+0x30>
 800f526:	2b40      	cmp	r3, #64	; 0x40
 800f528:	f200 8143 	bhi.w	800f7b2 <USBD_StdEPReq+0x2ac>
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d00c      	beq.n	800f54a <USBD_StdEPReq+0x44>
 800f530:	2b20      	cmp	r3, #32
 800f532:	f040 813e 	bne.w	800f7b2 <USBD_StdEPReq+0x2ac>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f53c:	689b      	ldr	r3, [r3, #8]
 800f53e:	6839      	ldr	r1, [r7, #0]
 800f540:	6878      	ldr	r0, [r7, #4]
 800f542:	4798      	blx	r3
 800f544:	4603      	mov	r3, r0
 800f546:	73fb      	strb	r3, [r7, #15]
    break;
 800f548:	e138      	b.n	800f7bc <USBD_StdEPReq+0x2b6>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800f54a:	683b      	ldr	r3, [r7, #0]
 800f54c:	785b      	ldrb	r3, [r3, #1]
 800f54e:	2b03      	cmp	r3, #3
 800f550:	d007      	beq.n	800f562 <USBD_StdEPReq+0x5c>
 800f552:	2b03      	cmp	r3, #3
 800f554:	f300 8127 	bgt.w	800f7a6 <USBD_StdEPReq+0x2a0>
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d07d      	beq.n	800f658 <USBD_StdEPReq+0x152>
 800f55c:	2b01      	cmp	r3, #1
 800f55e:	d03c      	beq.n	800f5da <USBD_StdEPReq+0xd4>
 800f560:	e121      	b.n	800f7a6 <USBD_StdEPReq+0x2a0>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f568:	b2db      	uxtb	r3, r3
 800f56a:	2b02      	cmp	r3, #2
 800f56c:	d002      	beq.n	800f574 <USBD_StdEPReq+0x6e>
 800f56e:	2b03      	cmp	r3, #3
 800f570:	d016      	beq.n	800f5a0 <USBD_StdEPReq+0x9a>
 800f572:	e02c      	b.n	800f5ce <USBD_StdEPReq+0xc8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f574:	7bbb      	ldrb	r3, [r7, #14]
 800f576:	2b00      	cmp	r3, #0
 800f578:	d00d      	beq.n	800f596 <USBD_StdEPReq+0x90>
 800f57a:	7bbb      	ldrb	r3, [r7, #14]
 800f57c:	2b80      	cmp	r3, #128	; 0x80
 800f57e:	d00a      	beq.n	800f596 <USBD_StdEPReq+0x90>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800f580:	7bbb      	ldrb	r3, [r7, #14]
 800f582:	4619      	mov	r1, r3
 800f584:	6878      	ldr	r0, [r7, #4]
 800f586:	f001 f9b3 	bl	80108f0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f58a:	2180      	movs	r1, #128	; 0x80
 800f58c:	6878      	ldr	r0, [r7, #4]
 800f58e:	f001 f9af 	bl	80108f0 <USBD_LL_StallEP>
 800f592:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800f594:	e020      	b.n	800f5d8 <USBD_StdEPReq+0xd2>
          USBD_CtlError(pdev, req);
 800f596:	6839      	ldr	r1, [r7, #0]
 800f598:	6878      	ldr	r0, [r7, #4]
 800f59a:	f000 fc43 	bl	800fe24 <USBD_CtlError>
        break;
 800f59e:	e01b      	b.n	800f5d8 <USBD_StdEPReq+0xd2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800f5a0:	683b      	ldr	r3, [r7, #0]
 800f5a2:	885b      	ldrh	r3, [r3, #2]
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d10e      	bne.n	800f5c6 <USBD_StdEPReq+0xc0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f5a8:	7bbb      	ldrb	r3, [r7, #14]
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d00b      	beq.n	800f5c6 <USBD_StdEPReq+0xc0>
 800f5ae:	7bbb      	ldrb	r3, [r7, #14]
 800f5b0:	2b80      	cmp	r3, #128	; 0x80
 800f5b2:	d008      	beq.n	800f5c6 <USBD_StdEPReq+0xc0>
 800f5b4:	683b      	ldr	r3, [r7, #0]
 800f5b6:	88db      	ldrh	r3, [r3, #6]
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d104      	bne.n	800f5c6 <USBD_StdEPReq+0xc0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800f5bc:	7bbb      	ldrb	r3, [r7, #14]
 800f5be:	4619      	mov	r1, r3
 800f5c0:	6878      	ldr	r0, [r7, #4]
 800f5c2:	f001 f995 	bl	80108f0 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800f5c6:	6878      	ldr	r0, [r7, #4]
 800f5c8:	f000 fcf7 	bl	800ffba <USBD_CtlSendStatus>

        break;
 800f5cc:	e004      	b.n	800f5d8 <USBD_StdEPReq+0xd2>

      default:
        USBD_CtlError(pdev, req);
 800f5ce:	6839      	ldr	r1, [r7, #0]
 800f5d0:	6878      	ldr	r0, [r7, #4]
 800f5d2:	f000 fc27 	bl	800fe24 <USBD_CtlError>
        break;
 800f5d6:	bf00      	nop
      }
      break;
 800f5d8:	e0ea      	b.n	800f7b0 <USBD_StdEPReq+0x2aa>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f5e0:	b2db      	uxtb	r3, r3
 800f5e2:	2b02      	cmp	r3, #2
 800f5e4:	d002      	beq.n	800f5ec <USBD_StdEPReq+0xe6>
 800f5e6:	2b03      	cmp	r3, #3
 800f5e8:	d016      	beq.n	800f618 <USBD_StdEPReq+0x112>
 800f5ea:	e02e      	b.n	800f64a <USBD_StdEPReq+0x144>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f5ec:	7bbb      	ldrb	r3, [r7, #14]
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d00d      	beq.n	800f60e <USBD_StdEPReq+0x108>
 800f5f2:	7bbb      	ldrb	r3, [r7, #14]
 800f5f4:	2b80      	cmp	r3, #128	; 0x80
 800f5f6:	d00a      	beq.n	800f60e <USBD_StdEPReq+0x108>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800f5f8:	7bbb      	ldrb	r3, [r7, #14]
 800f5fa:	4619      	mov	r1, r3
 800f5fc:	6878      	ldr	r0, [r7, #4]
 800f5fe:	f001 f977 	bl	80108f0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f602:	2180      	movs	r1, #128	; 0x80
 800f604:	6878      	ldr	r0, [r7, #4]
 800f606:	f001 f973 	bl	80108f0 <USBD_LL_StallEP>
 800f60a:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800f60c:	e023      	b.n	800f656 <USBD_StdEPReq+0x150>
          USBD_CtlError(pdev, req);
 800f60e:	6839      	ldr	r1, [r7, #0]
 800f610:	6878      	ldr	r0, [r7, #4]
 800f612:	f000 fc07 	bl	800fe24 <USBD_CtlError>
        break;
 800f616:	e01e      	b.n	800f656 <USBD_StdEPReq+0x150>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800f618:	683b      	ldr	r3, [r7, #0]
 800f61a:	885b      	ldrh	r3, [r3, #2]
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d119      	bne.n	800f654 <USBD_StdEPReq+0x14e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800f620:	7bbb      	ldrb	r3, [r7, #14]
 800f622:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f626:	2b00      	cmp	r3, #0
 800f628:	d004      	beq.n	800f634 <USBD_StdEPReq+0x12e>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f62a:	7bbb      	ldrb	r3, [r7, #14]
 800f62c:	4619      	mov	r1, r3
 800f62e:	6878      	ldr	r0, [r7, #4]
 800f630:	f001 f97d 	bl	801092e <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800f634:	6878      	ldr	r0, [r7, #4]
 800f636:	f000 fcc0 	bl	800ffba <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f640:	689b      	ldr	r3, [r3, #8]
 800f642:	6839      	ldr	r1, [r7, #0]
 800f644:	6878      	ldr	r0, [r7, #4]
 800f646:	4798      	blx	r3
        }
        break;
 800f648:	e004      	b.n	800f654 <USBD_StdEPReq+0x14e>

      default:
        USBD_CtlError(pdev, req);
 800f64a:	6839      	ldr	r1, [r7, #0]
 800f64c:	6878      	ldr	r0, [r7, #4]
 800f64e:	f000 fbe9 	bl	800fe24 <USBD_CtlError>
        break;
 800f652:	e000      	b.n	800f656 <USBD_StdEPReq+0x150>
        break;
 800f654:	bf00      	nop
      }
      break;
 800f656:	e0ab      	b.n	800f7b0 <USBD_StdEPReq+0x2aa>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f65e:	b2db      	uxtb	r3, r3
 800f660:	2b02      	cmp	r3, #2
 800f662:	d002      	beq.n	800f66a <USBD_StdEPReq+0x164>
 800f664:	2b03      	cmp	r3, #3
 800f666:	d032      	beq.n	800f6ce <USBD_StdEPReq+0x1c8>
 800f668:	e097      	b.n	800f79a <USBD_StdEPReq+0x294>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f66a:	7bbb      	ldrb	r3, [r7, #14]
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d007      	beq.n	800f680 <USBD_StdEPReq+0x17a>
 800f670:	7bbb      	ldrb	r3, [r7, #14]
 800f672:	2b80      	cmp	r3, #128	; 0x80
 800f674:	d004      	beq.n	800f680 <USBD_StdEPReq+0x17a>
        {
          USBD_CtlError(pdev, req);
 800f676:	6839      	ldr	r1, [r7, #0]
 800f678:	6878      	ldr	r0, [r7, #4]
 800f67a:	f000 fbd3 	bl	800fe24 <USBD_CtlError>
          break;
 800f67e:	e091      	b.n	800f7a4 <USBD_StdEPReq+0x29e>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f680:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f684:	2b00      	cmp	r3, #0
 800f686:	da0b      	bge.n	800f6a0 <USBD_StdEPReq+0x19a>
 800f688:	7bbb      	ldrb	r3, [r7, #14]
 800f68a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f68e:	4613      	mov	r3, r2
 800f690:	009b      	lsls	r3, r3, #2
 800f692:	4413      	add	r3, r2
 800f694:	009b      	lsls	r3, r3, #2
 800f696:	3310      	adds	r3, #16
 800f698:	687a      	ldr	r2, [r7, #4]
 800f69a:	4413      	add	r3, r2
 800f69c:	3304      	adds	r3, #4
 800f69e:	e00b      	b.n	800f6b8 <USBD_StdEPReq+0x1b2>
              &pdev->ep_out[ep_addr & 0x7FU];
 800f6a0:	7bbb      	ldrb	r3, [r7, #14]
 800f6a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f6a6:	4613      	mov	r3, r2
 800f6a8:	009b      	lsls	r3, r3, #2
 800f6aa:	4413      	add	r3, r2
 800f6ac:	009b      	lsls	r3, r3, #2
 800f6ae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f6b2:	687a      	ldr	r2, [r7, #4]
 800f6b4:	4413      	add	r3, r2
 800f6b6:	3304      	adds	r3, #4
 800f6b8:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800f6ba:	68bb      	ldr	r3, [r7, #8]
 800f6bc:	2200      	movs	r2, #0
 800f6be:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f6c0:	68bb      	ldr	r3, [r7, #8]
 800f6c2:	2202      	movs	r2, #2
 800f6c4:	4619      	mov	r1, r3
 800f6c6:	6878      	ldr	r0, [r7, #4]
 800f6c8:	f000 fc1d 	bl	800ff06 <USBD_CtlSendData>
        break;
 800f6cc:	e06a      	b.n	800f7a4 <USBD_StdEPReq+0x29e>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800f6ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	da11      	bge.n	800f6fa <USBD_StdEPReq+0x1f4>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f6d6:	7bbb      	ldrb	r3, [r7, #14]
 800f6d8:	f003 020f 	and.w	r2, r3, #15
 800f6dc:	6879      	ldr	r1, [r7, #4]
 800f6de:	4613      	mov	r3, r2
 800f6e0:	009b      	lsls	r3, r3, #2
 800f6e2:	4413      	add	r3, r2
 800f6e4:	009b      	lsls	r3, r3, #2
 800f6e6:	440b      	add	r3, r1
 800f6e8:	3324      	adds	r3, #36	; 0x24
 800f6ea:	881b      	ldrh	r3, [r3, #0]
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d117      	bne.n	800f720 <USBD_StdEPReq+0x21a>
          {
            USBD_CtlError(pdev, req);
 800f6f0:	6839      	ldr	r1, [r7, #0]
 800f6f2:	6878      	ldr	r0, [r7, #4]
 800f6f4:	f000 fb96 	bl	800fe24 <USBD_CtlError>
            break;
 800f6f8:	e054      	b.n	800f7a4 <USBD_StdEPReq+0x29e>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f6fa:	7bbb      	ldrb	r3, [r7, #14]
 800f6fc:	f003 020f 	and.w	r2, r3, #15
 800f700:	6879      	ldr	r1, [r7, #4]
 800f702:	4613      	mov	r3, r2
 800f704:	009b      	lsls	r3, r3, #2
 800f706:	4413      	add	r3, r2
 800f708:	009b      	lsls	r3, r3, #2
 800f70a:	440b      	add	r3, r1
 800f70c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800f710:	881b      	ldrh	r3, [r3, #0]
 800f712:	2b00      	cmp	r3, #0
 800f714:	d104      	bne.n	800f720 <USBD_StdEPReq+0x21a>
          {
            USBD_CtlError(pdev, req);
 800f716:	6839      	ldr	r1, [r7, #0]
 800f718:	6878      	ldr	r0, [r7, #4]
 800f71a:	f000 fb83 	bl	800fe24 <USBD_CtlError>
            break;
 800f71e:	e041      	b.n	800f7a4 <USBD_StdEPReq+0x29e>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f720:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f724:	2b00      	cmp	r3, #0
 800f726:	da0b      	bge.n	800f740 <USBD_StdEPReq+0x23a>
 800f728:	7bbb      	ldrb	r3, [r7, #14]
 800f72a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f72e:	4613      	mov	r3, r2
 800f730:	009b      	lsls	r3, r3, #2
 800f732:	4413      	add	r3, r2
 800f734:	009b      	lsls	r3, r3, #2
 800f736:	3310      	adds	r3, #16
 800f738:	687a      	ldr	r2, [r7, #4]
 800f73a:	4413      	add	r3, r2
 800f73c:	3304      	adds	r3, #4
 800f73e:	e00b      	b.n	800f758 <USBD_StdEPReq+0x252>
              &pdev->ep_out[ep_addr & 0x7FU];
 800f740:	7bbb      	ldrb	r3, [r7, #14]
 800f742:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f746:	4613      	mov	r3, r2
 800f748:	009b      	lsls	r3, r3, #2
 800f74a:	4413      	add	r3, r2
 800f74c:	009b      	lsls	r3, r3, #2
 800f74e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f752:	687a      	ldr	r2, [r7, #4]
 800f754:	4413      	add	r3, r2
 800f756:	3304      	adds	r3, #4
 800f758:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f75a:	7bbb      	ldrb	r3, [r7, #14]
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d002      	beq.n	800f766 <USBD_StdEPReq+0x260>
 800f760:	7bbb      	ldrb	r3, [r7, #14]
 800f762:	2b80      	cmp	r3, #128	; 0x80
 800f764:	d103      	bne.n	800f76e <USBD_StdEPReq+0x268>
          {
            pep->status = 0x0000U;
 800f766:	68bb      	ldr	r3, [r7, #8]
 800f768:	2200      	movs	r2, #0
 800f76a:	601a      	str	r2, [r3, #0]
 800f76c:	e00e      	b.n	800f78c <USBD_StdEPReq+0x286>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f76e:	7bbb      	ldrb	r3, [r7, #14]
 800f770:	4619      	mov	r1, r3
 800f772:	6878      	ldr	r0, [r7, #4]
 800f774:	f001 f8fa 	bl	801096c <USBD_LL_IsStallEP>
 800f778:	4603      	mov	r3, r0
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d003      	beq.n	800f786 <USBD_StdEPReq+0x280>
          {
            pep->status = 0x0001U;
 800f77e:	68bb      	ldr	r3, [r7, #8]
 800f780:	2201      	movs	r2, #1
 800f782:	601a      	str	r2, [r3, #0]
 800f784:	e002      	b.n	800f78c <USBD_StdEPReq+0x286>
          }
          else
          {
            pep->status = 0x0000U;
 800f786:	68bb      	ldr	r3, [r7, #8]
 800f788:	2200      	movs	r2, #0
 800f78a:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f78c:	68bb      	ldr	r3, [r7, #8]
 800f78e:	2202      	movs	r2, #2
 800f790:	4619      	mov	r1, r3
 800f792:	6878      	ldr	r0, [r7, #4]
 800f794:	f000 fbb7 	bl	800ff06 <USBD_CtlSendData>
          break;
 800f798:	e004      	b.n	800f7a4 <USBD_StdEPReq+0x29e>

      default:
        USBD_CtlError(pdev, req);
 800f79a:	6839      	ldr	r1, [r7, #0]
 800f79c:	6878      	ldr	r0, [r7, #4]
 800f79e:	f000 fb41 	bl	800fe24 <USBD_CtlError>
        break;
 800f7a2:	bf00      	nop
      }
      break;
 800f7a4:	e004      	b.n	800f7b0 <USBD_StdEPReq+0x2aa>

    default:
      USBD_CtlError(pdev, req);
 800f7a6:	6839      	ldr	r1, [r7, #0]
 800f7a8:	6878      	ldr	r0, [r7, #4]
 800f7aa:	f000 fb3b 	bl	800fe24 <USBD_CtlError>
      break;
 800f7ae:	bf00      	nop
    }
    break;
 800f7b0:	e004      	b.n	800f7bc <USBD_StdEPReq+0x2b6>

  default:
    USBD_CtlError(pdev, req);
 800f7b2:	6839      	ldr	r1, [r7, #0]
 800f7b4:	6878      	ldr	r0, [r7, #4]
 800f7b6:	f000 fb35 	bl	800fe24 <USBD_CtlError>
    break;
 800f7ba:	bf00      	nop
  }

  return ret;
 800f7bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7be:	4618      	mov	r0, r3
 800f7c0:	3710      	adds	r7, #16
 800f7c2:	46bd      	mov	sp, r7
 800f7c4:	bd80      	pop	{r7, pc}
	...

0800f7c8 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f7c8:	b580      	push	{r7, lr}
 800f7ca:	b084      	sub	sp, #16
 800f7cc:	af00      	add	r7, sp, #0
 800f7ce:	6078      	str	r0, [r7, #4]
 800f7d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f7d2:	2300      	movs	r3, #0
 800f7d4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f7d6:	2300      	movs	r3, #0
 800f7d8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f7da:	2300      	movs	r3, #0
 800f7dc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f7de:	683b      	ldr	r3, [r7, #0]
 800f7e0:	885b      	ldrh	r3, [r3, #2]
 800f7e2:	0a1b      	lsrs	r3, r3, #8
 800f7e4:	b29b      	uxth	r3, r3
 800f7e6:	3b01      	subs	r3, #1
 800f7e8:	2b06      	cmp	r3, #6
 800f7ea:	f200 8128 	bhi.w	800fa3e <USBD_GetDescriptor+0x276>
 800f7ee:	a201      	add	r2, pc, #4	; (adr r2, 800f7f4 <USBD_GetDescriptor+0x2c>)
 800f7f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7f4:	0800f811 	.word	0x0800f811
 800f7f8:	0800f829 	.word	0x0800f829
 800f7fc:	0800f869 	.word	0x0800f869
 800f800:	0800fa3f 	.word	0x0800fa3f
 800f804:	0800fa3f 	.word	0x0800fa3f
 800f808:	0800f9df 	.word	0x0800f9df
 800f80c:	0800fa0b 	.word	0x0800fa0b
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	687a      	ldr	r2, [r7, #4]
 800f81a:	7c12      	ldrb	r2, [r2, #16]
 800f81c:	f107 0108 	add.w	r1, r7, #8
 800f820:	4610      	mov	r0, r2
 800f822:	4798      	blx	r3
 800f824:	60f8      	str	r0, [r7, #12]
    break;
 800f826:	e112      	b.n	800fa4e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	7c1b      	ldrb	r3, [r3, #16]
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d10d      	bne.n	800f84c <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f838:	f107 0208 	add.w	r2, r7, #8
 800f83c:	4610      	mov	r0, r2
 800f83e:	4798      	blx	r3
 800f840:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	3301      	adds	r3, #1
 800f846:	2202      	movs	r2, #2
 800f848:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800f84a:	e100      	b.n	800fa4e <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f854:	f107 0208 	add.w	r2, r7, #8
 800f858:	4610      	mov	r0, r2
 800f85a:	4798      	blx	r3
 800f85c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	3301      	adds	r3, #1
 800f862:	2202      	movs	r2, #2
 800f864:	701a      	strb	r2, [r3, #0]
    break;
 800f866:	e0f2      	b.n	800fa4e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800f868:	683b      	ldr	r3, [r7, #0]
 800f86a:	885b      	ldrh	r3, [r3, #2]
 800f86c:	b2db      	uxtb	r3, r3
 800f86e:	2b05      	cmp	r3, #5
 800f870:	f200 80ac 	bhi.w	800f9cc <USBD_GetDescriptor+0x204>
 800f874:	a201      	add	r2, pc, #4	; (adr r2, 800f87c <USBD_GetDescriptor+0xb4>)
 800f876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f87a:	bf00      	nop
 800f87c:	0800f895 	.word	0x0800f895
 800f880:	0800f8c9 	.word	0x0800f8c9
 800f884:	0800f8fd 	.word	0x0800f8fd
 800f888:	0800f931 	.word	0x0800f931
 800f88c:	0800f965 	.word	0x0800f965
 800f890:	0800f999 	.word	0x0800f999
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f89a:	685b      	ldr	r3, [r3, #4]
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d00b      	beq.n	800f8b8 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f8a6:	685b      	ldr	r3, [r3, #4]
 800f8a8:	687a      	ldr	r2, [r7, #4]
 800f8aa:	7c12      	ldrb	r2, [r2, #16]
 800f8ac:	f107 0108 	add.w	r1, r7, #8
 800f8b0:	4610      	mov	r0, r2
 800f8b2:	4798      	blx	r3
 800f8b4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f8b6:	e091      	b.n	800f9dc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f8b8:	6839      	ldr	r1, [r7, #0]
 800f8ba:	6878      	ldr	r0, [r7, #4]
 800f8bc:	f000 fab2 	bl	800fe24 <USBD_CtlError>
        err++;
 800f8c0:	7afb      	ldrb	r3, [r7, #11]
 800f8c2:	3301      	adds	r3, #1
 800f8c4:	72fb      	strb	r3, [r7, #11]
      break;
 800f8c6:	e089      	b.n	800f9dc <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f8ce:	689b      	ldr	r3, [r3, #8]
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d00b      	beq.n	800f8ec <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f8da:	689b      	ldr	r3, [r3, #8]
 800f8dc:	687a      	ldr	r2, [r7, #4]
 800f8de:	7c12      	ldrb	r2, [r2, #16]
 800f8e0:	f107 0108 	add.w	r1, r7, #8
 800f8e4:	4610      	mov	r0, r2
 800f8e6:	4798      	blx	r3
 800f8e8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f8ea:	e077      	b.n	800f9dc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f8ec:	6839      	ldr	r1, [r7, #0]
 800f8ee:	6878      	ldr	r0, [r7, #4]
 800f8f0:	f000 fa98 	bl	800fe24 <USBD_CtlError>
        err++;
 800f8f4:	7afb      	ldrb	r3, [r7, #11]
 800f8f6:	3301      	adds	r3, #1
 800f8f8:	72fb      	strb	r3, [r7, #11]
      break;
 800f8fa:	e06f      	b.n	800f9dc <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f902:	68db      	ldr	r3, [r3, #12]
 800f904:	2b00      	cmp	r3, #0
 800f906:	d00b      	beq.n	800f920 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f90e:	68db      	ldr	r3, [r3, #12]
 800f910:	687a      	ldr	r2, [r7, #4]
 800f912:	7c12      	ldrb	r2, [r2, #16]
 800f914:	f107 0108 	add.w	r1, r7, #8
 800f918:	4610      	mov	r0, r2
 800f91a:	4798      	blx	r3
 800f91c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f91e:	e05d      	b.n	800f9dc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f920:	6839      	ldr	r1, [r7, #0]
 800f922:	6878      	ldr	r0, [r7, #4]
 800f924:	f000 fa7e 	bl	800fe24 <USBD_CtlError>
        err++;
 800f928:	7afb      	ldrb	r3, [r7, #11]
 800f92a:	3301      	adds	r3, #1
 800f92c:	72fb      	strb	r3, [r7, #11]
      break;
 800f92e:	e055      	b.n	800f9dc <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f936:	691b      	ldr	r3, [r3, #16]
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d00b      	beq.n	800f954 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f942:	691b      	ldr	r3, [r3, #16]
 800f944:	687a      	ldr	r2, [r7, #4]
 800f946:	7c12      	ldrb	r2, [r2, #16]
 800f948:	f107 0108 	add.w	r1, r7, #8
 800f94c:	4610      	mov	r0, r2
 800f94e:	4798      	blx	r3
 800f950:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f952:	e043      	b.n	800f9dc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f954:	6839      	ldr	r1, [r7, #0]
 800f956:	6878      	ldr	r0, [r7, #4]
 800f958:	f000 fa64 	bl	800fe24 <USBD_CtlError>
        err++;
 800f95c:	7afb      	ldrb	r3, [r7, #11]
 800f95e:	3301      	adds	r3, #1
 800f960:	72fb      	strb	r3, [r7, #11]
      break;
 800f962:	e03b      	b.n	800f9dc <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f96a:	695b      	ldr	r3, [r3, #20]
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d00b      	beq.n	800f988 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f976:	695b      	ldr	r3, [r3, #20]
 800f978:	687a      	ldr	r2, [r7, #4]
 800f97a:	7c12      	ldrb	r2, [r2, #16]
 800f97c:	f107 0108 	add.w	r1, r7, #8
 800f980:	4610      	mov	r0, r2
 800f982:	4798      	blx	r3
 800f984:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f986:	e029      	b.n	800f9dc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f988:	6839      	ldr	r1, [r7, #0]
 800f98a:	6878      	ldr	r0, [r7, #4]
 800f98c:	f000 fa4a 	bl	800fe24 <USBD_CtlError>
        err++;
 800f990:	7afb      	ldrb	r3, [r7, #11]
 800f992:	3301      	adds	r3, #1
 800f994:	72fb      	strb	r3, [r7, #11]
      break;
 800f996:	e021      	b.n	800f9dc <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f99e:	699b      	ldr	r3, [r3, #24]
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d00b      	beq.n	800f9bc <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f9aa:	699b      	ldr	r3, [r3, #24]
 800f9ac:	687a      	ldr	r2, [r7, #4]
 800f9ae:	7c12      	ldrb	r2, [r2, #16]
 800f9b0:	f107 0108 	add.w	r1, r7, #8
 800f9b4:	4610      	mov	r0, r2
 800f9b6:	4798      	blx	r3
 800f9b8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f9ba:	e00f      	b.n	800f9dc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f9bc:	6839      	ldr	r1, [r7, #0]
 800f9be:	6878      	ldr	r0, [r7, #4]
 800f9c0:	f000 fa30 	bl	800fe24 <USBD_CtlError>
        err++;
 800f9c4:	7afb      	ldrb	r3, [r7, #11]
 800f9c6:	3301      	adds	r3, #1
 800f9c8:	72fb      	strb	r3, [r7, #11]
      break;
 800f9ca:	e007      	b.n	800f9dc <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800f9cc:	6839      	ldr	r1, [r7, #0]
 800f9ce:	6878      	ldr	r0, [r7, #4]
 800f9d0:	f000 fa28 	bl	800fe24 <USBD_CtlError>
      err++;
 800f9d4:	7afb      	ldrb	r3, [r7, #11]
 800f9d6:	3301      	adds	r3, #1
 800f9d8:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800f9da:	bf00      	nop
    }
    break;
 800f9dc:	e037      	b.n	800fa4e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	7c1b      	ldrb	r3, [r3, #16]
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d109      	bne.n	800f9fa <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f9ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f9ee:	f107 0208 	add.w	r2, r7, #8
 800f9f2:	4610      	mov	r0, r2
 800f9f4:	4798      	blx	r3
 800f9f6:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800f9f8:	e029      	b.n	800fa4e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800f9fa:	6839      	ldr	r1, [r7, #0]
 800f9fc:	6878      	ldr	r0, [r7, #4]
 800f9fe:	f000 fa11 	bl	800fe24 <USBD_CtlError>
      err++;
 800fa02:	7afb      	ldrb	r3, [r7, #11]
 800fa04:	3301      	adds	r3, #1
 800fa06:	72fb      	strb	r3, [r7, #11]
    break;
 800fa08:	e021      	b.n	800fa4e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	7c1b      	ldrb	r3, [r3, #16]
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d10d      	bne.n	800fa2e <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa1a:	f107 0208 	add.w	r2, r7, #8
 800fa1e:	4610      	mov	r0, r2
 800fa20:	4798      	blx	r3
 800fa22:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	3301      	adds	r3, #1
 800fa28:	2207      	movs	r2, #7
 800fa2a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800fa2c:	e00f      	b.n	800fa4e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800fa2e:	6839      	ldr	r1, [r7, #0]
 800fa30:	6878      	ldr	r0, [r7, #4]
 800fa32:	f000 f9f7 	bl	800fe24 <USBD_CtlError>
      err++;
 800fa36:	7afb      	ldrb	r3, [r7, #11]
 800fa38:	3301      	adds	r3, #1
 800fa3a:	72fb      	strb	r3, [r7, #11]
    break;
 800fa3c:	e007      	b.n	800fa4e <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800fa3e:	6839      	ldr	r1, [r7, #0]
 800fa40:	6878      	ldr	r0, [r7, #4]
 800fa42:	f000 f9ef 	bl	800fe24 <USBD_CtlError>
    err++;
 800fa46:	7afb      	ldrb	r3, [r7, #11]
 800fa48:	3301      	adds	r3, #1
 800fa4a:	72fb      	strb	r3, [r7, #11]
    break;
 800fa4c:	bf00      	nop
  }

  if (err != 0U)
 800fa4e:	7afb      	ldrb	r3, [r7, #11]
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d11e      	bne.n	800fa92 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800fa54:	683b      	ldr	r3, [r7, #0]
 800fa56:	88db      	ldrh	r3, [r3, #6]
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d016      	beq.n	800fa8a <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800fa5c:	893b      	ldrh	r3, [r7, #8]
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d00e      	beq.n	800fa80 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800fa62:	683b      	ldr	r3, [r7, #0]
 800fa64:	88da      	ldrh	r2, [r3, #6]
 800fa66:	893b      	ldrh	r3, [r7, #8]
 800fa68:	4293      	cmp	r3, r2
 800fa6a:	bf28      	it	cs
 800fa6c:	4613      	movcs	r3, r2
 800fa6e:	b29b      	uxth	r3, r3
 800fa70:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800fa72:	893b      	ldrh	r3, [r7, #8]
 800fa74:	461a      	mov	r2, r3
 800fa76:	68f9      	ldr	r1, [r7, #12]
 800fa78:	6878      	ldr	r0, [r7, #4]
 800fa7a:	f000 fa44 	bl	800ff06 <USBD_CtlSendData>
 800fa7e:	e009      	b.n	800fa94 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800fa80:	6839      	ldr	r1, [r7, #0]
 800fa82:	6878      	ldr	r0, [r7, #4]
 800fa84:	f000 f9ce 	bl	800fe24 <USBD_CtlError>
 800fa88:	e004      	b.n	800fa94 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800fa8a:	6878      	ldr	r0, [r7, #4]
 800fa8c:	f000 fa95 	bl	800ffba <USBD_CtlSendStatus>
 800fa90:	e000      	b.n	800fa94 <USBD_GetDescriptor+0x2cc>
    return;
 800fa92:	bf00      	nop
    }
  }
}
 800fa94:	3710      	adds	r7, #16
 800fa96:	46bd      	mov	sp, r7
 800fa98:	bd80      	pop	{r7, pc}
 800fa9a:	bf00      	nop

0800fa9c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fa9c:	b580      	push	{r7, lr}
 800fa9e:	b084      	sub	sp, #16
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	6078      	str	r0, [r7, #4]
 800faa4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800faa6:	683b      	ldr	r3, [r7, #0]
 800faa8:	889b      	ldrh	r3, [r3, #4]
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d131      	bne.n	800fb12 <USBD_SetAddress+0x76>
 800faae:	683b      	ldr	r3, [r7, #0]
 800fab0:	88db      	ldrh	r3, [r3, #6]
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d12d      	bne.n	800fb12 <USBD_SetAddress+0x76>
 800fab6:	683b      	ldr	r3, [r7, #0]
 800fab8:	885b      	ldrh	r3, [r3, #2]
 800faba:	2b7f      	cmp	r3, #127	; 0x7f
 800fabc:	d829      	bhi.n	800fb12 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800fabe:	683b      	ldr	r3, [r7, #0]
 800fac0:	885b      	ldrh	r3, [r3, #2]
 800fac2:	b2db      	uxtb	r3, r3
 800fac4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fac8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fad0:	b2db      	uxtb	r3, r3
 800fad2:	2b03      	cmp	r3, #3
 800fad4:	d104      	bne.n	800fae0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800fad6:	6839      	ldr	r1, [r7, #0]
 800fad8:	6878      	ldr	r0, [r7, #4]
 800fada:	f000 f9a3 	bl	800fe24 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fade:	e01d      	b.n	800fb1c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	7bfa      	ldrb	r2, [r7, #15]
 800fae4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800fae8:	7bfb      	ldrb	r3, [r7, #15]
 800faea:	4619      	mov	r1, r3
 800faec:	6878      	ldr	r0, [r7, #4]
 800faee:	f000 ff69 	bl	80109c4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800faf2:	6878      	ldr	r0, [r7, #4]
 800faf4:	f000 fa61 	bl	800ffba <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800faf8:	7bfb      	ldrb	r3, [r7, #15]
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d004      	beq.n	800fb08 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	2202      	movs	r2, #2
 800fb02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fb06:	e009      	b.n	800fb1c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	2201      	movs	r2, #1
 800fb0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fb10:	e004      	b.n	800fb1c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800fb12:	6839      	ldr	r1, [r7, #0]
 800fb14:	6878      	ldr	r0, [r7, #4]
 800fb16:	f000 f985 	bl	800fe24 <USBD_CtlError>
  }
}
 800fb1a:	bf00      	nop
 800fb1c:	bf00      	nop
 800fb1e:	3710      	adds	r7, #16
 800fb20:	46bd      	mov	sp, r7
 800fb22:	bd80      	pop	{r7, pc}

0800fb24 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fb24:	b580      	push	{r7, lr}
 800fb26:	b084      	sub	sp, #16
 800fb28:	af00      	add	r7, sp, #0
 800fb2a:	6078      	str	r0, [r7, #4]
 800fb2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fb2e:	2300      	movs	r3, #0
 800fb30:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800fb32:	683b      	ldr	r3, [r7, #0]
 800fb34:	885b      	ldrh	r3, [r3, #2]
 800fb36:	b2da      	uxtb	r2, r3
 800fb38:	4b4c      	ldr	r3, [pc, #304]	; (800fc6c <USBD_SetConfig+0x148>)
 800fb3a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800fb3c:	4b4b      	ldr	r3, [pc, #300]	; (800fc6c <USBD_SetConfig+0x148>)
 800fb3e:	781b      	ldrb	r3, [r3, #0]
 800fb40:	2b01      	cmp	r3, #1
 800fb42:	d905      	bls.n	800fb50 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800fb44:	6839      	ldr	r1, [r7, #0]
 800fb46:	6878      	ldr	r0, [r7, #4]
 800fb48:	f000 f96c 	bl	800fe24 <USBD_CtlError>
    return USBD_FAIL;
 800fb4c:	2303      	movs	r3, #3
 800fb4e:	e088      	b.n	800fc62 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fb56:	b2db      	uxtb	r3, r3
 800fb58:	2b02      	cmp	r3, #2
 800fb5a:	d002      	beq.n	800fb62 <USBD_SetConfig+0x3e>
 800fb5c:	2b03      	cmp	r3, #3
 800fb5e:	d025      	beq.n	800fbac <USBD_SetConfig+0x88>
 800fb60:	e071      	b.n	800fc46 <USBD_SetConfig+0x122>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800fb62:	4b42      	ldr	r3, [pc, #264]	; (800fc6c <USBD_SetConfig+0x148>)
 800fb64:	781b      	ldrb	r3, [r3, #0]
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d01c      	beq.n	800fba4 <USBD_SetConfig+0x80>
    {
      pdev->dev_config = cfgidx;
 800fb6a:	4b40      	ldr	r3, [pc, #256]	; (800fc6c <USBD_SetConfig+0x148>)
 800fb6c:	781b      	ldrb	r3, [r3, #0]
 800fb6e:	461a      	mov	r2, r3
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800fb74:	4b3d      	ldr	r3, [pc, #244]	; (800fc6c <USBD_SetConfig+0x148>)
 800fb76:	781b      	ldrb	r3, [r3, #0]
 800fb78:	4619      	mov	r1, r3
 800fb7a:	6878      	ldr	r0, [r7, #4]
 800fb7c:	f7ff f98c 	bl	800ee98 <USBD_SetClassConfig>
 800fb80:	4603      	mov	r3, r0
 800fb82:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800fb84:	7bfb      	ldrb	r3, [r7, #15]
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d004      	beq.n	800fb94 <USBD_SetConfig+0x70>
      {
        USBD_CtlError(pdev, req);
 800fb8a:	6839      	ldr	r1, [r7, #0]
 800fb8c:	6878      	ldr	r0, [r7, #4]
 800fb8e:	f000 f949 	bl	800fe24 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800fb92:	e065      	b.n	800fc60 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800fb94:	6878      	ldr	r0, [r7, #4]
 800fb96:	f000 fa10 	bl	800ffba <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	2203      	movs	r2, #3
 800fb9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800fba2:	e05d      	b.n	800fc60 <USBD_SetConfig+0x13c>
      (void)USBD_CtlSendStatus(pdev);
 800fba4:	6878      	ldr	r0, [r7, #4]
 800fba6:	f000 fa08 	bl	800ffba <USBD_CtlSendStatus>
    break;
 800fbaa:	e059      	b.n	800fc60 <USBD_SetConfig+0x13c>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800fbac:	4b2f      	ldr	r3, [pc, #188]	; (800fc6c <USBD_SetConfig+0x148>)
 800fbae:	781b      	ldrb	r3, [r3, #0]
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d112      	bne.n	800fbda <USBD_SetConfig+0xb6>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	2202      	movs	r2, #2
 800fbb8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800fbbc:	4b2b      	ldr	r3, [pc, #172]	; (800fc6c <USBD_SetConfig+0x148>)
 800fbbe:	781b      	ldrb	r3, [r3, #0]
 800fbc0:	461a      	mov	r2, r3
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fbc6:	4b29      	ldr	r3, [pc, #164]	; (800fc6c <USBD_SetConfig+0x148>)
 800fbc8:	781b      	ldrb	r3, [r3, #0]
 800fbca:	4619      	mov	r1, r3
 800fbcc:	6878      	ldr	r0, [r7, #4]
 800fbce:	f7ff f97f 	bl	800eed0 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800fbd2:	6878      	ldr	r0, [r7, #4]
 800fbd4:	f000 f9f1 	bl	800ffba <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800fbd8:	e042      	b.n	800fc60 <USBD_SetConfig+0x13c>
    else if (cfgidx != pdev->dev_config)
 800fbda:	4b24      	ldr	r3, [pc, #144]	; (800fc6c <USBD_SetConfig+0x148>)
 800fbdc:	781b      	ldrb	r3, [r3, #0]
 800fbde:	461a      	mov	r2, r3
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	685b      	ldr	r3, [r3, #4]
 800fbe4:	429a      	cmp	r2, r3
 800fbe6:	d02a      	beq.n	800fc3e <USBD_SetConfig+0x11a>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	685b      	ldr	r3, [r3, #4]
 800fbec:	b2db      	uxtb	r3, r3
 800fbee:	4619      	mov	r1, r3
 800fbf0:	6878      	ldr	r0, [r7, #4]
 800fbf2:	f7ff f96d 	bl	800eed0 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800fbf6:	4b1d      	ldr	r3, [pc, #116]	; (800fc6c <USBD_SetConfig+0x148>)
 800fbf8:	781b      	ldrb	r3, [r3, #0]
 800fbfa:	461a      	mov	r2, r3
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800fc00:	4b1a      	ldr	r3, [pc, #104]	; (800fc6c <USBD_SetConfig+0x148>)
 800fc02:	781b      	ldrb	r3, [r3, #0]
 800fc04:	4619      	mov	r1, r3
 800fc06:	6878      	ldr	r0, [r7, #4]
 800fc08:	f7ff f946 	bl	800ee98 <USBD_SetClassConfig>
 800fc0c:	4603      	mov	r3, r0
 800fc0e:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800fc10:	7bfb      	ldrb	r3, [r7, #15]
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d00f      	beq.n	800fc36 <USBD_SetConfig+0x112>
        USBD_CtlError(pdev, req);
 800fc16:	6839      	ldr	r1, [r7, #0]
 800fc18:	6878      	ldr	r0, [r7, #4]
 800fc1a:	f000 f903 	bl	800fe24 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	685b      	ldr	r3, [r3, #4]
 800fc22:	b2db      	uxtb	r3, r3
 800fc24:	4619      	mov	r1, r3
 800fc26:	6878      	ldr	r0, [r7, #4]
 800fc28:	f7ff f952 	bl	800eed0 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	2202      	movs	r2, #2
 800fc30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800fc34:	e014      	b.n	800fc60 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800fc36:	6878      	ldr	r0, [r7, #4]
 800fc38:	f000 f9bf 	bl	800ffba <USBD_CtlSendStatus>
    break;
 800fc3c:	e010      	b.n	800fc60 <USBD_SetConfig+0x13c>
      (void)USBD_CtlSendStatus(pdev);
 800fc3e:	6878      	ldr	r0, [r7, #4]
 800fc40:	f000 f9bb 	bl	800ffba <USBD_CtlSendStatus>
    break;
 800fc44:	e00c      	b.n	800fc60 <USBD_SetConfig+0x13c>

  default:
    USBD_CtlError(pdev, req);
 800fc46:	6839      	ldr	r1, [r7, #0]
 800fc48:	6878      	ldr	r0, [r7, #4]
 800fc4a:	f000 f8eb 	bl	800fe24 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fc4e:	4b07      	ldr	r3, [pc, #28]	; (800fc6c <USBD_SetConfig+0x148>)
 800fc50:	781b      	ldrb	r3, [r3, #0]
 800fc52:	4619      	mov	r1, r3
 800fc54:	6878      	ldr	r0, [r7, #4]
 800fc56:	f7ff f93b 	bl	800eed0 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800fc5a:	2303      	movs	r3, #3
 800fc5c:	73fb      	strb	r3, [r7, #15]
    break;
 800fc5e:	bf00      	nop
  }

  return ret;
 800fc60:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc62:	4618      	mov	r0, r3
 800fc64:	3710      	adds	r7, #16
 800fc66:	46bd      	mov	sp, r7
 800fc68:	bd80      	pop	{r7, pc}
 800fc6a:	bf00      	nop
 800fc6c:	24001760 	.word	0x24001760

0800fc70 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fc70:	b580      	push	{r7, lr}
 800fc72:	b082      	sub	sp, #8
 800fc74:	af00      	add	r7, sp, #0
 800fc76:	6078      	str	r0, [r7, #4]
 800fc78:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800fc7a:	683b      	ldr	r3, [r7, #0]
 800fc7c:	88db      	ldrh	r3, [r3, #6]
 800fc7e:	2b01      	cmp	r3, #1
 800fc80:	d004      	beq.n	800fc8c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800fc82:	6839      	ldr	r1, [r7, #0]
 800fc84:	6878      	ldr	r0, [r7, #4]
 800fc86:	f000 f8cd 	bl	800fe24 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800fc8a:	e023      	b.n	800fcd4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fc92:	b2db      	uxtb	r3, r3
 800fc94:	2b02      	cmp	r3, #2
 800fc96:	dc02      	bgt.n	800fc9e <USBD_GetConfig+0x2e>
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	dc03      	bgt.n	800fca4 <USBD_GetConfig+0x34>
 800fc9c:	e015      	b.n	800fcca <USBD_GetConfig+0x5a>
 800fc9e:	2b03      	cmp	r3, #3
 800fca0:	d00b      	beq.n	800fcba <USBD_GetConfig+0x4a>
 800fca2:	e012      	b.n	800fcca <USBD_GetConfig+0x5a>
      pdev->dev_default_config = 0U;
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	2200      	movs	r2, #0
 800fca8:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	3308      	adds	r3, #8
 800fcae:	2201      	movs	r2, #1
 800fcb0:	4619      	mov	r1, r3
 800fcb2:	6878      	ldr	r0, [r7, #4]
 800fcb4:	f000 f927 	bl	800ff06 <USBD_CtlSendData>
      break;
 800fcb8:	e00c      	b.n	800fcd4 <USBD_GetConfig+0x64>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	3304      	adds	r3, #4
 800fcbe:	2201      	movs	r2, #1
 800fcc0:	4619      	mov	r1, r3
 800fcc2:	6878      	ldr	r0, [r7, #4]
 800fcc4:	f000 f91f 	bl	800ff06 <USBD_CtlSendData>
      break;
 800fcc8:	e004      	b.n	800fcd4 <USBD_GetConfig+0x64>
      USBD_CtlError(pdev, req);
 800fcca:	6839      	ldr	r1, [r7, #0]
 800fccc:	6878      	ldr	r0, [r7, #4]
 800fcce:	f000 f8a9 	bl	800fe24 <USBD_CtlError>
      break;
 800fcd2:	bf00      	nop
}
 800fcd4:	bf00      	nop
 800fcd6:	3708      	adds	r7, #8
 800fcd8:	46bd      	mov	sp, r7
 800fcda:	bd80      	pop	{r7, pc}

0800fcdc <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fcdc:	b580      	push	{r7, lr}
 800fcde:	b082      	sub	sp, #8
 800fce0:	af00      	add	r7, sp, #0
 800fce2:	6078      	str	r0, [r7, #4]
 800fce4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fcec:	b2db      	uxtb	r3, r3
 800fcee:	3b01      	subs	r3, #1
 800fcf0:	2b02      	cmp	r3, #2
 800fcf2:	d81e      	bhi.n	800fd32 <USBD_GetStatus+0x56>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800fcf4:	683b      	ldr	r3, [r7, #0]
 800fcf6:	88db      	ldrh	r3, [r3, #6]
 800fcf8:	2b02      	cmp	r3, #2
 800fcfa:	d004      	beq.n	800fd06 <USBD_GetStatus+0x2a>
    {
      USBD_CtlError(pdev, req);
 800fcfc:	6839      	ldr	r1, [r7, #0]
 800fcfe:	6878      	ldr	r0, [r7, #4]
 800fd00:	f000 f890 	bl	800fe24 <USBD_CtlError>
      break;
 800fd04:	e01a      	b.n	800fd3c <USBD_GetStatus+0x60>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	2201      	movs	r2, #1
 800fd0a:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d005      	beq.n	800fd22 <USBD_GetStatus+0x46>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	68db      	ldr	r3, [r3, #12]
 800fd1a:	f043 0202 	orr.w	r2, r3, #2
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	330c      	adds	r3, #12
 800fd26:	2202      	movs	r2, #2
 800fd28:	4619      	mov	r1, r3
 800fd2a:	6878      	ldr	r0, [r7, #4]
 800fd2c:	f000 f8eb 	bl	800ff06 <USBD_CtlSendData>
    break;
 800fd30:	e004      	b.n	800fd3c <USBD_GetStatus+0x60>

  default:
    USBD_CtlError(pdev, req);
 800fd32:	6839      	ldr	r1, [r7, #0]
 800fd34:	6878      	ldr	r0, [r7, #4]
 800fd36:	f000 f875 	bl	800fe24 <USBD_CtlError>
    break;
 800fd3a:	bf00      	nop
  }
}
 800fd3c:	bf00      	nop
 800fd3e:	3708      	adds	r7, #8
 800fd40:	46bd      	mov	sp, r7
 800fd42:	bd80      	pop	{r7, pc}

0800fd44 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fd44:	b580      	push	{r7, lr}
 800fd46:	b082      	sub	sp, #8
 800fd48:	af00      	add	r7, sp, #0
 800fd4a:	6078      	str	r0, [r7, #4]
 800fd4c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fd4e:	683b      	ldr	r3, [r7, #0]
 800fd50:	885b      	ldrh	r3, [r3, #2]
 800fd52:	2b01      	cmp	r3, #1
 800fd54:	d106      	bne.n	800fd64 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	2201      	movs	r2, #1
 800fd5a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800fd5e:	6878      	ldr	r0, [r7, #4]
 800fd60:	f000 f92b 	bl	800ffba <USBD_CtlSendStatus>
  }
}
 800fd64:	bf00      	nop
 800fd66:	3708      	adds	r7, #8
 800fd68:	46bd      	mov	sp, r7
 800fd6a:	bd80      	pop	{r7, pc}

0800fd6c <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fd6c:	b580      	push	{r7, lr}
 800fd6e:	b082      	sub	sp, #8
 800fd70:	af00      	add	r7, sp, #0
 800fd72:	6078      	str	r0, [r7, #4]
 800fd74:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fd7c:	b2db      	uxtb	r3, r3
 800fd7e:	3b01      	subs	r3, #1
 800fd80:	2b02      	cmp	r3, #2
 800fd82:	d80b      	bhi.n	800fd9c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fd84:	683b      	ldr	r3, [r7, #0]
 800fd86:	885b      	ldrh	r3, [r3, #2]
 800fd88:	2b01      	cmp	r3, #1
 800fd8a:	d10c      	bne.n	800fda6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	2200      	movs	r2, #0
 800fd90:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800fd94:	6878      	ldr	r0, [r7, #4]
 800fd96:	f000 f910 	bl	800ffba <USBD_CtlSendStatus>
      }
      break;
 800fd9a:	e004      	b.n	800fda6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800fd9c:	6839      	ldr	r1, [r7, #0]
 800fd9e:	6878      	ldr	r0, [r7, #4]
 800fda0:	f000 f840 	bl	800fe24 <USBD_CtlError>
      break;
 800fda4:	e000      	b.n	800fda8 <USBD_ClrFeature+0x3c>
      break;
 800fda6:	bf00      	nop
  }
}
 800fda8:	bf00      	nop
 800fdaa:	3708      	adds	r7, #8
 800fdac:	46bd      	mov	sp, r7
 800fdae:	bd80      	pop	{r7, pc}

0800fdb0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800fdb0:	b580      	push	{r7, lr}
 800fdb2:	b084      	sub	sp, #16
 800fdb4:	af00      	add	r7, sp, #0
 800fdb6:	6078      	str	r0, [r7, #4]
 800fdb8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800fdba:	683b      	ldr	r3, [r7, #0]
 800fdbc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	781a      	ldrb	r2, [r3, #0]
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	3301      	adds	r3, #1
 800fdca:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	781a      	ldrb	r2, [r3, #0]
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	3301      	adds	r3, #1
 800fdd8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800fdda:	68f8      	ldr	r0, [r7, #12]
 800fddc:	f7ff fabd 	bl	800f35a <SWAPBYTE>
 800fde0:	4603      	mov	r3, r0
 800fde2:	461a      	mov	r2, r3
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	3301      	adds	r3, #1
 800fdec:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	3301      	adds	r3, #1
 800fdf2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800fdf4:	68f8      	ldr	r0, [r7, #12]
 800fdf6:	f7ff fab0 	bl	800f35a <SWAPBYTE>
 800fdfa:	4603      	mov	r3, r0
 800fdfc:	461a      	mov	r2, r3
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	3301      	adds	r3, #1
 800fe06:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	3301      	adds	r3, #1
 800fe0c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800fe0e:	68f8      	ldr	r0, [r7, #12]
 800fe10:	f7ff faa3 	bl	800f35a <SWAPBYTE>
 800fe14:	4603      	mov	r3, r0
 800fe16:	461a      	mov	r2, r3
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	80da      	strh	r2, [r3, #6]
}
 800fe1c:	bf00      	nop
 800fe1e:	3710      	adds	r7, #16
 800fe20:	46bd      	mov	sp, r7
 800fe22:	bd80      	pop	{r7, pc}

0800fe24 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fe24:	b580      	push	{r7, lr}
 800fe26:	b082      	sub	sp, #8
 800fe28:	af00      	add	r7, sp, #0
 800fe2a:	6078      	str	r0, [r7, #4]
 800fe2c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800fe2e:	2180      	movs	r1, #128	; 0x80
 800fe30:	6878      	ldr	r0, [r7, #4]
 800fe32:	f000 fd5d 	bl	80108f0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800fe36:	2100      	movs	r1, #0
 800fe38:	6878      	ldr	r0, [r7, #4]
 800fe3a:	f000 fd59 	bl	80108f0 <USBD_LL_StallEP>
}
 800fe3e:	bf00      	nop
 800fe40:	3708      	adds	r7, #8
 800fe42:	46bd      	mov	sp, r7
 800fe44:	bd80      	pop	{r7, pc}

0800fe46 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800fe46:	b580      	push	{r7, lr}
 800fe48:	b086      	sub	sp, #24
 800fe4a:	af00      	add	r7, sp, #0
 800fe4c:	60f8      	str	r0, [r7, #12]
 800fe4e:	60b9      	str	r1, [r7, #8]
 800fe50:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800fe52:	2300      	movs	r3, #0
 800fe54:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d036      	beq.n	800feca <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800fe60:	6938      	ldr	r0, [r7, #16]
 800fe62:	f000 f836 	bl	800fed2 <USBD_GetLen>
 800fe66:	4603      	mov	r3, r0
 800fe68:	3301      	adds	r3, #1
 800fe6a:	b29b      	uxth	r3, r3
 800fe6c:	005b      	lsls	r3, r3, #1
 800fe6e:	b29a      	uxth	r2, r3
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800fe74:	7dfb      	ldrb	r3, [r7, #23]
 800fe76:	68ba      	ldr	r2, [r7, #8]
 800fe78:	4413      	add	r3, r2
 800fe7a:	687a      	ldr	r2, [r7, #4]
 800fe7c:	7812      	ldrb	r2, [r2, #0]
 800fe7e:	701a      	strb	r2, [r3, #0]
  idx++;
 800fe80:	7dfb      	ldrb	r3, [r7, #23]
 800fe82:	3301      	adds	r3, #1
 800fe84:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800fe86:	7dfb      	ldrb	r3, [r7, #23]
 800fe88:	68ba      	ldr	r2, [r7, #8]
 800fe8a:	4413      	add	r3, r2
 800fe8c:	2203      	movs	r2, #3
 800fe8e:	701a      	strb	r2, [r3, #0]
  idx++;
 800fe90:	7dfb      	ldrb	r3, [r7, #23]
 800fe92:	3301      	adds	r3, #1
 800fe94:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800fe96:	e013      	b.n	800fec0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800fe98:	7dfb      	ldrb	r3, [r7, #23]
 800fe9a:	68ba      	ldr	r2, [r7, #8]
 800fe9c:	4413      	add	r3, r2
 800fe9e:	693a      	ldr	r2, [r7, #16]
 800fea0:	7812      	ldrb	r2, [r2, #0]
 800fea2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800fea4:	693b      	ldr	r3, [r7, #16]
 800fea6:	3301      	adds	r3, #1
 800fea8:	613b      	str	r3, [r7, #16]
    idx++;
 800feaa:	7dfb      	ldrb	r3, [r7, #23]
 800feac:	3301      	adds	r3, #1
 800feae:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800feb0:	7dfb      	ldrb	r3, [r7, #23]
 800feb2:	68ba      	ldr	r2, [r7, #8]
 800feb4:	4413      	add	r3, r2
 800feb6:	2200      	movs	r2, #0
 800feb8:	701a      	strb	r2, [r3, #0]
    idx++;
 800feba:	7dfb      	ldrb	r3, [r7, #23]
 800febc:	3301      	adds	r3, #1
 800febe:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800fec0:	693b      	ldr	r3, [r7, #16]
 800fec2:	781b      	ldrb	r3, [r3, #0]
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d1e7      	bne.n	800fe98 <USBD_GetString+0x52>
 800fec8:	e000      	b.n	800fecc <USBD_GetString+0x86>
    return;
 800feca:	bf00      	nop
  }
}
 800fecc:	3718      	adds	r7, #24
 800fece:	46bd      	mov	sp, r7
 800fed0:	bd80      	pop	{r7, pc}

0800fed2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800fed2:	b480      	push	{r7}
 800fed4:	b085      	sub	sp, #20
 800fed6:	af00      	add	r7, sp, #0
 800fed8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800feda:	2300      	movs	r3, #0
 800fedc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800fee2:	e005      	b.n	800fef0 <USBD_GetLen+0x1e>
  {
    len++;
 800fee4:	7bfb      	ldrb	r3, [r7, #15]
 800fee6:	3301      	adds	r3, #1
 800fee8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800feea:	68bb      	ldr	r3, [r7, #8]
 800feec:	3301      	adds	r3, #1
 800feee:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800fef0:	68bb      	ldr	r3, [r7, #8]
 800fef2:	781b      	ldrb	r3, [r3, #0]
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d1f5      	bne.n	800fee4 <USBD_GetLen+0x12>
  }

  return len;
 800fef8:	7bfb      	ldrb	r3, [r7, #15]
}
 800fefa:	4618      	mov	r0, r3
 800fefc:	3714      	adds	r7, #20
 800fefe:	46bd      	mov	sp, r7
 800ff00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff04:	4770      	bx	lr

0800ff06 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ff06:	b580      	push	{r7, lr}
 800ff08:	b084      	sub	sp, #16
 800ff0a:	af00      	add	r7, sp, #0
 800ff0c:	60f8      	str	r0, [r7, #12]
 800ff0e:	60b9      	str	r1, [r7, #8]
 800ff10:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	2202      	movs	r2, #2
 800ff16:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	687a      	ldr	r2, [r7, #4]
 800ff1e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	687a      	ldr	r2, [r7, #4]
 800ff24:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	68ba      	ldr	r2, [r7, #8]
 800ff2a:	2100      	movs	r1, #0
 800ff2c:	68f8      	ldr	r0, [r7, #12]
 800ff2e:	f000 fd68 	bl	8010a02 <USBD_LL_Transmit>

  return USBD_OK;
 800ff32:	2300      	movs	r3, #0
}
 800ff34:	4618      	mov	r0, r3
 800ff36:	3710      	adds	r7, #16
 800ff38:	46bd      	mov	sp, r7
 800ff3a:	bd80      	pop	{r7, pc}

0800ff3c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ff3c:	b580      	push	{r7, lr}
 800ff3e:	b084      	sub	sp, #16
 800ff40:	af00      	add	r7, sp, #0
 800ff42:	60f8      	str	r0, [r7, #12]
 800ff44:	60b9      	str	r1, [r7, #8]
 800ff46:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	68ba      	ldr	r2, [r7, #8]
 800ff4c:	2100      	movs	r1, #0
 800ff4e:	68f8      	ldr	r0, [r7, #12]
 800ff50:	f000 fd57 	bl	8010a02 <USBD_LL_Transmit>

  return USBD_OK;
 800ff54:	2300      	movs	r3, #0
}
 800ff56:	4618      	mov	r0, r3
 800ff58:	3710      	adds	r7, #16
 800ff5a:	46bd      	mov	sp, r7
 800ff5c:	bd80      	pop	{r7, pc}

0800ff5e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ff5e:	b580      	push	{r7, lr}
 800ff60:	b084      	sub	sp, #16
 800ff62:	af00      	add	r7, sp, #0
 800ff64:	60f8      	str	r0, [r7, #12]
 800ff66:	60b9      	str	r1, [r7, #8]
 800ff68:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	2203      	movs	r2, #3
 800ff6e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	687a      	ldr	r2, [r7, #4]
 800ff76:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800ff7a:	68fb      	ldr	r3, [r7, #12]
 800ff7c:	687a      	ldr	r2, [r7, #4]
 800ff7e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	68ba      	ldr	r2, [r7, #8]
 800ff86:	2100      	movs	r1, #0
 800ff88:	68f8      	ldr	r0, [r7, #12]
 800ff8a:	f000 fd5b 	bl	8010a44 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ff8e:	2300      	movs	r3, #0
}
 800ff90:	4618      	mov	r0, r3
 800ff92:	3710      	adds	r7, #16
 800ff94:	46bd      	mov	sp, r7
 800ff96:	bd80      	pop	{r7, pc}

0800ff98 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ff98:	b580      	push	{r7, lr}
 800ff9a:	b084      	sub	sp, #16
 800ff9c:	af00      	add	r7, sp, #0
 800ff9e:	60f8      	str	r0, [r7, #12]
 800ffa0:	60b9      	str	r1, [r7, #8]
 800ffa2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	68ba      	ldr	r2, [r7, #8]
 800ffa8:	2100      	movs	r1, #0
 800ffaa:	68f8      	ldr	r0, [r7, #12]
 800ffac:	f000 fd4a 	bl	8010a44 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ffb0:	2300      	movs	r3, #0
}
 800ffb2:	4618      	mov	r0, r3
 800ffb4:	3710      	adds	r7, #16
 800ffb6:	46bd      	mov	sp, r7
 800ffb8:	bd80      	pop	{r7, pc}

0800ffba <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ffba:	b580      	push	{r7, lr}
 800ffbc:	b082      	sub	sp, #8
 800ffbe:	af00      	add	r7, sp, #0
 800ffc0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	2204      	movs	r2, #4
 800ffc6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ffca:	2300      	movs	r3, #0
 800ffcc:	2200      	movs	r2, #0
 800ffce:	2100      	movs	r1, #0
 800ffd0:	6878      	ldr	r0, [r7, #4]
 800ffd2:	f000 fd16 	bl	8010a02 <USBD_LL_Transmit>

  return USBD_OK;
 800ffd6:	2300      	movs	r3, #0
}
 800ffd8:	4618      	mov	r0, r3
 800ffda:	3708      	adds	r7, #8
 800ffdc:	46bd      	mov	sp, r7
 800ffde:	bd80      	pop	{r7, pc}

0800ffe0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ffe0:	b580      	push	{r7, lr}
 800ffe2:	b082      	sub	sp, #8
 800ffe4:	af00      	add	r7, sp, #0
 800ffe6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	2205      	movs	r2, #5
 800ffec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fff0:	2300      	movs	r3, #0
 800fff2:	2200      	movs	r2, #0
 800fff4:	2100      	movs	r1, #0
 800fff6:	6878      	ldr	r0, [r7, #4]
 800fff8:	f000 fd24 	bl	8010a44 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fffc:	2300      	movs	r3, #0
}
 800fffe:	4618      	mov	r0, r3
 8010000:	3708      	adds	r7, #8
 8010002:	46bd      	mov	sp, r7
 8010004:	bd80      	pop	{r7, pc}
	...

08010008 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8010008:	b580      	push	{r7, lr}
 801000a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801000c:	2200      	movs	r2, #0
 801000e:	4913      	ldr	r1, [pc, #76]	; (801005c <MX_USB_DEVICE_Init+0x54>)
 8010010:	4813      	ldr	r0, [pc, #76]	; (8010060 <MX_USB_DEVICE_Init+0x58>)
 8010012:	f7fe fed3 	bl	800edbc <USBD_Init>
 8010016:	4603      	mov	r3, r0
 8010018:	2b00      	cmp	r3, #0
 801001a:	d001      	beq.n	8010020 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801001c:	f7f0 fef6 	bl	8000e0c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8010020:	4910      	ldr	r1, [pc, #64]	; (8010064 <MX_USB_DEVICE_Init+0x5c>)
 8010022:	480f      	ldr	r0, [pc, #60]	; (8010060 <MX_USB_DEVICE_Init+0x58>)
 8010024:	f7fe ff00 	bl	800ee28 <USBD_RegisterClass>
 8010028:	4603      	mov	r3, r0
 801002a:	2b00      	cmp	r3, #0
 801002c:	d001      	beq.n	8010032 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801002e:	f7f0 feed 	bl	8000e0c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8010032:	490d      	ldr	r1, [pc, #52]	; (8010068 <MX_USB_DEVICE_Init+0x60>)
 8010034:	480a      	ldr	r0, [pc, #40]	; (8010060 <MX_USB_DEVICE_Init+0x58>)
 8010036:	f7fe fe25 	bl	800ec84 <USBD_CDC_RegisterInterface>
 801003a:	4603      	mov	r3, r0
 801003c:	2b00      	cmp	r3, #0
 801003e:	d001      	beq.n	8010044 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8010040:	f7f0 fee4 	bl	8000e0c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8010044:	4806      	ldr	r0, [pc, #24]	; (8010060 <MX_USB_DEVICE_Init+0x58>)
 8010046:	f7fe ff10 	bl	800ee6a <USBD_Start>
 801004a:	4603      	mov	r3, r0
 801004c:	2b00      	cmp	r3, #0
 801004e:	d001      	beq.n	8010054 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8010050:	f7f0 fedc 	bl	8000e0c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8010054:	f7f7 f9f8 	bl	8007448 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010058:	bf00      	nop
 801005a:	bd80      	pop	{r7, pc}
 801005c:	24000134 	.word	0x24000134
 8010060:	24001764 	.word	0x24001764
 8010064:	2400001c 	.word	0x2400001c
 8010068:	24000120 	.word	0x24000120

0801006c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801006c:	b580      	push	{r7, lr}
 801006e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010070:	2200      	movs	r2, #0
 8010072:	4905      	ldr	r1, [pc, #20]	; (8010088 <CDC_Init_FS+0x1c>)
 8010074:	4805      	ldr	r0, [pc, #20]	; (801008c <CDC_Init_FS+0x20>)
 8010076:	f7fe fe1a 	bl	800ecae <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801007a:	4905      	ldr	r1, [pc, #20]	; (8010090 <CDC_Init_FS+0x24>)
 801007c:	4803      	ldr	r0, [pc, #12]	; (801008c <CDC_Init_FS+0x20>)
 801007e:	f7fe fe2f 	bl	800ece0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8010082:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010084:	4618      	mov	r0, r3
 8010086:	bd80      	pop	{r7, pc}
 8010088:	24002234 	.word	0x24002234
 801008c:	24001764 	.word	0x24001764
 8010090:	24001a34 	.word	0x24001a34

08010094 <CDC_Class_Init_Ok>:


uint8_t CDC_Class_Init_Ok(void)
{
 8010094:	b480      	push	{r7}
 8010096:	af00      	add	r7, sp, #0
	return hUsbDeviceFS.pClassData;
 8010098:	4b04      	ldr	r3, [pc, #16]	; (80100ac <CDC_Class_Init_Ok+0x18>)
 801009a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801009e:	b2db      	uxtb	r3, r3
}
 80100a0:	4618      	mov	r0, r3
 80100a2:	46bd      	mov	sp, r7
 80100a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a8:	4770      	bx	lr
 80100aa:	bf00      	nop
 80100ac:	24001764 	.word	0x24001764

080100b0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80100b0:	b480      	push	{r7}
 80100b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80100b4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80100b6:	4618      	mov	r0, r3
 80100b8:	46bd      	mov	sp, r7
 80100ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100be:	4770      	bx	lr

080100c0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80100c0:	b480      	push	{r7}
 80100c2:	b083      	sub	sp, #12
 80100c4:	af00      	add	r7, sp, #0
 80100c6:	4603      	mov	r3, r0
 80100c8:	6039      	str	r1, [r7, #0]
 80100ca:	71fb      	strb	r3, [r7, #7]
 80100cc:	4613      	mov	r3, r2
 80100ce:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80100d0:	79fb      	ldrb	r3, [r7, #7]
 80100d2:	2b23      	cmp	r3, #35	; 0x23
 80100d4:	f200 808c 	bhi.w	80101f0 <CDC_Control_FS+0x130>
 80100d8:	a201      	add	r2, pc, #4	; (adr r2, 80100e0 <CDC_Control_FS+0x20>)
 80100da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100de:	bf00      	nop
 80100e0:	080101f1 	.word	0x080101f1
 80100e4:	080101f1 	.word	0x080101f1
 80100e8:	080101f1 	.word	0x080101f1
 80100ec:	080101f1 	.word	0x080101f1
 80100f0:	080101f1 	.word	0x080101f1
 80100f4:	080101f1 	.word	0x080101f1
 80100f8:	080101f1 	.word	0x080101f1
 80100fc:	080101f1 	.word	0x080101f1
 8010100:	080101f1 	.word	0x080101f1
 8010104:	080101f1 	.word	0x080101f1
 8010108:	080101f1 	.word	0x080101f1
 801010c:	080101f1 	.word	0x080101f1
 8010110:	080101f1 	.word	0x080101f1
 8010114:	080101f1 	.word	0x080101f1
 8010118:	080101f1 	.word	0x080101f1
 801011c:	080101f1 	.word	0x080101f1
 8010120:	080101f1 	.word	0x080101f1
 8010124:	080101f1 	.word	0x080101f1
 8010128:	080101f1 	.word	0x080101f1
 801012c:	080101f1 	.word	0x080101f1
 8010130:	080101f1 	.word	0x080101f1
 8010134:	080101f1 	.word	0x080101f1
 8010138:	080101f1 	.word	0x080101f1
 801013c:	080101f1 	.word	0x080101f1
 8010140:	080101f1 	.word	0x080101f1
 8010144:	080101f1 	.word	0x080101f1
 8010148:	080101f1 	.word	0x080101f1
 801014c:	080101f1 	.word	0x080101f1
 8010150:	080101f1 	.word	0x080101f1
 8010154:	080101f1 	.word	0x080101f1
 8010158:	080101f1 	.word	0x080101f1
 801015c:	080101f1 	.word	0x080101f1
 8010160:	08010171 	.word	0x08010171
 8010164:	080101ab 	.word	0x080101ab
 8010168:	080101f1 	.word	0x080101f1
 801016c:	080101f1 	.word	0x080101f1
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      tempbuf[0]=pbuf[0];
 8010170:	683b      	ldr	r3, [r7, #0]
 8010172:	781a      	ldrb	r2, [r3, #0]
 8010174:	4b22      	ldr	r3, [pc, #136]	; (8010200 <CDC_Control_FS+0x140>)
 8010176:	701a      	strb	r2, [r3, #0]
      tempbuf[1]=pbuf[1];
 8010178:	683b      	ldr	r3, [r7, #0]
 801017a:	785a      	ldrb	r2, [r3, #1]
 801017c:	4b20      	ldr	r3, [pc, #128]	; (8010200 <CDC_Control_FS+0x140>)
 801017e:	705a      	strb	r2, [r3, #1]
      tempbuf[2]=pbuf[2];
 8010180:	683b      	ldr	r3, [r7, #0]
 8010182:	789a      	ldrb	r2, [r3, #2]
 8010184:	4b1e      	ldr	r3, [pc, #120]	; (8010200 <CDC_Control_FS+0x140>)
 8010186:	709a      	strb	r2, [r3, #2]
      tempbuf[3]=pbuf[3];
 8010188:	683b      	ldr	r3, [r7, #0]
 801018a:	78da      	ldrb	r2, [r3, #3]
 801018c:	4b1c      	ldr	r3, [pc, #112]	; (8010200 <CDC_Control_FS+0x140>)
 801018e:	70da      	strb	r2, [r3, #3]
      tempbuf[4]=pbuf[4];
 8010190:	683b      	ldr	r3, [r7, #0]
 8010192:	791a      	ldrb	r2, [r3, #4]
 8010194:	4b1a      	ldr	r3, [pc, #104]	; (8010200 <CDC_Control_FS+0x140>)
 8010196:	711a      	strb	r2, [r3, #4]
      tempbuf[5]=pbuf[5];
 8010198:	683b      	ldr	r3, [r7, #0]
 801019a:	795a      	ldrb	r2, [r3, #5]
 801019c:	4b18      	ldr	r3, [pc, #96]	; (8010200 <CDC_Control_FS+0x140>)
 801019e:	715a      	strb	r2, [r3, #5]
      tempbuf[6]=pbuf[6];
 80101a0:	683b      	ldr	r3, [r7, #0]
 80101a2:	799a      	ldrb	r2, [r3, #6]
 80101a4:	4b16      	ldr	r3, [pc, #88]	; (8010200 <CDC_Control_FS+0x140>)
 80101a6:	719a      	strb	r2, [r3, #6]

    break;
 80101a8:	e023      	b.n	80101f2 <CDC_Control_FS+0x132>

    case CDC_GET_LINE_CODING:
      pbuf[0]=tempbuf[0];
 80101aa:	4b15      	ldr	r3, [pc, #84]	; (8010200 <CDC_Control_FS+0x140>)
 80101ac:	781a      	ldrb	r2, [r3, #0]
 80101ae:	683b      	ldr	r3, [r7, #0]
 80101b0:	701a      	strb	r2, [r3, #0]
      pbuf[1]=tempbuf[1];
 80101b2:	683b      	ldr	r3, [r7, #0]
 80101b4:	3301      	adds	r3, #1
 80101b6:	4a12      	ldr	r2, [pc, #72]	; (8010200 <CDC_Control_FS+0x140>)
 80101b8:	7852      	ldrb	r2, [r2, #1]
 80101ba:	701a      	strb	r2, [r3, #0]
      pbuf[2]=tempbuf[2];
 80101bc:	683b      	ldr	r3, [r7, #0]
 80101be:	3302      	adds	r3, #2
 80101c0:	4a0f      	ldr	r2, [pc, #60]	; (8010200 <CDC_Control_FS+0x140>)
 80101c2:	7892      	ldrb	r2, [r2, #2]
 80101c4:	701a      	strb	r2, [r3, #0]
      pbuf[3]=tempbuf[3];
 80101c6:	683b      	ldr	r3, [r7, #0]
 80101c8:	3303      	adds	r3, #3
 80101ca:	4a0d      	ldr	r2, [pc, #52]	; (8010200 <CDC_Control_FS+0x140>)
 80101cc:	78d2      	ldrb	r2, [r2, #3]
 80101ce:	701a      	strb	r2, [r3, #0]
      pbuf[4]=tempbuf[4];
 80101d0:	683b      	ldr	r3, [r7, #0]
 80101d2:	3304      	adds	r3, #4
 80101d4:	4a0a      	ldr	r2, [pc, #40]	; (8010200 <CDC_Control_FS+0x140>)
 80101d6:	7912      	ldrb	r2, [r2, #4]
 80101d8:	701a      	strb	r2, [r3, #0]
      pbuf[5]=tempbuf[5];
 80101da:	683b      	ldr	r3, [r7, #0]
 80101dc:	3305      	adds	r3, #5
 80101de:	4a08      	ldr	r2, [pc, #32]	; (8010200 <CDC_Control_FS+0x140>)
 80101e0:	7952      	ldrb	r2, [r2, #5]
 80101e2:	701a      	strb	r2, [r3, #0]
      pbuf[6]=tempbuf[6];
 80101e4:	683b      	ldr	r3, [r7, #0]
 80101e6:	3306      	adds	r3, #6
 80101e8:	4a05      	ldr	r2, [pc, #20]	; (8010200 <CDC_Control_FS+0x140>)
 80101ea:	7992      	ldrb	r2, [r2, #6]
 80101ec:	701a      	strb	r2, [r3, #0]

    break;
 80101ee:	e000      	b.n	80101f2 <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80101f0:	bf00      	nop
  }

  return (USBD_OK);
 80101f2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80101f4:	4618      	mov	r0, r3
 80101f6:	370c      	adds	r7, #12
 80101f8:	46bd      	mov	sp, r7
 80101fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101fe:	4770      	bx	lr
 8010200:	24002a34 	.word	0x24002a34

08010204 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010204:	b580      	push	{r7, lr}
 8010206:	b084      	sub	sp, #16
 8010208:	af00      	add	r7, sp, #0
 801020a:	6078      	str	r0, [r7, #4]
 801020c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801020e:	6879      	ldr	r1, [r7, #4]
 8010210:	4809      	ldr	r0, [pc, #36]	; (8010238 <CDC_Receive_FS+0x34>)
 8010212:	f7fe fd65 	bl	800ece0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010216:	4808      	ldr	r0, [pc, #32]	; (8010238 <CDC_Receive_FS+0x34>)
 8010218:	f7fe fda6 	bl	800ed68 <USBD_CDC_ReceivePacket>
  uint16_t len = *Len;
 801021c:	683b      	ldr	r3, [r7, #0]
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	81fb      	strh	r3, [r7, #14]
  CDC_Transmit_FS(Buf, len);
 8010222:	89fb      	ldrh	r3, [r7, #14]
 8010224:	4619      	mov	r1, r3
 8010226:	6878      	ldr	r0, [r7, #4]
 8010228:	f000 f808 	bl	801023c <CDC_Transmit_FS>
  return (USBD_OK);
 801022c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801022e:	4618      	mov	r0, r3
 8010230:	3710      	adds	r7, #16
 8010232:	46bd      	mov	sp, r7
 8010234:	bd80      	pop	{r7, pc}
 8010236:	bf00      	nop
 8010238:	24001764 	.word	0x24001764

0801023c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801023c:	b580      	push	{r7, lr}
 801023e:	b084      	sub	sp, #16
 8010240:	af00      	add	r7, sp, #0
 8010242:	6078      	str	r0, [r7, #4]
 8010244:	460b      	mov	r3, r1
 8010246:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8010248:	2300      	movs	r3, #0
 801024a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801024c:	4b0d      	ldr	r3, [pc, #52]	; (8010284 <CDC_Transmit_FS+0x48>)
 801024e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010252:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8010254:	68bb      	ldr	r3, [r7, #8]
 8010256:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801025a:	2b00      	cmp	r3, #0
 801025c:	d001      	beq.n	8010262 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801025e:	2301      	movs	r3, #1
 8010260:	e00b      	b.n	801027a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8010262:	887b      	ldrh	r3, [r7, #2]
 8010264:	461a      	mov	r2, r3
 8010266:	6879      	ldr	r1, [r7, #4]
 8010268:	4806      	ldr	r0, [pc, #24]	; (8010284 <CDC_Transmit_FS+0x48>)
 801026a:	f7fe fd20 	bl	800ecae <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801026e:	4805      	ldr	r0, [pc, #20]	; (8010284 <CDC_Transmit_FS+0x48>)
 8010270:	f7fe fd4a 	bl	800ed08 <USBD_CDC_TransmitPacket>
 8010274:	4603      	mov	r3, r0
 8010276:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8010278:	7bfb      	ldrb	r3, [r7, #15]
}
 801027a:	4618      	mov	r0, r3
 801027c:	3710      	adds	r7, #16
 801027e:	46bd      	mov	sp, r7
 8010280:	bd80      	pop	{r7, pc}
 8010282:	bf00      	nop
 8010284:	24001764 	.word	0x24001764

08010288 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010288:	b480      	push	{r7}
 801028a:	b087      	sub	sp, #28
 801028c:	af00      	add	r7, sp, #0
 801028e:	60f8      	str	r0, [r7, #12]
 8010290:	60b9      	str	r1, [r7, #8]
 8010292:	4613      	mov	r3, r2
 8010294:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8010296:	2300      	movs	r3, #0
 8010298:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801029a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801029e:	4618      	mov	r0, r3
 80102a0:	371c      	adds	r7, #28
 80102a2:	46bd      	mov	sp, r7
 80102a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a8:	4770      	bx	lr
	...

080102ac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80102ac:	b480      	push	{r7}
 80102ae:	b083      	sub	sp, #12
 80102b0:	af00      	add	r7, sp, #0
 80102b2:	4603      	mov	r3, r0
 80102b4:	6039      	str	r1, [r7, #0]
 80102b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80102b8:	683b      	ldr	r3, [r7, #0]
 80102ba:	2212      	movs	r2, #18
 80102bc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80102be:	4b03      	ldr	r3, [pc, #12]	; (80102cc <USBD_FS_DeviceDescriptor+0x20>)
}
 80102c0:	4618      	mov	r0, r3
 80102c2:	370c      	adds	r7, #12
 80102c4:	46bd      	mov	sp, r7
 80102c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ca:	4770      	bx	lr
 80102cc:	24000150 	.word	0x24000150

080102d0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80102d0:	b480      	push	{r7}
 80102d2:	b083      	sub	sp, #12
 80102d4:	af00      	add	r7, sp, #0
 80102d6:	4603      	mov	r3, r0
 80102d8:	6039      	str	r1, [r7, #0]
 80102da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80102dc:	683b      	ldr	r3, [r7, #0]
 80102de:	2204      	movs	r2, #4
 80102e0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80102e2:	4b03      	ldr	r3, [pc, #12]	; (80102f0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80102e4:	4618      	mov	r0, r3
 80102e6:	370c      	adds	r7, #12
 80102e8:	46bd      	mov	sp, r7
 80102ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ee:	4770      	bx	lr
 80102f0:	24000164 	.word	0x24000164

080102f4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80102f4:	b580      	push	{r7, lr}
 80102f6:	b082      	sub	sp, #8
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	4603      	mov	r3, r0
 80102fc:	6039      	str	r1, [r7, #0]
 80102fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010300:	79fb      	ldrb	r3, [r7, #7]
 8010302:	2b00      	cmp	r3, #0
 8010304:	d105      	bne.n	8010312 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010306:	683a      	ldr	r2, [r7, #0]
 8010308:	4907      	ldr	r1, [pc, #28]	; (8010328 <USBD_FS_ProductStrDescriptor+0x34>)
 801030a:	4808      	ldr	r0, [pc, #32]	; (801032c <USBD_FS_ProductStrDescriptor+0x38>)
 801030c:	f7ff fd9b 	bl	800fe46 <USBD_GetString>
 8010310:	e004      	b.n	801031c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010312:	683a      	ldr	r2, [r7, #0]
 8010314:	4904      	ldr	r1, [pc, #16]	; (8010328 <USBD_FS_ProductStrDescriptor+0x34>)
 8010316:	4805      	ldr	r0, [pc, #20]	; (801032c <USBD_FS_ProductStrDescriptor+0x38>)
 8010318:	f7ff fd95 	bl	800fe46 <USBD_GetString>
  }
  return USBD_StrDesc;
 801031c:	4b02      	ldr	r3, [pc, #8]	; (8010328 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801031e:	4618      	mov	r0, r3
 8010320:	3708      	adds	r7, #8
 8010322:	46bd      	mov	sp, r7
 8010324:	bd80      	pop	{r7, pc}
 8010326:	bf00      	nop
 8010328:	24002a3c 	.word	0x24002a3c
 801032c:	08013470 	.word	0x08013470

08010330 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010330:	b580      	push	{r7, lr}
 8010332:	b082      	sub	sp, #8
 8010334:	af00      	add	r7, sp, #0
 8010336:	4603      	mov	r3, r0
 8010338:	6039      	str	r1, [r7, #0]
 801033a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801033c:	683a      	ldr	r2, [r7, #0]
 801033e:	4904      	ldr	r1, [pc, #16]	; (8010350 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010340:	4804      	ldr	r0, [pc, #16]	; (8010354 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010342:	f7ff fd80 	bl	800fe46 <USBD_GetString>
  return USBD_StrDesc;
 8010346:	4b02      	ldr	r3, [pc, #8]	; (8010350 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010348:	4618      	mov	r0, r3
 801034a:	3708      	adds	r7, #8
 801034c:	46bd      	mov	sp, r7
 801034e:	bd80      	pop	{r7, pc}
 8010350:	24002a3c 	.word	0x24002a3c
 8010354:	08013488 	.word	0x08013488

08010358 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010358:	b580      	push	{r7, lr}
 801035a:	b082      	sub	sp, #8
 801035c:	af00      	add	r7, sp, #0
 801035e:	4603      	mov	r3, r0
 8010360:	6039      	str	r1, [r7, #0]
 8010362:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010364:	683b      	ldr	r3, [r7, #0]
 8010366:	221a      	movs	r2, #26
 8010368:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801036a:	f000 f843 	bl	80103f4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801036e:	4b02      	ldr	r3, [pc, #8]	; (8010378 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8010370:	4618      	mov	r0, r3
 8010372:	3708      	adds	r7, #8
 8010374:	46bd      	mov	sp, r7
 8010376:	bd80      	pop	{r7, pc}
 8010378:	24000168 	.word	0x24000168

0801037c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801037c:	b580      	push	{r7, lr}
 801037e:	b082      	sub	sp, #8
 8010380:	af00      	add	r7, sp, #0
 8010382:	4603      	mov	r3, r0
 8010384:	6039      	str	r1, [r7, #0]
 8010386:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010388:	79fb      	ldrb	r3, [r7, #7]
 801038a:	2b00      	cmp	r3, #0
 801038c:	d105      	bne.n	801039a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801038e:	683a      	ldr	r2, [r7, #0]
 8010390:	4907      	ldr	r1, [pc, #28]	; (80103b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010392:	4808      	ldr	r0, [pc, #32]	; (80103b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010394:	f7ff fd57 	bl	800fe46 <USBD_GetString>
 8010398:	e004      	b.n	80103a4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801039a:	683a      	ldr	r2, [r7, #0]
 801039c:	4904      	ldr	r1, [pc, #16]	; (80103b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 801039e:	4805      	ldr	r0, [pc, #20]	; (80103b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80103a0:	f7ff fd51 	bl	800fe46 <USBD_GetString>
  }
  return USBD_StrDesc;
 80103a4:	4b02      	ldr	r3, [pc, #8]	; (80103b0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80103a6:	4618      	mov	r0, r3
 80103a8:	3708      	adds	r7, #8
 80103aa:	46bd      	mov	sp, r7
 80103ac:	bd80      	pop	{r7, pc}
 80103ae:	bf00      	nop
 80103b0:	24002a3c 	.word	0x24002a3c
 80103b4:	0801349c 	.word	0x0801349c

080103b8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80103b8:	b580      	push	{r7, lr}
 80103ba:	b082      	sub	sp, #8
 80103bc:	af00      	add	r7, sp, #0
 80103be:	4603      	mov	r3, r0
 80103c0:	6039      	str	r1, [r7, #0]
 80103c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80103c4:	79fb      	ldrb	r3, [r7, #7]
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d105      	bne.n	80103d6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80103ca:	683a      	ldr	r2, [r7, #0]
 80103cc:	4907      	ldr	r1, [pc, #28]	; (80103ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 80103ce:	4808      	ldr	r0, [pc, #32]	; (80103f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80103d0:	f7ff fd39 	bl	800fe46 <USBD_GetString>
 80103d4:	e004      	b.n	80103e0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80103d6:	683a      	ldr	r2, [r7, #0]
 80103d8:	4904      	ldr	r1, [pc, #16]	; (80103ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 80103da:	4805      	ldr	r0, [pc, #20]	; (80103f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80103dc:	f7ff fd33 	bl	800fe46 <USBD_GetString>
  }
  return USBD_StrDesc;
 80103e0:	4b02      	ldr	r3, [pc, #8]	; (80103ec <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80103e2:	4618      	mov	r0, r3
 80103e4:	3708      	adds	r7, #8
 80103e6:	46bd      	mov	sp, r7
 80103e8:	bd80      	pop	{r7, pc}
 80103ea:	bf00      	nop
 80103ec:	24002a3c 	.word	0x24002a3c
 80103f0:	080134a8 	.word	0x080134a8

080103f4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80103f4:	b580      	push	{r7, lr}
 80103f6:	b084      	sub	sp, #16
 80103f8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80103fa:	4b0f      	ldr	r3, [pc, #60]	; (8010438 <Get_SerialNum+0x44>)
 80103fc:	681b      	ldr	r3, [r3, #0]
 80103fe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010400:	4b0e      	ldr	r3, [pc, #56]	; (801043c <Get_SerialNum+0x48>)
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010406:	4b0e      	ldr	r3, [pc, #56]	; (8010440 <Get_SerialNum+0x4c>)
 8010408:	681b      	ldr	r3, [r3, #0]
 801040a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801040c:	68fa      	ldr	r2, [r7, #12]
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	4413      	add	r3, r2
 8010412:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010414:	68fb      	ldr	r3, [r7, #12]
 8010416:	2b00      	cmp	r3, #0
 8010418:	d009      	beq.n	801042e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801041a:	2208      	movs	r2, #8
 801041c:	4909      	ldr	r1, [pc, #36]	; (8010444 <Get_SerialNum+0x50>)
 801041e:	68f8      	ldr	r0, [r7, #12]
 8010420:	f000 f814 	bl	801044c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010424:	2204      	movs	r2, #4
 8010426:	4908      	ldr	r1, [pc, #32]	; (8010448 <Get_SerialNum+0x54>)
 8010428:	68b8      	ldr	r0, [r7, #8]
 801042a:	f000 f80f 	bl	801044c <IntToUnicode>
  }
}
 801042e:	bf00      	nop
 8010430:	3710      	adds	r7, #16
 8010432:	46bd      	mov	sp, r7
 8010434:	bd80      	pop	{r7, pc}
 8010436:	bf00      	nop
 8010438:	1ff1e800 	.word	0x1ff1e800
 801043c:	1ff1e804 	.word	0x1ff1e804
 8010440:	1ff1e808 	.word	0x1ff1e808
 8010444:	2400016a 	.word	0x2400016a
 8010448:	2400017a 	.word	0x2400017a

0801044c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801044c:	b480      	push	{r7}
 801044e:	b087      	sub	sp, #28
 8010450:	af00      	add	r7, sp, #0
 8010452:	60f8      	str	r0, [r7, #12]
 8010454:	60b9      	str	r1, [r7, #8]
 8010456:	4613      	mov	r3, r2
 8010458:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801045a:	2300      	movs	r3, #0
 801045c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801045e:	2300      	movs	r3, #0
 8010460:	75fb      	strb	r3, [r7, #23]
 8010462:	e027      	b.n	80104b4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	0f1b      	lsrs	r3, r3, #28
 8010468:	2b09      	cmp	r3, #9
 801046a:	d80b      	bhi.n	8010484 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	0f1b      	lsrs	r3, r3, #28
 8010470:	b2da      	uxtb	r2, r3
 8010472:	7dfb      	ldrb	r3, [r7, #23]
 8010474:	005b      	lsls	r3, r3, #1
 8010476:	4619      	mov	r1, r3
 8010478:	68bb      	ldr	r3, [r7, #8]
 801047a:	440b      	add	r3, r1
 801047c:	3230      	adds	r2, #48	; 0x30
 801047e:	b2d2      	uxtb	r2, r2
 8010480:	701a      	strb	r2, [r3, #0]
 8010482:	e00a      	b.n	801049a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	0f1b      	lsrs	r3, r3, #28
 8010488:	b2da      	uxtb	r2, r3
 801048a:	7dfb      	ldrb	r3, [r7, #23]
 801048c:	005b      	lsls	r3, r3, #1
 801048e:	4619      	mov	r1, r3
 8010490:	68bb      	ldr	r3, [r7, #8]
 8010492:	440b      	add	r3, r1
 8010494:	3237      	adds	r2, #55	; 0x37
 8010496:	b2d2      	uxtb	r2, r2
 8010498:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	011b      	lsls	r3, r3, #4
 801049e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80104a0:	7dfb      	ldrb	r3, [r7, #23]
 80104a2:	005b      	lsls	r3, r3, #1
 80104a4:	3301      	adds	r3, #1
 80104a6:	68ba      	ldr	r2, [r7, #8]
 80104a8:	4413      	add	r3, r2
 80104aa:	2200      	movs	r2, #0
 80104ac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80104ae:	7dfb      	ldrb	r3, [r7, #23]
 80104b0:	3301      	adds	r3, #1
 80104b2:	75fb      	strb	r3, [r7, #23]
 80104b4:	7dfa      	ldrb	r2, [r7, #23]
 80104b6:	79fb      	ldrb	r3, [r7, #7]
 80104b8:	429a      	cmp	r2, r3
 80104ba:	d3d3      	bcc.n	8010464 <IntToUnicode+0x18>
  }
}
 80104bc:	bf00      	nop
 80104be:	bf00      	nop
 80104c0:	371c      	adds	r7, #28
 80104c2:	46bd      	mov	sp, r7
 80104c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104c8:	4770      	bx	lr
	...

080104cc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80104cc:	b580      	push	{r7, lr}
 80104ce:	b0b8      	sub	sp, #224	; 0xe0
 80104d0:	af00      	add	r7, sp, #0
 80104d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80104d4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80104d8:	2200      	movs	r2, #0
 80104da:	601a      	str	r2, [r3, #0]
 80104dc:	605a      	str	r2, [r3, #4]
 80104de:	609a      	str	r2, [r3, #8]
 80104e0:	60da      	str	r2, [r3, #12]
 80104e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80104e4:	f107 0310 	add.w	r3, r7, #16
 80104e8:	22bc      	movs	r2, #188	; 0xbc
 80104ea:	2100      	movs	r1, #0
 80104ec:	4618      	mov	r0, r3
 80104ee:	f000 fb51 	bl	8010b94 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	4a2a      	ldr	r2, [pc, #168]	; (80105a0 <HAL_PCD_MspInit+0xd4>)
 80104f8:	4293      	cmp	r3, r2
 80104fa:	d14c      	bne.n	8010596 <HAL_PCD_MspInit+0xca>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

     /* USER CODE END SPI1_MspInit 0 */
     /** Initializes the peripherals clock
     */
       PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80104fc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010500:	613b      	str	r3, [r7, #16]
      PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8010502:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8010506:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
          if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801050a:	f107 0310 	add.w	r3, r7, #16
 801050e:	4618      	mov	r0, r3
 8010510:	f7f7 ff86 	bl	8008420 <HAL_RCCEx_PeriphCLKConfig>
 8010514:	4603      	mov	r3, r0
 8010516:	2b00      	cmp	r3, #0
 8010518:	d001      	beq.n	801051e <HAL_PCD_MspInit+0x52>
          {
            Error_Handler();
 801051a:	f7f0 fc77 	bl	8000e0c <Error_Handler>
          }
  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801051e:	4b21      	ldr	r3, [pc, #132]	; (80105a4 <HAL_PCD_MspInit+0xd8>)
 8010520:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010524:	4a1f      	ldr	r2, [pc, #124]	; (80105a4 <HAL_PCD_MspInit+0xd8>)
 8010526:	f043 0301 	orr.w	r3, r3, #1
 801052a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801052e:	4b1d      	ldr	r3, [pc, #116]	; (80105a4 <HAL_PCD_MspInit+0xd8>)
 8010530:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010534:	f003 0301 	and.w	r3, r3, #1
 8010538:	60fb      	str	r3, [r7, #12]
 801053a:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801053c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8010540:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010544:	2302      	movs	r3, #2
 8010546:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801054a:	2300      	movs	r3, #0
 801054c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010550:	2300      	movs	r3, #0
 8010552:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8010556:	230a      	movs	r3, #10
 8010558:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801055c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8010560:	4619      	mov	r1, r3
 8010562:	4811      	ldr	r0, [pc, #68]	; (80105a8 <HAL_PCD_MspInit+0xdc>)
 8010564:	f7f4 fb96 	bl	8004c94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010568:	4b0e      	ldr	r3, [pc, #56]	; (80105a4 <HAL_PCD_MspInit+0xd8>)
 801056a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801056e:	4a0d      	ldr	r2, [pc, #52]	; (80105a4 <HAL_PCD_MspInit+0xd8>)
 8010570:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8010574:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8010578:	4b0a      	ldr	r3, [pc, #40]	; (80105a4 <HAL_PCD_MspInit+0xd8>)
 801057a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801057e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010582:	60bb      	str	r3, [r7, #8]
 8010584:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8010586:	2200      	movs	r2, #0
 8010588:	2100      	movs	r1, #0
 801058a:	2065      	movs	r0, #101	; 0x65
 801058c:	f7f1 fc6d 	bl	8001e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010590:	2065      	movs	r0, #101	; 0x65
 8010592:	f7f1 fc84 	bl	8001e9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010596:	bf00      	nop
 8010598:	37e0      	adds	r7, #224	; 0xe0
 801059a:	46bd      	mov	sp, r7
 801059c:	bd80      	pop	{r7, pc}
 801059e:	bf00      	nop
 80105a0:	40080000 	.word	0x40080000
 80105a4:	58024400 	.word	0x58024400
 80105a8:	58020000 	.word	0x58020000

080105ac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80105ac:	b580      	push	{r7, lr}
 80105ae:	b082      	sub	sp, #8
 80105b0:	af00      	add	r7, sp, #0
 80105b2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80105c0:	4619      	mov	r1, r3
 80105c2:	4610      	mov	r0, r2
 80105c4:	f7fe fc9c 	bl	800ef00 <USBD_LL_SetupStage>
}
 80105c8:	bf00      	nop
 80105ca:	3708      	adds	r7, #8
 80105cc:	46bd      	mov	sp, r7
 80105ce:	bd80      	pop	{r7, pc}

080105d0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80105d0:	b580      	push	{r7, lr}
 80105d2:	b082      	sub	sp, #8
 80105d4:	af00      	add	r7, sp, #0
 80105d6:	6078      	str	r0, [r7, #4]
 80105d8:	460b      	mov	r3, r1
 80105da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80105e2:	78fa      	ldrb	r2, [r7, #3]
 80105e4:	6879      	ldr	r1, [r7, #4]
 80105e6:	4613      	mov	r3, r2
 80105e8:	00db      	lsls	r3, r3, #3
 80105ea:	1a9b      	subs	r3, r3, r2
 80105ec:	009b      	lsls	r3, r3, #2
 80105ee:	440b      	add	r3, r1
 80105f0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80105f4:	681a      	ldr	r2, [r3, #0]
 80105f6:	78fb      	ldrb	r3, [r7, #3]
 80105f8:	4619      	mov	r1, r3
 80105fa:	f7fe fcd6 	bl	800efaa <USBD_LL_DataOutStage>
}
 80105fe:	bf00      	nop
 8010600:	3708      	adds	r7, #8
 8010602:	46bd      	mov	sp, r7
 8010604:	bd80      	pop	{r7, pc}

08010606 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010606:	b580      	push	{r7, lr}
 8010608:	b082      	sub	sp, #8
 801060a:	af00      	add	r7, sp, #0
 801060c:	6078      	str	r0, [r7, #4]
 801060e:	460b      	mov	r3, r1
 8010610:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8010618:	78fa      	ldrb	r2, [r7, #3]
 801061a:	6879      	ldr	r1, [r7, #4]
 801061c:	4613      	mov	r3, r2
 801061e:	00db      	lsls	r3, r3, #3
 8010620:	1a9b      	subs	r3, r3, r2
 8010622:	009b      	lsls	r3, r3, #2
 8010624:	440b      	add	r3, r1
 8010626:	3348      	adds	r3, #72	; 0x48
 8010628:	681a      	ldr	r2, [r3, #0]
 801062a:	78fb      	ldrb	r3, [r7, #3]
 801062c:	4619      	mov	r1, r3
 801062e:	f7fe fd21 	bl	800f074 <USBD_LL_DataInStage>
}
 8010632:	bf00      	nop
 8010634:	3708      	adds	r7, #8
 8010636:	46bd      	mov	sp, r7
 8010638:	bd80      	pop	{r7, pc}

0801063a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801063a:	b580      	push	{r7, lr}
 801063c:	b082      	sub	sp, #8
 801063e:	af00      	add	r7, sp, #0
 8010640:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010648:	4618      	mov	r0, r3
 801064a:	f7fe fe2a 	bl	800f2a2 <USBD_LL_SOF>
}
 801064e:	bf00      	nop
 8010650:	3708      	adds	r7, #8
 8010652:	46bd      	mov	sp, r7
 8010654:	bd80      	pop	{r7, pc}

08010656 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010656:	b580      	push	{r7, lr}
 8010658:	b084      	sub	sp, #16
 801065a:	af00      	add	r7, sp, #0
 801065c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801065e:	2301      	movs	r3, #1
 8010660:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	68db      	ldr	r3, [r3, #12]
 8010666:	2b00      	cmp	r3, #0
 8010668:	d102      	bne.n	8010670 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801066a:	2300      	movs	r3, #0
 801066c:	73fb      	strb	r3, [r7, #15]
 801066e:	e008      	b.n	8010682 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	68db      	ldr	r3, [r3, #12]
 8010674:	2b02      	cmp	r3, #2
 8010676:	d102      	bne.n	801067e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8010678:	2301      	movs	r3, #1
 801067a:	73fb      	strb	r3, [r7, #15]
 801067c:	e001      	b.n	8010682 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801067e:	f7f0 fbc5 	bl	8000e0c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010688:	7bfa      	ldrb	r2, [r7, #15]
 801068a:	4611      	mov	r1, r2
 801068c:	4618      	mov	r0, r3
 801068e:	f7fe fdca 	bl	800f226 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010698:	4618      	mov	r0, r3
 801069a:	f7fe fd83 	bl	800f1a4 <USBD_LL_Reset>
}
 801069e:	bf00      	nop
 80106a0:	3710      	adds	r7, #16
 80106a2:	46bd      	mov	sp, r7
 80106a4:	bd80      	pop	{r7, pc}
	...

080106a8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80106a8:	b580      	push	{r7, lr}
 80106aa:	b082      	sub	sp, #8
 80106ac:	af00      	add	r7, sp, #0
 80106ae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80106b6:	4618      	mov	r0, r3
 80106b8:	f7fe fdc5 	bl	800f246 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	687a      	ldr	r2, [r7, #4]
 80106c8:	6812      	ldr	r2, [r2, #0]
 80106ca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80106ce:	f043 0301 	orr.w	r3, r3, #1
 80106d2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	6a1b      	ldr	r3, [r3, #32]
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d005      	beq.n	80106e8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80106dc:	4b04      	ldr	r3, [pc, #16]	; (80106f0 <HAL_PCD_SuspendCallback+0x48>)
 80106de:	691b      	ldr	r3, [r3, #16]
 80106e0:	4a03      	ldr	r2, [pc, #12]	; (80106f0 <HAL_PCD_SuspendCallback+0x48>)
 80106e2:	f043 0306 	orr.w	r3, r3, #6
 80106e6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80106e8:	bf00      	nop
 80106ea:	3708      	adds	r7, #8
 80106ec:	46bd      	mov	sp, r7
 80106ee:	bd80      	pop	{r7, pc}
 80106f0:	e000ed00 	.word	0xe000ed00

080106f4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80106f4:	b580      	push	{r7, lr}
 80106f6:	b082      	sub	sp, #8
 80106f8:	af00      	add	r7, sp, #0
 80106fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010702:	4618      	mov	r0, r3
 8010704:	f7fe fdb5 	bl	800f272 <USBD_LL_Resume>
}
 8010708:	bf00      	nop
 801070a:	3708      	adds	r7, #8
 801070c:	46bd      	mov	sp, r7
 801070e:	bd80      	pop	{r7, pc}

08010710 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010710:	b580      	push	{r7, lr}
 8010712:	b082      	sub	sp, #8
 8010714:	af00      	add	r7, sp, #0
 8010716:	6078      	str	r0, [r7, #4]
 8010718:	460b      	mov	r3, r1
 801071a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010722:	78fa      	ldrb	r2, [r7, #3]
 8010724:	4611      	mov	r1, r2
 8010726:	4618      	mov	r0, r3
 8010728:	f7fe fde3 	bl	800f2f2 <USBD_LL_IsoOUTIncomplete>
}
 801072c:	bf00      	nop
 801072e:	3708      	adds	r7, #8
 8010730:	46bd      	mov	sp, r7
 8010732:	bd80      	pop	{r7, pc}

08010734 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010734:	b580      	push	{r7, lr}
 8010736:	b082      	sub	sp, #8
 8010738:	af00      	add	r7, sp, #0
 801073a:	6078      	str	r0, [r7, #4]
 801073c:	460b      	mov	r3, r1
 801073e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010746:	78fa      	ldrb	r2, [r7, #3]
 8010748:	4611      	mov	r1, r2
 801074a:	4618      	mov	r0, r3
 801074c:	f7fe fdc4 	bl	800f2d8 <USBD_LL_IsoINIncomplete>
}
 8010750:	bf00      	nop
 8010752:	3708      	adds	r7, #8
 8010754:	46bd      	mov	sp, r7
 8010756:	bd80      	pop	{r7, pc}

08010758 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010758:	b580      	push	{r7, lr}
 801075a:	b082      	sub	sp, #8
 801075c:	af00      	add	r7, sp, #0
 801075e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010766:	4618      	mov	r0, r3
 8010768:	f7fe fdd0 	bl	800f30c <USBD_LL_DevConnected>
}
 801076c:	bf00      	nop
 801076e:	3708      	adds	r7, #8
 8010770:	46bd      	mov	sp, r7
 8010772:	bd80      	pop	{r7, pc}

08010774 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010774:	b580      	push	{r7, lr}
 8010776:	b082      	sub	sp, #8
 8010778:	af00      	add	r7, sp, #0
 801077a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010782:	4618      	mov	r0, r3
 8010784:	f7fe fdcd 	bl	800f322 <USBD_LL_DevDisconnected>
}
 8010788:	bf00      	nop
 801078a:	3708      	adds	r7, #8
 801078c:	46bd      	mov	sp, r7
 801078e:	bd80      	pop	{r7, pc}

08010790 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010790:	b580      	push	{r7, lr}
 8010792:	b082      	sub	sp, #8
 8010794:	af00      	add	r7, sp, #0
 8010796:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	781b      	ldrb	r3, [r3, #0]
 801079c:	2b00      	cmp	r3, #0
 801079e:	d13e      	bne.n	801081e <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80107a0:	4a21      	ldr	r2, [pc, #132]	; (8010828 <USBD_LL_Init+0x98>)
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	4a1f      	ldr	r2, [pc, #124]	; (8010828 <USBD_LL_Init+0x98>)
 80107ac:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80107b0:	4b1d      	ldr	r3, [pc, #116]	; (8010828 <USBD_LL_Init+0x98>)
 80107b2:	4a1e      	ldr	r2, [pc, #120]	; (801082c <USBD_LL_Init+0x9c>)
 80107b4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80107b6:	4b1c      	ldr	r3, [pc, #112]	; (8010828 <USBD_LL_Init+0x98>)
 80107b8:	2209      	movs	r2, #9
 80107ba:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80107bc:	4b1a      	ldr	r3, [pc, #104]	; (8010828 <USBD_LL_Init+0x98>)
 80107be:	2202      	movs	r2, #2
 80107c0:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80107c2:	4b19      	ldr	r3, [pc, #100]	; (8010828 <USBD_LL_Init+0x98>)
 80107c4:	2200      	movs	r2, #0
 80107c6:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80107c8:	4b17      	ldr	r3, [pc, #92]	; (8010828 <USBD_LL_Init+0x98>)
 80107ca:	2202      	movs	r2, #2
 80107cc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80107ce:	4b16      	ldr	r3, [pc, #88]	; (8010828 <USBD_LL_Init+0x98>)
 80107d0:	2200      	movs	r2, #0
 80107d2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80107d4:	4b14      	ldr	r3, [pc, #80]	; (8010828 <USBD_LL_Init+0x98>)
 80107d6:	2200      	movs	r2, #0
 80107d8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80107da:	4b13      	ldr	r3, [pc, #76]	; (8010828 <USBD_LL_Init+0x98>)
 80107dc:	2200      	movs	r2, #0
 80107de:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80107e0:	4b11      	ldr	r3, [pc, #68]	; (8010828 <USBD_LL_Init+0x98>)
 80107e2:	2200      	movs	r2, #0
 80107e4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80107e6:	4b10      	ldr	r3, [pc, #64]	; (8010828 <USBD_LL_Init+0x98>)
 80107e8:	2200      	movs	r2, #0
 80107ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80107ec:	4b0e      	ldr	r3, [pc, #56]	; (8010828 <USBD_LL_Init+0x98>)
 80107ee:	2200      	movs	r2, #0
 80107f0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80107f2:	480d      	ldr	r0, [pc, #52]	; (8010828 <USBD_LL_Init+0x98>)
 80107f4:	f7f5 fbf2 	bl	8005fdc <HAL_PCD_Init>
 80107f8:	4603      	mov	r3, r0
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d001      	beq.n	8010802 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 80107fe:	f7f0 fb05 	bl	8000e0c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8010802:	2180      	movs	r1, #128	; 0x80
 8010804:	4808      	ldr	r0, [pc, #32]	; (8010828 <USBD_LL_Init+0x98>)
 8010806:	f7f6 fd84 	bl	8007312 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801080a:	2240      	movs	r2, #64	; 0x40
 801080c:	2100      	movs	r1, #0
 801080e:	4806      	ldr	r0, [pc, #24]	; (8010828 <USBD_LL_Init+0x98>)
 8010810:	f7f6 fd38 	bl	8007284 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8010814:	2280      	movs	r2, #128	; 0x80
 8010816:	2101      	movs	r1, #1
 8010818:	4803      	ldr	r0, [pc, #12]	; (8010828 <USBD_LL_Init+0x98>)
 801081a:	f7f6 fd33 	bl	8007284 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801081e:	2300      	movs	r3, #0
}
 8010820:	4618      	mov	r0, r3
 8010822:	3708      	adds	r7, #8
 8010824:	46bd      	mov	sp, r7
 8010826:	bd80      	pop	{r7, pc}
 8010828:	24002c3c 	.word	0x24002c3c
 801082c:	40080000 	.word	0x40080000

08010830 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010830:	b580      	push	{r7, lr}
 8010832:	b084      	sub	sp, #16
 8010834:	af00      	add	r7, sp, #0
 8010836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010838:	2300      	movs	r3, #0
 801083a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801083c:	2300      	movs	r3, #0
 801083e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010846:	4618      	mov	r0, r3
 8010848:	f7f5 fcec 	bl	8006224 <HAL_PCD_Start>
 801084c:	4603      	mov	r3, r0
 801084e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010850:	7bfb      	ldrb	r3, [r7, #15]
 8010852:	4618      	mov	r0, r3
 8010854:	f000 f92a 	bl	8010aac <USBD_Get_USB_Status>
 8010858:	4603      	mov	r3, r0
 801085a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801085c:	7bbb      	ldrb	r3, [r7, #14]
}
 801085e:	4618      	mov	r0, r3
 8010860:	3710      	adds	r7, #16
 8010862:	46bd      	mov	sp, r7
 8010864:	bd80      	pop	{r7, pc}

08010866 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010866:	b580      	push	{r7, lr}
 8010868:	b084      	sub	sp, #16
 801086a:	af00      	add	r7, sp, #0
 801086c:	6078      	str	r0, [r7, #4]
 801086e:	4608      	mov	r0, r1
 8010870:	4611      	mov	r1, r2
 8010872:	461a      	mov	r2, r3
 8010874:	4603      	mov	r3, r0
 8010876:	70fb      	strb	r3, [r7, #3]
 8010878:	460b      	mov	r3, r1
 801087a:	70bb      	strb	r3, [r7, #2]
 801087c:	4613      	mov	r3, r2
 801087e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010880:	2300      	movs	r3, #0
 8010882:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010884:	2300      	movs	r3, #0
 8010886:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801088e:	78bb      	ldrb	r3, [r7, #2]
 8010890:	883a      	ldrh	r2, [r7, #0]
 8010892:	78f9      	ldrb	r1, [r7, #3]
 8010894:	f7f6 f8fd 	bl	8006a92 <HAL_PCD_EP_Open>
 8010898:	4603      	mov	r3, r0
 801089a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801089c:	7bfb      	ldrb	r3, [r7, #15]
 801089e:	4618      	mov	r0, r3
 80108a0:	f000 f904 	bl	8010aac <USBD_Get_USB_Status>
 80108a4:	4603      	mov	r3, r0
 80108a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80108a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80108aa:	4618      	mov	r0, r3
 80108ac:	3710      	adds	r7, #16
 80108ae:	46bd      	mov	sp, r7
 80108b0:	bd80      	pop	{r7, pc}

080108b2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80108b2:	b580      	push	{r7, lr}
 80108b4:	b084      	sub	sp, #16
 80108b6:	af00      	add	r7, sp, #0
 80108b8:	6078      	str	r0, [r7, #4]
 80108ba:	460b      	mov	r3, r1
 80108bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80108be:	2300      	movs	r3, #0
 80108c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80108c2:	2300      	movs	r3, #0
 80108c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80108cc:	78fa      	ldrb	r2, [r7, #3]
 80108ce:	4611      	mov	r1, r2
 80108d0:	4618      	mov	r0, r3
 80108d2:	f7f6 f946 	bl	8006b62 <HAL_PCD_EP_Close>
 80108d6:	4603      	mov	r3, r0
 80108d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80108da:	7bfb      	ldrb	r3, [r7, #15]
 80108dc:	4618      	mov	r0, r3
 80108de:	f000 f8e5 	bl	8010aac <USBD_Get_USB_Status>
 80108e2:	4603      	mov	r3, r0
 80108e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80108e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80108e8:	4618      	mov	r0, r3
 80108ea:	3710      	adds	r7, #16
 80108ec:	46bd      	mov	sp, r7
 80108ee:	bd80      	pop	{r7, pc}

080108f0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80108f0:	b580      	push	{r7, lr}
 80108f2:	b084      	sub	sp, #16
 80108f4:	af00      	add	r7, sp, #0
 80108f6:	6078      	str	r0, [r7, #4]
 80108f8:	460b      	mov	r3, r1
 80108fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80108fc:	2300      	movs	r3, #0
 80108fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010900:	2300      	movs	r3, #0
 8010902:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801090a:	78fa      	ldrb	r2, [r7, #3]
 801090c:	4611      	mov	r1, r2
 801090e:	4618      	mov	r0, r3
 8010910:	f7f6 fa1e 	bl	8006d50 <HAL_PCD_EP_SetStall>
 8010914:	4603      	mov	r3, r0
 8010916:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010918:	7bfb      	ldrb	r3, [r7, #15]
 801091a:	4618      	mov	r0, r3
 801091c:	f000 f8c6 	bl	8010aac <USBD_Get_USB_Status>
 8010920:	4603      	mov	r3, r0
 8010922:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010924:	7bbb      	ldrb	r3, [r7, #14]
}
 8010926:	4618      	mov	r0, r3
 8010928:	3710      	adds	r7, #16
 801092a:	46bd      	mov	sp, r7
 801092c:	bd80      	pop	{r7, pc}

0801092e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801092e:	b580      	push	{r7, lr}
 8010930:	b084      	sub	sp, #16
 8010932:	af00      	add	r7, sp, #0
 8010934:	6078      	str	r0, [r7, #4]
 8010936:	460b      	mov	r3, r1
 8010938:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801093a:	2300      	movs	r3, #0
 801093c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801093e:	2300      	movs	r3, #0
 8010940:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010948:	78fa      	ldrb	r2, [r7, #3]
 801094a:	4611      	mov	r1, r2
 801094c:	4618      	mov	r0, r3
 801094e:	f7f6 fa63 	bl	8006e18 <HAL_PCD_EP_ClrStall>
 8010952:	4603      	mov	r3, r0
 8010954:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010956:	7bfb      	ldrb	r3, [r7, #15]
 8010958:	4618      	mov	r0, r3
 801095a:	f000 f8a7 	bl	8010aac <USBD_Get_USB_Status>
 801095e:	4603      	mov	r3, r0
 8010960:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010962:	7bbb      	ldrb	r3, [r7, #14]
}
 8010964:	4618      	mov	r0, r3
 8010966:	3710      	adds	r7, #16
 8010968:	46bd      	mov	sp, r7
 801096a:	bd80      	pop	{r7, pc}

0801096c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801096c:	b480      	push	{r7}
 801096e:	b085      	sub	sp, #20
 8010970:	af00      	add	r7, sp, #0
 8010972:	6078      	str	r0, [r7, #4]
 8010974:	460b      	mov	r3, r1
 8010976:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801097e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010980:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010984:	2b00      	cmp	r3, #0
 8010986:	da0b      	bge.n	80109a0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010988:	78fb      	ldrb	r3, [r7, #3]
 801098a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801098e:	68f9      	ldr	r1, [r7, #12]
 8010990:	4613      	mov	r3, r2
 8010992:	00db      	lsls	r3, r3, #3
 8010994:	1a9b      	subs	r3, r3, r2
 8010996:	009b      	lsls	r3, r3, #2
 8010998:	440b      	add	r3, r1
 801099a:	333e      	adds	r3, #62	; 0x3e
 801099c:	781b      	ldrb	r3, [r3, #0]
 801099e:	e00b      	b.n	80109b8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80109a0:	78fb      	ldrb	r3, [r7, #3]
 80109a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80109a6:	68f9      	ldr	r1, [r7, #12]
 80109a8:	4613      	mov	r3, r2
 80109aa:	00db      	lsls	r3, r3, #3
 80109ac:	1a9b      	subs	r3, r3, r2
 80109ae:	009b      	lsls	r3, r3, #2
 80109b0:	440b      	add	r3, r1
 80109b2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80109b6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80109b8:	4618      	mov	r0, r3
 80109ba:	3714      	adds	r7, #20
 80109bc:	46bd      	mov	sp, r7
 80109be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109c2:	4770      	bx	lr

080109c4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80109c4:	b580      	push	{r7, lr}
 80109c6:	b084      	sub	sp, #16
 80109c8:	af00      	add	r7, sp, #0
 80109ca:	6078      	str	r0, [r7, #4]
 80109cc:	460b      	mov	r3, r1
 80109ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80109d0:	2300      	movs	r3, #0
 80109d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80109d4:	2300      	movs	r3, #0
 80109d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80109de:	78fa      	ldrb	r2, [r7, #3]
 80109e0:	4611      	mov	r1, r2
 80109e2:	4618      	mov	r0, r3
 80109e4:	f7f6 f830 	bl	8006a48 <HAL_PCD_SetAddress>
 80109e8:	4603      	mov	r3, r0
 80109ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80109ec:	7bfb      	ldrb	r3, [r7, #15]
 80109ee:	4618      	mov	r0, r3
 80109f0:	f000 f85c 	bl	8010aac <USBD_Get_USB_Status>
 80109f4:	4603      	mov	r3, r0
 80109f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80109f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80109fa:	4618      	mov	r0, r3
 80109fc:	3710      	adds	r7, #16
 80109fe:	46bd      	mov	sp, r7
 8010a00:	bd80      	pop	{r7, pc}

08010a02 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010a02:	b580      	push	{r7, lr}
 8010a04:	b086      	sub	sp, #24
 8010a06:	af00      	add	r7, sp, #0
 8010a08:	60f8      	str	r0, [r7, #12]
 8010a0a:	607a      	str	r2, [r7, #4]
 8010a0c:	603b      	str	r3, [r7, #0]
 8010a0e:	460b      	mov	r3, r1
 8010a10:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010a12:	2300      	movs	r3, #0
 8010a14:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010a16:	2300      	movs	r3, #0
 8010a18:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010a1a:	68fb      	ldr	r3, [r7, #12]
 8010a1c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010a20:	7af9      	ldrb	r1, [r7, #11]
 8010a22:	683b      	ldr	r3, [r7, #0]
 8010a24:	687a      	ldr	r2, [r7, #4]
 8010a26:	f7f6 f949 	bl	8006cbc <HAL_PCD_EP_Transmit>
 8010a2a:	4603      	mov	r3, r0
 8010a2c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010a2e:	7dfb      	ldrb	r3, [r7, #23]
 8010a30:	4618      	mov	r0, r3
 8010a32:	f000 f83b 	bl	8010aac <USBD_Get_USB_Status>
 8010a36:	4603      	mov	r3, r0
 8010a38:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010a3a:	7dbb      	ldrb	r3, [r7, #22]
}
 8010a3c:	4618      	mov	r0, r3
 8010a3e:	3718      	adds	r7, #24
 8010a40:	46bd      	mov	sp, r7
 8010a42:	bd80      	pop	{r7, pc}

08010a44 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010a44:	b580      	push	{r7, lr}
 8010a46:	b086      	sub	sp, #24
 8010a48:	af00      	add	r7, sp, #0
 8010a4a:	60f8      	str	r0, [r7, #12]
 8010a4c:	607a      	str	r2, [r7, #4]
 8010a4e:	603b      	str	r3, [r7, #0]
 8010a50:	460b      	mov	r3, r1
 8010a52:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010a54:	2300      	movs	r3, #0
 8010a56:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010a58:	2300      	movs	r3, #0
 8010a5a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010a62:	7af9      	ldrb	r1, [r7, #11]
 8010a64:	683b      	ldr	r3, [r7, #0]
 8010a66:	687a      	ldr	r2, [r7, #4]
 8010a68:	f7f6 f8c5 	bl	8006bf6 <HAL_PCD_EP_Receive>
 8010a6c:	4603      	mov	r3, r0
 8010a6e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010a70:	7dfb      	ldrb	r3, [r7, #23]
 8010a72:	4618      	mov	r0, r3
 8010a74:	f000 f81a 	bl	8010aac <USBD_Get_USB_Status>
 8010a78:	4603      	mov	r3, r0
 8010a7a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010a7c:	7dbb      	ldrb	r3, [r7, #22]
}
 8010a7e:	4618      	mov	r0, r3
 8010a80:	3718      	adds	r7, #24
 8010a82:	46bd      	mov	sp, r7
 8010a84:	bd80      	pop	{r7, pc}

08010a86 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010a86:	b580      	push	{r7, lr}
 8010a88:	b082      	sub	sp, #8
 8010a8a:	af00      	add	r7, sp, #0
 8010a8c:	6078      	str	r0, [r7, #4]
 8010a8e:	460b      	mov	r3, r1
 8010a90:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010a98:	78fa      	ldrb	r2, [r7, #3]
 8010a9a:	4611      	mov	r1, r2
 8010a9c:	4618      	mov	r0, r3
 8010a9e:	f7f6 f8f5 	bl	8006c8c <HAL_PCD_EP_GetRxCount>
 8010aa2:	4603      	mov	r3, r0
}
 8010aa4:	4618      	mov	r0, r3
 8010aa6:	3708      	adds	r7, #8
 8010aa8:	46bd      	mov	sp, r7
 8010aaa:	bd80      	pop	{r7, pc}

08010aac <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010aac:	b480      	push	{r7}
 8010aae:	b085      	sub	sp, #20
 8010ab0:	af00      	add	r7, sp, #0
 8010ab2:	4603      	mov	r3, r0
 8010ab4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010ab6:	2300      	movs	r3, #0
 8010ab8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010aba:	79fb      	ldrb	r3, [r7, #7]
 8010abc:	2b03      	cmp	r3, #3
 8010abe:	d817      	bhi.n	8010af0 <USBD_Get_USB_Status+0x44>
 8010ac0:	a201      	add	r2, pc, #4	; (adr r2, 8010ac8 <USBD_Get_USB_Status+0x1c>)
 8010ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ac6:	bf00      	nop
 8010ac8:	08010ad9 	.word	0x08010ad9
 8010acc:	08010adf 	.word	0x08010adf
 8010ad0:	08010ae5 	.word	0x08010ae5
 8010ad4:	08010aeb 	.word	0x08010aeb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010ad8:	2300      	movs	r3, #0
 8010ada:	73fb      	strb	r3, [r7, #15]
    break;
 8010adc:	e00b      	b.n	8010af6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010ade:	2303      	movs	r3, #3
 8010ae0:	73fb      	strb	r3, [r7, #15]
    break;
 8010ae2:	e008      	b.n	8010af6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010ae4:	2301      	movs	r3, #1
 8010ae6:	73fb      	strb	r3, [r7, #15]
    break;
 8010ae8:	e005      	b.n	8010af6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010aea:	2303      	movs	r3, #3
 8010aec:	73fb      	strb	r3, [r7, #15]
    break;
 8010aee:	e002      	b.n	8010af6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010af0:	2303      	movs	r3, #3
 8010af2:	73fb      	strb	r3, [r7, #15]
    break;
 8010af4:	bf00      	nop
  }
  return usb_status;
 8010af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8010af8:	4618      	mov	r0, r3
 8010afa:	3714      	adds	r7, #20
 8010afc:	46bd      	mov	sp, r7
 8010afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b02:	4770      	bx	lr

08010b04 <__errno>:
 8010b04:	4b01      	ldr	r3, [pc, #4]	; (8010b0c <__errno+0x8>)
 8010b06:	6818      	ldr	r0, [r3, #0]
 8010b08:	4770      	bx	lr
 8010b0a:	bf00      	nop
 8010b0c:	24000184 	.word	0x24000184

08010b10 <__libc_init_array>:
 8010b10:	b570      	push	{r4, r5, r6, lr}
 8010b12:	4d0d      	ldr	r5, [pc, #52]	; (8010b48 <__libc_init_array+0x38>)
 8010b14:	4c0d      	ldr	r4, [pc, #52]	; (8010b4c <__libc_init_array+0x3c>)
 8010b16:	1b64      	subs	r4, r4, r5
 8010b18:	10a4      	asrs	r4, r4, #2
 8010b1a:	2600      	movs	r6, #0
 8010b1c:	42a6      	cmp	r6, r4
 8010b1e:	d109      	bne.n	8010b34 <__libc_init_array+0x24>
 8010b20:	4d0b      	ldr	r5, [pc, #44]	; (8010b50 <__libc_init_array+0x40>)
 8010b22:	4c0c      	ldr	r4, [pc, #48]	; (8010b54 <__libc_init_array+0x44>)
 8010b24:	f002 fc98 	bl	8013458 <_init>
 8010b28:	1b64      	subs	r4, r4, r5
 8010b2a:	10a4      	asrs	r4, r4, #2
 8010b2c:	2600      	movs	r6, #0
 8010b2e:	42a6      	cmp	r6, r4
 8010b30:	d105      	bne.n	8010b3e <__libc_init_array+0x2e>
 8010b32:	bd70      	pop	{r4, r5, r6, pc}
 8010b34:	f855 3b04 	ldr.w	r3, [r5], #4
 8010b38:	4798      	blx	r3
 8010b3a:	3601      	adds	r6, #1
 8010b3c:	e7ee      	b.n	8010b1c <__libc_init_array+0xc>
 8010b3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010b42:	4798      	blx	r3
 8010b44:	3601      	adds	r6, #1
 8010b46:	e7f2      	b.n	8010b2e <__libc_init_array+0x1e>
 8010b48:	080138dc 	.word	0x080138dc
 8010b4c:	080138dc 	.word	0x080138dc
 8010b50:	080138dc 	.word	0x080138dc
 8010b54:	080138e4 	.word	0x080138e4

08010b58 <malloc>:
 8010b58:	4b02      	ldr	r3, [pc, #8]	; (8010b64 <malloc+0xc>)
 8010b5a:	4601      	mov	r1, r0
 8010b5c:	6818      	ldr	r0, [r3, #0]
 8010b5e:	f000 b88d 	b.w	8010c7c <_malloc_r>
 8010b62:	bf00      	nop
 8010b64:	24000184 	.word	0x24000184

08010b68 <free>:
 8010b68:	4b02      	ldr	r3, [pc, #8]	; (8010b74 <free+0xc>)
 8010b6a:	4601      	mov	r1, r0
 8010b6c:	6818      	ldr	r0, [r3, #0]
 8010b6e:	f000 b819 	b.w	8010ba4 <_free_r>
 8010b72:	bf00      	nop
 8010b74:	24000184 	.word	0x24000184

08010b78 <memcpy>:
 8010b78:	440a      	add	r2, r1
 8010b7a:	4291      	cmp	r1, r2
 8010b7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8010b80:	d100      	bne.n	8010b84 <memcpy+0xc>
 8010b82:	4770      	bx	lr
 8010b84:	b510      	push	{r4, lr}
 8010b86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010b8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010b8e:	4291      	cmp	r1, r2
 8010b90:	d1f9      	bne.n	8010b86 <memcpy+0xe>
 8010b92:	bd10      	pop	{r4, pc}

08010b94 <memset>:
 8010b94:	4402      	add	r2, r0
 8010b96:	4603      	mov	r3, r0
 8010b98:	4293      	cmp	r3, r2
 8010b9a:	d100      	bne.n	8010b9e <memset+0xa>
 8010b9c:	4770      	bx	lr
 8010b9e:	f803 1b01 	strb.w	r1, [r3], #1
 8010ba2:	e7f9      	b.n	8010b98 <memset+0x4>

08010ba4 <_free_r>:
 8010ba4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010ba6:	2900      	cmp	r1, #0
 8010ba8:	d044      	beq.n	8010c34 <_free_r+0x90>
 8010baa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010bae:	9001      	str	r0, [sp, #4]
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	f1a1 0404 	sub.w	r4, r1, #4
 8010bb6:	bfb8      	it	lt
 8010bb8:	18e4      	addlt	r4, r4, r3
 8010bba:	f001 fb27 	bl	801220c <__malloc_lock>
 8010bbe:	4a1e      	ldr	r2, [pc, #120]	; (8010c38 <_free_r+0x94>)
 8010bc0:	9801      	ldr	r0, [sp, #4]
 8010bc2:	6813      	ldr	r3, [r2, #0]
 8010bc4:	b933      	cbnz	r3, 8010bd4 <_free_r+0x30>
 8010bc6:	6063      	str	r3, [r4, #4]
 8010bc8:	6014      	str	r4, [r2, #0]
 8010bca:	b003      	add	sp, #12
 8010bcc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010bd0:	f001 bb22 	b.w	8012218 <__malloc_unlock>
 8010bd4:	42a3      	cmp	r3, r4
 8010bd6:	d908      	bls.n	8010bea <_free_r+0x46>
 8010bd8:	6825      	ldr	r5, [r4, #0]
 8010bda:	1961      	adds	r1, r4, r5
 8010bdc:	428b      	cmp	r3, r1
 8010bde:	bf01      	itttt	eq
 8010be0:	6819      	ldreq	r1, [r3, #0]
 8010be2:	685b      	ldreq	r3, [r3, #4]
 8010be4:	1949      	addeq	r1, r1, r5
 8010be6:	6021      	streq	r1, [r4, #0]
 8010be8:	e7ed      	b.n	8010bc6 <_free_r+0x22>
 8010bea:	461a      	mov	r2, r3
 8010bec:	685b      	ldr	r3, [r3, #4]
 8010bee:	b10b      	cbz	r3, 8010bf4 <_free_r+0x50>
 8010bf0:	42a3      	cmp	r3, r4
 8010bf2:	d9fa      	bls.n	8010bea <_free_r+0x46>
 8010bf4:	6811      	ldr	r1, [r2, #0]
 8010bf6:	1855      	adds	r5, r2, r1
 8010bf8:	42a5      	cmp	r5, r4
 8010bfa:	d10b      	bne.n	8010c14 <_free_r+0x70>
 8010bfc:	6824      	ldr	r4, [r4, #0]
 8010bfe:	4421      	add	r1, r4
 8010c00:	1854      	adds	r4, r2, r1
 8010c02:	42a3      	cmp	r3, r4
 8010c04:	6011      	str	r1, [r2, #0]
 8010c06:	d1e0      	bne.n	8010bca <_free_r+0x26>
 8010c08:	681c      	ldr	r4, [r3, #0]
 8010c0a:	685b      	ldr	r3, [r3, #4]
 8010c0c:	6053      	str	r3, [r2, #4]
 8010c0e:	4421      	add	r1, r4
 8010c10:	6011      	str	r1, [r2, #0]
 8010c12:	e7da      	b.n	8010bca <_free_r+0x26>
 8010c14:	d902      	bls.n	8010c1c <_free_r+0x78>
 8010c16:	230c      	movs	r3, #12
 8010c18:	6003      	str	r3, [r0, #0]
 8010c1a:	e7d6      	b.n	8010bca <_free_r+0x26>
 8010c1c:	6825      	ldr	r5, [r4, #0]
 8010c1e:	1961      	adds	r1, r4, r5
 8010c20:	428b      	cmp	r3, r1
 8010c22:	bf04      	itt	eq
 8010c24:	6819      	ldreq	r1, [r3, #0]
 8010c26:	685b      	ldreq	r3, [r3, #4]
 8010c28:	6063      	str	r3, [r4, #4]
 8010c2a:	bf04      	itt	eq
 8010c2c:	1949      	addeq	r1, r1, r5
 8010c2e:	6021      	streq	r1, [r4, #0]
 8010c30:	6054      	str	r4, [r2, #4]
 8010c32:	e7ca      	b.n	8010bca <_free_r+0x26>
 8010c34:	b003      	add	sp, #12
 8010c36:	bd30      	pop	{r4, r5, pc}
 8010c38:	24003044 	.word	0x24003044

08010c3c <sbrk_aligned>:
 8010c3c:	b570      	push	{r4, r5, r6, lr}
 8010c3e:	4e0e      	ldr	r6, [pc, #56]	; (8010c78 <sbrk_aligned+0x3c>)
 8010c40:	460c      	mov	r4, r1
 8010c42:	6831      	ldr	r1, [r6, #0]
 8010c44:	4605      	mov	r5, r0
 8010c46:	b911      	cbnz	r1, 8010c4e <sbrk_aligned+0x12>
 8010c48:	f000 fcd0 	bl	80115ec <_sbrk_r>
 8010c4c:	6030      	str	r0, [r6, #0]
 8010c4e:	4621      	mov	r1, r4
 8010c50:	4628      	mov	r0, r5
 8010c52:	f000 fccb 	bl	80115ec <_sbrk_r>
 8010c56:	1c43      	adds	r3, r0, #1
 8010c58:	d00a      	beq.n	8010c70 <sbrk_aligned+0x34>
 8010c5a:	1cc4      	adds	r4, r0, #3
 8010c5c:	f024 0403 	bic.w	r4, r4, #3
 8010c60:	42a0      	cmp	r0, r4
 8010c62:	d007      	beq.n	8010c74 <sbrk_aligned+0x38>
 8010c64:	1a21      	subs	r1, r4, r0
 8010c66:	4628      	mov	r0, r5
 8010c68:	f000 fcc0 	bl	80115ec <_sbrk_r>
 8010c6c:	3001      	adds	r0, #1
 8010c6e:	d101      	bne.n	8010c74 <sbrk_aligned+0x38>
 8010c70:	f04f 34ff 	mov.w	r4, #4294967295
 8010c74:	4620      	mov	r0, r4
 8010c76:	bd70      	pop	{r4, r5, r6, pc}
 8010c78:	24003048 	.word	0x24003048

08010c7c <_malloc_r>:
 8010c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c80:	1ccd      	adds	r5, r1, #3
 8010c82:	f025 0503 	bic.w	r5, r5, #3
 8010c86:	3508      	adds	r5, #8
 8010c88:	2d0c      	cmp	r5, #12
 8010c8a:	bf38      	it	cc
 8010c8c:	250c      	movcc	r5, #12
 8010c8e:	2d00      	cmp	r5, #0
 8010c90:	4607      	mov	r7, r0
 8010c92:	db01      	blt.n	8010c98 <_malloc_r+0x1c>
 8010c94:	42a9      	cmp	r1, r5
 8010c96:	d905      	bls.n	8010ca4 <_malloc_r+0x28>
 8010c98:	230c      	movs	r3, #12
 8010c9a:	603b      	str	r3, [r7, #0]
 8010c9c:	2600      	movs	r6, #0
 8010c9e:	4630      	mov	r0, r6
 8010ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ca4:	4e2e      	ldr	r6, [pc, #184]	; (8010d60 <_malloc_r+0xe4>)
 8010ca6:	f001 fab1 	bl	801220c <__malloc_lock>
 8010caa:	6833      	ldr	r3, [r6, #0]
 8010cac:	461c      	mov	r4, r3
 8010cae:	bb34      	cbnz	r4, 8010cfe <_malloc_r+0x82>
 8010cb0:	4629      	mov	r1, r5
 8010cb2:	4638      	mov	r0, r7
 8010cb4:	f7ff ffc2 	bl	8010c3c <sbrk_aligned>
 8010cb8:	1c43      	adds	r3, r0, #1
 8010cba:	4604      	mov	r4, r0
 8010cbc:	d14d      	bne.n	8010d5a <_malloc_r+0xde>
 8010cbe:	6834      	ldr	r4, [r6, #0]
 8010cc0:	4626      	mov	r6, r4
 8010cc2:	2e00      	cmp	r6, #0
 8010cc4:	d140      	bne.n	8010d48 <_malloc_r+0xcc>
 8010cc6:	6823      	ldr	r3, [r4, #0]
 8010cc8:	4631      	mov	r1, r6
 8010cca:	4638      	mov	r0, r7
 8010ccc:	eb04 0803 	add.w	r8, r4, r3
 8010cd0:	f000 fc8c 	bl	80115ec <_sbrk_r>
 8010cd4:	4580      	cmp	r8, r0
 8010cd6:	d13a      	bne.n	8010d4e <_malloc_r+0xd2>
 8010cd8:	6821      	ldr	r1, [r4, #0]
 8010cda:	3503      	adds	r5, #3
 8010cdc:	1a6d      	subs	r5, r5, r1
 8010cde:	f025 0503 	bic.w	r5, r5, #3
 8010ce2:	3508      	adds	r5, #8
 8010ce4:	2d0c      	cmp	r5, #12
 8010ce6:	bf38      	it	cc
 8010ce8:	250c      	movcc	r5, #12
 8010cea:	4629      	mov	r1, r5
 8010cec:	4638      	mov	r0, r7
 8010cee:	f7ff ffa5 	bl	8010c3c <sbrk_aligned>
 8010cf2:	3001      	adds	r0, #1
 8010cf4:	d02b      	beq.n	8010d4e <_malloc_r+0xd2>
 8010cf6:	6823      	ldr	r3, [r4, #0]
 8010cf8:	442b      	add	r3, r5
 8010cfa:	6023      	str	r3, [r4, #0]
 8010cfc:	e00e      	b.n	8010d1c <_malloc_r+0xa0>
 8010cfe:	6822      	ldr	r2, [r4, #0]
 8010d00:	1b52      	subs	r2, r2, r5
 8010d02:	d41e      	bmi.n	8010d42 <_malloc_r+0xc6>
 8010d04:	2a0b      	cmp	r2, #11
 8010d06:	d916      	bls.n	8010d36 <_malloc_r+0xba>
 8010d08:	1961      	adds	r1, r4, r5
 8010d0a:	42a3      	cmp	r3, r4
 8010d0c:	6025      	str	r5, [r4, #0]
 8010d0e:	bf18      	it	ne
 8010d10:	6059      	strne	r1, [r3, #4]
 8010d12:	6863      	ldr	r3, [r4, #4]
 8010d14:	bf08      	it	eq
 8010d16:	6031      	streq	r1, [r6, #0]
 8010d18:	5162      	str	r2, [r4, r5]
 8010d1a:	604b      	str	r3, [r1, #4]
 8010d1c:	4638      	mov	r0, r7
 8010d1e:	f104 060b 	add.w	r6, r4, #11
 8010d22:	f001 fa79 	bl	8012218 <__malloc_unlock>
 8010d26:	f026 0607 	bic.w	r6, r6, #7
 8010d2a:	1d23      	adds	r3, r4, #4
 8010d2c:	1af2      	subs	r2, r6, r3
 8010d2e:	d0b6      	beq.n	8010c9e <_malloc_r+0x22>
 8010d30:	1b9b      	subs	r3, r3, r6
 8010d32:	50a3      	str	r3, [r4, r2]
 8010d34:	e7b3      	b.n	8010c9e <_malloc_r+0x22>
 8010d36:	6862      	ldr	r2, [r4, #4]
 8010d38:	42a3      	cmp	r3, r4
 8010d3a:	bf0c      	ite	eq
 8010d3c:	6032      	streq	r2, [r6, #0]
 8010d3e:	605a      	strne	r2, [r3, #4]
 8010d40:	e7ec      	b.n	8010d1c <_malloc_r+0xa0>
 8010d42:	4623      	mov	r3, r4
 8010d44:	6864      	ldr	r4, [r4, #4]
 8010d46:	e7b2      	b.n	8010cae <_malloc_r+0x32>
 8010d48:	4634      	mov	r4, r6
 8010d4a:	6876      	ldr	r6, [r6, #4]
 8010d4c:	e7b9      	b.n	8010cc2 <_malloc_r+0x46>
 8010d4e:	230c      	movs	r3, #12
 8010d50:	603b      	str	r3, [r7, #0]
 8010d52:	4638      	mov	r0, r7
 8010d54:	f001 fa60 	bl	8012218 <__malloc_unlock>
 8010d58:	e7a1      	b.n	8010c9e <_malloc_r+0x22>
 8010d5a:	6025      	str	r5, [r4, #0]
 8010d5c:	e7de      	b.n	8010d1c <_malloc_r+0xa0>
 8010d5e:	bf00      	nop
 8010d60:	24003044 	.word	0x24003044

08010d64 <__cvt>:
 8010d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d66:	ed2d 8b02 	vpush	{d8}
 8010d6a:	eeb0 8b40 	vmov.f64	d8, d0
 8010d6e:	b085      	sub	sp, #20
 8010d70:	4617      	mov	r7, r2
 8010d72:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8010d74:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8010d76:	ee18 2a90 	vmov	r2, s17
 8010d7a:	f025 0520 	bic.w	r5, r5, #32
 8010d7e:	2a00      	cmp	r2, #0
 8010d80:	bfb6      	itet	lt
 8010d82:	222d      	movlt	r2, #45	; 0x2d
 8010d84:	2200      	movge	r2, #0
 8010d86:	eeb1 8b40 	vneglt.f64	d8, d0
 8010d8a:	2d46      	cmp	r5, #70	; 0x46
 8010d8c:	460c      	mov	r4, r1
 8010d8e:	701a      	strb	r2, [r3, #0]
 8010d90:	d004      	beq.n	8010d9c <__cvt+0x38>
 8010d92:	2d45      	cmp	r5, #69	; 0x45
 8010d94:	d100      	bne.n	8010d98 <__cvt+0x34>
 8010d96:	3401      	adds	r4, #1
 8010d98:	2102      	movs	r1, #2
 8010d9a:	e000      	b.n	8010d9e <__cvt+0x3a>
 8010d9c:	2103      	movs	r1, #3
 8010d9e:	ab03      	add	r3, sp, #12
 8010da0:	9301      	str	r3, [sp, #4]
 8010da2:	ab02      	add	r3, sp, #8
 8010da4:	9300      	str	r3, [sp, #0]
 8010da6:	4622      	mov	r2, r4
 8010da8:	4633      	mov	r3, r6
 8010daa:	eeb0 0b48 	vmov.f64	d0, d8
 8010dae:	f000 fcbb 	bl	8011728 <_dtoa_r>
 8010db2:	2d47      	cmp	r5, #71	; 0x47
 8010db4:	d101      	bne.n	8010dba <__cvt+0x56>
 8010db6:	07fb      	lsls	r3, r7, #31
 8010db8:	d51a      	bpl.n	8010df0 <__cvt+0x8c>
 8010dba:	2d46      	cmp	r5, #70	; 0x46
 8010dbc:	eb00 0204 	add.w	r2, r0, r4
 8010dc0:	d10c      	bne.n	8010ddc <__cvt+0x78>
 8010dc2:	7803      	ldrb	r3, [r0, #0]
 8010dc4:	2b30      	cmp	r3, #48	; 0x30
 8010dc6:	d107      	bne.n	8010dd8 <__cvt+0x74>
 8010dc8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dd0:	bf1c      	itt	ne
 8010dd2:	f1c4 0401 	rsbne	r4, r4, #1
 8010dd6:	6034      	strne	r4, [r6, #0]
 8010dd8:	6833      	ldr	r3, [r6, #0]
 8010dda:	441a      	add	r2, r3
 8010ddc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010de4:	bf08      	it	eq
 8010de6:	9203      	streq	r2, [sp, #12]
 8010de8:	2130      	movs	r1, #48	; 0x30
 8010dea:	9b03      	ldr	r3, [sp, #12]
 8010dec:	4293      	cmp	r3, r2
 8010dee:	d307      	bcc.n	8010e00 <__cvt+0x9c>
 8010df0:	9b03      	ldr	r3, [sp, #12]
 8010df2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010df4:	1a1b      	subs	r3, r3, r0
 8010df6:	6013      	str	r3, [r2, #0]
 8010df8:	b005      	add	sp, #20
 8010dfa:	ecbd 8b02 	vpop	{d8}
 8010dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e00:	1c5c      	adds	r4, r3, #1
 8010e02:	9403      	str	r4, [sp, #12]
 8010e04:	7019      	strb	r1, [r3, #0]
 8010e06:	e7f0      	b.n	8010dea <__cvt+0x86>

08010e08 <__exponent>:
 8010e08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010e0a:	4603      	mov	r3, r0
 8010e0c:	2900      	cmp	r1, #0
 8010e0e:	bfb8      	it	lt
 8010e10:	4249      	neglt	r1, r1
 8010e12:	f803 2b02 	strb.w	r2, [r3], #2
 8010e16:	bfb4      	ite	lt
 8010e18:	222d      	movlt	r2, #45	; 0x2d
 8010e1a:	222b      	movge	r2, #43	; 0x2b
 8010e1c:	2909      	cmp	r1, #9
 8010e1e:	7042      	strb	r2, [r0, #1]
 8010e20:	dd2a      	ble.n	8010e78 <__exponent+0x70>
 8010e22:	f10d 0407 	add.w	r4, sp, #7
 8010e26:	46a4      	mov	ip, r4
 8010e28:	270a      	movs	r7, #10
 8010e2a:	46a6      	mov	lr, r4
 8010e2c:	460a      	mov	r2, r1
 8010e2e:	fb91 f6f7 	sdiv	r6, r1, r7
 8010e32:	fb07 1516 	mls	r5, r7, r6, r1
 8010e36:	3530      	adds	r5, #48	; 0x30
 8010e38:	2a63      	cmp	r2, #99	; 0x63
 8010e3a:	f104 34ff 	add.w	r4, r4, #4294967295
 8010e3e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8010e42:	4631      	mov	r1, r6
 8010e44:	dcf1      	bgt.n	8010e2a <__exponent+0x22>
 8010e46:	3130      	adds	r1, #48	; 0x30
 8010e48:	f1ae 0502 	sub.w	r5, lr, #2
 8010e4c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8010e50:	1c44      	adds	r4, r0, #1
 8010e52:	4629      	mov	r1, r5
 8010e54:	4561      	cmp	r1, ip
 8010e56:	d30a      	bcc.n	8010e6e <__exponent+0x66>
 8010e58:	f10d 0209 	add.w	r2, sp, #9
 8010e5c:	eba2 020e 	sub.w	r2, r2, lr
 8010e60:	4565      	cmp	r5, ip
 8010e62:	bf88      	it	hi
 8010e64:	2200      	movhi	r2, #0
 8010e66:	4413      	add	r3, r2
 8010e68:	1a18      	subs	r0, r3, r0
 8010e6a:	b003      	add	sp, #12
 8010e6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010e72:	f804 2f01 	strb.w	r2, [r4, #1]!
 8010e76:	e7ed      	b.n	8010e54 <__exponent+0x4c>
 8010e78:	2330      	movs	r3, #48	; 0x30
 8010e7a:	3130      	adds	r1, #48	; 0x30
 8010e7c:	7083      	strb	r3, [r0, #2]
 8010e7e:	70c1      	strb	r1, [r0, #3]
 8010e80:	1d03      	adds	r3, r0, #4
 8010e82:	e7f1      	b.n	8010e68 <__exponent+0x60>
 8010e84:	0000      	movs	r0, r0
	...

08010e88 <_printf_float>:
 8010e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e8c:	b08b      	sub	sp, #44	; 0x2c
 8010e8e:	460c      	mov	r4, r1
 8010e90:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8010e94:	4616      	mov	r6, r2
 8010e96:	461f      	mov	r7, r3
 8010e98:	4605      	mov	r5, r0
 8010e9a:	f001 f9b3 	bl	8012204 <_localeconv_r>
 8010e9e:	f8d0 b000 	ldr.w	fp, [r0]
 8010ea2:	4658      	mov	r0, fp
 8010ea4:	f7ef fa1c 	bl	80002e0 <strlen>
 8010ea8:	2300      	movs	r3, #0
 8010eaa:	9308      	str	r3, [sp, #32]
 8010eac:	f8d8 3000 	ldr.w	r3, [r8]
 8010eb0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8010eb4:	6822      	ldr	r2, [r4, #0]
 8010eb6:	3307      	adds	r3, #7
 8010eb8:	f023 0307 	bic.w	r3, r3, #7
 8010ebc:	f103 0108 	add.w	r1, r3, #8
 8010ec0:	f8c8 1000 	str.w	r1, [r8]
 8010ec4:	4682      	mov	sl, r0
 8010ec6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010eca:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8010ece:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8011130 <_printf_float+0x2a8>
 8010ed2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8010ed6:	eeb0 6bc0 	vabs.f64	d6, d0
 8010eda:	eeb4 6b47 	vcmp.f64	d6, d7
 8010ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ee2:	dd24      	ble.n	8010f2e <_printf_float+0xa6>
 8010ee4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8010ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010eec:	d502      	bpl.n	8010ef4 <_printf_float+0x6c>
 8010eee:	232d      	movs	r3, #45	; 0x2d
 8010ef0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010ef4:	4b90      	ldr	r3, [pc, #576]	; (8011138 <_printf_float+0x2b0>)
 8010ef6:	4891      	ldr	r0, [pc, #580]	; (801113c <_printf_float+0x2b4>)
 8010ef8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8010efc:	bf94      	ite	ls
 8010efe:	4698      	movls	r8, r3
 8010f00:	4680      	movhi	r8, r0
 8010f02:	2303      	movs	r3, #3
 8010f04:	6123      	str	r3, [r4, #16]
 8010f06:	f022 0204 	bic.w	r2, r2, #4
 8010f0a:	2300      	movs	r3, #0
 8010f0c:	6022      	str	r2, [r4, #0]
 8010f0e:	9304      	str	r3, [sp, #16]
 8010f10:	9700      	str	r7, [sp, #0]
 8010f12:	4633      	mov	r3, r6
 8010f14:	aa09      	add	r2, sp, #36	; 0x24
 8010f16:	4621      	mov	r1, r4
 8010f18:	4628      	mov	r0, r5
 8010f1a:	f000 f9d3 	bl	80112c4 <_printf_common>
 8010f1e:	3001      	adds	r0, #1
 8010f20:	f040 808a 	bne.w	8011038 <_printf_float+0x1b0>
 8010f24:	f04f 30ff 	mov.w	r0, #4294967295
 8010f28:	b00b      	add	sp, #44	; 0x2c
 8010f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f2e:	eeb4 0b40 	vcmp.f64	d0, d0
 8010f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f36:	d709      	bvc.n	8010f4c <_printf_float+0xc4>
 8010f38:	ee10 3a90 	vmov	r3, s1
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	bfbc      	itt	lt
 8010f40:	232d      	movlt	r3, #45	; 0x2d
 8010f42:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010f46:	487e      	ldr	r0, [pc, #504]	; (8011140 <_printf_float+0x2b8>)
 8010f48:	4b7e      	ldr	r3, [pc, #504]	; (8011144 <_printf_float+0x2bc>)
 8010f4a:	e7d5      	b.n	8010ef8 <_printf_float+0x70>
 8010f4c:	6863      	ldr	r3, [r4, #4]
 8010f4e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8010f52:	9104      	str	r1, [sp, #16]
 8010f54:	1c59      	adds	r1, r3, #1
 8010f56:	d13c      	bne.n	8010fd2 <_printf_float+0x14a>
 8010f58:	2306      	movs	r3, #6
 8010f5a:	6063      	str	r3, [r4, #4]
 8010f5c:	2300      	movs	r3, #0
 8010f5e:	9303      	str	r3, [sp, #12]
 8010f60:	ab08      	add	r3, sp, #32
 8010f62:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8010f66:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010f6a:	ab07      	add	r3, sp, #28
 8010f6c:	6861      	ldr	r1, [r4, #4]
 8010f6e:	9300      	str	r3, [sp, #0]
 8010f70:	6022      	str	r2, [r4, #0]
 8010f72:	f10d 031b 	add.w	r3, sp, #27
 8010f76:	4628      	mov	r0, r5
 8010f78:	f7ff fef4 	bl	8010d64 <__cvt>
 8010f7c:	9b04      	ldr	r3, [sp, #16]
 8010f7e:	9907      	ldr	r1, [sp, #28]
 8010f80:	2b47      	cmp	r3, #71	; 0x47
 8010f82:	4680      	mov	r8, r0
 8010f84:	d108      	bne.n	8010f98 <_printf_float+0x110>
 8010f86:	1cc8      	adds	r0, r1, #3
 8010f88:	db02      	blt.n	8010f90 <_printf_float+0x108>
 8010f8a:	6863      	ldr	r3, [r4, #4]
 8010f8c:	4299      	cmp	r1, r3
 8010f8e:	dd41      	ble.n	8011014 <_printf_float+0x18c>
 8010f90:	f1a9 0902 	sub.w	r9, r9, #2
 8010f94:	fa5f f989 	uxtb.w	r9, r9
 8010f98:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8010f9c:	d820      	bhi.n	8010fe0 <_printf_float+0x158>
 8010f9e:	3901      	subs	r1, #1
 8010fa0:	464a      	mov	r2, r9
 8010fa2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010fa6:	9107      	str	r1, [sp, #28]
 8010fa8:	f7ff ff2e 	bl	8010e08 <__exponent>
 8010fac:	9a08      	ldr	r2, [sp, #32]
 8010fae:	9004      	str	r0, [sp, #16]
 8010fb0:	1813      	adds	r3, r2, r0
 8010fb2:	2a01      	cmp	r2, #1
 8010fb4:	6123      	str	r3, [r4, #16]
 8010fb6:	dc02      	bgt.n	8010fbe <_printf_float+0x136>
 8010fb8:	6822      	ldr	r2, [r4, #0]
 8010fba:	07d2      	lsls	r2, r2, #31
 8010fbc:	d501      	bpl.n	8010fc2 <_printf_float+0x13a>
 8010fbe:	3301      	adds	r3, #1
 8010fc0:	6123      	str	r3, [r4, #16]
 8010fc2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d0a2      	beq.n	8010f10 <_printf_float+0x88>
 8010fca:	232d      	movs	r3, #45	; 0x2d
 8010fcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010fd0:	e79e      	b.n	8010f10 <_printf_float+0x88>
 8010fd2:	9904      	ldr	r1, [sp, #16]
 8010fd4:	2947      	cmp	r1, #71	; 0x47
 8010fd6:	d1c1      	bne.n	8010f5c <_printf_float+0xd4>
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d1bf      	bne.n	8010f5c <_printf_float+0xd4>
 8010fdc:	2301      	movs	r3, #1
 8010fde:	e7bc      	b.n	8010f5a <_printf_float+0xd2>
 8010fe0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8010fe4:	d118      	bne.n	8011018 <_printf_float+0x190>
 8010fe6:	2900      	cmp	r1, #0
 8010fe8:	6863      	ldr	r3, [r4, #4]
 8010fea:	dd0b      	ble.n	8011004 <_printf_float+0x17c>
 8010fec:	6121      	str	r1, [r4, #16]
 8010fee:	b913      	cbnz	r3, 8010ff6 <_printf_float+0x16e>
 8010ff0:	6822      	ldr	r2, [r4, #0]
 8010ff2:	07d0      	lsls	r0, r2, #31
 8010ff4:	d502      	bpl.n	8010ffc <_printf_float+0x174>
 8010ff6:	3301      	adds	r3, #1
 8010ff8:	440b      	add	r3, r1
 8010ffa:	6123      	str	r3, [r4, #16]
 8010ffc:	2300      	movs	r3, #0
 8010ffe:	65a1      	str	r1, [r4, #88]	; 0x58
 8011000:	9304      	str	r3, [sp, #16]
 8011002:	e7de      	b.n	8010fc2 <_printf_float+0x13a>
 8011004:	b913      	cbnz	r3, 801100c <_printf_float+0x184>
 8011006:	6822      	ldr	r2, [r4, #0]
 8011008:	07d2      	lsls	r2, r2, #31
 801100a:	d501      	bpl.n	8011010 <_printf_float+0x188>
 801100c:	3302      	adds	r3, #2
 801100e:	e7f4      	b.n	8010ffa <_printf_float+0x172>
 8011010:	2301      	movs	r3, #1
 8011012:	e7f2      	b.n	8010ffa <_printf_float+0x172>
 8011014:	f04f 0967 	mov.w	r9, #103	; 0x67
 8011018:	9b08      	ldr	r3, [sp, #32]
 801101a:	4299      	cmp	r1, r3
 801101c:	db05      	blt.n	801102a <_printf_float+0x1a2>
 801101e:	6823      	ldr	r3, [r4, #0]
 8011020:	6121      	str	r1, [r4, #16]
 8011022:	07d8      	lsls	r0, r3, #31
 8011024:	d5ea      	bpl.n	8010ffc <_printf_float+0x174>
 8011026:	1c4b      	adds	r3, r1, #1
 8011028:	e7e7      	b.n	8010ffa <_printf_float+0x172>
 801102a:	2900      	cmp	r1, #0
 801102c:	bfd4      	ite	le
 801102e:	f1c1 0202 	rsble	r2, r1, #2
 8011032:	2201      	movgt	r2, #1
 8011034:	4413      	add	r3, r2
 8011036:	e7e0      	b.n	8010ffa <_printf_float+0x172>
 8011038:	6823      	ldr	r3, [r4, #0]
 801103a:	055a      	lsls	r2, r3, #21
 801103c:	d407      	bmi.n	801104e <_printf_float+0x1c6>
 801103e:	6923      	ldr	r3, [r4, #16]
 8011040:	4642      	mov	r2, r8
 8011042:	4631      	mov	r1, r6
 8011044:	4628      	mov	r0, r5
 8011046:	47b8      	blx	r7
 8011048:	3001      	adds	r0, #1
 801104a:	d12a      	bne.n	80110a2 <_printf_float+0x21a>
 801104c:	e76a      	b.n	8010f24 <_printf_float+0x9c>
 801104e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8011052:	f240 80e2 	bls.w	801121a <_printf_float+0x392>
 8011056:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801105a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801105e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011062:	d133      	bne.n	80110cc <_printf_float+0x244>
 8011064:	4a38      	ldr	r2, [pc, #224]	; (8011148 <_printf_float+0x2c0>)
 8011066:	2301      	movs	r3, #1
 8011068:	4631      	mov	r1, r6
 801106a:	4628      	mov	r0, r5
 801106c:	47b8      	blx	r7
 801106e:	3001      	adds	r0, #1
 8011070:	f43f af58 	beq.w	8010f24 <_printf_float+0x9c>
 8011074:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8011078:	429a      	cmp	r2, r3
 801107a:	db02      	blt.n	8011082 <_printf_float+0x1fa>
 801107c:	6823      	ldr	r3, [r4, #0]
 801107e:	07d8      	lsls	r0, r3, #31
 8011080:	d50f      	bpl.n	80110a2 <_printf_float+0x21a>
 8011082:	4653      	mov	r3, sl
 8011084:	465a      	mov	r2, fp
 8011086:	4631      	mov	r1, r6
 8011088:	4628      	mov	r0, r5
 801108a:	47b8      	blx	r7
 801108c:	3001      	adds	r0, #1
 801108e:	f43f af49 	beq.w	8010f24 <_printf_float+0x9c>
 8011092:	f04f 0800 	mov.w	r8, #0
 8011096:	f104 091a 	add.w	r9, r4, #26
 801109a:	9b08      	ldr	r3, [sp, #32]
 801109c:	3b01      	subs	r3, #1
 801109e:	4543      	cmp	r3, r8
 80110a0:	dc09      	bgt.n	80110b6 <_printf_float+0x22e>
 80110a2:	6823      	ldr	r3, [r4, #0]
 80110a4:	079b      	lsls	r3, r3, #30
 80110a6:	f100 8108 	bmi.w	80112ba <_printf_float+0x432>
 80110aa:	68e0      	ldr	r0, [r4, #12]
 80110ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80110ae:	4298      	cmp	r0, r3
 80110b0:	bfb8      	it	lt
 80110b2:	4618      	movlt	r0, r3
 80110b4:	e738      	b.n	8010f28 <_printf_float+0xa0>
 80110b6:	2301      	movs	r3, #1
 80110b8:	464a      	mov	r2, r9
 80110ba:	4631      	mov	r1, r6
 80110bc:	4628      	mov	r0, r5
 80110be:	47b8      	blx	r7
 80110c0:	3001      	adds	r0, #1
 80110c2:	f43f af2f 	beq.w	8010f24 <_printf_float+0x9c>
 80110c6:	f108 0801 	add.w	r8, r8, #1
 80110ca:	e7e6      	b.n	801109a <_printf_float+0x212>
 80110cc:	9b07      	ldr	r3, [sp, #28]
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	dc3c      	bgt.n	801114c <_printf_float+0x2c4>
 80110d2:	4a1d      	ldr	r2, [pc, #116]	; (8011148 <_printf_float+0x2c0>)
 80110d4:	2301      	movs	r3, #1
 80110d6:	4631      	mov	r1, r6
 80110d8:	4628      	mov	r0, r5
 80110da:	47b8      	blx	r7
 80110dc:	3001      	adds	r0, #1
 80110de:	f43f af21 	beq.w	8010f24 <_printf_float+0x9c>
 80110e2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80110e6:	4313      	orrs	r3, r2
 80110e8:	d102      	bne.n	80110f0 <_printf_float+0x268>
 80110ea:	6823      	ldr	r3, [r4, #0]
 80110ec:	07d9      	lsls	r1, r3, #31
 80110ee:	d5d8      	bpl.n	80110a2 <_printf_float+0x21a>
 80110f0:	4653      	mov	r3, sl
 80110f2:	465a      	mov	r2, fp
 80110f4:	4631      	mov	r1, r6
 80110f6:	4628      	mov	r0, r5
 80110f8:	47b8      	blx	r7
 80110fa:	3001      	adds	r0, #1
 80110fc:	f43f af12 	beq.w	8010f24 <_printf_float+0x9c>
 8011100:	f04f 0900 	mov.w	r9, #0
 8011104:	f104 0a1a 	add.w	sl, r4, #26
 8011108:	9b07      	ldr	r3, [sp, #28]
 801110a:	425b      	negs	r3, r3
 801110c:	454b      	cmp	r3, r9
 801110e:	dc01      	bgt.n	8011114 <_printf_float+0x28c>
 8011110:	9b08      	ldr	r3, [sp, #32]
 8011112:	e795      	b.n	8011040 <_printf_float+0x1b8>
 8011114:	2301      	movs	r3, #1
 8011116:	4652      	mov	r2, sl
 8011118:	4631      	mov	r1, r6
 801111a:	4628      	mov	r0, r5
 801111c:	47b8      	blx	r7
 801111e:	3001      	adds	r0, #1
 8011120:	f43f af00 	beq.w	8010f24 <_printf_float+0x9c>
 8011124:	f109 0901 	add.w	r9, r9, #1
 8011128:	e7ee      	b.n	8011108 <_printf_float+0x280>
 801112a:	bf00      	nop
 801112c:	f3af 8000 	nop.w
 8011130:	ffffffff 	.word	0xffffffff
 8011134:	7fefffff 	.word	0x7fefffff
 8011138:	080134fc 	.word	0x080134fc
 801113c:	08013500 	.word	0x08013500
 8011140:	08013508 	.word	0x08013508
 8011144:	08013504 	.word	0x08013504
 8011148:	0801350c 	.word	0x0801350c
 801114c:	9a08      	ldr	r2, [sp, #32]
 801114e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011150:	429a      	cmp	r2, r3
 8011152:	bfa8      	it	ge
 8011154:	461a      	movge	r2, r3
 8011156:	2a00      	cmp	r2, #0
 8011158:	4691      	mov	r9, r2
 801115a:	dc38      	bgt.n	80111ce <_printf_float+0x346>
 801115c:	2300      	movs	r3, #0
 801115e:	9305      	str	r3, [sp, #20]
 8011160:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011164:	f104 021a 	add.w	r2, r4, #26
 8011168:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801116a:	9905      	ldr	r1, [sp, #20]
 801116c:	9304      	str	r3, [sp, #16]
 801116e:	eba3 0309 	sub.w	r3, r3, r9
 8011172:	428b      	cmp	r3, r1
 8011174:	dc33      	bgt.n	80111de <_printf_float+0x356>
 8011176:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801117a:	429a      	cmp	r2, r3
 801117c:	db3c      	blt.n	80111f8 <_printf_float+0x370>
 801117e:	6823      	ldr	r3, [r4, #0]
 8011180:	07da      	lsls	r2, r3, #31
 8011182:	d439      	bmi.n	80111f8 <_printf_float+0x370>
 8011184:	9b08      	ldr	r3, [sp, #32]
 8011186:	9a04      	ldr	r2, [sp, #16]
 8011188:	9907      	ldr	r1, [sp, #28]
 801118a:	1a9a      	subs	r2, r3, r2
 801118c:	eba3 0901 	sub.w	r9, r3, r1
 8011190:	4591      	cmp	r9, r2
 8011192:	bfa8      	it	ge
 8011194:	4691      	movge	r9, r2
 8011196:	f1b9 0f00 	cmp.w	r9, #0
 801119a:	dc35      	bgt.n	8011208 <_printf_float+0x380>
 801119c:	f04f 0800 	mov.w	r8, #0
 80111a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80111a4:	f104 0a1a 	add.w	sl, r4, #26
 80111a8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80111ac:	1a9b      	subs	r3, r3, r2
 80111ae:	eba3 0309 	sub.w	r3, r3, r9
 80111b2:	4543      	cmp	r3, r8
 80111b4:	f77f af75 	ble.w	80110a2 <_printf_float+0x21a>
 80111b8:	2301      	movs	r3, #1
 80111ba:	4652      	mov	r2, sl
 80111bc:	4631      	mov	r1, r6
 80111be:	4628      	mov	r0, r5
 80111c0:	47b8      	blx	r7
 80111c2:	3001      	adds	r0, #1
 80111c4:	f43f aeae 	beq.w	8010f24 <_printf_float+0x9c>
 80111c8:	f108 0801 	add.w	r8, r8, #1
 80111cc:	e7ec      	b.n	80111a8 <_printf_float+0x320>
 80111ce:	4613      	mov	r3, r2
 80111d0:	4631      	mov	r1, r6
 80111d2:	4642      	mov	r2, r8
 80111d4:	4628      	mov	r0, r5
 80111d6:	47b8      	blx	r7
 80111d8:	3001      	adds	r0, #1
 80111da:	d1bf      	bne.n	801115c <_printf_float+0x2d4>
 80111dc:	e6a2      	b.n	8010f24 <_printf_float+0x9c>
 80111de:	2301      	movs	r3, #1
 80111e0:	4631      	mov	r1, r6
 80111e2:	4628      	mov	r0, r5
 80111e4:	9204      	str	r2, [sp, #16]
 80111e6:	47b8      	blx	r7
 80111e8:	3001      	adds	r0, #1
 80111ea:	f43f ae9b 	beq.w	8010f24 <_printf_float+0x9c>
 80111ee:	9b05      	ldr	r3, [sp, #20]
 80111f0:	9a04      	ldr	r2, [sp, #16]
 80111f2:	3301      	adds	r3, #1
 80111f4:	9305      	str	r3, [sp, #20]
 80111f6:	e7b7      	b.n	8011168 <_printf_float+0x2e0>
 80111f8:	4653      	mov	r3, sl
 80111fa:	465a      	mov	r2, fp
 80111fc:	4631      	mov	r1, r6
 80111fe:	4628      	mov	r0, r5
 8011200:	47b8      	blx	r7
 8011202:	3001      	adds	r0, #1
 8011204:	d1be      	bne.n	8011184 <_printf_float+0x2fc>
 8011206:	e68d      	b.n	8010f24 <_printf_float+0x9c>
 8011208:	9a04      	ldr	r2, [sp, #16]
 801120a:	464b      	mov	r3, r9
 801120c:	4442      	add	r2, r8
 801120e:	4631      	mov	r1, r6
 8011210:	4628      	mov	r0, r5
 8011212:	47b8      	blx	r7
 8011214:	3001      	adds	r0, #1
 8011216:	d1c1      	bne.n	801119c <_printf_float+0x314>
 8011218:	e684      	b.n	8010f24 <_printf_float+0x9c>
 801121a:	9a08      	ldr	r2, [sp, #32]
 801121c:	2a01      	cmp	r2, #1
 801121e:	dc01      	bgt.n	8011224 <_printf_float+0x39c>
 8011220:	07db      	lsls	r3, r3, #31
 8011222:	d537      	bpl.n	8011294 <_printf_float+0x40c>
 8011224:	2301      	movs	r3, #1
 8011226:	4642      	mov	r2, r8
 8011228:	4631      	mov	r1, r6
 801122a:	4628      	mov	r0, r5
 801122c:	47b8      	blx	r7
 801122e:	3001      	adds	r0, #1
 8011230:	f43f ae78 	beq.w	8010f24 <_printf_float+0x9c>
 8011234:	4653      	mov	r3, sl
 8011236:	465a      	mov	r2, fp
 8011238:	4631      	mov	r1, r6
 801123a:	4628      	mov	r0, r5
 801123c:	47b8      	blx	r7
 801123e:	3001      	adds	r0, #1
 8011240:	f43f ae70 	beq.w	8010f24 <_printf_float+0x9c>
 8011244:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8011248:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801124c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011250:	d01b      	beq.n	801128a <_printf_float+0x402>
 8011252:	9b08      	ldr	r3, [sp, #32]
 8011254:	f108 0201 	add.w	r2, r8, #1
 8011258:	3b01      	subs	r3, #1
 801125a:	4631      	mov	r1, r6
 801125c:	4628      	mov	r0, r5
 801125e:	47b8      	blx	r7
 8011260:	3001      	adds	r0, #1
 8011262:	d10e      	bne.n	8011282 <_printf_float+0x3fa>
 8011264:	e65e      	b.n	8010f24 <_printf_float+0x9c>
 8011266:	2301      	movs	r3, #1
 8011268:	464a      	mov	r2, r9
 801126a:	4631      	mov	r1, r6
 801126c:	4628      	mov	r0, r5
 801126e:	47b8      	blx	r7
 8011270:	3001      	adds	r0, #1
 8011272:	f43f ae57 	beq.w	8010f24 <_printf_float+0x9c>
 8011276:	f108 0801 	add.w	r8, r8, #1
 801127a:	9b08      	ldr	r3, [sp, #32]
 801127c:	3b01      	subs	r3, #1
 801127e:	4543      	cmp	r3, r8
 8011280:	dcf1      	bgt.n	8011266 <_printf_float+0x3de>
 8011282:	9b04      	ldr	r3, [sp, #16]
 8011284:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011288:	e6db      	b.n	8011042 <_printf_float+0x1ba>
 801128a:	f04f 0800 	mov.w	r8, #0
 801128e:	f104 091a 	add.w	r9, r4, #26
 8011292:	e7f2      	b.n	801127a <_printf_float+0x3f2>
 8011294:	2301      	movs	r3, #1
 8011296:	4642      	mov	r2, r8
 8011298:	e7df      	b.n	801125a <_printf_float+0x3d2>
 801129a:	2301      	movs	r3, #1
 801129c:	464a      	mov	r2, r9
 801129e:	4631      	mov	r1, r6
 80112a0:	4628      	mov	r0, r5
 80112a2:	47b8      	blx	r7
 80112a4:	3001      	adds	r0, #1
 80112a6:	f43f ae3d 	beq.w	8010f24 <_printf_float+0x9c>
 80112aa:	f108 0801 	add.w	r8, r8, #1
 80112ae:	68e3      	ldr	r3, [r4, #12]
 80112b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80112b2:	1a5b      	subs	r3, r3, r1
 80112b4:	4543      	cmp	r3, r8
 80112b6:	dcf0      	bgt.n	801129a <_printf_float+0x412>
 80112b8:	e6f7      	b.n	80110aa <_printf_float+0x222>
 80112ba:	f04f 0800 	mov.w	r8, #0
 80112be:	f104 0919 	add.w	r9, r4, #25
 80112c2:	e7f4      	b.n	80112ae <_printf_float+0x426>

080112c4 <_printf_common>:
 80112c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80112c8:	4616      	mov	r6, r2
 80112ca:	4699      	mov	r9, r3
 80112cc:	688a      	ldr	r2, [r1, #8]
 80112ce:	690b      	ldr	r3, [r1, #16]
 80112d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80112d4:	4293      	cmp	r3, r2
 80112d6:	bfb8      	it	lt
 80112d8:	4613      	movlt	r3, r2
 80112da:	6033      	str	r3, [r6, #0]
 80112dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80112e0:	4607      	mov	r7, r0
 80112e2:	460c      	mov	r4, r1
 80112e4:	b10a      	cbz	r2, 80112ea <_printf_common+0x26>
 80112e6:	3301      	adds	r3, #1
 80112e8:	6033      	str	r3, [r6, #0]
 80112ea:	6823      	ldr	r3, [r4, #0]
 80112ec:	0699      	lsls	r1, r3, #26
 80112ee:	bf42      	ittt	mi
 80112f0:	6833      	ldrmi	r3, [r6, #0]
 80112f2:	3302      	addmi	r3, #2
 80112f4:	6033      	strmi	r3, [r6, #0]
 80112f6:	6825      	ldr	r5, [r4, #0]
 80112f8:	f015 0506 	ands.w	r5, r5, #6
 80112fc:	d106      	bne.n	801130c <_printf_common+0x48>
 80112fe:	f104 0a19 	add.w	sl, r4, #25
 8011302:	68e3      	ldr	r3, [r4, #12]
 8011304:	6832      	ldr	r2, [r6, #0]
 8011306:	1a9b      	subs	r3, r3, r2
 8011308:	42ab      	cmp	r3, r5
 801130a:	dc26      	bgt.n	801135a <_printf_common+0x96>
 801130c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011310:	1e13      	subs	r3, r2, #0
 8011312:	6822      	ldr	r2, [r4, #0]
 8011314:	bf18      	it	ne
 8011316:	2301      	movne	r3, #1
 8011318:	0692      	lsls	r2, r2, #26
 801131a:	d42b      	bmi.n	8011374 <_printf_common+0xb0>
 801131c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011320:	4649      	mov	r1, r9
 8011322:	4638      	mov	r0, r7
 8011324:	47c0      	blx	r8
 8011326:	3001      	adds	r0, #1
 8011328:	d01e      	beq.n	8011368 <_printf_common+0xa4>
 801132a:	6823      	ldr	r3, [r4, #0]
 801132c:	68e5      	ldr	r5, [r4, #12]
 801132e:	6832      	ldr	r2, [r6, #0]
 8011330:	f003 0306 	and.w	r3, r3, #6
 8011334:	2b04      	cmp	r3, #4
 8011336:	bf08      	it	eq
 8011338:	1aad      	subeq	r5, r5, r2
 801133a:	68a3      	ldr	r3, [r4, #8]
 801133c:	6922      	ldr	r2, [r4, #16]
 801133e:	bf0c      	ite	eq
 8011340:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011344:	2500      	movne	r5, #0
 8011346:	4293      	cmp	r3, r2
 8011348:	bfc4      	itt	gt
 801134a:	1a9b      	subgt	r3, r3, r2
 801134c:	18ed      	addgt	r5, r5, r3
 801134e:	2600      	movs	r6, #0
 8011350:	341a      	adds	r4, #26
 8011352:	42b5      	cmp	r5, r6
 8011354:	d11a      	bne.n	801138c <_printf_common+0xc8>
 8011356:	2000      	movs	r0, #0
 8011358:	e008      	b.n	801136c <_printf_common+0xa8>
 801135a:	2301      	movs	r3, #1
 801135c:	4652      	mov	r2, sl
 801135e:	4649      	mov	r1, r9
 8011360:	4638      	mov	r0, r7
 8011362:	47c0      	blx	r8
 8011364:	3001      	adds	r0, #1
 8011366:	d103      	bne.n	8011370 <_printf_common+0xac>
 8011368:	f04f 30ff 	mov.w	r0, #4294967295
 801136c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011370:	3501      	adds	r5, #1
 8011372:	e7c6      	b.n	8011302 <_printf_common+0x3e>
 8011374:	18e1      	adds	r1, r4, r3
 8011376:	1c5a      	adds	r2, r3, #1
 8011378:	2030      	movs	r0, #48	; 0x30
 801137a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801137e:	4422      	add	r2, r4
 8011380:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011384:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011388:	3302      	adds	r3, #2
 801138a:	e7c7      	b.n	801131c <_printf_common+0x58>
 801138c:	2301      	movs	r3, #1
 801138e:	4622      	mov	r2, r4
 8011390:	4649      	mov	r1, r9
 8011392:	4638      	mov	r0, r7
 8011394:	47c0      	blx	r8
 8011396:	3001      	adds	r0, #1
 8011398:	d0e6      	beq.n	8011368 <_printf_common+0xa4>
 801139a:	3601      	adds	r6, #1
 801139c:	e7d9      	b.n	8011352 <_printf_common+0x8e>
	...

080113a0 <_printf_i>:
 80113a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80113a4:	7e0f      	ldrb	r7, [r1, #24]
 80113a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80113a8:	2f78      	cmp	r7, #120	; 0x78
 80113aa:	4691      	mov	r9, r2
 80113ac:	4680      	mov	r8, r0
 80113ae:	460c      	mov	r4, r1
 80113b0:	469a      	mov	sl, r3
 80113b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80113b6:	d807      	bhi.n	80113c8 <_printf_i+0x28>
 80113b8:	2f62      	cmp	r7, #98	; 0x62
 80113ba:	d80a      	bhi.n	80113d2 <_printf_i+0x32>
 80113bc:	2f00      	cmp	r7, #0
 80113be:	f000 80d8 	beq.w	8011572 <_printf_i+0x1d2>
 80113c2:	2f58      	cmp	r7, #88	; 0x58
 80113c4:	f000 80a3 	beq.w	801150e <_printf_i+0x16e>
 80113c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80113cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80113d0:	e03a      	b.n	8011448 <_printf_i+0xa8>
 80113d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80113d6:	2b15      	cmp	r3, #21
 80113d8:	d8f6      	bhi.n	80113c8 <_printf_i+0x28>
 80113da:	a101      	add	r1, pc, #4	; (adr r1, 80113e0 <_printf_i+0x40>)
 80113dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80113e0:	08011439 	.word	0x08011439
 80113e4:	0801144d 	.word	0x0801144d
 80113e8:	080113c9 	.word	0x080113c9
 80113ec:	080113c9 	.word	0x080113c9
 80113f0:	080113c9 	.word	0x080113c9
 80113f4:	080113c9 	.word	0x080113c9
 80113f8:	0801144d 	.word	0x0801144d
 80113fc:	080113c9 	.word	0x080113c9
 8011400:	080113c9 	.word	0x080113c9
 8011404:	080113c9 	.word	0x080113c9
 8011408:	080113c9 	.word	0x080113c9
 801140c:	08011559 	.word	0x08011559
 8011410:	0801147d 	.word	0x0801147d
 8011414:	0801153b 	.word	0x0801153b
 8011418:	080113c9 	.word	0x080113c9
 801141c:	080113c9 	.word	0x080113c9
 8011420:	0801157b 	.word	0x0801157b
 8011424:	080113c9 	.word	0x080113c9
 8011428:	0801147d 	.word	0x0801147d
 801142c:	080113c9 	.word	0x080113c9
 8011430:	080113c9 	.word	0x080113c9
 8011434:	08011543 	.word	0x08011543
 8011438:	682b      	ldr	r3, [r5, #0]
 801143a:	1d1a      	adds	r2, r3, #4
 801143c:	681b      	ldr	r3, [r3, #0]
 801143e:	602a      	str	r2, [r5, #0]
 8011440:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011444:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011448:	2301      	movs	r3, #1
 801144a:	e0a3      	b.n	8011594 <_printf_i+0x1f4>
 801144c:	6820      	ldr	r0, [r4, #0]
 801144e:	6829      	ldr	r1, [r5, #0]
 8011450:	0606      	lsls	r6, r0, #24
 8011452:	f101 0304 	add.w	r3, r1, #4
 8011456:	d50a      	bpl.n	801146e <_printf_i+0xce>
 8011458:	680e      	ldr	r6, [r1, #0]
 801145a:	602b      	str	r3, [r5, #0]
 801145c:	2e00      	cmp	r6, #0
 801145e:	da03      	bge.n	8011468 <_printf_i+0xc8>
 8011460:	232d      	movs	r3, #45	; 0x2d
 8011462:	4276      	negs	r6, r6
 8011464:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011468:	485e      	ldr	r0, [pc, #376]	; (80115e4 <_printf_i+0x244>)
 801146a:	230a      	movs	r3, #10
 801146c:	e019      	b.n	80114a2 <_printf_i+0x102>
 801146e:	680e      	ldr	r6, [r1, #0]
 8011470:	602b      	str	r3, [r5, #0]
 8011472:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011476:	bf18      	it	ne
 8011478:	b236      	sxthne	r6, r6
 801147a:	e7ef      	b.n	801145c <_printf_i+0xbc>
 801147c:	682b      	ldr	r3, [r5, #0]
 801147e:	6820      	ldr	r0, [r4, #0]
 8011480:	1d19      	adds	r1, r3, #4
 8011482:	6029      	str	r1, [r5, #0]
 8011484:	0601      	lsls	r1, r0, #24
 8011486:	d501      	bpl.n	801148c <_printf_i+0xec>
 8011488:	681e      	ldr	r6, [r3, #0]
 801148a:	e002      	b.n	8011492 <_printf_i+0xf2>
 801148c:	0646      	lsls	r6, r0, #25
 801148e:	d5fb      	bpl.n	8011488 <_printf_i+0xe8>
 8011490:	881e      	ldrh	r6, [r3, #0]
 8011492:	4854      	ldr	r0, [pc, #336]	; (80115e4 <_printf_i+0x244>)
 8011494:	2f6f      	cmp	r7, #111	; 0x6f
 8011496:	bf0c      	ite	eq
 8011498:	2308      	moveq	r3, #8
 801149a:	230a      	movne	r3, #10
 801149c:	2100      	movs	r1, #0
 801149e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80114a2:	6865      	ldr	r5, [r4, #4]
 80114a4:	60a5      	str	r5, [r4, #8]
 80114a6:	2d00      	cmp	r5, #0
 80114a8:	bfa2      	ittt	ge
 80114aa:	6821      	ldrge	r1, [r4, #0]
 80114ac:	f021 0104 	bicge.w	r1, r1, #4
 80114b0:	6021      	strge	r1, [r4, #0]
 80114b2:	b90e      	cbnz	r6, 80114b8 <_printf_i+0x118>
 80114b4:	2d00      	cmp	r5, #0
 80114b6:	d04d      	beq.n	8011554 <_printf_i+0x1b4>
 80114b8:	4615      	mov	r5, r2
 80114ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80114be:	fb03 6711 	mls	r7, r3, r1, r6
 80114c2:	5dc7      	ldrb	r7, [r0, r7]
 80114c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80114c8:	4637      	mov	r7, r6
 80114ca:	42bb      	cmp	r3, r7
 80114cc:	460e      	mov	r6, r1
 80114ce:	d9f4      	bls.n	80114ba <_printf_i+0x11a>
 80114d0:	2b08      	cmp	r3, #8
 80114d2:	d10b      	bne.n	80114ec <_printf_i+0x14c>
 80114d4:	6823      	ldr	r3, [r4, #0]
 80114d6:	07de      	lsls	r6, r3, #31
 80114d8:	d508      	bpl.n	80114ec <_printf_i+0x14c>
 80114da:	6923      	ldr	r3, [r4, #16]
 80114dc:	6861      	ldr	r1, [r4, #4]
 80114de:	4299      	cmp	r1, r3
 80114e0:	bfde      	ittt	le
 80114e2:	2330      	movle	r3, #48	; 0x30
 80114e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80114e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80114ec:	1b52      	subs	r2, r2, r5
 80114ee:	6122      	str	r2, [r4, #16]
 80114f0:	f8cd a000 	str.w	sl, [sp]
 80114f4:	464b      	mov	r3, r9
 80114f6:	aa03      	add	r2, sp, #12
 80114f8:	4621      	mov	r1, r4
 80114fa:	4640      	mov	r0, r8
 80114fc:	f7ff fee2 	bl	80112c4 <_printf_common>
 8011500:	3001      	adds	r0, #1
 8011502:	d14c      	bne.n	801159e <_printf_i+0x1fe>
 8011504:	f04f 30ff 	mov.w	r0, #4294967295
 8011508:	b004      	add	sp, #16
 801150a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801150e:	4835      	ldr	r0, [pc, #212]	; (80115e4 <_printf_i+0x244>)
 8011510:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011514:	6829      	ldr	r1, [r5, #0]
 8011516:	6823      	ldr	r3, [r4, #0]
 8011518:	f851 6b04 	ldr.w	r6, [r1], #4
 801151c:	6029      	str	r1, [r5, #0]
 801151e:	061d      	lsls	r5, r3, #24
 8011520:	d514      	bpl.n	801154c <_printf_i+0x1ac>
 8011522:	07df      	lsls	r7, r3, #31
 8011524:	bf44      	itt	mi
 8011526:	f043 0320 	orrmi.w	r3, r3, #32
 801152a:	6023      	strmi	r3, [r4, #0]
 801152c:	b91e      	cbnz	r6, 8011536 <_printf_i+0x196>
 801152e:	6823      	ldr	r3, [r4, #0]
 8011530:	f023 0320 	bic.w	r3, r3, #32
 8011534:	6023      	str	r3, [r4, #0]
 8011536:	2310      	movs	r3, #16
 8011538:	e7b0      	b.n	801149c <_printf_i+0xfc>
 801153a:	6823      	ldr	r3, [r4, #0]
 801153c:	f043 0320 	orr.w	r3, r3, #32
 8011540:	6023      	str	r3, [r4, #0]
 8011542:	2378      	movs	r3, #120	; 0x78
 8011544:	4828      	ldr	r0, [pc, #160]	; (80115e8 <_printf_i+0x248>)
 8011546:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801154a:	e7e3      	b.n	8011514 <_printf_i+0x174>
 801154c:	0659      	lsls	r1, r3, #25
 801154e:	bf48      	it	mi
 8011550:	b2b6      	uxthmi	r6, r6
 8011552:	e7e6      	b.n	8011522 <_printf_i+0x182>
 8011554:	4615      	mov	r5, r2
 8011556:	e7bb      	b.n	80114d0 <_printf_i+0x130>
 8011558:	682b      	ldr	r3, [r5, #0]
 801155a:	6826      	ldr	r6, [r4, #0]
 801155c:	6961      	ldr	r1, [r4, #20]
 801155e:	1d18      	adds	r0, r3, #4
 8011560:	6028      	str	r0, [r5, #0]
 8011562:	0635      	lsls	r5, r6, #24
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	d501      	bpl.n	801156c <_printf_i+0x1cc>
 8011568:	6019      	str	r1, [r3, #0]
 801156a:	e002      	b.n	8011572 <_printf_i+0x1d2>
 801156c:	0670      	lsls	r0, r6, #25
 801156e:	d5fb      	bpl.n	8011568 <_printf_i+0x1c8>
 8011570:	8019      	strh	r1, [r3, #0]
 8011572:	2300      	movs	r3, #0
 8011574:	6123      	str	r3, [r4, #16]
 8011576:	4615      	mov	r5, r2
 8011578:	e7ba      	b.n	80114f0 <_printf_i+0x150>
 801157a:	682b      	ldr	r3, [r5, #0]
 801157c:	1d1a      	adds	r2, r3, #4
 801157e:	602a      	str	r2, [r5, #0]
 8011580:	681d      	ldr	r5, [r3, #0]
 8011582:	6862      	ldr	r2, [r4, #4]
 8011584:	2100      	movs	r1, #0
 8011586:	4628      	mov	r0, r5
 8011588:	f7ee feb2 	bl	80002f0 <memchr>
 801158c:	b108      	cbz	r0, 8011592 <_printf_i+0x1f2>
 801158e:	1b40      	subs	r0, r0, r5
 8011590:	6060      	str	r0, [r4, #4]
 8011592:	6863      	ldr	r3, [r4, #4]
 8011594:	6123      	str	r3, [r4, #16]
 8011596:	2300      	movs	r3, #0
 8011598:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801159c:	e7a8      	b.n	80114f0 <_printf_i+0x150>
 801159e:	6923      	ldr	r3, [r4, #16]
 80115a0:	462a      	mov	r2, r5
 80115a2:	4649      	mov	r1, r9
 80115a4:	4640      	mov	r0, r8
 80115a6:	47d0      	blx	sl
 80115a8:	3001      	adds	r0, #1
 80115aa:	d0ab      	beq.n	8011504 <_printf_i+0x164>
 80115ac:	6823      	ldr	r3, [r4, #0]
 80115ae:	079b      	lsls	r3, r3, #30
 80115b0:	d413      	bmi.n	80115da <_printf_i+0x23a>
 80115b2:	68e0      	ldr	r0, [r4, #12]
 80115b4:	9b03      	ldr	r3, [sp, #12]
 80115b6:	4298      	cmp	r0, r3
 80115b8:	bfb8      	it	lt
 80115ba:	4618      	movlt	r0, r3
 80115bc:	e7a4      	b.n	8011508 <_printf_i+0x168>
 80115be:	2301      	movs	r3, #1
 80115c0:	4632      	mov	r2, r6
 80115c2:	4649      	mov	r1, r9
 80115c4:	4640      	mov	r0, r8
 80115c6:	47d0      	blx	sl
 80115c8:	3001      	adds	r0, #1
 80115ca:	d09b      	beq.n	8011504 <_printf_i+0x164>
 80115cc:	3501      	adds	r5, #1
 80115ce:	68e3      	ldr	r3, [r4, #12]
 80115d0:	9903      	ldr	r1, [sp, #12]
 80115d2:	1a5b      	subs	r3, r3, r1
 80115d4:	42ab      	cmp	r3, r5
 80115d6:	dcf2      	bgt.n	80115be <_printf_i+0x21e>
 80115d8:	e7eb      	b.n	80115b2 <_printf_i+0x212>
 80115da:	2500      	movs	r5, #0
 80115dc:	f104 0619 	add.w	r6, r4, #25
 80115e0:	e7f5      	b.n	80115ce <_printf_i+0x22e>
 80115e2:	bf00      	nop
 80115e4:	0801350e 	.word	0x0801350e
 80115e8:	0801351f 	.word	0x0801351f

080115ec <_sbrk_r>:
 80115ec:	b538      	push	{r3, r4, r5, lr}
 80115ee:	4d06      	ldr	r5, [pc, #24]	; (8011608 <_sbrk_r+0x1c>)
 80115f0:	2300      	movs	r3, #0
 80115f2:	4604      	mov	r4, r0
 80115f4:	4608      	mov	r0, r1
 80115f6:	602b      	str	r3, [r5, #0]
 80115f8:	f7ef fea8 	bl	800134c <_sbrk>
 80115fc:	1c43      	adds	r3, r0, #1
 80115fe:	d102      	bne.n	8011606 <_sbrk_r+0x1a>
 8011600:	682b      	ldr	r3, [r5, #0]
 8011602:	b103      	cbz	r3, 8011606 <_sbrk_r+0x1a>
 8011604:	6023      	str	r3, [r4, #0]
 8011606:	bd38      	pop	{r3, r4, r5, pc}
 8011608:	2400304c 	.word	0x2400304c

0801160c <quorem>:
 801160c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011610:	6903      	ldr	r3, [r0, #16]
 8011612:	690c      	ldr	r4, [r1, #16]
 8011614:	42a3      	cmp	r3, r4
 8011616:	4607      	mov	r7, r0
 8011618:	f2c0 8081 	blt.w	801171e <quorem+0x112>
 801161c:	3c01      	subs	r4, #1
 801161e:	f101 0814 	add.w	r8, r1, #20
 8011622:	f100 0514 	add.w	r5, r0, #20
 8011626:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801162a:	9301      	str	r3, [sp, #4]
 801162c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011630:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011634:	3301      	adds	r3, #1
 8011636:	429a      	cmp	r2, r3
 8011638:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801163c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011640:	fbb2 f6f3 	udiv	r6, r2, r3
 8011644:	d331      	bcc.n	80116aa <quorem+0x9e>
 8011646:	f04f 0e00 	mov.w	lr, #0
 801164a:	4640      	mov	r0, r8
 801164c:	46ac      	mov	ip, r5
 801164e:	46f2      	mov	sl, lr
 8011650:	f850 2b04 	ldr.w	r2, [r0], #4
 8011654:	b293      	uxth	r3, r2
 8011656:	fb06 e303 	mla	r3, r6, r3, lr
 801165a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801165e:	b29b      	uxth	r3, r3
 8011660:	ebaa 0303 	sub.w	r3, sl, r3
 8011664:	f8dc a000 	ldr.w	sl, [ip]
 8011668:	0c12      	lsrs	r2, r2, #16
 801166a:	fa13 f38a 	uxtah	r3, r3, sl
 801166e:	fb06 e202 	mla	r2, r6, r2, lr
 8011672:	9300      	str	r3, [sp, #0]
 8011674:	9b00      	ldr	r3, [sp, #0]
 8011676:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801167a:	b292      	uxth	r2, r2
 801167c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8011680:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011684:	f8bd 3000 	ldrh.w	r3, [sp]
 8011688:	4581      	cmp	r9, r0
 801168a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801168e:	f84c 3b04 	str.w	r3, [ip], #4
 8011692:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011696:	d2db      	bcs.n	8011650 <quorem+0x44>
 8011698:	f855 300b 	ldr.w	r3, [r5, fp]
 801169c:	b92b      	cbnz	r3, 80116aa <quorem+0x9e>
 801169e:	9b01      	ldr	r3, [sp, #4]
 80116a0:	3b04      	subs	r3, #4
 80116a2:	429d      	cmp	r5, r3
 80116a4:	461a      	mov	r2, r3
 80116a6:	d32e      	bcc.n	8011706 <quorem+0xfa>
 80116a8:	613c      	str	r4, [r7, #16]
 80116aa:	4638      	mov	r0, r7
 80116ac:	f001 f83c 	bl	8012728 <__mcmp>
 80116b0:	2800      	cmp	r0, #0
 80116b2:	db24      	blt.n	80116fe <quorem+0xf2>
 80116b4:	3601      	adds	r6, #1
 80116b6:	4628      	mov	r0, r5
 80116b8:	f04f 0c00 	mov.w	ip, #0
 80116bc:	f858 2b04 	ldr.w	r2, [r8], #4
 80116c0:	f8d0 e000 	ldr.w	lr, [r0]
 80116c4:	b293      	uxth	r3, r2
 80116c6:	ebac 0303 	sub.w	r3, ip, r3
 80116ca:	0c12      	lsrs	r2, r2, #16
 80116cc:	fa13 f38e 	uxtah	r3, r3, lr
 80116d0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80116d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80116d8:	b29b      	uxth	r3, r3
 80116da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80116de:	45c1      	cmp	r9, r8
 80116e0:	f840 3b04 	str.w	r3, [r0], #4
 80116e4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80116e8:	d2e8      	bcs.n	80116bc <quorem+0xb0>
 80116ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80116ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80116f2:	b922      	cbnz	r2, 80116fe <quorem+0xf2>
 80116f4:	3b04      	subs	r3, #4
 80116f6:	429d      	cmp	r5, r3
 80116f8:	461a      	mov	r2, r3
 80116fa:	d30a      	bcc.n	8011712 <quorem+0x106>
 80116fc:	613c      	str	r4, [r7, #16]
 80116fe:	4630      	mov	r0, r6
 8011700:	b003      	add	sp, #12
 8011702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011706:	6812      	ldr	r2, [r2, #0]
 8011708:	3b04      	subs	r3, #4
 801170a:	2a00      	cmp	r2, #0
 801170c:	d1cc      	bne.n	80116a8 <quorem+0x9c>
 801170e:	3c01      	subs	r4, #1
 8011710:	e7c7      	b.n	80116a2 <quorem+0x96>
 8011712:	6812      	ldr	r2, [r2, #0]
 8011714:	3b04      	subs	r3, #4
 8011716:	2a00      	cmp	r2, #0
 8011718:	d1f0      	bne.n	80116fc <quorem+0xf0>
 801171a:	3c01      	subs	r4, #1
 801171c:	e7eb      	b.n	80116f6 <quorem+0xea>
 801171e:	2000      	movs	r0, #0
 8011720:	e7ee      	b.n	8011700 <quorem+0xf4>
 8011722:	0000      	movs	r0, r0
 8011724:	0000      	movs	r0, r0
	...

08011728 <_dtoa_r>:
 8011728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801172c:	ed2d 8b02 	vpush	{d8}
 8011730:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011732:	b091      	sub	sp, #68	; 0x44
 8011734:	ed8d 0b02 	vstr	d0, [sp, #8]
 8011738:	ec59 8b10 	vmov	r8, r9, d0
 801173c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801173e:	9106      	str	r1, [sp, #24]
 8011740:	4606      	mov	r6, r0
 8011742:	9208      	str	r2, [sp, #32]
 8011744:	930c      	str	r3, [sp, #48]	; 0x30
 8011746:	b975      	cbnz	r5, 8011766 <_dtoa_r+0x3e>
 8011748:	2010      	movs	r0, #16
 801174a:	f7ff fa05 	bl	8010b58 <malloc>
 801174e:	4602      	mov	r2, r0
 8011750:	6270      	str	r0, [r6, #36]	; 0x24
 8011752:	b920      	cbnz	r0, 801175e <_dtoa_r+0x36>
 8011754:	4baa      	ldr	r3, [pc, #680]	; (8011a00 <_dtoa_r+0x2d8>)
 8011756:	21ea      	movs	r1, #234	; 0xea
 8011758:	48aa      	ldr	r0, [pc, #680]	; (8011a04 <_dtoa_r+0x2dc>)
 801175a:	f001 f8fd 	bl	8012958 <__assert_func>
 801175e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011762:	6005      	str	r5, [r0, #0]
 8011764:	60c5      	str	r5, [r0, #12]
 8011766:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8011768:	6819      	ldr	r1, [r3, #0]
 801176a:	b151      	cbz	r1, 8011782 <_dtoa_r+0x5a>
 801176c:	685a      	ldr	r2, [r3, #4]
 801176e:	604a      	str	r2, [r1, #4]
 8011770:	2301      	movs	r3, #1
 8011772:	4093      	lsls	r3, r2
 8011774:	608b      	str	r3, [r1, #8]
 8011776:	4630      	mov	r0, r6
 8011778:	f000 fd94 	bl	80122a4 <_Bfree>
 801177c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801177e:	2200      	movs	r2, #0
 8011780:	601a      	str	r2, [r3, #0]
 8011782:	f1b9 0300 	subs.w	r3, r9, #0
 8011786:	bfbb      	ittet	lt
 8011788:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801178c:	9303      	strlt	r3, [sp, #12]
 801178e:	2300      	movge	r3, #0
 8011790:	2201      	movlt	r2, #1
 8011792:	bfac      	ite	ge
 8011794:	6023      	strge	r3, [r4, #0]
 8011796:	6022      	strlt	r2, [r4, #0]
 8011798:	4b9b      	ldr	r3, [pc, #620]	; (8011a08 <_dtoa_r+0x2e0>)
 801179a:	9c03      	ldr	r4, [sp, #12]
 801179c:	43a3      	bics	r3, r4
 801179e:	d11c      	bne.n	80117da <_dtoa_r+0xb2>
 80117a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80117a2:	f242 730f 	movw	r3, #9999	; 0x270f
 80117a6:	6013      	str	r3, [r2, #0]
 80117a8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80117ac:	ea53 0308 	orrs.w	r3, r3, r8
 80117b0:	f000 84fd 	beq.w	80121ae <_dtoa_r+0xa86>
 80117b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80117b6:	b963      	cbnz	r3, 80117d2 <_dtoa_r+0xaa>
 80117b8:	4b94      	ldr	r3, [pc, #592]	; (8011a0c <_dtoa_r+0x2e4>)
 80117ba:	e01f      	b.n	80117fc <_dtoa_r+0xd4>
 80117bc:	4b94      	ldr	r3, [pc, #592]	; (8011a10 <_dtoa_r+0x2e8>)
 80117be:	9301      	str	r3, [sp, #4]
 80117c0:	3308      	adds	r3, #8
 80117c2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80117c4:	6013      	str	r3, [r2, #0]
 80117c6:	9801      	ldr	r0, [sp, #4]
 80117c8:	b011      	add	sp, #68	; 0x44
 80117ca:	ecbd 8b02 	vpop	{d8}
 80117ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117d2:	4b8e      	ldr	r3, [pc, #568]	; (8011a0c <_dtoa_r+0x2e4>)
 80117d4:	9301      	str	r3, [sp, #4]
 80117d6:	3303      	adds	r3, #3
 80117d8:	e7f3      	b.n	80117c2 <_dtoa_r+0x9a>
 80117da:	ed9d 8b02 	vldr	d8, [sp, #8]
 80117de:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80117e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117e6:	d10b      	bne.n	8011800 <_dtoa_r+0xd8>
 80117e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80117ea:	2301      	movs	r3, #1
 80117ec:	6013      	str	r3, [r2, #0]
 80117ee:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	f000 84d9 	beq.w	80121a8 <_dtoa_r+0xa80>
 80117f6:	4887      	ldr	r0, [pc, #540]	; (8011a14 <_dtoa_r+0x2ec>)
 80117f8:	6018      	str	r0, [r3, #0]
 80117fa:	1e43      	subs	r3, r0, #1
 80117fc:	9301      	str	r3, [sp, #4]
 80117fe:	e7e2      	b.n	80117c6 <_dtoa_r+0x9e>
 8011800:	a90f      	add	r1, sp, #60	; 0x3c
 8011802:	aa0e      	add	r2, sp, #56	; 0x38
 8011804:	4630      	mov	r0, r6
 8011806:	eeb0 0b48 	vmov.f64	d0, d8
 801180a:	f001 f833 	bl	8012874 <__d2b>
 801180e:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8011812:	4605      	mov	r5, r0
 8011814:	980e      	ldr	r0, [sp, #56]	; 0x38
 8011816:	2900      	cmp	r1, #0
 8011818:	d046      	beq.n	80118a8 <_dtoa_r+0x180>
 801181a:	ee18 4a90 	vmov	r4, s17
 801181e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8011822:	ec53 2b18 	vmov	r2, r3, d8
 8011826:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 801182a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801182e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8011832:	2400      	movs	r4, #0
 8011834:	ec43 2b16 	vmov	d6, r2, r3
 8011838:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 801183c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80119e8 <_dtoa_r+0x2c0>
 8011840:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011844:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 80119f0 <_dtoa_r+0x2c8>
 8011848:	eea7 6b05 	vfma.f64	d6, d7, d5
 801184c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80119f8 <_dtoa_r+0x2d0>
 8011850:	ee07 1a90 	vmov	s15, r1
 8011854:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8011858:	eeb0 7b46 	vmov.f64	d7, d6
 801185c:	eea4 7b05 	vfma.f64	d7, d4, d5
 8011860:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8011864:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8011868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801186c:	ee16 ba90 	vmov	fp, s13
 8011870:	940a      	str	r4, [sp, #40]	; 0x28
 8011872:	d508      	bpl.n	8011886 <_dtoa_r+0x15e>
 8011874:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8011878:	eeb4 6b47 	vcmp.f64	d6, d7
 801187c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011880:	bf18      	it	ne
 8011882:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8011886:	f1bb 0f16 	cmp.w	fp, #22
 801188a:	d82f      	bhi.n	80118ec <_dtoa_r+0x1c4>
 801188c:	4b62      	ldr	r3, [pc, #392]	; (8011a18 <_dtoa_r+0x2f0>)
 801188e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8011892:	ed93 7b00 	vldr	d7, [r3]
 8011896:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801189a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801189e:	d501      	bpl.n	80118a4 <_dtoa_r+0x17c>
 80118a0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80118a4:	2300      	movs	r3, #0
 80118a6:	e022      	b.n	80118ee <_dtoa_r+0x1c6>
 80118a8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80118aa:	4401      	add	r1, r0
 80118ac:	f201 4332 	addw	r3, r1, #1074	; 0x432
 80118b0:	2b20      	cmp	r3, #32
 80118b2:	bfc1      	itttt	gt
 80118b4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80118b8:	fa04 f303 	lslgt.w	r3, r4, r3
 80118bc:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 80118c0:	fa28 f804 	lsrgt.w	r8, r8, r4
 80118c4:	bfd6      	itet	le
 80118c6:	f1c3 0320 	rsble	r3, r3, #32
 80118ca:	ea43 0808 	orrgt.w	r8, r3, r8
 80118ce:	fa08 f803 	lslle.w	r8, r8, r3
 80118d2:	ee07 8a90 	vmov	s15, r8
 80118d6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80118da:	3901      	subs	r1, #1
 80118dc:	ee17 4a90 	vmov	r4, s15
 80118e0:	ec53 2b17 	vmov	r2, r3, d7
 80118e4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80118e8:	2401      	movs	r4, #1
 80118ea:	e7a3      	b.n	8011834 <_dtoa_r+0x10c>
 80118ec:	2301      	movs	r3, #1
 80118ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80118f0:	1a43      	subs	r3, r0, r1
 80118f2:	1e5a      	subs	r2, r3, #1
 80118f4:	bf45      	ittet	mi
 80118f6:	f1c3 0301 	rsbmi	r3, r3, #1
 80118fa:	9304      	strmi	r3, [sp, #16]
 80118fc:	2300      	movpl	r3, #0
 80118fe:	2300      	movmi	r3, #0
 8011900:	9205      	str	r2, [sp, #20]
 8011902:	bf54      	ite	pl
 8011904:	9304      	strpl	r3, [sp, #16]
 8011906:	9305      	strmi	r3, [sp, #20]
 8011908:	f1bb 0f00 	cmp.w	fp, #0
 801190c:	db18      	blt.n	8011940 <_dtoa_r+0x218>
 801190e:	9b05      	ldr	r3, [sp, #20]
 8011910:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8011914:	445b      	add	r3, fp
 8011916:	9305      	str	r3, [sp, #20]
 8011918:	2300      	movs	r3, #0
 801191a:	9a06      	ldr	r2, [sp, #24]
 801191c:	2a09      	cmp	r2, #9
 801191e:	d849      	bhi.n	80119b4 <_dtoa_r+0x28c>
 8011920:	2a05      	cmp	r2, #5
 8011922:	bfc4      	itt	gt
 8011924:	3a04      	subgt	r2, #4
 8011926:	9206      	strgt	r2, [sp, #24]
 8011928:	9a06      	ldr	r2, [sp, #24]
 801192a:	f1a2 0202 	sub.w	r2, r2, #2
 801192e:	bfcc      	ite	gt
 8011930:	2400      	movgt	r4, #0
 8011932:	2401      	movle	r4, #1
 8011934:	2a03      	cmp	r2, #3
 8011936:	d848      	bhi.n	80119ca <_dtoa_r+0x2a2>
 8011938:	e8df f002 	tbb	[pc, r2]
 801193c:	3a2c2e0b 	.word	0x3a2c2e0b
 8011940:	9b04      	ldr	r3, [sp, #16]
 8011942:	2200      	movs	r2, #0
 8011944:	eba3 030b 	sub.w	r3, r3, fp
 8011948:	9304      	str	r3, [sp, #16]
 801194a:	9209      	str	r2, [sp, #36]	; 0x24
 801194c:	f1cb 0300 	rsb	r3, fp, #0
 8011950:	e7e3      	b.n	801191a <_dtoa_r+0x1f2>
 8011952:	2200      	movs	r2, #0
 8011954:	9207      	str	r2, [sp, #28]
 8011956:	9a08      	ldr	r2, [sp, #32]
 8011958:	2a00      	cmp	r2, #0
 801195a:	dc39      	bgt.n	80119d0 <_dtoa_r+0x2a8>
 801195c:	f04f 0a01 	mov.w	sl, #1
 8011960:	46d1      	mov	r9, sl
 8011962:	4652      	mov	r2, sl
 8011964:	f8cd a020 	str.w	sl, [sp, #32]
 8011968:	6a77      	ldr	r7, [r6, #36]	; 0x24
 801196a:	2100      	movs	r1, #0
 801196c:	6079      	str	r1, [r7, #4]
 801196e:	2004      	movs	r0, #4
 8011970:	f100 0c14 	add.w	ip, r0, #20
 8011974:	4594      	cmp	ip, r2
 8011976:	6879      	ldr	r1, [r7, #4]
 8011978:	d92f      	bls.n	80119da <_dtoa_r+0x2b2>
 801197a:	4630      	mov	r0, r6
 801197c:	930d      	str	r3, [sp, #52]	; 0x34
 801197e:	f000 fc51 	bl	8012224 <_Balloc>
 8011982:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011984:	9001      	str	r0, [sp, #4]
 8011986:	4602      	mov	r2, r0
 8011988:	2800      	cmp	r0, #0
 801198a:	d149      	bne.n	8011a20 <_dtoa_r+0x2f8>
 801198c:	4b23      	ldr	r3, [pc, #140]	; (8011a1c <_dtoa_r+0x2f4>)
 801198e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8011992:	e6e1      	b.n	8011758 <_dtoa_r+0x30>
 8011994:	2201      	movs	r2, #1
 8011996:	e7dd      	b.n	8011954 <_dtoa_r+0x22c>
 8011998:	2200      	movs	r2, #0
 801199a:	9207      	str	r2, [sp, #28]
 801199c:	9a08      	ldr	r2, [sp, #32]
 801199e:	eb0b 0a02 	add.w	sl, fp, r2
 80119a2:	f10a 0901 	add.w	r9, sl, #1
 80119a6:	464a      	mov	r2, r9
 80119a8:	2a01      	cmp	r2, #1
 80119aa:	bfb8      	it	lt
 80119ac:	2201      	movlt	r2, #1
 80119ae:	e7db      	b.n	8011968 <_dtoa_r+0x240>
 80119b0:	2201      	movs	r2, #1
 80119b2:	e7f2      	b.n	801199a <_dtoa_r+0x272>
 80119b4:	2401      	movs	r4, #1
 80119b6:	2200      	movs	r2, #0
 80119b8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 80119bc:	f04f 3aff 	mov.w	sl, #4294967295
 80119c0:	2100      	movs	r1, #0
 80119c2:	46d1      	mov	r9, sl
 80119c4:	2212      	movs	r2, #18
 80119c6:	9108      	str	r1, [sp, #32]
 80119c8:	e7ce      	b.n	8011968 <_dtoa_r+0x240>
 80119ca:	2201      	movs	r2, #1
 80119cc:	9207      	str	r2, [sp, #28]
 80119ce:	e7f5      	b.n	80119bc <_dtoa_r+0x294>
 80119d0:	f8dd a020 	ldr.w	sl, [sp, #32]
 80119d4:	46d1      	mov	r9, sl
 80119d6:	4652      	mov	r2, sl
 80119d8:	e7c6      	b.n	8011968 <_dtoa_r+0x240>
 80119da:	3101      	adds	r1, #1
 80119dc:	6079      	str	r1, [r7, #4]
 80119de:	0040      	lsls	r0, r0, #1
 80119e0:	e7c6      	b.n	8011970 <_dtoa_r+0x248>
 80119e2:	bf00      	nop
 80119e4:	f3af 8000 	nop.w
 80119e8:	636f4361 	.word	0x636f4361
 80119ec:	3fd287a7 	.word	0x3fd287a7
 80119f0:	8b60c8b3 	.word	0x8b60c8b3
 80119f4:	3fc68a28 	.word	0x3fc68a28
 80119f8:	509f79fb 	.word	0x509f79fb
 80119fc:	3fd34413 	.word	0x3fd34413
 8011a00:	0801353d 	.word	0x0801353d
 8011a04:	08013554 	.word	0x08013554
 8011a08:	7ff00000 	.word	0x7ff00000
 8011a0c:	08013539 	.word	0x08013539
 8011a10:	08013530 	.word	0x08013530
 8011a14:	0801350d 	.word	0x0801350d
 8011a18:	08013648 	.word	0x08013648
 8011a1c:	080135af 	.word	0x080135af
 8011a20:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8011a22:	9901      	ldr	r1, [sp, #4]
 8011a24:	6011      	str	r1, [r2, #0]
 8011a26:	f1b9 0f0e 	cmp.w	r9, #14
 8011a2a:	d86c      	bhi.n	8011b06 <_dtoa_r+0x3de>
 8011a2c:	2c00      	cmp	r4, #0
 8011a2e:	d06a      	beq.n	8011b06 <_dtoa_r+0x3de>
 8011a30:	f1bb 0f00 	cmp.w	fp, #0
 8011a34:	f340 80a0 	ble.w	8011b78 <_dtoa_r+0x450>
 8011a38:	49c1      	ldr	r1, [pc, #772]	; (8011d40 <_dtoa_r+0x618>)
 8011a3a:	f00b 020f 	and.w	r2, fp, #15
 8011a3e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8011a42:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8011a46:	ed92 7b00 	vldr	d7, [r2]
 8011a4a:	ea4f 112b 	mov.w	r1, fp, asr #4
 8011a4e:	f000 8087 	beq.w	8011b60 <_dtoa_r+0x438>
 8011a52:	4abc      	ldr	r2, [pc, #752]	; (8011d44 <_dtoa_r+0x61c>)
 8011a54:	ed92 6b08 	vldr	d6, [r2, #32]
 8011a58:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8011a5c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8011a60:	f001 010f 	and.w	r1, r1, #15
 8011a64:	2203      	movs	r2, #3
 8011a66:	48b7      	ldr	r0, [pc, #732]	; (8011d44 <_dtoa_r+0x61c>)
 8011a68:	2900      	cmp	r1, #0
 8011a6a:	d17b      	bne.n	8011b64 <_dtoa_r+0x43c>
 8011a6c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8011a70:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8011a74:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011a78:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011a7a:	2900      	cmp	r1, #0
 8011a7c:	f000 80a2 	beq.w	8011bc4 <_dtoa_r+0x49c>
 8011a80:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8011a84:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011a88:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8011a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a90:	f140 8098 	bpl.w	8011bc4 <_dtoa_r+0x49c>
 8011a94:	f1b9 0f00 	cmp.w	r9, #0
 8011a98:	f000 8094 	beq.w	8011bc4 <_dtoa_r+0x49c>
 8011a9c:	f1ba 0f00 	cmp.w	sl, #0
 8011aa0:	dd2f      	ble.n	8011b02 <_dtoa_r+0x3da>
 8011aa2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8011aa6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011aaa:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011aae:	f10b 37ff 	add.w	r7, fp, #4294967295
 8011ab2:	3201      	adds	r2, #1
 8011ab4:	4650      	mov	r0, sl
 8011ab6:	ed9d 6b02 	vldr	d6, [sp, #8]
 8011aba:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8011abe:	ee07 2a90 	vmov	s15, r2
 8011ac2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011ac6:	eea7 5b06 	vfma.f64	d5, d7, d6
 8011aca:	ee15 4a90 	vmov	r4, s11
 8011ace:	ec52 1b15 	vmov	r1, r2, d5
 8011ad2:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8011ad6:	2800      	cmp	r0, #0
 8011ad8:	d177      	bne.n	8011bca <_dtoa_r+0x4a2>
 8011ada:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8011ade:	ee36 6b47 	vsub.f64	d6, d6, d7
 8011ae2:	ec42 1b17 	vmov	d7, r1, r2
 8011ae6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011aee:	f300 8263 	bgt.w	8011fb8 <_dtoa_r+0x890>
 8011af2:	eeb1 7b47 	vneg.f64	d7, d7
 8011af6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011afe:	f100 8258 	bmi.w	8011fb2 <_dtoa_r+0x88a>
 8011b02:	ed8d 8b02 	vstr	d8, [sp, #8]
 8011b06:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011b08:	2a00      	cmp	r2, #0
 8011b0a:	f2c0 811d 	blt.w	8011d48 <_dtoa_r+0x620>
 8011b0e:	f1bb 0f0e 	cmp.w	fp, #14
 8011b12:	f300 8119 	bgt.w	8011d48 <_dtoa_r+0x620>
 8011b16:	4b8a      	ldr	r3, [pc, #552]	; (8011d40 <_dtoa_r+0x618>)
 8011b18:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8011b1c:	ed93 6b00 	vldr	d6, [r3]
 8011b20:	9b08      	ldr	r3, [sp, #32]
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	f280 80b7 	bge.w	8011c96 <_dtoa_r+0x56e>
 8011b28:	f1b9 0f00 	cmp.w	r9, #0
 8011b2c:	f300 80b3 	bgt.w	8011c96 <_dtoa_r+0x56e>
 8011b30:	f040 823f 	bne.w	8011fb2 <_dtoa_r+0x88a>
 8011b34:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8011b38:	ee26 6b07 	vmul.f64	d6, d6, d7
 8011b3c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011b40:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b48:	464c      	mov	r4, r9
 8011b4a:	464f      	mov	r7, r9
 8011b4c:	f280 8215 	bge.w	8011f7a <_dtoa_r+0x852>
 8011b50:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011b54:	2331      	movs	r3, #49	; 0x31
 8011b56:	f808 3b01 	strb.w	r3, [r8], #1
 8011b5a:	f10b 0b01 	add.w	fp, fp, #1
 8011b5e:	e211      	b.n	8011f84 <_dtoa_r+0x85c>
 8011b60:	2202      	movs	r2, #2
 8011b62:	e780      	b.n	8011a66 <_dtoa_r+0x33e>
 8011b64:	07cc      	lsls	r4, r1, #31
 8011b66:	d504      	bpl.n	8011b72 <_dtoa_r+0x44a>
 8011b68:	ed90 6b00 	vldr	d6, [r0]
 8011b6c:	3201      	adds	r2, #1
 8011b6e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011b72:	1049      	asrs	r1, r1, #1
 8011b74:	3008      	adds	r0, #8
 8011b76:	e777      	b.n	8011a68 <_dtoa_r+0x340>
 8011b78:	d022      	beq.n	8011bc0 <_dtoa_r+0x498>
 8011b7a:	f1cb 0100 	rsb	r1, fp, #0
 8011b7e:	4a70      	ldr	r2, [pc, #448]	; (8011d40 <_dtoa_r+0x618>)
 8011b80:	f001 000f 	and.w	r0, r1, #15
 8011b84:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8011b88:	ed92 7b00 	vldr	d7, [r2]
 8011b8c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8011b90:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011b94:	486b      	ldr	r0, [pc, #428]	; (8011d44 <_dtoa_r+0x61c>)
 8011b96:	1109      	asrs	r1, r1, #4
 8011b98:	2400      	movs	r4, #0
 8011b9a:	2202      	movs	r2, #2
 8011b9c:	b929      	cbnz	r1, 8011baa <_dtoa_r+0x482>
 8011b9e:	2c00      	cmp	r4, #0
 8011ba0:	f43f af6a 	beq.w	8011a78 <_dtoa_r+0x350>
 8011ba4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011ba8:	e766      	b.n	8011a78 <_dtoa_r+0x350>
 8011baa:	07cf      	lsls	r7, r1, #31
 8011bac:	d505      	bpl.n	8011bba <_dtoa_r+0x492>
 8011bae:	ed90 6b00 	vldr	d6, [r0]
 8011bb2:	3201      	adds	r2, #1
 8011bb4:	2401      	movs	r4, #1
 8011bb6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011bba:	1049      	asrs	r1, r1, #1
 8011bbc:	3008      	adds	r0, #8
 8011bbe:	e7ed      	b.n	8011b9c <_dtoa_r+0x474>
 8011bc0:	2202      	movs	r2, #2
 8011bc2:	e759      	b.n	8011a78 <_dtoa_r+0x350>
 8011bc4:	465f      	mov	r7, fp
 8011bc6:	4648      	mov	r0, r9
 8011bc8:	e775      	b.n	8011ab6 <_dtoa_r+0x38e>
 8011bca:	ec42 1b17 	vmov	d7, r1, r2
 8011bce:	4a5c      	ldr	r2, [pc, #368]	; (8011d40 <_dtoa_r+0x618>)
 8011bd0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8011bd4:	ed12 4b02 	vldr	d4, [r2, #-8]
 8011bd8:	9a01      	ldr	r2, [sp, #4]
 8011bda:	1814      	adds	r4, r2, r0
 8011bdc:	9a07      	ldr	r2, [sp, #28]
 8011bde:	b352      	cbz	r2, 8011c36 <_dtoa_r+0x50e>
 8011be0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8011be4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8011be8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011bec:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8011bf0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8011bf4:	ee35 7b47 	vsub.f64	d7, d5, d7
 8011bf8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8011bfc:	ee14 2a90 	vmov	r2, s9
 8011c00:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8011c04:	3230      	adds	r2, #48	; 0x30
 8011c06:	ee36 6b45 	vsub.f64	d6, d6, d5
 8011c0a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c12:	f808 2b01 	strb.w	r2, [r8], #1
 8011c16:	d439      	bmi.n	8011c8c <_dtoa_r+0x564>
 8011c18:	ee32 5b46 	vsub.f64	d5, d2, d6
 8011c1c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8011c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c24:	d472      	bmi.n	8011d0c <_dtoa_r+0x5e4>
 8011c26:	45a0      	cmp	r8, r4
 8011c28:	f43f af6b 	beq.w	8011b02 <_dtoa_r+0x3da>
 8011c2c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8011c30:	ee26 6b03 	vmul.f64	d6, d6, d3
 8011c34:	e7e0      	b.n	8011bf8 <_dtoa_r+0x4d0>
 8011c36:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011c3a:	ee27 7b04 	vmul.f64	d7, d7, d4
 8011c3e:	4621      	mov	r1, r4
 8011c40:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8011c44:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8011c48:	ee14 2a90 	vmov	r2, s9
 8011c4c:	3230      	adds	r2, #48	; 0x30
 8011c4e:	f808 2b01 	strb.w	r2, [r8], #1
 8011c52:	45a0      	cmp	r8, r4
 8011c54:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8011c58:	ee36 6b45 	vsub.f64	d6, d6, d5
 8011c5c:	d118      	bne.n	8011c90 <_dtoa_r+0x568>
 8011c5e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8011c62:	ee37 4b05 	vadd.f64	d4, d7, d5
 8011c66:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8011c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c6e:	dc4d      	bgt.n	8011d0c <_dtoa_r+0x5e4>
 8011c70:	ee35 7b47 	vsub.f64	d7, d5, d7
 8011c74:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c7c:	f57f af41 	bpl.w	8011b02 <_dtoa_r+0x3da>
 8011c80:	4688      	mov	r8, r1
 8011c82:	3901      	subs	r1, #1
 8011c84:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8011c88:	2b30      	cmp	r3, #48	; 0x30
 8011c8a:	d0f9      	beq.n	8011c80 <_dtoa_r+0x558>
 8011c8c:	46bb      	mov	fp, r7
 8011c8e:	e02a      	b.n	8011ce6 <_dtoa_r+0x5be>
 8011c90:	ee26 6b03 	vmul.f64	d6, d6, d3
 8011c94:	e7d6      	b.n	8011c44 <_dtoa_r+0x51c>
 8011c96:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011c9a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8011c9e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011ca2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8011ca6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8011caa:	ee15 3a10 	vmov	r3, s10
 8011cae:	3330      	adds	r3, #48	; 0x30
 8011cb0:	f808 3b01 	strb.w	r3, [r8], #1
 8011cb4:	9b01      	ldr	r3, [sp, #4]
 8011cb6:	eba8 0303 	sub.w	r3, r8, r3
 8011cba:	4599      	cmp	r9, r3
 8011cbc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8011cc0:	eea3 7b46 	vfms.f64	d7, d3, d6
 8011cc4:	d133      	bne.n	8011d2e <_dtoa_r+0x606>
 8011cc6:	ee37 7b07 	vadd.f64	d7, d7, d7
 8011cca:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8011cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011cd2:	dc1a      	bgt.n	8011d0a <_dtoa_r+0x5e2>
 8011cd4:	eeb4 7b46 	vcmp.f64	d7, d6
 8011cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011cdc:	d103      	bne.n	8011ce6 <_dtoa_r+0x5be>
 8011cde:	ee15 3a10 	vmov	r3, s10
 8011ce2:	07d9      	lsls	r1, r3, #31
 8011ce4:	d411      	bmi.n	8011d0a <_dtoa_r+0x5e2>
 8011ce6:	4629      	mov	r1, r5
 8011ce8:	4630      	mov	r0, r6
 8011cea:	f000 fadb 	bl	80122a4 <_Bfree>
 8011cee:	2300      	movs	r3, #0
 8011cf0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011cf2:	f888 3000 	strb.w	r3, [r8]
 8011cf6:	f10b 0301 	add.w	r3, fp, #1
 8011cfa:	6013      	str	r3, [r2, #0]
 8011cfc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	f43f ad61 	beq.w	80117c6 <_dtoa_r+0x9e>
 8011d04:	f8c3 8000 	str.w	r8, [r3]
 8011d08:	e55d      	b.n	80117c6 <_dtoa_r+0x9e>
 8011d0a:	465f      	mov	r7, fp
 8011d0c:	4643      	mov	r3, r8
 8011d0e:	4698      	mov	r8, r3
 8011d10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011d14:	2a39      	cmp	r2, #57	; 0x39
 8011d16:	d106      	bne.n	8011d26 <_dtoa_r+0x5fe>
 8011d18:	9a01      	ldr	r2, [sp, #4]
 8011d1a:	429a      	cmp	r2, r3
 8011d1c:	d1f7      	bne.n	8011d0e <_dtoa_r+0x5e6>
 8011d1e:	9901      	ldr	r1, [sp, #4]
 8011d20:	2230      	movs	r2, #48	; 0x30
 8011d22:	3701      	adds	r7, #1
 8011d24:	700a      	strb	r2, [r1, #0]
 8011d26:	781a      	ldrb	r2, [r3, #0]
 8011d28:	3201      	adds	r2, #1
 8011d2a:	701a      	strb	r2, [r3, #0]
 8011d2c:	e7ae      	b.n	8011c8c <_dtoa_r+0x564>
 8011d2e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8011d32:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d3a:	d1b2      	bne.n	8011ca2 <_dtoa_r+0x57a>
 8011d3c:	e7d3      	b.n	8011ce6 <_dtoa_r+0x5be>
 8011d3e:	bf00      	nop
 8011d40:	08013648 	.word	0x08013648
 8011d44:	08013620 	.word	0x08013620
 8011d48:	9907      	ldr	r1, [sp, #28]
 8011d4a:	2900      	cmp	r1, #0
 8011d4c:	f000 80d0 	beq.w	8011ef0 <_dtoa_r+0x7c8>
 8011d50:	9906      	ldr	r1, [sp, #24]
 8011d52:	2901      	cmp	r1, #1
 8011d54:	f300 80b4 	bgt.w	8011ec0 <_dtoa_r+0x798>
 8011d58:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011d5a:	2900      	cmp	r1, #0
 8011d5c:	f000 80ac 	beq.w	8011eb8 <_dtoa_r+0x790>
 8011d60:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8011d64:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8011d68:	461c      	mov	r4, r3
 8011d6a:	930a      	str	r3, [sp, #40]	; 0x28
 8011d6c:	9b04      	ldr	r3, [sp, #16]
 8011d6e:	4413      	add	r3, r2
 8011d70:	9304      	str	r3, [sp, #16]
 8011d72:	9b05      	ldr	r3, [sp, #20]
 8011d74:	2101      	movs	r1, #1
 8011d76:	4413      	add	r3, r2
 8011d78:	4630      	mov	r0, r6
 8011d7a:	9305      	str	r3, [sp, #20]
 8011d7c:	f000 fb4a 	bl	8012414 <__i2b>
 8011d80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d82:	4607      	mov	r7, r0
 8011d84:	f1b8 0f00 	cmp.w	r8, #0
 8011d88:	dd0d      	ble.n	8011da6 <_dtoa_r+0x67e>
 8011d8a:	9a05      	ldr	r2, [sp, #20]
 8011d8c:	2a00      	cmp	r2, #0
 8011d8e:	dd0a      	ble.n	8011da6 <_dtoa_r+0x67e>
 8011d90:	4542      	cmp	r2, r8
 8011d92:	9904      	ldr	r1, [sp, #16]
 8011d94:	bfa8      	it	ge
 8011d96:	4642      	movge	r2, r8
 8011d98:	1a89      	subs	r1, r1, r2
 8011d9a:	9104      	str	r1, [sp, #16]
 8011d9c:	9905      	ldr	r1, [sp, #20]
 8011d9e:	eba8 0802 	sub.w	r8, r8, r2
 8011da2:	1a8a      	subs	r2, r1, r2
 8011da4:	9205      	str	r2, [sp, #20]
 8011da6:	b303      	cbz	r3, 8011dea <_dtoa_r+0x6c2>
 8011da8:	9a07      	ldr	r2, [sp, #28]
 8011daa:	2a00      	cmp	r2, #0
 8011dac:	f000 80a5 	beq.w	8011efa <_dtoa_r+0x7d2>
 8011db0:	2c00      	cmp	r4, #0
 8011db2:	dd13      	ble.n	8011ddc <_dtoa_r+0x6b4>
 8011db4:	4639      	mov	r1, r7
 8011db6:	4622      	mov	r2, r4
 8011db8:	4630      	mov	r0, r6
 8011dba:	930d      	str	r3, [sp, #52]	; 0x34
 8011dbc:	f000 fbea 	bl	8012594 <__pow5mult>
 8011dc0:	462a      	mov	r2, r5
 8011dc2:	4601      	mov	r1, r0
 8011dc4:	4607      	mov	r7, r0
 8011dc6:	4630      	mov	r0, r6
 8011dc8:	f000 fb3a 	bl	8012440 <__multiply>
 8011dcc:	4629      	mov	r1, r5
 8011dce:	900a      	str	r0, [sp, #40]	; 0x28
 8011dd0:	4630      	mov	r0, r6
 8011dd2:	f000 fa67 	bl	80122a4 <_Bfree>
 8011dd6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011dd8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011dda:	4615      	mov	r5, r2
 8011ddc:	1b1a      	subs	r2, r3, r4
 8011dde:	d004      	beq.n	8011dea <_dtoa_r+0x6c2>
 8011de0:	4629      	mov	r1, r5
 8011de2:	4630      	mov	r0, r6
 8011de4:	f000 fbd6 	bl	8012594 <__pow5mult>
 8011de8:	4605      	mov	r5, r0
 8011dea:	2101      	movs	r1, #1
 8011dec:	4630      	mov	r0, r6
 8011dee:	f000 fb11 	bl	8012414 <__i2b>
 8011df2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	4604      	mov	r4, r0
 8011df8:	f340 8081 	ble.w	8011efe <_dtoa_r+0x7d6>
 8011dfc:	461a      	mov	r2, r3
 8011dfe:	4601      	mov	r1, r0
 8011e00:	4630      	mov	r0, r6
 8011e02:	f000 fbc7 	bl	8012594 <__pow5mult>
 8011e06:	9b06      	ldr	r3, [sp, #24]
 8011e08:	2b01      	cmp	r3, #1
 8011e0a:	4604      	mov	r4, r0
 8011e0c:	dd7a      	ble.n	8011f04 <_dtoa_r+0x7dc>
 8011e0e:	2300      	movs	r3, #0
 8011e10:	930a      	str	r3, [sp, #40]	; 0x28
 8011e12:	6922      	ldr	r2, [r4, #16]
 8011e14:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8011e18:	6910      	ldr	r0, [r2, #16]
 8011e1a:	f000 faab 	bl	8012374 <__hi0bits>
 8011e1e:	f1c0 0020 	rsb	r0, r0, #32
 8011e22:	9b05      	ldr	r3, [sp, #20]
 8011e24:	4418      	add	r0, r3
 8011e26:	f010 001f 	ands.w	r0, r0, #31
 8011e2a:	f000 808c 	beq.w	8011f46 <_dtoa_r+0x81e>
 8011e2e:	f1c0 0220 	rsb	r2, r0, #32
 8011e32:	2a04      	cmp	r2, #4
 8011e34:	f340 8085 	ble.w	8011f42 <_dtoa_r+0x81a>
 8011e38:	f1c0 001c 	rsb	r0, r0, #28
 8011e3c:	9b04      	ldr	r3, [sp, #16]
 8011e3e:	4403      	add	r3, r0
 8011e40:	9304      	str	r3, [sp, #16]
 8011e42:	9b05      	ldr	r3, [sp, #20]
 8011e44:	4403      	add	r3, r0
 8011e46:	4480      	add	r8, r0
 8011e48:	9305      	str	r3, [sp, #20]
 8011e4a:	9b04      	ldr	r3, [sp, #16]
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	dd05      	ble.n	8011e5c <_dtoa_r+0x734>
 8011e50:	4629      	mov	r1, r5
 8011e52:	461a      	mov	r2, r3
 8011e54:	4630      	mov	r0, r6
 8011e56:	f000 fbf7 	bl	8012648 <__lshift>
 8011e5a:	4605      	mov	r5, r0
 8011e5c:	9b05      	ldr	r3, [sp, #20]
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	dd05      	ble.n	8011e6e <_dtoa_r+0x746>
 8011e62:	4621      	mov	r1, r4
 8011e64:	461a      	mov	r2, r3
 8011e66:	4630      	mov	r0, r6
 8011e68:	f000 fbee 	bl	8012648 <__lshift>
 8011e6c:	4604      	mov	r4, r0
 8011e6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d06a      	beq.n	8011f4a <_dtoa_r+0x822>
 8011e74:	4621      	mov	r1, r4
 8011e76:	4628      	mov	r0, r5
 8011e78:	f000 fc56 	bl	8012728 <__mcmp>
 8011e7c:	2800      	cmp	r0, #0
 8011e7e:	da64      	bge.n	8011f4a <_dtoa_r+0x822>
 8011e80:	2300      	movs	r3, #0
 8011e82:	4629      	mov	r1, r5
 8011e84:	220a      	movs	r2, #10
 8011e86:	4630      	mov	r0, r6
 8011e88:	f000 fa2e 	bl	80122e8 <__multadd>
 8011e8c:	9b07      	ldr	r3, [sp, #28]
 8011e8e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011e92:	4605      	mov	r5, r0
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	f000 8191 	beq.w	80121bc <_dtoa_r+0xa94>
 8011e9a:	4639      	mov	r1, r7
 8011e9c:	2300      	movs	r3, #0
 8011e9e:	220a      	movs	r2, #10
 8011ea0:	4630      	mov	r0, r6
 8011ea2:	f000 fa21 	bl	80122e8 <__multadd>
 8011ea6:	f1ba 0f00 	cmp.w	sl, #0
 8011eaa:	4607      	mov	r7, r0
 8011eac:	f300 808d 	bgt.w	8011fca <_dtoa_r+0x8a2>
 8011eb0:	9b06      	ldr	r3, [sp, #24]
 8011eb2:	2b02      	cmp	r3, #2
 8011eb4:	dc50      	bgt.n	8011f58 <_dtoa_r+0x830>
 8011eb6:	e088      	b.n	8011fca <_dtoa_r+0x8a2>
 8011eb8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011eba:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8011ebe:	e751      	b.n	8011d64 <_dtoa_r+0x63c>
 8011ec0:	f109 34ff 	add.w	r4, r9, #4294967295
 8011ec4:	42a3      	cmp	r3, r4
 8011ec6:	bfbf      	itttt	lt
 8011ec8:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8011eca:	1ae3      	sublt	r3, r4, r3
 8011ecc:	18d2      	addlt	r2, r2, r3
 8011ece:	9209      	strlt	r2, [sp, #36]	; 0x24
 8011ed0:	bfb6      	itet	lt
 8011ed2:	4623      	movlt	r3, r4
 8011ed4:	1b1c      	subge	r4, r3, r4
 8011ed6:	2400      	movlt	r4, #0
 8011ed8:	f1b9 0f00 	cmp.w	r9, #0
 8011edc:	bfb5      	itete	lt
 8011ede:	9a04      	ldrlt	r2, [sp, #16]
 8011ee0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8011ee4:	eba2 0809 	sublt.w	r8, r2, r9
 8011ee8:	464a      	movge	r2, r9
 8011eea:	bfb8      	it	lt
 8011eec:	2200      	movlt	r2, #0
 8011eee:	e73c      	b.n	8011d6a <_dtoa_r+0x642>
 8011ef0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8011ef4:	9f07      	ldr	r7, [sp, #28]
 8011ef6:	461c      	mov	r4, r3
 8011ef8:	e744      	b.n	8011d84 <_dtoa_r+0x65c>
 8011efa:	461a      	mov	r2, r3
 8011efc:	e770      	b.n	8011de0 <_dtoa_r+0x6b8>
 8011efe:	9b06      	ldr	r3, [sp, #24]
 8011f00:	2b01      	cmp	r3, #1
 8011f02:	dc18      	bgt.n	8011f36 <_dtoa_r+0x80e>
 8011f04:	9b02      	ldr	r3, [sp, #8]
 8011f06:	b9b3      	cbnz	r3, 8011f36 <_dtoa_r+0x80e>
 8011f08:	9b03      	ldr	r3, [sp, #12]
 8011f0a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8011f0e:	b9a2      	cbnz	r2, 8011f3a <_dtoa_r+0x812>
 8011f10:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8011f14:	0d12      	lsrs	r2, r2, #20
 8011f16:	0512      	lsls	r2, r2, #20
 8011f18:	b18a      	cbz	r2, 8011f3e <_dtoa_r+0x816>
 8011f1a:	9b04      	ldr	r3, [sp, #16]
 8011f1c:	3301      	adds	r3, #1
 8011f1e:	9304      	str	r3, [sp, #16]
 8011f20:	9b05      	ldr	r3, [sp, #20]
 8011f22:	3301      	adds	r3, #1
 8011f24:	9305      	str	r3, [sp, #20]
 8011f26:	2301      	movs	r3, #1
 8011f28:	930a      	str	r3, [sp, #40]	; 0x28
 8011f2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	f47f af70 	bne.w	8011e12 <_dtoa_r+0x6ea>
 8011f32:	2001      	movs	r0, #1
 8011f34:	e775      	b.n	8011e22 <_dtoa_r+0x6fa>
 8011f36:	2300      	movs	r3, #0
 8011f38:	e7f6      	b.n	8011f28 <_dtoa_r+0x800>
 8011f3a:	9b02      	ldr	r3, [sp, #8]
 8011f3c:	e7f4      	b.n	8011f28 <_dtoa_r+0x800>
 8011f3e:	920a      	str	r2, [sp, #40]	; 0x28
 8011f40:	e7f3      	b.n	8011f2a <_dtoa_r+0x802>
 8011f42:	d082      	beq.n	8011e4a <_dtoa_r+0x722>
 8011f44:	4610      	mov	r0, r2
 8011f46:	301c      	adds	r0, #28
 8011f48:	e778      	b.n	8011e3c <_dtoa_r+0x714>
 8011f4a:	f1b9 0f00 	cmp.w	r9, #0
 8011f4e:	dc37      	bgt.n	8011fc0 <_dtoa_r+0x898>
 8011f50:	9b06      	ldr	r3, [sp, #24]
 8011f52:	2b02      	cmp	r3, #2
 8011f54:	dd34      	ble.n	8011fc0 <_dtoa_r+0x898>
 8011f56:	46ca      	mov	sl, r9
 8011f58:	f1ba 0f00 	cmp.w	sl, #0
 8011f5c:	d10d      	bne.n	8011f7a <_dtoa_r+0x852>
 8011f5e:	4621      	mov	r1, r4
 8011f60:	4653      	mov	r3, sl
 8011f62:	2205      	movs	r2, #5
 8011f64:	4630      	mov	r0, r6
 8011f66:	f000 f9bf 	bl	80122e8 <__multadd>
 8011f6a:	4601      	mov	r1, r0
 8011f6c:	4604      	mov	r4, r0
 8011f6e:	4628      	mov	r0, r5
 8011f70:	f000 fbda 	bl	8012728 <__mcmp>
 8011f74:	2800      	cmp	r0, #0
 8011f76:	f73f adeb 	bgt.w	8011b50 <_dtoa_r+0x428>
 8011f7a:	9b08      	ldr	r3, [sp, #32]
 8011f7c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011f80:	ea6f 0b03 	mvn.w	fp, r3
 8011f84:	f04f 0900 	mov.w	r9, #0
 8011f88:	4621      	mov	r1, r4
 8011f8a:	4630      	mov	r0, r6
 8011f8c:	f000 f98a 	bl	80122a4 <_Bfree>
 8011f90:	2f00      	cmp	r7, #0
 8011f92:	f43f aea8 	beq.w	8011ce6 <_dtoa_r+0x5be>
 8011f96:	f1b9 0f00 	cmp.w	r9, #0
 8011f9a:	d005      	beq.n	8011fa8 <_dtoa_r+0x880>
 8011f9c:	45b9      	cmp	r9, r7
 8011f9e:	d003      	beq.n	8011fa8 <_dtoa_r+0x880>
 8011fa0:	4649      	mov	r1, r9
 8011fa2:	4630      	mov	r0, r6
 8011fa4:	f000 f97e 	bl	80122a4 <_Bfree>
 8011fa8:	4639      	mov	r1, r7
 8011faa:	4630      	mov	r0, r6
 8011fac:	f000 f97a 	bl	80122a4 <_Bfree>
 8011fb0:	e699      	b.n	8011ce6 <_dtoa_r+0x5be>
 8011fb2:	2400      	movs	r4, #0
 8011fb4:	4627      	mov	r7, r4
 8011fb6:	e7e0      	b.n	8011f7a <_dtoa_r+0x852>
 8011fb8:	46bb      	mov	fp, r7
 8011fba:	4604      	mov	r4, r0
 8011fbc:	4607      	mov	r7, r0
 8011fbe:	e5c7      	b.n	8011b50 <_dtoa_r+0x428>
 8011fc0:	9b07      	ldr	r3, [sp, #28]
 8011fc2:	46ca      	mov	sl, r9
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	f000 8100 	beq.w	80121ca <_dtoa_r+0xaa2>
 8011fca:	f1b8 0f00 	cmp.w	r8, #0
 8011fce:	dd05      	ble.n	8011fdc <_dtoa_r+0x8b4>
 8011fd0:	4639      	mov	r1, r7
 8011fd2:	4642      	mov	r2, r8
 8011fd4:	4630      	mov	r0, r6
 8011fd6:	f000 fb37 	bl	8012648 <__lshift>
 8011fda:	4607      	mov	r7, r0
 8011fdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d05d      	beq.n	801209e <_dtoa_r+0x976>
 8011fe2:	6879      	ldr	r1, [r7, #4]
 8011fe4:	4630      	mov	r0, r6
 8011fe6:	f000 f91d 	bl	8012224 <_Balloc>
 8011fea:	4680      	mov	r8, r0
 8011fec:	b928      	cbnz	r0, 8011ffa <_dtoa_r+0x8d2>
 8011fee:	4b82      	ldr	r3, [pc, #520]	; (80121f8 <_dtoa_r+0xad0>)
 8011ff0:	4602      	mov	r2, r0
 8011ff2:	f240 21ea 	movw	r1, #746	; 0x2ea
 8011ff6:	f7ff bbaf 	b.w	8011758 <_dtoa_r+0x30>
 8011ffa:	693a      	ldr	r2, [r7, #16]
 8011ffc:	3202      	adds	r2, #2
 8011ffe:	0092      	lsls	r2, r2, #2
 8012000:	f107 010c 	add.w	r1, r7, #12
 8012004:	300c      	adds	r0, #12
 8012006:	f7fe fdb7 	bl	8010b78 <memcpy>
 801200a:	2201      	movs	r2, #1
 801200c:	4641      	mov	r1, r8
 801200e:	4630      	mov	r0, r6
 8012010:	f000 fb1a 	bl	8012648 <__lshift>
 8012014:	9b01      	ldr	r3, [sp, #4]
 8012016:	3301      	adds	r3, #1
 8012018:	9304      	str	r3, [sp, #16]
 801201a:	9b01      	ldr	r3, [sp, #4]
 801201c:	4453      	add	r3, sl
 801201e:	9308      	str	r3, [sp, #32]
 8012020:	9b02      	ldr	r3, [sp, #8]
 8012022:	f003 0301 	and.w	r3, r3, #1
 8012026:	46b9      	mov	r9, r7
 8012028:	9307      	str	r3, [sp, #28]
 801202a:	4607      	mov	r7, r0
 801202c:	9b04      	ldr	r3, [sp, #16]
 801202e:	4621      	mov	r1, r4
 8012030:	3b01      	subs	r3, #1
 8012032:	4628      	mov	r0, r5
 8012034:	9302      	str	r3, [sp, #8]
 8012036:	f7ff fae9 	bl	801160c <quorem>
 801203a:	4603      	mov	r3, r0
 801203c:	3330      	adds	r3, #48	; 0x30
 801203e:	9005      	str	r0, [sp, #20]
 8012040:	4649      	mov	r1, r9
 8012042:	4628      	mov	r0, r5
 8012044:	9309      	str	r3, [sp, #36]	; 0x24
 8012046:	f000 fb6f 	bl	8012728 <__mcmp>
 801204a:	463a      	mov	r2, r7
 801204c:	4682      	mov	sl, r0
 801204e:	4621      	mov	r1, r4
 8012050:	4630      	mov	r0, r6
 8012052:	f000 fb85 	bl	8012760 <__mdiff>
 8012056:	68c2      	ldr	r2, [r0, #12]
 8012058:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801205a:	4680      	mov	r8, r0
 801205c:	bb0a      	cbnz	r2, 80120a2 <_dtoa_r+0x97a>
 801205e:	4601      	mov	r1, r0
 8012060:	4628      	mov	r0, r5
 8012062:	f000 fb61 	bl	8012728 <__mcmp>
 8012066:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012068:	4602      	mov	r2, r0
 801206a:	4641      	mov	r1, r8
 801206c:	4630      	mov	r0, r6
 801206e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8012072:	f000 f917 	bl	80122a4 <_Bfree>
 8012076:	9b06      	ldr	r3, [sp, #24]
 8012078:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801207a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801207e:	ea43 0102 	orr.w	r1, r3, r2
 8012082:	9b07      	ldr	r3, [sp, #28]
 8012084:	430b      	orrs	r3, r1
 8012086:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012088:	d10d      	bne.n	80120a6 <_dtoa_r+0x97e>
 801208a:	2b39      	cmp	r3, #57	; 0x39
 801208c:	d029      	beq.n	80120e2 <_dtoa_r+0x9ba>
 801208e:	f1ba 0f00 	cmp.w	sl, #0
 8012092:	dd01      	ble.n	8012098 <_dtoa_r+0x970>
 8012094:	9b05      	ldr	r3, [sp, #20]
 8012096:	3331      	adds	r3, #49	; 0x31
 8012098:	9a02      	ldr	r2, [sp, #8]
 801209a:	7013      	strb	r3, [r2, #0]
 801209c:	e774      	b.n	8011f88 <_dtoa_r+0x860>
 801209e:	4638      	mov	r0, r7
 80120a0:	e7b8      	b.n	8012014 <_dtoa_r+0x8ec>
 80120a2:	2201      	movs	r2, #1
 80120a4:	e7e1      	b.n	801206a <_dtoa_r+0x942>
 80120a6:	f1ba 0f00 	cmp.w	sl, #0
 80120aa:	db06      	blt.n	80120ba <_dtoa_r+0x992>
 80120ac:	9906      	ldr	r1, [sp, #24]
 80120ae:	ea41 0a0a 	orr.w	sl, r1, sl
 80120b2:	9907      	ldr	r1, [sp, #28]
 80120b4:	ea5a 0101 	orrs.w	r1, sl, r1
 80120b8:	d120      	bne.n	80120fc <_dtoa_r+0x9d4>
 80120ba:	2a00      	cmp	r2, #0
 80120bc:	ddec      	ble.n	8012098 <_dtoa_r+0x970>
 80120be:	4629      	mov	r1, r5
 80120c0:	2201      	movs	r2, #1
 80120c2:	4630      	mov	r0, r6
 80120c4:	9304      	str	r3, [sp, #16]
 80120c6:	f000 fabf 	bl	8012648 <__lshift>
 80120ca:	4621      	mov	r1, r4
 80120cc:	4605      	mov	r5, r0
 80120ce:	f000 fb2b 	bl	8012728 <__mcmp>
 80120d2:	2800      	cmp	r0, #0
 80120d4:	9b04      	ldr	r3, [sp, #16]
 80120d6:	dc02      	bgt.n	80120de <_dtoa_r+0x9b6>
 80120d8:	d1de      	bne.n	8012098 <_dtoa_r+0x970>
 80120da:	07da      	lsls	r2, r3, #31
 80120dc:	d5dc      	bpl.n	8012098 <_dtoa_r+0x970>
 80120de:	2b39      	cmp	r3, #57	; 0x39
 80120e0:	d1d8      	bne.n	8012094 <_dtoa_r+0x96c>
 80120e2:	9a02      	ldr	r2, [sp, #8]
 80120e4:	2339      	movs	r3, #57	; 0x39
 80120e6:	7013      	strb	r3, [r2, #0]
 80120e8:	4643      	mov	r3, r8
 80120ea:	4698      	mov	r8, r3
 80120ec:	3b01      	subs	r3, #1
 80120ee:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80120f2:	2a39      	cmp	r2, #57	; 0x39
 80120f4:	d051      	beq.n	801219a <_dtoa_r+0xa72>
 80120f6:	3201      	adds	r2, #1
 80120f8:	701a      	strb	r2, [r3, #0]
 80120fa:	e745      	b.n	8011f88 <_dtoa_r+0x860>
 80120fc:	2a00      	cmp	r2, #0
 80120fe:	dd03      	ble.n	8012108 <_dtoa_r+0x9e0>
 8012100:	2b39      	cmp	r3, #57	; 0x39
 8012102:	d0ee      	beq.n	80120e2 <_dtoa_r+0x9ba>
 8012104:	3301      	adds	r3, #1
 8012106:	e7c7      	b.n	8012098 <_dtoa_r+0x970>
 8012108:	9a04      	ldr	r2, [sp, #16]
 801210a:	9908      	ldr	r1, [sp, #32]
 801210c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8012110:	428a      	cmp	r2, r1
 8012112:	d02b      	beq.n	801216c <_dtoa_r+0xa44>
 8012114:	4629      	mov	r1, r5
 8012116:	2300      	movs	r3, #0
 8012118:	220a      	movs	r2, #10
 801211a:	4630      	mov	r0, r6
 801211c:	f000 f8e4 	bl	80122e8 <__multadd>
 8012120:	45b9      	cmp	r9, r7
 8012122:	4605      	mov	r5, r0
 8012124:	f04f 0300 	mov.w	r3, #0
 8012128:	f04f 020a 	mov.w	r2, #10
 801212c:	4649      	mov	r1, r9
 801212e:	4630      	mov	r0, r6
 8012130:	d107      	bne.n	8012142 <_dtoa_r+0xa1a>
 8012132:	f000 f8d9 	bl	80122e8 <__multadd>
 8012136:	4681      	mov	r9, r0
 8012138:	4607      	mov	r7, r0
 801213a:	9b04      	ldr	r3, [sp, #16]
 801213c:	3301      	adds	r3, #1
 801213e:	9304      	str	r3, [sp, #16]
 8012140:	e774      	b.n	801202c <_dtoa_r+0x904>
 8012142:	f000 f8d1 	bl	80122e8 <__multadd>
 8012146:	4639      	mov	r1, r7
 8012148:	4681      	mov	r9, r0
 801214a:	2300      	movs	r3, #0
 801214c:	220a      	movs	r2, #10
 801214e:	4630      	mov	r0, r6
 8012150:	f000 f8ca 	bl	80122e8 <__multadd>
 8012154:	4607      	mov	r7, r0
 8012156:	e7f0      	b.n	801213a <_dtoa_r+0xa12>
 8012158:	f1ba 0f00 	cmp.w	sl, #0
 801215c:	9a01      	ldr	r2, [sp, #4]
 801215e:	bfcc      	ite	gt
 8012160:	46d0      	movgt	r8, sl
 8012162:	f04f 0801 	movle.w	r8, #1
 8012166:	4490      	add	r8, r2
 8012168:	f04f 0900 	mov.w	r9, #0
 801216c:	4629      	mov	r1, r5
 801216e:	2201      	movs	r2, #1
 8012170:	4630      	mov	r0, r6
 8012172:	9302      	str	r3, [sp, #8]
 8012174:	f000 fa68 	bl	8012648 <__lshift>
 8012178:	4621      	mov	r1, r4
 801217a:	4605      	mov	r5, r0
 801217c:	f000 fad4 	bl	8012728 <__mcmp>
 8012180:	2800      	cmp	r0, #0
 8012182:	dcb1      	bgt.n	80120e8 <_dtoa_r+0x9c0>
 8012184:	d102      	bne.n	801218c <_dtoa_r+0xa64>
 8012186:	9b02      	ldr	r3, [sp, #8]
 8012188:	07db      	lsls	r3, r3, #31
 801218a:	d4ad      	bmi.n	80120e8 <_dtoa_r+0x9c0>
 801218c:	4643      	mov	r3, r8
 801218e:	4698      	mov	r8, r3
 8012190:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012194:	2a30      	cmp	r2, #48	; 0x30
 8012196:	d0fa      	beq.n	801218e <_dtoa_r+0xa66>
 8012198:	e6f6      	b.n	8011f88 <_dtoa_r+0x860>
 801219a:	9a01      	ldr	r2, [sp, #4]
 801219c:	429a      	cmp	r2, r3
 801219e:	d1a4      	bne.n	80120ea <_dtoa_r+0x9c2>
 80121a0:	f10b 0b01 	add.w	fp, fp, #1
 80121a4:	2331      	movs	r3, #49	; 0x31
 80121a6:	e778      	b.n	801209a <_dtoa_r+0x972>
 80121a8:	4b14      	ldr	r3, [pc, #80]	; (80121fc <_dtoa_r+0xad4>)
 80121aa:	f7ff bb27 	b.w	80117fc <_dtoa_r+0xd4>
 80121ae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	f47f ab03 	bne.w	80117bc <_dtoa_r+0x94>
 80121b6:	4b12      	ldr	r3, [pc, #72]	; (8012200 <_dtoa_r+0xad8>)
 80121b8:	f7ff bb20 	b.w	80117fc <_dtoa_r+0xd4>
 80121bc:	f1ba 0f00 	cmp.w	sl, #0
 80121c0:	dc03      	bgt.n	80121ca <_dtoa_r+0xaa2>
 80121c2:	9b06      	ldr	r3, [sp, #24]
 80121c4:	2b02      	cmp	r3, #2
 80121c6:	f73f aec7 	bgt.w	8011f58 <_dtoa_r+0x830>
 80121ca:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80121ce:	4621      	mov	r1, r4
 80121d0:	4628      	mov	r0, r5
 80121d2:	f7ff fa1b 	bl	801160c <quorem>
 80121d6:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80121da:	f808 3b01 	strb.w	r3, [r8], #1
 80121de:	9a01      	ldr	r2, [sp, #4]
 80121e0:	eba8 0202 	sub.w	r2, r8, r2
 80121e4:	4592      	cmp	sl, r2
 80121e6:	ddb7      	ble.n	8012158 <_dtoa_r+0xa30>
 80121e8:	4629      	mov	r1, r5
 80121ea:	2300      	movs	r3, #0
 80121ec:	220a      	movs	r2, #10
 80121ee:	4630      	mov	r0, r6
 80121f0:	f000 f87a 	bl	80122e8 <__multadd>
 80121f4:	4605      	mov	r5, r0
 80121f6:	e7ea      	b.n	80121ce <_dtoa_r+0xaa6>
 80121f8:	080135af 	.word	0x080135af
 80121fc:	0801350c 	.word	0x0801350c
 8012200:	08013530 	.word	0x08013530

08012204 <_localeconv_r>:
 8012204:	4800      	ldr	r0, [pc, #0]	; (8012208 <_localeconv_r+0x4>)
 8012206:	4770      	bx	lr
 8012208:	240002d8 	.word	0x240002d8

0801220c <__malloc_lock>:
 801220c:	4801      	ldr	r0, [pc, #4]	; (8012214 <__malloc_lock+0x8>)
 801220e:	f000 bbd4 	b.w	80129ba <__retarget_lock_acquire_recursive>
 8012212:	bf00      	nop
 8012214:	24003050 	.word	0x24003050

08012218 <__malloc_unlock>:
 8012218:	4801      	ldr	r0, [pc, #4]	; (8012220 <__malloc_unlock+0x8>)
 801221a:	f000 bbcf 	b.w	80129bc <__retarget_lock_release_recursive>
 801221e:	bf00      	nop
 8012220:	24003050 	.word	0x24003050

08012224 <_Balloc>:
 8012224:	b570      	push	{r4, r5, r6, lr}
 8012226:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012228:	4604      	mov	r4, r0
 801222a:	460d      	mov	r5, r1
 801222c:	b976      	cbnz	r6, 801224c <_Balloc+0x28>
 801222e:	2010      	movs	r0, #16
 8012230:	f7fe fc92 	bl	8010b58 <malloc>
 8012234:	4602      	mov	r2, r0
 8012236:	6260      	str	r0, [r4, #36]	; 0x24
 8012238:	b920      	cbnz	r0, 8012244 <_Balloc+0x20>
 801223a:	4b18      	ldr	r3, [pc, #96]	; (801229c <_Balloc+0x78>)
 801223c:	4818      	ldr	r0, [pc, #96]	; (80122a0 <_Balloc+0x7c>)
 801223e:	2166      	movs	r1, #102	; 0x66
 8012240:	f000 fb8a 	bl	8012958 <__assert_func>
 8012244:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012248:	6006      	str	r6, [r0, #0]
 801224a:	60c6      	str	r6, [r0, #12]
 801224c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801224e:	68f3      	ldr	r3, [r6, #12]
 8012250:	b183      	cbz	r3, 8012274 <_Balloc+0x50>
 8012252:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012254:	68db      	ldr	r3, [r3, #12]
 8012256:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801225a:	b9b8      	cbnz	r0, 801228c <_Balloc+0x68>
 801225c:	2101      	movs	r1, #1
 801225e:	fa01 f605 	lsl.w	r6, r1, r5
 8012262:	1d72      	adds	r2, r6, #5
 8012264:	0092      	lsls	r2, r2, #2
 8012266:	4620      	mov	r0, r4
 8012268:	f000 fb60 	bl	801292c <_calloc_r>
 801226c:	b160      	cbz	r0, 8012288 <_Balloc+0x64>
 801226e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012272:	e00e      	b.n	8012292 <_Balloc+0x6e>
 8012274:	2221      	movs	r2, #33	; 0x21
 8012276:	2104      	movs	r1, #4
 8012278:	4620      	mov	r0, r4
 801227a:	f000 fb57 	bl	801292c <_calloc_r>
 801227e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012280:	60f0      	str	r0, [r6, #12]
 8012282:	68db      	ldr	r3, [r3, #12]
 8012284:	2b00      	cmp	r3, #0
 8012286:	d1e4      	bne.n	8012252 <_Balloc+0x2e>
 8012288:	2000      	movs	r0, #0
 801228a:	bd70      	pop	{r4, r5, r6, pc}
 801228c:	6802      	ldr	r2, [r0, #0]
 801228e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012292:	2300      	movs	r3, #0
 8012294:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012298:	e7f7      	b.n	801228a <_Balloc+0x66>
 801229a:	bf00      	nop
 801229c:	0801353d 	.word	0x0801353d
 80122a0:	080135c0 	.word	0x080135c0

080122a4 <_Bfree>:
 80122a4:	b570      	push	{r4, r5, r6, lr}
 80122a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80122a8:	4605      	mov	r5, r0
 80122aa:	460c      	mov	r4, r1
 80122ac:	b976      	cbnz	r6, 80122cc <_Bfree+0x28>
 80122ae:	2010      	movs	r0, #16
 80122b0:	f7fe fc52 	bl	8010b58 <malloc>
 80122b4:	4602      	mov	r2, r0
 80122b6:	6268      	str	r0, [r5, #36]	; 0x24
 80122b8:	b920      	cbnz	r0, 80122c4 <_Bfree+0x20>
 80122ba:	4b09      	ldr	r3, [pc, #36]	; (80122e0 <_Bfree+0x3c>)
 80122bc:	4809      	ldr	r0, [pc, #36]	; (80122e4 <_Bfree+0x40>)
 80122be:	218a      	movs	r1, #138	; 0x8a
 80122c0:	f000 fb4a 	bl	8012958 <__assert_func>
 80122c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80122c8:	6006      	str	r6, [r0, #0]
 80122ca:	60c6      	str	r6, [r0, #12]
 80122cc:	b13c      	cbz	r4, 80122de <_Bfree+0x3a>
 80122ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80122d0:	6862      	ldr	r2, [r4, #4]
 80122d2:	68db      	ldr	r3, [r3, #12]
 80122d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80122d8:	6021      	str	r1, [r4, #0]
 80122da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80122de:	bd70      	pop	{r4, r5, r6, pc}
 80122e0:	0801353d 	.word	0x0801353d
 80122e4:	080135c0 	.word	0x080135c0

080122e8 <__multadd>:
 80122e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122ec:	690d      	ldr	r5, [r1, #16]
 80122ee:	4607      	mov	r7, r0
 80122f0:	460c      	mov	r4, r1
 80122f2:	461e      	mov	r6, r3
 80122f4:	f101 0c14 	add.w	ip, r1, #20
 80122f8:	2000      	movs	r0, #0
 80122fa:	f8dc 3000 	ldr.w	r3, [ip]
 80122fe:	b299      	uxth	r1, r3
 8012300:	fb02 6101 	mla	r1, r2, r1, r6
 8012304:	0c1e      	lsrs	r6, r3, #16
 8012306:	0c0b      	lsrs	r3, r1, #16
 8012308:	fb02 3306 	mla	r3, r2, r6, r3
 801230c:	b289      	uxth	r1, r1
 801230e:	3001      	adds	r0, #1
 8012310:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012314:	4285      	cmp	r5, r0
 8012316:	f84c 1b04 	str.w	r1, [ip], #4
 801231a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801231e:	dcec      	bgt.n	80122fa <__multadd+0x12>
 8012320:	b30e      	cbz	r6, 8012366 <__multadd+0x7e>
 8012322:	68a3      	ldr	r3, [r4, #8]
 8012324:	42ab      	cmp	r3, r5
 8012326:	dc19      	bgt.n	801235c <__multadd+0x74>
 8012328:	6861      	ldr	r1, [r4, #4]
 801232a:	4638      	mov	r0, r7
 801232c:	3101      	adds	r1, #1
 801232e:	f7ff ff79 	bl	8012224 <_Balloc>
 8012332:	4680      	mov	r8, r0
 8012334:	b928      	cbnz	r0, 8012342 <__multadd+0x5a>
 8012336:	4602      	mov	r2, r0
 8012338:	4b0c      	ldr	r3, [pc, #48]	; (801236c <__multadd+0x84>)
 801233a:	480d      	ldr	r0, [pc, #52]	; (8012370 <__multadd+0x88>)
 801233c:	21b5      	movs	r1, #181	; 0xb5
 801233e:	f000 fb0b 	bl	8012958 <__assert_func>
 8012342:	6922      	ldr	r2, [r4, #16]
 8012344:	3202      	adds	r2, #2
 8012346:	f104 010c 	add.w	r1, r4, #12
 801234a:	0092      	lsls	r2, r2, #2
 801234c:	300c      	adds	r0, #12
 801234e:	f7fe fc13 	bl	8010b78 <memcpy>
 8012352:	4621      	mov	r1, r4
 8012354:	4638      	mov	r0, r7
 8012356:	f7ff ffa5 	bl	80122a4 <_Bfree>
 801235a:	4644      	mov	r4, r8
 801235c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012360:	3501      	adds	r5, #1
 8012362:	615e      	str	r6, [r3, #20]
 8012364:	6125      	str	r5, [r4, #16]
 8012366:	4620      	mov	r0, r4
 8012368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801236c:	080135af 	.word	0x080135af
 8012370:	080135c0 	.word	0x080135c0

08012374 <__hi0bits>:
 8012374:	0c03      	lsrs	r3, r0, #16
 8012376:	041b      	lsls	r3, r3, #16
 8012378:	b9d3      	cbnz	r3, 80123b0 <__hi0bits+0x3c>
 801237a:	0400      	lsls	r0, r0, #16
 801237c:	2310      	movs	r3, #16
 801237e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012382:	bf04      	itt	eq
 8012384:	0200      	lsleq	r0, r0, #8
 8012386:	3308      	addeq	r3, #8
 8012388:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801238c:	bf04      	itt	eq
 801238e:	0100      	lsleq	r0, r0, #4
 8012390:	3304      	addeq	r3, #4
 8012392:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012396:	bf04      	itt	eq
 8012398:	0080      	lsleq	r0, r0, #2
 801239a:	3302      	addeq	r3, #2
 801239c:	2800      	cmp	r0, #0
 801239e:	db05      	blt.n	80123ac <__hi0bits+0x38>
 80123a0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80123a4:	f103 0301 	add.w	r3, r3, #1
 80123a8:	bf08      	it	eq
 80123aa:	2320      	moveq	r3, #32
 80123ac:	4618      	mov	r0, r3
 80123ae:	4770      	bx	lr
 80123b0:	2300      	movs	r3, #0
 80123b2:	e7e4      	b.n	801237e <__hi0bits+0xa>

080123b4 <__lo0bits>:
 80123b4:	6803      	ldr	r3, [r0, #0]
 80123b6:	f013 0207 	ands.w	r2, r3, #7
 80123ba:	4601      	mov	r1, r0
 80123bc:	d00b      	beq.n	80123d6 <__lo0bits+0x22>
 80123be:	07da      	lsls	r2, r3, #31
 80123c0:	d423      	bmi.n	801240a <__lo0bits+0x56>
 80123c2:	0798      	lsls	r0, r3, #30
 80123c4:	bf49      	itett	mi
 80123c6:	085b      	lsrmi	r3, r3, #1
 80123c8:	089b      	lsrpl	r3, r3, #2
 80123ca:	2001      	movmi	r0, #1
 80123cc:	600b      	strmi	r3, [r1, #0]
 80123ce:	bf5c      	itt	pl
 80123d0:	600b      	strpl	r3, [r1, #0]
 80123d2:	2002      	movpl	r0, #2
 80123d4:	4770      	bx	lr
 80123d6:	b298      	uxth	r0, r3
 80123d8:	b9a8      	cbnz	r0, 8012406 <__lo0bits+0x52>
 80123da:	0c1b      	lsrs	r3, r3, #16
 80123dc:	2010      	movs	r0, #16
 80123de:	b2da      	uxtb	r2, r3
 80123e0:	b90a      	cbnz	r2, 80123e6 <__lo0bits+0x32>
 80123e2:	3008      	adds	r0, #8
 80123e4:	0a1b      	lsrs	r3, r3, #8
 80123e6:	071a      	lsls	r2, r3, #28
 80123e8:	bf04      	itt	eq
 80123ea:	091b      	lsreq	r3, r3, #4
 80123ec:	3004      	addeq	r0, #4
 80123ee:	079a      	lsls	r2, r3, #30
 80123f0:	bf04      	itt	eq
 80123f2:	089b      	lsreq	r3, r3, #2
 80123f4:	3002      	addeq	r0, #2
 80123f6:	07da      	lsls	r2, r3, #31
 80123f8:	d403      	bmi.n	8012402 <__lo0bits+0x4e>
 80123fa:	085b      	lsrs	r3, r3, #1
 80123fc:	f100 0001 	add.w	r0, r0, #1
 8012400:	d005      	beq.n	801240e <__lo0bits+0x5a>
 8012402:	600b      	str	r3, [r1, #0]
 8012404:	4770      	bx	lr
 8012406:	4610      	mov	r0, r2
 8012408:	e7e9      	b.n	80123de <__lo0bits+0x2a>
 801240a:	2000      	movs	r0, #0
 801240c:	4770      	bx	lr
 801240e:	2020      	movs	r0, #32
 8012410:	4770      	bx	lr
	...

08012414 <__i2b>:
 8012414:	b510      	push	{r4, lr}
 8012416:	460c      	mov	r4, r1
 8012418:	2101      	movs	r1, #1
 801241a:	f7ff ff03 	bl	8012224 <_Balloc>
 801241e:	4602      	mov	r2, r0
 8012420:	b928      	cbnz	r0, 801242e <__i2b+0x1a>
 8012422:	4b05      	ldr	r3, [pc, #20]	; (8012438 <__i2b+0x24>)
 8012424:	4805      	ldr	r0, [pc, #20]	; (801243c <__i2b+0x28>)
 8012426:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801242a:	f000 fa95 	bl	8012958 <__assert_func>
 801242e:	2301      	movs	r3, #1
 8012430:	6144      	str	r4, [r0, #20]
 8012432:	6103      	str	r3, [r0, #16]
 8012434:	bd10      	pop	{r4, pc}
 8012436:	bf00      	nop
 8012438:	080135af 	.word	0x080135af
 801243c:	080135c0 	.word	0x080135c0

08012440 <__multiply>:
 8012440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012444:	4691      	mov	r9, r2
 8012446:	690a      	ldr	r2, [r1, #16]
 8012448:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801244c:	429a      	cmp	r2, r3
 801244e:	bfb8      	it	lt
 8012450:	460b      	movlt	r3, r1
 8012452:	460c      	mov	r4, r1
 8012454:	bfbc      	itt	lt
 8012456:	464c      	movlt	r4, r9
 8012458:	4699      	movlt	r9, r3
 801245a:	6927      	ldr	r7, [r4, #16]
 801245c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012460:	68a3      	ldr	r3, [r4, #8]
 8012462:	6861      	ldr	r1, [r4, #4]
 8012464:	eb07 060a 	add.w	r6, r7, sl
 8012468:	42b3      	cmp	r3, r6
 801246a:	b085      	sub	sp, #20
 801246c:	bfb8      	it	lt
 801246e:	3101      	addlt	r1, #1
 8012470:	f7ff fed8 	bl	8012224 <_Balloc>
 8012474:	b930      	cbnz	r0, 8012484 <__multiply+0x44>
 8012476:	4602      	mov	r2, r0
 8012478:	4b44      	ldr	r3, [pc, #272]	; (801258c <__multiply+0x14c>)
 801247a:	4845      	ldr	r0, [pc, #276]	; (8012590 <__multiply+0x150>)
 801247c:	f240 115d 	movw	r1, #349	; 0x15d
 8012480:	f000 fa6a 	bl	8012958 <__assert_func>
 8012484:	f100 0514 	add.w	r5, r0, #20
 8012488:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801248c:	462b      	mov	r3, r5
 801248e:	2200      	movs	r2, #0
 8012490:	4543      	cmp	r3, r8
 8012492:	d321      	bcc.n	80124d8 <__multiply+0x98>
 8012494:	f104 0314 	add.w	r3, r4, #20
 8012498:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801249c:	f109 0314 	add.w	r3, r9, #20
 80124a0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80124a4:	9202      	str	r2, [sp, #8]
 80124a6:	1b3a      	subs	r2, r7, r4
 80124a8:	3a15      	subs	r2, #21
 80124aa:	f022 0203 	bic.w	r2, r2, #3
 80124ae:	3204      	adds	r2, #4
 80124b0:	f104 0115 	add.w	r1, r4, #21
 80124b4:	428f      	cmp	r7, r1
 80124b6:	bf38      	it	cc
 80124b8:	2204      	movcc	r2, #4
 80124ba:	9201      	str	r2, [sp, #4]
 80124bc:	9a02      	ldr	r2, [sp, #8]
 80124be:	9303      	str	r3, [sp, #12]
 80124c0:	429a      	cmp	r2, r3
 80124c2:	d80c      	bhi.n	80124de <__multiply+0x9e>
 80124c4:	2e00      	cmp	r6, #0
 80124c6:	dd03      	ble.n	80124d0 <__multiply+0x90>
 80124c8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d05a      	beq.n	8012586 <__multiply+0x146>
 80124d0:	6106      	str	r6, [r0, #16]
 80124d2:	b005      	add	sp, #20
 80124d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124d8:	f843 2b04 	str.w	r2, [r3], #4
 80124dc:	e7d8      	b.n	8012490 <__multiply+0x50>
 80124de:	f8b3 a000 	ldrh.w	sl, [r3]
 80124e2:	f1ba 0f00 	cmp.w	sl, #0
 80124e6:	d024      	beq.n	8012532 <__multiply+0xf2>
 80124e8:	f104 0e14 	add.w	lr, r4, #20
 80124ec:	46a9      	mov	r9, r5
 80124ee:	f04f 0c00 	mov.w	ip, #0
 80124f2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80124f6:	f8d9 1000 	ldr.w	r1, [r9]
 80124fa:	fa1f fb82 	uxth.w	fp, r2
 80124fe:	b289      	uxth	r1, r1
 8012500:	fb0a 110b 	mla	r1, sl, fp, r1
 8012504:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8012508:	f8d9 2000 	ldr.w	r2, [r9]
 801250c:	4461      	add	r1, ip
 801250e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012512:	fb0a c20b 	mla	r2, sl, fp, ip
 8012516:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801251a:	b289      	uxth	r1, r1
 801251c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012520:	4577      	cmp	r7, lr
 8012522:	f849 1b04 	str.w	r1, [r9], #4
 8012526:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801252a:	d8e2      	bhi.n	80124f2 <__multiply+0xb2>
 801252c:	9a01      	ldr	r2, [sp, #4]
 801252e:	f845 c002 	str.w	ip, [r5, r2]
 8012532:	9a03      	ldr	r2, [sp, #12]
 8012534:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012538:	3304      	adds	r3, #4
 801253a:	f1b9 0f00 	cmp.w	r9, #0
 801253e:	d020      	beq.n	8012582 <__multiply+0x142>
 8012540:	6829      	ldr	r1, [r5, #0]
 8012542:	f104 0c14 	add.w	ip, r4, #20
 8012546:	46ae      	mov	lr, r5
 8012548:	f04f 0a00 	mov.w	sl, #0
 801254c:	f8bc b000 	ldrh.w	fp, [ip]
 8012550:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8012554:	fb09 220b 	mla	r2, r9, fp, r2
 8012558:	4492      	add	sl, r2
 801255a:	b289      	uxth	r1, r1
 801255c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8012560:	f84e 1b04 	str.w	r1, [lr], #4
 8012564:	f85c 2b04 	ldr.w	r2, [ip], #4
 8012568:	f8be 1000 	ldrh.w	r1, [lr]
 801256c:	0c12      	lsrs	r2, r2, #16
 801256e:	fb09 1102 	mla	r1, r9, r2, r1
 8012572:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8012576:	4567      	cmp	r7, ip
 8012578:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801257c:	d8e6      	bhi.n	801254c <__multiply+0x10c>
 801257e:	9a01      	ldr	r2, [sp, #4]
 8012580:	50a9      	str	r1, [r5, r2]
 8012582:	3504      	adds	r5, #4
 8012584:	e79a      	b.n	80124bc <__multiply+0x7c>
 8012586:	3e01      	subs	r6, #1
 8012588:	e79c      	b.n	80124c4 <__multiply+0x84>
 801258a:	bf00      	nop
 801258c:	080135af 	.word	0x080135af
 8012590:	080135c0 	.word	0x080135c0

08012594 <__pow5mult>:
 8012594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012598:	4615      	mov	r5, r2
 801259a:	f012 0203 	ands.w	r2, r2, #3
 801259e:	4606      	mov	r6, r0
 80125a0:	460f      	mov	r7, r1
 80125a2:	d007      	beq.n	80125b4 <__pow5mult+0x20>
 80125a4:	4c25      	ldr	r4, [pc, #148]	; (801263c <__pow5mult+0xa8>)
 80125a6:	3a01      	subs	r2, #1
 80125a8:	2300      	movs	r3, #0
 80125aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80125ae:	f7ff fe9b 	bl	80122e8 <__multadd>
 80125b2:	4607      	mov	r7, r0
 80125b4:	10ad      	asrs	r5, r5, #2
 80125b6:	d03d      	beq.n	8012634 <__pow5mult+0xa0>
 80125b8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80125ba:	b97c      	cbnz	r4, 80125dc <__pow5mult+0x48>
 80125bc:	2010      	movs	r0, #16
 80125be:	f7fe facb 	bl	8010b58 <malloc>
 80125c2:	4602      	mov	r2, r0
 80125c4:	6270      	str	r0, [r6, #36]	; 0x24
 80125c6:	b928      	cbnz	r0, 80125d4 <__pow5mult+0x40>
 80125c8:	4b1d      	ldr	r3, [pc, #116]	; (8012640 <__pow5mult+0xac>)
 80125ca:	481e      	ldr	r0, [pc, #120]	; (8012644 <__pow5mult+0xb0>)
 80125cc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80125d0:	f000 f9c2 	bl	8012958 <__assert_func>
 80125d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80125d8:	6004      	str	r4, [r0, #0]
 80125da:	60c4      	str	r4, [r0, #12]
 80125dc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80125e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80125e4:	b94c      	cbnz	r4, 80125fa <__pow5mult+0x66>
 80125e6:	f240 2171 	movw	r1, #625	; 0x271
 80125ea:	4630      	mov	r0, r6
 80125ec:	f7ff ff12 	bl	8012414 <__i2b>
 80125f0:	2300      	movs	r3, #0
 80125f2:	f8c8 0008 	str.w	r0, [r8, #8]
 80125f6:	4604      	mov	r4, r0
 80125f8:	6003      	str	r3, [r0, #0]
 80125fa:	f04f 0900 	mov.w	r9, #0
 80125fe:	07eb      	lsls	r3, r5, #31
 8012600:	d50a      	bpl.n	8012618 <__pow5mult+0x84>
 8012602:	4639      	mov	r1, r7
 8012604:	4622      	mov	r2, r4
 8012606:	4630      	mov	r0, r6
 8012608:	f7ff ff1a 	bl	8012440 <__multiply>
 801260c:	4639      	mov	r1, r7
 801260e:	4680      	mov	r8, r0
 8012610:	4630      	mov	r0, r6
 8012612:	f7ff fe47 	bl	80122a4 <_Bfree>
 8012616:	4647      	mov	r7, r8
 8012618:	106d      	asrs	r5, r5, #1
 801261a:	d00b      	beq.n	8012634 <__pow5mult+0xa0>
 801261c:	6820      	ldr	r0, [r4, #0]
 801261e:	b938      	cbnz	r0, 8012630 <__pow5mult+0x9c>
 8012620:	4622      	mov	r2, r4
 8012622:	4621      	mov	r1, r4
 8012624:	4630      	mov	r0, r6
 8012626:	f7ff ff0b 	bl	8012440 <__multiply>
 801262a:	6020      	str	r0, [r4, #0]
 801262c:	f8c0 9000 	str.w	r9, [r0]
 8012630:	4604      	mov	r4, r0
 8012632:	e7e4      	b.n	80125fe <__pow5mult+0x6a>
 8012634:	4638      	mov	r0, r7
 8012636:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801263a:	bf00      	nop
 801263c:	08013710 	.word	0x08013710
 8012640:	0801353d 	.word	0x0801353d
 8012644:	080135c0 	.word	0x080135c0

08012648 <__lshift>:
 8012648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801264c:	460c      	mov	r4, r1
 801264e:	6849      	ldr	r1, [r1, #4]
 8012650:	6923      	ldr	r3, [r4, #16]
 8012652:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012656:	68a3      	ldr	r3, [r4, #8]
 8012658:	4607      	mov	r7, r0
 801265a:	4691      	mov	r9, r2
 801265c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012660:	f108 0601 	add.w	r6, r8, #1
 8012664:	42b3      	cmp	r3, r6
 8012666:	db0b      	blt.n	8012680 <__lshift+0x38>
 8012668:	4638      	mov	r0, r7
 801266a:	f7ff fddb 	bl	8012224 <_Balloc>
 801266e:	4605      	mov	r5, r0
 8012670:	b948      	cbnz	r0, 8012686 <__lshift+0x3e>
 8012672:	4602      	mov	r2, r0
 8012674:	4b2a      	ldr	r3, [pc, #168]	; (8012720 <__lshift+0xd8>)
 8012676:	482b      	ldr	r0, [pc, #172]	; (8012724 <__lshift+0xdc>)
 8012678:	f240 11d9 	movw	r1, #473	; 0x1d9
 801267c:	f000 f96c 	bl	8012958 <__assert_func>
 8012680:	3101      	adds	r1, #1
 8012682:	005b      	lsls	r3, r3, #1
 8012684:	e7ee      	b.n	8012664 <__lshift+0x1c>
 8012686:	2300      	movs	r3, #0
 8012688:	f100 0114 	add.w	r1, r0, #20
 801268c:	f100 0210 	add.w	r2, r0, #16
 8012690:	4618      	mov	r0, r3
 8012692:	4553      	cmp	r3, sl
 8012694:	db37      	blt.n	8012706 <__lshift+0xbe>
 8012696:	6920      	ldr	r0, [r4, #16]
 8012698:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801269c:	f104 0314 	add.w	r3, r4, #20
 80126a0:	f019 091f 	ands.w	r9, r9, #31
 80126a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80126a8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80126ac:	d02f      	beq.n	801270e <__lshift+0xc6>
 80126ae:	f1c9 0e20 	rsb	lr, r9, #32
 80126b2:	468a      	mov	sl, r1
 80126b4:	f04f 0c00 	mov.w	ip, #0
 80126b8:	681a      	ldr	r2, [r3, #0]
 80126ba:	fa02 f209 	lsl.w	r2, r2, r9
 80126be:	ea42 020c 	orr.w	r2, r2, ip
 80126c2:	f84a 2b04 	str.w	r2, [sl], #4
 80126c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80126ca:	4298      	cmp	r0, r3
 80126cc:	fa22 fc0e 	lsr.w	ip, r2, lr
 80126d0:	d8f2      	bhi.n	80126b8 <__lshift+0x70>
 80126d2:	1b03      	subs	r3, r0, r4
 80126d4:	3b15      	subs	r3, #21
 80126d6:	f023 0303 	bic.w	r3, r3, #3
 80126da:	3304      	adds	r3, #4
 80126dc:	f104 0215 	add.w	r2, r4, #21
 80126e0:	4290      	cmp	r0, r2
 80126e2:	bf38      	it	cc
 80126e4:	2304      	movcc	r3, #4
 80126e6:	f841 c003 	str.w	ip, [r1, r3]
 80126ea:	f1bc 0f00 	cmp.w	ip, #0
 80126ee:	d001      	beq.n	80126f4 <__lshift+0xac>
 80126f0:	f108 0602 	add.w	r6, r8, #2
 80126f4:	3e01      	subs	r6, #1
 80126f6:	4638      	mov	r0, r7
 80126f8:	612e      	str	r6, [r5, #16]
 80126fa:	4621      	mov	r1, r4
 80126fc:	f7ff fdd2 	bl	80122a4 <_Bfree>
 8012700:	4628      	mov	r0, r5
 8012702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012706:	f842 0f04 	str.w	r0, [r2, #4]!
 801270a:	3301      	adds	r3, #1
 801270c:	e7c1      	b.n	8012692 <__lshift+0x4a>
 801270e:	3904      	subs	r1, #4
 8012710:	f853 2b04 	ldr.w	r2, [r3], #4
 8012714:	f841 2f04 	str.w	r2, [r1, #4]!
 8012718:	4298      	cmp	r0, r3
 801271a:	d8f9      	bhi.n	8012710 <__lshift+0xc8>
 801271c:	e7ea      	b.n	80126f4 <__lshift+0xac>
 801271e:	bf00      	nop
 8012720:	080135af 	.word	0x080135af
 8012724:	080135c0 	.word	0x080135c0

08012728 <__mcmp>:
 8012728:	b530      	push	{r4, r5, lr}
 801272a:	6902      	ldr	r2, [r0, #16]
 801272c:	690c      	ldr	r4, [r1, #16]
 801272e:	1b12      	subs	r2, r2, r4
 8012730:	d10e      	bne.n	8012750 <__mcmp+0x28>
 8012732:	f100 0314 	add.w	r3, r0, #20
 8012736:	3114      	adds	r1, #20
 8012738:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801273c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012740:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012744:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012748:	42a5      	cmp	r5, r4
 801274a:	d003      	beq.n	8012754 <__mcmp+0x2c>
 801274c:	d305      	bcc.n	801275a <__mcmp+0x32>
 801274e:	2201      	movs	r2, #1
 8012750:	4610      	mov	r0, r2
 8012752:	bd30      	pop	{r4, r5, pc}
 8012754:	4283      	cmp	r3, r0
 8012756:	d3f3      	bcc.n	8012740 <__mcmp+0x18>
 8012758:	e7fa      	b.n	8012750 <__mcmp+0x28>
 801275a:	f04f 32ff 	mov.w	r2, #4294967295
 801275e:	e7f7      	b.n	8012750 <__mcmp+0x28>

08012760 <__mdiff>:
 8012760:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012764:	460c      	mov	r4, r1
 8012766:	4606      	mov	r6, r0
 8012768:	4611      	mov	r1, r2
 801276a:	4620      	mov	r0, r4
 801276c:	4690      	mov	r8, r2
 801276e:	f7ff ffdb 	bl	8012728 <__mcmp>
 8012772:	1e05      	subs	r5, r0, #0
 8012774:	d110      	bne.n	8012798 <__mdiff+0x38>
 8012776:	4629      	mov	r1, r5
 8012778:	4630      	mov	r0, r6
 801277a:	f7ff fd53 	bl	8012224 <_Balloc>
 801277e:	b930      	cbnz	r0, 801278e <__mdiff+0x2e>
 8012780:	4b3a      	ldr	r3, [pc, #232]	; (801286c <__mdiff+0x10c>)
 8012782:	4602      	mov	r2, r0
 8012784:	f240 2132 	movw	r1, #562	; 0x232
 8012788:	4839      	ldr	r0, [pc, #228]	; (8012870 <__mdiff+0x110>)
 801278a:	f000 f8e5 	bl	8012958 <__assert_func>
 801278e:	2301      	movs	r3, #1
 8012790:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012794:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012798:	bfa4      	itt	ge
 801279a:	4643      	movge	r3, r8
 801279c:	46a0      	movge	r8, r4
 801279e:	4630      	mov	r0, r6
 80127a0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80127a4:	bfa6      	itte	ge
 80127a6:	461c      	movge	r4, r3
 80127a8:	2500      	movge	r5, #0
 80127aa:	2501      	movlt	r5, #1
 80127ac:	f7ff fd3a 	bl	8012224 <_Balloc>
 80127b0:	b920      	cbnz	r0, 80127bc <__mdiff+0x5c>
 80127b2:	4b2e      	ldr	r3, [pc, #184]	; (801286c <__mdiff+0x10c>)
 80127b4:	4602      	mov	r2, r0
 80127b6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80127ba:	e7e5      	b.n	8012788 <__mdiff+0x28>
 80127bc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80127c0:	6926      	ldr	r6, [r4, #16]
 80127c2:	60c5      	str	r5, [r0, #12]
 80127c4:	f104 0914 	add.w	r9, r4, #20
 80127c8:	f108 0514 	add.w	r5, r8, #20
 80127cc:	f100 0e14 	add.w	lr, r0, #20
 80127d0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80127d4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80127d8:	f108 0210 	add.w	r2, r8, #16
 80127dc:	46f2      	mov	sl, lr
 80127de:	2100      	movs	r1, #0
 80127e0:	f859 3b04 	ldr.w	r3, [r9], #4
 80127e4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80127e8:	fa1f f883 	uxth.w	r8, r3
 80127ec:	fa11 f18b 	uxtah	r1, r1, fp
 80127f0:	0c1b      	lsrs	r3, r3, #16
 80127f2:	eba1 0808 	sub.w	r8, r1, r8
 80127f6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80127fa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80127fe:	fa1f f888 	uxth.w	r8, r8
 8012802:	1419      	asrs	r1, r3, #16
 8012804:	454e      	cmp	r6, r9
 8012806:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801280a:	f84a 3b04 	str.w	r3, [sl], #4
 801280e:	d8e7      	bhi.n	80127e0 <__mdiff+0x80>
 8012810:	1b33      	subs	r3, r6, r4
 8012812:	3b15      	subs	r3, #21
 8012814:	f023 0303 	bic.w	r3, r3, #3
 8012818:	3304      	adds	r3, #4
 801281a:	3415      	adds	r4, #21
 801281c:	42a6      	cmp	r6, r4
 801281e:	bf38      	it	cc
 8012820:	2304      	movcc	r3, #4
 8012822:	441d      	add	r5, r3
 8012824:	4473      	add	r3, lr
 8012826:	469e      	mov	lr, r3
 8012828:	462e      	mov	r6, r5
 801282a:	4566      	cmp	r6, ip
 801282c:	d30e      	bcc.n	801284c <__mdiff+0xec>
 801282e:	f10c 0203 	add.w	r2, ip, #3
 8012832:	1b52      	subs	r2, r2, r5
 8012834:	f022 0203 	bic.w	r2, r2, #3
 8012838:	3d03      	subs	r5, #3
 801283a:	45ac      	cmp	ip, r5
 801283c:	bf38      	it	cc
 801283e:	2200      	movcc	r2, #0
 8012840:	441a      	add	r2, r3
 8012842:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8012846:	b17b      	cbz	r3, 8012868 <__mdiff+0x108>
 8012848:	6107      	str	r7, [r0, #16]
 801284a:	e7a3      	b.n	8012794 <__mdiff+0x34>
 801284c:	f856 8b04 	ldr.w	r8, [r6], #4
 8012850:	fa11 f288 	uxtah	r2, r1, r8
 8012854:	1414      	asrs	r4, r2, #16
 8012856:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801285a:	b292      	uxth	r2, r2
 801285c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8012860:	f84e 2b04 	str.w	r2, [lr], #4
 8012864:	1421      	asrs	r1, r4, #16
 8012866:	e7e0      	b.n	801282a <__mdiff+0xca>
 8012868:	3f01      	subs	r7, #1
 801286a:	e7ea      	b.n	8012842 <__mdiff+0xe2>
 801286c:	080135af 	.word	0x080135af
 8012870:	080135c0 	.word	0x080135c0

08012874 <__d2b>:
 8012874:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012878:	4689      	mov	r9, r1
 801287a:	2101      	movs	r1, #1
 801287c:	ec57 6b10 	vmov	r6, r7, d0
 8012880:	4690      	mov	r8, r2
 8012882:	f7ff fccf 	bl	8012224 <_Balloc>
 8012886:	4604      	mov	r4, r0
 8012888:	b930      	cbnz	r0, 8012898 <__d2b+0x24>
 801288a:	4602      	mov	r2, r0
 801288c:	4b25      	ldr	r3, [pc, #148]	; (8012924 <__d2b+0xb0>)
 801288e:	4826      	ldr	r0, [pc, #152]	; (8012928 <__d2b+0xb4>)
 8012890:	f240 310a 	movw	r1, #778	; 0x30a
 8012894:	f000 f860 	bl	8012958 <__assert_func>
 8012898:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801289c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80128a0:	bb35      	cbnz	r5, 80128f0 <__d2b+0x7c>
 80128a2:	2e00      	cmp	r6, #0
 80128a4:	9301      	str	r3, [sp, #4]
 80128a6:	d028      	beq.n	80128fa <__d2b+0x86>
 80128a8:	4668      	mov	r0, sp
 80128aa:	9600      	str	r6, [sp, #0]
 80128ac:	f7ff fd82 	bl	80123b4 <__lo0bits>
 80128b0:	9900      	ldr	r1, [sp, #0]
 80128b2:	b300      	cbz	r0, 80128f6 <__d2b+0x82>
 80128b4:	9a01      	ldr	r2, [sp, #4]
 80128b6:	f1c0 0320 	rsb	r3, r0, #32
 80128ba:	fa02 f303 	lsl.w	r3, r2, r3
 80128be:	430b      	orrs	r3, r1
 80128c0:	40c2      	lsrs	r2, r0
 80128c2:	6163      	str	r3, [r4, #20]
 80128c4:	9201      	str	r2, [sp, #4]
 80128c6:	9b01      	ldr	r3, [sp, #4]
 80128c8:	61a3      	str	r3, [r4, #24]
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	bf14      	ite	ne
 80128ce:	2202      	movne	r2, #2
 80128d0:	2201      	moveq	r2, #1
 80128d2:	6122      	str	r2, [r4, #16]
 80128d4:	b1d5      	cbz	r5, 801290c <__d2b+0x98>
 80128d6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80128da:	4405      	add	r5, r0
 80128dc:	f8c9 5000 	str.w	r5, [r9]
 80128e0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80128e4:	f8c8 0000 	str.w	r0, [r8]
 80128e8:	4620      	mov	r0, r4
 80128ea:	b003      	add	sp, #12
 80128ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80128f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80128f4:	e7d5      	b.n	80128a2 <__d2b+0x2e>
 80128f6:	6161      	str	r1, [r4, #20]
 80128f8:	e7e5      	b.n	80128c6 <__d2b+0x52>
 80128fa:	a801      	add	r0, sp, #4
 80128fc:	f7ff fd5a 	bl	80123b4 <__lo0bits>
 8012900:	9b01      	ldr	r3, [sp, #4]
 8012902:	6163      	str	r3, [r4, #20]
 8012904:	2201      	movs	r2, #1
 8012906:	6122      	str	r2, [r4, #16]
 8012908:	3020      	adds	r0, #32
 801290a:	e7e3      	b.n	80128d4 <__d2b+0x60>
 801290c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012910:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012914:	f8c9 0000 	str.w	r0, [r9]
 8012918:	6918      	ldr	r0, [r3, #16]
 801291a:	f7ff fd2b 	bl	8012374 <__hi0bits>
 801291e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012922:	e7df      	b.n	80128e4 <__d2b+0x70>
 8012924:	080135af 	.word	0x080135af
 8012928:	080135c0 	.word	0x080135c0

0801292c <_calloc_r>:
 801292c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801292e:	fba1 2402 	umull	r2, r4, r1, r2
 8012932:	b94c      	cbnz	r4, 8012948 <_calloc_r+0x1c>
 8012934:	4611      	mov	r1, r2
 8012936:	9201      	str	r2, [sp, #4]
 8012938:	f7fe f9a0 	bl	8010c7c <_malloc_r>
 801293c:	9a01      	ldr	r2, [sp, #4]
 801293e:	4605      	mov	r5, r0
 8012940:	b930      	cbnz	r0, 8012950 <_calloc_r+0x24>
 8012942:	4628      	mov	r0, r5
 8012944:	b003      	add	sp, #12
 8012946:	bd30      	pop	{r4, r5, pc}
 8012948:	220c      	movs	r2, #12
 801294a:	6002      	str	r2, [r0, #0]
 801294c:	2500      	movs	r5, #0
 801294e:	e7f8      	b.n	8012942 <_calloc_r+0x16>
 8012950:	4621      	mov	r1, r4
 8012952:	f7fe f91f 	bl	8010b94 <memset>
 8012956:	e7f4      	b.n	8012942 <_calloc_r+0x16>

08012958 <__assert_func>:
 8012958:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801295a:	4614      	mov	r4, r2
 801295c:	461a      	mov	r2, r3
 801295e:	4b09      	ldr	r3, [pc, #36]	; (8012984 <__assert_func+0x2c>)
 8012960:	681b      	ldr	r3, [r3, #0]
 8012962:	4605      	mov	r5, r0
 8012964:	68d8      	ldr	r0, [r3, #12]
 8012966:	b14c      	cbz	r4, 801297c <__assert_func+0x24>
 8012968:	4b07      	ldr	r3, [pc, #28]	; (8012988 <__assert_func+0x30>)
 801296a:	9100      	str	r1, [sp, #0]
 801296c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012970:	4906      	ldr	r1, [pc, #24]	; (801298c <__assert_func+0x34>)
 8012972:	462b      	mov	r3, r5
 8012974:	f000 f80e 	bl	8012994 <fiprintf>
 8012978:	f000 fa5a 	bl	8012e30 <abort>
 801297c:	4b04      	ldr	r3, [pc, #16]	; (8012990 <__assert_func+0x38>)
 801297e:	461c      	mov	r4, r3
 8012980:	e7f3      	b.n	801296a <__assert_func+0x12>
 8012982:	bf00      	nop
 8012984:	24000184 	.word	0x24000184
 8012988:	0801371c 	.word	0x0801371c
 801298c:	08013729 	.word	0x08013729
 8012990:	08013757 	.word	0x08013757

08012994 <fiprintf>:
 8012994:	b40e      	push	{r1, r2, r3}
 8012996:	b503      	push	{r0, r1, lr}
 8012998:	4601      	mov	r1, r0
 801299a:	ab03      	add	r3, sp, #12
 801299c:	4805      	ldr	r0, [pc, #20]	; (80129b4 <fiprintf+0x20>)
 801299e:	f853 2b04 	ldr.w	r2, [r3], #4
 80129a2:	6800      	ldr	r0, [r0, #0]
 80129a4:	9301      	str	r3, [sp, #4]
 80129a6:	f000 f845 	bl	8012a34 <_vfiprintf_r>
 80129aa:	b002      	add	sp, #8
 80129ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80129b0:	b003      	add	sp, #12
 80129b2:	4770      	bx	lr
 80129b4:	24000184 	.word	0x24000184

080129b8 <__retarget_lock_init_recursive>:
 80129b8:	4770      	bx	lr

080129ba <__retarget_lock_acquire_recursive>:
 80129ba:	4770      	bx	lr

080129bc <__retarget_lock_release_recursive>:
 80129bc:	4770      	bx	lr

080129be <__ascii_mbtowc>:
 80129be:	b082      	sub	sp, #8
 80129c0:	b901      	cbnz	r1, 80129c4 <__ascii_mbtowc+0x6>
 80129c2:	a901      	add	r1, sp, #4
 80129c4:	b142      	cbz	r2, 80129d8 <__ascii_mbtowc+0x1a>
 80129c6:	b14b      	cbz	r3, 80129dc <__ascii_mbtowc+0x1e>
 80129c8:	7813      	ldrb	r3, [r2, #0]
 80129ca:	600b      	str	r3, [r1, #0]
 80129cc:	7812      	ldrb	r2, [r2, #0]
 80129ce:	1e10      	subs	r0, r2, #0
 80129d0:	bf18      	it	ne
 80129d2:	2001      	movne	r0, #1
 80129d4:	b002      	add	sp, #8
 80129d6:	4770      	bx	lr
 80129d8:	4610      	mov	r0, r2
 80129da:	e7fb      	b.n	80129d4 <__ascii_mbtowc+0x16>
 80129dc:	f06f 0001 	mvn.w	r0, #1
 80129e0:	e7f8      	b.n	80129d4 <__ascii_mbtowc+0x16>

080129e2 <__sfputc_r>:
 80129e2:	6893      	ldr	r3, [r2, #8]
 80129e4:	3b01      	subs	r3, #1
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	b410      	push	{r4}
 80129ea:	6093      	str	r3, [r2, #8]
 80129ec:	da08      	bge.n	8012a00 <__sfputc_r+0x1e>
 80129ee:	6994      	ldr	r4, [r2, #24]
 80129f0:	42a3      	cmp	r3, r4
 80129f2:	db01      	blt.n	80129f8 <__sfputc_r+0x16>
 80129f4:	290a      	cmp	r1, #10
 80129f6:	d103      	bne.n	8012a00 <__sfputc_r+0x1e>
 80129f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80129fc:	f000 b94a 	b.w	8012c94 <__swbuf_r>
 8012a00:	6813      	ldr	r3, [r2, #0]
 8012a02:	1c58      	adds	r0, r3, #1
 8012a04:	6010      	str	r0, [r2, #0]
 8012a06:	7019      	strb	r1, [r3, #0]
 8012a08:	4608      	mov	r0, r1
 8012a0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012a0e:	4770      	bx	lr

08012a10 <__sfputs_r>:
 8012a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a12:	4606      	mov	r6, r0
 8012a14:	460f      	mov	r7, r1
 8012a16:	4614      	mov	r4, r2
 8012a18:	18d5      	adds	r5, r2, r3
 8012a1a:	42ac      	cmp	r4, r5
 8012a1c:	d101      	bne.n	8012a22 <__sfputs_r+0x12>
 8012a1e:	2000      	movs	r0, #0
 8012a20:	e007      	b.n	8012a32 <__sfputs_r+0x22>
 8012a22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012a26:	463a      	mov	r2, r7
 8012a28:	4630      	mov	r0, r6
 8012a2a:	f7ff ffda 	bl	80129e2 <__sfputc_r>
 8012a2e:	1c43      	adds	r3, r0, #1
 8012a30:	d1f3      	bne.n	8012a1a <__sfputs_r+0xa>
 8012a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012a34 <_vfiprintf_r>:
 8012a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a38:	460d      	mov	r5, r1
 8012a3a:	b09d      	sub	sp, #116	; 0x74
 8012a3c:	4614      	mov	r4, r2
 8012a3e:	4698      	mov	r8, r3
 8012a40:	4606      	mov	r6, r0
 8012a42:	b118      	cbz	r0, 8012a4c <_vfiprintf_r+0x18>
 8012a44:	6983      	ldr	r3, [r0, #24]
 8012a46:	b90b      	cbnz	r3, 8012a4c <_vfiprintf_r+0x18>
 8012a48:	f000 fb14 	bl	8013074 <__sinit>
 8012a4c:	4b89      	ldr	r3, [pc, #548]	; (8012c74 <_vfiprintf_r+0x240>)
 8012a4e:	429d      	cmp	r5, r3
 8012a50:	d11b      	bne.n	8012a8a <_vfiprintf_r+0x56>
 8012a52:	6875      	ldr	r5, [r6, #4]
 8012a54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012a56:	07d9      	lsls	r1, r3, #31
 8012a58:	d405      	bmi.n	8012a66 <_vfiprintf_r+0x32>
 8012a5a:	89ab      	ldrh	r3, [r5, #12]
 8012a5c:	059a      	lsls	r2, r3, #22
 8012a5e:	d402      	bmi.n	8012a66 <_vfiprintf_r+0x32>
 8012a60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012a62:	f7ff ffaa 	bl	80129ba <__retarget_lock_acquire_recursive>
 8012a66:	89ab      	ldrh	r3, [r5, #12]
 8012a68:	071b      	lsls	r3, r3, #28
 8012a6a:	d501      	bpl.n	8012a70 <_vfiprintf_r+0x3c>
 8012a6c:	692b      	ldr	r3, [r5, #16]
 8012a6e:	b9eb      	cbnz	r3, 8012aac <_vfiprintf_r+0x78>
 8012a70:	4629      	mov	r1, r5
 8012a72:	4630      	mov	r0, r6
 8012a74:	f000 f96e 	bl	8012d54 <__swsetup_r>
 8012a78:	b1c0      	cbz	r0, 8012aac <_vfiprintf_r+0x78>
 8012a7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012a7c:	07dc      	lsls	r4, r3, #31
 8012a7e:	d50e      	bpl.n	8012a9e <_vfiprintf_r+0x6a>
 8012a80:	f04f 30ff 	mov.w	r0, #4294967295
 8012a84:	b01d      	add	sp, #116	; 0x74
 8012a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a8a:	4b7b      	ldr	r3, [pc, #492]	; (8012c78 <_vfiprintf_r+0x244>)
 8012a8c:	429d      	cmp	r5, r3
 8012a8e:	d101      	bne.n	8012a94 <_vfiprintf_r+0x60>
 8012a90:	68b5      	ldr	r5, [r6, #8]
 8012a92:	e7df      	b.n	8012a54 <_vfiprintf_r+0x20>
 8012a94:	4b79      	ldr	r3, [pc, #484]	; (8012c7c <_vfiprintf_r+0x248>)
 8012a96:	429d      	cmp	r5, r3
 8012a98:	bf08      	it	eq
 8012a9a:	68f5      	ldreq	r5, [r6, #12]
 8012a9c:	e7da      	b.n	8012a54 <_vfiprintf_r+0x20>
 8012a9e:	89ab      	ldrh	r3, [r5, #12]
 8012aa0:	0598      	lsls	r0, r3, #22
 8012aa2:	d4ed      	bmi.n	8012a80 <_vfiprintf_r+0x4c>
 8012aa4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012aa6:	f7ff ff89 	bl	80129bc <__retarget_lock_release_recursive>
 8012aaa:	e7e9      	b.n	8012a80 <_vfiprintf_r+0x4c>
 8012aac:	2300      	movs	r3, #0
 8012aae:	9309      	str	r3, [sp, #36]	; 0x24
 8012ab0:	2320      	movs	r3, #32
 8012ab2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012ab6:	f8cd 800c 	str.w	r8, [sp, #12]
 8012aba:	2330      	movs	r3, #48	; 0x30
 8012abc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012c80 <_vfiprintf_r+0x24c>
 8012ac0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012ac4:	f04f 0901 	mov.w	r9, #1
 8012ac8:	4623      	mov	r3, r4
 8012aca:	469a      	mov	sl, r3
 8012acc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012ad0:	b10a      	cbz	r2, 8012ad6 <_vfiprintf_r+0xa2>
 8012ad2:	2a25      	cmp	r2, #37	; 0x25
 8012ad4:	d1f9      	bne.n	8012aca <_vfiprintf_r+0x96>
 8012ad6:	ebba 0b04 	subs.w	fp, sl, r4
 8012ada:	d00b      	beq.n	8012af4 <_vfiprintf_r+0xc0>
 8012adc:	465b      	mov	r3, fp
 8012ade:	4622      	mov	r2, r4
 8012ae0:	4629      	mov	r1, r5
 8012ae2:	4630      	mov	r0, r6
 8012ae4:	f7ff ff94 	bl	8012a10 <__sfputs_r>
 8012ae8:	3001      	adds	r0, #1
 8012aea:	f000 80aa 	beq.w	8012c42 <_vfiprintf_r+0x20e>
 8012aee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012af0:	445a      	add	r2, fp
 8012af2:	9209      	str	r2, [sp, #36]	; 0x24
 8012af4:	f89a 3000 	ldrb.w	r3, [sl]
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	f000 80a2 	beq.w	8012c42 <_vfiprintf_r+0x20e>
 8012afe:	2300      	movs	r3, #0
 8012b00:	f04f 32ff 	mov.w	r2, #4294967295
 8012b04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012b08:	f10a 0a01 	add.w	sl, sl, #1
 8012b0c:	9304      	str	r3, [sp, #16]
 8012b0e:	9307      	str	r3, [sp, #28]
 8012b10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012b14:	931a      	str	r3, [sp, #104]	; 0x68
 8012b16:	4654      	mov	r4, sl
 8012b18:	2205      	movs	r2, #5
 8012b1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012b1e:	4858      	ldr	r0, [pc, #352]	; (8012c80 <_vfiprintf_r+0x24c>)
 8012b20:	f7ed fbe6 	bl	80002f0 <memchr>
 8012b24:	9a04      	ldr	r2, [sp, #16]
 8012b26:	b9d8      	cbnz	r0, 8012b60 <_vfiprintf_r+0x12c>
 8012b28:	06d1      	lsls	r1, r2, #27
 8012b2a:	bf44      	itt	mi
 8012b2c:	2320      	movmi	r3, #32
 8012b2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012b32:	0713      	lsls	r3, r2, #28
 8012b34:	bf44      	itt	mi
 8012b36:	232b      	movmi	r3, #43	; 0x2b
 8012b38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012b3c:	f89a 3000 	ldrb.w	r3, [sl]
 8012b40:	2b2a      	cmp	r3, #42	; 0x2a
 8012b42:	d015      	beq.n	8012b70 <_vfiprintf_r+0x13c>
 8012b44:	9a07      	ldr	r2, [sp, #28]
 8012b46:	4654      	mov	r4, sl
 8012b48:	2000      	movs	r0, #0
 8012b4a:	f04f 0c0a 	mov.w	ip, #10
 8012b4e:	4621      	mov	r1, r4
 8012b50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012b54:	3b30      	subs	r3, #48	; 0x30
 8012b56:	2b09      	cmp	r3, #9
 8012b58:	d94e      	bls.n	8012bf8 <_vfiprintf_r+0x1c4>
 8012b5a:	b1b0      	cbz	r0, 8012b8a <_vfiprintf_r+0x156>
 8012b5c:	9207      	str	r2, [sp, #28]
 8012b5e:	e014      	b.n	8012b8a <_vfiprintf_r+0x156>
 8012b60:	eba0 0308 	sub.w	r3, r0, r8
 8012b64:	fa09 f303 	lsl.w	r3, r9, r3
 8012b68:	4313      	orrs	r3, r2
 8012b6a:	9304      	str	r3, [sp, #16]
 8012b6c:	46a2      	mov	sl, r4
 8012b6e:	e7d2      	b.n	8012b16 <_vfiprintf_r+0xe2>
 8012b70:	9b03      	ldr	r3, [sp, #12]
 8012b72:	1d19      	adds	r1, r3, #4
 8012b74:	681b      	ldr	r3, [r3, #0]
 8012b76:	9103      	str	r1, [sp, #12]
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	bfbb      	ittet	lt
 8012b7c:	425b      	neglt	r3, r3
 8012b7e:	f042 0202 	orrlt.w	r2, r2, #2
 8012b82:	9307      	strge	r3, [sp, #28]
 8012b84:	9307      	strlt	r3, [sp, #28]
 8012b86:	bfb8      	it	lt
 8012b88:	9204      	strlt	r2, [sp, #16]
 8012b8a:	7823      	ldrb	r3, [r4, #0]
 8012b8c:	2b2e      	cmp	r3, #46	; 0x2e
 8012b8e:	d10c      	bne.n	8012baa <_vfiprintf_r+0x176>
 8012b90:	7863      	ldrb	r3, [r4, #1]
 8012b92:	2b2a      	cmp	r3, #42	; 0x2a
 8012b94:	d135      	bne.n	8012c02 <_vfiprintf_r+0x1ce>
 8012b96:	9b03      	ldr	r3, [sp, #12]
 8012b98:	1d1a      	adds	r2, r3, #4
 8012b9a:	681b      	ldr	r3, [r3, #0]
 8012b9c:	9203      	str	r2, [sp, #12]
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	bfb8      	it	lt
 8012ba2:	f04f 33ff 	movlt.w	r3, #4294967295
 8012ba6:	3402      	adds	r4, #2
 8012ba8:	9305      	str	r3, [sp, #20]
 8012baa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012c90 <_vfiprintf_r+0x25c>
 8012bae:	7821      	ldrb	r1, [r4, #0]
 8012bb0:	2203      	movs	r2, #3
 8012bb2:	4650      	mov	r0, sl
 8012bb4:	f7ed fb9c 	bl	80002f0 <memchr>
 8012bb8:	b140      	cbz	r0, 8012bcc <_vfiprintf_r+0x198>
 8012bba:	2340      	movs	r3, #64	; 0x40
 8012bbc:	eba0 000a 	sub.w	r0, r0, sl
 8012bc0:	fa03 f000 	lsl.w	r0, r3, r0
 8012bc4:	9b04      	ldr	r3, [sp, #16]
 8012bc6:	4303      	orrs	r3, r0
 8012bc8:	3401      	adds	r4, #1
 8012bca:	9304      	str	r3, [sp, #16]
 8012bcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012bd0:	482c      	ldr	r0, [pc, #176]	; (8012c84 <_vfiprintf_r+0x250>)
 8012bd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012bd6:	2206      	movs	r2, #6
 8012bd8:	f7ed fb8a 	bl	80002f0 <memchr>
 8012bdc:	2800      	cmp	r0, #0
 8012bde:	d03f      	beq.n	8012c60 <_vfiprintf_r+0x22c>
 8012be0:	4b29      	ldr	r3, [pc, #164]	; (8012c88 <_vfiprintf_r+0x254>)
 8012be2:	bb1b      	cbnz	r3, 8012c2c <_vfiprintf_r+0x1f8>
 8012be4:	9b03      	ldr	r3, [sp, #12]
 8012be6:	3307      	adds	r3, #7
 8012be8:	f023 0307 	bic.w	r3, r3, #7
 8012bec:	3308      	adds	r3, #8
 8012bee:	9303      	str	r3, [sp, #12]
 8012bf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012bf2:	443b      	add	r3, r7
 8012bf4:	9309      	str	r3, [sp, #36]	; 0x24
 8012bf6:	e767      	b.n	8012ac8 <_vfiprintf_r+0x94>
 8012bf8:	fb0c 3202 	mla	r2, ip, r2, r3
 8012bfc:	460c      	mov	r4, r1
 8012bfe:	2001      	movs	r0, #1
 8012c00:	e7a5      	b.n	8012b4e <_vfiprintf_r+0x11a>
 8012c02:	2300      	movs	r3, #0
 8012c04:	3401      	adds	r4, #1
 8012c06:	9305      	str	r3, [sp, #20]
 8012c08:	4619      	mov	r1, r3
 8012c0a:	f04f 0c0a 	mov.w	ip, #10
 8012c0e:	4620      	mov	r0, r4
 8012c10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012c14:	3a30      	subs	r2, #48	; 0x30
 8012c16:	2a09      	cmp	r2, #9
 8012c18:	d903      	bls.n	8012c22 <_vfiprintf_r+0x1ee>
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	d0c5      	beq.n	8012baa <_vfiprintf_r+0x176>
 8012c1e:	9105      	str	r1, [sp, #20]
 8012c20:	e7c3      	b.n	8012baa <_vfiprintf_r+0x176>
 8012c22:	fb0c 2101 	mla	r1, ip, r1, r2
 8012c26:	4604      	mov	r4, r0
 8012c28:	2301      	movs	r3, #1
 8012c2a:	e7f0      	b.n	8012c0e <_vfiprintf_r+0x1da>
 8012c2c:	ab03      	add	r3, sp, #12
 8012c2e:	9300      	str	r3, [sp, #0]
 8012c30:	462a      	mov	r2, r5
 8012c32:	4b16      	ldr	r3, [pc, #88]	; (8012c8c <_vfiprintf_r+0x258>)
 8012c34:	a904      	add	r1, sp, #16
 8012c36:	4630      	mov	r0, r6
 8012c38:	f7fe f926 	bl	8010e88 <_printf_float>
 8012c3c:	4607      	mov	r7, r0
 8012c3e:	1c78      	adds	r0, r7, #1
 8012c40:	d1d6      	bne.n	8012bf0 <_vfiprintf_r+0x1bc>
 8012c42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012c44:	07d9      	lsls	r1, r3, #31
 8012c46:	d405      	bmi.n	8012c54 <_vfiprintf_r+0x220>
 8012c48:	89ab      	ldrh	r3, [r5, #12]
 8012c4a:	059a      	lsls	r2, r3, #22
 8012c4c:	d402      	bmi.n	8012c54 <_vfiprintf_r+0x220>
 8012c4e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012c50:	f7ff feb4 	bl	80129bc <__retarget_lock_release_recursive>
 8012c54:	89ab      	ldrh	r3, [r5, #12]
 8012c56:	065b      	lsls	r3, r3, #25
 8012c58:	f53f af12 	bmi.w	8012a80 <_vfiprintf_r+0x4c>
 8012c5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012c5e:	e711      	b.n	8012a84 <_vfiprintf_r+0x50>
 8012c60:	ab03      	add	r3, sp, #12
 8012c62:	9300      	str	r3, [sp, #0]
 8012c64:	462a      	mov	r2, r5
 8012c66:	4b09      	ldr	r3, [pc, #36]	; (8012c8c <_vfiprintf_r+0x258>)
 8012c68:	a904      	add	r1, sp, #16
 8012c6a:	4630      	mov	r0, r6
 8012c6c:	f7fe fb98 	bl	80113a0 <_printf_i>
 8012c70:	e7e4      	b.n	8012c3c <_vfiprintf_r+0x208>
 8012c72:	bf00      	nop
 8012c74:	08013894 	.word	0x08013894
 8012c78:	080138b4 	.word	0x080138b4
 8012c7c:	08013874 	.word	0x08013874
 8012c80:	08013762 	.word	0x08013762
 8012c84:	0801376c 	.word	0x0801376c
 8012c88:	08010e89 	.word	0x08010e89
 8012c8c:	08012a11 	.word	0x08012a11
 8012c90:	08013768 	.word	0x08013768

08012c94 <__swbuf_r>:
 8012c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c96:	460e      	mov	r6, r1
 8012c98:	4614      	mov	r4, r2
 8012c9a:	4605      	mov	r5, r0
 8012c9c:	b118      	cbz	r0, 8012ca6 <__swbuf_r+0x12>
 8012c9e:	6983      	ldr	r3, [r0, #24]
 8012ca0:	b90b      	cbnz	r3, 8012ca6 <__swbuf_r+0x12>
 8012ca2:	f000 f9e7 	bl	8013074 <__sinit>
 8012ca6:	4b21      	ldr	r3, [pc, #132]	; (8012d2c <__swbuf_r+0x98>)
 8012ca8:	429c      	cmp	r4, r3
 8012caa:	d12b      	bne.n	8012d04 <__swbuf_r+0x70>
 8012cac:	686c      	ldr	r4, [r5, #4]
 8012cae:	69a3      	ldr	r3, [r4, #24]
 8012cb0:	60a3      	str	r3, [r4, #8]
 8012cb2:	89a3      	ldrh	r3, [r4, #12]
 8012cb4:	071a      	lsls	r2, r3, #28
 8012cb6:	d52f      	bpl.n	8012d18 <__swbuf_r+0x84>
 8012cb8:	6923      	ldr	r3, [r4, #16]
 8012cba:	b36b      	cbz	r3, 8012d18 <__swbuf_r+0x84>
 8012cbc:	6923      	ldr	r3, [r4, #16]
 8012cbe:	6820      	ldr	r0, [r4, #0]
 8012cc0:	1ac0      	subs	r0, r0, r3
 8012cc2:	6963      	ldr	r3, [r4, #20]
 8012cc4:	b2f6      	uxtb	r6, r6
 8012cc6:	4283      	cmp	r3, r0
 8012cc8:	4637      	mov	r7, r6
 8012cca:	dc04      	bgt.n	8012cd6 <__swbuf_r+0x42>
 8012ccc:	4621      	mov	r1, r4
 8012cce:	4628      	mov	r0, r5
 8012cd0:	f000 f93c 	bl	8012f4c <_fflush_r>
 8012cd4:	bb30      	cbnz	r0, 8012d24 <__swbuf_r+0x90>
 8012cd6:	68a3      	ldr	r3, [r4, #8]
 8012cd8:	3b01      	subs	r3, #1
 8012cda:	60a3      	str	r3, [r4, #8]
 8012cdc:	6823      	ldr	r3, [r4, #0]
 8012cde:	1c5a      	adds	r2, r3, #1
 8012ce0:	6022      	str	r2, [r4, #0]
 8012ce2:	701e      	strb	r6, [r3, #0]
 8012ce4:	6963      	ldr	r3, [r4, #20]
 8012ce6:	3001      	adds	r0, #1
 8012ce8:	4283      	cmp	r3, r0
 8012cea:	d004      	beq.n	8012cf6 <__swbuf_r+0x62>
 8012cec:	89a3      	ldrh	r3, [r4, #12]
 8012cee:	07db      	lsls	r3, r3, #31
 8012cf0:	d506      	bpl.n	8012d00 <__swbuf_r+0x6c>
 8012cf2:	2e0a      	cmp	r6, #10
 8012cf4:	d104      	bne.n	8012d00 <__swbuf_r+0x6c>
 8012cf6:	4621      	mov	r1, r4
 8012cf8:	4628      	mov	r0, r5
 8012cfa:	f000 f927 	bl	8012f4c <_fflush_r>
 8012cfe:	b988      	cbnz	r0, 8012d24 <__swbuf_r+0x90>
 8012d00:	4638      	mov	r0, r7
 8012d02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d04:	4b0a      	ldr	r3, [pc, #40]	; (8012d30 <__swbuf_r+0x9c>)
 8012d06:	429c      	cmp	r4, r3
 8012d08:	d101      	bne.n	8012d0e <__swbuf_r+0x7a>
 8012d0a:	68ac      	ldr	r4, [r5, #8]
 8012d0c:	e7cf      	b.n	8012cae <__swbuf_r+0x1a>
 8012d0e:	4b09      	ldr	r3, [pc, #36]	; (8012d34 <__swbuf_r+0xa0>)
 8012d10:	429c      	cmp	r4, r3
 8012d12:	bf08      	it	eq
 8012d14:	68ec      	ldreq	r4, [r5, #12]
 8012d16:	e7ca      	b.n	8012cae <__swbuf_r+0x1a>
 8012d18:	4621      	mov	r1, r4
 8012d1a:	4628      	mov	r0, r5
 8012d1c:	f000 f81a 	bl	8012d54 <__swsetup_r>
 8012d20:	2800      	cmp	r0, #0
 8012d22:	d0cb      	beq.n	8012cbc <__swbuf_r+0x28>
 8012d24:	f04f 37ff 	mov.w	r7, #4294967295
 8012d28:	e7ea      	b.n	8012d00 <__swbuf_r+0x6c>
 8012d2a:	bf00      	nop
 8012d2c:	08013894 	.word	0x08013894
 8012d30:	080138b4 	.word	0x080138b4
 8012d34:	08013874 	.word	0x08013874

08012d38 <__ascii_wctomb>:
 8012d38:	b149      	cbz	r1, 8012d4e <__ascii_wctomb+0x16>
 8012d3a:	2aff      	cmp	r2, #255	; 0xff
 8012d3c:	bf85      	ittet	hi
 8012d3e:	238a      	movhi	r3, #138	; 0x8a
 8012d40:	6003      	strhi	r3, [r0, #0]
 8012d42:	700a      	strbls	r2, [r1, #0]
 8012d44:	f04f 30ff 	movhi.w	r0, #4294967295
 8012d48:	bf98      	it	ls
 8012d4a:	2001      	movls	r0, #1
 8012d4c:	4770      	bx	lr
 8012d4e:	4608      	mov	r0, r1
 8012d50:	4770      	bx	lr
	...

08012d54 <__swsetup_r>:
 8012d54:	4b32      	ldr	r3, [pc, #200]	; (8012e20 <__swsetup_r+0xcc>)
 8012d56:	b570      	push	{r4, r5, r6, lr}
 8012d58:	681d      	ldr	r5, [r3, #0]
 8012d5a:	4606      	mov	r6, r0
 8012d5c:	460c      	mov	r4, r1
 8012d5e:	b125      	cbz	r5, 8012d6a <__swsetup_r+0x16>
 8012d60:	69ab      	ldr	r3, [r5, #24]
 8012d62:	b913      	cbnz	r3, 8012d6a <__swsetup_r+0x16>
 8012d64:	4628      	mov	r0, r5
 8012d66:	f000 f985 	bl	8013074 <__sinit>
 8012d6a:	4b2e      	ldr	r3, [pc, #184]	; (8012e24 <__swsetup_r+0xd0>)
 8012d6c:	429c      	cmp	r4, r3
 8012d6e:	d10f      	bne.n	8012d90 <__swsetup_r+0x3c>
 8012d70:	686c      	ldr	r4, [r5, #4]
 8012d72:	89a3      	ldrh	r3, [r4, #12]
 8012d74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012d78:	0719      	lsls	r1, r3, #28
 8012d7a:	d42c      	bmi.n	8012dd6 <__swsetup_r+0x82>
 8012d7c:	06dd      	lsls	r5, r3, #27
 8012d7e:	d411      	bmi.n	8012da4 <__swsetup_r+0x50>
 8012d80:	2309      	movs	r3, #9
 8012d82:	6033      	str	r3, [r6, #0]
 8012d84:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012d88:	81a3      	strh	r3, [r4, #12]
 8012d8a:	f04f 30ff 	mov.w	r0, #4294967295
 8012d8e:	e03e      	b.n	8012e0e <__swsetup_r+0xba>
 8012d90:	4b25      	ldr	r3, [pc, #148]	; (8012e28 <__swsetup_r+0xd4>)
 8012d92:	429c      	cmp	r4, r3
 8012d94:	d101      	bne.n	8012d9a <__swsetup_r+0x46>
 8012d96:	68ac      	ldr	r4, [r5, #8]
 8012d98:	e7eb      	b.n	8012d72 <__swsetup_r+0x1e>
 8012d9a:	4b24      	ldr	r3, [pc, #144]	; (8012e2c <__swsetup_r+0xd8>)
 8012d9c:	429c      	cmp	r4, r3
 8012d9e:	bf08      	it	eq
 8012da0:	68ec      	ldreq	r4, [r5, #12]
 8012da2:	e7e6      	b.n	8012d72 <__swsetup_r+0x1e>
 8012da4:	0758      	lsls	r0, r3, #29
 8012da6:	d512      	bpl.n	8012dce <__swsetup_r+0x7a>
 8012da8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012daa:	b141      	cbz	r1, 8012dbe <__swsetup_r+0x6a>
 8012dac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012db0:	4299      	cmp	r1, r3
 8012db2:	d002      	beq.n	8012dba <__swsetup_r+0x66>
 8012db4:	4630      	mov	r0, r6
 8012db6:	f7fd fef5 	bl	8010ba4 <_free_r>
 8012dba:	2300      	movs	r3, #0
 8012dbc:	6363      	str	r3, [r4, #52]	; 0x34
 8012dbe:	89a3      	ldrh	r3, [r4, #12]
 8012dc0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012dc4:	81a3      	strh	r3, [r4, #12]
 8012dc6:	2300      	movs	r3, #0
 8012dc8:	6063      	str	r3, [r4, #4]
 8012dca:	6923      	ldr	r3, [r4, #16]
 8012dcc:	6023      	str	r3, [r4, #0]
 8012dce:	89a3      	ldrh	r3, [r4, #12]
 8012dd0:	f043 0308 	orr.w	r3, r3, #8
 8012dd4:	81a3      	strh	r3, [r4, #12]
 8012dd6:	6923      	ldr	r3, [r4, #16]
 8012dd8:	b94b      	cbnz	r3, 8012dee <__swsetup_r+0x9a>
 8012dda:	89a3      	ldrh	r3, [r4, #12]
 8012ddc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012de0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012de4:	d003      	beq.n	8012dee <__swsetup_r+0x9a>
 8012de6:	4621      	mov	r1, r4
 8012de8:	4630      	mov	r0, r6
 8012dea:	f000 fa05 	bl	80131f8 <__smakebuf_r>
 8012dee:	89a0      	ldrh	r0, [r4, #12]
 8012df0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012df4:	f010 0301 	ands.w	r3, r0, #1
 8012df8:	d00a      	beq.n	8012e10 <__swsetup_r+0xbc>
 8012dfa:	2300      	movs	r3, #0
 8012dfc:	60a3      	str	r3, [r4, #8]
 8012dfe:	6963      	ldr	r3, [r4, #20]
 8012e00:	425b      	negs	r3, r3
 8012e02:	61a3      	str	r3, [r4, #24]
 8012e04:	6923      	ldr	r3, [r4, #16]
 8012e06:	b943      	cbnz	r3, 8012e1a <__swsetup_r+0xc6>
 8012e08:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012e0c:	d1ba      	bne.n	8012d84 <__swsetup_r+0x30>
 8012e0e:	bd70      	pop	{r4, r5, r6, pc}
 8012e10:	0781      	lsls	r1, r0, #30
 8012e12:	bf58      	it	pl
 8012e14:	6963      	ldrpl	r3, [r4, #20]
 8012e16:	60a3      	str	r3, [r4, #8]
 8012e18:	e7f4      	b.n	8012e04 <__swsetup_r+0xb0>
 8012e1a:	2000      	movs	r0, #0
 8012e1c:	e7f7      	b.n	8012e0e <__swsetup_r+0xba>
 8012e1e:	bf00      	nop
 8012e20:	24000184 	.word	0x24000184
 8012e24:	08013894 	.word	0x08013894
 8012e28:	080138b4 	.word	0x080138b4
 8012e2c:	08013874 	.word	0x08013874

08012e30 <abort>:
 8012e30:	b508      	push	{r3, lr}
 8012e32:	2006      	movs	r0, #6
 8012e34:	f000 fa48 	bl	80132c8 <raise>
 8012e38:	2001      	movs	r0, #1
 8012e3a:	f7ee fa0f 	bl	800125c <_exit>
	...

08012e40 <__sflush_r>:
 8012e40:	898a      	ldrh	r2, [r1, #12]
 8012e42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e46:	4605      	mov	r5, r0
 8012e48:	0710      	lsls	r0, r2, #28
 8012e4a:	460c      	mov	r4, r1
 8012e4c:	d458      	bmi.n	8012f00 <__sflush_r+0xc0>
 8012e4e:	684b      	ldr	r3, [r1, #4]
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	dc05      	bgt.n	8012e60 <__sflush_r+0x20>
 8012e54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	dc02      	bgt.n	8012e60 <__sflush_r+0x20>
 8012e5a:	2000      	movs	r0, #0
 8012e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012e62:	2e00      	cmp	r6, #0
 8012e64:	d0f9      	beq.n	8012e5a <__sflush_r+0x1a>
 8012e66:	2300      	movs	r3, #0
 8012e68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012e6c:	682f      	ldr	r7, [r5, #0]
 8012e6e:	602b      	str	r3, [r5, #0]
 8012e70:	d032      	beq.n	8012ed8 <__sflush_r+0x98>
 8012e72:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012e74:	89a3      	ldrh	r3, [r4, #12]
 8012e76:	075a      	lsls	r2, r3, #29
 8012e78:	d505      	bpl.n	8012e86 <__sflush_r+0x46>
 8012e7a:	6863      	ldr	r3, [r4, #4]
 8012e7c:	1ac0      	subs	r0, r0, r3
 8012e7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012e80:	b10b      	cbz	r3, 8012e86 <__sflush_r+0x46>
 8012e82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012e84:	1ac0      	subs	r0, r0, r3
 8012e86:	2300      	movs	r3, #0
 8012e88:	4602      	mov	r2, r0
 8012e8a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012e8c:	6a21      	ldr	r1, [r4, #32]
 8012e8e:	4628      	mov	r0, r5
 8012e90:	47b0      	blx	r6
 8012e92:	1c43      	adds	r3, r0, #1
 8012e94:	89a3      	ldrh	r3, [r4, #12]
 8012e96:	d106      	bne.n	8012ea6 <__sflush_r+0x66>
 8012e98:	6829      	ldr	r1, [r5, #0]
 8012e9a:	291d      	cmp	r1, #29
 8012e9c:	d82c      	bhi.n	8012ef8 <__sflush_r+0xb8>
 8012e9e:	4a2a      	ldr	r2, [pc, #168]	; (8012f48 <__sflush_r+0x108>)
 8012ea0:	40ca      	lsrs	r2, r1
 8012ea2:	07d6      	lsls	r6, r2, #31
 8012ea4:	d528      	bpl.n	8012ef8 <__sflush_r+0xb8>
 8012ea6:	2200      	movs	r2, #0
 8012ea8:	6062      	str	r2, [r4, #4]
 8012eaa:	04d9      	lsls	r1, r3, #19
 8012eac:	6922      	ldr	r2, [r4, #16]
 8012eae:	6022      	str	r2, [r4, #0]
 8012eb0:	d504      	bpl.n	8012ebc <__sflush_r+0x7c>
 8012eb2:	1c42      	adds	r2, r0, #1
 8012eb4:	d101      	bne.n	8012eba <__sflush_r+0x7a>
 8012eb6:	682b      	ldr	r3, [r5, #0]
 8012eb8:	b903      	cbnz	r3, 8012ebc <__sflush_r+0x7c>
 8012eba:	6560      	str	r0, [r4, #84]	; 0x54
 8012ebc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012ebe:	602f      	str	r7, [r5, #0]
 8012ec0:	2900      	cmp	r1, #0
 8012ec2:	d0ca      	beq.n	8012e5a <__sflush_r+0x1a>
 8012ec4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012ec8:	4299      	cmp	r1, r3
 8012eca:	d002      	beq.n	8012ed2 <__sflush_r+0x92>
 8012ecc:	4628      	mov	r0, r5
 8012ece:	f7fd fe69 	bl	8010ba4 <_free_r>
 8012ed2:	2000      	movs	r0, #0
 8012ed4:	6360      	str	r0, [r4, #52]	; 0x34
 8012ed6:	e7c1      	b.n	8012e5c <__sflush_r+0x1c>
 8012ed8:	6a21      	ldr	r1, [r4, #32]
 8012eda:	2301      	movs	r3, #1
 8012edc:	4628      	mov	r0, r5
 8012ede:	47b0      	blx	r6
 8012ee0:	1c41      	adds	r1, r0, #1
 8012ee2:	d1c7      	bne.n	8012e74 <__sflush_r+0x34>
 8012ee4:	682b      	ldr	r3, [r5, #0]
 8012ee6:	2b00      	cmp	r3, #0
 8012ee8:	d0c4      	beq.n	8012e74 <__sflush_r+0x34>
 8012eea:	2b1d      	cmp	r3, #29
 8012eec:	d001      	beq.n	8012ef2 <__sflush_r+0xb2>
 8012eee:	2b16      	cmp	r3, #22
 8012ef0:	d101      	bne.n	8012ef6 <__sflush_r+0xb6>
 8012ef2:	602f      	str	r7, [r5, #0]
 8012ef4:	e7b1      	b.n	8012e5a <__sflush_r+0x1a>
 8012ef6:	89a3      	ldrh	r3, [r4, #12]
 8012ef8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012efc:	81a3      	strh	r3, [r4, #12]
 8012efe:	e7ad      	b.n	8012e5c <__sflush_r+0x1c>
 8012f00:	690f      	ldr	r7, [r1, #16]
 8012f02:	2f00      	cmp	r7, #0
 8012f04:	d0a9      	beq.n	8012e5a <__sflush_r+0x1a>
 8012f06:	0793      	lsls	r3, r2, #30
 8012f08:	680e      	ldr	r6, [r1, #0]
 8012f0a:	bf08      	it	eq
 8012f0c:	694b      	ldreq	r3, [r1, #20]
 8012f0e:	600f      	str	r7, [r1, #0]
 8012f10:	bf18      	it	ne
 8012f12:	2300      	movne	r3, #0
 8012f14:	eba6 0807 	sub.w	r8, r6, r7
 8012f18:	608b      	str	r3, [r1, #8]
 8012f1a:	f1b8 0f00 	cmp.w	r8, #0
 8012f1e:	dd9c      	ble.n	8012e5a <__sflush_r+0x1a>
 8012f20:	6a21      	ldr	r1, [r4, #32]
 8012f22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012f24:	4643      	mov	r3, r8
 8012f26:	463a      	mov	r2, r7
 8012f28:	4628      	mov	r0, r5
 8012f2a:	47b0      	blx	r6
 8012f2c:	2800      	cmp	r0, #0
 8012f2e:	dc06      	bgt.n	8012f3e <__sflush_r+0xfe>
 8012f30:	89a3      	ldrh	r3, [r4, #12]
 8012f32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012f36:	81a3      	strh	r3, [r4, #12]
 8012f38:	f04f 30ff 	mov.w	r0, #4294967295
 8012f3c:	e78e      	b.n	8012e5c <__sflush_r+0x1c>
 8012f3e:	4407      	add	r7, r0
 8012f40:	eba8 0800 	sub.w	r8, r8, r0
 8012f44:	e7e9      	b.n	8012f1a <__sflush_r+0xda>
 8012f46:	bf00      	nop
 8012f48:	20400001 	.word	0x20400001

08012f4c <_fflush_r>:
 8012f4c:	b538      	push	{r3, r4, r5, lr}
 8012f4e:	690b      	ldr	r3, [r1, #16]
 8012f50:	4605      	mov	r5, r0
 8012f52:	460c      	mov	r4, r1
 8012f54:	b913      	cbnz	r3, 8012f5c <_fflush_r+0x10>
 8012f56:	2500      	movs	r5, #0
 8012f58:	4628      	mov	r0, r5
 8012f5a:	bd38      	pop	{r3, r4, r5, pc}
 8012f5c:	b118      	cbz	r0, 8012f66 <_fflush_r+0x1a>
 8012f5e:	6983      	ldr	r3, [r0, #24]
 8012f60:	b90b      	cbnz	r3, 8012f66 <_fflush_r+0x1a>
 8012f62:	f000 f887 	bl	8013074 <__sinit>
 8012f66:	4b14      	ldr	r3, [pc, #80]	; (8012fb8 <_fflush_r+0x6c>)
 8012f68:	429c      	cmp	r4, r3
 8012f6a:	d11b      	bne.n	8012fa4 <_fflush_r+0x58>
 8012f6c:	686c      	ldr	r4, [r5, #4]
 8012f6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012f72:	2b00      	cmp	r3, #0
 8012f74:	d0ef      	beq.n	8012f56 <_fflush_r+0xa>
 8012f76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012f78:	07d0      	lsls	r0, r2, #31
 8012f7a:	d404      	bmi.n	8012f86 <_fflush_r+0x3a>
 8012f7c:	0599      	lsls	r1, r3, #22
 8012f7e:	d402      	bmi.n	8012f86 <_fflush_r+0x3a>
 8012f80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012f82:	f7ff fd1a 	bl	80129ba <__retarget_lock_acquire_recursive>
 8012f86:	4628      	mov	r0, r5
 8012f88:	4621      	mov	r1, r4
 8012f8a:	f7ff ff59 	bl	8012e40 <__sflush_r>
 8012f8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012f90:	07da      	lsls	r2, r3, #31
 8012f92:	4605      	mov	r5, r0
 8012f94:	d4e0      	bmi.n	8012f58 <_fflush_r+0xc>
 8012f96:	89a3      	ldrh	r3, [r4, #12]
 8012f98:	059b      	lsls	r3, r3, #22
 8012f9a:	d4dd      	bmi.n	8012f58 <_fflush_r+0xc>
 8012f9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012f9e:	f7ff fd0d 	bl	80129bc <__retarget_lock_release_recursive>
 8012fa2:	e7d9      	b.n	8012f58 <_fflush_r+0xc>
 8012fa4:	4b05      	ldr	r3, [pc, #20]	; (8012fbc <_fflush_r+0x70>)
 8012fa6:	429c      	cmp	r4, r3
 8012fa8:	d101      	bne.n	8012fae <_fflush_r+0x62>
 8012faa:	68ac      	ldr	r4, [r5, #8]
 8012fac:	e7df      	b.n	8012f6e <_fflush_r+0x22>
 8012fae:	4b04      	ldr	r3, [pc, #16]	; (8012fc0 <_fflush_r+0x74>)
 8012fb0:	429c      	cmp	r4, r3
 8012fb2:	bf08      	it	eq
 8012fb4:	68ec      	ldreq	r4, [r5, #12]
 8012fb6:	e7da      	b.n	8012f6e <_fflush_r+0x22>
 8012fb8:	08013894 	.word	0x08013894
 8012fbc:	080138b4 	.word	0x080138b4
 8012fc0:	08013874 	.word	0x08013874

08012fc4 <std>:
 8012fc4:	2300      	movs	r3, #0
 8012fc6:	b510      	push	{r4, lr}
 8012fc8:	4604      	mov	r4, r0
 8012fca:	e9c0 3300 	strd	r3, r3, [r0]
 8012fce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012fd2:	6083      	str	r3, [r0, #8]
 8012fd4:	8181      	strh	r1, [r0, #12]
 8012fd6:	6643      	str	r3, [r0, #100]	; 0x64
 8012fd8:	81c2      	strh	r2, [r0, #14]
 8012fda:	6183      	str	r3, [r0, #24]
 8012fdc:	4619      	mov	r1, r3
 8012fde:	2208      	movs	r2, #8
 8012fe0:	305c      	adds	r0, #92	; 0x5c
 8012fe2:	f7fd fdd7 	bl	8010b94 <memset>
 8012fe6:	4b05      	ldr	r3, [pc, #20]	; (8012ffc <std+0x38>)
 8012fe8:	6263      	str	r3, [r4, #36]	; 0x24
 8012fea:	4b05      	ldr	r3, [pc, #20]	; (8013000 <std+0x3c>)
 8012fec:	62a3      	str	r3, [r4, #40]	; 0x28
 8012fee:	4b05      	ldr	r3, [pc, #20]	; (8013004 <std+0x40>)
 8012ff0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012ff2:	4b05      	ldr	r3, [pc, #20]	; (8013008 <std+0x44>)
 8012ff4:	6224      	str	r4, [r4, #32]
 8012ff6:	6323      	str	r3, [r4, #48]	; 0x30
 8012ff8:	bd10      	pop	{r4, pc}
 8012ffa:	bf00      	nop
 8012ffc:	08013301 	.word	0x08013301
 8013000:	08013323 	.word	0x08013323
 8013004:	0801335b 	.word	0x0801335b
 8013008:	0801337f 	.word	0x0801337f

0801300c <_cleanup_r>:
 801300c:	4901      	ldr	r1, [pc, #4]	; (8013014 <_cleanup_r+0x8>)
 801300e:	f000 b8af 	b.w	8013170 <_fwalk_reent>
 8013012:	bf00      	nop
 8013014:	08012f4d 	.word	0x08012f4d

08013018 <__sfmoreglue>:
 8013018:	b570      	push	{r4, r5, r6, lr}
 801301a:	2268      	movs	r2, #104	; 0x68
 801301c:	1e4d      	subs	r5, r1, #1
 801301e:	4355      	muls	r5, r2
 8013020:	460e      	mov	r6, r1
 8013022:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013026:	f7fd fe29 	bl	8010c7c <_malloc_r>
 801302a:	4604      	mov	r4, r0
 801302c:	b140      	cbz	r0, 8013040 <__sfmoreglue+0x28>
 801302e:	2100      	movs	r1, #0
 8013030:	e9c0 1600 	strd	r1, r6, [r0]
 8013034:	300c      	adds	r0, #12
 8013036:	60a0      	str	r0, [r4, #8]
 8013038:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801303c:	f7fd fdaa 	bl	8010b94 <memset>
 8013040:	4620      	mov	r0, r4
 8013042:	bd70      	pop	{r4, r5, r6, pc}

08013044 <__sfp_lock_acquire>:
 8013044:	4801      	ldr	r0, [pc, #4]	; (801304c <__sfp_lock_acquire+0x8>)
 8013046:	f7ff bcb8 	b.w	80129ba <__retarget_lock_acquire_recursive>
 801304a:	bf00      	nop
 801304c:	24003051 	.word	0x24003051

08013050 <__sfp_lock_release>:
 8013050:	4801      	ldr	r0, [pc, #4]	; (8013058 <__sfp_lock_release+0x8>)
 8013052:	f7ff bcb3 	b.w	80129bc <__retarget_lock_release_recursive>
 8013056:	bf00      	nop
 8013058:	24003051 	.word	0x24003051

0801305c <__sinit_lock_acquire>:
 801305c:	4801      	ldr	r0, [pc, #4]	; (8013064 <__sinit_lock_acquire+0x8>)
 801305e:	f7ff bcac 	b.w	80129ba <__retarget_lock_acquire_recursive>
 8013062:	bf00      	nop
 8013064:	24003052 	.word	0x24003052

08013068 <__sinit_lock_release>:
 8013068:	4801      	ldr	r0, [pc, #4]	; (8013070 <__sinit_lock_release+0x8>)
 801306a:	f7ff bca7 	b.w	80129bc <__retarget_lock_release_recursive>
 801306e:	bf00      	nop
 8013070:	24003052 	.word	0x24003052

08013074 <__sinit>:
 8013074:	b510      	push	{r4, lr}
 8013076:	4604      	mov	r4, r0
 8013078:	f7ff fff0 	bl	801305c <__sinit_lock_acquire>
 801307c:	69a3      	ldr	r3, [r4, #24]
 801307e:	b11b      	cbz	r3, 8013088 <__sinit+0x14>
 8013080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013084:	f7ff bff0 	b.w	8013068 <__sinit_lock_release>
 8013088:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801308c:	6523      	str	r3, [r4, #80]	; 0x50
 801308e:	4b13      	ldr	r3, [pc, #76]	; (80130dc <__sinit+0x68>)
 8013090:	4a13      	ldr	r2, [pc, #76]	; (80130e0 <__sinit+0x6c>)
 8013092:	681b      	ldr	r3, [r3, #0]
 8013094:	62a2      	str	r2, [r4, #40]	; 0x28
 8013096:	42a3      	cmp	r3, r4
 8013098:	bf04      	itt	eq
 801309a:	2301      	moveq	r3, #1
 801309c:	61a3      	streq	r3, [r4, #24]
 801309e:	4620      	mov	r0, r4
 80130a0:	f000 f820 	bl	80130e4 <__sfp>
 80130a4:	6060      	str	r0, [r4, #4]
 80130a6:	4620      	mov	r0, r4
 80130a8:	f000 f81c 	bl	80130e4 <__sfp>
 80130ac:	60a0      	str	r0, [r4, #8]
 80130ae:	4620      	mov	r0, r4
 80130b0:	f000 f818 	bl	80130e4 <__sfp>
 80130b4:	2200      	movs	r2, #0
 80130b6:	60e0      	str	r0, [r4, #12]
 80130b8:	2104      	movs	r1, #4
 80130ba:	6860      	ldr	r0, [r4, #4]
 80130bc:	f7ff ff82 	bl	8012fc4 <std>
 80130c0:	68a0      	ldr	r0, [r4, #8]
 80130c2:	2201      	movs	r2, #1
 80130c4:	2109      	movs	r1, #9
 80130c6:	f7ff ff7d 	bl	8012fc4 <std>
 80130ca:	68e0      	ldr	r0, [r4, #12]
 80130cc:	2202      	movs	r2, #2
 80130ce:	2112      	movs	r1, #18
 80130d0:	f7ff ff78 	bl	8012fc4 <std>
 80130d4:	2301      	movs	r3, #1
 80130d6:	61a3      	str	r3, [r4, #24]
 80130d8:	e7d2      	b.n	8013080 <__sinit+0xc>
 80130da:	bf00      	nop
 80130dc:	080134f8 	.word	0x080134f8
 80130e0:	0801300d 	.word	0x0801300d

080130e4 <__sfp>:
 80130e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130e6:	4607      	mov	r7, r0
 80130e8:	f7ff ffac 	bl	8013044 <__sfp_lock_acquire>
 80130ec:	4b1e      	ldr	r3, [pc, #120]	; (8013168 <__sfp+0x84>)
 80130ee:	681e      	ldr	r6, [r3, #0]
 80130f0:	69b3      	ldr	r3, [r6, #24]
 80130f2:	b913      	cbnz	r3, 80130fa <__sfp+0x16>
 80130f4:	4630      	mov	r0, r6
 80130f6:	f7ff ffbd 	bl	8013074 <__sinit>
 80130fa:	3648      	adds	r6, #72	; 0x48
 80130fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013100:	3b01      	subs	r3, #1
 8013102:	d503      	bpl.n	801310c <__sfp+0x28>
 8013104:	6833      	ldr	r3, [r6, #0]
 8013106:	b30b      	cbz	r3, 801314c <__sfp+0x68>
 8013108:	6836      	ldr	r6, [r6, #0]
 801310a:	e7f7      	b.n	80130fc <__sfp+0x18>
 801310c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013110:	b9d5      	cbnz	r5, 8013148 <__sfp+0x64>
 8013112:	4b16      	ldr	r3, [pc, #88]	; (801316c <__sfp+0x88>)
 8013114:	60e3      	str	r3, [r4, #12]
 8013116:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801311a:	6665      	str	r5, [r4, #100]	; 0x64
 801311c:	f7ff fc4c 	bl	80129b8 <__retarget_lock_init_recursive>
 8013120:	f7ff ff96 	bl	8013050 <__sfp_lock_release>
 8013124:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013128:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801312c:	6025      	str	r5, [r4, #0]
 801312e:	61a5      	str	r5, [r4, #24]
 8013130:	2208      	movs	r2, #8
 8013132:	4629      	mov	r1, r5
 8013134:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013138:	f7fd fd2c 	bl	8010b94 <memset>
 801313c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013140:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013144:	4620      	mov	r0, r4
 8013146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013148:	3468      	adds	r4, #104	; 0x68
 801314a:	e7d9      	b.n	8013100 <__sfp+0x1c>
 801314c:	2104      	movs	r1, #4
 801314e:	4638      	mov	r0, r7
 8013150:	f7ff ff62 	bl	8013018 <__sfmoreglue>
 8013154:	4604      	mov	r4, r0
 8013156:	6030      	str	r0, [r6, #0]
 8013158:	2800      	cmp	r0, #0
 801315a:	d1d5      	bne.n	8013108 <__sfp+0x24>
 801315c:	f7ff ff78 	bl	8013050 <__sfp_lock_release>
 8013160:	230c      	movs	r3, #12
 8013162:	603b      	str	r3, [r7, #0]
 8013164:	e7ee      	b.n	8013144 <__sfp+0x60>
 8013166:	bf00      	nop
 8013168:	080134f8 	.word	0x080134f8
 801316c:	ffff0001 	.word	0xffff0001

08013170 <_fwalk_reent>:
 8013170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013174:	4606      	mov	r6, r0
 8013176:	4688      	mov	r8, r1
 8013178:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801317c:	2700      	movs	r7, #0
 801317e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013182:	f1b9 0901 	subs.w	r9, r9, #1
 8013186:	d505      	bpl.n	8013194 <_fwalk_reent+0x24>
 8013188:	6824      	ldr	r4, [r4, #0]
 801318a:	2c00      	cmp	r4, #0
 801318c:	d1f7      	bne.n	801317e <_fwalk_reent+0xe>
 801318e:	4638      	mov	r0, r7
 8013190:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013194:	89ab      	ldrh	r3, [r5, #12]
 8013196:	2b01      	cmp	r3, #1
 8013198:	d907      	bls.n	80131aa <_fwalk_reent+0x3a>
 801319a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801319e:	3301      	adds	r3, #1
 80131a0:	d003      	beq.n	80131aa <_fwalk_reent+0x3a>
 80131a2:	4629      	mov	r1, r5
 80131a4:	4630      	mov	r0, r6
 80131a6:	47c0      	blx	r8
 80131a8:	4307      	orrs	r7, r0
 80131aa:	3568      	adds	r5, #104	; 0x68
 80131ac:	e7e9      	b.n	8013182 <_fwalk_reent+0x12>

080131ae <__swhatbuf_r>:
 80131ae:	b570      	push	{r4, r5, r6, lr}
 80131b0:	460e      	mov	r6, r1
 80131b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80131b6:	2900      	cmp	r1, #0
 80131b8:	b096      	sub	sp, #88	; 0x58
 80131ba:	4614      	mov	r4, r2
 80131bc:	461d      	mov	r5, r3
 80131be:	da08      	bge.n	80131d2 <__swhatbuf_r+0x24>
 80131c0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80131c4:	2200      	movs	r2, #0
 80131c6:	602a      	str	r2, [r5, #0]
 80131c8:	061a      	lsls	r2, r3, #24
 80131ca:	d410      	bmi.n	80131ee <__swhatbuf_r+0x40>
 80131cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80131d0:	e00e      	b.n	80131f0 <__swhatbuf_r+0x42>
 80131d2:	466a      	mov	r2, sp
 80131d4:	f000 f8fa 	bl	80133cc <_fstat_r>
 80131d8:	2800      	cmp	r0, #0
 80131da:	dbf1      	blt.n	80131c0 <__swhatbuf_r+0x12>
 80131dc:	9a01      	ldr	r2, [sp, #4]
 80131de:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80131e2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80131e6:	425a      	negs	r2, r3
 80131e8:	415a      	adcs	r2, r3
 80131ea:	602a      	str	r2, [r5, #0]
 80131ec:	e7ee      	b.n	80131cc <__swhatbuf_r+0x1e>
 80131ee:	2340      	movs	r3, #64	; 0x40
 80131f0:	2000      	movs	r0, #0
 80131f2:	6023      	str	r3, [r4, #0]
 80131f4:	b016      	add	sp, #88	; 0x58
 80131f6:	bd70      	pop	{r4, r5, r6, pc}

080131f8 <__smakebuf_r>:
 80131f8:	898b      	ldrh	r3, [r1, #12]
 80131fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80131fc:	079d      	lsls	r5, r3, #30
 80131fe:	4606      	mov	r6, r0
 8013200:	460c      	mov	r4, r1
 8013202:	d507      	bpl.n	8013214 <__smakebuf_r+0x1c>
 8013204:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013208:	6023      	str	r3, [r4, #0]
 801320a:	6123      	str	r3, [r4, #16]
 801320c:	2301      	movs	r3, #1
 801320e:	6163      	str	r3, [r4, #20]
 8013210:	b002      	add	sp, #8
 8013212:	bd70      	pop	{r4, r5, r6, pc}
 8013214:	ab01      	add	r3, sp, #4
 8013216:	466a      	mov	r2, sp
 8013218:	f7ff ffc9 	bl	80131ae <__swhatbuf_r>
 801321c:	9900      	ldr	r1, [sp, #0]
 801321e:	4605      	mov	r5, r0
 8013220:	4630      	mov	r0, r6
 8013222:	f7fd fd2b 	bl	8010c7c <_malloc_r>
 8013226:	b948      	cbnz	r0, 801323c <__smakebuf_r+0x44>
 8013228:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801322c:	059a      	lsls	r2, r3, #22
 801322e:	d4ef      	bmi.n	8013210 <__smakebuf_r+0x18>
 8013230:	f023 0303 	bic.w	r3, r3, #3
 8013234:	f043 0302 	orr.w	r3, r3, #2
 8013238:	81a3      	strh	r3, [r4, #12]
 801323a:	e7e3      	b.n	8013204 <__smakebuf_r+0xc>
 801323c:	4b0d      	ldr	r3, [pc, #52]	; (8013274 <__smakebuf_r+0x7c>)
 801323e:	62b3      	str	r3, [r6, #40]	; 0x28
 8013240:	89a3      	ldrh	r3, [r4, #12]
 8013242:	6020      	str	r0, [r4, #0]
 8013244:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013248:	81a3      	strh	r3, [r4, #12]
 801324a:	9b00      	ldr	r3, [sp, #0]
 801324c:	6163      	str	r3, [r4, #20]
 801324e:	9b01      	ldr	r3, [sp, #4]
 8013250:	6120      	str	r0, [r4, #16]
 8013252:	b15b      	cbz	r3, 801326c <__smakebuf_r+0x74>
 8013254:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013258:	4630      	mov	r0, r6
 801325a:	f000 f8c9 	bl	80133f0 <_isatty_r>
 801325e:	b128      	cbz	r0, 801326c <__smakebuf_r+0x74>
 8013260:	89a3      	ldrh	r3, [r4, #12]
 8013262:	f023 0303 	bic.w	r3, r3, #3
 8013266:	f043 0301 	orr.w	r3, r3, #1
 801326a:	81a3      	strh	r3, [r4, #12]
 801326c:	89a0      	ldrh	r0, [r4, #12]
 801326e:	4305      	orrs	r5, r0
 8013270:	81a5      	strh	r5, [r4, #12]
 8013272:	e7cd      	b.n	8013210 <__smakebuf_r+0x18>
 8013274:	0801300d 	.word	0x0801300d

08013278 <_raise_r>:
 8013278:	291f      	cmp	r1, #31
 801327a:	b538      	push	{r3, r4, r5, lr}
 801327c:	4604      	mov	r4, r0
 801327e:	460d      	mov	r5, r1
 8013280:	d904      	bls.n	801328c <_raise_r+0x14>
 8013282:	2316      	movs	r3, #22
 8013284:	6003      	str	r3, [r0, #0]
 8013286:	f04f 30ff 	mov.w	r0, #4294967295
 801328a:	bd38      	pop	{r3, r4, r5, pc}
 801328c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801328e:	b112      	cbz	r2, 8013296 <_raise_r+0x1e>
 8013290:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013294:	b94b      	cbnz	r3, 80132aa <_raise_r+0x32>
 8013296:	4620      	mov	r0, r4
 8013298:	f000 f830 	bl	80132fc <_getpid_r>
 801329c:	462a      	mov	r2, r5
 801329e:	4601      	mov	r1, r0
 80132a0:	4620      	mov	r0, r4
 80132a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80132a6:	f000 b817 	b.w	80132d8 <_kill_r>
 80132aa:	2b01      	cmp	r3, #1
 80132ac:	d00a      	beq.n	80132c4 <_raise_r+0x4c>
 80132ae:	1c59      	adds	r1, r3, #1
 80132b0:	d103      	bne.n	80132ba <_raise_r+0x42>
 80132b2:	2316      	movs	r3, #22
 80132b4:	6003      	str	r3, [r0, #0]
 80132b6:	2001      	movs	r0, #1
 80132b8:	e7e7      	b.n	801328a <_raise_r+0x12>
 80132ba:	2400      	movs	r4, #0
 80132bc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80132c0:	4628      	mov	r0, r5
 80132c2:	4798      	blx	r3
 80132c4:	2000      	movs	r0, #0
 80132c6:	e7e0      	b.n	801328a <_raise_r+0x12>

080132c8 <raise>:
 80132c8:	4b02      	ldr	r3, [pc, #8]	; (80132d4 <raise+0xc>)
 80132ca:	4601      	mov	r1, r0
 80132cc:	6818      	ldr	r0, [r3, #0]
 80132ce:	f7ff bfd3 	b.w	8013278 <_raise_r>
 80132d2:	bf00      	nop
 80132d4:	24000184 	.word	0x24000184

080132d8 <_kill_r>:
 80132d8:	b538      	push	{r3, r4, r5, lr}
 80132da:	4d07      	ldr	r5, [pc, #28]	; (80132f8 <_kill_r+0x20>)
 80132dc:	2300      	movs	r3, #0
 80132de:	4604      	mov	r4, r0
 80132e0:	4608      	mov	r0, r1
 80132e2:	4611      	mov	r1, r2
 80132e4:	602b      	str	r3, [r5, #0]
 80132e6:	f7ed ffa9 	bl	800123c <_kill>
 80132ea:	1c43      	adds	r3, r0, #1
 80132ec:	d102      	bne.n	80132f4 <_kill_r+0x1c>
 80132ee:	682b      	ldr	r3, [r5, #0]
 80132f0:	b103      	cbz	r3, 80132f4 <_kill_r+0x1c>
 80132f2:	6023      	str	r3, [r4, #0]
 80132f4:	bd38      	pop	{r3, r4, r5, pc}
 80132f6:	bf00      	nop
 80132f8:	2400304c 	.word	0x2400304c

080132fc <_getpid_r>:
 80132fc:	f7ed bf96 	b.w	800122c <_getpid>

08013300 <__sread>:
 8013300:	b510      	push	{r4, lr}
 8013302:	460c      	mov	r4, r1
 8013304:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013308:	f000 f894 	bl	8013434 <_read_r>
 801330c:	2800      	cmp	r0, #0
 801330e:	bfab      	itete	ge
 8013310:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013312:	89a3      	ldrhlt	r3, [r4, #12]
 8013314:	181b      	addge	r3, r3, r0
 8013316:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801331a:	bfac      	ite	ge
 801331c:	6563      	strge	r3, [r4, #84]	; 0x54
 801331e:	81a3      	strhlt	r3, [r4, #12]
 8013320:	bd10      	pop	{r4, pc}

08013322 <__swrite>:
 8013322:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013326:	461f      	mov	r7, r3
 8013328:	898b      	ldrh	r3, [r1, #12]
 801332a:	05db      	lsls	r3, r3, #23
 801332c:	4605      	mov	r5, r0
 801332e:	460c      	mov	r4, r1
 8013330:	4616      	mov	r6, r2
 8013332:	d505      	bpl.n	8013340 <__swrite+0x1e>
 8013334:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013338:	2302      	movs	r3, #2
 801333a:	2200      	movs	r2, #0
 801333c:	f000 f868 	bl	8013410 <_lseek_r>
 8013340:	89a3      	ldrh	r3, [r4, #12]
 8013342:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013346:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801334a:	81a3      	strh	r3, [r4, #12]
 801334c:	4632      	mov	r2, r6
 801334e:	463b      	mov	r3, r7
 8013350:	4628      	mov	r0, r5
 8013352:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013356:	f000 b817 	b.w	8013388 <_write_r>

0801335a <__sseek>:
 801335a:	b510      	push	{r4, lr}
 801335c:	460c      	mov	r4, r1
 801335e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013362:	f000 f855 	bl	8013410 <_lseek_r>
 8013366:	1c43      	adds	r3, r0, #1
 8013368:	89a3      	ldrh	r3, [r4, #12]
 801336a:	bf15      	itete	ne
 801336c:	6560      	strne	r0, [r4, #84]	; 0x54
 801336e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013372:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013376:	81a3      	strheq	r3, [r4, #12]
 8013378:	bf18      	it	ne
 801337a:	81a3      	strhne	r3, [r4, #12]
 801337c:	bd10      	pop	{r4, pc}

0801337e <__sclose>:
 801337e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013382:	f000 b813 	b.w	80133ac <_close_r>
	...

08013388 <_write_r>:
 8013388:	b538      	push	{r3, r4, r5, lr}
 801338a:	4d07      	ldr	r5, [pc, #28]	; (80133a8 <_write_r+0x20>)
 801338c:	4604      	mov	r4, r0
 801338e:	4608      	mov	r0, r1
 8013390:	4611      	mov	r1, r2
 8013392:	2200      	movs	r2, #0
 8013394:	602a      	str	r2, [r5, #0]
 8013396:	461a      	mov	r2, r3
 8013398:	f7ed ff87 	bl	80012aa <_write>
 801339c:	1c43      	adds	r3, r0, #1
 801339e:	d102      	bne.n	80133a6 <_write_r+0x1e>
 80133a0:	682b      	ldr	r3, [r5, #0]
 80133a2:	b103      	cbz	r3, 80133a6 <_write_r+0x1e>
 80133a4:	6023      	str	r3, [r4, #0]
 80133a6:	bd38      	pop	{r3, r4, r5, pc}
 80133a8:	2400304c 	.word	0x2400304c

080133ac <_close_r>:
 80133ac:	b538      	push	{r3, r4, r5, lr}
 80133ae:	4d06      	ldr	r5, [pc, #24]	; (80133c8 <_close_r+0x1c>)
 80133b0:	2300      	movs	r3, #0
 80133b2:	4604      	mov	r4, r0
 80133b4:	4608      	mov	r0, r1
 80133b6:	602b      	str	r3, [r5, #0]
 80133b8:	f7ed ff93 	bl	80012e2 <_close>
 80133bc:	1c43      	adds	r3, r0, #1
 80133be:	d102      	bne.n	80133c6 <_close_r+0x1a>
 80133c0:	682b      	ldr	r3, [r5, #0]
 80133c2:	b103      	cbz	r3, 80133c6 <_close_r+0x1a>
 80133c4:	6023      	str	r3, [r4, #0]
 80133c6:	bd38      	pop	{r3, r4, r5, pc}
 80133c8:	2400304c 	.word	0x2400304c

080133cc <_fstat_r>:
 80133cc:	b538      	push	{r3, r4, r5, lr}
 80133ce:	4d07      	ldr	r5, [pc, #28]	; (80133ec <_fstat_r+0x20>)
 80133d0:	2300      	movs	r3, #0
 80133d2:	4604      	mov	r4, r0
 80133d4:	4608      	mov	r0, r1
 80133d6:	4611      	mov	r1, r2
 80133d8:	602b      	str	r3, [r5, #0]
 80133da:	f7ed ff8e 	bl	80012fa <_fstat>
 80133de:	1c43      	adds	r3, r0, #1
 80133e0:	d102      	bne.n	80133e8 <_fstat_r+0x1c>
 80133e2:	682b      	ldr	r3, [r5, #0]
 80133e4:	b103      	cbz	r3, 80133e8 <_fstat_r+0x1c>
 80133e6:	6023      	str	r3, [r4, #0]
 80133e8:	bd38      	pop	{r3, r4, r5, pc}
 80133ea:	bf00      	nop
 80133ec:	2400304c 	.word	0x2400304c

080133f0 <_isatty_r>:
 80133f0:	b538      	push	{r3, r4, r5, lr}
 80133f2:	4d06      	ldr	r5, [pc, #24]	; (801340c <_isatty_r+0x1c>)
 80133f4:	2300      	movs	r3, #0
 80133f6:	4604      	mov	r4, r0
 80133f8:	4608      	mov	r0, r1
 80133fa:	602b      	str	r3, [r5, #0]
 80133fc:	f7ed ff8d 	bl	800131a <_isatty>
 8013400:	1c43      	adds	r3, r0, #1
 8013402:	d102      	bne.n	801340a <_isatty_r+0x1a>
 8013404:	682b      	ldr	r3, [r5, #0]
 8013406:	b103      	cbz	r3, 801340a <_isatty_r+0x1a>
 8013408:	6023      	str	r3, [r4, #0]
 801340a:	bd38      	pop	{r3, r4, r5, pc}
 801340c:	2400304c 	.word	0x2400304c

08013410 <_lseek_r>:
 8013410:	b538      	push	{r3, r4, r5, lr}
 8013412:	4d07      	ldr	r5, [pc, #28]	; (8013430 <_lseek_r+0x20>)
 8013414:	4604      	mov	r4, r0
 8013416:	4608      	mov	r0, r1
 8013418:	4611      	mov	r1, r2
 801341a:	2200      	movs	r2, #0
 801341c:	602a      	str	r2, [r5, #0]
 801341e:	461a      	mov	r2, r3
 8013420:	f7ed ff86 	bl	8001330 <_lseek>
 8013424:	1c43      	adds	r3, r0, #1
 8013426:	d102      	bne.n	801342e <_lseek_r+0x1e>
 8013428:	682b      	ldr	r3, [r5, #0]
 801342a:	b103      	cbz	r3, 801342e <_lseek_r+0x1e>
 801342c:	6023      	str	r3, [r4, #0]
 801342e:	bd38      	pop	{r3, r4, r5, pc}
 8013430:	2400304c 	.word	0x2400304c

08013434 <_read_r>:
 8013434:	b538      	push	{r3, r4, r5, lr}
 8013436:	4d07      	ldr	r5, [pc, #28]	; (8013454 <_read_r+0x20>)
 8013438:	4604      	mov	r4, r0
 801343a:	4608      	mov	r0, r1
 801343c:	4611      	mov	r1, r2
 801343e:	2200      	movs	r2, #0
 8013440:	602a      	str	r2, [r5, #0]
 8013442:	461a      	mov	r2, r3
 8013444:	f7ed ff14 	bl	8001270 <_read>
 8013448:	1c43      	adds	r3, r0, #1
 801344a:	d102      	bne.n	8013452 <_read_r+0x1e>
 801344c:	682b      	ldr	r3, [r5, #0]
 801344e:	b103      	cbz	r3, 8013452 <_read_r+0x1e>
 8013450:	6023      	str	r3, [r4, #0]
 8013452:	bd38      	pop	{r3, r4, r5, pc}
 8013454:	2400304c 	.word	0x2400304c

08013458 <_init>:
 8013458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801345a:	bf00      	nop
 801345c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801345e:	bc08      	pop	{r3}
 8013460:	469e      	mov	lr, r3
 8013462:	4770      	bx	lr

08013464 <_fini>:
 8013464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013466:	bf00      	nop
 8013468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801346a:	bc08      	pop	{r3}
 801346c:	469e      	mov	lr, r3
 801346e:	4770      	bx	lr
