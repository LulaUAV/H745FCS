
baremetal_2_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013450  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000564  080136f0  080136f0  000236f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013c54  08013c54  00030354  2**0
                  CONTENTS
  4 .ARM          00000008  08013c54  08013c54  00023c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013c5c  08013c5c  00030354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08013c5c  08013c5c  00023c5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08013c64  08013c64  00023c64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000354  24000000  08013c6c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cfc  24000354  08013fc0  00030354  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24002050  08013fc0  00032050  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030354  2**0
                  CONTENTS, READONLY
 12 .debug_info   00035158  00000000  00000000  00030382  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006a55  00000000  00000000  000654da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002258  00000000  00000000  0006bf30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000021c8  00000000  00000000  0006e188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f200  00000000  00000000  00070350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00033adc  00000000  00000000  0007f550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001a14a5  00000000  00000000  000b302c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  002544d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009b68  00000000  00000000  00254524  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00000fd3  00000000  00000000  0025e08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000354 	.word	0x24000354
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080136d8 	.word	0x080136d8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000358 	.word	0x24000358
 80002dc:	080136d8 	.word	0x080136d8

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000698:	4b3f      	ldr	r3, [pc, #252]	; (8000798 <SystemInit+0x104>)
 800069a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069e:	4a3e      	ldr	r2, [pc, #248]	; (8000798 <SystemInit+0x104>)
 80006a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a8:	4b3b      	ldr	r3, [pc, #236]	; (8000798 <SystemInit+0x104>)
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	4a3a      	ldr	r2, [pc, #232]	; (8000798 <SystemInit+0x104>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006b4:	4b39      	ldr	r3, [pc, #228]	; (800079c <SystemInit+0x108>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f003 030f 	and.w	r3, r3, #15
 80006bc:	2b06      	cmp	r3, #6
 80006be:	d807      	bhi.n	80006d0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006c0:	4b36      	ldr	r3, [pc, #216]	; (800079c <SystemInit+0x108>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f023 030f 	bic.w	r3, r3, #15
 80006c8:	4a34      	ldr	r2, [pc, #208]	; (800079c <SystemInit+0x108>)
 80006ca:	f043 0307 	orr.w	r3, r3, #7
 80006ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006d0:	4b33      	ldr	r3, [pc, #204]	; (80007a0 <SystemInit+0x10c>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a32      	ldr	r2, [pc, #200]	; (80007a0 <SystemInit+0x10c>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006dc:	4b30      	ldr	r3, [pc, #192]	; (80007a0 <SystemInit+0x10c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006e2:	4b2f      	ldr	r3, [pc, #188]	; (80007a0 <SystemInit+0x10c>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	492e      	ldr	r1, [pc, #184]	; (80007a0 <SystemInit+0x10c>)
 80006e8:	4b2e      	ldr	r3, [pc, #184]	; (80007a4 <SystemInit+0x110>)
 80006ea:	4013      	ands	r3, r2
 80006ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ee:	4b2b      	ldr	r3, [pc, #172]	; (800079c <SystemInit+0x108>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d007      	beq.n	800070a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006fa:	4b28      	ldr	r3, [pc, #160]	; (800079c <SystemInit+0x108>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f023 030f 	bic.w	r3, r3, #15
 8000702:	4a26      	ldr	r2, [pc, #152]	; (800079c <SystemInit+0x108>)
 8000704:	f043 0307 	orr.w	r3, r3, #7
 8000708:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800070a:	4b25      	ldr	r3, [pc, #148]	; (80007a0 <SystemInit+0x10c>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000710:	4b23      	ldr	r3, [pc, #140]	; (80007a0 <SystemInit+0x10c>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000716:	4b22      	ldr	r3, [pc, #136]	; (80007a0 <SystemInit+0x10c>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800071c:	4b20      	ldr	r3, [pc, #128]	; (80007a0 <SystemInit+0x10c>)
 800071e:	4a22      	ldr	r2, [pc, #136]	; (80007a8 <SystemInit+0x114>)
 8000720:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000722:	4b1f      	ldr	r3, [pc, #124]	; (80007a0 <SystemInit+0x10c>)
 8000724:	4a21      	ldr	r2, [pc, #132]	; (80007ac <SystemInit+0x118>)
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000728:	4b1d      	ldr	r3, [pc, #116]	; (80007a0 <SystemInit+0x10c>)
 800072a:	4a21      	ldr	r2, [pc, #132]	; (80007b0 <SystemInit+0x11c>)
 800072c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800072e:	4b1c      	ldr	r3, [pc, #112]	; (80007a0 <SystemInit+0x10c>)
 8000730:	2200      	movs	r2, #0
 8000732:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000734:	4b1a      	ldr	r3, [pc, #104]	; (80007a0 <SystemInit+0x10c>)
 8000736:	4a1e      	ldr	r2, [pc, #120]	; (80007b0 <SystemInit+0x11c>)
 8000738:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800073a:	4b19      	ldr	r3, [pc, #100]	; (80007a0 <SystemInit+0x10c>)
 800073c:	2200      	movs	r2, #0
 800073e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000740:	4b17      	ldr	r3, [pc, #92]	; (80007a0 <SystemInit+0x10c>)
 8000742:	4a1b      	ldr	r2, [pc, #108]	; (80007b0 <SystemInit+0x11c>)
 8000744:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000746:	4b16      	ldr	r3, [pc, #88]	; (80007a0 <SystemInit+0x10c>)
 8000748:	2200      	movs	r2, #0
 800074a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800074c:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <SystemInit+0x10c>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a13      	ldr	r2, [pc, #76]	; (80007a0 <SystemInit+0x10c>)
 8000752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000756:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000758:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <SystemInit+0x10c>)
 800075a:	2200      	movs	r2, #0
 800075c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800075e:	4b15      	ldr	r3, [pc, #84]	; (80007b4 <SystemInit+0x120>)
 8000760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000762:	4a14      	ldr	r2, [pc, #80]	; (80007b4 <SystemInit+0x120>)
 8000764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000768:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800076a:	4b13      	ldr	r3, [pc, #76]	; (80007b8 <SystemInit+0x124>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4b13      	ldr	r3, [pc, #76]	; (80007bc <SystemInit+0x128>)
 8000770:	4013      	ands	r3, r2
 8000772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000776:	d202      	bcs.n	800077e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000778:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <SystemInit+0x12c>)
 800077a:	2201      	movs	r2, #1
 800077c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800077e:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <SystemInit+0x130>)
 8000780:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000784:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000786:	4b04      	ldr	r3, [pc, #16]	; (8000798 <SystemInit+0x104>)
 8000788:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800078c:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800078e:	bf00      	nop
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	e000ed00 	.word	0xe000ed00
 800079c:	52002000 	.word	0x52002000
 80007a0:	58024400 	.word	0x58024400
 80007a4:	eaf6ed7f 	.word	0xeaf6ed7f
 80007a8:	02020200 	.word	0x02020200
 80007ac:	01ff0000 	.word	0x01ff0000
 80007b0:	01010280 	.word	0x01010280
 80007b4:	580000c0 	.word	0x580000c0
 80007b8:	5c001000 	.word	0x5c001000
 80007bc:	ffff0000 	.word	0xffff0000
 80007c0:	51008108 	.word	0x51008108
 80007c4:	52004000 	.word	0x52004000

080007c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007ce:	4b1d      	ldr	r3, [pc, #116]	; (8000844 <MX_DMA_Init+0x7c>)
 80007d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007d4:	4a1b      	ldr	r2, [pc, #108]	; (8000844 <MX_DMA_Init+0x7c>)
 80007d6:	f043 0301 	orr.w	r3, r3, #1
 80007da:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80007de:	4b19      	ldr	r3, [pc, #100]	; (8000844 <MX_DMA_Init+0x7c>)
 80007e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007e4:	f003 0301 	and.w	r3, r3, #1
 80007e8:	607b      	str	r3, [r7, #4]
 80007ea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007ec:	4b15      	ldr	r3, [pc, #84]	; (8000844 <MX_DMA_Init+0x7c>)
 80007ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007f2:	4a14      	ldr	r2, [pc, #80]	; (8000844 <MX_DMA_Init+0x7c>)
 80007f4:	f043 0302 	orr.w	r3, r3, #2
 80007f8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80007fc:	4b11      	ldr	r3, [pc, #68]	; (8000844 <MX_DMA_Init+0x7c>)
 80007fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000802:	f003 0302 	and.w	r3, r3, #2
 8000806:	603b      	str	r3, [r7, #0]
 8000808:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 1, 0);
 800080a:	2200      	movs	r2, #0
 800080c:	2101      	movs	r1, #1
 800080e:	2010      	movs	r0, #16
 8000810:	f001 fc7b 	bl	800210a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000814:	2010      	movs	r0, #16
 8000816:	f001 fc92 	bl	800213e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 1, 0);
 800081a:	2200      	movs	r2, #0
 800081c:	2101      	movs	r1, #1
 800081e:	2011      	movs	r0, #17
 8000820:	f001 fc73 	bl	800210a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000824:	2011      	movs	r0, #17
 8000826:	f001 fc8a 	bl	800213e <HAL_NVIC_EnableIRQ>

  /* DMA2_Stream7 Interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 1, 0);
 800082a:	2200      	movs	r2, #0
 800082c:	2101      	movs	r1, #1
 800082e:	2046      	movs	r0, #70	; 0x46
 8000830:	f001 fc6b 	bl	800210a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000834:	2046      	movs	r0, #70	; 0x46
 8000836:	f001 fc82 	bl	800213e <HAL_NVIC_EnableIRQ>

}
 800083a:	bf00      	nop
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	58024400 	.word	0x58024400

08000848 <MX_GPIO_Init>:
/** Configure pins
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b088      	sub	sp, #32
 800084c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800084e:	4b37      	ldr	r3, [pc, #220]	; (800092c <MX_GPIO_Init+0xe4>)
 8000850:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000854:	4a35      	ldr	r2, [pc, #212]	; (800092c <MX_GPIO_Init+0xe4>)
 8000856:	f043 0320 	orr.w	r3, r3, #32
 800085a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800085e:	4b33      	ldr	r3, [pc, #204]	; (800092c <MX_GPIO_Init+0xe4>)
 8000860:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000864:	f003 0320 	and.w	r3, r3, #32
 8000868:	61fb      	str	r3, [r7, #28]
 800086a:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800086c:	4b2f      	ldr	r3, [pc, #188]	; (800092c <MX_GPIO_Init+0xe4>)
 800086e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000872:	4a2e      	ldr	r2, [pc, #184]	; (800092c <MX_GPIO_Init+0xe4>)
 8000874:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000878:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800087c:	4b2b      	ldr	r3, [pc, #172]	; (800092c <MX_GPIO_Init+0xe4>)
 800087e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000886:	61bb      	str	r3, [r7, #24]
 8000888:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088a:	4b28      	ldr	r3, [pc, #160]	; (800092c <MX_GPIO_Init+0xe4>)
 800088c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000890:	4a26      	ldr	r2, [pc, #152]	; (800092c <MX_GPIO_Init+0xe4>)
 8000892:	f043 0301 	orr.w	r3, r3, #1
 8000896:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800089a:	4b24      	ldr	r3, [pc, #144]	; (800092c <MX_GPIO_Init+0xe4>)
 800089c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008a0:	f003 0301 	and.w	r3, r3, #1
 80008a4:	617b      	str	r3, [r7, #20]
 80008a6:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008a8:	4b20      	ldr	r3, [pc, #128]	; (800092c <MX_GPIO_Init+0xe4>)
 80008aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ae:	4a1f      	ldr	r2, [pc, #124]	; (800092c <MX_GPIO_Init+0xe4>)
 80008b0:	f043 0310 	orr.w	r3, r3, #16
 80008b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008b8:	4b1c      	ldr	r3, [pc, #112]	; (800092c <MX_GPIO_Init+0xe4>)
 80008ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008be:	f003 0310 	and.w	r3, r3, #16
 80008c2:	613b      	str	r3, [r7, #16]
 80008c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c6:	4b19      	ldr	r3, [pc, #100]	; (800092c <MX_GPIO_Init+0xe4>)
 80008c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008cc:	4a17      	ldr	r2, [pc, #92]	; (800092c <MX_GPIO_Init+0xe4>)
 80008ce:	f043 0302 	orr.w	r3, r3, #2
 80008d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008d6:	4b15      	ldr	r3, [pc, #84]	; (800092c <MX_GPIO_Init+0xe4>)
 80008d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008dc:	f003 0302 	and.w	r3, r3, #2
 80008e0:	60fb      	str	r3, [r7, #12]
 80008e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e4:	4b11      	ldr	r3, [pc, #68]	; (800092c <MX_GPIO_Init+0xe4>)
 80008e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ea:	4a10      	ldr	r2, [pc, #64]	; (800092c <MX_GPIO_Init+0xe4>)
 80008ec:	f043 0304 	orr.w	r3, r3, #4
 80008f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008f4:	4b0d      	ldr	r3, [pc, #52]	; (800092c <MX_GPIO_Init+0xe4>)
 80008f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008fa:	f003 0304 	and.w	r3, r3, #4
 80008fe:	60bb      	str	r3, [r7, #8]
 8000900:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000902:	4b0a      	ldr	r3, [pc, #40]	; (800092c <MX_GPIO_Init+0xe4>)
 8000904:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000908:	4a08      	ldr	r2, [pc, #32]	; (800092c <MX_GPIO_Init+0xe4>)
 800090a:	f043 0308 	orr.w	r3, r3, #8
 800090e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000912:	4b06      	ldr	r3, [pc, #24]	; (800092c <MX_GPIO_Init+0xe4>)
 8000914:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000918:	f003 0308 	and.w	r3, r3, #8
 800091c:	607b      	str	r3, [r7, #4]
 800091e:	687b      	ldr	r3, [r7, #4]

  // Set LED Ports
  GPIO_Port_Config();
 8000920:	f000 f806 	bl	8000930 <GPIO_Port_Config>

}
 8000924:	bf00      	nop
 8000926:	3720      	adds	r7, #32
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	58024400 	.word	0x58024400

08000930 <GPIO_Port_Config>:

/* USER CODE BEGIN 2 */
void GPIO_Port_Config(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b086      	sub	sp, #24
 8000934:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
 8000942:	611a      	str	r2, [r3, #16]

  // Configure GPIO Pin Output Level:
  //LEDS
  HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_RESET);
 8000944:	2200      	movs	r2, #0
 8000946:	2180      	movs	r1, #128	; 0x80
 8000948:	4827      	ldr	r0, [pc, #156]	; (80009e8 <GPIO_Port_Config+0xb8>)
 800094a:	f004 fca3 	bl	8005294 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = LED_A_Pin;
 800094e:	2380      	movs	r3, #128	; 0x80
 8000950:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000952:	2301      	movs	r3, #1
 8000954:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095a:	2300      	movs	r3, #0
 800095c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_A_GPIO_Port, &GPIO_InitStruct);
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	4619      	mov	r1, r3
 8000962:	4821      	ldr	r0, [pc, #132]	; (80009e8 <GPIO_Port_Config+0xb8>)
 8000964:	f004 fae6 	bl	8004f34 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8000968:	2200      	movs	r2, #0
 800096a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800096e:	481e      	ldr	r0, [pc, #120]	; (80009e8 <GPIO_Port_Config+0xb8>)
 8000970:	f004 fc90 	bl	8005294 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = LED_B_Pin;
 8000974:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000978:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097a:	2301      	movs	r3, #1
 800097c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2300      	movs	r3, #0
 8000984:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_B_GPIO_Port, &GPIO_InitStruct);
 8000986:	1d3b      	adds	r3, r7, #4
 8000988:	4619      	mov	r1, r3
 800098a:	4817      	ldr	r0, [pc, #92]	; (80009e8 <GPIO_Port_Config+0xb8>)
 800098c:	f004 fad2 	bl	8004f34 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_RESET);
 8000990:	2200      	movs	r2, #0
 8000992:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000996:	4815      	ldr	r0, [pc, #84]	; (80009ec <GPIO_Port_Config+0xbc>)
 8000998:	f004 fc7c 	bl	8005294 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = LED_C_Pin;
 800099c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a2:	2301      	movs	r3, #1
 80009a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_C_GPIO_Port, &GPIO_InitStruct);
 80009ae:	1d3b      	adds	r3, r7, #4
 80009b0:	4619      	mov	r1, r3
 80009b2:	480e      	ldr	r0, [pc, #56]	; (80009ec <GPIO_Port_Config+0xbc>)
 80009b4:	f004 fabe 	bl	8004f34 <HAL_GPIO_Init>


  HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_RESET);
 80009b8:	2200      	movs	r2, #0
 80009ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009be:	480b      	ldr	r0, [pc, #44]	; (80009ec <GPIO_Port_Config+0xbc>)
 80009c0:	f004 fc68 	bl	8005294 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = LED_D_Pin;
 80009c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009c8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ca:	2301      	movs	r3, #1
 80009cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d2:	2300      	movs	r3, #0
 80009d4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_D_GPIO_Port, &GPIO_InitStruct);
 80009d6:	1d3b      	adds	r3, r7, #4
 80009d8:	4619      	mov	r1, r3
 80009da:	4804      	ldr	r0, [pc, #16]	; (80009ec <GPIO_Port_Config+0xbc>)
 80009dc:	f004 faaa 	bl	8004f34 <HAL_GPIO_Init>

}
 80009e0:	bf00      	nop
 80009e2:	3718      	adds	r7, #24
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	58021000 	.word	0x58021000
 80009ec:	58021400 	.word	0x58021400

080009f0 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80009f4:	4b1b      	ldr	r3, [pc, #108]	; (8000a64 <MX_I2C2_Init+0x74>)
 80009f6:	4a1c      	ldr	r2, [pc, #112]	; (8000a68 <MX_I2C2_Init+0x78>)
 80009f8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 80009fa:	4b1a      	ldr	r3, [pc, #104]	; (8000a64 <MX_I2C2_Init+0x74>)
 80009fc:	4a1b      	ldr	r2, [pc, #108]	; (8000a6c <MX_I2C2_Init+0x7c>)
 80009fe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000a00:	4b18      	ldr	r3, [pc, #96]	; (8000a64 <MX_I2C2_Init+0x74>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a06:	4b17      	ldr	r3, [pc, #92]	; (8000a64 <MX_I2C2_Init+0x74>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a0c:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <MX_I2C2_Init+0x74>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a12:	4b14      	ldr	r3, [pc, #80]	; (8000a64 <MX_I2C2_Init+0x74>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a18:	4b12      	ldr	r3, [pc, #72]	; (8000a64 <MX_I2C2_Init+0x74>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a1e:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <MX_I2C2_Init+0x74>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a24:	4b0f      	ldr	r3, [pc, #60]	; (8000a64 <MX_I2C2_Init+0x74>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a2a:	480e      	ldr	r0, [pc, #56]	; (8000a64 <MX_I2C2_Init+0x74>)
 8000a2c:	f004 fc7a 	bl	8005324 <HAL_I2C_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000a36:	f000 f9e5 	bl	8000e04 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	4809      	ldr	r0, [pc, #36]	; (8000a64 <MX_I2C2_Init+0x74>)
 8000a3e:	f005 fb86 	bl	800614e <HAL_I2CEx_ConfigAnalogFilter>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000a48:	f000 f9dc 	bl	8000e04 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	4805      	ldr	r0, [pc, #20]	; (8000a64 <MX_I2C2_Init+0x74>)
 8000a50:	f005 fbc8 	bl	80061e4 <HAL_I2CEx_ConfigDigitalFilter>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000a5a:	f000 f9d3 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	24000370 	.word	0x24000370
 8000a68:	40005800 	.word	0x40005800
 8000a6c:	307075b1 	.word	0x307075b1

08000a70 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b0b8      	sub	sp, #224	; 0xe0
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a78:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a88:	f107 0310 	add.w	r3, r7, #16
 8000a8c:	22bc      	movs	r2, #188	; 0xbc
 8000a8e:	2100      	movs	r1, #0
 8000a90:	4618      	mov	r0, r3
 8000a92:	f010 f9c1 	bl	8010e18 <memset>
  if(i2cHandle->Instance==I2C2)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4a2d      	ldr	r2, [pc, #180]	; (8000b50 <HAL_I2C_MspInit+0xe0>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d152      	bne.n	8000b46 <HAL_I2C_MspInit+0xd6>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000aa0:	2308      	movs	r3, #8
 8000aa2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000aaa:	f107 0310 	add.w	r3, r7, #16
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f007 fe06 	bl	80086c0 <HAL_RCCEx_PeriphCLKConfig>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000aba:	f000 f9a3 	bl	8000e04 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000abe:	4b25      	ldr	r3, [pc, #148]	; (8000b54 <HAL_I2C_MspInit+0xe4>)
 8000ac0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac4:	4a23      	ldr	r2, [pc, #140]	; (8000b54 <HAL_I2C_MspInit+0xe4>)
 8000ac6:	f043 0302 	orr.w	r3, r3, #2
 8000aca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ace:	4b21      	ldr	r3, [pc, #132]	; (8000b54 <HAL_I2C_MspInit+0xe4>)
 8000ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad4:	f003 0302 	and.w	r3, r3, #2
 8000ad8:	60fb      	str	r3, [r7, #12]
 8000ada:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000adc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ae0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ae4:	2312      	movs	r3, #18
 8000ae6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aea:	2301      	movs	r3, #1
 8000aec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af0:	2300      	movs	r3, #0
 8000af2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000af6:	2304      	movs	r3, #4
 8000af8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000afc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000b00:	4619      	mov	r1, r3
 8000b02:	4815      	ldr	r0, [pc, #84]	; (8000b58 <HAL_I2C_MspInit+0xe8>)
 8000b04:	f004 fa16 	bl	8004f34 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000b08:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <HAL_I2C_MspInit+0xe4>)
 8000b0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b0e:	4a11      	ldr	r2, [pc, #68]	; (8000b54 <HAL_I2C_MspInit+0xe4>)
 8000b10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b14:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000b18:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <HAL_I2C_MspInit+0xe4>)
 8000b1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b22:	60bb      	str	r3, [r7, #8]
 8000b24:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2100      	movs	r1, #0
 8000b2a:	2021      	movs	r0, #33	; 0x21
 8000b2c:	f001 faed 	bl	800210a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000b30:	2021      	movs	r0, #33	; 0x21
 8000b32:	f001 fb04 	bl	800213e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8000b36:	2200      	movs	r2, #0
 8000b38:	2100      	movs	r1, #0
 8000b3a:	2022      	movs	r0, #34	; 0x22
 8000b3c:	f001 fae5 	bl	800210a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8000b40:	2022      	movs	r0, #34	; 0x22
 8000b42:	f001 fafc 	bl	800213e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000b46:	bf00      	nop
 8000b48:	37e0      	adds	r7, #224	; 0xe0
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40005800 	.word	0x40005800
 8000b54:	58024400 	.word	0x58024400
 8000b58:	58020400 	.word	0x58020400
 8000b5c:	00000000 	.word	0x00000000

08000b60 <_Z18SystemClock_Configv>:
///**
//  * @brief System Clock Configuration
//  * @retval None
//  */
void SystemClock_Config(void)
{
 8000b60:	b510      	push	{r4, lr}
 8000b62:	b09e      	sub	sp, #120	; 0x78
  // Defective warning for missing initialiser member
  RCC_OscInitTypeDef RCC_OscInitStruct = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
 8000b64:	224c      	movs	r2, #76	; 0x4c
 8000b66:	2100      	movs	r1, #0
 8000b68:	a80a      	add	r0, sp, #40	; 0x28
 8000b6a:	f010 f955 	bl	8010e18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0,0,0,0,0,0,0,0};
 8000b6e:	2220      	movs	r2, #32
 8000b70:	2100      	movs	r1, #0
 8000b72:	a802      	add	r0, sp, #8
 8000b74:	f010 f950 	bl	8010e18 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000b78:	2002      	movs	r0, #2
 8000b7a:	f006 fd5b 	bl	8007634 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b7e:	4a32      	ldr	r2, [pc, #200]	; (8000c48 <_Z18SystemClock_Configv+0xe8>)
 8000b80:	2100      	movs	r1, #0
 8000b82:	4b32      	ldr	r3, [pc, #200]	; (8000c4c <_Z18SystemClock_Configv+0xec>)
 8000b84:	9101      	str	r1, [sp, #4]
 8000b86:	6991      	ldr	r1, [r2, #24]
 8000b88:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8000b8c:	6191      	str	r1, [r2, #24]
 8000b8e:	6991      	ldr	r1, [r2, #24]
 8000b90:	f401 4140 	and.w	r1, r1, #49152	; 0xc000
 8000b94:	9101      	str	r1, [sp, #4]
 8000b96:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000b98:	f041 0101 	orr.w	r1, r1, #1
 8000b9c:	62d9      	str	r1, [r3, #44]	; 0x2c
 8000b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ba0:	f003 0301 	and.w	r3, r3, #1
 8000ba4:	9301      	str	r3, [sp, #4]
 8000ba6:	9b01      	ldr	r3, [sp, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ba8:	6993      	ldr	r3, [r2, #24]
 8000baa:	049b      	lsls	r3, r3, #18
 8000bac:	d5fc      	bpl.n	8000ba8 <_Z18SystemClock_Configv+0x48>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000bae:	4a28      	ldr	r2, [pc, #160]	; (8000c50 <_Z18SystemClock_Configv+0xf0>)
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000bb0:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000bb2:	243c      	movs	r4, #60	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = 15;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bb4:	a80a      	add	r0, sp, #40	; 0x28
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000bb6:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8000bb8:	f023 0303 	bic.w	r3, r3, #3
 8000bbc:	f043 0302 	orr.w	r3, r3, #2
 8000bc0:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bc2:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000bc4:	2200      	movs	r2, #0
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000bc6:	9110      	str	r1, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000bc8:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000bca:	210c      	movs	r1, #12
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000bcc:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bce:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000bd0:	9416      	str	r4, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000bd2:	921c      	str	r2, [sp, #112]	; 0x70
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000bd4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8000c30 <_Z18SystemClock_Configv+0xd0>
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bd8:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = 15;
 8000bdc:	230f      	movs	r3, #15
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000bde:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000be2:	e9cd 121a 	strd	r1, r2, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLQ = 15;
 8000be6:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000be8:	f006 fd8e 	bl	8007708 <HAL_RCC_OscConfig>
 8000bec:	b108      	cbz	r0, 8000bf2 <_Z18SystemClock_Configv+0x92>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bee:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <_Z18SystemClock_Configv+0x90>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bf2:	ed9f 7b11 	vldr	d7, [pc, #68]	; 8000c38 <_Z18SystemClock_Configv+0xd8>
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2308      	movs	r3, #8
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000bfa:	a802      	add	r0, sp, #8
 8000bfc:	2104      	movs	r1, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bfe:	ed8d 7b02 	vstr	d7, [sp, #8]
 8000c02:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8000c40 <_Z18SystemClock_Configv+0xe0>
 8000c06:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8000c0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c0e:	2340      	movs	r3, #64	; 0x40
 8000c10:	ed8d 7b06 	vstr	d7, [sp, #24]
 8000c14:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c18:	f007 f984 	bl	8007f24 <HAL_RCC_ClockConfig>
 8000c1c:	b108      	cbz	r0, 8000c22 <_Z18SystemClock_Configv+0xc2>
 8000c1e:	b672      	cpsid	i
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <_Z18SystemClock_Configv+0xc0>
  HAL_PWREx_EnableUSBVoltageDetector();
 8000c22:	f006 fd61 	bl	80076e8 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8000c26:	b01e      	add	sp, #120	; 0x78
 8000c28:	bd10      	pop	{r4, pc}
 8000c2a:	bf00      	nop
 8000c2c:	f3af 8000 	nop.w
 8000c30:	00000021 	.word	0x00000021
 8000c34:	00010000 	.word	0x00010000
 8000c38:	0000003f 	.word	0x0000003f
 8000c3c:	00000003 	.word	0x00000003
 8000c40:	00000040 	.word	0x00000040
 8000c44:	00000040 	.word	0x00000040
 8000c48:	58024800 	.word	0x58024800
 8000c4c:	58000400 	.word	0x58000400
 8000c50:	58024400 	.word	0x58024400

08000c54 <main>:
{
 8000c54:	b530      	push	{r4, r5, lr}
	  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000c56:	2400      	movs	r4, #0
{
 8000c58:	b0ad      	sub	sp, #180	; 0xb4
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000c5a:	2501      	movs	r5, #1
	  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000c5c:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
 8000c60:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
  HAL_MPU_Disable();
 8000c64:	f001 fa86 	bl	8002174 <HAL_MPU_Disable>
    MPU_InitStruct.BaseAddress = 0x24000000;
 8000c68:	f04f 5210 	mov.w	r2, #603979776	; 0x24000000
    MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000c6c:	4b5f      	ldr	r3, [pc, #380]	; (8000dec <main+0x198>)
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c6e:	a814      	add	r0, sp, #80	; 0x50
    MPU_InitStruct.BaseAddress = 0x24000000;
 8000c70:	9215      	str	r2, [sp, #84]	; 0x54
    MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000c72:	9316      	str	r3, [sp, #88]	; 0x58
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000c74:	f8ad 5050 	strh.w	r5, [sp, #80]	; 0x50
    MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000c78:	9417      	str	r4, [sp, #92]	; 0x5c
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c7a:	f001 fab3 	bl	80021e4 <HAL_MPU_ConfigRegion>
    MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8000c7e:	4a5c      	ldr	r2, [pc, #368]	; (8000df0 <main+0x19c>)
 8000c80:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
    MPU_InitStruct.BaseAddress = 0x38000000;
 8000c84:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c88:	a814      	add	r0, sp, #80	; 0x50
    MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000c8a:	f88d 5051 	strb.w	r5, [sp, #81]	; 0x51
    MPU_InitStruct.BaseAddress = 0x38000000;
 8000c8e:	9115      	str	r1, [sp, #84]	; 0x54
    MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8000c90:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c94:	f001 faa6 	bl	80021e4 <HAL_MPU_ConfigRegion>
    HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000c98:	2004      	movs	r0, #4
 8000c9a:	f001 fa83 	bl	80021a4 <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000c9e:	4a55      	ldr	r2, [pc, #340]	; (8000df4 <main+0x1a0>)
 8000ca0:	6953      	ldr	r3, [r2, #20]
 8000ca2:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
 8000ca6:	d111      	bne.n	8000ccc <main+0x78>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000ca8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000cac:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000cb0:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000cb4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000cb8:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000cbc:	6953      	ldr	r3, [r2, #20]
 8000cbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000cc4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000cc8:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000ccc:	4849      	ldr	r0, [pc, #292]	; (8000df4 <main+0x1a0>)
 8000cce:	6943      	ldr	r3, [r0, #20]
 8000cd0:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8000cd4:	d126      	bne.n	8000d24 <main+0xd0>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000cd6:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000cda:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000cde:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000ce2:	f643 74e0 	movw	r4, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000ce6:	f3c3 3c4e 	ubfx	ip, r3, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000cea:	f3c3 0ec9 	ubfx	lr, r3, #3, #10
 8000cee:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000cf2:	ea0c 0104 	and.w	r1, ip, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000cf6:	4673      	mov	r3, lr
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000cf8:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000cfc:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000cfe:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 8000d02:	1c5a      	adds	r2, r3, #1
 8000d04:	d1f8      	bne.n	8000cf8 <main+0xa4>
    } while(sets-- != 0U);
 8000d06:	f1ac 0c20 	sub.w	ip, ip, #32
 8000d0a:	f11c 0f20 	cmn.w	ip, #32
 8000d0e:	d1f0      	bne.n	8000cf2 <main+0x9e>
 8000d10:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000d14:	6943      	ldr	r3, [r0, #20]
 8000d16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d1a:	6143      	str	r3, [r0, #20]
 8000d1c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000d20:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8000d24:	f001 f854 	bl	8001dd0 <HAL_Init>
  SystemClock_Config();
 8000d28:	f7ff ff1a 	bl	8000b60 <_Z18SystemClock_Configv>
  __HAL_RCC_HSEM_CLK_ENABLE();
 8000d2c:	4b32      	ldr	r3, [pc, #200]	; (8000df8 <main+0x1a4>)
HAL_HSEM_FastTake(HSEM_ID_0);
 8000d2e:	2000      	movs	r0, #0
  __HAL_RCC_HSEM_CLK_ENABLE();
 8000d30:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000d34:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000d38:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000d3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d44:	9300      	str	r3, [sp, #0]
 8000d46:	9b00      	ldr	r3, [sp, #0]
HAL_HSEM_FastTake(HSEM_ID_0);
 8000d48:	f004 fabe 	bl	80052c8 <HAL_HSEM_FastTake>
HAL_HSEM_Release(HSEM_ID_0,0);
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	4608      	mov	r0, r1
 8000d50:	f004 fad4 	bl	80052fc <HAL_HSEM_Release>
  MX_GPIO_Init();
 8000d54:	f7ff fd78 	bl	8000848 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d58:	f7ff fd36 	bl	80007c8 <MX_DMA_Init>
  MX_UART4_Init();
 8000d5c:	f000 fe24 	bl	80019a8 <MX_UART4_Init>
  MX_I2C2_Init();
 8000d60:	f7ff fe46 	bl	80009f0 <MX_I2C2_Init>
  MX_TIM1_Init();
 8000d64:	f000 fc78 	bl	8001658 <MX_TIM1_Init>
  MX_UART7_Init();
 8000d68:	f000 fe66 	bl	8001a38 <MX_UART7_Init>
  MX_USB_DEVICE_Init();
 8000d6c:	f00f fa9c 	bl	80102a8 <MX_USB_DEVICE_Init>
  DWT_Init();
 8000d70:	f000 f876 	bl	8000e60 <_Z8DWT_Initv>
  __HAL_UART_ENABLE_IT(&huart4, UART_IT_IDLE);
 8000d74:	4821      	ldr	r0, [pc, #132]	; (8000dfc <main+0x1a8>)
  HAL_UART_Receive_DMA(&huart4, sbus_buffer, SBUS_PACKET_LEN);
 8000d76:	2219      	movs	r2, #25
 8000d78:	4921      	ldr	r1, [pc, #132]	; (8000e00 <main+0x1ac>)
  __HAL_UART_ENABLE_IT(&huart4, UART_IT_IDLE);
 8000d7a:	6804      	ldr	r4, [r0, #0]
 8000d7c:	6823      	ldr	r3, [r4, #0]
 8000d7e:	f043 0310 	orr.w	r3, r3, #16
 8000d82:	6023      	str	r3, [r4, #0]
  HAL_UART_Receive_DMA(&huart4, sbus_buffer, SBUS_PACKET_LEN);
 8000d84:	f00a fc06 	bl	800b594 <HAL_UART_Receive_DMA>
  SensorData sensors;
 8000d88:	a814      	add	r0, sp, #80	; 0x50
 8000d8a:	f000 f927 	bl	8000fdc <_ZN10SensorDataC1Ev>
  Serializer serializer;
 8000d8e:	a804      	add	r0, sp, #16
 8000d90:	f000 f9b8 	bl	8001104 <_ZN10SerializerC1Ev>
	  	  sensors.ReadRawData();
 8000d94:	a814      	add	r0, sp, #80	; 0x50
 8000d96:	f000 f935 	bl	8001004 <_ZN10SensorData11ReadRawDataEv>
	  	  serializer.SendData(sensors.GetAccData());
 8000d9a:	a814      	add	r0, sp, #80	; 0x50
 8000d9c:	f000 f988 	bl	80010b0 <_ZN10SensorData10GetAccDataEv>
 8000da0:	a901      	add	r1, sp, #4
 8000da2:	a804      	add	r0, sp, #16
 8000da4:	ed8d 0a01 	vstr	s0, [sp, #4]
 8000da8:	edcd 0a02 	vstr	s1, [sp, #8]
 8000dac:	ed8d 1a03 	vstr	s2, [sp, #12]
 8000db0:	f000 fa5a 	bl	8001268 <_ZN10Serializer8SendDataERK8acc_data>
	  	  serializer.SendData(sensors.GetMagData());
 8000db4:	a814      	add	r0, sp, #80	; 0x50
 8000db6:	f000 f997 	bl	80010e8 <_ZN10SensorData10GetMagDataEv>
 8000dba:	a901      	add	r1, sp, #4
 8000dbc:	a804      	add	r0, sp, #16
 8000dbe:	ed8d 0a01 	vstr	s0, [sp, #4]
 8000dc2:	edcd 0a02 	vstr	s1, [sp, #8]
 8000dc6:	ed8d 1a03 	vstr	s2, [sp, #12]
 8000dca:	f000 f9f7 	bl	80011bc <_ZN10Serializer8SendDataERK8mag_data>
	  	  serializer.SendData(sensors.GetGyroData());
 8000dce:	a814      	add	r0, sp, #80	; 0x50
 8000dd0:	f000 f97c 	bl	80010cc <_ZN10SensorData11GetGyroDataEv>
 8000dd4:	a901      	add	r1, sp, #4
 8000dd6:	a804      	add	r0, sp, #16
 8000dd8:	ed8d 0a01 	vstr	s0, [sp, #4]
 8000ddc:	edcd 0a02 	vstr	s1, [sp, #8]
 8000de0:	ed8d 1a03 	vstr	s2, [sp, #12]
 8000de4:	f000 f996 	bl	8001114 <_ZN10Serializer8SendDataERK9gyro_data>
  while (1)
 8000de8:	e7d4      	b.n	8000d94 <main+0x140>
 8000dea:	bf00      	nop
 8000dec:	03000012 	.word	0x03000012
 8000df0:	0301000f 	.word	0x0301000f
 8000df4:	e000ed00 	.word	0xe000ed00
 8000df8:	58024400 	.word	0x58024400
 8000dfc:	240004c8 	.word	0x240004c8
 8000e00:	2400045c 	.word	0x2400045c

08000e04 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 8000e04:	b672      	cpsid	i
  while (1)
 8000e06:	e7fe      	b.n	8000e06 <Error_Handler+0x2>

08000e08 <HAL_UART_RxCpltCallback>:
  /* USER CODE END Error_Handler_Debug */
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  if (huart->Instance == UART4)
 8000e08:	4b0b      	ldr	r3, [pc, #44]	; (8000e38 <HAL_UART_RxCpltCallback+0x30>)
 8000e0a:	6802      	ldr	r2, [r0, #0]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d000      	beq.n	8000e12 <HAL_UART_RxCpltCallback+0xa>
 8000e10:	4770      	bx	lr
  {
    if(sbus_buffer[0] != SBUS_HEADER)
 8000e12:	490a      	ldr	r1, [pc, #40]	; (8000e3c <HAL_UART_RxCpltCallback+0x34>)
 8000e14:	780b      	ldrb	r3, [r1, #0]
 8000e16:	2b0f      	cmp	r3, #15
 8000e18:	d00a      	beq.n	8000e30 <HAL_UART_RxCpltCallback+0x28>
{
 8000e1a:	b510      	push	{r4, lr}
    {
      HAL_UART_DMAStop(&huart4);
 8000e1c:	4c08      	ldr	r4, [pc, #32]	; (8000e40 <HAL_UART_RxCpltCallback+0x38>)
 8000e1e:	4620      	mov	r0, r4
 8000e20:	f00a fbfe 	bl	800b620 <HAL_UART_DMAStop>
      __HAL_UART_ENABLE_IT(&huart4, UART_IT_IDLE);
 8000e24:	6822      	ldr	r2, [r4, #0]
 8000e26:	6813      	ldr	r3, [r2, #0]
 8000e28:	f043 0310 	orr.w	r3, r3, #16
 8000e2c:	6013      	str	r3, [r2, #0]
    {
    	frkskyRC.UpdateSbus(sbus_buffer);
    }
  }

}
 8000e2e:	bd10      	pop	{r4, pc}
    	frkskyRC.UpdateSbus(sbus_buffer);
 8000e30:	4804      	ldr	r0, [pc, #16]	; (8000e44 <HAL_UART_RxCpltCallback+0x3c>)
 8000e32:	f000 b82b 	b.w	8000e8c <_ZN14SbusController10UpdateSbusEPh>
 8000e36:	bf00      	nop
 8000e38:	40004c00 	.word	0x40004c00
 8000e3c:	2400045c 	.word	0x2400045c
 8000e40:	240004c8 	.word	0x240004c8
 8000e44:	240003bc 	.word	0x240003bc

08000e48 <_GLOBAL__sub_I_frkskyRC>:
SbusController frkskyRC;
 8000e48:	4801      	ldr	r0, [pc, #4]	; (8000e50 <_GLOBAL__sub_I_frkskyRC+0x8>)
 8000e4a:	f000 b81b 	b.w	8000e84 <_ZN14SbusControllerC1Ev>
 8000e4e:	bf00      	nop
 8000e50:	240003bc 	.word	0x240003bc

08000e54 <_GLOBAL__sub_D_frkskyRC>:
 8000e54:	4801      	ldr	r0, [pc, #4]	; (8000e5c <_GLOBAL__sub_D_frkskyRC+0x8>)
 8000e56:	f000 b817 	b.w	8000e88 <_ZN14SbusControllerD1Ev>
 8000e5a:	bf00      	nop
 8000e5c:	240003bc 	.word	0x240003bc

08000e60 <_Z8DWT_Initv>:



void DWT_Init(void)
{
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000e60:	4906      	ldr	r1, [pc, #24]	; (8000e7c <_Z8DWT_Initv+0x1c>)
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000e62:	4a07      	ldr	r2, [pc, #28]	; (8000e80 <_Z8DWT_Initv+0x20>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000e64:	f8d1 30fc 	ldr.w	r3, [r1, #252]	; 0xfc
 8000e68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e6c:	f8c1 30fc 	str.w	r3, [r1, #252]	; 0xfc
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000e70:	6813      	ldr	r3, [r2, #0]
 8000e72:	f043 0301 	orr.w	r3, r3, #1
 8000e76:	6013      	str	r3, [r2, #0]
}
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	e000ed00 	.word	0xe000ed00
 8000e80:	e0001000 	.word	0xe0001000

08000e84 <_ZN14SbusControllerC1Ev>:
#include <sbus.h>

SbusController::SbusController()
{

}
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop

08000e88 <_ZN14SbusControllerD1Ev>:

SbusController::~SbusController()
{

}
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop

08000e8c <_ZN14SbusController10UpdateSbusEPh>:

void SbusController::UpdateSbus(uint8_t *buf)
{
	sbus_channel.channel1 = (buf[1] >> 0 | (buf[2] << 8)) & 0x07FF;
 8000e8c:	f8b1 3001 	ldrh.w	r3, [r1, #1]
	else
	{
	  channel_17 = 0;
	}
	// Failsafe
	failsafe_status = SBUS_SIGNAL_OK;
 8000e90:	2200      	movs	r2, #0
	sbus_channel.channel1 = (buf[1] >> 0 | (buf[2] << 8)) & 0x07FF;
 8000e92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000e96:	8083      	strh	r3, [r0, #4]
	sbus_channel.channel2 = (buf[2] >> 3 | (buf[3] << 5)) & 0x07FF;
 8000e98:	78cb      	ldrb	r3, [r1, #3]
 8000e9a:	f891 c002 	ldrb.w	ip, [r1, #2]
 8000e9e:	015b      	lsls	r3, r3, #5
 8000ea0:	ea43 03dc 	orr.w	r3, r3, ip, lsr #3
 8000ea4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000ea8:	80c3      	strh	r3, [r0, #6]
	sbus_channel.channel3 = (buf[3] >> 6 | (buf[4] << 2) | buf[5] << 10) & 0x07FF;
 8000eaa:	794b      	ldrb	r3, [r1, #5]
 8000eac:	f891 c004 	ldrb.w	ip, [r1, #4]
 8000eb0:	029b      	lsls	r3, r3, #10
 8000eb2:	ea43 038c 	orr.w	r3, r3, ip, lsl #2
 8000eb6:	f891 c003 	ldrb.w	ip, [r1, #3]
 8000eba:	ea43 139c 	orr.w	r3, r3, ip, lsr #6
 8000ebe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000ec2:	8103      	strh	r3, [r0, #8]
	sbus_channel.channel4 = (buf[5] >> 1 | (buf[6] << 7)) & 0x07FF;
 8000ec4:	798b      	ldrb	r3, [r1, #6]
 8000ec6:	f891 c005 	ldrb.w	ip, [r1, #5]
 8000eca:	01db      	lsls	r3, r3, #7
 8000ecc:	ea43 035c 	orr.w	r3, r3, ip, lsr #1
 8000ed0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000ed4:	8143      	strh	r3, [r0, #10]
	sbus_channel.channel5 = (buf[6] >> 4 | (buf[7] << 4)) & 0x07FF;
 8000ed6:	79cb      	ldrb	r3, [r1, #7]
 8000ed8:	f891 c006 	ldrb.w	ip, [r1, #6]
 8000edc:	011b      	lsls	r3, r3, #4
 8000ede:	ea43 131c 	orr.w	r3, r3, ip, lsr #4
 8000ee2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000ee6:	8183      	strh	r3, [r0, #12]
	sbus_channel.channel6 = (buf[7] >> 7 | (buf[8] << 1) | buf[9] << 9) & 0x07FF;
 8000ee8:	7a4b      	ldrb	r3, [r1, #9]
 8000eea:	f891 c008 	ldrb.w	ip, [r1, #8]
 8000eee:	025b      	lsls	r3, r3, #9
 8000ef0:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
 8000ef4:	f891 c007 	ldrb.w	ip, [r1, #7]
 8000ef8:	ea43 13dc 	orr.w	r3, r3, ip, lsr #7
 8000efc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f00:	81c3      	strh	r3, [r0, #14]
	sbus_channel.channel7 = (buf[9] >> 2 | (buf[10] << 6)) & 0x07FF;
 8000f02:	7a8b      	ldrb	r3, [r1, #10]
 8000f04:	f891 c009 	ldrb.w	ip, [r1, #9]
 8000f08:	019b      	lsls	r3, r3, #6
 8000f0a:	ea43 039c 	orr.w	r3, r3, ip, lsr #2
 8000f0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f12:	8203      	strh	r3, [r0, #16]
	sbus_channel.channel8 = (buf[10] >> 5 | (buf[11] << 3)) & 0x07FF;
 8000f14:	7acb      	ldrb	r3, [r1, #11]
 8000f16:	f891 c00a 	ldrb.w	ip, [r1, #10]
 8000f1a:	00db      	lsls	r3, r3, #3
 8000f1c:	ea43 135c 	orr.w	r3, r3, ip, lsr #5
 8000f20:	8243      	strh	r3, [r0, #18]
	sbus_channel.channel9 = (buf[12] << 0 | (buf[13] << 8)) & 0x07FF;
 8000f22:	898b      	ldrh	r3, [r1, #12]
 8000f24:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f28:	8283      	strh	r3, [r0, #20]
	sbus_channel.channel10 = (buf[13] >> 3 | (buf[14] << 5)) & 0x07FF;
 8000f2a:	7b8b      	ldrb	r3, [r1, #14]
 8000f2c:	f891 c00d 	ldrb.w	ip, [r1, #13]
 8000f30:	015b      	lsls	r3, r3, #5
 8000f32:	ea43 03dc 	orr.w	r3, r3, ip, lsr #3
 8000f36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f3a:	82c3      	strh	r3, [r0, #22]
	sbus_channel.channel11 = (buf[14] >> 6 | (buf[15] << 2) | buf[16] << 10) & 0x07FF;
 8000f3c:	7c0b      	ldrb	r3, [r1, #16]
 8000f3e:	f891 c00f 	ldrb.w	ip, [r1, #15]
 8000f42:	029b      	lsls	r3, r3, #10
 8000f44:	ea43 038c 	orr.w	r3, r3, ip, lsl #2
 8000f48:	f891 c00e 	ldrb.w	ip, [r1, #14]
 8000f4c:	ea43 139c 	orr.w	r3, r3, ip, lsr #6
 8000f50:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f54:	8303      	strh	r3, [r0, #24]
	sbus_channel.channel12 = (buf[16] >> 1 | (buf[17] << 7)) & 0x07FF;
 8000f56:	7c4b      	ldrb	r3, [r1, #17]
 8000f58:	f891 c010 	ldrb.w	ip, [r1, #16]
 8000f5c:	01db      	lsls	r3, r3, #7
 8000f5e:	ea43 035c 	orr.w	r3, r3, ip, lsr #1
 8000f62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f66:	8343      	strh	r3, [r0, #26]
	sbus_channel.channel13 = (buf[17] >> 4 | (buf[18] << 4)) & 0x07FF;
 8000f68:	7c8b      	ldrb	r3, [r1, #18]
 8000f6a:	f891 c011 	ldrb.w	ip, [r1, #17]
 8000f6e:	011b      	lsls	r3, r3, #4
 8000f70:	ea43 131c 	orr.w	r3, r3, ip, lsr #4
 8000f74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f78:	8383      	strh	r3, [r0, #28]
	sbus_channel.channel14 = (buf[18] >> 7 | (buf[19] << 1) | buf[20] << 9) & 0x07FF;
 8000f7a:	7d0b      	ldrb	r3, [r1, #20]
 8000f7c:	f891 c013 	ldrb.w	ip, [r1, #19]
 8000f80:	025b      	lsls	r3, r3, #9
 8000f82:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
 8000f86:	f891 c012 	ldrb.w	ip, [r1, #18]
 8000f8a:	ea43 13dc 	orr.w	r3, r3, ip, lsr #7
 8000f8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f92:	83c3      	strh	r3, [r0, #30]
	sbus_channel.channel15 = (buf[20] >> 2 | (buf[21] << 6)) & 0x07FF;
 8000f94:	7d4b      	ldrb	r3, [r1, #21]
 8000f96:	f891 c014 	ldrb.w	ip, [r1, #20]
 8000f9a:	019b      	lsls	r3, r3, #6
 8000f9c:	ea43 039c 	orr.w	r3, r3, ip, lsr #2
 8000fa0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000fa4:	8403      	strh	r3, [r0, #32]
	sbus_channel.channel16 = (buf[21] >> 5 | (buf[22] << 3)) & 0x07FF;
 8000fa6:	7d8b      	ldrb	r3, [r1, #22]
 8000fa8:	f891 c015 	ldrb.w	ip, [r1, #21]
 8000fac:	00db      	lsls	r3, r3, #3
 8000fae:	ea43 135c 	orr.w	r3, r3, ip, lsr #5
 8000fb2:	8443      	strh	r3, [r0, #34]	; 0x22
	if (buf[24] & (1 << 0))
 8000fb4:	7e0b      	ldrb	r3, [r1, #24]
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	8003      	strh	r3, [r0, #0]
	if (buf[24] & (1 << 1))
 8000fbc:	7e0b      	ldrb	r3, [r1, #24]
	failsafe_status = SBUS_SIGNAL_OK;
 8000fbe:	7082      	strb	r2, [r0, #2]
	if (buf[24] & (1 << 1))
 8000fc0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000fc4:	8003      	strh	r3, [r0, #0]
	if (buf[24] & (1 << 2))
 8000fc6:	7e0b      	ldrb	r3, [r1, #24]
 8000fc8:	075a      	lsls	r2, r3, #29
 8000fca:	d502      	bpl.n	8000fd2 <_ZN14SbusController10UpdateSbusEPh+0x146>
	{
	  failsafe_status = SBUS_SIGNAL_LOST;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	7083      	strb	r3, [r0, #2]
	}

	if (buf[24] & (1 << 3))
 8000fd0:	7e0b      	ldrb	r3, [r1, #24]
 8000fd2:	071b      	lsls	r3, r3, #28
 8000fd4:	d501      	bpl.n	8000fda <_ZN14SbusController10UpdateSbusEPh+0x14e>
	{
	  failsafe_status = SBUS_SIGNAL_FAILSAFE;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	7083      	strb	r3, [r0, #2]
	}
}
 8000fda:	4770      	bx	lr

08000fdc <_ZN10SensorDataC1Ev>:
#include <sensors.hpp>


SensorData::SensorData()
 8000fdc:	4906      	ldr	r1, [pc, #24]	; (8000ff8 <_ZN10SensorDataC1Ev+0x1c>)
 8000fde:	4a07      	ldr	r2, [pc, #28]	; (8000ffc <_ZN10SensorDataC1Ev+0x20>)
 8000fe0:	b410      	push	{r4}
 8000fe2:	e9c0 1200 	strd	r1, r2, [r0]
 8000fe6:	4c06      	ldr	r4, [pc, #24]	; (8001000 <_ZN10SensorDataC1Ev+0x24>)
 8000fe8:	3160      	adds	r1, #96	; 0x60
 8000fea:	3260      	adds	r2, #96	; 0x60
 8000fec:	e9c0 4102 	strd	r4, r1, [r0, #8]
 8000ff0:	6102      	str	r2, [r0, #16]
{

}
 8000ff2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	38001000 	.word	0x38001000
 8000ffc:	38001020 	.word	0x38001020
 8001000:	38001040 	.word	0x38001040

08001004 <_ZN10SensorData11ReadRawDataEv>:

void SensorData::ReadRawData()
{
 8001004:	b510      	push	{r4, lr}
 8001006:	4604      	mov	r4, r0
	// Add filtered data here....
}

void SensorData::ReadGPS()
{
	  if(HAL_HSEM_FastTake(HSEM_ID_1) == HAL_OK)
 8001008:	2000      	movs	r0, #0
 800100a:	f004 f95d 	bl	80052c8 <HAL_HSEM_FastTake>
 800100e:	b970      	cbnz	r0, 800102e <_ZN10SensorData11ReadRawDataEv+0x2a>
	      {
	        gps_values.gps_latitude = gps_values_m7->gps_latitude;
 8001010:	6923      	ldr	r3, [r4, #16]
 8001012:	6819      	ldr	r1, [r3, #0]
	        gps_values.gps_longitude = gps_values_m7->gps_longitude;
 8001014:	685a      	ldr	r2, [r3, #4]
	        gps_values.gps_altitude = gps_values_m7->gps_altitude;
 8001016:	6898      	ldr	r0, [r3, #8]
	        gps_values.gps_longitude = gps_values_m7->gps_longitude;
 8001018:	61a2      	str	r2, [r4, #24]
	        gps_values.gps_velocity_x = gps_values_m7->gps_velocity_x;
 800101a:	68da      	ldr	r2, [r3, #12]
	        gps_values.gps_latitude = gps_values_m7->gps_latitude;
 800101c:	6161      	str	r1, [r4, #20]
	        gps_values.gps_velocity_y = gps_values_m7->gps_velocity_y;
 800101e:	6919      	ldr	r1, [r3, #16]
	        gps_values.gps_velocity_x = gps_values_m7->gps_velocity_x;
 8001020:	6222      	str	r2, [r4, #32]
	        gps_values.gps_velocity_z = gps_values_m7->gps_velocity_z;
 8001022:	695a      	ldr	r2, [r3, #20]
	        gps_values.gps_satellites = gps_values_m7->gps_satellites;
 8001024:	69db      	ldr	r3, [r3, #28]
	        gps_values.gps_altitude = gps_values_m7->gps_altitude;
 8001026:	61e0      	str	r0, [r4, #28]
	        gps_values.gps_velocity_y = gps_values_m7->gps_velocity_y;
 8001028:	6261      	str	r1, [r4, #36]	; 0x24
	        gps_values.gps_velocity_z = gps_values_m7->gps_velocity_z;
 800102a:	62a2      	str	r2, [r4, #40]	; 0x28
	        gps_values.gps_satellites = gps_values_m7->gps_satellites;
 800102c:	6323      	str	r3, [r4, #48]	; 0x30
	      }
	      HAL_HSEM_Release(HSEM_ID_1,0);
 800102e:	2100      	movs	r1, #0
 8001030:	4608      	mov	r0, r1
 8001032:	f004 f963 	bl	80052fc <HAL_HSEM_Release>
}


void SensorData::ReadMag()
{
	  if(HAL_HSEM_FastTake(HSEM_ID_1) == HAL_OK)
 8001036:	2000      	movs	r0, #0
 8001038:	f004 f946 	bl	80052c8 <HAL_HSEM_FastTake>
 800103c:	b930      	cbnz	r0, 800104c <_ZN10SensorData11ReadRawDataEv+0x48>
	  {
	    mag_values.imu_mag_x = mag_values_m7->imu_mag_x;
 800103e:	68a3      	ldr	r3, [r4, #8]
 8001040:	6819      	ldr	r1, [r3, #0]
	    mag_values.imu_mag_y = mag_values_m7->imu_mag_y;
 8001042:	685a      	ldr	r2, [r3, #4]
	    mag_values.imu_mag_z = mag_values_m7->imu_mag_z;
 8001044:	689b      	ldr	r3, [r3, #8]
	    mag_values.imu_mag_x = mag_values_m7->imu_mag_x;
 8001046:	6561      	str	r1, [r4, #84]	; 0x54
	    mag_values.imu_mag_y = mag_values_m7->imu_mag_y;
 8001048:	65a2      	str	r2, [r4, #88]	; 0x58
	    mag_values.imu_mag_z = mag_values_m7->imu_mag_z;
 800104a:	65e3      	str	r3, [r4, #92]	; 0x5c
	  }
	  HAL_HSEM_Release(HSEM_ID_1,0);
 800104c:	2100      	movs	r1, #0
 800104e:	4608      	mov	r0, r1
 8001050:	f004 f954 	bl	80052fc <HAL_HSEM_Release>

}

void SensorData::ReadAcc()
{
	if(HAL_HSEM_FastTake(HSEM_ID_1) == HAL_OK)
 8001054:	2000      	movs	r0, #0
 8001056:	f004 f937 	bl	80052c8 <HAL_HSEM_FastTake>
 800105a:	b930      	cbnz	r0, 800106a <_ZN10SensorData11ReadRawDataEv+0x66>
	  {
	      acc_values.imu_acc_x = acc_values_m7->imu_acc_x;
 800105c:	6823      	ldr	r3, [r4, #0]
 800105e:	6819      	ldr	r1, [r3, #0]
	      acc_values.imu_acc_y = acc_values_m7->imu_acc_y;
 8001060:	685a      	ldr	r2, [r3, #4]
	      acc_values.imu_acc_z = acc_values_m7->imu_acc_z;
 8001062:	689b      	ldr	r3, [r3, #8]
	      acc_values.imu_acc_x = acc_values_m7->imu_acc_x;
 8001064:	6361      	str	r1, [r4, #52]	; 0x34
	      acc_values.imu_acc_y = acc_values_m7->imu_acc_y;
 8001066:	63a2      	str	r2, [r4, #56]	; 0x38
	      acc_values.imu_acc_z = acc_values_m7->imu_acc_z;
 8001068:	63e3      	str	r3, [r4, #60]	; 0x3c
	  }
	  HAL_HSEM_Release(HSEM_ID_1,0);
 800106a:	2100      	movs	r1, #0
 800106c:	4608      	mov	r0, r1
 800106e:	f004 f945 	bl	80052fc <HAL_HSEM_Release>
}

void SensorData::ReadBaro()
{
	  if(HAL_HSEM_FastTake(HSEM_ID_1) == HAL_OK)
 8001072:	2000      	movs	r0, #0
 8001074:	f004 f928 	bl	80052c8 <HAL_HSEM_FastTake>
 8001078:	b920      	cbnz	r0, 8001084 <_ZN10SensorData11ReadRawDataEv+0x80>
	  {
	     baro_values.baro_altitude = baro_values_m7->baro_altitude;
 800107a:	68e3      	ldr	r3, [r4, #12]
 800107c:	685a      	ldr	r2, [r3, #4]
	     baro_values.baro_pressure = baro_values_m7->baro_pressure;
 800107e:	681b      	ldr	r3, [r3, #0]
	     baro_values.baro_altitude = baro_values_m7->baro_altitude;
 8001080:	6522      	str	r2, [r4, #80]	; 0x50
	     baro_values.baro_pressure = baro_values_m7->baro_pressure;
 8001082:	64e3      	str	r3, [r4, #76]	; 0x4c
	  }
	  HAL_HSEM_Release(HSEM_ID_1,0);
 8001084:	2100      	movs	r1, #0
 8001086:	4608      	mov	r0, r1
 8001088:	f004 f938 	bl	80052fc <HAL_HSEM_Release>
}

void SensorData::ReadGyro()
{
	  if(HAL_HSEM_FastTake(HSEM_ID_1) == HAL_OK)
 800108c:	2000      	movs	r0, #0
 800108e:	f004 f91b 	bl	80052c8 <HAL_HSEM_FastTake>
 8001092:	b930      	cbnz	r0, 80010a2 <_ZN10SensorData11ReadRawDataEv+0x9e>
	  {
	     gyro_values.imu_gyro_x = gyro_values_m7->imu_gyro_x;
 8001094:	6863      	ldr	r3, [r4, #4]
 8001096:	6819      	ldr	r1, [r3, #0]
	     gyro_values.imu_gyro_y = gyro_values_m7->imu_gyro_y;
 8001098:	685a      	ldr	r2, [r3, #4]
	     gyro_values.imu_gyro_z = gyro_values_m7->imu_gyro_z;
 800109a:	689b      	ldr	r3, [r3, #8]
	     gyro_values.imu_gyro_x = gyro_values_m7->imu_gyro_x;
 800109c:	6421      	str	r1, [r4, #64]	; 0x40
	     gyro_values.imu_gyro_y = gyro_values_m7->imu_gyro_y;
 800109e:	6462      	str	r2, [r4, #68]	; 0x44
	     gyro_values.imu_gyro_z = gyro_values_m7->imu_gyro_z;
 80010a0:	64a3      	str	r3, [r4, #72]	; 0x48
	  }
	  HAL_HSEM_Release(HSEM_ID_1,0);
 80010a2:	2100      	movs	r1, #0
}
 80010a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	  HAL_HSEM_Release(HSEM_ID_1,0);
 80010a8:	4608      	mov	r0, r1
 80010aa:	f004 b927 	b.w	80052fc <HAL_HSEM_Release>
 80010ae:	bf00      	nop

080010b0 <_ZN10SensorData10GetAccDataEv>:
}

acc_data SensorData::GetAccData()
{
 80010b0:	b088      	sub	sp, #32
	return acc_values;
 80010b2:	3034      	adds	r0, #52	; 0x34
 80010b4:	ab08      	add	r3, sp, #32
 80010b6:	c807      	ldmia	r0, {r0, r1, r2}
 80010b8:	e903 0007 	stmdb	r3, {r0, r1, r2}
}
 80010bc:	eddd 0a06 	vldr	s1, [sp, #24]
 80010c0:	ed9d 1a07 	vldr	s2, [sp, #28]
 80010c4:	ed9d 0a05 	vldr	s0, [sp, #20]
 80010c8:	b008      	add	sp, #32
 80010ca:	4770      	bx	lr

080010cc <_ZN10SensorData11GetGyroDataEv>:
gyro_data SensorData::GetGyroData()
{
 80010cc:	b088      	sub	sp, #32
	return gyro_values;
 80010ce:	3040      	adds	r0, #64	; 0x40
 80010d0:	ab08      	add	r3, sp, #32
 80010d2:	c807      	ldmia	r0, {r0, r1, r2}
 80010d4:	e903 0007 	stmdb	r3, {r0, r1, r2}
}
 80010d8:	eddd 0a06 	vldr	s1, [sp, #24]
 80010dc:	ed9d 1a07 	vldr	s2, [sp, #28]
 80010e0:	ed9d 0a05 	vldr	s0, [sp, #20]
 80010e4:	b008      	add	sp, #32
 80010e6:	4770      	bx	lr

080010e8 <_ZN10SensorData10GetMagDataEv>:
mag_data  SensorData::GetMagData()
{
 80010e8:	b088      	sub	sp, #32
	return mag_values;
 80010ea:	3054      	adds	r0, #84	; 0x54
 80010ec:	ab08      	add	r3, sp, #32
 80010ee:	c807      	ldmia	r0, {r0, r1, r2}
 80010f0:	e903 0007 	stmdb	r3, {r0, r1, r2}
}
 80010f4:	eddd 0a06 	vldr	s1, [sp, #24]
 80010f8:	ed9d 1a07 	vldr	s2, [sp, #28]
 80010fc:	ed9d 0a05 	vldr	s0, [sp, #20]
 8001100:	b008      	add	sp, #32
 8001102:	4770      	bx	lr

08001104 <_ZN10SerializerC1Ev>:
		usb_timer(0),
		acc_timer(0),
		gyro_timer(0),
		gps_timer(0),
		mag_timer(0),
		baro_timer(0)
 8001104:	2200      	movs	r2, #0
 8001106:	e9c0 2200 	strd	r2, r2, [r0]
 800110a:	e9c0 2202 	strd	r2, r2, [r0, #8]
 800110e:	e9c0 2204 	strd	r2, r2, [r0, #16]
{

}
 8001112:	4770      	bx	lr

08001114 <_ZN10Serializer8SendDataERK9gyro_data>:
//{
//	return 0;
//}

void Serializer::SendData(const gyro_data& data)
{
 8001114:	b530      	push	{r4, r5, lr}
 8001116:	4604      	mov	r4, r0
 8001118:	b085      	sub	sp, #20
 800111a:	460d      	mov	r5, r1
  if((HAL_GetTick() - gyro_timer) >= GYRO_UPDATE_RATE_MS)
 800111c:	f000 fede 	bl	8001edc <HAL_GetTick>
 8001120:	68a3      	ldr	r3, [r4, #8]
 8001122:	4298      	cmp	r0, r3
 8001124:	d043      	beq.n	80011ae <_ZN10Serializer8SendDataERK9gyro_data+0x9a>
	{
	 uint8_t frame[sizeof(data)];
	 std::memcpy(frame, (uint8_t*)&data, sizeof(data));
 8001126:	6828      	ldr	r0, [r5, #0]
 8001128:	ab01      	add	r3, sp, #4
 800112a:	6869      	ldr	r1, [r5, #4]
 800112c:	68aa      	ldr	r2, [r5, #8]
	std::memcpy(m_data_packet.data, &data[0], len);
 800112e:	ad01      	add	r5, sp, #4
	 std::memcpy(frame, (uint8_t*)&data, sizeof(data));
 8001130:	c307      	stmia	r3!, {r0, r1, r2}
	m_data_packet.preamble[0] = UART_PREAMBLE_1;
 8001132:	4a20      	ldr	r2, [pc, #128]	; (80011b4 <_ZN10Serializer8SendDataERK9gyro_data+0xa0>)
        crc8 = crc_table[crc8 ^ data[i]];
 8001134:	4b20      	ldr	r3, [pc, #128]	; (80011b8 <_ZN10Serializer8SendDataERK9gyro_data+0xa4>)
	m_data_packet.preamble[0] = UART_PREAMBLE_1;
 8001136:	61a2      	str	r2, [r4, #24]
	std::memcpy(m_data_packet.data, &data[0], len);
 8001138:	cd07      	ldmia	r5!, {r0, r1, r2}
 800113a:	61e0      	str	r0, [r4, #28]
        crc8 = crc_table[crc8 ^ data[i]];
 800113c:	7f20      	ldrb	r0, [r4, #28]
	std::memcpy(m_data_packet.data, &data[0], len);
 800113e:	6221      	str	r1, [r4, #32]
        crc8 = crc_table[crc8 ^ data[i]];
 8001140:	f080 004a 	eor.w	r0, r0, #74	; 0x4a
	std::memcpy(m_data_packet.data, &data[0], len);
 8001144:	6262      	str	r2, [r4, #36]	; 0x24
        crc8 = crc_table[crc8 ^ data[i]];
 8001146:	7f61      	ldrb	r1, [r4, #29]
 8001148:	5c1a      	ldrb	r2, [r3, r0]
 800114a:	7fa5      	ldrb	r5, [r4, #30]
 800114c:	404a      	eors	r2, r1
 800114e:	7fe0      	ldrb	r0, [r4, #31]
 8001150:	5c99      	ldrb	r1, [r3, r2]
 8001152:	4069      	eors	r1, r5
 8001154:	f894 5020 	ldrb.w	r5, [r4, #32]
 8001158:	5c5a      	ldrb	r2, [r3, r1]
 800115a:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
 800115e:	4042      	eors	r2, r0
 8001160:	5c98      	ldrb	r0, [r3, r2]
 8001162:	4068      	eors	r0, r5
 8001164:	f894 5022 	ldrb.w	r5, [r4, #34]	; 0x22
 8001168:	5c1a      	ldrb	r2, [r3, r0]
 800116a:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
 800116e:	404a      	eors	r2, r1
 8001170:	5c99      	ldrb	r1, [r3, r2]
 8001172:	4069      	eors	r1, r5
 8001174:	f894 5024 	ldrb.w	r5, [r4, #36]	; 0x24
 8001178:	5c5a      	ldrb	r2, [r3, r1]
	CDC_Transmit_FS((uint8_t*)&m_data_packet, sizeof(m_data_packet));
 800117a:	2125      	movs	r1, #37	; 0x25
        crc8 = crc_table[crc8 ^ data[i]];
 800117c:	4042      	eors	r2, r0
 800117e:	5c98      	ldrb	r0, [r3, r2]
 8001180:	4068      	eors	r0, r5
 8001182:	f894 5025 	ldrb.w	r5, [r4, #37]	; 0x25
 8001186:	5c1a      	ldrb	r2, [r3, r0]
 8001188:	406a      	eors	r2, r5
 800118a:	5c98      	ldrb	r0, [r3, r2]
 800118c:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 8001190:	f894 5027 	ldrb.w	r5, [r4, #39]	; 0x27
 8001194:	4050      	eors	r0, r2
 8001196:	5c1a      	ldrb	r2, [r3, r0]
	CDC_Transmit_FS((uint8_t*)&m_data_packet, sizeof(m_data_packet));
 8001198:	f104 0018 	add.w	r0, r4, #24
        crc8 = crc_table[crc8 ^ data[i]];
 800119c:	406a      	eors	r2, r5
	m_data_packet.crc = crc_val;
 800119e:	5c9b      	ldrb	r3, [r3, r2]
 80011a0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	CDC_Transmit_FS((uint8_t*)&m_data_packet, sizeof(m_data_packet));
 80011a4:	f00f f98c 	bl	80104c0 <CDC_Transmit_FS>
	 SendDataPacket(sensor_cmd_code_t::SENSOR_COMMAND_GYRO, frame, sizeof(frame)/sizeof(frame[0]));
	 gyro_timer = HAL_GetTick();
 80011a8:	f000 fe98 	bl	8001edc <HAL_GetTick>
 80011ac:	60a0      	str	r0, [r4, #8]
	}
}
 80011ae:	b005      	add	sp, #20
 80011b0:	bd30      	pop	{r4, r5, pc}
 80011b2:	bf00      	nop
 80011b4:	0c207f7f 	.word	0x0c207f7f
 80011b8:	08013748 	.word	0x08013748

080011bc <_ZN10Serializer8SendDataERK8mag_data>:

void Serializer::SendData(const mag_data& data)
{
 80011bc:	b530      	push	{r4, r5, lr}
 80011be:	4604      	mov	r4, r0
 80011c0:	b085      	sub	sp, #20
 80011c2:	460d      	mov	r5, r1
  if((HAL_GetTick() - mag_timer) >= MAG_UPDATE_RATE_MS)
 80011c4:	f000 fe8a 	bl	8001edc <HAL_GetTick>
 80011c8:	6923      	ldr	r3, [r4, #16]
 80011ca:	1ac0      	subs	r0, r0, r3
 80011cc:	280b      	cmp	r0, #11
 80011ce:	d801      	bhi.n	80011d4 <_ZN10Serializer8SendDataERK8mag_data+0x18>
      uint8_t frame[sizeof(data)];
      std::memcpy(frame, (uint8_t*)&data, sizeof(data));
      SendDataPacket(sensor_cmd_code_t::SENSOR_COMMAND_MAG, frame, sizeof(frame)/sizeof(frame[0]));
      mag_timer = HAL_GetTick();
   }
}
 80011d0:	b005      	add	sp, #20
 80011d2:	bd30      	pop	{r4, r5, pc}
      std::memcpy(frame, (uint8_t*)&data, sizeof(data));
 80011d4:	6828      	ldr	r0, [r5, #0]
 80011d6:	ab01      	add	r3, sp, #4
 80011d8:	6869      	ldr	r1, [r5, #4]
 80011da:	68aa      	ldr	r2, [r5, #8]
	std::memcpy(m_data_packet.data, &data[0], len);
 80011dc:	ad01      	add	r5, sp, #4
      std::memcpy(frame, (uint8_t*)&data, sizeof(data));
 80011de:	c307      	stmia	r3!, {r0, r1, r2}
	m_data_packet.preamble[0] = UART_PREAMBLE_1;
 80011e0:	4a1f      	ldr	r2, [pc, #124]	; (8001260 <_ZN10Serializer8SendDataERK8mag_data+0xa4>)
        crc8 = crc_table[crc8 ^ data[i]];
 80011e2:	4b20      	ldr	r3, [pc, #128]	; (8001264 <_ZN10Serializer8SendDataERK8mag_data+0xa8>)
	m_data_packet.preamble[0] = UART_PREAMBLE_1;
 80011e4:	61a2      	str	r2, [r4, #24]
	std::memcpy(m_data_packet.data, &data[0], len);
 80011e6:	cd07      	ldmia	r5!, {r0, r1, r2}
 80011e8:	61e0      	str	r0, [r4, #28]
        crc8 = crc_table[crc8 ^ data[i]];
 80011ea:	7f20      	ldrb	r0, [r4, #28]
	std::memcpy(m_data_packet.data, &data[0], len);
 80011ec:	6221      	str	r1, [r4, #32]
        crc8 = crc_table[crc8 ^ data[i]];
 80011ee:	f080 001e 	eor.w	r0, r0, #30
	std::memcpy(m_data_packet.data, &data[0], len);
 80011f2:	6262      	str	r2, [r4, #36]	; 0x24
        crc8 = crc_table[crc8 ^ data[i]];
 80011f4:	7f61      	ldrb	r1, [r4, #29]
 80011f6:	5c1a      	ldrb	r2, [r3, r0]
 80011f8:	7fa5      	ldrb	r5, [r4, #30]
 80011fa:	404a      	eors	r2, r1
 80011fc:	7fe0      	ldrb	r0, [r4, #31]
 80011fe:	5c99      	ldrb	r1, [r3, r2]
 8001200:	4069      	eors	r1, r5
 8001202:	f894 5020 	ldrb.w	r5, [r4, #32]
 8001206:	5c5a      	ldrb	r2, [r3, r1]
 8001208:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
 800120c:	4042      	eors	r2, r0
 800120e:	5c98      	ldrb	r0, [r3, r2]
 8001210:	4068      	eors	r0, r5
 8001212:	f894 5022 	ldrb.w	r5, [r4, #34]	; 0x22
 8001216:	5c1a      	ldrb	r2, [r3, r0]
 8001218:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
 800121c:	404a      	eors	r2, r1
 800121e:	5c99      	ldrb	r1, [r3, r2]
 8001220:	4069      	eors	r1, r5
 8001222:	f894 5024 	ldrb.w	r5, [r4, #36]	; 0x24
 8001226:	5c5a      	ldrb	r2, [r3, r1]
	CDC_Transmit_FS((uint8_t*)&m_data_packet, sizeof(m_data_packet));
 8001228:	2125      	movs	r1, #37	; 0x25
        crc8 = crc_table[crc8 ^ data[i]];
 800122a:	4042      	eors	r2, r0
 800122c:	5c98      	ldrb	r0, [r3, r2]
 800122e:	4068      	eors	r0, r5
 8001230:	f894 5025 	ldrb.w	r5, [r4, #37]	; 0x25
 8001234:	5c1a      	ldrb	r2, [r3, r0]
 8001236:	406a      	eors	r2, r5
 8001238:	5c98      	ldrb	r0, [r3, r2]
 800123a:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 800123e:	f894 5027 	ldrb.w	r5, [r4, #39]	; 0x27
 8001242:	4050      	eors	r0, r2
 8001244:	5c1a      	ldrb	r2, [r3, r0]
	CDC_Transmit_FS((uint8_t*)&m_data_packet, sizeof(m_data_packet));
 8001246:	f104 0018 	add.w	r0, r4, #24
        crc8 = crc_table[crc8 ^ data[i]];
 800124a:	406a      	eors	r2, r5
	m_data_packet.crc = crc_val;
 800124c:	5c9b      	ldrb	r3, [r3, r2]
 800124e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	CDC_Transmit_FS((uint8_t*)&m_data_packet, sizeof(m_data_packet));
 8001252:	f00f f935 	bl	80104c0 <CDC_Transmit_FS>
      mag_timer = HAL_GetTick();
 8001256:	f000 fe41 	bl	8001edc <HAL_GetTick>
 800125a:	6120      	str	r0, [r4, #16]
}
 800125c:	b005      	add	sp, #20
 800125e:	bd30      	pop	{r4, r5, pc}
 8001260:	0c247f7f 	.word	0x0c247f7f
 8001264:	08013748 	.word	0x08013748

08001268 <_ZN10Serializer8SendDataERK8acc_data>:

void Serializer::SendData(const acc_data& data)
{
 8001268:	b530      	push	{r4, r5, lr}
 800126a:	4604      	mov	r4, r0
 800126c:	b085      	sub	sp, #20
 800126e:	460d      	mov	r5, r1
  if((HAL_GetTick() - acc_timer) >= ACC_UPDATE_RATE_MS)
 8001270:	f000 fe34 	bl	8001edc <HAL_GetTick>
 8001274:	6863      	ldr	r3, [r4, #4]
 8001276:	4298      	cmp	r0, r3
 8001278:	d043      	beq.n	8001302 <_ZN10Serializer8SendDataERK8acc_data+0x9a>
  {
	  uint8_t frame[sizeof(data)];
	  std::memcpy(frame, (uint8_t*)&data, sizeof(data));
 800127a:	6828      	ldr	r0, [r5, #0]
 800127c:	ab01      	add	r3, sp, #4
 800127e:	6869      	ldr	r1, [r5, #4]
 8001280:	68aa      	ldr	r2, [r5, #8]
	std::memcpy(m_data_packet.data, &data[0], len);
 8001282:	ad01      	add	r5, sp, #4
	  std::memcpy(frame, (uint8_t*)&data, sizeof(data));
 8001284:	c307      	stmia	r3!, {r0, r1, r2}
	m_data_packet.preamble[0] = UART_PREAMBLE_1;
 8001286:	4a20      	ldr	r2, [pc, #128]	; (8001308 <_ZN10Serializer8SendDataERK8acc_data+0xa0>)
        crc8 = crc_table[crc8 ^ data[i]];
 8001288:	4b20      	ldr	r3, [pc, #128]	; (800130c <_ZN10Serializer8SendDataERK8acc_data+0xa4>)
	m_data_packet.preamble[0] = UART_PREAMBLE_1;
 800128a:	61a2      	str	r2, [r4, #24]
	std::memcpy(m_data_packet.data, &data[0], len);
 800128c:	cd07      	ldmia	r5!, {r0, r1, r2}
 800128e:	61e0      	str	r0, [r4, #28]
        crc8 = crc_table[crc8 ^ data[i]];
 8001290:	7f20      	ldrb	r0, [r4, #28]
	std::memcpy(m_data_packet.data, &data[0], len);
 8001292:	6221      	str	r1, [r4, #32]
        crc8 = crc_table[crc8 ^ data[i]];
 8001294:	f080 005f 	eor.w	r0, r0, #95	; 0x5f
	std::memcpy(m_data_packet.data, &data[0], len);
 8001298:	6262      	str	r2, [r4, #36]	; 0x24
        crc8 = crc_table[crc8 ^ data[i]];
 800129a:	7f61      	ldrb	r1, [r4, #29]
 800129c:	5c1a      	ldrb	r2, [r3, r0]
 800129e:	7fa5      	ldrb	r5, [r4, #30]
 80012a0:	404a      	eors	r2, r1
 80012a2:	7fe0      	ldrb	r0, [r4, #31]
 80012a4:	5c99      	ldrb	r1, [r3, r2]
 80012a6:	4069      	eors	r1, r5
 80012a8:	f894 5020 	ldrb.w	r5, [r4, #32]
 80012ac:	5c5a      	ldrb	r2, [r3, r1]
 80012ae:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
 80012b2:	4042      	eors	r2, r0
 80012b4:	5c98      	ldrb	r0, [r3, r2]
 80012b6:	4068      	eors	r0, r5
 80012b8:	f894 5022 	ldrb.w	r5, [r4, #34]	; 0x22
 80012bc:	5c1a      	ldrb	r2, [r3, r0]
 80012be:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
 80012c2:	404a      	eors	r2, r1
 80012c4:	5c99      	ldrb	r1, [r3, r2]
 80012c6:	4069      	eors	r1, r5
 80012c8:	f894 5024 	ldrb.w	r5, [r4, #36]	; 0x24
 80012cc:	5c5a      	ldrb	r2, [r3, r1]
	CDC_Transmit_FS((uint8_t*)&m_data_packet, sizeof(m_data_packet));
 80012ce:	2125      	movs	r1, #37	; 0x25
        crc8 = crc_table[crc8 ^ data[i]];
 80012d0:	4042      	eors	r2, r0
 80012d2:	5c98      	ldrb	r0, [r3, r2]
 80012d4:	4068      	eors	r0, r5
 80012d6:	f894 5025 	ldrb.w	r5, [r4, #37]	; 0x25
 80012da:	5c1a      	ldrb	r2, [r3, r0]
 80012dc:	406a      	eors	r2, r5
 80012de:	5c98      	ldrb	r0, [r3, r2]
 80012e0:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 80012e4:	f894 5027 	ldrb.w	r5, [r4, #39]	; 0x27
 80012e8:	4050      	eors	r0, r2
 80012ea:	5c1a      	ldrb	r2, [r3, r0]
	CDC_Transmit_FS((uint8_t*)&m_data_packet, sizeof(m_data_packet));
 80012ec:	f104 0018 	add.w	r0, r4, #24
        crc8 = crc_table[crc8 ^ data[i]];
 80012f0:	406a      	eors	r2, r5
	m_data_packet.crc = crc_val;
 80012f2:	5c9b      	ldrb	r3, [r3, r2]
 80012f4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	CDC_Transmit_FS((uint8_t*)&m_data_packet, sizeof(m_data_packet));
 80012f8:	f00f f8e2 	bl	80104c0 <CDC_Transmit_FS>
	  SendDataPacket(sensor_cmd_code_t::SENSOR_COMMAND_ACC, frame, sizeof(frame)/sizeof(frame[0]));
	  acc_timer = HAL_GetTick();
 80012fc:	f000 fdee 	bl	8001edc <HAL_GetTick>
 8001300:	6060      	str	r0, [r4, #4]
  }
}
 8001302:	b005      	add	sp, #20
 8001304:	bd30      	pop	{r4, r5, pc}
 8001306:	bf00      	nop
 8001308:	0c217f7f 	.word	0x0c217f7f
 800130c:	08013748 	.word	0x08013748

08001310 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001316:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <HAL_MspInit+0x30>)
 8001318:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800131c:	4a08      	ldr	r2, [pc, #32]	; (8001340 <HAL_MspInit+0x30>)
 800131e:	f043 0302 	orr.w	r3, r3, #2
 8001322:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001326:	4b06      	ldr	r3, [pc, #24]	; (8001340 <HAL_MspInit+0x30>)
 8001328:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800132c:	f003 0302 	and.w	r3, r3, #2
 8001330:	607b      	str	r3, [r7, #4]
 8001332:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001334:	bf00      	nop
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	58024400 	.word	0x58024400

08001344 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001348:	e7fe      	b.n	8001348 <NMI_Handler+0x4>

0800134a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800134a:	b480      	push	{r7}
 800134c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800134e:	e7fe      	b.n	800134e <HardFault_Handler+0x4>

08001350 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001354:	e7fe      	b.n	8001354 <MemManage_Handler+0x4>

08001356 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001356:	b480      	push	{r7}
 8001358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800135a:	e7fe      	b.n	800135a <BusFault_Handler+0x4>

0800135c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001360:	e7fe      	b.n	8001360 <UsageFault_Handler+0x4>

08001362 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001362:	b480      	push	{r7}
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001366:	bf00      	nop
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001374:	bf00      	nop
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr

0800137e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800137e:	b480      	push	{r7}
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001390:	f000 fd90 	bl	8001eb4 <HAL_IncTick>

  HAL_SYSTICK_IRQHandler();
 8001394:	f000 ff6a 	bl	800226c <HAL_SYSTICK_IRQHandler>

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001398:	bf00      	nop
 800139a:	bd80      	pop	{r7, pc}

0800139c <DMA2_Stream7_IRQHandler>:
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32h7xx.s).                    */
/******************************************************************************/

void DMA2_Stream7_IRQHandler(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80013a0:	4802      	ldr	r0, [pc, #8]	; (80013ac <DMA2_Stream7_IRQHandler+0x10>)
 80013a2:	f002 fa9b 	bl	80038dc <HAL_DMA_IRQHandler>
}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	240006d8 	.word	0x240006d8

080013b0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 80013b4:	4802      	ldr	r0, [pc, #8]	; (80013c0 <DMA1_Stream5_IRQHandler+0x10>)
 80013b6:	f002 fa91 	bl	80038dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	240005e8 	.word	0x240005e8

080013c4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_tx);
 80013c8:	4802      	ldr	r0, [pc, #8]	; (80013d4 <DMA1_Stream6_IRQHandler+0x10>)
 80013ca:	f002 fa87 	bl	80038dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	24000660 	.word	0x24000660

080013d8 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80013dc:	4802      	ldr	r0, [pc, #8]	; (80013e8 <TIM1_BRK_IRQHandler+0x10>)
 80013de:	f009 f809 	bl	800a3f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	2400047c 	.word	0x2400047c

080013ec <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80013f0:	4802      	ldr	r0, [pc, #8]	; (80013fc <TIM1_UP_IRQHandler+0x10>)
 80013f2:	f008 ffff 	bl	800a3f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80013f6:	bf00      	nop
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	2400047c 	.word	0x2400047c

08001400 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001404:	4802      	ldr	r0, [pc, #8]	; (8001410 <TIM1_TRG_COM_IRQHandler+0x10>)
 8001406:	f008 fff5 	bl	800a3f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800140a:	bf00      	nop
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	2400047c 	.word	0x2400047c

08001414 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001418:	4802      	ldr	r0, [pc, #8]	; (8001424 <TIM1_CC_IRQHandler+0x10>)
 800141a:	f008 ffeb 	bl	800a3f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	2400047c 	.word	0x2400047c

08001428 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800142c:	4802      	ldr	r0, [pc, #8]	; (8001438 <I2C2_EV_IRQHandler+0x10>)
 800142e:	f004 f809 	bl	8005444 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	24000370 	.word	0x24000370

0800143c <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001440:	4802      	ldr	r0, [pc, #8]	; (800144c <I2C2_ER_IRQHandler+0x10>)
 8001442:	f004 f819 	bl	8005478 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	24000370 	.word	0x24000370

08001450 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001454:	4802      	ldr	r0, [pc, #8]	; (8001460 <SDMMC1_IRQHandler+0x10>)
 8001456:	f008 fc9b 	bl	8009d90 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	240003e0 	.word	0x240003e0

08001464 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
  if(__HAL_UART_GET_IT_SOURCE(&huart4, UART_IT_IDLE))
 8001468:	4b0c      	ldr	r3, [pc, #48]	; (800149c <UART4_IRQHandler+0x38>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0310 	and.w	r3, r3, #16
 8001472:	2b00      	cmp	r3, #0
 8001474:	d00c      	beq.n	8001490 <UART4_IRQHandler+0x2c>
  {
     HAL_UART_Receive_DMA(&huart4, sbus_buffer, SBUS_PACKET_LEN);
 8001476:	2219      	movs	r2, #25
 8001478:	4909      	ldr	r1, [pc, #36]	; (80014a0 <UART4_IRQHandler+0x3c>)
 800147a:	4808      	ldr	r0, [pc, #32]	; (800149c <UART4_IRQHandler+0x38>)
 800147c:	f00a f88a 	bl	800b594 <HAL_UART_Receive_DMA>
    __HAL_UART_DISABLE_IT(&huart4, UART_IT_IDLE);
 8001480:	4b06      	ldr	r3, [pc, #24]	; (800149c <UART4_IRQHandler+0x38>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	4b05      	ldr	r3, [pc, #20]	; (800149c <UART4_IRQHandler+0x38>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f022 0210 	bic.w	r2, r2, #16
 800148e:	601a      	str	r2, [r3, #0]
  }
  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001490:	4802      	ldr	r0, [pc, #8]	; (800149c <UART4_IRQHandler+0x38>)
 8001492:	f00a f935 	bl	800b700 <HAL_UART_IRQHandler>

  /* USER CODE END UART4_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	240004c8 	.word	0x240004c8
 80014a0:	2400045c 	.word	0x2400045c

080014a4 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 80014a8:	4802      	ldr	r0, [pc, #8]	; (80014b4 <UART7_IRQHandler+0x10>)
 80014aa:	f00a f929 	bl	800b700 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	24000558 	.word	0x24000558

080014b8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80014bc:	4802      	ldr	r0, [pc, #8]	; (80014c8 <OTG_FS_IRQHandler+0x10>)
 80014be:	f005 f834 	bl	800652a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	24001c38 	.word	0x24001c38

080014cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
	return 1;
 80014d0:	2301      	movs	r3, #1
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <_kill>:

int _kill(int pid, int sig)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80014e6:	f00f fc4f 	bl	8010d88 <__errno>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2216      	movs	r2, #22
 80014ee:	601a      	str	r2, [r3, #0]
	return -1;
 80014f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}

080014fc <_exit>:

void _exit (int status)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001504:	f04f 31ff 	mov.w	r1, #4294967295
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f7ff ffe7 	bl	80014dc <_kill>
	while (1) {}		/* Make sure we hang here */
 800150e:	e7fe      	b.n	800150e <_exit+0x12>

08001510 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800151c:	2300      	movs	r3, #0
 800151e:	617b      	str	r3, [r7, #20]
 8001520:	e00a      	b.n	8001538 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001522:	f3af 8000 	nop.w
 8001526:	4601      	mov	r1, r0
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	1c5a      	adds	r2, r3, #1
 800152c:	60ba      	str	r2, [r7, #8]
 800152e:	b2ca      	uxtb	r2, r1
 8001530:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	3301      	adds	r3, #1
 8001536:	617b      	str	r3, [r7, #20]
 8001538:	697a      	ldr	r2, [r7, #20]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	429a      	cmp	r2, r3
 800153e:	dbf0      	blt.n	8001522 <_read+0x12>
	}

return len;
 8001540:	687b      	ldr	r3, [r7, #4]
}
 8001542:	4618      	mov	r0, r3
 8001544:	3718      	adds	r7, #24
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	b086      	sub	sp, #24
 800154e:	af00      	add	r7, sp, #0
 8001550:	60f8      	str	r0, [r7, #12]
 8001552:	60b9      	str	r1, [r7, #8]
 8001554:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001556:	2300      	movs	r3, #0
 8001558:	617b      	str	r3, [r7, #20]
 800155a:	e009      	b.n	8001570 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	1c5a      	adds	r2, r3, #1
 8001560:	60ba      	str	r2, [r7, #8]
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	4618      	mov	r0, r3
 8001566:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	3301      	adds	r3, #1
 800156e:	617b      	str	r3, [r7, #20]
 8001570:	697a      	ldr	r2, [r7, #20]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	429a      	cmp	r2, r3
 8001576:	dbf1      	blt.n	800155c <_write+0x12>
	}
	return len;
 8001578:	687b      	ldr	r3, [r7, #4]
}
 800157a:	4618      	mov	r0, r3
 800157c:	3718      	adds	r7, #24
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <_close>:

int _close(int file)
{
 8001582:	b480      	push	{r7}
 8001584:	b083      	sub	sp, #12
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
	return -1;
 800158a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800158e:	4618      	mov	r0, r3
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr

0800159a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800159a:	b480      	push	{r7}
 800159c:	b083      	sub	sp, #12
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
 80015a2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015aa:	605a      	str	r2, [r3, #4]
	return 0;
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr

080015ba <_isatty>:

int _isatty(int file)
{
 80015ba:	b480      	push	{r7}
 80015bc:	b083      	sub	sp, #12
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
	return 1;
 80015c2:	2301      	movs	r3, #1
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]
	return 0;
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3714      	adds	r7, #20
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
	...

080015ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015f4:	4a14      	ldr	r2, [pc, #80]	; (8001648 <_sbrk+0x5c>)
 80015f6:	4b15      	ldr	r3, [pc, #84]	; (800164c <_sbrk+0x60>)
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001600:	4b13      	ldr	r3, [pc, #76]	; (8001650 <_sbrk+0x64>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d102      	bne.n	800160e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001608:	4b11      	ldr	r3, [pc, #68]	; (8001650 <_sbrk+0x64>)
 800160a:	4a12      	ldr	r2, [pc, #72]	; (8001654 <_sbrk+0x68>)
 800160c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800160e:	4b10      	ldr	r3, [pc, #64]	; (8001650 <_sbrk+0x64>)
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4413      	add	r3, r2
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	429a      	cmp	r2, r3
 800161a:	d207      	bcs.n	800162c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800161c:	f00f fbb4 	bl	8010d88 <__errno>
 8001620:	4603      	mov	r3, r0
 8001622:	220c      	movs	r2, #12
 8001624:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001626:	f04f 33ff 	mov.w	r3, #4294967295
 800162a:	e009      	b.n	8001640 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800162c:	4b08      	ldr	r3, [pc, #32]	; (8001650 <_sbrk+0x64>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001632:	4b07      	ldr	r3, [pc, #28]	; (8001650 <_sbrk+0x64>)
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4413      	add	r3, r2
 800163a:	4a05      	ldr	r2, [pc, #20]	; (8001650 <_sbrk+0x64>)
 800163c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800163e:	68fb      	ldr	r3, [r7, #12]
}
 8001640:	4618      	mov	r0, r3
 8001642:	3718      	adds	r7, #24
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	24080000 	.word	0x24080000
 800164c:	00000400 	.word	0x00000400
 8001650:	24000478 	.word	0x24000478
 8001654:	24002050 	.word	0x24002050

08001658 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b0a4      	sub	sp, #144	; 0x90
 800165c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800165e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	605a      	str	r2, [r3, #4]
 8001668:	609a      	str	r2, [r3, #8]
 800166a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800166c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001678:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	611a      	str	r2, [r3, #16]
 8001688:	615a      	str	r2, [r3, #20]
 800168a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800168c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001690:	222c      	movs	r2, #44	; 0x2c
 8001692:	2100      	movs	r1, #0
 8001694:	4618      	mov	r0, r3
 8001696:	f00f fbbf 	bl	8010e18 <memset>
  RCC_ClkInitTypeDef clk_init_struct = {0};
 800169a:	1d3b      	adds	r3, r7, #4
 800169c:	2220      	movs	r2, #32
 800169e:	2100      	movs	r1, #0
 80016a0:	4618      	mov	r0, r3
 80016a2:	f00f fbb9 	bl	8010e18 <memset>


  /* USER CODE BEGIN TIM1_Init 1 */

  uint32_t latency = 0;
 80016a6:	2300      	movs	r3, #0
 80016a8:	603b      	str	r3, [r7, #0]
  uint32_t timer_clock_frequency = 0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t timer_prescaler = 0;
 80016b0:	2300      	movs	r3, #0
 80016b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  /* USER CODE END TIM1_Init 1 */

  HAL_RCC_GetClockConfig(&clk_init_struct, &latency);
 80016b6:	463a      	mov	r2, r7
 80016b8:	1d3b      	adds	r3, r7, #4
 80016ba:	4611      	mov	r1, r2
 80016bc:	4618      	mov	r0, r3
 80016be:	f006 ffbd 	bl	800863c <HAL_RCC_GetClockConfig>

  if(clk_init_struct.APB1CLKDivider == RCC_HCLK_DIV1)
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d104      	bne.n	80016d2 <MX_TIM1_Init+0x7a>
  {
    timer_clock_frequency = HAL_RCC_GetPCLK1Freq();
 80016c8:	f006 ff8c 	bl	80085e4 <HAL_RCC_GetPCLK1Freq>
 80016cc:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 80016d0:	e005      	b.n	80016de <MX_TIM1_Init+0x86>
  }

  else
  {
    timer_clock_frequency = HAL_RCC_GetPCLK1Freq() * 2;
 80016d2:	f006 ff87 	bl	80085e4 <HAL_RCC_GetPCLK1Freq>
 80016d6:	4603      	mov	r3, r0
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  }

  timer_prescaler = (timer_clock_frequency / (TIMER_PRESCALER_MAX_VALUE * TIMER_FREQUENCY_RANGE_MIN)) +1;
 80016de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80016e2:	4a5f      	ldr	r2, [pc, #380]	; (8001860 <MX_TIM1_Init+0x208>)
 80016e4:	fba2 2303 	umull	r2, r3, r2, r3
 80016e8:	0c9b      	lsrs	r3, r3, #18
 80016ea:	3301      	adds	r3, #1
 80016ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  htim1.Instance = TIM1;
 80016f0:	4b5c      	ldr	r3, [pc, #368]	; (8001864 <MX_TIM1_Init+0x20c>)
 80016f2:	4a5d      	ldr	r2, [pc, #372]	; (8001868 <MX_TIM1_Init+0x210>)
 80016f4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = (timer_prescaler - 1);
 80016f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80016fa:	3b01      	subs	r3, #1
 80016fc:	4a59      	ldr	r2, [pc, #356]	; (8001864 <MX_TIM1_Init+0x20c>)
 80016fe:	6053      	str	r3, [r2, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001700:	4b58      	ldr	r3, [pc, #352]	; (8001864 <MX_TIM1_Init+0x20c>)
 8001702:	2200      	movs	r2, #0
 8001704:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = ((timer_clock_frequency / (timer_prescaler * TIMER_FREQUENCY)) - 1);
 8001706:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800170a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800170e:	fb02 f303 	mul.w	r3, r2, r3
 8001712:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001716:	fbb2 f3f3 	udiv	r3, r2, r3
 800171a:	3b01      	subs	r3, #1
 800171c:	4a51      	ldr	r2, [pc, #324]	; (8001864 <MX_TIM1_Init+0x20c>)
 800171e:	60d3      	str	r3, [r2, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001720:	4b50      	ldr	r3, [pc, #320]	; (8001864 <MX_TIM1_Init+0x20c>)
 8001722:	2200      	movs	r2, #0
 8001724:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001726:	4b4f      	ldr	r3, [pc, #316]	; (8001864 <MX_TIM1_Init+0x20c>)
 8001728:	2200      	movs	r2, #0
 800172a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800172c:	4b4d      	ldr	r3, [pc, #308]	; (8001864 <MX_TIM1_Init+0x20c>)
 800172e:	2200      	movs	r2, #0
 8001730:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001732:	484c      	ldr	r0, [pc, #304]	; (8001864 <MX_TIM1_Init+0x20c>)
 8001734:	f008 fda6 	bl	800a284 <HAL_TIM_Base_Init>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_TIM1_Init+0xea>
  {
    Error_Handler();
 800173e:	f7ff fb61 	bl	8000e04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001742:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001746:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001748:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800174c:	4619      	mov	r1, r3
 800174e:	4845      	ldr	r0, [pc, #276]	; (8001864 <MX_TIM1_Init+0x20c>)
 8001750:	f009 f880 	bl	800a854 <HAL_TIM_ConfigClockSource>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 800175a:	f7ff fb53 	bl	8000e04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800175e:	4841      	ldr	r0, [pc, #260]	; (8001864 <MX_TIM1_Init+0x20c>)
 8001760:	f008 fde7 	bl	800a332 <HAL_TIM_PWM_Init>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800176a:	f7ff fb4b 	bl	8000e04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800176e:	2300      	movs	r3, #0
 8001770:	66fb      	str	r3, [r7, #108]	; 0x6c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001772:	2300      	movs	r3, #0
 8001774:	673b      	str	r3, [r7, #112]	; 0x70
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001776:	2300      	movs	r3, #0
 8001778:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800177a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800177e:	4619      	mov	r1, r3
 8001780:	4838      	ldr	r0, [pc, #224]	; (8001864 <MX_TIM1_Init+0x20c>)
 8001782:	f009 fd93 	bl	800b2ac <HAL_TIMEx_MasterConfigSynchronization>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 800178c:	f7ff fb3a 	bl	8000e04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001790:	2360      	movs	r3, #96	; 0x60
 8001792:	653b      	str	r3, [r7, #80]	; 0x50
  sConfigOC.Pulse = 50;
 8001794:	2332      	movs	r3, #50	; 0x32
 8001796:	657b      	str	r3, [r7, #84]	; 0x54
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001798:	2300      	movs	r3, #0
 800179a:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800179c:	2300      	movs	r3, #0
 800179e:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017a0:	2300      	movs	r3, #0
 80017a2:	663b      	str	r3, [r7, #96]	; 0x60
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017a4:	2300      	movs	r3, #0
 80017a6:	667b      	str	r3, [r7, #100]	; 0x64
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017a8:	2300      	movs	r3, #0
 80017aa:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017ac:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80017b0:	2200      	movs	r2, #0
 80017b2:	4619      	mov	r1, r3
 80017b4:	482b      	ldr	r0, [pc, #172]	; (8001864 <MX_TIM1_Init+0x20c>)
 80017b6:	f008 ff3d 	bl	800a634 <HAL_TIM_PWM_ConfigChannel>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_TIM1_Init+0x16c>
  {
    Error_Handler();
 80017c0:	f7ff fb20 	bl	8000e04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017c4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80017c8:	2204      	movs	r2, #4
 80017ca:	4619      	mov	r1, r3
 80017cc:	4825      	ldr	r0, [pc, #148]	; (8001864 <MX_TIM1_Init+0x20c>)
 80017ce:	f008 ff31 	bl	800a634 <HAL_TIM_PWM_ConfigChannel>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_TIM1_Init+0x184>
  {
    Error_Handler();
 80017d8:	f7ff fb14 	bl	8000e04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80017dc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80017e0:	2208      	movs	r2, #8
 80017e2:	4619      	mov	r1, r3
 80017e4:	481f      	ldr	r0, [pc, #124]	; (8001864 <MX_TIM1_Init+0x20c>)
 80017e6:	f008 ff25 	bl	800a634 <HAL_TIM_PWM_ConfigChannel>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_TIM1_Init+0x19c>
  {
    Error_Handler();
 80017f0:	f7ff fb08 	bl	8000e04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80017f4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80017f8:	220c      	movs	r2, #12
 80017fa:	4619      	mov	r1, r3
 80017fc:	4819      	ldr	r0, [pc, #100]	; (8001864 <MX_TIM1_Init+0x20c>)
 80017fe:	f008 ff19 	bl	800a634 <HAL_TIM_PWM_ConfigChannel>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <MX_TIM1_Init+0x1b4>
  {
    Error_Handler();
 8001808:	f7ff fafc 	bl	8000e04 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800180c:	2300      	movs	r3, #0
 800180e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001810:	2300      	movs	r3, #0
 8001812:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001814:	2300      	movs	r3, #0
 8001816:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.DeadTime = 0;
 8001818:	2300      	movs	r3, #0
 800181a:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800181c:	2300      	movs	r3, #0
 800181e:	637b      	str	r3, [r7, #52]	; 0x34
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001820:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001824:	63bb      	str	r3, [r7, #56]	; 0x38
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001826:	2300      	movs	r3, #0
 8001828:	63fb      	str	r3, [r7, #60]	; 0x3c
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800182a:	2300      	movs	r3, #0
 800182c:	643b      	str	r3, [r7, #64]	; 0x40
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800182e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001832:	647b      	str	r3, [r7, #68]	; 0x44
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001834:	2300      	movs	r3, #0
 8001836:	64bb      	str	r3, [r7, #72]	; 0x48
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001838:	2300      	movs	r3, #0
 800183a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800183c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001840:	4619      	mov	r1, r3
 8001842:	4808      	ldr	r0, [pc, #32]	; (8001864 <MX_TIM1_Init+0x20c>)
 8001844:	f009 fdba 	bl	800b3bc <HAL_TIMEx_ConfigBreakDeadTime>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_TIM1_Init+0x1fa>
  {
    Error_Handler();
 800184e:	f7ff fad9 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001852:	4804      	ldr	r0, [pc, #16]	; (8001864 <MX_TIM1_Init+0x20c>)
 8001854:	f000 f84a 	bl	80018ec <HAL_TIM_MspPostInit>

}
 8001858:	bf00      	nop
 800185a:	3790      	adds	r7, #144	; 0x90
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	66673335 	.word	0x66673335
 8001864:	2400047c 	.word	0x2400047c
 8001868:	40010000 	.word	0x40010000

0800186c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a1a      	ldr	r2, [pc, #104]	; (80018e4 <HAL_TIM_Base_MspInit+0x78>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d12e      	bne.n	80018dc <HAL_TIM_Base_MspInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800187e:	4b1a      	ldr	r3, [pc, #104]	; (80018e8 <HAL_TIM_Base_MspInit+0x7c>)
 8001880:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001884:	4a18      	ldr	r2, [pc, #96]	; (80018e8 <HAL_TIM_Base_MspInit+0x7c>)
 8001886:	f043 0301 	orr.w	r3, r3, #1
 800188a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800188e:	4b16      	ldr	r3, [pc, #88]	; (80018e8 <HAL_TIM_Base_MspInit+0x7c>)
 8001890:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001894:	f003 0301 	and.w	r3, r3, #1
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 800189c:	2200      	movs	r2, #0
 800189e:	2100      	movs	r1, #0
 80018a0:	2018      	movs	r0, #24
 80018a2:	f000 fc32 	bl	800210a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80018a6:	2018      	movs	r0, #24
 80018a8:	f000 fc49 	bl	800213e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80018ac:	2200      	movs	r2, #0
 80018ae:	2100      	movs	r1, #0
 80018b0:	2019      	movs	r0, #25
 80018b2:	f000 fc2a 	bl	800210a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80018b6:	2019      	movs	r0, #25
 80018b8:	f000 fc41 	bl	800213e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 80018bc:	2200      	movs	r2, #0
 80018be:	2100      	movs	r1, #0
 80018c0:	201a      	movs	r0, #26
 80018c2:	f000 fc22 	bl	800210a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80018c6:	201a      	movs	r0, #26
 80018c8:	f000 fc39 	bl	800213e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80018cc:	2200      	movs	r2, #0
 80018ce:	2100      	movs	r1, #0
 80018d0:	201b      	movs	r0, #27
 80018d2:	f000 fc1a 	bl	800210a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80018d6:	201b      	movs	r0, #27
 80018d8:	f000 fc31 	bl	800213e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80018dc:	bf00      	nop
 80018de:	3710      	adds	r7, #16
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	40010000 	.word	0x40010000
 80018e8:	58024400 	.word	0x58024400

080018ec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b08a      	sub	sp, #40	; 0x28
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f4:	f107 0314 	add.w	r3, r7, #20
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]
 8001902:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a23      	ldr	r2, [pc, #140]	; (8001998 <HAL_TIM_MspPostInit+0xac>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d13f      	bne.n	800198e <HAL_TIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800190e:	4b23      	ldr	r3, [pc, #140]	; (800199c <HAL_TIM_MspPostInit+0xb0>)
 8001910:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001914:	4a21      	ldr	r2, [pc, #132]	; (800199c <HAL_TIM_MspPostInit+0xb0>)
 8001916:	f043 0310 	orr.w	r3, r3, #16
 800191a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800191e:	4b1f      	ldr	r3, [pc, #124]	; (800199c <HAL_TIM_MspPostInit+0xb0>)
 8001920:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001924:	f003 0310 	and.w	r3, r3, #16
 8001928:	613b      	str	r3, [r7, #16]
 800192a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800192c:	4b1b      	ldr	r3, [pc, #108]	; (800199c <HAL_TIM_MspPostInit+0xb0>)
 800192e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001932:	4a1a      	ldr	r2, [pc, #104]	; (800199c <HAL_TIM_MspPostInit+0xb0>)
 8001934:	f043 0301 	orr.w	r3, r3, #1
 8001938:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800193c:	4b17      	ldr	r3, [pc, #92]	; (800199c <HAL_TIM_MspPostInit+0xb0>)
 800193e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	68fb      	ldr	r3, [r7, #12]
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 800194a:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800194e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001950:	2302      	movs	r3, #2
 8001952:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001954:	2300      	movs	r3, #0
 8001956:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001958:	2300      	movs	r3, #0
 800195a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800195c:	2301      	movs	r3, #1
 800195e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001960:	f107 0314 	add.w	r3, r7, #20
 8001964:	4619      	mov	r1, r3
 8001966:	480e      	ldr	r0, [pc, #56]	; (80019a0 <HAL_TIM_MspPostInit+0xb4>)
 8001968:	f003 fae4 	bl	8004f34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800196c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001970:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001972:	2302      	movs	r3, #2
 8001974:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001976:	2300      	movs	r3, #0
 8001978:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197a:	2300      	movs	r3, #0
 800197c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800197e:	2301      	movs	r3, #1
 8001980:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001982:	f107 0314 	add.w	r3, r7, #20
 8001986:	4619      	mov	r1, r3
 8001988:	4806      	ldr	r0, [pc, #24]	; (80019a4 <HAL_TIM_MspPostInit+0xb8>)
 800198a:	f003 fad3 	bl	8004f34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800198e:	bf00      	nop
 8001990:	3728      	adds	r7, #40	; 0x28
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40010000 	.word	0x40010000
 800199c:	58024400 	.word	0x58024400
 80019a0:	58021000 	.word	0x58021000
 80019a4:	58020000 	.word	0x58020000

080019a8 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart7_rx;
DMA_HandleTypeDef hdma_uart7_tx;
DMA_HandleTypeDef hdma_uart4_rx;
/* UART4 init function */
void MX_UART4_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80019ac:	4b1f      	ldr	r3, [pc, #124]	; (8001a2c <MX_UART4_Init+0x84>)
 80019ae:	4a20      	ldr	r2, [pc, #128]	; (8001a30 <MX_UART4_Init+0x88>)
 80019b0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 100000;
 80019b2:	4b1e      	ldr	r3, [pc, #120]	; (8001a2c <MX_UART4_Init+0x84>)
 80019b4:	4a1f      	ldr	r2, [pc, #124]	; (8001a34 <MX_UART4_Init+0x8c>)
 80019b6:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_9B;
 80019b8:	4b1c      	ldr	r3, [pc, #112]	; (8001a2c <MX_UART4_Init+0x84>)
 80019ba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019be:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_2;
 80019c0:	4b1a      	ldr	r3, [pc, #104]	; (8001a2c <MX_UART4_Init+0x84>)
 80019c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019c6:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 80019c8:	4b18      	ldr	r3, [pc, #96]	; (8001a2c <MX_UART4_Init+0x84>)
 80019ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019ce:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_RX;
 80019d0:	4b16      	ldr	r3, [pc, #88]	; (8001a2c <MX_UART4_Init+0x84>)
 80019d2:	2204      	movs	r2, #4
 80019d4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019d6:	4b15      	ldr	r3, [pc, #84]	; (8001a2c <MX_UART4_Init+0x84>)
 80019d8:	2200      	movs	r2, #0
 80019da:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80019dc:	4b13      	ldr	r3, [pc, #76]	; (8001a2c <MX_UART4_Init+0x84>)
 80019de:	2200      	movs	r2, #0
 80019e0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019e2:	4b12      	ldr	r3, [pc, #72]	; (8001a2c <MX_UART4_Init+0x84>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV4;
 80019e8:	4b10      	ldr	r3, [pc, #64]	; (8001a2c <MX_UART4_Init+0x84>)
 80019ea:	2202      	movs	r2, #2
 80019ec:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019ee:	4b0f      	ldr	r3, [pc, #60]	; (8001a2c <MX_UART4_Init+0x84>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80019f4:	480d      	ldr	r0, [pc, #52]	; (8001a2c <MX_UART4_Init+0x84>)
 80019f6:	f009 fd7d 	bl	800b4f4 <HAL_UART_Init>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_UART4_Init+0x5c>
  {
    Error_Handler();
 8001a00:	f7ff fa00 	bl	8000e04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a04:	2100      	movs	r1, #0
 8001a06:	4809      	ldr	r0, [pc, #36]	; (8001a2c <MX_UART4_Init+0x84>)
 8001a08:	f00b fa60 	bl	800cecc <HAL_UARTEx_SetRxFifoThreshold>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MX_UART4_Init+0x6e>
  {
    Error_Handler();
 8001a12:	f7ff f9f7 	bl	8000e04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001a16:	4805      	ldr	r0, [pc, #20]	; (8001a2c <MX_UART4_Init+0x84>)
 8001a18:	f00b f9e1 	bl	800cdde <HAL_UARTEx_DisableFifoMode>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <MX_UART4_Init+0x7e>
  {
    Error_Handler();
 8001a22:	f7ff f9ef 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001a26:	bf00      	nop
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	240004c8 	.word	0x240004c8
 8001a30:	40004c00 	.word	0x40004c00
 8001a34:	000186a0 	.word	0x000186a0

08001a38 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001a3c:	4b22      	ldr	r3, [pc, #136]	; (8001ac8 <MX_UART7_Init+0x90>)
 8001a3e:	4a23      	ldr	r2, [pc, #140]	; (8001acc <MX_UART7_Init+0x94>)
 8001a40:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 921600;
 8001a42:	4b21      	ldr	r3, [pc, #132]	; (8001ac8 <MX_UART7_Init+0x90>)
 8001a44:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8001a48:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001a4a:	4b1f      	ldr	r3, [pc, #124]	; (8001ac8 <MX_UART7_Init+0x90>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001a50:	4b1d      	ldr	r3, [pc, #116]	; (8001ac8 <MX_UART7_Init+0x90>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001a56:	4b1c      	ldr	r3, [pc, #112]	; (8001ac8 <MX_UART7_Init+0x90>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001a5c:	4b1a      	ldr	r3, [pc, #104]	; (8001ac8 <MX_UART7_Init+0x90>)
 8001a5e:	220c      	movs	r2, #12
 8001a60:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a62:	4b19      	ldr	r3, [pc, #100]	; (8001ac8 <MX_UART7_Init+0x90>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a68:	4b17      	ldr	r3, [pc, #92]	; (8001ac8 <MX_UART7_Init+0x90>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a6e:	4b16      	ldr	r3, [pc, #88]	; (8001ac8 <MX_UART7_Init+0x90>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a74:	4b14      	ldr	r3, [pc, #80]	; (8001ac8 <MX_UART7_Init+0x90>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a7a:	4b13      	ldr	r3, [pc, #76]	; (8001ac8 <MX_UART7_Init+0x90>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001a80:	4811      	ldr	r0, [pc, #68]	; (8001ac8 <MX_UART7_Init+0x90>)
 8001a82:	f009 fd37 	bl	800b4f4 <HAL_UART_Init>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8001a8c:	f7ff f9ba 	bl	8000e04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a90:	2100      	movs	r1, #0
 8001a92:	480d      	ldr	r0, [pc, #52]	; (8001ac8 <MX_UART7_Init+0x90>)
 8001a94:	f00b f9dc 	bl	800ce50 <HAL_UARTEx_SetTxFifoThreshold>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8001a9e:	f7ff f9b1 	bl	8000e04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	4808      	ldr	r0, [pc, #32]	; (8001ac8 <MX_UART7_Init+0x90>)
 8001aa6:	f00b fa11 	bl	800cecc <HAL_UARTEx_SetRxFifoThreshold>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8001ab0:	f7ff f9a8 	bl	8000e04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8001ab4:	4804      	ldr	r0, [pc, #16]	; (8001ac8 <MX_UART7_Init+0x90>)
 8001ab6:	f00b f992 	bl	800cdde <HAL_UARTEx_DisableFifoMode>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8001ac0:	f7ff f9a0 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001ac4:	bf00      	nop
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	24000558 	.word	0x24000558
 8001acc:	40007800 	.word	0x40007800

08001ad0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b0ba      	sub	sp, #232	; 0xe8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	60da      	str	r2, [r3, #12]
 8001ae6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ae8:	f107 0318 	add.w	r3, r7, #24
 8001aec:	22bc      	movs	r2, #188	; 0xbc
 8001aee:	2100      	movs	r1, #0
 8001af0:	4618      	mov	r0, r3
 8001af2:	f00f f991 	bl	8010e18 <memset>
  if(uartHandle->Instance==UART4)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a95      	ldr	r2, [pc, #596]	; (8001d50 <HAL_UART_MspInit+0x280>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d179      	bne.n	8001bf4 <HAL_UART_MspInit+0x124>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001b00:	2302      	movs	r3, #2
 8001b02:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001b04:	2300      	movs	r3, #0
 8001b06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b0a:	f107 0318 	add.w	r3, r7, #24
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f006 fdd6 	bl	80086c0 <HAL_RCCEx_PeriphCLKConfig>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001b1a:	f7ff f973 	bl	8000e04 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001b1e:	4b8d      	ldr	r3, [pc, #564]	; (8001d54 <HAL_UART_MspInit+0x284>)
 8001b20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b24:	4a8b      	ldr	r2, [pc, #556]	; (8001d54 <HAL_UART_MspInit+0x284>)
 8001b26:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001b2a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b2e:	4b89      	ldr	r3, [pc, #548]	; (8001d54 <HAL_UART_MspInit+0x284>)
 8001b30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b38:	617b      	str	r3, [r7, #20]
 8001b3a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b3c:	4b85      	ldr	r3, [pc, #532]	; (8001d54 <HAL_UART_MspInit+0x284>)
 8001b3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b42:	4a84      	ldr	r2, [pc, #528]	; (8001d54 <HAL_UART_MspInit+0x284>)
 8001b44:	f043 0301 	orr.w	r3, r3, #1
 8001b48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b4c:	4b81      	ldr	r3, [pc, #516]	; (8001d54 <HAL_UART_MspInit+0x284>)
 8001b4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	613b      	str	r3, [r7, #16]
 8001b58:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b60:	2302      	movs	r3, #2
 8001b62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b66:	2300      	movs	r3, #0
 8001b68:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001b72:	2308      	movs	r3, #8
 8001b74:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b78:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4876      	ldr	r0, [pc, #472]	; (8001d58 <HAL_UART_MspInit+0x288>)
 8001b80:	f003 f9d8 	bl	8004f34 <HAL_GPIO_Init>

    /*UART4 RX Init
     *
     */

    hdma_uart4_rx.Instance = DMA2_Stream7;
 8001b84:	4b75      	ldr	r3, [pc, #468]	; (8001d5c <HAL_UART_MspInit+0x28c>)
 8001b86:	4a76      	ldr	r2, [pc, #472]	; (8001d60 <HAL_UART_MspInit+0x290>)
 8001b88:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8001b8a:	4b74      	ldr	r3, [pc, #464]	; (8001d5c <HAL_UART_MspInit+0x28c>)
 8001b8c:	223f      	movs	r2, #63	; 0x3f
 8001b8e:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b90:	4b72      	ldr	r3, [pc, #456]	; (8001d5c <HAL_UART_MspInit+0x28c>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b96:	4b71      	ldr	r3, [pc, #452]	; (8001d5c <HAL_UART_MspInit+0x28c>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b9c:	4b6f      	ldr	r3, [pc, #444]	; (8001d5c <HAL_UART_MspInit+0x28c>)
 8001b9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ba2:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ba4:	4b6d      	ldr	r3, [pc, #436]	; (8001d5c <HAL_UART_MspInit+0x28c>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001baa:	4b6c      	ldr	r3, [pc, #432]	; (8001d5c <HAL_UART_MspInit+0x28c>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8001bb0:	4b6a      	ldr	r3, [pc, #424]	; (8001d5c <HAL_UART_MspInit+0x28c>)
 8001bb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bb6:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001bb8:	4b68      	ldr	r3, [pc, #416]	; (8001d5c <HAL_UART_MspInit+0x28c>)
 8001bba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001bbe:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bc0:	4b66      	ldr	r3, [pc, #408]	; (8001d5c <HAL_UART_MspInit+0x28c>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	625a      	str	r2, [r3, #36]	; 0x24

    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001bc6:	4865      	ldr	r0, [pc, #404]	; (8001d5c <HAL_UART_MspInit+0x28c>)
 8001bc8:	f000 fb5e 	bl	8002288 <HAL_DMA_Init>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <HAL_UART_MspInit+0x106>
    {
      Error_Handler();
 8001bd2:	f7ff f917 	bl	8000e04 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle, hdmarx, hdma_uart4_rx);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a60      	ldr	r2, [pc, #384]	; (8001d5c <HAL_UART_MspInit+0x28c>)
 8001bda:	67da      	str	r2, [r3, #124]	; 0x7c
 8001bdc:	4a5f      	ldr	r2, [pc, #380]	; (8001d5c <HAL_UART_MspInit+0x28c>)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6393      	str	r3, [r2, #56]	; 0x38
    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001be2:	2200      	movs	r2, #0
 8001be4:	2100      	movs	r1, #0
 8001be6:	2034      	movs	r0, #52	; 0x34
 8001be8:	f000 fa8f 	bl	800210a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001bec:	2034      	movs	r0, #52	; 0x34
 8001bee:	f000 faa6 	bl	800213e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
}
 8001bf2:	e0a9      	b.n	8001d48 <HAL_UART_MspInit+0x278>
  else if(uartHandle->Instance==UART7)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a5a      	ldr	r2, [pc, #360]	; (8001d64 <HAL_UART_MspInit+0x294>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	f040 80a4 	bne.w	8001d48 <HAL_UART_MspInit+0x278>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8001c00:	2302      	movs	r3, #2
 8001c02:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001c04:	2300      	movs	r3, #0
 8001c06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c0a:	f107 0318 	add.w	r3, r7, #24
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f006 fd56 	bl	80086c0 <HAL_RCCEx_PeriphCLKConfig>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <HAL_UART_MspInit+0x14e>
      Error_Handler();
 8001c1a:	f7ff f8f3 	bl	8000e04 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8001c1e:	4b4d      	ldr	r3, [pc, #308]	; (8001d54 <HAL_UART_MspInit+0x284>)
 8001c20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c24:	4a4b      	ldr	r2, [pc, #300]	; (8001d54 <HAL_UART_MspInit+0x284>)
 8001c26:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001c2a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001c2e:	4b49      	ldr	r3, [pc, #292]	; (8001d54 <HAL_UART_MspInit+0x284>)
 8001c30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c34:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001c38:	60fb      	str	r3, [r7, #12]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c3c:	4b45      	ldr	r3, [pc, #276]	; (8001d54 <HAL_UART_MspInit+0x284>)
 8001c3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c42:	4a44      	ldr	r2, [pc, #272]	; (8001d54 <HAL_UART_MspInit+0x284>)
 8001c44:	f043 0320 	orr.w	r3, r3, #32
 8001c48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c4c:	4b41      	ldr	r3, [pc, #260]	; (8001d54 <HAL_UART_MspInit+0x284>)
 8001c4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c52:	f003 0320 	and.w	r3, r3, #32
 8001c56:	60bb      	str	r3, [r7, #8]
 8001c58:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c5a:	23c0      	movs	r3, #192	; 0xc0
 8001c5c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c60:	2302      	movs	r3, #2
 8001c62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c66:	2300      	movs	r3, #0
 8001c68:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8001c72:	2307      	movs	r3, #7
 8001c74:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c78:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	483a      	ldr	r0, [pc, #232]	; (8001d68 <HAL_UART_MspInit+0x298>)
 8001c80:	f003 f958 	bl	8004f34 <HAL_GPIO_Init>
    hdma_uart7_rx.Instance = DMA1_Stream5;
 8001c84:	4b39      	ldr	r3, [pc, #228]	; (8001d6c <HAL_UART_MspInit+0x29c>)
 8001c86:	4a3a      	ldr	r2, [pc, #232]	; (8001d70 <HAL_UART_MspInit+0x2a0>)
 8001c88:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Request = DMA_REQUEST_UART7_RX;
 8001c8a:	4b38      	ldr	r3, [pc, #224]	; (8001d6c <HAL_UART_MspInit+0x29c>)
 8001c8c:	224f      	movs	r2, #79	; 0x4f
 8001c8e:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c90:	4b36      	ldr	r3, [pc, #216]	; (8001d6c <HAL_UART_MspInit+0x29c>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c96:	4b35      	ldr	r3, [pc, #212]	; (8001d6c <HAL_UART_MspInit+0x29c>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c9c:	4b33      	ldr	r3, [pc, #204]	; (8001d6c <HAL_UART_MspInit+0x29c>)
 8001c9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ca2:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ca4:	4b31      	ldr	r3, [pc, #196]	; (8001d6c <HAL_UART_MspInit+0x29c>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001caa:	4b30      	ldr	r3, [pc, #192]	; (8001d6c <HAL_UART_MspInit+0x29c>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_NORMAL;
 8001cb0:	4b2e      	ldr	r3, [pc, #184]	; (8001d6c <HAL_UART_MspInit+0x29c>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001cb6:	4b2d      	ldr	r3, [pc, #180]	; (8001d6c <HAL_UART_MspInit+0x29c>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cbc:	4b2b      	ldr	r3, [pc, #172]	; (8001d6c <HAL_UART_MspInit+0x29c>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 8001cc2:	482a      	ldr	r0, [pc, #168]	; (8001d6c <HAL_UART_MspInit+0x29c>)
 8001cc4:	f000 fae0 	bl	8002288 <HAL_DMA_Init>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <HAL_UART_MspInit+0x202>
      Error_Handler();
 8001cce:	f7ff f899 	bl	8000e04 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart7_rx);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a25      	ldr	r2, [pc, #148]	; (8001d6c <HAL_UART_MspInit+0x29c>)
 8001cd6:	67da      	str	r2, [r3, #124]	; 0x7c
 8001cd8:	4a24      	ldr	r2, [pc, #144]	; (8001d6c <HAL_UART_MspInit+0x29c>)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart7_tx.Instance = DMA1_Stream6;
 8001cde:	4b25      	ldr	r3, [pc, #148]	; (8001d74 <HAL_UART_MspInit+0x2a4>)
 8001ce0:	4a25      	ldr	r2, [pc, #148]	; (8001d78 <HAL_UART_MspInit+0x2a8>)
 8001ce2:	601a      	str	r2, [r3, #0]
    hdma_uart7_tx.Init.Request = DMA_REQUEST_UART7_TX;
 8001ce4:	4b23      	ldr	r3, [pc, #140]	; (8001d74 <HAL_UART_MspInit+0x2a4>)
 8001ce6:	2250      	movs	r2, #80	; 0x50
 8001ce8:	605a      	str	r2, [r3, #4]
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001cea:	4b22      	ldr	r3, [pc, #136]	; (8001d74 <HAL_UART_MspInit+0x2a4>)
 8001cec:	2240      	movs	r2, #64	; 0x40
 8001cee:	609a      	str	r2, [r3, #8]
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cf0:	4b20      	ldr	r3, [pc, #128]	; (8001d74 <HAL_UART_MspInit+0x2a4>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	60da      	str	r2, [r3, #12]
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001cf6:	4b1f      	ldr	r3, [pc, #124]	; (8001d74 <HAL_UART_MspInit+0x2a4>)
 8001cf8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cfc:	611a      	str	r2, [r3, #16]
    hdma_uart7_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cfe:	4b1d      	ldr	r3, [pc, #116]	; (8001d74 <HAL_UART_MspInit+0x2a4>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	615a      	str	r2, [r3, #20]
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d04:	4b1b      	ldr	r3, [pc, #108]	; (8001d74 <HAL_UART_MspInit+0x2a4>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	619a      	str	r2, [r3, #24]
    hdma_uart7_tx.Init.Mode = DMA_NORMAL;
 8001d0a:	4b1a      	ldr	r3, [pc, #104]	; (8001d74 <HAL_UART_MspInit+0x2a4>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	61da      	str	r2, [r3, #28]
    hdma_uart7_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d10:	4b18      	ldr	r3, [pc, #96]	; (8001d74 <HAL_UART_MspInit+0x2a4>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	621a      	str	r2, [r3, #32]
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d16:	4b17      	ldr	r3, [pc, #92]	; (8001d74 <HAL_UART_MspInit+0x2a4>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 8001d1c:	4815      	ldr	r0, [pc, #84]	; (8001d74 <HAL_UART_MspInit+0x2a4>)
 8001d1e:	f000 fab3 	bl	8002288 <HAL_DMA_Init>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <HAL_UART_MspInit+0x25c>
      Error_Handler();
 8001d28:	f7ff f86c 	bl	8000e04 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart7_tx);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	4a11      	ldr	r2, [pc, #68]	; (8001d74 <HAL_UART_MspInit+0x2a4>)
 8001d30:	679a      	str	r2, [r3, #120]	; 0x78
 8001d32:	4a10      	ldr	r2, [pc, #64]	; (8001d74 <HAL_UART_MspInit+0x2a4>)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8001d38:	2200      	movs	r2, #0
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	2052      	movs	r0, #82	; 0x52
 8001d3e:	f000 f9e4 	bl	800210a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8001d42:	2052      	movs	r0, #82	; 0x52
 8001d44:	f000 f9fb 	bl	800213e <HAL_NVIC_EnableIRQ>
}
 8001d48:	bf00      	nop
 8001d4a:	37e8      	adds	r7, #232	; 0xe8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40004c00 	.word	0x40004c00
 8001d54:	58024400 	.word	0x58024400
 8001d58:	58020000 	.word	0x58020000
 8001d5c:	240006d8 	.word	0x240006d8
 8001d60:	400204b8 	.word	0x400204b8
 8001d64:	40007800 	.word	0x40007800
 8001d68:	58021400 	.word	0x58021400
 8001d6c:	240005e8 	.word	0x240005e8
 8001d70:	40020088 	.word	0x40020088
 8001d74:	24000660 	.word	0x24000660
 8001d78:	400200a0 	.word	0x400200a0

08001d7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001d7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001db4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d80:	f7fe fc88 	bl	8000694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d84:	480c      	ldr	r0, [pc, #48]	; (8001db8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d86:	490d      	ldr	r1, [pc, #52]	; (8001dbc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d88:	4a0d      	ldr	r2, [pc, #52]	; (8001dc0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d8c:	e002      	b.n	8001d94 <LoopCopyDataInit>

08001d8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d92:	3304      	adds	r3, #4

08001d94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d98:	d3f9      	bcc.n	8001d8e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d9a:	4a0a      	ldr	r2, [pc, #40]	; (8001dc4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d9c:	4c0a      	ldr	r4, [pc, #40]	; (8001dc8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001da0:	e001      	b.n	8001da6 <LoopFillZerobss>

08001da2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001da2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001da4:	3204      	adds	r2, #4

08001da6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001da6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001da8:	d3fb      	bcc.n	8001da2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001daa:	f00e fff3 	bl	8010d94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dae:	f7fe ff51 	bl	8000c54 <main>
  bx  lr
 8001db2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001db4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001db8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001dbc:	24000354 	.word	0x24000354
  ldr r2, =_sidata
 8001dc0:	08013c6c 	.word	0x08013c6c
  ldr r2, =_sbss
 8001dc4:	24000354 	.word	0x24000354
  ldr r4, =_ebss
 8001dc8:	24002050 	.word	0x24002050

08001dcc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dcc:	e7fe      	b.n	8001dcc <ADC3_IRQHandler>
	...

08001dd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dd6:	2003      	movs	r0, #3
 8001dd8:	f000 f98c 	bl	80020f4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001ddc:	f006 fa58 	bl	8008290 <HAL_RCC_GetSysClockFreq>
 8001de0:	4602      	mov	r2, r0
 8001de2:	4b15      	ldr	r3, [pc, #84]	; (8001e38 <HAL_Init+0x68>)
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	0a1b      	lsrs	r3, r3, #8
 8001de8:	f003 030f 	and.w	r3, r3, #15
 8001dec:	4913      	ldr	r1, [pc, #76]	; (8001e3c <HAL_Init+0x6c>)
 8001dee:	5ccb      	ldrb	r3, [r1, r3]
 8001df0:	f003 031f 	and.w	r3, r3, #31
 8001df4:	fa22 f303 	lsr.w	r3, r2, r3
 8001df8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001dfa:	4b0f      	ldr	r3, [pc, #60]	; (8001e38 <HAL_Init+0x68>)
 8001dfc:	699b      	ldr	r3, [r3, #24]
 8001dfe:	f003 030f 	and.w	r3, r3, #15
 8001e02:	4a0e      	ldr	r2, [pc, #56]	; (8001e3c <HAL_Init+0x6c>)
 8001e04:	5cd3      	ldrb	r3, [r2, r3]
 8001e06:	f003 031f 	and.w	r3, r3, #31
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e10:	4a0b      	ldr	r2, [pc, #44]	; (8001e40 <HAL_Init+0x70>)
 8001e12:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001e14:	4a0b      	ldr	r2, [pc, #44]	; (8001e44 <HAL_Init+0x74>)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e1a:	2000      	movs	r0, #0
 8001e1c:	f000 f814 	bl	8001e48 <HAL_InitTick>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e002      	b.n	8001e30 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001e2a:	f7ff fa71 	bl	8001310 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e2e:	2300      	movs	r3, #0
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3708      	adds	r7, #8
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	58024400 	.word	0x58024400
 8001e3c:	08013738 	.word	0x08013738
 8001e40:	24000004 	.word	0x24000004
 8001e44:	24000000 	.word	0x24000000

08001e48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001e50:	4b15      	ldr	r3, [pc, #84]	; (8001ea8 <HAL_InitTick+0x60>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d101      	bne.n	8001e5c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e021      	b.n	8001ea0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001e5c:	4b13      	ldr	r3, [pc, #76]	; (8001eac <HAL_InitTick+0x64>)
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	4b11      	ldr	r3, [pc, #68]	; (8001ea8 <HAL_InitTick+0x60>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	4619      	mov	r1, r3
 8001e66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e72:	4618      	mov	r0, r3
 8001e74:	f000 f971 	bl	800215a <HAL_SYSTICK_Config>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e00e      	b.n	8001ea0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2b0f      	cmp	r3, #15
 8001e86:	d80a      	bhi.n	8001e9e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e88:	2200      	movs	r2, #0
 8001e8a:	6879      	ldr	r1, [r7, #4]
 8001e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e90:	f000 f93b 	bl	800210a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e94:	4a06      	ldr	r2, [pc, #24]	; (8001eb0 <HAL_InitTick+0x68>)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	e000      	b.n	8001ea0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3708      	adds	r7, #8
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	2400000c 	.word	0x2400000c
 8001eac:	24000000 	.word	0x24000000
 8001eb0:	24000008 	.word	0x24000008

08001eb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001eb8:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <HAL_IncTick+0x20>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	4b06      	ldr	r3, [pc, #24]	; (8001ed8 <HAL_IncTick+0x24>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	4a04      	ldr	r2, [pc, #16]	; (8001ed8 <HAL_IncTick+0x24>)
 8001ec6:	6013      	str	r3, [r2, #0]
}
 8001ec8:	bf00      	nop
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	2400000c 	.word	0x2400000c
 8001ed8:	24000750 	.word	0x24000750

08001edc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  return uwTick;
 8001ee0:	4b03      	ldr	r3, [pc, #12]	; (8001ef0 <HAL_GetTick+0x14>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	24000750 	.word	0x24000750

08001ef4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001efc:	f7ff ffee 	bl	8001edc <HAL_GetTick>
 8001f00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f0c:	d005      	beq.n	8001f1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f0e:	4b0a      	ldr	r3, [pc, #40]	; (8001f38 <HAL_Delay+0x44>)
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	461a      	mov	r2, r3
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	4413      	add	r3, r2
 8001f18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f1a:	bf00      	nop
 8001f1c:	f7ff ffde 	bl	8001edc <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	68fa      	ldr	r2, [r7, #12]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d8f7      	bhi.n	8001f1c <HAL_Delay+0x28>
  {
  }
}
 8001f2c:	bf00      	nop
 8001f2e:	bf00      	nop
 8001f30:	3710      	adds	r7, #16
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	2400000c 	.word	0x2400000c

08001f3c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001f40:	4b03      	ldr	r3, [pc, #12]	; (8001f50 <HAL_GetREVID+0x14>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	0c1b      	lsrs	r3, r3, #16
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr
 8001f50:	5c001000 	.word	0x5c001000

08001f54 <__NVIC_SetPriorityGrouping>:
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f003 0307 	and.w	r3, r3, #7
 8001f62:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f64:	4b0b      	ldr	r3, [pc, #44]	; (8001f94 <__NVIC_SetPriorityGrouping+0x40>)
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f6a:	68ba      	ldr	r2, [r7, #8]
 8001f6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f70:	4013      	ands	r3, r2
 8001f72:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001f7c:	4b06      	ldr	r3, [pc, #24]	; (8001f98 <__NVIC_SetPriorityGrouping+0x44>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f82:	4a04      	ldr	r2, [pc, #16]	; (8001f94 <__NVIC_SetPriorityGrouping+0x40>)
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	60d3      	str	r3, [r2, #12]
}
 8001f88:	bf00      	nop
 8001f8a:	3714      	adds	r7, #20
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	e000ed00 	.word	0xe000ed00
 8001f98:	05fa0000 	.word	0x05fa0000

08001f9c <__NVIC_GetPriorityGrouping>:
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fa0:	4b04      	ldr	r3, [pc, #16]	; (8001fb4 <__NVIC_GetPriorityGrouping+0x18>)
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	0a1b      	lsrs	r3, r3, #8
 8001fa6:	f003 0307 	and.w	r3, r3, #7
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	e000ed00 	.word	0xe000ed00

08001fb8 <__NVIC_EnableIRQ>:
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001fc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	db0b      	blt.n	8001fe2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fca:	88fb      	ldrh	r3, [r7, #6]
 8001fcc:	f003 021f 	and.w	r2, r3, #31
 8001fd0:	4907      	ldr	r1, [pc, #28]	; (8001ff0 <__NVIC_EnableIRQ+0x38>)
 8001fd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fd6:	095b      	lsrs	r3, r3, #5
 8001fd8:	2001      	movs	r0, #1
 8001fda:	fa00 f202 	lsl.w	r2, r0, r2
 8001fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001fe2:	bf00      	nop
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	e000e100 	.word	0xe000e100

08001ff4 <__NVIC_SetPriority>:
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	6039      	str	r1, [r7, #0]
 8001ffe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002000:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002004:	2b00      	cmp	r3, #0
 8002006:	db0a      	blt.n	800201e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	b2da      	uxtb	r2, r3
 800200c:	490c      	ldr	r1, [pc, #48]	; (8002040 <__NVIC_SetPriority+0x4c>)
 800200e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002012:	0112      	lsls	r2, r2, #4
 8002014:	b2d2      	uxtb	r2, r2
 8002016:	440b      	add	r3, r1
 8002018:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800201c:	e00a      	b.n	8002034 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	b2da      	uxtb	r2, r3
 8002022:	4908      	ldr	r1, [pc, #32]	; (8002044 <__NVIC_SetPriority+0x50>)
 8002024:	88fb      	ldrh	r3, [r7, #6]
 8002026:	f003 030f 	and.w	r3, r3, #15
 800202a:	3b04      	subs	r3, #4
 800202c:	0112      	lsls	r2, r2, #4
 800202e:	b2d2      	uxtb	r2, r2
 8002030:	440b      	add	r3, r1
 8002032:	761a      	strb	r2, [r3, #24]
}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr
 8002040:	e000e100 	.word	0xe000e100
 8002044:	e000ed00 	.word	0xe000ed00

08002048 <NVIC_EncodePriority>:
{
 8002048:	b480      	push	{r7}
 800204a:	b089      	sub	sp, #36	; 0x24
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f003 0307 	and.w	r3, r3, #7
 800205a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	f1c3 0307 	rsb	r3, r3, #7
 8002062:	2b04      	cmp	r3, #4
 8002064:	bf28      	it	cs
 8002066:	2304      	movcs	r3, #4
 8002068:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	3304      	adds	r3, #4
 800206e:	2b06      	cmp	r3, #6
 8002070:	d902      	bls.n	8002078 <NVIC_EncodePriority+0x30>
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	3b03      	subs	r3, #3
 8002076:	e000      	b.n	800207a <NVIC_EncodePriority+0x32>
 8002078:	2300      	movs	r3, #0
 800207a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800207c:	f04f 32ff 	mov.w	r2, #4294967295
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	43da      	mvns	r2, r3
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	401a      	ands	r2, r3
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002090:	f04f 31ff 	mov.w	r1, #4294967295
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	fa01 f303 	lsl.w	r3, r1, r3
 800209a:	43d9      	mvns	r1, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a0:	4313      	orrs	r3, r2
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3724      	adds	r7, #36	; 0x24
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
	...

080020b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	3b01      	subs	r3, #1
 80020bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020c0:	d301      	bcc.n	80020c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020c2:	2301      	movs	r3, #1
 80020c4:	e00f      	b.n	80020e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020c6:	4a0a      	ldr	r2, [pc, #40]	; (80020f0 <SysTick_Config+0x40>)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	3b01      	subs	r3, #1
 80020cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020ce:	210f      	movs	r1, #15
 80020d0:	f04f 30ff 	mov.w	r0, #4294967295
 80020d4:	f7ff ff8e 	bl	8001ff4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020d8:	4b05      	ldr	r3, [pc, #20]	; (80020f0 <SysTick_Config+0x40>)
 80020da:	2200      	movs	r2, #0
 80020dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020de:	4b04      	ldr	r3, [pc, #16]	; (80020f0 <SysTick_Config+0x40>)
 80020e0:	2207      	movs	r2, #7
 80020e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	e000e010 	.word	0xe000e010

080020f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f7ff ff29 	bl	8001f54 <__NVIC_SetPriorityGrouping>
}
 8002102:	bf00      	nop
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	b086      	sub	sp, #24
 800210e:	af00      	add	r7, sp, #0
 8002110:	4603      	mov	r3, r0
 8002112:	60b9      	str	r1, [r7, #8]
 8002114:	607a      	str	r2, [r7, #4]
 8002116:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002118:	f7ff ff40 	bl	8001f9c <__NVIC_GetPriorityGrouping>
 800211c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	68b9      	ldr	r1, [r7, #8]
 8002122:	6978      	ldr	r0, [r7, #20]
 8002124:	f7ff ff90 	bl	8002048 <NVIC_EncodePriority>
 8002128:	4602      	mov	r2, r0
 800212a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800212e:	4611      	mov	r1, r2
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff ff5f 	bl	8001ff4 <__NVIC_SetPriority>
}
 8002136:	bf00      	nop
 8002138:	3718      	adds	r7, #24
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800213e:	b580      	push	{r7, lr}
 8002140:	b082      	sub	sp, #8
 8002142:	af00      	add	r7, sp, #0
 8002144:	4603      	mov	r3, r0
 8002146:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002148:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800214c:	4618      	mov	r0, r3
 800214e:	f7ff ff33 	bl	8001fb8 <__NVIC_EnableIRQ>
}
 8002152:	bf00      	nop
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	b082      	sub	sp, #8
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f7ff ffa4 	bl	80020b0 <SysTick_Config>
 8002168:	4603      	mov	r3, r0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
	...

08002174 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002178:	f3bf 8f5f 	dmb	sy
}
 800217c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800217e:	4b07      	ldr	r3, [pc, #28]	; (800219c <HAL_MPU_Disable+0x28>)
 8002180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002182:	4a06      	ldr	r2, [pc, #24]	; (800219c <HAL_MPU_Disable+0x28>)
 8002184:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002188:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800218a:	4b05      	ldr	r3, [pc, #20]	; (80021a0 <HAL_MPU_Disable+0x2c>)
 800218c:	2200      	movs	r2, #0
 800218e:	605a      	str	r2, [r3, #4]
}
 8002190:	bf00      	nop
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	e000ed00 	.word	0xe000ed00
 80021a0:	e000ed90 	.word	0xe000ed90

080021a4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80021ac:	4a0b      	ldr	r2, [pc, #44]	; (80021dc <HAL_MPU_Enable+0x38>)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f043 0301 	orr.w	r3, r3, #1
 80021b4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80021b6:	4b0a      	ldr	r3, [pc, #40]	; (80021e0 <HAL_MPU_Enable+0x3c>)
 80021b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ba:	4a09      	ldr	r2, [pc, #36]	; (80021e0 <HAL_MPU_Enable+0x3c>)
 80021bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021c0:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80021c2:	f3bf 8f4f 	dsb	sy
}
 80021c6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80021c8:	f3bf 8f6f 	isb	sy
}
 80021cc:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80021ce:	bf00      	nop
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	e000ed90 	.word	0xe000ed90
 80021e0:	e000ed00 	.word	0xe000ed00

080021e4 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	785a      	ldrb	r2, [r3, #1]
 80021f0:	4b1d      	ldr	r3, [pc, #116]	; (8002268 <HAL_MPU_ConfigRegion+0x84>)
 80021f2:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d029      	beq.n	8002250 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80021fc:	4a1a      	ldr	r2, [pc, #104]	; (8002268 <HAL_MPU_ConfigRegion+0x84>)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	7b1b      	ldrb	r3, [r3, #12]
 8002208:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	7adb      	ldrb	r3, [r3, #11]
 800220e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002210:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	7a9b      	ldrb	r3, [r3, #10]
 8002216:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002218:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	7b5b      	ldrb	r3, [r3, #13]
 800221e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002220:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	7b9b      	ldrb	r3, [r3, #14]
 8002226:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002228:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	7bdb      	ldrb	r3, [r3, #15]
 800222e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002230:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	7a5b      	ldrb	r3, [r3, #9]
 8002236:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002238:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	7a1b      	ldrb	r3, [r3, #8]
 800223e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002240:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	7812      	ldrb	r2, [r2, #0]
 8002246:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002248:	4a07      	ldr	r2, [pc, #28]	; (8002268 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800224a:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800224c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800224e:	e005      	b.n	800225c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8002250:	4b05      	ldr	r3, [pc, #20]	; (8002268 <HAL_MPU_ConfigRegion+0x84>)
 8002252:	2200      	movs	r2, #0
 8002254:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8002256:	4b04      	ldr	r3, [pc, #16]	; (8002268 <HAL_MPU_ConfigRegion+0x84>)
 8002258:	2200      	movs	r2, #0
 800225a:	611a      	str	r2, [r3, #16]
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr
 8002268:	e000ed90 	.word	0xe000ed90

0800226c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8002270:	f000 f802 	bl	8002278 <HAL_SYSTICK_Callback>
}
 8002274:	bf00      	nop
 8002276:	bd80      	pop	{r7, pc}

08002278 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800227c:	bf00      	nop
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
	...

08002288 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002290:	f7ff fe24 	bl	8001edc <HAL_GetTick>
 8002294:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d101      	bne.n	80022a0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e316      	b.n	80028ce <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a66      	ldr	r2, [pc, #408]	; (8002440 <HAL_DMA_Init+0x1b8>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d04a      	beq.n	8002340 <HAL_DMA_Init+0xb8>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a65      	ldr	r2, [pc, #404]	; (8002444 <HAL_DMA_Init+0x1bc>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d045      	beq.n	8002340 <HAL_DMA_Init+0xb8>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a63      	ldr	r2, [pc, #396]	; (8002448 <HAL_DMA_Init+0x1c0>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d040      	beq.n	8002340 <HAL_DMA_Init+0xb8>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a62      	ldr	r2, [pc, #392]	; (800244c <HAL_DMA_Init+0x1c4>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d03b      	beq.n	8002340 <HAL_DMA_Init+0xb8>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a60      	ldr	r2, [pc, #384]	; (8002450 <HAL_DMA_Init+0x1c8>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d036      	beq.n	8002340 <HAL_DMA_Init+0xb8>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a5f      	ldr	r2, [pc, #380]	; (8002454 <HAL_DMA_Init+0x1cc>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d031      	beq.n	8002340 <HAL_DMA_Init+0xb8>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a5d      	ldr	r2, [pc, #372]	; (8002458 <HAL_DMA_Init+0x1d0>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d02c      	beq.n	8002340 <HAL_DMA_Init+0xb8>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a5c      	ldr	r2, [pc, #368]	; (800245c <HAL_DMA_Init+0x1d4>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d027      	beq.n	8002340 <HAL_DMA_Init+0xb8>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a5a      	ldr	r2, [pc, #360]	; (8002460 <HAL_DMA_Init+0x1d8>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d022      	beq.n	8002340 <HAL_DMA_Init+0xb8>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a59      	ldr	r2, [pc, #356]	; (8002464 <HAL_DMA_Init+0x1dc>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d01d      	beq.n	8002340 <HAL_DMA_Init+0xb8>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a57      	ldr	r2, [pc, #348]	; (8002468 <HAL_DMA_Init+0x1e0>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d018      	beq.n	8002340 <HAL_DMA_Init+0xb8>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a56      	ldr	r2, [pc, #344]	; (800246c <HAL_DMA_Init+0x1e4>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d013      	beq.n	8002340 <HAL_DMA_Init+0xb8>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a54      	ldr	r2, [pc, #336]	; (8002470 <HAL_DMA_Init+0x1e8>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d00e      	beq.n	8002340 <HAL_DMA_Init+0xb8>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a53      	ldr	r2, [pc, #332]	; (8002474 <HAL_DMA_Init+0x1ec>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d009      	beq.n	8002340 <HAL_DMA_Init+0xb8>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a51      	ldr	r2, [pc, #324]	; (8002478 <HAL_DMA_Init+0x1f0>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d004      	beq.n	8002340 <HAL_DMA_Init+0xb8>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a50      	ldr	r2, [pc, #320]	; (800247c <HAL_DMA_Init+0x1f4>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d101      	bne.n	8002344 <HAL_DMA_Init+0xbc>
 8002340:	2301      	movs	r3, #1
 8002342:	e000      	b.n	8002346 <HAL_DMA_Init+0xbe>
 8002344:	2300      	movs	r3, #0
 8002346:	2b00      	cmp	r3, #0
 8002348:	f000 813b 	beq.w	80025c2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2202      	movs	r2, #2
 8002358:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a37      	ldr	r2, [pc, #220]	; (8002440 <HAL_DMA_Init+0x1b8>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d04a      	beq.n	80023fc <HAL_DMA_Init+0x174>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a36      	ldr	r2, [pc, #216]	; (8002444 <HAL_DMA_Init+0x1bc>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d045      	beq.n	80023fc <HAL_DMA_Init+0x174>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a34      	ldr	r2, [pc, #208]	; (8002448 <HAL_DMA_Init+0x1c0>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d040      	beq.n	80023fc <HAL_DMA_Init+0x174>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a33      	ldr	r2, [pc, #204]	; (800244c <HAL_DMA_Init+0x1c4>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d03b      	beq.n	80023fc <HAL_DMA_Init+0x174>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a31      	ldr	r2, [pc, #196]	; (8002450 <HAL_DMA_Init+0x1c8>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d036      	beq.n	80023fc <HAL_DMA_Init+0x174>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a30      	ldr	r2, [pc, #192]	; (8002454 <HAL_DMA_Init+0x1cc>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d031      	beq.n	80023fc <HAL_DMA_Init+0x174>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a2e      	ldr	r2, [pc, #184]	; (8002458 <HAL_DMA_Init+0x1d0>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d02c      	beq.n	80023fc <HAL_DMA_Init+0x174>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a2d      	ldr	r2, [pc, #180]	; (800245c <HAL_DMA_Init+0x1d4>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d027      	beq.n	80023fc <HAL_DMA_Init+0x174>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a2b      	ldr	r2, [pc, #172]	; (8002460 <HAL_DMA_Init+0x1d8>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d022      	beq.n	80023fc <HAL_DMA_Init+0x174>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a2a      	ldr	r2, [pc, #168]	; (8002464 <HAL_DMA_Init+0x1dc>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d01d      	beq.n	80023fc <HAL_DMA_Init+0x174>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a28      	ldr	r2, [pc, #160]	; (8002468 <HAL_DMA_Init+0x1e0>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d018      	beq.n	80023fc <HAL_DMA_Init+0x174>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a27      	ldr	r2, [pc, #156]	; (800246c <HAL_DMA_Init+0x1e4>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d013      	beq.n	80023fc <HAL_DMA_Init+0x174>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a25      	ldr	r2, [pc, #148]	; (8002470 <HAL_DMA_Init+0x1e8>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d00e      	beq.n	80023fc <HAL_DMA_Init+0x174>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a24      	ldr	r2, [pc, #144]	; (8002474 <HAL_DMA_Init+0x1ec>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d009      	beq.n	80023fc <HAL_DMA_Init+0x174>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a22      	ldr	r2, [pc, #136]	; (8002478 <HAL_DMA_Init+0x1f0>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d004      	beq.n	80023fc <HAL_DMA_Init+0x174>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a21      	ldr	r2, [pc, #132]	; (800247c <HAL_DMA_Init+0x1f4>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d108      	bne.n	800240e <HAL_DMA_Init+0x186>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f022 0201 	bic.w	r2, r2, #1
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	e007      	b.n	800241e <HAL_DMA_Init+0x196>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f022 0201 	bic.w	r2, r2, #1
 800241c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800241e:	e02f      	b.n	8002480 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002420:	f7ff fd5c 	bl	8001edc <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b05      	cmp	r3, #5
 800242c:	d928      	bls.n	8002480 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2220      	movs	r2, #32
 8002432:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2203      	movs	r2, #3
 8002438:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e246      	b.n	80028ce <HAL_DMA_Init+0x646>
 8002440:	40020010 	.word	0x40020010
 8002444:	40020028 	.word	0x40020028
 8002448:	40020040 	.word	0x40020040
 800244c:	40020058 	.word	0x40020058
 8002450:	40020070 	.word	0x40020070
 8002454:	40020088 	.word	0x40020088
 8002458:	400200a0 	.word	0x400200a0
 800245c:	400200b8 	.word	0x400200b8
 8002460:	40020410 	.word	0x40020410
 8002464:	40020428 	.word	0x40020428
 8002468:	40020440 	.word	0x40020440
 800246c:	40020458 	.word	0x40020458
 8002470:	40020470 	.word	0x40020470
 8002474:	40020488 	.word	0x40020488
 8002478:	400204a0 	.word	0x400204a0
 800247c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1c8      	bne.n	8002420 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002496:	697a      	ldr	r2, [r7, #20]
 8002498:	4b83      	ldr	r3, [pc, #524]	; (80026a8 <HAL_DMA_Init+0x420>)
 800249a:	4013      	ands	r3, r2
 800249c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80024a6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	691b      	ldr	r3, [r3, #16]
 80024ac:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024b2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024be:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80024c6:	697a      	ldr	r2, [r7, #20]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d0:	2b04      	cmp	r3, #4
 80024d2:	d107      	bne.n	80024e4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024dc:	4313      	orrs	r3, r2
 80024de:	697a      	ldr	r2, [r7, #20]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80024e4:	4b71      	ldr	r3, [pc, #452]	; (80026ac <HAL_DMA_Init+0x424>)
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	4b71      	ldr	r3, [pc, #452]	; (80026b0 <HAL_DMA_Init+0x428>)
 80024ea:	4013      	ands	r3, r2
 80024ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024f0:	d328      	bcc.n	8002544 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	2b28      	cmp	r3, #40	; 0x28
 80024f8:	d903      	bls.n	8002502 <HAL_DMA_Init+0x27a>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	2b2e      	cmp	r3, #46	; 0x2e
 8002500:	d917      	bls.n	8002532 <HAL_DMA_Init+0x2aa>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	2b3e      	cmp	r3, #62	; 0x3e
 8002508:	d903      	bls.n	8002512 <HAL_DMA_Init+0x28a>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	2b42      	cmp	r3, #66	; 0x42
 8002510:	d90f      	bls.n	8002532 <HAL_DMA_Init+0x2aa>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	2b46      	cmp	r3, #70	; 0x46
 8002518:	d903      	bls.n	8002522 <HAL_DMA_Init+0x29a>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	2b48      	cmp	r3, #72	; 0x48
 8002520:	d907      	bls.n	8002532 <HAL_DMA_Init+0x2aa>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	2b4e      	cmp	r3, #78	; 0x4e
 8002528:	d905      	bls.n	8002536 <HAL_DMA_Init+0x2ae>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	2b52      	cmp	r3, #82	; 0x52
 8002530:	d801      	bhi.n	8002536 <HAL_DMA_Init+0x2ae>
 8002532:	2301      	movs	r3, #1
 8002534:	e000      	b.n	8002538 <HAL_DMA_Init+0x2b0>
 8002536:	2300      	movs	r3, #0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d003      	beq.n	8002544 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002542:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	697a      	ldr	r2, [r7, #20]
 800254a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	f023 0307 	bic.w	r3, r3, #7
 800255a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002560:	697a      	ldr	r2, [r7, #20]
 8002562:	4313      	orrs	r3, r2
 8002564:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256a:	2b04      	cmp	r3, #4
 800256c:	d117      	bne.n	800259e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002572:	697a      	ldr	r2, [r7, #20]
 8002574:	4313      	orrs	r3, r2
 8002576:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00e      	beq.n	800259e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f002 fb4d 	bl	8004c20 <DMA_CheckFifoParam>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d008      	beq.n	800259e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2240      	movs	r2, #64	; 0x40
 8002590:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2201      	movs	r2, #1
 8002596:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e197      	b.n	80028ce <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	697a      	ldr	r2, [r7, #20]
 80025a4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f002 fa88 	bl	8004abc <DMA_CalcBaseAndBitshift>
 80025ac:	4603      	mov	r3, r0
 80025ae:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025b4:	f003 031f 	and.w	r3, r3, #31
 80025b8:	223f      	movs	r2, #63	; 0x3f
 80025ba:	409a      	lsls	r2, r3
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	609a      	str	r2, [r3, #8]
 80025c0:	e0cd      	b.n	800275e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a3b      	ldr	r2, [pc, #236]	; (80026b4 <HAL_DMA_Init+0x42c>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d022      	beq.n	8002612 <HAL_DMA_Init+0x38a>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a39      	ldr	r2, [pc, #228]	; (80026b8 <HAL_DMA_Init+0x430>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d01d      	beq.n	8002612 <HAL_DMA_Init+0x38a>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a38      	ldr	r2, [pc, #224]	; (80026bc <HAL_DMA_Init+0x434>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d018      	beq.n	8002612 <HAL_DMA_Init+0x38a>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a36      	ldr	r2, [pc, #216]	; (80026c0 <HAL_DMA_Init+0x438>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d013      	beq.n	8002612 <HAL_DMA_Init+0x38a>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a35      	ldr	r2, [pc, #212]	; (80026c4 <HAL_DMA_Init+0x43c>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d00e      	beq.n	8002612 <HAL_DMA_Init+0x38a>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a33      	ldr	r2, [pc, #204]	; (80026c8 <HAL_DMA_Init+0x440>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d009      	beq.n	8002612 <HAL_DMA_Init+0x38a>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a32      	ldr	r2, [pc, #200]	; (80026cc <HAL_DMA_Init+0x444>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d004      	beq.n	8002612 <HAL_DMA_Init+0x38a>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a30      	ldr	r2, [pc, #192]	; (80026d0 <HAL_DMA_Init+0x448>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d101      	bne.n	8002616 <HAL_DMA_Init+0x38e>
 8002612:	2301      	movs	r3, #1
 8002614:	e000      	b.n	8002618 <HAL_DMA_Init+0x390>
 8002616:	2300      	movs	r3, #0
 8002618:	2b00      	cmp	r3, #0
 800261a:	f000 8097 	beq.w	800274c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a24      	ldr	r2, [pc, #144]	; (80026b4 <HAL_DMA_Init+0x42c>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d021      	beq.n	800266c <HAL_DMA_Init+0x3e4>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a22      	ldr	r2, [pc, #136]	; (80026b8 <HAL_DMA_Init+0x430>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d01c      	beq.n	800266c <HAL_DMA_Init+0x3e4>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a21      	ldr	r2, [pc, #132]	; (80026bc <HAL_DMA_Init+0x434>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d017      	beq.n	800266c <HAL_DMA_Init+0x3e4>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a1f      	ldr	r2, [pc, #124]	; (80026c0 <HAL_DMA_Init+0x438>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d012      	beq.n	800266c <HAL_DMA_Init+0x3e4>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a1e      	ldr	r2, [pc, #120]	; (80026c4 <HAL_DMA_Init+0x43c>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d00d      	beq.n	800266c <HAL_DMA_Init+0x3e4>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a1c      	ldr	r2, [pc, #112]	; (80026c8 <HAL_DMA_Init+0x440>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d008      	beq.n	800266c <HAL_DMA_Init+0x3e4>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a1b      	ldr	r2, [pc, #108]	; (80026cc <HAL_DMA_Init+0x444>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d003      	beq.n	800266c <HAL_DMA_Init+0x3e4>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a19      	ldr	r2, [pc, #100]	; (80026d0 <HAL_DMA_Init+0x448>)
 800266a:	4293      	cmp	r3, r2
 800266c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2202      	movs	r2, #2
 800267a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002686:	697a      	ldr	r2, [r7, #20]
 8002688:	4b12      	ldr	r3, [pc, #72]	; (80026d4 <HAL_DMA_Init+0x44c>)
 800268a:	4013      	ands	r3, r2
 800268c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	2b40      	cmp	r3, #64	; 0x40
 8002694:	d020      	beq.n	80026d8 <HAL_DMA_Init+0x450>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	2b80      	cmp	r3, #128	; 0x80
 800269c:	d102      	bne.n	80026a4 <HAL_DMA_Init+0x41c>
 800269e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80026a2:	e01a      	b.n	80026da <HAL_DMA_Init+0x452>
 80026a4:	2300      	movs	r3, #0
 80026a6:	e018      	b.n	80026da <HAL_DMA_Init+0x452>
 80026a8:	fe10803f 	.word	0xfe10803f
 80026ac:	5c001000 	.word	0x5c001000
 80026b0:	ffff0000 	.word	0xffff0000
 80026b4:	58025408 	.word	0x58025408
 80026b8:	5802541c 	.word	0x5802541c
 80026bc:	58025430 	.word	0x58025430
 80026c0:	58025444 	.word	0x58025444
 80026c4:	58025458 	.word	0x58025458
 80026c8:	5802546c 	.word	0x5802546c
 80026cc:	58025480 	.word	0x58025480
 80026d0:	58025494 	.word	0x58025494
 80026d4:	fffe000f 	.word	0xfffe000f
 80026d8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	68d2      	ldr	r2, [r2, #12]
 80026de:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80026e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80026e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	695b      	ldr	r3, [r3, #20]
 80026ee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80026f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80026f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	69db      	ldr	r3, [r3, #28]
 80026fe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002700:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a1b      	ldr	r3, [r3, #32]
 8002706:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002708:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800270a:	697a      	ldr	r2, [r7, #20]
 800270c:	4313      	orrs	r3, r2
 800270e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	697a      	ldr	r2, [r7, #20]
 8002716:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	461a      	mov	r2, r3
 800271e:	4b6e      	ldr	r3, [pc, #440]	; (80028d8 <HAL_DMA_Init+0x650>)
 8002720:	4413      	add	r3, r2
 8002722:	4a6e      	ldr	r2, [pc, #440]	; (80028dc <HAL_DMA_Init+0x654>)
 8002724:	fba2 2303 	umull	r2, r3, r2, r3
 8002728:	091b      	lsrs	r3, r3, #4
 800272a:	009a      	lsls	r2, r3, #2
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f002 f9c3 	bl	8004abc <DMA_CalcBaseAndBitshift>
 8002736:	4603      	mov	r3, r0
 8002738:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800273e:	f003 031f 	and.w	r3, r3, #31
 8002742:	2201      	movs	r2, #1
 8002744:	409a      	lsls	r2, r3
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	605a      	str	r2, [r3, #4]
 800274a:	e008      	b.n	800275e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2240      	movs	r2, #64	; 0x40
 8002750:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2203      	movs	r2, #3
 8002756:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e0b7      	b.n	80028ce <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a5f      	ldr	r2, [pc, #380]	; (80028e0 <HAL_DMA_Init+0x658>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d072      	beq.n	800284e <HAL_DMA_Init+0x5c6>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a5d      	ldr	r2, [pc, #372]	; (80028e4 <HAL_DMA_Init+0x65c>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d06d      	beq.n	800284e <HAL_DMA_Init+0x5c6>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a5c      	ldr	r2, [pc, #368]	; (80028e8 <HAL_DMA_Init+0x660>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d068      	beq.n	800284e <HAL_DMA_Init+0x5c6>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a5a      	ldr	r2, [pc, #360]	; (80028ec <HAL_DMA_Init+0x664>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d063      	beq.n	800284e <HAL_DMA_Init+0x5c6>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a59      	ldr	r2, [pc, #356]	; (80028f0 <HAL_DMA_Init+0x668>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d05e      	beq.n	800284e <HAL_DMA_Init+0x5c6>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a57      	ldr	r2, [pc, #348]	; (80028f4 <HAL_DMA_Init+0x66c>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d059      	beq.n	800284e <HAL_DMA_Init+0x5c6>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a56      	ldr	r2, [pc, #344]	; (80028f8 <HAL_DMA_Init+0x670>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d054      	beq.n	800284e <HAL_DMA_Init+0x5c6>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a54      	ldr	r2, [pc, #336]	; (80028fc <HAL_DMA_Init+0x674>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d04f      	beq.n	800284e <HAL_DMA_Init+0x5c6>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a53      	ldr	r2, [pc, #332]	; (8002900 <HAL_DMA_Init+0x678>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d04a      	beq.n	800284e <HAL_DMA_Init+0x5c6>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a51      	ldr	r2, [pc, #324]	; (8002904 <HAL_DMA_Init+0x67c>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d045      	beq.n	800284e <HAL_DMA_Init+0x5c6>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a50      	ldr	r2, [pc, #320]	; (8002908 <HAL_DMA_Init+0x680>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d040      	beq.n	800284e <HAL_DMA_Init+0x5c6>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a4e      	ldr	r2, [pc, #312]	; (800290c <HAL_DMA_Init+0x684>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d03b      	beq.n	800284e <HAL_DMA_Init+0x5c6>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a4d      	ldr	r2, [pc, #308]	; (8002910 <HAL_DMA_Init+0x688>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d036      	beq.n	800284e <HAL_DMA_Init+0x5c6>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a4b      	ldr	r2, [pc, #300]	; (8002914 <HAL_DMA_Init+0x68c>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d031      	beq.n	800284e <HAL_DMA_Init+0x5c6>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a4a      	ldr	r2, [pc, #296]	; (8002918 <HAL_DMA_Init+0x690>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d02c      	beq.n	800284e <HAL_DMA_Init+0x5c6>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a48      	ldr	r2, [pc, #288]	; (800291c <HAL_DMA_Init+0x694>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d027      	beq.n	800284e <HAL_DMA_Init+0x5c6>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a47      	ldr	r2, [pc, #284]	; (8002920 <HAL_DMA_Init+0x698>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d022      	beq.n	800284e <HAL_DMA_Init+0x5c6>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a45      	ldr	r2, [pc, #276]	; (8002924 <HAL_DMA_Init+0x69c>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d01d      	beq.n	800284e <HAL_DMA_Init+0x5c6>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a44      	ldr	r2, [pc, #272]	; (8002928 <HAL_DMA_Init+0x6a0>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d018      	beq.n	800284e <HAL_DMA_Init+0x5c6>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a42      	ldr	r2, [pc, #264]	; (800292c <HAL_DMA_Init+0x6a4>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d013      	beq.n	800284e <HAL_DMA_Init+0x5c6>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a41      	ldr	r2, [pc, #260]	; (8002930 <HAL_DMA_Init+0x6a8>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d00e      	beq.n	800284e <HAL_DMA_Init+0x5c6>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a3f      	ldr	r2, [pc, #252]	; (8002934 <HAL_DMA_Init+0x6ac>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d009      	beq.n	800284e <HAL_DMA_Init+0x5c6>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a3e      	ldr	r2, [pc, #248]	; (8002938 <HAL_DMA_Init+0x6b0>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d004      	beq.n	800284e <HAL_DMA_Init+0x5c6>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a3c      	ldr	r2, [pc, #240]	; (800293c <HAL_DMA_Init+0x6b4>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d101      	bne.n	8002852 <HAL_DMA_Init+0x5ca>
 800284e:	2301      	movs	r3, #1
 8002850:	e000      	b.n	8002854 <HAL_DMA_Init+0x5cc>
 8002852:	2300      	movs	r3, #0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d032      	beq.n	80028be <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f002 fa5d 	bl	8004d18 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	2b80      	cmp	r3, #128	; 0x80
 8002864:	d102      	bne.n	800286c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685a      	ldr	r2, [r3, #4]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002874:	b2d2      	uxtb	r2, r2
 8002876:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002880:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d010      	beq.n	80028ac <HAL_DMA_Init+0x624>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	2b08      	cmp	r3, #8
 8002890:	d80c      	bhi.n	80028ac <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f002 fada 	bl	8004e4c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800289c:	2200      	movs	r2, #0
 800289e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80028a8:	605a      	str	r2, [r3, #4]
 80028aa:	e008      	b.n	80028be <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3718      	adds	r7, #24
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	a7fdabf8 	.word	0xa7fdabf8
 80028dc:	cccccccd 	.word	0xcccccccd
 80028e0:	40020010 	.word	0x40020010
 80028e4:	40020028 	.word	0x40020028
 80028e8:	40020040 	.word	0x40020040
 80028ec:	40020058 	.word	0x40020058
 80028f0:	40020070 	.word	0x40020070
 80028f4:	40020088 	.word	0x40020088
 80028f8:	400200a0 	.word	0x400200a0
 80028fc:	400200b8 	.word	0x400200b8
 8002900:	40020410 	.word	0x40020410
 8002904:	40020428 	.word	0x40020428
 8002908:	40020440 	.word	0x40020440
 800290c:	40020458 	.word	0x40020458
 8002910:	40020470 	.word	0x40020470
 8002914:	40020488 	.word	0x40020488
 8002918:	400204a0 	.word	0x400204a0
 800291c:	400204b8 	.word	0x400204b8
 8002920:	58025408 	.word	0x58025408
 8002924:	5802541c 	.word	0x5802541c
 8002928:	58025430 	.word	0x58025430
 800292c:	58025444 	.word	0x58025444
 8002930:	58025458 	.word	0x58025458
 8002934:	5802546c 	.word	0x5802546c
 8002938:	58025480 	.word	0x58025480
 800293c:	58025494 	.word	0x58025494

08002940 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b086      	sub	sp, #24
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	607a      	str	r2, [r7, #4]
 800294c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800294e:	2300      	movs	r3, #0
 8002950:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d101      	bne.n	800295c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e226      	b.n	8002daa <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002962:	2b01      	cmp	r3, #1
 8002964:	d101      	bne.n	800296a <HAL_DMA_Start_IT+0x2a>
 8002966:	2302      	movs	r3, #2
 8002968:	e21f      	b.n	8002daa <HAL_DMA_Start_IT+0x46a>
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2201      	movs	r2, #1
 800296e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b01      	cmp	r3, #1
 800297c:	f040 820a 	bne.w	8002d94 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2202      	movs	r2, #2
 8002984:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2200      	movs	r2, #0
 800298c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a68      	ldr	r2, [pc, #416]	; (8002b34 <HAL_DMA_Start_IT+0x1f4>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d04a      	beq.n	8002a2e <HAL_DMA_Start_IT+0xee>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a66      	ldr	r2, [pc, #408]	; (8002b38 <HAL_DMA_Start_IT+0x1f8>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d045      	beq.n	8002a2e <HAL_DMA_Start_IT+0xee>
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a65      	ldr	r2, [pc, #404]	; (8002b3c <HAL_DMA_Start_IT+0x1fc>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d040      	beq.n	8002a2e <HAL_DMA_Start_IT+0xee>
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a63      	ldr	r2, [pc, #396]	; (8002b40 <HAL_DMA_Start_IT+0x200>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d03b      	beq.n	8002a2e <HAL_DMA_Start_IT+0xee>
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a62      	ldr	r2, [pc, #392]	; (8002b44 <HAL_DMA_Start_IT+0x204>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d036      	beq.n	8002a2e <HAL_DMA_Start_IT+0xee>
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a60      	ldr	r2, [pc, #384]	; (8002b48 <HAL_DMA_Start_IT+0x208>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d031      	beq.n	8002a2e <HAL_DMA_Start_IT+0xee>
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a5f      	ldr	r2, [pc, #380]	; (8002b4c <HAL_DMA_Start_IT+0x20c>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d02c      	beq.n	8002a2e <HAL_DMA_Start_IT+0xee>
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a5d      	ldr	r2, [pc, #372]	; (8002b50 <HAL_DMA_Start_IT+0x210>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d027      	beq.n	8002a2e <HAL_DMA_Start_IT+0xee>
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a5c      	ldr	r2, [pc, #368]	; (8002b54 <HAL_DMA_Start_IT+0x214>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d022      	beq.n	8002a2e <HAL_DMA_Start_IT+0xee>
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a5a      	ldr	r2, [pc, #360]	; (8002b58 <HAL_DMA_Start_IT+0x218>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d01d      	beq.n	8002a2e <HAL_DMA_Start_IT+0xee>
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a59      	ldr	r2, [pc, #356]	; (8002b5c <HAL_DMA_Start_IT+0x21c>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d018      	beq.n	8002a2e <HAL_DMA_Start_IT+0xee>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a57      	ldr	r2, [pc, #348]	; (8002b60 <HAL_DMA_Start_IT+0x220>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d013      	beq.n	8002a2e <HAL_DMA_Start_IT+0xee>
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a56      	ldr	r2, [pc, #344]	; (8002b64 <HAL_DMA_Start_IT+0x224>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d00e      	beq.n	8002a2e <HAL_DMA_Start_IT+0xee>
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a54      	ldr	r2, [pc, #336]	; (8002b68 <HAL_DMA_Start_IT+0x228>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d009      	beq.n	8002a2e <HAL_DMA_Start_IT+0xee>
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a53      	ldr	r2, [pc, #332]	; (8002b6c <HAL_DMA_Start_IT+0x22c>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d004      	beq.n	8002a2e <HAL_DMA_Start_IT+0xee>
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a51      	ldr	r2, [pc, #324]	; (8002b70 <HAL_DMA_Start_IT+0x230>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d108      	bne.n	8002a40 <HAL_DMA_Start_IT+0x100>
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f022 0201 	bic.w	r2, r2, #1
 8002a3c:	601a      	str	r2, [r3, #0]
 8002a3e:	e007      	b.n	8002a50 <HAL_DMA_Start_IT+0x110>
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f022 0201 	bic.w	r2, r2, #1
 8002a4e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	68b9      	ldr	r1, [r7, #8]
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f001 fe84 	bl	8004764 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a34      	ldr	r2, [pc, #208]	; (8002b34 <HAL_DMA_Start_IT+0x1f4>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d04a      	beq.n	8002afc <HAL_DMA_Start_IT+0x1bc>
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a33      	ldr	r2, [pc, #204]	; (8002b38 <HAL_DMA_Start_IT+0x1f8>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d045      	beq.n	8002afc <HAL_DMA_Start_IT+0x1bc>
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a31      	ldr	r2, [pc, #196]	; (8002b3c <HAL_DMA_Start_IT+0x1fc>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d040      	beq.n	8002afc <HAL_DMA_Start_IT+0x1bc>
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a30      	ldr	r2, [pc, #192]	; (8002b40 <HAL_DMA_Start_IT+0x200>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d03b      	beq.n	8002afc <HAL_DMA_Start_IT+0x1bc>
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a2e      	ldr	r2, [pc, #184]	; (8002b44 <HAL_DMA_Start_IT+0x204>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d036      	beq.n	8002afc <HAL_DMA_Start_IT+0x1bc>
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a2d      	ldr	r2, [pc, #180]	; (8002b48 <HAL_DMA_Start_IT+0x208>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d031      	beq.n	8002afc <HAL_DMA_Start_IT+0x1bc>
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a2b      	ldr	r2, [pc, #172]	; (8002b4c <HAL_DMA_Start_IT+0x20c>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d02c      	beq.n	8002afc <HAL_DMA_Start_IT+0x1bc>
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a2a      	ldr	r2, [pc, #168]	; (8002b50 <HAL_DMA_Start_IT+0x210>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d027      	beq.n	8002afc <HAL_DMA_Start_IT+0x1bc>
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a28      	ldr	r2, [pc, #160]	; (8002b54 <HAL_DMA_Start_IT+0x214>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d022      	beq.n	8002afc <HAL_DMA_Start_IT+0x1bc>
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a27      	ldr	r2, [pc, #156]	; (8002b58 <HAL_DMA_Start_IT+0x218>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d01d      	beq.n	8002afc <HAL_DMA_Start_IT+0x1bc>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a25      	ldr	r2, [pc, #148]	; (8002b5c <HAL_DMA_Start_IT+0x21c>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d018      	beq.n	8002afc <HAL_DMA_Start_IT+0x1bc>
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a24      	ldr	r2, [pc, #144]	; (8002b60 <HAL_DMA_Start_IT+0x220>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d013      	beq.n	8002afc <HAL_DMA_Start_IT+0x1bc>
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a22      	ldr	r2, [pc, #136]	; (8002b64 <HAL_DMA_Start_IT+0x224>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d00e      	beq.n	8002afc <HAL_DMA_Start_IT+0x1bc>
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a21      	ldr	r2, [pc, #132]	; (8002b68 <HAL_DMA_Start_IT+0x228>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d009      	beq.n	8002afc <HAL_DMA_Start_IT+0x1bc>
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a1f      	ldr	r2, [pc, #124]	; (8002b6c <HAL_DMA_Start_IT+0x22c>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d004      	beq.n	8002afc <HAL_DMA_Start_IT+0x1bc>
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a1e      	ldr	r2, [pc, #120]	; (8002b70 <HAL_DMA_Start_IT+0x230>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d101      	bne.n	8002b00 <HAL_DMA_Start_IT+0x1c0>
 8002afc:	2301      	movs	r3, #1
 8002afe:	e000      	b.n	8002b02 <HAL_DMA_Start_IT+0x1c2>
 8002b00:	2300      	movs	r3, #0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d036      	beq.n	8002b74 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f023 021e 	bic.w	r2, r3, #30
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f042 0216 	orr.w	r2, r2, #22
 8002b18:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d03e      	beq.n	8002ba0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f042 0208 	orr.w	r2, r2, #8
 8002b30:	601a      	str	r2, [r3, #0]
 8002b32:	e035      	b.n	8002ba0 <HAL_DMA_Start_IT+0x260>
 8002b34:	40020010 	.word	0x40020010
 8002b38:	40020028 	.word	0x40020028
 8002b3c:	40020040 	.word	0x40020040
 8002b40:	40020058 	.word	0x40020058
 8002b44:	40020070 	.word	0x40020070
 8002b48:	40020088 	.word	0x40020088
 8002b4c:	400200a0 	.word	0x400200a0
 8002b50:	400200b8 	.word	0x400200b8
 8002b54:	40020410 	.word	0x40020410
 8002b58:	40020428 	.word	0x40020428
 8002b5c:	40020440 	.word	0x40020440
 8002b60:	40020458 	.word	0x40020458
 8002b64:	40020470 	.word	0x40020470
 8002b68:	40020488 	.word	0x40020488
 8002b6c:	400204a0 	.word	0x400204a0
 8002b70:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f023 020e 	bic.w	r2, r3, #14
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f042 020a 	orr.w	r2, r2, #10
 8002b86:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d007      	beq.n	8002ba0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f042 0204 	orr.w	r2, r2, #4
 8002b9e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a83      	ldr	r2, [pc, #524]	; (8002db4 <HAL_DMA_Start_IT+0x474>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d072      	beq.n	8002c90 <HAL_DMA_Start_IT+0x350>
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a82      	ldr	r2, [pc, #520]	; (8002db8 <HAL_DMA_Start_IT+0x478>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d06d      	beq.n	8002c90 <HAL_DMA_Start_IT+0x350>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a80      	ldr	r2, [pc, #512]	; (8002dbc <HAL_DMA_Start_IT+0x47c>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d068      	beq.n	8002c90 <HAL_DMA_Start_IT+0x350>
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a7f      	ldr	r2, [pc, #508]	; (8002dc0 <HAL_DMA_Start_IT+0x480>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d063      	beq.n	8002c90 <HAL_DMA_Start_IT+0x350>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a7d      	ldr	r2, [pc, #500]	; (8002dc4 <HAL_DMA_Start_IT+0x484>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d05e      	beq.n	8002c90 <HAL_DMA_Start_IT+0x350>
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a7c      	ldr	r2, [pc, #496]	; (8002dc8 <HAL_DMA_Start_IT+0x488>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d059      	beq.n	8002c90 <HAL_DMA_Start_IT+0x350>
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a7a      	ldr	r2, [pc, #488]	; (8002dcc <HAL_DMA_Start_IT+0x48c>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d054      	beq.n	8002c90 <HAL_DMA_Start_IT+0x350>
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a79      	ldr	r2, [pc, #484]	; (8002dd0 <HAL_DMA_Start_IT+0x490>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d04f      	beq.n	8002c90 <HAL_DMA_Start_IT+0x350>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a77      	ldr	r2, [pc, #476]	; (8002dd4 <HAL_DMA_Start_IT+0x494>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d04a      	beq.n	8002c90 <HAL_DMA_Start_IT+0x350>
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a76      	ldr	r2, [pc, #472]	; (8002dd8 <HAL_DMA_Start_IT+0x498>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d045      	beq.n	8002c90 <HAL_DMA_Start_IT+0x350>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a74      	ldr	r2, [pc, #464]	; (8002ddc <HAL_DMA_Start_IT+0x49c>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d040      	beq.n	8002c90 <HAL_DMA_Start_IT+0x350>
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a73      	ldr	r2, [pc, #460]	; (8002de0 <HAL_DMA_Start_IT+0x4a0>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d03b      	beq.n	8002c90 <HAL_DMA_Start_IT+0x350>
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a71      	ldr	r2, [pc, #452]	; (8002de4 <HAL_DMA_Start_IT+0x4a4>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d036      	beq.n	8002c90 <HAL_DMA_Start_IT+0x350>
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a70      	ldr	r2, [pc, #448]	; (8002de8 <HAL_DMA_Start_IT+0x4a8>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d031      	beq.n	8002c90 <HAL_DMA_Start_IT+0x350>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a6e      	ldr	r2, [pc, #440]	; (8002dec <HAL_DMA_Start_IT+0x4ac>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d02c      	beq.n	8002c90 <HAL_DMA_Start_IT+0x350>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a6d      	ldr	r2, [pc, #436]	; (8002df0 <HAL_DMA_Start_IT+0x4b0>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d027      	beq.n	8002c90 <HAL_DMA_Start_IT+0x350>
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a6b      	ldr	r2, [pc, #428]	; (8002df4 <HAL_DMA_Start_IT+0x4b4>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d022      	beq.n	8002c90 <HAL_DMA_Start_IT+0x350>
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a6a      	ldr	r2, [pc, #424]	; (8002df8 <HAL_DMA_Start_IT+0x4b8>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d01d      	beq.n	8002c90 <HAL_DMA_Start_IT+0x350>
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a68      	ldr	r2, [pc, #416]	; (8002dfc <HAL_DMA_Start_IT+0x4bc>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d018      	beq.n	8002c90 <HAL_DMA_Start_IT+0x350>
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a67      	ldr	r2, [pc, #412]	; (8002e00 <HAL_DMA_Start_IT+0x4c0>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d013      	beq.n	8002c90 <HAL_DMA_Start_IT+0x350>
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a65      	ldr	r2, [pc, #404]	; (8002e04 <HAL_DMA_Start_IT+0x4c4>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d00e      	beq.n	8002c90 <HAL_DMA_Start_IT+0x350>
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a64      	ldr	r2, [pc, #400]	; (8002e08 <HAL_DMA_Start_IT+0x4c8>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d009      	beq.n	8002c90 <HAL_DMA_Start_IT+0x350>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a62      	ldr	r2, [pc, #392]	; (8002e0c <HAL_DMA_Start_IT+0x4cc>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d004      	beq.n	8002c90 <HAL_DMA_Start_IT+0x350>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a61      	ldr	r2, [pc, #388]	; (8002e10 <HAL_DMA_Start_IT+0x4d0>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d101      	bne.n	8002c94 <HAL_DMA_Start_IT+0x354>
 8002c90:	2301      	movs	r3, #1
 8002c92:	e000      	b.n	8002c96 <HAL_DMA_Start_IT+0x356>
 8002c94:	2300      	movs	r3, #0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d01a      	beq.n	8002cd0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d007      	beq.n	8002cb8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cb6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d007      	beq.n	8002cd0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cce:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a37      	ldr	r2, [pc, #220]	; (8002db4 <HAL_DMA_Start_IT+0x474>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d04a      	beq.n	8002d70 <HAL_DMA_Start_IT+0x430>
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a36      	ldr	r2, [pc, #216]	; (8002db8 <HAL_DMA_Start_IT+0x478>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d045      	beq.n	8002d70 <HAL_DMA_Start_IT+0x430>
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a34      	ldr	r2, [pc, #208]	; (8002dbc <HAL_DMA_Start_IT+0x47c>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d040      	beq.n	8002d70 <HAL_DMA_Start_IT+0x430>
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a33      	ldr	r2, [pc, #204]	; (8002dc0 <HAL_DMA_Start_IT+0x480>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d03b      	beq.n	8002d70 <HAL_DMA_Start_IT+0x430>
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a31      	ldr	r2, [pc, #196]	; (8002dc4 <HAL_DMA_Start_IT+0x484>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d036      	beq.n	8002d70 <HAL_DMA_Start_IT+0x430>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a30      	ldr	r2, [pc, #192]	; (8002dc8 <HAL_DMA_Start_IT+0x488>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d031      	beq.n	8002d70 <HAL_DMA_Start_IT+0x430>
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a2e      	ldr	r2, [pc, #184]	; (8002dcc <HAL_DMA_Start_IT+0x48c>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d02c      	beq.n	8002d70 <HAL_DMA_Start_IT+0x430>
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a2d      	ldr	r2, [pc, #180]	; (8002dd0 <HAL_DMA_Start_IT+0x490>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d027      	beq.n	8002d70 <HAL_DMA_Start_IT+0x430>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a2b      	ldr	r2, [pc, #172]	; (8002dd4 <HAL_DMA_Start_IT+0x494>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d022      	beq.n	8002d70 <HAL_DMA_Start_IT+0x430>
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a2a      	ldr	r2, [pc, #168]	; (8002dd8 <HAL_DMA_Start_IT+0x498>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d01d      	beq.n	8002d70 <HAL_DMA_Start_IT+0x430>
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a28      	ldr	r2, [pc, #160]	; (8002ddc <HAL_DMA_Start_IT+0x49c>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d018      	beq.n	8002d70 <HAL_DMA_Start_IT+0x430>
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a27      	ldr	r2, [pc, #156]	; (8002de0 <HAL_DMA_Start_IT+0x4a0>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d013      	beq.n	8002d70 <HAL_DMA_Start_IT+0x430>
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a25      	ldr	r2, [pc, #148]	; (8002de4 <HAL_DMA_Start_IT+0x4a4>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d00e      	beq.n	8002d70 <HAL_DMA_Start_IT+0x430>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a24      	ldr	r2, [pc, #144]	; (8002de8 <HAL_DMA_Start_IT+0x4a8>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d009      	beq.n	8002d70 <HAL_DMA_Start_IT+0x430>
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a22      	ldr	r2, [pc, #136]	; (8002dec <HAL_DMA_Start_IT+0x4ac>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d004      	beq.n	8002d70 <HAL_DMA_Start_IT+0x430>
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a21      	ldr	r2, [pc, #132]	; (8002df0 <HAL_DMA_Start_IT+0x4b0>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d108      	bne.n	8002d82 <HAL_DMA_Start_IT+0x442>
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f042 0201 	orr.w	r2, r2, #1
 8002d7e:	601a      	str	r2, [r3, #0]
 8002d80:	e012      	b.n	8002da8 <HAL_DMA_Start_IT+0x468>
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f042 0201 	orr.w	r2, r2, #1
 8002d90:	601a      	str	r2, [r3, #0]
 8002d92:	e009      	b.n	8002da8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002da2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002da8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3718      	adds	r7, #24
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	40020010 	.word	0x40020010
 8002db8:	40020028 	.word	0x40020028
 8002dbc:	40020040 	.word	0x40020040
 8002dc0:	40020058 	.word	0x40020058
 8002dc4:	40020070 	.word	0x40020070
 8002dc8:	40020088 	.word	0x40020088
 8002dcc:	400200a0 	.word	0x400200a0
 8002dd0:	400200b8 	.word	0x400200b8
 8002dd4:	40020410 	.word	0x40020410
 8002dd8:	40020428 	.word	0x40020428
 8002ddc:	40020440 	.word	0x40020440
 8002de0:	40020458 	.word	0x40020458
 8002de4:	40020470 	.word	0x40020470
 8002de8:	40020488 	.word	0x40020488
 8002dec:	400204a0 	.word	0x400204a0
 8002df0:	400204b8 	.word	0x400204b8
 8002df4:	58025408 	.word	0x58025408
 8002df8:	5802541c 	.word	0x5802541c
 8002dfc:	58025430 	.word	0x58025430
 8002e00:	58025444 	.word	0x58025444
 8002e04:	58025458 	.word	0x58025458
 8002e08:	5802546c 	.word	0x5802546c
 8002e0c:	58025480 	.word	0x58025480
 8002e10:	58025494 	.word	0x58025494

08002e14 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b086      	sub	sp, #24
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002e1c:	f7ff f85e 	bl	8001edc <HAL_GetTick>
 8002e20:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d101      	bne.n	8002e2c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e2dc      	b.n	80033e6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d008      	beq.n	8002e4a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2280      	movs	r2, #128	; 0x80
 8002e3c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e2cd      	b.n	80033e6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a76      	ldr	r2, [pc, #472]	; (8003028 <HAL_DMA_Abort+0x214>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d04a      	beq.n	8002eea <HAL_DMA_Abort+0xd6>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a74      	ldr	r2, [pc, #464]	; (800302c <HAL_DMA_Abort+0x218>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d045      	beq.n	8002eea <HAL_DMA_Abort+0xd6>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a73      	ldr	r2, [pc, #460]	; (8003030 <HAL_DMA_Abort+0x21c>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d040      	beq.n	8002eea <HAL_DMA_Abort+0xd6>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a71      	ldr	r2, [pc, #452]	; (8003034 <HAL_DMA_Abort+0x220>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d03b      	beq.n	8002eea <HAL_DMA_Abort+0xd6>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a70      	ldr	r2, [pc, #448]	; (8003038 <HAL_DMA_Abort+0x224>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d036      	beq.n	8002eea <HAL_DMA_Abort+0xd6>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a6e      	ldr	r2, [pc, #440]	; (800303c <HAL_DMA_Abort+0x228>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d031      	beq.n	8002eea <HAL_DMA_Abort+0xd6>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a6d      	ldr	r2, [pc, #436]	; (8003040 <HAL_DMA_Abort+0x22c>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d02c      	beq.n	8002eea <HAL_DMA_Abort+0xd6>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a6b      	ldr	r2, [pc, #428]	; (8003044 <HAL_DMA_Abort+0x230>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d027      	beq.n	8002eea <HAL_DMA_Abort+0xd6>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a6a      	ldr	r2, [pc, #424]	; (8003048 <HAL_DMA_Abort+0x234>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d022      	beq.n	8002eea <HAL_DMA_Abort+0xd6>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a68      	ldr	r2, [pc, #416]	; (800304c <HAL_DMA_Abort+0x238>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d01d      	beq.n	8002eea <HAL_DMA_Abort+0xd6>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a67      	ldr	r2, [pc, #412]	; (8003050 <HAL_DMA_Abort+0x23c>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d018      	beq.n	8002eea <HAL_DMA_Abort+0xd6>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a65      	ldr	r2, [pc, #404]	; (8003054 <HAL_DMA_Abort+0x240>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d013      	beq.n	8002eea <HAL_DMA_Abort+0xd6>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a64      	ldr	r2, [pc, #400]	; (8003058 <HAL_DMA_Abort+0x244>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d00e      	beq.n	8002eea <HAL_DMA_Abort+0xd6>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a62      	ldr	r2, [pc, #392]	; (800305c <HAL_DMA_Abort+0x248>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d009      	beq.n	8002eea <HAL_DMA_Abort+0xd6>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a61      	ldr	r2, [pc, #388]	; (8003060 <HAL_DMA_Abort+0x24c>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d004      	beq.n	8002eea <HAL_DMA_Abort+0xd6>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a5f      	ldr	r2, [pc, #380]	; (8003064 <HAL_DMA_Abort+0x250>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d101      	bne.n	8002eee <HAL_DMA_Abort+0xda>
 8002eea:	2301      	movs	r3, #1
 8002eec:	e000      	b.n	8002ef0 <HAL_DMA_Abort+0xdc>
 8002eee:	2300      	movs	r3, #0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d013      	beq.n	8002f1c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f022 021e 	bic.w	r2, r2, #30
 8002f02:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	695a      	ldr	r2, [r3, #20]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f12:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	617b      	str	r3, [r7, #20]
 8002f1a:	e00a      	b.n	8002f32 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f022 020e 	bic.w	r2, r2, #14
 8002f2a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a3c      	ldr	r2, [pc, #240]	; (8003028 <HAL_DMA_Abort+0x214>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d072      	beq.n	8003022 <HAL_DMA_Abort+0x20e>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a3a      	ldr	r2, [pc, #232]	; (800302c <HAL_DMA_Abort+0x218>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d06d      	beq.n	8003022 <HAL_DMA_Abort+0x20e>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a39      	ldr	r2, [pc, #228]	; (8003030 <HAL_DMA_Abort+0x21c>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d068      	beq.n	8003022 <HAL_DMA_Abort+0x20e>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a37      	ldr	r2, [pc, #220]	; (8003034 <HAL_DMA_Abort+0x220>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d063      	beq.n	8003022 <HAL_DMA_Abort+0x20e>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a36      	ldr	r2, [pc, #216]	; (8003038 <HAL_DMA_Abort+0x224>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d05e      	beq.n	8003022 <HAL_DMA_Abort+0x20e>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a34      	ldr	r2, [pc, #208]	; (800303c <HAL_DMA_Abort+0x228>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d059      	beq.n	8003022 <HAL_DMA_Abort+0x20e>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a33      	ldr	r2, [pc, #204]	; (8003040 <HAL_DMA_Abort+0x22c>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d054      	beq.n	8003022 <HAL_DMA_Abort+0x20e>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a31      	ldr	r2, [pc, #196]	; (8003044 <HAL_DMA_Abort+0x230>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d04f      	beq.n	8003022 <HAL_DMA_Abort+0x20e>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a30      	ldr	r2, [pc, #192]	; (8003048 <HAL_DMA_Abort+0x234>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d04a      	beq.n	8003022 <HAL_DMA_Abort+0x20e>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a2e      	ldr	r2, [pc, #184]	; (800304c <HAL_DMA_Abort+0x238>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d045      	beq.n	8003022 <HAL_DMA_Abort+0x20e>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a2d      	ldr	r2, [pc, #180]	; (8003050 <HAL_DMA_Abort+0x23c>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d040      	beq.n	8003022 <HAL_DMA_Abort+0x20e>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a2b      	ldr	r2, [pc, #172]	; (8003054 <HAL_DMA_Abort+0x240>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d03b      	beq.n	8003022 <HAL_DMA_Abort+0x20e>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a2a      	ldr	r2, [pc, #168]	; (8003058 <HAL_DMA_Abort+0x244>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d036      	beq.n	8003022 <HAL_DMA_Abort+0x20e>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a28      	ldr	r2, [pc, #160]	; (800305c <HAL_DMA_Abort+0x248>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d031      	beq.n	8003022 <HAL_DMA_Abort+0x20e>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a27      	ldr	r2, [pc, #156]	; (8003060 <HAL_DMA_Abort+0x24c>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d02c      	beq.n	8003022 <HAL_DMA_Abort+0x20e>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a25      	ldr	r2, [pc, #148]	; (8003064 <HAL_DMA_Abort+0x250>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d027      	beq.n	8003022 <HAL_DMA_Abort+0x20e>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a24      	ldr	r2, [pc, #144]	; (8003068 <HAL_DMA_Abort+0x254>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d022      	beq.n	8003022 <HAL_DMA_Abort+0x20e>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a22      	ldr	r2, [pc, #136]	; (800306c <HAL_DMA_Abort+0x258>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d01d      	beq.n	8003022 <HAL_DMA_Abort+0x20e>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a21      	ldr	r2, [pc, #132]	; (8003070 <HAL_DMA_Abort+0x25c>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d018      	beq.n	8003022 <HAL_DMA_Abort+0x20e>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a1f      	ldr	r2, [pc, #124]	; (8003074 <HAL_DMA_Abort+0x260>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d013      	beq.n	8003022 <HAL_DMA_Abort+0x20e>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a1e      	ldr	r2, [pc, #120]	; (8003078 <HAL_DMA_Abort+0x264>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d00e      	beq.n	8003022 <HAL_DMA_Abort+0x20e>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a1c      	ldr	r2, [pc, #112]	; (800307c <HAL_DMA_Abort+0x268>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d009      	beq.n	8003022 <HAL_DMA_Abort+0x20e>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a1b      	ldr	r2, [pc, #108]	; (8003080 <HAL_DMA_Abort+0x26c>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d004      	beq.n	8003022 <HAL_DMA_Abort+0x20e>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a19      	ldr	r2, [pc, #100]	; (8003084 <HAL_DMA_Abort+0x270>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d132      	bne.n	8003088 <HAL_DMA_Abort+0x274>
 8003022:	2301      	movs	r3, #1
 8003024:	e031      	b.n	800308a <HAL_DMA_Abort+0x276>
 8003026:	bf00      	nop
 8003028:	40020010 	.word	0x40020010
 800302c:	40020028 	.word	0x40020028
 8003030:	40020040 	.word	0x40020040
 8003034:	40020058 	.word	0x40020058
 8003038:	40020070 	.word	0x40020070
 800303c:	40020088 	.word	0x40020088
 8003040:	400200a0 	.word	0x400200a0
 8003044:	400200b8 	.word	0x400200b8
 8003048:	40020410 	.word	0x40020410
 800304c:	40020428 	.word	0x40020428
 8003050:	40020440 	.word	0x40020440
 8003054:	40020458 	.word	0x40020458
 8003058:	40020470 	.word	0x40020470
 800305c:	40020488 	.word	0x40020488
 8003060:	400204a0 	.word	0x400204a0
 8003064:	400204b8 	.word	0x400204b8
 8003068:	58025408 	.word	0x58025408
 800306c:	5802541c 	.word	0x5802541c
 8003070:	58025430 	.word	0x58025430
 8003074:	58025444 	.word	0x58025444
 8003078:	58025458 	.word	0x58025458
 800307c:	5802546c 	.word	0x5802546c
 8003080:	58025480 	.word	0x58025480
 8003084:	58025494 	.word	0x58025494
 8003088:	2300      	movs	r3, #0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d007      	beq.n	800309e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003098:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800309c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a6d      	ldr	r2, [pc, #436]	; (8003258 <HAL_DMA_Abort+0x444>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d04a      	beq.n	800313e <HAL_DMA_Abort+0x32a>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a6b      	ldr	r2, [pc, #428]	; (800325c <HAL_DMA_Abort+0x448>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d045      	beq.n	800313e <HAL_DMA_Abort+0x32a>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a6a      	ldr	r2, [pc, #424]	; (8003260 <HAL_DMA_Abort+0x44c>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d040      	beq.n	800313e <HAL_DMA_Abort+0x32a>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a68      	ldr	r2, [pc, #416]	; (8003264 <HAL_DMA_Abort+0x450>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d03b      	beq.n	800313e <HAL_DMA_Abort+0x32a>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a67      	ldr	r2, [pc, #412]	; (8003268 <HAL_DMA_Abort+0x454>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d036      	beq.n	800313e <HAL_DMA_Abort+0x32a>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a65      	ldr	r2, [pc, #404]	; (800326c <HAL_DMA_Abort+0x458>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d031      	beq.n	800313e <HAL_DMA_Abort+0x32a>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a64      	ldr	r2, [pc, #400]	; (8003270 <HAL_DMA_Abort+0x45c>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d02c      	beq.n	800313e <HAL_DMA_Abort+0x32a>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a62      	ldr	r2, [pc, #392]	; (8003274 <HAL_DMA_Abort+0x460>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d027      	beq.n	800313e <HAL_DMA_Abort+0x32a>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a61      	ldr	r2, [pc, #388]	; (8003278 <HAL_DMA_Abort+0x464>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d022      	beq.n	800313e <HAL_DMA_Abort+0x32a>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a5f      	ldr	r2, [pc, #380]	; (800327c <HAL_DMA_Abort+0x468>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d01d      	beq.n	800313e <HAL_DMA_Abort+0x32a>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a5e      	ldr	r2, [pc, #376]	; (8003280 <HAL_DMA_Abort+0x46c>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d018      	beq.n	800313e <HAL_DMA_Abort+0x32a>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a5c      	ldr	r2, [pc, #368]	; (8003284 <HAL_DMA_Abort+0x470>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d013      	beq.n	800313e <HAL_DMA_Abort+0x32a>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a5b      	ldr	r2, [pc, #364]	; (8003288 <HAL_DMA_Abort+0x474>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d00e      	beq.n	800313e <HAL_DMA_Abort+0x32a>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a59      	ldr	r2, [pc, #356]	; (800328c <HAL_DMA_Abort+0x478>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d009      	beq.n	800313e <HAL_DMA_Abort+0x32a>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a58      	ldr	r2, [pc, #352]	; (8003290 <HAL_DMA_Abort+0x47c>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d004      	beq.n	800313e <HAL_DMA_Abort+0x32a>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a56      	ldr	r2, [pc, #344]	; (8003294 <HAL_DMA_Abort+0x480>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d108      	bne.n	8003150 <HAL_DMA_Abort+0x33c>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f022 0201 	bic.w	r2, r2, #1
 800314c:	601a      	str	r2, [r3, #0]
 800314e:	e007      	b.n	8003160 <HAL_DMA_Abort+0x34c>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f022 0201 	bic.w	r2, r2, #1
 800315e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003160:	e013      	b.n	800318a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003162:	f7fe febb 	bl	8001edc <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	2b05      	cmp	r3, #5
 800316e:	d90c      	bls.n	800318a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2220      	movs	r2, #32
 8003174:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2203      	movs	r2, #3
 8003182:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e12d      	b.n	80033e6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	2b00      	cmp	r3, #0
 8003194:	d1e5      	bne.n	8003162 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a2f      	ldr	r2, [pc, #188]	; (8003258 <HAL_DMA_Abort+0x444>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d04a      	beq.n	8003236 <HAL_DMA_Abort+0x422>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a2d      	ldr	r2, [pc, #180]	; (800325c <HAL_DMA_Abort+0x448>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d045      	beq.n	8003236 <HAL_DMA_Abort+0x422>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a2c      	ldr	r2, [pc, #176]	; (8003260 <HAL_DMA_Abort+0x44c>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d040      	beq.n	8003236 <HAL_DMA_Abort+0x422>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a2a      	ldr	r2, [pc, #168]	; (8003264 <HAL_DMA_Abort+0x450>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d03b      	beq.n	8003236 <HAL_DMA_Abort+0x422>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a29      	ldr	r2, [pc, #164]	; (8003268 <HAL_DMA_Abort+0x454>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d036      	beq.n	8003236 <HAL_DMA_Abort+0x422>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a27      	ldr	r2, [pc, #156]	; (800326c <HAL_DMA_Abort+0x458>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d031      	beq.n	8003236 <HAL_DMA_Abort+0x422>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a26      	ldr	r2, [pc, #152]	; (8003270 <HAL_DMA_Abort+0x45c>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d02c      	beq.n	8003236 <HAL_DMA_Abort+0x422>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a24      	ldr	r2, [pc, #144]	; (8003274 <HAL_DMA_Abort+0x460>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d027      	beq.n	8003236 <HAL_DMA_Abort+0x422>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a23      	ldr	r2, [pc, #140]	; (8003278 <HAL_DMA_Abort+0x464>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d022      	beq.n	8003236 <HAL_DMA_Abort+0x422>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a21      	ldr	r2, [pc, #132]	; (800327c <HAL_DMA_Abort+0x468>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d01d      	beq.n	8003236 <HAL_DMA_Abort+0x422>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a20      	ldr	r2, [pc, #128]	; (8003280 <HAL_DMA_Abort+0x46c>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d018      	beq.n	8003236 <HAL_DMA_Abort+0x422>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a1e      	ldr	r2, [pc, #120]	; (8003284 <HAL_DMA_Abort+0x470>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d013      	beq.n	8003236 <HAL_DMA_Abort+0x422>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a1d      	ldr	r2, [pc, #116]	; (8003288 <HAL_DMA_Abort+0x474>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d00e      	beq.n	8003236 <HAL_DMA_Abort+0x422>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a1b      	ldr	r2, [pc, #108]	; (800328c <HAL_DMA_Abort+0x478>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d009      	beq.n	8003236 <HAL_DMA_Abort+0x422>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a1a      	ldr	r2, [pc, #104]	; (8003290 <HAL_DMA_Abort+0x47c>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d004      	beq.n	8003236 <HAL_DMA_Abort+0x422>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a18      	ldr	r2, [pc, #96]	; (8003294 <HAL_DMA_Abort+0x480>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d101      	bne.n	800323a <HAL_DMA_Abort+0x426>
 8003236:	2301      	movs	r3, #1
 8003238:	e000      	b.n	800323c <HAL_DMA_Abort+0x428>
 800323a:	2300      	movs	r3, #0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d02b      	beq.n	8003298 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003244:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800324a:	f003 031f 	and.w	r3, r3, #31
 800324e:	223f      	movs	r2, #63	; 0x3f
 8003250:	409a      	lsls	r2, r3
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	609a      	str	r2, [r3, #8]
 8003256:	e02a      	b.n	80032ae <HAL_DMA_Abort+0x49a>
 8003258:	40020010 	.word	0x40020010
 800325c:	40020028 	.word	0x40020028
 8003260:	40020040 	.word	0x40020040
 8003264:	40020058 	.word	0x40020058
 8003268:	40020070 	.word	0x40020070
 800326c:	40020088 	.word	0x40020088
 8003270:	400200a0 	.word	0x400200a0
 8003274:	400200b8 	.word	0x400200b8
 8003278:	40020410 	.word	0x40020410
 800327c:	40020428 	.word	0x40020428
 8003280:	40020440 	.word	0x40020440
 8003284:	40020458 	.word	0x40020458
 8003288:	40020470 	.word	0x40020470
 800328c:	40020488 	.word	0x40020488
 8003290:	400204a0 	.word	0x400204a0
 8003294:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800329c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a2:	f003 031f 	and.w	r3, r3, #31
 80032a6:	2201      	movs	r2, #1
 80032a8:	409a      	lsls	r2, r3
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a4f      	ldr	r2, [pc, #316]	; (80033f0 <HAL_DMA_Abort+0x5dc>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d072      	beq.n	800339e <HAL_DMA_Abort+0x58a>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a4d      	ldr	r2, [pc, #308]	; (80033f4 <HAL_DMA_Abort+0x5e0>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d06d      	beq.n	800339e <HAL_DMA_Abort+0x58a>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a4c      	ldr	r2, [pc, #304]	; (80033f8 <HAL_DMA_Abort+0x5e4>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d068      	beq.n	800339e <HAL_DMA_Abort+0x58a>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a4a      	ldr	r2, [pc, #296]	; (80033fc <HAL_DMA_Abort+0x5e8>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d063      	beq.n	800339e <HAL_DMA_Abort+0x58a>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a49      	ldr	r2, [pc, #292]	; (8003400 <HAL_DMA_Abort+0x5ec>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d05e      	beq.n	800339e <HAL_DMA_Abort+0x58a>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a47      	ldr	r2, [pc, #284]	; (8003404 <HAL_DMA_Abort+0x5f0>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d059      	beq.n	800339e <HAL_DMA_Abort+0x58a>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a46      	ldr	r2, [pc, #280]	; (8003408 <HAL_DMA_Abort+0x5f4>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d054      	beq.n	800339e <HAL_DMA_Abort+0x58a>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a44      	ldr	r2, [pc, #272]	; (800340c <HAL_DMA_Abort+0x5f8>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d04f      	beq.n	800339e <HAL_DMA_Abort+0x58a>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a43      	ldr	r2, [pc, #268]	; (8003410 <HAL_DMA_Abort+0x5fc>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d04a      	beq.n	800339e <HAL_DMA_Abort+0x58a>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a41      	ldr	r2, [pc, #260]	; (8003414 <HAL_DMA_Abort+0x600>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d045      	beq.n	800339e <HAL_DMA_Abort+0x58a>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a40      	ldr	r2, [pc, #256]	; (8003418 <HAL_DMA_Abort+0x604>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d040      	beq.n	800339e <HAL_DMA_Abort+0x58a>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a3e      	ldr	r2, [pc, #248]	; (800341c <HAL_DMA_Abort+0x608>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d03b      	beq.n	800339e <HAL_DMA_Abort+0x58a>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a3d      	ldr	r2, [pc, #244]	; (8003420 <HAL_DMA_Abort+0x60c>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d036      	beq.n	800339e <HAL_DMA_Abort+0x58a>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a3b      	ldr	r2, [pc, #236]	; (8003424 <HAL_DMA_Abort+0x610>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d031      	beq.n	800339e <HAL_DMA_Abort+0x58a>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a3a      	ldr	r2, [pc, #232]	; (8003428 <HAL_DMA_Abort+0x614>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d02c      	beq.n	800339e <HAL_DMA_Abort+0x58a>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a38      	ldr	r2, [pc, #224]	; (800342c <HAL_DMA_Abort+0x618>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d027      	beq.n	800339e <HAL_DMA_Abort+0x58a>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a37      	ldr	r2, [pc, #220]	; (8003430 <HAL_DMA_Abort+0x61c>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d022      	beq.n	800339e <HAL_DMA_Abort+0x58a>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a35      	ldr	r2, [pc, #212]	; (8003434 <HAL_DMA_Abort+0x620>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d01d      	beq.n	800339e <HAL_DMA_Abort+0x58a>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a34      	ldr	r2, [pc, #208]	; (8003438 <HAL_DMA_Abort+0x624>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d018      	beq.n	800339e <HAL_DMA_Abort+0x58a>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a32      	ldr	r2, [pc, #200]	; (800343c <HAL_DMA_Abort+0x628>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d013      	beq.n	800339e <HAL_DMA_Abort+0x58a>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a31      	ldr	r2, [pc, #196]	; (8003440 <HAL_DMA_Abort+0x62c>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d00e      	beq.n	800339e <HAL_DMA_Abort+0x58a>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a2f      	ldr	r2, [pc, #188]	; (8003444 <HAL_DMA_Abort+0x630>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d009      	beq.n	800339e <HAL_DMA_Abort+0x58a>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a2e      	ldr	r2, [pc, #184]	; (8003448 <HAL_DMA_Abort+0x634>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d004      	beq.n	800339e <HAL_DMA_Abort+0x58a>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a2c      	ldr	r2, [pc, #176]	; (800344c <HAL_DMA_Abort+0x638>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d101      	bne.n	80033a2 <HAL_DMA_Abort+0x58e>
 800339e:	2301      	movs	r3, #1
 80033a0:	e000      	b.n	80033a4 <HAL_DMA_Abort+0x590>
 80033a2:	2300      	movs	r3, #0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d015      	beq.n	80033d4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80033b0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00c      	beq.n	80033d4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033c8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80033d2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3718      	adds	r7, #24
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	40020010 	.word	0x40020010
 80033f4:	40020028 	.word	0x40020028
 80033f8:	40020040 	.word	0x40020040
 80033fc:	40020058 	.word	0x40020058
 8003400:	40020070 	.word	0x40020070
 8003404:	40020088 	.word	0x40020088
 8003408:	400200a0 	.word	0x400200a0
 800340c:	400200b8 	.word	0x400200b8
 8003410:	40020410 	.word	0x40020410
 8003414:	40020428 	.word	0x40020428
 8003418:	40020440 	.word	0x40020440
 800341c:	40020458 	.word	0x40020458
 8003420:	40020470 	.word	0x40020470
 8003424:	40020488 	.word	0x40020488
 8003428:	400204a0 	.word	0x400204a0
 800342c:	400204b8 	.word	0x400204b8
 8003430:	58025408 	.word	0x58025408
 8003434:	5802541c 	.word	0x5802541c
 8003438:	58025430 	.word	0x58025430
 800343c:	58025444 	.word	0x58025444
 8003440:	58025458 	.word	0x58025458
 8003444:	5802546c 	.word	0x5802546c
 8003448:	58025480 	.word	0x58025480
 800344c:	58025494 	.word	0x58025494

08003450 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e237      	b.n	80038d2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b02      	cmp	r3, #2
 800346c:	d004      	beq.n	8003478 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2280      	movs	r2, #128	; 0x80
 8003472:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e22c      	b.n	80038d2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a5c      	ldr	r2, [pc, #368]	; (80035f0 <HAL_DMA_Abort_IT+0x1a0>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d04a      	beq.n	8003518 <HAL_DMA_Abort_IT+0xc8>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a5b      	ldr	r2, [pc, #364]	; (80035f4 <HAL_DMA_Abort_IT+0x1a4>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d045      	beq.n	8003518 <HAL_DMA_Abort_IT+0xc8>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a59      	ldr	r2, [pc, #356]	; (80035f8 <HAL_DMA_Abort_IT+0x1a8>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d040      	beq.n	8003518 <HAL_DMA_Abort_IT+0xc8>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a58      	ldr	r2, [pc, #352]	; (80035fc <HAL_DMA_Abort_IT+0x1ac>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d03b      	beq.n	8003518 <HAL_DMA_Abort_IT+0xc8>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a56      	ldr	r2, [pc, #344]	; (8003600 <HAL_DMA_Abort_IT+0x1b0>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d036      	beq.n	8003518 <HAL_DMA_Abort_IT+0xc8>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a55      	ldr	r2, [pc, #340]	; (8003604 <HAL_DMA_Abort_IT+0x1b4>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d031      	beq.n	8003518 <HAL_DMA_Abort_IT+0xc8>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a53      	ldr	r2, [pc, #332]	; (8003608 <HAL_DMA_Abort_IT+0x1b8>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d02c      	beq.n	8003518 <HAL_DMA_Abort_IT+0xc8>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a52      	ldr	r2, [pc, #328]	; (800360c <HAL_DMA_Abort_IT+0x1bc>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d027      	beq.n	8003518 <HAL_DMA_Abort_IT+0xc8>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a50      	ldr	r2, [pc, #320]	; (8003610 <HAL_DMA_Abort_IT+0x1c0>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d022      	beq.n	8003518 <HAL_DMA_Abort_IT+0xc8>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a4f      	ldr	r2, [pc, #316]	; (8003614 <HAL_DMA_Abort_IT+0x1c4>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d01d      	beq.n	8003518 <HAL_DMA_Abort_IT+0xc8>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a4d      	ldr	r2, [pc, #308]	; (8003618 <HAL_DMA_Abort_IT+0x1c8>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d018      	beq.n	8003518 <HAL_DMA_Abort_IT+0xc8>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a4c      	ldr	r2, [pc, #304]	; (800361c <HAL_DMA_Abort_IT+0x1cc>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d013      	beq.n	8003518 <HAL_DMA_Abort_IT+0xc8>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a4a      	ldr	r2, [pc, #296]	; (8003620 <HAL_DMA_Abort_IT+0x1d0>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d00e      	beq.n	8003518 <HAL_DMA_Abort_IT+0xc8>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a49      	ldr	r2, [pc, #292]	; (8003624 <HAL_DMA_Abort_IT+0x1d4>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d009      	beq.n	8003518 <HAL_DMA_Abort_IT+0xc8>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a47      	ldr	r2, [pc, #284]	; (8003628 <HAL_DMA_Abort_IT+0x1d8>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d004      	beq.n	8003518 <HAL_DMA_Abort_IT+0xc8>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a46      	ldr	r2, [pc, #280]	; (800362c <HAL_DMA_Abort_IT+0x1dc>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d101      	bne.n	800351c <HAL_DMA_Abort_IT+0xcc>
 8003518:	2301      	movs	r3, #1
 800351a:	e000      	b.n	800351e <HAL_DMA_Abort_IT+0xce>
 800351c:	2300      	movs	r3, #0
 800351e:	2b00      	cmp	r3, #0
 8003520:	f000 8086 	beq.w	8003630 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2204      	movs	r2, #4
 8003528:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a2f      	ldr	r2, [pc, #188]	; (80035f0 <HAL_DMA_Abort_IT+0x1a0>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d04a      	beq.n	80035cc <HAL_DMA_Abort_IT+0x17c>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a2e      	ldr	r2, [pc, #184]	; (80035f4 <HAL_DMA_Abort_IT+0x1a4>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d045      	beq.n	80035cc <HAL_DMA_Abort_IT+0x17c>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a2c      	ldr	r2, [pc, #176]	; (80035f8 <HAL_DMA_Abort_IT+0x1a8>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d040      	beq.n	80035cc <HAL_DMA_Abort_IT+0x17c>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a2b      	ldr	r2, [pc, #172]	; (80035fc <HAL_DMA_Abort_IT+0x1ac>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d03b      	beq.n	80035cc <HAL_DMA_Abort_IT+0x17c>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a29      	ldr	r2, [pc, #164]	; (8003600 <HAL_DMA_Abort_IT+0x1b0>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d036      	beq.n	80035cc <HAL_DMA_Abort_IT+0x17c>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a28      	ldr	r2, [pc, #160]	; (8003604 <HAL_DMA_Abort_IT+0x1b4>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d031      	beq.n	80035cc <HAL_DMA_Abort_IT+0x17c>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a26      	ldr	r2, [pc, #152]	; (8003608 <HAL_DMA_Abort_IT+0x1b8>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d02c      	beq.n	80035cc <HAL_DMA_Abort_IT+0x17c>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a25      	ldr	r2, [pc, #148]	; (800360c <HAL_DMA_Abort_IT+0x1bc>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d027      	beq.n	80035cc <HAL_DMA_Abort_IT+0x17c>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a23      	ldr	r2, [pc, #140]	; (8003610 <HAL_DMA_Abort_IT+0x1c0>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d022      	beq.n	80035cc <HAL_DMA_Abort_IT+0x17c>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a22      	ldr	r2, [pc, #136]	; (8003614 <HAL_DMA_Abort_IT+0x1c4>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d01d      	beq.n	80035cc <HAL_DMA_Abort_IT+0x17c>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a20      	ldr	r2, [pc, #128]	; (8003618 <HAL_DMA_Abort_IT+0x1c8>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d018      	beq.n	80035cc <HAL_DMA_Abort_IT+0x17c>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a1f      	ldr	r2, [pc, #124]	; (800361c <HAL_DMA_Abort_IT+0x1cc>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d013      	beq.n	80035cc <HAL_DMA_Abort_IT+0x17c>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a1d      	ldr	r2, [pc, #116]	; (8003620 <HAL_DMA_Abort_IT+0x1d0>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d00e      	beq.n	80035cc <HAL_DMA_Abort_IT+0x17c>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a1c      	ldr	r2, [pc, #112]	; (8003624 <HAL_DMA_Abort_IT+0x1d4>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d009      	beq.n	80035cc <HAL_DMA_Abort_IT+0x17c>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a1a      	ldr	r2, [pc, #104]	; (8003628 <HAL_DMA_Abort_IT+0x1d8>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d004      	beq.n	80035cc <HAL_DMA_Abort_IT+0x17c>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a19      	ldr	r2, [pc, #100]	; (800362c <HAL_DMA_Abort_IT+0x1dc>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d108      	bne.n	80035de <HAL_DMA_Abort_IT+0x18e>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f022 0201 	bic.w	r2, r2, #1
 80035da:	601a      	str	r2, [r3, #0]
 80035dc:	e178      	b.n	80038d0 <HAL_DMA_Abort_IT+0x480>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f022 0201 	bic.w	r2, r2, #1
 80035ec:	601a      	str	r2, [r3, #0]
 80035ee:	e16f      	b.n	80038d0 <HAL_DMA_Abort_IT+0x480>
 80035f0:	40020010 	.word	0x40020010
 80035f4:	40020028 	.word	0x40020028
 80035f8:	40020040 	.word	0x40020040
 80035fc:	40020058 	.word	0x40020058
 8003600:	40020070 	.word	0x40020070
 8003604:	40020088 	.word	0x40020088
 8003608:	400200a0 	.word	0x400200a0
 800360c:	400200b8 	.word	0x400200b8
 8003610:	40020410 	.word	0x40020410
 8003614:	40020428 	.word	0x40020428
 8003618:	40020440 	.word	0x40020440
 800361c:	40020458 	.word	0x40020458
 8003620:	40020470 	.word	0x40020470
 8003624:	40020488 	.word	0x40020488
 8003628:	400204a0 	.word	0x400204a0
 800362c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f022 020e 	bic.w	r2, r2, #14
 800363e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a6c      	ldr	r2, [pc, #432]	; (80037f8 <HAL_DMA_Abort_IT+0x3a8>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d04a      	beq.n	80036e0 <HAL_DMA_Abort_IT+0x290>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a6b      	ldr	r2, [pc, #428]	; (80037fc <HAL_DMA_Abort_IT+0x3ac>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d045      	beq.n	80036e0 <HAL_DMA_Abort_IT+0x290>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a69      	ldr	r2, [pc, #420]	; (8003800 <HAL_DMA_Abort_IT+0x3b0>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d040      	beq.n	80036e0 <HAL_DMA_Abort_IT+0x290>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a68      	ldr	r2, [pc, #416]	; (8003804 <HAL_DMA_Abort_IT+0x3b4>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d03b      	beq.n	80036e0 <HAL_DMA_Abort_IT+0x290>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a66      	ldr	r2, [pc, #408]	; (8003808 <HAL_DMA_Abort_IT+0x3b8>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d036      	beq.n	80036e0 <HAL_DMA_Abort_IT+0x290>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a65      	ldr	r2, [pc, #404]	; (800380c <HAL_DMA_Abort_IT+0x3bc>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d031      	beq.n	80036e0 <HAL_DMA_Abort_IT+0x290>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a63      	ldr	r2, [pc, #396]	; (8003810 <HAL_DMA_Abort_IT+0x3c0>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d02c      	beq.n	80036e0 <HAL_DMA_Abort_IT+0x290>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a62      	ldr	r2, [pc, #392]	; (8003814 <HAL_DMA_Abort_IT+0x3c4>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d027      	beq.n	80036e0 <HAL_DMA_Abort_IT+0x290>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a60      	ldr	r2, [pc, #384]	; (8003818 <HAL_DMA_Abort_IT+0x3c8>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d022      	beq.n	80036e0 <HAL_DMA_Abort_IT+0x290>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a5f      	ldr	r2, [pc, #380]	; (800381c <HAL_DMA_Abort_IT+0x3cc>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d01d      	beq.n	80036e0 <HAL_DMA_Abort_IT+0x290>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a5d      	ldr	r2, [pc, #372]	; (8003820 <HAL_DMA_Abort_IT+0x3d0>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d018      	beq.n	80036e0 <HAL_DMA_Abort_IT+0x290>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a5c      	ldr	r2, [pc, #368]	; (8003824 <HAL_DMA_Abort_IT+0x3d4>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d013      	beq.n	80036e0 <HAL_DMA_Abort_IT+0x290>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a5a      	ldr	r2, [pc, #360]	; (8003828 <HAL_DMA_Abort_IT+0x3d8>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d00e      	beq.n	80036e0 <HAL_DMA_Abort_IT+0x290>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a59      	ldr	r2, [pc, #356]	; (800382c <HAL_DMA_Abort_IT+0x3dc>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d009      	beq.n	80036e0 <HAL_DMA_Abort_IT+0x290>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a57      	ldr	r2, [pc, #348]	; (8003830 <HAL_DMA_Abort_IT+0x3e0>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d004      	beq.n	80036e0 <HAL_DMA_Abort_IT+0x290>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a56      	ldr	r2, [pc, #344]	; (8003834 <HAL_DMA_Abort_IT+0x3e4>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d108      	bne.n	80036f2 <HAL_DMA_Abort_IT+0x2a2>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f022 0201 	bic.w	r2, r2, #1
 80036ee:	601a      	str	r2, [r3, #0]
 80036f0:	e007      	b.n	8003702 <HAL_DMA_Abort_IT+0x2b2>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f022 0201 	bic.w	r2, r2, #1
 8003700:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a3c      	ldr	r2, [pc, #240]	; (80037f8 <HAL_DMA_Abort_IT+0x3a8>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d072      	beq.n	80037f2 <HAL_DMA_Abort_IT+0x3a2>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a3a      	ldr	r2, [pc, #232]	; (80037fc <HAL_DMA_Abort_IT+0x3ac>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d06d      	beq.n	80037f2 <HAL_DMA_Abort_IT+0x3a2>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a39      	ldr	r2, [pc, #228]	; (8003800 <HAL_DMA_Abort_IT+0x3b0>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d068      	beq.n	80037f2 <HAL_DMA_Abort_IT+0x3a2>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a37      	ldr	r2, [pc, #220]	; (8003804 <HAL_DMA_Abort_IT+0x3b4>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d063      	beq.n	80037f2 <HAL_DMA_Abort_IT+0x3a2>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a36      	ldr	r2, [pc, #216]	; (8003808 <HAL_DMA_Abort_IT+0x3b8>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d05e      	beq.n	80037f2 <HAL_DMA_Abort_IT+0x3a2>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a34      	ldr	r2, [pc, #208]	; (800380c <HAL_DMA_Abort_IT+0x3bc>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d059      	beq.n	80037f2 <HAL_DMA_Abort_IT+0x3a2>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a33      	ldr	r2, [pc, #204]	; (8003810 <HAL_DMA_Abort_IT+0x3c0>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d054      	beq.n	80037f2 <HAL_DMA_Abort_IT+0x3a2>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a31      	ldr	r2, [pc, #196]	; (8003814 <HAL_DMA_Abort_IT+0x3c4>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d04f      	beq.n	80037f2 <HAL_DMA_Abort_IT+0x3a2>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a30      	ldr	r2, [pc, #192]	; (8003818 <HAL_DMA_Abort_IT+0x3c8>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d04a      	beq.n	80037f2 <HAL_DMA_Abort_IT+0x3a2>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a2e      	ldr	r2, [pc, #184]	; (800381c <HAL_DMA_Abort_IT+0x3cc>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d045      	beq.n	80037f2 <HAL_DMA_Abort_IT+0x3a2>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a2d      	ldr	r2, [pc, #180]	; (8003820 <HAL_DMA_Abort_IT+0x3d0>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d040      	beq.n	80037f2 <HAL_DMA_Abort_IT+0x3a2>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a2b      	ldr	r2, [pc, #172]	; (8003824 <HAL_DMA_Abort_IT+0x3d4>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d03b      	beq.n	80037f2 <HAL_DMA_Abort_IT+0x3a2>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a2a      	ldr	r2, [pc, #168]	; (8003828 <HAL_DMA_Abort_IT+0x3d8>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d036      	beq.n	80037f2 <HAL_DMA_Abort_IT+0x3a2>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a28      	ldr	r2, [pc, #160]	; (800382c <HAL_DMA_Abort_IT+0x3dc>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d031      	beq.n	80037f2 <HAL_DMA_Abort_IT+0x3a2>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a27      	ldr	r2, [pc, #156]	; (8003830 <HAL_DMA_Abort_IT+0x3e0>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d02c      	beq.n	80037f2 <HAL_DMA_Abort_IT+0x3a2>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a25      	ldr	r2, [pc, #148]	; (8003834 <HAL_DMA_Abort_IT+0x3e4>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d027      	beq.n	80037f2 <HAL_DMA_Abort_IT+0x3a2>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a24      	ldr	r2, [pc, #144]	; (8003838 <HAL_DMA_Abort_IT+0x3e8>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d022      	beq.n	80037f2 <HAL_DMA_Abort_IT+0x3a2>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a22      	ldr	r2, [pc, #136]	; (800383c <HAL_DMA_Abort_IT+0x3ec>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d01d      	beq.n	80037f2 <HAL_DMA_Abort_IT+0x3a2>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a21      	ldr	r2, [pc, #132]	; (8003840 <HAL_DMA_Abort_IT+0x3f0>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d018      	beq.n	80037f2 <HAL_DMA_Abort_IT+0x3a2>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a1f      	ldr	r2, [pc, #124]	; (8003844 <HAL_DMA_Abort_IT+0x3f4>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d013      	beq.n	80037f2 <HAL_DMA_Abort_IT+0x3a2>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a1e      	ldr	r2, [pc, #120]	; (8003848 <HAL_DMA_Abort_IT+0x3f8>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d00e      	beq.n	80037f2 <HAL_DMA_Abort_IT+0x3a2>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a1c      	ldr	r2, [pc, #112]	; (800384c <HAL_DMA_Abort_IT+0x3fc>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d009      	beq.n	80037f2 <HAL_DMA_Abort_IT+0x3a2>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a1b      	ldr	r2, [pc, #108]	; (8003850 <HAL_DMA_Abort_IT+0x400>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d004      	beq.n	80037f2 <HAL_DMA_Abort_IT+0x3a2>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a19      	ldr	r2, [pc, #100]	; (8003854 <HAL_DMA_Abort_IT+0x404>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d132      	bne.n	8003858 <HAL_DMA_Abort_IT+0x408>
 80037f2:	2301      	movs	r3, #1
 80037f4:	e031      	b.n	800385a <HAL_DMA_Abort_IT+0x40a>
 80037f6:	bf00      	nop
 80037f8:	40020010 	.word	0x40020010
 80037fc:	40020028 	.word	0x40020028
 8003800:	40020040 	.word	0x40020040
 8003804:	40020058 	.word	0x40020058
 8003808:	40020070 	.word	0x40020070
 800380c:	40020088 	.word	0x40020088
 8003810:	400200a0 	.word	0x400200a0
 8003814:	400200b8 	.word	0x400200b8
 8003818:	40020410 	.word	0x40020410
 800381c:	40020428 	.word	0x40020428
 8003820:	40020440 	.word	0x40020440
 8003824:	40020458 	.word	0x40020458
 8003828:	40020470 	.word	0x40020470
 800382c:	40020488 	.word	0x40020488
 8003830:	400204a0 	.word	0x400204a0
 8003834:	400204b8 	.word	0x400204b8
 8003838:	58025408 	.word	0x58025408
 800383c:	5802541c 	.word	0x5802541c
 8003840:	58025430 	.word	0x58025430
 8003844:	58025444 	.word	0x58025444
 8003848:	58025458 	.word	0x58025458
 800384c:	5802546c 	.word	0x5802546c
 8003850:	58025480 	.word	0x58025480
 8003854:	58025494 	.word	0x58025494
 8003858:	2300      	movs	r3, #0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d028      	beq.n	80038b0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003868:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800386c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003872:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003878:	f003 031f 	and.w	r3, r3, #31
 800387c:	2201      	movs	r2, #1
 800387e:	409a      	lsls	r2, r3
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800388c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00c      	beq.n	80038b0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038a4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80038ae:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d003      	beq.n	80038d0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3710      	adds	r7, #16
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop

080038dc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b08a      	sub	sp, #40	; 0x28
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80038e4:	2300      	movs	r3, #0
 80038e6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80038e8:	4b67      	ldr	r3, [pc, #412]	; (8003a88 <HAL_DMA_IRQHandler+0x1ac>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a67      	ldr	r2, [pc, #412]	; (8003a8c <HAL_DMA_IRQHandler+0x1b0>)
 80038ee:	fba2 2303 	umull	r2, r3, r2, r3
 80038f2:	0a9b      	lsrs	r3, r3, #10
 80038f4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038fa:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003900:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003902:	6a3b      	ldr	r3, [r7, #32]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a5f      	ldr	r2, [pc, #380]	; (8003a90 <HAL_DMA_IRQHandler+0x1b4>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d04a      	beq.n	80039ae <HAL_DMA_IRQHandler+0xd2>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a5d      	ldr	r2, [pc, #372]	; (8003a94 <HAL_DMA_IRQHandler+0x1b8>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d045      	beq.n	80039ae <HAL_DMA_IRQHandler+0xd2>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a5c      	ldr	r2, [pc, #368]	; (8003a98 <HAL_DMA_IRQHandler+0x1bc>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d040      	beq.n	80039ae <HAL_DMA_IRQHandler+0xd2>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a5a      	ldr	r2, [pc, #360]	; (8003a9c <HAL_DMA_IRQHandler+0x1c0>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d03b      	beq.n	80039ae <HAL_DMA_IRQHandler+0xd2>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a59      	ldr	r2, [pc, #356]	; (8003aa0 <HAL_DMA_IRQHandler+0x1c4>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d036      	beq.n	80039ae <HAL_DMA_IRQHandler+0xd2>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a57      	ldr	r2, [pc, #348]	; (8003aa4 <HAL_DMA_IRQHandler+0x1c8>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d031      	beq.n	80039ae <HAL_DMA_IRQHandler+0xd2>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a56      	ldr	r2, [pc, #344]	; (8003aa8 <HAL_DMA_IRQHandler+0x1cc>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d02c      	beq.n	80039ae <HAL_DMA_IRQHandler+0xd2>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a54      	ldr	r2, [pc, #336]	; (8003aac <HAL_DMA_IRQHandler+0x1d0>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d027      	beq.n	80039ae <HAL_DMA_IRQHandler+0xd2>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a53      	ldr	r2, [pc, #332]	; (8003ab0 <HAL_DMA_IRQHandler+0x1d4>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d022      	beq.n	80039ae <HAL_DMA_IRQHandler+0xd2>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a51      	ldr	r2, [pc, #324]	; (8003ab4 <HAL_DMA_IRQHandler+0x1d8>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d01d      	beq.n	80039ae <HAL_DMA_IRQHandler+0xd2>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a50      	ldr	r2, [pc, #320]	; (8003ab8 <HAL_DMA_IRQHandler+0x1dc>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d018      	beq.n	80039ae <HAL_DMA_IRQHandler+0xd2>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a4e      	ldr	r2, [pc, #312]	; (8003abc <HAL_DMA_IRQHandler+0x1e0>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d013      	beq.n	80039ae <HAL_DMA_IRQHandler+0xd2>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a4d      	ldr	r2, [pc, #308]	; (8003ac0 <HAL_DMA_IRQHandler+0x1e4>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d00e      	beq.n	80039ae <HAL_DMA_IRQHandler+0xd2>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a4b      	ldr	r2, [pc, #300]	; (8003ac4 <HAL_DMA_IRQHandler+0x1e8>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d009      	beq.n	80039ae <HAL_DMA_IRQHandler+0xd2>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a4a      	ldr	r2, [pc, #296]	; (8003ac8 <HAL_DMA_IRQHandler+0x1ec>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d004      	beq.n	80039ae <HAL_DMA_IRQHandler+0xd2>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a48      	ldr	r2, [pc, #288]	; (8003acc <HAL_DMA_IRQHandler+0x1f0>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d101      	bne.n	80039b2 <HAL_DMA_IRQHandler+0xd6>
 80039ae:	2301      	movs	r3, #1
 80039b0:	e000      	b.n	80039b4 <HAL_DMA_IRQHandler+0xd8>
 80039b2:	2300      	movs	r3, #0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	f000 842b 	beq.w	8004210 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039be:	f003 031f 	and.w	r3, r3, #31
 80039c2:	2208      	movs	r2, #8
 80039c4:	409a      	lsls	r2, r3
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	4013      	ands	r3, r2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f000 80a2 	beq.w	8003b14 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a2e      	ldr	r2, [pc, #184]	; (8003a90 <HAL_DMA_IRQHandler+0x1b4>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d04a      	beq.n	8003a70 <HAL_DMA_IRQHandler+0x194>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a2d      	ldr	r2, [pc, #180]	; (8003a94 <HAL_DMA_IRQHandler+0x1b8>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d045      	beq.n	8003a70 <HAL_DMA_IRQHandler+0x194>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a2b      	ldr	r2, [pc, #172]	; (8003a98 <HAL_DMA_IRQHandler+0x1bc>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d040      	beq.n	8003a70 <HAL_DMA_IRQHandler+0x194>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a2a      	ldr	r2, [pc, #168]	; (8003a9c <HAL_DMA_IRQHandler+0x1c0>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d03b      	beq.n	8003a70 <HAL_DMA_IRQHandler+0x194>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a28      	ldr	r2, [pc, #160]	; (8003aa0 <HAL_DMA_IRQHandler+0x1c4>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d036      	beq.n	8003a70 <HAL_DMA_IRQHandler+0x194>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a27      	ldr	r2, [pc, #156]	; (8003aa4 <HAL_DMA_IRQHandler+0x1c8>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d031      	beq.n	8003a70 <HAL_DMA_IRQHandler+0x194>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a25      	ldr	r2, [pc, #148]	; (8003aa8 <HAL_DMA_IRQHandler+0x1cc>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d02c      	beq.n	8003a70 <HAL_DMA_IRQHandler+0x194>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a24      	ldr	r2, [pc, #144]	; (8003aac <HAL_DMA_IRQHandler+0x1d0>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d027      	beq.n	8003a70 <HAL_DMA_IRQHandler+0x194>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a22      	ldr	r2, [pc, #136]	; (8003ab0 <HAL_DMA_IRQHandler+0x1d4>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d022      	beq.n	8003a70 <HAL_DMA_IRQHandler+0x194>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a21      	ldr	r2, [pc, #132]	; (8003ab4 <HAL_DMA_IRQHandler+0x1d8>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d01d      	beq.n	8003a70 <HAL_DMA_IRQHandler+0x194>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a1f      	ldr	r2, [pc, #124]	; (8003ab8 <HAL_DMA_IRQHandler+0x1dc>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d018      	beq.n	8003a70 <HAL_DMA_IRQHandler+0x194>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a1e      	ldr	r2, [pc, #120]	; (8003abc <HAL_DMA_IRQHandler+0x1e0>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d013      	beq.n	8003a70 <HAL_DMA_IRQHandler+0x194>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a1c      	ldr	r2, [pc, #112]	; (8003ac0 <HAL_DMA_IRQHandler+0x1e4>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d00e      	beq.n	8003a70 <HAL_DMA_IRQHandler+0x194>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a1b      	ldr	r2, [pc, #108]	; (8003ac4 <HAL_DMA_IRQHandler+0x1e8>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d009      	beq.n	8003a70 <HAL_DMA_IRQHandler+0x194>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a19      	ldr	r2, [pc, #100]	; (8003ac8 <HAL_DMA_IRQHandler+0x1ec>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d004      	beq.n	8003a70 <HAL_DMA_IRQHandler+0x194>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a18      	ldr	r2, [pc, #96]	; (8003acc <HAL_DMA_IRQHandler+0x1f0>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d12f      	bne.n	8003ad0 <HAL_DMA_IRQHandler+0x1f4>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0304 	and.w	r3, r3, #4
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	bf14      	ite	ne
 8003a7e:	2301      	movne	r3, #1
 8003a80:	2300      	moveq	r3, #0
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	e02e      	b.n	8003ae4 <HAL_DMA_IRQHandler+0x208>
 8003a86:	bf00      	nop
 8003a88:	24000000 	.word	0x24000000
 8003a8c:	1b4e81b5 	.word	0x1b4e81b5
 8003a90:	40020010 	.word	0x40020010
 8003a94:	40020028 	.word	0x40020028
 8003a98:	40020040 	.word	0x40020040
 8003a9c:	40020058 	.word	0x40020058
 8003aa0:	40020070 	.word	0x40020070
 8003aa4:	40020088 	.word	0x40020088
 8003aa8:	400200a0 	.word	0x400200a0
 8003aac:	400200b8 	.word	0x400200b8
 8003ab0:	40020410 	.word	0x40020410
 8003ab4:	40020428 	.word	0x40020428
 8003ab8:	40020440 	.word	0x40020440
 8003abc:	40020458 	.word	0x40020458
 8003ac0:	40020470 	.word	0x40020470
 8003ac4:	40020488 	.word	0x40020488
 8003ac8:	400204a0 	.word	0x400204a0
 8003acc:	400204b8 	.word	0x400204b8
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0308 	and.w	r3, r3, #8
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	bf14      	ite	ne
 8003ade:	2301      	movne	r3, #1
 8003ae0:	2300      	moveq	r3, #0
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d015      	beq.n	8003b14 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f022 0204 	bic.w	r2, r2, #4
 8003af6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003afc:	f003 031f 	and.w	r3, r3, #31
 8003b00:	2208      	movs	r2, #8
 8003b02:	409a      	lsls	r2, r3
 8003b04:	6a3b      	ldr	r3, [r7, #32]
 8003b06:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b0c:	f043 0201 	orr.w	r2, r3, #1
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b18:	f003 031f 	and.w	r3, r3, #31
 8003b1c:	69ba      	ldr	r2, [r7, #24]
 8003b1e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d06e      	beq.n	8003c08 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a69      	ldr	r2, [pc, #420]	; (8003cd4 <HAL_DMA_IRQHandler+0x3f8>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d04a      	beq.n	8003bca <HAL_DMA_IRQHandler+0x2ee>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a67      	ldr	r2, [pc, #412]	; (8003cd8 <HAL_DMA_IRQHandler+0x3fc>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d045      	beq.n	8003bca <HAL_DMA_IRQHandler+0x2ee>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a66      	ldr	r2, [pc, #408]	; (8003cdc <HAL_DMA_IRQHandler+0x400>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d040      	beq.n	8003bca <HAL_DMA_IRQHandler+0x2ee>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a64      	ldr	r2, [pc, #400]	; (8003ce0 <HAL_DMA_IRQHandler+0x404>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d03b      	beq.n	8003bca <HAL_DMA_IRQHandler+0x2ee>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a63      	ldr	r2, [pc, #396]	; (8003ce4 <HAL_DMA_IRQHandler+0x408>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d036      	beq.n	8003bca <HAL_DMA_IRQHandler+0x2ee>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a61      	ldr	r2, [pc, #388]	; (8003ce8 <HAL_DMA_IRQHandler+0x40c>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d031      	beq.n	8003bca <HAL_DMA_IRQHandler+0x2ee>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a60      	ldr	r2, [pc, #384]	; (8003cec <HAL_DMA_IRQHandler+0x410>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d02c      	beq.n	8003bca <HAL_DMA_IRQHandler+0x2ee>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a5e      	ldr	r2, [pc, #376]	; (8003cf0 <HAL_DMA_IRQHandler+0x414>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d027      	beq.n	8003bca <HAL_DMA_IRQHandler+0x2ee>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a5d      	ldr	r2, [pc, #372]	; (8003cf4 <HAL_DMA_IRQHandler+0x418>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d022      	beq.n	8003bca <HAL_DMA_IRQHandler+0x2ee>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a5b      	ldr	r2, [pc, #364]	; (8003cf8 <HAL_DMA_IRQHandler+0x41c>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d01d      	beq.n	8003bca <HAL_DMA_IRQHandler+0x2ee>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a5a      	ldr	r2, [pc, #360]	; (8003cfc <HAL_DMA_IRQHandler+0x420>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d018      	beq.n	8003bca <HAL_DMA_IRQHandler+0x2ee>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a58      	ldr	r2, [pc, #352]	; (8003d00 <HAL_DMA_IRQHandler+0x424>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d013      	beq.n	8003bca <HAL_DMA_IRQHandler+0x2ee>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a57      	ldr	r2, [pc, #348]	; (8003d04 <HAL_DMA_IRQHandler+0x428>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d00e      	beq.n	8003bca <HAL_DMA_IRQHandler+0x2ee>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a55      	ldr	r2, [pc, #340]	; (8003d08 <HAL_DMA_IRQHandler+0x42c>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d009      	beq.n	8003bca <HAL_DMA_IRQHandler+0x2ee>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a54      	ldr	r2, [pc, #336]	; (8003d0c <HAL_DMA_IRQHandler+0x430>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d004      	beq.n	8003bca <HAL_DMA_IRQHandler+0x2ee>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a52      	ldr	r2, [pc, #328]	; (8003d10 <HAL_DMA_IRQHandler+0x434>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d10a      	bne.n	8003be0 <HAL_DMA_IRQHandler+0x304>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	695b      	ldr	r3, [r3, #20]
 8003bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	bf14      	ite	ne
 8003bd8:	2301      	movne	r3, #1
 8003bda:	2300      	moveq	r3, #0
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	e003      	b.n	8003be8 <HAL_DMA_IRQHandler+0x30c>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2300      	movs	r3, #0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d00d      	beq.n	8003c08 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bf0:	f003 031f 	and.w	r3, r3, #31
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	409a      	lsls	r2, r3
 8003bf8:	6a3b      	ldr	r3, [r7, #32]
 8003bfa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c00:	f043 0202 	orr.w	r2, r3, #2
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c0c:	f003 031f 	and.w	r3, r3, #31
 8003c10:	2204      	movs	r2, #4
 8003c12:	409a      	lsls	r2, r3
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	4013      	ands	r3, r2
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	f000 808f 	beq.w	8003d3c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a2c      	ldr	r2, [pc, #176]	; (8003cd4 <HAL_DMA_IRQHandler+0x3f8>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d04a      	beq.n	8003cbe <HAL_DMA_IRQHandler+0x3e2>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a2a      	ldr	r2, [pc, #168]	; (8003cd8 <HAL_DMA_IRQHandler+0x3fc>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d045      	beq.n	8003cbe <HAL_DMA_IRQHandler+0x3e2>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a29      	ldr	r2, [pc, #164]	; (8003cdc <HAL_DMA_IRQHandler+0x400>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d040      	beq.n	8003cbe <HAL_DMA_IRQHandler+0x3e2>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a27      	ldr	r2, [pc, #156]	; (8003ce0 <HAL_DMA_IRQHandler+0x404>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d03b      	beq.n	8003cbe <HAL_DMA_IRQHandler+0x3e2>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a26      	ldr	r2, [pc, #152]	; (8003ce4 <HAL_DMA_IRQHandler+0x408>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d036      	beq.n	8003cbe <HAL_DMA_IRQHandler+0x3e2>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a24      	ldr	r2, [pc, #144]	; (8003ce8 <HAL_DMA_IRQHandler+0x40c>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d031      	beq.n	8003cbe <HAL_DMA_IRQHandler+0x3e2>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a23      	ldr	r2, [pc, #140]	; (8003cec <HAL_DMA_IRQHandler+0x410>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d02c      	beq.n	8003cbe <HAL_DMA_IRQHandler+0x3e2>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a21      	ldr	r2, [pc, #132]	; (8003cf0 <HAL_DMA_IRQHandler+0x414>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d027      	beq.n	8003cbe <HAL_DMA_IRQHandler+0x3e2>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a20      	ldr	r2, [pc, #128]	; (8003cf4 <HAL_DMA_IRQHandler+0x418>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d022      	beq.n	8003cbe <HAL_DMA_IRQHandler+0x3e2>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a1e      	ldr	r2, [pc, #120]	; (8003cf8 <HAL_DMA_IRQHandler+0x41c>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d01d      	beq.n	8003cbe <HAL_DMA_IRQHandler+0x3e2>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a1d      	ldr	r2, [pc, #116]	; (8003cfc <HAL_DMA_IRQHandler+0x420>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d018      	beq.n	8003cbe <HAL_DMA_IRQHandler+0x3e2>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a1b      	ldr	r2, [pc, #108]	; (8003d00 <HAL_DMA_IRQHandler+0x424>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d013      	beq.n	8003cbe <HAL_DMA_IRQHandler+0x3e2>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a1a      	ldr	r2, [pc, #104]	; (8003d04 <HAL_DMA_IRQHandler+0x428>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d00e      	beq.n	8003cbe <HAL_DMA_IRQHandler+0x3e2>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a18      	ldr	r2, [pc, #96]	; (8003d08 <HAL_DMA_IRQHandler+0x42c>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d009      	beq.n	8003cbe <HAL_DMA_IRQHandler+0x3e2>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a17      	ldr	r2, [pc, #92]	; (8003d0c <HAL_DMA_IRQHandler+0x430>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d004      	beq.n	8003cbe <HAL_DMA_IRQHandler+0x3e2>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a15      	ldr	r2, [pc, #84]	; (8003d10 <HAL_DMA_IRQHandler+0x434>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d12a      	bne.n	8003d14 <HAL_DMA_IRQHandler+0x438>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0302 	and.w	r3, r3, #2
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	bf14      	ite	ne
 8003ccc:	2301      	movne	r3, #1
 8003cce:	2300      	moveq	r3, #0
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	e023      	b.n	8003d1c <HAL_DMA_IRQHandler+0x440>
 8003cd4:	40020010 	.word	0x40020010
 8003cd8:	40020028 	.word	0x40020028
 8003cdc:	40020040 	.word	0x40020040
 8003ce0:	40020058 	.word	0x40020058
 8003ce4:	40020070 	.word	0x40020070
 8003ce8:	40020088 	.word	0x40020088
 8003cec:	400200a0 	.word	0x400200a0
 8003cf0:	400200b8 	.word	0x400200b8
 8003cf4:	40020410 	.word	0x40020410
 8003cf8:	40020428 	.word	0x40020428
 8003cfc:	40020440 	.word	0x40020440
 8003d00:	40020458 	.word	0x40020458
 8003d04:	40020470 	.word	0x40020470
 8003d08:	40020488 	.word	0x40020488
 8003d0c:	400204a0 	.word	0x400204a0
 8003d10:	400204b8 	.word	0x400204b8
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00d      	beq.n	8003d3c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d24:	f003 031f 	and.w	r3, r3, #31
 8003d28:	2204      	movs	r2, #4
 8003d2a:	409a      	lsls	r2, r3
 8003d2c:	6a3b      	ldr	r3, [r7, #32]
 8003d2e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d34:	f043 0204 	orr.w	r2, r3, #4
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d40:	f003 031f 	and.w	r3, r3, #31
 8003d44:	2210      	movs	r2, #16
 8003d46:	409a      	lsls	r2, r3
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f000 80a6 	beq.w	8003e9e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a85      	ldr	r2, [pc, #532]	; (8003f6c <HAL_DMA_IRQHandler+0x690>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d04a      	beq.n	8003df2 <HAL_DMA_IRQHandler+0x516>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a83      	ldr	r2, [pc, #524]	; (8003f70 <HAL_DMA_IRQHandler+0x694>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d045      	beq.n	8003df2 <HAL_DMA_IRQHandler+0x516>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a82      	ldr	r2, [pc, #520]	; (8003f74 <HAL_DMA_IRQHandler+0x698>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d040      	beq.n	8003df2 <HAL_DMA_IRQHandler+0x516>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a80      	ldr	r2, [pc, #512]	; (8003f78 <HAL_DMA_IRQHandler+0x69c>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d03b      	beq.n	8003df2 <HAL_DMA_IRQHandler+0x516>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a7f      	ldr	r2, [pc, #508]	; (8003f7c <HAL_DMA_IRQHandler+0x6a0>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d036      	beq.n	8003df2 <HAL_DMA_IRQHandler+0x516>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a7d      	ldr	r2, [pc, #500]	; (8003f80 <HAL_DMA_IRQHandler+0x6a4>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d031      	beq.n	8003df2 <HAL_DMA_IRQHandler+0x516>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a7c      	ldr	r2, [pc, #496]	; (8003f84 <HAL_DMA_IRQHandler+0x6a8>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d02c      	beq.n	8003df2 <HAL_DMA_IRQHandler+0x516>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a7a      	ldr	r2, [pc, #488]	; (8003f88 <HAL_DMA_IRQHandler+0x6ac>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d027      	beq.n	8003df2 <HAL_DMA_IRQHandler+0x516>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a79      	ldr	r2, [pc, #484]	; (8003f8c <HAL_DMA_IRQHandler+0x6b0>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d022      	beq.n	8003df2 <HAL_DMA_IRQHandler+0x516>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a77      	ldr	r2, [pc, #476]	; (8003f90 <HAL_DMA_IRQHandler+0x6b4>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d01d      	beq.n	8003df2 <HAL_DMA_IRQHandler+0x516>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a76      	ldr	r2, [pc, #472]	; (8003f94 <HAL_DMA_IRQHandler+0x6b8>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d018      	beq.n	8003df2 <HAL_DMA_IRQHandler+0x516>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a74      	ldr	r2, [pc, #464]	; (8003f98 <HAL_DMA_IRQHandler+0x6bc>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d013      	beq.n	8003df2 <HAL_DMA_IRQHandler+0x516>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a73      	ldr	r2, [pc, #460]	; (8003f9c <HAL_DMA_IRQHandler+0x6c0>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d00e      	beq.n	8003df2 <HAL_DMA_IRQHandler+0x516>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a71      	ldr	r2, [pc, #452]	; (8003fa0 <HAL_DMA_IRQHandler+0x6c4>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d009      	beq.n	8003df2 <HAL_DMA_IRQHandler+0x516>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a70      	ldr	r2, [pc, #448]	; (8003fa4 <HAL_DMA_IRQHandler+0x6c8>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d004      	beq.n	8003df2 <HAL_DMA_IRQHandler+0x516>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a6e      	ldr	r2, [pc, #440]	; (8003fa8 <HAL_DMA_IRQHandler+0x6cc>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d10a      	bne.n	8003e08 <HAL_DMA_IRQHandler+0x52c>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0308 	and.w	r3, r3, #8
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	bf14      	ite	ne
 8003e00:	2301      	movne	r3, #1
 8003e02:	2300      	moveq	r3, #0
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	e009      	b.n	8003e1c <HAL_DMA_IRQHandler+0x540>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0304 	and.w	r3, r3, #4
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	bf14      	ite	ne
 8003e16:	2301      	movne	r3, #1
 8003e18:	2300      	moveq	r3, #0
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d03e      	beq.n	8003e9e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e24:	f003 031f 	and.w	r3, r3, #31
 8003e28:	2210      	movs	r2, #16
 8003e2a:	409a      	lsls	r2, r3
 8003e2c:	6a3b      	ldr	r3, [r7, #32]
 8003e2e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d018      	beq.n	8003e70 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d108      	bne.n	8003e5e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d024      	beq.n	8003e9e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	4798      	blx	r3
 8003e5c:	e01f      	b.n	8003e9e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d01b      	beq.n	8003e9e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	4798      	blx	r3
 8003e6e:	e016      	b.n	8003e9e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d107      	bne.n	8003e8e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f022 0208 	bic.w	r2, r2, #8
 8003e8c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d003      	beq.n	8003e9e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ea2:	f003 031f 	and.w	r3, r3, #31
 8003ea6:	2220      	movs	r2, #32
 8003ea8:	409a      	lsls	r2, r3
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	4013      	ands	r3, r2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	f000 8110 	beq.w	80040d4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a2c      	ldr	r2, [pc, #176]	; (8003f6c <HAL_DMA_IRQHandler+0x690>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d04a      	beq.n	8003f54 <HAL_DMA_IRQHandler+0x678>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a2b      	ldr	r2, [pc, #172]	; (8003f70 <HAL_DMA_IRQHandler+0x694>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d045      	beq.n	8003f54 <HAL_DMA_IRQHandler+0x678>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a29      	ldr	r2, [pc, #164]	; (8003f74 <HAL_DMA_IRQHandler+0x698>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d040      	beq.n	8003f54 <HAL_DMA_IRQHandler+0x678>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a28      	ldr	r2, [pc, #160]	; (8003f78 <HAL_DMA_IRQHandler+0x69c>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d03b      	beq.n	8003f54 <HAL_DMA_IRQHandler+0x678>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a26      	ldr	r2, [pc, #152]	; (8003f7c <HAL_DMA_IRQHandler+0x6a0>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d036      	beq.n	8003f54 <HAL_DMA_IRQHandler+0x678>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a25      	ldr	r2, [pc, #148]	; (8003f80 <HAL_DMA_IRQHandler+0x6a4>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d031      	beq.n	8003f54 <HAL_DMA_IRQHandler+0x678>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a23      	ldr	r2, [pc, #140]	; (8003f84 <HAL_DMA_IRQHandler+0x6a8>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d02c      	beq.n	8003f54 <HAL_DMA_IRQHandler+0x678>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a22      	ldr	r2, [pc, #136]	; (8003f88 <HAL_DMA_IRQHandler+0x6ac>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d027      	beq.n	8003f54 <HAL_DMA_IRQHandler+0x678>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a20      	ldr	r2, [pc, #128]	; (8003f8c <HAL_DMA_IRQHandler+0x6b0>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d022      	beq.n	8003f54 <HAL_DMA_IRQHandler+0x678>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a1f      	ldr	r2, [pc, #124]	; (8003f90 <HAL_DMA_IRQHandler+0x6b4>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d01d      	beq.n	8003f54 <HAL_DMA_IRQHandler+0x678>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a1d      	ldr	r2, [pc, #116]	; (8003f94 <HAL_DMA_IRQHandler+0x6b8>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d018      	beq.n	8003f54 <HAL_DMA_IRQHandler+0x678>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a1c      	ldr	r2, [pc, #112]	; (8003f98 <HAL_DMA_IRQHandler+0x6bc>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d013      	beq.n	8003f54 <HAL_DMA_IRQHandler+0x678>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a1a      	ldr	r2, [pc, #104]	; (8003f9c <HAL_DMA_IRQHandler+0x6c0>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d00e      	beq.n	8003f54 <HAL_DMA_IRQHandler+0x678>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a19      	ldr	r2, [pc, #100]	; (8003fa0 <HAL_DMA_IRQHandler+0x6c4>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d009      	beq.n	8003f54 <HAL_DMA_IRQHandler+0x678>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a17      	ldr	r2, [pc, #92]	; (8003fa4 <HAL_DMA_IRQHandler+0x6c8>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d004      	beq.n	8003f54 <HAL_DMA_IRQHandler+0x678>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a16      	ldr	r2, [pc, #88]	; (8003fa8 <HAL_DMA_IRQHandler+0x6cc>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d12b      	bne.n	8003fac <HAL_DMA_IRQHandler+0x6d0>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0310 	and.w	r3, r3, #16
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	bf14      	ite	ne
 8003f62:	2301      	movne	r3, #1
 8003f64:	2300      	moveq	r3, #0
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	e02a      	b.n	8003fc0 <HAL_DMA_IRQHandler+0x6e4>
 8003f6a:	bf00      	nop
 8003f6c:	40020010 	.word	0x40020010
 8003f70:	40020028 	.word	0x40020028
 8003f74:	40020040 	.word	0x40020040
 8003f78:	40020058 	.word	0x40020058
 8003f7c:	40020070 	.word	0x40020070
 8003f80:	40020088 	.word	0x40020088
 8003f84:	400200a0 	.word	0x400200a0
 8003f88:	400200b8 	.word	0x400200b8
 8003f8c:	40020410 	.word	0x40020410
 8003f90:	40020428 	.word	0x40020428
 8003f94:	40020440 	.word	0x40020440
 8003f98:	40020458 	.word	0x40020458
 8003f9c:	40020470 	.word	0x40020470
 8003fa0:	40020488 	.word	0x40020488
 8003fa4:	400204a0 	.word	0x400204a0
 8003fa8:	400204b8 	.word	0x400204b8
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0302 	and.w	r3, r3, #2
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	bf14      	ite	ne
 8003fba:	2301      	movne	r3, #1
 8003fbc:	2300      	moveq	r3, #0
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	f000 8087 	beq.w	80040d4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fca:	f003 031f 	and.w	r3, r3, #31
 8003fce:	2220      	movs	r2, #32
 8003fd0:	409a      	lsls	r2, r3
 8003fd2:	6a3b      	ldr	r3, [r7, #32]
 8003fd4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	2b04      	cmp	r3, #4
 8003fe0:	d139      	bne.n	8004056 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f022 0216 	bic.w	r2, r2, #22
 8003ff0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	695a      	ldr	r2, [r3, #20]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004000:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004006:	2b00      	cmp	r3, #0
 8004008:	d103      	bne.n	8004012 <HAL_DMA_IRQHandler+0x736>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800400e:	2b00      	cmp	r3, #0
 8004010:	d007      	beq.n	8004022 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f022 0208 	bic.w	r2, r2, #8
 8004020:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004026:	f003 031f 	and.w	r3, r3, #31
 800402a:	223f      	movs	r2, #63	; 0x3f
 800402c:	409a      	lsls	r2, r3
 800402e:	6a3b      	ldr	r3, [r7, #32]
 8004030:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2201      	movs	r2, #1
 800403e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004046:	2b00      	cmp	r3, #0
 8004048:	f000 834a 	beq.w	80046e0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	4798      	blx	r3
          }
          return;
 8004054:	e344      	b.n	80046e0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d018      	beq.n	8004096 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d108      	bne.n	8004084 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004076:	2b00      	cmp	r3, #0
 8004078:	d02c      	beq.n	80040d4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	4798      	blx	r3
 8004082:	e027      	b.n	80040d4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004088:	2b00      	cmp	r3, #0
 800408a:	d023      	beq.n	80040d4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	4798      	blx	r3
 8004094:	e01e      	b.n	80040d4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d10f      	bne.n	80040c4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f022 0210 	bic.w	r2, r2, #16
 80040b2:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d003      	beq.n	80040d4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040d8:	2b00      	cmp	r3, #0
 80040da:	f000 8306 	beq.w	80046ea <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	f000 8088 	beq.w	80041fc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2204      	movs	r2, #4
 80040f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a7a      	ldr	r2, [pc, #488]	; (80042e4 <HAL_DMA_IRQHandler+0xa08>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d04a      	beq.n	8004194 <HAL_DMA_IRQHandler+0x8b8>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a79      	ldr	r2, [pc, #484]	; (80042e8 <HAL_DMA_IRQHandler+0xa0c>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d045      	beq.n	8004194 <HAL_DMA_IRQHandler+0x8b8>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a77      	ldr	r2, [pc, #476]	; (80042ec <HAL_DMA_IRQHandler+0xa10>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d040      	beq.n	8004194 <HAL_DMA_IRQHandler+0x8b8>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a76      	ldr	r2, [pc, #472]	; (80042f0 <HAL_DMA_IRQHandler+0xa14>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d03b      	beq.n	8004194 <HAL_DMA_IRQHandler+0x8b8>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a74      	ldr	r2, [pc, #464]	; (80042f4 <HAL_DMA_IRQHandler+0xa18>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d036      	beq.n	8004194 <HAL_DMA_IRQHandler+0x8b8>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a73      	ldr	r2, [pc, #460]	; (80042f8 <HAL_DMA_IRQHandler+0xa1c>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d031      	beq.n	8004194 <HAL_DMA_IRQHandler+0x8b8>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a71      	ldr	r2, [pc, #452]	; (80042fc <HAL_DMA_IRQHandler+0xa20>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d02c      	beq.n	8004194 <HAL_DMA_IRQHandler+0x8b8>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a70      	ldr	r2, [pc, #448]	; (8004300 <HAL_DMA_IRQHandler+0xa24>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d027      	beq.n	8004194 <HAL_DMA_IRQHandler+0x8b8>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a6e      	ldr	r2, [pc, #440]	; (8004304 <HAL_DMA_IRQHandler+0xa28>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d022      	beq.n	8004194 <HAL_DMA_IRQHandler+0x8b8>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a6d      	ldr	r2, [pc, #436]	; (8004308 <HAL_DMA_IRQHandler+0xa2c>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d01d      	beq.n	8004194 <HAL_DMA_IRQHandler+0x8b8>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a6b      	ldr	r2, [pc, #428]	; (800430c <HAL_DMA_IRQHandler+0xa30>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d018      	beq.n	8004194 <HAL_DMA_IRQHandler+0x8b8>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a6a      	ldr	r2, [pc, #424]	; (8004310 <HAL_DMA_IRQHandler+0xa34>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d013      	beq.n	8004194 <HAL_DMA_IRQHandler+0x8b8>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a68      	ldr	r2, [pc, #416]	; (8004314 <HAL_DMA_IRQHandler+0xa38>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d00e      	beq.n	8004194 <HAL_DMA_IRQHandler+0x8b8>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a67      	ldr	r2, [pc, #412]	; (8004318 <HAL_DMA_IRQHandler+0xa3c>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d009      	beq.n	8004194 <HAL_DMA_IRQHandler+0x8b8>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a65      	ldr	r2, [pc, #404]	; (800431c <HAL_DMA_IRQHandler+0xa40>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d004      	beq.n	8004194 <HAL_DMA_IRQHandler+0x8b8>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a64      	ldr	r2, [pc, #400]	; (8004320 <HAL_DMA_IRQHandler+0xa44>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d108      	bne.n	80041a6 <HAL_DMA_IRQHandler+0x8ca>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f022 0201 	bic.w	r2, r2, #1
 80041a2:	601a      	str	r2, [r3, #0]
 80041a4:	e007      	b.n	80041b6 <HAL_DMA_IRQHandler+0x8da>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f022 0201 	bic.w	r2, r2, #1
 80041b4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	3301      	adds	r3, #1
 80041ba:	60fb      	str	r3, [r7, #12]
 80041bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041be:	429a      	cmp	r2, r3
 80041c0:	d307      	bcc.n	80041d2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0301 	and.w	r3, r3, #1
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d1f2      	bne.n	80041b6 <HAL_DMA_IRQHandler+0x8da>
 80041d0:	e000      	b.n	80041d4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80041d2:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0301 	and.w	r3, r3, #1
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d004      	beq.n	80041f4 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2203      	movs	r2, #3
 80041ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80041f2:	e003      	b.n	80041fc <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004200:	2b00      	cmp	r3, #0
 8004202:	f000 8272 	beq.w	80046ea <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	4798      	blx	r3
 800420e:	e26c      	b.n	80046ea <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a43      	ldr	r2, [pc, #268]	; (8004324 <HAL_DMA_IRQHandler+0xa48>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d022      	beq.n	8004260 <HAL_DMA_IRQHandler+0x984>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a42      	ldr	r2, [pc, #264]	; (8004328 <HAL_DMA_IRQHandler+0xa4c>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d01d      	beq.n	8004260 <HAL_DMA_IRQHandler+0x984>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a40      	ldr	r2, [pc, #256]	; (800432c <HAL_DMA_IRQHandler+0xa50>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d018      	beq.n	8004260 <HAL_DMA_IRQHandler+0x984>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a3f      	ldr	r2, [pc, #252]	; (8004330 <HAL_DMA_IRQHandler+0xa54>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d013      	beq.n	8004260 <HAL_DMA_IRQHandler+0x984>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a3d      	ldr	r2, [pc, #244]	; (8004334 <HAL_DMA_IRQHandler+0xa58>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d00e      	beq.n	8004260 <HAL_DMA_IRQHandler+0x984>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a3c      	ldr	r2, [pc, #240]	; (8004338 <HAL_DMA_IRQHandler+0xa5c>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d009      	beq.n	8004260 <HAL_DMA_IRQHandler+0x984>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a3a      	ldr	r2, [pc, #232]	; (800433c <HAL_DMA_IRQHandler+0xa60>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d004      	beq.n	8004260 <HAL_DMA_IRQHandler+0x984>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a39      	ldr	r2, [pc, #228]	; (8004340 <HAL_DMA_IRQHandler+0xa64>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d101      	bne.n	8004264 <HAL_DMA_IRQHandler+0x988>
 8004260:	2301      	movs	r3, #1
 8004262:	e000      	b.n	8004266 <HAL_DMA_IRQHandler+0x98a>
 8004264:	2300      	movs	r3, #0
 8004266:	2b00      	cmp	r3, #0
 8004268:	f000 823f 	beq.w	80046ea <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004278:	f003 031f 	and.w	r3, r3, #31
 800427c:	2204      	movs	r2, #4
 800427e:	409a      	lsls	r2, r3
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	4013      	ands	r3, r2
 8004284:	2b00      	cmp	r3, #0
 8004286:	f000 80cd 	beq.w	8004424 <HAL_DMA_IRQHandler+0xb48>
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	f003 0304 	and.w	r3, r3, #4
 8004290:	2b00      	cmp	r3, #0
 8004292:	f000 80c7 	beq.w	8004424 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800429a:	f003 031f 	and.w	r3, r3, #31
 800429e:	2204      	movs	r2, #4
 80042a0:	409a      	lsls	r2, r3
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d049      	beq.n	8004344 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d109      	bne.n	80042ce <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042be:	2b00      	cmp	r3, #0
 80042c0:	f000 8210 	beq.w	80046e4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042cc:	e20a      	b.n	80046e4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	f000 8206 	beq.w	80046e4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042e0:	e200      	b.n	80046e4 <HAL_DMA_IRQHandler+0xe08>
 80042e2:	bf00      	nop
 80042e4:	40020010 	.word	0x40020010
 80042e8:	40020028 	.word	0x40020028
 80042ec:	40020040 	.word	0x40020040
 80042f0:	40020058 	.word	0x40020058
 80042f4:	40020070 	.word	0x40020070
 80042f8:	40020088 	.word	0x40020088
 80042fc:	400200a0 	.word	0x400200a0
 8004300:	400200b8 	.word	0x400200b8
 8004304:	40020410 	.word	0x40020410
 8004308:	40020428 	.word	0x40020428
 800430c:	40020440 	.word	0x40020440
 8004310:	40020458 	.word	0x40020458
 8004314:	40020470 	.word	0x40020470
 8004318:	40020488 	.word	0x40020488
 800431c:	400204a0 	.word	0x400204a0
 8004320:	400204b8 	.word	0x400204b8
 8004324:	58025408 	.word	0x58025408
 8004328:	5802541c 	.word	0x5802541c
 800432c:	58025430 	.word	0x58025430
 8004330:	58025444 	.word	0x58025444
 8004334:	58025458 	.word	0x58025458
 8004338:	5802546c 	.word	0x5802546c
 800433c:	58025480 	.word	0x58025480
 8004340:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	f003 0320 	and.w	r3, r3, #32
 800434a:	2b00      	cmp	r3, #0
 800434c:	d160      	bne.n	8004410 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a7f      	ldr	r2, [pc, #508]	; (8004550 <HAL_DMA_IRQHandler+0xc74>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d04a      	beq.n	80043ee <HAL_DMA_IRQHandler+0xb12>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a7d      	ldr	r2, [pc, #500]	; (8004554 <HAL_DMA_IRQHandler+0xc78>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d045      	beq.n	80043ee <HAL_DMA_IRQHandler+0xb12>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a7c      	ldr	r2, [pc, #496]	; (8004558 <HAL_DMA_IRQHandler+0xc7c>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d040      	beq.n	80043ee <HAL_DMA_IRQHandler+0xb12>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a7a      	ldr	r2, [pc, #488]	; (800455c <HAL_DMA_IRQHandler+0xc80>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d03b      	beq.n	80043ee <HAL_DMA_IRQHandler+0xb12>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a79      	ldr	r2, [pc, #484]	; (8004560 <HAL_DMA_IRQHandler+0xc84>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d036      	beq.n	80043ee <HAL_DMA_IRQHandler+0xb12>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a77      	ldr	r2, [pc, #476]	; (8004564 <HAL_DMA_IRQHandler+0xc88>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d031      	beq.n	80043ee <HAL_DMA_IRQHandler+0xb12>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a76      	ldr	r2, [pc, #472]	; (8004568 <HAL_DMA_IRQHandler+0xc8c>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d02c      	beq.n	80043ee <HAL_DMA_IRQHandler+0xb12>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a74      	ldr	r2, [pc, #464]	; (800456c <HAL_DMA_IRQHandler+0xc90>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d027      	beq.n	80043ee <HAL_DMA_IRQHandler+0xb12>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a73      	ldr	r2, [pc, #460]	; (8004570 <HAL_DMA_IRQHandler+0xc94>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d022      	beq.n	80043ee <HAL_DMA_IRQHandler+0xb12>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a71      	ldr	r2, [pc, #452]	; (8004574 <HAL_DMA_IRQHandler+0xc98>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d01d      	beq.n	80043ee <HAL_DMA_IRQHandler+0xb12>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a70      	ldr	r2, [pc, #448]	; (8004578 <HAL_DMA_IRQHandler+0xc9c>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d018      	beq.n	80043ee <HAL_DMA_IRQHandler+0xb12>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a6e      	ldr	r2, [pc, #440]	; (800457c <HAL_DMA_IRQHandler+0xca0>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d013      	beq.n	80043ee <HAL_DMA_IRQHandler+0xb12>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a6d      	ldr	r2, [pc, #436]	; (8004580 <HAL_DMA_IRQHandler+0xca4>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d00e      	beq.n	80043ee <HAL_DMA_IRQHandler+0xb12>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a6b      	ldr	r2, [pc, #428]	; (8004584 <HAL_DMA_IRQHandler+0xca8>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d009      	beq.n	80043ee <HAL_DMA_IRQHandler+0xb12>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a6a      	ldr	r2, [pc, #424]	; (8004588 <HAL_DMA_IRQHandler+0xcac>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d004      	beq.n	80043ee <HAL_DMA_IRQHandler+0xb12>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a68      	ldr	r2, [pc, #416]	; (800458c <HAL_DMA_IRQHandler+0xcb0>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d108      	bne.n	8004400 <HAL_DMA_IRQHandler+0xb24>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f022 0208 	bic.w	r2, r2, #8
 80043fc:	601a      	str	r2, [r3, #0]
 80043fe:	e007      	b.n	8004410 <HAL_DMA_IRQHandler+0xb34>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f022 0204 	bic.w	r2, r2, #4
 800440e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004414:	2b00      	cmp	r3, #0
 8004416:	f000 8165 	beq.w	80046e4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004422:	e15f      	b.n	80046e4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004428:	f003 031f 	and.w	r3, r3, #31
 800442c:	2202      	movs	r2, #2
 800442e:	409a      	lsls	r2, r3
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	4013      	ands	r3, r2
 8004434:	2b00      	cmp	r3, #0
 8004436:	f000 80c5 	beq.w	80045c4 <HAL_DMA_IRQHandler+0xce8>
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	f003 0302 	and.w	r3, r3, #2
 8004440:	2b00      	cmp	r3, #0
 8004442:	f000 80bf 	beq.w	80045c4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800444a:	f003 031f 	and.w	r3, r3, #31
 800444e:	2202      	movs	r2, #2
 8004450:	409a      	lsls	r2, r3
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d018      	beq.n	8004492 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d109      	bne.n	800447e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800446e:	2b00      	cmp	r3, #0
 8004470:	f000 813a 	beq.w	80046e8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800447c:	e134      	b.n	80046e8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004482:	2b00      	cmp	r3, #0
 8004484:	f000 8130 	beq.w	80046e8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004490:	e12a      	b.n	80046e8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	f003 0320 	and.w	r3, r3, #32
 8004498:	2b00      	cmp	r3, #0
 800449a:	f040 8089 	bne.w	80045b0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a2b      	ldr	r2, [pc, #172]	; (8004550 <HAL_DMA_IRQHandler+0xc74>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d04a      	beq.n	800453e <HAL_DMA_IRQHandler+0xc62>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a29      	ldr	r2, [pc, #164]	; (8004554 <HAL_DMA_IRQHandler+0xc78>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d045      	beq.n	800453e <HAL_DMA_IRQHandler+0xc62>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a28      	ldr	r2, [pc, #160]	; (8004558 <HAL_DMA_IRQHandler+0xc7c>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d040      	beq.n	800453e <HAL_DMA_IRQHandler+0xc62>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a26      	ldr	r2, [pc, #152]	; (800455c <HAL_DMA_IRQHandler+0xc80>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d03b      	beq.n	800453e <HAL_DMA_IRQHandler+0xc62>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a25      	ldr	r2, [pc, #148]	; (8004560 <HAL_DMA_IRQHandler+0xc84>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d036      	beq.n	800453e <HAL_DMA_IRQHandler+0xc62>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a23      	ldr	r2, [pc, #140]	; (8004564 <HAL_DMA_IRQHandler+0xc88>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d031      	beq.n	800453e <HAL_DMA_IRQHandler+0xc62>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a22      	ldr	r2, [pc, #136]	; (8004568 <HAL_DMA_IRQHandler+0xc8c>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d02c      	beq.n	800453e <HAL_DMA_IRQHandler+0xc62>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a20      	ldr	r2, [pc, #128]	; (800456c <HAL_DMA_IRQHandler+0xc90>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d027      	beq.n	800453e <HAL_DMA_IRQHandler+0xc62>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a1f      	ldr	r2, [pc, #124]	; (8004570 <HAL_DMA_IRQHandler+0xc94>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d022      	beq.n	800453e <HAL_DMA_IRQHandler+0xc62>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a1d      	ldr	r2, [pc, #116]	; (8004574 <HAL_DMA_IRQHandler+0xc98>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d01d      	beq.n	800453e <HAL_DMA_IRQHandler+0xc62>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a1c      	ldr	r2, [pc, #112]	; (8004578 <HAL_DMA_IRQHandler+0xc9c>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d018      	beq.n	800453e <HAL_DMA_IRQHandler+0xc62>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a1a      	ldr	r2, [pc, #104]	; (800457c <HAL_DMA_IRQHandler+0xca0>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d013      	beq.n	800453e <HAL_DMA_IRQHandler+0xc62>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a19      	ldr	r2, [pc, #100]	; (8004580 <HAL_DMA_IRQHandler+0xca4>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d00e      	beq.n	800453e <HAL_DMA_IRQHandler+0xc62>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a17      	ldr	r2, [pc, #92]	; (8004584 <HAL_DMA_IRQHandler+0xca8>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d009      	beq.n	800453e <HAL_DMA_IRQHandler+0xc62>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a16      	ldr	r2, [pc, #88]	; (8004588 <HAL_DMA_IRQHandler+0xcac>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d004      	beq.n	800453e <HAL_DMA_IRQHandler+0xc62>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a14      	ldr	r2, [pc, #80]	; (800458c <HAL_DMA_IRQHandler+0xcb0>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d128      	bne.n	8004590 <HAL_DMA_IRQHandler+0xcb4>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f022 0214 	bic.w	r2, r2, #20
 800454c:	601a      	str	r2, [r3, #0]
 800454e:	e027      	b.n	80045a0 <HAL_DMA_IRQHandler+0xcc4>
 8004550:	40020010 	.word	0x40020010
 8004554:	40020028 	.word	0x40020028
 8004558:	40020040 	.word	0x40020040
 800455c:	40020058 	.word	0x40020058
 8004560:	40020070 	.word	0x40020070
 8004564:	40020088 	.word	0x40020088
 8004568:	400200a0 	.word	0x400200a0
 800456c:	400200b8 	.word	0x400200b8
 8004570:	40020410 	.word	0x40020410
 8004574:	40020428 	.word	0x40020428
 8004578:	40020440 	.word	0x40020440
 800457c:	40020458 	.word	0x40020458
 8004580:	40020470 	.word	0x40020470
 8004584:	40020488 	.word	0x40020488
 8004588:	400204a0 	.word	0x400204a0
 800458c:	400204b8 	.word	0x400204b8
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f022 020a 	bic.w	r2, r2, #10
 800459e:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	f000 8097 	beq.w	80046e8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045c2:	e091      	b.n	80046e8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045c8:	f003 031f 	and.w	r3, r3, #31
 80045cc:	2208      	movs	r2, #8
 80045ce:	409a      	lsls	r2, r3
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	4013      	ands	r3, r2
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	f000 8088 	beq.w	80046ea <HAL_DMA_IRQHandler+0xe0e>
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	f003 0308 	and.w	r3, r3, #8
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	f000 8082 	beq.w	80046ea <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a41      	ldr	r2, [pc, #260]	; (80046f0 <HAL_DMA_IRQHandler+0xe14>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d04a      	beq.n	8004686 <HAL_DMA_IRQHandler+0xdaa>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a3f      	ldr	r2, [pc, #252]	; (80046f4 <HAL_DMA_IRQHandler+0xe18>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d045      	beq.n	8004686 <HAL_DMA_IRQHandler+0xdaa>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a3e      	ldr	r2, [pc, #248]	; (80046f8 <HAL_DMA_IRQHandler+0xe1c>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d040      	beq.n	8004686 <HAL_DMA_IRQHandler+0xdaa>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a3c      	ldr	r2, [pc, #240]	; (80046fc <HAL_DMA_IRQHandler+0xe20>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d03b      	beq.n	8004686 <HAL_DMA_IRQHandler+0xdaa>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a3b      	ldr	r2, [pc, #236]	; (8004700 <HAL_DMA_IRQHandler+0xe24>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d036      	beq.n	8004686 <HAL_DMA_IRQHandler+0xdaa>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a39      	ldr	r2, [pc, #228]	; (8004704 <HAL_DMA_IRQHandler+0xe28>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d031      	beq.n	8004686 <HAL_DMA_IRQHandler+0xdaa>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a38      	ldr	r2, [pc, #224]	; (8004708 <HAL_DMA_IRQHandler+0xe2c>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d02c      	beq.n	8004686 <HAL_DMA_IRQHandler+0xdaa>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a36      	ldr	r2, [pc, #216]	; (800470c <HAL_DMA_IRQHandler+0xe30>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d027      	beq.n	8004686 <HAL_DMA_IRQHandler+0xdaa>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a35      	ldr	r2, [pc, #212]	; (8004710 <HAL_DMA_IRQHandler+0xe34>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d022      	beq.n	8004686 <HAL_DMA_IRQHandler+0xdaa>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a33      	ldr	r2, [pc, #204]	; (8004714 <HAL_DMA_IRQHandler+0xe38>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d01d      	beq.n	8004686 <HAL_DMA_IRQHandler+0xdaa>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a32      	ldr	r2, [pc, #200]	; (8004718 <HAL_DMA_IRQHandler+0xe3c>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d018      	beq.n	8004686 <HAL_DMA_IRQHandler+0xdaa>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a30      	ldr	r2, [pc, #192]	; (800471c <HAL_DMA_IRQHandler+0xe40>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d013      	beq.n	8004686 <HAL_DMA_IRQHandler+0xdaa>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a2f      	ldr	r2, [pc, #188]	; (8004720 <HAL_DMA_IRQHandler+0xe44>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d00e      	beq.n	8004686 <HAL_DMA_IRQHandler+0xdaa>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a2d      	ldr	r2, [pc, #180]	; (8004724 <HAL_DMA_IRQHandler+0xe48>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d009      	beq.n	8004686 <HAL_DMA_IRQHandler+0xdaa>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a2c      	ldr	r2, [pc, #176]	; (8004728 <HAL_DMA_IRQHandler+0xe4c>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d004      	beq.n	8004686 <HAL_DMA_IRQHandler+0xdaa>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a2a      	ldr	r2, [pc, #168]	; (800472c <HAL_DMA_IRQHandler+0xe50>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d108      	bne.n	8004698 <HAL_DMA_IRQHandler+0xdbc>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f022 021c 	bic.w	r2, r2, #28
 8004694:	601a      	str	r2, [r3, #0]
 8004696:	e007      	b.n	80046a8 <HAL_DMA_IRQHandler+0xdcc>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f022 020e 	bic.w	r2, r2, #14
 80046a6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046ac:	f003 031f 	and.w	r3, r3, #31
 80046b0:	2201      	movs	r2, #1
 80046b2:	409a      	lsls	r2, r3
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2201      	movs	r2, #1
 80046ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d009      	beq.n	80046ea <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	4798      	blx	r3
 80046de:	e004      	b.n	80046ea <HAL_DMA_IRQHandler+0xe0e>
          return;
 80046e0:	bf00      	nop
 80046e2:	e002      	b.n	80046ea <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046e4:	bf00      	nop
 80046e6:	e000      	b.n	80046ea <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046e8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80046ea:	3728      	adds	r7, #40	; 0x28
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	40020010 	.word	0x40020010
 80046f4:	40020028 	.word	0x40020028
 80046f8:	40020040 	.word	0x40020040
 80046fc:	40020058 	.word	0x40020058
 8004700:	40020070 	.word	0x40020070
 8004704:	40020088 	.word	0x40020088
 8004708:	400200a0 	.word	0x400200a0
 800470c:	400200b8 	.word	0x400200b8
 8004710:	40020410 	.word	0x40020410
 8004714:	40020428 	.word	0x40020428
 8004718:	40020440 	.word	0x40020440
 800471c:	40020458 	.word	0x40020458
 8004720:	40020470 	.word	0x40020470
 8004724:	40020488 	.word	0x40020488
 8004728:	400204a0 	.word	0x400204a0
 800472c:	400204b8 	.word	0x400204b8

08004730 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004730:	b480      	push	{r7}
 8004732:	b083      	sub	sp, #12
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800473e:	b2db      	uxtb	r3, r3
}
 8004740:	4618      	mov	r0, r3
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004758:	4618      	mov	r0, r3
 800475a:	370c      	adds	r7, #12
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004764:	b480      	push	{r7}
 8004766:	b087      	sub	sp, #28
 8004768:	af00      	add	r7, sp, #0
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	607a      	str	r2, [r7, #4]
 8004770:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004776:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800477c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a7f      	ldr	r2, [pc, #508]	; (8004980 <DMA_SetConfig+0x21c>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d072      	beq.n	800486e <DMA_SetConfig+0x10a>
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a7d      	ldr	r2, [pc, #500]	; (8004984 <DMA_SetConfig+0x220>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d06d      	beq.n	800486e <DMA_SetConfig+0x10a>
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a7c      	ldr	r2, [pc, #496]	; (8004988 <DMA_SetConfig+0x224>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d068      	beq.n	800486e <DMA_SetConfig+0x10a>
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a7a      	ldr	r2, [pc, #488]	; (800498c <DMA_SetConfig+0x228>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d063      	beq.n	800486e <DMA_SetConfig+0x10a>
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a79      	ldr	r2, [pc, #484]	; (8004990 <DMA_SetConfig+0x22c>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d05e      	beq.n	800486e <DMA_SetConfig+0x10a>
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a77      	ldr	r2, [pc, #476]	; (8004994 <DMA_SetConfig+0x230>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d059      	beq.n	800486e <DMA_SetConfig+0x10a>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a76      	ldr	r2, [pc, #472]	; (8004998 <DMA_SetConfig+0x234>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d054      	beq.n	800486e <DMA_SetConfig+0x10a>
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a74      	ldr	r2, [pc, #464]	; (800499c <DMA_SetConfig+0x238>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d04f      	beq.n	800486e <DMA_SetConfig+0x10a>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a73      	ldr	r2, [pc, #460]	; (80049a0 <DMA_SetConfig+0x23c>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d04a      	beq.n	800486e <DMA_SetConfig+0x10a>
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a71      	ldr	r2, [pc, #452]	; (80049a4 <DMA_SetConfig+0x240>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d045      	beq.n	800486e <DMA_SetConfig+0x10a>
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a70      	ldr	r2, [pc, #448]	; (80049a8 <DMA_SetConfig+0x244>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d040      	beq.n	800486e <DMA_SetConfig+0x10a>
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a6e      	ldr	r2, [pc, #440]	; (80049ac <DMA_SetConfig+0x248>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d03b      	beq.n	800486e <DMA_SetConfig+0x10a>
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a6d      	ldr	r2, [pc, #436]	; (80049b0 <DMA_SetConfig+0x24c>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d036      	beq.n	800486e <DMA_SetConfig+0x10a>
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a6b      	ldr	r2, [pc, #428]	; (80049b4 <DMA_SetConfig+0x250>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d031      	beq.n	800486e <DMA_SetConfig+0x10a>
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a6a      	ldr	r2, [pc, #424]	; (80049b8 <DMA_SetConfig+0x254>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d02c      	beq.n	800486e <DMA_SetConfig+0x10a>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a68      	ldr	r2, [pc, #416]	; (80049bc <DMA_SetConfig+0x258>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d027      	beq.n	800486e <DMA_SetConfig+0x10a>
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a67      	ldr	r2, [pc, #412]	; (80049c0 <DMA_SetConfig+0x25c>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d022      	beq.n	800486e <DMA_SetConfig+0x10a>
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a65      	ldr	r2, [pc, #404]	; (80049c4 <DMA_SetConfig+0x260>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d01d      	beq.n	800486e <DMA_SetConfig+0x10a>
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a64      	ldr	r2, [pc, #400]	; (80049c8 <DMA_SetConfig+0x264>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d018      	beq.n	800486e <DMA_SetConfig+0x10a>
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a62      	ldr	r2, [pc, #392]	; (80049cc <DMA_SetConfig+0x268>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d013      	beq.n	800486e <DMA_SetConfig+0x10a>
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a61      	ldr	r2, [pc, #388]	; (80049d0 <DMA_SetConfig+0x26c>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d00e      	beq.n	800486e <DMA_SetConfig+0x10a>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a5f      	ldr	r2, [pc, #380]	; (80049d4 <DMA_SetConfig+0x270>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d009      	beq.n	800486e <DMA_SetConfig+0x10a>
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a5e      	ldr	r2, [pc, #376]	; (80049d8 <DMA_SetConfig+0x274>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d004      	beq.n	800486e <DMA_SetConfig+0x10a>
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a5c      	ldr	r2, [pc, #368]	; (80049dc <DMA_SetConfig+0x278>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d101      	bne.n	8004872 <DMA_SetConfig+0x10e>
 800486e:	2301      	movs	r3, #1
 8004870:	e000      	b.n	8004874 <DMA_SetConfig+0x110>
 8004872:	2300      	movs	r3, #0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d00d      	beq.n	8004894 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004880:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004886:	2b00      	cmp	r3, #0
 8004888:	d004      	beq.n	8004894 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004892:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a39      	ldr	r2, [pc, #228]	; (8004980 <DMA_SetConfig+0x21c>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d04a      	beq.n	8004934 <DMA_SetConfig+0x1d0>
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a38      	ldr	r2, [pc, #224]	; (8004984 <DMA_SetConfig+0x220>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d045      	beq.n	8004934 <DMA_SetConfig+0x1d0>
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a36      	ldr	r2, [pc, #216]	; (8004988 <DMA_SetConfig+0x224>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d040      	beq.n	8004934 <DMA_SetConfig+0x1d0>
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a35      	ldr	r2, [pc, #212]	; (800498c <DMA_SetConfig+0x228>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d03b      	beq.n	8004934 <DMA_SetConfig+0x1d0>
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a33      	ldr	r2, [pc, #204]	; (8004990 <DMA_SetConfig+0x22c>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d036      	beq.n	8004934 <DMA_SetConfig+0x1d0>
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a32      	ldr	r2, [pc, #200]	; (8004994 <DMA_SetConfig+0x230>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d031      	beq.n	8004934 <DMA_SetConfig+0x1d0>
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a30      	ldr	r2, [pc, #192]	; (8004998 <DMA_SetConfig+0x234>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d02c      	beq.n	8004934 <DMA_SetConfig+0x1d0>
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a2f      	ldr	r2, [pc, #188]	; (800499c <DMA_SetConfig+0x238>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d027      	beq.n	8004934 <DMA_SetConfig+0x1d0>
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a2d      	ldr	r2, [pc, #180]	; (80049a0 <DMA_SetConfig+0x23c>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d022      	beq.n	8004934 <DMA_SetConfig+0x1d0>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a2c      	ldr	r2, [pc, #176]	; (80049a4 <DMA_SetConfig+0x240>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d01d      	beq.n	8004934 <DMA_SetConfig+0x1d0>
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a2a      	ldr	r2, [pc, #168]	; (80049a8 <DMA_SetConfig+0x244>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d018      	beq.n	8004934 <DMA_SetConfig+0x1d0>
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a29      	ldr	r2, [pc, #164]	; (80049ac <DMA_SetConfig+0x248>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d013      	beq.n	8004934 <DMA_SetConfig+0x1d0>
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a27      	ldr	r2, [pc, #156]	; (80049b0 <DMA_SetConfig+0x24c>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d00e      	beq.n	8004934 <DMA_SetConfig+0x1d0>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a26      	ldr	r2, [pc, #152]	; (80049b4 <DMA_SetConfig+0x250>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d009      	beq.n	8004934 <DMA_SetConfig+0x1d0>
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a24      	ldr	r2, [pc, #144]	; (80049b8 <DMA_SetConfig+0x254>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d004      	beq.n	8004934 <DMA_SetConfig+0x1d0>
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a23      	ldr	r2, [pc, #140]	; (80049bc <DMA_SetConfig+0x258>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d101      	bne.n	8004938 <DMA_SetConfig+0x1d4>
 8004934:	2301      	movs	r3, #1
 8004936:	e000      	b.n	800493a <DMA_SetConfig+0x1d6>
 8004938:	2300      	movs	r3, #0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d059      	beq.n	80049f2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004942:	f003 031f 	and.w	r3, r3, #31
 8004946:	223f      	movs	r2, #63	; 0x3f
 8004948:	409a      	lsls	r2, r3
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800495c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	683a      	ldr	r2, [r7, #0]
 8004964:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	2b40      	cmp	r3, #64	; 0x40
 800496c:	d138      	bne.n	80049e0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	68ba      	ldr	r2, [r7, #8]
 800497c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800497e:	e086      	b.n	8004a8e <DMA_SetConfig+0x32a>
 8004980:	40020010 	.word	0x40020010
 8004984:	40020028 	.word	0x40020028
 8004988:	40020040 	.word	0x40020040
 800498c:	40020058 	.word	0x40020058
 8004990:	40020070 	.word	0x40020070
 8004994:	40020088 	.word	0x40020088
 8004998:	400200a0 	.word	0x400200a0
 800499c:	400200b8 	.word	0x400200b8
 80049a0:	40020410 	.word	0x40020410
 80049a4:	40020428 	.word	0x40020428
 80049a8:	40020440 	.word	0x40020440
 80049ac:	40020458 	.word	0x40020458
 80049b0:	40020470 	.word	0x40020470
 80049b4:	40020488 	.word	0x40020488
 80049b8:	400204a0 	.word	0x400204a0
 80049bc:	400204b8 	.word	0x400204b8
 80049c0:	58025408 	.word	0x58025408
 80049c4:	5802541c 	.word	0x5802541c
 80049c8:	58025430 	.word	0x58025430
 80049cc:	58025444 	.word	0x58025444
 80049d0:	58025458 	.word	0x58025458
 80049d4:	5802546c 	.word	0x5802546c
 80049d8:	58025480 	.word	0x58025480
 80049dc:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	68ba      	ldr	r2, [r7, #8]
 80049e6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	60da      	str	r2, [r3, #12]
}
 80049f0:	e04d      	b.n	8004a8e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a29      	ldr	r2, [pc, #164]	; (8004a9c <DMA_SetConfig+0x338>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d022      	beq.n	8004a42 <DMA_SetConfig+0x2de>
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a27      	ldr	r2, [pc, #156]	; (8004aa0 <DMA_SetConfig+0x33c>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d01d      	beq.n	8004a42 <DMA_SetConfig+0x2de>
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a26      	ldr	r2, [pc, #152]	; (8004aa4 <DMA_SetConfig+0x340>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d018      	beq.n	8004a42 <DMA_SetConfig+0x2de>
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a24      	ldr	r2, [pc, #144]	; (8004aa8 <DMA_SetConfig+0x344>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d013      	beq.n	8004a42 <DMA_SetConfig+0x2de>
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a23      	ldr	r2, [pc, #140]	; (8004aac <DMA_SetConfig+0x348>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d00e      	beq.n	8004a42 <DMA_SetConfig+0x2de>
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a21      	ldr	r2, [pc, #132]	; (8004ab0 <DMA_SetConfig+0x34c>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d009      	beq.n	8004a42 <DMA_SetConfig+0x2de>
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a20      	ldr	r2, [pc, #128]	; (8004ab4 <DMA_SetConfig+0x350>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d004      	beq.n	8004a42 <DMA_SetConfig+0x2de>
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a1e      	ldr	r2, [pc, #120]	; (8004ab8 <DMA_SetConfig+0x354>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d101      	bne.n	8004a46 <DMA_SetConfig+0x2e2>
 8004a42:	2301      	movs	r3, #1
 8004a44:	e000      	b.n	8004a48 <DMA_SetConfig+0x2e4>
 8004a46:	2300      	movs	r3, #0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d020      	beq.n	8004a8e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a50:	f003 031f 	and.w	r3, r3, #31
 8004a54:	2201      	movs	r2, #1
 8004a56:	409a      	lsls	r2, r3
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	683a      	ldr	r2, [r7, #0]
 8004a62:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	2b40      	cmp	r3, #64	; 0x40
 8004a6a:	d108      	bne.n	8004a7e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68ba      	ldr	r2, [r7, #8]
 8004a7a:	60da      	str	r2, [r3, #12]
}
 8004a7c:	e007      	b.n	8004a8e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68ba      	ldr	r2, [r7, #8]
 8004a84:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	60da      	str	r2, [r3, #12]
}
 8004a8e:	bf00      	nop
 8004a90:	371c      	adds	r7, #28
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	58025408 	.word	0x58025408
 8004aa0:	5802541c 	.word	0x5802541c
 8004aa4:	58025430 	.word	0x58025430
 8004aa8:	58025444 	.word	0x58025444
 8004aac:	58025458 	.word	0x58025458
 8004ab0:	5802546c 	.word	0x5802546c
 8004ab4:	58025480 	.word	0x58025480
 8004ab8:	58025494 	.word	0x58025494

08004abc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b085      	sub	sp, #20
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a42      	ldr	r2, [pc, #264]	; (8004bd4 <DMA_CalcBaseAndBitshift+0x118>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d04a      	beq.n	8004b64 <DMA_CalcBaseAndBitshift+0xa8>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a41      	ldr	r2, [pc, #260]	; (8004bd8 <DMA_CalcBaseAndBitshift+0x11c>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d045      	beq.n	8004b64 <DMA_CalcBaseAndBitshift+0xa8>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a3f      	ldr	r2, [pc, #252]	; (8004bdc <DMA_CalcBaseAndBitshift+0x120>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d040      	beq.n	8004b64 <DMA_CalcBaseAndBitshift+0xa8>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a3e      	ldr	r2, [pc, #248]	; (8004be0 <DMA_CalcBaseAndBitshift+0x124>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d03b      	beq.n	8004b64 <DMA_CalcBaseAndBitshift+0xa8>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a3c      	ldr	r2, [pc, #240]	; (8004be4 <DMA_CalcBaseAndBitshift+0x128>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d036      	beq.n	8004b64 <DMA_CalcBaseAndBitshift+0xa8>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a3b      	ldr	r2, [pc, #236]	; (8004be8 <DMA_CalcBaseAndBitshift+0x12c>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d031      	beq.n	8004b64 <DMA_CalcBaseAndBitshift+0xa8>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a39      	ldr	r2, [pc, #228]	; (8004bec <DMA_CalcBaseAndBitshift+0x130>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d02c      	beq.n	8004b64 <DMA_CalcBaseAndBitshift+0xa8>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a38      	ldr	r2, [pc, #224]	; (8004bf0 <DMA_CalcBaseAndBitshift+0x134>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d027      	beq.n	8004b64 <DMA_CalcBaseAndBitshift+0xa8>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a36      	ldr	r2, [pc, #216]	; (8004bf4 <DMA_CalcBaseAndBitshift+0x138>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d022      	beq.n	8004b64 <DMA_CalcBaseAndBitshift+0xa8>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a35      	ldr	r2, [pc, #212]	; (8004bf8 <DMA_CalcBaseAndBitshift+0x13c>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d01d      	beq.n	8004b64 <DMA_CalcBaseAndBitshift+0xa8>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a33      	ldr	r2, [pc, #204]	; (8004bfc <DMA_CalcBaseAndBitshift+0x140>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d018      	beq.n	8004b64 <DMA_CalcBaseAndBitshift+0xa8>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a32      	ldr	r2, [pc, #200]	; (8004c00 <DMA_CalcBaseAndBitshift+0x144>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d013      	beq.n	8004b64 <DMA_CalcBaseAndBitshift+0xa8>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a30      	ldr	r2, [pc, #192]	; (8004c04 <DMA_CalcBaseAndBitshift+0x148>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d00e      	beq.n	8004b64 <DMA_CalcBaseAndBitshift+0xa8>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a2f      	ldr	r2, [pc, #188]	; (8004c08 <DMA_CalcBaseAndBitshift+0x14c>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d009      	beq.n	8004b64 <DMA_CalcBaseAndBitshift+0xa8>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a2d      	ldr	r2, [pc, #180]	; (8004c0c <DMA_CalcBaseAndBitshift+0x150>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d004      	beq.n	8004b64 <DMA_CalcBaseAndBitshift+0xa8>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a2c      	ldr	r2, [pc, #176]	; (8004c10 <DMA_CalcBaseAndBitshift+0x154>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d101      	bne.n	8004b68 <DMA_CalcBaseAndBitshift+0xac>
 8004b64:	2301      	movs	r3, #1
 8004b66:	e000      	b.n	8004b6a <DMA_CalcBaseAndBitshift+0xae>
 8004b68:	2300      	movs	r3, #0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d024      	beq.n	8004bb8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	3b10      	subs	r3, #16
 8004b76:	4a27      	ldr	r2, [pc, #156]	; (8004c14 <DMA_CalcBaseAndBitshift+0x158>)
 8004b78:	fba2 2303 	umull	r2, r3, r2, r3
 8004b7c:	091b      	lsrs	r3, r3, #4
 8004b7e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f003 0307 	and.w	r3, r3, #7
 8004b86:	4a24      	ldr	r2, [pc, #144]	; (8004c18 <DMA_CalcBaseAndBitshift+0x15c>)
 8004b88:	5cd3      	ldrb	r3, [r2, r3]
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2b03      	cmp	r3, #3
 8004b94:	d908      	bls.n	8004ba8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	4b1f      	ldr	r3, [pc, #124]	; (8004c1c <DMA_CalcBaseAndBitshift+0x160>)
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	1d1a      	adds	r2, r3, #4
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	659a      	str	r2, [r3, #88]	; 0x58
 8004ba6:	e00d      	b.n	8004bc4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	461a      	mov	r2, r3
 8004bae:	4b1b      	ldr	r3, [pc, #108]	; (8004c1c <DMA_CalcBaseAndBitshift+0x160>)
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	6593      	str	r3, [r2, #88]	; 0x58
 8004bb6:	e005      	b.n	8004bc4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3714      	adds	r7, #20
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr
 8004bd4:	40020010 	.word	0x40020010
 8004bd8:	40020028 	.word	0x40020028
 8004bdc:	40020040 	.word	0x40020040
 8004be0:	40020058 	.word	0x40020058
 8004be4:	40020070 	.word	0x40020070
 8004be8:	40020088 	.word	0x40020088
 8004bec:	400200a0 	.word	0x400200a0
 8004bf0:	400200b8 	.word	0x400200b8
 8004bf4:	40020410 	.word	0x40020410
 8004bf8:	40020428 	.word	0x40020428
 8004bfc:	40020440 	.word	0x40020440
 8004c00:	40020458 	.word	0x40020458
 8004c04:	40020470 	.word	0x40020470
 8004c08:	40020488 	.word	0x40020488
 8004c0c:	400204a0 	.word	0x400204a0
 8004c10:	400204b8 	.word	0x400204b8
 8004c14:	aaaaaaab 	.word	0xaaaaaaab
 8004c18:	08013848 	.word	0x08013848
 8004c1c:	fffffc00 	.word	0xfffffc00

08004c20 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b085      	sub	sp, #20
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	699b      	ldr	r3, [r3, #24]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d120      	bne.n	8004c76 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c38:	2b03      	cmp	r3, #3
 8004c3a:	d858      	bhi.n	8004cee <DMA_CheckFifoParam+0xce>
 8004c3c:	a201      	add	r2, pc, #4	; (adr r2, 8004c44 <DMA_CheckFifoParam+0x24>)
 8004c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c42:	bf00      	nop
 8004c44:	08004c55 	.word	0x08004c55
 8004c48:	08004c67 	.word	0x08004c67
 8004c4c:	08004c55 	.word	0x08004c55
 8004c50:	08004cef 	.word	0x08004cef
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d048      	beq.n	8004cf2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004c64:	e045      	b.n	8004cf2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c6a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c6e:	d142      	bne.n	8004cf6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004c74:	e03f      	b.n	8004cf6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	699b      	ldr	r3, [r3, #24]
 8004c7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c7e:	d123      	bne.n	8004cc8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c84:	2b03      	cmp	r3, #3
 8004c86:	d838      	bhi.n	8004cfa <DMA_CheckFifoParam+0xda>
 8004c88:	a201      	add	r2, pc, #4	; (adr r2, 8004c90 <DMA_CheckFifoParam+0x70>)
 8004c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c8e:	bf00      	nop
 8004c90:	08004ca1 	.word	0x08004ca1
 8004c94:	08004ca7 	.word	0x08004ca7
 8004c98:	08004ca1 	.word	0x08004ca1
 8004c9c:	08004cb9 	.word	0x08004cb9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	73fb      	strb	r3, [r7, #15]
        break;
 8004ca4:	e030      	b.n	8004d08 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004caa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d025      	beq.n	8004cfe <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004cb6:	e022      	b.n	8004cfe <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cbc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004cc0:	d11f      	bne.n	8004d02 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004cc6:	e01c      	b.n	8004d02 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	d902      	bls.n	8004cd6 <DMA_CheckFifoParam+0xb6>
 8004cd0:	2b03      	cmp	r3, #3
 8004cd2:	d003      	beq.n	8004cdc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004cd4:	e018      	b.n	8004d08 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	73fb      	strb	r3, [r7, #15]
        break;
 8004cda:	e015      	b.n	8004d08 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00e      	beq.n	8004d06 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	73fb      	strb	r3, [r7, #15]
    break;
 8004cec:	e00b      	b.n	8004d06 <DMA_CheckFifoParam+0xe6>
        break;
 8004cee:	bf00      	nop
 8004cf0:	e00a      	b.n	8004d08 <DMA_CheckFifoParam+0xe8>
        break;
 8004cf2:	bf00      	nop
 8004cf4:	e008      	b.n	8004d08 <DMA_CheckFifoParam+0xe8>
        break;
 8004cf6:	bf00      	nop
 8004cf8:	e006      	b.n	8004d08 <DMA_CheckFifoParam+0xe8>
        break;
 8004cfa:	bf00      	nop
 8004cfc:	e004      	b.n	8004d08 <DMA_CheckFifoParam+0xe8>
        break;
 8004cfe:	bf00      	nop
 8004d00:	e002      	b.n	8004d08 <DMA_CheckFifoParam+0xe8>
        break;
 8004d02:	bf00      	nop
 8004d04:	e000      	b.n	8004d08 <DMA_CheckFifoParam+0xe8>
    break;
 8004d06:	bf00      	nop
    }
  }

  return status;
 8004d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3714      	adds	r7, #20
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop

08004d18 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b085      	sub	sp, #20
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a38      	ldr	r2, [pc, #224]	; (8004e0c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d022      	beq.n	8004d76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a36      	ldr	r2, [pc, #216]	; (8004e10 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d01d      	beq.n	8004d76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a35      	ldr	r2, [pc, #212]	; (8004e14 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d018      	beq.n	8004d76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a33      	ldr	r2, [pc, #204]	; (8004e18 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d013      	beq.n	8004d76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a32      	ldr	r2, [pc, #200]	; (8004e1c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d00e      	beq.n	8004d76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a30      	ldr	r2, [pc, #192]	; (8004e20 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d009      	beq.n	8004d76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a2f      	ldr	r2, [pc, #188]	; (8004e24 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d004      	beq.n	8004d76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a2d      	ldr	r2, [pc, #180]	; (8004e28 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d101      	bne.n	8004d7a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004d76:	2301      	movs	r3, #1
 8004d78:	e000      	b.n	8004d7c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d01a      	beq.n	8004db6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	3b08      	subs	r3, #8
 8004d88:	4a28      	ldr	r2, [pc, #160]	; (8004e2c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d8e:	091b      	lsrs	r3, r3, #4
 8004d90:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004d92:	68fa      	ldr	r2, [r7, #12]
 8004d94:	4b26      	ldr	r3, [pc, #152]	; (8004e30 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004d96:	4413      	add	r3, r2
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4a24      	ldr	r2, [pc, #144]	; (8004e34 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004da4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f003 031f 	and.w	r3, r3, #31
 8004dac:	2201      	movs	r2, #1
 8004dae:	409a      	lsls	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004db4:	e024      	b.n	8004e00 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	3b10      	subs	r3, #16
 8004dbe:	4a1e      	ldr	r2, [pc, #120]	; (8004e38 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8004dc4:	091b      	lsrs	r3, r3, #4
 8004dc6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	4a1c      	ldr	r2, [pc, #112]	; (8004e3c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d806      	bhi.n	8004dde <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	4a1b      	ldr	r2, [pc, #108]	; (8004e40 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d902      	bls.n	8004dde <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	3308      	adds	r3, #8
 8004ddc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004dde:	68fa      	ldr	r2, [r7, #12]
 8004de0:	4b18      	ldr	r3, [pc, #96]	; (8004e44 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004de2:	4413      	add	r3, r2
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	461a      	mov	r2, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a16      	ldr	r2, [pc, #88]	; (8004e48 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004df0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f003 031f 	and.w	r3, r3, #31
 8004df8:	2201      	movs	r2, #1
 8004dfa:	409a      	lsls	r2, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004e00:	bf00      	nop
 8004e02:	3714      	adds	r7, #20
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr
 8004e0c:	58025408 	.word	0x58025408
 8004e10:	5802541c 	.word	0x5802541c
 8004e14:	58025430 	.word	0x58025430
 8004e18:	58025444 	.word	0x58025444
 8004e1c:	58025458 	.word	0x58025458
 8004e20:	5802546c 	.word	0x5802546c
 8004e24:	58025480 	.word	0x58025480
 8004e28:	58025494 	.word	0x58025494
 8004e2c:	cccccccd 	.word	0xcccccccd
 8004e30:	16009600 	.word	0x16009600
 8004e34:	58025880 	.word	0x58025880
 8004e38:	aaaaaaab 	.word	0xaaaaaaab
 8004e3c:	400204b8 	.word	0x400204b8
 8004e40:	4002040f 	.word	0x4002040f
 8004e44:	10008200 	.word	0x10008200
 8004e48:	40020880 	.word	0x40020880

08004e4c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b085      	sub	sp, #20
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d04a      	beq.n	8004ef8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2b08      	cmp	r3, #8
 8004e66:	d847      	bhi.n	8004ef8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a25      	ldr	r2, [pc, #148]	; (8004f04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d022      	beq.n	8004eb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a24      	ldr	r2, [pc, #144]	; (8004f08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d01d      	beq.n	8004eb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a22      	ldr	r2, [pc, #136]	; (8004f0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d018      	beq.n	8004eb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a21      	ldr	r2, [pc, #132]	; (8004f10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d013      	beq.n	8004eb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a1f      	ldr	r2, [pc, #124]	; (8004f14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d00e      	beq.n	8004eb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a1e      	ldr	r2, [pc, #120]	; (8004f18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d009      	beq.n	8004eb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a1c      	ldr	r2, [pc, #112]	; (8004f1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d004      	beq.n	8004eb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a1b      	ldr	r2, [pc, #108]	; (8004f20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d101      	bne.n	8004ebc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e000      	b.n	8004ebe <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d00a      	beq.n	8004ed8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004ec2:	68fa      	ldr	r2, [r7, #12]
 8004ec4:	4b17      	ldr	r3, [pc, #92]	; (8004f24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004ec6:	4413      	add	r3, r2
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	461a      	mov	r2, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	4a15      	ldr	r2, [pc, #84]	; (8004f28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004ed4:	671a      	str	r2, [r3, #112]	; 0x70
 8004ed6:	e009      	b.n	8004eec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	4b14      	ldr	r3, [pc, #80]	; (8004f2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004edc:	4413      	add	r3, r2
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a11      	ldr	r2, [pc, #68]	; (8004f30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004eea:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	3b01      	subs	r3, #1
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	409a      	lsls	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004ef8:	bf00      	nop
 8004efa:	3714      	adds	r7, #20
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr
 8004f04:	58025408 	.word	0x58025408
 8004f08:	5802541c 	.word	0x5802541c
 8004f0c:	58025430 	.word	0x58025430
 8004f10:	58025444 	.word	0x58025444
 8004f14:	58025458 	.word	0x58025458
 8004f18:	5802546c 	.word	0x5802546c
 8004f1c:	58025480 	.word	0x58025480
 8004f20:	58025494 	.word	0x58025494
 8004f24:	1600963f 	.word	0x1600963f
 8004f28:	58025940 	.word	0x58025940
 8004f2c:	1000823f 	.word	0x1000823f
 8004f30:	40020940 	.word	0x40020940

08004f34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b089      	sub	sp, #36	; 0x24
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004f42:	4b89      	ldr	r3, [pc, #548]	; (8005168 <HAL_GPIO_Init+0x234>)
 8004f44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004f46:	e194      	b.n	8005272 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	2101      	movs	r1, #1
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	fa01 f303 	lsl.w	r3, r1, r3
 8004f54:	4013      	ands	r3, r2
 8004f56:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	f000 8186 	beq.w	800526c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d00b      	beq.n	8004f80 <HAL_GPIO_Init+0x4c>
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	2b02      	cmp	r3, #2
 8004f6e:	d007      	beq.n	8004f80 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004f74:	2b11      	cmp	r3, #17
 8004f76:	d003      	beq.n	8004f80 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	2b12      	cmp	r3, #18
 8004f7e:	d130      	bne.n	8004fe2 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	005b      	lsls	r3, r3, #1
 8004f8a:	2203      	movs	r2, #3
 8004f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f90:	43db      	mvns	r3, r3
 8004f92:	69ba      	ldr	r2, [r7, #24]
 8004f94:	4013      	ands	r3, r2
 8004f96:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	68da      	ldr	r2, [r3, #12]
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	005b      	lsls	r3, r3, #1
 8004fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa4:	69ba      	ldr	r2, [r7, #24]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	69ba      	ldr	r2, [r7, #24]
 8004fae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	fa02 f303 	lsl.w	r3, r2, r3
 8004fbe:	43db      	mvns	r3, r3
 8004fc0:	69ba      	ldr	r2, [r7, #24]
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	091b      	lsrs	r3, r3, #4
 8004fcc:	f003 0201 	and.w	r2, r3, #1
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd6:	69ba      	ldr	r2, [r7, #24]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	69ba      	ldr	r2, [r7, #24]
 8004fe0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	005b      	lsls	r3, r3, #1
 8004fec:	2203      	movs	r2, #3
 8004fee:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff2:	43db      	mvns	r3, r3
 8004ff4:	69ba      	ldr	r2, [r7, #24]
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	689a      	ldr	r2, [r3, #8]
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	005b      	lsls	r3, r3, #1
 8005002:	fa02 f303 	lsl.w	r3, r2, r3
 8005006:	69ba      	ldr	r2, [r7, #24]
 8005008:	4313      	orrs	r3, r2
 800500a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	69ba      	ldr	r2, [r7, #24]
 8005010:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	2b02      	cmp	r3, #2
 8005018:	d003      	beq.n	8005022 <HAL_GPIO_Init+0xee>
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	2b12      	cmp	r3, #18
 8005020:	d123      	bne.n	800506a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	08da      	lsrs	r2, r3, #3
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	3208      	adds	r2, #8
 800502a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800502e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005030:	69fb      	ldr	r3, [r7, #28]
 8005032:	f003 0307 	and.w	r3, r3, #7
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	220f      	movs	r2, #15
 800503a:	fa02 f303 	lsl.w	r3, r2, r3
 800503e:	43db      	mvns	r3, r3
 8005040:	69ba      	ldr	r2, [r7, #24]
 8005042:	4013      	ands	r3, r2
 8005044:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	691a      	ldr	r2, [r3, #16]
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	f003 0307 	and.w	r3, r3, #7
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	fa02 f303 	lsl.w	r3, r2, r3
 8005056:	69ba      	ldr	r2, [r7, #24]
 8005058:	4313      	orrs	r3, r2
 800505a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	08da      	lsrs	r2, r3, #3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	3208      	adds	r2, #8
 8005064:	69b9      	ldr	r1, [r7, #24]
 8005066:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005070:	69fb      	ldr	r3, [r7, #28]
 8005072:	005b      	lsls	r3, r3, #1
 8005074:	2203      	movs	r2, #3
 8005076:	fa02 f303 	lsl.w	r3, r2, r3
 800507a:	43db      	mvns	r3, r3
 800507c:	69ba      	ldr	r2, [r7, #24]
 800507e:	4013      	ands	r3, r2
 8005080:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	f003 0203 	and.w	r2, r3, #3
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	005b      	lsls	r3, r3, #1
 800508e:	fa02 f303 	lsl.w	r3, r2, r3
 8005092:	69ba      	ldr	r2, [r7, #24]
 8005094:	4313      	orrs	r3, r2
 8005096:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	69ba      	ldr	r2, [r7, #24]
 800509c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	f000 80e0 	beq.w	800526c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050ac:	4b2f      	ldr	r3, [pc, #188]	; (800516c <HAL_GPIO_Init+0x238>)
 80050ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80050b2:	4a2e      	ldr	r2, [pc, #184]	; (800516c <HAL_GPIO_Init+0x238>)
 80050b4:	f043 0302 	orr.w	r3, r3, #2
 80050b8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80050bc:	4b2b      	ldr	r3, [pc, #172]	; (800516c <HAL_GPIO_Init+0x238>)
 80050be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80050c2:	f003 0302 	and.w	r3, r3, #2
 80050c6:	60fb      	str	r3, [r7, #12]
 80050c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80050ca:	4a29      	ldr	r2, [pc, #164]	; (8005170 <HAL_GPIO_Init+0x23c>)
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	089b      	lsrs	r3, r3, #2
 80050d0:	3302      	adds	r3, #2
 80050d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	f003 0303 	and.w	r3, r3, #3
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	220f      	movs	r2, #15
 80050e2:	fa02 f303 	lsl.w	r3, r2, r3
 80050e6:	43db      	mvns	r3, r3
 80050e8:	69ba      	ldr	r2, [r7, #24]
 80050ea:	4013      	ands	r3, r2
 80050ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a20      	ldr	r2, [pc, #128]	; (8005174 <HAL_GPIO_Init+0x240>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d052      	beq.n	800519c <HAL_GPIO_Init+0x268>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a1f      	ldr	r2, [pc, #124]	; (8005178 <HAL_GPIO_Init+0x244>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d031      	beq.n	8005162 <HAL_GPIO_Init+0x22e>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a1e      	ldr	r2, [pc, #120]	; (800517c <HAL_GPIO_Init+0x248>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d02b      	beq.n	800515e <HAL_GPIO_Init+0x22a>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a1d      	ldr	r2, [pc, #116]	; (8005180 <HAL_GPIO_Init+0x24c>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d025      	beq.n	800515a <HAL_GPIO_Init+0x226>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a1c      	ldr	r2, [pc, #112]	; (8005184 <HAL_GPIO_Init+0x250>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d01f      	beq.n	8005156 <HAL_GPIO_Init+0x222>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a1b      	ldr	r2, [pc, #108]	; (8005188 <HAL_GPIO_Init+0x254>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d019      	beq.n	8005152 <HAL_GPIO_Init+0x21e>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a1a      	ldr	r2, [pc, #104]	; (800518c <HAL_GPIO_Init+0x258>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d013      	beq.n	800514e <HAL_GPIO_Init+0x21a>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a19      	ldr	r2, [pc, #100]	; (8005190 <HAL_GPIO_Init+0x25c>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d00d      	beq.n	800514a <HAL_GPIO_Init+0x216>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a18      	ldr	r2, [pc, #96]	; (8005194 <HAL_GPIO_Init+0x260>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d007      	beq.n	8005146 <HAL_GPIO_Init+0x212>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a17      	ldr	r2, [pc, #92]	; (8005198 <HAL_GPIO_Init+0x264>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d101      	bne.n	8005142 <HAL_GPIO_Init+0x20e>
 800513e:	2309      	movs	r3, #9
 8005140:	e02d      	b.n	800519e <HAL_GPIO_Init+0x26a>
 8005142:	230a      	movs	r3, #10
 8005144:	e02b      	b.n	800519e <HAL_GPIO_Init+0x26a>
 8005146:	2308      	movs	r3, #8
 8005148:	e029      	b.n	800519e <HAL_GPIO_Init+0x26a>
 800514a:	2307      	movs	r3, #7
 800514c:	e027      	b.n	800519e <HAL_GPIO_Init+0x26a>
 800514e:	2306      	movs	r3, #6
 8005150:	e025      	b.n	800519e <HAL_GPIO_Init+0x26a>
 8005152:	2305      	movs	r3, #5
 8005154:	e023      	b.n	800519e <HAL_GPIO_Init+0x26a>
 8005156:	2304      	movs	r3, #4
 8005158:	e021      	b.n	800519e <HAL_GPIO_Init+0x26a>
 800515a:	2303      	movs	r3, #3
 800515c:	e01f      	b.n	800519e <HAL_GPIO_Init+0x26a>
 800515e:	2302      	movs	r3, #2
 8005160:	e01d      	b.n	800519e <HAL_GPIO_Init+0x26a>
 8005162:	2301      	movs	r3, #1
 8005164:	e01b      	b.n	800519e <HAL_GPIO_Init+0x26a>
 8005166:	bf00      	nop
 8005168:	58000080 	.word	0x58000080
 800516c:	58024400 	.word	0x58024400
 8005170:	58000400 	.word	0x58000400
 8005174:	58020000 	.word	0x58020000
 8005178:	58020400 	.word	0x58020400
 800517c:	58020800 	.word	0x58020800
 8005180:	58020c00 	.word	0x58020c00
 8005184:	58021000 	.word	0x58021000
 8005188:	58021400 	.word	0x58021400
 800518c:	58021800 	.word	0x58021800
 8005190:	58021c00 	.word	0x58021c00
 8005194:	58022000 	.word	0x58022000
 8005198:	58022400 	.word	0x58022400
 800519c:	2300      	movs	r3, #0
 800519e:	69fa      	ldr	r2, [r7, #28]
 80051a0:	f002 0203 	and.w	r2, r2, #3
 80051a4:	0092      	lsls	r2, r2, #2
 80051a6:	4093      	lsls	r3, r2
 80051a8:	69ba      	ldr	r2, [r7, #24]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80051ae:	4938      	ldr	r1, [pc, #224]	; (8005290 <HAL_GPIO_Init+0x35c>)
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	089b      	lsrs	r3, r3, #2
 80051b4:	3302      	adds	r3, #2
 80051b6:	69ba      	ldr	r2, [r7, #24]
 80051b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	43db      	mvns	r3, r3
 80051c6:	69ba      	ldr	r2, [r7, #24]
 80051c8:	4013      	ands	r3, r2
 80051ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d003      	beq.n	80051e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80051d8:	69ba      	ldr	r2, [r7, #24]
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	4313      	orrs	r3, r2
 80051de:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	69ba      	ldr	r2, [r7, #24]
 80051e4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	43db      	mvns	r3, r3
 80051f0:	69ba      	ldr	r2, [r7, #24]
 80051f2:	4013      	ands	r3, r2
 80051f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d003      	beq.n	800520a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005202:	69ba      	ldr	r2, [r7, #24]
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	4313      	orrs	r3, r2
 8005208:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	69ba      	ldr	r2, [r7, #24]
 800520e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005210:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	43db      	mvns	r3, r3
 800521c:	69ba      	ldr	r2, [r7, #24]
 800521e:	4013      	ands	r3, r2
 8005220:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800522a:	2b00      	cmp	r3, #0
 800522c:	d003      	beq.n	8005236 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800522e:	69ba      	ldr	r2, [r7, #24]
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	4313      	orrs	r3, r2
 8005234:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005236:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800523a:	69bb      	ldr	r3, [r7, #24]
 800523c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800523e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	43db      	mvns	r3, r3
 800524a:	69ba      	ldr	r2, [r7, #24]
 800524c:	4013      	ands	r3, r2
 800524e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005258:	2b00      	cmp	r3, #0
 800525a:	d003      	beq.n	8005264 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 800525c:	69ba      	ldr	r2, [r7, #24]
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	4313      	orrs	r3, r2
 8005262:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005264:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	3301      	adds	r3, #1
 8005270:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	fa22 f303 	lsr.w	r3, r2, r3
 800527c:	2b00      	cmp	r3, #0
 800527e:	f47f ae63 	bne.w	8004f48 <HAL_GPIO_Init+0x14>
  }
}
 8005282:	bf00      	nop
 8005284:	bf00      	nop
 8005286:	3724      	adds	r7, #36	; 0x24
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr
 8005290:	58000400 	.word	0x58000400

08005294 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	460b      	mov	r3, r1
 800529e:	807b      	strh	r3, [r7, #2]
 80052a0:	4613      	mov	r3, r2
 80052a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80052a4:	787b      	ldrb	r3, [r7, #1]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d003      	beq.n	80052b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80052aa:	887a      	ldrh	r2, [r7, #2]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80052b0:	e003      	b.n	80052ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80052b2:	887b      	ldrh	r3, [r7, #2]
 80052b4:	041a      	lsls	r2, r3, #16
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	619a      	str	r2, [r3, #24]
}
 80052ba:	bf00      	nop
 80052bc:	370c      	adds	r7, #12
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr
	...

080052c8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80052d0:	4a08      	ldr	r2, [pc, #32]	; (80052f4 <HAL_HSEM_FastTake+0x2c>)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	3320      	adds	r3, #32
 80052d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052da:	4a07      	ldr	r2, [pc, #28]	; (80052f8 <HAL_HSEM_FastTake+0x30>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d101      	bne.n	80052e4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80052e0:	2300      	movs	r3, #0
 80052e2:	e000      	b.n	80052e6 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	370c      	adds	r7, #12
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr
 80052f2:	bf00      	nop
 80052f4:	58026400 	.word	0x58026400
 80052f8:	80000300 	.word	0x80000300

080052fc <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8005306:	4906      	ldr	r1, [pc, #24]	; (8005320 <HAL_HSEM_Release+0x24>)
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8005314:	bf00      	nop
 8005316:	370c      	adds	r7, #12
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr
 8005320:	58026400 	.word	0x58026400

08005324 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b082      	sub	sp, #8
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d101      	bne.n	8005336 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e07f      	b.n	8005436 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800533c:	b2db      	uxtb	r3, r3
 800533e:	2b00      	cmp	r3, #0
 8005340:	d106      	bne.n	8005350 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f7fb fb90 	bl	8000a70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2224      	movs	r2, #36	; 0x24
 8005354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f022 0201 	bic.w	r2, r2, #1
 8005366:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685a      	ldr	r2, [r3, #4]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005374:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	689a      	ldr	r2, [r3, #8]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005384:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	2b01      	cmp	r3, #1
 800538c:	d107      	bne.n	800539e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	689a      	ldr	r2, [r3, #8]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800539a:	609a      	str	r2, [r3, #8]
 800539c:	e006      	b.n	80053ac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	689a      	ldr	r2, [r3, #8]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80053aa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	2b02      	cmp	r3, #2
 80053b2:	d104      	bne.n	80053be <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053bc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	6859      	ldr	r1, [r3, #4]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	4b1d      	ldr	r3, [pc, #116]	; (8005440 <HAL_I2C_Init+0x11c>)
 80053ca:	430b      	orrs	r3, r1
 80053cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	68da      	ldr	r2, [r3, #12]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80053dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	691a      	ldr	r2, [r3, #16]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	695b      	ldr	r3, [r3, #20]
 80053e6:	ea42 0103 	orr.w	r1, r2, r3
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	699b      	ldr	r3, [r3, #24]
 80053ee:	021a      	lsls	r2, r3, #8
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	430a      	orrs	r2, r1
 80053f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	69d9      	ldr	r1, [r3, #28]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a1a      	ldr	r2, [r3, #32]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	430a      	orrs	r2, r1
 8005406:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f042 0201 	orr.w	r2, r2, #1
 8005416:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2220      	movs	r2, #32
 8005422:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005434:	2300      	movs	r3, #0
}
 8005436:	4618      	mov	r0, r3
 8005438:	3708      	adds	r7, #8
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop
 8005440:	02008000 	.word	0x02008000

08005444 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	699b      	ldr	r3, [r3, #24]
 8005452:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005460:	2b00      	cmp	r3, #0
 8005462:	d005      	beq.n	8005470 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005468:	68ba      	ldr	r2, [r7, #8]
 800546a:	68f9      	ldr	r1, [r7, #12]
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	4798      	blx	r3
  }
}
 8005470:	bf00      	nop
 8005472:	3710      	adds	r7, #16
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b086      	sub	sp, #24
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	699b      	ldr	r3, [r3, #24]
 8005486:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	0a1b      	lsrs	r3, r3, #8
 8005494:	f003 0301 	and.w	r3, r3, #1
 8005498:	2b00      	cmp	r3, #0
 800549a:	d010      	beq.n	80054be <HAL_I2C_ER_IRQHandler+0x46>
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	09db      	lsrs	r3, r3, #7
 80054a0:	f003 0301 	and.w	r3, r3, #1
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d00a      	beq.n	80054be <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ac:	f043 0201 	orr.w	r2, r3, #1
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80054bc:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	0a9b      	lsrs	r3, r3, #10
 80054c2:	f003 0301 	and.w	r3, r3, #1
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d010      	beq.n	80054ec <HAL_I2C_ER_IRQHandler+0x74>
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	09db      	lsrs	r3, r3, #7
 80054ce:	f003 0301 	and.w	r3, r3, #1
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d00a      	beq.n	80054ec <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054da:	f043 0208 	orr.w	r2, r3, #8
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80054ea:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	0a5b      	lsrs	r3, r3, #9
 80054f0:	f003 0301 	and.w	r3, r3, #1
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d010      	beq.n	800551a <HAL_I2C_ER_IRQHandler+0xa2>
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	09db      	lsrs	r3, r3, #7
 80054fc:	f003 0301 	and.w	r3, r3, #1
 8005500:	2b00      	cmp	r3, #0
 8005502:	d00a      	beq.n	800551a <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005508:	f043 0202 	orr.w	r2, r3, #2
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005518:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800551e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f003 030b 	and.w	r3, r3, #11
 8005526:	2b00      	cmp	r3, #0
 8005528:	d003      	beq.n	8005532 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800552a:	68f9      	ldr	r1, [r7, #12]
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f000 fc77 	bl	8005e20 <I2C_ITError>
  }
}
 8005532:	bf00      	nop
 8005534:	3718      	adds	r7, #24
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}

0800553a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800553a:	b480      	push	{r7}
 800553c:	b083      	sub	sp, #12
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005542:	bf00      	nop
 8005544:	370c      	adds	r7, #12
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr

0800554e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800554e:	b480      	push	{r7}
 8005550:	b083      	sub	sp, #12
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005556:	bf00      	nop
 8005558:	370c      	adds	r7, #12
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr

08005562 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005562:	b480      	push	{r7}
 8005564:	b083      	sub	sp, #12
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
 800556a:	460b      	mov	r3, r1
 800556c:	70fb      	strb	r3, [r7, #3]
 800556e:	4613      	mov	r3, r2
 8005570:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005572:	bf00      	nop
 8005574:	370c      	adds	r7, #12
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr

0800557e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800557e:	b480      	push	{r7}
 8005580:	b083      	sub	sp, #12
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8005586:	bf00      	nop
 8005588:	370c      	adds	r7, #12
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr

08005592 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005592:	b480      	push	{r7}
 8005594:	b083      	sub	sp, #12
 8005596:	af00      	add	r7, sp, #0
 8005598:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800559a:	bf00      	nop
 800559c:	370c      	adds	r7, #12
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr

080055a6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80055a6:	b480      	push	{r7}
 80055a8:	b083      	sub	sp, #12
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80055ae:	bf00      	nop
 80055b0:	370c      	adds	r7, #12
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr

080055ba <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80055ba:	b580      	push	{r7, lr}
 80055bc:	b086      	sub	sp, #24
 80055be:	af00      	add	r7, sp, #0
 80055c0:	60f8      	str	r0, [r7, #12]
 80055c2:	60b9      	str	r1, [r7, #8]
 80055c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ca:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d101      	bne.n	80055de <I2C_Slave_ISR_IT+0x24>
 80055da:	2302      	movs	r3, #2
 80055dc:	e0ec      	b.n	80057b8 <I2C_Slave_ISR_IT+0x1fe>
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2201      	movs	r2, #1
 80055e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	095b      	lsrs	r3, r3, #5
 80055ea:	f003 0301 	and.w	r3, r3, #1
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d009      	beq.n	8005606 <I2C_Slave_ISR_IT+0x4c>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	095b      	lsrs	r3, r3, #5
 80055f6:	f003 0301 	and.w	r3, r3, #1
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d003      	beq.n	8005606 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80055fe:	6939      	ldr	r1, [r7, #16]
 8005600:	68f8      	ldr	r0, [r7, #12]
 8005602:	f000 f9bf 	bl	8005984 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	091b      	lsrs	r3, r3, #4
 800560a:	f003 0301 	and.w	r3, r3, #1
 800560e:	2b00      	cmp	r3, #0
 8005610:	d04d      	beq.n	80056ae <I2C_Slave_ISR_IT+0xf4>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	091b      	lsrs	r3, r3, #4
 8005616:	f003 0301 	and.w	r3, r3, #1
 800561a:	2b00      	cmp	r3, #0
 800561c:	d047      	beq.n	80056ae <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005622:	b29b      	uxth	r3, r3
 8005624:	2b00      	cmp	r3, #0
 8005626:	d128      	bne.n	800567a <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800562e:	b2db      	uxtb	r3, r3
 8005630:	2b28      	cmp	r3, #40	; 0x28
 8005632:	d108      	bne.n	8005646 <I2C_Slave_ISR_IT+0x8c>
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800563a:	d104      	bne.n	8005646 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800563c:	6939      	ldr	r1, [r7, #16]
 800563e:	68f8      	ldr	r0, [r7, #12]
 8005640:	f000 fb98 	bl	8005d74 <I2C_ITListenCplt>
 8005644:	e032      	b.n	80056ac <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800564c:	b2db      	uxtb	r3, r3
 800564e:	2b29      	cmp	r3, #41	; 0x29
 8005650:	d10e      	bne.n	8005670 <I2C_Slave_ISR_IT+0xb6>
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005658:	d00a      	beq.n	8005670 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2210      	movs	r2, #16
 8005660:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005662:	68f8      	ldr	r0, [r7, #12]
 8005664:	f000 fcd3 	bl	800600e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005668:	68f8      	ldr	r0, [r7, #12]
 800566a:	f000 f92d 	bl	80058c8 <I2C_ITSlaveSeqCplt>
 800566e:	e01d      	b.n	80056ac <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	2210      	movs	r2, #16
 8005676:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005678:	e096      	b.n	80057a8 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2210      	movs	r2, #16
 8005680:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005686:	f043 0204 	orr.w	r2, r3, #4
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d004      	beq.n	800569e <I2C_Slave_ISR_IT+0xe4>
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800569a:	f040 8085 	bne.w	80057a8 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056a2:	4619      	mov	r1, r3
 80056a4:	68f8      	ldr	r0, [r7, #12]
 80056a6:	f000 fbbb 	bl	8005e20 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80056aa:	e07d      	b.n	80057a8 <I2C_Slave_ISR_IT+0x1ee>
 80056ac:	e07c      	b.n	80057a8 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	089b      	lsrs	r3, r3, #2
 80056b2:	f003 0301 	and.w	r3, r3, #1
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d030      	beq.n	800571c <I2C_Slave_ISR_IT+0x162>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	089b      	lsrs	r3, r3, #2
 80056be:	f003 0301 	and.w	r3, r3, #1
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d02a      	beq.n	800571c <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d018      	beq.n	8005702 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056da:	b2d2      	uxtb	r2, r2
 80056dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e2:	1c5a      	adds	r2, r3, #1
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056ec:	3b01      	subs	r3, #1
 80056ee:	b29a      	uxth	r2, r3
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	3b01      	subs	r3, #1
 80056fc:	b29a      	uxth	r2, r3
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005706:	b29b      	uxth	r3, r3
 8005708:	2b00      	cmp	r3, #0
 800570a:	d14f      	bne.n	80057ac <I2C_Slave_ISR_IT+0x1f2>
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005712:	d04b      	beq.n	80057ac <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005714:	68f8      	ldr	r0, [r7, #12]
 8005716:	f000 f8d7 	bl	80058c8 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800571a:	e047      	b.n	80057ac <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	08db      	lsrs	r3, r3, #3
 8005720:	f003 0301 	and.w	r3, r3, #1
 8005724:	2b00      	cmp	r3, #0
 8005726:	d00a      	beq.n	800573e <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	08db      	lsrs	r3, r3, #3
 800572c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005730:	2b00      	cmp	r3, #0
 8005732:	d004      	beq.n	800573e <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005734:	6939      	ldr	r1, [r7, #16]
 8005736:	68f8      	ldr	r0, [r7, #12]
 8005738:	f000 f842 	bl	80057c0 <I2C_ITAddrCplt>
 800573c:	e037      	b.n	80057ae <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	085b      	lsrs	r3, r3, #1
 8005742:	f003 0301 	and.w	r3, r3, #1
 8005746:	2b00      	cmp	r3, #0
 8005748:	d031      	beq.n	80057ae <I2C_Slave_ISR_IT+0x1f4>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	085b      	lsrs	r3, r3, #1
 800574e:	f003 0301 	and.w	r3, r3, #1
 8005752:	2b00      	cmp	r3, #0
 8005754:	d02b      	beq.n	80057ae <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800575a:	b29b      	uxth	r3, r3
 800575c:	2b00      	cmp	r3, #0
 800575e:	d018      	beq.n	8005792 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005764:	781a      	ldrb	r2, [r3, #0]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005770:	1c5a      	adds	r2, r3, #1
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800577a:	b29b      	uxth	r3, r3
 800577c:	3b01      	subs	r3, #1
 800577e:	b29a      	uxth	r2, r3
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005788:	3b01      	subs	r3, #1
 800578a:	b29a      	uxth	r2, r3
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	851a      	strh	r2, [r3, #40]	; 0x28
 8005790:	e00d      	b.n	80057ae <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005798:	d002      	beq.n	80057a0 <I2C_Slave_ISR_IT+0x1e6>
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d106      	bne.n	80057ae <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80057a0:	68f8      	ldr	r0, [r7, #12]
 80057a2:	f000 f891 	bl	80058c8 <I2C_ITSlaveSeqCplt>
 80057a6:	e002      	b.n	80057ae <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 80057a8:	bf00      	nop
 80057aa:	e000      	b.n	80057ae <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 80057ac:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80057b6:	2300      	movs	r3, #0
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3718      	adds	r7, #24
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}

080057c0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80057d6:	2b28      	cmp	r3, #40	; 0x28
 80057d8:	d16a      	bne.n	80058b0 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	699b      	ldr	r3, [r3, #24]
 80057e0:	0c1b      	lsrs	r3, r3, #16
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	f003 0301 	and.w	r3, r3, #1
 80057e8:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	699b      	ldr	r3, [r3, #24]
 80057f0:	0c1b      	lsrs	r3, r3, #16
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80057f8:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	b29b      	uxth	r3, r3
 8005802:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005806:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	b29b      	uxth	r3, r3
 8005810:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005814:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	2b02      	cmp	r3, #2
 800581c:	d138      	bne.n	8005890 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800581e:	897b      	ldrh	r3, [r7, #10]
 8005820:	09db      	lsrs	r3, r3, #7
 8005822:	b29a      	uxth	r2, r3
 8005824:	89bb      	ldrh	r3, [r7, #12]
 8005826:	4053      	eors	r3, r2
 8005828:	b29b      	uxth	r3, r3
 800582a:	f003 0306 	and.w	r3, r3, #6
 800582e:	2b00      	cmp	r3, #0
 8005830:	d11c      	bne.n	800586c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8005832:	897b      	ldrh	r3, [r7, #10]
 8005834:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800583a:	1c5a      	adds	r2, r3, #1
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005844:	2b02      	cmp	r3, #2
 8005846:	d13b      	bne.n	80058c0 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	2208      	movs	r2, #8
 8005854:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800585e:	89ba      	ldrh	r2, [r7, #12]
 8005860:	7bfb      	ldrb	r3, [r7, #15]
 8005862:	4619      	mov	r1, r3
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f7ff fe7c 	bl	8005562 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800586a:	e029      	b.n	80058c0 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800586c:	893b      	ldrh	r3, [r7, #8]
 800586e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005870:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f000 fc0c 	bl	8006092 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005882:	89ba      	ldrh	r2, [r7, #12]
 8005884:	7bfb      	ldrb	r3, [r7, #15]
 8005886:	4619      	mov	r1, r3
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f7ff fe6a 	bl	8005562 <HAL_I2C_AddrCallback>
}
 800588e:	e017      	b.n	80058c0 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005890:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f000 fbfc 	bl	8006092 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80058a2:	89ba      	ldrh	r2, [r7, #12]
 80058a4:	7bfb      	ldrb	r3, [r7, #15]
 80058a6:	4619      	mov	r1, r3
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f7ff fe5a 	bl	8005562 <HAL_I2C_AddrCallback>
}
 80058ae:	e007      	b.n	80058c0 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	2208      	movs	r2, #8
 80058b6:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80058c0:	bf00      	nop
 80058c2:	3710      	adds	r7, #16
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b084      	sub	sp, #16
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	0b9b      	lsrs	r3, r3, #14
 80058e4:	f003 0301 	and.w	r3, r3, #1
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d008      	beq.n	80058fe <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80058fa:	601a      	str	r2, [r3, #0]
 80058fc:	e00d      	b.n	800591a <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	0bdb      	lsrs	r3, r3, #15
 8005902:	f003 0301 	and.w	r3, r3, #1
 8005906:	2b00      	cmp	r3, #0
 8005908:	d007      	beq.n	800591a <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005918:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005920:	b2db      	uxtb	r3, r3
 8005922:	2b29      	cmp	r3, #41	; 0x29
 8005924:	d112      	bne.n	800594c <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2228      	movs	r2, #40	; 0x28
 800592a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2221      	movs	r2, #33	; 0x21
 8005932:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005934:	2101      	movs	r1, #1
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f000 fbab 	bl	8006092 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f7ff fdf8 	bl	800553a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800594a:	e017      	b.n	800597c <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005952:	b2db      	uxtb	r3, r3
 8005954:	2b2a      	cmp	r3, #42	; 0x2a
 8005956:	d111      	bne.n	800597c <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2228      	movs	r2, #40	; 0x28
 800595c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2222      	movs	r2, #34	; 0x22
 8005964:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005966:	2102      	movs	r1, #2
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f000 fb92 	bl	8006092 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f7ff fde9 	bl	800554e <HAL_I2C_SlaveRxCpltCallback>
}
 800597c:	bf00      	nop
 800597e:	3710      	adds	r7, #16
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}

08005984 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b086      	sub	sp, #24
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059a0:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	2220      	movs	r2, #32
 80059a8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80059aa:	7bfb      	ldrb	r3, [r7, #15]
 80059ac:	2b21      	cmp	r3, #33	; 0x21
 80059ae:	d002      	beq.n	80059b6 <I2C_ITSlaveCplt+0x32>
 80059b0:	7bfb      	ldrb	r3, [r7, #15]
 80059b2:	2b29      	cmp	r3, #41	; 0x29
 80059b4:	d108      	bne.n	80059c8 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80059b6:	f248 0101 	movw	r1, #32769	; 0x8001
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f000 fb69 	bl	8006092 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2221      	movs	r2, #33	; 0x21
 80059c4:	631a      	str	r2, [r3, #48]	; 0x30
 80059c6:	e00d      	b.n	80059e4 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80059c8:	7bfb      	ldrb	r3, [r7, #15]
 80059ca:	2b22      	cmp	r3, #34	; 0x22
 80059cc:	d002      	beq.n	80059d4 <I2C_ITSlaveCplt+0x50>
 80059ce:	7bfb      	ldrb	r3, [r7, #15]
 80059d0:	2b2a      	cmp	r3, #42	; 0x2a
 80059d2:	d107      	bne.n	80059e4 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80059d4:	f248 0102 	movw	r1, #32770	; 0x8002
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f000 fb5a 	bl	8006092 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2222      	movs	r2, #34	; 0x22
 80059e2:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	685a      	ldr	r2, [r3, #4]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80059f2:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	6859      	ldr	r1, [r3, #4]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	4b80      	ldr	r3, [pc, #512]	; (8005c00 <I2C_ITSlaveCplt+0x27c>)
 8005a00:	400b      	ands	r3, r1
 8005a02:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f000 fb02 	bl	800600e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	0b9b      	lsrs	r3, r3, #14
 8005a0e:	f003 0301 	and.w	r3, r3, #1
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d07a      	beq.n	8005b0c <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005a24:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	f000 8111 	beq.w	8005c52 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a73      	ldr	r2, [pc, #460]	; (8005c04 <I2C_ITSlaveCplt+0x280>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d059      	beq.n	8005af0 <I2C_ITSlaveCplt+0x16c>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a71      	ldr	r2, [pc, #452]	; (8005c08 <I2C_ITSlaveCplt+0x284>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d053      	beq.n	8005af0 <I2C_ITSlaveCplt+0x16c>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a6f      	ldr	r2, [pc, #444]	; (8005c0c <I2C_ITSlaveCplt+0x288>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d04d      	beq.n	8005af0 <I2C_ITSlaveCplt+0x16c>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a6d      	ldr	r2, [pc, #436]	; (8005c10 <I2C_ITSlaveCplt+0x28c>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d047      	beq.n	8005af0 <I2C_ITSlaveCplt+0x16c>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a6b      	ldr	r2, [pc, #428]	; (8005c14 <I2C_ITSlaveCplt+0x290>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d041      	beq.n	8005af0 <I2C_ITSlaveCplt+0x16c>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a69      	ldr	r2, [pc, #420]	; (8005c18 <I2C_ITSlaveCplt+0x294>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d03b      	beq.n	8005af0 <I2C_ITSlaveCplt+0x16c>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a67      	ldr	r2, [pc, #412]	; (8005c1c <I2C_ITSlaveCplt+0x298>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d035      	beq.n	8005af0 <I2C_ITSlaveCplt+0x16c>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a65      	ldr	r2, [pc, #404]	; (8005c20 <I2C_ITSlaveCplt+0x29c>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d02f      	beq.n	8005af0 <I2C_ITSlaveCplt+0x16c>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a63      	ldr	r2, [pc, #396]	; (8005c24 <I2C_ITSlaveCplt+0x2a0>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d029      	beq.n	8005af0 <I2C_ITSlaveCplt+0x16c>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a61      	ldr	r2, [pc, #388]	; (8005c28 <I2C_ITSlaveCplt+0x2a4>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d023      	beq.n	8005af0 <I2C_ITSlaveCplt+0x16c>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a5f      	ldr	r2, [pc, #380]	; (8005c2c <I2C_ITSlaveCplt+0x2a8>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d01d      	beq.n	8005af0 <I2C_ITSlaveCplt+0x16c>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a5d      	ldr	r2, [pc, #372]	; (8005c30 <I2C_ITSlaveCplt+0x2ac>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d017      	beq.n	8005af0 <I2C_ITSlaveCplt+0x16c>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a5b      	ldr	r2, [pc, #364]	; (8005c34 <I2C_ITSlaveCplt+0x2b0>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d011      	beq.n	8005af0 <I2C_ITSlaveCplt+0x16c>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a59      	ldr	r2, [pc, #356]	; (8005c38 <I2C_ITSlaveCplt+0x2b4>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d00b      	beq.n	8005af0 <I2C_ITSlaveCplt+0x16c>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a57      	ldr	r2, [pc, #348]	; (8005c3c <I2C_ITSlaveCplt+0x2b8>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d005      	beq.n	8005af0 <I2C_ITSlaveCplt+0x16c>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a55      	ldr	r2, [pc, #340]	; (8005c40 <I2C_ITSlaveCplt+0x2bc>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d105      	bne.n	8005afc <I2C_ITSlaveCplt+0x178>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	e004      	b.n	8005b06 <I2C_ITSlaveCplt+0x182>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	8553      	strh	r3, [r2, #42]	; 0x2a
 8005b0a:	e0a2      	b.n	8005c52 <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	0bdb      	lsrs	r3, r3, #15
 8005b10:	f003 0301 	and.w	r3, r3, #1
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	f000 809c 	beq.w	8005c52 <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005b28:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	f000 808f 	beq.w	8005c52 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a32      	ldr	r2, [pc, #200]	; (8005c04 <I2C_ITSlaveCplt+0x280>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d059      	beq.n	8005bf4 <I2C_ITSlaveCplt+0x270>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a30      	ldr	r2, [pc, #192]	; (8005c08 <I2C_ITSlaveCplt+0x284>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d053      	beq.n	8005bf4 <I2C_ITSlaveCplt+0x270>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a2e      	ldr	r2, [pc, #184]	; (8005c0c <I2C_ITSlaveCplt+0x288>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d04d      	beq.n	8005bf4 <I2C_ITSlaveCplt+0x270>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a2c      	ldr	r2, [pc, #176]	; (8005c10 <I2C_ITSlaveCplt+0x28c>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d047      	beq.n	8005bf4 <I2C_ITSlaveCplt+0x270>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a2a      	ldr	r2, [pc, #168]	; (8005c14 <I2C_ITSlaveCplt+0x290>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d041      	beq.n	8005bf4 <I2C_ITSlaveCplt+0x270>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a28      	ldr	r2, [pc, #160]	; (8005c18 <I2C_ITSlaveCplt+0x294>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d03b      	beq.n	8005bf4 <I2C_ITSlaveCplt+0x270>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a26      	ldr	r2, [pc, #152]	; (8005c1c <I2C_ITSlaveCplt+0x298>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d035      	beq.n	8005bf4 <I2C_ITSlaveCplt+0x270>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a24      	ldr	r2, [pc, #144]	; (8005c20 <I2C_ITSlaveCplt+0x29c>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d02f      	beq.n	8005bf4 <I2C_ITSlaveCplt+0x270>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a22      	ldr	r2, [pc, #136]	; (8005c24 <I2C_ITSlaveCplt+0x2a0>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d029      	beq.n	8005bf4 <I2C_ITSlaveCplt+0x270>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a20      	ldr	r2, [pc, #128]	; (8005c28 <I2C_ITSlaveCplt+0x2a4>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d023      	beq.n	8005bf4 <I2C_ITSlaveCplt+0x270>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a1e      	ldr	r2, [pc, #120]	; (8005c2c <I2C_ITSlaveCplt+0x2a8>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d01d      	beq.n	8005bf4 <I2C_ITSlaveCplt+0x270>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a1c      	ldr	r2, [pc, #112]	; (8005c30 <I2C_ITSlaveCplt+0x2ac>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d017      	beq.n	8005bf4 <I2C_ITSlaveCplt+0x270>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a1a      	ldr	r2, [pc, #104]	; (8005c34 <I2C_ITSlaveCplt+0x2b0>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d011      	beq.n	8005bf4 <I2C_ITSlaveCplt+0x270>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a18      	ldr	r2, [pc, #96]	; (8005c38 <I2C_ITSlaveCplt+0x2b4>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d00b      	beq.n	8005bf4 <I2C_ITSlaveCplt+0x270>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a16      	ldr	r2, [pc, #88]	; (8005c3c <I2C_ITSlaveCplt+0x2b8>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d005      	beq.n	8005bf4 <I2C_ITSlaveCplt+0x270>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a14      	ldr	r2, [pc, #80]	; (8005c40 <I2C_ITSlaveCplt+0x2bc>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d127      	bne.n	8005c44 <I2C_ITSlaveCplt+0x2c0>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	e026      	b.n	8005c4e <I2C_ITSlaveCplt+0x2ca>
 8005c00:	fe00e800 	.word	0xfe00e800
 8005c04:	40020010 	.word	0x40020010
 8005c08:	40020028 	.word	0x40020028
 8005c0c:	40020040 	.word	0x40020040
 8005c10:	40020058 	.word	0x40020058
 8005c14:	40020070 	.word	0x40020070
 8005c18:	40020088 	.word	0x40020088
 8005c1c:	400200a0 	.word	0x400200a0
 8005c20:	400200b8 	.word	0x400200b8
 8005c24:	40020410 	.word	0x40020410
 8005c28:	40020428 	.word	0x40020428
 8005c2c:	40020440 	.word	0x40020440
 8005c30:	40020458 	.word	0x40020458
 8005c34:	40020470 	.word	0x40020470
 8005c38:	40020488 	.word	0x40020488
 8005c3c:	400204a0 	.word	0x400204a0
 8005c40:	400204b8 	.word	0x400204b8
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	089b      	lsrs	r3, r3, #2
 8005c56:	f003 0301 	and.w	r3, r3, #1
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d020      	beq.n	8005ca0 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	f023 0304 	bic.w	r3, r3, #4
 8005c64:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c70:	b2d2      	uxtb	r2, r2
 8005c72:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c78:	1c5a      	adds	r2, r3, #1
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d00c      	beq.n	8005ca0 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c8a:	3b01      	subs	r3, #1
 8005c8c:	b29a      	uxth	r2, r3
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	3b01      	subs	r3, #1
 8005c9a:	b29a      	uxth	r2, r3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d005      	beq.n	8005cb6 <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cae:	f043 0204 	orr.w	r2, r3, #4
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d010      	beq.n	8005cee <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cd0:	4619      	mov	r1, r3
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 f8a4 	bl	8005e20 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	2b28      	cmp	r3, #40	; 0x28
 8005ce2:	d141      	bne.n	8005d68 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8005ce4:	6979      	ldr	r1, [r7, #20]
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 f844 	bl	8005d74 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005cec:	e03c      	b.n	8005d68 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005cf6:	d014      	beq.n	8005d22 <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f7ff fde5 	bl	80058c8 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a1b      	ldr	r2, [pc, #108]	; (8005d70 <I2C_ITSlaveCplt+0x3ec>)
 8005d02:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2220      	movs	r2, #32
 8005d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f7ff fc2f 	bl	800557e <HAL_I2C_ListenCpltCallback>
}
 8005d20:	e022      	b.n	8005d68 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	2b22      	cmp	r3, #34	; 0x22
 8005d2c:	d10e      	bne.n	8005d4c <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2220      	movs	r2, #32
 8005d32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f7ff fc02 	bl	800554e <HAL_I2C_SlaveRxCpltCallback>
}
 8005d4a:	e00d      	b.n	8005d68 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2220      	movs	r2, #32
 8005d50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f7ff fbe9 	bl	800553a <HAL_I2C_SlaveTxCpltCallback>
}
 8005d68:	bf00      	nop
 8005d6a:	3718      	adds	r7, #24
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}
 8005d70:	ffff0000 	.word	0xffff0000

08005d74 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b082      	sub	sp, #8
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4a26      	ldr	r2, [pc, #152]	; (8005e1c <I2C_ITListenCplt+0xa8>)
 8005d82:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2220      	movs	r2, #32
 8005d8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2200      	movs	r2, #0
 8005d96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	089b      	lsrs	r3, r3, #2
 8005da4:	f003 0301 	and.w	r3, r3, #1
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d022      	beq.n	8005df2 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db6:	b2d2      	uxtb	r2, r2
 8005db8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dbe:	1c5a      	adds	r2, r3, #1
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d012      	beq.n	8005df2 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dd0:	3b01      	subs	r3, #1
 8005dd2:	b29a      	uxth	r2, r3
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	3b01      	subs	r3, #1
 8005de0:	b29a      	uxth	r2, r3
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dea:	f043 0204 	orr.w	r2, r3, #4
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005df2:	f248 0103 	movw	r1, #32771	; 0x8003
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 f94b 	bl	8006092 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	2210      	movs	r2, #16
 8005e02:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f7ff fbb6 	bl	800557e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005e12:	bf00      	nop
 8005e14:	3708      	adds	r7, #8
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	ffff0000 	.word	0xffff0000

08005e20 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b084      	sub	sp, #16
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2200      	movs	r2, #0
 8005e36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	4a5d      	ldr	r2, [pc, #372]	; (8005fb4 <I2C_ITError+0x194>)
 8005e3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	431a      	orrs	r2, r3
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8005e52:	7bfb      	ldrb	r3, [r7, #15]
 8005e54:	2b28      	cmp	r3, #40	; 0x28
 8005e56:	d005      	beq.n	8005e64 <I2C_ITError+0x44>
 8005e58:	7bfb      	ldrb	r3, [r7, #15]
 8005e5a:	2b29      	cmp	r3, #41	; 0x29
 8005e5c:	d002      	beq.n	8005e64 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8005e5e:	7bfb      	ldrb	r3, [r7, #15]
 8005e60:	2b2a      	cmp	r3, #42	; 0x2a
 8005e62:	d10b      	bne.n	8005e7c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005e64:	2103      	movs	r1, #3
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f000 f913 	bl	8006092 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2228      	movs	r2, #40	; 0x28
 8005e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	4a50      	ldr	r2, [pc, #320]	; (8005fb8 <I2C_ITError+0x198>)
 8005e78:	635a      	str	r2, [r3, #52]	; 0x34
 8005e7a:	e011      	b.n	8005ea0 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005e7c:	f248 0103 	movw	r1, #32771	; 0x8003
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f000 f906 	bl	8006092 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	2b60      	cmp	r3, #96	; 0x60
 8005e90:	d003      	beq.n	8005e9a <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2220      	movs	r2, #32
 8005e96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ea4:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d039      	beq.n	8005f22 <I2C_ITError+0x102>
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	2b11      	cmp	r3, #17
 8005eb2:	d002      	beq.n	8005eba <I2C_ITError+0x9a>
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	2b21      	cmp	r3, #33	; 0x21
 8005eb8:	d133      	bne.n	8005f22 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ec4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ec8:	d107      	bne.n	8005eda <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005ed8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f7fe fc26 	bl	8004730 <HAL_DMA_GetState>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d017      	beq.n	8005f1a <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eee:	4a33      	ldr	r2, [pc, #204]	; (8005fbc <I2C_ITError+0x19c>)
 8005ef0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005efe:	4618      	mov	r0, r3
 8005f00:	f7fd faa6 	bl	8003450 <HAL_DMA_Abort_IT>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d04d      	beq.n	8005fa6 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005f14:	4610      	mov	r0, r2
 8005f16:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005f18:	e045      	b.n	8005fa6 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f000 f850 	bl	8005fc0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005f20:	e041      	b.n	8005fa6 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d039      	beq.n	8005f9e <I2C_ITError+0x17e>
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	2b12      	cmp	r3, #18
 8005f2e:	d002      	beq.n	8005f36 <I2C_ITError+0x116>
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	2b22      	cmp	r3, #34	; 0x22
 8005f34:	d133      	bne.n	8005f9e <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f44:	d107      	bne.n	8005f56 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005f54:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f7fe fbe8 	bl	8004730 <HAL_DMA_GetState>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d017      	beq.n	8005f96 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f6a:	4a14      	ldr	r2, [pc, #80]	; (8005fbc <I2C_ITError+0x19c>)
 8005f6c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f7fd fa68 	bl	8003450 <HAL_DMA_Abort_IT>
 8005f80:	4603      	mov	r3, r0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d011      	beq.n	8005faa <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005f90:	4610      	mov	r0, r2
 8005f92:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005f94:	e009      	b.n	8005faa <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f000 f812 	bl	8005fc0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005f9c:	e005      	b.n	8005faa <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f000 f80e 	bl	8005fc0 <I2C_TreatErrorCallback>
  }
}
 8005fa4:	e002      	b.n	8005fac <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005fa6:	bf00      	nop
 8005fa8:	e000      	b.n	8005fac <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005faa:	bf00      	nop
}
 8005fac:	bf00      	nop
 8005fae:	3710      	adds	r7, #16
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}
 8005fb4:	ffff0000 	.word	0xffff0000
 8005fb8:	080055bb 	.word	0x080055bb
 8005fbc:	08006057 	.word	0x08006057

08005fc0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b082      	sub	sp, #8
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	2b60      	cmp	r3, #96	; 0x60
 8005fd2:	d10e      	bne.n	8005ff2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2220      	movs	r2, #32
 8005fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f7ff fadb 	bl	80055a6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005ff0:	e009      	b.n	8006006 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f7ff fac6 	bl	8005592 <HAL_I2C_ErrorCallback>
}
 8006006:	bf00      	nop
 8006008:	3708      	adds	r7, #8
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}

0800600e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800600e:	b480      	push	{r7}
 8006010:	b083      	sub	sp, #12
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	699b      	ldr	r3, [r3, #24]
 800601c:	f003 0302 	and.w	r3, r3, #2
 8006020:	2b02      	cmp	r3, #2
 8006022:	d103      	bne.n	800602c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	2200      	movs	r2, #0
 800602a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	699b      	ldr	r3, [r3, #24]
 8006032:	f003 0301 	and.w	r3, r3, #1
 8006036:	2b01      	cmp	r3, #1
 8006038:	d007      	beq.n	800604a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	699a      	ldr	r2, [r3, #24]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f042 0201 	orr.w	r2, r2, #1
 8006048:	619a      	str	r2, [r3, #24]
  }
}
 800604a:	bf00      	nop
 800604c:	370c      	adds	r7, #12
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr

08006056 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006056:	b580      	push	{r7, lr}
 8006058:	b084      	sub	sp, #16
 800605a:	af00      	add	r7, sp, #0
 800605c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006062:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006068:	2b00      	cmp	r3, #0
 800606a:	d003      	beq.n	8006074 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006070:	2200      	movs	r2, #0
 8006072:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006078:	2b00      	cmp	r3, #0
 800607a:	d003      	beq.n	8006084 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006080:	2200      	movs	r2, #0
 8006082:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8006084:	68f8      	ldr	r0, [r7, #12]
 8006086:	f7ff ff9b 	bl	8005fc0 <I2C_TreatErrorCallback>
}
 800608a:	bf00      	nop
 800608c:	3710      	adds	r7, #16
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}

08006092 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006092:	b480      	push	{r7}
 8006094:	b085      	sub	sp, #20
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
 800609a:	460b      	mov	r3, r1
 800609c:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800609e:	2300      	movs	r3, #0
 80060a0:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80060a2:	887b      	ldrh	r3, [r7, #2]
 80060a4:	f003 0301 	and.w	r3, r3, #1
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d00f      	beq.n	80060cc <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80060b2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80060c0:	2b28      	cmp	r3, #40	; 0x28
 80060c2:	d003      	beq.n	80060cc <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80060ca:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80060cc:	887b      	ldrh	r3, [r7, #2]
 80060ce:	f003 0302 	and.w	r3, r3, #2
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d00f      	beq.n	80060f6 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80060dc:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80060ea:	2b28      	cmp	r3, #40	; 0x28
 80060ec:	d003      	beq.n	80060f6 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80060f4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80060f6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	da03      	bge.n	8006106 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8006104:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006106:	887b      	ldrh	r3, [r7, #2]
 8006108:	2b10      	cmp	r3, #16
 800610a:	d103      	bne.n	8006114 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8006112:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006114:	887b      	ldrh	r3, [r7, #2]
 8006116:	2b20      	cmp	r3, #32
 8006118:	d103      	bne.n	8006122 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f043 0320 	orr.w	r3, r3, #32
 8006120:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006122:	887b      	ldrh	r3, [r7, #2]
 8006124:	2b40      	cmp	r3, #64	; 0x40
 8006126:	d103      	bne.n	8006130 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800612e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	6819      	ldr	r1, [r3, #0]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	43da      	mvns	r2, r3
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	400a      	ands	r2, r1
 8006140:	601a      	str	r2, [r3, #0]
}
 8006142:	bf00      	nop
 8006144:	3714      	adds	r7, #20
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr

0800614e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800614e:	b480      	push	{r7}
 8006150:	b083      	sub	sp, #12
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
 8006156:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800615e:	b2db      	uxtb	r3, r3
 8006160:	2b20      	cmp	r3, #32
 8006162:	d138      	bne.n	80061d6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800616a:	2b01      	cmp	r3, #1
 800616c:	d101      	bne.n	8006172 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800616e:	2302      	movs	r3, #2
 8006170:	e032      	b.n	80061d8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2201      	movs	r2, #1
 8006176:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2224      	movs	r2, #36	; 0x24
 800617e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f022 0201 	bic.w	r2, r2, #1
 8006190:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80061a0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	6819      	ldr	r1, [r3, #0]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	683a      	ldr	r2, [r7, #0]
 80061ae:	430a      	orrs	r2, r1
 80061b0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f042 0201 	orr.w	r2, r2, #1
 80061c0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2220      	movs	r2, #32
 80061c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80061d2:	2300      	movs	r3, #0
 80061d4:	e000      	b.n	80061d8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80061d6:	2302      	movs	r3, #2
  }
}
 80061d8:	4618      	mov	r0, r3
 80061da:	370c      	adds	r7, #12
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr

080061e4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b085      	sub	sp, #20
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	2b20      	cmp	r3, #32
 80061f8:	d139      	bne.n	800626e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006200:	2b01      	cmp	r3, #1
 8006202:	d101      	bne.n	8006208 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006204:	2302      	movs	r3, #2
 8006206:	e033      	b.n	8006270 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2224      	movs	r2, #36	; 0x24
 8006214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f022 0201 	bic.w	r2, r2, #1
 8006226:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006236:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	021b      	lsls	r3, r3, #8
 800623c:	68fa      	ldr	r2, [r7, #12]
 800623e:	4313      	orrs	r3, r2
 8006240:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	68fa      	ldr	r2, [r7, #12]
 8006248:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f042 0201 	orr.w	r2, r2, #1
 8006258:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2220      	movs	r2, #32
 800625e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2200      	movs	r2, #0
 8006266:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800626a:	2300      	movs	r3, #0
 800626c:	e000      	b.n	8006270 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800626e:	2302      	movs	r3, #2
  }
}
 8006270:	4618      	mov	r0, r3
 8006272:	3714      	adds	r7, #20
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800627c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800627e:	b08f      	sub	sp, #60	; 0x3c
 8006280:	af0a      	add	r7, sp, #40	; 0x28
 8006282:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d101      	bne.n	800628e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	e116      	b.n	80064bc <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800629a:	b2db      	uxtb	r3, r3
 800629c:	2b00      	cmp	r3, #0
 800629e:	d106      	bne.n	80062ae <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2200      	movs	r2, #0
 80062a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f00a fa51 	bl	8010750 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2203      	movs	r2, #3
 80062b2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d102      	bne.n	80062c8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4618      	mov	r0, r3
 80062ce:	f007 f940 	bl	800d552 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	603b      	str	r3, [r7, #0]
 80062d8:	687e      	ldr	r6, [r7, #4]
 80062da:	466d      	mov	r5, sp
 80062dc:	f106 0410 	add.w	r4, r6, #16
 80062e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80062e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80062e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80062e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80062e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80062ec:	e885 0003 	stmia.w	r5, {r0, r1}
 80062f0:	1d33      	adds	r3, r6, #4
 80062f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80062f4:	6838      	ldr	r0, [r7, #0]
 80062f6:	f007 f80b 	bl	800d310 <USB_CoreInit>
 80062fa:	4603      	mov	r3, r0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d005      	beq.n	800630c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2202      	movs	r2, #2
 8006304:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	e0d7      	b.n	80064bc <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	2100      	movs	r1, #0
 8006312:	4618      	mov	r0, r3
 8006314:	f007 f92e 	bl	800d574 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006318:	2300      	movs	r3, #0
 800631a:	73fb      	strb	r3, [r7, #15]
 800631c:	e04a      	b.n	80063b4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800631e:	7bfa      	ldrb	r2, [r7, #15]
 8006320:	6879      	ldr	r1, [r7, #4]
 8006322:	4613      	mov	r3, r2
 8006324:	00db      	lsls	r3, r3, #3
 8006326:	1a9b      	subs	r3, r3, r2
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	440b      	add	r3, r1
 800632c:	333d      	adds	r3, #61	; 0x3d
 800632e:	2201      	movs	r2, #1
 8006330:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006332:	7bfa      	ldrb	r2, [r7, #15]
 8006334:	6879      	ldr	r1, [r7, #4]
 8006336:	4613      	mov	r3, r2
 8006338:	00db      	lsls	r3, r3, #3
 800633a:	1a9b      	subs	r3, r3, r2
 800633c:	009b      	lsls	r3, r3, #2
 800633e:	440b      	add	r3, r1
 8006340:	333c      	adds	r3, #60	; 0x3c
 8006342:	7bfa      	ldrb	r2, [r7, #15]
 8006344:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006346:	7bfa      	ldrb	r2, [r7, #15]
 8006348:	7bfb      	ldrb	r3, [r7, #15]
 800634a:	b298      	uxth	r0, r3
 800634c:	6879      	ldr	r1, [r7, #4]
 800634e:	4613      	mov	r3, r2
 8006350:	00db      	lsls	r3, r3, #3
 8006352:	1a9b      	subs	r3, r3, r2
 8006354:	009b      	lsls	r3, r3, #2
 8006356:	440b      	add	r3, r1
 8006358:	3342      	adds	r3, #66	; 0x42
 800635a:	4602      	mov	r2, r0
 800635c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800635e:	7bfa      	ldrb	r2, [r7, #15]
 8006360:	6879      	ldr	r1, [r7, #4]
 8006362:	4613      	mov	r3, r2
 8006364:	00db      	lsls	r3, r3, #3
 8006366:	1a9b      	subs	r3, r3, r2
 8006368:	009b      	lsls	r3, r3, #2
 800636a:	440b      	add	r3, r1
 800636c:	333f      	adds	r3, #63	; 0x3f
 800636e:	2200      	movs	r2, #0
 8006370:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006372:	7bfa      	ldrb	r2, [r7, #15]
 8006374:	6879      	ldr	r1, [r7, #4]
 8006376:	4613      	mov	r3, r2
 8006378:	00db      	lsls	r3, r3, #3
 800637a:	1a9b      	subs	r3, r3, r2
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	440b      	add	r3, r1
 8006380:	3344      	adds	r3, #68	; 0x44
 8006382:	2200      	movs	r2, #0
 8006384:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006386:	7bfa      	ldrb	r2, [r7, #15]
 8006388:	6879      	ldr	r1, [r7, #4]
 800638a:	4613      	mov	r3, r2
 800638c:	00db      	lsls	r3, r3, #3
 800638e:	1a9b      	subs	r3, r3, r2
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	440b      	add	r3, r1
 8006394:	3348      	adds	r3, #72	; 0x48
 8006396:	2200      	movs	r2, #0
 8006398:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800639a:	7bfa      	ldrb	r2, [r7, #15]
 800639c:	6879      	ldr	r1, [r7, #4]
 800639e:	4613      	mov	r3, r2
 80063a0:	00db      	lsls	r3, r3, #3
 80063a2:	1a9b      	subs	r3, r3, r2
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	440b      	add	r3, r1
 80063a8:	3350      	adds	r3, #80	; 0x50
 80063aa:	2200      	movs	r2, #0
 80063ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80063ae:	7bfb      	ldrb	r3, [r7, #15]
 80063b0:	3301      	adds	r3, #1
 80063b2:	73fb      	strb	r3, [r7, #15]
 80063b4:	7bfa      	ldrb	r2, [r7, #15]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	429a      	cmp	r2, r3
 80063bc:	d3af      	bcc.n	800631e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80063be:	2300      	movs	r3, #0
 80063c0:	73fb      	strb	r3, [r7, #15]
 80063c2:	e044      	b.n	800644e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80063c4:	7bfa      	ldrb	r2, [r7, #15]
 80063c6:	6879      	ldr	r1, [r7, #4]
 80063c8:	4613      	mov	r3, r2
 80063ca:	00db      	lsls	r3, r3, #3
 80063cc:	1a9b      	subs	r3, r3, r2
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	440b      	add	r3, r1
 80063d2:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80063d6:	2200      	movs	r2, #0
 80063d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80063da:	7bfa      	ldrb	r2, [r7, #15]
 80063dc:	6879      	ldr	r1, [r7, #4]
 80063de:	4613      	mov	r3, r2
 80063e0:	00db      	lsls	r3, r3, #3
 80063e2:	1a9b      	subs	r3, r3, r2
 80063e4:	009b      	lsls	r3, r3, #2
 80063e6:	440b      	add	r3, r1
 80063e8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80063ec:	7bfa      	ldrb	r2, [r7, #15]
 80063ee:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80063f0:	7bfa      	ldrb	r2, [r7, #15]
 80063f2:	6879      	ldr	r1, [r7, #4]
 80063f4:	4613      	mov	r3, r2
 80063f6:	00db      	lsls	r3, r3, #3
 80063f8:	1a9b      	subs	r3, r3, r2
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	440b      	add	r3, r1
 80063fe:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006402:	2200      	movs	r2, #0
 8006404:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006406:	7bfa      	ldrb	r2, [r7, #15]
 8006408:	6879      	ldr	r1, [r7, #4]
 800640a:	4613      	mov	r3, r2
 800640c:	00db      	lsls	r3, r3, #3
 800640e:	1a9b      	subs	r3, r3, r2
 8006410:	009b      	lsls	r3, r3, #2
 8006412:	440b      	add	r3, r1
 8006414:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006418:	2200      	movs	r2, #0
 800641a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800641c:	7bfa      	ldrb	r2, [r7, #15]
 800641e:	6879      	ldr	r1, [r7, #4]
 8006420:	4613      	mov	r3, r2
 8006422:	00db      	lsls	r3, r3, #3
 8006424:	1a9b      	subs	r3, r3, r2
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	440b      	add	r3, r1
 800642a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800642e:	2200      	movs	r2, #0
 8006430:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006432:	7bfa      	ldrb	r2, [r7, #15]
 8006434:	6879      	ldr	r1, [r7, #4]
 8006436:	4613      	mov	r3, r2
 8006438:	00db      	lsls	r3, r3, #3
 800643a:	1a9b      	subs	r3, r3, r2
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	440b      	add	r3, r1
 8006440:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006444:	2200      	movs	r2, #0
 8006446:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006448:	7bfb      	ldrb	r3, [r7, #15]
 800644a:	3301      	adds	r3, #1
 800644c:	73fb      	strb	r3, [r7, #15]
 800644e:	7bfa      	ldrb	r2, [r7, #15]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	429a      	cmp	r2, r3
 8006456:	d3b5      	bcc.n	80063c4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	603b      	str	r3, [r7, #0]
 800645e:	687e      	ldr	r6, [r7, #4]
 8006460:	466d      	mov	r5, sp
 8006462:	f106 0410 	add.w	r4, r6, #16
 8006466:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006468:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800646a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800646c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800646e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006472:	e885 0003 	stmia.w	r5, {r0, r1}
 8006476:	1d33      	adds	r3, r6, #4
 8006478:	cb0e      	ldmia	r3, {r1, r2, r3}
 800647a:	6838      	ldr	r0, [r7, #0]
 800647c:	f007 f8a4 	bl	800d5c8 <USB_DevInit>
 8006480:	4603      	mov	r3, r0
 8006482:	2b00      	cmp	r3, #0
 8006484:	d005      	beq.n	8006492 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2202      	movs	r2, #2
 800648a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	e014      	b.n	80064bc <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2200      	movs	r2, #0
 8006496:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2201      	movs	r2, #1
 800649e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d102      	bne.n	80064b0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f001 f892 	bl	80075d4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4618      	mov	r0, r3
 80064b6:	f008 f924 	bl	800e702 <USB_DevDisconnect>

  return HAL_OK;
 80064ba:	2300      	movs	r3, #0
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3714      	adds	r7, #20
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080064c4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b084      	sub	sp, #16
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d101      	bne.n	80064e0 <HAL_PCD_Start+0x1c>
 80064dc:	2302      	movs	r3, #2
 80064de:	e020      	b.n	8006522 <HAL_PCD_Start+0x5e>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2201      	movs	r2, #1
 80064e4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d109      	bne.n	8006504 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d005      	beq.n	8006504 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064fc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4618      	mov	r0, r3
 800650a:	f007 f811 	bl	800d530 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4618      	mov	r0, r3
 8006514:	f008 f8d4 	bl	800e6c0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2200      	movs	r2, #0
 800651c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006520:	2300      	movs	r3, #0
}
 8006522:	4618      	mov	r0, r3
 8006524:	3710      	adds	r7, #16
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}

0800652a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800652a:	b590      	push	{r4, r7, lr}
 800652c:	b08d      	sub	sp, #52	; 0x34
 800652e:	af00      	add	r7, sp, #0
 8006530:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006538:	6a3b      	ldr	r3, [r7, #32]
 800653a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4618      	mov	r0, r3
 8006542:	f008 f992 	bl	800e86a <USB_GetMode>
 8006546:	4603      	mov	r3, r0
 8006548:	2b00      	cmp	r3, #0
 800654a:	f040 83ca 	bne.w	8006ce2 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4618      	mov	r0, r3
 8006554:	f008 f8f6 	bl	800e744 <USB_ReadInterrupts>
 8006558:	4603      	mov	r3, r0
 800655a:	2b00      	cmp	r3, #0
 800655c:	f000 83c0 	beq.w	8006ce0 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4618      	mov	r0, r3
 8006566:	f008 f8ed 	bl	800e744 <USB_ReadInterrupts>
 800656a:	4603      	mov	r3, r0
 800656c:	f003 0302 	and.w	r3, r3, #2
 8006570:	2b02      	cmp	r3, #2
 8006572:	d107      	bne.n	8006584 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	695a      	ldr	r2, [r3, #20]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f002 0202 	and.w	r2, r2, #2
 8006582:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4618      	mov	r0, r3
 800658a:	f008 f8db 	bl	800e744 <USB_ReadInterrupts>
 800658e:	4603      	mov	r3, r0
 8006590:	f003 0310 	and.w	r3, r3, #16
 8006594:	2b10      	cmp	r3, #16
 8006596:	d161      	bne.n	800665c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	699a      	ldr	r2, [r3, #24]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f022 0210 	bic.w	r2, r2, #16
 80065a6:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80065a8:	6a3b      	ldr	r3, [r7, #32]
 80065aa:	6a1b      	ldr	r3, [r3, #32]
 80065ac:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80065ae:	69bb      	ldr	r3, [r7, #24]
 80065b0:	f003 020f 	and.w	r2, r3, #15
 80065b4:	4613      	mov	r3, r2
 80065b6:	00db      	lsls	r3, r3, #3
 80065b8:	1a9b      	subs	r3, r3, r2
 80065ba:	009b      	lsls	r3, r3, #2
 80065bc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	4413      	add	r3, r2
 80065c4:	3304      	adds	r3, #4
 80065c6:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80065c8:	69bb      	ldr	r3, [r7, #24]
 80065ca:	0c5b      	lsrs	r3, r3, #17
 80065cc:	f003 030f 	and.w	r3, r3, #15
 80065d0:	2b02      	cmp	r3, #2
 80065d2:	d124      	bne.n	800661e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80065d4:	69ba      	ldr	r2, [r7, #24]
 80065d6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80065da:	4013      	ands	r3, r2
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d035      	beq.n	800664c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80065e4:	69bb      	ldr	r3, [r7, #24]
 80065e6:	091b      	lsrs	r3, r3, #4
 80065e8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80065ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	461a      	mov	r2, r3
 80065f2:	6a38      	ldr	r0, [r7, #32]
 80065f4:	f007 ff12 	bl	800e41c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	68da      	ldr	r2, [r3, #12]
 80065fc:	69bb      	ldr	r3, [r7, #24]
 80065fe:	091b      	lsrs	r3, r3, #4
 8006600:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006604:	441a      	add	r2, r3
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	699a      	ldr	r2, [r3, #24]
 800660e:	69bb      	ldr	r3, [r7, #24]
 8006610:	091b      	lsrs	r3, r3, #4
 8006612:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006616:	441a      	add	r2, r3
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	619a      	str	r2, [r3, #24]
 800661c:	e016      	b.n	800664c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800661e:	69bb      	ldr	r3, [r7, #24]
 8006620:	0c5b      	lsrs	r3, r3, #17
 8006622:	f003 030f 	and.w	r3, r3, #15
 8006626:	2b06      	cmp	r3, #6
 8006628:	d110      	bne.n	800664c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006630:	2208      	movs	r2, #8
 8006632:	4619      	mov	r1, r3
 8006634:	6a38      	ldr	r0, [r7, #32]
 8006636:	f007 fef1 	bl	800e41c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	699a      	ldr	r2, [r3, #24]
 800663e:	69bb      	ldr	r3, [r7, #24]
 8006640:	091b      	lsrs	r3, r3, #4
 8006642:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006646:	441a      	add	r2, r3
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	699a      	ldr	r2, [r3, #24]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f042 0210 	orr.w	r2, r2, #16
 800665a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4618      	mov	r0, r3
 8006662:	f008 f86f 	bl	800e744 <USB_ReadInterrupts>
 8006666:	4603      	mov	r3, r0
 8006668:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800666c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006670:	d16e      	bne.n	8006750 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8006672:	2300      	movs	r3, #0
 8006674:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4618      	mov	r0, r3
 800667c:	f008 f875 	bl	800e76a <USB_ReadDevAllOutEpInterrupt>
 8006680:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8006682:	e062      	b.n	800674a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006686:	f003 0301 	and.w	r3, r3, #1
 800668a:	2b00      	cmp	r3, #0
 800668c:	d057      	beq.n	800673e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006694:	b2d2      	uxtb	r2, r2
 8006696:	4611      	mov	r1, r2
 8006698:	4618      	mov	r0, r3
 800669a:	f008 f89a 	bl	800e7d2 <USB_ReadDevOutEPInterrupt>
 800669e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	f003 0301 	and.w	r3, r3, #1
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d00c      	beq.n	80066c4 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80066aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ac:	015a      	lsls	r2, r3, #5
 80066ae:	69fb      	ldr	r3, [r7, #28]
 80066b0:	4413      	add	r3, r2
 80066b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066b6:	461a      	mov	r2, r3
 80066b8:	2301      	movs	r3, #1
 80066ba:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80066bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 fdde 	bl	8007280 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	f003 0308 	and.w	r3, r3, #8
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d00c      	beq.n	80066e8 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80066ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d0:	015a      	lsls	r2, r3, #5
 80066d2:	69fb      	ldr	r3, [r7, #28]
 80066d4:	4413      	add	r3, r2
 80066d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066da:	461a      	mov	r2, r3
 80066dc:	2308      	movs	r3, #8
 80066de:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80066e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f000 fed8 	bl	8007498 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	f003 0310 	and.w	r3, r3, #16
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d008      	beq.n	8006704 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80066f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f4:	015a      	lsls	r2, r3, #5
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	4413      	add	r3, r2
 80066fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066fe:	461a      	mov	r2, r3
 8006700:	2310      	movs	r3, #16
 8006702:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	f003 0320 	and.w	r3, r3, #32
 800670a:	2b00      	cmp	r3, #0
 800670c:	d008      	beq.n	8006720 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800670e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006710:	015a      	lsls	r2, r3, #5
 8006712:	69fb      	ldr	r3, [r7, #28]
 8006714:	4413      	add	r3, r2
 8006716:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800671a:	461a      	mov	r2, r3
 800671c:	2320      	movs	r3, #32
 800671e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006726:	2b00      	cmp	r3, #0
 8006728:	d009      	beq.n	800673e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800672a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672c:	015a      	lsls	r2, r3, #5
 800672e:	69fb      	ldr	r3, [r7, #28]
 8006730:	4413      	add	r3, r2
 8006732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006736:	461a      	mov	r2, r3
 8006738:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800673c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800673e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006740:	3301      	adds	r3, #1
 8006742:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006746:	085b      	lsrs	r3, r3, #1
 8006748:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800674a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800674c:	2b00      	cmp	r3, #0
 800674e:	d199      	bne.n	8006684 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4618      	mov	r0, r3
 8006756:	f007 fff5 	bl	800e744 <USB_ReadInterrupts>
 800675a:	4603      	mov	r3, r0
 800675c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006760:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006764:	f040 80c0 	bne.w	80068e8 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4618      	mov	r0, r3
 800676e:	f008 f816 	bl	800e79e <USB_ReadDevAllInEpInterrupt>
 8006772:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8006774:	2300      	movs	r3, #0
 8006776:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8006778:	e0b2      	b.n	80068e0 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800677a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800677c:	f003 0301 	and.w	r3, r3, #1
 8006780:	2b00      	cmp	r3, #0
 8006782:	f000 80a7 	beq.w	80068d4 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800678c:	b2d2      	uxtb	r2, r2
 800678e:	4611      	mov	r1, r2
 8006790:	4618      	mov	r0, r3
 8006792:	f008 f83c 	bl	800e80e <USB_ReadDevInEPInterrupt>
 8006796:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	f003 0301 	and.w	r3, r3, #1
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d057      	beq.n	8006852 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80067a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a4:	f003 030f 	and.w	r3, r3, #15
 80067a8:	2201      	movs	r2, #1
 80067aa:	fa02 f303 	lsl.w	r3, r2, r3
 80067ae:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80067b0:	69fb      	ldr	r3, [r7, #28]
 80067b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	43db      	mvns	r3, r3
 80067bc:	69f9      	ldr	r1, [r7, #28]
 80067be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80067c2:	4013      	ands	r3, r2
 80067c4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80067c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c8:	015a      	lsls	r2, r3, #5
 80067ca:	69fb      	ldr	r3, [r7, #28]
 80067cc:	4413      	add	r3, r2
 80067ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067d2:	461a      	mov	r2, r3
 80067d4:	2301      	movs	r3, #1
 80067d6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	691b      	ldr	r3, [r3, #16]
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d132      	bne.n	8006846 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80067e0:	6879      	ldr	r1, [r7, #4]
 80067e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067e4:	4613      	mov	r3, r2
 80067e6:	00db      	lsls	r3, r3, #3
 80067e8:	1a9b      	subs	r3, r3, r2
 80067ea:	009b      	lsls	r3, r3, #2
 80067ec:	440b      	add	r3, r1
 80067ee:	3348      	adds	r3, #72	; 0x48
 80067f0:	6819      	ldr	r1, [r3, #0]
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067f6:	4613      	mov	r3, r2
 80067f8:	00db      	lsls	r3, r3, #3
 80067fa:	1a9b      	subs	r3, r3, r2
 80067fc:	009b      	lsls	r3, r3, #2
 80067fe:	4403      	add	r3, r0
 8006800:	3344      	adds	r3, #68	; 0x44
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4419      	add	r1, r3
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800680a:	4613      	mov	r3, r2
 800680c:	00db      	lsls	r3, r3, #3
 800680e:	1a9b      	subs	r3, r3, r2
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	4403      	add	r3, r0
 8006814:	3348      	adds	r3, #72	; 0x48
 8006816:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681a:	2b00      	cmp	r3, #0
 800681c:	d113      	bne.n	8006846 <HAL_PCD_IRQHandler+0x31c>
 800681e:	6879      	ldr	r1, [r7, #4]
 8006820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006822:	4613      	mov	r3, r2
 8006824:	00db      	lsls	r3, r3, #3
 8006826:	1a9b      	subs	r3, r3, r2
 8006828:	009b      	lsls	r3, r3, #2
 800682a:	440b      	add	r3, r1
 800682c:	3350      	adds	r3, #80	; 0x50
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d108      	bne.n	8006846 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6818      	ldr	r0, [r3, #0]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800683e:	461a      	mov	r2, r3
 8006840:	2101      	movs	r1, #1
 8006842:	f008 f845 	bl	800e8d0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006848:	b2db      	uxtb	r3, r3
 800684a:	4619      	mov	r1, r3
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f00a f81c 	bl	801088a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	f003 0308 	and.w	r3, r3, #8
 8006858:	2b00      	cmp	r3, #0
 800685a:	d008      	beq.n	800686e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800685c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685e:	015a      	lsls	r2, r3, #5
 8006860:	69fb      	ldr	r3, [r7, #28]
 8006862:	4413      	add	r3, r2
 8006864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006868:	461a      	mov	r2, r3
 800686a:	2308      	movs	r3, #8
 800686c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	f003 0310 	and.w	r3, r3, #16
 8006874:	2b00      	cmp	r3, #0
 8006876:	d008      	beq.n	800688a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687a:	015a      	lsls	r2, r3, #5
 800687c:	69fb      	ldr	r3, [r7, #28]
 800687e:	4413      	add	r3, r2
 8006880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006884:	461a      	mov	r2, r3
 8006886:	2310      	movs	r3, #16
 8006888:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006890:	2b00      	cmp	r3, #0
 8006892:	d008      	beq.n	80068a6 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006896:	015a      	lsls	r2, r3, #5
 8006898:	69fb      	ldr	r3, [r7, #28]
 800689a:	4413      	add	r3, r2
 800689c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068a0:	461a      	mov	r2, r3
 80068a2:	2340      	movs	r3, #64	; 0x40
 80068a4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	f003 0302 	and.w	r3, r3, #2
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d008      	beq.n	80068c2 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80068b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b2:	015a      	lsls	r2, r3, #5
 80068b4:	69fb      	ldr	r3, [r7, #28]
 80068b6:	4413      	add	r3, r2
 80068b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068bc:	461a      	mov	r2, r3
 80068be:	2302      	movs	r3, #2
 80068c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d003      	beq.n	80068d4 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80068cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 fc48 	bl	8007164 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80068d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d6:	3301      	adds	r3, #1
 80068d8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80068da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068dc:	085b      	lsrs	r3, r3, #1
 80068de:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80068e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	f47f af49 	bne.w	800677a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4618      	mov	r0, r3
 80068ee:	f007 ff29 	bl	800e744 <USB_ReadInterrupts>
 80068f2:	4603      	mov	r3, r0
 80068f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068fc:	d122      	bne.n	8006944 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80068fe:	69fb      	ldr	r3, [r7, #28]
 8006900:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	69fa      	ldr	r2, [r7, #28]
 8006908:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800690c:	f023 0301 	bic.w	r3, r3, #1
 8006910:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8006918:	2b01      	cmp	r3, #1
 800691a:	d108      	bne.n	800692e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006924:	2100      	movs	r1, #0
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 fe78 	bl	800761c <HAL_PCDEx_LPM_Callback>
 800692c:	e002      	b.n	8006934 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f00a f822 	bl	8010978 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	695a      	ldr	r2, [r3, #20]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006942:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4618      	mov	r0, r3
 800694a:	f007 fefb 	bl	800e744 <USB_ReadInterrupts>
 800694e:	4603      	mov	r3, r0
 8006950:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006954:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006958:	d112      	bne.n	8006980 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800695a:	69fb      	ldr	r3, [r7, #28]
 800695c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	f003 0301 	and.w	r3, r3, #1
 8006966:	2b01      	cmp	r3, #1
 8006968:	d102      	bne.n	8006970 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f009 ffde 	bl	801092c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	695a      	ldr	r2, [r3, #20]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800697e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4618      	mov	r0, r3
 8006986:	f007 fedd 	bl	800e744 <USB_ReadInterrupts>
 800698a:	4603      	mov	r3, r0
 800698c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006990:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006994:	d121      	bne.n	80069da <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	695a      	ldr	r2, [r3, #20]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80069a4:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d111      	bne.n	80069d4 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069be:	089b      	lsrs	r3, r3, #2
 80069c0:	f003 020f 	and.w	r2, r3, #15
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80069ca:	2101      	movs	r1, #1
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f000 fe25 	bl	800761c <HAL_PCDEx_LPM_Callback>
 80069d2:	e002      	b.n	80069da <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f009 ffa9 	bl	801092c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4618      	mov	r0, r3
 80069e0:	f007 feb0 	bl	800e744 <USB_ReadInterrupts>
 80069e4:	4603      	mov	r3, r0
 80069e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80069ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069ee:	f040 80c7 	bne.w	8006b80 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80069f2:	69fb      	ldr	r3, [r7, #28]
 80069f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	69fa      	ldr	r2, [r7, #28]
 80069fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a00:	f023 0301 	bic.w	r3, r3, #1
 8006a04:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	2110      	movs	r1, #16
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f006 ff39 	bl	800d884 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006a12:	2300      	movs	r3, #0
 8006a14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a16:	e056      	b.n	8006ac6 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a1a:	015a      	lsls	r2, r3, #5
 8006a1c:	69fb      	ldr	r3, [r7, #28]
 8006a1e:	4413      	add	r3, r2
 8006a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a24:	461a      	mov	r2, r3
 8006a26:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006a2a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a2e:	015a      	lsls	r2, r3, #5
 8006a30:	69fb      	ldr	r3, [r7, #28]
 8006a32:	4413      	add	r3, r2
 8006a34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a3c:	0151      	lsls	r1, r2, #5
 8006a3e:	69fa      	ldr	r2, [r7, #28]
 8006a40:	440a      	add	r2, r1
 8006a42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a46:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006a4a:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a4e:	015a      	lsls	r2, r3, #5
 8006a50:	69fb      	ldr	r3, [r7, #28]
 8006a52:	4413      	add	r3, r2
 8006a54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a5c:	0151      	lsls	r1, r2, #5
 8006a5e:	69fa      	ldr	r2, [r7, #28]
 8006a60:	440a      	add	r2, r1
 8006a62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a66:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006a6a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a6e:	015a      	lsls	r2, r3, #5
 8006a70:	69fb      	ldr	r3, [r7, #28]
 8006a72:	4413      	add	r3, r2
 8006a74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a78:	461a      	mov	r2, r3
 8006a7a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006a7e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a82:	015a      	lsls	r2, r3, #5
 8006a84:	69fb      	ldr	r3, [r7, #28]
 8006a86:	4413      	add	r3, r2
 8006a88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a90:	0151      	lsls	r1, r2, #5
 8006a92:	69fa      	ldr	r2, [r7, #28]
 8006a94:	440a      	add	r2, r1
 8006a96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a9a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006a9e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aa2:	015a      	lsls	r2, r3, #5
 8006aa4:	69fb      	ldr	r3, [r7, #28]
 8006aa6:	4413      	add	r3, r2
 8006aa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ab0:	0151      	lsls	r1, r2, #5
 8006ab2:	69fa      	ldr	r2, [r7, #28]
 8006ab4:	440a      	add	r2, r1
 8006ab6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006aba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006abe:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d3a3      	bcc.n	8006a18 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006ad0:	69fb      	ldr	r3, [r7, #28]
 8006ad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ad6:	69db      	ldr	r3, [r3, #28]
 8006ad8:	69fa      	ldr	r2, [r7, #28]
 8006ada:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ade:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006ae2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d016      	beq.n	8006b1a <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006af2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006af6:	69fa      	ldr	r2, [r7, #28]
 8006af8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006afc:	f043 030b 	orr.w	r3, r3, #11
 8006b00:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006b04:	69fb      	ldr	r3, [r7, #28]
 8006b06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b0c:	69fa      	ldr	r2, [r7, #28]
 8006b0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b12:	f043 030b 	orr.w	r3, r3, #11
 8006b16:	6453      	str	r3, [r2, #68]	; 0x44
 8006b18:	e015      	b.n	8006b46 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b20:	695a      	ldr	r2, [r3, #20]
 8006b22:	69fb      	ldr	r3, [r7, #28]
 8006b24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b28:	4619      	mov	r1, r3
 8006b2a:	f242 032b 	movw	r3, #8235	; 0x202b
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006b32:	69fb      	ldr	r3, [r7, #28]
 8006b34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b38:	691b      	ldr	r3, [r3, #16]
 8006b3a:	69fa      	ldr	r2, [r7, #28]
 8006b3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b40:	f043 030b 	orr.w	r3, r3, #11
 8006b44:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006b46:	69fb      	ldr	r3, [r7, #28]
 8006b48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	69fa      	ldr	r2, [r7, #28]
 8006b50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b54:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006b58:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6818      	ldr	r0, [r3, #0]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	691b      	ldr	r3, [r3, #16]
 8006b62:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	f007 feb0 	bl	800e8d0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	695a      	ldr	r2, [r3, #20]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006b7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4618      	mov	r0, r3
 8006b86:	f007 fddd 	bl	800e744 <USB_ReadInterrupts>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b94:	d124      	bne.n	8006be0 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f007 fe74 	bl	800e888 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f006 fece 	bl	800d946 <USB_GetDevSpeed>
 8006baa:	4603      	mov	r3, r0
 8006bac:	461a      	mov	r2, r3
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681c      	ldr	r4, [r3, #0]
 8006bb6:	f001 fce5 	bl	8008584 <HAL_RCC_GetHCLKFreq>
 8006bba:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006bc0:	b2db      	uxtb	r3, r3
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	4620      	mov	r0, r4
 8006bc6:	f006 fc11 	bl	800d3ec <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f009 fe85 	bl	80108da <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	695a      	ldr	r2, [r3, #20]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006bde:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4618      	mov	r0, r3
 8006be6:	f007 fdad 	bl	800e744 <USB_ReadInterrupts>
 8006bea:	4603      	mov	r3, r0
 8006bec:	f003 0308 	and.w	r3, r3, #8
 8006bf0:	2b08      	cmp	r3, #8
 8006bf2:	d10a      	bne.n	8006c0a <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f009 fe62 	bl	80108be <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	695a      	ldr	r2, [r3, #20]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f002 0208 	and.w	r2, r2, #8
 8006c08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f007 fd98 	bl	800e744 <USB_ReadInterrupts>
 8006c14:	4603      	mov	r3, r0
 8006c16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c1e:	d10f      	bne.n	8006c40 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8006c20:	2300      	movs	r3, #0
 8006c22:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c26:	b2db      	uxtb	r3, r3
 8006c28:	4619      	mov	r1, r3
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f009 fec4 	bl	80109b8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	695a      	ldr	r2, [r3, #20]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006c3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4618      	mov	r0, r3
 8006c46:	f007 fd7d 	bl	800e744 <USB_ReadInterrupts>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c54:	d10f      	bne.n	8006c76 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8006c56:	2300      	movs	r3, #0
 8006c58:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	4619      	mov	r1, r3
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f009 fe97 	bl	8010994 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	695a      	ldr	r2, [r3, #20]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006c74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f007 fd62 	bl	800e744 <USB_ReadInterrupts>
 8006c80:	4603      	mov	r3, r0
 8006c82:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006c86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c8a:	d10a      	bne.n	8006ca2 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f009 fea5 	bl	80109dc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	695a      	ldr	r2, [r3, #20]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006ca0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f007 fd4c 	bl	800e744 <USB_ReadInterrupts>
 8006cac:	4603      	mov	r3, r0
 8006cae:	f003 0304 	and.w	r3, r3, #4
 8006cb2:	2b04      	cmp	r3, #4
 8006cb4:	d115      	bne.n	8006ce2 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006cbe:	69bb      	ldr	r3, [r7, #24]
 8006cc0:	f003 0304 	and.w	r3, r3, #4
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d002      	beq.n	8006cce <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f009 fe95 	bl	80109f8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	6859      	ldr	r1, [r3, #4]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	69ba      	ldr	r2, [r7, #24]
 8006cda:	430a      	orrs	r2, r1
 8006cdc:	605a      	str	r2, [r3, #4]
 8006cde:	e000      	b.n	8006ce2 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8006ce0:	bf00      	nop
    }
  }
}
 8006ce2:	3734      	adds	r7, #52	; 0x34
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd90      	pop	{r4, r7, pc}

08006ce8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b082      	sub	sp, #8
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	460b      	mov	r3, r1
 8006cf2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d101      	bne.n	8006d02 <HAL_PCD_SetAddress+0x1a>
 8006cfe:	2302      	movs	r3, #2
 8006d00:	e013      	b.n	8006d2a <HAL_PCD_SetAddress+0x42>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2201      	movs	r2, #1
 8006d06:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	78fa      	ldrb	r2, [r7, #3]
 8006d0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	78fa      	ldrb	r2, [r7, #3]
 8006d18:	4611      	mov	r1, r2
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f007 fcaa 	bl	800e674 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2200      	movs	r2, #0
 8006d24:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006d28:	2300      	movs	r3, #0
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3708      	adds	r7, #8
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}

08006d32 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006d32:	b580      	push	{r7, lr}
 8006d34:	b084      	sub	sp, #16
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	6078      	str	r0, [r7, #4]
 8006d3a:	4608      	mov	r0, r1
 8006d3c:	4611      	mov	r1, r2
 8006d3e:	461a      	mov	r2, r3
 8006d40:	4603      	mov	r3, r0
 8006d42:	70fb      	strb	r3, [r7, #3]
 8006d44:	460b      	mov	r3, r1
 8006d46:	803b      	strh	r3, [r7, #0]
 8006d48:	4613      	mov	r3, r2
 8006d4a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006d50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	da0f      	bge.n	8006d78 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006d58:	78fb      	ldrb	r3, [r7, #3]
 8006d5a:	f003 020f 	and.w	r2, r3, #15
 8006d5e:	4613      	mov	r3, r2
 8006d60:	00db      	lsls	r3, r3, #3
 8006d62:	1a9b      	subs	r3, r3, r2
 8006d64:	009b      	lsls	r3, r3, #2
 8006d66:	3338      	adds	r3, #56	; 0x38
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	4413      	add	r3, r2
 8006d6c:	3304      	adds	r3, #4
 8006d6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2201      	movs	r2, #1
 8006d74:	705a      	strb	r2, [r3, #1]
 8006d76:	e00f      	b.n	8006d98 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006d78:	78fb      	ldrb	r3, [r7, #3]
 8006d7a:	f003 020f 	and.w	r2, r3, #15
 8006d7e:	4613      	mov	r3, r2
 8006d80:	00db      	lsls	r3, r3, #3
 8006d82:	1a9b      	subs	r3, r3, r2
 8006d84:	009b      	lsls	r3, r3, #2
 8006d86:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006d8a:	687a      	ldr	r2, [r7, #4]
 8006d8c:	4413      	add	r3, r2
 8006d8e:	3304      	adds	r3, #4
 8006d90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2200      	movs	r2, #0
 8006d96:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006d98:	78fb      	ldrb	r3, [r7, #3]
 8006d9a:	f003 030f 	and.w	r3, r3, #15
 8006d9e:	b2da      	uxtb	r2, r3
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006da4:	883a      	ldrh	r2, [r7, #0]
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	78ba      	ldrb	r2, [r7, #2]
 8006dae:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	785b      	ldrb	r3, [r3, #1]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d004      	beq.n	8006dc2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	b29a      	uxth	r2, r3
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006dc2:	78bb      	ldrb	r3, [r7, #2]
 8006dc4:	2b02      	cmp	r3, #2
 8006dc6:	d102      	bne.n	8006dce <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d101      	bne.n	8006ddc <HAL_PCD_EP_Open+0xaa>
 8006dd8:	2302      	movs	r3, #2
 8006dda:	e00e      	b.n	8006dfa <HAL_PCD_EP_Open+0xc8>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2201      	movs	r2, #1
 8006de0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	68f9      	ldr	r1, [r7, #12]
 8006dea:	4618      	mov	r0, r3
 8006dec:	f006 fdd0 	bl	800d990 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8006df8:	7afb      	ldrb	r3, [r7, #11]
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3710      	adds	r7, #16
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}

08006e02 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006e02:	b580      	push	{r7, lr}
 8006e04:	b084      	sub	sp, #16
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	6078      	str	r0, [r7, #4]
 8006e0a:	460b      	mov	r3, r1
 8006e0c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006e0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	da0f      	bge.n	8006e36 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006e16:	78fb      	ldrb	r3, [r7, #3]
 8006e18:	f003 020f 	and.w	r2, r3, #15
 8006e1c:	4613      	mov	r3, r2
 8006e1e:	00db      	lsls	r3, r3, #3
 8006e20:	1a9b      	subs	r3, r3, r2
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	3338      	adds	r3, #56	; 0x38
 8006e26:	687a      	ldr	r2, [r7, #4]
 8006e28:	4413      	add	r3, r2
 8006e2a:	3304      	adds	r3, #4
 8006e2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2201      	movs	r2, #1
 8006e32:	705a      	strb	r2, [r3, #1]
 8006e34:	e00f      	b.n	8006e56 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006e36:	78fb      	ldrb	r3, [r7, #3]
 8006e38:	f003 020f 	and.w	r2, r3, #15
 8006e3c:	4613      	mov	r3, r2
 8006e3e:	00db      	lsls	r3, r3, #3
 8006e40:	1a9b      	subs	r3, r3, r2
 8006e42:	009b      	lsls	r3, r3, #2
 8006e44:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	4413      	add	r3, r2
 8006e4c:	3304      	adds	r3, #4
 8006e4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2200      	movs	r2, #0
 8006e54:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006e56:	78fb      	ldrb	r3, [r7, #3]
 8006e58:	f003 030f 	and.w	r3, r3, #15
 8006e5c:	b2da      	uxtb	r2, r3
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d101      	bne.n	8006e70 <HAL_PCD_EP_Close+0x6e>
 8006e6c:	2302      	movs	r3, #2
 8006e6e:	e00e      	b.n	8006e8e <HAL_PCD_EP_Close+0x8c>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2201      	movs	r2, #1
 8006e74:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	68f9      	ldr	r1, [r7, #12]
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f006 fe0e 	bl	800daa0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2200      	movs	r2, #0
 8006e88:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8006e8c:	2300      	movs	r3, #0
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3710      	adds	r7, #16
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}

08006e96 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006e96:	b580      	push	{r7, lr}
 8006e98:	b086      	sub	sp, #24
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	60f8      	str	r0, [r7, #12]
 8006e9e:	607a      	str	r2, [r7, #4]
 8006ea0:	603b      	str	r3, [r7, #0]
 8006ea2:	460b      	mov	r3, r1
 8006ea4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006ea6:	7afb      	ldrb	r3, [r7, #11]
 8006ea8:	f003 020f 	and.w	r2, r3, #15
 8006eac:	4613      	mov	r3, r2
 8006eae:	00db      	lsls	r3, r3, #3
 8006eb0:	1a9b      	subs	r3, r3, r2
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006eb8:	68fa      	ldr	r2, [r7, #12]
 8006eba:	4413      	add	r3, r2
 8006ebc:	3304      	adds	r3, #4
 8006ebe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	683a      	ldr	r2, [r7, #0]
 8006eca:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006ed8:	7afb      	ldrb	r3, [r7, #11]
 8006eda:	f003 030f 	and.w	r3, r3, #15
 8006ede:	b2da      	uxtb	r2, r3
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	691b      	ldr	r3, [r3, #16]
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d102      	bne.n	8006ef2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006ef2:	7afb      	ldrb	r3, [r7, #11]
 8006ef4:	f003 030f 	and.w	r3, r3, #15
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d109      	bne.n	8006f10 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	6818      	ldr	r0, [r3, #0]
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	691b      	ldr	r3, [r3, #16]
 8006f04:	b2db      	uxtb	r3, r3
 8006f06:	461a      	mov	r2, r3
 8006f08:	6979      	ldr	r1, [r7, #20]
 8006f0a:	f007 f8f1 	bl	800e0f0 <USB_EP0StartXfer>
 8006f0e:	e008      	b.n	8006f22 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	6818      	ldr	r0, [r3, #0]
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	691b      	ldr	r3, [r3, #16]
 8006f18:	b2db      	uxtb	r3, r3
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	6979      	ldr	r1, [r7, #20]
 8006f1e:	f006 fe9b 	bl	800dc58 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006f22:	2300      	movs	r3, #0
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3718      	adds	r7, #24
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b083      	sub	sp, #12
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	460b      	mov	r3, r1
 8006f36:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006f38:	78fb      	ldrb	r3, [r7, #3]
 8006f3a:	f003 020f 	and.w	r2, r3, #15
 8006f3e:	6879      	ldr	r1, [r7, #4]
 8006f40:	4613      	mov	r3, r2
 8006f42:	00db      	lsls	r3, r3, #3
 8006f44:	1a9b      	subs	r3, r3, r2
 8006f46:	009b      	lsls	r3, r3, #2
 8006f48:	440b      	add	r3, r1
 8006f4a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006f4e:	681b      	ldr	r3, [r3, #0]
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	370c      	adds	r7, #12
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr

08006f5c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b086      	sub	sp, #24
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	60f8      	str	r0, [r7, #12]
 8006f64:	607a      	str	r2, [r7, #4]
 8006f66:	603b      	str	r3, [r7, #0]
 8006f68:	460b      	mov	r3, r1
 8006f6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006f6c:	7afb      	ldrb	r3, [r7, #11]
 8006f6e:	f003 020f 	and.w	r2, r3, #15
 8006f72:	4613      	mov	r3, r2
 8006f74:	00db      	lsls	r3, r3, #3
 8006f76:	1a9b      	subs	r3, r3, r2
 8006f78:	009b      	lsls	r3, r3, #2
 8006f7a:	3338      	adds	r3, #56	; 0x38
 8006f7c:	68fa      	ldr	r2, [r7, #12]
 8006f7e:	4413      	add	r3, r2
 8006f80:	3304      	adds	r3, #4
 8006f82:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	683a      	ldr	r2, [r7, #0]
 8006f8e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	2200      	movs	r2, #0
 8006f94:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	2201      	movs	r2, #1
 8006f9a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006f9c:	7afb      	ldrb	r3, [r7, #11]
 8006f9e:	f003 030f 	and.w	r3, r3, #15
 8006fa2:	b2da      	uxtb	r2, r3
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	691b      	ldr	r3, [r3, #16]
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d102      	bne.n	8006fb6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006fb0:	687a      	ldr	r2, [r7, #4]
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006fb6:	7afb      	ldrb	r3, [r7, #11]
 8006fb8:	f003 030f 	and.w	r3, r3, #15
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d109      	bne.n	8006fd4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	6818      	ldr	r0, [r3, #0]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	691b      	ldr	r3, [r3, #16]
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	461a      	mov	r2, r3
 8006fcc:	6979      	ldr	r1, [r7, #20]
 8006fce:	f007 f88f 	bl	800e0f0 <USB_EP0StartXfer>
 8006fd2:	e008      	b.n	8006fe6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	6818      	ldr	r0, [r3, #0]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	691b      	ldr	r3, [r3, #16]
 8006fdc:	b2db      	uxtb	r3, r3
 8006fde:	461a      	mov	r2, r3
 8006fe0:	6979      	ldr	r1, [r7, #20]
 8006fe2:	f006 fe39 	bl	800dc58 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006fe6:	2300      	movs	r3, #0
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3718      	adds	r7, #24
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}

08006ff0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b084      	sub	sp, #16
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
 8006ff8:	460b      	mov	r3, r1
 8006ffa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006ffc:	78fb      	ldrb	r3, [r7, #3]
 8006ffe:	f003 020f 	and.w	r2, r3, #15
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	429a      	cmp	r2, r3
 8007008:	d901      	bls.n	800700e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800700a:	2301      	movs	r3, #1
 800700c:	e050      	b.n	80070b0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800700e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007012:	2b00      	cmp	r3, #0
 8007014:	da0f      	bge.n	8007036 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007016:	78fb      	ldrb	r3, [r7, #3]
 8007018:	f003 020f 	and.w	r2, r3, #15
 800701c:	4613      	mov	r3, r2
 800701e:	00db      	lsls	r3, r3, #3
 8007020:	1a9b      	subs	r3, r3, r2
 8007022:	009b      	lsls	r3, r3, #2
 8007024:	3338      	adds	r3, #56	; 0x38
 8007026:	687a      	ldr	r2, [r7, #4]
 8007028:	4413      	add	r3, r2
 800702a:	3304      	adds	r3, #4
 800702c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2201      	movs	r2, #1
 8007032:	705a      	strb	r2, [r3, #1]
 8007034:	e00d      	b.n	8007052 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007036:	78fa      	ldrb	r2, [r7, #3]
 8007038:	4613      	mov	r3, r2
 800703a:	00db      	lsls	r3, r3, #3
 800703c:	1a9b      	subs	r3, r3, r2
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007044:	687a      	ldr	r2, [r7, #4]
 8007046:	4413      	add	r3, r2
 8007048:	3304      	adds	r3, #4
 800704a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2200      	movs	r2, #0
 8007050:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2201      	movs	r2, #1
 8007056:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007058:	78fb      	ldrb	r3, [r7, #3]
 800705a:	f003 030f 	and.w	r3, r3, #15
 800705e:	b2da      	uxtb	r2, r3
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800706a:	2b01      	cmp	r3, #1
 800706c:	d101      	bne.n	8007072 <HAL_PCD_EP_SetStall+0x82>
 800706e:	2302      	movs	r3, #2
 8007070:	e01e      	b.n	80070b0 <HAL_PCD_EP_SetStall+0xc0>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2201      	movs	r2, #1
 8007076:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	68f9      	ldr	r1, [r7, #12]
 8007080:	4618      	mov	r0, r3
 8007082:	f007 fa23 	bl	800e4cc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007086:	78fb      	ldrb	r3, [r7, #3]
 8007088:	f003 030f 	and.w	r3, r3, #15
 800708c:	2b00      	cmp	r3, #0
 800708e:	d10a      	bne.n	80070a6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6818      	ldr	r0, [r3, #0]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	691b      	ldr	r3, [r3, #16]
 8007098:	b2d9      	uxtb	r1, r3
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80070a0:	461a      	mov	r2, r3
 80070a2:	f007 fc15 	bl	800e8d0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2200      	movs	r2, #0
 80070aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80070ae:	2300      	movs	r3, #0
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3710      	adds	r7, #16
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}

080070b8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b084      	sub	sp, #16
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	460b      	mov	r3, r1
 80070c2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80070c4:	78fb      	ldrb	r3, [r7, #3]
 80070c6:	f003 020f 	and.w	r2, r3, #15
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d901      	bls.n	80070d6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80070d2:	2301      	movs	r3, #1
 80070d4:	e042      	b.n	800715c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80070d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	da0f      	bge.n	80070fe <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80070de:	78fb      	ldrb	r3, [r7, #3]
 80070e0:	f003 020f 	and.w	r2, r3, #15
 80070e4:	4613      	mov	r3, r2
 80070e6:	00db      	lsls	r3, r3, #3
 80070e8:	1a9b      	subs	r3, r3, r2
 80070ea:	009b      	lsls	r3, r3, #2
 80070ec:	3338      	adds	r3, #56	; 0x38
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	4413      	add	r3, r2
 80070f2:	3304      	adds	r3, #4
 80070f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2201      	movs	r2, #1
 80070fa:	705a      	strb	r2, [r3, #1]
 80070fc:	e00f      	b.n	800711e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80070fe:	78fb      	ldrb	r3, [r7, #3]
 8007100:	f003 020f 	and.w	r2, r3, #15
 8007104:	4613      	mov	r3, r2
 8007106:	00db      	lsls	r3, r3, #3
 8007108:	1a9b      	subs	r3, r3, r2
 800710a:	009b      	lsls	r3, r3, #2
 800710c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	4413      	add	r3, r2
 8007114:	3304      	adds	r3, #4
 8007116:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2200      	movs	r2, #0
 800711c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2200      	movs	r2, #0
 8007122:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007124:	78fb      	ldrb	r3, [r7, #3]
 8007126:	f003 030f 	and.w	r3, r3, #15
 800712a:	b2da      	uxtb	r2, r3
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007136:	2b01      	cmp	r3, #1
 8007138:	d101      	bne.n	800713e <HAL_PCD_EP_ClrStall+0x86>
 800713a:	2302      	movs	r3, #2
 800713c:	e00e      	b.n	800715c <HAL_PCD_EP_ClrStall+0xa4>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2201      	movs	r2, #1
 8007142:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	68f9      	ldr	r1, [r7, #12]
 800714c:	4618      	mov	r0, r3
 800714e:	f007 fa2b 	bl	800e5a8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2200      	movs	r2, #0
 8007156:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800715a:	2300      	movs	r3, #0
}
 800715c:	4618      	mov	r0, r3
 800715e:	3710      	adds	r7, #16
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}

08007164 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b08a      	sub	sp, #40	; 0x28
 8007168:	af02      	add	r7, sp, #8
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007178:	683a      	ldr	r2, [r7, #0]
 800717a:	4613      	mov	r3, r2
 800717c:	00db      	lsls	r3, r3, #3
 800717e:	1a9b      	subs	r3, r3, r2
 8007180:	009b      	lsls	r3, r3, #2
 8007182:	3338      	adds	r3, #56	; 0x38
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	4413      	add	r3, r2
 8007188:	3304      	adds	r3, #4
 800718a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	699a      	ldr	r2, [r3, #24]
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	695b      	ldr	r3, [r3, #20]
 8007194:	429a      	cmp	r2, r3
 8007196:	d901      	bls.n	800719c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007198:	2301      	movs	r3, #1
 800719a:	e06c      	b.n	8007276 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	695a      	ldr	r2, [r3, #20]
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	699b      	ldr	r3, [r3, #24]
 80071a4:	1ad3      	subs	r3, r2, r3
 80071a6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	689b      	ldr	r3, [r3, #8]
 80071ac:	69fa      	ldr	r2, [r7, #28]
 80071ae:	429a      	cmp	r2, r3
 80071b0:	d902      	bls.n	80071b8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	689b      	ldr	r3, [r3, #8]
 80071b6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80071b8:	69fb      	ldr	r3, [r7, #28]
 80071ba:	3303      	adds	r3, #3
 80071bc:	089b      	lsrs	r3, r3, #2
 80071be:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80071c0:	e02b      	b.n	800721a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	695a      	ldr	r2, [r3, #20]
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	699b      	ldr	r3, [r3, #24]
 80071ca:	1ad3      	subs	r3, r2, r3
 80071cc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	69fa      	ldr	r2, [r7, #28]
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d902      	bls.n	80071de <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80071de:	69fb      	ldr	r3, [r7, #28]
 80071e0:	3303      	adds	r3, #3
 80071e2:	089b      	lsrs	r3, r3, #2
 80071e4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	68d9      	ldr	r1, [r3, #12]
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	b2da      	uxtb	r2, r3
 80071ee:	69fb      	ldr	r3, [r7, #28]
 80071f0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	9300      	str	r3, [sp, #0]
 80071fa:	4603      	mov	r3, r0
 80071fc:	6978      	ldr	r0, [r7, #20]
 80071fe:	f007 f8cf 	bl	800e3a0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	68da      	ldr	r2, [r3, #12]
 8007206:	69fb      	ldr	r3, [r7, #28]
 8007208:	441a      	add	r2, r3
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	699a      	ldr	r2, [r3, #24]
 8007212:	69fb      	ldr	r3, [r7, #28]
 8007214:	441a      	add	r2, r3
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	015a      	lsls	r2, r3, #5
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	4413      	add	r3, r2
 8007222:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007226:	699b      	ldr	r3, [r3, #24]
 8007228:	b29b      	uxth	r3, r3
 800722a:	69ba      	ldr	r2, [r7, #24]
 800722c:	429a      	cmp	r2, r3
 800722e:	d809      	bhi.n	8007244 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	699a      	ldr	r2, [r3, #24]
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007238:	429a      	cmp	r2, r3
 800723a:	d203      	bcs.n	8007244 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	695b      	ldr	r3, [r3, #20]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d1be      	bne.n	80071c2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	695a      	ldr	r2, [r3, #20]
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	699b      	ldr	r3, [r3, #24]
 800724c:	429a      	cmp	r2, r3
 800724e:	d811      	bhi.n	8007274 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	f003 030f 	and.w	r3, r3, #15
 8007256:	2201      	movs	r2, #1
 8007258:	fa02 f303 	lsl.w	r3, r2, r3
 800725c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007264:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	43db      	mvns	r3, r3
 800726a:	6939      	ldr	r1, [r7, #16]
 800726c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007270:	4013      	ands	r3, r2
 8007272:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8007274:	2300      	movs	r3, #0
}
 8007276:	4618      	mov	r0, r3
 8007278:	3720      	adds	r7, #32
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
	...

08007280 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b086      	sub	sp, #24
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	333c      	adds	r3, #60	; 0x3c
 8007298:	3304      	adds	r3, #4
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	015a      	lsls	r2, r3, #5
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	4413      	add	r3, r2
 80072a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	691b      	ldr	r3, [r3, #16]
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	f040 80a0 	bne.w	80073f8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	f003 0308 	and.w	r3, r3, #8
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d015      	beq.n	80072ee <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	4a72      	ldr	r2, [pc, #456]	; (8007490 <PCD_EP_OutXfrComplete_int+0x210>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	f240 80dd 	bls.w	8007486 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	f000 80d7 	beq.w	8007486 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	015a      	lsls	r2, r3, #5
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	4413      	add	r3, r2
 80072e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072e4:	461a      	mov	r2, r3
 80072e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072ea:	6093      	str	r3, [r2, #8]
 80072ec:	e0cb      	b.n	8007486 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	f003 0320 	and.w	r3, r3, #32
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d009      	beq.n	800730c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	015a      	lsls	r2, r3, #5
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	4413      	add	r3, r2
 8007300:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007304:	461a      	mov	r2, r3
 8007306:	2320      	movs	r3, #32
 8007308:	6093      	str	r3, [r2, #8]
 800730a:	e0bc      	b.n	8007486 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007312:	2b00      	cmp	r3, #0
 8007314:	f040 80b7 	bne.w	8007486 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	4a5d      	ldr	r2, [pc, #372]	; (8007490 <PCD_EP_OutXfrComplete_int+0x210>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d90f      	bls.n	8007340 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007326:	2b00      	cmp	r3, #0
 8007328:	d00a      	beq.n	8007340 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	015a      	lsls	r2, r3, #5
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	4413      	add	r3, r2
 8007332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007336:	461a      	mov	r2, r3
 8007338:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800733c:	6093      	str	r3, [r2, #8]
 800733e:	e0a2      	b.n	8007486 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8007340:	6879      	ldr	r1, [r7, #4]
 8007342:	683a      	ldr	r2, [r7, #0]
 8007344:	4613      	mov	r3, r2
 8007346:	00db      	lsls	r3, r3, #3
 8007348:	1a9b      	subs	r3, r3, r2
 800734a:	009b      	lsls	r3, r3, #2
 800734c:	440b      	add	r3, r1
 800734e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007352:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	0159      	lsls	r1, r3, #5
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	440b      	add	r3, r1
 800735c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007360:	691b      	ldr	r3, [r3, #16]
 8007362:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8007366:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	683a      	ldr	r2, [r7, #0]
 800736c:	4613      	mov	r3, r2
 800736e:	00db      	lsls	r3, r3, #3
 8007370:	1a9b      	subs	r3, r3, r2
 8007372:	009b      	lsls	r3, r3, #2
 8007374:	4403      	add	r3, r0
 8007376:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800737a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800737c:	6879      	ldr	r1, [r7, #4]
 800737e:	683a      	ldr	r2, [r7, #0]
 8007380:	4613      	mov	r3, r2
 8007382:	00db      	lsls	r3, r3, #3
 8007384:	1a9b      	subs	r3, r3, r2
 8007386:	009b      	lsls	r3, r3, #2
 8007388:	440b      	add	r3, r1
 800738a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800738e:	6819      	ldr	r1, [r3, #0]
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	683a      	ldr	r2, [r7, #0]
 8007394:	4613      	mov	r3, r2
 8007396:	00db      	lsls	r3, r3, #3
 8007398:	1a9b      	subs	r3, r3, r2
 800739a:	009b      	lsls	r3, r3, #2
 800739c:	4403      	add	r3, r0
 800739e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4419      	add	r1, r3
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	683a      	ldr	r2, [r7, #0]
 80073aa:	4613      	mov	r3, r2
 80073ac:	00db      	lsls	r3, r3, #3
 80073ae:	1a9b      	subs	r3, r3, r2
 80073b0:	009b      	lsls	r3, r3, #2
 80073b2:	4403      	add	r3, r0
 80073b4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80073b8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d114      	bne.n	80073ea <PCD_EP_OutXfrComplete_int+0x16a>
 80073c0:	6879      	ldr	r1, [r7, #4]
 80073c2:	683a      	ldr	r2, [r7, #0]
 80073c4:	4613      	mov	r3, r2
 80073c6:	00db      	lsls	r3, r3, #3
 80073c8:	1a9b      	subs	r3, r3, r2
 80073ca:	009b      	lsls	r3, r3, #2
 80073cc:	440b      	add	r3, r1
 80073ce:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d108      	bne.n	80073ea <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6818      	ldr	r0, [r3, #0]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80073e2:	461a      	mov	r2, r3
 80073e4:	2101      	movs	r1, #1
 80073e6:	f007 fa73 	bl	800e8d0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	4619      	mov	r1, r3
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f009 fa2f 	bl	8010854 <HAL_PCD_DataOutStageCallback>
 80073f6:	e046      	b.n	8007486 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	4a26      	ldr	r2, [pc, #152]	; (8007494 <PCD_EP_OutXfrComplete_int+0x214>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d124      	bne.n	800744a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007406:	2b00      	cmp	r3, #0
 8007408:	d00a      	beq.n	8007420 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	015a      	lsls	r2, r3, #5
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	4413      	add	r3, r2
 8007412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007416:	461a      	mov	r2, r3
 8007418:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800741c:	6093      	str	r3, [r2, #8]
 800741e:	e032      	b.n	8007486 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	f003 0320 	and.w	r3, r3, #32
 8007426:	2b00      	cmp	r3, #0
 8007428:	d008      	beq.n	800743c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	015a      	lsls	r2, r3, #5
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	4413      	add	r3, r2
 8007432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007436:	461a      	mov	r2, r3
 8007438:	2320      	movs	r3, #32
 800743a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	b2db      	uxtb	r3, r3
 8007440:	4619      	mov	r1, r3
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f009 fa06 	bl	8010854 <HAL_PCD_DataOutStageCallback>
 8007448:	e01d      	b.n	8007486 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d114      	bne.n	800747a <PCD_EP_OutXfrComplete_int+0x1fa>
 8007450:	6879      	ldr	r1, [r7, #4]
 8007452:	683a      	ldr	r2, [r7, #0]
 8007454:	4613      	mov	r3, r2
 8007456:	00db      	lsls	r3, r3, #3
 8007458:	1a9b      	subs	r3, r3, r2
 800745a:	009b      	lsls	r3, r3, #2
 800745c:	440b      	add	r3, r1
 800745e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d108      	bne.n	800747a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6818      	ldr	r0, [r3, #0]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007472:	461a      	mov	r2, r3
 8007474:	2100      	movs	r1, #0
 8007476:	f007 fa2b 	bl	800e8d0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	b2db      	uxtb	r3, r3
 800747e:	4619      	mov	r1, r3
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f009 f9e7 	bl	8010854 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007486:	2300      	movs	r3, #0
}
 8007488:	4618      	mov	r0, r3
 800748a:	3718      	adds	r7, #24
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}
 8007490:	4f54300a 	.word	0x4f54300a
 8007494:	4f54310a 	.word	0x4f54310a

08007498 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b086      	sub	sp, #24
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	333c      	adds	r3, #60	; 0x3c
 80074b0:	3304      	adds	r3, #4
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	015a      	lsls	r2, r3, #5
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	4413      	add	r3, r2
 80074be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074c2:	689b      	ldr	r3, [r3, #8]
 80074c4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	4a15      	ldr	r2, [pc, #84]	; (8007520 <PCD_EP_OutSetupPacket_int+0x88>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d90e      	bls.n	80074ec <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d009      	beq.n	80074ec <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	015a      	lsls	r2, r3, #5
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	4413      	add	r3, r2
 80074e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074e4:	461a      	mov	r2, r3
 80074e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074ea:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f009 f99f 	bl	8010830 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	4a0a      	ldr	r2, [pc, #40]	; (8007520 <PCD_EP_OutSetupPacket_int+0x88>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d90c      	bls.n	8007514 <PCD_EP_OutSetupPacket_int+0x7c>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	691b      	ldr	r3, [r3, #16]
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d108      	bne.n	8007514 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6818      	ldr	r0, [r3, #0]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800750c:	461a      	mov	r2, r3
 800750e:	2101      	movs	r1, #1
 8007510:	f007 f9de 	bl	800e8d0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007514:	2300      	movs	r3, #0
}
 8007516:	4618      	mov	r0, r3
 8007518:	3718      	adds	r7, #24
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
 800751e:	bf00      	nop
 8007520:	4f54300a 	.word	0x4f54300a

08007524 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007524:	b480      	push	{r7}
 8007526:	b085      	sub	sp, #20
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	460b      	mov	r3, r1
 800752e:	70fb      	strb	r3, [r7, #3]
 8007530:	4613      	mov	r3, r2
 8007532:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800753a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800753c:	78fb      	ldrb	r3, [r7, #3]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d107      	bne.n	8007552 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007542:	883b      	ldrh	r3, [r7, #0]
 8007544:	0419      	lsls	r1, r3, #16
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	68ba      	ldr	r2, [r7, #8]
 800754c:	430a      	orrs	r2, r1
 800754e:	629a      	str	r2, [r3, #40]	; 0x28
 8007550:	e028      	b.n	80075a4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007558:	0c1b      	lsrs	r3, r3, #16
 800755a:	68ba      	ldr	r2, [r7, #8]
 800755c:	4413      	add	r3, r2
 800755e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007560:	2300      	movs	r3, #0
 8007562:	73fb      	strb	r3, [r7, #15]
 8007564:	e00d      	b.n	8007582 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681a      	ldr	r2, [r3, #0]
 800756a:	7bfb      	ldrb	r3, [r7, #15]
 800756c:	3340      	adds	r3, #64	; 0x40
 800756e:	009b      	lsls	r3, r3, #2
 8007570:	4413      	add	r3, r2
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	0c1b      	lsrs	r3, r3, #16
 8007576:	68ba      	ldr	r2, [r7, #8]
 8007578:	4413      	add	r3, r2
 800757a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800757c:	7bfb      	ldrb	r3, [r7, #15]
 800757e:	3301      	adds	r3, #1
 8007580:	73fb      	strb	r3, [r7, #15]
 8007582:	7bfa      	ldrb	r2, [r7, #15]
 8007584:	78fb      	ldrb	r3, [r7, #3]
 8007586:	3b01      	subs	r3, #1
 8007588:	429a      	cmp	r2, r3
 800758a:	d3ec      	bcc.n	8007566 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800758c:	883b      	ldrh	r3, [r7, #0]
 800758e:	0418      	lsls	r0, r3, #16
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6819      	ldr	r1, [r3, #0]
 8007594:	78fb      	ldrb	r3, [r7, #3]
 8007596:	3b01      	subs	r3, #1
 8007598:	68ba      	ldr	r2, [r7, #8]
 800759a:	4302      	orrs	r2, r0
 800759c:	3340      	adds	r3, #64	; 0x40
 800759e:	009b      	lsls	r3, r3, #2
 80075a0:	440b      	add	r3, r1
 80075a2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80075a4:	2300      	movs	r3, #0
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3714      	adds	r7, #20
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr

080075b2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80075b2:	b480      	push	{r7}
 80075b4:	b083      	sub	sp, #12
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	6078      	str	r0, [r7, #4]
 80075ba:	460b      	mov	r3, r1
 80075bc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	887a      	ldrh	r2, [r7, #2]
 80075c4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80075c6:	2300      	movs	r3, #0
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	370c      	adds	r7, #12
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr

080075d4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b085      	sub	sp, #20
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2201      	movs	r2, #1
 80075e6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2200      	movs	r2, #0
 80075ee:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	699b      	ldr	r3, [r3, #24]
 80075f6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007602:	4b05      	ldr	r3, [pc, #20]	; (8007618 <HAL_PCDEx_ActivateLPM+0x44>)
 8007604:	4313      	orrs	r3, r2
 8007606:	68fa      	ldr	r2, [r7, #12]
 8007608:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800760a:	2300      	movs	r3, #0
}
 800760c:	4618      	mov	r0, r3
 800760e:	3714      	adds	r7, #20
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr
 8007618:	10000003 	.word	0x10000003

0800761c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800761c:	b480      	push	{r7}
 800761e:	b083      	sub	sp, #12
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	460b      	mov	r3, r1
 8007626:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007628:	bf00      	nop
 800762a:	370c      	adds	r7, #12
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr

08007634 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b084      	sub	sp, #16
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800763c:	4b29      	ldr	r3, [pc, #164]	; (80076e4 <HAL_PWREx_ConfigSupply+0xb0>)
 800763e:	68db      	ldr	r3, [r3, #12]
 8007640:	f003 0307 	and.w	r3, r3, #7
 8007644:	2b06      	cmp	r3, #6
 8007646:	d00a      	beq.n	800765e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007648:	4b26      	ldr	r3, [pc, #152]	; (80076e4 <HAL_PWREx_ConfigSupply+0xb0>)
 800764a:	68db      	ldr	r3, [r3, #12]
 800764c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	429a      	cmp	r2, r3
 8007654:	d001      	beq.n	800765a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007656:	2301      	movs	r3, #1
 8007658:	e040      	b.n	80076dc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800765a:	2300      	movs	r3, #0
 800765c:	e03e      	b.n	80076dc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800765e:	4b21      	ldr	r3, [pc, #132]	; (80076e4 <HAL_PWREx_ConfigSupply+0xb0>)
 8007660:	68db      	ldr	r3, [r3, #12]
 8007662:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8007666:	491f      	ldr	r1, [pc, #124]	; (80076e4 <HAL_PWREx_ConfigSupply+0xb0>)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	4313      	orrs	r3, r2
 800766c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800766e:	f7fa fc35 	bl	8001edc <HAL_GetTick>
 8007672:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007674:	e009      	b.n	800768a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007676:	f7fa fc31 	bl	8001edc <HAL_GetTick>
 800767a:	4602      	mov	r2, r0
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	1ad3      	subs	r3, r2, r3
 8007680:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007684:	d901      	bls.n	800768a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007686:	2301      	movs	r3, #1
 8007688:	e028      	b.n	80076dc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800768a:	4b16      	ldr	r3, [pc, #88]	; (80076e4 <HAL_PWREx_ConfigSupply+0xb0>)
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007692:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007696:	d1ee      	bne.n	8007676 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2b1e      	cmp	r3, #30
 800769c:	d008      	beq.n	80076b0 <HAL_PWREx_ConfigSupply+0x7c>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2b2e      	cmp	r3, #46	; 0x2e
 80076a2:	d005      	beq.n	80076b0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2b1d      	cmp	r3, #29
 80076a8:	d002      	beq.n	80076b0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2b2d      	cmp	r3, #45	; 0x2d
 80076ae:	d114      	bne.n	80076da <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80076b0:	f7fa fc14 	bl	8001edc <HAL_GetTick>
 80076b4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80076b6:	e009      	b.n	80076cc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80076b8:	f7fa fc10 	bl	8001edc <HAL_GetTick>
 80076bc:	4602      	mov	r2, r0
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	1ad3      	subs	r3, r2, r3
 80076c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80076c6:	d901      	bls.n	80076cc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80076c8:	2301      	movs	r3, #1
 80076ca:	e007      	b.n	80076dc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80076cc:	4b05      	ldr	r3, [pc, #20]	; (80076e4 <HAL_PWREx_ConfigSupply+0xb0>)
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076d8:	d1ee      	bne.n	80076b8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80076da:	2300      	movs	r3, #0
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3710      	adds	r7, #16
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}
 80076e4:	58024800 	.word	0x58024800

080076e8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80076e8:	b480      	push	{r7}
 80076ea:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80076ec:	4b05      	ldr	r3, [pc, #20]	; (8007704 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80076ee:	68db      	ldr	r3, [r3, #12]
 80076f0:	4a04      	ldr	r2, [pc, #16]	; (8007704 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80076f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80076f6:	60d3      	str	r3, [r2, #12]
}
 80076f8:	bf00      	nop
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr
 8007702:	bf00      	nop
 8007704:	58024800 	.word	0x58024800

08007708 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b08c      	sub	sp, #48	; 0x30
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d101      	bne.n	800771a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007716:	2301      	movs	r3, #1
 8007718:	e3fd      	b.n	8007f16 <HAL_RCC_OscConfig+0x80e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f003 0301 	and.w	r3, r3, #1
 8007722:	2b00      	cmp	r3, #0
 8007724:	f000 8087 	beq.w	8007836 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007728:	4b99      	ldr	r3, [pc, #612]	; (8007990 <HAL_RCC_OscConfig+0x288>)
 800772a:	691b      	ldr	r3, [r3, #16]
 800772c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007730:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007732:	4b97      	ldr	r3, [pc, #604]	; (8007990 <HAL_RCC_OscConfig+0x288>)
 8007734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007736:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800773a:	2b10      	cmp	r3, #16
 800773c:	d007      	beq.n	800774e <HAL_RCC_OscConfig+0x46>
 800773e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007740:	2b18      	cmp	r3, #24
 8007742:	d110      	bne.n	8007766 <HAL_RCC_OscConfig+0x5e>
 8007744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007746:	f003 0303 	and.w	r3, r3, #3
 800774a:	2b02      	cmp	r3, #2
 800774c:	d10b      	bne.n	8007766 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800774e:	4b90      	ldr	r3, [pc, #576]	; (8007990 <HAL_RCC_OscConfig+0x288>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007756:	2b00      	cmp	r3, #0
 8007758:	d06c      	beq.n	8007834 <HAL_RCC_OscConfig+0x12c>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d168      	bne.n	8007834 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007762:	2301      	movs	r3, #1
 8007764:	e3d7      	b.n	8007f16 <HAL_RCC_OscConfig+0x80e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800776e:	d106      	bne.n	800777e <HAL_RCC_OscConfig+0x76>
 8007770:	4b87      	ldr	r3, [pc, #540]	; (8007990 <HAL_RCC_OscConfig+0x288>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a86      	ldr	r2, [pc, #536]	; (8007990 <HAL_RCC_OscConfig+0x288>)
 8007776:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800777a:	6013      	str	r3, [r2, #0]
 800777c:	e02e      	b.n	80077dc <HAL_RCC_OscConfig+0xd4>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	685b      	ldr	r3, [r3, #4]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d10c      	bne.n	80077a0 <HAL_RCC_OscConfig+0x98>
 8007786:	4b82      	ldr	r3, [pc, #520]	; (8007990 <HAL_RCC_OscConfig+0x288>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a81      	ldr	r2, [pc, #516]	; (8007990 <HAL_RCC_OscConfig+0x288>)
 800778c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007790:	6013      	str	r3, [r2, #0]
 8007792:	4b7f      	ldr	r3, [pc, #508]	; (8007990 <HAL_RCC_OscConfig+0x288>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a7e      	ldr	r2, [pc, #504]	; (8007990 <HAL_RCC_OscConfig+0x288>)
 8007798:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800779c:	6013      	str	r3, [r2, #0]
 800779e:	e01d      	b.n	80077dc <HAL_RCC_OscConfig+0xd4>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80077a8:	d10c      	bne.n	80077c4 <HAL_RCC_OscConfig+0xbc>
 80077aa:	4b79      	ldr	r3, [pc, #484]	; (8007990 <HAL_RCC_OscConfig+0x288>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a78      	ldr	r2, [pc, #480]	; (8007990 <HAL_RCC_OscConfig+0x288>)
 80077b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80077b4:	6013      	str	r3, [r2, #0]
 80077b6:	4b76      	ldr	r3, [pc, #472]	; (8007990 <HAL_RCC_OscConfig+0x288>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a75      	ldr	r2, [pc, #468]	; (8007990 <HAL_RCC_OscConfig+0x288>)
 80077bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077c0:	6013      	str	r3, [r2, #0]
 80077c2:	e00b      	b.n	80077dc <HAL_RCC_OscConfig+0xd4>
 80077c4:	4b72      	ldr	r3, [pc, #456]	; (8007990 <HAL_RCC_OscConfig+0x288>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a71      	ldr	r2, [pc, #452]	; (8007990 <HAL_RCC_OscConfig+0x288>)
 80077ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077ce:	6013      	str	r3, [r2, #0]
 80077d0:	4b6f      	ldr	r3, [pc, #444]	; (8007990 <HAL_RCC_OscConfig+0x288>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a6e      	ldr	r2, [pc, #440]	; (8007990 <HAL_RCC_OscConfig+0x288>)
 80077d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80077da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d013      	beq.n	800780c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077e4:	f7fa fb7a 	bl	8001edc <HAL_GetTick>
 80077e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80077ea:	e008      	b.n	80077fe <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80077ec:	f7fa fb76 	bl	8001edc <HAL_GetTick>
 80077f0:	4602      	mov	r2, r0
 80077f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f4:	1ad3      	subs	r3, r2, r3
 80077f6:	2b64      	cmp	r3, #100	; 0x64
 80077f8:	d901      	bls.n	80077fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80077fa:	2303      	movs	r3, #3
 80077fc:	e38b      	b.n	8007f16 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80077fe:	4b64      	ldr	r3, [pc, #400]	; (8007990 <HAL_RCC_OscConfig+0x288>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007806:	2b00      	cmp	r3, #0
 8007808:	d0f0      	beq.n	80077ec <HAL_RCC_OscConfig+0xe4>
 800780a:	e014      	b.n	8007836 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800780c:	f7fa fb66 	bl	8001edc <HAL_GetTick>
 8007810:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007812:	e008      	b.n	8007826 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007814:	f7fa fb62 	bl	8001edc <HAL_GetTick>
 8007818:	4602      	mov	r2, r0
 800781a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781c:	1ad3      	subs	r3, r2, r3
 800781e:	2b64      	cmp	r3, #100	; 0x64
 8007820:	d901      	bls.n	8007826 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007822:	2303      	movs	r3, #3
 8007824:	e377      	b.n	8007f16 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007826:	4b5a      	ldr	r3, [pc, #360]	; (8007990 <HAL_RCC_OscConfig+0x288>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800782e:	2b00      	cmp	r3, #0
 8007830:	d1f0      	bne.n	8007814 <HAL_RCC_OscConfig+0x10c>
 8007832:	e000      	b.n	8007836 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007834:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f003 0302 	and.w	r3, r3, #2
 800783e:	2b00      	cmp	r3, #0
 8007840:	f000 80ae 	beq.w	80079a0 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007844:	4b52      	ldr	r3, [pc, #328]	; (8007990 <HAL_RCC_OscConfig+0x288>)
 8007846:	691b      	ldr	r3, [r3, #16]
 8007848:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800784c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800784e:	4b50      	ldr	r3, [pc, #320]	; (8007990 <HAL_RCC_OscConfig+0x288>)
 8007850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007852:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007854:	6a3b      	ldr	r3, [r7, #32]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d007      	beq.n	800786a <HAL_RCC_OscConfig+0x162>
 800785a:	6a3b      	ldr	r3, [r7, #32]
 800785c:	2b18      	cmp	r3, #24
 800785e:	d13a      	bne.n	80078d6 <HAL_RCC_OscConfig+0x1ce>
 8007860:	69fb      	ldr	r3, [r7, #28]
 8007862:	f003 0303 	and.w	r3, r3, #3
 8007866:	2b00      	cmp	r3, #0
 8007868:	d135      	bne.n	80078d6 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800786a:	4b49      	ldr	r3, [pc, #292]	; (8007990 <HAL_RCC_OscConfig+0x288>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f003 0304 	and.w	r3, r3, #4
 8007872:	2b00      	cmp	r3, #0
 8007874:	d005      	beq.n	8007882 <HAL_RCC_OscConfig+0x17a>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	68db      	ldr	r3, [r3, #12]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d101      	bne.n	8007882 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800787e:	2301      	movs	r3, #1
 8007880:	e349      	b.n	8007f16 <HAL_RCC_OscConfig+0x80e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007882:	f7fa fb5b 	bl	8001f3c <HAL_GetREVID>
 8007886:	4603      	mov	r3, r0
 8007888:	f241 0203 	movw	r2, #4099	; 0x1003
 800788c:	4293      	cmp	r3, r2
 800788e:	d817      	bhi.n	80078c0 <HAL_RCC_OscConfig+0x1b8>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	691b      	ldr	r3, [r3, #16]
 8007894:	2b40      	cmp	r3, #64	; 0x40
 8007896:	d108      	bne.n	80078aa <HAL_RCC_OscConfig+0x1a2>
 8007898:	4b3d      	ldr	r3, [pc, #244]	; (8007990 <HAL_RCC_OscConfig+0x288>)
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80078a0:	4a3b      	ldr	r2, [pc, #236]	; (8007990 <HAL_RCC_OscConfig+0x288>)
 80078a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078a6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80078a8:	e07a      	b.n	80079a0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078aa:	4b39      	ldr	r3, [pc, #228]	; (8007990 <HAL_RCC_OscConfig+0x288>)
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	691b      	ldr	r3, [r3, #16]
 80078b6:	031b      	lsls	r3, r3, #12
 80078b8:	4935      	ldr	r1, [pc, #212]	; (8007990 <HAL_RCC_OscConfig+0x288>)
 80078ba:	4313      	orrs	r3, r2
 80078bc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80078be:	e06f      	b.n	80079a0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078c0:	4b33      	ldr	r3, [pc, #204]	; (8007990 <HAL_RCC_OscConfig+0x288>)
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	691b      	ldr	r3, [r3, #16]
 80078cc:	061b      	lsls	r3, r3, #24
 80078ce:	4930      	ldr	r1, [pc, #192]	; (8007990 <HAL_RCC_OscConfig+0x288>)
 80078d0:	4313      	orrs	r3, r2
 80078d2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80078d4:	e064      	b.n	80079a0 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	68db      	ldr	r3, [r3, #12]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d045      	beq.n	800796a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80078de:	4b2c      	ldr	r3, [pc, #176]	; (8007990 <HAL_RCC_OscConfig+0x288>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f023 0219 	bic.w	r2, r3, #25
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	68db      	ldr	r3, [r3, #12]
 80078ea:	4929      	ldr	r1, [pc, #164]	; (8007990 <HAL_RCC_OscConfig+0x288>)
 80078ec:	4313      	orrs	r3, r2
 80078ee:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078f0:	f7fa faf4 	bl	8001edc <HAL_GetTick>
 80078f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80078f6:	e008      	b.n	800790a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80078f8:	f7fa faf0 	bl	8001edc <HAL_GetTick>
 80078fc:	4602      	mov	r2, r0
 80078fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007900:	1ad3      	subs	r3, r2, r3
 8007902:	2b02      	cmp	r3, #2
 8007904:	d901      	bls.n	800790a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8007906:	2303      	movs	r3, #3
 8007908:	e305      	b.n	8007f16 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800790a:	4b21      	ldr	r3, [pc, #132]	; (8007990 <HAL_RCC_OscConfig+0x288>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f003 0304 	and.w	r3, r3, #4
 8007912:	2b00      	cmp	r3, #0
 8007914:	d0f0      	beq.n	80078f8 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007916:	f7fa fb11 	bl	8001f3c <HAL_GetREVID>
 800791a:	4603      	mov	r3, r0
 800791c:	f241 0203 	movw	r2, #4099	; 0x1003
 8007920:	4293      	cmp	r3, r2
 8007922:	d817      	bhi.n	8007954 <HAL_RCC_OscConfig+0x24c>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	691b      	ldr	r3, [r3, #16]
 8007928:	2b40      	cmp	r3, #64	; 0x40
 800792a:	d108      	bne.n	800793e <HAL_RCC_OscConfig+0x236>
 800792c:	4b18      	ldr	r3, [pc, #96]	; (8007990 <HAL_RCC_OscConfig+0x288>)
 800792e:	685b      	ldr	r3, [r3, #4]
 8007930:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007934:	4a16      	ldr	r2, [pc, #88]	; (8007990 <HAL_RCC_OscConfig+0x288>)
 8007936:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800793a:	6053      	str	r3, [r2, #4]
 800793c:	e030      	b.n	80079a0 <HAL_RCC_OscConfig+0x298>
 800793e:	4b14      	ldr	r3, [pc, #80]	; (8007990 <HAL_RCC_OscConfig+0x288>)
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	691b      	ldr	r3, [r3, #16]
 800794a:	031b      	lsls	r3, r3, #12
 800794c:	4910      	ldr	r1, [pc, #64]	; (8007990 <HAL_RCC_OscConfig+0x288>)
 800794e:	4313      	orrs	r3, r2
 8007950:	604b      	str	r3, [r1, #4]
 8007952:	e025      	b.n	80079a0 <HAL_RCC_OscConfig+0x298>
 8007954:	4b0e      	ldr	r3, [pc, #56]	; (8007990 <HAL_RCC_OscConfig+0x288>)
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	691b      	ldr	r3, [r3, #16]
 8007960:	061b      	lsls	r3, r3, #24
 8007962:	490b      	ldr	r1, [pc, #44]	; (8007990 <HAL_RCC_OscConfig+0x288>)
 8007964:	4313      	orrs	r3, r2
 8007966:	604b      	str	r3, [r1, #4]
 8007968:	e01a      	b.n	80079a0 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800796a:	4b09      	ldr	r3, [pc, #36]	; (8007990 <HAL_RCC_OscConfig+0x288>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a08      	ldr	r2, [pc, #32]	; (8007990 <HAL_RCC_OscConfig+0x288>)
 8007970:	f023 0301 	bic.w	r3, r3, #1
 8007974:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007976:	f7fa fab1 	bl	8001edc <HAL_GetTick>
 800797a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800797c:	e00a      	b.n	8007994 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800797e:	f7fa faad 	bl	8001edc <HAL_GetTick>
 8007982:	4602      	mov	r2, r0
 8007984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007986:	1ad3      	subs	r3, r2, r3
 8007988:	2b02      	cmp	r3, #2
 800798a:	d903      	bls.n	8007994 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 800798c:	2303      	movs	r3, #3
 800798e:	e2c2      	b.n	8007f16 <HAL_RCC_OscConfig+0x80e>
 8007990:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007994:	4b94      	ldr	r3, [pc, #592]	; (8007be8 <HAL_RCC_OscConfig+0x4e0>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f003 0304 	and.w	r3, r3, #4
 800799c:	2b00      	cmp	r3, #0
 800799e:	d1ee      	bne.n	800797e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f003 0310 	and.w	r3, r3, #16
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	f000 80a9 	beq.w	8007b00 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80079ae:	4b8e      	ldr	r3, [pc, #568]	; (8007be8 <HAL_RCC_OscConfig+0x4e0>)
 80079b0:	691b      	ldr	r3, [r3, #16]
 80079b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80079b6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80079b8:	4b8b      	ldr	r3, [pc, #556]	; (8007be8 <HAL_RCC_OscConfig+0x4e0>)
 80079ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079bc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80079be:	69bb      	ldr	r3, [r7, #24]
 80079c0:	2b08      	cmp	r3, #8
 80079c2:	d007      	beq.n	80079d4 <HAL_RCC_OscConfig+0x2cc>
 80079c4:	69bb      	ldr	r3, [r7, #24]
 80079c6:	2b18      	cmp	r3, #24
 80079c8:	d13a      	bne.n	8007a40 <HAL_RCC_OscConfig+0x338>
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	f003 0303 	and.w	r3, r3, #3
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d135      	bne.n	8007a40 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80079d4:	4b84      	ldr	r3, [pc, #528]	; (8007be8 <HAL_RCC_OscConfig+0x4e0>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d005      	beq.n	80079ec <HAL_RCC_OscConfig+0x2e4>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	69db      	ldr	r3, [r3, #28]
 80079e4:	2b80      	cmp	r3, #128	; 0x80
 80079e6:	d001      	beq.n	80079ec <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80079e8:	2301      	movs	r3, #1
 80079ea:	e294      	b.n	8007f16 <HAL_RCC_OscConfig+0x80e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80079ec:	f7fa faa6 	bl	8001f3c <HAL_GetREVID>
 80079f0:	4603      	mov	r3, r0
 80079f2:	f241 0203 	movw	r2, #4099	; 0x1003
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d817      	bhi.n	8007a2a <HAL_RCC_OscConfig+0x322>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6a1b      	ldr	r3, [r3, #32]
 80079fe:	2b20      	cmp	r3, #32
 8007a00:	d108      	bne.n	8007a14 <HAL_RCC_OscConfig+0x30c>
 8007a02:	4b79      	ldr	r3, [pc, #484]	; (8007be8 <HAL_RCC_OscConfig+0x4e0>)
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007a0a:	4a77      	ldr	r2, [pc, #476]	; (8007be8 <HAL_RCC_OscConfig+0x4e0>)
 8007a0c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007a10:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007a12:	e075      	b.n	8007b00 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007a14:	4b74      	ldr	r3, [pc, #464]	; (8007be8 <HAL_RCC_OscConfig+0x4e0>)
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6a1b      	ldr	r3, [r3, #32]
 8007a20:	069b      	lsls	r3, r3, #26
 8007a22:	4971      	ldr	r1, [pc, #452]	; (8007be8 <HAL_RCC_OscConfig+0x4e0>)
 8007a24:	4313      	orrs	r3, r2
 8007a26:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007a28:	e06a      	b.n	8007b00 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007a2a:	4b6f      	ldr	r3, [pc, #444]	; (8007be8 <HAL_RCC_OscConfig+0x4e0>)
 8007a2c:	68db      	ldr	r3, [r3, #12]
 8007a2e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6a1b      	ldr	r3, [r3, #32]
 8007a36:	061b      	lsls	r3, r3, #24
 8007a38:	496b      	ldr	r1, [pc, #428]	; (8007be8 <HAL_RCC_OscConfig+0x4e0>)
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007a3e:	e05f      	b.n	8007b00 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	69db      	ldr	r3, [r3, #28]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d042      	beq.n	8007ace <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007a48:	4b67      	ldr	r3, [pc, #412]	; (8007be8 <HAL_RCC_OscConfig+0x4e0>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a66      	ldr	r2, [pc, #408]	; (8007be8 <HAL_RCC_OscConfig+0x4e0>)
 8007a4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a54:	f7fa fa42 	bl	8001edc <HAL_GetTick>
 8007a58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007a5a:	e008      	b.n	8007a6e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007a5c:	f7fa fa3e 	bl	8001edc <HAL_GetTick>
 8007a60:	4602      	mov	r2, r0
 8007a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a64:	1ad3      	subs	r3, r2, r3
 8007a66:	2b02      	cmp	r3, #2
 8007a68:	d901      	bls.n	8007a6e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8007a6a:	2303      	movs	r3, #3
 8007a6c:	e253      	b.n	8007f16 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007a6e:	4b5e      	ldr	r3, [pc, #376]	; (8007be8 <HAL_RCC_OscConfig+0x4e0>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d0f0      	beq.n	8007a5c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007a7a:	f7fa fa5f 	bl	8001f3c <HAL_GetREVID>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	f241 0203 	movw	r2, #4099	; 0x1003
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d817      	bhi.n	8007ab8 <HAL_RCC_OscConfig+0x3b0>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6a1b      	ldr	r3, [r3, #32]
 8007a8c:	2b20      	cmp	r3, #32
 8007a8e:	d108      	bne.n	8007aa2 <HAL_RCC_OscConfig+0x39a>
 8007a90:	4b55      	ldr	r3, [pc, #340]	; (8007be8 <HAL_RCC_OscConfig+0x4e0>)
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007a98:	4a53      	ldr	r2, [pc, #332]	; (8007be8 <HAL_RCC_OscConfig+0x4e0>)
 8007a9a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007a9e:	6053      	str	r3, [r2, #4]
 8007aa0:	e02e      	b.n	8007b00 <HAL_RCC_OscConfig+0x3f8>
 8007aa2:	4b51      	ldr	r3, [pc, #324]	; (8007be8 <HAL_RCC_OscConfig+0x4e0>)
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6a1b      	ldr	r3, [r3, #32]
 8007aae:	069b      	lsls	r3, r3, #26
 8007ab0:	494d      	ldr	r1, [pc, #308]	; (8007be8 <HAL_RCC_OscConfig+0x4e0>)
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	604b      	str	r3, [r1, #4]
 8007ab6:	e023      	b.n	8007b00 <HAL_RCC_OscConfig+0x3f8>
 8007ab8:	4b4b      	ldr	r3, [pc, #300]	; (8007be8 <HAL_RCC_OscConfig+0x4e0>)
 8007aba:	68db      	ldr	r3, [r3, #12]
 8007abc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6a1b      	ldr	r3, [r3, #32]
 8007ac4:	061b      	lsls	r3, r3, #24
 8007ac6:	4948      	ldr	r1, [pc, #288]	; (8007be8 <HAL_RCC_OscConfig+0x4e0>)
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	60cb      	str	r3, [r1, #12]
 8007acc:	e018      	b.n	8007b00 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007ace:	4b46      	ldr	r3, [pc, #280]	; (8007be8 <HAL_RCC_OscConfig+0x4e0>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a45      	ldr	r2, [pc, #276]	; (8007be8 <HAL_RCC_OscConfig+0x4e0>)
 8007ad4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ad8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ada:	f7fa f9ff 	bl	8001edc <HAL_GetTick>
 8007ade:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007ae0:	e008      	b.n	8007af4 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007ae2:	f7fa f9fb 	bl	8001edc <HAL_GetTick>
 8007ae6:	4602      	mov	r2, r0
 8007ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aea:	1ad3      	subs	r3, r2, r3
 8007aec:	2b02      	cmp	r3, #2
 8007aee:	d901      	bls.n	8007af4 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8007af0:	2303      	movs	r3, #3
 8007af2:	e210      	b.n	8007f16 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007af4:	4b3c      	ldr	r3, [pc, #240]	; (8007be8 <HAL_RCC_OscConfig+0x4e0>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d1f0      	bne.n	8007ae2 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f003 0308 	and.w	r3, r3, #8
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d036      	beq.n	8007b7a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	695b      	ldr	r3, [r3, #20]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d019      	beq.n	8007b48 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007b14:	4b34      	ldr	r3, [pc, #208]	; (8007be8 <HAL_RCC_OscConfig+0x4e0>)
 8007b16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b18:	4a33      	ldr	r2, [pc, #204]	; (8007be8 <HAL_RCC_OscConfig+0x4e0>)
 8007b1a:	f043 0301 	orr.w	r3, r3, #1
 8007b1e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b20:	f7fa f9dc 	bl	8001edc <HAL_GetTick>
 8007b24:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007b26:	e008      	b.n	8007b3a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007b28:	f7fa f9d8 	bl	8001edc <HAL_GetTick>
 8007b2c:	4602      	mov	r2, r0
 8007b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b30:	1ad3      	subs	r3, r2, r3
 8007b32:	2b02      	cmp	r3, #2
 8007b34:	d901      	bls.n	8007b3a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8007b36:	2303      	movs	r3, #3
 8007b38:	e1ed      	b.n	8007f16 <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007b3a:	4b2b      	ldr	r3, [pc, #172]	; (8007be8 <HAL_RCC_OscConfig+0x4e0>)
 8007b3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b3e:	f003 0302 	and.w	r3, r3, #2
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d0f0      	beq.n	8007b28 <HAL_RCC_OscConfig+0x420>
 8007b46:	e018      	b.n	8007b7a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007b48:	4b27      	ldr	r3, [pc, #156]	; (8007be8 <HAL_RCC_OscConfig+0x4e0>)
 8007b4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b4c:	4a26      	ldr	r2, [pc, #152]	; (8007be8 <HAL_RCC_OscConfig+0x4e0>)
 8007b4e:	f023 0301 	bic.w	r3, r3, #1
 8007b52:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b54:	f7fa f9c2 	bl	8001edc <HAL_GetTick>
 8007b58:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007b5a:	e008      	b.n	8007b6e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007b5c:	f7fa f9be 	bl	8001edc <HAL_GetTick>
 8007b60:	4602      	mov	r2, r0
 8007b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b64:	1ad3      	subs	r3, r2, r3
 8007b66:	2b02      	cmp	r3, #2
 8007b68:	d901      	bls.n	8007b6e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8007b6a:	2303      	movs	r3, #3
 8007b6c:	e1d3      	b.n	8007f16 <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007b6e:	4b1e      	ldr	r3, [pc, #120]	; (8007be8 <HAL_RCC_OscConfig+0x4e0>)
 8007b70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b72:	f003 0302 	and.w	r3, r3, #2
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d1f0      	bne.n	8007b5c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f003 0320 	and.w	r3, r3, #32
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d038      	beq.n	8007bf8 <HAL_RCC_OscConfig+0x4f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	699b      	ldr	r3, [r3, #24]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d019      	beq.n	8007bc2 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007b8e:	4b16      	ldr	r3, [pc, #88]	; (8007be8 <HAL_RCC_OscConfig+0x4e0>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4a15      	ldr	r2, [pc, #84]	; (8007be8 <HAL_RCC_OscConfig+0x4e0>)
 8007b94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007b98:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007b9a:	f7fa f99f 	bl	8001edc <HAL_GetTick>
 8007b9e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007ba0:	e008      	b.n	8007bb4 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007ba2:	f7fa f99b 	bl	8001edc <HAL_GetTick>
 8007ba6:	4602      	mov	r2, r0
 8007ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007baa:	1ad3      	subs	r3, r2, r3
 8007bac:	2b02      	cmp	r3, #2
 8007bae:	d901      	bls.n	8007bb4 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8007bb0:	2303      	movs	r3, #3
 8007bb2:	e1b0      	b.n	8007f16 <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007bb4:	4b0c      	ldr	r3, [pc, #48]	; (8007be8 <HAL_RCC_OscConfig+0x4e0>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d0f0      	beq.n	8007ba2 <HAL_RCC_OscConfig+0x49a>
 8007bc0:	e01a      	b.n	8007bf8 <HAL_RCC_OscConfig+0x4f0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007bc2:	4b09      	ldr	r3, [pc, #36]	; (8007be8 <HAL_RCC_OscConfig+0x4e0>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a08      	ldr	r2, [pc, #32]	; (8007be8 <HAL_RCC_OscConfig+0x4e0>)
 8007bc8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007bcc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007bce:	f7fa f985 	bl	8001edc <HAL_GetTick>
 8007bd2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007bd4:	e00a      	b.n	8007bec <HAL_RCC_OscConfig+0x4e4>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007bd6:	f7fa f981 	bl	8001edc <HAL_GetTick>
 8007bda:	4602      	mov	r2, r0
 8007bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bde:	1ad3      	subs	r3, r2, r3
 8007be0:	2b02      	cmp	r3, #2
 8007be2:	d903      	bls.n	8007bec <HAL_RCC_OscConfig+0x4e4>
        {
          return HAL_TIMEOUT;
 8007be4:	2303      	movs	r3, #3
 8007be6:	e196      	b.n	8007f16 <HAL_RCC_OscConfig+0x80e>
 8007be8:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007bec:	4b99      	ldr	r3, [pc, #612]	; (8007e54 <HAL_RCC_OscConfig+0x74c>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d1ee      	bne.n	8007bd6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f003 0304 	and.w	r3, r3, #4
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	f000 8081 	beq.w	8007d08 <HAL_RCC_OscConfig+0x600>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007c06:	4b94      	ldr	r3, [pc, #592]	; (8007e58 <HAL_RCC_OscConfig+0x750>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a93      	ldr	r2, [pc, #588]	; (8007e58 <HAL_RCC_OscConfig+0x750>)
 8007c0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c10:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007c12:	f7fa f963 	bl	8001edc <HAL_GetTick>
 8007c16:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007c18:	e008      	b.n	8007c2c <HAL_RCC_OscConfig+0x524>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007c1a:	f7fa f95f 	bl	8001edc <HAL_GetTick>
 8007c1e:	4602      	mov	r2, r0
 8007c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c22:	1ad3      	subs	r3, r2, r3
 8007c24:	2b64      	cmp	r3, #100	; 0x64
 8007c26:	d901      	bls.n	8007c2c <HAL_RCC_OscConfig+0x524>
      {
        return HAL_TIMEOUT;
 8007c28:	2303      	movs	r3, #3
 8007c2a:	e174      	b.n	8007f16 <HAL_RCC_OscConfig+0x80e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007c2c:	4b8a      	ldr	r3, [pc, #552]	; (8007e58 <HAL_RCC_OscConfig+0x750>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d0f0      	beq.n	8007c1a <HAL_RCC_OscConfig+0x512>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	689b      	ldr	r3, [r3, #8]
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	d106      	bne.n	8007c4e <HAL_RCC_OscConfig+0x546>
 8007c40:	4b84      	ldr	r3, [pc, #528]	; (8007e54 <HAL_RCC_OscConfig+0x74c>)
 8007c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c44:	4a83      	ldr	r2, [pc, #524]	; (8007e54 <HAL_RCC_OscConfig+0x74c>)
 8007c46:	f043 0301 	orr.w	r3, r3, #1
 8007c4a:	6713      	str	r3, [r2, #112]	; 0x70
 8007c4c:	e02d      	b.n	8007caa <HAL_RCC_OscConfig+0x5a2>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	689b      	ldr	r3, [r3, #8]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d10c      	bne.n	8007c70 <HAL_RCC_OscConfig+0x568>
 8007c56:	4b7f      	ldr	r3, [pc, #508]	; (8007e54 <HAL_RCC_OscConfig+0x74c>)
 8007c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c5a:	4a7e      	ldr	r2, [pc, #504]	; (8007e54 <HAL_RCC_OscConfig+0x74c>)
 8007c5c:	f023 0301 	bic.w	r3, r3, #1
 8007c60:	6713      	str	r3, [r2, #112]	; 0x70
 8007c62:	4b7c      	ldr	r3, [pc, #496]	; (8007e54 <HAL_RCC_OscConfig+0x74c>)
 8007c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c66:	4a7b      	ldr	r2, [pc, #492]	; (8007e54 <HAL_RCC_OscConfig+0x74c>)
 8007c68:	f023 0304 	bic.w	r3, r3, #4
 8007c6c:	6713      	str	r3, [r2, #112]	; 0x70
 8007c6e:	e01c      	b.n	8007caa <HAL_RCC_OscConfig+0x5a2>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	2b05      	cmp	r3, #5
 8007c76:	d10c      	bne.n	8007c92 <HAL_RCC_OscConfig+0x58a>
 8007c78:	4b76      	ldr	r3, [pc, #472]	; (8007e54 <HAL_RCC_OscConfig+0x74c>)
 8007c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c7c:	4a75      	ldr	r2, [pc, #468]	; (8007e54 <HAL_RCC_OscConfig+0x74c>)
 8007c7e:	f043 0304 	orr.w	r3, r3, #4
 8007c82:	6713      	str	r3, [r2, #112]	; 0x70
 8007c84:	4b73      	ldr	r3, [pc, #460]	; (8007e54 <HAL_RCC_OscConfig+0x74c>)
 8007c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c88:	4a72      	ldr	r2, [pc, #456]	; (8007e54 <HAL_RCC_OscConfig+0x74c>)
 8007c8a:	f043 0301 	orr.w	r3, r3, #1
 8007c8e:	6713      	str	r3, [r2, #112]	; 0x70
 8007c90:	e00b      	b.n	8007caa <HAL_RCC_OscConfig+0x5a2>
 8007c92:	4b70      	ldr	r3, [pc, #448]	; (8007e54 <HAL_RCC_OscConfig+0x74c>)
 8007c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c96:	4a6f      	ldr	r2, [pc, #444]	; (8007e54 <HAL_RCC_OscConfig+0x74c>)
 8007c98:	f023 0301 	bic.w	r3, r3, #1
 8007c9c:	6713      	str	r3, [r2, #112]	; 0x70
 8007c9e:	4b6d      	ldr	r3, [pc, #436]	; (8007e54 <HAL_RCC_OscConfig+0x74c>)
 8007ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ca2:	4a6c      	ldr	r2, [pc, #432]	; (8007e54 <HAL_RCC_OscConfig+0x74c>)
 8007ca4:	f023 0304 	bic.w	r3, r3, #4
 8007ca8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	689b      	ldr	r3, [r3, #8]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d015      	beq.n	8007cde <HAL_RCC_OscConfig+0x5d6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cb2:	f7fa f913 	bl	8001edc <HAL_GetTick>
 8007cb6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007cb8:	e00a      	b.n	8007cd0 <HAL_RCC_OscConfig+0x5c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007cba:	f7fa f90f 	bl	8001edc <HAL_GetTick>
 8007cbe:	4602      	mov	r2, r0
 8007cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc2:	1ad3      	subs	r3, r2, r3
 8007cc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d901      	bls.n	8007cd0 <HAL_RCC_OscConfig+0x5c8>
        {
          return HAL_TIMEOUT;
 8007ccc:	2303      	movs	r3, #3
 8007cce:	e122      	b.n	8007f16 <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007cd0:	4b60      	ldr	r3, [pc, #384]	; (8007e54 <HAL_RCC_OscConfig+0x74c>)
 8007cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cd4:	f003 0302 	and.w	r3, r3, #2
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d0ee      	beq.n	8007cba <HAL_RCC_OscConfig+0x5b2>
 8007cdc:	e014      	b.n	8007d08 <HAL_RCC_OscConfig+0x600>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cde:	f7fa f8fd 	bl	8001edc <HAL_GetTick>
 8007ce2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007ce4:	e00a      	b.n	8007cfc <HAL_RCC_OscConfig+0x5f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007ce6:	f7fa f8f9 	bl	8001edc <HAL_GetTick>
 8007cea:	4602      	mov	r2, r0
 8007cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cee:	1ad3      	subs	r3, r2, r3
 8007cf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d901      	bls.n	8007cfc <HAL_RCC_OscConfig+0x5f4>
        {
          return HAL_TIMEOUT;
 8007cf8:	2303      	movs	r3, #3
 8007cfa:	e10c      	b.n	8007f16 <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007cfc:	4b55      	ldr	r3, [pc, #340]	; (8007e54 <HAL_RCC_OscConfig+0x74c>)
 8007cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d00:	f003 0302 	and.w	r3, r3, #2
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d1ee      	bne.n	8007ce6 <HAL_RCC_OscConfig+0x5de>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	f000 8101 	beq.w	8007f14 <HAL_RCC_OscConfig+0x80c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007d12:	4b50      	ldr	r3, [pc, #320]	; (8007e54 <HAL_RCC_OscConfig+0x74c>)
 8007d14:	691b      	ldr	r3, [r3, #16]
 8007d16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007d1a:	2b18      	cmp	r3, #24
 8007d1c:	f000 80bc 	beq.w	8007e98 <HAL_RCC_OscConfig+0x790>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d24:	2b02      	cmp	r3, #2
 8007d26:	f040 809d 	bne.w	8007e64 <HAL_RCC_OscConfig+0x75c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d2a:	4b4a      	ldr	r3, [pc, #296]	; (8007e54 <HAL_RCC_OscConfig+0x74c>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a49      	ldr	r2, [pc, #292]	; (8007e54 <HAL_RCC_OscConfig+0x74c>)
 8007d30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007d34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d36:	f7fa f8d1 	bl	8001edc <HAL_GetTick>
 8007d3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007d3c:	e008      	b.n	8007d50 <HAL_RCC_OscConfig+0x648>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007d3e:	f7fa f8cd 	bl	8001edc <HAL_GetTick>
 8007d42:	4602      	mov	r2, r0
 8007d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d46:	1ad3      	subs	r3, r2, r3
 8007d48:	2b02      	cmp	r3, #2
 8007d4a:	d901      	bls.n	8007d50 <HAL_RCC_OscConfig+0x648>
          {
            return HAL_TIMEOUT;
 8007d4c:	2303      	movs	r3, #3
 8007d4e:	e0e2      	b.n	8007f16 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007d50:	4b40      	ldr	r3, [pc, #256]	; (8007e54 <HAL_RCC_OscConfig+0x74c>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d1f0      	bne.n	8007d3e <HAL_RCC_OscConfig+0x636>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007d5c:	4b3d      	ldr	r3, [pc, #244]	; (8007e54 <HAL_RCC_OscConfig+0x74c>)
 8007d5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007d60:	4b3e      	ldr	r3, [pc, #248]	; (8007e5c <HAL_RCC_OscConfig+0x754>)
 8007d62:	4013      	ands	r3, r2
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007d68:	687a      	ldr	r2, [r7, #4]
 8007d6a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007d6c:	0112      	lsls	r2, r2, #4
 8007d6e:	430a      	orrs	r2, r1
 8007d70:	4938      	ldr	r1, [pc, #224]	; (8007e54 <HAL_RCC_OscConfig+0x74c>)
 8007d72:	4313      	orrs	r3, r2
 8007d74:	628b      	str	r3, [r1, #40]	; 0x28
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d7a:	3b01      	subs	r3, #1
 8007d7c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d84:	3b01      	subs	r3, #1
 8007d86:	025b      	lsls	r3, r3, #9
 8007d88:	b29b      	uxth	r3, r3
 8007d8a:	431a      	orrs	r2, r3
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d90:	3b01      	subs	r3, #1
 8007d92:	041b      	lsls	r3, r3, #16
 8007d94:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007d98:	431a      	orrs	r2, r3
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d9e:	3b01      	subs	r3, #1
 8007da0:	061b      	lsls	r3, r3, #24
 8007da2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007da6:	492b      	ldr	r1, [pc, #172]	; (8007e54 <HAL_RCC_OscConfig+0x74c>)
 8007da8:	4313      	orrs	r3, r2
 8007daa:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007dac:	4b29      	ldr	r3, [pc, #164]	; (8007e54 <HAL_RCC_OscConfig+0x74c>)
 8007dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007db0:	4a28      	ldr	r2, [pc, #160]	; (8007e54 <HAL_RCC_OscConfig+0x74c>)
 8007db2:	f023 0301 	bic.w	r3, r3, #1
 8007db6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007db8:	4b26      	ldr	r3, [pc, #152]	; (8007e54 <HAL_RCC_OscConfig+0x74c>)
 8007dba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007dbc:	4b28      	ldr	r3, [pc, #160]	; (8007e60 <HAL_RCC_OscConfig+0x758>)
 8007dbe:	4013      	ands	r3, r2
 8007dc0:	687a      	ldr	r2, [r7, #4]
 8007dc2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007dc4:	00d2      	lsls	r2, r2, #3
 8007dc6:	4923      	ldr	r1, [pc, #140]	; (8007e54 <HAL_RCC_OscConfig+0x74c>)
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007dcc:	4b21      	ldr	r3, [pc, #132]	; (8007e54 <HAL_RCC_OscConfig+0x74c>)
 8007dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dd0:	f023 020c 	bic.w	r2, r3, #12
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dd8:	491e      	ldr	r1, [pc, #120]	; (8007e54 <HAL_RCC_OscConfig+0x74c>)
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007dde:	4b1d      	ldr	r3, [pc, #116]	; (8007e54 <HAL_RCC_OscConfig+0x74c>)
 8007de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007de2:	f023 0202 	bic.w	r2, r3, #2
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dea:	491a      	ldr	r1, [pc, #104]	; (8007e54 <HAL_RCC_OscConfig+0x74c>)
 8007dec:	4313      	orrs	r3, r2
 8007dee:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007df0:	4b18      	ldr	r3, [pc, #96]	; (8007e54 <HAL_RCC_OscConfig+0x74c>)
 8007df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df4:	4a17      	ldr	r2, [pc, #92]	; (8007e54 <HAL_RCC_OscConfig+0x74c>)
 8007df6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007dfa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007dfc:	4b15      	ldr	r3, [pc, #84]	; (8007e54 <HAL_RCC_OscConfig+0x74c>)
 8007dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e00:	4a14      	ldr	r2, [pc, #80]	; (8007e54 <HAL_RCC_OscConfig+0x74c>)
 8007e02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e06:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007e08:	4b12      	ldr	r3, [pc, #72]	; (8007e54 <HAL_RCC_OscConfig+0x74c>)
 8007e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e0c:	4a11      	ldr	r2, [pc, #68]	; (8007e54 <HAL_RCC_OscConfig+0x74c>)
 8007e0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007e12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8007e14:	4b0f      	ldr	r3, [pc, #60]	; (8007e54 <HAL_RCC_OscConfig+0x74c>)
 8007e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e18:	4a0e      	ldr	r2, [pc, #56]	; (8007e54 <HAL_RCC_OscConfig+0x74c>)
 8007e1a:	f043 0301 	orr.w	r3, r3, #1
 8007e1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007e20:	4b0c      	ldr	r3, [pc, #48]	; (8007e54 <HAL_RCC_OscConfig+0x74c>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a0b      	ldr	r2, [pc, #44]	; (8007e54 <HAL_RCC_OscConfig+0x74c>)
 8007e26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007e2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e2c:	f7fa f856 	bl	8001edc <HAL_GetTick>
 8007e30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007e32:	e008      	b.n	8007e46 <HAL_RCC_OscConfig+0x73e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e34:	f7fa f852 	bl	8001edc <HAL_GetTick>
 8007e38:	4602      	mov	r2, r0
 8007e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e3c:	1ad3      	subs	r3, r2, r3
 8007e3e:	2b02      	cmp	r3, #2
 8007e40:	d901      	bls.n	8007e46 <HAL_RCC_OscConfig+0x73e>
          {
            return HAL_TIMEOUT;
 8007e42:	2303      	movs	r3, #3
 8007e44:	e067      	b.n	8007f16 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007e46:	4b03      	ldr	r3, [pc, #12]	; (8007e54 <HAL_RCC_OscConfig+0x74c>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d0f0      	beq.n	8007e34 <HAL_RCC_OscConfig+0x72c>
 8007e52:	e05f      	b.n	8007f14 <HAL_RCC_OscConfig+0x80c>
 8007e54:	58024400 	.word	0x58024400
 8007e58:	58024800 	.word	0x58024800
 8007e5c:	fffffc0c 	.word	0xfffffc0c
 8007e60:	ffff0007 	.word	0xffff0007
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e64:	4b2e      	ldr	r3, [pc, #184]	; (8007f20 <HAL_RCC_OscConfig+0x818>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a2d      	ldr	r2, [pc, #180]	; (8007f20 <HAL_RCC_OscConfig+0x818>)
 8007e6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e70:	f7fa f834 	bl	8001edc <HAL_GetTick>
 8007e74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007e76:	e008      	b.n	8007e8a <HAL_RCC_OscConfig+0x782>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e78:	f7fa f830 	bl	8001edc <HAL_GetTick>
 8007e7c:	4602      	mov	r2, r0
 8007e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e80:	1ad3      	subs	r3, r2, r3
 8007e82:	2b02      	cmp	r3, #2
 8007e84:	d901      	bls.n	8007e8a <HAL_RCC_OscConfig+0x782>
          {
            return HAL_TIMEOUT;
 8007e86:	2303      	movs	r3, #3
 8007e88:	e045      	b.n	8007f16 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007e8a:	4b25      	ldr	r3, [pc, #148]	; (8007f20 <HAL_RCC_OscConfig+0x818>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d1f0      	bne.n	8007e78 <HAL_RCC_OscConfig+0x770>
 8007e96:	e03d      	b.n	8007f14 <HAL_RCC_OscConfig+0x80c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007e98:	4b21      	ldr	r3, [pc, #132]	; (8007f20 <HAL_RCC_OscConfig+0x818>)
 8007e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e9c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007e9e:	4b20      	ldr	r3, [pc, #128]	; (8007f20 <HAL_RCC_OscConfig+0x818>)
 8007ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ea2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea8:	2b01      	cmp	r3, #1
 8007eaa:	d031      	beq.n	8007f10 <HAL_RCC_OscConfig+0x808>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	f003 0203 	and.w	r2, r3, #3
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	d12a      	bne.n	8007f10 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	091b      	lsrs	r3, r3, #4
 8007ebe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ec6:	429a      	cmp	r2, r3
 8007ec8:	d122      	bne.n	8007f10 <HAL_RCC_OscConfig+0x808>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ed4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007ed6:	429a      	cmp	r2, r3
 8007ed8:	d11a      	bne.n	8007f10 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	0a5b      	lsrs	r3, r3, #9
 8007ede:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ee6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007ee8:	429a      	cmp	r2, r3
 8007eea:	d111      	bne.n	8007f10 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	0c1b      	lsrs	r3, r3, #16
 8007ef0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ef8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007efa:	429a      	cmp	r2, r3
 8007efc:	d108      	bne.n	8007f10 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	0e1b      	lsrs	r3, r3, #24
 8007f02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f0a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	d001      	beq.n	8007f14 <HAL_RCC_OscConfig+0x80c>
      {
        return HAL_ERROR;
 8007f10:	2301      	movs	r3, #1
 8007f12:	e000      	b.n	8007f16 <HAL_RCC_OscConfig+0x80e>
      }
    }
  }
  return HAL_OK;
 8007f14:	2300      	movs	r3, #0
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3730      	adds	r7, #48	; 0x30
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}
 8007f1e:	bf00      	nop
 8007f20:	58024400 	.word	0x58024400

08007f24 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b086      	sub	sp, #24
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d101      	bne.n	8007f38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007f34:	2301      	movs	r3, #1
 8007f36:	e19c      	b.n	8008272 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007f38:	4b8a      	ldr	r3, [pc, #552]	; (8008164 <HAL_RCC_ClockConfig+0x240>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f003 030f 	and.w	r3, r3, #15
 8007f40:	683a      	ldr	r2, [r7, #0]
 8007f42:	429a      	cmp	r2, r3
 8007f44:	d910      	bls.n	8007f68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f46:	4b87      	ldr	r3, [pc, #540]	; (8008164 <HAL_RCC_ClockConfig+0x240>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f023 020f 	bic.w	r2, r3, #15
 8007f4e:	4985      	ldr	r1, [pc, #532]	; (8008164 <HAL_RCC_ClockConfig+0x240>)
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	4313      	orrs	r3, r2
 8007f54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f56:	4b83      	ldr	r3, [pc, #524]	; (8008164 <HAL_RCC_ClockConfig+0x240>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f003 030f 	and.w	r3, r3, #15
 8007f5e:	683a      	ldr	r2, [r7, #0]
 8007f60:	429a      	cmp	r2, r3
 8007f62:	d001      	beq.n	8007f68 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007f64:	2301      	movs	r3, #1
 8007f66:	e184      	b.n	8008272 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f003 0304 	and.w	r3, r3, #4
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d010      	beq.n	8007f96 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	691a      	ldr	r2, [r3, #16]
 8007f78:	4b7b      	ldr	r3, [pc, #492]	; (8008168 <HAL_RCC_ClockConfig+0x244>)
 8007f7a:	699b      	ldr	r3, [r3, #24]
 8007f7c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d908      	bls.n	8007f96 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007f84:	4b78      	ldr	r3, [pc, #480]	; (8008168 <HAL_RCC_ClockConfig+0x244>)
 8007f86:	699b      	ldr	r3, [r3, #24]
 8007f88:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	691b      	ldr	r3, [r3, #16]
 8007f90:	4975      	ldr	r1, [pc, #468]	; (8008168 <HAL_RCC_ClockConfig+0x244>)
 8007f92:	4313      	orrs	r3, r2
 8007f94:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f003 0308 	and.w	r3, r3, #8
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d010      	beq.n	8007fc4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	695a      	ldr	r2, [r3, #20]
 8007fa6:	4b70      	ldr	r3, [pc, #448]	; (8008168 <HAL_RCC_ClockConfig+0x244>)
 8007fa8:	69db      	ldr	r3, [r3, #28]
 8007faa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007fae:	429a      	cmp	r2, r3
 8007fb0:	d908      	bls.n	8007fc4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007fb2:	4b6d      	ldr	r3, [pc, #436]	; (8008168 <HAL_RCC_ClockConfig+0x244>)
 8007fb4:	69db      	ldr	r3, [r3, #28]
 8007fb6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	695b      	ldr	r3, [r3, #20]
 8007fbe:	496a      	ldr	r1, [pc, #424]	; (8008168 <HAL_RCC_ClockConfig+0x244>)
 8007fc0:	4313      	orrs	r3, r2
 8007fc2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f003 0310 	and.w	r3, r3, #16
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d010      	beq.n	8007ff2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	699a      	ldr	r2, [r3, #24]
 8007fd4:	4b64      	ldr	r3, [pc, #400]	; (8008168 <HAL_RCC_ClockConfig+0x244>)
 8007fd6:	69db      	ldr	r3, [r3, #28]
 8007fd8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d908      	bls.n	8007ff2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007fe0:	4b61      	ldr	r3, [pc, #388]	; (8008168 <HAL_RCC_ClockConfig+0x244>)
 8007fe2:	69db      	ldr	r3, [r3, #28]
 8007fe4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	699b      	ldr	r3, [r3, #24]
 8007fec:	495e      	ldr	r1, [pc, #376]	; (8008168 <HAL_RCC_ClockConfig+0x244>)
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f003 0320 	and.w	r3, r3, #32
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d010      	beq.n	8008020 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	69da      	ldr	r2, [r3, #28]
 8008002:	4b59      	ldr	r3, [pc, #356]	; (8008168 <HAL_RCC_ClockConfig+0x244>)
 8008004:	6a1b      	ldr	r3, [r3, #32]
 8008006:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800800a:	429a      	cmp	r2, r3
 800800c:	d908      	bls.n	8008020 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800800e:	4b56      	ldr	r3, [pc, #344]	; (8008168 <HAL_RCC_ClockConfig+0x244>)
 8008010:	6a1b      	ldr	r3, [r3, #32]
 8008012:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	69db      	ldr	r3, [r3, #28]
 800801a:	4953      	ldr	r1, [pc, #332]	; (8008168 <HAL_RCC_ClockConfig+0x244>)
 800801c:	4313      	orrs	r3, r2
 800801e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f003 0302 	and.w	r3, r3, #2
 8008028:	2b00      	cmp	r3, #0
 800802a:	d010      	beq.n	800804e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	68da      	ldr	r2, [r3, #12]
 8008030:	4b4d      	ldr	r3, [pc, #308]	; (8008168 <HAL_RCC_ClockConfig+0x244>)
 8008032:	699b      	ldr	r3, [r3, #24]
 8008034:	f003 030f 	and.w	r3, r3, #15
 8008038:	429a      	cmp	r2, r3
 800803a:	d908      	bls.n	800804e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800803c:	4b4a      	ldr	r3, [pc, #296]	; (8008168 <HAL_RCC_ClockConfig+0x244>)
 800803e:	699b      	ldr	r3, [r3, #24]
 8008040:	f023 020f 	bic.w	r2, r3, #15
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	68db      	ldr	r3, [r3, #12]
 8008048:	4947      	ldr	r1, [pc, #284]	; (8008168 <HAL_RCC_ClockConfig+0x244>)
 800804a:	4313      	orrs	r3, r2
 800804c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f003 0301 	and.w	r3, r3, #1
 8008056:	2b00      	cmp	r3, #0
 8008058:	d055      	beq.n	8008106 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800805a:	4b43      	ldr	r3, [pc, #268]	; (8008168 <HAL_RCC_ClockConfig+0x244>)
 800805c:	699b      	ldr	r3, [r3, #24]
 800805e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	689b      	ldr	r3, [r3, #8]
 8008066:	4940      	ldr	r1, [pc, #256]	; (8008168 <HAL_RCC_ClockConfig+0x244>)
 8008068:	4313      	orrs	r3, r2
 800806a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	2b02      	cmp	r3, #2
 8008072:	d107      	bne.n	8008084 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008074:	4b3c      	ldr	r3, [pc, #240]	; (8008168 <HAL_RCC_ClockConfig+0x244>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800807c:	2b00      	cmp	r3, #0
 800807e:	d121      	bne.n	80080c4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008080:	2301      	movs	r3, #1
 8008082:	e0f6      	b.n	8008272 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	685b      	ldr	r3, [r3, #4]
 8008088:	2b03      	cmp	r3, #3
 800808a:	d107      	bne.n	800809c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800808c:	4b36      	ldr	r3, [pc, #216]	; (8008168 <HAL_RCC_ClockConfig+0x244>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008094:	2b00      	cmp	r3, #0
 8008096:	d115      	bne.n	80080c4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008098:	2301      	movs	r3, #1
 800809a:	e0ea      	b.n	8008272 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	2b01      	cmp	r3, #1
 80080a2:	d107      	bne.n	80080b4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80080a4:	4b30      	ldr	r3, [pc, #192]	; (8008168 <HAL_RCC_ClockConfig+0x244>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d109      	bne.n	80080c4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80080b0:	2301      	movs	r3, #1
 80080b2:	e0de      	b.n	8008272 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80080b4:	4b2c      	ldr	r3, [pc, #176]	; (8008168 <HAL_RCC_ClockConfig+0x244>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f003 0304 	and.w	r3, r3, #4
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d101      	bne.n	80080c4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80080c0:	2301      	movs	r3, #1
 80080c2:	e0d6      	b.n	8008272 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80080c4:	4b28      	ldr	r3, [pc, #160]	; (8008168 <HAL_RCC_ClockConfig+0x244>)
 80080c6:	691b      	ldr	r3, [r3, #16]
 80080c8:	f023 0207 	bic.w	r2, r3, #7
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	4925      	ldr	r1, [pc, #148]	; (8008168 <HAL_RCC_ClockConfig+0x244>)
 80080d2:	4313      	orrs	r3, r2
 80080d4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080d6:	f7f9 ff01 	bl	8001edc <HAL_GetTick>
 80080da:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080dc:	e00a      	b.n	80080f4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80080de:	f7f9 fefd 	bl	8001edc <HAL_GetTick>
 80080e2:	4602      	mov	r2, r0
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	1ad3      	subs	r3, r2, r3
 80080e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d901      	bls.n	80080f4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80080f0:	2303      	movs	r3, #3
 80080f2:	e0be      	b.n	8008272 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080f4:	4b1c      	ldr	r3, [pc, #112]	; (8008168 <HAL_RCC_ClockConfig+0x244>)
 80080f6:	691b      	ldr	r3, [r3, #16]
 80080f8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	00db      	lsls	r3, r3, #3
 8008102:	429a      	cmp	r2, r3
 8008104:	d1eb      	bne.n	80080de <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f003 0302 	and.w	r3, r3, #2
 800810e:	2b00      	cmp	r3, #0
 8008110:	d010      	beq.n	8008134 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	68da      	ldr	r2, [r3, #12]
 8008116:	4b14      	ldr	r3, [pc, #80]	; (8008168 <HAL_RCC_ClockConfig+0x244>)
 8008118:	699b      	ldr	r3, [r3, #24]
 800811a:	f003 030f 	and.w	r3, r3, #15
 800811e:	429a      	cmp	r2, r3
 8008120:	d208      	bcs.n	8008134 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008122:	4b11      	ldr	r3, [pc, #68]	; (8008168 <HAL_RCC_ClockConfig+0x244>)
 8008124:	699b      	ldr	r3, [r3, #24]
 8008126:	f023 020f 	bic.w	r2, r3, #15
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	68db      	ldr	r3, [r3, #12]
 800812e:	490e      	ldr	r1, [pc, #56]	; (8008168 <HAL_RCC_ClockConfig+0x244>)
 8008130:	4313      	orrs	r3, r2
 8008132:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008134:	4b0b      	ldr	r3, [pc, #44]	; (8008164 <HAL_RCC_ClockConfig+0x240>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f003 030f 	and.w	r3, r3, #15
 800813c:	683a      	ldr	r2, [r7, #0]
 800813e:	429a      	cmp	r2, r3
 8008140:	d214      	bcs.n	800816c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008142:	4b08      	ldr	r3, [pc, #32]	; (8008164 <HAL_RCC_ClockConfig+0x240>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f023 020f 	bic.w	r2, r3, #15
 800814a:	4906      	ldr	r1, [pc, #24]	; (8008164 <HAL_RCC_ClockConfig+0x240>)
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	4313      	orrs	r3, r2
 8008150:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008152:	4b04      	ldr	r3, [pc, #16]	; (8008164 <HAL_RCC_ClockConfig+0x240>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f003 030f 	and.w	r3, r3, #15
 800815a:	683a      	ldr	r2, [r7, #0]
 800815c:	429a      	cmp	r2, r3
 800815e:	d005      	beq.n	800816c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008160:	2301      	movs	r3, #1
 8008162:	e086      	b.n	8008272 <HAL_RCC_ClockConfig+0x34e>
 8008164:	52002000 	.word	0x52002000
 8008168:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f003 0304 	and.w	r3, r3, #4
 8008174:	2b00      	cmp	r3, #0
 8008176:	d010      	beq.n	800819a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	691a      	ldr	r2, [r3, #16]
 800817c:	4b3f      	ldr	r3, [pc, #252]	; (800827c <HAL_RCC_ClockConfig+0x358>)
 800817e:	699b      	ldr	r3, [r3, #24]
 8008180:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008184:	429a      	cmp	r2, r3
 8008186:	d208      	bcs.n	800819a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008188:	4b3c      	ldr	r3, [pc, #240]	; (800827c <HAL_RCC_ClockConfig+0x358>)
 800818a:	699b      	ldr	r3, [r3, #24]
 800818c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	691b      	ldr	r3, [r3, #16]
 8008194:	4939      	ldr	r1, [pc, #228]	; (800827c <HAL_RCC_ClockConfig+0x358>)
 8008196:	4313      	orrs	r3, r2
 8008198:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f003 0308 	and.w	r3, r3, #8
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d010      	beq.n	80081c8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	695a      	ldr	r2, [r3, #20]
 80081aa:	4b34      	ldr	r3, [pc, #208]	; (800827c <HAL_RCC_ClockConfig+0x358>)
 80081ac:	69db      	ldr	r3, [r3, #28]
 80081ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80081b2:	429a      	cmp	r2, r3
 80081b4:	d208      	bcs.n	80081c8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80081b6:	4b31      	ldr	r3, [pc, #196]	; (800827c <HAL_RCC_ClockConfig+0x358>)
 80081b8:	69db      	ldr	r3, [r3, #28]
 80081ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	695b      	ldr	r3, [r3, #20]
 80081c2:	492e      	ldr	r1, [pc, #184]	; (800827c <HAL_RCC_ClockConfig+0x358>)
 80081c4:	4313      	orrs	r3, r2
 80081c6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f003 0310 	and.w	r3, r3, #16
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d010      	beq.n	80081f6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	699a      	ldr	r2, [r3, #24]
 80081d8:	4b28      	ldr	r3, [pc, #160]	; (800827c <HAL_RCC_ClockConfig+0x358>)
 80081da:	69db      	ldr	r3, [r3, #28]
 80081dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80081e0:	429a      	cmp	r2, r3
 80081e2:	d208      	bcs.n	80081f6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80081e4:	4b25      	ldr	r3, [pc, #148]	; (800827c <HAL_RCC_ClockConfig+0x358>)
 80081e6:	69db      	ldr	r3, [r3, #28]
 80081e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	699b      	ldr	r3, [r3, #24]
 80081f0:	4922      	ldr	r1, [pc, #136]	; (800827c <HAL_RCC_ClockConfig+0x358>)
 80081f2:	4313      	orrs	r3, r2
 80081f4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f003 0320 	and.w	r3, r3, #32
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d010      	beq.n	8008224 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	69da      	ldr	r2, [r3, #28]
 8008206:	4b1d      	ldr	r3, [pc, #116]	; (800827c <HAL_RCC_ClockConfig+0x358>)
 8008208:	6a1b      	ldr	r3, [r3, #32]
 800820a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800820e:	429a      	cmp	r2, r3
 8008210:	d208      	bcs.n	8008224 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008212:	4b1a      	ldr	r3, [pc, #104]	; (800827c <HAL_RCC_ClockConfig+0x358>)
 8008214:	6a1b      	ldr	r3, [r3, #32]
 8008216:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	69db      	ldr	r3, [r3, #28]
 800821e:	4917      	ldr	r1, [pc, #92]	; (800827c <HAL_RCC_ClockConfig+0x358>)
 8008220:	4313      	orrs	r3, r2
 8008222:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008224:	f000 f834 	bl	8008290 <HAL_RCC_GetSysClockFreq>
 8008228:	4602      	mov	r2, r0
 800822a:	4b14      	ldr	r3, [pc, #80]	; (800827c <HAL_RCC_ClockConfig+0x358>)
 800822c:	699b      	ldr	r3, [r3, #24]
 800822e:	0a1b      	lsrs	r3, r3, #8
 8008230:	f003 030f 	and.w	r3, r3, #15
 8008234:	4912      	ldr	r1, [pc, #72]	; (8008280 <HAL_RCC_ClockConfig+0x35c>)
 8008236:	5ccb      	ldrb	r3, [r1, r3]
 8008238:	f003 031f 	and.w	r3, r3, #31
 800823c:	fa22 f303 	lsr.w	r3, r2, r3
 8008240:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008242:	4b0e      	ldr	r3, [pc, #56]	; (800827c <HAL_RCC_ClockConfig+0x358>)
 8008244:	699b      	ldr	r3, [r3, #24]
 8008246:	f003 030f 	and.w	r3, r3, #15
 800824a:	4a0d      	ldr	r2, [pc, #52]	; (8008280 <HAL_RCC_ClockConfig+0x35c>)
 800824c:	5cd3      	ldrb	r3, [r2, r3]
 800824e:	f003 031f 	and.w	r3, r3, #31
 8008252:	693a      	ldr	r2, [r7, #16]
 8008254:	fa22 f303 	lsr.w	r3, r2, r3
 8008258:	4a0a      	ldr	r2, [pc, #40]	; (8008284 <HAL_RCC_ClockConfig+0x360>)
 800825a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800825c:	4a0a      	ldr	r2, [pc, #40]	; (8008288 <HAL_RCC_ClockConfig+0x364>)
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8008262:	4b0a      	ldr	r3, [pc, #40]	; (800828c <HAL_RCC_ClockConfig+0x368>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4618      	mov	r0, r3
 8008268:	f7f9 fdee 	bl	8001e48 <HAL_InitTick>
 800826c:	4603      	mov	r3, r0
 800826e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008270:	7bfb      	ldrb	r3, [r7, #15]
}
 8008272:	4618      	mov	r0, r3
 8008274:	3718      	adds	r7, #24
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}
 800827a:	bf00      	nop
 800827c:	58024400 	.word	0x58024400
 8008280:	08013738 	.word	0x08013738
 8008284:	24000004 	.word	0x24000004
 8008288:	24000000 	.word	0x24000000
 800828c:	24000008 	.word	0x24000008

08008290 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008290:	b480      	push	{r7}
 8008292:	b089      	sub	sp, #36	; 0x24
 8008294:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008296:	4bb3      	ldr	r3, [pc, #716]	; (8008564 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008298:	691b      	ldr	r3, [r3, #16]
 800829a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800829e:	2b18      	cmp	r3, #24
 80082a0:	f200 8155 	bhi.w	800854e <HAL_RCC_GetSysClockFreq+0x2be>
 80082a4:	a201      	add	r2, pc, #4	; (adr r2, 80082ac <HAL_RCC_GetSysClockFreq+0x1c>)
 80082a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082aa:	bf00      	nop
 80082ac:	08008311 	.word	0x08008311
 80082b0:	0800854f 	.word	0x0800854f
 80082b4:	0800854f 	.word	0x0800854f
 80082b8:	0800854f 	.word	0x0800854f
 80082bc:	0800854f 	.word	0x0800854f
 80082c0:	0800854f 	.word	0x0800854f
 80082c4:	0800854f 	.word	0x0800854f
 80082c8:	0800854f 	.word	0x0800854f
 80082cc:	08008337 	.word	0x08008337
 80082d0:	0800854f 	.word	0x0800854f
 80082d4:	0800854f 	.word	0x0800854f
 80082d8:	0800854f 	.word	0x0800854f
 80082dc:	0800854f 	.word	0x0800854f
 80082e0:	0800854f 	.word	0x0800854f
 80082e4:	0800854f 	.word	0x0800854f
 80082e8:	0800854f 	.word	0x0800854f
 80082ec:	0800833d 	.word	0x0800833d
 80082f0:	0800854f 	.word	0x0800854f
 80082f4:	0800854f 	.word	0x0800854f
 80082f8:	0800854f 	.word	0x0800854f
 80082fc:	0800854f 	.word	0x0800854f
 8008300:	0800854f 	.word	0x0800854f
 8008304:	0800854f 	.word	0x0800854f
 8008308:	0800854f 	.word	0x0800854f
 800830c:	08008343 	.word	0x08008343
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008310:	4b94      	ldr	r3, [pc, #592]	; (8008564 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f003 0320 	and.w	r3, r3, #32
 8008318:	2b00      	cmp	r3, #0
 800831a:	d009      	beq.n	8008330 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800831c:	4b91      	ldr	r3, [pc, #580]	; (8008564 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	08db      	lsrs	r3, r3, #3
 8008322:	f003 0303 	and.w	r3, r3, #3
 8008326:	4a90      	ldr	r2, [pc, #576]	; (8008568 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008328:	fa22 f303 	lsr.w	r3, r2, r3
 800832c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800832e:	e111      	b.n	8008554 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008330:	4b8d      	ldr	r3, [pc, #564]	; (8008568 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008332:	61bb      	str	r3, [r7, #24]
    break;
 8008334:	e10e      	b.n	8008554 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008336:	4b8d      	ldr	r3, [pc, #564]	; (800856c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008338:	61bb      	str	r3, [r7, #24]
    break;
 800833a:	e10b      	b.n	8008554 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800833c:	4b8c      	ldr	r3, [pc, #560]	; (8008570 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800833e:	61bb      	str	r3, [r7, #24]
    break;
 8008340:	e108      	b.n	8008554 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008342:	4b88      	ldr	r3, [pc, #544]	; (8008564 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008346:	f003 0303 	and.w	r3, r3, #3
 800834a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800834c:	4b85      	ldr	r3, [pc, #532]	; (8008564 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800834e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008350:	091b      	lsrs	r3, r3, #4
 8008352:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008356:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008358:	4b82      	ldr	r3, [pc, #520]	; (8008564 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800835a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800835c:	f003 0301 	and.w	r3, r3, #1
 8008360:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008362:	4b80      	ldr	r3, [pc, #512]	; (8008564 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008366:	08db      	lsrs	r3, r3, #3
 8008368:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800836c:	68fa      	ldr	r2, [r7, #12]
 800836e:	fb02 f303 	mul.w	r3, r2, r3
 8008372:	ee07 3a90 	vmov	s15, r3
 8008376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800837a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	2b00      	cmp	r3, #0
 8008382:	f000 80e1 	beq.w	8008548 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008386:	697b      	ldr	r3, [r7, #20]
 8008388:	2b02      	cmp	r3, #2
 800838a:	f000 8083 	beq.w	8008494 <HAL_RCC_GetSysClockFreq+0x204>
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	2b02      	cmp	r3, #2
 8008392:	f200 80a1 	bhi.w	80084d8 <HAL_RCC_GetSysClockFreq+0x248>
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d003      	beq.n	80083a4 <HAL_RCC_GetSysClockFreq+0x114>
 800839c:	697b      	ldr	r3, [r7, #20]
 800839e:	2b01      	cmp	r3, #1
 80083a0:	d056      	beq.n	8008450 <HAL_RCC_GetSysClockFreq+0x1c0>
 80083a2:	e099      	b.n	80084d8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80083a4:	4b6f      	ldr	r3, [pc, #444]	; (8008564 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f003 0320 	and.w	r3, r3, #32
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d02d      	beq.n	800840c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80083b0:	4b6c      	ldr	r3, [pc, #432]	; (8008564 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	08db      	lsrs	r3, r3, #3
 80083b6:	f003 0303 	and.w	r3, r3, #3
 80083ba:	4a6b      	ldr	r2, [pc, #428]	; (8008568 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80083bc:	fa22 f303 	lsr.w	r3, r2, r3
 80083c0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	ee07 3a90 	vmov	s15, r3
 80083c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	ee07 3a90 	vmov	s15, r3
 80083d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083da:	4b62      	ldr	r3, [pc, #392]	; (8008564 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083e2:	ee07 3a90 	vmov	s15, r3
 80083e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80083ee:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008574 <HAL_RCC_GetSysClockFreq+0x2e4>
 80083f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008402:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008406:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800840a:	e087      	b.n	800851c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	ee07 3a90 	vmov	s15, r3
 8008412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008416:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008578 <HAL_RCC_GetSysClockFreq+0x2e8>
 800841a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800841e:	4b51      	ldr	r3, [pc, #324]	; (8008564 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008422:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008426:	ee07 3a90 	vmov	s15, r3
 800842a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800842e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008432:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008574 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008436:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800843a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800843e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008442:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800844a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800844e:	e065      	b.n	800851c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	ee07 3a90 	vmov	s15, r3
 8008456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800845a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800857c <HAL_RCC_GetSysClockFreq+0x2ec>
 800845e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008462:	4b40      	ldr	r3, [pc, #256]	; (8008564 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008466:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800846a:	ee07 3a90 	vmov	s15, r3
 800846e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008472:	ed97 6a02 	vldr	s12, [r7, #8]
 8008476:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008574 <HAL_RCC_GetSysClockFreq+0x2e4>
 800847a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800847e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008482:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008486:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800848a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800848e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008492:	e043      	b.n	800851c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008494:	693b      	ldr	r3, [r7, #16]
 8008496:	ee07 3a90 	vmov	s15, r3
 800849a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800849e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008580 <HAL_RCC_GetSysClockFreq+0x2f0>
 80084a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084a6:	4b2f      	ldr	r3, [pc, #188]	; (8008564 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80084a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084ae:	ee07 3a90 	vmov	s15, r3
 80084b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80084ba:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008574 <HAL_RCC_GetSysClockFreq+0x2e4>
 80084be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80084d6:	e021      	b.n	800851c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	ee07 3a90 	vmov	s15, r3
 80084de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084e2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800857c <HAL_RCC_GetSysClockFreq+0x2ec>
 80084e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084ea:	4b1e      	ldr	r3, [pc, #120]	; (8008564 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80084ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084f2:	ee07 3a90 	vmov	s15, r3
 80084f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80084fe:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008574 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008502:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008506:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800850a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800850e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008516:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800851a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800851c:	4b11      	ldr	r3, [pc, #68]	; (8008564 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800851e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008520:	0a5b      	lsrs	r3, r3, #9
 8008522:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008526:	3301      	adds	r3, #1
 8008528:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	ee07 3a90 	vmov	s15, r3
 8008530:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008534:	edd7 6a07 	vldr	s13, [r7, #28]
 8008538:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800853c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008540:	ee17 3a90 	vmov	r3, s15
 8008544:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8008546:	e005      	b.n	8008554 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8008548:	2300      	movs	r3, #0
 800854a:	61bb      	str	r3, [r7, #24]
    break;
 800854c:	e002      	b.n	8008554 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800854e:	4b07      	ldr	r3, [pc, #28]	; (800856c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008550:	61bb      	str	r3, [r7, #24]
    break;
 8008552:	bf00      	nop
  }

  return sysclockfreq;
 8008554:	69bb      	ldr	r3, [r7, #24]
}
 8008556:	4618      	mov	r0, r3
 8008558:	3724      	adds	r7, #36	; 0x24
 800855a:	46bd      	mov	sp, r7
 800855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008560:	4770      	bx	lr
 8008562:	bf00      	nop
 8008564:	58024400 	.word	0x58024400
 8008568:	03d09000 	.word	0x03d09000
 800856c:	003d0900 	.word	0x003d0900
 8008570:	00f42400 	.word	0x00f42400
 8008574:	46000000 	.word	0x46000000
 8008578:	4c742400 	.word	0x4c742400
 800857c:	4a742400 	.word	0x4a742400
 8008580:	4b742400 	.word	0x4b742400

08008584 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b082      	sub	sp, #8
 8008588:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800858a:	f7ff fe81 	bl	8008290 <HAL_RCC_GetSysClockFreq>
 800858e:	4602      	mov	r2, r0
 8008590:	4b10      	ldr	r3, [pc, #64]	; (80085d4 <HAL_RCC_GetHCLKFreq+0x50>)
 8008592:	699b      	ldr	r3, [r3, #24]
 8008594:	0a1b      	lsrs	r3, r3, #8
 8008596:	f003 030f 	and.w	r3, r3, #15
 800859a:	490f      	ldr	r1, [pc, #60]	; (80085d8 <HAL_RCC_GetHCLKFreq+0x54>)
 800859c:	5ccb      	ldrb	r3, [r1, r3]
 800859e:	f003 031f 	and.w	r3, r3, #31
 80085a2:	fa22 f303 	lsr.w	r3, r2, r3
 80085a6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80085a8:	4b0a      	ldr	r3, [pc, #40]	; (80085d4 <HAL_RCC_GetHCLKFreq+0x50>)
 80085aa:	699b      	ldr	r3, [r3, #24]
 80085ac:	f003 030f 	and.w	r3, r3, #15
 80085b0:	4a09      	ldr	r2, [pc, #36]	; (80085d8 <HAL_RCC_GetHCLKFreq+0x54>)
 80085b2:	5cd3      	ldrb	r3, [r2, r3]
 80085b4:	f003 031f 	and.w	r3, r3, #31
 80085b8:	687a      	ldr	r2, [r7, #4]
 80085ba:	fa22 f303 	lsr.w	r3, r2, r3
 80085be:	4a07      	ldr	r2, [pc, #28]	; (80085dc <HAL_RCC_GetHCLKFreq+0x58>)
 80085c0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80085c2:	4a07      	ldr	r2, [pc, #28]	; (80085e0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80085c8:	4b04      	ldr	r3, [pc, #16]	; (80085dc <HAL_RCC_GetHCLKFreq+0x58>)
 80085ca:	681b      	ldr	r3, [r3, #0]
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3708      	adds	r7, #8
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}
 80085d4:	58024400 	.word	0x58024400
 80085d8:	08013738 	.word	0x08013738
 80085dc:	24000004 	.word	0x24000004
 80085e0:	24000000 	.word	0x24000000

080085e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80085e8:	f7ff ffcc 	bl	8008584 <HAL_RCC_GetHCLKFreq>
 80085ec:	4602      	mov	r2, r0
 80085ee:	4b06      	ldr	r3, [pc, #24]	; (8008608 <HAL_RCC_GetPCLK1Freq+0x24>)
 80085f0:	69db      	ldr	r3, [r3, #28]
 80085f2:	091b      	lsrs	r3, r3, #4
 80085f4:	f003 0307 	and.w	r3, r3, #7
 80085f8:	4904      	ldr	r1, [pc, #16]	; (800860c <HAL_RCC_GetPCLK1Freq+0x28>)
 80085fa:	5ccb      	ldrb	r3, [r1, r3]
 80085fc:	f003 031f 	and.w	r3, r3, #31
 8008600:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008604:	4618      	mov	r0, r3
 8008606:	bd80      	pop	{r7, pc}
 8008608:	58024400 	.word	0x58024400
 800860c:	08013738 	.word	0x08013738

08008610 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008614:	f7ff ffb6 	bl	8008584 <HAL_RCC_GetHCLKFreq>
 8008618:	4602      	mov	r2, r0
 800861a:	4b06      	ldr	r3, [pc, #24]	; (8008634 <HAL_RCC_GetPCLK2Freq+0x24>)
 800861c:	69db      	ldr	r3, [r3, #28]
 800861e:	0a1b      	lsrs	r3, r3, #8
 8008620:	f003 0307 	and.w	r3, r3, #7
 8008624:	4904      	ldr	r1, [pc, #16]	; (8008638 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008626:	5ccb      	ldrb	r3, [r1, r3]
 8008628:	f003 031f 	and.w	r3, r3, #31
 800862c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008630:	4618      	mov	r0, r3
 8008632:	bd80      	pop	{r7, pc}
 8008634:	58024400 	.word	0x58024400
 8008638:	08013738 	.word	0x08013738

0800863c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800863c:	b480      	push	{r7}
 800863e:	b083      	sub	sp, #12
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
 8008644:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	223f      	movs	r2, #63	; 0x3f
 800864a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800864c:	4b1a      	ldr	r3, [pc, #104]	; (80086b8 <HAL_RCC_GetClockConfig+0x7c>)
 800864e:	691b      	ldr	r3, [r3, #16]
 8008650:	f003 0207 	and.w	r2, r3, #7
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8008658:	4b17      	ldr	r3, [pc, #92]	; (80086b8 <HAL_RCC_GetClockConfig+0x7c>)
 800865a:	699b      	ldr	r3, [r3, #24]
 800865c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8008664:	4b14      	ldr	r3, [pc, #80]	; (80086b8 <HAL_RCC_GetClockConfig+0x7c>)
 8008666:	699b      	ldr	r3, [r3, #24]
 8008668:	f003 020f 	and.w	r2, r3, #15
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8008670:	4b11      	ldr	r3, [pc, #68]	; (80086b8 <HAL_RCC_GetClockConfig+0x7c>)
 8008672:	699b      	ldr	r3, [r3, #24]
 8008674:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800867c:	4b0e      	ldr	r3, [pc, #56]	; (80086b8 <HAL_RCC_GetClockConfig+0x7c>)
 800867e:	69db      	ldr	r3, [r3, #28]
 8008680:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8008688:	4b0b      	ldr	r3, [pc, #44]	; (80086b8 <HAL_RCC_GetClockConfig+0x7c>)
 800868a:	69db      	ldr	r3, [r3, #28]
 800868c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8008694:	4b08      	ldr	r3, [pc, #32]	; (80086b8 <HAL_RCC_GetClockConfig+0x7c>)
 8008696:	6a1b      	ldr	r3, [r3, #32]
 8008698:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80086a0:	4b06      	ldr	r3, [pc, #24]	; (80086bc <HAL_RCC_GetClockConfig+0x80>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f003 020f 	and.w	r2, r3, #15
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	601a      	str	r2, [r3, #0]
}
 80086ac:	bf00      	nop
 80086ae:	370c      	adds	r7, #12
 80086b0:	46bd      	mov	sp, r7
 80086b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b6:	4770      	bx	lr
 80086b8:	58024400 	.word	0x58024400
 80086bc:	52002000 	.word	0x52002000

080086c0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b086      	sub	sp, #24
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80086c8:	2300      	movs	r3, #0
 80086ca:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80086cc:	2300      	movs	r3, #0
 80086ce:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d03f      	beq.n	800875c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80086e4:	d02a      	beq.n	800873c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80086e6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80086ea:	d824      	bhi.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80086ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80086f0:	d018      	beq.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80086f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80086f6:	d81e      	bhi.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d003      	beq.n	8008704 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80086fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008700:	d007      	beq.n	8008712 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008702:	e018      	b.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008704:	4ba3      	ldr	r3, [pc, #652]	; (8008994 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008708:	4aa2      	ldr	r2, [pc, #648]	; (8008994 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800870a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800870e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008710:	e015      	b.n	800873e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	3304      	adds	r3, #4
 8008716:	2102      	movs	r1, #2
 8008718:	4618      	mov	r0, r3
 800871a:	f001 f9d5 	bl	8009ac8 <RCCEx_PLL2_Config>
 800871e:	4603      	mov	r3, r0
 8008720:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008722:	e00c      	b.n	800873e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	3324      	adds	r3, #36	; 0x24
 8008728:	2102      	movs	r1, #2
 800872a:	4618      	mov	r0, r3
 800872c:	f001 fa7e 	bl	8009c2c <RCCEx_PLL3_Config>
 8008730:	4603      	mov	r3, r0
 8008732:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008734:	e003      	b.n	800873e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008736:	2301      	movs	r3, #1
 8008738:	75fb      	strb	r3, [r7, #23]
      break;
 800873a:	e000      	b.n	800873e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800873c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800873e:	7dfb      	ldrb	r3, [r7, #23]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d109      	bne.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008744:	4b93      	ldr	r3, [pc, #588]	; (8008994 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008746:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008748:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008750:	4990      	ldr	r1, [pc, #576]	; (8008994 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008752:	4313      	orrs	r3, r2
 8008754:	650b      	str	r3, [r1, #80]	; 0x50
 8008756:	e001      	b.n	800875c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008758:	7dfb      	ldrb	r3, [r7, #23]
 800875a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008764:	2b00      	cmp	r3, #0
 8008766:	d03d      	beq.n	80087e4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800876c:	2b04      	cmp	r3, #4
 800876e:	d826      	bhi.n	80087be <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008770:	a201      	add	r2, pc, #4	; (adr r2, 8008778 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8008772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008776:	bf00      	nop
 8008778:	0800878d 	.word	0x0800878d
 800877c:	0800879b 	.word	0x0800879b
 8008780:	080087ad 	.word	0x080087ad
 8008784:	080087c5 	.word	0x080087c5
 8008788:	080087c5 	.word	0x080087c5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800878c:	4b81      	ldr	r3, [pc, #516]	; (8008994 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800878e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008790:	4a80      	ldr	r2, [pc, #512]	; (8008994 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008792:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008796:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008798:	e015      	b.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	3304      	adds	r3, #4
 800879e:	2100      	movs	r1, #0
 80087a0:	4618      	mov	r0, r3
 80087a2:	f001 f991 	bl	8009ac8 <RCCEx_PLL2_Config>
 80087a6:	4603      	mov	r3, r0
 80087a8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80087aa:	e00c      	b.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	3324      	adds	r3, #36	; 0x24
 80087b0:	2100      	movs	r1, #0
 80087b2:	4618      	mov	r0, r3
 80087b4:	f001 fa3a 	bl	8009c2c <RCCEx_PLL3_Config>
 80087b8:	4603      	mov	r3, r0
 80087ba:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80087bc:	e003      	b.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80087be:	2301      	movs	r3, #1
 80087c0:	75fb      	strb	r3, [r7, #23]
      break;
 80087c2:	e000      	b.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80087c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80087c6:	7dfb      	ldrb	r3, [r7, #23]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d109      	bne.n	80087e0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80087cc:	4b71      	ldr	r3, [pc, #452]	; (8008994 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80087ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087d0:	f023 0207 	bic.w	r2, r3, #7
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087d8:	496e      	ldr	r1, [pc, #440]	; (8008994 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80087da:	4313      	orrs	r3, r2
 80087dc:	650b      	str	r3, [r1, #80]	; 0x50
 80087de:	e001      	b.n	80087e4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087e0:	7dfb      	ldrb	r3, [r7, #23]
 80087e2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d042      	beq.n	8008876 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087f8:	d02b      	beq.n	8008852 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80087fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087fe:	d825      	bhi.n	800884c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008800:	2bc0      	cmp	r3, #192	; 0xc0
 8008802:	d028      	beq.n	8008856 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008804:	2bc0      	cmp	r3, #192	; 0xc0
 8008806:	d821      	bhi.n	800884c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008808:	2b80      	cmp	r3, #128	; 0x80
 800880a:	d016      	beq.n	800883a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800880c:	2b80      	cmp	r3, #128	; 0x80
 800880e:	d81d      	bhi.n	800884c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008810:	2b00      	cmp	r3, #0
 8008812:	d002      	beq.n	800881a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8008814:	2b40      	cmp	r3, #64	; 0x40
 8008816:	d007      	beq.n	8008828 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8008818:	e018      	b.n	800884c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800881a:	4b5e      	ldr	r3, [pc, #376]	; (8008994 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800881c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800881e:	4a5d      	ldr	r2, [pc, #372]	; (8008994 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008820:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008824:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008826:	e017      	b.n	8008858 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	3304      	adds	r3, #4
 800882c:	2100      	movs	r1, #0
 800882e:	4618      	mov	r0, r3
 8008830:	f001 f94a 	bl	8009ac8 <RCCEx_PLL2_Config>
 8008834:	4603      	mov	r3, r0
 8008836:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008838:	e00e      	b.n	8008858 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	3324      	adds	r3, #36	; 0x24
 800883e:	2100      	movs	r1, #0
 8008840:	4618      	mov	r0, r3
 8008842:	f001 f9f3 	bl	8009c2c <RCCEx_PLL3_Config>
 8008846:	4603      	mov	r3, r0
 8008848:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800884a:	e005      	b.n	8008858 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800884c:	2301      	movs	r3, #1
 800884e:	75fb      	strb	r3, [r7, #23]
      break;
 8008850:	e002      	b.n	8008858 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8008852:	bf00      	nop
 8008854:	e000      	b.n	8008858 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8008856:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008858:	7dfb      	ldrb	r3, [r7, #23]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d109      	bne.n	8008872 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800885e:	4b4d      	ldr	r3, [pc, #308]	; (8008994 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008860:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008862:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800886a:	494a      	ldr	r1, [pc, #296]	; (8008994 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800886c:	4313      	orrs	r3, r2
 800886e:	650b      	str	r3, [r1, #80]	; 0x50
 8008870:	e001      	b.n	8008876 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008872:	7dfb      	ldrb	r3, [r7, #23]
 8008874:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800887e:	2b00      	cmp	r3, #0
 8008880:	d049      	beq.n	8008916 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008888:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800888c:	d030      	beq.n	80088f0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800888e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008892:	d82a      	bhi.n	80088ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008894:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008898:	d02c      	beq.n	80088f4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800889a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800889e:	d824      	bhi.n	80088ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80088a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80088a4:	d018      	beq.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80088a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80088aa:	d81e      	bhi.n	80088ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d003      	beq.n	80088b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80088b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80088b4:	d007      	beq.n	80088c6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80088b6:	e018      	b.n	80088ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088b8:	4b36      	ldr	r3, [pc, #216]	; (8008994 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80088ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088bc:	4a35      	ldr	r2, [pc, #212]	; (8008994 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80088be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80088c4:	e017      	b.n	80088f6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	3304      	adds	r3, #4
 80088ca:	2100      	movs	r1, #0
 80088cc:	4618      	mov	r0, r3
 80088ce:	f001 f8fb 	bl	8009ac8 <RCCEx_PLL2_Config>
 80088d2:	4603      	mov	r3, r0
 80088d4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80088d6:	e00e      	b.n	80088f6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	3324      	adds	r3, #36	; 0x24
 80088dc:	2100      	movs	r1, #0
 80088de:	4618      	mov	r0, r3
 80088e0:	f001 f9a4 	bl	8009c2c <RCCEx_PLL3_Config>
 80088e4:	4603      	mov	r3, r0
 80088e6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80088e8:	e005      	b.n	80088f6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80088ea:	2301      	movs	r3, #1
 80088ec:	75fb      	strb	r3, [r7, #23]
      break;
 80088ee:	e002      	b.n	80088f6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80088f0:	bf00      	nop
 80088f2:	e000      	b.n	80088f6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80088f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80088f6:	7dfb      	ldrb	r3, [r7, #23]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d10a      	bne.n	8008912 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80088fc:	4b25      	ldr	r3, [pc, #148]	; (8008994 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80088fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008900:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800890a:	4922      	ldr	r1, [pc, #136]	; (8008994 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800890c:	4313      	orrs	r3, r2
 800890e:	658b      	str	r3, [r1, #88]	; 0x58
 8008910:	e001      	b.n	8008916 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008912:	7dfb      	ldrb	r3, [r7, #23]
 8008914:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800891e:	2b00      	cmp	r3, #0
 8008920:	d04b      	beq.n	80089ba <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008928:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800892c:	d030      	beq.n	8008990 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800892e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008932:	d82a      	bhi.n	800898a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008934:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008938:	d02e      	beq.n	8008998 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800893a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800893e:	d824      	bhi.n	800898a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008940:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008944:	d018      	beq.n	8008978 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8008946:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800894a:	d81e      	bhi.n	800898a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800894c:	2b00      	cmp	r3, #0
 800894e:	d003      	beq.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008950:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008954:	d007      	beq.n	8008966 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8008956:	e018      	b.n	800898a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008958:	4b0e      	ldr	r3, [pc, #56]	; (8008994 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800895a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800895c:	4a0d      	ldr	r2, [pc, #52]	; (8008994 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800895e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008962:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008964:	e019      	b.n	800899a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	3304      	adds	r3, #4
 800896a:	2100      	movs	r1, #0
 800896c:	4618      	mov	r0, r3
 800896e:	f001 f8ab 	bl	8009ac8 <RCCEx_PLL2_Config>
 8008972:	4603      	mov	r3, r0
 8008974:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008976:	e010      	b.n	800899a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	3324      	adds	r3, #36	; 0x24
 800897c:	2100      	movs	r1, #0
 800897e:	4618      	mov	r0, r3
 8008980:	f001 f954 	bl	8009c2c <RCCEx_PLL3_Config>
 8008984:	4603      	mov	r3, r0
 8008986:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008988:	e007      	b.n	800899a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800898a:	2301      	movs	r3, #1
 800898c:	75fb      	strb	r3, [r7, #23]
      break;
 800898e:	e004      	b.n	800899a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8008990:	bf00      	nop
 8008992:	e002      	b.n	800899a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8008994:	58024400 	.word	0x58024400
      break;
 8008998:	bf00      	nop
    }

    if(ret == HAL_OK)
 800899a:	7dfb      	ldrb	r3, [r7, #23]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d10a      	bne.n	80089b6 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80089a0:	4b99      	ldr	r3, [pc, #612]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80089a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089a4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80089ae:	4996      	ldr	r1, [pc, #600]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80089b0:	4313      	orrs	r3, r2
 80089b2:	658b      	str	r3, [r1, #88]	; 0x58
 80089b4:	e001      	b.n	80089ba <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089b6:	7dfb      	ldrb	r3, [r7, #23]
 80089b8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d032      	beq.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089ca:	2b30      	cmp	r3, #48	; 0x30
 80089cc:	d01c      	beq.n	8008a08 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80089ce:	2b30      	cmp	r3, #48	; 0x30
 80089d0:	d817      	bhi.n	8008a02 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80089d2:	2b20      	cmp	r3, #32
 80089d4:	d00c      	beq.n	80089f0 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80089d6:	2b20      	cmp	r3, #32
 80089d8:	d813      	bhi.n	8008a02 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d016      	beq.n	8008a0c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80089de:	2b10      	cmp	r3, #16
 80089e0:	d10f      	bne.n	8008a02 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089e2:	4b89      	ldr	r3, [pc, #548]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80089e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089e6:	4a88      	ldr	r2, [pc, #544]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80089e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80089ee:	e00e      	b.n	8008a0e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	3304      	adds	r3, #4
 80089f4:	2102      	movs	r1, #2
 80089f6:	4618      	mov	r0, r3
 80089f8:	f001 f866 	bl	8009ac8 <RCCEx_PLL2_Config>
 80089fc:	4603      	mov	r3, r0
 80089fe:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008a00:	e005      	b.n	8008a0e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008a02:	2301      	movs	r3, #1
 8008a04:	75fb      	strb	r3, [r7, #23]
      break;
 8008a06:	e002      	b.n	8008a0e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8008a08:	bf00      	nop
 8008a0a:	e000      	b.n	8008a0e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8008a0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a0e:	7dfb      	ldrb	r3, [r7, #23]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d109      	bne.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008a14:	4b7c      	ldr	r3, [pc, #496]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008a16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a18:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a20:	4979      	ldr	r1, [pc, #484]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008a22:	4313      	orrs	r3, r2
 8008a24:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008a26:	e001      	b.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a28:	7dfb      	ldrb	r3, [r7, #23]
 8008a2a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d047      	beq.n	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008a40:	d030      	beq.n	8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8008a42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008a46:	d82a      	bhi.n	8008a9e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008a48:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008a4c:	d02c      	beq.n	8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8008a4e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008a52:	d824      	bhi.n	8008a9e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008a54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a58:	d018      	beq.n	8008a8c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8008a5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a5e:	d81e      	bhi.n	8008a9e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d003      	beq.n	8008a6c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8008a64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a68:	d007      	beq.n	8008a7a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8008a6a:	e018      	b.n	8008a9e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a6c:	4b66      	ldr	r3, [pc, #408]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a70:	4a65      	ldr	r2, [pc, #404]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008a72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a76:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008a78:	e017      	b.n	8008aaa <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	3304      	adds	r3, #4
 8008a7e:	2100      	movs	r1, #0
 8008a80:	4618      	mov	r0, r3
 8008a82:	f001 f821 	bl	8009ac8 <RCCEx_PLL2_Config>
 8008a86:	4603      	mov	r3, r0
 8008a88:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008a8a:	e00e      	b.n	8008aaa <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	3324      	adds	r3, #36	; 0x24
 8008a90:	2100      	movs	r1, #0
 8008a92:	4618      	mov	r0, r3
 8008a94:	f001 f8ca 	bl	8009c2c <RCCEx_PLL3_Config>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008a9c:	e005      	b.n	8008aaa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	75fb      	strb	r3, [r7, #23]
      break;
 8008aa2:	e002      	b.n	8008aaa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8008aa4:	bf00      	nop
 8008aa6:	e000      	b.n	8008aaa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8008aa8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008aaa:	7dfb      	ldrb	r3, [r7, #23]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d109      	bne.n	8008ac4 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008ab0:	4b55      	ldr	r3, [pc, #340]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008ab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ab4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008abc:	4952      	ldr	r1, [pc, #328]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008abe:	4313      	orrs	r3, r2
 8008ac0:	650b      	str	r3, [r1, #80]	; 0x50
 8008ac2:	e001      	b.n	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ac4:	7dfb      	ldrb	r3, [r7, #23]
 8008ac6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d049      	beq.n	8008b68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ad8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008adc:	d02e      	beq.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8008ade:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008ae2:	d828      	bhi.n	8008b36 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008ae4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008ae8:	d02a      	beq.n	8008b40 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8008aea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008aee:	d822      	bhi.n	8008b36 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008af0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008af4:	d026      	beq.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8008af6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008afa:	d81c      	bhi.n	8008b36 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008afc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b00:	d010      	beq.n	8008b24 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8008b02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b06:	d816      	bhi.n	8008b36 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d01d      	beq.n	8008b48 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8008b0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b10:	d111      	bne.n	8008b36 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	3304      	adds	r3, #4
 8008b16:	2101      	movs	r1, #1
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f000 ffd5 	bl	8009ac8 <RCCEx_PLL2_Config>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008b22:	e012      	b.n	8008b4a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	3324      	adds	r3, #36	; 0x24
 8008b28:	2101      	movs	r1, #1
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f001 f87e 	bl	8009c2c <RCCEx_PLL3_Config>
 8008b30:	4603      	mov	r3, r0
 8008b32:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008b34:	e009      	b.n	8008b4a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b36:	2301      	movs	r3, #1
 8008b38:	75fb      	strb	r3, [r7, #23]
      break;
 8008b3a:	e006      	b.n	8008b4a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008b3c:	bf00      	nop
 8008b3e:	e004      	b.n	8008b4a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008b40:	bf00      	nop
 8008b42:	e002      	b.n	8008b4a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008b44:	bf00      	nop
 8008b46:	e000      	b.n	8008b4a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008b48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b4a:	7dfb      	ldrb	r3, [r7, #23]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d109      	bne.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008b50:	4b2d      	ldr	r3, [pc, #180]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008b52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b54:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b5c:	492a      	ldr	r1, [pc, #168]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008b5e:	4313      	orrs	r3, r2
 8008b60:	650b      	str	r3, [r1, #80]	; 0x50
 8008b62:	e001      	b.n	8008b68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b64:	7dfb      	ldrb	r3, [r7, #23]
 8008b66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d04d      	beq.n	8008c10 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008b7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008b7e:	d02e      	beq.n	8008bde <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8008b80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008b84:	d828      	bhi.n	8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008b86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b8a:	d02a      	beq.n	8008be2 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8008b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b90:	d822      	bhi.n	8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008b92:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008b96:	d026      	beq.n	8008be6 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8008b98:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008b9c:	d81c      	bhi.n	8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008b9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ba2:	d010      	beq.n	8008bc6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8008ba4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ba8:	d816      	bhi.n	8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d01d      	beq.n	8008bea <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8008bae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008bb2:	d111      	bne.n	8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	3304      	adds	r3, #4
 8008bb8:	2101      	movs	r1, #1
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f000 ff84 	bl	8009ac8 <RCCEx_PLL2_Config>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008bc4:	e012      	b.n	8008bec <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	3324      	adds	r3, #36	; 0x24
 8008bca:	2101      	movs	r1, #1
 8008bcc:	4618      	mov	r0, r3
 8008bce:	f001 f82d 	bl	8009c2c <RCCEx_PLL3_Config>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008bd6:	e009      	b.n	8008bec <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008bd8:	2301      	movs	r3, #1
 8008bda:	75fb      	strb	r3, [r7, #23]
      break;
 8008bdc:	e006      	b.n	8008bec <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008bde:	bf00      	nop
 8008be0:	e004      	b.n	8008bec <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008be2:	bf00      	nop
 8008be4:	e002      	b.n	8008bec <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008be6:	bf00      	nop
 8008be8:	e000      	b.n	8008bec <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008bea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008bec:	7dfb      	ldrb	r3, [r7, #23]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d10c      	bne.n	8008c0c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008bf2:	4b05      	ldr	r3, [pc, #20]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bf6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008c00:	4901      	ldr	r1, [pc, #4]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008c02:	4313      	orrs	r3, r2
 8008c04:	658b      	str	r3, [r1, #88]	; 0x58
 8008c06:	e003      	b.n	8008c10 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8008c08:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c0c:	7dfb      	ldrb	r3, [r7, #23]
 8008c0e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d02f      	beq.n	8008c7c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c24:	d00e      	beq.n	8008c44 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8008c26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c2a:	d814      	bhi.n	8008c56 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d015      	beq.n	8008c5c <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8008c30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c34:	d10f      	bne.n	8008c56 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c36:	4baf      	ldr	r3, [pc, #700]	; (8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c3a:	4aae      	ldr	r2, [pc, #696]	; (8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008c3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c40:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008c42:	e00c      	b.n	8008c5e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	3304      	adds	r3, #4
 8008c48:	2101      	movs	r1, #1
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f000 ff3c 	bl	8009ac8 <RCCEx_PLL2_Config>
 8008c50:	4603      	mov	r3, r0
 8008c52:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008c54:	e003      	b.n	8008c5e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008c56:	2301      	movs	r3, #1
 8008c58:	75fb      	strb	r3, [r7, #23]
      break;
 8008c5a:	e000      	b.n	8008c5e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8008c5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c5e:	7dfb      	ldrb	r3, [r7, #23]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d109      	bne.n	8008c78 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008c64:	4ba3      	ldr	r3, [pc, #652]	; (8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008c66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c68:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c70:	49a0      	ldr	r1, [pc, #640]	; (8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008c72:	4313      	orrs	r3, r2
 8008c74:	650b      	str	r3, [r1, #80]	; 0x50
 8008c76:	e001      	b.n	8008c7c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c78:	7dfb      	ldrb	r3, [r7, #23]
 8008c7a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d032      	beq.n	8008cee <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c8c:	2b03      	cmp	r3, #3
 8008c8e:	d81b      	bhi.n	8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8008c90:	a201      	add	r2, pc, #4	; (adr r2, 8008c98 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8008c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c96:	bf00      	nop
 8008c98:	08008ccf 	.word	0x08008ccf
 8008c9c:	08008ca9 	.word	0x08008ca9
 8008ca0:	08008cb7 	.word	0x08008cb7
 8008ca4:	08008ccf 	.word	0x08008ccf
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ca8:	4b92      	ldr	r3, [pc, #584]	; (8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cac:	4a91      	ldr	r2, [pc, #580]	; (8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008cae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008cb2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008cb4:	e00c      	b.n	8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	3304      	adds	r3, #4
 8008cba:	2102      	movs	r1, #2
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f000 ff03 	bl	8009ac8 <RCCEx_PLL2_Config>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008cc6:	e003      	b.n	8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008cc8:	2301      	movs	r3, #1
 8008cca:	75fb      	strb	r3, [r7, #23]
      break;
 8008ccc:	e000      	b.n	8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8008cce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008cd0:	7dfb      	ldrb	r3, [r7, #23]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d109      	bne.n	8008cea <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008cd6:	4b87      	ldr	r3, [pc, #540]	; (8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cda:	f023 0203 	bic.w	r2, r3, #3
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ce2:	4984      	ldr	r1, [pc, #528]	; (8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008ce8:	e001      	b.n	8008cee <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cea:	7dfb      	ldrb	r3, [r7, #23]
 8008cec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	f000 8086 	beq.w	8008e08 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008cfc:	4b7e      	ldr	r3, [pc, #504]	; (8008ef8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	4a7d      	ldr	r2, [pc, #500]	; (8008ef8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8008d02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d06:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008d08:	f7f9 f8e8 	bl	8001edc <HAL_GetTick>
 8008d0c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008d0e:	e009      	b.n	8008d24 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d10:	f7f9 f8e4 	bl	8001edc <HAL_GetTick>
 8008d14:	4602      	mov	r2, r0
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	1ad3      	subs	r3, r2, r3
 8008d1a:	2b64      	cmp	r3, #100	; 0x64
 8008d1c:	d902      	bls.n	8008d24 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8008d1e:	2303      	movs	r3, #3
 8008d20:	75fb      	strb	r3, [r7, #23]
        break;
 8008d22:	e005      	b.n	8008d30 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008d24:	4b74      	ldr	r3, [pc, #464]	; (8008ef8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d0ef      	beq.n	8008d10 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8008d30:	7dfb      	ldrb	r3, [r7, #23]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d166      	bne.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008d36:	4b6f      	ldr	r3, [pc, #444]	; (8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008d38:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008d40:	4053      	eors	r3, r2
 8008d42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d013      	beq.n	8008d72 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008d4a:	4b6a      	ldr	r3, [pc, #424]	; (8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d52:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008d54:	4b67      	ldr	r3, [pc, #412]	; (8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d58:	4a66      	ldr	r2, [pc, #408]	; (8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008d5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d5e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008d60:	4b64      	ldr	r3, [pc, #400]	; (8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d64:	4a63      	ldr	r2, [pc, #396]	; (8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008d66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d6a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008d6c:	4a61      	ldr	r2, [pc, #388]	; (8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008d78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d7c:	d115      	bne.n	8008daa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d7e:	f7f9 f8ad 	bl	8001edc <HAL_GetTick>
 8008d82:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008d84:	e00b      	b.n	8008d9e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d86:	f7f9 f8a9 	bl	8001edc <HAL_GetTick>
 8008d8a:	4602      	mov	r2, r0
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	1ad3      	subs	r3, r2, r3
 8008d90:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d902      	bls.n	8008d9e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8008d98:	2303      	movs	r3, #3
 8008d9a:	75fb      	strb	r3, [r7, #23]
            break;
 8008d9c:	e005      	b.n	8008daa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008d9e:	4b55      	ldr	r3, [pc, #340]	; (8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008da2:	f003 0302 	and.w	r3, r3, #2
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d0ed      	beq.n	8008d86 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8008daa:	7dfb      	ldrb	r3, [r7, #23]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d126      	bne.n	8008dfe <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008db6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008dba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008dbe:	d10d      	bne.n	8008ddc <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8008dc0:	4b4c      	ldr	r3, [pc, #304]	; (8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008dc2:	691b      	ldr	r3, [r3, #16]
 8008dc4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008dce:	0919      	lsrs	r1, r3, #4
 8008dd0:	4b4a      	ldr	r3, [pc, #296]	; (8008efc <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8008dd2:	400b      	ands	r3, r1
 8008dd4:	4947      	ldr	r1, [pc, #284]	; (8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	610b      	str	r3, [r1, #16]
 8008dda:	e005      	b.n	8008de8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8008ddc:	4b45      	ldr	r3, [pc, #276]	; (8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008dde:	691b      	ldr	r3, [r3, #16]
 8008de0:	4a44      	ldr	r2, [pc, #272]	; (8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008de2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008de6:	6113      	str	r3, [r2, #16]
 8008de8:	4b42      	ldr	r3, [pc, #264]	; (8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008dea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008df2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008df6:	493f      	ldr	r1, [pc, #252]	; (8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	670b      	str	r3, [r1, #112]	; 0x70
 8008dfc:	e004      	b.n	8008e08 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008dfe:	7dfb      	ldrb	r3, [r7, #23]
 8008e00:	75bb      	strb	r3, [r7, #22]
 8008e02:	e001      	b.n	8008e08 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e04:	7dfb      	ldrb	r3, [r7, #23]
 8008e06:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f003 0301 	and.w	r3, r3, #1
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	f000 8085 	beq.w	8008f20 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e1a:	2b28      	cmp	r3, #40	; 0x28
 8008e1c:	d866      	bhi.n	8008eec <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8008e1e:	a201      	add	r2, pc, #4	; (adr r2, 8008e24 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8008e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e24:	08008f01 	.word	0x08008f01
 8008e28:	08008eed 	.word	0x08008eed
 8008e2c:	08008eed 	.word	0x08008eed
 8008e30:	08008eed 	.word	0x08008eed
 8008e34:	08008eed 	.word	0x08008eed
 8008e38:	08008eed 	.word	0x08008eed
 8008e3c:	08008eed 	.word	0x08008eed
 8008e40:	08008eed 	.word	0x08008eed
 8008e44:	08008ec9 	.word	0x08008ec9
 8008e48:	08008eed 	.word	0x08008eed
 8008e4c:	08008eed 	.word	0x08008eed
 8008e50:	08008eed 	.word	0x08008eed
 8008e54:	08008eed 	.word	0x08008eed
 8008e58:	08008eed 	.word	0x08008eed
 8008e5c:	08008eed 	.word	0x08008eed
 8008e60:	08008eed 	.word	0x08008eed
 8008e64:	08008edb 	.word	0x08008edb
 8008e68:	08008eed 	.word	0x08008eed
 8008e6c:	08008eed 	.word	0x08008eed
 8008e70:	08008eed 	.word	0x08008eed
 8008e74:	08008eed 	.word	0x08008eed
 8008e78:	08008eed 	.word	0x08008eed
 8008e7c:	08008eed 	.word	0x08008eed
 8008e80:	08008eed 	.word	0x08008eed
 8008e84:	08008f01 	.word	0x08008f01
 8008e88:	08008eed 	.word	0x08008eed
 8008e8c:	08008eed 	.word	0x08008eed
 8008e90:	08008eed 	.word	0x08008eed
 8008e94:	08008eed 	.word	0x08008eed
 8008e98:	08008eed 	.word	0x08008eed
 8008e9c:	08008eed 	.word	0x08008eed
 8008ea0:	08008eed 	.word	0x08008eed
 8008ea4:	08008f01 	.word	0x08008f01
 8008ea8:	08008eed 	.word	0x08008eed
 8008eac:	08008eed 	.word	0x08008eed
 8008eb0:	08008eed 	.word	0x08008eed
 8008eb4:	08008eed 	.word	0x08008eed
 8008eb8:	08008eed 	.word	0x08008eed
 8008ebc:	08008eed 	.word	0x08008eed
 8008ec0:	08008eed 	.word	0x08008eed
 8008ec4:	08008f01 	.word	0x08008f01
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	3304      	adds	r3, #4
 8008ecc:	2101      	movs	r1, #1
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f000 fdfa 	bl	8009ac8 <RCCEx_PLL2_Config>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008ed8:	e013      	b.n	8008f02 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	3324      	adds	r3, #36	; 0x24
 8008ede:	2101      	movs	r1, #1
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	f000 fea3 	bl	8009c2c <RCCEx_PLL3_Config>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008eea:	e00a      	b.n	8008f02 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008eec:	2301      	movs	r3, #1
 8008eee:	75fb      	strb	r3, [r7, #23]
      break;
 8008ef0:	e007      	b.n	8008f02 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8008ef2:	bf00      	nop
 8008ef4:	58024400 	.word	0x58024400
 8008ef8:	58024800 	.word	0x58024800
 8008efc:	00ffffcf 	.word	0x00ffffcf
      break;
 8008f00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f02:	7dfb      	ldrb	r3, [r7, #23]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d109      	bne.n	8008f1c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008f08:	4b96      	ldr	r3, [pc, #600]	; (8009164 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f0c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f14:	4993      	ldr	r1, [pc, #588]	; (8009164 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008f16:	4313      	orrs	r3, r2
 8008f18:	654b      	str	r3, [r1, #84]	; 0x54
 8008f1a:	e001      	b.n	8008f20 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f1c:	7dfb      	ldrb	r3, [r7, #23]
 8008f1e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f003 0302 	and.w	r3, r3, #2
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d038      	beq.n	8008f9e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f30:	2b05      	cmp	r3, #5
 8008f32:	d821      	bhi.n	8008f78 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8008f34:	a201      	add	r2, pc, #4	; (adr r2, 8008f3c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8008f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f3a:	bf00      	nop
 8008f3c:	08008f7f 	.word	0x08008f7f
 8008f40:	08008f55 	.word	0x08008f55
 8008f44:	08008f67 	.word	0x08008f67
 8008f48:	08008f7f 	.word	0x08008f7f
 8008f4c:	08008f7f 	.word	0x08008f7f
 8008f50:	08008f7f 	.word	0x08008f7f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	3304      	adds	r3, #4
 8008f58:	2101      	movs	r1, #1
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	f000 fdb4 	bl	8009ac8 <RCCEx_PLL2_Config>
 8008f60:	4603      	mov	r3, r0
 8008f62:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008f64:	e00c      	b.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	3324      	adds	r3, #36	; 0x24
 8008f6a:	2101      	movs	r1, #1
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f000 fe5d 	bl	8009c2c <RCCEx_PLL3_Config>
 8008f72:	4603      	mov	r3, r0
 8008f74:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008f76:	e003      	b.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f78:	2301      	movs	r3, #1
 8008f7a:	75fb      	strb	r3, [r7, #23]
      break;
 8008f7c:	e000      	b.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8008f7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f80:	7dfb      	ldrb	r3, [r7, #23]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d109      	bne.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008f86:	4b77      	ldr	r3, [pc, #476]	; (8009164 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f8a:	f023 0207 	bic.w	r2, r3, #7
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f92:	4974      	ldr	r1, [pc, #464]	; (8009164 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008f94:	4313      	orrs	r3, r2
 8008f96:	654b      	str	r3, [r1, #84]	; 0x54
 8008f98:	e001      	b.n	8008f9e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f9a:	7dfb      	ldrb	r3, [r7, #23]
 8008f9c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f003 0304 	and.w	r3, r3, #4
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d03a      	beq.n	8009020 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fb0:	2b05      	cmp	r3, #5
 8008fb2:	d821      	bhi.n	8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8008fb4:	a201      	add	r2, pc, #4	; (adr r2, 8008fbc <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8008fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fba:	bf00      	nop
 8008fbc:	08008fff 	.word	0x08008fff
 8008fc0:	08008fd5 	.word	0x08008fd5
 8008fc4:	08008fe7 	.word	0x08008fe7
 8008fc8:	08008fff 	.word	0x08008fff
 8008fcc:	08008fff 	.word	0x08008fff
 8008fd0:	08008fff 	.word	0x08008fff
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	3304      	adds	r3, #4
 8008fd8:	2101      	movs	r1, #1
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f000 fd74 	bl	8009ac8 <RCCEx_PLL2_Config>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008fe4:	e00c      	b.n	8009000 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	3324      	adds	r3, #36	; 0x24
 8008fea:	2101      	movs	r1, #1
 8008fec:	4618      	mov	r0, r3
 8008fee:	f000 fe1d 	bl	8009c2c <RCCEx_PLL3_Config>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008ff6:	e003      	b.n	8009000 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	75fb      	strb	r3, [r7, #23]
      break;
 8008ffc:	e000      	b.n	8009000 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8008ffe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009000:	7dfb      	ldrb	r3, [r7, #23]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d10a      	bne.n	800901c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009006:	4b57      	ldr	r3, [pc, #348]	; (8009164 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800900a:	f023 0207 	bic.w	r2, r3, #7
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009014:	4953      	ldr	r1, [pc, #332]	; (8009164 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009016:	4313      	orrs	r3, r2
 8009018:	658b      	str	r3, [r1, #88]	; 0x58
 800901a:	e001      	b.n	8009020 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800901c:	7dfb      	ldrb	r3, [r7, #23]
 800901e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f003 0320 	and.w	r3, r3, #32
 8009028:	2b00      	cmp	r3, #0
 800902a:	d04b      	beq.n	80090c4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009032:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009036:	d02e      	beq.n	8009096 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8009038:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800903c:	d828      	bhi.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800903e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009042:	d02a      	beq.n	800909a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8009044:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009048:	d822      	bhi.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800904a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800904e:	d026      	beq.n	800909e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8009050:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009054:	d81c      	bhi.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009056:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800905a:	d010      	beq.n	800907e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800905c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009060:	d816      	bhi.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009062:	2b00      	cmp	r3, #0
 8009064:	d01d      	beq.n	80090a2 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8009066:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800906a:	d111      	bne.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	3304      	adds	r3, #4
 8009070:	2100      	movs	r1, #0
 8009072:	4618      	mov	r0, r3
 8009074:	f000 fd28 	bl	8009ac8 <RCCEx_PLL2_Config>
 8009078:	4603      	mov	r3, r0
 800907a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800907c:	e012      	b.n	80090a4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	3324      	adds	r3, #36	; 0x24
 8009082:	2102      	movs	r1, #2
 8009084:	4618      	mov	r0, r3
 8009086:	f000 fdd1 	bl	8009c2c <RCCEx_PLL3_Config>
 800908a:	4603      	mov	r3, r0
 800908c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800908e:	e009      	b.n	80090a4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009090:	2301      	movs	r3, #1
 8009092:	75fb      	strb	r3, [r7, #23]
      break;
 8009094:	e006      	b.n	80090a4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009096:	bf00      	nop
 8009098:	e004      	b.n	80090a4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800909a:	bf00      	nop
 800909c:	e002      	b.n	80090a4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800909e:	bf00      	nop
 80090a0:	e000      	b.n	80090a4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80090a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80090a4:	7dfb      	ldrb	r3, [r7, #23]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d10a      	bne.n	80090c0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80090aa:	4b2e      	ldr	r3, [pc, #184]	; (8009164 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80090ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090ae:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090b8:	492a      	ldr	r1, [pc, #168]	; (8009164 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80090ba:	4313      	orrs	r3, r2
 80090bc:	654b      	str	r3, [r1, #84]	; 0x54
 80090be:	e001      	b.n	80090c4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090c0:	7dfb      	ldrb	r3, [r7, #23]
 80090c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d04d      	beq.n	800916c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80090d6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80090da:	d02e      	beq.n	800913a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80090dc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80090e0:	d828      	bhi.n	8009134 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80090e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090e6:	d02a      	beq.n	800913e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80090e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090ec:	d822      	bhi.n	8009134 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80090ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80090f2:	d026      	beq.n	8009142 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80090f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80090f8:	d81c      	bhi.n	8009134 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80090fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80090fe:	d010      	beq.n	8009122 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8009100:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009104:	d816      	bhi.n	8009134 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009106:	2b00      	cmp	r3, #0
 8009108:	d01d      	beq.n	8009146 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800910a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800910e:	d111      	bne.n	8009134 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	3304      	adds	r3, #4
 8009114:	2100      	movs	r1, #0
 8009116:	4618      	mov	r0, r3
 8009118:	f000 fcd6 	bl	8009ac8 <RCCEx_PLL2_Config>
 800911c:	4603      	mov	r3, r0
 800911e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009120:	e012      	b.n	8009148 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	3324      	adds	r3, #36	; 0x24
 8009126:	2102      	movs	r1, #2
 8009128:	4618      	mov	r0, r3
 800912a:	f000 fd7f 	bl	8009c2c <RCCEx_PLL3_Config>
 800912e:	4603      	mov	r3, r0
 8009130:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009132:	e009      	b.n	8009148 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009134:	2301      	movs	r3, #1
 8009136:	75fb      	strb	r3, [r7, #23]
      break;
 8009138:	e006      	b.n	8009148 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800913a:	bf00      	nop
 800913c:	e004      	b.n	8009148 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800913e:	bf00      	nop
 8009140:	e002      	b.n	8009148 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009142:	bf00      	nop
 8009144:	e000      	b.n	8009148 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009146:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009148:	7dfb      	ldrb	r3, [r7, #23]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d10c      	bne.n	8009168 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800914e:	4b05      	ldr	r3, [pc, #20]	; (8009164 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009152:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800915c:	4901      	ldr	r1, [pc, #4]	; (8009164 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800915e:	4313      	orrs	r3, r2
 8009160:	658b      	str	r3, [r1, #88]	; 0x58
 8009162:	e003      	b.n	800916c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8009164:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009168:	7dfb      	ldrb	r3, [r7, #23]
 800916a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009174:	2b00      	cmp	r3, #0
 8009176:	d04b      	beq.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800917e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009182:	d02e      	beq.n	80091e2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8009184:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009188:	d828      	bhi.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800918a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800918e:	d02a      	beq.n	80091e6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8009190:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009194:	d822      	bhi.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009196:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800919a:	d026      	beq.n	80091ea <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800919c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80091a0:	d81c      	bhi.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80091a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80091a6:	d010      	beq.n	80091ca <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80091a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80091ac:	d816      	bhi.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d01d      	beq.n	80091ee <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80091b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80091b6:	d111      	bne.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	3304      	adds	r3, #4
 80091bc:	2100      	movs	r1, #0
 80091be:	4618      	mov	r0, r3
 80091c0:	f000 fc82 	bl	8009ac8 <RCCEx_PLL2_Config>
 80091c4:	4603      	mov	r3, r0
 80091c6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80091c8:	e012      	b.n	80091f0 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	3324      	adds	r3, #36	; 0x24
 80091ce:	2102      	movs	r1, #2
 80091d0:	4618      	mov	r0, r3
 80091d2:	f000 fd2b 	bl	8009c2c <RCCEx_PLL3_Config>
 80091d6:	4603      	mov	r3, r0
 80091d8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80091da:	e009      	b.n	80091f0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80091dc:	2301      	movs	r3, #1
 80091de:	75fb      	strb	r3, [r7, #23]
      break;
 80091e0:	e006      	b.n	80091f0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80091e2:	bf00      	nop
 80091e4:	e004      	b.n	80091f0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80091e6:	bf00      	nop
 80091e8:	e002      	b.n	80091f0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80091ea:	bf00      	nop
 80091ec:	e000      	b.n	80091f0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80091ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80091f0:	7dfb      	ldrb	r3, [r7, #23]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d10a      	bne.n	800920c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80091f6:	4b9d      	ldr	r3, [pc, #628]	; (800946c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80091f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009204:	4999      	ldr	r1, [pc, #612]	; (800946c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009206:	4313      	orrs	r3, r2
 8009208:	658b      	str	r3, [r1, #88]	; 0x58
 800920a:	e001      	b.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800920c:	7dfb      	ldrb	r3, [r7, #23]
 800920e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f003 0308 	and.w	r3, r3, #8
 8009218:	2b00      	cmp	r3, #0
 800921a:	d01a      	beq.n	8009252 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009222:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009226:	d10a      	bne.n	800923e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	3324      	adds	r3, #36	; 0x24
 800922c:	2102      	movs	r1, #2
 800922e:	4618      	mov	r0, r3
 8009230:	f000 fcfc 	bl	8009c2c <RCCEx_PLL3_Config>
 8009234:	4603      	mov	r3, r0
 8009236:	2b00      	cmp	r3, #0
 8009238:	d001      	beq.n	800923e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800923a:	2301      	movs	r3, #1
 800923c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800923e:	4b8b      	ldr	r3, [pc, #556]	; (800946c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009242:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800924c:	4987      	ldr	r1, [pc, #540]	; (800946c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800924e:	4313      	orrs	r3, r2
 8009250:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f003 0310 	and.w	r3, r3, #16
 800925a:	2b00      	cmp	r3, #0
 800925c:	d01a      	beq.n	8009294 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009264:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009268:	d10a      	bne.n	8009280 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	3324      	adds	r3, #36	; 0x24
 800926e:	2102      	movs	r1, #2
 8009270:	4618      	mov	r0, r3
 8009272:	f000 fcdb 	bl	8009c2c <RCCEx_PLL3_Config>
 8009276:	4603      	mov	r3, r0
 8009278:	2b00      	cmp	r3, #0
 800927a:	d001      	beq.n	8009280 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800927c:	2301      	movs	r3, #1
 800927e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009280:	4b7a      	ldr	r3, [pc, #488]	; (800946c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009284:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800928e:	4977      	ldr	r1, [pc, #476]	; (800946c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009290:	4313      	orrs	r3, r2
 8009292:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800929c:	2b00      	cmp	r3, #0
 800929e:	d034      	beq.n	800930a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80092a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80092aa:	d01d      	beq.n	80092e8 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80092ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80092b0:	d817      	bhi.n	80092e2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d003      	beq.n	80092be <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80092b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80092ba:	d009      	beq.n	80092d0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80092bc:	e011      	b.n	80092e2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	3304      	adds	r3, #4
 80092c2:	2100      	movs	r1, #0
 80092c4:	4618      	mov	r0, r3
 80092c6:	f000 fbff 	bl	8009ac8 <RCCEx_PLL2_Config>
 80092ca:	4603      	mov	r3, r0
 80092cc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80092ce:	e00c      	b.n	80092ea <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	3324      	adds	r3, #36	; 0x24
 80092d4:	2102      	movs	r1, #2
 80092d6:	4618      	mov	r0, r3
 80092d8:	f000 fca8 	bl	8009c2c <RCCEx_PLL3_Config>
 80092dc:	4603      	mov	r3, r0
 80092de:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80092e0:	e003      	b.n	80092ea <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80092e2:	2301      	movs	r3, #1
 80092e4:	75fb      	strb	r3, [r7, #23]
      break;
 80092e6:	e000      	b.n	80092ea <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80092e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80092ea:	7dfb      	ldrb	r3, [r7, #23]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d10a      	bne.n	8009306 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80092f0:	4b5e      	ldr	r3, [pc, #376]	; (800946c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80092f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80092fe:	495b      	ldr	r1, [pc, #364]	; (800946c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009300:	4313      	orrs	r3, r2
 8009302:	658b      	str	r3, [r1, #88]	; 0x58
 8009304:	e001      	b.n	800930a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009306:	7dfb      	ldrb	r3, [r7, #23]
 8009308:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009312:	2b00      	cmp	r3, #0
 8009314:	d033      	beq.n	800937e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800931c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009320:	d01c      	beq.n	800935c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8009322:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009326:	d816      	bhi.n	8009356 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8009328:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800932c:	d003      	beq.n	8009336 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800932e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009332:	d007      	beq.n	8009344 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8009334:	e00f      	b.n	8009356 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009336:	4b4d      	ldr	r3, [pc, #308]	; (800946c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800933a:	4a4c      	ldr	r2, [pc, #304]	; (800946c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800933c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009340:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8009342:	e00c      	b.n	800935e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	3324      	adds	r3, #36	; 0x24
 8009348:	2101      	movs	r1, #1
 800934a:	4618      	mov	r0, r3
 800934c:	f000 fc6e 	bl	8009c2c <RCCEx_PLL3_Config>
 8009350:	4603      	mov	r3, r0
 8009352:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009354:	e003      	b.n	800935e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009356:	2301      	movs	r3, #1
 8009358:	75fb      	strb	r3, [r7, #23]
      break;
 800935a:	e000      	b.n	800935e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800935c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800935e:	7dfb      	ldrb	r3, [r7, #23]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d10a      	bne.n	800937a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009364:	4b41      	ldr	r3, [pc, #260]	; (800946c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009368:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009372:	493e      	ldr	r1, [pc, #248]	; (800946c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009374:	4313      	orrs	r3, r2
 8009376:	654b      	str	r3, [r1, #84]	; 0x54
 8009378:	e001      	b.n	800937e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800937a:	7dfb      	ldrb	r3, [r7, #23]
 800937c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009386:	2b00      	cmp	r3, #0
 8009388:	d029      	beq.n	80093de <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800938e:	2b00      	cmp	r3, #0
 8009390:	d003      	beq.n	800939a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8009392:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009396:	d007      	beq.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8009398:	e00f      	b.n	80093ba <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800939a:	4b34      	ldr	r3, [pc, #208]	; (800946c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800939c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800939e:	4a33      	ldr	r2, [pc, #204]	; (800946c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80093a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80093a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80093a6:	e00b      	b.n	80093c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	3304      	adds	r3, #4
 80093ac:	2102      	movs	r1, #2
 80093ae:	4618      	mov	r0, r3
 80093b0:	f000 fb8a 	bl	8009ac8 <RCCEx_PLL2_Config>
 80093b4:	4603      	mov	r3, r0
 80093b6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80093b8:	e002      	b.n	80093c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80093ba:	2301      	movs	r3, #1
 80093bc:	75fb      	strb	r3, [r7, #23]
      break;
 80093be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80093c0:	7dfb      	ldrb	r3, [r7, #23]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d109      	bne.n	80093da <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80093c6:	4b29      	ldr	r3, [pc, #164]	; (800946c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80093c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093ca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093d2:	4926      	ldr	r1, [pc, #152]	; (800946c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80093d4:	4313      	orrs	r3, r2
 80093d6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80093d8:	e001      	b.n	80093de <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093da:	7dfb      	ldrb	r3, [r7, #23]
 80093dc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d00a      	beq.n	8009400 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	3324      	adds	r3, #36	; 0x24
 80093ee:	2102      	movs	r1, #2
 80093f0:	4618      	mov	r0, r3
 80093f2:	f000 fc1b 	bl	8009c2c <RCCEx_PLL3_Config>
 80093f6:	4603      	mov	r3, r0
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d001      	beq.n	8009400 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80093fc:	2301      	movs	r3, #1
 80093fe:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009408:	2b00      	cmp	r3, #0
 800940a:	d033      	beq.n	8009474 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009410:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009414:	d017      	beq.n	8009446 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8009416:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800941a:	d811      	bhi.n	8009440 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800941c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009420:	d013      	beq.n	800944a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8009422:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009426:	d80b      	bhi.n	8009440 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8009428:	2b00      	cmp	r3, #0
 800942a:	d010      	beq.n	800944e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800942c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009430:	d106      	bne.n	8009440 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009432:	4b0e      	ldr	r3, [pc, #56]	; (800946c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009436:	4a0d      	ldr	r2, [pc, #52]	; (800946c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009438:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800943c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800943e:	e007      	b.n	8009450 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009440:	2301      	movs	r3, #1
 8009442:	75fb      	strb	r3, [r7, #23]
      break;
 8009444:	e004      	b.n	8009450 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8009446:	bf00      	nop
 8009448:	e002      	b.n	8009450 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800944a:	bf00      	nop
 800944c:	e000      	b.n	8009450 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800944e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009450:	7dfb      	ldrb	r3, [r7, #23]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d10c      	bne.n	8009470 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009456:	4b05      	ldr	r3, [pc, #20]	; (800946c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800945a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009462:	4902      	ldr	r1, [pc, #8]	; (800946c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009464:	4313      	orrs	r3, r2
 8009466:	654b      	str	r3, [r1, #84]	; 0x54
 8009468:	e004      	b.n	8009474 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800946a:	bf00      	nop
 800946c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009470:	7dfb      	ldrb	r3, [r7, #23]
 8009472:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800947c:	2b00      	cmp	r3, #0
 800947e:	d008      	beq.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009480:	4b31      	ldr	r3, [pc, #196]	; (8009548 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009482:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009484:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800948c:	492e      	ldr	r1, [pc, #184]	; (8009548 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800948e:	4313      	orrs	r3, r2
 8009490:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800949a:	2b00      	cmp	r3, #0
 800949c:	d009      	beq.n	80094b2 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800949e:	4b2a      	ldr	r3, [pc, #168]	; (8009548 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80094a0:	691b      	ldr	r3, [r3, #16]
 80094a2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80094ac:	4926      	ldr	r1, [pc, #152]	; (8009548 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80094ae:	4313      	orrs	r3, r2
 80094b0:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d008      	beq.n	80094d0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80094be:	4b22      	ldr	r3, [pc, #136]	; (8009548 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80094c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094c2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80094ca:	491f      	ldr	r1, [pc, #124]	; (8009548 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80094cc:	4313      	orrs	r3, r2
 80094ce:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d00d      	beq.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80094dc:	4b1a      	ldr	r3, [pc, #104]	; (8009548 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80094de:	691b      	ldr	r3, [r3, #16]
 80094e0:	4a19      	ldr	r2, [pc, #100]	; (8009548 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80094e2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80094e6:	6113      	str	r3, [r2, #16]
 80094e8:	4b17      	ldr	r3, [pc, #92]	; (8009548 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80094ea:	691a      	ldr	r2, [r3, #16]
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80094f2:	4915      	ldr	r1, [pc, #84]	; (8009548 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80094f4:	4313      	orrs	r3, r2
 80094f6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	da08      	bge.n	8009512 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009500:	4b11      	ldr	r3, [pc, #68]	; (8009548 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009504:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800950c:	490e      	ldr	r1, [pc, #56]	; (8009548 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800950e:	4313      	orrs	r3, r2
 8009510:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800951a:	2b00      	cmp	r3, #0
 800951c:	d009      	beq.n	8009532 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800951e:	4b0a      	ldr	r3, [pc, #40]	; (8009548 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009522:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800952c:	4906      	ldr	r1, [pc, #24]	; (8009548 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800952e:	4313      	orrs	r3, r2
 8009530:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8009532:	7dbb      	ldrb	r3, [r7, #22]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d101      	bne.n	800953c <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8009538:	2300      	movs	r3, #0
 800953a:	e000      	b.n	800953e <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800953c:	2301      	movs	r3, #1
}
 800953e:	4618      	mov	r0, r3
 8009540:	3718      	adds	r7, #24
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}
 8009546:	bf00      	nop
 8009548:	58024400 	.word	0x58024400

0800954c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009550:	f7ff f818 	bl	8008584 <HAL_RCC_GetHCLKFreq>
 8009554:	4602      	mov	r2, r0
 8009556:	4b06      	ldr	r3, [pc, #24]	; (8009570 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009558:	6a1b      	ldr	r3, [r3, #32]
 800955a:	091b      	lsrs	r3, r3, #4
 800955c:	f003 0307 	and.w	r3, r3, #7
 8009560:	4904      	ldr	r1, [pc, #16]	; (8009574 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009562:	5ccb      	ldrb	r3, [r1, r3]
 8009564:	f003 031f 	and.w	r3, r3, #31
 8009568:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800956c:	4618      	mov	r0, r3
 800956e:	bd80      	pop	{r7, pc}
 8009570:	58024400 	.word	0x58024400
 8009574:	08013738 	.word	0x08013738

08009578 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009578:	b480      	push	{r7}
 800957a:	b089      	sub	sp, #36	; 0x24
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009580:	4ba1      	ldr	r3, [pc, #644]	; (8009808 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009584:	f003 0303 	and.w	r3, r3, #3
 8009588:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800958a:	4b9f      	ldr	r3, [pc, #636]	; (8009808 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800958c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800958e:	0b1b      	lsrs	r3, r3, #12
 8009590:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009594:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009596:	4b9c      	ldr	r3, [pc, #624]	; (8009808 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800959a:	091b      	lsrs	r3, r3, #4
 800959c:	f003 0301 	and.w	r3, r3, #1
 80095a0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80095a2:	4b99      	ldr	r3, [pc, #612]	; (8009808 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095a6:	08db      	lsrs	r3, r3, #3
 80095a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80095ac:	693a      	ldr	r2, [r7, #16]
 80095ae:	fb02 f303 	mul.w	r3, r2, r3
 80095b2:	ee07 3a90 	vmov	s15, r3
 80095b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095ba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80095be:	697b      	ldr	r3, [r7, #20]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	f000 8111 	beq.w	80097e8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80095c6:	69bb      	ldr	r3, [r7, #24]
 80095c8:	2b02      	cmp	r3, #2
 80095ca:	f000 8083 	beq.w	80096d4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80095ce:	69bb      	ldr	r3, [r7, #24]
 80095d0:	2b02      	cmp	r3, #2
 80095d2:	f200 80a1 	bhi.w	8009718 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80095d6:	69bb      	ldr	r3, [r7, #24]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d003      	beq.n	80095e4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80095dc:	69bb      	ldr	r3, [r7, #24]
 80095de:	2b01      	cmp	r3, #1
 80095e0:	d056      	beq.n	8009690 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80095e2:	e099      	b.n	8009718 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80095e4:	4b88      	ldr	r3, [pc, #544]	; (8009808 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f003 0320 	and.w	r3, r3, #32
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d02d      	beq.n	800964c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80095f0:	4b85      	ldr	r3, [pc, #532]	; (8009808 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	08db      	lsrs	r3, r3, #3
 80095f6:	f003 0303 	and.w	r3, r3, #3
 80095fa:	4a84      	ldr	r2, [pc, #528]	; (800980c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80095fc:	fa22 f303 	lsr.w	r3, r2, r3
 8009600:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	ee07 3a90 	vmov	s15, r3
 8009608:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800960c:	697b      	ldr	r3, [r7, #20]
 800960e:	ee07 3a90 	vmov	s15, r3
 8009612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009616:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800961a:	4b7b      	ldr	r3, [pc, #492]	; (8009808 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800961c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800961e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009622:	ee07 3a90 	vmov	s15, r3
 8009626:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800962a:	ed97 6a03 	vldr	s12, [r7, #12]
 800962e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009810 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009632:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009636:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800963a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800963e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009646:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800964a:	e087      	b.n	800975c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800964c:	697b      	ldr	r3, [r7, #20]
 800964e:	ee07 3a90 	vmov	s15, r3
 8009652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009656:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009814 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800965a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800965e:	4b6a      	ldr	r3, [pc, #424]	; (8009808 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009662:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009666:	ee07 3a90 	vmov	s15, r3
 800966a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800966e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009672:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009810 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009676:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800967a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800967e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009682:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009686:	ee67 7a27 	vmul.f32	s15, s14, s15
 800968a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800968e:	e065      	b.n	800975c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	ee07 3a90 	vmov	s15, r3
 8009696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800969a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009818 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800969e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096a2:	4b59      	ldr	r3, [pc, #356]	; (8009808 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80096a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096aa:	ee07 3a90 	vmov	s15, r3
 80096ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80096b6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009810 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80096ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80096d2:	e043      	b.n	800975c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	ee07 3a90 	vmov	s15, r3
 80096da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096de:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800981c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80096e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096e6:	4b48      	ldr	r3, [pc, #288]	; (8009808 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80096e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096ee:	ee07 3a90 	vmov	s15, r3
 80096f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80096fa:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009810 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80096fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009702:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009706:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800970a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800970e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009712:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009716:	e021      	b.n	800975c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009718:	697b      	ldr	r3, [r7, #20]
 800971a:	ee07 3a90 	vmov	s15, r3
 800971e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009722:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009818 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009726:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800972a:	4b37      	ldr	r3, [pc, #220]	; (8009808 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800972c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800972e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009732:	ee07 3a90 	vmov	s15, r3
 8009736:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800973a:	ed97 6a03 	vldr	s12, [r7, #12]
 800973e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009810 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009742:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009746:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800974a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800974e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009752:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009756:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800975a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800975c:	4b2a      	ldr	r3, [pc, #168]	; (8009808 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800975e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009760:	0a5b      	lsrs	r3, r3, #9
 8009762:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009766:	ee07 3a90 	vmov	s15, r3
 800976a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800976e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009772:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009776:	edd7 6a07 	vldr	s13, [r7, #28]
 800977a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800977e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009782:	ee17 2a90 	vmov	r2, s15
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800978a:	4b1f      	ldr	r3, [pc, #124]	; (8009808 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800978c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800978e:	0c1b      	lsrs	r3, r3, #16
 8009790:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009794:	ee07 3a90 	vmov	s15, r3
 8009798:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800979c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80097a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80097a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80097a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097b0:	ee17 2a90 	vmov	r2, s15
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80097b8:	4b13      	ldr	r3, [pc, #76]	; (8009808 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097bc:	0e1b      	lsrs	r3, r3, #24
 80097be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097c2:	ee07 3a90 	vmov	s15, r3
 80097c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80097ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80097d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80097d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097de:	ee17 2a90 	vmov	r2, s15
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80097e6:	e008      	b.n	80097fa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2200      	movs	r2, #0
 80097ec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2200      	movs	r2, #0
 80097f2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2200      	movs	r2, #0
 80097f8:	609a      	str	r2, [r3, #8]
}
 80097fa:	bf00      	nop
 80097fc:	3724      	adds	r7, #36	; 0x24
 80097fe:	46bd      	mov	sp, r7
 8009800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009804:	4770      	bx	lr
 8009806:	bf00      	nop
 8009808:	58024400 	.word	0x58024400
 800980c:	03d09000 	.word	0x03d09000
 8009810:	46000000 	.word	0x46000000
 8009814:	4c742400 	.word	0x4c742400
 8009818:	4a742400 	.word	0x4a742400
 800981c:	4b742400 	.word	0x4b742400

08009820 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009820:	b480      	push	{r7}
 8009822:	b089      	sub	sp, #36	; 0x24
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009828:	4ba1      	ldr	r3, [pc, #644]	; (8009ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800982a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800982c:	f003 0303 	and.w	r3, r3, #3
 8009830:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009832:	4b9f      	ldr	r3, [pc, #636]	; (8009ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009836:	0d1b      	lsrs	r3, r3, #20
 8009838:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800983c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800983e:	4b9c      	ldr	r3, [pc, #624]	; (8009ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009842:	0a1b      	lsrs	r3, r3, #8
 8009844:	f003 0301 	and.w	r3, r3, #1
 8009848:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800984a:	4b99      	ldr	r3, [pc, #612]	; (8009ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800984c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800984e:	08db      	lsrs	r3, r3, #3
 8009850:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009854:	693a      	ldr	r2, [r7, #16]
 8009856:	fb02 f303 	mul.w	r3, r2, r3
 800985a:	ee07 3a90 	vmov	s15, r3
 800985e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009862:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009866:	697b      	ldr	r3, [r7, #20]
 8009868:	2b00      	cmp	r3, #0
 800986a:	f000 8111 	beq.w	8009a90 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800986e:	69bb      	ldr	r3, [r7, #24]
 8009870:	2b02      	cmp	r3, #2
 8009872:	f000 8083 	beq.w	800997c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009876:	69bb      	ldr	r3, [r7, #24]
 8009878:	2b02      	cmp	r3, #2
 800987a:	f200 80a1 	bhi.w	80099c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800987e:	69bb      	ldr	r3, [r7, #24]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d003      	beq.n	800988c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009884:	69bb      	ldr	r3, [r7, #24]
 8009886:	2b01      	cmp	r3, #1
 8009888:	d056      	beq.n	8009938 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800988a:	e099      	b.n	80099c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800988c:	4b88      	ldr	r3, [pc, #544]	; (8009ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f003 0320 	and.w	r3, r3, #32
 8009894:	2b00      	cmp	r3, #0
 8009896:	d02d      	beq.n	80098f4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009898:	4b85      	ldr	r3, [pc, #532]	; (8009ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	08db      	lsrs	r3, r3, #3
 800989e:	f003 0303 	and.w	r3, r3, #3
 80098a2:	4a84      	ldr	r2, [pc, #528]	; (8009ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80098a4:	fa22 f303 	lsr.w	r3, r2, r3
 80098a8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80098aa:	68bb      	ldr	r3, [r7, #8]
 80098ac:	ee07 3a90 	vmov	s15, r3
 80098b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098b4:	697b      	ldr	r3, [r7, #20]
 80098b6:	ee07 3a90 	vmov	s15, r3
 80098ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098c2:	4b7b      	ldr	r3, [pc, #492]	; (8009ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098ca:	ee07 3a90 	vmov	s15, r3
 80098ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80098d6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80098da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098ee:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80098f2:	e087      	b.n	8009a04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80098f4:	697b      	ldr	r3, [r7, #20]
 80098f6:	ee07 3a90 	vmov	s15, r3
 80098fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098fe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009abc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009902:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009906:	4b6a      	ldr	r3, [pc, #424]	; (8009ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800990a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800990e:	ee07 3a90 	vmov	s15, r3
 8009912:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009916:	ed97 6a03 	vldr	s12, [r7, #12]
 800991a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800991e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009922:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009926:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800992a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800992e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009932:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009936:	e065      	b.n	8009a04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009938:	697b      	ldr	r3, [r7, #20]
 800993a:	ee07 3a90 	vmov	s15, r3
 800993e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009942:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009946:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800994a:	4b59      	ldr	r3, [pc, #356]	; (8009ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800994c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800994e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009952:	ee07 3a90 	vmov	s15, r3
 8009956:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800995a:	ed97 6a03 	vldr	s12, [r7, #12]
 800995e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009962:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009966:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800996a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800996e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009972:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009976:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800997a:	e043      	b.n	8009a04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800997c:	697b      	ldr	r3, [r7, #20]
 800997e:	ee07 3a90 	vmov	s15, r3
 8009982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009986:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800998a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800998e:	4b48      	ldr	r3, [pc, #288]	; (8009ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009992:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009996:	ee07 3a90 	vmov	s15, r3
 800999a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800999e:	ed97 6a03 	vldr	s12, [r7, #12]
 80099a2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80099a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80099be:	e021      	b.n	8009a04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80099c0:	697b      	ldr	r3, [r7, #20]
 80099c2:	ee07 3a90 	vmov	s15, r3
 80099c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099ca:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80099ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099d2:	4b37      	ldr	r3, [pc, #220]	; (8009ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80099d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099da:	ee07 3a90 	vmov	s15, r3
 80099de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80099e6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80099ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009a02:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009a04:	4b2a      	ldr	r3, [pc, #168]	; (8009ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a08:	0a5b      	lsrs	r3, r3, #9
 8009a0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a0e:	ee07 3a90 	vmov	s15, r3
 8009a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a2a:	ee17 2a90 	vmov	r2, s15
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009a32:	4b1f      	ldr	r3, [pc, #124]	; (8009ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a36:	0c1b      	lsrs	r3, r3, #16
 8009a38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a3c:	ee07 3a90 	vmov	s15, r3
 8009a40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a48:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a4c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a58:	ee17 2a90 	vmov	r2, s15
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009a60:	4b13      	ldr	r3, [pc, #76]	; (8009ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a64:	0e1b      	lsrs	r3, r3, #24
 8009a66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a6a:	ee07 3a90 	vmov	s15, r3
 8009a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a86:	ee17 2a90 	vmov	r2, s15
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009a8e:	e008      	b.n	8009aa2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2200      	movs	r2, #0
 8009a94:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2200      	movs	r2, #0
 8009a9a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	609a      	str	r2, [r3, #8]
}
 8009aa2:	bf00      	nop
 8009aa4:	3724      	adds	r7, #36	; 0x24
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aac:	4770      	bx	lr
 8009aae:	bf00      	nop
 8009ab0:	58024400 	.word	0x58024400
 8009ab4:	03d09000 	.word	0x03d09000
 8009ab8:	46000000 	.word	0x46000000
 8009abc:	4c742400 	.word	0x4c742400
 8009ac0:	4a742400 	.word	0x4a742400
 8009ac4:	4b742400 	.word	0x4b742400

08009ac8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b084      	sub	sp, #16
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
 8009ad0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009ad6:	4b53      	ldr	r3, [pc, #332]	; (8009c24 <RCCEx_PLL2_Config+0x15c>)
 8009ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ada:	f003 0303 	and.w	r3, r3, #3
 8009ade:	2b03      	cmp	r3, #3
 8009ae0:	d101      	bne.n	8009ae6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	e099      	b.n	8009c1a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009ae6:	4b4f      	ldr	r3, [pc, #316]	; (8009c24 <RCCEx_PLL2_Config+0x15c>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	4a4e      	ldr	r2, [pc, #312]	; (8009c24 <RCCEx_PLL2_Config+0x15c>)
 8009aec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009af0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009af2:	f7f8 f9f3 	bl	8001edc <HAL_GetTick>
 8009af6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009af8:	e008      	b.n	8009b0c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009afa:	f7f8 f9ef 	bl	8001edc <HAL_GetTick>
 8009afe:	4602      	mov	r2, r0
 8009b00:	68bb      	ldr	r3, [r7, #8]
 8009b02:	1ad3      	subs	r3, r2, r3
 8009b04:	2b02      	cmp	r3, #2
 8009b06:	d901      	bls.n	8009b0c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009b08:	2303      	movs	r3, #3
 8009b0a:	e086      	b.n	8009c1a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009b0c:	4b45      	ldr	r3, [pc, #276]	; (8009c24 <RCCEx_PLL2_Config+0x15c>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d1f0      	bne.n	8009afa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009b18:	4b42      	ldr	r3, [pc, #264]	; (8009c24 <RCCEx_PLL2_Config+0x15c>)
 8009b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b1c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	031b      	lsls	r3, r3, #12
 8009b26:	493f      	ldr	r1, [pc, #252]	; (8009c24 <RCCEx_PLL2_Config+0x15c>)
 8009b28:	4313      	orrs	r3, r2
 8009b2a:	628b      	str	r3, [r1, #40]	; 0x28
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	685b      	ldr	r3, [r3, #4]
 8009b30:	3b01      	subs	r3, #1
 8009b32:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	689b      	ldr	r3, [r3, #8]
 8009b3a:	3b01      	subs	r3, #1
 8009b3c:	025b      	lsls	r3, r3, #9
 8009b3e:	b29b      	uxth	r3, r3
 8009b40:	431a      	orrs	r2, r3
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	68db      	ldr	r3, [r3, #12]
 8009b46:	3b01      	subs	r3, #1
 8009b48:	041b      	lsls	r3, r3, #16
 8009b4a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009b4e:	431a      	orrs	r2, r3
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	691b      	ldr	r3, [r3, #16]
 8009b54:	3b01      	subs	r3, #1
 8009b56:	061b      	lsls	r3, r3, #24
 8009b58:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009b5c:	4931      	ldr	r1, [pc, #196]	; (8009c24 <RCCEx_PLL2_Config+0x15c>)
 8009b5e:	4313      	orrs	r3, r2
 8009b60:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009b62:	4b30      	ldr	r3, [pc, #192]	; (8009c24 <RCCEx_PLL2_Config+0x15c>)
 8009b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b66:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	695b      	ldr	r3, [r3, #20]
 8009b6e:	492d      	ldr	r1, [pc, #180]	; (8009c24 <RCCEx_PLL2_Config+0x15c>)
 8009b70:	4313      	orrs	r3, r2
 8009b72:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009b74:	4b2b      	ldr	r3, [pc, #172]	; (8009c24 <RCCEx_PLL2_Config+0x15c>)
 8009b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b78:	f023 0220 	bic.w	r2, r3, #32
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	699b      	ldr	r3, [r3, #24]
 8009b80:	4928      	ldr	r1, [pc, #160]	; (8009c24 <RCCEx_PLL2_Config+0x15c>)
 8009b82:	4313      	orrs	r3, r2
 8009b84:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009b86:	4b27      	ldr	r3, [pc, #156]	; (8009c24 <RCCEx_PLL2_Config+0x15c>)
 8009b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b8a:	4a26      	ldr	r2, [pc, #152]	; (8009c24 <RCCEx_PLL2_Config+0x15c>)
 8009b8c:	f023 0310 	bic.w	r3, r3, #16
 8009b90:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009b92:	4b24      	ldr	r3, [pc, #144]	; (8009c24 <RCCEx_PLL2_Config+0x15c>)
 8009b94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009b96:	4b24      	ldr	r3, [pc, #144]	; (8009c28 <RCCEx_PLL2_Config+0x160>)
 8009b98:	4013      	ands	r3, r2
 8009b9a:	687a      	ldr	r2, [r7, #4]
 8009b9c:	69d2      	ldr	r2, [r2, #28]
 8009b9e:	00d2      	lsls	r2, r2, #3
 8009ba0:	4920      	ldr	r1, [pc, #128]	; (8009c24 <RCCEx_PLL2_Config+0x15c>)
 8009ba2:	4313      	orrs	r3, r2
 8009ba4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009ba6:	4b1f      	ldr	r3, [pc, #124]	; (8009c24 <RCCEx_PLL2_Config+0x15c>)
 8009ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009baa:	4a1e      	ldr	r2, [pc, #120]	; (8009c24 <RCCEx_PLL2_Config+0x15c>)
 8009bac:	f043 0310 	orr.w	r3, r3, #16
 8009bb0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d106      	bne.n	8009bc6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009bb8:	4b1a      	ldr	r3, [pc, #104]	; (8009c24 <RCCEx_PLL2_Config+0x15c>)
 8009bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bbc:	4a19      	ldr	r2, [pc, #100]	; (8009c24 <RCCEx_PLL2_Config+0x15c>)
 8009bbe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009bc2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009bc4:	e00f      	b.n	8009be6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	2b01      	cmp	r3, #1
 8009bca:	d106      	bne.n	8009bda <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009bcc:	4b15      	ldr	r3, [pc, #84]	; (8009c24 <RCCEx_PLL2_Config+0x15c>)
 8009bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bd0:	4a14      	ldr	r2, [pc, #80]	; (8009c24 <RCCEx_PLL2_Config+0x15c>)
 8009bd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009bd6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009bd8:	e005      	b.n	8009be6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009bda:	4b12      	ldr	r3, [pc, #72]	; (8009c24 <RCCEx_PLL2_Config+0x15c>)
 8009bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bde:	4a11      	ldr	r2, [pc, #68]	; (8009c24 <RCCEx_PLL2_Config+0x15c>)
 8009be0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009be4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009be6:	4b0f      	ldr	r3, [pc, #60]	; (8009c24 <RCCEx_PLL2_Config+0x15c>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	4a0e      	ldr	r2, [pc, #56]	; (8009c24 <RCCEx_PLL2_Config+0x15c>)
 8009bec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009bf0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009bf2:	f7f8 f973 	bl	8001edc <HAL_GetTick>
 8009bf6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009bf8:	e008      	b.n	8009c0c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009bfa:	f7f8 f96f 	bl	8001edc <HAL_GetTick>
 8009bfe:	4602      	mov	r2, r0
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	1ad3      	subs	r3, r2, r3
 8009c04:	2b02      	cmp	r3, #2
 8009c06:	d901      	bls.n	8009c0c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009c08:	2303      	movs	r3, #3
 8009c0a:	e006      	b.n	8009c1a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009c0c:	4b05      	ldr	r3, [pc, #20]	; (8009c24 <RCCEx_PLL2_Config+0x15c>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d0f0      	beq.n	8009bfa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	3710      	adds	r7, #16
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}
 8009c22:	bf00      	nop
 8009c24:	58024400 	.word	0x58024400
 8009c28:	ffff0007 	.word	0xffff0007

08009c2c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b084      	sub	sp, #16
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
 8009c34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009c36:	2300      	movs	r3, #0
 8009c38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009c3a:	4b53      	ldr	r3, [pc, #332]	; (8009d88 <RCCEx_PLL3_Config+0x15c>)
 8009c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c3e:	f003 0303 	and.w	r3, r3, #3
 8009c42:	2b03      	cmp	r3, #3
 8009c44:	d101      	bne.n	8009c4a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009c46:	2301      	movs	r3, #1
 8009c48:	e099      	b.n	8009d7e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009c4a:	4b4f      	ldr	r3, [pc, #316]	; (8009d88 <RCCEx_PLL3_Config+0x15c>)
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	4a4e      	ldr	r2, [pc, #312]	; (8009d88 <RCCEx_PLL3_Config+0x15c>)
 8009c50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009c54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009c56:	f7f8 f941 	bl	8001edc <HAL_GetTick>
 8009c5a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009c5c:	e008      	b.n	8009c70 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009c5e:	f7f8 f93d 	bl	8001edc <HAL_GetTick>
 8009c62:	4602      	mov	r2, r0
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	1ad3      	subs	r3, r2, r3
 8009c68:	2b02      	cmp	r3, #2
 8009c6a:	d901      	bls.n	8009c70 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009c6c:	2303      	movs	r3, #3
 8009c6e:	e086      	b.n	8009d7e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009c70:	4b45      	ldr	r3, [pc, #276]	; (8009d88 <RCCEx_PLL3_Config+0x15c>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d1f0      	bne.n	8009c5e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009c7c:	4b42      	ldr	r3, [pc, #264]	; (8009d88 <RCCEx_PLL3_Config+0x15c>)
 8009c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c80:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	051b      	lsls	r3, r3, #20
 8009c8a:	493f      	ldr	r1, [pc, #252]	; (8009d88 <RCCEx_PLL3_Config+0x15c>)
 8009c8c:	4313      	orrs	r3, r2
 8009c8e:	628b      	str	r3, [r1, #40]	; 0x28
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	685b      	ldr	r3, [r3, #4]
 8009c94:	3b01      	subs	r3, #1
 8009c96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	689b      	ldr	r3, [r3, #8]
 8009c9e:	3b01      	subs	r3, #1
 8009ca0:	025b      	lsls	r3, r3, #9
 8009ca2:	b29b      	uxth	r3, r3
 8009ca4:	431a      	orrs	r2, r3
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	68db      	ldr	r3, [r3, #12]
 8009caa:	3b01      	subs	r3, #1
 8009cac:	041b      	lsls	r3, r3, #16
 8009cae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009cb2:	431a      	orrs	r2, r3
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	691b      	ldr	r3, [r3, #16]
 8009cb8:	3b01      	subs	r3, #1
 8009cba:	061b      	lsls	r3, r3, #24
 8009cbc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009cc0:	4931      	ldr	r1, [pc, #196]	; (8009d88 <RCCEx_PLL3_Config+0x15c>)
 8009cc2:	4313      	orrs	r3, r2
 8009cc4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009cc6:	4b30      	ldr	r3, [pc, #192]	; (8009d88 <RCCEx_PLL3_Config+0x15c>)
 8009cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	695b      	ldr	r3, [r3, #20]
 8009cd2:	492d      	ldr	r1, [pc, #180]	; (8009d88 <RCCEx_PLL3_Config+0x15c>)
 8009cd4:	4313      	orrs	r3, r2
 8009cd6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009cd8:	4b2b      	ldr	r3, [pc, #172]	; (8009d88 <RCCEx_PLL3_Config+0x15c>)
 8009cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cdc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	699b      	ldr	r3, [r3, #24]
 8009ce4:	4928      	ldr	r1, [pc, #160]	; (8009d88 <RCCEx_PLL3_Config+0x15c>)
 8009ce6:	4313      	orrs	r3, r2
 8009ce8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009cea:	4b27      	ldr	r3, [pc, #156]	; (8009d88 <RCCEx_PLL3_Config+0x15c>)
 8009cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cee:	4a26      	ldr	r2, [pc, #152]	; (8009d88 <RCCEx_PLL3_Config+0x15c>)
 8009cf0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009cf4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009cf6:	4b24      	ldr	r3, [pc, #144]	; (8009d88 <RCCEx_PLL3_Config+0x15c>)
 8009cf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009cfa:	4b24      	ldr	r3, [pc, #144]	; (8009d8c <RCCEx_PLL3_Config+0x160>)
 8009cfc:	4013      	ands	r3, r2
 8009cfe:	687a      	ldr	r2, [r7, #4]
 8009d00:	69d2      	ldr	r2, [r2, #28]
 8009d02:	00d2      	lsls	r2, r2, #3
 8009d04:	4920      	ldr	r1, [pc, #128]	; (8009d88 <RCCEx_PLL3_Config+0x15c>)
 8009d06:	4313      	orrs	r3, r2
 8009d08:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009d0a:	4b1f      	ldr	r3, [pc, #124]	; (8009d88 <RCCEx_PLL3_Config+0x15c>)
 8009d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d0e:	4a1e      	ldr	r2, [pc, #120]	; (8009d88 <RCCEx_PLL3_Config+0x15c>)
 8009d10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d14:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d106      	bne.n	8009d2a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009d1c:	4b1a      	ldr	r3, [pc, #104]	; (8009d88 <RCCEx_PLL3_Config+0x15c>)
 8009d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d20:	4a19      	ldr	r2, [pc, #100]	; (8009d88 <RCCEx_PLL3_Config+0x15c>)
 8009d22:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009d26:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009d28:	e00f      	b.n	8009d4a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	2b01      	cmp	r3, #1
 8009d2e:	d106      	bne.n	8009d3e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009d30:	4b15      	ldr	r3, [pc, #84]	; (8009d88 <RCCEx_PLL3_Config+0x15c>)
 8009d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d34:	4a14      	ldr	r2, [pc, #80]	; (8009d88 <RCCEx_PLL3_Config+0x15c>)
 8009d36:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009d3a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009d3c:	e005      	b.n	8009d4a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009d3e:	4b12      	ldr	r3, [pc, #72]	; (8009d88 <RCCEx_PLL3_Config+0x15c>)
 8009d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d42:	4a11      	ldr	r2, [pc, #68]	; (8009d88 <RCCEx_PLL3_Config+0x15c>)
 8009d44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009d48:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009d4a:	4b0f      	ldr	r3, [pc, #60]	; (8009d88 <RCCEx_PLL3_Config+0x15c>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	4a0e      	ldr	r2, [pc, #56]	; (8009d88 <RCCEx_PLL3_Config+0x15c>)
 8009d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009d56:	f7f8 f8c1 	bl	8001edc <HAL_GetTick>
 8009d5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009d5c:	e008      	b.n	8009d70 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009d5e:	f7f8 f8bd 	bl	8001edc <HAL_GetTick>
 8009d62:	4602      	mov	r2, r0
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	1ad3      	subs	r3, r2, r3
 8009d68:	2b02      	cmp	r3, #2
 8009d6a:	d901      	bls.n	8009d70 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009d6c:	2303      	movs	r3, #3
 8009d6e:	e006      	b.n	8009d7e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009d70:	4b05      	ldr	r3, [pc, #20]	; (8009d88 <RCCEx_PLL3_Config+0x15c>)
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d0f0      	beq.n	8009d5e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	3710      	adds	r7, #16
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}
 8009d86:	bf00      	nop
 8009d88:	58024400 	.word	0x58024400
 8009d8c:	ffff0007 	.word	0xffff0007

08009d90 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b084      	sub	sp, #16
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d9c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009da4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d008      	beq.n	8009dbe <HAL_SD_IRQHandler+0x2e>
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	f003 0308 	and.w	r3, r3, #8
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d003      	beq.n	8009dbe <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f000 f9ac 	bl	800a114 <SD_Read_IT>
 8009dbc:	e19a      	b.n	800a0f4 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	f000 80ac 	beq.w	8009f26 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009dd6:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681a      	ldr	r2, [r3, #0]
 8009de2:	4b59      	ldr	r3, [pc, #356]	; (8009f48 <HAL_SD_IRQHandler+0x1b8>)
 8009de4:	400b      	ands	r3, r1
 8009de6:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8009df6:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	68da      	ldr	r2, [r3, #12]
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e06:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	f003 0308 	and.w	r3, r3, #8
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d038      	beq.n	8009e84 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	f003 0302 	and.w	r3, r3, #2
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d104      	bne.n	8009e26 <HAL_SD_IRQHandler+0x96>
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	f003 0320 	and.w	r3, r3, #32
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d011      	beq.n	8009e4a <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f003 f942 	bl	800d0b4 <SDMMC_CmdStopTransfer>
 8009e30:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d008      	beq.n	8009e4a <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	431a      	orrs	r2, r3
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	f000 f95b 	bl	800a100 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	4a3f      	ldr	r2, [pc, #252]	; (8009f4c <HAL_SD_IRQHandler+0x1bc>)
 8009e50:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2201      	movs	r2, #1
 8009e56:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	f003 0301 	and.w	r3, r3, #1
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d104      	bne.n	8009e74 <HAL_SD_IRQHandler+0xe4>
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	f003 0302 	and.w	r3, r3, #2
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d003      	beq.n	8009e7c <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8009e74:	6878      	ldr	r0, [r7, #4]
 8009e76:	f004 fdc7 	bl	800ea08 <HAL_SD_RxCpltCallback>
 8009e7a:	e13b      	b.n	800a0f4 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f004 fdb9 	bl	800e9f4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009e82:	e137      	b.n	800a0f4 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	f000 8132 	beq.w	800a0f4 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	2200      	movs	r2, #0
 8009e96:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	f003 0302 	and.w	r3, r3, #2
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d104      	bne.n	8009ebc <HAL_SD_IRQHandler+0x12c>
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	f003 0320 	and.w	r3, r3, #32
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d011      	beq.n	8009ee0 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	f003 f8f7 	bl	800d0b4 <SDMMC_CmdStopTransfer>
 8009ec6:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d008      	beq.n	8009ee0 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	431a      	orrs	r2, r3
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f000 f910 	bl	800a100 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2201      	movs	r2, #1
 8009ee4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2200      	movs	r2, #0
 8009eec:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	f003 0310 	and.w	r3, r3, #16
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d104      	bne.n	8009f02 <HAL_SD_IRQHandler+0x172>
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	f003 0320 	and.w	r3, r3, #32
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d002      	beq.n	8009f08 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f004 fd76 	bl	800e9f4 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	f003 0301 	and.w	r3, r3, #1
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d105      	bne.n	8009f1e <HAL_SD_IRQHandler+0x18e>
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	f003 0302 	and.w	r3, r3, #2
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	f000 80eb 	beq.w	800a0f4 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f004 fd72 	bl	800ea08 <HAL_SD_RxCpltCallback>
}
 8009f24:	e0e6      	b.n	800a0f4 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d00d      	beq.n	8009f50 <HAL_SD_IRQHandler+0x1c0>
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	f003 0308 	and.w	r3, r3, #8
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d008      	beq.n	8009f50 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f000 f92e 	bl	800a1a0 <SD_Write_IT>
 8009f44:	e0d6      	b.n	800a0f4 <HAL_SD_IRQHandler+0x364>
 8009f46:	bf00      	nop
 8009f48:	ffff3ec5 	.word	0xffff3ec5
 8009f4c:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f56:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	f000 809d 	beq.w	800a09a <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f66:	f003 0302 	and.w	r3, r3, #2
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d005      	beq.n	8009f7a <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f72:	f043 0202 	orr.w	r2, r3, #2
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f80:	f003 0308 	and.w	r3, r3, #8
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d005      	beq.n	8009f94 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f8c:	f043 0208 	orr.w	r2, r3, #8
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f9a:	f003 0320 	and.w	r3, r3, #32
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d005      	beq.n	8009fae <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fa6:	f043 0220 	orr.w	r2, r3, #32
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fb4:	f003 0310 	and.w	r3, r3, #16
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d005      	beq.n	8009fc8 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fc0:	f043 0210 	orr.w	r2, r3, #16
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	4a4b      	ldr	r2, [pc, #300]	; (800a0fc <HAL_SD_IRQHandler+0x36c>)
 8009fce:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8009fde:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	68da      	ldr	r2, [r3, #12]
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009fee:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009ffe:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	68da      	ldr	r2, [r3, #12]
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a00e:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	4618      	mov	r0, r3
 800a016:	f003 f84d 	bl	800d0b4 <SDMMC_CmdStopTransfer>
 800a01a:	4602      	mov	r2, r0
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a020:	431a      	orrs	r2, r3
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	68da      	ldr	r2, [r3, #12]
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a034:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a03e:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	f003 0308 	and.w	r3, r3, #8
 800a046:	2b00      	cmp	r3, #0
 800a048:	d00a      	beq.n	800a060 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2201      	movs	r2, #1
 800a04e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2200      	movs	r2, #0
 800a056:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800a058:	6878      	ldr	r0, [r7, #4]
 800a05a:	f000 f851 	bl	800a100 <HAL_SD_ErrorCallback>
}
 800a05e:	e049      	b.n	800a0f4 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a066:	2b00      	cmp	r3, #0
 800a068:	d044      	beq.n	800a0f4 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d040      	beq.n	800a0f4 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800a080:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	2200      	movs	r2, #0
 800a088:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2201      	movs	r2, #1
 800a08e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f000 f834 	bl	800a100 <HAL_SD_ErrorCallback>
}
 800a098:	e02c      	b.n	800a0f4 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d025      	beq.n	800a0f4 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0b0:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0b8:	f003 0304 	and.w	r3, r3, #4
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d10c      	bne.n	800a0da <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	f003 0320 	and.w	r3, r3, #32
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d003      	beq.n	800a0d2 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f000 f8d0 	bl	800a270 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800a0d0:	e010      	b.n	800a0f4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f000 f8b8 	bl	800a248 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800a0d8:	e00c      	b.n	800a0f4 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	f003 0320 	and.w	r3, r3, #32
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d003      	beq.n	800a0ec <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800a0e4:	6878      	ldr	r0, [r7, #4]
 800a0e6:	f000 f8b9 	bl	800a25c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800a0ea:	e003      	b.n	800a0f4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	f000 f8a1 	bl	800a234 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800a0f2:	e7ff      	b.n	800a0f4 <HAL_SD_IRQHandler+0x364>
 800a0f4:	bf00      	nop
 800a0f6:	3710      	adds	r7, #16
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	bd80      	pop	{r7, pc}
 800a0fc:	18000f3a 	.word	0x18000f3a

0800a100 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800a100:	b480      	push	{r7}
 800a102:	b083      	sub	sp, #12
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800a108:	bf00      	nop
 800a10a:	370c      	adds	r7, #12
 800a10c:	46bd      	mov	sp, r7
 800a10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a112:	4770      	bx	lr

0800a114 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b086      	sub	sp, #24
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a120:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a126:	2b1f      	cmp	r3, #31
 800a128:	d936      	bls.n	800a198 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800a12a:	2300      	movs	r3, #0
 800a12c:	617b      	str	r3, [r7, #20]
 800a12e:	e027      	b.n	800a180 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	4618      	mov	r0, r3
 800a136:	f002 ff55 	bl	800cfe4 <SDMMC_ReadFIFO>
 800a13a:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	b2da      	uxtb	r2, r3
 800a140:	693b      	ldr	r3, [r7, #16]
 800a142:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a144:	693b      	ldr	r3, [r7, #16]
 800a146:	3301      	adds	r3, #1
 800a148:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	0a1b      	lsrs	r3, r3, #8
 800a14e:	b2da      	uxtb	r2, r3
 800a150:	693b      	ldr	r3, [r7, #16]
 800a152:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a154:	693b      	ldr	r3, [r7, #16]
 800a156:	3301      	adds	r3, #1
 800a158:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	0c1b      	lsrs	r3, r3, #16
 800a15e:	b2da      	uxtb	r2, r3
 800a160:	693b      	ldr	r3, [r7, #16]
 800a162:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a164:	693b      	ldr	r3, [r7, #16]
 800a166:	3301      	adds	r3, #1
 800a168:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	0e1b      	lsrs	r3, r3, #24
 800a16e:	b2da      	uxtb	r2, r3
 800a170:	693b      	ldr	r3, [r7, #16]
 800a172:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	3301      	adds	r3, #1
 800a178:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800a17a:	697b      	ldr	r3, [r7, #20]
 800a17c:	3301      	adds	r3, #1
 800a17e:	617b      	str	r3, [r7, #20]
 800a180:	697b      	ldr	r3, [r7, #20]
 800a182:	2b07      	cmp	r3, #7
 800a184:	d9d4      	bls.n	800a130 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	693a      	ldr	r2, [r7, #16]
 800a18a:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a190:	f1a3 0220 	sub.w	r2, r3, #32
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800a198:	bf00      	nop
 800a19a:	3718      	adds	r7, #24
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd80      	pop	{r7, pc}

0800a1a0 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b086      	sub	sp, #24
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	69db      	ldr	r3, [r3, #28]
 800a1ac:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6a1b      	ldr	r3, [r3, #32]
 800a1b2:	2b1f      	cmp	r3, #31
 800a1b4:	d93a      	bls.n	800a22c <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	617b      	str	r3, [r7, #20]
 800a1ba:	e02b      	b.n	800a214 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800a1bc:	693b      	ldr	r3, [r7, #16]
 800a1be:	781b      	ldrb	r3, [r3, #0]
 800a1c0:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a1c2:	693b      	ldr	r3, [r7, #16]
 800a1c4:	3301      	adds	r3, #1
 800a1c6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800a1c8:	693b      	ldr	r3, [r7, #16]
 800a1ca:	781b      	ldrb	r3, [r3, #0]
 800a1cc:	021a      	lsls	r2, r3, #8
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	4313      	orrs	r3, r2
 800a1d2:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a1d4:	693b      	ldr	r3, [r7, #16]
 800a1d6:	3301      	adds	r3, #1
 800a1d8:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800a1da:	693b      	ldr	r3, [r7, #16]
 800a1dc:	781b      	ldrb	r3, [r3, #0]
 800a1de:	041a      	lsls	r2, r3, #16
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	4313      	orrs	r3, r2
 800a1e4:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a1e6:	693b      	ldr	r3, [r7, #16]
 800a1e8:	3301      	adds	r3, #1
 800a1ea:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800a1ec:	693b      	ldr	r3, [r7, #16]
 800a1ee:	781b      	ldrb	r3, [r3, #0]
 800a1f0:	061a      	lsls	r2, r3, #24
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	4313      	orrs	r3, r2
 800a1f6:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a1f8:	693b      	ldr	r3, [r7, #16]
 800a1fa:	3301      	adds	r3, #1
 800a1fc:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f107 020c 	add.w	r2, r7, #12
 800a206:	4611      	mov	r1, r2
 800a208:	4618      	mov	r0, r3
 800a20a:	f002 fef8 	bl	800cffe <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800a20e:	697b      	ldr	r3, [r7, #20]
 800a210:	3301      	adds	r3, #1
 800a212:	617b      	str	r3, [r7, #20]
 800a214:	697b      	ldr	r3, [r7, #20]
 800a216:	2b07      	cmp	r3, #7
 800a218:	d9d0      	bls.n	800a1bc <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	693a      	ldr	r2, [r7, #16]
 800a21e:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	6a1b      	ldr	r3, [r3, #32]
 800a224:	f1a3 0220 	sub.w	r2, r3, #32
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	621a      	str	r2, [r3, #32]
  }
}
 800a22c:	bf00      	nop
 800a22e:	3718      	adds	r7, #24
 800a230:	46bd      	mov	sp, r7
 800a232:	bd80      	pop	{r7, pc}

0800a234 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800a234:	b480      	push	{r7}
 800a236:	b083      	sub	sp, #12
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800a23c:	bf00      	nop
 800a23e:	370c      	adds	r7, #12
 800a240:	46bd      	mov	sp, r7
 800a242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a246:	4770      	bx	lr

0800a248 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800a248:	b480      	push	{r7}
 800a24a:	b083      	sub	sp, #12
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800a250:	bf00      	nop
 800a252:	370c      	adds	r7, #12
 800a254:	46bd      	mov	sp, r7
 800a256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25a:	4770      	bx	lr

0800a25c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800a25c:	b480      	push	{r7}
 800a25e:	b083      	sub	sp, #12
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800a264:	bf00      	nop
 800a266:	370c      	adds	r7, #12
 800a268:	46bd      	mov	sp, r7
 800a26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26e:	4770      	bx	lr

0800a270 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800a270:	b480      	push	{r7}
 800a272:	b083      	sub	sp, #12
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800a278:	bf00      	nop
 800a27a:	370c      	adds	r7, #12
 800a27c:	46bd      	mov	sp, r7
 800a27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a282:	4770      	bx	lr

0800a284 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b082      	sub	sp, #8
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d101      	bne.n	800a296 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a292:	2301      	movs	r3, #1
 800a294:	e049      	b.n	800a32a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a29c:	b2db      	uxtb	r3, r3
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d106      	bne.n	800a2b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a2aa:	6878      	ldr	r0, [r7, #4]
 800a2ac:	f7f7 fade 	bl	800186c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2202      	movs	r2, #2
 800a2b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681a      	ldr	r2, [r3, #0]
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	3304      	adds	r3, #4
 800a2c0:	4619      	mov	r1, r3
 800a2c2:	4610      	mov	r0, r2
 800a2c4:	f000 fbec 	bl	800aaa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2201      	movs	r2, #1
 800a2cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2201      	movs	r2, #1
 800a2d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2201      	movs	r2, #1
 800a2dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2201      	movs	r2, #1
 800a2e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2201      	movs	r2, #1
 800a2ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2201      	movs	r2, #1
 800a2f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2201      	movs	r2, #1
 800a2fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2201      	movs	r2, #1
 800a304:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2201      	movs	r2, #1
 800a30c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2201      	movs	r2, #1
 800a314:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2201      	movs	r2, #1
 800a31c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2201      	movs	r2, #1
 800a324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a328:	2300      	movs	r3, #0
}
 800a32a:	4618      	mov	r0, r3
 800a32c:	3708      	adds	r7, #8
 800a32e:	46bd      	mov	sp, r7
 800a330:	bd80      	pop	{r7, pc}

0800a332 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a332:	b580      	push	{r7, lr}
 800a334:	b082      	sub	sp, #8
 800a336:	af00      	add	r7, sp, #0
 800a338:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d101      	bne.n	800a344 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a340:	2301      	movs	r3, #1
 800a342:	e049      	b.n	800a3d8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a34a:	b2db      	uxtb	r3, r3
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d106      	bne.n	800a35e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2200      	movs	r2, #0
 800a354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a358:	6878      	ldr	r0, [r7, #4]
 800a35a:	f000 f841 	bl	800a3e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2202      	movs	r2, #2
 800a362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681a      	ldr	r2, [r3, #0]
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	3304      	adds	r3, #4
 800a36e:	4619      	mov	r1, r3
 800a370:	4610      	mov	r0, r2
 800a372:	f000 fb95 	bl	800aaa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2201      	movs	r2, #1
 800a37a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2201      	movs	r2, #1
 800a382:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2201      	movs	r2, #1
 800a38a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	2201      	movs	r2, #1
 800a392:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	2201      	movs	r2, #1
 800a39a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2201      	movs	r2, #1
 800a3a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2201      	movs	r2, #1
 800a3aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2201      	movs	r2, #1
 800a3b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	2201      	movs	r2, #1
 800a3ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2201      	movs	r2, #1
 800a3c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2201      	movs	r2, #1
 800a3ca:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2201      	movs	r2, #1
 800a3d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a3d6:	2300      	movs	r3, #0
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	3708      	adds	r7, #8
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bd80      	pop	{r7, pc}

0800a3e0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a3e0:	b480      	push	{r7}
 800a3e2:	b083      	sub	sp, #12
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a3e8:	bf00      	nop
 800a3ea:	370c      	adds	r7, #12
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f2:	4770      	bx	lr

0800a3f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b082      	sub	sp, #8
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	691b      	ldr	r3, [r3, #16]
 800a402:	f003 0302 	and.w	r3, r3, #2
 800a406:	2b02      	cmp	r3, #2
 800a408:	d122      	bne.n	800a450 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	68db      	ldr	r3, [r3, #12]
 800a410:	f003 0302 	and.w	r3, r3, #2
 800a414:	2b02      	cmp	r3, #2
 800a416:	d11b      	bne.n	800a450 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	f06f 0202 	mvn.w	r2, #2
 800a420:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2201      	movs	r2, #1
 800a426:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	699b      	ldr	r3, [r3, #24]
 800a42e:	f003 0303 	and.w	r3, r3, #3
 800a432:	2b00      	cmp	r3, #0
 800a434:	d003      	beq.n	800a43e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	f000 fb14 	bl	800aa64 <HAL_TIM_IC_CaptureCallback>
 800a43c:	e005      	b.n	800a44a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	f000 fb06 	bl	800aa50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f000 fb17 	bl	800aa78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2200      	movs	r2, #0
 800a44e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	691b      	ldr	r3, [r3, #16]
 800a456:	f003 0304 	and.w	r3, r3, #4
 800a45a:	2b04      	cmp	r3, #4
 800a45c:	d122      	bne.n	800a4a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	68db      	ldr	r3, [r3, #12]
 800a464:	f003 0304 	and.w	r3, r3, #4
 800a468:	2b04      	cmp	r3, #4
 800a46a:	d11b      	bne.n	800a4a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	f06f 0204 	mvn.w	r2, #4
 800a474:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	2202      	movs	r2, #2
 800a47a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	699b      	ldr	r3, [r3, #24]
 800a482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a486:	2b00      	cmp	r3, #0
 800a488:	d003      	beq.n	800a492 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f000 faea 	bl	800aa64 <HAL_TIM_IC_CaptureCallback>
 800a490:	e005      	b.n	800a49e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a492:	6878      	ldr	r0, [r7, #4]
 800a494:	f000 fadc 	bl	800aa50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f000 faed 	bl	800aa78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	691b      	ldr	r3, [r3, #16]
 800a4aa:	f003 0308 	and.w	r3, r3, #8
 800a4ae:	2b08      	cmp	r3, #8
 800a4b0:	d122      	bne.n	800a4f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	68db      	ldr	r3, [r3, #12]
 800a4b8:	f003 0308 	and.w	r3, r3, #8
 800a4bc:	2b08      	cmp	r3, #8
 800a4be:	d11b      	bne.n	800a4f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	f06f 0208 	mvn.w	r2, #8
 800a4c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2204      	movs	r2, #4
 800a4ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	69db      	ldr	r3, [r3, #28]
 800a4d6:	f003 0303 	and.w	r3, r3, #3
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d003      	beq.n	800a4e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	f000 fac0 	bl	800aa64 <HAL_TIM_IC_CaptureCallback>
 800a4e4:	e005      	b.n	800a4f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	f000 fab2 	bl	800aa50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a4ec:	6878      	ldr	r0, [r7, #4]
 800a4ee:	f000 fac3 	bl	800aa78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	691b      	ldr	r3, [r3, #16]
 800a4fe:	f003 0310 	and.w	r3, r3, #16
 800a502:	2b10      	cmp	r3, #16
 800a504:	d122      	bne.n	800a54c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	68db      	ldr	r3, [r3, #12]
 800a50c:	f003 0310 	and.w	r3, r3, #16
 800a510:	2b10      	cmp	r3, #16
 800a512:	d11b      	bne.n	800a54c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	f06f 0210 	mvn.w	r2, #16
 800a51c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2208      	movs	r2, #8
 800a522:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	69db      	ldr	r3, [r3, #28]
 800a52a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d003      	beq.n	800a53a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f000 fa96 	bl	800aa64 <HAL_TIM_IC_CaptureCallback>
 800a538:	e005      	b.n	800a546 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	f000 fa88 	bl	800aa50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a540:	6878      	ldr	r0, [r7, #4]
 800a542:	f000 fa99 	bl	800aa78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2200      	movs	r2, #0
 800a54a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	691b      	ldr	r3, [r3, #16]
 800a552:	f003 0301 	and.w	r3, r3, #1
 800a556:	2b01      	cmp	r3, #1
 800a558:	d10e      	bne.n	800a578 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	68db      	ldr	r3, [r3, #12]
 800a560:	f003 0301 	and.w	r3, r3, #1
 800a564:	2b01      	cmp	r3, #1
 800a566:	d107      	bne.n	800a578 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f06f 0201 	mvn.w	r2, #1
 800a570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	f000 fa62 	bl	800aa3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	691b      	ldr	r3, [r3, #16]
 800a57e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a582:	2b80      	cmp	r3, #128	; 0x80
 800a584:	d10e      	bne.n	800a5a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	68db      	ldr	r3, [r3, #12]
 800a58c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a590:	2b80      	cmp	r3, #128	; 0x80
 800a592:	d107      	bne.n	800a5a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a59c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	f000 ff94 	bl	800b4cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	691b      	ldr	r3, [r3, #16]
 800a5aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5b2:	d10e      	bne.n	800a5d2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	68db      	ldr	r3, [r3, #12]
 800a5ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5be:	2b80      	cmp	r3, #128	; 0x80
 800a5c0:	d107      	bne.n	800a5d2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a5ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	f000 ff87 	bl	800b4e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	691b      	ldr	r3, [r3, #16]
 800a5d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5dc:	2b40      	cmp	r3, #64	; 0x40
 800a5de:	d10e      	bne.n	800a5fe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	68db      	ldr	r3, [r3, #12]
 800a5e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5ea:	2b40      	cmp	r3, #64	; 0x40
 800a5ec:	d107      	bne.n	800a5fe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a5f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a5f8:	6878      	ldr	r0, [r7, #4]
 800a5fa:	f000 fa47 	bl	800aa8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	691b      	ldr	r3, [r3, #16]
 800a604:	f003 0320 	and.w	r3, r3, #32
 800a608:	2b20      	cmp	r3, #32
 800a60a:	d10e      	bne.n	800a62a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	68db      	ldr	r3, [r3, #12]
 800a612:	f003 0320 	and.w	r3, r3, #32
 800a616:	2b20      	cmp	r3, #32
 800a618:	d107      	bne.n	800a62a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f06f 0220 	mvn.w	r2, #32
 800a622:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a624:	6878      	ldr	r0, [r7, #4]
 800a626:	f000 ff47 	bl	800b4b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a62a:	bf00      	nop
 800a62c:	3708      	adds	r7, #8
 800a62e:	46bd      	mov	sp, r7
 800a630:	bd80      	pop	{r7, pc}
	...

0800a634 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b084      	sub	sp, #16
 800a638:	af00      	add	r7, sp, #0
 800a63a:	60f8      	str	r0, [r7, #12]
 800a63c:	60b9      	str	r1, [r7, #8]
 800a63e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a646:	2b01      	cmp	r3, #1
 800a648:	d101      	bne.n	800a64e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a64a:	2302      	movs	r3, #2
 800a64c:	e0fd      	b.n	800a84a <HAL_TIM_PWM_ConfigChannel+0x216>
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	2201      	movs	r2, #1
 800a652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2b14      	cmp	r3, #20
 800a65a:	f200 80f0 	bhi.w	800a83e <HAL_TIM_PWM_ConfigChannel+0x20a>
 800a65e:	a201      	add	r2, pc, #4	; (adr r2, 800a664 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800a660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a664:	0800a6b9 	.word	0x0800a6b9
 800a668:	0800a83f 	.word	0x0800a83f
 800a66c:	0800a83f 	.word	0x0800a83f
 800a670:	0800a83f 	.word	0x0800a83f
 800a674:	0800a6f9 	.word	0x0800a6f9
 800a678:	0800a83f 	.word	0x0800a83f
 800a67c:	0800a83f 	.word	0x0800a83f
 800a680:	0800a83f 	.word	0x0800a83f
 800a684:	0800a73b 	.word	0x0800a73b
 800a688:	0800a83f 	.word	0x0800a83f
 800a68c:	0800a83f 	.word	0x0800a83f
 800a690:	0800a83f 	.word	0x0800a83f
 800a694:	0800a77b 	.word	0x0800a77b
 800a698:	0800a83f 	.word	0x0800a83f
 800a69c:	0800a83f 	.word	0x0800a83f
 800a6a0:	0800a83f 	.word	0x0800a83f
 800a6a4:	0800a7bd 	.word	0x0800a7bd
 800a6a8:	0800a83f 	.word	0x0800a83f
 800a6ac:	0800a83f 	.word	0x0800a83f
 800a6b0:	0800a83f 	.word	0x0800a83f
 800a6b4:	0800a7fd 	.word	0x0800a7fd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	68b9      	ldr	r1, [r7, #8]
 800a6be:	4618      	mov	r0, r3
 800a6c0:	f000 fa88 	bl	800abd4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	699a      	ldr	r2, [r3, #24]
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	f042 0208 	orr.w	r2, r2, #8
 800a6d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	699a      	ldr	r2, [r3, #24]
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	f022 0204 	bic.w	r2, r2, #4
 800a6e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	6999      	ldr	r1, [r3, #24]
 800a6ea:	68bb      	ldr	r3, [r7, #8]
 800a6ec:	691a      	ldr	r2, [r3, #16]
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	430a      	orrs	r2, r1
 800a6f4:	619a      	str	r2, [r3, #24]
      break;
 800a6f6:	e0a3      	b.n	800a840 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	68b9      	ldr	r1, [r7, #8]
 800a6fe:	4618      	mov	r0, r3
 800a700:	f000 faf8 	bl	800acf4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	699a      	ldr	r2, [r3, #24]
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a712:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	699a      	ldr	r2, [r3, #24]
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a722:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	6999      	ldr	r1, [r3, #24]
 800a72a:	68bb      	ldr	r3, [r7, #8]
 800a72c:	691b      	ldr	r3, [r3, #16]
 800a72e:	021a      	lsls	r2, r3, #8
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	430a      	orrs	r2, r1
 800a736:	619a      	str	r2, [r3, #24]
      break;
 800a738:	e082      	b.n	800a840 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	68b9      	ldr	r1, [r7, #8]
 800a740:	4618      	mov	r0, r3
 800a742:	f000 fb61 	bl	800ae08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	69da      	ldr	r2, [r3, #28]
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	f042 0208 	orr.w	r2, r2, #8
 800a754:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	69da      	ldr	r2, [r3, #28]
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	f022 0204 	bic.w	r2, r2, #4
 800a764:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	69d9      	ldr	r1, [r3, #28]
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	691a      	ldr	r2, [r3, #16]
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	430a      	orrs	r2, r1
 800a776:	61da      	str	r2, [r3, #28]
      break;
 800a778:	e062      	b.n	800a840 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	68b9      	ldr	r1, [r7, #8]
 800a780:	4618      	mov	r0, r3
 800a782:	f000 fbc7 	bl	800af14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	69da      	ldr	r2, [r3, #28]
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a794:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	69da      	ldr	r2, [r3, #28]
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a7a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	69d9      	ldr	r1, [r3, #28]
 800a7ac:	68bb      	ldr	r3, [r7, #8]
 800a7ae:	691b      	ldr	r3, [r3, #16]
 800a7b0:	021a      	lsls	r2, r3, #8
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	430a      	orrs	r2, r1
 800a7b8:	61da      	str	r2, [r3, #28]
      break;
 800a7ba:	e041      	b.n	800a840 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	68b9      	ldr	r1, [r7, #8]
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f000 fc0e 	bl	800afe4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	f042 0208 	orr.w	r2, r2, #8
 800a7d6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	f022 0204 	bic.w	r2, r2, #4
 800a7e6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a7ee:	68bb      	ldr	r3, [r7, #8]
 800a7f0:	691a      	ldr	r2, [r3, #16]
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	430a      	orrs	r2, r1
 800a7f8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a7fa:	e021      	b.n	800a840 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	68b9      	ldr	r1, [r7, #8]
 800a802:	4618      	mov	r0, r3
 800a804:	f000 fc50 	bl	800b0a8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a816:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a826:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a82e:	68bb      	ldr	r3, [r7, #8]
 800a830:	691b      	ldr	r3, [r3, #16]
 800a832:	021a      	lsls	r2, r3, #8
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	430a      	orrs	r2, r1
 800a83a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a83c:	e000      	b.n	800a840 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800a83e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	2200      	movs	r2, #0
 800a844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a848:	2300      	movs	r3, #0
}
 800a84a:	4618      	mov	r0, r3
 800a84c:	3710      	adds	r7, #16
 800a84e:	46bd      	mov	sp, r7
 800a850:	bd80      	pop	{r7, pc}
 800a852:	bf00      	nop

0800a854 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b084      	sub	sp, #16
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
 800a85c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a864:	2b01      	cmp	r3, #1
 800a866:	d101      	bne.n	800a86c <HAL_TIM_ConfigClockSource+0x18>
 800a868:	2302      	movs	r3, #2
 800a86a:	e0db      	b.n	800aa24 <HAL_TIM_ConfigClockSource+0x1d0>
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2201      	movs	r2, #1
 800a870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2202      	movs	r2, #2
 800a878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	689b      	ldr	r3, [r3, #8]
 800a882:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a884:	68fa      	ldr	r2, [r7, #12]
 800a886:	4b69      	ldr	r3, [pc, #420]	; (800aa2c <HAL_TIM_ConfigClockSource+0x1d8>)
 800a888:	4013      	ands	r3, r2
 800a88a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a892:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	68fa      	ldr	r2, [r7, #12]
 800a89a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	4a63      	ldr	r2, [pc, #396]	; (800aa30 <HAL_TIM_ConfigClockSource+0x1dc>)
 800a8a2:	4293      	cmp	r3, r2
 800a8a4:	f000 80a9 	beq.w	800a9fa <HAL_TIM_ConfigClockSource+0x1a6>
 800a8a8:	4a61      	ldr	r2, [pc, #388]	; (800aa30 <HAL_TIM_ConfigClockSource+0x1dc>)
 800a8aa:	4293      	cmp	r3, r2
 800a8ac:	f200 80ae 	bhi.w	800aa0c <HAL_TIM_ConfigClockSource+0x1b8>
 800a8b0:	4a60      	ldr	r2, [pc, #384]	; (800aa34 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a8b2:	4293      	cmp	r3, r2
 800a8b4:	f000 80a1 	beq.w	800a9fa <HAL_TIM_ConfigClockSource+0x1a6>
 800a8b8:	4a5e      	ldr	r2, [pc, #376]	; (800aa34 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a8ba:	4293      	cmp	r3, r2
 800a8bc:	f200 80a6 	bhi.w	800aa0c <HAL_TIM_ConfigClockSource+0x1b8>
 800a8c0:	4a5d      	ldr	r2, [pc, #372]	; (800aa38 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	f000 8099 	beq.w	800a9fa <HAL_TIM_ConfigClockSource+0x1a6>
 800a8c8:	4a5b      	ldr	r2, [pc, #364]	; (800aa38 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a8ca:	4293      	cmp	r3, r2
 800a8cc:	f200 809e 	bhi.w	800aa0c <HAL_TIM_ConfigClockSource+0x1b8>
 800a8d0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a8d4:	f000 8091 	beq.w	800a9fa <HAL_TIM_ConfigClockSource+0x1a6>
 800a8d8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a8dc:	f200 8096 	bhi.w	800aa0c <HAL_TIM_ConfigClockSource+0x1b8>
 800a8e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a8e4:	f000 8089 	beq.w	800a9fa <HAL_TIM_ConfigClockSource+0x1a6>
 800a8e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a8ec:	f200 808e 	bhi.w	800aa0c <HAL_TIM_ConfigClockSource+0x1b8>
 800a8f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a8f4:	d03e      	beq.n	800a974 <HAL_TIM_ConfigClockSource+0x120>
 800a8f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a8fa:	f200 8087 	bhi.w	800aa0c <HAL_TIM_ConfigClockSource+0x1b8>
 800a8fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a902:	f000 8085 	beq.w	800aa10 <HAL_TIM_ConfigClockSource+0x1bc>
 800a906:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a90a:	d87f      	bhi.n	800aa0c <HAL_TIM_ConfigClockSource+0x1b8>
 800a90c:	2b70      	cmp	r3, #112	; 0x70
 800a90e:	d01a      	beq.n	800a946 <HAL_TIM_ConfigClockSource+0xf2>
 800a910:	2b70      	cmp	r3, #112	; 0x70
 800a912:	d87b      	bhi.n	800aa0c <HAL_TIM_ConfigClockSource+0x1b8>
 800a914:	2b60      	cmp	r3, #96	; 0x60
 800a916:	d050      	beq.n	800a9ba <HAL_TIM_ConfigClockSource+0x166>
 800a918:	2b60      	cmp	r3, #96	; 0x60
 800a91a:	d877      	bhi.n	800aa0c <HAL_TIM_ConfigClockSource+0x1b8>
 800a91c:	2b50      	cmp	r3, #80	; 0x50
 800a91e:	d03c      	beq.n	800a99a <HAL_TIM_ConfigClockSource+0x146>
 800a920:	2b50      	cmp	r3, #80	; 0x50
 800a922:	d873      	bhi.n	800aa0c <HAL_TIM_ConfigClockSource+0x1b8>
 800a924:	2b40      	cmp	r3, #64	; 0x40
 800a926:	d058      	beq.n	800a9da <HAL_TIM_ConfigClockSource+0x186>
 800a928:	2b40      	cmp	r3, #64	; 0x40
 800a92a:	d86f      	bhi.n	800aa0c <HAL_TIM_ConfigClockSource+0x1b8>
 800a92c:	2b30      	cmp	r3, #48	; 0x30
 800a92e:	d064      	beq.n	800a9fa <HAL_TIM_ConfigClockSource+0x1a6>
 800a930:	2b30      	cmp	r3, #48	; 0x30
 800a932:	d86b      	bhi.n	800aa0c <HAL_TIM_ConfigClockSource+0x1b8>
 800a934:	2b20      	cmp	r3, #32
 800a936:	d060      	beq.n	800a9fa <HAL_TIM_ConfigClockSource+0x1a6>
 800a938:	2b20      	cmp	r3, #32
 800a93a:	d867      	bhi.n	800aa0c <HAL_TIM_ConfigClockSource+0x1b8>
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d05c      	beq.n	800a9fa <HAL_TIM_ConfigClockSource+0x1a6>
 800a940:	2b10      	cmp	r3, #16
 800a942:	d05a      	beq.n	800a9fa <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800a944:	e062      	b.n	800aa0c <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6818      	ldr	r0, [r3, #0]
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	6899      	ldr	r1, [r3, #8]
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	685a      	ldr	r2, [r3, #4]
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	68db      	ldr	r3, [r3, #12]
 800a956:	f000 fc89 	bl	800b26c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	689b      	ldr	r3, [r3, #8]
 800a960:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a968:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	68fa      	ldr	r2, [r7, #12]
 800a970:	609a      	str	r2, [r3, #8]
      break;
 800a972:	e04e      	b.n	800aa12 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	6818      	ldr	r0, [r3, #0]
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	6899      	ldr	r1, [r3, #8]
 800a97c:	683b      	ldr	r3, [r7, #0]
 800a97e:	685a      	ldr	r2, [r3, #4]
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	68db      	ldr	r3, [r3, #12]
 800a984:	f000 fc72 	bl	800b26c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	689a      	ldr	r2, [r3, #8]
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a996:	609a      	str	r2, [r3, #8]
      break;
 800a998:	e03b      	b.n	800aa12 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6818      	ldr	r0, [r3, #0]
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	6859      	ldr	r1, [r3, #4]
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	68db      	ldr	r3, [r3, #12]
 800a9a6:	461a      	mov	r2, r3
 800a9a8:	f000 fbe2 	bl	800b170 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	2150      	movs	r1, #80	; 0x50
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	f000 fc3c 	bl	800b230 <TIM_ITRx_SetConfig>
      break;
 800a9b8:	e02b      	b.n	800aa12 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	6818      	ldr	r0, [r3, #0]
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	6859      	ldr	r1, [r3, #4]
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	68db      	ldr	r3, [r3, #12]
 800a9c6:	461a      	mov	r2, r3
 800a9c8:	f000 fc01 	bl	800b1ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	2160      	movs	r1, #96	; 0x60
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	f000 fc2c 	bl	800b230 <TIM_ITRx_SetConfig>
      break;
 800a9d8:	e01b      	b.n	800aa12 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6818      	ldr	r0, [r3, #0]
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	6859      	ldr	r1, [r3, #4]
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	68db      	ldr	r3, [r3, #12]
 800a9e6:	461a      	mov	r2, r3
 800a9e8:	f000 fbc2 	bl	800b170 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	2140      	movs	r1, #64	; 0x40
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	f000 fc1c 	bl	800b230 <TIM_ITRx_SetConfig>
      break;
 800a9f8:	e00b      	b.n	800aa12 <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681a      	ldr	r2, [r3, #0]
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	4619      	mov	r1, r3
 800aa04:	4610      	mov	r0, r2
 800aa06:	f000 fc13 	bl	800b230 <TIM_ITRx_SetConfig>
        break;
 800aa0a:	e002      	b.n	800aa12 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800aa0c:	bf00      	nop
 800aa0e:	e000      	b.n	800aa12 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800aa10:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	2201      	movs	r2, #1
 800aa16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aa22:	2300      	movs	r3, #0
}
 800aa24:	4618      	mov	r0, r3
 800aa26:	3710      	adds	r7, #16
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bd80      	pop	{r7, pc}
 800aa2c:	ffceff88 	.word	0xffceff88
 800aa30:	00100040 	.word	0x00100040
 800aa34:	00100030 	.word	0x00100030
 800aa38:	00100020 	.word	0x00100020

0800aa3c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aa3c:	b480      	push	{r7}
 800aa3e:	b083      	sub	sp, #12
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800aa44:	bf00      	nop
 800aa46:	370c      	adds	r7, #12
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4e:	4770      	bx	lr

0800aa50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aa50:	b480      	push	{r7}
 800aa52:	b083      	sub	sp, #12
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aa58:	bf00      	nop
 800aa5a:	370c      	adds	r7, #12
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa62:	4770      	bx	lr

0800aa64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aa64:	b480      	push	{r7}
 800aa66:	b083      	sub	sp, #12
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aa6c:	bf00      	nop
 800aa6e:	370c      	adds	r7, #12
 800aa70:	46bd      	mov	sp, r7
 800aa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa76:	4770      	bx	lr

0800aa78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aa78:	b480      	push	{r7}
 800aa7a:	b083      	sub	sp, #12
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aa80:	bf00      	nop
 800aa82:	370c      	adds	r7, #12
 800aa84:	46bd      	mov	sp, r7
 800aa86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8a:	4770      	bx	lr

0800aa8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aa8c:	b480      	push	{r7}
 800aa8e:	b083      	sub	sp, #12
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aa94:	bf00      	nop
 800aa96:	370c      	adds	r7, #12
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9e:	4770      	bx	lr

0800aaa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800aaa0:	b480      	push	{r7}
 800aaa2:	b085      	sub	sp, #20
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
 800aaa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	4a40      	ldr	r2, [pc, #256]	; (800abb4 <TIM_Base_SetConfig+0x114>)
 800aab4:	4293      	cmp	r3, r2
 800aab6:	d013      	beq.n	800aae0 <TIM_Base_SetConfig+0x40>
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aabe:	d00f      	beq.n	800aae0 <TIM_Base_SetConfig+0x40>
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	4a3d      	ldr	r2, [pc, #244]	; (800abb8 <TIM_Base_SetConfig+0x118>)
 800aac4:	4293      	cmp	r3, r2
 800aac6:	d00b      	beq.n	800aae0 <TIM_Base_SetConfig+0x40>
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	4a3c      	ldr	r2, [pc, #240]	; (800abbc <TIM_Base_SetConfig+0x11c>)
 800aacc:	4293      	cmp	r3, r2
 800aace:	d007      	beq.n	800aae0 <TIM_Base_SetConfig+0x40>
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	4a3b      	ldr	r2, [pc, #236]	; (800abc0 <TIM_Base_SetConfig+0x120>)
 800aad4:	4293      	cmp	r3, r2
 800aad6:	d003      	beq.n	800aae0 <TIM_Base_SetConfig+0x40>
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	4a3a      	ldr	r2, [pc, #232]	; (800abc4 <TIM_Base_SetConfig+0x124>)
 800aadc:	4293      	cmp	r3, r2
 800aade:	d108      	bne.n	800aaf2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aae6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aae8:	683b      	ldr	r3, [r7, #0]
 800aaea:	685b      	ldr	r3, [r3, #4]
 800aaec:	68fa      	ldr	r2, [r7, #12]
 800aaee:	4313      	orrs	r3, r2
 800aaf0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	4a2f      	ldr	r2, [pc, #188]	; (800abb4 <TIM_Base_SetConfig+0x114>)
 800aaf6:	4293      	cmp	r3, r2
 800aaf8:	d01f      	beq.n	800ab3a <TIM_Base_SetConfig+0x9a>
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab00:	d01b      	beq.n	800ab3a <TIM_Base_SetConfig+0x9a>
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	4a2c      	ldr	r2, [pc, #176]	; (800abb8 <TIM_Base_SetConfig+0x118>)
 800ab06:	4293      	cmp	r3, r2
 800ab08:	d017      	beq.n	800ab3a <TIM_Base_SetConfig+0x9a>
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	4a2b      	ldr	r2, [pc, #172]	; (800abbc <TIM_Base_SetConfig+0x11c>)
 800ab0e:	4293      	cmp	r3, r2
 800ab10:	d013      	beq.n	800ab3a <TIM_Base_SetConfig+0x9a>
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	4a2a      	ldr	r2, [pc, #168]	; (800abc0 <TIM_Base_SetConfig+0x120>)
 800ab16:	4293      	cmp	r3, r2
 800ab18:	d00f      	beq.n	800ab3a <TIM_Base_SetConfig+0x9a>
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	4a29      	ldr	r2, [pc, #164]	; (800abc4 <TIM_Base_SetConfig+0x124>)
 800ab1e:	4293      	cmp	r3, r2
 800ab20:	d00b      	beq.n	800ab3a <TIM_Base_SetConfig+0x9a>
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	4a28      	ldr	r2, [pc, #160]	; (800abc8 <TIM_Base_SetConfig+0x128>)
 800ab26:	4293      	cmp	r3, r2
 800ab28:	d007      	beq.n	800ab3a <TIM_Base_SetConfig+0x9a>
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	4a27      	ldr	r2, [pc, #156]	; (800abcc <TIM_Base_SetConfig+0x12c>)
 800ab2e:	4293      	cmp	r3, r2
 800ab30:	d003      	beq.n	800ab3a <TIM_Base_SetConfig+0x9a>
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	4a26      	ldr	r2, [pc, #152]	; (800abd0 <TIM_Base_SetConfig+0x130>)
 800ab36:	4293      	cmp	r3, r2
 800ab38:	d108      	bne.n	800ab4c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	68db      	ldr	r3, [r3, #12]
 800ab46:	68fa      	ldr	r2, [r7, #12]
 800ab48:	4313      	orrs	r3, r2
 800ab4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	695b      	ldr	r3, [r3, #20]
 800ab56:	4313      	orrs	r3, r2
 800ab58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	68fa      	ldr	r2, [r7, #12]
 800ab5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	689a      	ldr	r2, [r3, #8]
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	681a      	ldr	r2, [r3, #0]
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	4a10      	ldr	r2, [pc, #64]	; (800abb4 <TIM_Base_SetConfig+0x114>)
 800ab74:	4293      	cmp	r3, r2
 800ab76:	d00f      	beq.n	800ab98 <TIM_Base_SetConfig+0xf8>
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	4a12      	ldr	r2, [pc, #72]	; (800abc4 <TIM_Base_SetConfig+0x124>)
 800ab7c:	4293      	cmp	r3, r2
 800ab7e:	d00b      	beq.n	800ab98 <TIM_Base_SetConfig+0xf8>
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	4a11      	ldr	r2, [pc, #68]	; (800abc8 <TIM_Base_SetConfig+0x128>)
 800ab84:	4293      	cmp	r3, r2
 800ab86:	d007      	beq.n	800ab98 <TIM_Base_SetConfig+0xf8>
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	4a10      	ldr	r2, [pc, #64]	; (800abcc <TIM_Base_SetConfig+0x12c>)
 800ab8c:	4293      	cmp	r3, r2
 800ab8e:	d003      	beq.n	800ab98 <TIM_Base_SetConfig+0xf8>
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	4a0f      	ldr	r2, [pc, #60]	; (800abd0 <TIM_Base_SetConfig+0x130>)
 800ab94:	4293      	cmp	r3, r2
 800ab96:	d103      	bne.n	800aba0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	691a      	ldr	r2, [r3, #16]
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2201      	movs	r2, #1
 800aba4:	615a      	str	r2, [r3, #20]
}
 800aba6:	bf00      	nop
 800aba8:	3714      	adds	r7, #20
 800abaa:	46bd      	mov	sp, r7
 800abac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb0:	4770      	bx	lr
 800abb2:	bf00      	nop
 800abb4:	40010000 	.word	0x40010000
 800abb8:	40000400 	.word	0x40000400
 800abbc:	40000800 	.word	0x40000800
 800abc0:	40000c00 	.word	0x40000c00
 800abc4:	40010400 	.word	0x40010400
 800abc8:	40014000 	.word	0x40014000
 800abcc:	40014400 	.word	0x40014400
 800abd0:	40014800 	.word	0x40014800

0800abd4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800abd4:	b480      	push	{r7}
 800abd6:	b087      	sub	sp, #28
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
 800abdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6a1b      	ldr	r3, [r3, #32]
 800abe2:	f023 0201 	bic.w	r2, r3, #1
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6a1b      	ldr	r3, [r3, #32]
 800abee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	685b      	ldr	r3, [r3, #4]
 800abf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	699b      	ldr	r3, [r3, #24]
 800abfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800abfc:	68fa      	ldr	r2, [r7, #12]
 800abfe:	4b37      	ldr	r3, [pc, #220]	; (800acdc <TIM_OC1_SetConfig+0x108>)
 800ac00:	4013      	ands	r3, r2
 800ac02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	f023 0303 	bic.w	r3, r3, #3
 800ac0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	68fa      	ldr	r2, [r7, #12]
 800ac12:	4313      	orrs	r3, r2
 800ac14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ac16:	697b      	ldr	r3, [r7, #20]
 800ac18:	f023 0302 	bic.w	r3, r3, #2
 800ac1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	689b      	ldr	r3, [r3, #8]
 800ac22:	697a      	ldr	r2, [r7, #20]
 800ac24:	4313      	orrs	r3, r2
 800ac26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	4a2d      	ldr	r2, [pc, #180]	; (800ace0 <TIM_OC1_SetConfig+0x10c>)
 800ac2c:	4293      	cmp	r3, r2
 800ac2e:	d00f      	beq.n	800ac50 <TIM_OC1_SetConfig+0x7c>
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	4a2c      	ldr	r2, [pc, #176]	; (800ace4 <TIM_OC1_SetConfig+0x110>)
 800ac34:	4293      	cmp	r3, r2
 800ac36:	d00b      	beq.n	800ac50 <TIM_OC1_SetConfig+0x7c>
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	4a2b      	ldr	r2, [pc, #172]	; (800ace8 <TIM_OC1_SetConfig+0x114>)
 800ac3c:	4293      	cmp	r3, r2
 800ac3e:	d007      	beq.n	800ac50 <TIM_OC1_SetConfig+0x7c>
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	4a2a      	ldr	r2, [pc, #168]	; (800acec <TIM_OC1_SetConfig+0x118>)
 800ac44:	4293      	cmp	r3, r2
 800ac46:	d003      	beq.n	800ac50 <TIM_OC1_SetConfig+0x7c>
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	4a29      	ldr	r2, [pc, #164]	; (800acf0 <TIM_OC1_SetConfig+0x11c>)
 800ac4c:	4293      	cmp	r3, r2
 800ac4e:	d10c      	bne.n	800ac6a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ac50:	697b      	ldr	r3, [r7, #20]
 800ac52:	f023 0308 	bic.w	r3, r3, #8
 800ac56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	68db      	ldr	r3, [r3, #12]
 800ac5c:	697a      	ldr	r2, [r7, #20]
 800ac5e:	4313      	orrs	r3, r2
 800ac60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ac62:	697b      	ldr	r3, [r7, #20]
 800ac64:	f023 0304 	bic.w	r3, r3, #4
 800ac68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	4a1c      	ldr	r2, [pc, #112]	; (800ace0 <TIM_OC1_SetConfig+0x10c>)
 800ac6e:	4293      	cmp	r3, r2
 800ac70:	d00f      	beq.n	800ac92 <TIM_OC1_SetConfig+0xbe>
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	4a1b      	ldr	r2, [pc, #108]	; (800ace4 <TIM_OC1_SetConfig+0x110>)
 800ac76:	4293      	cmp	r3, r2
 800ac78:	d00b      	beq.n	800ac92 <TIM_OC1_SetConfig+0xbe>
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	4a1a      	ldr	r2, [pc, #104]	; (800ace8 <TIM_OC1_SetConfig+0x114>)
 800ac7e:	4293      	cmp	r3, r2
 800ac80:	d007      	beq.n	800ac92 <TIM_OC1_SetConfig+0xbe>
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	4a19      	ldr	r2, [pc, #100]	; (800acec <TIM_OC1_SetConfig+0x118>)
 800ac86:	4293      	cmp	r3, r2
 800ac88:	d003      	beq.n	800ac92 <TIM_OC1_SetConfig+0xbe>
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	4a18      	ldr	r2, [pc, #96]	; (800acf0 <TIM_OC1_SetConfig+0x11c>)
 800ac8e:	4293      	cmp	r3, r2
 800ac90:	d111      	bne.n	800acb6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ac92:	693b      	ldr	r3, [r7, #16]
 800ac94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ac98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ac9a:	693b      	ldr	r3, [r7, #16]
 800ac9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aca0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	695b      	ldr	r3, [r3, #20]
 800aca6:	693a      	ldr	r2, [r7, #16]
 800aca8:	4313      	orrs	r3, r2
 800acaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	699b      	ldr	r3, [r3, #24]
 800acb0:	693a      	ldr	r2, [r7, #16]
 800acb2:	4313      	orrs	r3, r2
 800acb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	693a      	ldr	r2, [r7, #16]
 800acba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	68fa      	ldr	r2, [r7, #12]
 800acc0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	685a      	ldr	r2, [r3, #4]
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	697a      	ldr	r2, [r7, #20]
 800acce:	621a      	str	r2, [r3, #32]
}
 800acd0:	bf00      	nop
 800acd2:	371c      	adds	r7, #28
 800acd4:	46bd      	mov	sp, r7
 800acd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acda:	4770      	bx	lr
 800acdc:	fffeff8f 	.word	0xfffeff8f
 800ace0:	40010000 	.word	0x40010000
 800ace4:	40010400 	.word	0x40010400
 800ace8:	40014000 	.word	0x40014000
 800acec:	40014400 	.word	0x40014400
 800acf0:	40014800 	.word	0x40014800

0800acf4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800acf4:	b480      	push	{r7}
 800acf6:	b087      	sub	sp, #28
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
 800acfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	6a1b      	ldr	r3, [r3, #32]
 800ad02:	f023 0210 	bic.w	r2, r3, #16
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	6a1b      	ldr	r3, [r3, #32]
 800ad0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	685b      	ldr	r3, [r3, #4]
 800ad14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	699b      	ldr	r3, [r3, #24]
 800ad1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ad1c:	68fa      	ldr	r2, [r7, #12]
 800ad1e:	4b34      	ldr	r3, [pc, #208]	; (800adf0 <TIM_OC2_SetConfig+0xfc>)
 800ad20:	4013      	ands	r3, r2
 800ad22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	021b      	lsls	r3, r3, #8
 800ad32:	68fa      	ldr	r2, [r7, #12]
 800ad34:	4313      	orrs	r3, r2
 800ad36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ad38:	697b      	ldr	r3, [r7, #20]
 800ad3a:	f023 0320 	bic.w	r3, r3, #32
 800ad3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	689b      	ldr	r3, [r3, #8]
 800ad44:	011b      	lsls	r3, r3, #4
 800ad46:	697a      	ldr	r2, [r7, #20]
 800ad48:	4313      	orrs	r3, r2
 800ad4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	4a29      	ldr	r2, [pc, #164]	; (800adf4 <TIM_OC2_SetConfig+0x100>)
 800ad50:	4293      	cmp	r3, r2
 800ad52:	d003      	beq.n	800ad5c <TIM_OC2_SetConfig+0x68>
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	4a28      	ldr	r2, [pc, #160]	; (800adf8 <TIM_OC2_SetConfig+0x104>)
 800ad58:	4293      	cmp	r3, r2
 800ad5a:	d10d      	bne.n	800ad78 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ad5c:	697b      	ldr	r3, [r7, #20]
 800ad5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ad62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ad64:	683b      	ldr	r3, [r7, #0]
 800ad66:	68db      	ldr	r3, [r3, #12]
 800ad68:	011b      	lsls	r3, r3, #4
 800ad6a:	697a      	ldr	r2, [r7, #20]
 800ad6c:	4313      	orrs	r3, r2
 800ad6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ad70:	697b      	ldr	r3, [r7, #20]
 800ad72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad76:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	4a1e      	ldr	r2, [pc, #120]	; (800adf4 <TIM_OC2_SetConfig+0x100>)
 800ad7c:	4293      	cmp	r3, r2
 800ad7e:	d00f      	beq.n	800ada0 <TIM_OC2_SetConfig+0xac>
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	4a1d      	ldr	r2, [pc, #116]	; (800adf8 <TIM_OC2_SetConfig+0x104>)
 800ad84:	4293      	cmp	r3, r2
 800ad86:	d00b      	beq.n	800ada0 <TIM_OC2_SetConfig+0xac>
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	4a1c      	ldr	r2, [pc, #112]	; (800adfc <TIM_OC2_SetConfig+0x108>)
 800ad8c:	4293      	cmp	r3, r2
 800ad8e:	d007      	beq.n	800ada0 <TIM_OC2_SetConfig+0xac>
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	4a1b      	ldr	r2, [pc, #108]	; (800ae00 <TIM_OC2_SetConfig+0x10c>)
 800ad94:	4293      	cmp	r3, r2
 800ad96:	d003      	beq.n	800ada0 <TIM_OC2_SetConfig+0xac>
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	4a1a      	ldr	r2, [pc, #104]	; (800ae04 <TIM_OC2_SetConfig+0x110>)
 800ad9c:	4293      	cmp	r3, r2
 800ad9e:	d113      	bne.n	800adc8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ada0:	693b      	ldr	r3, [r7, #16]
 800ada2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ada6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ada8:	693b      	ldr	r3, [r7, #16]
 800adaa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800adae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	695b      	ldr	r3, [r3, #20]
 800adb4:	009b      	lsls	r3, r3, #2
 800adb6:	693a      	ldr	r2, [r7, #16]
 800adb8:	4313      	orrs	r3, r2
 800adba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	699b      	ldr	r3, [r3, #24]
 800adc0:	009b      	lsls	r3, r3, #2
 800adc2:	693a      	ldr	r2, [r7, #16]
 800adc4:	4313      	orrs	r3, r2
 800adc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	693a      	ldr	r2, [r7, #16]
 800adcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	68fa      	ldr	r2, [r7, #12]
 800add2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	685a      	ldr	r2, [r3, #4]
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	697a      	ldr	r2, [r7, #20]
 800ade0:	621a      	str	r2, [r3, #32]
}
 800ade2:	bf00      	nop
 800ade4:	371c      	adds	r7, #28
 800ade6:	46bd      	mov	sp, r7
 800ade8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adec:	4770      	bx	lr
 800adee:	bf00      	nop
 800adf0:	feff8fff 	.word	0xfeff8fff
 800adf4:	40010000 	.word	0x40010000
 800adf8:	40010400 	.word	0x40010400
 800adfc:	40014000 	.word	0x40014000
 800ae00:	40014400 	.word	0x40014400
 800ae04:	40014800 	.word	0x40014800

0800ae08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ae08:	b480      	push	{r7}
 800ae0a:	b087      	sub	sp, #28
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
 800ae10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6a1b      	ldr	r3, [r3, #32]
 800ae16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	6a1b      	ldr	r3, [r3, #32]
 800ae22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	685b      	ldr	r3, [r3, #4]
 800ae28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	69db      	ldr	r3, [r3, #28]
 800ae2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	f023 0303 	bic.w	r3, r3, #3
 800ae3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	68fa      	ldr	r2, [r7, #12]
 800ae46:	4313      	orrs	r3, r2
 800ae48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ae4a:	697b      	ldr	r3, [r7, #20]
 800ae4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ae50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	689b      	ldr	r3, [r3, #8]
 800ae56:	021b      	lsls	r3, r3, #8
 800ae58:	697a      	ldr	r2, [r7, #20]
 800ae5a:	4313      	orrs	r3, r2
 800ae5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	4a27      	ldr	r2, [pc, #156]	; (800af00 <TIM_OC3_SetConfig+0xf8>)
 800ae62:	4293      	cmp	r3, r2
 800ae64:	d003      	beq.n	800ae6e <TIM_OC3_SetConfig+0x66>
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	4a26      	ldr	r2, [pc, #152]	; (800af04 <TIM_OC3_SetConfig+0xfc>)
 800ae6a:	4293      	cmp	r3, r2
 800ae6c:	d10d      	bne.n	800ae8a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ae6e:	697b      	ldr	r3, [r7, #20]
 800ae70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ae74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	68db      	ldr	r3, [r3, #12]
 800ae7a:	021b      	lsls	r3, r3, #8
 800ae7c:	697a      	ldr	r2, [r7, #20]
 800ae7e:	4313      	orrs	r3, r2
 800ae80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ae82:	697b      	ldr	r3, [r7, #20]
 800ae84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ae88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	4a1c      	ldr	r2, [pc, #112]	; (800af00 <TIM_OC3_SetConfig+0xf8>)
 800ae8e:	4293      	cmp	r3, r2
 800ae90:	d00f      	beq.n	800aeb2 <TIM_OC3_SetConfig+0xaa>
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	4a1b      	ldr	r2, [pc, #108]	; (800af04 <TIM_OC3_SetConfig+0xfc>)
 800ae96:	4293      	cmp	r3, r2
 800ae98:	d00b      	beq.n	800aeb2 <TIM_OC3_SetConfig+0xaa>
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	4a1a      	ldr	r2, [pc, #104]	; (800af08 <TIM_OC3_SetConfig+0x100>)
 800ae9e:	4293      	cmp	r3, r2
 800aea0:	d007      	beq.n	800aeb2 <TIM_OC3_SetConfig+0xaa>
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	4a19      	ldr	r2, [pc, #100]	; (800af0c <TIM_OC3_SetConfig+0x104>)
 800aea6:	4293      	cmp	r3, r2
 800aea8:	d003      	beq.n	800aeb2 <TIM_OC3_SetConfig+0xaa>
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	4a18      	ldr	r2, [pc, #96]	; (800af10 <TIM_OC3_SetConfig+0x108>)
 800aeae:	4293      	cmp	r3, r2
 800aeb0:	d113      	bne.n	800aeda <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800aeb2:	693b      	ldr	r3, [r7, #16]
 800aeb4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aeb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800aeba:	693b      	ldr	r3, [r7, #16]
 800aebc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800aec0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	695b      	ldr	r3, [r3, #20]
 800aec6:	011b      	lsls	r3, r3, #4
 800aec8:	693a      	ldr	r2, [r7, #16]
 800aeca:	4313      	orrs	r3, r2
 800aecc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	699b      	ldr	r3, [r3, #24]
 800aed2:	011b      	lsls	r3, r3, #4
 800aed4:	693a      	ldr	r2, [r7, #16]
 800aed6:	4313      	orrs	r3, r2
 800aed8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	693a      	ldr	r2, [r7, #16]
 800aede:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	68fa      	ldr	r2, [r7, #12]
 800aee4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	685a      	ldr	r2, [r3, #4]
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	697a      	ldr	r2, [r7, #20]
 800aef2:	621a      	str	r2, [r3, #32]
}
 800aef4:	bf00      	nop
 800aef6:	371c      	adds	r7, #28
 800aef8:	46bd      	mov	sp, r7
 800aefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefe:	4770      	bx	lr
 800af00:	40010000 	.word	0x40010000
 800af04:	40010400 	.word	0x40010400
 800af08:	40014000 	.word	0x40014000
 800af0c:	40014400 	.word	0x40014400
 800af10:	40014800 	.word	0x40014800

0800af14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800af14:	b480      	push	{r7}
 800af16:	b087      	sub	sp, #28
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
 800af1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6a1b      	ldr	r3, [r3, #32]
 800af22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	6a1b      	ldr	r3, [r3, #32]
 800af2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	685b      	ldr	r3, [r3, #4]
 800af34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	69db      	ldr	r3, [r3, #28]
 800af3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	021b      	lsls	r3, r3, #8
 800af52:	68fa      	ldr	r2, [r7, #12]
 800af54:	4313      	orrs	r3, r2
 800af56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800af58:	693b      	ldr	r3, [r7, #16]
 800af5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800af5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	689b      	ldr	r3, [r3, #8]
 800af64:	031b      	lsls	r3, r3, #12
 800af66:	693a      	ldr	r2, [r7, #16]
 800af68:	4313      	orrs	r3, r2
 800af6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	4a18      	ldr	r2, [pc, #96]	; (800afd0 <TIM_OC4_SetConfig+0xbc>)
 800af70:	4293      	cmp	r3, r2
 800af72:	d00f      	beq.n	800af94 <TIM_OC4_SetConfig+0x80>
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	4a17      	ldr	r2, [pc, #92]	; (800afd4 <TIM_OC4_SetConfig+0xc0>)
 800af78:	4293      	cmp	r3, r2
 800af7a:	d00b      	beq.n	800af94 <TIM_OC4_SetConfig+0x80>
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	4a16      	ldr	r2, [pc, #88]	; (800afd8 <TIM_OC4_SetConfig+0xc4>)
 800af80:	4293      	cmp	r3, r2
 800af82:	d007      	beq.n	800af94 <TIM_OC4_SetConfig+0x80>
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	4a15      	ldr	r2, [pc, #84]	; (800afdc <TIM_OC4_SetConfig+0xc8>)
 800af88:	4293      	cmp	r3, r2
 800af8a:	d003      	beq.n	800af94 <TIM_OC4_SetConfig+0x80>
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	4a14      	ldr	r2, [pc, #80]	; (800afe0 <TIM_OC4_SetConfig+0xcc>)
 800af90:	4293      	cmp	r3, r2
 800af92:	d109      	bne.n	800afa8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800af94:	697b      	ldr	r3, [r7, #20]
 800af96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800af9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	695b      	ldr	r3, [r3, #20]
 800afa0:	019b      	lsls	r3, r3, #6
 800afa2:	697a      	ldr	r2, [r7, #20]
 800afa4:	4313      	orrs	r3, r2
 800afa6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	697a      	ldr	r2, [r7, #20]
 800afac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	68fa      	ldr	r2, [r7, #12]
 800afb2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	685a      	ldr	r2, [r3, #4]
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	693a      	ldr	r2, [r7, #16]
 800afc0:	621a      	str	r2, [r3, #32]
}
 800afc2:	bf00      	nop
 800afc4:	371c      	adds	r7, #28
 800afc6:	46bd      	mov	sp, r7
 800afc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afcc:	4770      	bx	lr
 800afce:	bf00      	nop
 800afd0:	40010000 	.word	0x40010000
 800afd4:	40010400 	.word	0x40010400
 800afd8:	40014000 	.word	0x40014000
 800afdc:	40014400 	.word	0x40014400
 800afe0:	40014800 	.word	0x40014800

0800afe4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800afe4:	b480      	push	{r7}
 800afe6:	b087      	sub	sp, #28
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
 800afec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6a1b      	ldr	r3, [r3, #32]
 800aff2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6a1b      	ldr	r3, [r3, #32]
 800affe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	685b      	ldr	r3, [r3, #4]
 800b004:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b00a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b012:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	68fa      	ldr	r2, [r7, #12]
 800b01a:	4313      	orrs	r3, r2
 800b01c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b01e:	693b      	ldr	r3, [r7, #16]
 800b020:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b024:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	689b      	ldr	r3, [r3, #8]
 800b02a:	041b      	lsls	r3, r3, #16
 800b02c:	693a      	ldr	r2, [r7, #16]
 800b02e:	4313      	orrs	r3, r2
 800b030:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	4a17      	ldr	r2, [pc, #92]	; (800b094 <TIM_OC5_SetConfig+0xb0>)
 800b036:	4293      	cmp	r3, r2
 800b038:	d00f      	beq.n	800b05a <TIM_OC5_SetConfig+0x76>
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	4a16      	ldr	r2, [pc, #88]	; (800b098 <TIM_OC5_SetConfig+0xb4>)
 800b03e:	4293      	cmp	r3, r2
 800b040:	d00b      	beq.n	800b05a <TIM_OC5_SetConfig+0x76>
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	4a15      	ldr	r2, [pc, #84]	; (800b09c <TIM_OC5_SetConfig+0xb8>)
 800b046:	4293      	cmp	r3, r2
 800b048:	d007      	beq.n	800b05a <TIM_OC5_SetConfig+0x76>
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	4a14      	ldr	r2, [pc, #80]	; (800b0a0 <TIM_OC5_SetConfig+0xbc>)
 800b04e:	4293      	cmp	r3, r2
 800b050:	d003      	beq.n	800b05a <TIM_OC5_SetConfig+0x76>
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	4a13      	ldr	r2, [pc, #76]	; (800b0a4 <TIM_OC5_SetConfig+0xc0>)
 800b056:	4293      	cmp	r3, r2
 800b058:	d109      	bne.n	800b06e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b05a:	697b      	ldr	r3, [r7, #20]
 800b05c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b060:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	695b      	ldr	r3, [r3, #20]
 800b066:	021b      	lsls	r3, r3, #8
 800b068:	697a      	ldr	r2, [r7, #20]
 800b06a:	4313      	orrs	r3, r2
 800b06c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	697a      	ldr	r2, [r7, #20]
 800b072:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	68fa      	ldr	r2, [r7, #12]
 800b078:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b07a:	683b      	ldr	r3, [r7, #0]
 800b07c:	685a      	ldr	r2, [r3, #4]
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	693a      	ldr	r2, [r7, #16]
 800b086:	621a      	str	r2, [r3, #32]
}
 800b088:	bf00      	nop
 800b08a:	371c      	adds	r7, #28
 800b08c:	46bd      	mov	sp, r7
 800b08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b092:	4770      	bx	lr
 800b094:	40010000 	.word	0x40010000
 800b098:	40010400 	.word	0x40010400
 800b09c:	40014000 	.word	0x40014000
 800b0a0:	40014400 	.word	0x40014400
 800b0a4:	40014800 	.word	0x40014800

0800b0a8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b0a8:	b480      	push	{r7}
 800b0aa:	b087      	sub	sp, #28
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
 800b0b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	6a1b      	ldr	r3, [r3, #32]
 800b0b6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	6a1b      	ldr	r3, [r3, #32]
 800b0c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	685b      	ldr	r3, [r3, #4]
 800b0c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b0d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	021b      	lsls	r3, r3, #8
 800b0de:	68fa      	ldr	r2, [r7, #12]
 800b0e0:	4313      	orrs	r3, r2
 800b0e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b0e4:	693b      	ldr	r3, [r7, #16]
 800b0e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b0ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	689b      	ldr	r3, [r3, #8]
 800b0f0:	051b      	lsls	r3, r3, #20
 800b0f2:	693a      	ldr	r2, [r7, #16]
 800b0f4:	4313      	orrs	r3, r2
 800b0f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	4a18      	ldr	r2, [pc, #96]	; (800b15c <TIM_OC6_SetConfig+0xb4>)
 800b0fc:	4293      	cmp	r3, r2
 800b0fe:	d00f      	beq.n	800b120 <TIM_OC6_SetConfig+0x78>
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	4a17      	ldr	r2, [pc, #92]	; (800b160 <TIM_OC6_SetConfig+0xb8>)
 800b104:	4293      	cmp	r3, r2
 800b106:	d00b      	beq.n	800b120 <TIM_OC6_SetConfig+0x78>
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	4a16      	ldr	r2, [pc, #88]	; (800b164 <TIM_OC6_SetConfig+0xbc>)
 800b10c:	4293      	cmp	r3, r2
 800b10e:	d007      	beq.n	800b120 <TIM_OC6_SetConfig+0x78>
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	4a15      	ldr	r2, [pc, #84]	; (800b168 <TIM_OC6_SetConfig+0xc0>)
 800b114:	4293      	cmp	r3, r2
 800b116:	d003      	beq.n	800b120 <TIM_OC6_SetConfig+0x78>
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	4a14      	ldr	r2, [pc, #80]	; (800b16c <TIM_OC6_SetConfig+0xc4>)
 800b11c:	4293      	cmp	r3, r2
 800b11e:	d109      	bne.n	800b134 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b120:	697b      	ldr	r3, [r7, #20]
 800b122:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b126:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	695b      	ldr	r3, [r3, #20]
 800b12c:	029b      	lsls	r3, r3, #10
 800b12e:	697a      	ldr	r2, [r7, #20]
 800b130:	4313      	orrs	r3, r2
 800b132:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	697a      	ldr	r2, [r7, #20]
 800b138:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	68fa      	ldr	r2, [r7, #12]
 800b13e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	685a      	ldr	r2, [r3, #4]
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	693a      	ldr	r2, [r7, #16]
 800b14c:	621a      	str	r2, [r3, #32]
}
 800b14e:	bf00      	nop
 800b150:	371c      	adds	r7, #28
 800b152:	46bd      	mov	sp, r7
 800b154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b158:	4770      	bx	lr
 800b15a:	bf00      	nop
 800b15c:	40010000 	.word	0x40010000
 800b160:	40010400 	.word	0x40010400
 800b164:	40014000 	.word	0x40014000
 800b168:	40014400 	.word	0x40014400
 800b16c:	40014800 	.word	0x40014800

0800b170 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b170:	b480      	push	{r7}
 800b172:	b087      	sub	sp, #28
 800b174:	af00      	add	r7, sp, #0
 800b176:	60f8      	str	r0, [r7, #12]
 800b178:	60b9      	str	r1, [r7, #8]
 800b17a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	6a1b      	ldr	r3, [r3, #32]
 800b180:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	6a1b      	ldr	r3, [r3, #32]
 800b186:	f023 0201 	bic.w	r2, r3, #1
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	699b      	ldr	r3, [r3, #24]
 800b192:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b194:	693b      	ldr	r3, [r7, #16]
 800b196:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b19a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	011b      	lsls	r3, r3, #4
 800b1a0:	693a      	ldr	r2, [r7, #16]
 800b1a2:	4313      	orrs	r3, r2
 800b1a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b1a6:	697b      	ldr	r3, [r7, #20]
 800b1a8:	f023 030a 	bic.w	r3, r3, #10
 800b1ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b1ae:	697a      	ldr	r2, [r7, #20]
 800b1b0:	68bb      	ldr	r3, [r7, #8]
 800b1b2:	4313      	orrs	r3, r2
 800b1b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	693a      	ldr	r2, [r7, #16]
 800b1ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	697a      	ldr	r2, [r7, #20]
 800b1c0:	621a      	str	r2, [r3, #32]
}
 800b1c2:	bf00      	nop
 800b1c4:	371c      	adds	r7, #28
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1cc:	4770      	bx	lr

0800b1ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b1ce:	b480      	push	{r7}
 800b1d0:	b087      	sub	sp, #28
 800b1d2:	af00      	add	r7, sp, #0
 800b1d4:	60f8      	str	r0, [r7, #12]
 800b1d6:	60b9      	str	r1, [r7, #8]
 800b1d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	6a1b      	ldr	r3, [r3, #32]
 800b1de:	f023 0210 	bic.w	r2, r3, #16
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	699b      	ldr	r3, [r3, #24]
 800b1ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	6a1b      	ldr	r3, [r3, #32]
 800b1f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b1f2:	697b      	ldr	r3, [r7, #20]
 800b1f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b1f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	031b      	lsls	r3, r3, #12
 800b1fe:	697a      	ldr	r2, [r7, #20]
 800b200:	4313      	orrs	r3, r2
 800b202:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b204:	693b      	ldr	r3, [r7, #16]
 800b206:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b20a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	011b      	lsls	r3, r3, #4
 800b210:	693a      	ldr	r2, [r7, #16]
 800b212:	4313      	orrs	r3, r2
 800b214:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	697a      	ldr	r2, [r7, #20]
 800b21a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	693a      	ldr	r2, [r7, #16]
 800b220:	621a      	str	r2, [r3, #32]
}
 800b222:	bf00      	nop
 800b224:	371c      	adds	r7, #28
 800b226:	46bd      	mov	sp, r7
 800b228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22c:	4770      	bx	lr
	...

0800b230 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b230:	b480      	push	{r7}
 800b232:	b085      	sub	sp, #20
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
 800b238:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	689b      	ldr	r3, [r3, #8]
 800b23e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b240:	68fa      	ldr	r2, [r7, #12]
 800b242:	4b09      	ldr	r3, [pc, #36]	; (800b268 <TIM_ITRx_SetConfig+0x38>)
 800b244:	4013      	ands	r3, r2
 800b246:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b248:	683a      	ldr	r2, [r7, #0]
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	4313      	orrs	r3, r2
 800b24e:	f043 0307 	orr.w	r3, r3, #7
 800b252:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	68fa      	ldr	r2, [r7, #12]
 800b258:	609a      	str	r2, [r3, #8]
}
 800b25a:	bf00      	nop
 800b25c:	3714      	adds	r7, #20
 800b25e:	46bd      	mov	sp, r7
 800b260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b264:	4770      	bx	lr
 800b266:	bf00      	nop
 800b268:	ffcfff8f 	.word	0xffcfff8f

0800b26c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b26c:	b480      	push	{r7}
 800b26e:	b087      	sub	sp, #28
 800b270:	af00      	add	r7, sp, #0
 800b272:	60f8      	str	r0, [r7, #12]
 800b274:	60b9      	str	r1, [r7, #8]
 800b276:	607a      	str	r2, [r7, #4]
 800b278:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	689b      	ldr	r3, [r3, #8]
 800b27e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b280:	697b      	ldr	r3, [r7, #20]
 800b282:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b286:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b288:	683b      	ldr	r3, [r7, #0]
 800b28a:	021a      	lsls	r2, r3, #8
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	431a      	orrs	r2, r3
 800b290:	68bb      	ldr	r3, [r7, #8]
 800b292:	4313      	orrs	r3, r2
 800b294:	697a      	ldr	r2, [r7, #20]
 800b296:	4313      	orrs	r3, r2
 800b298:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	697a      	ldr	r2, [r7, #20]
 800b29e:	609a      	str	r2, [r3, #8]
}
 800b2a0:	bf00      	nop
 800b2a2:	371c      	adds	r7, #28
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2aa:	4770      	bx	lr

0800b2ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b2ac:	b480      	push	{r7}
 800b2ae:	b085      	sub	sp, #20
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
 800b2b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b2bc:	2b01      	cmp	r3, #1
 800b2be:	d101      	bne.n	800b2c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b2c0:	2302      	movs	r3, #2
 800b2c2:	e068      	b.n	800b396 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2201      	movs	r2, #1
 800b2c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2202      	movs	r2, #2
 800b2d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	685b      	ldr	r3, [r3, #4]
 800b2da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	689b      	ldr	r3, [r3, #8]
 800b2e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	4a2e      	ldr	r2, [pc, #184]	; (800b3a4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b2ea:	4293      	cmp	r3, r2
 800b2ec:	d004      	beq.n	800b2f8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	4a2d      	ldr	r2, [pc, #180]	; (800b3a8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b2f4:	4293      	cmp	r3, r2
 800b2f6:	d108      	bne.n	800b30a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b2fe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	685b      	ldr	r3, [r3, #4]
 800b304:	68fa      	ldr	r2, [r7, #12]
 800b306:	4313      	orrs	r3, r2
 800b308:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b310:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	68fa      	ldr	r2, [r7, #12]
 800b318:	4313      	orrs	r3, r2
 800b31a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	68fa      	ldr	r2, [r7, #12]
 800b322:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	4a1e      	ldr	r2, [pc, #120]	; (800b3a4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b32a:	4293      	cmp	r3, r2
 800b32c:	d01d      	beq.n	800b36a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b336:	d018      	beq.n	800b36a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	4a1b      	ldr	r2, [pc, #108]	; (800b3ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b33e:	4293      	cmp	r3, r2
 800b340:	d013      	beq.n	800b36a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	4a1a      	ldr	r2, [pc, #104]	; (800b3b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b348:	4293      	cmp	r3, r2
 800b34a:	d00e      	beq.n	800b36a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	4a18      	ldr	r2, [pc, #96]	; (800b3b4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b352:	4293      	cmp	r3, r2
 800b354:	d009      	beq.n	800b36a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	4a13      	ldr	r2, [pc, #76]	; (800b3a8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b35c:	4293      	cmp	r3, r2
 800b35e:	d004      	beq.n	800b36a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	4a14      	ldr	r2, [pc, #80]	; (800b3b8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b366:	4293      	cmp	r3, r2
 800b368:	d10c      	bne.n	800b384 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b36a:	68bb      	ldr	r3, [r7, #8]
 800b36c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b370:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	689b      	ldr	r3, [r3, #8]
 800b376:	68ba      	ldr	r2, [r7, #8]
 800b378:	4313      	orrs	r3, r2
 800b37a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	68ba      	ldr	r2, [r7, #8]
 800b382:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	2201      	movs	r2, #1
 800b388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	2200      	movs	r2, #0
 800b390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b394:	2300      	movs	r3, #0
}
 800b396:	4618      	mov	r0, r3
 800b398:	3714      	adds	r7, #20
 800b39a:	46bd      	mov	sp, r7
 800b39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a0:	4770      	bx	lr
 800b3a2:	bf00      	nop
 800b3a4:	40010000 	.word	0x40010000
 800b3a8:	40010400 	.word	0x40010400
 800b3ac:	40000400 	.word	0x40000400
 800b3b0:	40000800 	.word	0x40000800
 800b3b4:	40000c00 	.word	0x40000c00
 800b3b8:	40001800 	.word	0x40001800

0800b3bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b3bc:	b480      	push	{r7}
 800b3be:	b085      	sub	sp, #20
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
 800b3c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b3d0:	2b01      	cmp	r3, #1
 800b3d2:	d101      	bne.n	800b3d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b3d4:	2302      	movs	r3, #2
 800b3d6:	e065      	b.n	800b4a4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2201      	movs	r2, #1
 800b3dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	68db      	ldr	r3, [r3, #12]
 800b3ea:	4313      	orrs	r3, r2
 800b3ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b3f4:	683b      	ldr	r3, [r7, #0]
 800b3f6:	689b      	ldr	r3, [r3, #8]
 800b3f8:	4313      	orrs	r3, r2
 800b3fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	685b      	ldr	r3, [r3, #4]
 800b406:	4313      	orrs	r3, r2
 800b408:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	4313      	orrs	r3, r2
 800b416:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b41e:	683b      	ldr	r3, [r7, #0]
 800b420:	691b      	ldr	r3, [r3, #16]
 800b422:	4313      	orrs	r3, r2
 800b424:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b42c:	683b      	ldr	r3, [r7, #0]
 800b42e:	695b      	ldr	r3, [r3, #20]
 800b430:	4313      	orrs	r3, r2
 800b432:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b43e:	4313      	orrs	r3, r2
 800b440:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	699b      	ldr	r3, [r3, #24]
 800b44c:	041b      	lsls	r3, r3, #16
 800b44e:	4313      	orrs	r3, r2
 800b450:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	4a16      	ldr	r2, [pc, #88]	; (800b4b0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b458:	4293      	cmp	r3, r2
 800b45a:	d004      	beq.n	800b466 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	4a14      	ldr	r2, [pc, #80]	; (800b4b4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b462:	4293      	cmp	r3, r2
 800b464:	d115      	bne.n	800b492 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b46c:	683b      	ldr	r3, [r7, #0]
 800b46e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b470:	051b      	lsls	r3, r3, #20
 800b472:	4313      	orrs	r3, r2
 800b474:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b47c:	683b      	ldr	r3, [r7, #0]
 800b47e:	69db      	ldr	r3, [r3, #28]
 800b480:	4313      	orrs	r3, r2
 800b482:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	6a1b      	ldr	r3, [r3, #32]
 800b48e:	4313      	orrs	r3, r2
 800b490:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	68fa      	ldr	r2, [r7, #12]
 800b498:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	2200      	movs	r2, #0
 800b49e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b4a2:	2300      	movs	r3, #0
}
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	3714      	adds	r7, #20
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ae:	4770      	bx	lr
 800b4b0:	40010000 	.word	0x40010000
 800b4b4:	40010400 	.word	0x40010400

0800b4b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b4b8:	b480      	push	{r7}
 800b4ba:	b083      	sub	sp, #12
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b4c0:	bf00      	nop
 800b4c2:	370c      	adds	r7, #12
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ca:	4770      	bx	lr

0800b4cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b4cc:	b480      	push	{r7}
 800b4ce:	b083      	sub	sp, #12
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b4d4:	bf00      	nop
 800b4d6:	370c      	adds	r7, #12
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4de:	4770      	bx	lr

0800b4e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b4e0:	b480      	push	{r7}
 800b4e2:	b083      	sub	sp, #12
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b4e8:	bf00      	nop
 800b4ea:	370c      	adds	r7, #12
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f2:	4770      	bx	lr

0800b4f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b082      	sub	sp, #8
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d101      	bne.n	800b506 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b502:	2301      	movs	r3, #1
 800b504:	e042      	b.n	800b58c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d106      	bne.n	800b51e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	2200      	movs	r2, #0
 800b514:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b518:	6878      	ldr	r0, [r7, #4]
 800b51a:	f7f6 fad9 	bl	8001ad0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	2224      	movs	r2, #36	; 0x24
 800b522:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	681a      	ldr	r2, [r3, #0]
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	f022 0201 	bic.w	r2, r2, #1
 800b534:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f000 fbc6 	bl	800bcc8 <UART_SetConfig>
 800b53c:	4603      	mov	r3, r0
 800b53e:	2b01      	cmp	r3, #1
 800b540:	d101      	bne.n	800b546 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b542:	2301      	movs	r3, #1
 800b544:	e022      	b.n	800b58c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d002      	beq.n	800b554 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b54e:	6878      	ldr	r0, [r7, #4]
 800b550:	f001 f924 	bl	800c79c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	685a      	ldr	r2, [r3, #4]
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b562:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	689a      	ldr	r2, [r3, #8]
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b572:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	681a      	ldr	r2, [r3, #0]
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	f042 0201 	orr.w	r2, r2, #1
 800b582:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b584:	6878      	ldr	r0, [r7, #4]
 800b586:	f001 f9ab 	bl	800c8e0 <UART_CheckIdleState>
 800b58a:	4603      	mov	r3, r0
}
 800b58c:	4618      	mov	r0, r3
 800b58e:	3708      	adds	r7, #8
 800b590:	46bd      	mov	sp, r7
 800b592:	bd80      	pop	{r7, pc}

0800b594 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b594:	b580      	push	{r7, lr}
 800b596:	b084      	sub	sp, #16
 800b598:	af00      	add	r7, sp, #0
 800b59a:	60f8      	str	r0, [r7, #12]
 800b59c:	60b9      	str	r1, [r7, #8]
 800b59e:	4613      	mov	r3, r2
 800b5a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5a8:	2b20      	cmp	r3, #32
 800b5aa:	d131      	bne.n	800b610 <HAL_UART_Receive_DMA+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800b5ac:	68bb      	ldr	r3, [r7, #8]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d002      	beq.n	800b5b8 <HAL_UART_Receive_DMA+0x24>
 800b5b2:	88fb      	ldrh	r3, [r7, #6]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d101      	bne.n	800b5bc <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800b5b8:	2301      	movs	r3, #1
 800b5ba:	e02a      	b.n	800b612 <HAL_UART_Receive_DMA+0x7e>
    }

    __HAL_LOCK(huart);
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b5c2:	2b01      	cmp	r3, #1
 800b5c4:	d101      	bne.n	800b5ca <HAL_UART_Receive_DMA+0x36>
 800b5c6:	2302      	movs	r3, #2
 800b5c8:	e023      	b.n	800b612 <HAL_UART_Receive_DMA+0x7e>
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	2201      	movs	r2, #1
 800b5ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	4a0f      	ldr	r2, [pc, #60]	; (800b61c <HAL_UART_Receive_DMA+0x88>)
 800b5de:	4293      	cmp	r3, r2
 800b5e0:	d00e      	beq.n	800b600 <HAL_UART_Receive_DMA+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	685b      	ldr	r3, [r3, #4]
 800b5e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d007      	beq.n	800b600 <HAL_UART_Receive_DMA+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	681a      	ldr	r2, [r3, #0]
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800b5fe:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b600:	88fb      	ldrh	r3, [r7, #6]
 800b602:	461a      	mov	r2, r3
 800b604:	68b9      	ldr	r1, [r7, #8]
 800b606:	68f8      	ldr	r0, [r7, #12]
 800b608:	f001 fa36 	bl	800ca78 <UART_Start_Receive_DMA>
 800b60c:	4603      	mov	r3, r0
 800b60e:	e000      	b.n	800b612 <HAL_UART_Receive_DMA+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800b610:	2302      	movs	r3, #2
  }
}
 800b612:	4618      	mov	r0, r3
 800b614:	3710      	adds	r7, #16
 800b616:	46bd      	mov	sp, r7
 800b618:	bd80      	pop	{r7, pc}
 800b61a:	bf00      	nop
 800b61c:	58000c00 	.word	0x58000c00

0800b620 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b084      	sub	sp, #16
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b62e:	60fb      	str	r3, [r7, #12]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b636:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	689b      	ldr	r3, [r3, #8]
 800b63e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b642:	2b80      	cmp	r3, #128	; 0x80
 800b644:	d127      	bne.n	800b696 <HAL_UART_DMAStop+0x76>
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	2b21      	cmp	r3, #33	; 0x21
 800b64a:	d124      	bne.n	800b696 <HAL_UART_DMAStop+0x76>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	689a      	ldr	r2, [r3, #8]
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b65a:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b660:	2b00      	cmp	r3, #0
 800b662:	d015      	beq.n	800b690 <HAL_UART_DMAStop+0x70>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b668:	4618      	mov	r0, r3
 800b66a:	f7f7 fbd3 	bl	8002e14 <HAL_DMA_Abort>
 800b66e:	4603      	mov	r3, r0
 800b670:	2b00      	cmp	r3, #0
 800b672:	d00d      	beq.n	800b690 <HAL_UART_DMAStop+0x70>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b678:	4618      	mov	r0, r3
 800b67a:	f7f9 f867 	bl	800474c <HAL_DMA_GetError>
 800b67e:	4603      	mov	r3, r0
 800b680:	2b20      	cmp	r3, #32
 800b682:	d105      	bne.n	800b690 <HAL_UART_DMAStop+0x70>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2210      	movs	r2, #16
 800b688:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 800b68c:	2303      	movs	r3, #3
 800b68e:	e032      	b.n	800b6f6 <HAL_UART_DMAStop+0xd6>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800b690:	6878      	ldr	r0, [r7, #4]
 800b692:	f001 fa5f 	bl	800cb54 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	689b      	ldr	r3, [r3, #8]
 800b69c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6a0:	2b40      	cmp	r3, #64	; 0x40
 800b6a2:	d127      	bne.n	800b6f4 <HAL_UART_DMAStop+0xd4>
 800b6a4:	68bb      	ldr	r3, [r7, #8]
 800b6a6:	2b22      	cmp	r3, #34	; 0x22
 800b6a8:	d124      	bne.n	800b6f4 <HAL_UART_DMAStop+0xd4>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	689a      	ldr	r2, [r3, #8]
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b6b8:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d015      	beq.n	800b6ee <HAL_UART_DMAStop+0xce>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	f7f7 fba4 	bl	8002e14 <HAL_DMA_Abort>
 800b6cc:	4603      	mov	r3, r0
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d00d      	beq.n	800b6ee <HAL_UART_DMAStop+0xce>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	f7f9 f838 	bl	800474c <HAL_DMA_GetError>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	2b20      	cmp	r3, #32
 800b6e0:	d105      	bne.n	800b6ee <HAL_UART_DMAStop+0xce>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	2210      	movs	r2, #16
 800b6e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 800b6ea:	2303      	movs	r3, #3
 800b6ec:	e003      	b.n	800b6f6 <HAL_UART_DMAStop+0xd6>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f001 fa4e 	bl	800cb90 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800b6f4:	2300      	movs	r3, #0
}
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	3710      	adds	r7, #16
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	bd80      	pop	{r7, pc}
	...

0800b700 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b088      	sub	sp, #32
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	69db      	ldr	r3, [r3, #28]
 800b70e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	689b      	ldr	r3, [r3, #8]
 800b71e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b720:	69fa      	ldr	r2, [r7, #28]
 800b722:	f640 030f 	movw	r3, #2063	; 0x80f
 800b726:	4013      	ands	r3, r2
 800b728:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800b72a:	693b      	ldr	r3, [r7, #16]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d118      	bne.n	800b762 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b730:	69fb      	ldr	r3, [r7, #28]
 800b732:	f003 0320 	and.w	r3, r3, #32
 800b736:	2b00      	cmp	r3, #0
 800b738:	d013      	beq.n	800b762 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b73a:	69bb      	ldr	r3, [r7, #24]
 800b73c:	f003 0320 	and.w	r3, r3, #32
 800b740:	2b00      	cmp	r3, #0
 800b742:	d104      	bne.n	800b74e <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b744:	697b      	ldr	r3, [r7, #20]
 800b746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d009      	beq.n	800b762 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b752:	2b00      	cmp	r3, #0
 800b754:	f000 8282 	beq.w	800bc5c <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b75c:	6878      	ldr	r0, [r7, #4]
 800b75e:	4798      	blx	r3
      }
      return;
 800b760:	e27c      	b.n	800bc5c <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b762:	693b      	ldr	r3, [r7, #16]
 800b764:	2b00      	cmp	r3, #0
 800b766:	f000 80ef 	beq.w	800b948 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b76a:	697a      	ldr	r2, [r7, #20]
 800b76c:	4b73      	ldr	r3, [pc, #460]	; (800b93c <HAL_UART_IRQHandler+0x23c>)
 800b76e:	4013      	ands	r3, r2
 800b770:	2b00      	cmp	r3, #0
 800b772:	d105      	bne.n	800b780 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b774:	69ba      	ldr	r2, [r7, #24]
 800b776:	4b72      	ldr	r3, [pc, #456]	; (800b940 <HAL_UART_IRQHandler+0x240>)
 800b778:	4013      	ands	r3, r2
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	f000 80e4 	beq.w	800b948 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b780:	69fb      	ldr	r3, [r7, #28]
 800b782:	f003 0301 	and.w	r3, r3, #1
 800b786:	2b00      	cmp	r3, #0
 800b788:	d010      	beq.n	800b7ac <HAL_UART_IRQHandler+0xac>
 800b78a:	69bb      	ldr	r3, [r7, #24]
 800b78c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b790:	2b00      	cmp	r3, #0
 800b792:	d00b      	beq.n	800b7ac <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	2201      	movs	r2, #1
 800b79a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b7a2:	f043 0201 	orr.w	r2, r3, #1
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b7ac:	69fb      	ldr	r3, [r7, #28]
 800b7ae:	f003 0302 	and.w	r3, r3, #2
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d010      	beq.n	800b7d8 <HAL_UART_IRQHandler+0xd8>
 800b7b6:	697b      	ldr	r3, [r7, #20]
 800b7b8:	f003 0301 	and.w	r3, r3, #1
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d00b      	beq.n	800b7d8 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	2202      	movs	r2, #2
 800b7c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b7ce:	f043 0204 	orr.w	r2, r3, #4
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b7d8:	69fb      	ldr	r3, [r7, #28]
 800b7da:	f003 0304 	and.w	r3, r3, #4
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d010      	beq.n	800b804 <HAL_UART_IRQHandler+0x104>
 800b7e2:	697b      	ldr	r3, [r7, #20]
 800b7e4:	f003 0301 	and.w	r3, r3, #1
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d00b      	beq.n	800b804 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	2204      	movs	r2, #4
 800b7f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b7fa:	f043 0202 	orr.w	r2, r3, #2
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b804:	69fb      	ldr	r3, [r7, #28]
 800b806:	f003 0308 	and.w	r3, r3, #8
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d015      	beq.n	800b83a <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b80e:	69bb      	ldr	r3, [r7, #24]
 800b810:	f003 0320 	and.w	r3, r3, #32
 800b814:	2b00      	cmp	r3, #0
 800b816:	d104      	bne.n	800b822 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b818:	697a      	ldr	r2, [r7, #20]
 800b81a:	4b48      	ldr	r3, [pc, #288]	; (800b93c <HAL_UART_IRQHandler+0x23c>)
 800b81c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d00b      	beq.n	800b83a <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	2208      	movs	r2, #8
 800b828:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b830:	f043 0208 	orr.w	r2, r3, #8
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b83a:	69fb      	ldr	r3, [r7, #28]
 800b83c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b840:	2b00      	cmp	r3, #0
 800b842:	d011      	beq.n	800b868 <HAL_UART_IRQHandler+0x168>
 800b844:	69bb      	ldr	r3, [r7, #24]
 800b846:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d00c      	beq.n	800b868 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b856:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b85e:	f043 0220 	orr.w	r2, r3, #32
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b86e:	2b00      	cmp	r3, #0
 800b870:	f000 81f6 	beq.w	800bc60 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b874:	69fb      	ldr	r3, [r7, #28]
 800b876:	f003 0320 	and.w	r3, r3, #32
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d011      	beq.n	800b8a2 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b87e:	69bb      	ldr	r3, [r7, #24]
 800b880:	f003 0320 	and.w	r3, r3, #32
 800b884:	2b00      	cmp	r3, #0
 800b886:	d104      	bne.n	800b892 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b888:	697b      	ldr	r3, [r7, #20]
 800b88a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d007      	beq.n	800b8a2 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b896:	2b00      	cmp	r3, #0
 800b898:	d003      	beq.n	800b8a2 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b89e:	6878      	ldr	r0, [r7, #4]
 800b8a0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b8a8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	689b      	ldr	r3, [r3, #8]
 800b8b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8b4:	2b40      	cmp	r3, #64	; 0x40
 800b8b6:	d004      	beq.n	800b8c2 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d031      	beq.n	800b926 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b8c2:	6878      	ldr	r0, [r7, #4]
 800b8c4:	f001 f964 	bl	800cb90 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	689b      	ldr	r3, [r3, #8]
 800b8ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8d2:	2b40      	cmp	r3, #64	; 0x40
 800b8d4:	d123      	bne.n	800b91e <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	689a      	ldr	r2, [r3, #8]
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b8e4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d013      	beq.n	800b916 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b8f2:	4a14      	ldr	r2, [pc, #80]	; (800b944 <HAL_UART_IRQHandler+0x244>)
 800b8f4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	f7f7 fda8 	bl	8003450 <HAL_DMA_Abort_IT>
 800b900:	4603      	mov	r3, r0
 800b902:	2b00      	cmp	r3, #0
 800b904:	d017      	beq.n	800b936 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b90a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b90c:	687a      	ldr	r2, [r7, #4]
 800b90e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800b910:	4610      	mov	r0, r2
 800b912:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b914:	e00f      	b.n	800b936 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b916:	6878      	ldr	r0, [r7, #4]
 800b918:	f000 f9c0 	bl	800bc9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b91c:	e00b      	b.n	800b936 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b91e:	6878      	ldr	r0, [r7, #4]
 800b920:	f000 f9bc 	bl	800bc9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b924:	e007      	b.n	800b936 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b926:	6878      	ldr	r0, [r7, #4]
 800b928:	f000 f9b8 	bl	800bc9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2200      	movs	r2, #0
 800b930:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800b934:	e194      	b.n	800bc60 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b936:	bf00      	nop
    return;
 800b938:	e192      	b.n	800bc60 <HAL_UART_IRQHandler+0x560>
 800b93a:	bf00      	nop
 800b93c:	10000001 	.word	0x10000001
 800b940:	04000120 	.word	0x04000120
 800b944:	0800cd43 	.word	0x0800cd43

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b94c:	2b01      	cmp	r3, #1
 800b94e:	f040 810f 	bne.w	800bb70 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b952:	69fb      	ldr	r3, [r7, #28]
 800b954:	f003 0310 	and.w	r3, r3, #16
 800b958:	2b00      	cmp	r3, #0
 800b95a:	f000 8109 	beq.w	800bb70 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b95e:	69bb      	ldr	r3, [r7, #24]
 800b960:	f003 0310 	and.w	r3, r3, #16
 800b964:	2b00      	cmp	r3, #0
 800b966:	f000 8103 	beq.w	800bb70 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	2210      	movs	r2, #16
 800b970:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	689b      	ldr	r3, [r3, #8]
 800b978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b97c:	2b40      	cmp	r3, #64	; 0x40
 800b97e:	f040 80bb 	bne.w	800baf8 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	4a8f      	ldr	r2, [pc, #572]	; (800bbc8 <HAL_UART_IRQHandler+0x4c8>)
 800b98a:	4293      	cmp	r3, r2
 800b98c:	d059      	beq.n	800ba42 <HAL_UART_IRQHandler+0x342>
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	4a8d      	ldr	r2, [pc, #564]	; (800bbcc <HAL_UART_IRQHandler+0x4cc>)
 800b996:	4293      	cmp	r3, r2
 800b998:	d053      	beq.n	800ba42 <HAL_UART_IRQHandler+0x342>
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	4a8b      	ldr	r2, [pc, #556]	; (800bbd0 <HAL_UART_IRQHandler+0x4d0>)
 800b9a2:	4293      	cmp	r3, r2
 800b9a4:	d04d      	beq.n	800ba42 <HAL_UART_IRQHandler+0x342>
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	4a89      	ldr	r2, [pc, #548]	; (800bbd4 <HAL_UART_IRQHandler+0x4d4>)
 800b9ae:	4293      	cmp	r3, r2
 800b9b0:	d047      	beq.n	800ba42 <HAL_UART_IRQHandler+0x342>
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	4a87      	ldr	r2, [pc, #540]	; (800bbd8 <HAL_UART_IRQHandler+0x4d8>)
 800b9ba:	4293      	cmp	r3, r2
 800b9bc:	d041      	beq.n	800ba42 <HAL_UART_IRQHandler+0x342>
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	4a85      	ldr	r2, [pc, #532]	; (800bbdc <HAL_UART_IRQHandler+0x4dc>)
 800b9c6:	4293      	cmp	r3, r2
 800b9c8:	d03b      	beq.n	800ba42 <HAL_UART_IRQHandler+0x342>
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	4a83      	ldr	r2, [pc, #524]	; (800bbe0 <HAL_UART_IRQHandler+0x4e0>)
 800b9d2:	4293      	cmp	r3, r2
 800b9d4:	d035      	beq.n	800ba42 <HAL_UART_IRQHandler+0x342>
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	4a81      	ldr	r2, [pc, #516]	; (800bbe4 <HAL_UART_IRQHandler+0x4e4>)
 800b9de:	4293      	cmp	r3, r2
 800b9e0:	d02f      	beq.n	800ba42 <HAL_UART_IRQHandler+0x342>
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	4a7f      	ldr	r2, [pc, #508]	; (800bbe8 <HAL_UART_IRQHandler+0x4e8>)
 800b9ea:	4293      	cmp	r3, r2
 800b9ec:	d029      	beq.n	800ba42 <HAL_UART_IRQHandler+0x342>
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	4a7d      	ldr	r2, [pc, #500]	; (800bbec <HAL_UART_IRQHandler+0x4ec>)
 800b9f6:	4293      	cmp	r3, r2
 800b9f8:	d023      	beq.n	800ba42 <HAL_UART_IRQHandler+0x342>
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	4a7b      	ldr	r2, [pc, #492]	; (800bbf0 <HAL_UART_IRQHandler+0x4f0>)
 800ba02:	4293      	cmp	r3, r2
 800ba04:	d01d      	beq.n	800ba42 <HAL_UART_IRQHandler+0x342>
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	4a79      	ldr	r2, [pc, #484]	; (800bbf4 <HAL_UART_IRQHandler+0x4f4>)
 800ba0e:	4293      	cmp	r3, r2
 800ba10:	d017      	beq.n	800ba42 <HAL_UART_IRQHandler+0x342>
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	4a77      	ldr	r2, [pc, #476]	; (800bbf8 <HAL_UART_IRQHandler+0x4f8>)
 800ba1a:	4293      	cmp	r3, r2
 800ba1c:	d011      	beq.n	800ba42 <HAL_UART_IRQHandler+0x342>
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	4a75      	ldr	r2, [pc, #468]	; (800bbfc <HAL_UART_IRQHandler+0x4fc>)
 800ba26:	4293      	cmp	r3, r2
 800ba28:	d00b      	beq.n	800ba42 <HAL_UART_IRQHandler+0x342>
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	4a73      	ldr	r2, [pc, #460]	; (800bc00 <HAL_UART_IRQHandler+0x500>)
 800ba32:	4293      	cmp	r3, r2
 800ba34:	d005      	beq.n	800ba42 <HAL_UART_IRQHandler+0x342>
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	4a71      	ldr	r2, [pc, #452]	; (800bc04 <HAL_UART_IRQHandler+0x504>)
 800ba3e:	4293      	cmp	r3, r2
 800ba40:	d105      	bne.n	800ba4e <HAL_UART_IRQHandler+0x34e>
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	685b      	ldr	r3, [r3, #4]
 800ba4a:	b29b      	uxth	r3, r3
 800ba4c:	e004      	b.n	800ba58 <HAL_UART_IRQHandler+0x358>
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	685b      	ldr	r3, [r3, #4]
 800ba56:	b29b      	uxth	r3, r3
 800ba58:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800ba5a:	893b      	ldrh	r3, [r7, #8]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	f000 8101 	beq.w	800bc64 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ba68:	893a      	ldrh	r2, [r7, #8]
 800ba6a:	429a      	cmp	r2, r3
 800ba6c:	f080 80fa 	bcs.w	800bc64 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	893a      	ldrh	r2, [r7, #8]
 800ba74:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ba7c:	69db      	ldr	r3, [r3, #28]
 800ba7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba82:	d02b      	beq.n	800badc <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	681a      	ldr	r2, [r3, #0]
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ba92:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	689a      	ldr	r2, [r3, #8]
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	f022 0201 	bic.w	r2, r2, #1
 800baa2:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	689a      	ldr	r2, [r3, #8]
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bab2:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	2220      	movs	r2, #32
 800bab8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2200      	movs	r2, #0
 800bac0:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	681a      	ldr	r2, [r3, #0]
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	f022 0210 	bic.w	r2, r2, #16
 800bad0:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bad6:	4618      	mov	r0, r3
 800bad8:	f7f7 f99c 	bl	8002e14 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bae8:	b29b      	uxth	r3, r3
 800baea:	1ad3      	subs	r3, r2, r3
 800baec:	b29b      	uxth	r3, r3
 800baee:	4619      	mov	r1, r3
 800baf0:	6878      	ldr	r0, [r7, #4]
 800baf2:	f000 f8dd 	bl	800bcb0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800baf6:	e0b5      	b.n	800bc64 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bb04:	b29b      	uxth	r3, r3
 800bb06:	1ad3      	subs	r3, r2, r3
 800bb08:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bb10:	b29b      	uxth	r3, r3
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	f000 80a8 	beq.w	800bc68 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 800bb18:	897b      	ldrh	r3, [r7, #10]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	f000 80a4 	beq.w	800bc68 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	681a      	ldr	r2, [r3, #0]
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800bb2e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	6899      	ldr	r1, [r3, #8]
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681a      	ldr	r2, [r3, #0]
 800bb3a:	4b33      	ldr	r3, [pc, #204]	; (800bc08 <HAL_UART_IRQHandler+0x508>)
 800bb3c:	400b      	ands	r3, r1
 800bb3e:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2220      	movs	r2, #32
 800bb44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	2200      	movs	r2, #0
 800bb52:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	681a      	ldr	r2, [r3, #0]
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	f022 0210 	bic.w	r2, r2, #16
 800bb62:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bb64:	897b      	ldrh	r3, [r7, #10]
 800bb66:	4619      	mov	r1, r3
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	f000 f8a1 	bl	800bcb0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bb6e:	e07b      	b.n	800bc68 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800bb70:	69fb      	ldr	r3, [r7, #28]
 800bb72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d00d      	beq.n	800bb96 <HAL_UART_IRQHandler+0x496>
 800bb7a:	697b      	ldr	r3, [r7, #20]
 800bb7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d008      	beq.n	800bb96 <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800bb8c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800bb8e:	6878      	ldr	r0, [r7, #4]
 800bb90:	f001 f907 	bl	800cda2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bb94:	e06b      	b.n	800bc6e <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800bb96:	69fb      	ldr	r3, [r7, #28]
 800bb98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d035      	beq.n	800bc0c <HAL_UART_IRQHandler+0x50c>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800bba0:	69bb      	ldr	r3, [r7, #24]
 800bba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d104      	bne.n	800bbb4 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800bbaa:	697b      	ldr	r3, [r7, #20]
 800bbac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d02b      	beq.n	800bc0c <HAL_UART_IRQHandler+0x50c>
  {
    if (huart->TxISR != NULL)
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d057      	beq.n	800bc6c <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bbc0:	6878      	ldr	r0, [r7, #4]
 800bbc2:	4798      	blx	r3
    }
    return;
 800bbc4:	e052      	b.n	800bc6c <HAL_UART_IRQHandler+0x56c>
 800bbc6:	bf00      	nop
 800bbc8:	40020010 	.word	0x40020010
 800bbcc:	40020028 	.word	0x40020028
 800bbd0:	40020040 	.word	0x40020040
 800bbd4:	40020058 	.word	0x40020058
 800bbd8:	40020070 	.word	0x40020070
 800bbdc:	40020088 	.word	0x40020088
 800bbe0:	400200a0 	.word	0x400200a0
 800bbe4:	400200b8 	.word	0x400200b8
 800bbe8:	40020410 	.word	0x40020410
 800bbec:	40020428 	.word	0x40020428
 800bbf0:	40020440 	.word	0x40020440
 800bbf4:	40020458 	.word	0x40020458
 800bbf8:	40020470 	.word	0x40020470
 800bbfc:	40020488 	.word	0x40020488
 800bc00:	400204a0 	.word	0x400204a0
 800bc04:	400204b8 	.word	0x400204b8
 800bc08:	effffffe 	.word	0xeffffffe
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bc0c:	69fb      	ldr	r3, [r7, #28]
 800bc0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d008      	beq.n	800bc28 <HAL_UART_IRQHandler+0x528>
 800bc16:	69bb      	ldr	r3, [r7, #24]
 800bc18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d003      	beq.n	800bc28 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800bc20:	6878      	ldr	r0, [r7, #4]
 800bc22:	f001 f8a4 	bl	800cd6e <UART_EndTransmit_IT>
    return;
 800bc26:	e022      	b.n	800bc6e <HAL_UART_IRQHandler+0x56e>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800bc28:	69fb      	ldr	r3, [r7, #28]
 800bc2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d008      	beq.n	800bc44 <HAL_UART_IRQHandler+0x544>
 800bc32:	69bb      	ldr	r3, [r7, #24]
 800bc34:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d003      	beq.n	800bc44 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800bc3c:	6878      	ldr	r0, [r7, #4]
 800bc3e:	f001 f8c4 	bl	800cdca <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bc42:	e014      	b.n	800bc6e <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800bc44:	69fb      	ldr	r3, [r7, #28]
 800bc46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d00f      	beq.n	800bc6e <HAL_UART_IRQHandler+0x56e>
 800bc4e:	69bb      	ldr	r3, [r7, #24]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	da0c      	bge.n	800bc6e <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800bc54:	6878      	ldr	r0, [r7, #4]
 800bc56:	f001 f8ae 	bl	800cdb6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bc5a:	e008      	b.n	800bc6e <HAL_UART_IRQHandler+0x56e>
      return;
 800bc5c:	bf00      	nop
 800bc5e:	e006      	b.n	800bc6e <HAL_UART_IRQHandler+0x56e>
    return;
 800bc60:	bf00      	nop
 800bc62:	e004      	b.n	800bc6e <HAL_UART_IRQHandler+0x56e>
      return;
 800bc64:	bf00      	nop
 800bc66:	e002      	b.n	800bc6e <HAL_UART_IRQHandler+0x56e>
      return;
 800bc68:	bf00      	nop
 800bc6a:	e000      	b.n	800bc6e <HAL_UART_IRQHandler+0x56e>
    return;
 800bc6c:	bf00      	nop
  }
}
 800bc6e:	3720      	adds	r7, #32
 800bc70:	46bd      	mov	sp, r7
 800bc72:	bd80      	pop	{r7, pc}

0800bc74 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bc74:	b480      	push	{r7}
 800bc76:	b083      	sub	sp, #12
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800bc7c:	bf00      	nop
 800bc7e:	370c      	adds	r7, #12
 800bc80:	46bd      	mov	sp, r7
 800bc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc86:	4770      	bx	lr

0800bc88 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bc88:	b480      	push	{r7}
 800bc8a:	b083      	sub	sp, #12
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800bc90:	bf00      	nop
 800bc92:	370c      	adds	r7, #12
 800bc94:	46bd      	mov	sp, r7
 800bc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9a:	4770      	bx	lr

0800bc9c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bc9c:	b480      	push	{r7}
 800bc9e:	b083      	sub	sp, #12
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bca4:	bf00      	nop
 800bca6:	370c      	adds	r7, #12
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcae:	4770      	bx	lr

0800bcb0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bcb0:	b480      	push	{r7}
 800bcb2:	b083      	sub	sp, #12
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]
 800bcb8:	460b      	mov	r3, r1
 800bcba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bcbc:	bf00      	nop
 800bcbe:	370c      	adds	r7, #12
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc6:	4770      	bx	lr

0800bcc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bcc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bccc:	b092      	sub	sp, #72	; 0x48
 800bcce:	af00      	add	r7, sp, #0
 800bcd0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bcd8:	697b      	ldr	r3, [r7, #20]
 800bcda:	689a      	ldr	r2, [r3, #8]
 800bcdc:	697b      	ldr	r3, [r7, #20]
 800bcde:	691b      	ldr	r3, [r3, #16]
 800bce0:	431a      	orrs	r2, r3
 800bce2:	697b      	ldr	r3, [r7, #20]
 800bce4:	695b      	ldr	r3, [r3, #20]
 800bce6:	431a      	orrs	r2, r3
 800bce8:	697b      	ldr	r3, [r7, #20]
 800bcea:	69db      	ldr	r3, [r3, #28]
 800bcec:	4313      	orrs	r3, r2
 800bcee:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bcf0:	697b      	ldr	r3, [r7, #20]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	681a      	ldr	r2, [r3, #0]
 800bcf6:	4bbe      	ldr	r3, [pc, #760]	; (800bff0 <UART_SetConfig+0x328>)
 800bcf8:	4013      	ands	r3, r2
 800bcfa:	697a      	ldr	r2, [r7, #20]
 800bcfc:	6812      	ldr	r2, [r2, #0]
 800bcfe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bd00:	430b      	orrs	r3, r1
 800bd02:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bd04:	697b      	ldr	r3, [r7, #20]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	685b      	ldr	r3, [r3, #4]
 800bd0a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bd0e:	697b      	ldr	r3, [r7, #20]
 800bd10:	68da      	ldr	r2, [r3, #12]
 800bd12:	697b      	ldr	r3, [r7, #20]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	430a      	orrs	r2, r1
 800bd18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bd1a:	697b      	ldr	r3, [r7, #20]
 800bd1c:	699b      	ldr	r3, [r3, #24]
 800bd1e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bd20:	697b      	ldr	r3, [r7, #20]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	4ab3      	ldr	r2, [pc, #716]	; (800bff4 <UART_SetConfig+0x32c>)
 800bd26:	4293      	cmp	r3, r2
 800bd28:	d004      	beq.n	800bd34 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bd2a:	697b      	ldr	r3, [r7, #20]
 800bd2c:	6a1b      	ldr	r3, [r3, #32]
 800bd2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bd30:	4313      	orrs	r3, r2
 800bd32:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bd34:	697b      	ldr	r3, [r7, #20]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	689a      	ldr	r2, [r3, #8]
 800bd3a:	4baf      	ldr	r3, [pc, #700]	; (800bff8 <UART_SetConfig+0x330>)
 800bd3c:	4013      	ands	r3, r2
 800bd3e:	697a      	ldr	r2, [r7, #20]
 800bd40:	6812      	ldr	r2, [r2, #0]
 800bd42:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bd44:	430b      	orrs	r3, r1
 800bd46:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bd48:	697b      	ldr	r3, [r7, #20]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd4e:	f023 010f 	bic.w	r1, r3, #15
 800bd52:	697b      	ldr	r3, [r7, #20]
 800bd54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bd56:	697b      	ldr	r3, [r7, #20]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	430a      	orrs	r2, r1
 800bd5c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bd5e:	697b      	ldr	r3, [r7, #20]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	4aa6      	ldr	r2, [pc, #664]	; (800bffc <UART_SetConfig+0x334>)
 800bd64:	4293      	cmp	r3, r2
 800bd66:	d177      	bne.n	800be58 <UART_SetConfig+0x190>
 800bd68:	4ba5      	ldr	r3, [pc, #660]	; (800c000 <UART_SetConfig+0x338>)
 800bd6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd6c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bd70:	2b28      	cmp	r3, #40	; 0x28
 800bd72:	d86d      	bhi.n	800be50 <UART_SetConfig+0x188>
 800bd74:	a201      	add	r2, pc, #4	; (adr r2, 800bd7c <UART_SetConfig+0xb4>)
 800bd76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd7a:	bf00      	nop
 800bd7c:	0800be21 	.word	0x0800be21
 800bd80:	0800be51 	.word	0x0800be51
 800bd84:	0800be51 	.word	0x0800be51
 800bd88:	0800be51 	.word	0x0800be51
 800bd8c:	0800be51 	.word	0x0800be51
 800bd90:	0800be51 	.word	0x0800be51
 800bd94:	0800be51 	.word	0x0800be51
 800bd98:	0800be51 	.word	0x0800be51
 800bd9c:	0800be29 	.word	0x0800be29
 800bda0:	0800be51 	.word	0x0800be51
 800bda4:	0800be51 	.word	0x0800be51
 800bda8:	0800be51 	.word	0x0800be51
 800bdac:	0800be51 	.word	0x0800be51
 800bdb0:	0800be51 	.word	0x0800be51
 800bdb4:	0800be51 	.word	0x0800be51
 800bdb8:	0800be51 	.word	0x0800be51
 800bdbc:	0800be31 	.word	0x0800be31
 800bdc0:	0800be51 	.word	0x0800be51
 800bdc4:	0800be51 	.word	0x0800be51
 800bdc8:	0800be51 	.word	0x0800be51
 800bdcc:	0800be51 	.word	0x0800be51
 800bdd0:	0800be51 	.word	0x0800be51
 800bdd4:	0800be51 	.word	0x0800be51
 800bdd8:	0800be51 	.word	0x0800be51
 800bddc:	0800be39 	.word	0x0800be39
 800bde0:	0800be51 	.word	0x0800be51
 800bde4:	0800be51 	.word	0x0800be51
 800bde8:	0800be51 	.word	0x0800be51
 800bdec:	0800be51 	.word	0x0800be51
 800bdf0:	0800be51 	.word	0x0800be51
 800bdf4:	0800be51 	.word	0x0800be51
 800bdf8:	0800be51 	.word	0x0800be51
 800bdfc:	0800be41 	.word	0x0800be41
 800be00:	0800be51 	.word	0x0800be51
 800be04:	0800be51 	.word	0x0800be51
 800be08:	0800be51 	.word	0x0800be51
 800be0c:	0800be51 	.word	0x0800be51
 800be10:	0800be51 	.word	0x0800be51
 800be14:	0800be51 	.word	0x0800be51
 800be18:	0800be51 	.word	0x0800be51
 800be1c:	0800be49 	.word	0x0800be49
 800be20:	2301      	movs	r3, #1
 800be22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be26:	e222      	b.n	800c26e <UART_SetConfig+0x5a6>
 800be28:	2304      	movs	r3, #4
 800be2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be2e:	e21e      	b.n	800c26e <UART_SetConfig+0x5a6>
 800be30:	2308      	movs	r3, #8
 800be32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be36:	e21a      	b.n	800c26e <UART_SetConfig+0x5a6>
 800be38:	2310      	movs	r3, #16
 800be3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be3e:	e216      	b.n	800c26e <UART_SetConfig+0x5a6>
 800be40:	2320      	movs	r3, #32
 800be42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be46:	e212      	b.n	800c26e <UART_SetConfig+0x5a6>
 800be48:	2340      	movs	r3, #64	; 0x40
 800be4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be4e:	e20e      	b.n	800c26e <UART_SetConfig+0x5a6>
 800be50:	2380      	movs	r3, #128	; 0x80
 800be52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be56:	e20a      	b.n	800c26e <UART_SetConfig+0x5a6>
 800be58:	697b      	ldr	r3, [r7, #20]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	4a69      	ldr	r2, [pc, #420]	; (800c004 <UART_SetConfig+0x33c>)
 800be5e:	4293      	cmp	r3, r2
 800be60:	d130      	bne.n	800bec4 <UART_SetConfig+0x1fc>
 800be62:	4b67      	ldr	r3, [pc, #412]	; (800c000 <UART_SetConfig+0x338>)
 800be64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be66:	f003 0307 	and.w	r3, r3, #7
 800be6a:	2b05      	cmp	r3, #5
 800be6c:	d826      	bhi.n	800bebc <UART_SetConfig+0x1f4>
 800be6e:	a201      	add	r2, pc, #4	; (adr r2, 800be74 <UART_SetConfig+0x1ac>)
 800be70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be74:	0800be8d 	.word	0x0800be8d
 800be78:	0800be95 	.word	0x0800be95
 800be7c:	0800be9d 	.word	0x0800be9d
 800be80:	0800bea5 	.word	0x0800bea5
 800be84:	0800bead 	.word	0x0800bead
 800be88:	0800beb5 	.word	0x0800beb5
 800be8c:	2300      	movs	r3, #0
 800be8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be92:	e1ec      	b.n	800c26e <UART_SetConfig+0x5a6>
 800be94:	2304      	movs	r3, #4
 800be96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be9a:	e1e8      	b.n	800c26e <UART_SetConfig+0x5a6>
 800be9c:	2308      	movs	r3, #8
 800be9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bea2:	e1e4      	b.n	800c26e <UART_SetConfig+0x5a6>
 800bea4:	2310      	movs	r3, #16
 800bea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800beaa:	e1e0      	b.n	800c26e <UART_SetConfig+0x5a6>
 800beac:	2320      	movs	r3, #32
 800beae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800beb2:	e1dc      	b.n	800c26e <UART_SetConfig+0x5a6>
 800beb4:	2340      	movs	r3, #64	; 0x40
 800beb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800beba:	e1d8      	b.n	800c26e <UART_SetConfig+0x5a6>
 800bebc:	2380      	movs	r3, #128	; 0x80
 800bebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bec2:	e1d4      	b.n	800c26e <UART_SetConfig+0x5a6>
 800bec4:	697b      	ldr	r3, [r7, #20]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	4a4f      	ldr	r2, [pc, #316]	; (800c008 <UART_SetConfig+0x340>)
 800beca:	4293      	cmp	r3, r2
 800becc:	d130      	bne.n	800bf30 <UART_SetConfig+0x268>
 800bece:	4b4c      	ldr	r3, [pc, #304]	; (800c000 <UART_SetConfig+0x338>)
 800bed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bed2:	f003 0307 	and.w	r3, r3, #7
 800bed6:	2b05      	cmp	r3, #5
 800bed8:	d826      	bhi.n	800bf28 <UART_SetConfig+0x260>
 800beda:	a201      	add	r2, pc, #4	; (adr r2, 800bee0 <UART_SetConfig+0x218>)
 800bedc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bee0:	0800bef9 	.word	0x0800bef9
 800bee4:	0800bf01 	.word	0x0800bf01
 800bee8:	0800bf09 	.word	0x0800bf09
 800beec:	0800bf11 	.word	0x0800bf11
 800bef0:	0800bf19 	.word	0x0800bf19
 800bef4:	0800bf21 	.word	0x0800bf21
 800bef8:	2300      	movs	r3, #0
 800befa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800befe:	e1b6      	b.n	800c26e <UART_SetConfig+0x5a6>
 800bf00:	2304      	movs	r3, #4
 800bf02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf06:	e1b2      	b.n	800c26e <UART_SetConfig+0x5a6>
 800bf08:	2308      	movs	r3, #8
 800bf0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf0e:	e1ae      	b.n	800c26e <UART_SetConfig+0x5a6>
 800bf10:	2310      	movs	r3, #16
 800bf12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf16:	e1aa      	b.n	800c26e <UART_SetConfig+0x5a6>
 800bf18:	2320      	movs	r3, #32
 800bf1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf1e:	e1a6      	b.n	800c26e <UART_SetConfig+0x5a6>
 800bf20:	2340      	movs	r3, #64	; 0x40
 800bf22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf26:	e1a2      	b.n	800c26e <UART_SetConfig+0x5a6>
 800bf28:	2380      	movs	r3, #128	; 0x80
 800bf2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf2e:	e19e      	b.n	800c26e <UART_SetConfig+0x5a6>
 800bf30:	697b      	ldr	r3, [r7, #20]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	4a35      	ldr	r2, [pc, #212]	; (800c00c <UART_SetConfig+0x344>)
 800bf36:	4293      	cmp	r3, r2
 800bf38:	d130      	bne.n	800bf9c <UART_SetConfig+0x2d4>
 800bf3a:	4b31      	ldr	r3, [pc, #196]	; (800c000 <UART_SetConfig+0x338>)
 800bf3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf3e:	f003 0307 	and.w	r3, r3, #7
 800bf42:	2b05      	cmp	r3, #5
 800bf44:	d826      	bhi.n	800bf94 <UART_SetConfig+0x2cc>
 800bf46:	a201      	add	r2, pc, #4	; (adr r2, 800bf4c <UART_SetConfig+0x284>)
 800bf48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf4c:	0800bf65 	.word	0x0800bf65
 800bf50:	0800bf6d 	.word	0x0800bf6d
 800bf54:	0800bf75 	.word	0x0800bf75
 800bf58:	0800bf7d 	.word	0x0800bf7d
 800bf5c:	0800bf85 	.word	0x0800bf85
 800bf60:	0800bf8d 	.word	0x0800bf8d
 800bf64:	2300      	movs	r3, #0
 800bf66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf6a:	e180      	b.n	800c26e <UART_SetConfig+0x5a6>
 800bf6c:	2304      	movs	r3, #4
 800bf6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf72:	e17c      	b.n	800c26e <UART_SetConfig+0x5a6>
 800bf74:	2308      	movs	r3, #8
 800bf76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf7a:	e178      	b.n	800c26e <UART_SetConfig+0x5a6>
 800bf7c:	2310      	movs	r3, #16
 800bf7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf82:	e174      	b.n	800c26e <UART_SetConfig+0x5a6>
 800bf84:	2320      	movs	r3, #32
 800bf86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf8a:	e170      	b.n	800c26e <UART_SetConfig+0x5a6>
 800bf8c:	2340      	movs	r3, #64	; 0x40
 800bf8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf92:	e16c      	b.n	800c26e <UART_SetConfig+0x5a6>
 800bf94:	2380      	movs	r3, #128	; 0x80
 800bf96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf9a:	e168      	b.n	800c26e <UART_SetConfig+0x5a6>
 800bf9c:	697b      	ldr	r3, [r7, #20]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	4a1b      	ldr	r2, [pc, #108]	; (800c010 <UART_SetConfig+0x348>)
 800bfa2:	4293      	cmp	r3, r2
 800bfa4:	d142      	bne.n	800c02c <UART_SetConfig+0x364>
 800bfa6:	4b16      	ldr	r3, [pc, #88]	; (800c000 <UART_SetConfig+0x338>)
 800bfa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfaa:	f003 0307 	and.w	r3, r3, #7
 800bfae:	2b05      	cmp	r3, #5
 800bfb0:	d838      	bhi.n	800c024 <UART_SetConfig+0x35c>
 800bfb2:	a201      	add	r2, pc, #4	; (adr r2, 800bfb8 <UART_SetConfig+0x2f0>)
 800bfb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfb8:	0800bfd1 	.word	0x0800bfd1
 800bfbc:	0800bfd9 	.word	0x0800bfd9
 800bfc0:	0800bfe1 	.word	0x0800bfe1
 800bfc4:	0800bfe9 	.word	0x0800bfe9
 800bfc8:	0800c015 	.word	0x0800c015
 800bfcc:	0800c01d 	.word	0x0800c01d
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfd6:	e14a      	b.n	800c26e <UART_SetConfig+0x5a6>
 800bfd8:	2304      	movs	r3, #4
 800bfda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfde:	e146      	b.n	800c26e <UART_SetConfig+0x5a6>
 800bfe0:	2308      	movs	r3, #8
 800bfe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfe6:	e142      	b.n	800c26e <UART_SetConfig+0x5a6>
 800bfe8:	2310      	movs	r3, #16
 800bfea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfee:	e13e      	b.n	800c26e <UART_SetConfig+0x5a6>
 800bff0:	cfff69f3 	.word	0xcfff69f3
 800bff4:	58000c00 	.word	0x58000c00
 800bff8:	11fff4ff 	.word	0x11fff4ff
 800bffc:	40011000 	.word	0x40011000
 800c000:	58024400 	.word	0x58024400
 800c004:	40004400 	.word	0x40004400
 800c008:	40004800 	.word	0x40004800
 800c00c:	40004c00 	.word	0x40004c00
 800c010:	40005000 	.word	0x40005000
 800c014:	2320      	movs	r3, #32
 800c016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c01a:	e128      	b.n	800c26e <UART_SetConfig+0x5a6>
 800c01c:	2340      	movs	r3, #64	; 0x40
 800c01e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c022:	e124      	b.n	800c26e <UART_SetConfig+0x5a6>
 800c024:	2380      	movs	r3, #128	; 0x80
 800c026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c02a:	e120      	b.n	800c26e <UART_SetConfig+0x5a6>
 800c02c:	697b      	ldr	r3, [r7, #20]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	4acb      	ldr	r2, [pc, #812]	; (800c360 <UART_SetConfig+0x698>)
 800c032:	4293      	cmp	r3, r2
 800c034:	d176      	bne.n	800c124 <UART_SetConfig+0x45c>
 800c036:	4bcb      	ldr	r3, [pc, #812]	; (800c364 <UART_SetConfig+0x69c>)
 800c038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c03a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c03e:	2b28      	cmp	r3, #40	; 0x28
 800c040:	d86c      	bhi.n	800c11c <UART_SetConfig+0x454>
 800c042:	a201      	add	r2, pc, #4	; (adr r2, 800c048 <UART_SetConfig+0x380>)
 800c044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c048:	0800c0ed 	.word	0x0800c0ed
 800c04c:	0800c11d 	.word	0x0800c11d
 800c050:	0800c11d 	.word	0x0800c11d
 800c054:	0800c11d 	.word	0x0800c11d
 800c058:	0800c11d 	.word	0x0800c11d
 800c05c:	0800c11d 	.word	0x0800c11d
 800c060:	0800c11d 	.word	0x0800c11d
 800c064:	0800c11d 	.word	0x0800c11d
 800c068:	0800c0f5 	.word	0x0800c0f5
 800c06c:	0800c11d 	.word	0x0800c11d
 800c070:	0800c11d 	.word	0x0800c11d
 800c074:	0800c11d 	.word	0x0800c11d
 800c078:	0800c11d 	.word	0x0800c11d
 800c07c:	0800c11d 	.word	0x0800c11d
 800c080:	0800c11d 	.word	0x0800c11d
 800c084:	0800c11d 	.word	0x0800c11d
 800c088:	0800c0fd 	.word	0x0800c0fd
 800c08c:	0800c11d 	.word	0x0800c11d
 800c090:	0800c11d 	.word	0x0800c11d
 800c094:	0800c11d 	.word	0x0800c11d
 800c098:	0800c11d 	.word	0x0800c11d
 800c09c:	0800c11d 	.word	0x0800c11d
 800c0a0:	0800c11d 	.word	0x0800c11d
 800c0a4:	0800c11d 	.word	0x0800c11d
 800c0a8:	0800c105 	.word	0x0800c105
 800c0ac:	0800c11d 	.word	0x0800c11d
 800c0b0:	0800c11d 	.word	0x0800c11d
 800c0b4:	0800c11d 	.word	0x0800c11d
 800c0b8:	0800c11d 	.word	0x0800c11d
 800c0bc:	0800c11d 	.word	0x0800c11d
 800c0c0:	0800c11d 	.word	0x0800c11d
 800c0c4:	0800c11d 	.word	0x0800c11d
 800c0c8:	0800c10d 	.word	0x0800c10d
 800c0cc:	0800c11d 	.word	0x0800c11d
 800c0d0:	0800c11d 	.word	0x0800c11d
 800c0d4:	0800c11d 	.word	0x0800c11d
 800c0d8:	0800c11d 	.word	0x0800c11d
 800c0dc:	0800c11d 	.word	0x0800c11d
 800c0e0:	0800c11d 	.word	0x0800c11d
 800c0e4:	0800c11d 	.word	0x0800c11d
 800c0e8:	0800c115 	.word	0x0800c115
 800c0ec:	2301      	movs	r3, #1
 800c0ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0f2:	e0bc      	b.n	800c26e <UART_SetConfig+0x5a6>
 800c0f4:	2304      	movs	r3, #4
 800c0f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0fa:	e0b8      	b.n	800c26e <UART_SetConfig+0x5a6>
 800c0fc:	2308      	movs	r3, #8
 800c0fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c102:	e0b4      	b.n	800c26e <UART_SetConfig+0x5a6>
 800c104:	2310      	movs	r3, #16
 800c106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c10a:	e0b0      	b.n	800c26e <UART_SetConfig+0x5a6>
 800c10c:	2320      	movs	r3, #32
 800c10e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c112:	e0ac      	b.n	800c26e <UART_SetConfig+0x5a6>
 800c114:	2340      	movs	r3, #64	; 0x40
 800c116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c11a:	e0a8      	b.n	800c26e <UART_SetConfig+0x5a6>
 800c11c:	2380      	movs	r3, #128	; 0x80
 800c11e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c122:	e0a4      	b.n	800c26e <UART_SetConfig+0x5a6>
 800c124:	697b      	ldr	r3, [r7, #20]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	4a8f      	ldr	r2, [pc, #572]	; (800c368 <UART_SetConfig+0x6a0>)
 800c12a:	4293      	cmp	r3, r2
 800c12c:	d130      	bne.n	800c190 <UART_SetConfig+0x4c8>
 800c12e:	4b8d      	ldr	r3, [pc, #564]	; (800c364 <UART_SetConfig+0x69c>)
 800c130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c132:	f003 0307 	and.w	r3, r3, #7
 800c136:	2b05      	cmp	r3, #5
 800c138:	d826      	bhi.n	800c188 <UART_SetConfig+0x4c0>
 800c13a:	a201      	add	r2, pc, #4	; (adr r2, 800c140 <UART_SetConfig+0x478>)
 800c13c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c140:	0800c159 	.word	0x0800c159
 800c144:	0800c161 	.word	0x0800c161
 800c148:	0800c169 	.word	0x0800c169
 800c14c:	0800c171 	.word	0x0800c171
 800c150:	0800c179 	.word	0x0800c179
 800c154:	0800c181 	.word	0x0800c181
 800c158:	2300      	movs	r3, #0
 800c15a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c15e:	e086      	b.n	800c26e <UART_SetConfig+0x5a6>
 800c160:	2304      	movs	r3, #4
 800c162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c166:	e082      	b.n	800c26e <UART_SetConfig+0x5a6>
 800c168:	2308      	movs	r3, #8
 800c16a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c16e:	e07e      	b.n	800c26e <UART_SetConfig+0x5a6>
 800c170:	2310      	movs	r3, #16
 800c172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c176:	e07a      	b.n	800c26e <UART_SetConfig+0x5a6>
 800c178:	2320      	movs	r3, #32
 800c17a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c17e:	e076      	b.n	800c26e <UART_SetConfig+0x5a6>
 800c180:	2340      	movs	r3, #64	; 0x40
 800c182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c186:	e072      	b.n	800c26e <UART_SetConfig+0x5a6>
 800c188:	2380      	movs	r3, #128	; 0x80
 800c18a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c18e:	e06e      	b.n	800c26e <UART_SetConfig+0x5a6>
 800c190:	697b      	ldr	r3, [r7, #20]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	4a75      	ldr	r2, [pc, #468]	; (800c36c <UART_SetConfig+0x6a4>)
 800c196:	4293      	cmp	r3, r2
 800c198:	d130      	bne.n	800c1fc <UART_SetConfig+0x534>
 800c19a:	4b72      	ldr	r3, [pc, #456]	; (800c364 <UART_SetConfig+0x69c>)
 800c19c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c19e:	f003 0307 	and.w	r3, r3, #7
 800c1a2:	2b05      	cmp	r3, #5
 800c1a4:	d826      	bhi.n	800c1f4 <UART_SetConfig+0x52c>
 800c1a6:	a201      	add	r2, pc, #4	; (adr r2, 800c1ac <UART_SetConfig+0x4e4>)
 800c1a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1ac:	0800c1c5 	.word	0x0800c1c5
 800c1b0:	0800c1cd 	.word	0x0800c1cd
 800c1b4:	0800c1d5 	.word	0x0800c1d5
 800c1b8:	0800c1dd 	.word	0x0800c1dd
 800c1bc:	0800c1e5 	.word	0x0800c1e5
 800c1c0:	0800c1ed 	.word	0x0800c1ed
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1ca:	e050      	b.n	800c26e <UART_SetConfig+0x5a6>
 800c1cc:	2304      	movs	r3, #4
 800c1ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1d2:	e04c      	b.n	800c26e <UART_SetConfig+0x5a6>
 800c1d4:	2308      	movs	r3, #8
 800c1d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1da:	e048      	b.n	800c26e <UART_SetConfig+0x5a6>
 800c1dc:	2310      	movs	r3, #16
 800c1de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1e2:	e044      	b.n	800c26e <UART_SetConfig+0x5a6>
 800c1e4:	2320      	movs	r3, #32
 800c1e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1ea:	e040      	b.n	800c26e <UART_SetConfig+0x5a6>
 800c1ec:	2340      	movs	r3, #64	; 0x40
 800c1ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1f2:	e03c      	b.n	800c26e <UART_SetConfig+0x5a6>
 800c1f4:	2380      	movs	r3, #128	; 0x80
 800c1f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1fa:	e038      	b.n	800c26e <UART_SetConfig+0x5a6>
 800c1fc:	697b      	ldr	r3, [r7, #20]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	4a5b      	ldr	r2, [pc, #364]	; (800c370 <UART_SetConfig+0x6a8>)
 800c202:	4293      	cmp	r3, r2
 800c204:	d130      	bne.n	800c268 <UART_SetConfig+0x5a0>
 800c206:	4b57      	ldr	r3, [pc, #348]	; (800c364 <UART_SetConfig+0x69c>)
 800c208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c20a:	f003 0307 	and.w	r3, r3, #7
 800c20e:	2b05      	cmp	r3, #5
 800c210:	d826      	bhi.n	800c260 <UART_SetConfig+0x598>
 800c212:	a201      	add	r2, pc, #4	; (adr r2, 800c218 <UART_SetConfig+0x550>)
 800c214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c218:	0800c231 	.word	0x0800c231
 800c21c:	0800c239 	.word	0x0800c239
 800c220:	0800c241 	.word	0x0800c241
 800c224:	0800c249 	.word	0x0800c249
 800c228:	0800c251 	.word	0x0800c251
 800c22c:	0800c259 	.word	0x0800c259
 800c230:	2302      	movs	r3, #2
 800c232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c236:	e01a      	b.n	800c26e <UART_SetConfig+0x5a6>
 800c238:	2304      	movs	r3, #4
 800c23a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c23e:	e016      	b.n	800c26e <UART_SetConfig+0x5a6>
 800c240:	2308      	movs	r3, #8
 800c242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c246:	e012      	b.n	800c26e <UART_SetConfig+0x5a6>
 800c248:	2310      	movs	r3, #16
 800c24a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c24e:	e00e      	b.n	800c26e <UART_SetConfig+0x5a6>
 800c250:	2320      	movs	r3, #32
 800c252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c256:	e00a      	b.n	800c26e <UART_SetConfig+0x5a6>
 800c258:	2340      	movs	r3, #64	; 0x40
 800c25a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c25e:	e006      	b.n	800c26e <UART_SetConfig+0x5a6>
 800c260:	2380      	movs	r3, #128	; 0x80
 800c262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c266:	e002      	b.n	800c26e <UART_SetConfig+0x5a6>
 800c268:	2380      	movs	r3, #128	; 0x80
 800c26a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c26e:	697b      	ldr	r3, [r7, #20]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	4a3f      	ldr	r2, [pc, #252]	; (800c370 <UART_SetConfig+0x6a8>)
 800c274:	4293      	cmp	r3, r2
 800c276:	f040 80f8 	bne.w	800c46a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c27a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c27e:	2b20      	cmp	r3, #32
 800c280:	dc46      	bgt.n	800c310 <UART_SetConfig+0x648>
 800c282:	2b02      	cmp	r3, #2
 800c284:	f2c0 8082 	blt.w	800c38c <UART_SetConfig+0x6c4>
 800c288:	3b02      	subs	r3, #2
 800c28a:	2b1e      	cmp	r3, #30
 800c28c:	d87e      	bhi.n	800c38c <UART_SetConfig+0x6c4>
 800c28e:	a201      	add	r2, pc, #4	; (adr r2, 800c294 <UART_SetConfig+0x5cc>)
 800c290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c294:	0800c317 	.word	0x0800c317
 800c298:	0800c38d 	.word	0x0800c38d
 800c29c:	0800c31f 	.word	0x0800c31f
 800c2a0:	0800c38d 	.word	0x0800c38d
 800c2a4:	0800c38d 	.word	0x0800c38d
 800c2a8:	0800c38d 	.word	0x0800c38d
 800c2ac:	0800c32f 	.word	0x0800c32f
 800c2b0:	0800c38d 	.word	0x0800c38d
 800c2b4:	0800c38d 	.word	0x0800c38d
 800c2b8:	0800c38d 	.word	0x0800c38d
 800c2bc:	0800c38d 	.word	0x0800c38d
 800c2c0:	0800c38d 	.word	0x0800c38d
 800c2c4:	0800c38d 	.word	0x0800c38d
 800c2c8:	0800c38d 	.word	0x0800c38d
 800c2cc:	0800c33f 	.word	0x0800c33f
 800c2d0:	0800c38d 	.word	0x0800c38d
 800c2d4:	0800c38d 	.word	0x0800c38d
 800c2d8:	0800c38d 	.word	0x0800c38d
 800c2dc:	0800c38d 	.word	0x0800c38d
 800c2e0:	0800c38d 	.word	0x0800c38d
 800c2e4:	0800c38d 	.word	0x0800c38d
 800c2e8:	0800c38d 	.word	0x0800c38d
 800c2ec:	0800c38d 	.word	0x0800c38d
 800c2f0:	0800c38d 	.word	0x0800c38d
 800c2f4:	0800c38d 	.word	0x0800c38d
 800c2f8:	0800c38d 	.word	0x0800c38d
 800c2fc:	0800c38d 	.word	0x0800c38d
 800c300:	0800c38d 	.word	0x0800c38d
 800c304:	0800c38d 	.word	0x0800c38d
 800c308:	0800c38d 	.word	0x0800c38d
 800c30c:	0800c37f 	.word	0x0800c37f
 800c310:	2b40      	cmp	r3, #64	; 0x40
 800c312:	d037      	beq.n	800c384 <UART_SetConfig+0x6bc>
 800c314:	e03a      	b.n	800c38c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c316:	f7fd f919 	bl	800954c <HAL_RCCEx_GetD3PCLK1Freq>
 800c31a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c31c:	e03c      	b.n	800c398 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c31e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c322:	4618      	mov	r0, r3
 800c324:	f7fd f928 	bl	8009578 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c32a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c32c:	e034      	b.n	800c398 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c32e:	f107 0318 	add.w	r3, r7, #24
 800c332:	4618      	mov	r0, r3
 800c334:	f7fd fa74 	bl	8009820 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c338:	69fb      	ldr	r3, [r7, #28]
 800c33a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c33c:	e02c      	b.n	800c398 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c33e:	4b09      	ldr	r3, [pc, #36]	; (800c364 <UART_SetConfig+0x69c>)
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	f003 0320 	and.w	r3, r3, #32
 800c346:	2b00      	cmp	r3, #0
 800c348:	d016      	beq.n	800c378 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c34a:	4b06      	ldr	r3, [pc, #24]	; (800c364 <UART_SetConfig+0x69c>)
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	08db      	lsrs	r3, r3, #3
 800c350:	f003 0303 	and.w	r3, r3, #3
 800c354:	4a07      	ldr	r2, [pc, #28]	; (800c374 <UART_SetConfig+0x6ac>)
 800c356:	fa22 f303 	lsr.w	r3, r2, r3
 800c35a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c35c:	e01c      	b.n	800c398 <UART_SetConfig+0x6d0>
 800c35e:	bf00      	nop
 800c360:	40011400 	.word	0x40011400
 800c364:	58024400 	.word	0x58024400
 800c368:	40007800 	.word	0x40007800
 800c36c:	40007c00 	.word	0x40007c00
 800c370:	58000c00 	.word	0x58000c00
 800c374:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800c378:	4b9e      	ldr	r3, [pc, #632]	; (800c5f4 <UART_SetConfig+0x92c>)
 800c37a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c37c:	e00c      	b.n	800c398 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c37e:	4b9e      	ldr	r3, [pc, #632]	; (800c5f8 <UART_SetConfig+0x930>)
 800c380:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c382:	e009      	b.n	800c398 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c384:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c388:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c38a:	e005      	b.n	800c398 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800c38c:	2300      	movs	r3, #0
 800c38e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c390:	2301      	movs	r3, #1
 800c392:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c396:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	f000 81e0 	beq.w	800c760 <UART_SetConfig+0xa98>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c3a0:	697b      	ldr	r3, [r7, #20]
 800c3a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3a4:	4a95      	ldr	r2, [pc, #596]	; (800c5fc <UART_SetConfig+0x934>)
 800c3a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c3aa:	461a      	mov	r2, r3
 800c3ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3ae:	fbb3 f3f2 	udiv	r3, r3, r2
 800c3b2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c3b4:	697b      	ldr	r3, [r7, #20]
 800c3b6:	685a      	ldr	r2, [r3, #4]
 800c3b8:	4613      	mov	r3, r2
 800c3ba:	005b      	lsls	r3, r3, #1
 800c3bc:	4413      	add	r3, r2
 800c3be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3c0:	429a      	cmp	r2, r3
 800c3c2:	d305      	bcc.n	800c3d0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c3c4:	697b      	ldr	r3, [r7, #20]
 800c3c6:	685b      	ldr	r3, [r3, #4]
 800c3c8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c3ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3cc:	429a      	cmp	r2, r3
 800c3ce:	d903      	bls.n	800c3d8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800c3d0:	2301      	movs	r3, #1
 800c3d2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c3d6:	e1c3      	b.n	800c760 <UART_SetConfig+0xa98>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c3d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3da:	2200      	movs	r2, #0
 800c3dc:	60bb      	str	r3, [r7, #8]
 800c3de:	60fa      	str	r2, [r7, #12]
 800c3e0:	697b      	ldr	r3, [r7, #20]
 800c3e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3e4:	4a85      	ldr	r2, [pc, #532]	; (800c5fc <UART_SetConfig+0x934>)
 800c3e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c3ea:	b29b      	uxth	r3, r3
 800c3ec:	2200      	movs	r2, #0
 800c3ee:	603b      	str	r3, [r7, #0]
 800c3f0:	607a      	str	r2, [r7, #4]
 800c3f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c3f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c3fa:	f7f3 ffc9 	bl	8000390 <__aeabi_uldivmod>
 800c3fe:	4602      	mov	r2, r0
 800c400:	460b      	mov	r3, r1
 800c402:	4610      	mov	r0, r2
 800c404:	4619      	mov	r1, r3
 800c406:	f04f 0200 	mov.w	r2, #0
 800c40a:	f04f 0300 	mov.w	r3, #0
 800c40e:	020b      	lsls	r3, r1, #8
 800c410:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c414:	0202      	lsls	r2, r0, #8
 800c416:	6979      	ldr	r1, [r7, #20]
 800c418:	6849      	ldr	r1, [r1, #4]
 800c41a:	0849      	lsrs	r1, r1, #1
 800c41c:	2000      	movs	r0, #0
 800c41e:	460c      	mov	r4, r1
 800c420:	4605      	mov	r5, r0
 800c422:	eb12 0804 	adds.w	r8, r2, r4
 800c426:	eb43 0905 	adc.w	r9, r3, r5
 800c42a:	697b      	ldr	r3, [r7, #20]
 800c42c:	685b      	ldr	r3, [r3, #4]
 800c42e:	2200      	movs	r2, #0
 800c430:	469a      	mov	sl, r3
 800c432:	4693      	mov	fp, r2
 800c434:	4652      	mov	r2, sl
 800c436:	465b      	mov	r3, fp
 800c438:	4640      	mov	r0, r8
 800c43a:	4649      	mov	r1, r9
 800c43c:	f7f3 ffa8 	bl	8000390 <__aeabi_uldivmod>
 800c440:	4602      	mov	r2, r0
 800c442:	460b      	mov	r3, r1
 800c444:	4613      	mov	r3, r2
 800c446:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c44a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c44e:	d308      	bcc.n	800c462 <UART_SetConfig+0x79a>
 800c450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c452:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c456:	d204      	bcs.n	800c462 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800c458:	697b      	ldr	r3, [r7, #20]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c45e:	60da      	str	r2, [r3, #12]
 800c460:	e17e      	b.n	800c760 <UART_SetConfig+0xa98>
        }
        else
        {
          ret = HAL_ERROR;
 800c462:	2301      	movs	r3, #1
 800c464:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c468:	e17a      	b.n	800c760 <UART_SetConfig+0xa98>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c46a:	697b      	ldr	r3, [r7, #20]
 800c46c:	69db      	ldr	r3, [r3, #28]
 800c46e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c472:	f040 80c7 	bne.w	800c604 <UART_SetConfig+0x93c>
  {
    switch (clocksource)
 800c476:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c47a:	2b20      	cmp	r3, #32
 800c47c:	dc48      	bgt.n	800c510 <UART_SetConfig+0x848>
 800c47e:	2b00      	cmp	r3, #0
 800c480:	db7b      	blt.n	800c57a <UART_SetConfig+0x8b2>
 800c482:	2b20      	cmp	r3, #32
 800c484:	d879      	bhi.n	800c57a <UART_SetConfig+0x8b2>
 800c486:	a201      	add	r2, pc, #4	; (adr r2, 800c48c <UART_SetConfig+0x7c4>)
 800c488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c48c:	0800c517 	.word	0x0800c517
 800c490:	0800c51f 	.word	0x0800c51f
 800c494:	0800c57b 	.word	0x0800c57b
 800c498:	0800c57b 	.word	0x0800c57b
 800c49c:	0800c527 	.word	0x0800c527
 800c4a0:	0800c57b 	.word	0x0800c57b
 800c4a4:	0800c57b 	.word	0x0800c57b
 800c4a8:	0800c57b 	.word	0x0800c57b
 800c4ac:	0800c537 	.word	0x0800c537
 800c4b0:	0800c57b 	.word	0x0800c57b
 800c4b4:	0800c57b 	.word	0x0800c57b
 800c4b8:	0800c57b 	.word	0x0800c57b
 800c4bc:	0800c57b 	.word	0x0800c57b
 800c4c0:	0800c57b 	.word	0x0800c57b
 800c4c4:	0800c57b 	.word	0x0800c57b
 800c4c8:	0800c57b 	.word	0x0800c57b
 800c4cc:	0800c547 	.word	0x0800c547
 800c4d0:	0800c57b 	.word	0x0800c57b
 800c4d4:	0800c57b 	.word	0x0800c57b
 800c4d8:	0800c57b 	.word	0x0800c57b
 800c4dc:	0800c57b 	.word	0x0800c57b
 800c4e0:	0800c57b 	.word	0x0800c57b
 800c4e4:	0800c57b 	.word	0x0800c57b
 800c4e8:	0800c57b 	.word	0x0800c57b
 800c4ec:	0800c57b 	.word	0x0800c57b
 800c4f0:	0800c57b 	.word	0x0800c57b
 800c4f4:	0800c57b 	.word	0x0800c57b
 800c4f8:	0800c57b 	.word	0x0800c57b
 800c4fc:	0800c57b 	.word	0x0800c57b
 800c500:	0800c57b 	.word	0x0800c57b
 800c504:	0800c57b 	.word	0x0800c57b
 800c508:	0800c57b 	.word	0x0800c57b
 800c50c:	0800c56d 	.word	0x0800c56d
 800c510:	2b40      	cmp	r3, #64	; 0x40
 800c512:	d02e      	beq.n	800c572 <UART_SetConfig+0x8aa>
 800c514:	e031      	b.n	800c57a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c516:	f7fc f865 	bl	80085e4 <HAL_RCC_GetPCLK1Freq>
 800c51a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c51c:	e033      	b.n	800c586 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c51e:	f7fc f877 	bl	8008610 <HAL_RCC_GetPCLK2Freq>
 800c522:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c524:	e02f      	b.n	800c586 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c526:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c52a:	4618      	mov	r0, r3
 800c52c:	f7fd f824 	bl	8009578 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c532:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c534:	e027      	b.n	800c586 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c536:	f107 0318 	add.w	r3, r7, #24
 800c53a:	4618      	mov	r0, r3
 800c53c:	f7fd f970 	bl	8009820 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c540:	69fb      	ldr	r3, [r7, #28]
 800c542:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c544:	e01f      	b.n	800c586 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c546:	4b2e      	ldr	r3, [pc, #184]	; (800c600 <UART_SetConfig+0x938>)
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	f003 0320 	and.w	r3, r3, #32
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d009      	beq.n	800c566 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c552:	4b2b      	ldr	r3, [pc, #172]	; (800c600 <UART_SetConfig+0x938>)
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	08db      	lsrs	r3, r3, #3
 800c558:	f003 0303 	and.w	r3, r3, #3
 800c55c:	4a25      	ldr	r2, [pc, #148]	; (800c5f4 <UART_SetConfig+0x92c>)
 800c55e:	fa22 f303 	lsr.w	r3, r2, r3
 800c562:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c564:	e00f      	b.n	800c586 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c566:	4b23      	ldr	r3, [pc, #140]	; (800c5f4 <UART_SetConfig+0x92c>)
 800c568:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c56a:	e00c      	b.n	800c586 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c56c:	4b22      	ldr	r3, [pc, #136]	; (800c5f8 <UART_SetConfig+0x930>)
 800c56e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c570:	e009      	b.n	800c586 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c572:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c576:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c578:	e005      	b.n	800c586 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c57a:	2300      	movs	r3, #0
 800c57c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c57e:	2301      	movs	r3, #1
 800c580:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c584:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c588:	2b00      	cmp	r3, #0
 800c58a:	f000 80e9 	beq.w	800c760 <UART_SetConfig+0xa98>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c58e:	697b      	ldr	r3, [r7, #20]
 800c590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c592:	4a1a      	ldr	r2, [pc, #104]	; (800c5fc <UART_SetConfig+0x934>)
 800c594:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c598:	461a      	mov	r2, r3
 800c59a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c59c:	fbb3 f3f2 	udiv	r3, r3, r2
 800c5a0:	005a      	lsls	r2, r3, #1
 800c5a2:	697b      	ldr	r3, [r7, #20]
 800c5a4:	685b      	ldr	r3, [r3, #4]
 800c5a6:	085b      	lsrs	r3, r3, #1
 800c5a8:	441a      	add	r2, r3
 800c5aa:	697b      	ldr	r3, [r7, #20]
 800c5ac:	685b      	ldr	r3, [r3, #4]
 800c5ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800c5b2:	b29b      	uxth	r3, r3
 800c5b4:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c5b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5b8:	2b0f      	cmp	r3, #15
 800c5ba:	d916      	bls.n	800c5ea <UART_SetConfig+0x922>
 800c5bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c5c2:	d212      	bcs.n	800c5ea <UART_SetConfig+0x922>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c5c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5c6:	b29b      	uxth	r3, r3
 800c5c8:	f023 030f 	bic.w	r3, r3, #15
 800c5cc:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c5ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5d0:	085b      	lsrs	r3, r3, #1
 800c5d2:	b29b      	uxth	r3, r3
 800c5d4:	f003 0307 	and.w	r3, r3, #7
 800c5d8:	b29a      	uxth	r2, r3
 800c5da:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c5dc:	4313      	orrs	r3, r2
 800c5de:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800c5e0:	697b      	ldr	r3, [r7, #20]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c5e6:	60da      	str	r2, [r3, #12]
 800c5e8:	e0ba      	b.n	800c760 <UART_SetConfig+0xa98>
      }
      else
      {
        ret = HAL_ERROR;
 800c5ea:	2301      	movs	r3, #1
 800c5ec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c5f0:	e0b6      	b.n	800c760 <UART_SetConfig+0xa98>
 800c5f2:	bf00      	nop
 800c5f4:	03d09000 	.word	0x03d09000
 800c5f8:	003d0900 	.word	0x003d0900
 800c5fc:	08013850 	.word	0x08013850
 800c600:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800c604:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c608:	2b20      	cmp	r3, #32
 800c60a:	dc49      	bgt.n	800c6a0 <UART_SetConfig+0x9d8>
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	db7c      	blt.n	800c70a <UART_SetConfig+0xa42>
 800c610:	2b20      	cmp	r3, #32
 800c612:	d87a      	bhi.n	800c70a <UART_SetConfig+0xa42>
 800c614:	a201      	add	r2, pc, #4	; (adr r2, 800c61c <UART_SetConfig+0x954>)
 800c616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c61a:	bf00      	nop
 800c61c:	0800c6a7 	.word	0x0800c6a7
 800c620:	0800c6af 	.word	0x0800c6af
 800c624:	0800c70b 	.word	0x0800c70b
 800c628:	0800c70b 	.word	0x0800c70b
 800c62c:	0800c6b7 	.word	0x0800c6b7
 800c630:	0800c70b 	.word	0x0800c70b
 800c634:	0800c70b 	.word	0x0800c70b
 800c638:	0800c70b 	.word	0x0800c70b
 800c63c:	0800c6c7 	.word	0x0800c6c7
 800c640:	0800c70b 	.word	0x0800c70b
 800c644:	0800c70b 	.word	0x0800c70b
 800c648:	0800c70b 	.word	0x0800c70b
 800c64c:	0800c70b 	.word	0x0800c70b
 800c650:	0800c70b 	.word	0x0800c70b
 800c654:	0800c70b 	.word	0x0800c70b
 800c658:	0800c70b 	.word	0x0800c70b
 800c65c:	0800c6d7 	.word	0x0800c6d7
 800c660:	0800c70b 	.word	0x0800c70b
 800c664:	0800c70b 	.word	0x0800c70b
 800c668:	0800c70b 	.word	0x0800c70b
 800c66c:	0800c70b 	.word	0x0800c70b
 800c670:	0800c70b 	.word	0x0800c70b
 800c674:	0800c70b 	.word	0x0800c70b
 800c678:	0800c70b 	.word	0x0800c70b
 800c67c:	0800c70b 	.word	0x0800c70b
 800c680:	0800c70b 	.word	0x0800c70b
 800c684:	0800c70b 	.word	0x0800c70b
 800c688:	0800c70b 	.word	0x0800c70b
 800c68c:	0800c70b 	.word	0x0800c70b
 800c690:	0800c70b 	.word	0x0800c70b
 800c694:	0800c70b 	.word	0x0800c70b
 800c698:	0800c70b 	.word	0x0800c70b
 800c69c:	0800c6fd 	.word	0x0800c6fd
 800c6a0:	2b40      	cmp	r3, #64	; 0x40
 800c6a2:	d02e      	beq.n	800c702 <UART_SetConfig+0xa3a>
 800c6a4:	e031      	b.n	800c70a <UART_SetConfig+0xa42>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c6a6:	f7fb ff9d 	bl	80085e4 <HAL_RCC_GetPCLK1Freq>
 800c6aa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c6ac:	e033      	b.n	800c716 <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c6ae:	f7fb ffaf 	bl	8008610 <HAL_RCC_GetPCLK2Freq>
 800c6b2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c6b4:	e02f      	b.n	800c716 <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c6b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	f7fc ff5c 	bl	8009578 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c6c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6c4:	e027      	b.n	800c716 <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c6c6:	f107 0318 	add.w	r3, r7, #24
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	f7fd f8a8 	bl	8009820 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c6d0:	69fb      	ldr	r3, [r7, #28]
 800c6d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6d4:	e01f      	b.n	800c716 <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c6d6:	4b2d      	ldr	r3, [pc, #180]	; (800c78c <UART_SetConfig+0xac4>)
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	f003 0320 	and.w	r3, r3, #32
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d009      	beq.n	800c6f6 <UART_SetConfig+0xa2e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c6e2:	4b2a      	ldr	r3, [pc, #168]	; (800c78c <UART_SetConfig+0xac4>)
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	08db      	lsrs	r3, r3, #3
 800c6e8:	f003 0303 	and.w	r3, r3, #3
 800c6ec:	4a28      	ldr	r2, [pc, #160]	; (800c790 <UART_SetConfig+0xac8>)
 800c6ee:	fa22 f303 	lsr.w	r3, r2, r3
 800c6f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c6f4:	e00f      	b.n	800c716 <UART_SetConfig+0xa4e>
          pclk = (uint32_t) HSI_VALUE;
 800c6f6:	4b26      	ldr	r3, [pc, #152]	; (800c790 <UART_SetConfig+0xac8>)
 800c6f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6fa:	e00c      	b.n	800c716 <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c6fc:	4b25      	ldr	r3, [pc, #148]	; (800c794 <UART_SetConfig+0xacc>)
 800c6fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c700:	e009      	b.n	800c716 <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c702:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c706:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c708:	e005      	b.n	800c716 <UART_SetConfig+0xa4e>
      default:
        pclk = 0U;
 800c70a:	2300      	movs	r3, #0
 800c70c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c70e:	2301      	movs	r3, #1
 800c710:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c714:	bf00      	nop
    }

    if (pclk != 0U)
 800c716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d021      	beq.n	800c760 <UART_SetConfig+0xa98>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c71c:	697b      	ldr	r3, [r7, #20]
 800c71e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c720:	4a1d      	ldr	r2, [pc, #116]	; (800c798 <UART_SetConfig+0xad0>)
 800c722:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c726:	461a      	mov	r2, r3
 800c728:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c72a:	fbb3 f2f2 	udiv	r2, r3, r2
 800c72e:	697b      	ldr	r3, [r7, #20]
 800c730:	685b      	ldr	r3, [r3, #4]
 800c732:	085b      	lsrs	r3, r3, #1
 800c734:	441a      	add	r2, r3
 800c736:	697b      	ldr	r3, [r7, #20]
 800c738:	685b      	ldr	r3, [r3, #4]
 800c73a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c73e:	b29b      	uxth	r3, r3
 800c740:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c744:	2b0f      	cmp	r3, #15
 800c746:	d908      	bls.n	800c75a <UART_SetConfig+0xa92>
 800c748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c74a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c74e:	d204      	bcs.n	800c75a <UART_SetConfig+0xa92>
      {
        huart->Instance->BRR = usartdiv;
 800c750:	697b      	ldr	r3, [r7, #20]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c756:	60da      	str	r2, [r3, #12]
 800c758:	e002      	b.n	800c760 <UART_SetConfig+0xa98>
      }
      else
      {
        ret = HAL_ERROR;
 800c75a:	2301      	movs	r3, #1
 800c75c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c760:	697b      	ldr	r3, [r7, #20]
 800c762:	2201      	movs	r2, #1
 800c764:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c768:	697b      	ldr	r3, [r7, #20]
 800c76a:	2201      	movs	r2, #1
 800c76c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c770:	697b      	ldr	r3, [r7, #20]
 800c772:	2200      	movs	r2, #0
 800c774:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800c776:	697b      	ldr	r3, [r7, #20]
 800c778:	2200      	movs	r2, #0
 800c77a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800c77c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800c780:	4618      	mov	r0, r3
 800c782:	3748      	adds	r7, #72	; 0x48
 800c784:	46bd      	mov	sp, r7
 800c786:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c78a:	bf00      	nop
 800c78c:	58024400 	.word	0x58024400
 800c790:	03d09000 	.word	0x03d09000
 800c794:	003d0900 	.word	0x003d0900
 800c798:	08013850 	.word	0x08013850

0800c79c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c79c:	b480      	push	{r7}
 800c79e:	b083      	sub	sp, #12
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7a8:	f003 0301 	and.w	r3, r3, #1
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d00a      	beq.n	800c7c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	685b      	ldr	r3, [r3, #4]
 800c7b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	430a      	orrs	r2, r1
 800c7c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7ca:	f003 0302 	and.w	r3, r3, #2
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d00a      	beq.n	800c7e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	685b      	ldr	r3, [r3, #4]
 800c7d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	430a      	orrs	r2, r1
 800c7e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7ec:	f003 0304 	and.w	r3, r3, #4
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d00a      	beq.n	800c80a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	685b      	ldr	r3, [r3, #4]
 800c7fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	430a      	orrs	r2, r1
 800c808:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c80e:	f003 0308 	and.w	r3, r3, #8
 800c812:	2b00      	cmp	r3, #0
 800c814:	d00a      	beq.n	800c82c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	685b      	ldr	r3, [r3, #4]
 800c81c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	430a      	orrs	r2, r1
 800c82a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c830:	f003 0310 	and.w	r3, r3, #16
 800c834:	2b00      	cmp	r3, #0
 800c836:	d00a      	beq.n	800c84e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	689b      	ldr	r3, [r3, #8]
 800c83e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	430a      	orrs	r2, r1
 800c84c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c852:	f003 0320 	and.w	r3, r3, #32
 800c856:	2b00      	cmp	r3, #0
 800c858:	d00a      	beq.n	800c870 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	689b      	ldr	r3, [r3, #8]
 800c860:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	430a      	orrs	r2, r1
 800c86e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d01a      	beq.n	800c8b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	685b      	ldr	r3, [r3, #4]
 800c882:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	430a      	orrs	r2, r1
 800c890:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c896:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c89a:	d10a      	bne.n	800c8b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	685b      	ldr	r3, [r3, #4]
 800c8a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	430a      	orrs	r2, r1
 800c8b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d00a      	beq.n	800c8d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	685b      	ldr	r3, [r3, #4]
 800c8c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	430a      	orrs	r2, r1
 800c8d2:	605a      	str	r2, [r3, #4]
  }
}
 800c8d4:	bf00      	nop
 800c8d6:	370c      	adds	r7, #12
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8de:	4770      	bx	lr

0800c8e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c8e0:	b580      	push	{r7, lr}
 800c8e2:	b086      	sub	sp, #24
 800c8e4:	af02      	add	r7, sp, #8
 800c8e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c8f0:	f7f5 faf4 	bl	8001edc <HAL_GetTick>
 800c8f4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	f003 0308 	and.w	r3, r3, #8
 800c900:	2b08      	cmp	r3, #8
 800c902:	d10e      	bne.n	800c922 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c904:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c908:	9300      	str	r3, [sp, #0]
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	2200      	movs	r2, #0
 800c90e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c912:	6878      	ldr	r0, [r7, #4]
 800c914:	f000 f82f 	bl	800c976 <UART_WaitOnFlagUntilTimeout>
 800c918:	4603      	mov	r3, r0
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d001      	beq.n	800c922 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c91e:	2303      	movs	r3, #3
 800c920:	e025      	b.n	800c96e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	f003 0304 	and.w	r3, r3, #4
 800c92c:	2b04      	cmp	r3, #4
 800c92e:	d10e      	bne.n	800c94e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c930:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c934:	9300      	str	r3, [sp, #0]
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	2200      	movs	r2, #0
 800c93a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c93e:	6878      	ldr	r0, [r7, #4]
 800c940:	f000 f819 	bl	800c976 <UART_WaitOnFlagUntilTimeout>
 800c944:	4603      	mov	r3, r0
 800c946:	2b00      	cmp	r3, #0
 800c948:	d001      	beq.n	800c94e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c94a:	2303      	movs	r3, #3
 800c94c:	e00f      	b.n	800c96e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	2220      	movs	r2, #32
 800c952:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	2220      	movs	r2, #32
 800c95a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	2200      	movs	r2, #0
 800c962:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	2200      	movs	r2, #0
 800c968:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c96c:	2300      	movs	r3, #0
}
 800c96e:	4618      	mov	r0, r3
 800c970:	3710      	adds	r7, #16
 800c972:	46bd      	mov	sp, r7
 800c974:	bd80      	pop	{r7, pc}

0800c976 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c976:	b580      	push	{r7, lr}
 800c978:	b084      	sub	sp, #16
 800c97a:	af00      	add	r7, sp, #0
 800c97c:	60f8      	str	r0, [r7, #12]
 800c97e:	60b9      	str	r1, [r7, #8]
 800c980:	603b      	str	r3, [r7, #0]
 800c982:	4613      	mov	r3, r2
 800c984:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c986:	e062      	b.n	800ca4e <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c988:	69bb      	ldr	r3, [r7, #24]
 800c98a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c98e:	d05e      	beq.n	800ca4e <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c990:	f7f5 faa4 	bl	8001edc <HAL_GetTick>
 800c994:	4602      	mov	r2, r0
 800c996:	683b      	ldr	r3, [r7, #0]
 800c998:	1ad3      	subs	r3, r2, r3
 800c99a:	69ba      	ldr	r2, [r7, #24]
 800c99c:	429a      	cmp	r2, r3
 800c99e:	d302      	bcc.n	800c9a6 <UART_WaitOnFlagUntilTimeout+0x30>
 800c9a0:	69bb      	ldr	r3, [r7, #24]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d11d      	bne.n	800c9e2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	681a      	ldr	r2, [r3, #0]
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c9b4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	689a      	ldr	r2, [r3, #8]
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	f022 0201 	bic.w	r2, r2, #1
 800c9c4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	2220      	movs	r2, #32
 800c9ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	2220      	movs	r2, #32
 800c9d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	2200      	movs	r2, #0
 800c9da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800c9de:	2303      	movs	r3, #3
 800c9e0:	e045      	b.n	800ca6e <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	f003 0304 	and.w	r3, r3, #4
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d02e      	beq.n	800ca4e <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	69db      	ldr	r3, [r3, #28]
 800c9f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c9fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c9fe:	d126      	bne.n	800ca4e <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ca08:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	681a      	ldr	r2, [r3, #0]
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ca18:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	689a      	ldr	r2, [r3, #8]
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	f022 0201 	bic.w	r2, r2, #1
 800ca28:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	2220      	movs	r2, #32
 800ca2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	2220      	movs	r2, #32
 800ca36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	2220      	movs	r2, #32
 800ca3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	2200      	movs	r2, #0
 800ca46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800ca4a:	2303      	movs	r3, #3
 800ca4c:	e00f      	b.n	800ca6e <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	69da      	ldr	r2, [r3, #28]
 800ca54:	68bb      	ldr	r3, [r7, #8]
 800ca56:	4013      	ands	r3, r2
 800ca58:	68ba      	ldr	r2, [r7, #8]
 800ca5a:	429a      	cmp	r2, r3
 800ca5c:	bf0c      	ite	eq
 800ca5e:	2301      	moveq	r3, #1
 800ca60:	2300      	movne	r3, #0
 800ca62:	b2db      	uxtb	r3, r3
 800ca64:	461a      	mov	r2, r3
 800ca66:	79fb      	ldrb	r3, [r7, #7]
 800ca68:	429a      	cmp	r2, r3
 800ca6a:	d08d      	beq.n	800c988 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ca6c:	2300      	movs	r3, #0
}
 800ca6e:	4618      	mov	r0, r3
 800ca70:	3710      	adds	r7, #16
 800ca72:	46bd      	mov	sp, r7
 800ca74:	bd80      	pop	{r7, pc}
	...

0800ca78 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b084      	sub	sp, #16
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	60f8      	str	r0, [r7, #12]
 800ca80:	60b9      	str	r1, [r7, #8]
 800ca82:	4613      	mov	r3, r2
 800ca84:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	68ba      	ldr	r2, [r7, #8]
 800ca8a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	88fa      	ldrh	r2, [r7, #6]
 800ca90:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	2200      	movs	r2, #0
 800ca98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	2222      	movs	r2, #34	; 0x22
 800caa0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d02c      	beq.n	800cb06 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cab0:	4a25      	ldr	r2, [pc, #148]	; (800cb48 <UART_Start_Receive_DMA+0xd0>)
 800cab2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cab8:	4a24      	ldr	r2, [pc, #144]	; (800cb4c <UART_Start_Receive_DMA+0xd4>)
 800caba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cac0:	4a23      	ldr	r2, [pc, #140]	; (800cb50 <UART_Start_Receive_DMA+0xd8>)
 800cac2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cac8:	2200      	movs	r2, #0
 800caca:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	3324      	adds	r3, #36	; 0x24
 800cad6:	4619      	mov	r1, r3
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cadc:	461a      	mov	r2, r3
 800cade:	88fb      	ldrh	r3, [r7, #6]
 800cae0:	f7f5 ff2e 	bl	8002940 <HAL_DMA_Start_IT>
 800cae4:	4603      	mov	r3, r0
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d00d      	beq.n	800cb06 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	2210      	movs	r2, #16
 800caee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	2200      	movs	r2, #0
 800caf6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	2220      	movs	r2, #32
 800cafe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      return HAL_ERROR;
 800cb02:	2301      	movs	r3, #1
 800cb04:	e01c      	b.n	800cb40 <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	2200      	movs	r2, #0
 800cb0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	681a      	ldr	r2, [r3, #0]
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cb1c:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	689a      	ldr	r2, [r3, #8]
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	f042 0201 	orr.w	r2, r2, #1
 800cb2c:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	689a      	ldr	r2, [r3, #8]
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cb3c:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800cb3e:	2300      	movs	r3, #0
}
 800cb40:	4618      	mov	r0, r3
 800cb42:	3710      	adds	r7, #16
 800cb44:	46bd      	mov	sp, r7
 800cb46:	bd80      	pop	{r7, pc}
 800cb48:	0800cbf5 	.word	0x0800cbf5
 800cb4c:	0800cc8b 	.word	0x0800cc8b
 800cb50:	0800ccc3 	.word	0x0800ccc3

0800cb54 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800cb54:	b480      	push	{r7}
 800cb56:	b083      	sub	sp, #12
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	681a      	ldr	r2, [r3, #0]
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800cb6a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	689a      	ldr	r2, [r3, #8]
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800cb7a:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	2220      	movs	r2, #32
 800cb80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800cb84:	bf00      	nop
 800cb86:	370c      	adds	r7, #12
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8e:	4770      	bx	lr

0800cb90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cb90:	b480      	push	{r7}
 800cb92:	b083      	sub	sp, #12
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	681a      	ldr	r2, [r3, #0]
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800cba6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	6899      	ldr	r1, [r3, #8]
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681a      	ldr	r2, [r3, #0]
 800cbb2:	4b0f      	ldr	r3, [pc, #60]	; (800cbf0 <UART_EndRxTransfer+0x60>)
 800cbb4:	400b      	ands	r3, r1
 800cbb6:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cbbc:	2b01      	cmp	r3, #1
 800cbbe:	d107      	bne.n	800cbd0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	681a      	ldr	r2, [r3, #0]
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	f022 0210 	bic.w	r2, r2, #16
 800cbce:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	2220      	movs	r2, #32
 800cbd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	2200      	movs	r2, #0
 800cbdc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	671a      	str	r2, [r3, #112]	; 0x70
}
 800cbe4:	bf00      	nop
 800cbe6:	370c      	adds	r7, #12
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbee:	4770      	bx	lr
 800cbf0:	effffffe 	.word	0xeffffffe

0800cbf4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b084      	sub	sp, #16
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc00:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	69db      	ldr	r3, [r3, #28]
 800cc06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cc0a:	d02b      	beq.n	800cc64 <UART_DMAReceiveCplt+0x70>
  {
    huart->RxXferCount = 0U;
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	2200      	movs	r2, #0
 800cc10:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	681a      	ldr	r2, [r3, #0]
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cc22:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	689a      	ldr	r2, [r3, #8]
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	f022 0201 	bic.w	r2, r2, #1
 800cc32:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	689a      	ldr	r2, [r3, #8]
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cc42:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	2220      	movs	r2, #32
 800cc48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc50:	2b01      	cmp	r3, #1
 800cc52:	d107      	bne.n	800cc64 <UART_DMAReceiveCplt+0x70>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	681a      	ldr	r2, [r3, #0]
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	f022 0210 	bic.w	r2, r2, #16
 800cc62:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc68:	2b01      	cmp	r3, #1
 800cc6a:	d107      	bne.n	800cc7c <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cc72:	4619      	mov	r1, r3
 800cc74:	68f8      	ldr	r0, [r7, #12]
 800cc76:	f7ff f81b 	bl	800bcb0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cc7a:	e002      	b.n	800cc82 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800cc7c:	68f8      	ldr	r0, [r7, #12]
 800cc7e:	f7f4 f8c3 	bl	8000e08 <HAL_UART_RxCpltCallback>
}
 800cc82:	bf00      	nop
 800cc84:	3710      	adds	r7, #16
 800cc86:	46bd      	mov	sp, r7
 800cc88:	bd80      	pop	{r7, pc}

0800cc8a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cc8a:	b580      	push	{r7, lr}
 800cc8c:	b084      	sub	sp, #16
 800cc8e:	af00      	add	r7, sp, #0
 800cc90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc96:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc9c:	2b01      	cmp	r3, #1
 800cc9e:	d109      	bne.n	800ccb4 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cca6:	085b      	lsrs	r3, r3, #1
 800cca8:	b29b      	uxth	r3, r3
 800ccaa:	4619      	mov	r1, r3
 800ccac:	68f8      	ldr	r0, [r7, #12]
 800ccae:	f7fe ffff 	bl	800bcb0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ccb2:	e002      	b.n	800ccba <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800ccb4:	68f8      	ldr	r0, [r7, #12]
 800ccb6:	f7fe ffe7 	bl	800bc88 <HAL_UART_RxHalfCpltCallback>
}
 800ccba:	bf00      	nop
 800ccbc:	3710      	adds	r7, #16
 800ccbe:	46bd      	mov	sp, r7
 800ccc0:	bd80      	pop	{r7, pc}

0800ccc2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ccc2:	b580      	push	{r7, lr}
 800ccc4:	b086      	sub	sp, #24
 800ccc6:	af00      	add	r7, sp, #0
 800ccc8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccce:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ccd0:	697b      	ldr	r3, [r7, #20]
 800ccd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ccd6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ccd8:	697b      	ldr	r3, [r7, #20]
 800ccda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ccde:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800cce0:	697b      	ldr	r3, [r7, #20]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	689b      	ldr	r3, [r3, #8]
 800cce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ccea:	2b80      	cmp	r3, #128	; 0x80
 800ccec:	d109      	bne.n	800cd02 <UART_DMAError+0x40>
 800ccee:	693b      	ldr	r3, [r7, #16]
 800ccf0:	2b21      	cmp	r3, #33	; 0x21
 800ccf2:	d106      	bne.n	800cd02 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ccf4:	697b      	ldr	r3, [r7, #20]
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800ccfc:	6978      	ldr	r0, [r7, #20]
 800ccfe:	f7ff ff29 	bl	800cb54 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800cd02:	697b      	ldr	r3, [r7, #20]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	689b      	ldr	r3, [r3, #8]
 800cd08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd0c:	2b40      	cmp	r3, #64	; 0x40
 800cd0e:	d109      	bne.n	800cd24 <UART_DMAError+0x62>
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	2b22      	cmp	r3, #34	; 0x22
 800cd14:	d106      	bne.n	800cd24 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800cd16:	697b      	ldr	r3, [r7, #20]
 800cd18:	2200      	movs	r2, #0
 800cd1a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800cd1e:	6978      	ldr	r0, [r7, #20]
 800cd20:	f7ff ff36 	bl	800cb90 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800cd24:	697b      	ldr	r3, [r7, #20]
 800cd26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cd2a:	f043 0210 	orr.w	r2, r3, #16
 800cd2e:	697b      	ldr	r3, [r7, #20]
 800cd30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cd34:	6978      	ldr	r0, [r7, #20]
 800cd36:	f7fe ffb1 	bl	800bc9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cd3a:	bf00      	nop
 800cd3c:	3718      	adds	r7, #24
 800cd3e:	46bd      	mov	sp, r7
 800cd40:	bd80      	pop	{r7, pc}

0800cd42 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cd42:	b580      	push	{r7, lr}
 800cd44:	b084      	sub	sp, #16
 800cd46:	af00      	add	r7, sp, #0
 800cd48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd4e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	2200      	movs	r2, #0
 800cd54:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cd60:	68f8      	ldr	r0, [r7, #12]
 800cd62:	f7fe ff9b 	bl	800bc9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cd66:	bf00      	nop
 800cd68:	3710      	adds	r7, #16
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	bd80      	pop	{r7, pc}

0800cd6e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cd6e:	b580      	push	{r7, lr}
 800cd70:	b082      	sub	sp, #8
 800cd72:	af00      	add	r7, sp, #0
 800cd74:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	681a      	ldr	r2, [r3, #0]
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cd84:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	2220      	movs	r2, #32
 800cd8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	2200      	movs	r2, #0
 800cd92:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cd94:	6878      	ldr	r0, [r7, #4]
 800cd96:	f7fe ff6d 	bl	800bc74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cd9a:	bf00      	nop
 800cd9c:	3708      	adds	r7, #8
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	bd80      	pop	{r7, pc}

0800cda2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800cda2:	b480      	push	{r7}
 800cda4:	b083      	sub	sp, #12
 800cda6:	af00      	add	r7, sp, #0
 800cda8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800cdaa:	bf00      	nop
 800cdac:	370c      	adds	r7, #12
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb4:	4770      	bx	lr

0800cdb6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800cdb6:	b480      	push	{r7}
 800cdb8:	b083      	sub	sp, #12
 800cdba:	af00      	add	r7, sp, #0
 800cdbc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800cdbe:	bf00      	nop
 800cdc0:	370c      	adds	r7, #12
 800cdc2:	46bd      	mov	sp, r7
 800cdc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc8:	4770      	bx	lr

0800cdca <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800cdca:	b480      	push	{r7}
 800cdcc:	b083      	sub	sp, #12
 800cdce:	af00      	add	r7, sp, #0
 800cdd0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800cdd2:	bf00      	nop
 800cdd4:	370c      	adds	r7, #12
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cddc:	4770      	bx	lr

0800cdde <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cdde:	b480      	push	{r7}
 800cde0:	b085      	sub	sp, #20
 800cde2:	af00      	add	r7, sp, #0
 800cde4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cdec:	2b01      	cmp	r3, #1
 800cdee:	d101      	bne.n	800cdf4 <HAL_UARTEx_DisableFifoMode+0x16>
 800cdf0:	2302      	movs	r3, #2
 800cdf2:	e027      	b.n	800ce44 <HAL_UARTEx_DisableFifoMode+0x66>
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	2201      	movs	r2, #1
 800cdf8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	2224      	movs	r2, #36	; 0x24
 800ce00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	681a      	ldr	r2, [r3, #0]
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	f022 0201 	bic.w	r2, r2, #1
 800ce1a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ce22:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	2200      	movs	r2, #0
 800ce28:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	68fa      	ldr	r2, [r7, #12]
 800ce30:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	2220      	movs	r2, #32
 800ce36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ce42:	2300      	movs	r3, #0
}
 800ce44:	4618      	mov	r0, r3
 800ce46:	3714      	adds	r7, #20
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4e:	4770      	bx	lr

0800ce50 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b084      	sub	sp, #16
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	6078      	str	r0, [r7, #4]
 800ce58:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ce60:	2b01      	cmp	r3, #1
 800ce62:	d101      	bne.n	800ce68 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ce64:	2302      	movs	r3, #2
 800ce66:	e02d      	b.n	800cec4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	2201      	movs	r2, #1
 800ce6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	2224      	movs	r2, #36	; 0x24
 800ce74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	681a      	ldr	r2, [r3, #0]
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	f022 0201 	bic.w	r2, r2, #1
 800ce8e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	689b      	ldr	r3, [r3, #8]
 800ce96:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	683a      	ldr	r2, [r7, #0]
 800cea0:	430a      	orrs	r2, r1
 800cea2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cea4:	6878      	ldr	r0, [r7, #4]
 800cea6:	f000 f84f 	bl	800cf48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	68fa      	ldr	r2, [r7, #12]
 800ceb0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	2220      	movs	r2, #32
 800ceb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	2200      	movs	r2, #0
 800cebe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cec2:	2300      	movs	r3, #0
}
 800cec4:	4618      	mov	r0, r3
 800cec6:	3710      	adds	r7, #16
 800cec8:	46bd      	mov	sp, r7
 800ceca:	bd80      	pop	{r7, pc}

0800cecc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cecc:	b580      	push	{r7, lr}
 800cece:	b084      	sub	sp, #16
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	6078      	str	r0, [r7, #4]
 800ced4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cedc:	2b01      	cmp	r3, #1
 800cede:	d101      	bne.n	800cee4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cee0:	2302      	movs	r3, #2
 800cee2:	e02d      	b.n	800cf40 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	2201      	movs	r2, #1
 800cee8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	2224      	movs	r2, #36	; 0x24
 800cef0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	681a      	ldr	r2, [r3, #0]
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	f022 0201 	bic.w	r2, r2, #1
 800cf0a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	689b      	ldr	r3, [r3, #8]
 800cf12:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	683a      	ldr	r2, [r7, #0]
 800cf1c:	430a      	orrs	r2, r1
 800cf1e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cf20:	6878      	ldr	r0, [r7, #4]
 800cf22:	f000 f811 	bl	800cf48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	68fa      	ldr	r2, [r7, #12]
 800cf2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	2220      	movs	r2, #32
 800cf32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	2200      	movs	r2, #0
 800cf3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cf3e:	2300      	movs	r3, #0
}
 800cf40:	4618      	mov	r0, r3
 800cf42:	3710      	adds	r7, #16
 800cf44:	46bd      	mov	sp, r7
 800cf46:	bd80      	pop	{r7, pc}

0800cf48 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cf48:	b480      	push	{r7}
 800cf4a:	b085      	sub	sp, #20
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d108      	bne.n	800cf6a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	2201      	movs	r2, #1
 800cf5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	2201      	movs	r2, #1
 800cf64:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cf68:	e031      	b.n	800cfce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cf6a:	2310      	movs	r3, #16
 800cf6c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cf6e:	2310      	movs	r3, #16
 800cf70:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	689b      	ldr	r3, [r3, #8]
 800cf78:	0e5b      	lsrs	r3, r3, #25
 800cf7a:	b2db      	uxtb	r3, r3
 800cf7c:	f003 0307 	and.w	r3, r3, #7
 800cf80:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	689b      	ldr	r3, [r3, #8]
 800cf88:	0f5b      	lsrs	r3, r3, #29
 800cf8a:	b2db      	uxtb	r3, r3
 800cf8c:	f003 0307 	and.w	r3, r3, #7
 800cf90:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cf92:	7bbb      	ldrb	r3, [r7, #14]
 800cf94:	7b3a      	ldrb	r2, [r7, #12]
 800cf96:	4911      	ldr	r1, [pc, #68]	; (800cfdc <UARTEx_SetNbDataToProcess+0x94>)
 800cf98:	5c8a      	ldrb	r2, [r1, r2]
 800cf9a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cf9e:	7b3a      	ldrb	r2, [r7, #12]
 800cfa0:	490f      	ldr	r1, [pc, #60]	; (800cfe0 <UARTEx_SetNbDataToProcess+0x98>)
 800cfa2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cfa4:	fb93 f3f2 	sdiv	r3, r3, r2
 800cfa8:	b29a      	uxth	r2, r3
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cfb0:	7bfb      	ldrb	r3, [r7, #15]
 800cfb2:	7b7a      	ldrb	r2, [r7, #13]
 800cfb4:	4909      	ldr	r1, [pc, #36]	; (800cfdc <UARTEx_SetNbDataToProcess+0x94>)
 800cfb6:	5c8a      	ldrb	r2, [r1, r2]
 800cfb8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cfbc:	7b7a      	ldrb	r2, [r7, #13]
 800cfbe:	4908      	ldr	r1, [pc, #32]	; (800cfe0 <UARTEx_SetNbDataToProcess+0x98>)
 800cfc0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cfc2:	fb93 f3f2 	sdiv	r3, r3, r2
 800cfc6:	b29a      	uxth	r2, r3
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800cfce:	bf00      	nop
 800cfd0:	3714      	adds	r7, #20
 800cfd2:	46bd      	mov	sp, r7
 800cfd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd8:	4770      	bx	lr
 800cfda:	bf00      	nop
 800cfdc:	08013868 	.word	0x08013868
 800cfe0:	08013870 	.word	0x08013870

0800cfe4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800cfe4:	b480      	push	{r7}
 800cfe6:	b083      	sub	sp, #12
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800cff2:	4618      	mov	r0, r3
 800cff4:	370c      	adds	r7, #12
 800cff6:	46bd      	mov	sp, r7
 800cff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cffc:	4770      	bx	lr

0800cffe <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800cffe:	b480      	push	{r7}
 800d000:	b083      	sub	sp, #12
 800d002:	af00      	add	r7, sp, #0
 800d004:	6078      	str	r0, [r7, #4]
 800d006:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800d008:	683b      	ldr	r3, [r7, #0]
 800d00a:	681a      	ldr	r2, [r3, #0]
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d012:	2300      	movs	r3, #0
}
 800d014:	4618      	mov	r0, r3
 800d016:	370c      	adds	r7, #12
 800d018:	46bd      	mov	sp, r7
 800d01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01e:	4770      	bx	lr

0800d020 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800d020:	b480      	push	{r7}
 800d022:	b085      	sub	sp, #20
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
 800d028:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d02a:	2300      	movs	r3, #0
 800d02c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800d02e:	683b      	ldr	r3, [r7, #0]
 800d030:	681a      	ldr	r2, [r3, #0]
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800d036:	683b      	ldr	r3, [r7, #0]
 800d038:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800d03a:	683b      	ldr	r3, [r7, #0]
 800d03c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800d03e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800d040:	683b      	ldr	r3, [r7, #0]
 800d042:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800d044:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d046:	683b      	ldr	r3, [r7, #0]
 800d048:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800d04a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800d04c:	68fa      	ldr	r2, [r7, #12]
 800d04e:	4313      	orrs	r3, r2
 800d050:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	68da      	ldr	r2, [r3, #12]
 800d056:	4b06      	ldr	r3, [pc, #24]	; (800d070 <SDMMC_SendCommand+0x50>)
 800d058:	4013      	ands	r3, r2
 800d05a:	68fa      	ldr	r2, [r7, #12]
 800d05c:	431a      	orrs	r2, r3
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d062:	2300      	movs	r3, #0
}
 800d064:	4618      	mov	r0, r3
 800d066:	3714      	adds	r7, #20
 800d068:	46bd      	mov	sp, r7
 800d06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06e:	4770      	bx	lr
 800d070:	fffee0c0 	.word	0xfffee0c0

0800d074 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800d074:	b480      	push	{r7}
 800d076:	b083      	sub	sp, #12
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	691b      	ldr	r3, [r3, #16]
 800d080:	b2db      	uxtb	r3, r3
}
 800d082:	4618      	mov	r0, r3
 800d084:	370c      	adds	r7, #12
 800d086:	46bd      	mov	sp, r7
 800d088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d08c:	4770      	bx	lr

0800d08e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800d08e:	b480      	push	{r7}
 800d090:	b085      	sub	sp, #20
 800d092:	af00      	add	r7, sp, #0
 800d094:	6078      	str	r0, [r7, #4]
 800d096:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	3314      	adds	r3, #20
 800d09c:	461a      	mov	r2, r3
 800d09e:	683b      	ldr	r3, [r7, #0]
 800d0a0:	4413      	add	r3, r2
 800d0a2:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	681b      	ldr	r3, [r3, #0]
}
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	3714      	adds	r7, #20
 800d0ac:	46bd      	mov	sp, r7
 800d0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b2:	4770      	bx	lr

0800d0b4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800d0b4:	b580      	push	{r7, lr}
 800d0b6:	b088      	sub	sp, #32
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800d0bc:	2300      	movs	r3, #0
 800d0be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800d0c0:	230c      	movs	r3, #12
 800d0c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d0c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d0c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d0ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d0d2:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	68db      	ldr	r3, [r3, #12]
 800d0d8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	68db      	ldr	r3, [r3, #12]
 800d0e4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d0ec:	f107 0308 	add.w	r3, r7, #8
 800d0f0:	4619      	mov	r1, r3
 800d0f2:	6878      	ldr	r0, [r7, #4]
 800d0f4:	f7ff ff94 	bl	800d020 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800d0f8:	4a0b      	ldr	r2, [pc, #44]	; (800d128 <SDMMC_CmdStopTransfer+0x74>)
 800d0fa:	210c      	movs	r1, #12
 800d0fc:	6878      	ldr	r0, [r7, #4]
 800d0fe:	f000 f815 	bl	800d12c <SDMMC_GetCmdResp1>
 800d102:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	68db      	ldr	r3, [r3, #12]
 800d108:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800d110:	69fb      	ldr	r3, [r7, #28]
 800d112:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d116:	d101      	bne.n	800d11c <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800d118:	2300      	movs	r3, #0
 800d11a:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800d11c:	69fb      	ldr	r3, [r7, #28]
}
 800d11e:	4618      	mov	r0, r3
 800d120:	3720      	adds	r7, #32
 800d122:	46bd      	mov	sp, r7
 800d124:	bd80      	pop	{r7, pc}
 800d126:	bf00      	nop
 800d128:	05f5e100 	.word	0x05f5e100

0800d12c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d12c:	b580      	push	{r7, lr}
 800d12e:	b088      	sub	sp, #32
 800d130:	af00      	add	r7, sp, #0
 800d132:	60f8      	str	r0, [r7, #12]
 800d134:	460b      	mov	r3, r1
 800d136:	607a      	str	r2, [r7, #4]
 800d138:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800d13a:	4b70      	ldr	r3, [pc, #448]	; (800d2fc <SDMMC_GetCmdResp1+0x1d0>)
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	4a70      	ldr	r2, [pc, #448]	; (800d300 <SDMMC_GetCmdResp1+0x1d4>)
 800d140:	fba2 2303 	umull	r2, r3, r2, r3
 800d144:	0a5a      	lsrs	r2, r3, #9
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	fb02 f303 	mul.w	r3, r2, r3
 800d14c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800d14e:	69fb      	ldr	r3, [r7, #28]
 800d150:	1e5a      	subs	r2, r3, #1
 800d152:	61fa      	str	r2, [r7, #28]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d102      	bne.n	800d15e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d158:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d15c:	e0c9      	b.n	800d2f2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d162:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800d164:	69ba      	ldr	r2, [r7, #24]
 800d166:	4b67      	ldr	r3, [pc, #412]	; (800d304 <SDMMC_GetCmdResp1+0x1d8>)
 800d168:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d0ef      	beq.n	800d14e <SDMMC_GetCmdResp1+0x22>
 800d16e:	69bb      	ldr	r3, [r7, #24]
 800d170:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d174:	2b00      	cmp	r3, #0
 800d176:	d1ea      	bne.n	800d14e <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d17c:	f003 0304 	and.w	r3, r3, #4
 800d180:	2b00      	cmp	r3, #0
 800d182:	d004      	beq.n	800d18e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	2204      	movs	r2, #4
 800d188:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d18a:	2304      	movs	r3, #4
 800d18c:	e0b1      	b.n	800d2f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d192:	f003 0301 	and.w	r3, r3, #1
 800d196:	2b00      	cmp	r3, #0
 800d198:	d004      	beq.n	800d1a4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	2201      	movs	r2, #1
 800d19e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d1a0:	2301      	movs	r3, #1
 800d1a2:	e0a6      	b.n	800d2f2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	4a58      	ldr	r2, [pc, #352]	; (800d308 <SDMMC_GetCmdResp1+0x1dc>)
 800d1a8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d1aa:	68f8      	ldr	r0, [r7, #12]
 800d1ac:	f7ff ff62 	bl	800d074 <SDMMC_GetCommandResponse>
 800d1b0:	4603      	mov	r3, r0
 800d1b2:	461a      	mov	r2, r3
 800d1b4:	7afb      	ldrb	r3, [r7, #11]
 800d1b6:	4293      	cmp	r3, r2
 800d1b8:	d001      	beq.n	800d1be <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d1ba:	2301      	movs	r3, #1
 800d1bc:	e099      	b.n	800d2f2 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d1be:	2100      	movs	r1, #0
 800d1c0:	68f8      	ldr	r0, [r7, #12]
 800d1c2:	f7ff ff64 	bl	800d08e <SDMMC_GetResponse>
 800d1c6:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d1c8:	697a      	ldr	r2, [r7, #20]
 800d1ca:	4b50      	ldr	r3, [pc, #320]	; (800d30c <SDMMC_GetCmdResp1+0x1e0>)
 800d1cc:	4013      	ands	r3, r2
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d101      	bne.n	800d1d6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	e08d      	b.n	800d2f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d1d6:	697b      	ldr	r3, [r7, #20]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	da02      	bge.n	800d1e2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d1dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d1e0:	e087      	b.n	800d2f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d1e2:	697b      	ldr	r3, [r7, #20]
 800d1e4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d001      	beq.n	800d1f0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d1ec:	2340      	movs	r3, #64	; 0x40
 800d1ee:	e080      	b.n	800d2f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d1f0:	697b      	ldr	r3, [r7, #20]
 800d1f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d001      	beq.n	800d1fe <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d1fa:	2380      	movs	r3, #128	; 0x80
 800d1fc:	e079      	b.n	800d2f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d1fe:	697b      	ldr	r3, [r7, #20]
 800d200:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d204:	2b00      	cmp	r3, #0
 800d206:	d002      	beq.n	800d20e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d208:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d20c:	e071      	b.n	800d2f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d20e:	697b      	ldr	r3, [r7, #20]
 800d210:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d214:	2b00      	cmp	r3, #0
 800d216:	d002      	beq.n	800d21e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d218:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d21c:	e069      	b.n	800d2f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d21e:	697b      	ldr	r3, [r7, #20]
 800d220:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d224:	2b00      	cmp	r3, #0
 800d226:	d002      	beq.n	800d22e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d228:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d22c:	e061      	b.n	800d2f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d22e:	697b      	ldr	r3, [r7, #20]
 800d230:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d234:	2b00      	cmp	r3, #0
 800d236:	d002      	beq.n	800d23e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d238:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d23c:	e059      	b.n	800d2f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d23e:	697b      	ldr	r3, [r7, #20]
 800d240:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d244:	2b00      	cmp	r3, #0
 800d246:	d002      	beq.n	800d24e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d248:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d24c:	e051      	b.n	800d2f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d24e:	697b      	ldr	r3, [r7, #20]
 800d250:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d254:	2b00      	cmp	r3, #0
 800d256:	d002      	beq.n	800d25e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d258:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d25c:	e049      	b.n	800d2f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d25e:	697b      	ldr	r3, [r7, #20]
 800d260:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d264:	2b00      	cmp	r3, #0
 800d266:	d002      	beq.n	800d26e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d268:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d26c:	e041      	b.n	800d2f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d26e:	697b      	ldr	r3, [r7, #20]
 800d270:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d274:	2b00      	cmp	r3, #0
 800d276:	d002      	beq.n	800d27e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800d278:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d27c:	e039      	b.n	800d2f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d27e:	697b      	ldr	r3, [r7, #20]
 800d280:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d284:	2b00      	cmp	r3, #0
 800d286:	d002      	beq.n	800d28e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d288:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d28c:	e031      	b.n	800d2f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d28e:	697b      	ldr	r3, [r7, #20]
 800d290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d294:	2b00      	cmp	r3, #0
 800d296:	d002      	beq.n	800d29e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d298:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d29c:	e029      	b.n	800d2f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d29e:	697b      	ldr	r3, [r7, #20]
 800d2a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d002      	beq.n	800d2ae <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d2a8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d2ac:	e021      	b.n	800d2f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d2ae:	697b      	ldr	r3, [r7, #20]
 800d2b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d002      	beq.n	800d2be <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d2b8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800d2bc:	e019      	b.n	800d2f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d2be:	697b      	ldr	r3, [r7, #20]
 800d2c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d002      	beq.n	800d2ce <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d2c8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d2cc:	e011      	b.n	800d2f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d2ce:	697b      	ldr	r3, [r7, #20]
 800d2d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d002      	beq.n	800d2de <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d2d8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d2dc:	e009      	b.n	800d2f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d2de:	697b      	ldr	r3, [r7, #20]
 800d2e0:	f003 0308 	and.w	r3, r3, #8
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d002      	beq.n	800d2ee <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d2e8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d2ec:	e001      	b.n	800d2f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d2ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	3720      	adds	r7, #32
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	bd80      	pop	{r7, pc}
 800d2fa:	bf00      	nop
 800d2fc:	24000000 	.word	0x24000000
 800d300:	10624dd3 	.word	0x10624dd3
 800d304:	00200045 	.word	0x00200045
 800d308:	002000c5 	.word	0x002000c5
 800d30c:	fdffe008 	.word	0xfdffe008

0800d310 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d310:	b084      	sub	sp, #16
 800d312:	b580      	push	{r7, lr}
 800d314:	b084      	sub	sp, #16
 800d316:	af00      	add	r7, sp, #0
 800d318:	6078      	str	r0, [r7, #4]
 800d31a:	f107 001c 	add.w	r0, r7, #28
 800d31e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d324:	2b01      	cmp	r3, #1
 800d326:	d120      	bne.n	800d36a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d32c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	68da      	ldr	r2, [r3, #12]
 800d338:	4b2a      	ldr	r3, [pc, #168]	; (800d3e4 <USB_CoreInit+0xd4>)
 800d33a:	4013      	ands	r3, r2
 800d33c:	687a      	ldr	r2, [r7, #4]
 800d33e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	68db      	ldr	r3, [r3, #12]
 800d344:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d34c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d34e:	2b01      	cmp	r3, #1
 800d350:	d105      	bne.n	800d35e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	68db      	ldr	r3, [r3, #12]
 800d356:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d35e:	6878      	ldr	r0, [r7, #4]
 800d360:	f001 fb14 	bl	800e98c <USB_CoreReset>
 800d364:	4603      	mov	r3, r0
 800d366:	73fb      	strb	r3, [r7, #15]
 800d368:	e01a      	b.n	800d3a0 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	68db      	ldr	r3, [r3, #12]
 800d36e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d376:	6878      	ldr	r0, [r7, #4]
 800d378:	f001 fb08 	bl	800e98c <USB_CoreReset>
 800d37c:	4603      	mov	r3, r0
 800d37e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800d380:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d382:	2b00      	cmp	r3, #0
 800d384:	d106      	bne.n	800d394 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d38a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	639a      	str	r2, [r3, #56]	; 0x38
 800d392:	e005      	b.n	800d3a0 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d398:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800d3a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3a2:	2b01      	cmp	r3, #1
 800d3a4:	d116      	bne.n	800d3d4 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d3aa:	b29a      	uxth	r2, r3
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d3b4:	4b0c      	ldr	r3, [pc, #48]	; (800d3e8 <USB_CoreInit+0xd8>)
 800d3b6:	4313      	orrs	r3, r2
 800d3b8:	687a      	ldr	r2, [r7, #4]
 800d3ba:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	689b      	ldr	r3, [r3, #8]
 800d3c0:	f043 0206 	orr.w	r2, r3, #6
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	689b      	ldr	r3, [r3, #8]
 800d3cc:	f043 0220 	orr.w	r2, r3, #32
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d3d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	3710      	adds	r7, #16
 800d3da:	46bd      	mov	sp, r7
 800d3dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d3e0:	b004      	add	sp, #16
 800d3e2:	4770      	bx	lr
 800d3e4:	ffbdffbf 	.word	0xffbdffbf
 800d3e8:	03ee0000 	.word	0x03ee0000

0800d3ec <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800d3ec:	b480      	push	{r7}
 800d3ee:	b087      	sub	sp, #28
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	60f8      	str	r0, [r7, #12]
 800d3f4:	60b9      	str	r1, [r7, #8]
 800d3f6:	4613      	mov	r3, r2
 800d3f8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800d3fa:	79fb      	ldrb	r3, [r7, #7]
 800d3fc:	2b02      	cmp	r3, #2
 800d3fe:	d165      	bne.n	800d4cc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800d400:	68bb      	ldr	r3, [r7, #8]
 800d402:	4a41      	ldr	r2, [pc, #260]	; (800d508 <USB_SetTurnaroundTime+0x11c>)
 800d404:	4293      	cmp	r3, r2
 800d406:	d906      	bls.n	800d416 <USB_SetTurnaroundTime+0x2a>
 800d408:	68bb      	ldr	r3, [r7, #8]
 800d40a:	4a40      	ldr	r2, [pc, #256]	; (800d50c <USB_SetTurnaroundTime+0x120>)
 800d40c:	4293      	cmp	r3, r2
 800d40e:	d202      	bcs.n	800d416 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800d410:	230f      	movs	r3, #15
 800d412:	617b      	str	r3, [r7, #20]
 800d414:	e062      	b.n	800d4dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800d416:	68bb      	ldr	r3, [r7, #8]
 800d418:	4a3c      	ldr	r2, [pc, #240]	; (800d50c <USB_SetTurnaroundTime+0x120>)
 800d41a:	4293      	cmp	r3, r2
 800d41c:	d306      	bcc.n	800d42c <USB_SetTurnaroundTime+0x40>
 800d41e:	68bb      	ldr	r3, [r7, #8]
 800d420:	4a3b      	ldr	r2, [pc, #236]	; (800d510 <USB_SetTurnaroundTime+0x124>)
 800d422:	4293      	cmp	r3, r2
 800d424:	d202      	bcs.n	800d42c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800d426:	230e      	movs	r3, #14
 800d428:	617b      	str	r3, [r7, #20]
 800d42a:	e057      	b.n	800d4dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800d42c:	68bb      	ldr	r3, [r7, #8]
 800d42e:	4a38      	ldr	r2, [pc, #224]	; (800d510 <USB_SetTurnaroundTime+0x124>)
 800d430:	4293      	cmp	r3, r2
 800d432:	d306      	bcc.n	800d442 <USB_SetTurnaroundTime+0x56>
 800d434:	68bb      	ldr	r3, [r7, #8]
 800d436:	4a37      	ldr	r2, [pc, #220]	; (800d514 <USB_SetTurnaroundTime+0x128>)
 800d438:	4293      	cmp	r3, r2
 800d43a:	d202      	bcs.n	800d442 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800d43c:	230d      	movs	r3, #13
 800d43e:	617b      	str	r3, [r7, #20]
 800d440:	e04c      	b.n	800d4dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800d442:	68bb      	ldr	r3, [r7, #8]
 800d444:	4a33      	ldr	r2, [pc, #204]	; (800d514 <USB_SetTurnaroundTime+0x128>)
 800d446:	4293      	cmp	r3, r2
 800d448:	d306      	bcc.n	800d458 <USB_SetTurnaroundTime+0x6c>
 800d44a:	68bb      	ldr	r3, [r7, #8]
 800d44c:	4a32      	ldr	r2, [pc, #200]	; (800d518 <USB_SetTurnaroundTime+0x12c>)
 800d44e:	4293      	cmp	r3, r2
 800d450:	d802      	bhi.n	800d458 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800d452:	230c      	movs	r3, #12
 800d454:	617b      	str	r3, [r7, #20]
 800d456:	e041      	b.n	800d4dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800d458:	68bb      	ldr	r3, [r7, #8]
 800d45a:	4a2f      	ldr	r2, [pc, #188]	; (800d518 <USB_SetTurnaroundTime+0x12c>)
 800d45c:	4293      	cmp	r3, r2
 800d45e:	d906      	bls.n	800d46e <USB_SetTurnaroundTime+0x82>
 800d460:	68bb      	ldr	r3, [r7, #8]
 800d462:	4a2e      	ldr	r2, [pc, #184]	; (800d51c <USB_SetTurnaroundTime+0x130>)
 800d464:	4293      	cmp	r3, r2
 800d466:	d802      	bhi.n	800d46e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800d468:	230b      	movs	r3, #11
 800d46a:	617b      	str	r3, [r7, #20]
 800d46c:	e036      	b.n	800d4dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800d46e:	68bb      	ldr	r3, [r7, #8]
 800d470:	4a2a      	ldr	r2, [pc, #168]	; (800d51c <USB_SetTurnaroundTime+0x130>)
 800d472:	4293      	cmp	r3, r2
 800d474:	d906      	bls.n	800d484 <USB_SetTurnaroundTime+0x98>
 800d476:	68bb      	ldr	r3, [r7, #8]
 800d478:	4a29      	ldr	r2, [pc, #164]	; (800d520 <USB_SetTurnaroundTime+0x134>)
 800d47a:	4293      	cmp	r3, r2
 800d47c:	d802      	bhi.n	800d484 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800d47e:	230a      	movs	r3, #10
 800d480:	617b      	str	r3, [r7, #20]
 800d482:	e02b      	b.n	800d4dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800d484:	68bb      	ldr	r3, [r7, #8]
 800d486:	4a26      	ldr	r2, [pc, #152]	; (800d520 <USB_SetTurnaroundTime+0x134>)
 800d488:	4293      	cmp	r3, r2
 800d48a:	d906      	bls.n	800d49a <USB_SetTurnaroundTime+0xae>
 800d48c:	68bb      	ldr	r3, [r7, #8]
 800d48e:	4a25      	ldr	r2, [pc, #148]	; (800d524 <USB_SetTurnaroundTime+0x138>)
 800d490:	4293      	cmp	r3, r2
 800d492:	d202      	bcs.n	800d49a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800d494:	2309      	movs	r3, #9
 800d496:	617b      	str	r3, [r7, #20]
 800d498:	e020      	b.n	800d4dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800d49a:	68bb      	ldr	r3, [r7, #8]
 800d49c:	4a21      	ldr	r2, [pc, #132]	; (800d524 <USB_SetTurnaroundTime+0x138>)
 800d49e:	4293      	cmp	r3, r2
 800d4a0:	d306      	bcc.n	800d4b0 <USB_SetTurnaroundTime+0xc4>
 800d4a2:	68bb      	ldr	r3, [r7, #8]
 800d4a4:	4a20      	ldr	r2, [pc, #128]	; (800d528 <USB_SetTurnaroundTime+0x13c>)
 800d4a6:	4293      	cmp	r3, r2
 800d4a8:	d802      	bhi.n	800d4b0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800d4aa:	2308      	movs	r3, #8
 800d4ac:	617b      	str	r3, [r7, #20]
 800d4ae:	e015      	b.n	800d4dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800d4b0:	68bb      	ldr	r3, [r7, #8]
 800d4b2:	4a1d      	ldr	r2, [pc, #116]	; (800d528 <USB_SetTurnaroundTime+0x13c>)
 800d4b4:	4293      	cmp	r3, r2
 800d4b6:	d906      	bls.n	800d4c6 <USB_SetTurnaroundTime+0xda>
 800d4b8:	68bb      	ldr	r3, [r7, #8]
 800d4ba:	4a1c      	ldr	r2, [pc, #112]	; (800d52c <USB_SetTurnaroundTime+0x140>)
 800d4bc:	4293      	cmp	r3, r2
 800d4be:	d202      	bcs.n	800d4c6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800d4c0:	2307      	movs	r3, #7
 800d4c2:	617b      	str	r3, [r7, #20]
 800d4c4:	e00a      	b.n	800d4dc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800d4c6:	2306      	movs	r3, #6
 800d4c8:	617b      	str	r3, [r7, #20]
 800d4ca:	e007      	b.n	800d4dc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800d4cc:	79fb      	ldrb	r3, [r7, #7]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d102      	bne.n	800d4d8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800d4d2:	2309      	movs	r3, #9
 800d4d4:	617b      	str	r3, [r7, #20]
 800d4d6:	e001      	b.n	800d4dc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800d4d8:	2309      	movs	r3, #9
 800d4da:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	68db      	ldr	r3, [r3, #12]
 800d4e0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	68da      	ldr	r2, [r3, #12]
 800d4ec:	697b      	ldr	r3, [r7, #20]
 800d4ee:	029b      	lsls	r3, r3, #10
 800d4f0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800d4f4:	431a      	orrs	r2, r3
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d4fa:	2300      	movs	r3, #0
}
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	371c      	adds	r7, #28
 800d500:	46bd      	mov	sp, r7
 800d502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d506:	4770      	bx	lr
 800d508:	00d8acbf 	.word	0x00d8acbf
 800d50c:	00e4e1c0 	.word	0x00e4e1c0
 800d510:	00f42400 	.word	0x00f42400
 800d514:	01067380 	.word	0x01067380
 800d518:	011a499f 	.word	0x011a499f
 800d51c:	01312cff 	.word	0x01312cff
 800d520:	014ca43f 	.word	0x014ca43f
 800d524:	016e3600 	.word	0x016e3600
 800d528:	01a6ab1f 	.word	0x01a6ab1f
 800d52c:	01e84800 	.word	0x01e84800

0800d530 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d530:	b480      	push	{r7}
 800d532:	b083      	sub	sp, #12
 800d534:	af00      	add	r7, sp, #0
 800d536:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	689b      	ldr	r3, [r3, #8]
 800d53c:	f043 0201 	orr.w	r2, r3, #1
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d544:	2300      	movs	r3, #0
}
 800d546:	4618      	mov	r0, r3
 800d548:	370c      	adds	r7, #12
 800d54a:	46bd      	mov	sp, r7
 800d54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d550:	4770      	bx	lr

0800d552 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d552:	b480      	push	{r7}
 800d554:	b083      	sub	sp, #12
 800d556:	af00      	add	r7, sp, #0
 800d558:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	689b      	ldr	r3, [r3, #8]
 800d55e:	f023 0201 	bic.w	r2, r3, #1
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d566:	2300      	movs	r3, #0
}
 800d568:	4618      	mov	r0, r3
 800d56a:	370c      	adds	r7, #12
 800d56c:	46bd      	mov	sp, r7
 800d56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d572:	4770      	bx	lr

0800d574 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d574:	b580      	push	{r7, lr}
 800d576:	b082      	sub	sp, #8
 800d578:	af00      	add	r7, sp, #0
 800d57a:	6078      	str	r0, [r7, #4]
 800d57c:	460b      	mov	r3, r1
 800d57e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	68db      	ldr	r3, [r3, #12]
 800d584:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d58c:	78fb      	ldrb	r3, [r7, #3]
 800d58e:	2b01      	cmp	r3, #1
 800d590:	d106      	bne.n	800d5a0 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	68db      	ldr	r3, [r3, #12]
 800d596:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	60da      	str	r2, [r3, #12]
 800d59e:	e00b      	b.n	800d5b8 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800d5a0:	78fb      	ldrb	r3, [r7, #3]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d106      	bne.n	800d5b4 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	68db      	ldr	r3, [r3, #12]
 800d5aa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	60da      	str	r2, [r3, #12]
 800d5b2:	e001      	b.n	800d5b8 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800d5b4:	2301      	movs	r3, #1
 800d5b6:	e003      	b.n	800d5c0 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800d5b8:	2032      	movs	r0, #50	; 0x32
 800d5ba:	f7f4 fc9b 	bl	8001ef4 <HAL_Delay>

  return HAL_OK;
 800d5be:	2300      	movs	r3, #0
}
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	3708      	adds	r7, #8
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	bd80      	pop	{r7, pc}

0800d5c8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d5c8:	b084      	sub	sp, #16
 800d5ca:	b580      	push	{r7, lr}
 800d5cc:	b086      	sub	sp, #24
 800d5ce:	af00      	add	r7, sp, #0
 800d5d0:	6078      	str	r0, [r7, #4]
 800d5d2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800d5d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d5da:	2300      	movs	r3, #0
 800d5dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	613b      	str	r3, [r7, #16]
 800d5e6:	e009      	b.n	800d5fc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d5e8:	687a      	ldr	r2, [r7, #4]
 800d5ea:	693b      	ldr	r3, [r7, #16]
 800d5ec:	3340      	adds	r3, #64	; 0x40
 800d5ee:	009b      	lsls	r3, r3, #2
 800d5f0:	4413      	add	r3, r2
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d5f6:	693b      	ldr	r3, [r7, #16]
 800d5f8:	3301      	adds	r3, #1
 800d5fa:	613b      	str	r3, [r7, #16]
 800d5fc:	693b      	ldr	r3, [r7, #16]
 800d5fe:	2b0e      	cmp	r3, #14
 800d600:	d9f2      	bls.n	800d5e8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d602:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d604:	2b00      	cmp	r3, #0
 800d606:	d11c      	bne.n	800d642 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d60e:	685b      	ldr	r3, [r3, #4]
 800d610:	68fa      	ldr	r2, [r7, #12]
 800d612:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d616:	f043 0302 	orr.w	r3, r3, #2
 800d61a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d620:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	601a      	str	r2, [r3, #0]
 800d640:	e005      	b.n	800d64e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d646:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d654:	461a      	mov	r2, r3
 800d656:	2300      	movs	r3, #0
 800d658:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d660:	4619      	mov	r1, r3
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d668:	461a      	mov	r2, r3
 800d66a:	680b      	ldr	r3, [r1, #0]
 800d66c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d66e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d670:	2b01      	cmp	r3, #1
 800d672:	d10c      	bne.n	800d68e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d676:	2b00      	cmp	r3, #0
 800d678:	d104      	bne.n	800d684 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d67a:	2100      	movs	r1, #0
 800d67c:	6878      	ldr	r0, [r7, #4]
 800d67e:	f000 f949 	bl	800d914 <USB_SetDevSpeed>
 800d682:	e008      	b.n	800d696 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d684:	2101      	movs	r1, #1
 800d686:	6878      	ldr	r0, [r7, #4]
 800d688:	f000 f944 	bl	800d914 <USB_SetDevSpeed>
 800d68c:	e003      	b.n	800d696 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d68e:	2103      	movs	r1, #3
 800d690:	6878      	ldr	r0, [r7, #4]
 800d692:	f000 f93f 	bl	800d914 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d696:	2110      	movs	r1, #16
 800d698:	6878      	ldr	r0, [r7, #4]
 800d69a:	f000 f8f3 	bl	800d884 <USB_FlushTxFifo>
 800d69e:	4603      	mov	r3, r0
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d001      	beq.n	800d6a8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800d6a4:	2301      	movs	r3, #1
 800d6a6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d6a8:	6878      	ldr	r0, [r7, #4]
 800d6aa:	f000 f911 	bl	800d8d0 <USB_FlushRxFifo>
 800d6ae:	4603      	mov	r3, r0
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d001      	beq.n	800d6b8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800d6b4:	2301      	movs	r3, #1
 800d6b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d6be:	461a      	mov	r2, r3
 800d6c0:	2300      	movs	r3, #0
 800d6c2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d6ca:	461a      	mov	r2, r3
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d6d6:	461a      	mov	r2, r3
 800d6d8:	2300      	movs	r3, #0
 800d6da:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d6dc:	2300      	movs	r3, #0
 800d6de:	613b      	str	r3, [r7, #16]
 800d6e0:	e043      	b.n	800d76a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d6e2:	693b      	ldr	r3, [r7, #16]
 800d6e4:	015a      	lsls	r2, r3, #5
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	4413      	add	r3, r2
 800d6ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d6f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d6f8:	d118      	bne.n	800d72c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800d6fa:	693b      	ldr	r3, [r7, #16]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d10a      	bne.n	800d716 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d700:	693b      	ldr	r3, [r7, #16]
 800d702:	015a      	lsls	r2, r3, #5
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	4413      	add	r3, r2
 800d708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d70c:	461a      	mov	r2, r3
 800d70e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d712:	6013      	str	r3, [r2, #0]
 800d714:	e013      	b.n	800d73e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d716:	693b      	ldr	r3, [r7, #16]
 800d718:	015a      	lsls	r2, r3, #5
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	4413      	add	r3, r2
 800d71e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d722:	461a      	mov	r2, r3
 800d724:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d728:	6013      	str	r3, [r2, #0]
 800d72a:	e008      	b.n	800d73e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d72c:	693b      	ldr	r3, [r7, #16]
 800d72e:	015a      	lsls	r2, r3, #5
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	4413      	add	r3, r2
 800d734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d738:	461a      	mov	r2, r3
 800d73a:	2300      	movs	r3, #0
 800d73c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d73e:	693b      	ldr	r3, [r7, #16]
 800d740:	015a      	lsls	r2, r3, #5
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	4413      	add	r3, r2
 800d746:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d74a:	461a      	mov	r2, r3
 800d74c:	2300      	movs	r3, #0
 800d74e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d750:	693b      	ldr	r3, [r7, #16]
 800d752:	015a      	lsls	r2, r3, #5
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	4413      	add	r3, r2
 800d758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d75c:	461a      	mov	r2, r3
 800d75e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d762:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d764:	693b      	ldr	r3, [r7, #16]
 800d766:	3301      	adds	r3, #1
 800d768:	613b      	str	r3, [r7, #16]
 800d76a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d76c:	693a      	ldr	r2, [r7, #16]
 800d76e:	429a      	cmp	r2, r3
 800d770:	d3b7      	bcc.n	800d6e2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d772:	2300      	movs	r3, #0
 800d774:	613b      	str	r3, [r7, #16]
 800d776:	e043      	b.n	800d800 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d778:	693b      	ldr	r3, [r7, #16]
 800d77a:	015a      	lsls	r2, r3, #5
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	4413      	add	r3, r2
 800d780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d78a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d78e:	d118      	bne.n	800d7c2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800d790:	693b      	ldr	r3, [r7, #16]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d10a      	bne.n	800d7ac <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d796:	693b      	ldr	r3, [r7, #16]
 800d798:	015a      	lsls	r2, r3, #5
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	4413      	add	r3, r2
 800d79e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7a2:	461a      	mov	r2, r3
 800d7a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d7a8:	6013      	str	r3, [r2, #0]
 800d7aa:	e013      	b.n	800d7d4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d7ac:	693b      	ldr	r3, [r7, #16]
 800d7ae:	015a      	lsls	r2, r3, #5
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	4413      	add	r3, r2
 800d7b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7b8:	461a      	mov	r2, r3
 800d7ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d7be:	6013      	str	r3, [r2, #0]
 800d7c0:	e008      	b.n	800d7d4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d7c2:	693b      	ldr	r3, [r7, #16]
 800d7c4:	015a      	lsls	r2, r3, #5
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	4413      	add	r3, r2
 800d7ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7ce:	461a      	mov	r2, r3
 800d7d0:	2300      	movs	r3, #0
 800d7d2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d7d4:	693b      	ldr	r3, [r7, #16]
 800d7d6:	015a      	lsls	r2, r3, #5
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	4413      	add	r3, r2
 800d7dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7e0:	461a      	mov	r2, r3
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d7e6:	693b      	ldr	r3, [r7, #16]
 800d7e8:	015a      	lsls	r2, r3, #5
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	4413      	add	r3, r2
 800d7ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7f2:	461a      	mov	r2, r3
 800d7f4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d7f8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d7fa:	693b      	ldr	r3, [r7, #16]
 800d7fc:	3301      	adds	r3, #1
 800d7fe:	613b      	str	r3, [r7, #16]
 800d800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d802:	693a      	ldr	r2, [r7, #16]
 800d804:	429a      	cmp	r2, r3
 800d806:	d3b7      	bcc.n	800d778 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d80e:	691b      	ldr	r3, [r3, #16]
 800d810:	68fa      	ldr	r2, [r7, #12]
 800d812:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d816:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d81a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	2200      	movs	r2, #0
 800d820:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800d828:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d82a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d105      	bne.n	800d83c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	699b      	ldr	r3, [r3, #24]
 800d834:	f043 0210 	orr.w	r2, r3, #16
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	699a      	ldr	r2, [r3, #24]
 800d840:	4b0e      	ldr	r3, [pc, #56]	; (800d87c <USB_DevInit+0x2b4>)
 800d842:	4313      	orrs	r3, r2
 800d844:	687a      	ldr	r2, [r7, #4]
 800d846:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d005      	beq.n	800d85a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	699b      	ldr	r3, [r3, #24]
 800d852:	f043 0208 	orr.w	r2, r3, #8
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d85a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d85c:	2b01      	cmp	r3, #1
 800d85e:	d105      	bne.n	800d86c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	699a      	ldr	r2, [r3, #24]
 800d864:	4b06      	ldr	r3, [pc, #24]	; (800d880 <USB_DevInit+0x2b8>)
 800d866:	4313      	orrs	r3, r2
 800d868:	687a      	ldr	r2, [r7, #4]
 800d86a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d86c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d86e:	4618      	mov	r0, r3
 800d870:	3718      	adds	r7, #24
 800d872:	46bd      	mov	sp, r7
 800d874:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d878:	b004      	add	sp, #16
 800d87a:	4770      	bx	lr
 800d87c:	803c3800 	.word	0x803c3800
 800d880:	40000004 	.word	0x40000004

0800d884 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d884:	b480      	push	{r7}
 800d886:	b085      	sub	sp, #20
 800d888:	af00      	add	r7, sp, #0
 800d88a:	6078      	str	r0, [r7, #4]
 800d88c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800d88e:	2300      	movs	r3, #0
 800d890:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d892:	683b      	ldr	r3, [r7, #0]
 800d894:	019b      	lsls	r3, r3, #6
 800d896:	f043 0220 	orr.w	r2, r3, #32
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	3301      	adds	r3, #1
 800d8a2:	60fb      	str	r3, [r7, #12]
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	4a09      	ldr	r2, [pc, #36]	; (800d8cc <USB_FlushTxFifo+0x48>)
 800d8a8:	4293      	cmp	r3, r2
 800d8aa:	d901      	bls.n	800d8b0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800d8ac:	2303      	movs	r3, #3
 800d8ae:	e006      	b.n	800d8be <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	691b      	ldr	r3, [r3, #16]
 800d8b4:	f003 0320 	and.w	r3, r3, #32
 800d8b8:	2b20      	cmp	r3, #32
 800d8ba:	d0f0      	beq.n	800d89e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800d8bc:	2300      	movs	r3, #0
}
 800d8be:	4618      	mov	r0, r3
 800d8c0:	3714      	adds	r7, #20
 800d8c2:	46bd      	mov	sp, r7
 800d8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c8:	4770      	bx	lr
 800d8ca:	bf00      	nop
 800d8cc:	00030d40 	.word	0x00030d40

0800d8d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d8d0:	b480      	push	{r7}
 800d8d2:	b085      	sub	sp, #20
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800d8d8:	2300      	movs	r3, #0
 800d8da:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	2210      	movs	r2, #16
 800d8e0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	3301      	adds	r3, #1
 800d8e6:	60fb      	str	r3, [r7, #12]
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	4a09      	ldr	r2, [pc, #36]	; (800d910 <USB_FlushRxFifo+0x40>)
 800d8ec:	4293      	cmp	r3, r2
 800d8ee:	d901      	bls.n	800d8f4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800d8f0:	2303      	movs	r3, #3
 800d8f2:	e006      	b.n	800d902 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	691b      	ldr	r3, [r3, #16]
 800d8f8:	f003 0310 	and.w	r3, r3, #16
 800d8fc:	2b10      	cmp	r3, #16
 800d8fe:	d0f0      	beq.n	800d8e2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800d900:	2300      	movs	r3, #0
}
 800d902:	4618      	mov	r0, r3
 800d904:	3714      	adds	r7, #20
 800d906:	46bd      	mov	sp, r7
 800d908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d90c:	4770      	bx	lr
 800d90e:	bf00      	nop
 800d910:	00030d40 	.word	0x00030d40

0800d914 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d914:	b480      	push	{r7}
 800d916:	b085      	sub	sp, #20
 800d918:	af00      	add	r7, sp, #0
 800d91a:	6078      	str	r0, [r7, #4]
 800d91c:	460b      	mov	r3, r1
 800d91e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d92a:	681a      	ldr	r2, [r3, #0]
 800d92c:	78fb      	ldrb	r3, [r7, #3]
 800d92e:	68f9      	ldr	r1, [r7, #12]
 800d930:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d934:	4313      	orrs	r3, r2
 800d936:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d938:	2300      	movs	r3, #0
}
 800d93a:	4618      	mov	r0, r3
 800d93c:	3714      	adds	r7, #20
 800d93e:	46bd      	mov	sp, r7
 800d940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d944:	4770      	bx	lr

0800d946 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800d946:	b480      	push	{r7}
 800d948:	b087      	sub	sp, #28
 800d94a:	af00      	add	r7, sp, #0
 800d94c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800d952:	693b      	ldr	r3, [r7, #16]
 800d954:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d958:	689b      	ldr	r3, [r3, #8]
 800d95a:	f003 0306 	and.w	r3, r3, #6
 800d95e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d102      	bne.n	800d96c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800d966:	2300      	movs	r3, #0
 800d968:	75fb      	strb	r3, [r7, #23]
 800d96a:	e00a      	b.n	800d982 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	2b02      	cmp	r3, #2
 800d970:	d002      	beq.n	800d978 <USB_GetDevSpeed+0x32>
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	2b06      	cmp	r3, #6
 800d976:	d102      	bne.n	800d97e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800d978:	2302      	movs	r3, #2
 800d97a:	75fb      	strb	r3, [r7, #23]
 800d97c:	e001      	b.n	800d982 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800d97e:	230f      	movs	r3, #15
 800d980:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800d982:	7dfb      	ldrb	r3, [r7, #23]
}
 800d984:	4618      	mov	r0, r3
 800d986:	371c      	adds	r7, #28
 800d988:	46bd      	mov	sp, r7
 800d98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d98e:	4770      	bx	lr

0800d990 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d990:	b480      	push	{r7}
 800d992:	b085      	sub	sp, #20
 800d994:	af00      	add	r7, sp, #0
 800d996:	6078      	str	r0, [r7, #4]
 800d998:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d99e:	683b      	ldr	r3, [r7, #0]
 800d9a0:	781b      	ldrb	r3, [r3, #0]
 800d9a2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d9a4:	683b      	ldr	r3, [r7, #0]
 800d9a6:	785b      	ldrb	r3, [r3, #1]
 800d9a8:	2b01      	cmp	r3, #1
 800d9aa:	d139      	bne.n	800da20 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d9b2:	69da      	ldr	r2, [r3, #28]
 800d9b4:	683b      	ldr	r3, [r7, #0]
 800d9b6:	781b      	ldrb	r3, [r3, #0]
 800d9b8:	f003 030f 	and.w	r3, r3, #15
 800d9bc:	2101      	movs	r1, #1
 800d9be:	fa01 f303 	lsl.w	r3, r1, r3
 800d9c2:	b29b      	uxth	r3, r3
 800d9c4:	68f9      	ldr	r1, [r7, #12]
 800d9c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d9ca:	4313      	orrs	r3, r2
 800d9cc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800d9ce:	68bb      	ldr	r3, [r7, #8]
 800d9d0:	015a      	lsls	r2, r3, #5
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	4413      	add	r3, r2
 800d9d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d153      	bne.n	800da8c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d9e4:	68bb      	ldr	r3, [r7, #8]
 800d9e6:	015a      	lsls	r2, r3, #5
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	4413      	add	r3, r2
 800d9ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d9f0:	681a      	ldr	r2, [r3, #0]
 800d9f2:	683b      	ldr	r3, [r7, #0]
 800d9f4:	689b      	ldr	r3, [r3, #8]
 800d9f6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d9fa:	683b      	ldr	r3, [r7, #0]
 800d9fc:	78db      	ldrb	r3, [r3, #3]
 800d9fe:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800da00:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800da02:	68bb      	ldr	r3, [r7, #8]
 800da04:	059b      	lsls	r3, r3, #22
 800da06:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800da08:	431a      	orrs	r2, r3
 800da0a:	68bb      	ldr	r3, [r7, #8]
 800da0c:	0159      	lsls	r1, r3, #5
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	440b      	add	r3, r1
 800da12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da16:	4619      	mov	r1, r3
 800da18:	4b20      	ldr	r3, [pc, #128]	; (800da9c <USB_ActivateEndpoint+0x10c>)
 800da1a:	4313      	orrs	r3, r2
 800da1c:	600b      	str	r3, [r1, #0]
 800da1e:	e035      	b.n	800da8c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da26:	69da      	ldr	r2, [r3, #28]
 800da28:	683b      	ldr	r3, [r7, #0]
 800da2a:	781b      	ldrb	r3, [r3, #0]
 800da2c:	f003 030f 	and.w	r3, r3, #15
 800da30:	2101      	movs	r1, #1
 800da32:	fa01 f303 	lsl.w	r3, r1, r3
 800da36:	041b      	lsls	r3, r3, #16
 800da38:	68f9      	ldr	r1, [r7, #12]
 800da3a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800da3e:	4313      	orrs	r3, r2
 800da40:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800da42:	68bb      	ldr	r3, [r7, #8]
 800da44:	015a      	lsls	r2, r3, #5
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	4413      	add	r3, r2
 800da4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800da54:	2b00      	cmp	r3, #0
 800da56:	d119      	bne.n	800da8c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800da58:	68bb      	ldr	r3, [r7, #8]
 800da5a:	015a      	lsls	r2, r3, #5
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	4413      	add	r3, r2
 800da60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da64:	681a      	ldr	r2, [r3, #0]
 800da66:	683b      	ldr	r3, [r7, #0]
 800da68:	689b      	ldr	r3, [r3, #8]
 800da6a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800da6e:	683b      	ldr	r3, [r7, #0]
 800da70:	78db      	ldrb	r3, [r3, #3]
 800da72:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800da74:	430b      	orrs	r3, r1
 800da76:	431a      	orrs	r2, r3
 800da78:	68bb      	ldr	r3, [r7, #8]
 800da7a:	0159      	lsls	r1, r3, #5
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	440b      	add	r3, r1
 800da80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da84:	4619      	mov	r1, r3
 800da86:	4b05      	ldr	r3, [pc, #20]	; (800da9c <USB_ActivateEndpoint+0x10c>)
 800da88:	4313      	orrs	r3, r2
 800da8a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800da8c:	2300      	movs	r3, #0
}
 800da8e:	4618      	mov	r0, r3
 800da90:	3714      	adds	r7, #20
 800da92:	46bd      	mov	sp, r7
 800da94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da98:	4770      	bx	lr
 800da9a:	bf00      	nop
 800da9c:	10008000 	.word	0x10008000

0800daa0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800daa0:	b480      	push	{r7}
 800daa2:	b085      	sub	sp, #20
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	6078      	str	r0, [r7, #4]
 800daa8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800daae:	683b      	ldr	r3, [r7, #0]
 800dab0:	781b      	ldrb	r3, [r3, #0]
 800dab2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800dab4:	683b      	ldr	r3, [r7, #0]
 800dab6:	785b      	ldrb	r3, [r3, #1]
 800dab8:	2b01      	cmp	r3, #1
 800daba:	d161      	bne.n	800db80 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800dabc:	68bb      	ldr	r3, [r7, #8]
 800dabe:	015a      	lsls	r2, r3, #5
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	4413      	add	r3, r2
 800dac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dace:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dad2:	d11f      	bne.n	800db14 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800dad4:	68bb      	ldr	r3, [r7, #8]
 800dad6:	015a      	lsls	r2, r3, #5
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	4413      	add	r3, r2
 800dadc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	68ba      	ldr	r2, [r7, #8]
 800dae4:	0151      	lsls	r1, r2, #5
 800dae6:	68fa      	ldr	r2, [r7, #12]
 800dae8:	440a      	add	r2, r1
 800daea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800daee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800daf2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800daf4:	68bb      	ldr	r3, [r7, #8]
 800daf6:	015a      	lsls	r2, r3, #5
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	4413      	add	r3, r2
 800dafc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	68ba      	ldr	r2, [r7, #8]
 800db04:	0151      	lsls	r1, r2, #5
 800db06:	68fa      	ldr	r2, [r7, #12]
 800db08:	440a      	add	r2, r1
 800db0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800db0e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800db12:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800db1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800db1c:	683b      	ldr	r3, [r7, #0]
 800db1e:	781b      	ldrb	r3, [r3, #0]
 800db20:	f003 030f 	and.w	r3, r3, #15
 800db24:	2101      	movs	r1, #1
 800db26:	fa01 f303 	lsl.w	r3, r1, r3
 800db2a:	b29b      	uxth	r3, r3
 800db2c:	43db      	mvns	r3, r3
 800db2e:	68f9      	ldr	r1, [r7, #12]
 800db30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800db34:	4013      	ands	r3, r2
 800db36:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800db3e:	69da      	ldr	r2, [r3, #28]
 800db40:	683b      	ldr	r3, [r7, #0]
 800db42:	781b      	ldrb	r3, [r3, #0]
 800db44:	f003 030f 	and.w	r3, r3, #15
 800db48:	2101      	movs	r1, #1
 800db4a:	fa01 f303 	lsl.w	r3, r1, r3
 800db4e:	b29b      	uxth	r3, r3
 800db50:	43db      	mvns	r3, r3
 800db52:	68f9      	ldr	r1, [r7, #12]
 800db54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800db58:	4013      	ands	r3, r2
 800db5a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800db5c:	68bb      	ldr	r3, [r7, #8]
 800db5e:	015a      	lsls	r2, r3, #5
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	4413      	add	r3, r2
 800db64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db68:	681a      	ldr	r2, [r3, #0]
 800db6a:	68bb      	ldr	r3, [r7, #8]
 800db6c:	0159      	lsls	r1, r3, #5
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	440b      	add	r3, r1
 800db72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db76:	4619      	mov	r1, r3
 800db78:	4b35      	ldr	r3, [pc, #212]	; (800dc50 <USB_DeactivateEndpoint+0x1b0>)
 800db7a:	4013      	ands	r3, r2
 800db7c:	600b      	str	r3, [r1, #0]
 800db7e:	e060      	b.n	800dc42 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800db80:	68bb      	ldr	r3, [r7, #8]
 800db82:	015a      	lsls	r2, r3, #5
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	4413      	add	r3, r2
 800db88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800db92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800db96:	d11f      	bne.n	800dbd8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800db98:	68bb      	ldr	r3, [r7, #8]
 800db9a:	015a      	lsls	r2, r3, #5
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	4413      	add	r3, r2
 800dba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	68ba      	ldr	r2, [r7, #8]
 800dba8:	0151      	lsls	r1, r2, #5
 800dbaa:	68fa      	ldr	r2, [r7, #12]
 800dbac:	440a      	add	r2, r1
 800dbae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dbb2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800dbb6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800dbb8:	68bb      	ldr	r3, [r7, #8]
 800dbba:	015a      	lsls	r2, r3, #5
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	4413      	add	r3, r2
 800dbc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	68ba      	ldr	r2, [r7, #8]
 800dbc8:	0151      	lsls	r1, r2, #5
 800dbca:	68fa      	ldr	r2, [r7, #12]
 800dbcc:	440a      	add	r2, r1
 800dbce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dbd2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dbd6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dbde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dbe0:	683b      	ldr	r3, [r7, #0]
 800dbe2:	781b      	ldrb	r3, [r3, #0]
 800dbe4:	f003 030f 	and.w	r3, r3, #15
 800dbe8:	2101      	movs	r1, #1
 800dbea:	fa01 f303 	lsl.w	r3, r1, r3
 800dbee:	041b      	lsls	r3, r3, #16
 800dbf0:	43db      	mvns	r3, r3
 800dbf2:	68f9      	ldr	r1, [r7, #12]
 800dbf4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dbf8:	4013      	ands	r3, r2
 800dbfa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc02:	69da      	ldr	r2, [r3, #28]
 800dc04:	683b      	ldr	r3, [r7, #0]
 800dc06:	781b      	ldrb	r3, [r3, #0]
 800dc08:	f003 030f 	and.w	r3, r3, #15
 800dc0c:	2101      	movs	r1, #1
 800dc0e:	fa01 f303 	lsl.w	r3, r1, r3
 800dc12:	041b      	lsls	r3, r3, #16
 800dc14:	43db      	mvns	r3, r3
 800dc16:	68f9      	ldr	r1, [r7, #12]
 800dc18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dc1c:	4013      	ands	r3, r2
 800dc1e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800dc20:	68bb      	ldr	r3, [r7, #8]
 800dc22:	015a      	lsls	r2, r3, #5
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	4413      	add	r3, r2
 800dc28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc2c:	681a      	ldr	r2, [r3, #0]
 800dc2e:	68bb      	ldr	r3, [r7, #8]
 800dc30:	0159      	lsls	r1, r3, #5
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	440b      	add	r3, r1
 800dc36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc3a:	4619      	mov	r1, r3
 800dc3c:	4b05      	ldr	r3, [pc, #20]	; (800dc54 <USB_DeactivateEndpoint+0x1b4>)
 800dc3e:	4013      	ands	r3, r2
 800dc40:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800dc42:	2300      	movs	r3, #0
}
 800dc44:	4618      	mov	r0, r3
 800dc46:	3714      	adds	r7, #20
 800dc48:	46bd      	mov	sp, r7
 800dc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc4e:	4770      	bx	lr
 800dc50:	ec337800 	.word	0xec337800
 800dc54:	eff37800 	.word	0xeff37800

0800dc58 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800dc58:	b580      	push	{r7, lr}
 800dc5a:	b08a      	sub	sp, #40	; 0x28
 800dc5c:	af02      	add	r7, sp, #8
 800dc5e:	60f8      	str	r0, [r7, #12]
 800dc60:	60b9      	str	r1, [r7, #8]
 800dc62:	4613      	mov	r3, r2
 800dc64:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800dc6a:	68bb      	ldr	r3, [r7, #8]
 800dc6c:	781b      	ldrb	r3, [r3, #0]
 800dc6e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800dc70:	68bb      	ldr	r3, [r7, #8]
 800dc72:	785b      	ldrb	r3, [r3, #1]
 800dc74:	2b01      	cmp	r3, #1
 800dc76:	f040 8163 	bne.w	800df40 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800dc7a:	68bb      	ldr	r3, [r7, #8]
 800dc7c:	695b      	ldr	r3, [r3, #20]
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d132      	bne.n	800dce8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800dc82:	69bb      	ldr	r3, [r7, #24]
 800dc84:	015a      	lsls	r2, r3, #5
 800dc86:	69fb      	ldr	r3, [r7, #28]
 800dc88:	4413      	add	r3, r2
 800dc8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc8e:	691a      	ldr	r2, [r3, #16]
 800dc90:	69bb      	ldr	r3, [r7, #24]
 800dc92:	0159      	lsls	r1, r3, #5
 800dc94:	69fb      	ldr	r3, [r7, #28]
 800dc96:	440b      	add	r3, r1
 800dc98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc9c:	4619      	mov	r1, r3
 800dc9e:	4ba5      	ldr	r3, [pc, #660]	; (800df34 <USB_EPStartXfer+0x2dc>)
 800dca0:	4013      	ands	r3, r2
 800dca2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800dca4:	69bb      	ldr	r3, [r7, #24]
 800dca6:	015a      	lsls	r2, r3, #5
 800dca8:	69fb      	ldr	r3, [r7, #28]
 800dcaa:	4413      	add	r3, r2
 800dcac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dcb0:	691b      	ldr	r3, [r3, #16]
 800dcb2:	69ba      	ldr	r2, [r7, #24]
 800dcb4:	0151      	lsls	r1, r2, #5
 800dcb6:	69fa      	ldr	r2, [r7, #28]
 800dcb8:	440a      	add	r2, r1
 800dcba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dcbe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dcc2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800dcc4:	69bb      	ldr	r3, [r7, #24]
 800dcc6:	015a      	lsls	r2, r3, #5
 800dcc8:	69fb      	ldr	r3, [r7, #28]
 800dcca:	4413      	add	r3, r2
 800dccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dcd0:	691a      	ldr	r2, [r3, #16]
 800dcd2:	69bb      	ldr	r3, [r7, #24]
 800dcd4:	0159      	lsls	r1, r3, #5
 800dcd6:	69fb      	ldr	r3, [r7, #28]
 800dcd8:	440b      	add	r3, r1
 800dcda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dcde:	4619      	mov	r1, r3
 800dce0:	4b95      	ldr	r3, [pc, #596]	; (800df38 <USB_EPStartXfer+0x2e0>)
 800dce2:	4013      	ands	r3, r2
 800dce4:	610b      	str	r3, [r1, #16]
 800dce6:	e074      	b.n	800ddd2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800dce8:	69bb      	ldr	r3, [r7, #24]
 800dcea:	015a      	lsls	r2, r3, #5
 800dcec:	69fb      	ldr	r3, [r7, #28]
 800dcee:	4413      	add	r3, r2
 800dcf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dcf4:	691a      	ldr	r2, [r3, #16]
 800dcf6:	69bb      	ldr	r3, [r7, #24]
 800dcf8:	0159      	lsls	r1, r3, #5
 800dcfa:	69fb      	ldr	r3, [r7, #28]
 800dcfc:	440b      	add	r3, r1
 800dcfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd02:	4619      	mov	r1, r3
 800dd04:	4b8c      	ldr	r3, [pc, #560]	; (800df38 <USB_EPStartXfer+0x2e0>)
 800dd06:	4013      	ands	r3, r2
 800dd08:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800dd0a:	69bb      	ldr	r3, [r7, #24]
 800dd0c:	015a      	lsls	r2, r3, #5
 800dd0e:	69fb      	ldr	r3, [r7, #28]
 800dd10:	4413      	add	r3, r2
 800dd12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd16:	691a      	ldr	r2, [r3, #16]
 800dd18:	69bb      	ldr	r3, [r7, #24]
 800dd1a:	0159      	lsls	r1, r3, #5
 800dd1c:	69fb      	ldr	r3, [r7, #28]
 800dd1e:	440b      	add	r3, r1
 800dd20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd24:	4619      	mov	r1, r3
 800dd26:	4b83      	ldr	r3, [pc, #524]	; (800df34 <USB_EPStartXfer+0x2dc>)
 800dd28:	4013      	ands	r3, r2
 800dd2a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800dd2c:	69bb      	ldr	r3, [r7, #24]
 800dd2e:	015a      	lsls	r2, r3, #5
 800dd30:	69fb      	ldr	r3, [r7, #28]
 800dd32:	4413      	add	r3, r2
 800dd34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd38:	691a      	ldr	r2, [r3, #16]
 800dd3a:	68bb      	ldr	r3, [r7, #8]
 800dd3c:	6959      	ldr	r1, [r3, #20]
 800dd3e:	68bb      	ldr	r3, [r7, #8]
 800dd40:	689b      	ldr	r3, [r3, #8]
 800dd42:	440b      	add	r3, r1
 800dd44:	1e59      	subs	r1, r3, #1
 800dd46:	68bb      	ldr	r3, [r7, #8]
 800dd48:	689b      	ldr	r3, [r3, #8]
 800dd4a:	fbb1 f3f3 	udiv	r3, r1, r3
 800dd4e:	04d9      	lsls	r1, r3, #19
 800dd50:	4b7a      	ldr	r3, [pc, #488]	; (800df3c <USB_EPStartXfer+0x2e4>)
 800dd52:	400b      	ands	r3, r1
 800dd54:	69b9      	ldr	r1, [r7, #24]
 800dd56:	0148      	lsls	r0, r1, #5
 800dd58:	69f9      	ldr	r1, [r7, #28]
 800dd5a:	4401      	add	r1, r0
 800dd5c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800dd60:	4313      	orrs	r3, r2
 800dd62:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800dd64:	69bb      	ldr	r3, [r7, #24]
 800dd66:	015a      	lsls	r2, r3, #5
 800dd68:	69fb      	ldr	r3, [r7, #28]
 800dd6a:	4413      	add	r3, r2
 800dd6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd70:	691a      	ldr	r2, [r3, #16]
 800dd72:	68bb      	ldr	r3, [r7, #8]
 800dd74:	695b      	ldr	r3, [r3, #20]
 800dd76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800dd7a:	69b9      	ldr	r1, [r7, #24]
 800dd7c:	0148      	lsls	r0, r1, #5
 800dd7e:	69f9      	ldr	r1, [r7, #28]
 800dd80:	4401      	add	r1, r0
 800dd82:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800dd86:	4313      	orrs	r3, r2
 800dd88:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800dd8a:	68bb      	ldr	r3, [r7, #8]
 800dd8c:	78db      	ldrb	r3, [r3, #3]
 800dd8e:	2b01      	cmp	r3, #1
 800dd90:	d11f      	bne.n	800ddd2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800dd92:	69bb      	ldr	r3, [r7, #24]
 800dd94:	015a      	lsls	r2, r3, #5
 800dd96:	69fb      	ldr	r3, [r7, #28]
 800dd98:	4413      	add	r3, r2
 800dd9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd9e:	691b      	ldr	r3, [r3, #16]
 800dda0:	69ba      	ldr	r2, [r7, #24]
 800dda2:	0151      	lsls	r1, r2, #5
 800dda4:	69fa      	ldr	r2, [r7, #28]
 800dda6:	440a      	add	r2, r1
 800dda8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ddac:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800ddb0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800ddb2:	69bb      	ldr	r3, [r7, #24]
 800ddb4:	015a      	lsls	r2, r3, #5
 800ddb6:	69fb      	ldr	r3, [r7, #28]
 800ddb8:	4413      	add	r3, r2
 800ddba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ddbe:	691b      	ldr	r3, [r3, #16]
 800ddc0:	69ba      	ldr	r2, [r7, #24]
 800ddc2:	0151      	lsls	r1, r2, #5
 800ddc4:	69fa      	ldr	r2, [r7, #28]
 800ddc6:	440a      	add	r2, r1
 800ddc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ddcc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ddd0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800ddd2:	79fb      	ldrb	r3, [r7, #7]
 800ddd4:	2b01      	cmp	r3, #1
 800ddd6:	d14b      	bne.n	800de70 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ddd8:	68bb      	ldr	r3, [r7, #8]
 800ddda:	691b      	ldr	r3, [r3, #16]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d009      	beq.n	800ddf4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800dde0:	69bb      	ldr	r3, [r7, #24]
 800dde2:	015a      	lsls	r2, r3, #5
 800dde4:	69fb      	ldr	r3, [r7, #28]
 800dde6:	4413      	add	r3, r2
 800dde8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ddec:	461a      	mov	r2, r3
 800ddee:	68bb      	ldr	r3, [r7, #8]
 800ddf0:	691b      	ldr	r3, [r3, #16]
 800ddf2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800ddf4:	68bb      	ldr	r3, [r7, #8]
 800ddf6:	78db      	ldrb	r3, [r3, #3]
 800ddf8:	2b01      	cmp	r3, #1
 800ddfa:	d128      	bne.n	800de4e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ddfc:	69fb      	ldr	r3, [r7, #28]
 800ddfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800de02:	689b      	ldr	r3, [r3, #8]
 800de04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d110      	bne.n	800de2e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800de0c:	69bb      	ldr	r3, [r7, #24]
 800de0e:	015a      	lsls	r2, r3, #5
 800de10:	69fb      	ldr	r3, [r7, #28]
 800de12:	4413      	add	r3, r2
 800de14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	69ba      	ldr	r2, [r7, #24]
 800de1c:	0151      	lsls	r1, r2, #5
 800de1e:	69fa      	ldr	r2, [r7, #28]
 800de20:	440a      	add	r2, r1
 800de22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800de26:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800de2a:	6013      	str	r3, [r2, #0]
 800de2c:	e00f      	b.n	800de4e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800de2e:	69bb      	ldr	r3, [r7, #24]
 800de30:	015a      	lsls	r2, r3, #5
 800de32:	69fb      	ldr	r3, [r7, #28]
 800de34:	4413      	add	r3, r2
 800de36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	69ba      	ldr	r2, [r7, #24]
 800de3e:	0151      	lsls	r1, r2, #5
 800de40:	69fa      	ldr	r2, [r7, #28]
 800de42:	440a      	add	r2, r1
 800de44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800de48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800de4c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800de4e:	69bb      	ldr	r3, [r7, #24]
 800de50:	015a      	lsls	r2, r3, #5
 800de52:	69fb      	ldr	r3, [r7, #28]
 800de54:	4413      	add	r3, r2
 800de56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	69ba      	ldr	r2, [r7, #24]
 800de5e:	0151      	lsls	r1, r2, #5
 800de60:	69fa      	ldr	r2, [r7, #28]
 800de62:	440a      	add	r2, r1
 800de64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800de68:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800de6c:	6013      	str	r3, [r2, #0]
 800de6e:	e133      	b.n	800e0d8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800de70:	69bb      	ldr	r3, [r7, #24]
 800de72:	015a      	lsls	r2, r3, #5
 800de74:	69fb      	ldr	r3, [r7, #28]
 800de76:	4413      	add	r3, r2
 800de78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	69ba      	ldr	r2, [r7, #24]
 800de80:	0151      	lsls	r1, r2, #5
 800de82:	69fa      	ldr	r2, [r7, #28]
 800de84:	440a      	add	r2, r1
 800de86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800de8a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800de8e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800de90:	68bb      	ldr	r3, [r7, #8]
 800de92:	78db      	ldrb	r3, [r3, #3]
 800de94:	2b01      	cmp	r3, #1
 800de96:	d015      	beq.n	800dec4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800de98:	68bb      	ldr	r3, [r7, #8]
 800de9a:	695b      	ldr	r3, [r3, #20]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	f000 811b 	beq.w	800e0d8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800dea2:	69fb      	ldr	r3, [r7, #28]
 800dea4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dea8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800deaa:	68bb      	ldr	r3, [r7, #8]
 800deac:	781b      	ldrb	r3, [r3, #0]
 800deae:	f003 030f 	and.w	r3, r3, #15
 800deb2:	2101      	movs	r1, #1
 800deb4:	fa01 f303 	lsl.w	r3, r1, r3
 800deb8:	69f9      	ldr	r1, [r7, #28]
 800deba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800debe:	4313      	orrs	r3, r2
 800dec0:	634b      	str	r3, [r1, #52]	; 0x34
 800dec2:	e109      	b.n	800e0d8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800dec4:	69fb      	ldr	r3, [r7, #28]
 800dec6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800deca:	689b      	ldr	r3, [r3, #8]
 800decc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d110      	bne.n	800def6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ded4:	69bb      	ldr	r3, [r7, #24]
 800ded6:	015a      	lsls	r2, r3, #5
 800ded8:	69fb      	ldr	r3, [r7, #28]
 800deda:	4413      	add	r3, r2
 800dedc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	69ba      	ldr	r2, [r7, #24]
 800dee4:	0151      	lsls	r1, r2, #5
 800dee6:	69fa      	ldr	r2, [r7, #28]
 800dee8:	440a      	add	r2, r1
 800deea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800deee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800def2:	6013      	str	r3, [r2, #0]
 800def4:	e00f      	b.n	800df16 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800def6:	69bb      	ldr	r3, [r7, #24]
 800def8:	015a      	lsls	r2, r3, #5
 800defa:	69fb      	ldr	r3, [r7, #28]
 800defc:	4413      	add	r3, r2
 800defe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	69ba      	ldr	r2, [r7, #24]
 800df06:	0151      	lsls	r1, r2, #5
 800df08:	69fa      	ldr	r2, [r7, #28]
 800df0a:	440a      	add	r2, r1
 800df0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800df10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800df14:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800df16:	68bb      	ldr	r3, [r7, #8]
 800df18:	68d9      	ldr	r1, [r3, #12]
 800df1a:	68bb      	ldr	r3, [r7, #8]
 800df1c:	781a      	ldrb	r2, [r3, #0]
 800df1e:	68bb      	ldr	r3, [r7, #8]
 800df20:	695b      	ldr	r3, [r3, #20]
 800df22:	b298      	uxth	r0, r3
 800df24:	79fb      	ldrb	r3, [r7, #7]
 800df26:	9300      	str	r3, [sp, #0]
 800df28:	4603      	mov	r3, r0
 800df2a:	68f8      	ldr	r0, [r7, #12]
 800df2c:	f000 fa38 	bl	800e3a0 <USB_WritePacket>
 800df30:	e0d2      	b.n	800e0d8 <USB_EPStartXfer+0x480>
 800df32:	bf00      	nop
 800df34:	e007ffff 	.word	0xe007ffff
 800df38:	fff80000 	.word	0xfff80000
 800df3c:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800df40:	69bb      	ldr	r3, [r7, #24]
 800df42:	015a      	lsls	r2, r3, #5
 800df44:	69fb      	ldr	r3, [r7, #28]
 800df46:	4413      	add	r3, r2
 800df48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df4c:	691a      	ldr	r2, [r3, #16]
 800df4e:	69bb      	ldr	r3, [r7, #24]
 800df50:	0159      	lsls	r1, r3, #5
 800df52:	69fb      	ldr	r3, [r7, #28]
 800df54:	440b      	add	r3, r1
 800df56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df5a:	4619      	mov	r1, r3
 800df5c:	4b61      	ldr	r3, [pc, #388]	; (800e0e4 <USB_EPStartXfer+0x48c>)
 800df5e:	4013      	ands	r3, r2
 800df60:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800df62:	69bb      	ldr	r3, [r7, #24]
 800df64:	015a      	lsls	r2, r3, #5
 800df66:	69fb      	ldr	r3, [r7, #28]
 800df68:	4413      	add	r3, r2
 800df6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df6e:	691a      	ldr	r2, [r3, #16]
 800df70:	69bb      	ldr	r3, [r7, #24]
 800df72:	0159      	lsls	r1, r3, #5
 800df74:	69fb      	ldr	r3, [r7, #28]
 800df76:	440b      	add	r3, r1
 800df78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df7c:	4619      	mov	r1, r3
 800df7e:	4b5a      	ldr	r3, [pc, #360]	; (800e0e8 <USB_EPStartXfer+0x490>)
 800df80:	4013      	ands	r3, r2
 800df82:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800df84:	68bb      	ldr	r3, [r7, #8]
 800df86:	695b      	ldr	r3, [r3, #20]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d123      	bne.n	800dfd4 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800df8c:	69bb      	ldr	r3, [r7, #24]
 800df8e:	015a      	lsls	r2, r3, #5
 800df90:	69fb      	ldr	r3, [r7, #28]
 800df92:	4413      	add	r3, r2
 800df94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df98:	691a      	ldr	r2, [r3, #16]
 800df9a:	68bb      	ldr	r3, [r7, #8]
 800df9c:	689b      	ldr	r3, [r3, #8]
 800df9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800dfa2:	69b9      	ldr	r1, [r7, #24]
 800dfa4:	0148      	lsls	r0, r1, #5
 800dfa6:	69f9      	ldr	r1, [r7, #28]
 800dfa8:	4401      	add	r1, r0
 800dfaa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800dfae:	4313      	orrs	r3, r2
 800dfb0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800dfb2:	69bb      	ldr	r3, [r7, #24]
 800dfb4:	015a      	lsls	r2, r3, #5
 800dfb6:	69fb      	ldr	r3, [r7, #28]
 800dfb8:	4413      	add	r3, r2
 800dfba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dfbe:	691b      	ldr	r3, [r3, #16]
 800dfc0:	69ba      	ldr	r2, [r7, #24]
 800dfc2:	0151      	lsls	r1, r2, #5
 800dfc4:	69fa      	ldr	r2, [r7, #28]
 800dfc6:	440a      	add	r2, r1
 800dfc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dfcc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dfd0:	6113      	str	r3, [r2, #16]
 800dfd2:	e033      	b.n	800e03c <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800dfd4:	68bb      	ldr	r3, [r7, #8]
 800dfd6:	695a      	ldr	r2, [r3, #20]
 800dfd8:	68bb      	ldr	r3, [r7, #8]
 800dfda:	689b      	ldr	r3, [r3, #8]
 800dfdc:	4413      	add	r3, r2
 800dfde:	1e5a      	subs	r2, r3, #1
 800dfe0:	68bb      	ldr	r3, [r7, #8]
 800dfe2:	689b      	ldr	r3, [r3, #8]
 800dfe4:	fbb2 f3f3 	udiv	r3, r2, r3
 800dfe8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800dfea:	69bb      	ldr	r3, [r7, #24]
 800dfec:	015a      	lsls	r2, r3, #5
 800dfee:	69fb      	ldr	r3, [r7, #28]
 800dff0:	4413      	add	r3, r2
 800dff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dff6:	691a      	ldr	r2, [r3, #16]
 800dff8:	8afb      	ldrh	r3, [r7, #22]
 800dffa:	04d9      	lsls	r1, r3, #19
 800dffc:	4b3b      	ldr	r3, [pc, #236]	; (800e0ec <USB_EPStartXfer+0x494>)
 800dffe:	400b      	ands	r3, r1
 800e000:	69b9      	ldr	r1, [r7, #24]
 800e002:	0148      	lsls	r0, r1, #5
 800e004:	69f9      	ldr	r1, [r7, #28]
 800e006:	4401      	add	r1, r0
 800e008:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e00c:	4313      	orrs	r3, r2
 800e00e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800e010:	69bb      	ldr	r3, [r7, #24]
 800e012:	015a      	lsls	r2, r3, #5
 800e014:	69fb      	ldr	r3, [r7, #28]
 800e016:	4413      	add	r3, r2
 800e018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e01c:	691a      	ldr	r2, [r3, #16]
 800e01e:	68bb      	ldr	r3, [r7, #8]
 800e020:	689b      	ldr	r3, [r3, #8]
 800e022:	8af9      	ldrh	r1, [r7, #22]
 800e024:	fb01 f303 	mul.w	r3, r1, r3
 800e028:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e02c:	69b9      	ldr	r1, [r7, #24]
 800e02e:	0148      	lsls	r0, r1, #5
 800e030:	69f9      	ldr	r1, [r7, #28]
 800e032:	4401      	add	r1, r0
 800e034:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e038:	4313      	orrs	r3, r2
 800e03a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800e03c:	79fb      	ldrb	r3, [r7, #7]
 800e03e:	2b01      	cmp	r3, #1
 800e040:	d10d      	bne.n	800e05e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800e042:	68bb      	ldr	r3, [r7, #8]
 800e044:	68db      	ldr	r3, [r3, #12]
 800e046:	2b00      	cmp	r3, #0
 800e048:	d009      	beq.n	800e05e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e04a:	68bb      	ldr	r3, [r7, #8]
 800e04c:	68d9      	ldr	r1, [r3, #12]
 800e04e:	69bb      	ldr	r3, [r7, #24]
 800e050:	015a      	lsls	r2, r3, #5
 800e052:	69fb      	ldr	r3, [r7, #28]
 800e054:	4413      	add	r3, r2
 800e056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e05a:	460a      	mov	r2, r1
 800e05c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800e05e:	68bb      	ldr	r3, [r7, #8]
 800e060:	78db      	ldrb	r3, [r3, #3]
 800e062:	2b01      	cmp	r3, #1
 800e064:	d128      	bne.n	800e0b8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e066:	69fb      	ldr	r3, [r7, #28]
 800e068:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e06c:	689b      	ldr	r3, [r3, #8]
 800e06e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e072:	2b00      	cmp	r3, #0
 800e074:	d110      	bne.n	800e098 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800e076:	69bb      	ldr	r3, [r7, #24]
 800e078:	015a      	lsls	r2, r3, #5
 800e07a:	69fb      	ldr	r3, [r7, #28]
 800e07c:	4413      	add	r3, r2
 800e07e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	69ba      	ldr	r2, [r7, #24]
 800e086:	0151      	lsls	r1, r2, #5
 800e088:	69fa      	ldr	r2, [r7, #28]
 800e08a:	440a      	add	r2, r1
 800e08c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e090:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e094:	6013      	str	r3, [r2, #0]
 800e096:	e00f      	b.n	800e0b8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800e098:	69bb      	ldr	r3, [r7, #24]
 800e09a:	015a      	lsls	r2, r3, #5
 800e09c:	69fb      	ldr	r3, [r7, #28]
 800e09e:	4413      	add	r3, r2
 800e0a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	69ba      	ldr	r2, [r7, #24]
 800e0a8:	0151      	lsls	r1, r2, #5
 800e0aa:	69fa      	ldr	r2, [r7, #28]
 800e0ac:	440a      	add	r2, r1
 800e0ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e0b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e0b6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e0b8:	69bb      	ldr	r3, [r7, #24]
 800e0ba:	015a      	lsls	r2, r3, #5
 800e0bc:	69fb      	ldr	r3, [r7, #28]
 800e0be:	4413      	add	r3, r2
 800e0c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	69ba      	ldr	r2, [r7, #24]
 800e0c8:	0151      	lsls	r1, r2, #5
 800e0ca:	69fa      	ldr	r2, [r7, #28]
 800e0cc:	440a      	add	r2, r1
 800e0ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e0d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e0d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e0d8:	2300      	movs	r3, #0
}
 800e0da:	4618      	mov	r0, r3
 800e0dc:	3720      	adds	r7, #32
 800e0de:	46bd      	mov	sp, r7
 800e0e0:	bd80      	pop	{r7, pc}
 800e0e2:	bf00      	nop
 800e0e4:	fff80000 	.word	0xfff80000
 800e0e8:	e007ffff 	.word	0xe007ffff
 800e0ec:	1ff80000 	.word	0x1ff80000

0800e0f0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800e0f0:	b480      	push	{r7}
 800e0f2:	b087      	sub	sp, #28
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	60f8      	str	r0, [r7, #12]
 800e0f8:	60b9      	str	r1, [r7, #8]
 800e0fa:	4613      	mov	r3, r2
 800e0fc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800e102:	68bb      	ldr	r3, [r7, #8]
 800e104:	781b      	ldrb	r3, [r3, #0]
 800e106:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e108:	68bb      	ldr	r3, [r7, #8]
 800e10a:	785b      	ldrb	r3, [r3, #1]
 800e10c:	2b01      	cmp	r3, #1
 800e10e:	f040 80cd 	bne.w	800e2ac <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e112:	68bb      	ldr	r3, [r7, #8]
 800e114:	695b      	ldr	r3, [r3, #20]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d132      	bne.n	800e180 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e11a:	693b      	ldr	r3, [r7, #16]
 800e11c:	015a      	lsls	r2, r3, #5
 800e11e:	697b      	ldr	r3, [r7, #20]
 800e120:	4413      	add	r3, r2
 800e122:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e126:	691a      	ldr	r2, [r3, #16]
 800e128:	693b      	ldr	r3, [r7, #16]
 800e12a:	0159      	lsls	r1, r3, #5
 800e12c:	697b      	ldr	r3, [r7, #20]
 800e12e:	440b      	add	r3, r1
 800e130:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e134:	4619      	mov	r1, r3
 800e136:	4b98      	ldr	r3, [pc, #608]	; (800e398 <USB_EP0StartXfer+0x2a8>)
 800e138:	4013      	ands	r3, r2
 800e13a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e13c:	693b      	ldr	r3, [r7, #16]
 800e13e:	015a      	lsls	r2, r3, #5
 800e140:	697b      	ldr	r3, [r7, #20]
 800e142:	4413      	add	r3, r2
 800e144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e148:	691b      	ldr	r3, [r3, #16]
 800e14a:	693a      	ldr	r2, [r7, #16]
 800e14c:	0151      	lsls	r1, r2, #5
 800e14e:	697a      	ldr	r2, [r7, #20]
 800e150:	440a      	add	r2, r1
 800e152:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e156:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e15a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e15c:	693b      	ldr	r3, [r7, #16]
 800e15e:	015a      	lsls	r2, r3, #5
 800e160:	697b      	ldr	r3, [r7, #20]
 800e162:	4413      	add	r3, r2
 800e164:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e168:	691a      	ldr	r2, [r3, #16]
 800e16a:	693b      	ldr	r3, [r7, #16]
 800e16c:	0159      	lsls	r1, r3, #5
 800e16e:	697b      	ldr	r3, [r7, #20]
 800e170:	440b      	add	r3, r1
 800e172:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e176:	4619      	mov	r1, r3
 800e178:	4b88      	ldr	r3, [pc, #544]	; (800e39c <USB_EP0StartXfer+0x2ac>)
 800e17a:	4013      	ands	r3, r2
 800e17c:	610b      	str	r3, [r1, #16]
 800e17e:	e04e      	b.n	800e21e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e180:	693b      	ldr	r3, [r7, #16]
 800e182:	015a      	lsls	r2, r3, #5
 800e184:	697b      	ldr	r3, [r7, #20]
 800e186:	4413      	add	r3, r2
 800e188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e18c:	691a      	ldr	r2, [r3, #16]
 800e18e:	693b      	ldr	r3, [r7, #16]
 800e190:	0159      	lsls	r1, r3, #5
 800e192:	697b      	ldr	r3, [r7, #20]
 800e194:	440b      	add	r3, r1
 800e196:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e19a:	4619      	mov	r1, r3
 800e19c:	4b7f      	ldr	r3, [pc, #508]	; (800e39c <USB_EP0StartXfer+0x2ac>)
 800e19e:	4013      	ands	r3, r2
 800e1a0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e1a2:	693b      	ldr	r3, [r7, #16]
 800e1a4:	015a      	lsls	r2, r3, #5
 800e1a6:	697b      	ldr	r3, [r7, #20]
 800e1a8:	4413      	add	r3, r2
 800e1aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e1ae:	691a      	ldr	r2, [r3, #16]
 800e1b0:	693b      	ldr	r3, [r7, #16]
 800e1b2:	0159      	lsls	r1, r3, #5
 800e1b4:	697b      	ldr	r3, [r7, #20]
 800e1b6:	440b      	add	r3, r1
 800e1b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e1bc:	4619      	mov	r1, r3
 800e1be:	4b76      	ldr	r3, [pc, #472]	; (800e398 <USB_EP0StartXfer+0x2a8>)
 800e1c0:	4013      	ands	r3, r2
 800e1c2:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800e1c4:	68bb      	ldr	r3, [r7, #8]
 800e1c6:	695a      	ldr	r2, [r3, #20]
 800e1c8:	68bb      	ldr	r3, [r7, #8]
 800e1ca:	689b      	ldr	r3, [r3, #8]
 800e1cc:	429a      	cmp	r2, r3
 800e1ce:	d903      	bls.n	800e1d8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800e1d0:	68bb      	ldr	r3, [r7, #8]
 800e1d2:	689a      	ldr	r2, [r3, #8]
 800e1d4:	68bb      	ldr	r3, [r7, #8]
 800e1d6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e1d8:	693b      	ldr	r3, [r7, #16]
 800e1da:	015a      	lsls	r2, r3, #5
 800e1dc:	697b      	ldr	r3, [r7, #20]
 800e1de:	4413      	add	r3, r2
 800e1e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e1e4:	691b      	ldr	r3, [r3, #16]
 800e1e6:	693a      	ldr	r2, [r7, #16]
 800e1e8:	0151      	lsls	r1, r2, #5
 800e1ea:	697a      	ldr	r2, [r7, #20]
 800e1ec:	440a      	add	r2, r1
 800e1ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e1f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e1f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e1f8:	693b      	ldr	r3, [r7, #16]
 800e1fa:	015a      	lsls	r2, r3, #5
 800e1fc:	697b      	ldr	r3, [r7, #20]
 800e1fe:	4413      	add	r3, r2
 800e200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e204:	691a      	ldr	r2, [r3, #16]
 800e206:	68bb      	ldr	r3, [r7, #8]
 800e208:	695b      	ldr	r3, [r3, #20]
 800e20a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e20e:	6939      	ldr	r1, [r7, #16]
 800e210:	0148      	lsls	r0, r1, #5
 800e212:	6979      	ldr	r1, [r7, #20]
 800e214:	4401      	add	r1, r0
 800e216:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e21a:	4313      	orrs	r3, r2
 800e21c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800e21e:	79fb      	ldrb	r3, [r7, #7]
 800e220:	2b01      	cmp	r3, #1
 800e222:	d11e      	bne.n	800e262 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e224:	68bb      	ldr	r3, [r7, #8]
 800e226:	691b      	ldr	r3, [r3, #16]
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d009      	beq.n	800e240 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e22c:	693b      	ldr	r3, [r7, #16]
 800e22e:	015a      	lsls	r2, r3, #5
 800e230:	697b      	ldr	r3, [r7, #20]
 800e232:	4413      	add	r3, r2
 800e234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e238:	461a      	mov	r2, r3
 800e23a:	68bb      	ldr	r3, [r7, #8]
 800e23c:	691b      	ldr	r3, [r3, #16]
 800e23e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e240:	693b      	ldr	r3, [r7, #16]
 800e242:	015a      	lsls	r2, r3, #5
 800e244:	697b      	ldr	r3, [r7, #20]
 800e246:	4413      	add	r3, r2
 800e248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	693a      	ldr	r2, [r7, #16]
 800e250:	0151      	lsls	r1, r2, #5
 800e252:	697a      	ldr	r2, [r7, #20]
 800e254:	440a      	add	r2, r1
 800e256:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e25a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e25e:	6013      	str	r3, [r2, #0]
 800e260:	e092      	b.n	800e388 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e262:	693b      	ldr	r3, [r7, #16]
 800e264:	015a      	lsls	r2, r3, #5
 800e266:	697b      	ldr	r3, [r7, #20]
 800e268:	4413      	add	r3, r2
 800e26a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	693a      	ldr	r2, [r7, #16]
 800e272:	0151      	lsls	r1, r2, #5
 800e274:	697a      	ldr	r2, [r7, #20]
 800e276:	440a      	add	r2, r1
 800e278:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e27c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e280:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800e282:	68bb      	ldr	r3, [r7, #8]
 800e284:	695b      	ldr	r3, [r3, #20]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d07e      	beq.n	800e388 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e28a:	697b      	ldr	r3, [r7, #20]
 800e28c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e290:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e292:	68bb      	ldr	r3, [r7, #8]
 800e294:	781b      	ldrb	r3, [r3, #0]
 800e296:	f003 030f 	and.w	r3, r3, #15
 800e29a:	2101      	movs	r1, #1
 800e29c:	fa01 f303 	lsl.w	r3, r1, r3
 800e2a0:	6979      	ldr	r1, [r7, #20]
 800e2a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e2a6:	4313      	orrs	r3, r2
 800e2a8:	634b      	str	r3, [r1, #52]	; 0x34
 800e2aa:	e06d      	b.n	800e388 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e2ac:	693b      	ldr	r3, [r7, #16]
 800e2ae:	015a      	lsls	r2, r3, #5
 800e2b0:	697b      	ldr	r3, [r7, #20]
 800e2b2:	4413      	add	r3, r2
 800e2b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2b8:	691a      	ldr	r2, [r3, #16]
 800e2ba:	693b      	ldr	r3, [r7, #16]
 800e2bc:	0159      	lsls	r1, r3, #5
 800e2be:	697b      	ldr	r3, [r7, #20]
 800e2c0:	440b      	add	r3, r1
 800e2c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2c6:	4619      	mov	r1, r3
 800e2c8:	4b34      	ldr	r3, [pc, #208]	; (800e39c <USB_EP0StartXfer+0x2ac>)
 800e2ca:	4013      	ands	r3, r2
 800e2cc:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e2ce:	693b      	ldr	r3, [r7, #16]
 800e2d0:	015a      	lsls	r2, r3, #5
 800e2d2:	697b      	ldr	r3, [r7, #20]
 800e2d4:	4413      	add	r3, r2
 800e2d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2da:	691a      	ldr	r2, [r3, #16]
 800e2dc:	693b      	ldr	r3, [r7, #16]
 800e2de:	0159      	lsls	r1, r3, #5
 800e2e0:	697b      	ldr	r3, [r7, #20]
 800e2e2:	440b      	add	r3, r1
 800e2e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2e8:	4619      	mov	r1, r3
 800e2ea:	4b2b      	ldr	r3, [pc, #172]	; (800e398 <USB_EP0StartXfer+0x2a8>)
 800e2ec:	4013      	ands	r3, r2
 800e2ee:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800e2f0:	68bb      	ldr	r3, [r7, #8]
 800e2f2:	695b      	ldr	r3, [r3, #20]
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d003      	beq.n	800e300 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800e2f8:	68bb      	ldr	r3, [r7, #8]
 800e2fa:	689a      	ldr	r2, [r3, #8]
 800e2fc:	68bb      	ldr	r3, [r7, #8]
 800e2fe:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e300:	693b      	ldr	r3, [r7, #16]
 800e302:	015a      	lsls	r2, r3, #5
 800e304:	697b      	ldr	r3, [r7, #20]
 800e306:	4413      	add	r3, r2
 800e308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e30c:	691b      	ldr	r3, [r3, #16]
 800e30e:	693a      	ldr	r2, [r7, #16]
 800e310:	0151      	lsls	r1, r2, #5
 800e312:	697a      	ldr	r2, [r7, #20]
 800e314:	440a      	add	r2, r1
 800e316:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e31a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e31e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800e320:	693b      	ldr	r3, [r7, #16]
 800e322:	015a      	lsls	r2, r3, #5
 800e324:	697b      	ldr	r3, [r7, #20]
 800e326:	4413      	add	r3, r2
 800e328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e32c:	691a      	ldr	r2, [r3, #16]
 800e32e:	68bb      	ldr	r3, [r7, #8]
 800e330:	689b      	ldr	r3, [r3, #8]
 800e332:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e336:	6939      	ldr	r1, [r7, #16]
 800e338:	0148      	lsls	r0, r1, #5
 800e33a:	6979      	ldr	r1, [r7, #20]
 800e33c:	4401      	add	r1, r0
 800e33e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e342:	4313      	orrs	r3, r2
 800e344:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800e346:	79fb      	ldrb	r3, [r7, #7]
 800e348:	2b01      	cmp	r3, #1
 800e34a:	d10d      	bne.n	800e368 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800e34c:	68bb      	ldr	r3, [r7, #8]
 800e34e:	68db      	ldr	r3, [r3, #12]
 800e350:	2b00      	cmp	r3, #0
 800e352:	d009      	beq.n	800e368 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e354:	68bb      	ldr	r3, [r7, #8]
 800e356:	68d9      	ldr	r1, [r3, #12]
 800e358:	693b      	ldr	r3, [r7, #16]
 800e35a:	015a      	lsls	r2, r3, #5
 800e35c:	697b      	ldr	r3, [r7, #20]
 800e35e:	4413      	add	r3, r2
 800e360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e364:	460a      	mov	r2, r1
 800e366:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e368:	693b      	ldr	r3, [r7, #16]
 800e36a:	015a      	lsls	r2, r3, #5
 800e36c:	697b      	ldr	r3, [r7, #20]
 800e36e:	4413      	add	r3, r2
 800e370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	693a      	ldr	r2, [r7, #16]
 800e378:	0151      	lsls	r1, r2, #5
 800e37a:	697a      	ldr	r2, [r7, #20]
 800e37c:	440a      	add	r2, r1
 800e37e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e382:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e386:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e388:	2300      	movs	r3, #0
}
 800e38a:	4618      	mov	r0, r3
 800e38c:	371c      	adds	r7, #28
 800e38e:	46bd      	mov	sp, r7
 800e390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e394:	4770      	bx	lr
 800e396:	bf00      	nop
 800e398:	e007ffff 	.word	0xe007ffff
 800e39c:	fff80000 	.word	0xfff80000

0800e3a0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800e3a0:	b480      	push	{r7}
 800e3a2:	b089      	sub	sp, #36	; 0x24
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	60f8      	str	r0, [r7, #12]
 800e3a8:	60b9      	str	r1, [r7, #8]
 800e3aa:	4611      	mov	r1, r2
 800e3ac:	461a      	mov	r2, r3
 800e3ae:	460b      	mov	r3, r1
 800e3b0:	71fb      	strb	r3, [r7, #7]
 800e3b2:	4613      	mov	r3, r2
 800e3b4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800e3ba:	68bb      	ldr	r3, [r7, #8]
 800e3bc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800e3be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d123      	bne.n	800e40e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800e3c6:	88bb      	ldrh	r3, [r7, #4]
 800e3c8:	3303      	adds	r3, #3
 800e3ca:	089b      	lsrs	r3, r3, #2
 800e3cc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	61bb      	str	r3, [r7, #24]
 800e3d2:	e018      	b.n	800e406 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800e3d4:	79fb      	ldrb	r3, [r7, #7]
 800e3d6:	031a      	lsls	r2, r3, #12
 800e3d8:	697b      	ldr	r3, [r7, #20]
 800e3da:	4413      	add	r3, r2
 800e3dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e3e0:	461a      	mov	r2, r3
 800e3e2:	69fb      	ldr	r3, [r7, #28]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	6013      	str	r3, [r2, #0]
      pSrc++;
 800e3e8:	69fb      	ldr	r3, [r7, #28]
 800e3ea:	3301      	adds	r3, #1
 800e3ec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e3ee:	69fb      	ldr	r3, [r7, #28]
 800e3f0:	3301      	adds	r3, #1
 800e3f2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e3f4:	69fb      	ldr	r3, [r7, #28]
 800e3f6:	3301      	adds	r3, #1
 800e3f8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e3fa:	69fb      	ldr	r3, [r7, #28]
 800e3fc:	3301      	adds	r3, #1
 800e3fe:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800e400:	69bb      	ldr	r3, [r7, #24]
 800e402:	3301      	adds	r3, #1
 800e404:	61bb      	str	r3, [r7, #24]
 800e406:	69ba      	ldr	r2, [r7, #24]
 800e408:	693b      	ldr	r3, [r7, #16]
 800e40a:	429a      	cmp	r2, r3
 800e40c:	d3e2      	bcc.n	800e3d4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800e40e:	2300      	movs	r3, #0
}
 800e410:	4618      	mov	r0, r3
 800e412:	3724      	adds	r7, #36	; 0x24
 800e414:	46bd      	mov	sp, r7
 800e416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e41a:	4770      	bx	lr

0800e41c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800e41c:	b480      	push	{r7}
 800e41e:	b08b      	sub	sp, #44	; 0x2c
 800e420:	af00      	add	r7, sp, #0
 800e422:	60f8      	str	r0, [r7, #12]
 800e424:	60b9      	str	r1, [r7, #8]
 800e426:	4613      	mov	r3, r2
 800e428:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800e42e:	68bb      	ldr	r3, [r7, #8]
 800e430:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800e432:	88fb      	ldrh	r3, [r7, #6]
 800e434:	089b      	lsrs	r3, r3, #2
 800e436:	b29b      	uxth	r3, r3
 800e438:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800e43a:	88fb      	ldrh	r3, [r7, #6]
 800e43c:	f003 0303 	and.w	r3, r3, #3
 800e440:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800e442:	2300      	movs	r3, #0
 800e444:	623b      	str	r3, [r7, #32]
 800e446:	e014      	b.n	800e472 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800e448:	69bb      	ldr	r3, [r7, #24]
 800e44a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e44e:	681a      	ldr	r2, [r3, #0]
 800e450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e452:	601a      	str	r2, [r3, #0]
    pDest++;
 800e454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e456:	3301      	adds	r3, #1
 800e458:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e45a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e45c:	3301      	adds	r3, #1
 800e45e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e462:	3301      	adds	r3, #1
 800e464:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e468:	3301      	adds	r3, #1
 800e46a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800e46c:	6a3b      	ldr	r3, [r7, #32]
 800e46e:	3301      	adds	r3, #1
 800e470:	623b      	str	r3, [r7, #32]
 800e472:	6a3a      	ldr	r2, [r7, #32]
 800e474:	697b      	ldr	r3, [r7, #20]
 800e476:	429a      	cmp	r2, r3
 800e478:	d3e6      	bcc.n	800e448 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800e47a:	8bfb      	ldrh	r3, [r7, #30]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d01e      	beq.n	800e4be <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800e480:	2300      	movs	r3, #0
 800e482:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800e484:	69bb      	ldr	r3, [r7, #24]
 800e486:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e48a:	461a      	mov	r2, r3
 800e48c:	f107 0310 	add.w	r3, r7, #16
 800e490:	6812      	ldr	r2, [r2, #0]
 800e492:	601a      	str	r2, [r3, #0]
	
    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800e494:	693a      	ldr	r2, [r7, #16]
 800e496:	6a3b      	ldr	r3, [r7, #32]
 800e498:	b2db      	uxtb	r3, r3
 800e49a:	00db      	lsls	r3, r3, #3
 800e49c:	fa22 f303 	lsr.w	r3, r2, r3
 800e4a0:	b2da      	uxtb	r2, r3
 800e4a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4a4:	701a      	strb	r2, [r3, #0]
      i++;
 800e4a6:	6a3b      	ldr	r3, [r7, #32]
 800e4a8:	3301      	adds	r3, #1
 800e4aa:	623b      	str	r3, [r7, #32]
      pDest++;
 800e4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ae:	3301      	adds	r3, #1
 800e4b0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800e4b2:	8bfb      	ldrh	r3, [r7, #30]
 800e4b4:	3b01      	subs	r3, #1
 800e4b6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800e4b8:	8bfb      	ldrh	r3, [r7, #30]
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d1ea      	bne.n	800e494 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800e4be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	372c      	adds	r7, #44	; 0x2c
 800e4c4:	46bd      	mov	sp, r7
 800e4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ca:	4770      	bx	lr

0800e4cc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e4cc:	b480      	push	{r7}
 800e4ce:	b085      	sub	sp, #20
 800e4d0:	af00      	add	r7, sp, #0
 800e4d2:	6078      	str	r0, [r7, #4]
 800e4d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e4da:	683b      	ldr	r3, [r7, #0]
 800e4dc:	781b      	ldrb	r3, [r3, #0]
 800e4de:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e4e0:	683b      	ldr	r3, [r7, #0]
 800e4e2:	785b      	ldrb	r3, [r3, #1]
 800e4e4:	2b01      	cmp	r3, #1
 800e4e6:	d12c      	bne.n	800e542 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e4e8:	68bb      	ldr	r3, [r7, #8]
 800e4ea:	015a      	lsls	r2, r3, #5
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	4413      	add	r3, r2
 800e4f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	db12      	blt.n	800e520 <USB_EPSetStall+0x54>
 800e4fa:	68bb      	ldr	r3, [r7, #8]
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d00f      	beq.n	800e520 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800e500:	68bb      	ldr	r3, [r7, #8]
 800e502:	015a      	lsls	r2, r3, #5
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	4413      	add	r3, r2
 800e508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	68ba      	ldr	r2, [r7, #8]
 800e510:	0151      	lsls	r1, r2, #5
 800e512:	68fa      	ldr	r2, [r7, #12]
 800e514:	440a      	add	r2, r1
 800e516:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e51a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e51e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800e520:	68bb      	ldr	r3, [r7, #8]
 800e522:	015a      	lsls	r2, r3, #5
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	4413      	add	r3, r2
 800e528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	68ba      	ldr	r2, [r7, #8]
 800e530:	0151      	lsls	r1, r2, #5
 800e532:	68fa      	ldr	r2, [r7, #12]
 800e534:	440a      	add	r2, r1
 800e536:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e53a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e53e:	6013      	str	r3, [r2, #0]
 800e540:	e02b      	b.n	800e59a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e542:	68bb      	ldr	r3, [r7, #8]
 800e544:	015a      	lsls	r2, r3, #5
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	4413      	add	r3, r2
 800e54a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	2b00      	cmp	r3, #0
 800e552:	db12      	blt.n	800e57a <USB_EPSetStall+0xae>
 800e554:	68bb      	ldr	r3, [r7, #8]
 800e556:	2b00      	cmp	r3, #0
 800e558:	d00f      	beq.n	800e57a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800e55a:	68bb      	ldr	r3, [r7, #8]
 800e55c:	015a      	lsls	r2, r3, #5
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	4413      	add	r3, r2
 800e562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	68ba      	ldr	r2, [r7, #8]
 800e56a:	0151      	lsls	r1, r2, #5
 800e56c:	68fa      	ldr	r2, [r7, #12]
 800e56e:	440a      	add	r2, r1
 800e570:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e574:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e578:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800e57a:	68bb      	ldr	r3, [r7, #8]
 800e57c:	015a      	lsls	r2, r3, #5
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	4413      	add	r3, r2
 800e582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	68ba      	ldr	r2, [r7, #8]
 800e58a:	0151      	lsls	r1, r2, #5
 800e58c:	68fa      	ldr	r2, [r7, #12]
 800e58e:	440a      	add	r2, r1
 800e590:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e594:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e598:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e59a:	2300      	movs	r3, #0
}
 800e59c:	4618      	mov	r0, r3
 800e59e:	3714      	adds	r7, #20
 800e5a0:	46bd      	mov	sp, r7
 800e5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a6:	4770      	bx	lr

0800e5a8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e5a8:	b480      	push	{r7}
 800e5aa:	b085      	sub	sp, #20
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	6078      	str	r0, [r7, #4]
 800e5b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e5b6:	683b      	ldr	r3, [r7, #0]
 800e5b8:	781b      	ldrb	r3, [r3, #0]
 800e5ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e5bc:	683b      	ldr	r3, [r7, #0]
 800e5be:	785b      	ldrb	r3, [r3, #1]
 800e5c0:	2b01      	cmp	r3, #1
 800e5c2:	d128      	bne.n	800e616 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e5c4:	68bb      	ldr	r3, [r7, #8]
 800e5c6:	015a      	lsls	r2, r3, #5
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	4413      	add	r3, r2
 800e5cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	68ba      	ldr	r2, [r7, #8]
 800e5d4:	0151      	lsls	r1, r2, #5
 800e5d6:	68fa      	ldr	r2, [r7, #12]
 800e5d8:	440a      	add	r2, r1
 800e5da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e5de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e5e2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e5e4:	683b      	ldr	r3, [r7, #0]
 800e5e6:	78db      	ldrb	r3, [r3, #3]
 800e5e8:	2b03      	cmp	r3, #3
 800e5ea:	d003      	beq.n	800e5f4 <USB_EPClearStall+0x4c>
 800e5ec:	683b      	ldr	r3, [r7, #0]
 800e5ee:	78db      	ldrb	r3, [r3, #3]
 800e5f0:	2b02      	cmp	r3, #2
 800e5f2:	d138      	bne.n	800e666 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e5f4:	68bb      	ldr	r3, [r7, #8]
 800e5f6:	015a      	lsls	r2, r3, #5
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	4413      	add	r3, r2
 800e5fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	68ba      	ldr	r2, [r7, #8]
 800e604:	0151      	lsls	r1, r2, #5
 800e606:	68fa      	ldr	r2, [r7, #12]
 800e608:	440a      	add	r2, r1
 800e60a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e60e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e612:	6013      	str	r3, [r2, #0]
 800e614:	e027      	b.n	800e666 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800e616:	68bb      	ldr	r3, [r7, #8]
 800e618:	015a      	lsls	r2, r3, #5
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	4413      	add	r3, r2
 800e61e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	68ba      	ldr	r2, [r7, #8]
 800e626:	0151      	lsls	r1, r2, #5
 800e628:	68fa      	ldr	r2, [r7, #12]
 800e62a:	440a      	add	r2, r1
 800e62c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e630:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e634:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e636:	683b      	ldr	r3, [r7, #0]
 800e638:	78db      	ldrb	r3, [r3, #3]
 800e63a:	2b03      	cmp	r3, #3
 800e63c:	d003      	beq.n	800e646 <USB_EPClearStall+0x9e>
 800e63e:	683b      	ldr	r3, [r7, #0]
 800e640:	78db      	ldrb	r3, [r3, #3]
 800e642:	2b02      	cmp	r3, #2
 800e644:	d10f      	bne.n	800e666 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e646:	68bb      	ldr	r3, [r7, #8]
 800e648:	015a      	lsls	r2, r3, #5
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	4413      	add	r3, r2
 800e64e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	68ba      	ldr	r2, [r7, #8]
 800e656:	0151      	lsls	r1, r2, #5
 800e658:	68fa      	ldr	r2, [r7, #12]
 800e65a:	440a      	add	r2, r1
 800e65c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e664:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800e666:	2300      	movs	r3, #0
}
 800e668:	4618      	mov	r0, r3
 800e66a:	3714      	adds	r7, #20
 800e66c:	46bd      	mov	sp, r7
 800e66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e672:	4770      	bx	lr

0800e674 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800e674:	b480      	push	{r7}
 800e676:	b085      	sub	sp, #20
 800e678:	af00      	add	r7, sp, #0
 800e67a:	6078      	str	r0, [r7, #4]
 800e67c:	460b      	mov	r3, r1
 800e67e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	68fa      	ldr	r2, [r7, #12]
 800e68e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e692:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800e696:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e69e:	681a      	ldr	r2, [r3, #0]
 800e6a0:	78fb      	ldrb	r3, [r7, #3]
 800e6a2:	011b      	lsls	r3, r3, #4
 800e6a4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800e6a8:	68f9      	ldr	r1, [r7, #12]
 800e6aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e6ae:	4313      	orrs	r3, r2
 800e6b0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800e6b2:	2300      	movs	r3, #0
}
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	3714      	adds	r7, #20
 800e6b8:	46bd      	mov	sp, r7
 800e6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6be:	4770      	bx	lr

0800e6c0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e6c0:	b480      	push	{r7}
 800e6c2:	b085      	sub	sp, #20
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	68fa      	ldr	r2, [r7, #12]
 800e6d6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e6da:	f023 0303 	bic.w	r3, r3, #3
 800e6de:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e6e6:	685b      	ldr	r3, [r3, #4]
 800e6e8:	68fa      	ldr	r2, [r7, #12]
 800e6ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e6ee:	f023 0302 	bic.w	r3, r3, #2
 800e6f2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e6f4:	2300      	movs	r3, #0
}
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	3714      	adds	r7, #20
 800e6fa:	46bd      	mov	sp, r7
 800e6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e700:	4770      	bx	lr

0800e702 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e702:	b480      	push	{r7}
 800e704:	b085      	sub	sp, #20
 800e706:	af00      	add	r7, sp, #0
 800e708:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	68fa      	ldr	r2, [r7, #12]
 800e718:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e71c:	f023 0303 	bic.w	r3, r3, #3
 800e720:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e728:	685b      	ldr	r3, [r3, #4]
 800e72a:	68fa      	ldr	r2, [r7, #12]
 800e72c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e730:	f043 0302 	orr.w	r3, r3, #2
 800e734:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e736:	2300      	movs	r3, #0
}
 800e738:	4618      	mov	r0, r3
 800e73a:	3714      	adds	r7, #20
 800e73c:	46bd      	mov	sp, r7
 800e73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e742:	4770      	bx	lr

0800e744 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800e744:	b480      	push	{r7}
 800e746:	b085      	sub	sp, #20
 800e748:	af00      	add	r7, sp, #0
 800e74a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	695b      	ldr	r3, [r3, #20]
 800e750:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	699b      	ldr	r3, [r3, #24]
 800e756:	68fa      	ldr	r2, [r7, #12]
 800e758:	4013      	ands	r3, r2
 800e75a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800e75c:	68fb      	ldr	r3, [r7, #12]
}
 800e75e:	4618      	mov	r0, r3
 800e760:	3714      	adds	r7, #20
 800e762:	46bd      	mov	sp, r7
 800e764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e768:	4770      	bx	lr

0800e76a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e76a:	b480      	push	{r7}
 800e76c:	b085      	sub	sp, #20
 800e76e:	af00      	add	r7, sp, #0
 800e770:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e77c:	699b      	ldr	r3, [r3, #24]
 800e77e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e786:	69db      	ldr	r3, [r3, #28]
 800e788:	68ba      	ldr	r2, [r7, #8]
 800e78a:	4013      	ands	r3, r2
 800e78c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800e78e:	68bb      	ldr	r3, [r7, #8]
 800e790:	0c1b      	lsrs	r3, r3, #16
}
 800e792:	4618      	mov	r0, r3
 800e794:	3714      	adds	r7, #20
 800e796:	46bd      	mov	sp, r7
 800e798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e79c:	4770      	bx	lr

0800e79e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e79e:	b480      	push	{r7}
 800e7a0:	b085      	sub	sp, #20
 800e7a2:	af00      	add	r7, sp, #0
 800e7a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e7b0:	699b      	ldr	r3, [r3, #24]
 800e7b2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e7ba:	69db      	ldr	r3, [r3, #28]
 800e7bc:	68ba      	ldr	r2, [r7, #8]
 800e7be:	4013      	ands	r3, r2
 800e7c0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800e7c2:	68bb      	ldr	r3, [r7, #8]
 800e7c4:	b29b      	uxth	r3, r3
}
 800e7c6:	4618      	mov	r0, r3
 800e7c8:	3714      	adds	r7, #20
 800e7ca:	46bd      	mov	sp, r7
 800e7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d0:	4770      	bx	lr

0800e7d2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e7d2:	b480      	push	{r7}
 800e7d4:	b085      	sub	sp, #20
 800e7d6:	af00      	add	r7, sp, #0
 800e7d8:	6078      	str	r0, [r7, #4]
 800e7da:	460b      	mov	r3, r1
 800e7dc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800e7e2:	78fb      	ldrb	r3, [r7, #3]
 800e7e4:	015a      	lsls	r2, r3, #5
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	4413      	add	r3, r2
 800e7ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e7ee:	689b      	ldr	r3, [r3, #8]
 800e7f0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e7f8:	695b      	ldr	r3, [r3, #20]
 800e7fa:	68ba      	ldr	r2, [r7, #8]
 800e7fc:	4013      	ands	r3, r2
 800e7fe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e800:	68bb      	ldr	r3, [r7, #8]
}
 800e802:	4618      	mov	r0, r3
 800e804:	3714      	adds	r7, #20
 800e806:	46bd      	mov	sp, r7
 800e808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e80c:	4770      	bx	lr

0800e80e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e80e:	b480      	push	{r7}
 800e810:	b087      	sub	sp, #28
 800e812:	af00      	add	r7, sp, #0
 800e814:	6078      	str	r0, [r7, #4]
 800e816:	460b      	mov	r3, r1
 800e818:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800e81e:	697b      	ldr	r3, [r7, #20]
 800e820:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e824:	691b      	ldr	r3, [r3, #16]
 800e826:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800e828:	697b      	ldr	r3, [r7, #20]
 800e82a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e82e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e830:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800e832:	78fb      	ldrb	r3, [r7, #3]
 800e834:	f003 030f 	and.w	r3, r3, #15
 800e838:	68fa      	ldr	r2, [r7, #12]
 800e83a:	fa22 f303 	lsr.w	r3, r2, r3
 800e83e:	01db      	lsls	r3, r3, #7
 800e840:	b2db      	uxtb	r3, r3
 800e842:	693a      	ldr	r2, [r7, #16]
 800e844:	4313      	orrs	r3, r2
 800e846:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800e848:	78fb      	ldrb	r3, [r7, #3]
 800e84a:	015a      	lsls	r2, r3, #5
 800e84c:	697b      	ldr	r3, [r7, #20]
 800e84e:	4413      	add	r3, r2
 800e850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e854:	689b      	ldr	r3, [r3, #8]
 800e856:	693a      	ldr	r2, [r7, #16]
 800e858:	4013      	ands	r3, r2
 800e85a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e85c:	68bb      	ldr	r3, [r7, #8]
}
 800e85e:	4618      	mov	r0, r3
 800e860:	371c      	adds	r7, #28
 800e862:	46bd      	mov	sp, r7
 800e864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e868:	4770      	bx	lr

0800e86a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800e86a:	b480      	push	{r7}
 800e86c:	b083      	sub	sp, #12
 800e86e:	af00      	add	r7, sp, #0
 800e870:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	695b      	ldr	r3, [r3, #20]
 800e876:	f003 0301 	and.w	r3, r3, #1
}
 800e87a:	4618      	mov	r0, r3
 800e87c:	370c      	adds	r7, #12
 800e87e:	46bd      	mov	sp, r7
 800e880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e884:	4770      	bx	lr
	...

0800e888 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800e888:	b480      	push	{r7}
 800e88a:	b085      	sub	sp, #20
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e89a:	681a      	ldr	r2, [r3, #0]
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e8a2:	4619      	mov	r1, r3
 800e8a4:	4b09      	ldr	r3, [pc, #36]	; (800e8cc <USB_ActivateSetup+0x44>)
 800e8a6:	4013      	ands	r3, r2
 800e8a8:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e8b0:	685b      	ldr	r3, [r3, #4]
 800e8b2:	68fa      	ldr	r2, [r7, #12]
 800e8b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e8b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e8bc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e8be:	2300      	movs	r3, #0
}
 800e8c0:	4618      	mov	r0, r3
 800e8c2:	3714      	adds	r7, #20
 800e8c4:	46bd      	mov	sp, r7
 800e8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ca:	4770      	bx	lr
 800e8cc:	fffff800 	.word	0xfffff800

0800e8d0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800e8d0:	b480      	push	{r7}
 800e8d2:	b087      	sub	sp, #28
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	60f8      	str	r0, [r7, #12]
 800e8d8:	460b      	mov	r3, r1
 800e8da:	607a      	str	r2, [r7, #4]
 800e8dc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	333c      	adds	r3, #60	; 0x3c
 800e8e6:	3304      	adds	r3, #4
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800e8ec:	693b      	ldr	r3, [r7, #16]
 800e8ee:	4a26      	ldr	r2, [pc, #152]	; (800e988 <USB_EP0_OutStart+0xb8>)
 800e8f0:	4293      	cmp	r3, r2
 800e8f2:	d90a      	bls.n	800e90a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e8f4:	697b      	ldr	r3, [r7, #20]
 800e8f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e900:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e904:	d101      	bne.n	800e90a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800e906:	2300      	movs	r3, #0
 800e908:	e037      	b.n	800e97a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800e90a:	697b      	ldr	r3, [r7, #20]
 800e90c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e910:	461a      	mov	r2, r3
 800e912:	2300      	movs	r3, #0
 800e914:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e916:	697b      	ldr	r3, [r7, #20]
 800e918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e91c:	691b      	ldr	r3, [r3, #16]
 800e91e:	697a      	ldr	r2, [r7, #20]
 800e920:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e924:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e928:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800e92a:	697b      	ldr	r3, [r7, #20]
 800e92c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e930:	691b      	ldr	r3, [r3, #16]
 800e932:	697a      	ldr	r2, [r7, #20]
 800e934:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e938:	f043 0318 	orr.w	r3, r3, #24
 800e93c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800e93e:	697b      	ldr	r3, [r7, #20]
 800e940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e944:	691b      	ldr	r3, [r3, #16]
 800e946:	697a      	ldr	r2, [r7, #20]
 800e948:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e94c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800e950:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800e952:	7afb      	ldrb	r3, [r7, #11]
 800e954:	2b01      	cmp	r3, #1
 800e956:	d10f      	bne.n	800e978 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800e958:	697b      	ldr	r3, [r7, #20]
 800e95a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e95e:	461a      	mov	r2, r3
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800e964:	697b      	ldr	r3, [r7, #20]
 800e966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	697a      	ldr	r2, [r7, #20]
 800e96e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e972:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800e976:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e978:	2300      	movs	r3, #0
}
 800e97a:	4618      	mov	r0, r3
 800e97c:	371c      	adds	r7, #28
 800e97e:	46bd      	mov	sp, r7
 800e980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e984:	4770      	bx	lr
 800e986:	bf00      	nop
 800e988:	4f54300a 	.word	0x4f54300a

0800e98c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e98c:	b480      	push	{r7}
 800e98e:	b085      	sub	sp, #20
 800e990:	af00      	add	r7, sp, #0
 800e992:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800e994:	2300      	movs	r3, #0
 800e996:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	3301      	adds	r3, #1
 800e99c:	60fb      	str	r3, [r7, #12]
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	4a13      	ldr	r2, [pc, #76]	; (800e9f0 <USB_CoreReset+0x64>)
 800e9a2:	4293      	cmp	r3, r2
 800e9a4:	d901      	bls.n	800e9aa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800e9a6:	2303      	movs	r3, #3
 800e9a8:	e01b      	b.n	800e9e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	691b      	ldr	r3, [r3, #16]
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	daf2      	bge.n	800e998 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	691b      	ldr	r3, [r3, #16]
 800e9ba:	f043 0201 	orr.w	r2, r3, #1
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	3301      	adds	r3, #1
 800e9c6:	60fb      	str	r3, [r7, #12]
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	4a09      	ldr	r2, [pc, #36]	; (800e9f0 <USB_CoreReset+0x64>)
 800e9cc:	4293      	cmp	r3, r2
 800e9ce:	d901      	bls.n	800e9d4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800e9d0:	2303      	movs	r3, #3
 800e9d2:	e006      	b.n	800e9e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	691b      	ldr	r3, [r3, #16]
 800e9d8:	f003 0301 	and.w	r3, r3, #1
 800e9dc:	2b01      	cmp	r3, #1
 800e9de:	d0f0      	beq.n	800e9c2 <USB_CoreReset+0x36>

  return HAL_OK;
 800e9e0:	2300      	movs	r3, #0
}
 800e9e2:	4618      	mov	r0, r3
 800e9e4:	3714      	adds	r7, #20
 800e9e6:	46bd      	mov	sp, r7
 800e9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ec:	4770      	bx	lr
 800e9ee:	bf00      	nop
 800e9f0:	00030d40 	.word	0x00030d40

0800e9f4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800e9f4:	b580      	push	{r7, lr}
 800e9f6:	b082      	sub	sp, #8
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800e9fc:	f000 f80e 	bl	800ea1c <BSP_SD_WriteCpltCallback>
}
 800ea00:	bf00      	nop
 800ea02:	3708      	adds	r7, #8
 800ea04:	46bd      	mov	sp, r7
 800ea06:	bd80      	pop	{r7, pc}

0800ea08 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ea08:	b580      	push	{r7, lr}
 800ea0a:	b082      	sub	sp, #8
 800ea0c:	af00      	add	r7, sp, #0
 800ea0e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800ea10:	f000 f810 	bl	800ea34 <BSP_SD_ReadCpltCallback>
}
 800ea14:	bf00      	nop
 800ea16:	3708      	adds	r7, #8
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	bd80      	pop	{r7, pc}

0800ea1c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800ea1c:	b480      	push	{r7}
 800ea1e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800ea20:	4b03      	ldr	r3, [pc, #12]	; (800ea30 <BSP_SD_WriteCpltCallback+0x14>)
 800ea22:	2201      	movs	r2, #1
 800ea24:	601a      	str	r2, [r3, #0]
}
 800ea26:	bf00      	nop
 800ea28:	46bd      	mov	sp, r7
 800ea2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea2e:	4770      	bx	lr
 800ea30:	24000754 	.word	0x24000754

0800ea34 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800ea34:	b480      	push	{r7}
 800ea36:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800ea38:	4b03      	ldr	r3, [pc, #12]	; (800ea48 <BSP_SD_ReadCpltCallback+0x14>)
 800ea3a:	2201      	movs	r2, #1
 800ea3c:	601a      	str	r2, [r3, #0]
}
 800ea3e:	bf00      	nop
 800ea40:	46bd      	mov	sp, r7
 800ea42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea46:	4770      	bx	lr
 800ea48:	24000758 	.word	0x24000758

0800ea4c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ea4c:	b580      	push	{r7, lr}
 800ea4e:	b084      	sub	sp, #16
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	6078      	str	r0, [r7, #4]
 800ea54:	460b      	mov	r3, r1
 800ea56:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ea58:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800ea5c:	f002 f9be 	bl	8010ddc <malloc>
 800ea60:	4603      	mov	r3, r0
 800ea62:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d105      	bne.n	800ea76 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	2200      	movs	r2, #0
 800ea6e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800ea72:	2302      	movs	r3, #2
 800ea74:	e066      	b.n	800eb44 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	68fa      	ldr	r2, [r7, #12]
 800ea7a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	7c1b      	ldrb	r3, [r3, #16]
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d119      	bne.n	800eaba <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ea86:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ea8a:	2202      	movs	r2, #2
 800ea8c:	2181      	movs	r1, #129	; 0x81
 800ea8e:	6878      	ldr	r0, [r7, #4]
 800ea90:	f002 f82b 	bl	8010aea <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	2201      	movs	r2, #1
 800ea98:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ea9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ea9e:	2202      	movs	r2, #2
 800eaa0:	2101      	movs	r1, #1
 800eaa2:	6878      	ldr	r0, [r7, #4]
 800eaa4:	f002 f821 	bl	8010aea <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	2201      	movs	r2, #1
 800eaac:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	2210      	movs	r2, #16
 800eab4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800eab8:	e016      	b.n	800eae8 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800eaba:	2340      	movs	r3, #64	; 0x40
 800eabc:	2202      	movs	r2, #2
 800eabe:	2181      	movs	r1, #129	; 0x81
 800eac0:	6878      	ldr	r0, [r7, #4]
 800eac2:	f002 f812 	bl	8010aea <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	2201      	movs	r2, #1
 800eaca:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800eacc:	2340      	movs	r3, #64	; 0x40
 800eace:	2202      	movs	r2, #2
 800ead0:	2101      	movs	r1, #1
 800ead2:	6878      	ldr	r0, [r7, #4]
 800ead4:	f002 f809 	bl	8010aea <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	2201      	movs	r2, #1
 800eadc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	2210      	movs	r2, #16
 800eae4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800eae8:	2308      	movs	r3, #8
 800eaea:	2203      	movs	r2, #3
 800eaec:	2182      	movs	r1, #130	; 0x82
 800eaee:	6878      	ldr	r0, [r7, #4]
 800eaf0:	f001 fffb 	bl	8010aea <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	2201      	movs	r2, #1
 800eaf8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	2200      	movs	r2, #0
 800eb0a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	2200      	movs	r2, #0
 800eb12:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	7c1b      	ldrb	r3, [r3, #16]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d109      	bne.n	800eb32 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800eb24:	f44f 7300 	mov.w	r3, #512	; 0x200
 800eb28:	2101      	movs	r1, #1
 800eb2a:	6878      	ldr	r0, [r7, #4]
 800eb2c:	f002 f8cc 	bl	8010cc8 <USBD_LL_PrepareReceive>
 800eb30:	e007      	b.n	800eb42 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800eb38:	2340      	movs	r3, #64	; 0x40
 800eb3a:	2101      	movs	r1, #1
 800eb3c:	6878      	ldr	r0, [r7, #4]
 800eb3e:	f002 f8c3 	bl	8010cc8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800eb42:	2300      	movs	r3, #0
}
 800eb44:	4618      	mov	r0, r3
 800eb46:	3710      	adds	r7, #16
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	bd80      	pop	{r7, pc}

0800eb4c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800eb4c:	b580      	push	{r7, lr}
 800eb4e:	b084      	sub	sp, #16
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	6078      	str	r0, [r7, #4]
 800eb54:	460b      	mov	r3, r1
 800eb56:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800eb58:	2300      	movs	r3, #0
 800eb5a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800eb5c:	2181      	movs	r1, #129	; 0x81
 800eb5e:	6878      	ldr	r0, [r7, #4]
 800eb60:	f001 ffe9 	bl	8010b36 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	2200      	movs	r2, #0
 800eb68:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800eb6a:	2101      	movs	r1, #1
 800eb6c:	6878      	ldr	r0, [r7, #4]
 800eb6e:	f001 ffe2 	bl	8010b36 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	2200      	movs	r2, #0
 800eb76:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800eb7a:	2182      	movs	r1, #130	; 0x82
 800eb7c:	6878      	ldr	r0, [r7, #4]
 800eb7e:	f001 ffda 	bl	8010b36 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	2200      	movs	r2, #0
 800eb86:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	2200      	movs	r2, #0
 800eb8e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d00e      	beq.n	800ebba <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800eba2:	685b      	ldr	r3, [r3, #4]
 800eba4:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ebac:	4618      	mov	r0, r3
 800ebae:	f002 f91d 	bl	8010dec <free>
    pdev->pClassData = NULL;
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	2200      	movs	r2, #0
 800ebb6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800ebba:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebbc:	4618      	mov	r0, r3
 800ebbe:	3710      	adds	r7, #16
 800ebc0:	46bd      	mov	sp, r7
 800ebc2:	bd80      	pop	{r7, pc}

0800ebc4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ebc4:	b580      	push	{r7, lr}
 800ebc6:	b086      	sub	sp, #24
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	6078      	str	r0, [r7, #4]
 800ebcc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ebd4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800ebd6:	2300      	movs	r3, #0
 800ebd8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800ebda:	2300      	movs	r3, #0
 800ebdc:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800ebde:	2300      	movs	r3, #0
 800ebe0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ebe2:	683b      	ldr	r3, [r7, #0]
 800ebe4:	781b      	ldrb	r3, [r3, #0]
 800ebe6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d03a      	beq.n	800ec64 <USBD_CDC_Setup+0xa0>
 800ebee:	2b20      	cmp	r3, #32
 800ebf0:	f040 809a 	bne.w	800ed28 <USBD_CDC_Setup+0x164>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800ebf4:	683b      	ldr	r3, [r7, #0]
 800ebf6:	88db      	ldrh	r3, [r3, #6]
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d029      	beq.n	800ec50 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800ebfc:	683b      	ldr	r3, [r7, #0]
 800ebfe:	781b      	ldrb	r3, [r3, #0]
 800ec00:	b25b      	sxtb	r3, r3
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	da11      	bge.n	800ec2a <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ec0c:	689b      	ldr	r3, [r3, #8]
 800ec0e:	683a      	ldr	r2, [r7, #0]
 800ec10:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800ec12:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ec14:	683a      	ldr	r2, [r7, #0]
 800ec16:	88d2      	ldrh	r2, [r2, #6]
 800ec18:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800ec1a:	6939      	ldr	r1, [r7, #16]
 800ec1c:	683b      	ldr	r3, [r7, #0]
 800ec1e:	88db      	ldrh	r3, [r3, #6]
 800ec20:	461a      	mov	r2, r3
 800ec22:	6878      	ldr	r0, [r7, #4]
 800ec24:	f001 fabf 	bl	80101a6 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800ec28:	e085      	b.n	800ed36 <USBD_CDC_Setup+0x172>
        hcdc->CmdOpCode = req->bRequest;
 800ec2a:	683b      	ldr	r3, [r7, #0]
 800ec2c:	785a      	ldrb	r2, [r3, #1]
 800ec2e:	693b      	ldr	r3, [r7, #16]
 800ec30:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800ec34:	683b      	ldr	r3, [r7, #0]
 800ec36:	88db      	ldrh	r3, [r3, #6]
 800ec38:	b2da      	uxtb	r2, r3
 800ec3a:	693b      	ldr	r3, [r7, #16]
 800ec3c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800ec40:	6939      	ldr	r1, [r7, #16]
 800ec42:	683b      	ldr	r3, [r7, #0]
 800ec44:	88db      	ldrh	r3, [r3, #6]
 800ec46:	461a      	mov	r2, r3
 800ec48:	6878      	ldr	r0, [r7, #4]
 800ec4a:	f001 fad8 	bl	80101fe <USBD_CtlPrepareRx>
    break;
 800ec4e:	e072      	b.n	800ed36 <USBD_CDC_Setup+0x172>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ec56:	689b      	ldr	r3, [r3, #8]
 800ec58:	683a      	ldr	r2, [r7, #0]
 800ec5a:	7850      	ldrb	r0, [r2, #1]
 800ec5c:	2200      	movs	r2, #0
 800ec5e:	6839      	ldr	r1, [r7, #0]
 800ec60:	4798      	blx	r3
    break;
 800ec62:	e068      	b.n	800ed36 <USBD_CDC_Setup+0x172>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800ec64:	683b      	ldr	r3, [r7, #0]
 800ec66:	785b      	ldrb	r3, [r3, #1]
 800ec68:	2b0b      	cmp	r3, #11
 800ec6a:	d852      	bhi.n	800ed12 <USBD_CDC_Setup+0x14e>
 800ec6c:	a201      	add	r2, pc, #4	; (adr r2, 800ec74 <USBD_CDC_Setup+0xb0>)
 800ec6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec72:	bf00      	nop
 800ec74:	0800eca5 	.word	0x0800eca5
 800ec78:	0800ed21 	.word	0x0800ed21
 800ec7c:	0800ed13 	.word	0x0800ed13
 800ec80:	0800ed13 	.word	0x0800ed13
 800ec84:	0800ed13 	.word	0x0800ed13
 800ec88:	0800ed13 	.word	0x0800ed13
 800ec8c:	0800ed13 	.word	0x0800ed13
 800ec90:	0800ed13 	.word	0x0800ed13
 800ec94:	0800ed13 	.word	0x0800ed13
 800ec98:	0800ed13 	.word	0x0800ed13
 800ec9c:	0800eccf 	.word	0x0800eccf
 800eca0:	0800ecf9 	.word	0x0800ecf9
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ecaa:	b2db      	uxtb	r3, r3
 800ecac:	2b03      	cmp	r3, #3
 800ecae:	d107      	bne.n	800ecc0 <USBD_CDC_Setup+0xfc>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ecb0:	f107 030c 	add.w	r3, r7, #12
 800ecb4:	2202      	movs	r2, #2
 800ecb6:	4619      	mov	r1, r3
 800ecb8:	6878      	ldr	r0, [r7, #4]
 800ecba:	f001 fa74 	bl	80101a6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800ecbe:	e032      	b.n	800ed26 <USBD_CDC_Setup+0x162>
        USBD_CtlError(pdev, req);
 800ecc0:	6839      	ldr	r1, [r7, #0]
 800ecc2:	6878      	ldr	r0, [r7, #4]
 800ecc4:	f001 f9fe 	bl	80100c4 <USBD_CtlError>
        ret = USBD_FAIL;
 800ecc8:	2303      	movs	r3, #3
 800ecca:	75fb      	strb	r3, [r7, #23]
      break;
 800eccc:	e02b      	b.n	800ed26 <USBD_CDC_Setup+0x162>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ecd4:	b2db      	uxtb	r3, r3
 800ecd6:	2b03      	cmp	r3, #3
 800ecd8:	d107      	bne.n	800ecea <USBD_CDC_Setup+0x126>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ecda:	f107 030f 	add.w	r3, r7, #15
 800ecde:	2201      	movs	r2, #1
 800ece0:	4619      	mov	r1, r3
 800ece2:	6878      	ldr	r0, [r7, #4]
 800ece4:	f001 fa5f 	bl	80101a6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800ece8:	e01d      	b.n	800ed26 <USBD_CDC_Setup+0x162>
        USBD_CtlError(pdev, req);
 800ecea:	6839      	ldr	r1, [r7, #0]
 800ecec:	6878      	ldr	r0, [r7, #4]
 800ecee:	f001 f9e9 	bl	80100c4 <USBD_CtlError>
        ret = USBD_FAIL;
 800ecf2:	2303      	movs	r3, #3
 800ecf4:	75fb      	strb	r3, [r7, #23]
      break;
 800ecf6:	e016      	b.n	800ed26 <USBD_CDC_Setup+0x162>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ecfe:	b2db      	uxtb	r3, r3
 800ed00:	2b03      	cmp	r3, #3
 800ed02:	d00f      	beq.n	800ed24 <USBD_CDC_Setup+0x160>
      {
        USBD_CtlError(pdev, req);
 800ed04:	6839      	ldr	r1, [r7, #0]
 800ed06:	6878      	ldr	r0, [r7, #4]
 800ed08:	f001 f9dc 	bl	80100c4 <USBD_CtlError>
        ret = USBD_FAIL;
 800ed0c:	2303      	movs	r3, #3
 800ed0e:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800ed10:	e008      	b.n	800ed24 <USBD_CDC_Setup+0x160>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800ed12:	6839      	ldr	r1, [r7, #0]
 800ed14:	6878      	ldr	r0, [r7, #4]
 800ed16:	f001 f9d5 	bl	80100c4 <USBD_CtlError>
      ret = USBD_FAIL;
 800ed1a:	2303      	movs	r3, #3
 800ed1c:	75fb      	strb	r3, [r7, #23]
      break;
 800ed1e:	e002      	b.n	800ed26 <USBD_CDC_Setup+0x162>
      break;
 800ed20:	bf00      	nop
 800ed22:	e008      	b.n	800ed36 <USBD_CDC_Setup+0x172>
      break;
 800ed24:	bf00      	nop
    }
    break;
 800ed26:	e006      	b.n	800ed36 <USBD_CDC_Setup+0x172>

  default:
    USBD_CtlError(pdev, req);
 800ed28:	6839      	ldr	r1, [r7, #0]
 800ed2a:	6878      	ldr	r0, [r7, #4]
 800ed2c:	f001 f9ca 	bl	80100c4 <USBD_CtlError>
    ret = USBD_FAIL;
 800ed30:	2303      	movs	r3, #3
 800ed32:	75fb      	strb	r3, [r7, #23]
    break;
 800ed34:	bf00      	nop
  }

  return (uint8_t)ret;
 800ed36:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed38:	4618      	mov	r0, r3
 800ed3a:	3718      	adds	r7, #24
 800ed3c:	46bd      	mov	sp, r7
 800ed3e:	bd80      	pop	{r7, pc}

0800ed40 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ed40:	b580      	push	{r7, lr}
 800ed42:	b084      	sub	sp, #16
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	6078      	str	r0, [r7, #4]
 800ed48:	460b      	mov	r3, r1
 800ed4a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ed52:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d101      	bne.n	800ed62 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ed5e:	2303      	movs	r3, #3
 800ed60:	e049      	b.n	800edf6 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ed68:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800ed6a:	78fa      	ldrb	r2, [r7, #3]
 800ed6c:	6879      	ldr	r1, [r7, #4]
 800ed6e:	4613      	mov	r3, r2
 800ed70:	009b      	lsls	r3, r3, #2
 800ed72:	4413      	add	r3, r2
 800ed74:	009b      	lsls	r3, r3, #2
 800ed76:	440b      	add	r3, r1
 800ed78:	3318      	adds	r3, #24
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d029      	beq.n	800edd4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800ed80:	78fa      	ldrb	r2, [r7, #3]
 800ed82:	6879      	ldr	r1, [r7, #4]
 800ed84:	4613      	mov	r3, r2
 800ed86:	009b      	lsls	r3, r3, #2
 800ed88:	4413      	add	r3, r2
 800ed8a:	009b      	lsls	r3, r3, #2
 800ed8c:	440b      	add	r3, r1
 800ed8e:	3318      	adds	r3, #24
 800ed90:	681a      	ldr	r2, [r3, #0]
 800ed92:	78f9      	ldrb	r1, [r7, #3]
 800ed94:	68f8      	ldr	r0, [r7, #12]
 800ed96:	460b      	mov	r3, r1
 800ed98:	00db      	lsls	r3, r3, #3
 800ed9a:	1a5b      	subs	r3, r3, r1
 800ed9c:	009b      	lsls	r3, r3, #2
 800ed9e:	4403      	add	r3, r0
 800eda0:	3344      	adds	r3, #68	; 0x44
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	fbb2 f1f3 	udiv	r1, r2, r3
 800eda8:	fb01 f303 	mul.w	r3, r1, r3
 800edac:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d110      	bne.n	800edd4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800edb2:	78fa      	ldrb	r2, [r7, #3]
 800edb4:	6879      	ldr	r1, [r7, #4]
 800edb6:	4613      	mov	r3, r2
 800edb8:	009b      	lsls	r3, r3, #2
 800edba:	4413      	add	r3, r2
 800edbc:	009b      	lsls	r3, r3, #2
 800edbe:	440b      	add	r3, r1
 800edc0:	3318      	adds	r3, #24
 800edc2:	2200      	movs	r2, #0
 800edc4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800edc6:	78f9      	ldrb	r1, [r7, #3]
 800edc8:	2300      	movs	r3, #0
 800edca:	2200      	movs	r2, #0
 800edcc:	6878      	ldr	r0, [r7, #4]
 800edce:	f001 ff5a 	bl	8010c86 <USBD_LL_Transmit>
 800edd2:	e00f      	b.n	800edf4 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 800edd4:	68bb      	ldr	r3, [r7, #8]
 800edd6:	2200      	movs	r2, #0
 800edd8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ede2:	691b      	ldr	r3, [r3, #16]
 800ede4:	68ba      	ldr	r2, [r7, #8]
 800ede6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800edea:	68ba      	ldr	r2, [r7, #8]
 800edec:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800edf0:	78fa      	ldrb	r2, [r7, #3]
 800edf2:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800edf4:	2300      	movs	r3, #0
}
 800edf6:	4618      	mov	r0, r3
 800edf8:	3710      	adds	r7, #16
 800edfa:	46bd      	mov	sp, r7
 800edfc:	bd80      	pop	{r7, pc}

0800edfe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800edfe:	b580      	push	{r7, lr}
 800ee00:	b084      	sub	sp, #16
 800ee02:	af00      	add	r7, sp, #0
 800ee04:	6078      	str	r0, [r7, #4]
 800ee06:	460b      	mov	r3, r1
 800ee08:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ee10:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d101      	bne.n	800ee20 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ee1c:	2303      	movs	r3, #3
 800ee1e:	e015      	b.n	800ee4c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ee20:	78fb      	ldrb	r3, [r7, #3]
 800ee22:	4619      	mov	r1, r3
 800ee24:	6878      	ldr	r0, [r7, #4]
 800ee26:	f001 ff70 	bl	8010d0a <USBD_LL_GetRxDataSize>
 800ee2a:	4602      	mov	r2, r0
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ee38:	68db      	ldr	r3, [r3, #12]
 800ee3a:	68fa      	ldr	r2, [r7, #12]
 800ee3c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800ee40:	68fa      	ldr	r2, [r7, #12]
 800ee42:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800ee46:	4611      	mov	r1, r2
 800ee48:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ee4a:	2300      	movs	r3, #0
}
 800ee4c:	4618      	mov	r0, r3
 800ee4e:	3710      	adds	r7, #16
 800ee50:	46bd      	mov	sp, r7
 800ee52:	bd80      	pop	{r7, pc}

0800ee54 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ee54:	b580      	push	{r7, lr}
 800ee56:	b084      	sub	sp, #16
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ee62:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d015      	beq.n	800ee9a <USBD_CDC_EP0_RxReady+0x46>
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ee74:	2bff      	cmp	r3, #255	; 0xff
 800ee76:	d010      	beq.n	800ee9a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ee7e:	689b      	ldr	r3, [r3, #8]
 800ee80:	68fa      	ldr	r2, [r7, #12]
 800ee82:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800ee86:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800ee88:	68fa      	ldr	r2, [r7, #12]
 800ee8a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ee8e:	b292      	uxth	r2, r2
 800ee90:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	22ff      	movs	r2, #255	; 0xff
 800ee96:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800ee9a:	2300      	movs	r3, #0
}
 800ee9c:	4618      	mov	r0, r3
 800ee9e:	3710      	adds	r7, #16
 800eea0:	46bd      	mov	sp, r7
 800eea2:	bd80      	pop	{r7, pc}

0800eea4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800eea4:	b480      	push	{r7}
 800eea6:	b083      	sub	sp, #12
 800eea8:	af00      	add	r7, sp, #0
 800eeaa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	2243      	movs	r2, #67	; 0x43
 800eeb0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800eeb2:	4b03      	ldr	r3, [pc, #12]	; (800eec0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800eeb4:	4618      	mov	r0, r3
 800eeb6:	370c      	adds	r7, #12
 800eeb8:	46bd      	mov	sp, r7
 800eeba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eebe:	4770      	bx	lr
 800eec0:	24000098 	.word	0x24000098

0800eec4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800eec4:	b480      	push	{r7}
 800eec6:	b083      	sub	sp, #12
 800eec8:	af00      	add	r7, sp, #0
 800eeca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	2243      	movs	r2, #67	; 0x43
 800eed0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800eed2:	4b03      	ldr	r3, [pc, #12]	; (800eee0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800eed4:	4618      	mov	r0, r3
 800eed6:	370c      	adds	r7, #12
 800eed8:	46bd      	mov	sp, r7
 800eeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eede:	4770      	bx	lr
 800eee0:	24000054 	.word	0x24000054

0800eee4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800eee4:	b480      	push	{r7}
 800eee6:	b083      	sub	sp, #12
 800eee8:	af00      	add	r7, sp, #0
 800eeea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	2243      	movs	r2, #67	; 0x43
 800eef0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800eef2:	4b03      	ldr	r3, [pc, #12]	; (800ef00 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800eef4:	4618      	mov	r0, r3
 800eef6:	370c      	adds	r7, #12
 800eef8:	46bd      	mov	sp, r7
 800eefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eefe:	4770      	bx	lr
 800ef00:	240000dc 	.word	0x240000dc

0800ef04 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ef04:	b480      	push	{r7}
 800ef06:	b083      	sub	sp, #12
 800ef08:	af00      	add	r7, sp, #0
 800ef0a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	220a      	movs	r2, #10
 800ef10:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ef12:	4b03      	ldr	r3, [pc, #12]	; (800ef20 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ef14:	4618      	mov	r0, r3
 800ef16:	370c      	adds	r7, #12
 800ef18:	46bd      	mov	sp, r7
 800ef1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef1e:	4770      	bx	lr
 800ef20:	24000010 	.word	0x24000010

0800ef24 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ef24:	b480      	push	{r7}
 800ef26:	b083      	sub	sp, #12
 800ef28:	af00      	add	r7, sp, #0
 800ef2a:	6078      	str	r0, [r7, #4]
 800ef2c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ef2e:	683b      	ldr	r3, [r7, #0]
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d101      	bne.n	800ef38 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ef34:	2303      	movs	r3, #3
 800ef36:	e004      	b.n	800ef42 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	683a      	ldr	r2, [r7, #0]
 800ef3c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800ef40:	2300      	movs	r3, #0
}
 800ef42:	4618      	mov	r0, r3
 800ef44:	370c      	adds	r7, #12
 800ef46:	46bd      	mov	sp, r7
 800ef48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef4c:	4770      	bx	lr

0800ef4e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ef4e:	b480      	push	{r7}
 800ef50:	b087      	sub	sp, #28
 800ef52:	af00      	add	r7, sp, #0
 800ef54:	60f8      	str	r0, [r7, #12]
 800ef56:	60b9      	str	r1, [r7, #8]
 800ef58:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ef60:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800ef62:	697b      	ldr	r3, [r7, #20]
 800ef64:	68ba      	ldr	r2, [r7, #8]
 800ef66:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800ef6a:	697b      	ldr	r3, [r7, #20]
 800ef6c:	687a      	ldr	r2, [r7, #4]
 800ef6e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800ef72:	2300      	movs	r3, #0
}
 800ef74:	4618      	mov	r0, r3
 800ef76:	371c      	adds	r7, #28
 800ef78:	46bd      	mov	sp, r7
 800ef7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef7e:	4770      	bx	lr

0800ef80 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ef80:	b480      	push	{r7}
 800ef82:	b085      	sub	sp, #20
 800ef84:	af00      	add	r7, sp, #0
 800ef86:	6078      	str	r0, [r7, #4]
 800ef88:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ef90:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	683a      	ldr	r2, [r7, #0]
 800ef96:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800ef9a:	2300      	movs	r3, #0
}
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	3714      	adds	r7, #20
 800efa0:	46bd      	mov	sp, r7
 800efa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa6:	4770      	bx	lr

0800efa8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800efa8:	b580      	push	{r7, lr}
 800efaa:	b084      	sub	sp, #16
 800efac:	af00      	add	r7, sp, #0
 800efae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800efb6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800efb8:	2301      	movs	r3, #1
 800efba:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d101      	bne.n	800efca <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800efc6:	2303      	movs	r3, #3
 800efc8:	e01a      	b.n	800f000 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800efca:	68bb      	ldr	r3, [r7, #8]
 800efcc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d114      	bne.n	800effe <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800efd4:	68bb      	ldr	r3, [r7, #8]
 800efd6:	2201      	movs	r2, #1
 800efd8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800efdc:	68bb      	ldr	r3, [r7, #8]
 800efde:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800efe6:	68bb      	ldr	r3, [r7, #8]
 800efe8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800efec:	68bb      	ldr	r3, [r7, #8]
 800efee:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800eff2:	2181      	movs	r1, #129	; 0x81
 800eff4:	6878      	ldr	r0, [r7, #4]
 800eff6:	f001 fe46 	bl	8010c86 <USBD_LL_Transmit>

    ret = USBD_OK;
 800effa:	2300      	movs	r3, #0
 800effc:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800effe:	7bfb      	ldrb	r3, [r7, #15]
}
 800f000:	4618      	mov	r0, r3
 800f002:	3710      	adds	r7, #16
 800f004:	46bd      	mov	sp, r7
 800f006:	bd80      	pop	{r7, pc}

0800f008 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800f008:	b580      	push	{r7, lr}
 800f00a:	b084      	sub	sp, #16
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f016:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d101      	bne.n	800f026 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800f022:	2303      	movs	r3, #3
 800f024:	e016      	b.n	800f054 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	7c1b      	ldrb	r3, [r3, #16]
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d109      	bne.n	800f042 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f034:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f038:	2101      	movs	r1, #1
 800f03a:	6878      	ldr	r0, [r7, #4]
 800f03c:	f001 fe44 	bl	8010cc8 <USBD_LL_PrepareReceive>
 800f040:	e007      	b.n	800f052 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f048:	2340      	movs	r3, #64	; 0x40
 800f04a:	2101      	movs	r1, #1
 800f04c:	6878      	ldr	r0, [r7, #4]
 800f04e:	f001 fe3b 	bl	8010cc8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f052:	2300      	movs	r3, #0
}
 800f054:	4618      	mov	r0, r3
 800f056:	3710      	adds	r7, #16
 800f058:	46bd      	mov	sp, r7
 800f05a:	bd80      	pop	{r7, pc}

0800f05c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800f05c:	b580      	push	{r7, lr}
 800f05e:	b086      	sub	sp, #24
 800f060:	af00      	add	r7, sp, #0
 800f062:	60f8      	str	r0, [r7, #12]
 800f064:	60b9      	str	r1, [r7, #8]
 800f066:	4613      	mov	r3, r2
 800f068:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d101      	bne.n	800f074 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800f070:	2303      	movs	r3, #3
 800f072:	e025      	b.n	800f0c0 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d003      	beq.n	800f086 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	2200      	movs	r2, #0
 800f082:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d003      	beq.n	800f098 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	2200      	movs	r2, #0
 800f094:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800f098:	68bb      	ldr	r3, [r7, #8]
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d003      	beq.n	800f0a6 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	68ba      	ldr	r2, [r7, #8]
 800f0a2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	2201      	movs	r2, #1
 800f0aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	79fa      	ldrb	r2, [r7, #7]
 800f0b2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800f0b4:	68f8      	ldr	r0, [r7, #12]
 800f0b6:	f001 fcad 	bl	8010a14 <USBD_LL_Init>
 800f0ba:	4603      	mov	r3, r0
 800f0bc:	75fb      	strb	r3, [r7, #23]

  return ret;
 800f0be:	7dfb      	ldrb	r3, [r7, #23]
}
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	3718      	adds	r7, #24
 800f0c4:	46bd      	mov	sp, r7
 800f0c6:	bd80      	pop	{r7, pc}

0800f0c8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800f0c8:	b580      	push	{r7, lr}
 800f0ca:	b084      	sub	sp, #16
 800f0cc:	af00      	add	r7, sp, #0
 800f0ce:	6078      	str	r0, [r7, #4]
 800f0d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800f0d6:	683b      	ldr	r3, [r7, #0]
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d101      	bne.n	800f0e0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800f0dc:	2303      	movs	r3, #3
 800f0de:	e010      	b.n	800f102 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	683a      	ldr	r2, [r7, #0]
 800f0e4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f0ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f0f0:	f107 020e 	add.w	r2, r7, #14
 800f0f4:	4610      	mov	r0, r2
 800f0f6:	4798      	blx	r3
 800f0f8:	4602      	mov	r2, r0
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800f100:	2300      	movs	r3, #0
}
 800f102:	4618      	mov	r0, r3
 800f104:	3710      	adds	r7, #16
 800f106:	46bd      	mov	sp, r7
 800f108:	bd80      	pop	{r7, pc}

0800f10a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800f10a:	b580      	push	{r7, lr}
 800f10c:	b082      	sub	sp, #8
 800f10e:	af00      	add	r7, sp, #0
 800f110:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800f112:	6878      	ldr	r0, [r7, #4]
 800f114:	f001 fcce 	bl	8010ab4 <USBD_LL_Start>
 800f118:	4603      	mov	r3, r0
}
 800f11a:	4618      	mov	r0, r3
 800f11c:	3708      	adds	r7, #8
 800f11e:	46bd      	mov	sp, r7
 800f120:	bd80      	pop	{r7, pc}

0800f122 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800f122:	b480      	push	{r7}
 800f124:	b083      	sub	sp, #12
 800f126:	af00      	add	r7, sp, #0
 800f128:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f12a:	2300      	movs	r3, #0
}
 800f12c:	4618      	mov	r0, r3
 800f12e:	370c      	adds	r7, #12
 800f130:	46bd      	mov	sp, r7
 800f132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f136:	4770      	bx	lr

0800f138 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f138:	b580      	push	{r7, lr}
 800f13a:	b084      	sub	sp, #16
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	6078      	str	r0, [r7, #4]
 800f140:	460b      	mov	r3, r1
 800f142:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800f144:	2303      	movs	r3, #3
 800f146:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d009      	beq.n	800f166 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	78fa      	ldrb	r2, [r7, #3]
 800f15c:	4611      	mov	r1, r2
 800f15e:	6878      	ldr	r0, [r7, #4]
 800f160:	4798      	blx	r3
 800f162:	4603      	mov	r3, r0
 800f164:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800f166:	7bfb      	ldrb	r3, [r7, #15]
}
 800f168:	4618      	mov	r0, r3
 800f16a:	3710      	adds	r7, #16
 800f16c:	46bd      	mov	sp, r7
 800f16e:	bd80      	pop	{r7, pc}

0800f170 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f170:	b580      	push	{r7, lr}
 800f172:	b082      	sub	sp, #8
 800f174:	af00      	add	r7, sp, #0
 800f176:	6078      	str	r0, [r7, #4]
 800f178:	460b      	mov	r3, r1
 800f17a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f182:	2b00      	cmp	r3, #0
 800f184:	d007      	beq.n	800f196 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f18c:	685b      	ldr	r3, [r3, #4]
 800f18e:	78fa      	ldrb	r2, [r7, #3]
 800f190:	4611      	mov	r1, r2
 800f192:	6878      	ldr	r0, [r7, #4]
 800f194:	4798      	blx	r3
  }

  return USBD_OK;
 800f196:	2300      	movs	r3, #0
}
 800f198:	4618      	mov	r0, r3
 800f19a:	3708      	adds	r7, #8
 800f19c:	46bd      	mov	sp, r7
 800f19e:	bd80      	pop	{r7, pc}

0800f1a0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f1a0:	b580      	push	{r7, lr}
 800f1a2:	b084      	sub	sp, #16
 800f1a4:	af00      	add	r7, sp, #0
 800f1a6:	6078      	str	r0, [r7, #4]
 800f1a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f1b0:	6839      	ldr	r1, [r7, #0]
 800f1b2:	4618      	mov	r0, r3
 800f1b4:	f000 ff4c 	bl	8010050 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	2201      	movs	r2, #1
 800f1bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800f1c6:	461a      	mov	r2, r3
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f1d4:	f003 031f 	and.w	r3, r3, #31
 800f1d8:	2b02      	cmp	r3, #2
 800f1da:	d01a      	beq.n	800f212 <USBD_LL_SetupStage+0x72>
 800f1dc:	2b02      	cmp	r3, #2
 800f1de:	d822      	bhi.n	800f226 <USBD_LL_SetupStage+0x86>
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d002      	beq.n	800f1ea <USBD_LL_SetupStage+0x4a>
 800f1e4:	2b01      	cmp	r3, #1
 800f1e6:	d00a      	beq.n	800f1fe <USBD_LL_SetupStage+0x5e>
 800f1e8:	e01d      	b.n	800f226 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f1f0:	4619      	mov	r1, r3
 800f1f2:	6878      	ldr	r0, [r7, #4]
 800f1f4:	f000 fa20 	bl	800f638 <USBD_StdDevReq>
 800f1f8:	4603      	mov	r3, r0
 800f1fa:	73fb      	strb	r3, [r7, #15]
      break;
 800f1fc:	e020      	b.n	800f240 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f204:	4619      	mov	r1, r3
 800f206:	6878      	ldr	r0, [r7, #4]
 800f208:	f000 fa84 	bl	800f714 <USBD_StdItfReq>
 800f20c:	4603      	mov	r3, r0
 800f20e:	73fb      	strb	r3, [r7, #15]
      break;
 800f210:	e016      	b.n	800f240 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f218:	4619      	mov	r1, r3
 800f21a:	6878      	ldr	r0, [r7, #4]
 800f21c:	f000 fac3 	bl	800f7a6 <USBD_StdEPReq>
 800f220:	4603      	mov	r3, r0
 800f222:	73fb      	strb	r3, [r7, #15]
      break;
 800f224:	e00c      	b.n	800f240 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f22c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f230:	b2db      	uxtb	r3, r3
 800f232:	4619      	mov	r1, r3
 800f234:	6878      	ldr	r0, [r7, #4]
 800f236:	f001 fc9d 	bl	8010b74 <USBD_LL_StallEP>
 800f23a:	4603      	mov	r3, r0
 800f23c:	73fb      	strb	r3, [r7, #15]
      break;
 800f23e:	bf00      	nop
  }

  return ret;
 800f240:	7bfb      	ldrb	r3, [r7, #15]
}
 800f242:	4618      	mov	r0, r3
 800f244:	3710      	adds	r7, #16
 800f246:	46bd      	mov	sp, r7
 800f248:	bd80      	pop	{r7, pc}

0800f24a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f24a:	b580      	push	{r7, lr}
 800f24c:	b086      	sub	sp, #24
 800f24e:	af00      	add	r7, sp, #0
 800f250:	60f8      	str	r0, [r7, #12]
 800f252:	460b      	mov	r3, r1
 800f254:	607a      	str	r2, [r7, #4]
 800f256:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f258:	7afb      	ldrb	r3, [r7, #11]
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d138      	bne.n	800f2d0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800f264:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f26c:	2b03      	cmp	r3, #3
 800f26e:	d14c      	bne.n	800f30a <USBD_LL_DataOutStage+0xc0>
    {
      if (pep->rem_length > pep->maxpacket)
 800f270:	693b      	ldr	r3, [r7, #16]
 800f272:	689a      	ldr	r2, [r3, #8]
 800f274:	693b      	ldr	r3, [r7, #16]
 800f276:	68db      	ldr	r3, [r3, #12]
 800f278:	429a      	cmp	r2, r3
 800f27a:	d913      	bls.n	800f2a4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f27c:	693b      	ldr	r3, [r7, #16]
 800f27e:	689a      	ldr	r2, [r3, #8]
 800f280:	693b      	ldr	r3, [r7, #16]
 800f282:	68db      	ldr	r3, [r3, #12]
 800f284:	1ad2      	subs	r2, r2, r3
 800f286:	693b      	ldr	r3, [r7, #16]
 800f288:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800f28a:	693b      	ldr	r3, [r7, #16]
 800f28c:	68da      	ldr	r2, [r3, #12]
 800f28e:	693b      	ldr	r3, [r7, #16]
 800f290:	689b      	ldr	r3, [r3, #8]
 800f292:	4293      	cmp	r3, r2
 800f294:	bf28      	it	cs
 800f296:	4613      	movcs	r3, r2
 800f298:	461a      	mov	r2, r3
 800f29a:	6879      	ldr	r1, [r7, #4]
 800f29c:	68f8      	ldr	r0, [r7, #12]
 800f29e:	f000 ffcb 	bl	8010238 <USBD_CtlContinueRx>
 800f2a2:	e032      	b.n	800f30a <USBD_LL_DataOutStage+0xc0>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f2aa:	691b      	ldr	r3, [r3, #16]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d00b      	beq.n	800f2c8 <USBD_LL_DataOutStage+0x7e>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f2b6:	b2db      	uxtb	r3, r3
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800f2b8:	2b03      	cmp	r3, #3
 800f2ba:	d105      	bne.n	800f2c8 <USBD_LL_DataOutStage+0x7e>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f2c2:	691b      	ldr	r3, [r3, #16]
 800f2c4:	68f8      	ldr	r0, [r7, #12]
 800f2c6:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800f2c8:	68f8      	ldr	r0, [r7, #12]
 800f2ca:	f000 ffc6 	bl	801025a <USBD_CtlSendStatus>
 800f2ce:	e01c      	b.n	800f30a <USBD_LL_DataOutStage+0xc0>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f2d6:	699b      	ldr	r3, [r3, #24]
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d014      	beq.n	800f306 <USBD_LL_DataOutStage+0xbc>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f2e2:	b2db      	uxtb	r3, r3
  else if ((pdev->pClass->DataOut != NULL) &&
 800f2e4:	2b03      	cmp	r3, #3
 800f2e6:	d10e      	bne.n	800f306 <USBD_LL_DataOutStage+0xbc>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f2ee:	699b      	ldr	r3, [r3, #24]
 800f2f0:	7afa      	ldrb	r2, [r7, #11]
 800f2f2:	4611      	mov	r1, r2
 800f2f4:	68f8      	ldr	r0, [r7, #12]
 800f2f6:	4798      	blx	r3
 800f2f8:	4603      	mov	r3, r0
 800f2fa:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800f2fc:	7dfb      	ldrb	r3, [r7, #23]
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d003      	beq.n	800f30a <USBD_LL_DataOutStage+0xc0>
    {
      return ret;
 800f302:	7dfb      	ldrb	r3, [r7, #23]
 800f304:	e002      	b.n	800f30c <USBD_LL_DataOutStage+0xc2>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800f306:	2303      	movs	r3, #3
 800f308:	e000      	b.n	800f30c <USBD_LL_DataOutStage+0xc2>
  }

  return USBD_OK;
 800f30a:	2300      	movs	r3, #0
}
 800f30c:	4618      	mov	r0, r3
 800f30e:	3718      	adds	r7, #24
 800f310:	46bd      	mov	sp, r7
 800f312:	bd80      	pop	{r7, pc}

0800f314 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f314:	b580      	push	{r7, lr}
 800f316:	b086      	sub	sp, #24
 800f318:	af00      	add	r7, sp, #0
 800f31a:	60f8      	str	r0, [r7, #12]
 800f31c:	460b      	mov	r3, r1
 800f31e:	607a      	str	r2, [r7, #4]
 800f320:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f322:	7afb      	ldrb	r3, [r7, #11]
 800f324:	2b00      	cmp	r3, #0
 800f326:	d16b      	bne.n	800f400 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	3314      	adds	r3, #20
 800f32c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f334:	2b02      	cmp	r3, #2
 800f336:	d156      	bne.n	800f3e6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800f338:	693b      	ldr	r3, [r7, #16]
 800f33a:	689a      	ldr	r2, [r3, #8]
 800f33c:	693b      	ldr	r3, [r7, #16]
 800f33e:	68db      	ldr	r3, [r3, #12]
 800f340:	429a      	cmp	r2, r3
 800f342:	d914      	bls.n	800f36e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f344:	693b      	ldr	r3, [r7, #16]
 800f346:	689a      	ldr	r2, [r3, #8]
 800f348:	693b      	ldr	r3, [r7, #16]
 800f34a:	68db      	ldr	r3, [r3, #12]
 800f34c:	1ad2      	subs	r2, r2, r3
 800f34e:	693b      	ldr	r3, [r7, #16]
 800f350:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800f352:	693b      	ldr	r3, [r7, #16]
 800f354:	689b      	ldr	r3, [r3, #8]
 800f356:	461a      	mov	r2, r3
 800f358:	6879      	ldr	r1, [r7, #4]
 800f35a:	68f8      	ldr	r0, [r7, #12]
 800f35c:	f000 ff3e 	bl	80101dc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f360:	2300      	movs	r3, #0
 800f362:	2200      	movs	r2, #0
 800f364:	2100      	movs	r1, #0
 800f366:	68f8      	ldr	r0, [r7, #12]
 800f368:	f001 fcae 	bl	8010cc8 <USBD_LL_PrepareReceive>
 800f36c:	e03b      	b.n	800f3e6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800f36e:	693b      	ldr	r3, [r7, #16]
 800f370:	68da      	ldr	r2, [r3, #12]
 800f372:	693b      	ldr	r3, [r7, #16]
 800f374:	689b      	ldr	r3, [r3, #8]
 800f376:	429a      	cmp	r2, r3
 800f378:	d11c      	bne.n	800f3b4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800f37a:	693b      	ldr	r3, [r7, #16]
 800f37c:	685a      	ldr	r2, [r3, #4]
 800f37e:	693b      	ldr	r3, [r7, #16]
 800f380:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800f382:	429a      	cmp	r2, r3
 800f384:	d316      	bcc.n	800f3b4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800f386:	693b      	ldr	r3, [r7, #16]
 800f388:	685a      	ldr	r2, [r3, #4]
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f390:	429a      	cmp	r2, r3
 800f392:	d20f      	bcs.n	800f3b4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f394:	2200      	movs	r2, #0
 800f396:	2100      	movs	r1, #0
 800f398:	68f8      	ldr	r0, [r7, #12]
 800f39a:	f000 ff1f 	bl	80101dc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	2200      	movs	r2, #0
 800f3a2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f3a6:	2300      	movs	r3, #0
 800f3a8:	2200      	movs	r2, #0
 800f3aa:	2100      	movs	r1, #0
 800f3ac:	68f8      	ldr	r0, [r7, #12]
 800f3ae:	f001 fc8b 	bl	8010cc8 <USBD_LL_PrepareReceive>
 800f3b2:	e018      	b.n	800f3e6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f3ba:	68db      	ldr	r3, [r3, #12]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d00b      	beq.n	800f3d8 <USBD_LL_DataInStage+0xc4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f3c6:	b2db      	uxtb	r3, r3
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800f3c8:	2b03      	cmp	r3, #3
 800f3ca:	d105      	bne.n	800f3d8 <USBD_LL_DataInStage+0xc4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f3d2:	68db      	ldr	r3, [r3, #12]
 800f3d4:	68f8      	ldr	r0, [r7, #12]
 800f3d6:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f3d8:	2180      	movs	r1, #128	; 0x80
 800f3da:	68f8      	ldr	r0, [r7, #12]
 800f3dc:	f001 fbca 	bl	8010b74 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800f3e0:	68f8      	ldr	r0, [r7, #12]
 800f3e2:	f000 ff4d 	bl	8010280 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800f3ec:	2b01      	cmp	r3, #1
 800f3ee:	d124      	bne.n	800f43a <USBD_LL_DataInStage+0x126>
    {
      (void)USBD_RunTestMode(pdev);
 800f3f0:	68f8      	ldr	r0, [r7, #12]
 800f3f2:	f7ff fe96 	bl	800f122 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	2200      	movs	r2, #0
 800f3fa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800f3fe:	e01c      	b.n	800f43a <USBD_LL_DataInStage+0x126>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f406:	695b      	ldr	r3, [r3, #20]
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d014      	beq.n	800f436 <USBD_LL_DataInStage+0x122>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f412:	b2db      	uxtb	r3, r3
  else if ((pdev->pClass->DataIn != NULL) &&
 800f414:	2b03      	cmp	r3, #3
 800f416:	d10e      	bne.n	800f436 <USBD_LL_DataInStage+0x122>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f41e:	695b      	ldr	r3, [r3, #20]
 800f420:	7afa      	ldrb	r2, [r7, #11]
 800f422:	4611      	mov	r1, r2
 800f424:	68f8      	ldr	r0, [r7, #12]
 800f426:	4798      	blx	r3
 800f428:	4603      	mov	r3, r0
 800f42a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800f42c:	7dfb      	ldrb	r3, [r7, #23]
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d003      	beq.n	800f43a <USBD_LL_DataInStage+0x126>
    {
      return ret;
 800f432:	7dfb      	ldrb	r3, [r7, #23]
 800f434:	e002      	b.n	800f43c <USBD_LL_DataInStage+0x128>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800f436:	2303      	movs	r3, #3
 800f438:	e000      	b.n	800f43c <USBD_LL_DataInStage+0x128>
  }

  return USBD_OK;
 800f43a:	2300      	movs	r3, #0
}
 800f43c:	4618      	mov	r0, r3
 800f43e:	3718      	adds	r7, #24
 800f440:	46bd      	mov	sp, r7
 800f442:	bd80      	pop	{r7, pc}

0800f444 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f444:	b580      	push	{r7, lr}
 800f446:	b082      	sub	sp, #8
 800f448:	af00      	add	r7, sp, #0
 800f44a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	2201      	movs	r2, #1
 800f450:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	2200      	movs	r2, #0
 800f458:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	2200      	movs	r2, #0
 800f460:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	2200      	movs	r2, #0
 800f466:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f470:	2b00      	cmp	r3, #0
 800f472:	d009      	beq.n	800f488 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f47a:	685b      	ldr	r3, [r3, #4]
 800f47c:	687a      	ldr	r2, [r7, #4]
 800f47e:	6852      	ldr	r2, [r2, #4]
 800f480:	b2d2      	uxtb	r2, r2
 800f482:	4611      	mov	r1, r2
 800f484:	6878      	ldr	r0, [r7, #4]
 800f486:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f488:	2340      	movs	r3, #64	; 0x40
 800f48a:	2200      	movs	r2, #0
 800f48c:	2100      	movs	r1, #0
 800f48e:	6878      	ldr	r0, [r7, #4]
 800f490:	f001 fb2b 	bl	8010aea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	2201      	movs	r2, #1
 800f498:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	2240      	movs	r2, #64	; 0x40
 800f4a0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f4a4:	2340      	movs	r3, #64	; 0x40
 800f4a6:	2200      	movs	r2, #0
 800f4a8:	2180      	movs	r1, #128	; 0x80
 800f4aa:	6878      	ldr	r0, [r7, #4]
 800f4ac:	f001 fb1d 	bl	8010aea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	2201      	movs	r2, #1
 800f4b4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	2240      	movs	r2, #64	; 0x40
 800f4ba:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800f4bc:	2300      	movs	r3, #0
}
 800f4be:	4618      	mov	r0, r3
 800f4c0:	3708      	adds	r7, #8
 800f4c2:	46bd      	mov	sp, r7
 800f4c4:	bd80      	pop	{r7, pc}

0800f4c6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f4c6:	b480      	push	{r7}
 800f4c8:	b083      	sub	sp, #12
 800f4ca:	af00      	add	r7, sp, #0
 800f4cc:	6078      	str	r0, [r7, #4]
 800f4ce:	460b      	mov	r3, r1
 800f4d0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	78fa      	ldrb	r2, [r7, #3]
 800f4d6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f4d8:	2300      	movs	r3, #0
}
 800f4da:	4618      	mov	r0, r3
 800f4dc:	370c      	adds	r7, #12
 800f4de:	46bd      	mov	sp, r7
 800f4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e4:	4770      	bx	lr

0800f4e6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800f4e6:	b480      	push	{r7}
 800f4e8:	b083      	sub	sp, #12
 800f4ea:	af00      	add	r7, sp, #0
 800f4ec:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f4f4:	b2da      	uxtb	r2, r3
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	2204      	movs	r2, #4
 800f500:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800f504:	2300      	movs	r3, #0
}
 800f506:	4618      	mov	r0, r3
 800f508:	370c      	adds	r7, #12
 800f50a:	46bd      	mov	sp, r7
 800f50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f510:	4770      	bx	lr

0800f512 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800f512:	b480      	push	{r7}
 800f514:	b083      	sub	sp, #12
 800f516:	af00      	add	r7, sp, #0
 800f518:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f520:	b2db      	uxtb	r3, r3
 800f522:	2b04      	cmp	r3, #4
 800f524:	d106      	bne.n	800f534 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800f52c:	b2da      	uxtb	r2, r3
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800f534:	2300      	movs	r3, #0
}
 800f536:	4618      	mov	r0, r3
 800f538:	370c      	adds	r7, #12
 800f53a:	46bd      	mov	sp, r7
 800f53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f540:	4770      	bx	lr

0800f542 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f542:	b580      	push	{r7, lr}
 800f544:	b082      	sub	sp, #8
 800f546:	af00      	add	r7, sp, #0
 800f548:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f550:	b2db      	uxtb	r3, r3
 800f552:	2b03      	cmp	r3, #3
 800f554:	d10b      	bne.n	800f56e <USBD_LL_SOF+0x2c>
  {
    if (pdev->pClass->SOF != NULL)
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f55c:	69db      	ldr	r3, [r3, #28]
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d005      	beq.n	800f56e <USBD_LL_SOF+0x2c>
    {
      pdev->pClass->SOF(pdev);
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f568:	69db      	ldr	r3, [r3, #28]
 800f56a:	6878      	ldr	r0, [r7, #4]
 800f56c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f56e:	2300      	movs	r3, #0
}
 800f570:	4618      	mov	r0, r3
 800f572:	3708      	adds	r7, #8
 800f574:	46bd      	mov	sp, r7
 800f576:	bd80      	pop	{r7, pc}

0800f578 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800f578:	b480      	push	{r7}
 800f57a:	b083      	sub	sp, #12
 800f57c:	af00      	add	r7, sp, #0
 800f57e:	6078      	str	r0, [r7, #4]
 800f580:	460b      	mov	r3, r1
 800f582:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800f584:	2300      	movs	r3, #0
}
 800f586:	4618      	mov	r0, r3
 800f588:	370c      	adds	r7, #12
 800f58a:	46bd      	mov	sp, r7
 800f58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f590:	4770      	bx	lr

0800f592 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800f592:	b480      	push	{r7}
 800f594:	b083      	sub	sp, #12
 800f596:	af00      	add	r7, sp, #0
 800f598:	6078      	str	r0, [r7, #4]
 800f59a:	460b      	mov	r3, r1
 800f59c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800f59e:	2300      	movs	r3, #0
}
 800f5a0:	4618      	mov	r0, r3
 800f5a2:	370c      	adds	r7, #12
 800f5a4:	46bd      	mov	sp, r7
 800f5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5aa:	4770      	bx	lr

0800f5ac <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800f5ac:	b480      	push	{r7}
 800f5ae:	b083      	sub	sp, #12
 800f5b0:	af00      	add	r7, sp, #0
 800f5b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f5b4:	2300      	movs	r3, #0
}
 800f5b6:	4618      	mov	r0, r3
 800f5b8:	370c      	adds	r7, #12
 800f5ba:	46bd      	mov	sp, r7
 800f5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c0:	4770      	bx	lr

0800f5c2 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800f5c2:	b580      	push	{r7, lr}
 800f5c4:	b082      	sub	sp, #8
 800f5c6:	af00      	add	r7, sp, #0
 800f5c8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	2201      	movs	r2, #1
 800f5ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d009      	beq.n	800f5f0 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f5e2:	685b      	ldr	r3, [r3, #4]
 800f5e4:	687a      	ldr	r2, [r7, #4]
 800f5e6:	6852      	ldr	r2, [r2, #4]
 800f5e8:	b2d2      	uxtb	r2, r2
 800f5ea:	4611      	mov	r1, r2
 800f5ec:	6878      	ldr	r0, [r7, #4]
 800f5ee:	4798      	blx	r3
  }

  return USBD_OK;
 800f5f0:	2300      	movs	r3, #0
}
 800f5f2:	4618      	mov	r0, r3
 800f5f4:	3708      	adds	r7, #8
 800f5f6:	46bd      	mov	sp, r7
 800f5f8:	bd80      	pop	{r7, pc}

0800f5fa <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f5fa:	b480      	push	{r7}
 800f5fc:	b087      	sub	sp, #28
 800f5fe:	af00      	add	r7, sp, #0
 800f600:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f606:	697b      	ldr	r3, [r7, #20]
 800f608:	781b      	ldrb	r3, [r3, #0]
 800f60a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f60c:	697b      	ldr	r3, [r7, #20]
 800f60e:	3301      	adds	r3, #1
 800f610:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f612:	697b      	ldr	r3, [r7, #20]
 800f614:	781b      	ldrb	r3, [r3, #0]
 800f616:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f618:	8a3b      	ldrh	r3, [r7, #16]
 800f61a:	021b      	lsls	r3, r3, #8
 800f61c:	b21a      	sxth	r2, r3
 800f61e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f622:	4313      	orrs	r3, r2
 800f624:	b21b      	sxth	r3, r3
 800f626:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f628:	89fb      	ldrh	r3, [r7, #14]
}
 800f62a:	4618      	mov	r0, r3
 800f62c:	371c      	adds	r7, #28
 800f62e:	46bd      	mov	sp, r7
 800f630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f634:	4770      	bx	lr
	...

0800f638 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f638:	b580      	push	{r7, lr}
 800f63a:	b084      	sub	sp, #16
 800f63c:	af00      	add	r7, sp, #0
 800f63e:	6078      	str	r0, [r7, #4]
 800f640:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f642:	2300      	movs	r3, #0
 800f644:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f646:	683b      	ldr	r3, [r7, #0]
 800f648:	781b      	ldrb	r3, [r3, #0]
 800f64a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f64e:	2b40      	cmp	r3, #64	; 0x40
 800f650:	d005      	beq.n	800f65e <USBD_StdDevReq+0x26>
 800f652:	2b40      	cmp	r3, #64	; 0x40
 800f654:	d853      	bhi.n	800f6fe <USBD_StdDevReq+0xc6>
 800f656:	2b00      	cmp	r3, #0
 800f658:	d00b      	beq.n	800f672 <USBD_StdDevReq+0x3a>
 800f65a:	2b20      	cmp	r3, #32
 800f65c:	d14f      	bne.n	800f6fe <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f664:	689b      	ldr	r3, [r3, #8]
 800f666:	6839      	ldr	r1, [r7, #0]
 800f668:	6878      	ldr	r0, [r7, #4]
 800f66a:	4798      	blx	r3
 800f66c:	4603      	mov	r3, r0
 800f66e:	73fb      	strb	r3, [r7, #15]
    break;
 800f670:	e04a      	b.n	800f708 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800f672:	683b      	ldr	r3, [r7, #0]
 800f674:	785b      	ldrb	r3, [r3, #1]
 800f676:	2b09      	cmp	r3, #9
 800f678:	d83b      	bhi.n	800f6f2 <USBD_StdDevReq+0xba>
 800f67a:	a201      	add	r2, pc, #4	; (adr r2, 800f680 <USBD_StdDevReq+0x48>)
 800f67c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f680:	0800f6d5 	.word	0x0800f6d5
 800f684:	0800f6e9 	.word	0x0800f6e9
 800f688:	0800f6f3 	.word	0x0800f6f3
 800f68c:	0800f6df 	.word	0x0800f6df
 800f690:	0800f6f3 	.word	0x0800f6f3
 800f694:	0800f6b3 	.word	0x0800f6b3
 800f698:	0800f6a9 	.word	0x0800f6a9
 800f69c:	0800f6f3 	.word	0x0800f6f3
 800f6a0:	0800f6cb 	.word	0x0800f6cb
 800f6a4:	0800f6bd 	.word	0x0800f6bd
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800f6a8:	6839      	ldr	r1, [r7, #0]
 800f6aa:	6878      	ldr	r0, [r7, #4]
 800f6ac:	f000 f9dc 	bl	800fa68 <USBD_GetDescriptor>
      break;
 800f6b0:	e024      	b.n	800f6fc <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800f6b2:	6839      	ldr	r1, [r7, #0]
 800f6b4:	6878      	ldr	r0, [r7, #4]
 800f6b6:	f000 fb41 	bl	800fd3c <USBD_SetAddress>
      break;
 800f6ba:	e01f      	b.n	800f6fc <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800f6bc:	6839      	ldr	r1, [r7, #0]
 800f6be:	6878      	ldr	r0, [r7, #4]
 800f6c0:	f000 fb80 	bl	800fdc4 <USBD_SetConfig>
 800f6c4:	4603      	mov	r3, r0
 800f6c6:	73fb      	strb	r3, [r7, #15]
      break;
 800f6c8:	e018      	b.n	800f6fc <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800f6ca:	6839      	ldr	r1, [r7, #0]
 800f6cc:	6878      	ldr	r0, [r7, #4]
 800f6ce:	f000 fc1f 	bl	800ff10 <USBD_GetConfig>
      break;
 800f6d2:	e013      	b.n	800f6fc <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800f6d4:	6839      	ldr	r1, [r7, #0]
 800f6d6:	6878      	ldr	r0, [r7, #4]
 800f6d8:	f000 fc50 	bl	800ff7c <USBD_GetStatus>
      break;
 800f6dc:	e00e      	b.n	800f6fc <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800f6de:	6839      	ldr	r1, [r7, #0]
 800f6e0:	6878      	ldr	r0, [r7, #4]
 800f6e2:	f000 fc7f 	bl	800ffe4 <USBD_SetFeature>
      break;
 800f6e6:	e009      	b.n	800f6fc <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800f6e8:	6839      	ldr	r1, [r7, #0]
 800f6ea:	6878      	ldr	r0, [r7, #4]
 800f6ec:	f000 fc8e 	bl	801000c <USBD_ClrFeature>
      break;
 800f6f0:	e004      	b.n	800f6fc <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800f6f2:	6839      	ldr	r1, [r7, #0]
 800f6f4:	6878      	ldr	r0, [r7, #4]
 800f6f6:	f000 fce5 	bl	80100c4 <USBD_CtlError>
      break;
 800f6fa:	bf00      	nop
    }
    break;
 800f6fc:	e004      	b.n	800f708 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800f6fe:	6839      	ldr	r1, [r7, #0]
 800f700:	6878      	ldr	r0, [r7, #4]
 800f702:	f000 fcdf 	bl	80100c4 <USBD_CtlError>
    break;
 800f706:	bf00      	nop
  }

  return ret;
 800f708:	7bfb      	ldrb	r3, [r7, #15]
}
 800f70a:	4618      	mov	r0, r3
 800f70c:	3710      	adds	r7, #16
 800f70e:	46bd      	mov	sp, r7
 800f710:	bd80      	pop	{r7, pc}
 800f712:	bf00      	nop

0800f714 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f714:	b580      	push	{r7, lr}
 800f716:	b084      	sub	sp, #16
 800f718:	af00      	add	r7, sp, #0
 800f71a:	6078      	str	r0, [r7, #4]
 800f71c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f71e:	2300      	movs	r3, #0
 800f720:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f722:	683b      	ldr	r3, [r7, #0]
 800f724:	781b      	ldrb	r3, [r3, #0]
 800f726:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f72a:	2b40      	cmp	r3, #64	; 0x40
 800f72c:	d005      	beq.n	800f73a <USBD_StdItfReq+0x26>
 800f72e:	2b40      	cmp	r3, #64	; 0x40
 800f730:	d82f      	bhi.n	800f792 <USBD_StdItfReq+0x7e>
 800f732:	2b00      	cmp	r3, #0
 800f734:	d001      	beq.n	800f73a <USBD_StdItfReq+0x26>
 800f736:	2b20      	cmp	r3, #32
 800f738:	d12b      	bne.n	800f792 <USBD_StdItfReq+0x7e>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f740:	b2db      	uxtb	r3, r3
 800f742:	3b01      	subs	r3, #1
 800f744:	2b02      	cmp	r3, #2
 800f746:	d81d      	bhi.n	800f784 <USBD_StdItfReq+0x70>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f748:	683b      	ldr	r3, [r7, #0]
 800f74a:	889b      	ldrh	r3, [r3, #4]
 800f74c:	b2db      	uxtb	r3, r3
 800f74e:	2b01      	cmp	r3, #1
 800f750:	d813      	bhi.n	800f77a <USBD_StdItfReq+0x66>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f758:	689b      	ldr	r3, [r3, #8]
 800f75a:	6839      	ldr	r1, [r7, #0]
 800f75c:	6878      	ldr	r0, [r7, #4]
 800f75e:	4798      	blx	r3
 800f760:	4603      	mov	r3, r0
 800f762:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800f764:	683b      	ldr	r3, [r7, #0]
 800f766:	88db      	ldrh	r3, [r3, #6]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d110      	bne.n	800f78e <USBD_StdItfReq+0x7a>
 800f76c:	7bfb      	ldrb	r3, [r7, #15]
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d10d      	bne.n	800f78e <USBD_StdItfReq+0x7a>
        {
          (void)USBD_CtlSendStatus(pdev);
 800f772:	6878      	ldr	r0, [r7, #4]
 800f774:	f000 fd71 	bl	801025a <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800f778:	e009      	b.n	800f78e <USBD_StdItfReq+0x7a>
        USBD_CtlError(pdev, req);
 800f77a:	6839      	ldr	r1, [r7, #0]
 800f77c:	6878      	ldr	r0, [r7, #4]
 800f77e:	f000 fca1 	bl	80100c4 <USBD_CtlError>
      break;
 800f782:	e004      	b.n	800f78e <USBD_StdItfReq+0x7a>

    default:
      USBD_CtlError(pdev, req);
 800f784:	6839      	ldr	r1, [r7, #0]
 800f786:	6878      	ldr	r0, [r7, #4]
 800f788:	f000 fc9c 	bl	80100c4 <USBD_CtlError>
      break;
 800f78c:	e000      	b.n	800f790 <USBD_StdItfReq+0x7c>
      break;
 800f78e:	bf00      	nop
    }
    break;
 800f790:	e004      	b.n	800f79c <USBD_StdItfReq+0x88>

  default:
    USBD_CtlError(pdev, req);
 800f792:	6839      	ldr	r1, [r7, #0]
 800f794:	6878      	ldr	r0, [r7, #4]
 800f796:	f000 fc95 	bl	80100c4 <USBD_CtlError>
    break;
 800f79a:	bf00      	nop
  }

  return ret;
 800f79c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f79e:	4618      	mov	r0, r3
 800f7a0:	3710      	adds	r7, #16
 800f7a2:	46bd      	mov	sp, r7
 800f7a4:	bd80      	pop	{r7, pc}

0800f7a6 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f7a6:	b580      	push	{r7, lr}
 800f7a8:	b084      	sub	sp, #16
 800f7aa:	af00      	add	r7, sp, #0
 800f7ac:	6078      	str	r0, [r7, #4]
 800f7ae:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800f7b0:	2300      	movs	r3, #0
 800f7b2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800f7b4:	683b      	ldr	r3, [r7, #0]
 800f7b6:	889b      	ldrh	r3, [r3, #4]
 800f7b8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f7ba:	683b      	ldr	r3, [r7, #0]
 800f7bc:	781b      	ldrb	r3, [r3, #0]
 800f7be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f7c2:	2b40      	cmp	r3, #64	; 0x40
 800f7c4:	d007      	beq.n	800f7d6 <USBD_StdEPReq+0x30>
 800f7c6:	2b40      	cmp	r3, #64	; 0x40
 800f7c8:	f200 8143 	bhi.w	800fa52 <USBD_StdEPReq+0x2ac>
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d00c      	beq.n	800f7ea <USBD_StdEPReq+0x44>
 800f7d0:	2b20      	cmp	r3, #32
 800f7d2:	f040 813e 	bne.w	800fa52 <USBD_StdEPReq+0x2ac>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f7dc:	689b      	ldr	r3, [r3, #8]
 800f7de:	6839      	ldr	r1, [r7, #0]
 800f7e0:	6878      	ldr	r0, [r7, #4]
 800f7e2:	4798      	blx	r3
 800f7e4:	4603      	mov	r3, r0
 800f7e6:	73fb      	strb	r3, [r7, #15]
    break;
 800f7e8:	e138      	b.n	800fa5c <USBD_StdEPReq+0x2b6>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800f7ea:	683b      	ldr	r3, [r7, #0]
 800f7ec:	785b      	ldrb	r3, [r3, #1]
 800f7ee:	2b03      	cmp	r3, #3
 800f7f0:	d007      	beq.n	800f802 <USBD_StdEPReq+0x5c>
 800f7f2:	2b03      	cmp	r3, #3
 800f7f4:	f300 8127 	bgt.w	800fa46 <USBD_StdEPReq+0x2a0>
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d07d      	beq.n	800f8f8 <USBD_StdEPReq+0x152>
 800f7fc:	2b01      	cmp	r3, #1
 800f7fe:	d03c      	beq.n	800f87a <USBD_StdEPReq+0xd4>
 800f800:	e121      	b.n	800fa46 <USBD_StdEPReq+0x2a0>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f808:	b2db      	uxtb	r3, r3
 800f80a:	2b02      	cmp	r3, #2
 800f80c:	d002      	beq.n	800f814 <USBD_StdEPReq+0x6e>
 800f80e:	2b03      	cmp	r3, #3
 800f810:	d016      	beq.n	800f840 <USBD_StdEPReq+0x9a>
 800f812:	e02c      	b.n	800f86e <USBD_StdEPReq+0xc8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f814:	7bbb      	ldrb	r3, [r7, #14]
 800f816:	2b00      	cmp	r3, #0
 800f818:	d00d      	beq.n	800f836 <USBD_StdEPReq+0x90>
 800f81a:	7bbb      	ldrb	r3, [r7, #14]
 800f81c:	2b80      	cmp	r3, #128	; 0x80
 800f81e:	d00a      	beq.n	800f836 <USBD_StdEPReq+0x90>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800f820:	7bbb      	ldrb	r3, [r7, #14]
 800f822:	4619      	mov	r1, r3
 800f824:	6878      	ldr	r0, [r7, #4]
 800f826:	f001 f9a5 	bl	8010b74 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f82a:	2180      	movs	r1, #128	; 0x80
 800f82c:	6878      	ldr	r0, [r7, #4]
 800f82e:	f001 f9a1 	bl	8010b74 <USBD_LL_StallEP>
 800f832:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800f834:	e020      	b.n	800f878 <USBD_StdEPReq+0xd2>
          USBD_CtlError(pdev, req);
 800f836:	6839      	ldr	r1, [r7, #0]
 800f838:	6878      	ldr	r0, [r7, #4]
 800f83a:	f000 fc43 	bl	80100c4 <USBD_CtlError>
        break;
 800f83e:	e01b      	b.n	800f878 <USBD_StdEPReq+0xd2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800f840:	683b      	ldr	r3, [r7, #0]
 800f842:	885b      	ldrh	r3, [r3, #2]
 800f844:	2b00      	cmp	r3, #0
 800f846:	d10e      	bne.n	800f866 <USBD_StdEPReq+0xc0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f848:	7bbb      	ldrb	r3, [r7, #14]
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d00b      	beq.n	800f866 <USBD_StdEPReq+0xc0>
 800f84e:	7bbb      	ldrb	r3, [r7, #14]
 800f850:	2b80      	cmp	r3, #128	; 0x80
 800f852:	d008      	beq.n	800f866 <USBD_StdEPReq+0xc0>
 800f854:	683b      	ldr	r3, [r7, #0]
 800f856:	88db      	ldrh	r3, [r3, #6]
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d104      	bne.n	800f866 <USBD_StdEPReq+0xc0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800f85c:	7bbb      	ldrb	r3, [r7, #14]
 800f85e:	4619      	mov	r1, r3
 800f860:	6878      	ldr	r0, [r7, #4]
 800f862:	f001 f987 	bl	8010b74 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800f866:	6878      	ldr	r0, [r7, #4]
 800f868:	f000 fcf7 	bl	801025a <USBD_CtlSendStatus>

        break;
 800f86c:	e004      	b.n	800f878 <USBD_StdEPReq+0xd2>

      default:
        USBD_CtlError(pdev, req);
 800f86e:	6839      	ldr	r1, [r7, #0]
 800f870:	6878      	ldr	r0, [r7, #4]
 800f872:	f000 fc27 	bl	80100c4 <USBD_CtlError>
        break;
 800f876:	bf00      	nop
      }
      break;
 800f878:	e0ea      	b.n	800fa50 <USBD_StdEPReq+0x2aa>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f880:	b2db      	uxtb	r3, r3
 800f882:	2b02      	cmp	r3, #2
 800f884:	d002      	beq.n	800f88c <USBD_StdEPReq+0xe6>
 800f886:	2b03      	cmp	r3, #3
 800f888:	d016      	beq.n	800f8b8 <USBD_StdEPReq+0x112>
 800f88a:	e02e      	b.n	800f8ea <USBD_StdEPReq+0x144>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f88c:	7bbb      	ldrb	r3, [r7, #14]
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d00d      	beq.n	800f8ae <USBD_StdEPReq+0x108>
 800f892:	7bbb      	ldrb	r3, [r7, #14]
 800f894:	2b80      	cmp	r3, #128	; 0x80
 800f896:	d00a      	beq.n	800f8ae <USBD_StdEPReq+0x108>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800f898:	7bbb      	ldrb	r3, [r7, #14]
 800f89a:	4619      	mov	r1, r3
 800f89c:	6878      	ldr	r0, [r7, #4]
 800f89e:	f001 f969 	bl	8010b74 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f8a2:	2180      	movs	r1, #128	; 0x80
 800f8a4:	6878      	ldr	r0, [r7, #4]
 800f8a6:	f001 f965 	bl	8010b74 <USBD_LL_StallEP>
 800f8aa:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800f8ac:	e023      	b.n	800f8f6 <USBD_StdEPReq+0x150>
          USBD_CtlError(pdev, req);
 800f8ae:	6839      	ldr	r1, [r7, #0]
 800f8b0:	6878      	ldr	r0, [r7, #4]
 800f8b2:	f000 fc07 	bl	80100c4 <USBD_CtlError>
        break;
 800f8b6:	e01e      	b.n	800f8f6 <USBD_StdEPReq+0x150>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800f8b8:	683b      	ldr	r3, [r7, #0]
 800f8ba:	885b      	ldrh	r3, [r3, #2]
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d119      	bne.n	800f8f4 <USBD_StdEPReq+0x14e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800f8c0:	7bbb      	ldrb	r3, [r7, #14]
 800f8c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d004      	beq.n	800f8d4 <USBD_StdEPReq+0x12e>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f8ca:	7bbb      	ldrb	r3, [r7, #14]
 800f8cc:	4619      	mov	r1, r3
 800f8ce:	6878      	ldr	r0, [r7, #4]
 800f8d0:	f001 f96f 	bl	8010bb2 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800f8d4:	6878      	ldr	r0, [r7, #4]
 800f8d6:	f000 fcc0 	bl	801025a <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f8e0:	689b      	ldr	r3, [r3, #8]
 800f8e2:	6839      	ldr	r1, [r7, #0]
 800f8e4:	6878      	ldr	r0, [r7, #4]
 800f8e6:	4798      	blx	r3
        }
        break;
 800f8e8:	e004      	b.n	800f8f4 <USBD_StdEPReq+0x14e>

      default:
        USBD_CtlError(pdev, req);
 800f8ea:	6839      	ldr	r1, [r7, #0]
 800f8ec:	6878      	ldr	r0, [r7, #4]
 800f8ee:	f000 fbe9 	bl	80100c4 <USBD_CtlError>
        break;
 800f8f2:	e000      	b.n	800f8f6 <USBD_StdEPReq+0x150>
        break;
 800f8f4:	bf00      	nop
      }
      break;
 800f8f6:	e0ab      	b.n	800fa50 <USBD_StdEPReq+0x2aa>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f8fe:	b2db      	uxtb	r3, r3
 800f900:	2b02      	cmp	r3, #2
 800f902:	d002      	beq.n	800f90a <USBD_StdEPReq+0x164>
 800f904:	2b03      	cmp	r3, #3
 800f906:	d032      	beq.n	800f96e <USBD_StdEPReq+0x1c8>
 800f908:	e097      	b.n	800fa3a <USBD_StdEPReq+0x294>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f90a:	7bbb      	ldrb	r3, [r7, #14]
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d007      	beq.n	800f920 <USBD_StdEPReq+0x17a>
 800f910:	7bbb      	ldrb	r3, [r7, #14]
 800f912:	2b80      	cmp	r3, #128	; 0x80
 800f914:	d004      	beq.n	800f920 <USBD_StdEPReq+0x17a>
        {
          USBD_CtlError(pdev, req);
 800f916:	6839      	ldr	r1, [r7, #0]
 800f918:	6878      	ldr	r0, [r7, #4]
 800f91a:	f000 fbd3 	bl	80100c4 <USBD_CtlError>
          break;
 800f91e:	e091      	b.n	800fa44 <USBD_StdEPReq+0x29e>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f920:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f924:	2b00      	cmp	r3, #0
 800f926:	da0b      	bge.n	800f940 <USBD_StdEPReq+0x19a>
 800f928:	7bbb      	ldrb	r3, [r7, #14]
 800f92a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f92e:	4613      	mov	r3, r2
 800f930:	009b      	lsls	r3, r3, #2
 800f932:	4413      	add	r3, r2
 800f934:	009b      	lsls	r3, r3, #2
 800f936:	3310      	adds	r3, #16
 800f938:	687a      	ldr	r2, [r7, #4]
 800f93a:	4413      	add	r3, r2
 800f93c:	3304      	adds	r3, #4
 800f93e:	e00b      	b.n	800f958 <USBD_StdEPReq+0x1b2>
              &pdev->ep_out[ep_addr & 0x7FU];
 800f940:	7bbb      	ldrb	r3, [r7, #14]
 800f942:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f946:	4613      	mov	r3, r2
 800f948:	009b      	lsls	r3, r3, #2
 800f94a:	4413      	add	r3, r2
 800f94c:	009b      	lsls	r3, r3, #2
 800f94e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f952:	687a      	ldr	r2, [r7, #4]
 800f954:	4413      	add	r3, r2
 800f956:	3304      	adds	r3, #4
 800f958:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800f95a:	68bb      	ldr	r3, [r7, #8]
 800f95c:	2200      	movs	r2, #0
 800f95e:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f960:	68bb      	ldr	r3, [r7, #8]
 800f962:	2202      	movs	r2, #2
 800f964:	4619      	mov	r1, r3
 800f966:	6878      	ldr	r0, [r7, #4]
 800f968:	f000 fc1d 	bl	80101a6 <USBD_CtlSendData>
        break;
 800f96c:	e06a      	b.n	800fa44 <USBD_StdEPReq+0x29e>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800f96e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f972:	2b00      	cmp	r3, #0
 800f974:	da11      	bge.n	800f99a <USBD_StdEPReq+0x1f4>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f976:	7bbb      	ldrb	r3, [r7, #14]
 800f978:	f003 020f 	and.w	r2, r3, #15
 800f97c:	6879      	ldr	r1, [r7, #4]
 800f97e:	4613      	mov	r3, r2
 800f980:	009b      	lsls	r3, r3, #2
 800f982:	4413      	add	r3, r2
 800f984:	009b      	lsls	r3, r3, #2
 800f986:	440b      	add	r3, r1
 800f988:	3324      	adds	r3, #36	; 0x24
 800f98a:	881b      	ldrh	r3, [r3, #0]
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d117      	bne.n	800f9c0 <USBD_StdEPReq+0x21a>
          {
            USBD_CtlError(pdev, req);
 800f990:	6839      	ldr	r1, [r7, #0]
 800f992:	6878      	ldr	r0, [r7, #4]
 800f994:	f000 fb96 	bl	80100c4 <USBD_CtlError>
            break;
 800f998:	e054      	b.n	800fa44 <USBD_StdEPReq+0x29e>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f99a:	7bbb      	ldrb	r3, [r7, #14]
 800f99c:	f003 020f 	and.w	r2, r3, #15
 800f9a0:	6879      	ldr	r1, [r7, #4]
 800f9a2:	4613      	mov	r3, r2
 800f9a4:	009b      	lsls	r3, r3, #2
 800f9a6:	4413      	add	r3, r2
 800f9a8:	009b      	lsls	r3, r3, #2
 800f9aa:	440b      	add	r3, r1
 800f9ac:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800f9b0:	881b      	ldrh	r3, [r3, #0]
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d104      	bne.n	800f9c0 <USBD_StdEPReq+0x21a>
          {
            USBD_CtlError(pdev, req);
 800f9b6:	6839      	ldr	r1, [r7, #0]
 800f9b8:	6878      	ldr	r0, [r7, #4]
 800f9ba:	f000 fb83 	bl	80100c4 <USBD_CtlError>
            break;
 800f9be:	e041      	b.n	800fa44 <USBD_StdEPReq+0x29e>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f9c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	da0b      	bge.n	800f9e0 <USBD_StdEPReq+0x23a>
 800f9c8:	7bbb      	ldrb	r3, [r7, #14]
 800f9ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f9ce:	4613      	mov	r3, r2
 800f9d0:	009b      	lsls	r3, r3, #2
 800f9d2:	4413      	add	r3, r2
 800f9d4:	009b      	lsls	r3, r3, #2
 800f9d6:	3310      	adds	r3, #16
 800f9d8:	687a      	ldr	r2, [r7, #4]
 800f9da:	4413      	add	r3, r2
 800f9dc:	3304      	adds	r3, #4
 800f9de:	e00b      	b.n	800f9f8 <USBD_StdEPReq+0x252>
              &pdev->ep_out[ep_addr & 0x7FU];
 800f9e0:	7bbb      	ldrb	r3, [r7, #14]
 800f9e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f9e6:	4613      	mov	r3, r2
 800f9e8:	009b      	lsls	r3, r3, #2
 800f9ea:	4413      	add	r3, r2
 800f9ec:	009b      	lsls	r3, r3, #2
 800f9ee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f9f2:	687a      	ldr	r2, [r7, #4]
 800f9f4:	4413      	add	r3, r2
 800f9f6:	3304      	adds	r3, #4
 800f9f8:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f9fa:	7bbb      	ldrb	r3, [r7, #14]
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d002      	beq.n	800fa06 <USBD_StdEPReq+0x260>
 800fa00:	7bbb      	ldrb	r3, [r7, #14]
 800fa02:	2b80      	cmp	r3, #128	; 0x80
 800fa04:	d103      	bne.n	800fa0e <USBD_StdEPReq+0x268>
          {
            pep->status = 0x0000U;
 800fa06:	68bb      	ldr	r3, [r7, #8]
 800fa08:	2200      	movs	r2, #0
 800fa0a:	601a      	str	r2, [r3, #0]
 800fa0c:	e00e      	b.n	800fa2c <USBD_StdEPReq+0x286>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800fa0e:	7bbb      	ldrb	r3, [r7, #14]
 800fa10:	4619      	mov	r1, r3
 800fa12:	6878      	ldr	r0, [r7, #4]
 800fa14:	f001 f8ec 	bl	8010bf0 <USBD_LL_IsStallEP>
 800fa18:	4603      	mov	r3, r0
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d003      	beq.n	800fa26 <USBD_StdEPReq+0x280>
          {
            pep->status = 0x0001U;
 800fa1e:	68bb      	ldr	r3, [r7, #8]
 800fa20:	2201      	movs	r2, #1
 800fa22:	601a      	str	r2, [r3, #0]
 800fa24:	e002      	b.n	800fa2c <USBD_StdEPReq+0x286>
          }
          else
          {
            pep->status = 0x0000U;
 800fa26:	68bb      	ldr	r3, [r7, #8]
 800fa28:	2200      	movs	r2, #0
 800fa2a:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800fa2c:	68bb      	ldr	r3, [r7, #8]
 800fa2e:	2202      	movs	r2, #2
 800fa30:	4619      	mov	r1, r3
 800fa32:	6878      	ldr	r0, [r7, #4]
 800fa34:	f000 fbb7 	bl	80101a6 <USBD_CtlSendData>
          break;
 800fa38:	e004      	b.n	800fa44 <USBD_StdEPReq+0x29e>

      default:
        USBD_CtlError(pdev, req);
 800fa3a:	6839      	ldr	r1, [r7, #0]
 800fa3c:	6878      	ldr	r0, [r7, #4]
 800fa3e:	f000 fb41 	bl	80100c4 <USBD_CtlError>
        break;
 800fa42:	bf00      	nop
      }
      break;
 800fa44:	e004      	b.n	800fa50 <USBD_StdEPReq+0x2aa>

    default:
      USBD_CtlError(pdev, req);
 800fa46:	6839      	ldr	r1, [r7, #0]
 800fa48:	6878      	ldr	r0, [r7, #4]
 800fa4a:	f000 fb3b 	bl	80100c4 <USBD_CtlError>
      break;
 800fa4e:	bf00      	nop
    }
    break;
 800fa50:	e004      	b.n	800fa5c <USBD_StdEPReq+0x2b6>

  default:
    USBD_CtlError(pdev, req);
 800fa52:	6839      	ldr	r1, [r7, #0]
 800fa54:	6878      	ldr	r0, [r7, #4]
 800fa56:	f000 fb35 	bl	80100c4 <USBD_CtlError>
    break;
 800fa5a:	bf00      	nop
  }

  return ret;
 800fa5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa5e:	4618      	mov	r0, r3
 800fa60:	3710      	adds	r7, #16
 800fa62:	46bd      	mov	sp, r7
 800fa64:	bd80      	pop	{r7, pc}
	...

0800fa68 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fa68:	b580      	push	{r7, lr}
 800fa6a:	b084      	sub	sp, #16
 800fa6c:	af00      	add	r7, sp, #0
 800fa6e:	6078      	str	r0, [r7, #4]
 800fa70:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800fa72:	2300      	movs	r3, #0
 800fa74:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800fa76:	2300      	movs	r3, #0
 800fa78:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800fa7a:	2300      	movs	r3, #0
 800fa7c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800fa7e:	683b      	ldr	r3, [r7, #0]
 800fa80:	885b      	ldrh	r3, [r3, #2]
 800fa82:	0a1b      	lsrs	r3, r3, #8
 800fa84:	b29b      	uxth	r3, r3
 800fa86:	3b01      	subs	r3, #1
 800fa88:	2b06      	cmp	r3, #6
 800fa8a:	f200 8128 	bhi.w	800fcde <USBD_GetDescriptor+0x276>
 800fa8e:	a201      	add	r2, pc, #4	; (adr r2, 800fa94 <USBD_GetDescriptor+0x2c>)
 800fa90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa94:	0800fab1 	.word	0x0800fab1
 800fa98:	0800fac9 	.word	0x0800fac9
 800fa9c:	0800fb09 	.word	0x0800fb09
 800faa0:	0800fcdf 	.word	0x0800fcdf
 800faa4:	0800fcdf 	.word	0x0800fcdf
 800faa8:	0800fc7f 	.word	0x0800fc7f
 800faac:	0800fcab 	.word	0x0800fcab
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	687a      	ldr	r2, [r7, #4]
 800faba:	7c12      	ldrb	r2, [r2, #16]
 800fabc:	f107 0108 	add.w	r1, r7, #8
 800fac0:	4610      	mov	r0, r2
 800fac2:	4798      	blx	r3
 800fac4:	60f8      	str	r0, [r7, #12]
    break;
 800fac6:	e112      	b.n	800fcee <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	7c1b      	ldrb	r3, [r3, #16]
 800facc:	2b00      	cmp	r3, #0
 800face:	d10d      	bne.n	800faec <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fad8:	f107 0208 	add.w	r2, r7, #8
 800fadc:	4610      	mov	r0, r2
 800fade:	4798      	blx	r3
 800fae0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	3301      	adds	r3, #1
 800fae6:	2202      	movs	r2, #2
 800fae8:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800faea:	e100      	b.n	800fcee <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800faf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800faf4:	f107 0208 	add.w	r2, r7, #8
 800faf8:	4610      	mov	r0, r2
 800fafa:	4798      	blx	r3
 800fafc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	3301      	adds	r3, #1
 800fb02:	2202      	movs	r2, #2
 800fb04:	701a      	strb	r2, [r3, #0]
    break;
 800fb06:	e0f2      	b.n	800fcee <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800fb08:	683b      	ldr	r3, [r7, #0]
 800fb0a:	885b      	ldrh	r3, [r3, #2]
 800fb0c:	b2db      	uxtb	r3, r3
 800fb0e:	2b05      	cmp	r3, #5
 800fb10:	f200 80ac 	bhi.w	800fc6c <USBD_GetDescriptor+0x204>
 800fb14:	a201      	add	r2, pc, #4	; (adr r2, 800fb1c <USBD_GetDescriptor+0xb4>)
 800fb16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb1a:	bf00      	nop
 800fb1c:	0800fb35 	.word	0x0800fb35
 800fb20:	0800fb69 	.word	0x0800fb69
 800fb24:	0800fb9d 	.word	0x0800fb9d
 800fb28:	0800fbd1 	.word	0x0800fbd1
 800fb2c:	0800fc05 	.word	0x0800fc05
 800fb30:	0800fc39 	.word	0x0800fc39
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fb3a:	685b      	ldr	r3, [r3, #4]
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d00b      	beq.n	800fb58 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fb46:	685b      	ldr	r3, [r3, #4]
 800fb48:	687a      	ldr	r2, [r7, #4]
 800fb4a:	7c12      	ldrb	r2, [r2, #16]
 800fb4c:	f107 0108 	add.w	r1, r7, #8
 800fb50:	4610      	mov	r0, r2
 800fb52:	4798      	blx	r3
 800fb54:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fb56:	e091      	b.n	800fc7c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800fb58:	6839      	ldr	r1, [r7, #0]
 800fb5a:	6878      	ldr	r0, [r7, #4]
 800fb5c:	f000 fab2 	bl	80100c4 <USBD_CtlError>
        err++;
 800fb60:	7afb      	ldrb	r3, [r7, #11]
 800fb62:	3301      	adds	r3, #1
 800fb64:	72fb      	strb	r3, [r7, #11]
      break;
 800fb66:	e089      	b.n	800fc7c <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fb6e:	689b      	ldr	r3, [r3, #8]
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d00b      	beq.n	800fb8c <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fb7a:	689b      	ldr	r3, [r3, #8]
 800fb7c:	687a      	ldr	r2, [r7, #4]
 800fb7e:	7c12      	ldrb	r2, [r2, #16]
 800fb80:	f107 0108 	add.w	r1, r7, #8
 800fb84:	4610      	mov	r0, r2
 800fb86:	4798      	blx	r3
 800fb88:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fb8a:	e077      	b.n	800fc7c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800fb8c:	6839      	ldr	r1, [r7, #0]
 800fb8e:	6878      	ldr	r0, [r7, #4]
 800fb90:	f000 fa98 	bl	80100c4 <USBD_CtlError>
        err++;
 800fb94:	7afb      	ldrb	r3, [r7, #11]
 800fb96:	3301      	adds	r3, #1
 800fb98:	72fb      	strb	r3, [r7, #11]
      break;
 800fb9a:	e06f      	b.n	800fc7c <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fba2:	68db      	ldr	r3, [r3, #12]
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d00b      	beq.n	800fbc0 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fbae:	68db      	ldr	r3, [r3, #12]
 800fbb0:	687a      	ldr	r2, [r7, #4]
 800fbb2:	7c12      	ldrb	r2, [r2, #16]
 800fbb4:	f107 0108 	add.w	r1, r7, #8
 800fbb8:	4610      	mov	r0, r2
 800fbba:	4798      	blx	r3
 800fbbc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fbbe:	e05d      	b.n	800fc7c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800fbc0:	6839      	ldr	r1, [r7, #0]
 800fbc2:	6878      	ldr	r0, [r7, #4]
 800fbc4:	f000 fa7e 	bl	80100c4 <USBD_CtlError>
        err++;
 800fbc8:	7afb      	ldrb	r3, [r7, #11]
 800fbca:	3301      	adds	r3, #1
 800fbcc:	72fb      	strb	r3, [r7, #11]
      break;
 800fbce:	e055      	b.n	800fc7c <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fbd6:	691b      	ldr	r3, [r3, #16]
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d00b      	beq.n	800fbf4 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fbe2:	691b      	ldr	r3, [r3, #16]
 800fbe4:	687a      	ldr	r2, [r7, #4]
 800fbe6:	7c12      	ldrb	r2, [r2, #16]
 800fbe8:	f107 0108 	add.w	r1, r7, #8
 800fbec:	4610      	mov	r0, r2
 800fbee:	4798      	blx	r3
 800fbf0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fbf2:	e043      	b.n	800fc7c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800fbf4:	6839      	ldr	r1, [r7, #0]
 800fbf6:	6878      	ldr	r0, [r7, #4]
 800fbf8:	f000 fa64 	bl	80100c4 <USBD_CtlError>
        err++;
 800fbfc:	7afb      	ldrb	r3, [r7, #11]
 800fbfe:	3301      	adds	r3, #1
 800fc00:	72fb      	strb	r3, [r7, #11]
      break;
 800fc02:	e03b      	b.n	800fc7c <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fc0a:	695b      	ldr	r3, [r3, #20]
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d00b      	beq.n	800fc28 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fc16:	695b      	ldr	r3, [r3, #20]
 800fc18:	687a      	ldr	r2, [r7, #4]
 800fc1a:	7c12      	ldrb	r2, [r2, #16]
 800fc1c:	f107 0108 	add.w	r1, r7, #8
 800fc20:	4610      	mov	r0, r2
 800fc22:	4798      	blx	r3
 800fc24:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fc26:	e029      	b.n	800fc7c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800fc28:	6839      	ldr	r1, [r7, #0]
 800fc2a:	6878      	ldr	r0, [r7, #4]
 800fc2c:	f000 fa4a 	bl	80100c4 <USBD_CtlError>
        err++;
 800fc30:	7afb      	ldrb	r3, [r7, #11]
 800fc32:	3301      	adds	r3, #1
 800fc34:	72fb      	strb	r3, [r7, #11]
      break;
 800fc36:	e021      	b.n	800fc7c <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fc3e:	699b      	ldr	r3, [r3, #24]
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d00b      	beq.n	800fc5c <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fc4a:	699b      	ldr	r3, [r3, #24]
 800fc4c:	687a      	ldr	r2, [r7, #4]
 800fc4e:	7c12      	ldrb	r2, [r2, #16]
 800fc50:	f107 0108 	add.w	r1, r7, #8
 800fc54:	4610      	mov	r0, r2
 800fc56:	4798      	blx	r3
 800fc58:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fc5a:	e00f      	b.n	800fc7c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800fc5c:	6839      	ldr	r1, [r7, #0]
 800fc5e:	6878      	ldr	r0, [r7, #4]
 800fc60:	f000 fa30 	bl	80100c4 <USBD_CtlError>
        err++;
 800fc64:	7afb      	ldrb	r3, [r7, #11]
 800fc66:	3301      	adds	r3, #1
 800fc68:	72fb      	strb	r3, [r7, #11]
      break;
 800fc6a:	e007      	b.n	800fc7c <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800fc6c:	6839      	ldr	r1, [r7, #0]
 800fc6e:	6878      	ldr	r0, [r7, #4]
 800fc70:	f000 fa28 	bl	80100c4 <USBD_CtlError>
      err++;
 800fc74:	7afb      	ldrb	r3, [r7, #11]
 800fc76:	3301      	adds	r3, #1
 800fc78:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800fc7a:	bf00      	nop
    }
    break;
 800fc7c:	e037      	b.n	800fcee <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	7c1b      	ldrb	r3, [r3, #16]
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d109      	bne.n	800fc9a <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc8e:	f107 0208 	add.w	r2, r7, #8
 800fc92:	4610      	mov	r0, r2
 800fc94:	4798      	blx	r3
 800fc96:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800fc98:	e029      	b.n	800fcee <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800fc9a:	6839      	ldr	r1, [r7, #0]
 800fc9c:	6878      	ldr	r0, [r7, #4]
 800fc9e:	f000 fa11 	bl	80100c4 <USBD_CtlError>
      err++;
 800fca2:	7afb      	ldrb	r3, [r7, #11]
 800fca4:	3301      	adds	r3, #1
 800fca6:	72fb      	strb	r3, [r7, #11]
    break;
 800fca8:	e021      	b.n	800fcee <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	7c1b      	ldrb	r3, [r3, #16]
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d10d      	bne.n	800fcce <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fcb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fcba:	f107 0208 	add.w	r2, r7, #8
 800fcbe:	4610      	mov	r0, r2
 800fcc0:	4798      	blx	r3
 800fcc2:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	3301      	adds	r3, #1
 800fcc8:	2207      	movs	r2, #7
 800fcca:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800fccc:	e00f      	b.n	800fcee <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800fcce:	6839      	ldr	r1, [r7, #0]
 800fcd0:	6878      	ldr	r0, [r7, #4]
 800fcd2:	f000 f9f7 	bl	80100c4 <USBD_CtlError>
      err++;
 800fcd6:	7afb      	ldrb	r3, [r7, #11]
 800fcd8:	3301      	adds	r3, #1
 800fcda:	72fb      	strb	r3, [r7, #11]
    break;
 800fcdc:	e007      	b.n	800fcee <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800fcde:	6839      	ldr	r1, [r7, #0]
 800fce0:	6878      	ldr	r0, [r7, #4]
 800fce2:	f000 f9ef 	bl	80100c4 <USBD_CtlError>
    err++;
 800fce6:	7afb      	ldrb	r3, [r7, #11]
 800fce8:	3301      	adds	r3, #1
 800fcea:	72fb      	strb	r3, [r7, #11]
    break;
 800fcec:	bf00      	nop
  }

  if (err != 0U)
 800fcee:	7afb      	ldrb	r3, [r7, #11]
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d11e      	bne.n	800fd32 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800fcf4:	683b      	ldr	r3, [r7, #0]
 800fcf6:	88db      	ldrh	r3, [r3, #6]
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d016      	beq.n	800fd2a <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800fcfc:	893b      	ldrh	r3, [r7, #8]
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d00e      	beq.n	800fd20 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800fd02:	683b      	ldr	r3, [r7, #0]
 800fd04:	88da      	ldrh	r2, [r3, #6]
 800fd06:	893b      	ldrh	r3, [r7, #8]
 800fd08:	4293      	cmp	r3, r2
 800fd0a:	bf28      	it	cs
 800fd0c:	4613      	movcs	r3, r2
 800fd0e:	b29b      	uxth	r3, r3
 800fd10:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800fd12:	893b      	ldrh	r3, [r7, #8]
 800fd14:	461a      	mov	r2, r3
 800fd16:	68f9      	ldr	r1, [r7, #12]
 800fd18:	6878      	ldr	r0, [r7, #4]
 800fd1a:	f000 fa44 	bl	80101a6 <USBD_CtlSendData>
 800fd1e:	e009      	b.n	800fd34 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800fd20:	6839      	ldr	r1, [r7, #0]
 800fd22:	6878      	ldr	r0, [r7, #4]
 800fd24:	f000 f9ce 	bl	80100c4 <USBD_CtlError>
 800fd28:	e004      	b.n	800fd34 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800fd2a:	6878      	ldr	r0, [r7, #4]
 800fd2c:	f000 fa95 	bl	801025a <USBD_CtlSendStatus>
 800fd30:	e000      	b.n	800fd34 <USBD_GetDescriptor+0x2cc>
    return;
 800fd32:	bf00      	nop
    }
  }
}
 800fd34:	3710      	adds	r7, #16
 800fd36:	46bd      	mov	sp, r7
 800fd38:	bd80      	pop	{r7, pc}
 800fd3a:	bf00      	nop

0800fd3c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fd3c:	b580      	push	{r7, lr}
 800fd3e:	b084      	sub	sp, #16
 800fd40:	af00      	add	r7, sp, #0
 800fd42:	6078      	str	r0, [r7, #4]
 800fd44:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800fd46:	683b      	ldr	r3, [r7, #0]
 800fd48:	889b      	ldrh	r3, [r3, #4]
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d131      	bne.n	800fdb2 <USBD_SetAddress+0x76>
 800fd4e:	683b      	ldr	r3, [r7, #0]
 800fd50:	88db      	ldrh	r3, [r3, #6]
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d12d      	bne.n	800fdb2 <USBD_SetAddress+0x76>
 800fd56:	683b      	ldr	r3, [r7, #0]
 800fd58:	885b      	ldrh	r3, [r3, #2]
 800fd5a:	2b7f      	cmp	r3, #127	; 0x7f
 800fd5c:	d829      	bhi.n	800fdb2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800fd5e:	683b      	ldr	r3, [r7, #0]
 800fd60:	885b      	ldrh	r3, [r3, #2]
 800fd62:	b2db      	uxtb	r3, r3
 800fd64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fd68:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fd70:	b2db      	uxtb	r3, r3
 800fd72:	2b03      	cmp	r3, #3
 800fd74:	d104      	bne.n	800fd80 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800fd76:	6839      	ldr	r1, [r7, #0]
 800fd78:	6878      	ldr	r0, [r7, #4]
 800fd7a:	f000 f9a3 	bl	80100c4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fd7e:	e01d      	b.n	800fdbc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	7bfa      	ldrb	r2, [r7, #15]
 800fd84:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800fd88:	7bfb      	ldrb	r3, [r7, #15]
 800fd8a:	4619      	mov	r1, r3
 800fd8c:	6878      	ldr	r0, [r7, #4]
 800fd8e:	f000 ff5b 	bl	8010c48 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800fd92:	6878      	ldr	r0, [r7, #4]
 800fd94:	f000 fa61 	bl	801025a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800fd98:	7bfb      	ldrb	r3, [r7, #15]
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d004      	beq.n	800fda8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	2202      	movs	r2, #2
 800fda2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fda6:	e009      	b.n	800fdbc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	2201      	movs	r2, #1
 800fdac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fdb0:	e004      	b.n	800fdbc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800fdb2:	6839      	ldr	r1, [r7, #0]
 800fdb4:	6878      	ldr	r0, [r7, #4]
 800fdb6:	f000 f985 	bl	80100c4 <USBD_CtlError>
  }
}
 800fdba:	bf00      	nop
 800fdbc:	bf00      	nop
 800fdbe:	3710      	adds	r7, #16
 800fdc0:	46bd      	mov	sp, r7
 800fdc2:	bd80      	pop	{r7, pc}

0800fdc4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fdc4:	b580      	push	{r7, lr}
 800fdc6:	b084      	sub	sp, #16
 800fdc8:	af00      	add	r7, sp, #0
 800fdca:	6078      	str	r0, [r7, #4]
 800fdcc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fdce:	2300      	movs	r3, #0
 800fdd0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800fdd2:	683b      	ldr	r3, [r7, #0]
 800fdd4:	885b      	ldrh	r3, [r3, #2]
 800fdd6:	b2da      	uxtb	r2, r3
 800fdd8:	4b4c      	ldr	r3, [pc, #304]	; (800ff0c <USBD_SetConfig+0x148>)
 800fdda:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800fddc:	4b4b      	ldr	r3, [pc, #300]	; (800ff0c <USBD_SetConfig+0x148>)
 800fdde:	781b      	ldrb	r3, [r3, #0]
 800fde0:	2b01      	cmp	r3, #1
 800fde2:	d905      	bls.n	800fdf0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800fde4:	6839      	ldr	r1, [r7, #0]
 800fde6:	6878      	ldr	r0, [r7, #4]
 800fde8:	f000 f96c 	bl	80100c4 <USBD_CtlError>
    return USBD_FAIL;
 800fdec:	2303      	movs	r3, #3
 800fdee:	e088      	b.n	800ff02 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fdf6:	b2db      	uxtb	r3, r3
 800fdf8:	2b02      	cmp	r3, #2
 800fdfa:	d002      	beq.n	800fe02 <USBD_SetConfig+0x3e>
 800fdfc:	2b03      	cmp	r3, #3
 800fdfe:	d025      	beq.n	800fe4c <USBD_SetConfig+0x88>
 800fe00:	e071      	b.n	800fee6 <USBD_SetConfig+0x122>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800fe02:	4b42      	ldr	r3, [pc, #264]	; (800ff0c <USBD_SetConfig+0x148>)
 800fe04:	781b      	ldrb	r3, [r3, #0]
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d01c      	beq.n	800fe44 <USBD_SetConfig+0x80>
    {
      pdev->dev_config = cfgidx;
 800fe0a:	4b40      	ldr	r3, [pc, #256]	; (800ff0c <USBD_SetConfig+0x148>)
 800fe0c:	781b      	ldrb	r3, [r3, #0]
 800fe0e:	461a      	mov	r2, r3
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800fe14:	4b3d      	ldr	r3, [pc, #244]	; (800ff0c <USBD_SetConfig+0x148>)
 800fe16:	781b      	ldrb	r3, [r3, #0]
 800fe18:	4619      	mov	r1, r3
 800fe1a:	6878      	ldr	r0, [r7, #4]
 800fe1c:	f7ff f98c 	bl	800f138 <USBD_SetClassConfig>
 800fe20:	4603      	mov	r3, r0
 800fe22:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800fe24:	7bfb      	ldrb	r3, [r7, #15]
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d004      	beq.n	800fe34 <USBD_SetConfig+0x70>
      {
        USBD_CtlError(pdev, req);
 800fe2a:	6839      	ldr	r1, [r7, #0]
 800fe2c:	6878      	ldr	r0, [r7, #4]
 800fe2e:	f000 f949 	bl	80100c4 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800fe32:	e065      	b.n	800ff00 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800fe34:	6878      	ldr	r0, [r7, #4]
 800fe36:	f000 fa10 	bl	801025a <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	2203      	movs	r2, #3
 800fe3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800fe42:	e05d      	b.n	800ff00 <USBD_SetConfig+0x13c>
      (void)USBD_CtlSendStatus(pdev);
 800fe44:	6878      	ldr	r0, [r7, #4]
 800fe46:	f000 fa08 	bl	801025a <USBD_CtlSendStatus>
    break;
 800fe4a:	e059      	b.n	800ff00 <USBD_SetConfig+0x13c>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800fe4c:	4b2f      	ldr	r3, [pc, #188]	; (800ff0c <USBD_SetConfig+0x148>)
 800fe4e:	781b      	ldrb	r3, [r3, #0]
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d112      	bne.n	800fe7a <USBD_SetConfig+0xb6>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	2202      	movs	r2, #2
 800fe58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800fe5c:	4b2b      	ldr	r3, [pc, #172]	; (800ff0c <USBD_SetConfig+0x148>)
 800fe5e:	781b      	ldrb	r3, [r3, #0]
 800fe60:	461a      	mov	r2, r3
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fe66:	4b29      	ldr	r3, [pc, #164]	; (800ff0c <USBD_SetConfig+0x148>)
 800fe68:	781b      	ldrb	r3, [r3, #0]
 800fe6a:	4619      	mov	r1, r3
 800fe6c:	6878      	ldr	r0, [r7, #4]
 800fe6e:	f7ff f97f 	bl	800f170 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800fe72:	6878      	ldr	r0, [r7, #4]
 800fe74:	f000 f9f1 	bl	801025a <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800fe78:	e042      	b.n	800ff00 <USBD_SetConfig+0x13c>
    else if (cfgidx != pdev->dev_config)
 800fe7a:	4b24      	ldr	r3, [pc, #144]	; (800ff0c <USBD_SetConfig+0x148>)
 800fe7c:	781b      	ldrb	r3, [r3, #0]
 800fe7e:	461a      	mov	r2, r3
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	685b      	ldr	r3, [r3, #4]
 800fe84:	429a      	cmp	r2, r3
 800fe86:	d02a      	beq.n	800fede <USBD_SetConfig+0x11a>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	685b      	ldr	r3, [r3, #4]
 800fe8c:	b2db      	uxtb	r3, r3
 800fe8e:	4619      	mov	r1, r3
 800fe90:	6878      	ldr	r0, [r7, #4]
 800fe92:	f7ff f96d 	bl	800f170 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800fe96:	4b1d      	ldr	r3, [pc, #116]	; (800ff0c <USBD_SetConfig+0x148>)
 800fe98:	781b      	ldrb	r3, [r3, #0]
 800fe9a:	461a      	mov	r2, r3
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800fea0:	4b1a      	ldr	r3, [pc, #104]	; (800ff0c <USBD_SetConfig+0x148>)
 800fea2:	781b      	ldrb	r3, [r3, #0]
 800fea4:	4619      	mov	r1, r3
 800fea6:	6878      	ldr	r0, [r7, #4]
 800fea8:	f7ff f946 	bl	800f138 <USBD_SetClassConfig>
 800feac:	4603      	mov	r3, r0
 800feae:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800feb0:	7bfb      	ldrb	r3, [r7, #15]
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d00f      	beq.n	800fed6 <USBD_SetConfig+0x112>
        USBD_CtlError(pdev, req);
 800feb6:	6839      	ldr	r1, [r7, #0]
 800feb8:	6878      	ldr	r0, [r7, #4]
 800feba:	f000 f903 	bl	80100c4 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	685b      	ldr	r3, [r3, #4]
 800fec2:	b2db      	uxtb	r3, r3
 800fec4:	4619      	mov	r1, r3
 800fec6:	6878      	ldr	r0, [r7, #4]
 800fec8:	f7ff f952 	bl	800f170 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	2202      	movs	r2, #2
 800fed0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800fed4:	e014      	b.n	800ff00 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800fed6:	6878      	ldr	r0, [r7, #4]
 800fed8:	f000 f9bf 	bl	801025a <USBD_CtlSendStatus>
    break;
 800fedc:	e010      	b.n	800ff00 <USBD_SetConfig+0x13c>
      (void)USBD_CtlSendStatus(pdev);
 800fede:	6878      	ldr	r0, [r7, #4]
 800fee0:	f000 f9bb 	bl	801025a <USBD_CtlSendStatus>
    break;
 800fee4:	e00c      	b.n	800ff00 <USBD_SetConfig+0x13c>

  default:
    USBD_CtlError(pdev, req);
 800fee6:	6839      	ldr	r1, [r7, #0]
 800fee8:	6878      	ldr	r0, [r7, #4]
 800feea:	f000 f8eb 	bl	80100c4 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800feee:	4b07      	ldr	r3, [pc, #28]	; (800ff0c <USBD_SetConfig+0x148>)
 800fef0:	781b      	ldrb	r3, [r3, #0]
 800fef2:	4619      	mov	r1, r3
 800fef4:	6878      	ldr	r0, [r7, #4]
 800fef6:	f7ff f93b 	bl	800f170 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800fefa:	2303      	movs	r3, #3
 800fefc:	73fb      	strb	r3, [r7, #15]
    break;
 800fefe:	bf00      	nop
  }

  return ret;
 800ff00:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff02:	4618      	mov	r0, r3
 800ff04:	3710      	adds	r7, #16
 800ff06:	46bd      	mov	sp, r7
 800ff08:	bd80      	pop	{r7, pc}
 800ff0a:	bf00      	nop
 800ff0c:	2400075c 	.word	0x2400075c

0800ff10 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ff10:	b580      	push	{r7, lr}
 800ff12:	b082      	sub	sp, #8
 800ff14:	af00      	add	r7, sp, #0
 800ff16:	6078      	str	r0, [r7, #4]
 800ff18:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ff1a:	683b      	ldr	r3, [r7, #0]
 800ff1c:	88db      	ldrh	r3, [r3, #6]
 800ff1e:	2b01      	cmp	r3, #1
 800ff20:	d004      	beq.n	800ff2c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ff22:	6839      	ldr	r1, [r7, #0]
 800ff24:	6878      	ldr	r0, [r7, #4]
 800ff26:	f000 f8cd 	bl	80100c4 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800ff2a:	e023      	b.n	800ff74 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ff32:	b2db      	uxtb	r3, r3
 800ff34:	2b02      	cmp	r3, #2
 800ff36:	dc02      	bgt.n	800ff3e <USBD_GetConfig+0x2e>
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	dc03      	bgt.n	800ff44 <USBD_GetConfig+0x34>
 800ff3c:	e015      	b.n	800ff6a <USBD_GetConfig+0x5a>
 800ff3e:	2b03      	cmp	r3, #3
 800ff40:	d00b      	beq.n	800ff5a <USBD_GetConfig+0x4a>
 800ff42:	e012      	b.n	800ff6a <USBD_GetConfig+0x5a>
      pdev->dev_default_config = 0U;
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	2200      	movs	r2, #0
 800ff48:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	3308      	adds	r3, #8
 800ff4e:	2201      	movs	r2, #1
 800ff50:	4619      	mov	r1, r3
 800ff52:	6878      	ldr	r0, [r7, #4]
 800ff54:	f000 f927 	bl	80101a6 <USBD_CtlSendData>
      break;
 800ff58:	e00c      	b.n	800ff74 <USBD_GetConfig+0x64>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	3304      	adds	r3, #4
 800ff5e:	2201      	movs	r2, #1
 800ff60:	4619      	mov	r1, r3
 800ff62:	6878      	ldr	r0, [r7, #4]
 800ff64:	f000 f91f 	bl	80101a6 <USBD_CtlSendData>
      break;
 800ff68:	e004      	b.n	800ff74 <USBD_GetConfig+0x64>
      USBD_CtlError(pdev, req);
 800ff6a:	6839      	ldr	r1, [r7, #0]
 800ff6c:	6878      	ldr	r0, [r7, #4]
 800ff6e:	f000 f8a9 	bl	80100c4 <USBD_CtlError>
      break;
 800ff72:	bf00      	nop
}
 800ff74:	bf00      	nop
 800ff76:	3708      	adds	r7, #8
 800ff78:	46bd      	mov	sp, r7
 800ff7a:	bd80      	pop	{r7, pc}

0800ff7c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ff7c:	b580      	push	{r7, lr}
 800ff7e:	b082      	sub	sp, #8
 800ff80:	af00      	add	r7, sp, #0
 800ff82:	6078      	str	r0, [r7, #4]
 800ff84:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ff8c:	b2db      	uxtb	r3, r3
 800ff8e:	3b01      	subs	r3, #1
 800ff90:	2b02      	cmp	r3, #2
 800ff92:	d81e      	bhi.n	800ffd2 <USBD_GetStatus+0x56>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800ff94:	683b      	ldr	r3, [r7, #0]
 800ff96:	88db      	ldrh	r3, [r3, #6]
 800ff98:	2b02      	cmp	r3, #2
 800ff9a:	d004      	beq.n	800ffa6 <USBD_GetStatus+0x2a>
    {
      USBD_CtlError(pdev, req);
 800ff9c:	6839      	ldr	r1, [r7, #0]
 800ff9e:	6878      	ldr	r0, [r7, #4]
 800ffa0:	f000 f890 	bl	80100c4 <USBD_CtlError>
      break;
 800ffa4:	e01a      	b.n	800ffdc <USBD_GetStatus+0x60>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	2201      	movs	r2, #1
 800ffaa:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d005      	beq.n	800ffc2 <USBD_GetStatus+0x46>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	68db      	ldr	r3, [r3, #12]
 800ffba:	f043 0202 	orr.w	r2, r3, #2
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	330c      	adds	r3, #12
 800ffc6:	2202      	movs	r2, #2
 800ffc8:	4619      	mov	r1, r3
 800ffca:	6878      	ldr	r0, [r7, #4]
 800ffcc:	f000 f8eb 	bl	80101a6 <USBD_CtlSendData>
    break;
 800ffd0:	e004      	b.n	800ffdc <USBD_GetStatus+0x60>

  default:
    USBD_CtlError(pdev, req);
 800ffd2:	6839      	ldr	r1, [r7, #0]
 800ffd4:	6878      	ldr	r0, [r7, #4]
 800ffd6:	f000 f875 	bl	80100c4 <USBD_CtlError>
    break;
 800ffda:	bf00      	nop
  }
}
 800ffdc:	bf00      	nop
 800ffde:	3708      	adds	r7, #8
 800ffe0:	46bd      	mov	sp, r7
 800ffe2:	bd80      	pop	{r7, pc}

0800ffe4 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ffe4:	b580      	push	{r7, lr}
 800ffe6:	b082      	sub	sp, #8
 800ffe8:	af00      	add	r7, sp, #0
 800ffea:	6078      	str	r0, [r7, #4]
 800ffec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ffee:	683b      	ldr	r3, [r7, #0]
 800fff0:	885b      	ldrh	r3, [r3, #2]
 800fff2:	2b01      	cmp	r3, #1
 800fff4:	d106      	bne.n	8010004 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	2201      	movs	r2, #1
 800fffa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800fffe:	6878      	ldr	r0, [r7, #4]
 8010000:	f000 f92b 	bl	801025a <USBD_CtlSendStatus>
  }
}
 8010004:	bf00      	nop
 8010006:	3708      	adds	r7, #8
 8010008:	46bd      	mov	sp, r7
 801000a:	bd80      	pop	{r7, pc}

0801000c <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801000c:	b580      	push	{r7, lr}
 801000e:	b082      	sub	sp, #8
 8010010:	af00      	add	r7, sp, #0
 8010012:	6078      	str	r0, [r7, #4]
 8010014:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801001c:	b2db      	uxtb	r3, r3
 801001e:	3b01      	subs	r3, #1
 8010020:	2b02      	cmp	r3, #2
 8010022:	d80b      	bhi.n	801003c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010024:	683b      	ldr	r3, [r7, #0]
 8010026:	885b      	ldrh	r3, [r3, #2]
 8010028:	2b01      	cmp	r3, #1
 801002a:	d10c      	bne.n	8010046 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	2200      	movs	r2, #0
 8010030:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8010034:	6878      	ldr	r0, [r7, #4]
 8010036:	f000 f910 	bl	801025a <USBD_CtlSendStatus>
      }
      break;
 801003a:	e004      	b.n	8010046 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801003c:	6839      	ldr	r1, [r7, #0]
 801003e:	6878      	ldr	r0, [r7, #4]
 8010040:	f000 f840 	bl	80100c4 <USBD_CtlError>
      break;
 8010044:	e000      	b.n	8010048 <USBD_ClrFeature+0x3c>
      break;
 8010046:	bf00      	nop
  }
}
 8010048:	bf00      	nop
 801004a:	3708      	adds	r7, #8
 801004c:	46bd      	mov	sp, r7
 801004e:	bd80      	pop	{r7, pc}

08010050 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8010050:	b580      	push	{r7, lr}
 8010052:	b084      	sub	sp, #16
 8010054:	af00      	add	r7, sp, #0
 8010056:	6078      	str	r0, [r7, #4]
 8010058:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801005a:	683b      	ldr	r3, [r7, #0]
 801005c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	781a      	ldrb	r2, [r3, #0]
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	3301      	adds	r3, #1
 801006a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801006c:	68fb      	ldr	r3, [r7, #12]
 801006e:	781a      	ldrb	r2, [r3, #0]
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	3301      	adds	r3, #1
 8010078:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801007a:	68f8      	ldr	r0, [r7, #12]
 801007c:	f7ff fabd 	bl	800f5fa <SWAPBYTE>
 8010080:	4603      	mov	r3, r0
 8010082:	461a      	mov	r2, r3
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	3301      	adds	r3, #1
 801008c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	3301      	adds	r3, #1
 8010092:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8010094:	68f8      	ldr	r0, [r7, #12]
 8010096:	f7ff fab0 	bl	800f5fa <SWAPBYTE>
 801009a:	4603      	mov	r3, r0
 801009c:	461a      	mov	r2, r3
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	3301      	adds	r3, #1
 80100a6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	3301      	adds	r3, #1
 80100ac:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80100ae:	68f8      	ldr	r0, [r7, #12]
 80100b0:	f7ff faa3 	bl	800f5fa <SWAPBYTE>
 80100b4:	4603      	mov	r3, r0
 80100b6:	461a      	mov	r2, r3
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	80da      	strh	r2, [r3, #6]
}
 80100bc:	bf00      	nop
 80100be:	3710      	adds	r7, #16
 80100c0:	46bd      	mov	sp, r7
 80100c2:	bd80      	pop	{r7, pc}

080100c4 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80100c4:	b580      	push	{r7, lr}
 80100c6:	b082      	sub	sp, #8
 80100c8:	af00      	add	r7, sp, #0
 80100ca:	6078      	str	r0, [r7, #4]
 80100cc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80100ce:	2180      	movs	r1, #128	; 0x80
 80100d0:	6878      	ldr	r0, [r7, #4]
 80100d2:	f000 fd4f 	bl	8010b74 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80100d6:	2100      	movs	r1, #0
 80100d8:	6878      	ldr	r0, [r7, #4]
 80100da:	f000 fd4b 	bl	8010b74 <USBD_LL_StallEP>
}
 80100de:	bf00      	nop
 80100e0:	3708      	adds	r7, #8
 80100e2:	46bd      	mov	sp, r7
 80100e4:	bd80      	pop	{r7, pc}

080100e6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80100e6:	b580      	push	{r7, lr}
 80100e8:	b086      	sub	sp, #24
 80100ea:	af00      	add	r7, sp, #0
 80100ec:	60f8      	str	r0, [r7, #12]
 80100ee:	60b9      	str	r1, [r7, #8]
 80100f0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80100f2:	2300      	movs	r3, #0
 80100f4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d036      	beq.n	801016a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8010100:	6938      	ldr	r0, [r7, #16]
 8010102:	f000 f836 	bl	8010172 <USBD_GetLen>
 8010106:	4603      	mov	r3, r0
 8010108:	3301      	adds	r3, #1
 801010a:	b29b      	uxth	r3, r3
 801010c:	005b      	lsls	r3, r3, #1
 801010e:	b29a      	uxth	r2, r3
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8010114:	7dfb      	ldrb	r3, [r7, #23]
 8010116:	68ba      	ldr	r2, [r7, #8]
 8010118:	4413      	add	r3, r2
 801011a:	687a      	ldr	r2, [r7, #4]
 801011c:	7812      	ldrb	r2, [r2, #0]
 801011e:	701a      	strb	r2, [r3, #0]
  idx++;
 8010120:	7dfb      	ldrb	r3, [r7, #23]
 8010122:	3301      	adds	r3, #1
 8010124:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8010126:	7dfb      	ldrb	r3, [r7, #23]
 8010128:	68ba      	ldr	r2, [r7, #8]
 801012a:	4413      	add	r3, r2
 801012c:	2203      	movs	r2, #3
 801012e:	701a      	strb	r2, [r3, #0]
  idx++;
 8010130:	7dfb      	ldrb	r3, [r7, #23]
 8010132:	3301      	adds	r3, #1
 8010134:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8010136:	e013      	b.n	8010160 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8010138:	7dfb      	ldrb	r3, [r7, #23]
 801013a:	68ba      	ldr	r2, [r7, #8]
 801013c:	4413      	add	r3, r2
 801013e:	693a      	ldr	r2, [r7, #16]
 8010140:	7812      	ldrb	r2, [r2, #0]
 8010142:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8010144:	693b      	ldr	r3, [r7, #16]
 8010146:	3301      	adds	r3, #1
 8010148:	613b      	str	r3, [r7, #16]
    idx++;
 801014a:	7dfb      	ldrb	r3, [r7, #23]
 801014c:	3301      	adds	r3, #1
 801014e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8010150:	7dfb      	ldrb	r3, [r7, #23]
 8010152:	68ba      	ldr	r2, [r7, #8]
 8010154:	4413      	add	r3, r2
 8010156:	2200      	movs	r2, #0
 8010158:	701a      	strb	r2, [r3, #0]
    idx++;
 801015a:	7dfb      	ldrb	r3, [r7, #23]
 801015c:	3301      	adds	r3, #1
 801015e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8010160:	693b      	ldr	r3, [r7, #16]
 8010162:	781b      	ldrb	r3, [r3, #0]
 8010164:	2b00      	cmp	r3, #0
 8010166:	d1e7      	bne.n	8010138 <USBD_GetString+0x52>
 8010168:	e000      	b.n	801016c <USBD_GetString+0x86>
    return;
 801016a:	bf00      	nop
  }
}
 801016c:	3718      	adds	r7, #24
 801016e:	46bd      	mov	sp, r7
 8010170:	bd80      	pop	{r7, pc}

08010172 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8010172:	b480      	push	{r7}
 8010174:	b085      	sub	sp, #20
 8010176:	af00      	add	r7, sp, #0
 8010178:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801017a:	2300      	movs	r3, #0
 801017c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8010182:	e005      	b.n	8010190 <USBD_GetLen+0x1e>
  {
    len++;
 8010184:	7bfb      	ldrb	r3, [r7, #15]
 8010186:	3301      	adds	r3, #1
 8010188:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801018a:	68bb      	ldr	r3, [r7, #8]
 801018c:	3301      	adds	r3, #1
 801018e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8010190:	68bb      	ldr	r3, [r7, #8]
 8010192:	781b      	ldrb	r3, [r3, #0]
 8010194:	2b00      	cmp	r3, #0
 8010196:	d1f5      	bne.n	8010184 <USBD_GetLen+0x12>
  }

  return len;
 8010198:	7bfb      	ldrb	r3, [r7, #15]
}
 801019a:	4618      	mov	r0, r3
 801019c:	3714      	adds	r7, #20
 801019e:	46bd      	mov	sp, r7
 80101a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a4:	4770      	bx	lr

080101a6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80101a6:	b580      	push	{r7, lr}
 80101a8:	b084      	sub	sp, #16
 80101aa:	af00      	add	r7, sp, #0
 80101ac:	60f8      	str	r0, [r7, #12]
 80101ae:	60b9      	str	r1, [r7, #8]
 80101b0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	2202      	movs	r2, #2
 80101b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	687a      	ldr	r2, [r7, #4]
 80101be:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	687a      	ldr	r2, [r7, #4]
 80101c4:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	68ba      	ldr	r2, [r7, #8]
 80101ca:	2100      	movs	r1, #0
 80101cc:	68f8      	ldr	r0, [r7, #12]
 80101ce:	f000 fd5a 	bl	8010c86 <USBD_LL_Transmit>

  return USBD_OK;
 80101d2:	2300      	movs	r3, #0
}
 80101d4:	4618      	mov	r0, r3
 80101d6:	3710      	adds	r7, #16
 80101d8:	46bd      	mov	sp, r7
 80101da:	bd80      	pop	{r7, pc}

080101dc <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80101dc:	b580      	push	{r7, lr}
 80101de:	b084      	sub	sp, #16
 80101e0:	af00      	add	r7, sp, #0
 80101e2:	60f8      	str	r0, [r7, #12]
 80101e4:	60b9      	str	r1, [r7, #8]
 80101e6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	68ba      	ldr	r2, [r7, #8]
 80101ec:	2100      	movs	r1, #0
 80101ee:	68f8      	ldr	r0, [r7, #12]
 80101f0:	f000 fd49 	bl	8010c86 <USBD_LL_Transmit>

  return USBD_OK;
 80101f4:	2300      	movs	r3, #0
}
 80101f6:	4618      	mov	r0, r3
 80101f8:	3710      	adds	r7, #16
 80101fa:	46bd      	mov	sp, r7
 80101fc:	bd80      	pop	{r7, pc}

080101fe <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80101fe:	b580      	push	{r7, lr}
 8010200:	b084      	sub	sp, #16
 8010202:	af00      	add	r7, sp, #0
 8010204:	60f8      	str	r0, [r7, #12]
 8010206:	60b9      	str	r1, [r7, #8]
 8010208:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	2203      	movs	r2, #3
 801020e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	687a      	ldr	r2, [r7, #4]
 8010216:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	687a      	ldr	r2, [r7, #4]
 801021e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	68ba      	ldr	r2, [r7, #8]
 8010226:	2100      	movs	r1, #0
 8010228:	68f8      	ldr	r0, [r7, #12]
 801022a:	f000 fd4d 	bl	8010cc8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801022e:	2300      	movs	r3, #0
}
 8010230:	4618      	mov	r0, r3
 8010232:	3710      	adds	r7, #16
 8010234:	46bd      	mov	sp, r7
 8010236:	bd80      	pop	{r7, pc}

08010238 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8010238:	b580      	push	{r7, lr}
 801023a:	b084      	sub	sp, #16
 801023c:	af00      	add	r7, sp, #0
 801023e:	60f8      	str	r0, [r7, #12]
 8010240:	60b9      	str	r1, [r7, #8]
 8010242:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	68ba      	ldr	r2, [r7, #8]
 8010248:	2100      	movs	r1, #0
 801024a:	68f8      	ldr	r0, [r7, #12]
 801024c:	f000 fd3c 	bl	8010cc8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010250:	2300      	movs	r3, #0
}
 8010252:	4618      	mov	r0, r3
 8010254:	3710      	adds	r7, #16
 8010256:	46bd      	mov	sp, r7
 8010258:	bd80      	pop	{r7, pc}

0801025a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801025a:	b580      	push	{r7, lr}
 801025c:	b082      	sub	sp, #8
 801025e:	af00      	add	r7, sp, #0
 8010260:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	2204      	movs	r2, #4
 8010266:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801026a:	2300      	movs	r3, #0
 801026c:	2200      	movs	r2, #0
 801026e:	2100      	movs	r1, #0
 8010270:	6878      	ldr	r0, [r7, #4]
 8010272:	f000 fd08 	bl	8010c86 <USBD_LL_Transmit>

  return USBD_OK;
 8010276:	2300      	movs	r3, #0
}
 8010278:	4618      	mov	r0, r3
 801027a:	3708      	adds	r7, #8
 801027c:	46bd      	mov	sp, r7
 801027e:	bd80      	pop	{r7, pc}

08010280 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8010280:	b580      	push	{r7, lr}
 8010282:	b082      	sub	sp, #8
 8010284:	af00      	add	r7, sp, #0
 8010286:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	2205      	movs	r2, #5
 801028c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010290:	2300      	movs	r3, #0
 8010292:	2200      	movs	r2, #0
 8010294:	2100      	movs	r1, #0
 8010296:	6878      	ldr	r0, [r7, #4]
 8010298:	f000 fd16 	bl	8010cc8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801029c:	2300      	movs	r3, #0
}
 801029e:	4618      	mov	r0, r3
 80102a0:	3708      	adds	r7, #8
 80102a2:	46bd      	mov	sp, r7
 80102a4:	bd80      	pop	{r7, pc}
	...

080102a8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80102a8:	b580      	push	{r7, lr}
 80102aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80102ac:	2200      	movs	r2, #0
 80102ae:	4913      	ldr	r1, [pc, #76]	; (80102fc <MX_USB_DEVICE_Init+0x54>)
 80102b0:	4813      	ldr	r0, [pc, #76]	; (8010300 <MX_USB_DEVICE_Init+0x58>)
 80102b2:	f7fe fed3 	bl	800f05c <USBD_Init>
 80102b6:	4603      	mov	r3, r0
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d001      	beq.n	80102c0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80102bc:	f7f0 fda2 	bl	8000e04 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80102c0:	4910      	ldr	r1, [pc, #64]	; (8010304 <MX_USB_DEVICE_Init+0x5c>)
 80102c2:	480f      	ldr	r0, [pc, #60]	; (8010300 <MX_USB_DEVICE_Init+0x58>)
 80102c4:	f7fe ff00 	bl	800f0c8 <USBD_RegisterClass>
 80102c8:	4603      	mov	r3, r0
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d001      	beq.n	80102d2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80102ce:	f7f0 fd99 	bl	8000e04 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80102d2:	490d      	ldr	r1, [pc, #52]	; (8010308 <MX_USB_DEVICE_Init+0x60>)
 80102d4:	480a      	ldr	r0, [pc, #40]	; (8010300 <MX_USB_DEVICE_Init+0x58>)
 80102d6:	f7fe fe25 	bl	800ef24 <USBD_CDC_RegisterInterface>
 80102da:	4603      	mov	r3, r0
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d001      	beq.n	80102e4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80102e0:	f7f0 fd90 	bl	8000e04 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80102e4:	4806      	ldr	r0, [pc, #24]	; (8010300 <MX_USB_DEVICE_Init+0x58>)
 80102e6:	f7fe ff10 	bl	800f10a <USBD_Start>
 80102ea:	4603      	mov	r3, r0
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d001      	beq.n	80102f4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80102f0:	f7f0 fd88 	bl	8000e04 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80102f4:	f7f7 f9f8 	bl	80076e8 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80102f8:	bf00      	nop
 80102fa:	bd80      	pop	{r7, pc}
 80102fc:	24000134 	.word	0x24000134
 8010300:	24000760 	.word	0x24000760
 8010304:	2400001c 	.word	0x2400001c
 8010308:	24000120 	.word	0x24000120

0801030c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801030c:	b580      	push	{r7, lr}
 801030e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010310:	2200      	movs	r2, #0
 8010312:	4905      	ldr	r1, [pc, #20]	; (8010328 <CDC_Init_FS+0x1c>)
 8010314:	4805      	ldr	r0, [pc, #20]	; (801032c <CDC_Init_FS+0x20>)
 8010316:	f7fe fe1a 	bl	800ef4e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801031a:	4905      	ldr	r1, [pc, #20]	; (8010330 <CDC_Init_FS+0x24>)
 801031c:	4803      	ldr	r0, [pc, #12]	; (801032c <CDC_Init_FS+0x20>)
 801031e:	f7fe fe2f 	bl	800ef80 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8010322:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010324:	4618      	mov	r0, r3
 8010326:	bd80      	pop	{r7, pc}
 8010328:	24001230 	.word	0x24001230
 801032c:	24000760 	.word	0x24000760
 8010330:	24000a30 	.word	0x24000a30

08010334 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010334:	b480      	push	{r7}
 8010336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010338:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801033a:	4618      	mov	r0, r3
 801033c:	46bd      	mov	sp, r7
 801033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010342:	4770      	bx	lr

08010344 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010344:	b480      	push	{r7}
 8010346:	b083      	sub	sp, #12
 8010348:	af00      	add	r7, sp, #0
 801034a:	4603      	mov	r3, r0
 801034c:	6039      	str	r1, [r7, #0]
 801034e:	71fb      	strb	r3, [r7, #7]
 8010350:	4613      	mov	r3, r2
 8010352:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8010354:	79fb      	ldrb	r3, [r7, #7]
 8010356:	2b23      	cmp	r3, #35	; 0x23
 8010358:	f200 808c 	bhi.w	8010474 <CDC_Control_FS+0x130>
 801035c:	a201      	add	r2, pc, #4	; (adr r2, 8010364 <CDC_Control_FS+0x20>)
 801035e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010362:	bf00      	nop
 8010364:	08010475 	.word	0x08010475
 8010368:	08010475 	.word	0x08010475
 801036c:	08010475 	.word	0x08010475
 8010370:	08010475 	.word	0x08010475
 8010374:	08010475 	.word	0x08010475
 8010378:	08010475 	.word	0x08010475
 801037c:	08010475 	.word	0x08010475
 8010380:	08010475 	.word	0x08010475
 8010384:	08010475 	.word	0x08010475
 8010388:	08010475 	.word	0x08010475
 801038c:	08010475 	.word	0x08010475
 8010390:	08010475 	.word	0x08010475
 8010394:	08010475 	.word	0x08010475
 8010398:	08010475 	.word	0x08010475
 801039c:	08010475 	.word	0x08010475
 80103a0:	08010475 	.word	0x08010475
 80103a4:	08010475 	.word	0x08010475
 80103a8:	08010475 	.word	0x08010475
 80103ac:	08010475 	.word	0x08010475
 80103b0:	08010475 	.word	0x08010475
 80103b4:	08010475 	.word	0x08010475
 80103b8:	08010475 	.word	0x08010475
 80103bc:	08010475 	.word	0x08010475
 80103c0:	08010475 	.word	0x08010475
 80103c4:	08010475 	.word	0x08010475
 80103c8:	08010475 	.word	0x08010475
 80103cc:	08010475 	.word	0x08010475
 80103d0:	08010475 	.word	0x08010475
 80103d4:	08010475 	.word	0x08010475
 80103d8:	08010475 	.word	0x08010475
 80103dc:	08010475 	.word	0x08010475
 80103e0:	08010475 	.word	0x08010475
 80103e4:	080103f5 	.word	0x080103f5
 80103e8:	0801042f 	.word	0x0801042f
 80103ec:	08010475 	.word	0x08010475
 80103f0:	08010475 	.word	0x08010475
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      tempbuf[0]=pbuf[0];
 80103f4:	683b      	ldr	r3, [r7, #0]
 80103f6:	781a      	ldrb	r2, [r3, #0]
 80103f8:	4b22      	ldr	r3, [pc, #136]	; (8010484 <CDC_Control_FS+0x140>)
 80103fa:	701a      	strb	r2, [r3, #0]
      tempbuf[1]=pbuf[1];
 80103fc:	683b      	ldr	r3, [r7, #0]
 80103fe:	785a      	ldrb	r2, [r3, #1]
 8010400:	4b20      	ldr	r3, [pc, #128]	; (8010484 <CDC_Control_FS+0x140>)
 8010402:	705a      	strb	r2, [r3, #1]
      tempbuf[2]=pbuf[2];
 8010404:	683b      	ldr	r3, [r7, #0]
 8010406:	789a      	ldrb	r2, [r3, #2]
 8010408:	4b1e      	ldr	r3, [pc, #120]	; (8010484 <CDC_Control_FS+0x140>)
 801040a:	709a      	strb	r2, [r3, #2]
      tempbuf[3]=pbuf[3];
 801040c:	683b      	ldr	r3, [r7, #0]
 801040e:	78da      	ldrb	r2, [r3, #3]
 8010410:	4b1c      	ldr	r3, [pc, #112]	; (8010484 <CDC_Control_FS+0x140>)
 8010412:	70da      	strb	r2, [r3, #3]
      tempbuf[4]=pbuf[4];
 8010414:	683b      	ldr	r3, [r7, #0]
 8010416:	791a      	ldrb	r2, [r3, #4]
 8010418:	4b1a      	ldr	r3, [pc, #104]	; (8010484 <CDC_Control_FS+0x140>)
 801041a:	711a      	strb	r2, [r3, #4]
      tempbuf[5]=pbuf[5];
 801041c:	683b      	ldr	r3, [r7, #0]
 801041e:	795a      	ldrb	r2, [r3, #5]
 8010420:	4b18      	ldr	r3, [pc, #96]	; (8010484 <CDC_Control_FS+0x140>)
 8010422:	715a      	strb	r2, [r3, #5]
      tempbuf[6]=pbuf[6];
 8010424:	683b      	ldr	r3, [r7, #0]
 8010426:	799a      	ldrb	r2, [r3, #6]
 8010428:	4b16      	ldr	r3, [pc, #88]	; (8010484 <CDC_Control_FS+0x140>)
 801042a:	719a      	strb	r2, [r3, #6]

    break;
 801042c:	e023      	b.n	8010476 <CDC_Control_FS+0x132>

    case CDC_GET_LINE_CODING:
      pbuf[0]=tempbuf[0];
 801042e:	4b15      	ldr	r3, [pc, #84]	; (8010484 <CDC_Control_FS+0x140>)
 8010430:	781a      	ldrb	r2, [r3, #0]
 8010432:	683b      	ldr	r3, [r7, #0]
 8010434:	701a      	strb	r2, [r3, #0]
      pbuf[1]=tempbuf[1];
 8010436:	683b      	ldr	r3, [r7, #0]
 8010438:	3301      	adds	r3, #1
 801043a:	4a12      	ldr	r2, [pc, #72]	; (8010484 <CDC_Control_FS+0x140>)
 801043c:	7852      	ldrb	r2, [r2, #1]
 801043e:	701a      	strb	r2, [r3, #0]
      pbuf[2]=tempbuf[2];
 8010440:	683b      	ldr	r3, [r7, #0]
 8010442:	3302      	adds	r3, #2
 8010444:	4a0f      	ldr	r2, [pc, #60]	; (8010484 <CDC_Control_FS+0x140>)
 8010446:	7892      	ldrb	r2, [r2, #2]
 8010448:	701a      	strb	r2, [r3, #0]
      pbuf[3]=tempbuf[3];
 801044a:	683b      	ldr	r3, [r7, #0]
 801044c:	3303      	adds	r3, #3
 801044e:	4a0d      	ldr	r2, [pc, #52]	; (8010484 <CDC_Control_FS+0x140>)
 8010450:	78d2      	ldrb	r2, [r2, #3]
 8010452:	701a      	strb	r2, [r3, #0]
      pbuf[4]=tempbuf[4];
 8010454:	683b      	ldr	r3, [r7, #0]
 8010456:	3304      	adds	r3, #4
 8010458:	4a0a      	ldr	r2, [pc, #40]	; (8010484 <CDC_Control_FS+0x140>)
 801045a:	7912      	ldrb	r2, [r2, #4]
 801045c:	701a      	strb	r2, [r3, #0]
      pbuf[5]=tempbuf[5];
 801045e:	683b      	ldr	r3, [r7, #0]
 8010460:	3305      	adds	r3, #5
 8010462:	4a08      	ldr	r2, [pc, #32]	; (8010484 <CDC_Control_FS+0x140>)
 8010464:	7952      	ldrb	r2, [r2, #5]
 8010466:	701a      	strb	r2, [r3, #0]
      pbuf[6]=tempbuf[6];
 8010468:	683b      	ldr	r3, [r7, #0]
 801046a:	3306      	adds	r3, #6
 801046c:	4a05      	ldr	r2, [pc, #20]	; (8010484 <CDC_Control_FS+0x140>)
 801046e:	7992      	ldrb	r2, [r2, #6]
 8010470:	701a      	strb	r2, [r3, #0]

    break;
 8010472:	e000      	b.n	8010476 <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010474:	bf00      	nop
  }

  return (USBD_OK);
 8010476:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010478:	4618      	mov	r0, r3
 801047a:	370c      	adds	r7, #12
 801047c:	46bd      	mov	sp, r7
 801047e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010482:	4770      	bx	lr
 8010484:	24001a30 	.word	0x24001a30

08010488 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010488:	b580      	push	{r7, lr}
 801048a:	b084      	sub	sp, #16
 801048c:	af00      	add	r7, sp, #0
 801048e:	6078      	str	r0, [r7, #4]
 8010490:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8010492:	6879      	ldr	r1, [r7, #4]
 8010494:	4809      	ldr	r0, [pc, #36]	; (80104bc <CDC_Receive_FS+0x34>)
 8010496:	f7fe fd73 	bl	800ef80 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801049a:	4808      	ldr	r0, [pc, #32]	; (80104bc <CDC_Receive_FS+0x34>)
 801049c:	f7fe fdb4 	bl	800f008 <USBD_CDC_ReceivePacket>
  uint16_t len = *Len;
 80104a0:	683b      	ldr	r3, [r7, #0]
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	81fb      	strh	r3, [r7, #14]
  CDC_Transmit_FS(Buf, len);
 80104a6:	89fb      	ldrh	r3, [r7, #14]
 80104a8:	4619      	mov	r1, r3
 80104aa:	6878      	ldr	r0, [r7, #4]
 80104ac:	f000 f808 	bl	80104c0 <CDC_Transmit_FS>
  return (USBD_OK);
 80104b0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80104b2:	4618      	mov	r0, r3
 80104b4:	3710      	adds	r7, #16
 80104b6:	46bd      	mov	sp, r7
 80104b8:	bd80      	pop	{r7, pc}
 80104ba:	bf00      	nop
 80104bc:	24000760 	.word	0x24000760

080104c0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80104c0:	b580      	push	{r7, lr}
 80104c2:	b084      	sub	sp, #16
 80104c4:	af00      	add	r7, sp, #0
 80104c6:	6078      	str	r0, [r7, #4]
 80104c8:	460b      	mov	r3, r1
 80104ca:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80104cc:	2300      	movs	r3, #0
 80104ce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80104d0:	4b0d      	ldr	r3, [pc, #52]	; (8010508 <CDC_Transmit_FS+0x48>)
 80104d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80104d6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80104d8:	68bb      	ldr	r3, [r7, #8]
 80104da:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d001      	beq.n	80104e6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80104e2:	2301      	movs	r3, #1
 80104e4:	e00b      	b.n	80104fe <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80104e6:	887b      	ldrh	r3, [r7, #2]
 80104e8:	461a      	mov	r2, r3
 80104ea:	6879      	ldr	r1, [r7, #4]
 80104ec:	4806      	ldr	r0, [pc, #24]	; (8010508 <CDC_Transmit_FS+0x48>)
 80104ee:	f7fe fd2e 	bl	800ef4e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80104f2:	4805      	ldr	r0, [pc, #20]	; (8010508 <CDC_Transmit_FS+0x48>)
 80104f4:	f7fe fd58 	bl	800efa8 <USBD_CDC_TransmitPacket>
 80104f8:	4603      	mov	r3, r0
 80104fa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80104fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80104fe:	4618      	mov	r0, r3
 8010500:	3710      	adds	r7, #16
 8010502:	46bd      	mov	sp, r7
 8010504:	bd80      	pop	{r7, pc}
 8010506:	bf00      	nop
 8010508:	24000760 	.word	0x24000760

0801050c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801050c:	b480      	push	{r7}
 801050e:	b087      	sub	sp, #28
 8010510:	af00      	add	r7, sp, #0
 8010512:	60f8      	str	r0, [r7, #12]
 8010514:	60b9      	str	r1, [r7, #8]
 8010516:	4613      	mov	r3, r2
 8010518:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801051a:	2300      	movs	r3, #0
 801051c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801051e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010522:	4618      	mov	r0, r3
 8010524:	371c      	adds	r7, #28
 8010526:	46bd      	mov	sp, r7
 8010528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801052c:	4770      	bx	lr
	...

08010530 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010530:	b480      	push	{r7}
 8010532:	b083      	sub	sp, #12
 8010534:	af00      	add	r7, sp, #0
 8010536:	4603      	mov	r3, r0
 8010538:	6039      	str	r1, [r7, #0]
 801053a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801053c:	683b      	ldr	r3, [r7, #0]
 801053e:	2212      	movs	r2, #18
 8010540:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8010542:	4b03      	ldr	r3, [pc, #12]	; (8010550 <USBD_FS_DeviceDescriptor+0x20>)
}
 8010544:	4618      	mov	r0, r3
 8010546:	370c      	adds	r7, #12
 8010548:	46bd      	mov	sp, r7
 801054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801054e:	4770      	bx	lr
 8010550:	24000150 	.word	0x24000150

08010554 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010554:	b480      	push	{r7}
 8010556:	b083      	sub	sp, #12
 8010558:	af00      	add	r7, sp, #0
 801055a:	4603      	mov	r3, r0
 801055c:	6039      	str	r1, [r7, #0]
 801055e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010560:	683b      	ldr	r3, [r7, #0]
 8010562:	2204      	movs	r2, #4
 8010564:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010566:	4b03      	ldr	r3, [pc, #12]	; (8010574 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010568:	4618      	mov	r0, r3
 801056a:	370c      	adds	r7, #12
 801056c:	46bd      	mov	sp, r7
 801056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010572:	4770      	bx	lr
 8010574:	24000164 	.word	0x24000164

08010578 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010578:	b580      	push	{r7, lr}
 801057a:	b082      	sub	sp, #8
 801057c:	af00      	add	r7, sp, #0
 801057e:	4603      	mov	r3, r0
 8010580:	6039      	str	r1, [r7, #0]
 8010582:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010584:	79fb      	ldrb	r3, [r7, #7]
 8010586:	2b00      	cmp	r3, #0
 8010588:	d105      	bne.n	8010596 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801058a:	683a      	ldr	r2, [r7, #0]
 801058c:	4907      	ldr	r1, [pc, #28]	; (80105ac <USBD_FS_ProductStrDescriptor+0x34>)
 801058e:	4808      	ldr	r0, [pc, #32]	; (80105b0 <USBD_FS_ProductStrDescriptor+0x38>)
 8010590:	f7ff fda9 	bl	80100e6 <USBD_GetString>
 8010594:	e004      	b.n	80105a0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010596:	683a      	ldr	r2, [r7, #0]
 8010598:	4904      	ldr	r1, [pc, #16]	; (80105ac <USBD_FS_ProductStrDescriptor+0x34>)
 801059a:	4805      	ldr	r0, [pc, #20]	; (80105b0 <USBD_FS_ProductStrDescriptor+0x38>)
 801059c:	f7ff fda3 	bl	80100e6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80105a0:	4b02      	ldr	r3, [pc, #8]	; (80105ac <USBD_FS_ProductStrDescriptor+0x34>)
}
 80105a2:	4618      	mov	r0, r3
 80105a4:	3708      	adds	r7, #8
 80105a6:	46bd      	mov	sp, r7
 80105a8:	bd80      	pop	{r7, pc}
 80105aa:	bf00      	nop
 80105ac:	24001a38 	.word	0x24001a38
 80105b0:	080136f0 	.word	0x080136f0

080105b4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80105b4:	b580      	push	{r7, lr}
 80105b6:	b082      	sub	sp, #8
 80105b8:	af00      	add	r7, sp, #0
 80105ba:	4603      	mov	r3, r0
 80105bc:	6039      	str	r1, [r7, #0]
 80105be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80105c0:	683a      	ldr	r2, [r7, #0]
 80105c2:	4904      	ldr	r1, [pc, #16]	; (80105d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80105c4:	4804      	ldr	r0, [pc, #16]	; (80105d8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80105c6:	f7ff fd8e 	bl	80100e6 <USBD_GetString>
  return USBD_StrDesc;
 80105ca:	4b02      	ldr	r3, [pc, #8]	; (80105d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80105cc:	4618      	mov	r0, r3
 80105ce:	3708      	adds	r7, #8
 80105d0:	46bd      	mov	sp, r7
 80105d2:	bd80      	pop	{r7, pc}
 80105d4:	24001a38 	.word	0x24001a38
 80105d8:	08013708 	.word	0x08013708

080105dc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80105dc:	b580      	push	{r7, lr}
 80105de:	b082      	sub	sp, #8
 80105e0:	af00      	add	r7, sp, #0
 80105e2:	4603      	mov	r3, r0
 80105e4:	6039      	str	r1, [r7, #0]
 80105e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80105e8:	683b      	ldr	r3, [r7, #0]
 80105ea:	221a      	movs	r2, #26
 80105ec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80105ee:	f000 f843 	bl	8010678 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80105f2:	4b02      	ldr	r3, [pc, #8]	; (80105fc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80105f4:	4618      	mov	r0, r3
 80105f6:	3708      	adds	r7, #8
 80105f8:	46bd      	mov	sp, r7
 80105fa:	bd80      	pop	{r7, pc}
 80105fc:	24000168 	.word	0x24000168

08010600 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010600:	b580      	push	{r7, lr}
 8010602:	b082      	sub	sp, #8
 8010604:	af00      	add	r7, sp, #0
 8010606:	4603      	mov	r3, r0
 8010608:	6039      	str	r1, [r7, #0]
 801060a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801060c:	79fb      	ldrb	r3, [r7, #7]
 801060e:	2b00      	cmp	r3, #0
 8010610:	d105      	bne.n	801061e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010612:	683a      	ldr	r2, [r7, #0]
 8010614:	4907      	ldr	r1, [pc, #28]	; (8010634 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010616:	4808      	ldr	r0, [pc, #32]	; (8010638 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010618:	f7ff fd65 	bl	80100e6 <USBD_GetString>
 801061c:	e004      	b.n	8010628 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801061e:	683a      	ldr	r2, [r7, #0]
 8010620:	4904      	ldr	r1, [pc, #16]	; (8010634 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010622:	4805      	ldr	r0, [pc, #20]	; (8010638 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010624:	f7ff fd5f 	bl	80100e6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010628:	4b02      	ldr	r3, [pc, #8]	; (8010634 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801062a:	4618      	mov	r0, r3
 801062c:	3708      	adds	r7, #8
 801062e:	46bd      	mov	sp, r7
 8010630:	bd80      	pop	{r7, pc}
 8010632:	bf00      	nop
 8010634:	24001a38 	.word	0x24001a38
 8010638:	0801371c 	.word	0x0801371c

0801063c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801063c:	b580      	push	{r7, lr}
 801063e:	b082      	sub	sp, #8
 8010640:	af00      	add	r7, sp, #0
 8010642:	4603      	mov	r3, r0
 8010644:	6039      	str	r1, [r7, #0]
 8010646:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010648:	79fb      	ldrb	r3, [r7, #7]
 801064a:	2b00      	cmp	r3, #0
 801064c:	d105      	bne.n	801065a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801064e:	683a      	ldr	r2, [r7, #0]
 8010650:	4907      	ldr	r1, [pc, #28]	; (8010670 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010652:	4808      	ldr	r0, [pc, #32]	; (8010674 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010654:	f7ff fd47 	bl	80100e6 <USBD_GetString>
 8010658:	e004      	b.n	8010664 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801065a:	683a      	ldr	r2, [r7, #0]
 801065c:	4904      	ldr	r1, [pc, #16]	; (8010670 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801065e:	4805      	ldr	r0, [pc, #20]	; (8010674 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010660:	f7ff fd41 	bl	80100e6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010664:	4b02      	ldr	r3, [pc, #8]	; (8010670 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010666:	4618      	mov	r0, r3
 8010668:	3708      	adds	r7, #8
 801066a:	46bd      	mov	sp, r7
 801066c:	bd80      	pop	{r7, pc}
 801066e:	bf00      	nop
 8010670:	24001a38 	.word	0x24001a38
 8010674:	08013728 	.word	0x08013728

08010678 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010678:	b580      	push	{r7, lr}
 801067a:	b084      	sub	sp, #16
 801067c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801067e:	4b0f      	ldr	r3, [pc, #60]	; (80106bc <Get_SerialNum+0x44>)
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010684:	4b0e      	ldr	r3, [pc, #56]	; (80106c0 <Get_SerialNum+0x48>)
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801068a:	4b0e      	ldr	r3, [pc, #56]	; (80106c4 <Get_SerialNum+0x4c>)
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010690:	68fa      	ldr	r2, [r7, #12]
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	4413      	add	r3, r2
 8010696:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	2b00      	cmp	r3, #0
 801069c:	d009      	beq.n	80106b2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801069e:	2208      	movs	r2, #8
 80106a0:	4909      	ldr	r1, [pc, #36]	; (80106c8 <Get_SerialNum+0x50>)
 80106a2:	68f8      	ldr	r0, [r7, #12]
 80106a4:	f000 f814 	bl	80106d0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80106a8:	2204      	movs	r2, #4
 80106aa:	4908      	ldr	r1, [pc, #32]	; (80106cc <Get_SerialNum+0x54>)
 80106ac:	68b8      	ldr	r0, [r7, #8]
 80106ae:	f000 f80f 	bl	80106d0 <IntToUnicode>
  }
}
 80106b2:	bf00      	nop
 80106b4:	3710      	adds	r7, #16
 80106b6:	46bd      	mov	sp, r7
 80106b8:	bd80      	pop	{r7, pc}
 80106ba:	bf00      	nop
 80106bc:	1ff1e800 	.word	0x1ff1e800
 80106c0:	1ff1e804 	.word	0x1ff1e804
 80106c4:	1ff1e808 	.word	0x1ff1e808
 80106c8:	2400016a 	.word	0x2400016a
 80106cc:	2400017a 	.word	0x2400017a

080106d0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80106d0:	b480      	push	{r7}
 80106d2:	b087      	sub	sp, #28
 80106d4:	af00      	add	r7, sp, #0
 80106d6:	60f8      	str	r0, [r7, #12]
 80106d8:	60b9      	str	r1, [r7, #8]
 80106da:	4613      	mov	r3, r2
 80106dc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80106de:	2300      	movs	r3, #0
 80106e0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80106e2:	2300      	movs	r3, #0
 80106e4:	75fb      	strb	r3, [r7, #23]
 80106e6:	e027      	b.n	8010738 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	0f1b      	lsrs	r3, r3, #28
 80106ec:	2b09      	cmp	r3, #9
 80106ee:	d80b      	bhi.n	8010708 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	0f1b      	lsrs	r3, r3, #28
 80106f4:	b2da      	uxtb	r2, r3
 80106f6:	7dfb      	ldrb	r3, [r7, #23]
 80106f8:	005b      	lsls	r3, r3, #1
 80106fa:	4619      	mov	r1, r3
 80106fc:	68bb      	ldr	r3, [r7, #8]
 80106fe:	440b      	add	r3, r1
 8010700:	3230      	adds	r2, #48	; 0x30
 8010702:	b2d2      	uxtb	r2, r2
 8010704:	701a      	strb	r2, [r3, #0]
 8010706:	e00a      	b.n	801071e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010708:	68fb      	ldr	r3, [r7, #12]
 801070a:	0f1b      	lsrs	r3, r3, #28
 801070c:	b2da      	uxtb	r2, r3
 801070e:	7dfb      	ldrb	r3, [r7, #23]
 8010710:	005b      	lsls	r3, r3, #1
 8010712:	4619      	mov	r1, r3
 8010714:	68bb      	ldr	r3, [r7, #8]
 8010716:	440b      	add	r3, r1
 8010718:	3237      	adds	r2, #55	; 0x37
 801071a:	b2d2      	uxtb	r2, r2
 801071c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	011b      	lsls	r3, r3, #4
 8010722:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010724:	7dfb      	ldrb	r3, [r7, #23]
 8010726:	005b      	lsls	r3, r3, #1
 8010728:	3301      	adds	r3, #1
 801072a:	68ba      	ldr	r2, [r7, #8]
 801072c:	4413      	add	r3, r2
 801072e:	2200      	movs	r2, #0
 8010730:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010732:	7dfb      	ldrb	r3, [r7, #23]
 8010734:	3301      	adds	r3, #1
 8010736:	75fb      	strb	r3, [r7, #23]
 8010738:	7dfa      	ldrb	r2, [r7, #23]
 801073a:	79fb      	ldrb	r3, [r7, #7]
 801073c:	429a      	cmp	r2, r3
 801073e:	d3d3      	bcc.n	80106e8 <IntToUnicode+0x18>
  }
}
 8010740:	bf00      	nop
 8010742:	bf00      	nop
 8010744:	371c      	adds	r7, #28
 8010746:	46bd      	mov	sp, r7
 8010748:	f85d 7b04 	ldr.w	r7, [sp], #4
 801074c:	4770      	bx	lr
	...

08010750 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010750:	b580      	push	{r7, lr}
 8010752:	b0b8      	sub	sp, #224	; 0xe0
 8010754:	af00      	add	r7, sp, #0
 8010756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010758:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801075c:	2200      	movs	r2, #0
 801075e:	601a      	str	r2, [r3, #0]
 8010760:	605a      	str	r2, [r3, #4]
 8010762:	609a      	str	r2, [r3, #8]
 8010764:	60da      	str	r2, [r3, #12]
 8010766:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8010768:	f107 0310 	add.w	r3, r7, #16
 801076c:	22bc      	movs	r2, #188	; 0xbc
 801076e:	2100      	movs	r1, #0
 8010770:	4618      	mov	r0, r3
 8010772:	f000 fb51 	bl	8010e18 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	4a2a      	ldr	r2, [pc, #168]	; (8010824 <HAL_PCD_MspInit+0xd4>)
 801077c:	4293      	cmp	r3, r2
 801077e:	d14c      	bne.n	801081a <HAL_PCD_MspInit+0xca>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

     /* USER CODE END SPI1_MspInit 0 */
     /** Initializes the peripherals clock
     */
       PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8010780:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010784:	613b      	str	r3, [r7, #16]
      PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8010786:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 801078a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
          if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801078e:	f107 0310 	add.w	r3, r7, #16
 8010792:	4618      	mov	r0, r3
 8010794:	f7f7 ff94 	bl	80086c0 <HAL_RCCEx_PeriphCLKConfig>
 8010798:	4603      	mov	r3, r0
 801079a:	2b00      	cmp	r3, #0
 801079c:	d001      	beq.n	80107a2 <HAL_PCD_MspInit+0x52>
          {
            Error_Handler();
 801079e:	f7f0 fb31 	bl	8000e04 <Error_Handler>
          }
  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80107a2:	4b21      	ldr	r3, [pc, #132]	; (8010828 <HAL_PCD_MspInit+0xd8>)
 80107a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80107a8:	4a1f      	ldr	r2, [pc, #124]	; (8010828 <HAL_PCD_MspInit+0xd8>)
 80107aa:	f043 0301 	orr.w	r3, r3, #1
 80107ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80107b2:	4b1d      	ldr	r3, [pc, #116]	; (8010828 <HAL_PCD_MspInit+0xd8>)
 80107b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80107b8:	f003 0301 	and.w	r3, r3, #1
 80107bc:	60fb      	str	r3, [r7, #12]
 80107be:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80107c0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80107c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80107c8:	2302      	movs	r3, #2
 80107ca:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80107ce:	2300      	movs	r3, #0
 80107d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80107d4:	2300      	movs	r3, #0
 80107d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80107da:	230a      	movs	r3, #10
 80107dc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80107e0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80107e4:	4619      	mov	r1, r3
 80107e6:	4811      	ldr	r0, [pc, #68]	; (801082c <HAL_PCD_MspInit+0xdc>)
 80107e8:	f7f4 fba4 	bl	8004f34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80107ec:	4b0e      	ldr	r3, [pc, #56]	; (8010828 <HAL_PCD_MspInit+0xd8>)
 80107ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80107f2:	4a0d      	ldr	r2, [pc, #52]	; (8010828 <HAL_PCD_MspInit+0xd8>)
 80107f4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80107f8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80107fc:	4b0a      	ldr	r3, [pc, #40]	; (8010828 <HAL_PCD_MspInit+0xd8>)
 80107fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8010802:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010806:	60bb      	str	r3, [r7, #8]
 8010808:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801080a:	2200      	movs	r2, #0
 801080c:	2100      	movs	r1, #0
 801080e:	2065      	movs	r0, #101	; 0x65
 8010810:	f7f1 fc7b 	bl	800210a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010814:	2065      	movs	r0, #101	; 0x65
 8010816:	f7f1 fc92 	bl	800213e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801081a:	bf00      	nop
 801081c:	37e0      	adds	r7, #224	; 0xe0
 801081e:	46bd      	mov	sp, r7
 8010820:	bd80      	pop	{r7, pc}
 8010822:	bf00      	nop
 8010824:	40080000 	.word	0x40080000
 8010828:	58024400 	.word	0x58024400
 801082c:	58020000 	.word	0x58020000

08010830 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010830:	b580      	push	{r7, lr}
 8010832:	b082      	sub	sp, #8
 8010834:	af00      	add	r7, sp, #0
 8010836:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8010844:	4619      	mov	r1, r3
 8010846:	4610      	mov	r0, r2
 8010848:	f7fe fcaa 	bl	800f1a0 <USBD_LL_SetupStage>
}
 801084c:	bf00      	nop
 801084e:	3708      	adds	r7, #8
 8010850:	46bd      	mov	sp, r7
 8010852:	bd80      	pop	{r7, pc}

08010854 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010854:	b580      	push	{r7, lr}
 8010856:	b082      	sub	sp, #8
 8010858:	af00      	add	r7, sp, #0
 801085a:	6078      	str	r0, [r7, #4]
 801085c:	460b      	mov	r3, r1
 801085e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8010866:	78fa      	ldrb	r2, [r7, #3]
 8010868:	6879      	ldr	r1, [r7, #4]
 801086a:	4613      	mov	r3, r2
 801086c:	00db      	lsls	r3, r3, #3
 801086e:	1a9b      	subs	r3, r3, r2
 8010870:	009b      	lsls	r3, r3, #2
 8010872:	440b      	add	r3, r1
 8010874:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8010878:	681a      	ldr	r2, [r3, #0]
 801087a:	78fb      	ldrb	r3, [r7, #3]
 801087c:	4619      	mov	r1, r3
 801087e:	f7fe fce4 	bl	800f24a <USBD_LL_DataOutStage>
}
 8010882:	bf00      	nop
 8010884:	3708      	adds	r7, #8
 8010886:	46bd      	mov	sp, r7
 8010888:	bd80      	pop	{r7, pc}

0801088a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801088a:	b580      	push	{r7, lr}
 801088c:	b082      	sub	sp, #8
 801088e:	af00      	add	r7, sp, #0
 8010890:	6078      	str	r0, [r7, #4]
 8010892:	460b      	mov	r3, r1
 8010894:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801089c:	78fa      	ldrb	r2, [r7, #3]
 801089e:	6879      	ldr	r1, [r7, #4]
 80108a0:	4613      	mov	r3, r2
 80108a2:	00db      	lsls	r3, r3, #3
 80108a4:	1a9b      	subs	r3, r3, r2
 80108a6:	009b      	lsls	r3, r3, #2
 80108a8:	440b      	add	r3, r1
 80108aa:	3348      	adds	r3, #72	; 0x48
 80108ac:	681a      	ldr	r2, [r3, #0]
 80108ae:	78fb      	ldrb	r3, [r7, #3]
 80108b0:	4619      	mov	r1, r3
 80108b2:	f7fe fd2f 	bl	800f314 <USBD_LL_DataInStage>
}
 80108b6:	bf00      	nop
 80108b8:	3708      	adds	r7, #8
 80108ba:	46bd      	mov	sp, r7
 80108bc:	bd80      	pop	{r7, pc}

080108be <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80108be:	b580      	push	{r7, lr}
 80108c0:	b082      	sub	sp, #8
 80108c2:	af00      	add	r7, sp, #0
 80108c4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80108cc:	4618      	mov	r0, r3
 80108ce:	f7fe fe38 	bl	800f542 <USBD_LL_SOF>
}
 80108d2:	bf00      	nop
 80108d4:	3708      	adds	r7, #8
 80108d6:	46bd      	mov	sp, r7
 80108d8:	bd80      	pop	{r7, pc}

080108da <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80108da:	b580      	push	{r7, lr}
 80108dc:	b084      	sub	sp, #16
 80108de:	af00      	add	r7, sp, #0
 80108e0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80108e2:	2301      	movs	r3, #1
 80108e4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	68db      	ldr	r3, [r3, #12]
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d102      	bne.n	80108f4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80108ee:	2300      	movs	r3, #0
 80108f0:	73fb      	strb	r3, [r7, #15]
 80108f2:	e008      	b.n	8010906 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	68db      	ldr	r3, [r3, #12]
 80108f8:	2b02      	cmp	r3, #2
 80108fa:	d102      	bne.n	8010902 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80108fc:	2301      	movs	r3, #1
 80108fe:	73fb      	strb	r3, [r7, #15]
 8010900:	e001      	b.n	8010906 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8010902:	f7f0 fa7f 	bl	8000e04 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801090c:	7bfa      	ldrb	r2, [r7, #15]
 801090e:	4611      	mov	r1, r2
 8010910:	4618      	mov	r0, r3
 8010912:	f7fe fdd8 	bl	800f4c6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801091c:	4618      	mov	r0, r3
 801091e:	f7fe fd91 	bl	800f444 <USBD_LL_Reset>
}
 8010922:	bf00      	nop
 8010924:	3710      	adds	r7, #16
 8010926:	46bd      	mov	sp, r7
 8010928:	bd80      	pop	{r7, pc}
	...

0801092c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801092c:	b580      	push	{r7, lr}
 801092e:	b082      	sub	sp, #8
 8010930:	af00      	add	r7, sp, #0
 8010932:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801093a:	4618      	mov	r0, r3
 801093c:	f7fe fdd3 	bl	800f4e6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	687a      	ldr	r2, [r7, #4]
 801094c:	6812      	ldr	r2, [r2, #0]
 801094e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010952:	f043 0301 	orr.w	r3, r3, #1
 8010956:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	6a1b      	ldr	r3, [r3, #32]
 801095c:	2b00      	cmp	r3, #0
 801095e:	d005      	beq.n	801096c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010960:	4b04      	ldr	r3, [pc, #16]	; (8010974 <HAL_PCD_SuspendCallback+0x48>)
 8010962:	691b      	ldr	r3, [r3, #16]
 8010964:	4a03      	ldr	r2, [pc, #12]	; (8010974 <HAL_PCD_SuspendCallback+0x48>)
 8010966:	f043 0306 	orr.w	r3, r3, #6
 801096a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801096c:	bf00      	nop
 801096e:	3708      	adds	r7, #8
 8010970:	46bd      	mov	sp, r7
 8010972:	bd80      	pop	{r7, pc}
 8010974:	e000ed00 	.word	0xe000ed00

08010978 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010978:	b580      	push	{r7, lr}
 801097a:	b082      	sub	sp, #8
 801097c:	af00      	add	r7, sp, #0
 801097e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010986:	4618      	mov	r0, r3
 8010988:	f7fe fdc3 	bl	800f512 <USBD_LL_Resume>
}
 801098c:	bf00      	nop
 801098e:	3708      	adds	r7, #8
 8010990:	46bd      	mov	sp, r7
 8010992:	bd80      	pop	{r7, pc}

08010994 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010994:	b580      	push	{r7, lr}
 8010996:	b082      	sub	sp, #8
 8010998:	af00      	add	r7, sp, #0
 801099a:	6078      	str	r0, [r7, #4]
 801099c:	460b      	mov	r3, r1
 801099e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80109a6:	78fa      	ldrb	r2, [r7, #3]
 80109a8:	4611      	mov	r1, r2
 80109aa:	4618      	mov	r0, r3
 80109ac:	f7fe fdf1 	bl	800f592 <USBD_LL_IsoOUTIncomplete>
}
 80109b0:	bf00      	nop
 80109b2:	3708      	adds	r7, #8
 80109b4:	46bd      	mov	sp, r7
 80109b6:	bd80      	pop	{r7, pc}

080109b8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80109b8:	b580      	push	{r7, lr}
 80109ba:	b082      	sub	sp, #8
 80109bc:	af00      	add	r7, sp, #0
 80109be:	6078      	str	r0, [r7, #4]
 80109c0:	460b      	mov	r3, r1
 80109c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80109ca:	78fa      	ldrb	r2, [r7, #3]
 80109cc:	4611      	mov	r1, r2
 80109ce:	4618      	mov	r0, r3
 80109d0:	f7fe fdd2 	bl	800f578 <USBD_LL_IsoINIncomplete>
}
 80109d4:	bf00      	nop
 80109d6:	3708      	adds	r7, #8
 80109d8:	46bd      	mov	sp, r7
 80109da:	bd80      	pop	{r7, pc}

080109dc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80109dc:	b580      	push	{r7, lr}
 80109de:	b082      	sub	sp, #8
 80109e0:	af00      	add	r7, sp, #0
 80109e2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80109ea:	4618      	mov	r0, r3
 80109ec:	f7fe fdde 	bl	800f5ac <USBD_LL_DevConnected>
}
 80109f0:	bf00      	nop
 80109f2:	3708      	adds	r7, #8
 80109f4:	46bd      	mov	sp, r7
 80109f6:	bd80      	pop	{r7, pc}

080109f8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80109f8:	b580      	push	{r7, lr}
 80109fa:	b082      	sub	sp, #8
 80109fc:	af00      	add	r7, sp, #0
 80109fe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010a06:	4618      	mov	r0, r3
 8010a08:	f7fe fddb 	bl	800f5c2 <USBD_LL_DevDisconnected>
}
 8010a0c:	bf00      	nop
 8010a0e:	3708      	adds	r7, #8
 8010a10:	46bd      	mov	sp, r7
 8010a12:	bd80      	pop	{r7, pc}

08010a14 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010a14:	b580      	push	{r7, lr}
 8010a16:	b082      	sub	sp, #8
 8010a18:	af00      	add	r7, sp, #0
 8010a1a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	781b      	ldrb	r3, [r3, #0]
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d13e      	bne.n	8010aa2 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8010a24:	4a21      	ldr	r2, [pc, #132]	; (8010aac <USBD_LL_Init+0x98>)
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	4a1f      	ldr	r2, [pc, #124]	; (8010aac <USBD_LL_Init+0x98>)
 8010a30:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010a34:	4b1d      	ldr	r3, [pc, #116]	; (8010aac <USBD_LL_Init+0x98>)
 8010a36:	4a1e      	ldr	r2, [pc, #120]	; (8010ab0 <USBD_LL_Init+0x9c>)
 8010a38:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8010a3a:	4b1c      	ldr	r3, [pc, #112]	; (8010aac <USBD_LL_Init+0x98>)
 8010a3c:	2209      	movs	r2, #9
 8010a3e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8010a40:	4b1a      	ldr	r3, [pc, #104]	; (8010aac <USBD_LL_Init+0x98>)
 8010a42:	2202      	movs	r2, #2
 8010a44:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010a46:	4b19      	ldr	r3, [pc, #100]	; (8010aac <USBD_LL_Init+0x98>)
 8010a48:	2200      	movs	r2, #0
 8010a4a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010a4c:	4b17      	ldr	r3, [pc, #92]	; (8010aac <USBD_LL_Init+0x98>)
 8010a4e:	2202      	movs	r2, #2
 8010a50:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010a52:	4b16      	ldr	r3, [pc, #88]	; (8010aac <USBD_LL_Init+0x98>)
 8010a54:	2200      	movs	r2, #0
 8010a56:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8010a58:	4b14      	ldr	r3, [pc, #80]	; (8010aac <USBD_LL_Init+0x98>)
 8010a5a:	2200      	movs	r2, #0
 8010a5c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8010a5e:	4b13      	ldr	r3, [pc, #76]	; (8010aac <USBD_LL_Init+0x98>)
 8010a60:	2200      	movs	r2, #0
 8010a62:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8010a64:	4b11      	ldr	r3, [pc, #68]	; (8010aac <USBD_LL_Init+0x98>)
 8010a66:	2200      	movs	r2, #0
 8010a68:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8010a6a:	4b10      	ldr	r3, [pc, #64]	; (8010aac <USBD_LL_Init+0x98>)
 8010a6c:	2200      	movs	r2, #0
 8010a6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8010a70:	4b0e      	ldr	r3, [pc, #56]	; (8010aac <USBD_LL_Init+0x98>)
 8010a72:	2200      	movs	r2, #0
 8010a74:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8010a76:	480d      	ldr	r0, [pc, #52]	; (8010aac <USBD_LL_Init+0x98>)
 8010a78:	f7f5 fc00 	bl	800627c <HAL_PCD_Init>
 8010a7c:	4603      	mov	r3, r0
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d001      	beq.n	8010a86 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8010a82:	f7f0 f9bf 	bl	8000e04 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8010a86:	2180      	movs	r1, #128	; 0x80
 8010a88:	4808      	ldr	r0, [pc, #32]	; (8010aac <USBD_LL_Init+0x98>)
 8010a8a:	f7f6 fd92 	bl	80075b2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8010a8e:	2240      	movs	r2, #64	; 0x40
 8010a90:	2100      	movs	r1, #0
 8010a92:	4806      	ldr	r0, [pc, #24]	; (8010aac <USBD_LL_Init+0x98>)
 8010a94:	f7f6 fd46 	bl	8007524 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8010a98:	2280      	movs	r2, #128	; 0x80
 8010a9a:	2101      	movs	r1, #1
 8010a9c:	4803      	ldr	r0, [pc, #12]	; (8010aac <USBD_LL_Init+0x98>)
 8010a9e:	f7f6 fd41 	bl	8007524 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8010aa2:	2300      	movs	r3, #0
}
 8010aa4:	4618      	mov	r0, r3
 8010aa6:	3708      	adds	r7, #8
 8010aa8:	46bd      	mov	sp, r7
 8010aaa:	bd80      	pop	{r7, pc}
 8010aac:	24001c38 	.word	0x24001c38
 8010ab0:	40080000 	.word	0x40080000

08010ab4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010ab4:	b580      	push	{r7, lr}
 8010ab6:	b084      	sub	sp, #16
 8010ab8:	af00      	add	r7, sp, #0
 8010aba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010abc:	2300      	movs	r3, #0
 8010abe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010ac0:	2300      	movs	r3, #0
 8010ac2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010aca:	4618      	mov	r0, r3
 8010acc:	f7f5 fcfa 	bl	80064c4 <HAL_PCD_Start>
 8010ad0:	4603      	mov	r3, r0
 8010ad2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010ad4:	7bfb      	ldrb	r3, [r7, #15]
 8010ad6:	4618      	mov	r0, r3
 8010ad8:	f000 f92a 	bl	8010d30 <USBD_Get_USB_Status>
 8010adc:	4603      	mov	r3, r0
 8010ade:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010ae0:	7bbb      	ldrb	r3, [r7, #14]
}
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	3710      	adds	r7, #16
 8010ae6:	46bd      	mov	sp, r7
 8010ae8:	bd80      	pop	{r7, pc}

08010aea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010aea:	b580      	push	{r7, lr}
 8010aec:	b084      	sub	sp, #16
 8010aee:	af00      	add	r7, sp, #0
 8010af0:	6078      	str	r0, [r7, #4]
 8010af2:	4608      	mov	r0, r1
 8010af4:	4611      	mov	r1, r2
 8010af6:	461a      	mov	r2, r3
 8010af8:	4603      	mov	r3, r0
 8010afa:	70fb      	strb	r3, [r7, #3]
 8010afc:	460b      	mov	r3, r1
 8010afe:	70bb      	strb	r3, [r7, #2]
 8010b00:	4613      	mov	r3, r2
 8010b02:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010b04:	2300      	movs	r3, #0
 8010b06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010b08:	2300      	movs	r3, #0
 8010b0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010b12:	78bb      	ldrb	r3, [r7, #2]
 8010b14:	883a      	ldrh	r2, [r7, #0]
 8010b16:	78f9      	ldrb	r1, [r7, #3]
 8010b18:	f7f6 f90b 	bl	8006d32 <HAL_PCD_EP_Open>
 8010b1c:	4603      	mov	r3, r0
 8010b1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010b20:	7bfb      	ldrb	r3, [r7, #15]
 8010b22:	4618      	mov	r0, r3
 8010b24:	f000 f904 	bl	8010d30 <USBD_Get_USB_Status>
 8010b28:	4603      	mov	r3, r0
 8010b2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010b2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8010b2e:	4618      	mov	r0, r3
 8010b30:	3710      	adds	r7, #16
 8010b32:	46bd      	mov	sp, r7
 8010b34:	bd80      	pop	{r7, pc}

08010b36 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010b36:	b580      	push	{r7, lr}
 8010b38:	b084      	sub	sp, #16
 8010b3a:	af00      	add	r7, sp, #0
 8010b3c:	6078      	str	r0, [r7, #4]
 8010b3e:	460b      	mov	r3, r1
 8010b40:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010b42:	2300      	movs	r3, #0
 8010b44:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010b46:	2300      	movs	r3, #0
 8010b48:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010b50:	78fa      	ldrb	r2, [r7, #3]
 8010b52:	4611      	mov	r1, r2
 8010b54:	4618      	mov	r0, r3
 8010b56:	f7f6 f954 	bl	8006e02 <HAL_PCD_EP_Close>
 8010b5a:	4603      	mov	r3, r0
 8010b5c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010b5e:	7bfb      	ldrb	r3, [r7, #15]
 8010b60:	4618      	mov	r0, r3
 8010b62:	f000 f8e5 	bl	8010d30 <USBD_Get_USB_Status>
 8010b66:	4603      	mov	r3, r0
 8010b68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010b6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8010b6c:	4618      	mov	r0, r3
 8010b6e:	3710      	adds	r7, #16
 8010b70:	46bd      	mov	sp, r7
 8010b72:	bd80      	pop	{r7, pc}

08010b74 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010b74:	b580      	push	{r7, lr}
 8010b76:	b084      	sub	sp, #16
 8010b78:	af00      	add	r7, sp, #0
 8010b7a:	6078      	str	r0, [r7, #4]
 8010b7c:	460b      	mov	r3, r1
 8010b7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010b80:	2300      	movs	r3, #0
 8010b82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010b84:	2300      	movs	r3, #0
 8010b86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010b8e:	78fa      	ldrb	r2, [r7, #3]
 8010b90:	4611      	mov	r1, r2
 8010b92:	4618      	mov	r0, r3
 8010b94:	f7f6 fa2c 	bl	8006ff0 <HAL_PCD_EP_SetStall>
 8010b98:	4603      	mov	r3, r0
 8010b9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010b9c:	7bfb      	ldrb	r3, [r7, #15]
 8010b9e:	4618      	mov	r0, r3
 8010ba0:	f000 f8c6 	bl	8010d30 <USBD_Get_USB_Status>
 8010ba4:	4603      	mov	r3, r0
 8010ba6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010ba8:	7bbb      	ldrb	r3, [r7, #14]
}
 8010baa:	4618      	mov	r0, r3
 8010bac:	3710      	adds	r7, #16
 8010bae:	46bd      	mov	sp, r7
 8010bb0:	bd80      	pop	{r7, pc}

08010bb2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010bb2:	b580      	push	{r7, lr}
 8010bb4:	b084      	sub	sp, #16
 8010bb6:	af00      	add	r7, sp, #0
 8010bb8:	6078      	str	r0, [r7, #4]
 8010bba:	460b      	mov	r3, r1
 8010bbc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010bbe:	2300      	movs	r3, #0
 8010bc0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010bc2:	2300      	movs	r3, #0
 8010bc4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010bcc:	78fa      	ldrb	r2, [r7, #3]
 8010bce:	4611      	mov	r1, r2
 8010bd0:	4618      	mov	r0, r3
 8010bd2:	f7f6 fa71 	bl	80070b8 <HAL_PCD_EP_ClrStall>
 8010bd6:	4603      	mov	r3, r0
 8010bd8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010bda:	7bfb      	ldrb	r3, [r7, #15]
 8010bdc:	4618      	mov	r0, r3
 8010bde:	f000 f8a7 	bl	8010d30 <USBD_Get_USB_Status>
 8010be2:	4603      	mov	r3, r0
 8010be4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010be6:	7bbb      	ldrb	r3, [r7, #14]
}
 8010be8:	4618      	mov	r0, r3
 8010bea:	3710      	adds	r7, #16
 8010bec:	46bd      	mov	sp, r7
 8010bee:	bd80      	pop	{r7, pc}

08010bf0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010bf0:	b480      	push	{r7}
 8010bf2:	b085      	sub	sp, #20
 8010bf4:	af00      	add	r7, sp, #0
 8010bf6:	6078      	str	r0, [r7, #4]
 8010bf8:	460b      	mov	r3, r1
 8010bfa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010c02:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010c04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	da0b      	bge.n	8010c24 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010c0c:	78fb      	ldrb	r3, [r7, #3]
 8010c0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010c12:	68f9      	ldr	r1, [r7, #12]
 8010c14:	4613      	mov	r3, r2
 8010c16:	00db      	lsls	r3, r3, #3
 8010c18:	1a9b      	subs	r3, r3, r2
 8010c1a:	009b      	lsls	r3, r3, #2
 8010c1c:	440b      	add	r3, r1
 8010c1e:	333e      	adds	r3, #62	; 0x3e
 8010c20:	781b      	ldrb	r3, [r3, #0]
 8010c22:	e00b      	b.n	8010c3c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010c24:	78fb      	ldrb	r3, [r7, #3]
 8010c26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010c2a:	68f9      	ldr	r1, [r7, #12]
 8010c2c:	4613      	mov	r3, r2
 8010c2e:	00db      	lsls	r3, r3, #3
 8010c30:	1a9b      	subs	r3, r3, r2
 8010c32:	009b      	lsls	r3, r3, #2
 8010c34:	440b      	add	r3, r1
 8010c36:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010c3a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010c3c:	4618      	mov	r0, r3
 8010c3e:	3714      	adds	r7, #20
 8010c40:	46bd      	mov	sp, r7
 8010c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c46:	4770      	bx	lr

08010c48 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010c48:	b580      	push	{r7, lr}
 8010c4a:	b084      	sub	sp, #16
 8010c4c:	af00      	add	r7, sp, #0
 8010c4e:	6078      	str	r0, [r7, #4]
 8010c50:	460b      	mov	r3, r1
 8010c52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010c54:	2300      	movs	r3, #0
 8010c56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010c58:	2300      	movs	r3, #0
 8010c5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010c62:	78fa      	ldrb	r2, [r7, #3]
 8010c64:	4611      	mov	r1, r2
 8010c66:	4618      	mov	r0, r3
 8010c68:	f7f6 f83e 	bl	8006ce8 <HAL_PCD_SetAddress>
 8010c6c:	4603      	mov	r3, r0
 8010c6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010c70:	7bfb      	ldrb	r3, [r7, #15]
 8010c72:	4618      	mov	r0, r3
 8010c74:	f000 f85c 	bl	8010d30 <USBD_Get_USB_Status>
 8010c78:	4603      	mov	r3, r0
 8010c7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010c7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8010c7e:	4618      	mov	r0, r3
 8010c80:	3710      	adds	r7, #16
 8010c82:	46bd      	mov	sp, r7
 8010c84:	bd80      	pop	{r7, pc}

08010c86 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010c86:	b580      	push	{r7, lr}
 8010c88:	b086      	sub	sp, #24
 8010c8a:	af00      	add	r7, sp, #0
 8010c8c:	60f8      	str	r0, [r7, #12]
 8010c8e:	607a      	str	r2, [r7, #4]
 8010c90:	603b      	str	r3, [r7, #0]
 8010c92:	460b      	mov	r3, r1
 8010c94:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010c96:	2300      	movs	r3, #0
 8010c98:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010c9a:	2300      	movs	r3, #0
 8010c9c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010c9e:	68fb      	ldr	r3, [r7, #12]
 8010ca0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010ca4:	7af9      	ldrb	r1, [r7, #11]
 8010ca6:	683b      	ldr	r3, [r7, #0]
 8010ca8:	687a      	ldr	r2, [r7, #4]
 8010caa:	f7f6 f957 	bl	8006f5c <HAL_PCD_EP_Transmit>
 8010cae:	4603      	mov	r3, r0
 8010cb0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010cb2:	7dfb      	ldrb	r3, [r7, #23]
 8010cb4:	4618      	mov	r0, r3
 8010cb6:	f000 f83b 	bl	8010d30 <USBD_Get_USB_Status>
 8010cba:	4603      	mov	r3, r0
 8010cbc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010cbe:	7dbb      	ldrb	r3, [r7, #22]
}
 8010cc0:	4618      	mov	r0, r3
 8010cc2:	3718      	adds	r7, #24
 8010cc4:	46bd      	mov	sp, r7
 8010cc6:	bd80      	pop	{r7, pc}

08010cc8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010cc8:	b580      	push	{r7, lr}
 8010cca:	b086      	sub	sp, #24
 8010ccc:	af00      	add	r7, sp, #0
 8010cce:	60f8      	str	r0, [r7, #12]
 8010cd0:	607a      	str	r2, [r7, #4]
 8010cd2:	603b      	str	r3, [r7, #0]
 8010cd4:	460b      	mov	r3, r1
 8010cd6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010cd8:	2300      	movs	r3, #0
 8010cda:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010cdc:	2300      	movs	r3, #0
 8010cde:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010ce0:	68fb      	ldr	r3, [r7, #12]
 8010ce2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010ce6:	7af9      	ldrb	r1, [r7, #11]
 8010ce8:	683b      	ldr	r3, [r7, #0]
 8010cea:	687a      	ldr	r2, [r7, #4]
 8010cec:	f7f6 f8d3 	bl	8006e96 <HAL_PCD_EP_Receive>
 8010cf0:	4603      	mov	r3, r0
 8010cf2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010cf4:	7dfb      	ldrb	r3, [r7, #23]
 8010cf6:	4618      	mov	r0, r3
 8010cf8:	f000 f81a 	bl	8010d30 <USBD_Get_USB_Status>
 8010cfc:	4603      	mov	r3, r0
 8010cfe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010d00:	7dbb      	ldrb	r3, [r7, #22]
}
 8010d02:	4618      	mov	r0, r3
 8010d04:	3718      	adds	r7, #24
 8010d06:	46bd      	mov	sp, r7
 8010d08:	bd80      	pop	{r7, pc}

08010d0a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010d0a:	b580      	push	{r7, lr}
 8010d0c:	b082      	sub	sp, #8
 8010d0e:	af00      	add	r7, sp, #0
 8010d10:	6078      	str	r0, [r7, #4]
 8010d12:	460b      	mov	r3, r1
 8010d14:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010d1c:	78fa      	ldrb	r2, [r7, #3]
 8010d1e:	4611      	mov	r1, r2
 8010d20:	4618      	mov	r0, r3
 8010d22:	f7f6 f903 	bl	8006f2c <HAL_PCD_EP_GetRxCount>
 8010d26:	4603      	mov	r3, r0
}
 8010d28:	4618      	mov	r0, r3
 8010d2a:	3708      	adds	r7, #8
 8010d2c:	46bd      	mov	sp, r7
 8010d2e:	bd80      	pop	{r7, pc}

08010d30 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010d30:	b480      	push	{r7}
 8010d32:	b085      	sub	sp, #20
 8010d34:	af00      	add	r7, sp, #0
 8010d36:	4603      	mov	r3, r0
 8010d38:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010d3a:	2300      	movs	r3, #0
 8010d3c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010d3e:	79fb      	ldrb	r3, [r7, #7]
 8010d40:	2b03      	cmp	r3, #3
 8010d42:	d817      	bhi.n	8010d74 <USBD_Get_USB_Status+0x44>
 8010d44:	a201      	add	r2, pc, #4	; (adr r2, 8010d4c <USBD_Get_USB_Status+0x1c>)
 8010d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d4a:	bf00      	nop
 8010d4c:	08010d5d 	.word	0x08010d5d
 8010d50:	08010d63 	.word	0x08010d63
 8010d54:	08010d69 	.word	0x08010d69
 8010d58:	08010d6f 	.word	0x08010d6f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010d5c:	2300      	movs	r3, #0
 8010d5e:	73fb      	strb	r3, [r7, #15]
    break;
 8010d60:	e00b      	b.n	8010d7a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010d62:	2303      	movs	r3, #3
 8010d64:	73fb      	strb	r3, [r7, #15]
    break;
 8010d66:	e008      	b.n	8010d7a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010d68:	2301      	movs	r3, #1
 8010d6a:	73fb      	strb	r3, [r7, #15]
    break;
 8010d6c:	e005      	b.n	8010d7a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010d6e:	2303      	movs	r3, #3
 8010d70:	73fb      	strb	r3, [r7, #15]
    break;
 8010d72:	e002      	b.n	8010d7a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010d74:	2303      	movs	r3, #3
 8010d76:	73fb      	strb	r3, [r7, #15]
    break;
 8010d78:	bf00      	nop
  }
  return usb_status;
 8010d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d7c:	4618      	mov	r0, r3
 8010d7e:	3714      	adds	r7, #20
 8010d80:	46bd      	mov	sp, r7
 8010d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d86:	4770      	bx	lr

08010d88 <__errno>:
 8010d88:	4b01      	ldr	r3, [pc, #4]	; (8010d90 <__errno+0x8>)
 8010d8a:	6818      	ldr	r0, [r3, #0]
 8010d8c:	4770      	bx	lr
 8010d8e:	bf00      	nop
 8010d90:	24000184 	.word	0x24000184

08010d94 <__libc_init_array>:
 8010d94:	b570      	push	{r4, r5, r6, lr}
 8010d96:	4d0d      	ldr	r5, [pc, #52]	; (8010dcc <__libc_init_array+0x38>)
 8010d98:	4c0d      	ldr	r4, [pc, #52]	; (8010dd0 <__libc_init_array+0x3c>)
 8010d9a:	1b64      	subs	r4, r4, r5
 8010d9c:	10a4      	asrs	r4, r4, #2
 8010d9e:	2600      	movs	r6, #0
 8010da0:	42a6      	cmp	r6, r4
 8010da2:	d109      	bne.n	8010db8 <__libc_init_array+0x24>
 8010da4:	4d0b      	ldr	r5, [pc, #44]	; (8010dd4 <__libc_init_array+0x40>)
 8010da6:	4c0c      	ldr	r4, [pc, #48]	; (8010dd8 <__libc_init_array+0x44>)
 8010da8:	f002 fc96 	bl	80136d8 <_init>
 8010dac:	1b64      	subs	r4, r4, r5
 8010dae:	10a4      	asrs	r4, r4, #2
 8010db0:	2600      	movs	r6, #0
 8010db2:	42a6      	cmp	r6, r4
 8010db4:	d105      	bne.n	8010dc2 <__libc_init_array+0x2e>
 8010db6:	bd70      	pop	{r4, r5, r6, pc}
 8010db8:	f855 3b04 	ldr.w	r3, [r5], #4
 8010dbc:	4798      	blx	r3
 8010dbe:	3601      	adds	r6, #1
 8010dc0:	e7ee      	b.n	8010da0 <__libc_init_array+0xc>
 8010dc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8010dc6:	4798      	blx	r3
 8010dc8:	3601      	adds	r6, #1
 8010dca:	e7f2      	b.n	8010db2 <__libc_init_array+0x1e>
 8010dcc:	08013c5c 	.word	0x08013c5c
 8010dd0:	08013c5c 	.word	0x08013c5c
 8010dd4:	08013c5c 	.word	0x08013c5c
 8010dd8:	08013c64 	.word	0x08013c64

08010ddc <malloc>:
 8010ddc:	4b02      	ldr	r3, [pc, #8]	; (8010de8 <malloc+0xc>)
 8010dde:	4601      	mov	r1, r0
 8010de0:	6818      	ldr	r0, [r3, #0]
 8010de2:	f000 b88d 	b.w	8010f00 <_malloc_r>
 8010de6:	bf00      	nop
 8010de8:	24000184 	.word	0x24000184

08010dec <free>:
 8010dec:	4b02      	ldr	r3, [pc, #8]	; (8010df8 <free+0xc>)
 8010dee:	4601      	mov	r1, r0
 8010df0:	6818      	ldr	r0, [r3, #0]
 8010df2:	f000 b819 	b.w	8010e28 <_free_r>
 8010df6:	bf00      	nop
 8010df8:	24000184 	.word	0x24000184

08010dfc <memcpy>:
 8010dfc:	440a      	add	r2, r1
 8010dfe:	4291      	cmp	r1, r2
 8010e00:	f100 33ff 	add.w	r3, r0, #4294967295
 8010e04:	d100      	bne.n	8010e08 <memcpy+0xc>
 8010e06:	4770      	bx	lr
 8010e08:	b510      	push	{r4, lr}
 8010e0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010e0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010e12:	4291      	cmp	r1, r2
 8010e14:	d1f9      	bne.n	8010e0a <memcpy+0xe>
 8010e16:	bd10      	pop	{r4, pc}

08010e18 <memset>:
 8010e18:	4402      	add	r2, r0
 8010e1a:	4603      	mov	r3, r0
 8010e1c:	4293      	cmp	r3, r2
 8010e1e:	d100      	bne.n	8010e22 <memset+0xa>
 8010e20:	4770      	bx	lr
 8010e22:	f803 1b01 	strb.w	r1, [r3], #1
 8010e26:	e7f9      	b.n	8010e1c <memset+0x4>

08010e28 <_free_r>:
 8010e28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010e2a:	2900      	cmp	r1, #0
 8010e2c:	d044      	beq.n	8010eb8 <_free_r+0x90>
 8010e2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010e32:	9001      	str	r0, [sp, #4]
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	f1a1 0404 	sub.w	r4, r1, #4
 8010e3a:	bfb8      	it	lt
 8010e3c:	18e4      	addlt	r4, r4, r3
 8010e3e:	f001 fb25 	bl	801248c <__malloc_lock>
 8010e42:	4a1e      	ldr	r2, [pc, #120]	; (8010ebc <_free_r+0x94>)
 8010e44:	9801      	ldr	r0, [sp, #4]
 8010e46:	6813      	ldr	r3, [r2, #0]
 8010e48:	b933      	cbnz	r3, 8010e58 <_free_r+0x30>
 8010e4a:	6063      	str	r3, [r4, #4]
 8010e4c:	6014      	str	r4, [r2, #0]
 8010e4e:	b003      	add	sp, #12
 8010e50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010e54:	f001 bb20 	b.w	8012498 <__malloc_unlock>
 8010e58:	42a3      	cmp	r3, r4
 8010e5a:	d908      	bls.n	8010e6e <_free_r+0x46>
 8010e5c:	6825      	ldr	r5, [r4, #0]
 8010e5e:	1961      	adds	r1, r4, r5
 8010e60:	428b      	cmp	r3, r1
 8010e62:	bf01      	itttt	eq
 8010e64:	6819      	ldreq	r1, [r3, #0]
 8010e66:	685b      	ldreq	r3, [r3, #4]
 8010e68:	1949      	addeq	r1, r1, r5
 8010e6a:	6021      	streq	r1, [r4, #0]
 8010e6c:	e7ed      	b.n	8010e4a <_free_r+0x22>
 8010e6e:	461a      	mov	r2, r3
 8010e70:	685b      	ldr	r3, [r3, #4]
 8010e72:	b10b      	cbz	r3, 8010e78 <_free_r+0x50>
 8010e74:	42a3      	cmp	r3, r4
 8010e76:	d9fa      	bls.n	8010e6e <_free_r+0x46>
 8010e78:	6811      	ldr	r1, [r2, #0]
 8010e7a:	1855      	adds	r5, r2, r1
 8010e7c:	42a5      	cmp	r5, r4
 8010e7e:	d10b      	bne.n	8010e98 <_free_r+0x70>
 8010e80:	6824      	ldr	r4, [r4, #0]
 8010e82:	4421      	add	r1, r4
 8010e84:	1854      	adds	r4, r2, r1
 8010e86:	42a3      	cmp	r3, r4
 8010e88:	6011      	str	r1, [r2, #0]
 8010e8a:	d1e0      	bne.n	8010e4e <_free_r+0x26>
 8010e8c:	681c      	ldr	r4, [r3, #0]
 8010e8e:	685b      	ldr	r3, [r3, #4]
 8010e90:	6053      	str	r3, [r2, #4]
 8010e92:	4421      	add	r1, r4
 8010e94:	6011      	str	r1, [r2, #0]
 8010e96:	e7da      	b.n	8010e4e <_free_r+0x26>
 8010e98:	d902      	bls.n	8010ea0 <_free_r+0x78>
 8010e9a:	230c      	movs	r3, #12
 8010e9c:	6003      	str	r3, [r0, #0]
 8010e9e:	e7d6      	b.n	8010e4e <_free_r+0x26>
 8010ea0:	6825      	ldr	r5, [r4, #0]
 8010ea2:	1961      	adds	r1, r4, r5
 8010ea4:	428b      	cmp	r3, r1
 8010ea6:	bf04      	itt	eq
 8010ea8:	6819      	ldreq	r1, [r3, #0]
 8010eaa:	685b      	ldreq	r3, [r3, #4]
 8010eac:	6063      	str	r3, [r4, #4]
 8010eae:	bf04      	itt	eq
 8010eb0:	1949      	addeq	r1, r1, r5
 8010eb2:	6021      	streq	r1, [r4, #0]
 8010eb4:	6054      	str	r4, [r2, #4]
 8010eb6:	e7ca      	b.n	8010e4e <_free_r+0x26>
 8010eb8:	b003      	add	sp, #12
 8010eba:	bd30      	pop	{r4, r5, pc}
 8010ebc:	24002040 	.word	0x24002040

08010ec0 <sbrk_aligned>:
 8010ec0:	b570      	push	{r4, r5, r6, lr}
 8010ec2:	4e0e      	ldr	r6, [pc, #56]	; (8010efc <sbrk_aligned+0x3c>)
 8010ec4:	460c      	mov	r4, r1
 8010ec6:	6831      	ldr	r1, [r6, #0]
 8010ec8:	4605      	mov	r5, r0
 8010eca:	b911      	cbnz	r1, 8010ed2 <sbrk_aligned+0x12>
 8010ecc:	f000 fcce 	bl	801186c <_sbrk_r>
 8010ed0:	6030      	str	r0, [r6, #0]
 8010ed2:	4621      	mov	r1, r4
 8010ed4:	4628      	mov	r0, r5
 8010ed6:	f000 fcc9 	bl	801186c <_sbrk_r>
 8010eda:	1c43      	adds	r3, r0, #1
 8010edc:	d00a      	beq.n	8010ef4 <sbrk_aligned+0x34>
 8010ede:	1cc4      	adds	r4, r0, #3
 8010ee0:	f024 0403 	bic.w	r4, r4, #3
 8010ee4:	42a0      	cmp	r0, r4
 8010ee6:	d007      	beq.n	8010ef8 <sbrk_aligned+0x38>
 8010ee8:	1a21      	subs	r1, r4, r0
 8010eea:	4628      	mov	r0, r5
 8010eec:	f000 fcbe 	bl	801186c <_sbrk_r>
 8010ef0:	3001      	adds	r0, #1
 8010ef2:	d101      	bne.n	8010ef8 <sbrk_aligned+0x38>
 8010ef4:	f04f 34ff 	mov.w	r4, #4294967295
 8010ef8:	4620      	mov	r0, r4
 8010efa:	bd70      	pop	{r4, r5, r6, pc}
 8010efc:	24002044 	.word	0x24002044

08010f00 <_malloc_r>:
 8010f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f04:	1ccd      	adds	r5, r1, #3
 8010f06:	f025 0503 	bic.w	r5, r5, #3
 8010f0a:	3508      	adds	r5, #8
 8010f0c:	2d0c      	cmp	r5, #12
 8010f0e:	bf38      	it	cc
 8010f10:	250c      	movcc	r5, #12
 8010f12:	2d00      	cmp	r5, #0
 8010f14:	4607      	mov	r7, r0
 8010f16:	db01      	blt.n	8010f1c <_malloc_r+0x1c>
 8010f18:	42a9      	cmp	r1, r5
 8010f1a:	d905      	bls.n	8010f28 <_malloc_r+0x28>
 8010f1c:	230c      	movs	r3, #12
 8010f1e:	603b      	str	r3, [r7, #0]
 8010f20:	2600      	movs	r6, #0
 8010f22:	4630      	mov	r0, r6
 8010f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f28:	4e2e      	ldr	r6, [pc, #184]	; (8010fe4 <_malloc_r+0xe4>)
 8010f2a:	f001 faaf 	bl	801248c <__malloc_lock>
 8010f2e:	6833      	ldr	r3, [r6, #0]
 8010f30:	461c      	mov	r4, r3
 8010f32:	bb34      	cbnz	r4, 8010f82 <_malloc_r+0x82>
 8010f34:	4629      	mov	r1, r5
 8010f36:	4638      	mov	r0, r7
 8010f38:	f7ff ffc2 	bl	8010ec0 <sbrk_aligned>
 8010f3c:	1c43      	adds	r3, r0, #1
 8010f3e:	4604      	mov	r4, r0
 8010f40:	d14d      	bne.n	8010fde <_malloc_r+0xde>
 8010f42:	6834      	ldr	r4, [r6, #0]
 8010f44:	4626      	mov	r6, r4
 8010f46:	2e00      	cmp	r6, #0
 8010f48:	d140      	bne.n	8010fcc <_malloc_r+0xcc>
 8010f4a:	6823      	ldr	r3, [r4, #0]
 8010f4c:	4631      	mov	r1, r6
 8010f4e:	4638      	mov	r0, r7
 8010f50:	eb04 0803 	add.w	r8, r4, r3
 8010f54:	f000 fc8a 	bl	801186c <_sbrk_r>
 8010f58:	4580      	cmp	r8, r0
 8010f5a:	d13a      	bne.n	8010fd2 <_malloc_r+0xd2>
 8010f5c:	6821      	ldr	r1, [r4, #0]
 8010f5e:	3503      	adds	r5, #3
 8010f60:	1a6d      	subs	r5, r5, r1
 8010f62:	f025 0503 	bic.w	r5, r5, #3
 8010f66:	3508      	adds	r5, #8
 8010f68:	2d0c      	cmp	r5, #12
 8010f6a:	bf38      	it	cc
 8010f6c:	250c      	movcc	r5, #12
 8010f6e:	4629      	mov	r1, r5
 8010f70:	4638      	mov	r0, r7
 8010f72:	f7ff ffa5 	bl	8010ec0 <sbrk_aligned>
 8010f76:	3001      	adds	r0, #1
 8010f78:	d02b      	beq.n	8010fd2 <_malloc_r+0xd2>
 8010f7a:	6823      	ldr	r3, [r4, #0]
 8010f7c:	442b      	add	r3, r5
 8010f7e:	6023      	str	r3, [r4, #0]
 8010f80:	e00e      	b.n	8010fa0 <_malloc_r+0xa0>
 8010f82:	6822      	ldr	r2, [r4, #0]
 8010f84:	1b52      	subs	r2, r2, r5
 8010f86:	d41e      	bmi.n	8010fc6 <_malloc_r+0xc6>
 8010f88:	2a0b      	cmp	r2, #11
 8010f8a:	d916      	bls.n	8010fba <_malloc_r+0xba>
 8010f8c:	1961      	adds	r1, r4, r5
 8010f8e:	42a3      	cmp	r3, r4
 8010f90:	6025      	str	r5, [r4, #0]
 8010f92:	bf18      	it	ne
 8010f94:	6059      	strne	r1, [r3, #4]
 8010f96:	6863      	ldr	r3, [r4, #4]
 8010f98:	bf08      	it	eq
 8010f9a:	6031      	streq	r1, [r6, #0]
 8010f9c:	5162      	str	r2, [r4, r5]
 8010f9e:	604b      	str	r3, [r1, #4]
 8010fa0:	4638      	mov	r0, r7
 8010fa2:	f104 060b 	add.w	r6, r4, #11
 8010fa6:	f001 fa77 	bl	8012498 <__malloc_unlock>
 8010faa:	f026 0607 	bic.w	r6, r6, #7
 8010fae:	1d23      	adds	r3, r4, #4
 8010fb0:	1af2      	subs	r2, r6, r3
 8010fb2:	d0b6      	beq.n	8010f22 <_malloc_r+0x22>
 8010fb4:	1b9b      	subs	r3, r3, r6
 8010fb6:	50a3      	str	r3, [r4, r2]
 8010fb8:	e7b3      	b.n	8010f22 <_malloc_r+0x22>
 8010fba:	6862      	ldr	r2, [r4, #4]
 8010fbc:	42a3      	cmp	r3, r4
 8010fbe:	bf0c      	ite	eq
 8010fc0:	6032      	streq	r2, [r6, #0]
 8010fc2:	605a      	strne	r2, [r3, #4]
 8010fc4:	e7ec      	b.n	8010fa0 <_malloc_r+0xa0>
 8010fc6:	4623      	mov	r3, r4
 8010fc8:	6864      	ldr	r4, [r4, #4]
 8010fca:	e7b2      	b.n	8010f32 <_malloc_r+0x32>
 8010fcc:	4634      	mov	r4, r6
 8010fce:	6876      	ldr	r6, [r6, #4]
 8010fd0:	e7b9      	b.n	8010f46 <_malloc_r+0x46>
 8010fd2:	230c      	movs	r3, #12
 8010fd4:	603b      	str	r3, [r7, #0]
 8010fd6:	4638      	mov	r0, r7
 8010fd8:	f001 fa5e 	bl	8012498 <__malloc_unlock>
 8010fdc:	e7a1      	b.n	8010f22 <_malloc_r+0x22>
 8010fde:	6025      	str	r5, [r4, #0]
 8010fe0:	e7de      	b.n	8010fa0 <_malloc_r+0xa0>
 8010fe2:	bf00      	nop
 8010fe4:	24002040 	.word	0x24002040

08010fe8 <__cvt>:
 8010fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010fea:	ed2d 8b02 	vpush	{d8}
 8010fee:	eeb0 8b40 	vmov.f64	d8, d0
 8010ff2:	b085      	sub	sp, #20
 8010ff4:	4617      	mov	r7, r2
 8010ff6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8010ff8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8010ffa:	ee18 2a90 	vmov	r2, s17
 8010ffe:	f025 0520 	bic.w	r5, r5, #32
 8011002:	2a00      	cmp	r2, #0
 8011004:	bfb6      	itet	lt
 8011006:	222d      	movlt	r2, #45	; 0x2d
 8011008:	2200      	movge	r2, #0
 801100a:	eeb1 8b40 	vneglt.f64	d8, d0
 801100e:	2d46      	cmp	r5, #70	; 0x46
 8011010:	460c      	mov	r4, r1
 8011012:	701a      	strb	r2, [r3, #0]
 8011014:	d004      	beq.n	8011020 <__cvt+0x38>
 8011016:	2d45      	cmp	r5, #69	; 0x45
 8011018:	d100      	bne.n	801101c <__cvt+0x34>
 801101a:	3401      	adds	r4, #1
 801101c:	2102      	movs	r1, #2
 801101e:	e000      	b.n	8011022 <__cvt+0x3a>
 8011020:	2103      	movs	r1, #3
 8011022:	ab03      	add	r3, sp, #12
 8011024:	9301      	str	r3, [sp, #4]
 8011026:	ab02      	add	r3, sp, #8
 8011028:	9300      	str	r3, [sp, #0]
 801102a:	4622      	mov	r2, r4
 801102c:	4633      	mov	r3, r6
 801102e:	eeb0 0b48 	vmov.f64	d0, d8
 8011032:	f000 fcb9 	bl	80119a8 <_dtoa_r>
 8011036:	2d47      	cmp	r5, #71	; 0x47
 8011038:	d101      	bne.n	801103e <__cvt+0x56>
 801103a:	07fb      	lsls	r3, r7, #31
 801103c:	d51a      	bpl.n	8011074 <__cvt+0x8c>
 801103e:	2d46      	cmp	r5, #70	; 0x46
 8011040:	eb00 0204 	add.w	r2, r0, r4
 8011044:	d10c      	bne.n	8011060 <__cvt+0x78>
 8011046:	7803      	ldrb	r3, [r0, #0]
 8011048:	2b30      	cmp	r3, #48	; 0x30
 801104a:	d107      	bne.n	801105c <__cvt+0x74>
 801104c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011054:	bf1c      	itt	ne
 8011056:	f1c4 0401 	rsbne	r4, r4, #1
 801105a:	6034      	strne	r4, [r6, #0]
 801105c:	6833      	ldr	r3, [r6, #0]
 801105e:	441a      	add	r2, r3
 8011060:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011068:	bf08      	it	eq
 801106a:	9203      	streq	r2, [sp, #12]
 801106c:	2130      	movs	r1, #48	; 0x30
 801106e:	9b03      	ldr	r3, [sp, #12]
 8011070:	4293      	cmp	r3, r2
 8011072:	d307      	bcc.n	8011084 <__cvt+0x9c>
 8011074:	9b03      	ldr	r3, [sp, #12]
 8011076:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011078:	1a1b      	subs	r3, r3, r0
 801107a:	6013      	str	r3, [r2, #0]
 801107c:	b005      	add	sp, #20
 801107e:	ecbd 8b02 	vpop	{d8}
 8011082:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011084:	1c5c      	adds	r4, r3, #1
 8011086:	9403      	str	r4, [sp, #12]
 8011088:	7019      	strb	r1, [r3, #0]
 801108a:	e7f0      	b.n	801106e <__cvt+0x86>

0801108c <__exponent>:
 801108c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801108e:	4603      	mov	r3, r0
 8011090:	2900      	cmp	r1, #0
 8011092:	bfb8      	it	lt
 8011094:	4249      	neglt	r1, r1
 8011096:	f803 2b02 	strb.w	r2, [r3], #2
 801109a:	bfb4      	ite	lt
 801109c:	222d      	movlt	r2, #45	; 0x2d
 801109e:	222b      	movge	r2, #43	; 0x2b
 80110a0:	2909      	cmp	r1, #9
 80110a2:	7042      	strb	r2, [r0, #1]
 80110a4:	dd2a      	ble.n	80110fc <__exponent+0x70>
 80110a6:	f10d 0407 	add.w	r4, sp, #7
 80110aa:	46a4      	mov	ip, r4
 80110ac:	270a      	movs	r7, #10
 80110ae:	46a6      	mov	lr, r4
 80110b0:	460a      	mov	r2, r1
 80110b2:	fb91 f6f7 	sdiv	r6, r1, r7
 80110b6:	fb07 1516 	mls	r5, r7, r6, r1
 80110ba:	3530      	adds	r5, #48	; 0x30
 80110bc:	2a63      	cmp	r2, #99	; 0x63
 80110be:	f104 34ff 	add.w	r4, r4, #4294967295
 80110c2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80110c6:	4631      	mov	r1, r6
 80110c8:	dcf1      	bgt.n	80110ae <__exponent+0x22>
 80110ca:	3130      	adds	r1, #48	; 0x30
 80110cc:	f1ae 0502 	sub.w	r5, lr, #2
 80110d0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80110d4:	1c44      	adds	r4, r0, #1
 80110d6:	4629      	mov	r1, r5
 80110d8:	4561      	cmp	r1, ip
 80110da:	d30a      	bcc.n	80110f2 <__exponent+0x66>
 80110dc:	f10d 0209 	add.w	r2, sp, #9
 80110e0:	eba2 020e 	sub.w	r2, r2, lr
 80110e4:	4565      	cmp	r5, ip
 80110e6:	bf88      	it	hi
 80110e8:	2200      	movhi	r2, #0
 80110ea:	4413      	add	r3, r2
 80110ec:	1a18      	subs	r0, r3, r0
 80110ee:	b003      	add	sp, #12
 80110f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80110f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80110f6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80110fa:	e7ed      	b.n	80110d8 <__exponent+0x4c>
 80110fc:	2330      	movs	r3, #48	; 0x30
 80110fe:	3130      	adds	r1, #48	; 0x30
 8011100:	7083      	strb	r3, [r0, #2]
 8011102:	70c1      	strb	r1, [r0, #3]
 8011104:	1d03      	adds	r3, r0, #4
 8011106:	e7f1      	b.n	80110ec <__exponent+0x60>

08011108 <_printf_float>:
 8011108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801110c:	b08b      	sub	sp, #44	; 0x2c
 801110e:	460c      	mov	r4, r1
 8011110:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8011114:	4616      	mov	r6, r2
 8011116:	461f      	mov	r7, r3
 8011118:	4605      	mov	r5, r0
 801111a:	f001 f9b3 	bl	8012484 <_localeconv_r>
 801111e:	f8d0 b000 	ldr.w	fp, [r0]
 8011122:	4658      	mov	r0, fp
 8011124:	f7ef f8dc 	bl	80002e0 <strlen>
 8011128:	2300      	movs	r3, #0
 801112a:	9308      	str	r3, [sp, #32]
 801112c:	f8d8 3000 	ldr.w	r3, [r8]
 8011130:	f894 9018 	ldrb.w	r9, [r4, #24]
 8011134:	6822      	ldr	r2, [r4, #0]
 8011136:	3307      	adds	r3, #7
 8011138:	f023 0307 	bic.w	r3, r3, #7
 801113c:	f103 0108 	add.w	r1, r3, #8
 8011140:	f8c8 1000 	str.w	r1, [r8]
 8011144:	4682      	mov	sl, r0
 8011146:	e9d3 0100 	ldrd	r0, r1, [r3]
 801114a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 801114e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 80113b0 <_printf_float+0x2a8>
 8011152:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8011156:	eeb0 6bc0 	vabs.f64	d6, d0
 801115a:	eeb4 6b47 	vcmp.f64	d6, d7
 801115e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011162:	dd24      	ble.n	80111ae <_printf_float+0xa6>
 8011164:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801116c:	d502      	bpl.n	8011174 <_printf_float+0x6c>
 801116e:	232d      	movs	r3, #45	; 0x2d
 8011170:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011174:	4b90      	ldr	r3, [pc, #576]	; (80113b8 <_printf_float+0x2b0>)
 8011176:	4891      	ldr	r0, [pc, #580]	; (80113bc <_printf_float+0x2b4>)
 8011178:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801117c:	bf94      	ite	ls
 801117e:	4698      	movls	r8, r3
 8011180:	4680      	movhi	r8, r0
 8011182:	2303      	movs	r3, #3
 8011184:	6123      	str	r3, [r4, #16]
 8011186:	f022 0204 	bic.w	r2, r2, #4
 801118a:	2300      	movs	r3, #0
 801118c:	6022      	str	r2, [r4, #0]
 801118e:	9304      	str	r3, [sp, #16]
 8011190:	9700      	str	r7, [sp, #0]
 8011192:	4633      	mov	r3, r6
 8011194:	aa09      	add	r2, sp, #36	; 0x24
 8011196:	4621      	mov	r1, r4
 8011198:	4628      	mov	r0, r5
 801119a:	f000 f9d3 	bl	8011544 <_printf_common>
 801119e:	3001      	adds	r0, #1
 80111a0:	f040 808a 	bne.w	80112b8 <_printf_float+0x1b0>
 80111a4:	f04f 30ff 	mov.w	r0, #4294967295
 80111a8:	b00b      	add	sp, #44	; 0x2c
 80111aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111ae:	eeb4 0b40 	vcmp.f64	d0, d0
 80111b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111b6:	d709      	bvc.n	80111cc <_printf_float+0xc4>
 80111b8:	ee10 3a90 	vmov	r3, s1
 80111bc:	2b00      	cmp	r3, #0
 80111be:	bfbc      	itt	lt
 80111c0:	232d      	movlt	r3, #45	; 0x2d
 80111c2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80111c6:	487e      	ldr	r0, [pc, #504]	; (80113c0 <_printf_float+0x2b8>)
 80111c8:	4b7e      	ldr	r3, [pc, #504]	; (80113c4 <_printf_float+0x2bc>)
 80111ca:	e7d5      	b.n	8011178 <_printf_float+0x70>
 80111cc:	6863      	ldr	r3, [r4, #4]
 80111ce:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80111d2:	9104      	str	r1, [sp, #16]
 80111d4:	1c59      	adds	r1, r3, #1
 80111d6:	d13c      	bne.n	8011252 <_printf_float+0x14a>
 80111d8:	2306      	movs	r3, #6
 80111da:	6063      	str	r3, [r4, #4]
 80111dc:	2300      	movs	r3, #0
 80111de:	9303      	str	r3, [sp, #12]
 80111e0:	ab08      	add	r3, sp, #32
 80111e2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80111e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80111ea:	ab07      	add	r3, sp, #28
 80111ec:	6861      	ldr	r1, [r4, #4]
 80111ee:	9300      	str	r3, [sp, #0]
 80111f0:	6022      	str	r2, [r4, #0]
 80111f2:	f10d 031b 	add.w	r3, sp, #27
 80111f6:	4628      	mov	r0, r5
 80111f8:	f7ff fef6 	bl	8010fe8 <__cvt>
 80111fc:	9b04      	ldr	r3, [sp, #16]
 80111fe:	9907      	ldr	r1, [sp, #28]
 8011200:	2b47      	cmp	r3, #71	; 0x47
 8011202:	4680      	mov	r8, r0
 8011204:	d108      	bne.n	8011218 <_printf_float+0x110>
 8011206:	1cc8      	adds	r0, r1, #3
 8011208:	db02      	blt.n	8011210 <_printf_float+0x108>
 801120a:	6863      	ldr	r3, [r4, #4]
 801120c:	4299      	cmp	r1, r3
 801120e:	dd41      	ble.n	8011294 <_printf_float+0x18c>
 8011210:	f1a9 0902 	sub.w	r9, r9, #2
 8011214:	fa5f f989 	uxtb.w	r9, r9
 8011218:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801121c:	d820      	bhi.n	8011260 <_printf_float+0x158>
 801121e:	3901      	subs	r1, #1
 8011220:	464a      	mov	r2, r9
 8011222:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011226:	9107      	str	r1, [sp, #28]
 8011228:	f7ff ff30 	bl	801108c <__exponent>
 801122c:	9a08      	ldr	r2, [sp, #32]
 801122e:	9004      	str	r0, [sp, #16]
 8011230:	1813      	adds	r3, r2, r0
 8011232:	2a01      	cmp	r2, #1
 8011234:	6123      	str	r3, [r4, #16]
 8011236:	dc02      	bgt.n	801123e <_printf_float+0x136>
 8011238:	6822      	ldr	r2, [r4, #0]
 801123a:	07d2      	lsls	r2, r2, #31
 801123c:	d501      	bpl.n	8011242 <_printf_float+0x13a>
 801123e:	3301      	adds	r3, #1
 8011240:	6123      	str	r3, [r4, #16]
 8011242:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8011246:	2b00      	cmp	r3, #0
 8011248:	d0a2      	beq.n	8011190 <_printf_float+0x88>
 801124a:	232d      	movs	r3, #45	; 0x2d
 801124c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011250:	e79e      	b.n	8011190 <_printf_float+0x88>
 8011252:	9904      	ldr	r1, [sp, #16]
 8011254:	2947      	cmp	r1, #71	; 0x47
 8011256:	d1c1      	bne.n	80111dc <_printf_float+0xd4>
 8011258:	2b00      	cmp	r3, #0
 801125a:	d1bf      	bne.n	80111dc <_printf_float+0xd4>
 801125c:	2301      	movs	r3, #1
 801125e:	e7bc      	b.n	80111da <_printf_float+0xd2>
 8011260:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8011264:	d118      	bne.n	8011298 <_printf_float+0x190>
 8011266:	2900      	cmp	r1, #0
 8011268:	6863      	ldr	r3, [r4, #4]
 801126a:	dd0b      	ble.n	8011284 <_printf_float+0x17c>
 801126c:	6121      	str	r1, [r4, #16]
 801126e:	b913      	cbnz	r3, 8011276 <_printf_float+0x16e>
 8011270:	6822      	ldr	r2, [r4, #0]
 8011272:	07d0      	lsls	r0, r2, #31
 8011274:	d502      	bpl.n	801127c <_printf_float+0x174>
 8011276:	3301      	adds	r3, #1
 8011278:	440b      	add	r3, r1
 801127a:	6123      	str	r3, [r4, #16]
 801127c:	2300      	movs	r3, #0
 801127e:	65a1      	str	r1, [r4, #88]	; 0x58
 8011280:	9304      	str	r3, [sp, #16]
 8011282:	e7de      	b.n	8011242 <_printf_float+0x13a>
 8011284:	b913      	cbnz	r3, 801128c <_printf_float+0x184>
 8011286:	6822      	ldr	r2, [r4, #0]
 8011288:	07d2      	lsls	r2, r2, #31
 801128a:	d501      	bpl.n	8011290 <_printf_float+0x188>
 801128c:	3302      	adds	r3, #2
 801128e:	e7f4      	b.n	801127a <_printf_float+0x172>
 8011290:	2301      	movs	r3, #1
 8011292:	e7f2      	b.n	801127a <_printf_float+0x172>
 8011294:	f04f 0967 	mov.w	r9, #103	; 0x67
 8011298:	9b08      	ldr	r3, [sp, #32]
 801129a:	4299      	cmp	r1, r3
 801129c:	db05      	blt.n	80112aa <_printf_float+0x1a2>
 801129e:	6823      	ldr	r3, [r4, #0]
 80112a0:	6121      	str	r1, [r4, #16]
 80112a2:	07d8      	lsls	r0, r3, #31
 80112a4:	d5ea      	bpl.n	801127c <_printf_float+0x174>
 80112a6:	1c4b      	adds	r3, r1, #1
 80112a8:	e7e7      	b.n	801127a <_printf_float+0x172>
 80112aa:	2900      	cmp	r1, #0
 80112ac:	bfd4      	ite	le
 80112ae:	f1c1 0202 	rsble	r2, r1, #2
 80112b2:	2201      	movgt	r2, #1
 80112b4:	4413      	add	r3, r2
 80112b6:	e7e0      	b.n	801127a <_printf_float+0x172>
 80112b8:	6823      	ldr	r3, [r4, #0]
 80112ba:	055a      	lsls	r2, r3, #21
 80112bc:	d407      	bmi.n	80112ce <_printf_float+0x1c6>
 80112be:	6923      	ldr	r3, [r4, #16]
 80112c0:	4642      	mov	r2, r8
 80112c2:	4631      	mov	r1, r6
 80112c4:	4628      	mov	r0, r5
 80112c6:	47b8      	blx	r7
 80112c8:	3001      	adds	r0, #1
 80112ca:	d12a      	bne.n	8011322 <_printf_float+0x21a>
 80112cc:	e76a      	b.n	80111a4 <_printf_float+0x9c>
 80112ce:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80112d2:	f240 80e2 	bls.w	801149a <_printf_float+0x392>
 80112d6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80112da:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80112de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112e2:	d133      	bne.n	801134c <_printf_float+0x244>
 80112e4:	4a38      	ldr	r2, [pc, #224]	; (80113c8 <_printf_float+0x2c0>)
 80112e6:	2301      	movs	r3, #1
 80112e8:	4631      	mov	r1, r6
 80112ea:	4628      	mov	r0, r5
 80112ec:	47b8      	blx	r7
 80112ee:	3001      	adds	r0, #1
 80112f0:	f43f af58 	beq.w	80111a4 <_printf_float+0x9c>
 80112f4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80112f8:	429a      	cmp	r2, r3
 80112fa:	db02      	blt.n	8011302 <_printf_float+0x1fa>
 80112fc:	6823      	ldr	r3, [r4, #0]
 80112fe:	07d8      	lsls	r0, r3, #31
 8011300:	d50f      	bpl.n	8011322 <_printf_float+0x21a>
 8011302:	4653      	mov	r3, sl
 8011304:	465a      	mov	r2, fp
 8011306:	4631      	mov	r1, r6
 8011308:	4628      	mov	r0, r5
 801130a:	47b8      	blx	r7
 801130c:	3001      	adds	r0, #1
 801130e:	f43f af49 	beq.w	80111a4 <_printf_float+0x9c>
 8011312:	f04f 0800 	mov.w	r8, #0
 8011316:	f104 091a 	add.w	r9, r4, #26
 801131a:	9b08      	ldr	r3, [sp, #32]
 801131c:	3b01      	subs	r3, #1
 801131e:	4543      	cmp	r3, r8
 8011320:	dc09      	bgt.n	8011336 <_printf_float+0x22e>
 8011322:	6823      	ldr	r3, [r4, #0]
 8011324:	079b      	lsls	r3, r3, #30
 8011326:	f100 8108 	bmi.w	801153a <_printf_float+0x432>
 801132a:	68e0      	ldr	r0, [r4, #12]
 801132c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801132e:	4298      	cmp	r0, r3
 8011330:	bfb8      	it	lt
 8011332:	4618      	movlt	r0, r3
 8011334:	e738      	b.n	80111a8 <_printf_float+0xa0>
 8011336:	2301      	movs	r3, #1
 8011338:	464a      	mov	r2, r9
 801133a:	4631      	mov	r1, r6
 801133c:	4628      	mov	r0, r5
 801133e:	47b8      	blx	r7
 8011340:	3001      	adds	r0, #1
 8011342:	f43f af2f 	beq.w	80111a4 <_printf_float+0x9c>
 8011346:	f108 0801 	add.w	r8, r8, #1
 801134a:	e7e6      	b.n	801131a <_printf_float+0x212>
 801134c:	9b07      	ldr	r3, [sp, #28]
 801134e:	2b00      	cmp	r3, #0
 8011350:	dc3c      	bgt.n	80113cc <_printf_float+0x2c4>
 8011352:	4a1d      	ldr	r2, [pc, #116]	; (80113c8 <_printf_float+0x2c0>)
 8011354:	2301      	movs	r3, #1
 8011356:	4631      	mov	r1, r6
 8011358:	4628      	mov	r0, r5
 801135a:	47b8      	blx	r7
 801135c:	3001      	adds	r0, #1
 801135e:	f43f af21 	beq.w	80111a4 <_printf_float+0x9c>
 8011362:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8011366:	4313      	orrs	r3, r2
 8011368:	d102      	bne.n	8011370 <_printf_float+0x268>
 801136a:	6823      	ldr	r3, [r4, #0]
 801136c:	07d9      	lsls	r1, r3, #31
 801136e:	d5d8      	bpl.n	8011322 <_printf_float+0x21a>
 8011370:	4653      	mov	r3, sl
 8011372:	465a      	mov	r2, fp
 8011374:	4631      	mov	r1, r6
 8011376:	4628      	mov	r0, r5
 8011378:	47b8      	blx	r7
 801137a:	3001      	adds	r0, #1
 801137c:	f43f af12 	beq.w	80111a4 <_printf_float+0x9c>
 8011380:	f04f 0900 	mov.w	r9, #0
 8011384:	f104 0a1a 	add.w	sl, r4, #26
 8011388:	9b07      	ldr	r3, [sp, #28]
 801138a:	425b      	negs	r3, r3
 801138c:	454b      	cmp	r3, r9
 801138e:	dc01      	bgt.n	8011394 <_printf_float+0x28c>
 8011390:	9b08      	ldr	r3, [sp, #32]
 8011392:	e795      	b.n	80112c0 <_printf_float+0x1b8>
 8011394:	2301      	movs	r3, #1
 8011396:	4652      	mov	r2, sl
 8011398:	4631      	mov	r1, r6
 801139a:	4628      	mov	r0, r5
 801139c:	47b8      	blx	r7
 801139e:	3001      	adds	r0, #1
 80113a0:	f43f af00 	beq.w	80111a4 <_printf_float+0x9c>
 80113a4:	f109 0901 	add.w	r9, r9, #1
 80113a8:	e7ee      	b.n	8011388 <_printf_float+0x280>
 80113aa:	bf00      	nop
 80113ac:	f3af 8000 	nop.w
 80113b0:	ffffffff 	.word	0xffffffff
 80113b4:	7fefffff 	.word	0x7fefffff
 80113b8:	0801387c 	.word	0x0801387c
 80113bc:	08013880 	.word	0x08013880
 80113c0:	08013888 	.word	0x08013888
 80113c4:	08013884 	.word	0x08013884
 80113c8:	0801388c 	.word	0x0801388c
 80113cc:	9a08      	ldr	r2, [sp, #32]
 80113ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80113d0:	429a      	cmp	r2, r3
 80113d2:	bfa8      	it	ge
 80113d4:	461a      	movge	r2, r3
 80113d6:	2a00      	cmp	r2, #0
 80113d8:	4691      	mov	r9, r2
 80113da:	dc38      	bgt.n	801144e <_printf_float+0x346>
 80113dc:	2300      	movs	r3, #0
 80113de:	9305      	str	r3, [sp, #20]
 80113e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80113e4:	f104 021a 	add.w	r2, r4, #26
 80113e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80113ea:	9905      	ldr	r1, [sp, #20]
 80113ec:	9304      	str	r3, [sp, #16]
 80113ee:	eba3 0309 	sub.w	r3, r3, r9
 80113f2:	428b      	cmp	r3, r1
 80113f4:	dc33      	bgt.n	801145e <_printf_float+0x356>
 80113f6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80113fa:	429a      	cmp	r2, r3
 80113fc:	db3c      	blt.n	8011478 <_printf_float+0x370>
 80113fe:	6823      	ldr	r3, [r4, #0]
 8011400:	07da      	lsls	r2, r3, #31
 8011402:	d439      	bmi.n	8011478 <_printf_float+0x370>
 8011404:	9b08      	ldr	r3, [sp, #32]
 8011406:	9a04      	ldr	r2, [sp, #16]
 8011408:	9907      	ldr	r1, [sp, #28]
 801140a:	1a9a      	subs	r2, r3, r2
 801140c:	eba3 0901 	sub.w	r9, r3, r1
 8011410:	4591      	cmp	r9, r2
 8011412:	bfa8      	it	ge
 8011414:	4691      	movge	r9, r2
 8011416:	f1b9 0f00 	cmp.w	r9, #0
 801141a:	dc35      	bgt.n	8011488 <_printf_float+0x380>
 801141c:	f04f 0800 	mov.w	r8, #0
 8011420:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011424:	f104 0a1a 	add.w	sl, r4, #26
 8011428:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801142c:	1a9b      	subs	r3, r3, r2
 801142e:	eba3 0309 	sub.w	r3, r3, r9
 8011432:	4543      	cmp	r3, r8
 8011434:	f77f af75 	ble.w	8011322 <_printf_float+0x21a>
 8011438:	2301      	movs	r3, #1
 801143a:	4652      	mov	r2, sl
 801143c:	4631      	mov	r1, r6
 801143e:	4628      	mov	r0, r5
 8011440:	47b8      	blx	r7
 8011442:	3001      	adds	r0, #1
 8011444:	f43f aeae 	beq.w	80111a4 <_printf_float+0x9c>
 8011448:	f108 0801 	add.w	r8, r8, #1
 801144c:	e7ec      	b.n	8011428 <_printf_float+0x320>
 801144e:	4613      	mov	r3, r2
 8011450:	4631      	mov	r1, r6
 8011452:	4642      	mov	r2, r8
 8011454:	4628      	mov	r0, r5
 8011456:	47b8      	blx	r7
 8011458:	3001      	adds	r0, #1
 801145a:	d1bf      	bne.n	80113dc <_printf_float+0x2d4>
 801145c:	e6a2      	b.n	80111a4 <_printf_float+0x9c>
 801145e:	2301      	movs	r3, #1
 8011460:	4631      	mov	r1, r6
 8011462:	4628      	mov	r0, r5
 8011464:	9204      	str	r2, [sp, #16]
 8011466:	47b8      	blx	r7
 8011468:	3001      	adds	r0, #1
 801146a:	f43f ae9b 	beq.w	80111a4 <_printf_float+0x9c>
 801146e:	9b05      	ldr	r3, [sp, #20]
 8011470:	9a04      	ldr	r2, [sp, #16]
 8011472:	3301      	adds	r3, #1
 8011474:	9305      	str	r3, [sp, #20]
 8011476:	e7b7      	b.n	80113e8 <_printf_float+0x2e0>
 8011478:	4653      	mov	r3, sl
 801147a:	465a      	mov	r2, fp
 801147c:	4631      	mov	r1, r6
 801147e:	4628      	mov	r0, r5
 8011480:	47b8      	blx	r7
 8011482:	3001      	adds	r0, #1
 8011484:	d1be      	bne.n	8011404 <_printf_float+0x2fc>
 8011486:	e68d      	b.n	80111a4 <_printf_float+0x9c>
 8011488:	9a04      	ldr	r2, [sp, #16]
 801148a:	464b      	mov	r3, r9
 801148c:	4442      	add	r2, r8
 801148e:	4631      	mov	r1, r6
 8011490:	4628      	mov	r0, r5
 8011492:	47b8      	blx	r7
 8011494:	3001      	adds	r0, #1
 8011496:	d1c1      	bne.n	801141c <_printf_float+0x314>
 8011498:	e684      	b.n	80111a4 <_printf_float+0x9c>
 801149a:	9a08      	ldr	r2, [sp, #32]
 801149c:	2a01      	cmp	r2, #1
 801149e:	dc01      	bgt.n	80114a4 <_printf_float+0x39c>
 80114a0:	07db      	lsls	r3, r3, #31
 80114a2:	d537      	bpl.n	8011514 <_printf_float+0x40c>
 80114a4:	2301      	movs	r3, #1
 80114a6:	4642      	mov	r2, r8
 80114a8:	4631      	mov	r1, r6
 80114aa:	4628      	mov	r0, r5
 80114ac:	47b8      	blx	r7
 80114ae:	3001      	adds	r0, #1
 80114b0:	f43f ae78 	beq.w	80111a4 <_printf_float+0x9c>
 80114b4:	4653      	mov	r3, sl
 80114b6:	465a      	mov	r2, fp
 80114b8:	4631      	mov	r1, r6
 80114ba:	4628      	mov	r0, r5
 80114bc:	47b8      	blx	r7
 80114be:	3001      	adds	r0, #1
 80114c0:	f43f ae70 	beq.w	80111a4 <_printf_float+0x9c>
 80114c4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80114c8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80114cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114d0:	d01b      	beq.n	801150a <_printf_float+0x402>
 80114d2:	9b08      	ldr	r3, [sp, #32]
 80114d4:	f108 0201 	add.w	r2, r8, #1
 80114d8:	3b01      	subs	r3, #1
 80114da:	4631      	mov	r1, r6
 80114dc:	4628      	mov	r0, r5
 80114de:	47b8      	blx	r7
 80114e0:	3001      	adds	r0, #1
 80114e2:	d10e      	bne.n	8011502 <_printf_float+0x3fa>
 80114e4:	e65e      	b.n	80111a4 <_printf_float+0x9c>
 80114e6:	2301      	movs	r3, #1
 80114e8:	464a      	mov	r2, r9
 80114ea:	4631      	mov	r1, r6
 80114ec:	4628      	mov	r0, r5
 80114ee:	47b8      	blx	r7
 80114f0:	3001      	adds	r0, #1
 80114f2:	f43f ae57 	beq.w	80111a4 <_printf_float+0x9c>
 80114f6:	f108 0801 	add.w	r8, r8, #1
 80114fa:	9b08      	ldr	r3, [sp, #32]
 80114fc:	3b01      	subs	r3, #1
 80114fe:	4543      	cmp	r3, r8
 8011500:	dcf1      	bgt.n	80114e6 <_printf_float+0x3de>
 8011502:	9b04      	ldr	r3, [sp, #16]
 8011504:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011508:	e6db      	b.n	80112c2 <_printf_float+0x1ba>
 801150a:	f04f 0800 	mov.w	r8, #0
 801150e:	f104 091a 	add.w	r9, r4, #26
 8011512:	e7f2      	b.n	80114fa <_printf_float+0x3f2>
 8011514:	2301      	movs	r3, #1
 8011516:	4642      	mov	r2, r8
 8011518:	e7df      	b.n	80114da <_printf_float+0x3d2>
 801151a:	2301      	movs	r3, #1
 801151c:	464a      	mov	r2, r9
 801151e:	4631      	mov	r1, r6
 8011520:	4628      	mov	r0, r5
 8011522:	47b8      	blx	r7
 8011524:	3001      	adds	r0, #1
 8011526:	f43f ae3d 	beq.w	80111a4 <_printf_float+0x9c>
 801152a:	f108 0801 	add.w	r8, r8, #1
 801152e:	68e3      	ldr	r3, [r4, #12]
 8011530:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011532:	1a5b      	subs	r3, r3, r1
 8011534:	4543      	cmp	r3, r8
 8011536:	dcf0      	bgt.n	801151a <_printf_float+0x412>
 8011538:	e6f7      	b.n	801132a <_printf_float+0x222>
 801153a:	f04f 0800 	mov.w	r8, #0
 801153e:	f104 0919 	add.w	r9, r4, #25
 8011542:	e7f4      	b.n	801152e <_printf_float+0x426>

08011544 <_printf_common>:
 8011544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011548:	4616      	mov	r6, r2
 801154a:	4699      	mov	r9, r3
 801154c:	688a      	ldr	r2, [r1, #8]
 801154e:	690b      	ldr	r3, [r1, #16]
 8011550:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011554:	4293      	cmp	r3, r2
 8011556:	bfb8      	it	lt
 8011558:	4613      	movlt	r3, r2
 801155a:	6033      	str	r3, [r6, #0]
 801155c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011560:	4607      	mov	r7, r0
 8011562:	460c      	mov	r4, r1
 8011564:	b10a      	cbz	r2, 801156a <_printf_common+0x26>
 8011566:	3301      	adds	r3, #1
 8011568:	6033      	str	r3, [r6, #0]
 801156a:	6823      	ldr	r3, [r4, #0]
 801156c:	0699      	lsls	r1, r3, #26
 801156e:	bf42      	ittt	mi
 8011570:	6833      	ldrmi	r3, [r6, #0]
 8011572:	3302      	addmi	r3, #2
 8011574:	6033      	strmi	r3, [r6, #0]
 8011576:	6825      	ldr	r5, [r4, #0]
 8011578:	f015 0506 	ands.w	r5, r5, #6
 801157c:	d106      	bne.n	801158c <_printf_common+0x48>
 801157e:	f104 0a19 	add.w	sl, r4, #25
 8011582:	68e3      	ldr	r3, [r4, #12]
 8011584:	6832      	ldr	r2, [r6, #0]
 8011586:	1a9b      	subs	r3, r3, r2
 8011588:	42ab      	cmp	r3, r5
 801158a:	dc26      	bgt.n	80115da <_printf_common+0x96>
 801158c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011590:	1e13      	subs	r3, r2, #0
 8011592:	6822      	ldr	r2, [r4, #0]
 8011594:	bf18      	it	ne
 8011596:	2301      	movne	r3, #1
 8011598:	0692      	lsls	r2, r2, #26
 801159a:	d42b      	bmi.n	80115f4 <_printf_common+0xb0>
 801159c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80115a0:	4649      	mov	r1, r9
 80115a2:	4638      	mov	r0, r7
 80115a4:	47c0      	blx	r8
 80115a6:	3001      	adds	r0, #1
 80115a8:	d01e      	beq.n	80115e8 <_printf_common+0xa4>
 80115aa:	6823      	ldr	r3, [r4, #0]
 80115ac:	68e5      	ldr	r5, [r4, #12]
 80115ae:	6832      	ldr	r2, [r6, #0]
 80115b0:	f003 0306 	and.w	r3, r3, #6
 80115b4:	2b04      	cmp	r3, #4
 80115b6:	bf08      	it	eq
 80115b8:	1aad      	subeq	r5, r5, r2
 80115ba:	68a3      	ldr	r3, [r4, #8]
 80115bc:	6922      	ldr	r2, [r4, #16]
 80115be:	bf0c      	ite	eq
 80115c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80115c4:	2500      	movne	r5, #0
 80115c6:	4293      	cmp	r3, r2
 80115c8:	bfc4      	itt	gt
 80115ca:	1a9b      	subgt	r3, r3, r2
 80115cc:	18ed      	addgt	r5, r5, r3
 80115ce:	2600      	movs	r6, #0
 80115d0:	341a      	adds	r4, #26
 80115d2:	42b5      	cmp	r5, r6
 80115d4:	d11a      	bne.n	801160c <_printf_common+0xc8>
 80115d6:	2000      	movs	r0, #0
 80115d8:	e008      	b.n	80115ec <_printf_common+0xa8>
 80115da:	2301      	movs	r3, #1
 80115dc:	4652      	mov	r2, sl
 80115de:	4649      	mov	r1, r9
 80115e0:	4638      	mov	r0, r7
 80115e2:	47c0      	blx	r8
 80115e4:	3001      	adds	r0, #1
 80115e6:	d103      	bne.n	80115f0 <_printf_common+0xac>
 80115e8:	f04f 30ff 	mov.w	r0, #4294967295
 80115ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80115f0:	3501      	adds	r5, #1
 80115f2:	e7c6      	b.n	8011582 <_printf_common+0x3e>
 80115f4:	18e1      	adds	r1, r4, r3
 80115f6:	1c5a      	adds	r2, r3, #1
 80115f8:	2030      	movs	r0, #48	; 0x30
 80115fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80115fe:	4422      	add	r2, r4
 8011600:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011604:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011608:	3302      	adds	r3, #2
 801160a:	e7c7      	b.n	801159c <_printf_common+0x58>
 801160c:	2301      	movs	r3, #1
 801160e:	4622      	mov	r2, r4
 8011610:	4649      	mov	r1, r9
 8011612:	4638      	mov	r0, r7
 8011614:	47c0      	blx	r8
 8011616:	3001      	adds	r0, #1
 8011618:	d0e6      	beq.n	80115e8 <_printf_common+0xa4>
 801161a:	3601      	adds	r6, #1
 801161c:	e7d9      	b.n	80115d2 <_printf_common+0x8e>
	...

08011620 <_printf_i>:
 8011620:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011624:	7e0f      	ldrb	r7, [r1, #24]
 8011626:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011628:	2f78      	cmp	r7, #120	; 0x78
 801162a:	4691      	mov	r9, r2
 801162c:	4680      	mov	r8, r0
 801162e:	460c      	mov	r4, r1
 8011630:	469a      	mov	sl, r3
 8011632:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011636:	d807      	bhi.n	8011648 <_printf_i+0x28>
 8011638:	2f62      	cmp	r7, #98	; 0x62
 801163a:	d80a      	bhi.n	8011652 <_printf_i+0x32>
 801163c:	2f00      	cmp	r7, #0
 801163e:	f000 80d8 	beq.w	80117f2 <_printf_i+0x1d2>
 8011642:	2f58      	cmp	r7, #88	; 0x58
 8011644:	f000 80a3 	beq.w	801178e <_printf_i+0x16e>
 8011648:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801164c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011650:	e03a      	b.n	80116c8 <_printf_i+0xa8>
 8011652:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011656:	2b15      	cmp	r3, #21
 8011658:	d8f6      	bhi.n	8011648 <_printf_i+0x28>
 801165a:	a101      	add	r1, pc, #4	; (adr r1, 8011660 <_printf_i+0x40>)
 801165c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011660:	080116b9 	.word	0x080116b9
 8011664:	080116cd 	.word	0x080116cd
 8011668:	08011649 	.word	0x08011649
 801166c:	08011649 	.word	0x08011649
 8011670:	08011649 	.word	0x08011649
 8011674:	08011649 	.word	0x08011649
 8011678:	080116cd 	.word	0x080116cd
 801167c:	08011649 	.word	0x08011649
 8011680:	08011649 	.word	0x08011649
 8011684:	08011649 	.word	0x08011649
 8011688:	08011649 	.word	0x08011649
 801168c:	080117d9 	.word	0x080117d9
 8011690:	080116fd 	.word	0x080116fd
 8011694:	080117bb 	.word	0x080117bb
 8011698:	08011649 	.word	0x08011649
 801169c:	08011649 	.word	0x08011649
 80116a0:	080117fb 	.word	0x080117fb
 80116a4:	08011649 	.word	0x08011649
 80116a8:	080116fd 	.word	0x080116fd
 80116ac:	08011649 	.word	0x08011649
 80116b0:	08011649 	.word	0x08011649
 80116b4:	080117c3 	.word	0x080117c3
 80116b8:	682b      	ldr	r3, [r5, #0]
 80116ba:	1d1a      	adds	r2, r3, #4
 80116bc:	681b      	ldr	r3, [r3, #0]
 80116be:	602a      	str	r2, [r5, #0]
 80116c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80116c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80116c8:	2301      	movs	r3, #1
 80116ca:	e0a3      	b.n	8011814 <_printf_i+0x1f4>
 80116cc:	6820      	ldr	r0, [r4, #0]
 80116ce:	6829      	ldr	r1, [r5, #0]
 80116d0:	0606      	lsls	r6, r0, #24
 80116d2:	f101 0304 	add.w	r3, r1, #4
 80116d6:	d50a      	bpl.n	80116ee <_printf_i+0xce>
 80116d8:	680e      	ldr	r6, [r1, #0]
 80116da:	602b      	str	r3, [r5, #0]
 80116dc:	2e00      	cmp	r6, #0
 80116de:	da03      	bge.n	80116e8 <_printf_i+0xc8>
 80116e0:	232d      	movs	r3, #45	; 0x2d
 80116e2:	4276      	negs	r6, r6
 80116e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80116e8:	485e      	ldr	r0, [pc, #376]	; (8011864 <_printf_i+0x244>)
 80116ea:	230a      	movs	r3, #10
 80116ec:	e019      	b.n	8011722 <_printf_i+0x102>
 80116ee:	680e      	ldr	r6, [r1, #0]
 80116f0:	602b      	str	r3, [r5, #0]
 80116f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80116f6:	bf18      	it	ne
 80116f8:	b236      	sxthne	r6, r6
 80116fa:	e7ef      	b.n	80116dc <_printf_i+0xbc>
 80116fc:	682b      	ldr	r3, [r5, #0]
 80116fe:	6820      	ldr	r0, [r4, #0]
 8011700:	1d19      	adds	r1, r3, #4
 8011702:	6029      	str	r1, [r5, #0]
 8011704:	0601      	lsls	r1, r0, #24
 8011706:	d501      	bpl.n	801170c <_printf_i+0xec>
 8011708:	681e      	ldr	r6, [r3, #0]
 801170a:	e002      	b.n	8011712 <_printf_i+0xf2>
 801170c:	0646      	lsls	r6, r0, #25
 801170e:	d5fb      	bpl.n	8011708 <_printf_i+0xe8>
 8011710:	881e      	ldrh	r6, [r3, #0]
 8011712:	4854      	ldr	r0, [pc, #336]	; (8011864 <_printf_i+0x244>)
 8011714:	2f6f      	cmp	r7, #111	; 0x6f
 8011716:	bf0c      	ite	eq
 8011718:	2308      	moveq	r3, #8
 801171a:	230a      	movne	r3, #10
 801171c:	2100      	movs	r1, #0
 801171e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011722:	6865      	ldr	r5, [r4, #4]
 8011724:	60a5      	str	r5, [r4, #8]
 8011726:	2d00      	cmp	r5, #0
 8011728:	bfa2      	ittt	ge
 801172a:	6821      	ldrge	r1, [r4, #0]
 801172c:	f021 0104 	bicge.w	r1, r1, #4
 8011730:	6021      	strge	r1, [r4, #0]
 8011732:	b90e      	cbnz	r6, 8011738 <_printf_i+0x118>
 8011734:	2d00      	cmp	r5, #0
 8011736:	d04d      	beq.n	80117d4 <_printf_i+0x1b4>
 8011738:	4615      	mov	r5, r2
 801173a:	fbb6 f1f3 	udiv	r1, r6, r3
 801173e:	fb03 6711 	mls	r7, r3, r1, r6
 8011742:	5dc7      	ldrb	r7, [r0, r7]
 8011744:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011748:	4637      	mov	r7, r6
 801174a:	42bb      	cmp	r3, r7
 801174c:	460e      	mov	r6, r1
 801174e:	d9f4      	bls.n	801173a <_printf_i+0x11a>
 8011750:	2b08      	cmp	r3, #8
 8011752:	d10b      	bne.n	801176c <_printf_i+0x14c>
 8011754:	6823      	ldr	r3, [r4, #0]
 8011756:	07de      	lsls	r6, r3, #31
 8011758:	d508      	bpl.n	801176c <_printf_i+0x14c>
 801175a:	6923      	ldr	r3, [r4, #16]
 801175c:	6861      	ldr	r1, [r4, #4]
 801175e:	4299      	cmp	r1, r3
 8011760:	bfde      	ittt	le
 8011762:	2330      	movle	r3, #48	; 0x30
 8011764:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011768:	f105 35ff 	addle.w	r5, r5, #4294967295
 801176c:	1b52      	subs	r2, r2, r5
 801176e:	6122      	str	r2, [r4, #16]
 8011770:	f8cd a000 	str.w	sl, [sp]
 8011774:	464b      	mov	r3, r9
 8011776:	aa03      	add	r2, sp, #12
 8011778:	4621      	mov	r1, r4
 801177a:	4640      	mov	r0, r8
 801177c:	f7ff fee2 	bl	8011544 <_printf_common>
 8011780:	3001      	adds	r0, #1
 8011782:	d14c      	bne.n	801181e <_printf_i+0x1fe>
 8011784:	f04f 30ff 	mov.w	r0, #4294967295
 8011788:	b004      	add	sp, #16
 801178a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801178e:	4835      	ldr	r0, [pc, #212]	; (8011864 <_printf_i+0x244>)
 8011790:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011794:	6829      	ldr	r1, [r5, #0]
 8011796:	6823      	ldr	r3, [r4, #0]
 8011798:	f851 6b04 	ldr.w	r6, [r1], #4
 801179c:	6029      	str	r1, [r5, #0]
 801179e:	061d      	lsls	r5, r3, #24
 80117a0:	d514      	bpl.n	80117cc <_printf_i+0x1ac>
 80117a2:	07df      	lsls	r7, r3, #31
 80117a4:	bf44      	itt	mi
 80117a6:	f043 0320 	orrmi.w	r3, r3, #32
 80117aa:	6023      	strmi	r3, [r4, #0]
 80117ac:	b91e      	cbnz	r6, 80117b6 <_printf_i+0x196>
 80117ae:	6823      	ldr	r3, [r4, #0]
 80117b0:	f023 0320 	bic.w	r3, r3, #32
 80117b4:	6023      	str	r3, [r4, #0]
 80117b6:	2310      	movs	r3, #16
 80117b8:	e7b0      	b.n	801171c <_printf_i+0xfc>
 80117ba:	6823      	ldr	r3, [r4, #0]
 80117bc:	f043 0320 	orr.w	r3, r3, #32
 80117c0:	6023      	str	r3, [r4, #0]
 80117c2:	2378      	movs	r3, #120	; 0x78
 80117c4:	4828      	ldr	r0, [pc, #160]	; (8011868 <_printf_i+0x248>)
 80117c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80117ca:	e7e3      	b.n	8011794 <_printf_i+0x174>
 80117cc:	0659      	lsls	r1, r3, #25
 80117ce:	bf48      	it	mi
 80117d0:	b2b6      	uxthmi	r6, r6
 80117d2:	e7e6      	b.n	80117a2 <_printf_i+0x182>
 80117d4:	4615      	mov	r5, r2
 80117d6:	e7bb      	b.n	8011750 <_printf_i+0x130>
 80117d8:	682b      	ldr	r3, [r5, #0]
 80117da:	6826      	ldr	r6, [r4, #0]
 80117dc:	6961      	ldr	r1, [r4, #20]
 80117de:	1d18      	adds	r0, r3, #4
 80117e0:	6028      	str	r0, [r5, #0]
 80117e2:	0635      	lsls	r5, r6, #24
 80117e4:	681b      	ldr	r3, [r3, #0]
 80117e6:	d501      	bpl.n	80117ec <_printf_i+0x1cc>
 80117e8:	6019      	str	r1, [r3, #0]
 80117ea:	e002      	b.n	80117f2 <_printf_i+0x1d2>
 80117ec:	0670      	lsls	r0, r6, #25
 80117ee:	d5fb      	bpl.n	80117e8 <_printf_i+0x1c8>
 80117f0:	8019      	strh	r1, [r3, #0]
 80117f2:	2300      	movs	r3, #0
 80117f4:	6123      	str	r3, [r4, #16]
 80117f6:	4615      	mov	r5, r2
 80117f8:	e7ba      	b.n	8011770 <_printf_i+0x150>
 80117fa:	682b      	ldr	r3, [r5, #0]
 80117fc:	1d1a      	adds	r2, r3, #4
 80117fe:	602a      	str	r2, [r5, #0]
 8011800:	681d      	ldr	r5, [r3, #0]
 8011802:	6862      	ldr	r2, [r4, #4]
 8011804:	2100      	movs	r1, #0
 8011806:	4628      	mov	r0, r5
 8011808:	f7ee fd72 	bl	80002f0 <memchr>
 801180c:	b108      	cbz	r0, 8011812 <_printf_i+0x1f2>
 801180e:	1b40      	subs	r0, r0, r5
 8011810:	6060      	str	r0, [r4, #4]
 8011812:	6863      	ldr	r3, [r4, #4]
 8011814:	6123      	str	r3, [r4, #16]
 8011816:	2300      	movs	r3, #0
 8011818:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801181c:	e7a8      	b.n	8011770 <_printf_i+0x150>
 801181e:	6923      	ldr	r3, [r4, #16]
 8011820:	462a      	mov	r2, r5
 8011822:	4649      	mov	r1, r9
 8011824:	4640      	mov	r0, r8
 8011826:	47d0      	blx	sl
 8011828:	3001      	adds	r0, #1
 801182a:	d0ab      	beq.n	8011784 <_printf_i+0x164>
 801182c:	6823      	ldr	r3, [r4, #0]
 801182e:	079b      	lsls	r3, r3, #30
 8011830:	d413      	bmi.n	801185a <_printf_i+0x23a>
 8011832:	68e0      	ldr	r0, [r4, #12]
 8011834:	9b03      	ldr	r3, [sp, #12]
 8011836:	4298      	cmp	r0, r3
 8011838:	bfb8      	it	lt
 801183a:	4618      	movlt	r0, r3
 801183c:	e7a4      	b.n	8011788 <_printf_i+0x168>
 801183e:	2301      	movs	r3, #1
 8011840:	4632      	mov	r2, r6
 8011842:	4649      	mov	r1, r9
 8011844:	4640      	mov	r0, r8
 8011846:	47d0      	blx	sl
 8011848:	3001      	adds	r0, #1
 801184a:	d09b      	beq.n	8011784 <_printf_i+0x164>
 801184c:	3501      	adds	r5, #1
 801184e:	68e3      	ldr	r3, [r4, #12]
 8011850:	9903      	ldr	r1, [sp, #12]
 8011852:	1a5b      	subs	r3, r3, r1
 8011854:	42ab      	cmp	r3, r5
 8011856:	dcf2      	bgt.n	801183e <_printf_i+0x21e>
 8011858:	e7eb      	b.n	8011832 <_printf_i+0x212>
 801185a:	2500      	movs	r5, #0
 801185c:	f104 0619 	add.w	r6, r4, #25
 8011860:	e7f5      	b.n	801184e <_printf_i+0x22e>
 8011862:	bf00      	nop
 8011864:	0801388e 	.word	0x0801388e
 8011868:	0801389f 	.word	0x0801389f

0801186c <_sbrk_r>:
 801186c:	b538      	push	{r3, r4, r5, lr}
 801186e:	4d06      	ldr	r5, [pc, #24]	; (8011888 <_sbrk_r+0x1c>)
 8011870:	2300      	movs	r3, #0
 8011872:	4604      	mov	r4, r0
 8011874:	4608      	mov	r0, r1
 8011876:	602b      	str	r3, [r5, #0]
 8011878:	f7ef feb8 	bl	80015ec <_sbrk>
 801187c:	1c43      	adds	r3, r0, #1
 801187e:	d102      	bne.n	8011886 <_sbrk_r+0x1a>
 8011880:	682b      	ldr	r3, [r5, #0]
 8011882:	b103      	cbz	r3, 8011886 <_sbrk_r+0x1a>
 8011884:	6023      	str	r3, [r4, #0]
 8011886:	bd38      	pop	{r3, r4, r5, pc}
 8011888:	24002048 	.word	0x24002048

0801188c <quorem>:
 801188c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011890:	6903      	ldr	r3, [r0, #16]
 8011892:	690c      	ldr	r4, [r1, #16]
 8011894:	42a3      	cmp	r3, r4
 8011896:	4607      	mov	r7, r0
 8011898:	f2c0 8081 	blt.w	801199e <quorem+0x112>
 801189c:	3c01      	subs	r4, #1
 801189e:	f101 0814 	add.w	r8, r1, #20
 80118a2:	f100 0514 	add.w	r5, r0, #20
 80118a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80118aa:	9301      	str	r3, [sp, #4]
 80118ac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80118b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80118b4:	3301      	adds	r3, #1
 80118b6:	429a      	cmp	r2, r3
 80118b8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80118bc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80118c0:	fbb2 f6f3 	udiv	r6, r2, r3
 80118c4:	d331      	bcc.n	801192a <quorem+0x9e>
 80118c6:	f04f 0e00 	mov.w	lr, #0
 80118ca:	4640      	mov	r0, r8
 80118cc:	46ac      	mov	ip, r5
 80118ce:	46f2      	mov	sl, lr
 80118d0:	f850 2b04 	ldr.w	r2, [r0], #4
 80118d4:	b293      	uxth	r3, r2
 80118d6:	fb06 e303 	mla	r3, r6, r3, lr
 80118da:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80118de:	b29b      	uxth	r3, r3
 80118e0:	ebaa 0303 	sub.w	r3, sl, r3
 80118e4:	f8dc a000 	ldr.w	sl, [ip]
 80118e8:	0c12      	lsrs	r2, r2, #16
 80118ea:	fa13 f38a 	uxtah	r3, r3, sl
 80118ee:	fb06 e202 	mla	r2, r6, r2, lr
 80118f2:	9300      	str	r3, [sp, #0]
 80118f4:	9b00      	ldr	r3, [sp, #0]
 80118f6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80118fa:	b292      	uxth	r2, r2
 80118fc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8011900:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011904:	f8bd 3000 	ldrh.w	r3, [sp]
 8011908:	4581      	cmp	r9, r0
 801190a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801190e:	f84c 3b04 	str.w	r3, [ip], #4
 8011912:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011916:	d2db      	bcs.n	80118d0 <quorem+0x44>
 8011918:	f855 300b 	ldr.w	r3, [r5, fp]
 801191c:	b92b      	cbnz	r3, 801192a <quorem+0x9e>
 801191e:	9b01      	ldr	r3, [sp, #4]
 8011920:	3b04      	subs	r3, #4
 8011922:	429d      	cmp	r5, r3
 8011924:	461a      	mov	r2, r3
 8011926:	d32e      	bcc.n	8011986 <quorem+0xfa>
 8011928:	613c      	str	r4, [r7, #16]
 801192a:	4638      	mov	r0, r7
 801192c:	f001 f83c 	bl	80129a8 <__mcmp>
 8011930:	2800      	cmp	r0, #0
 8011932:	db24      	blt.n	801197e <quorem+0xf2>
 8011934:	3601      	adds	r6, #1
 8011936:	4628      	mov	r0, r5
 8011938:	f04f 0c00 	mov.w	ip, #0
 801193c:	f858 2b04 	ldr.w	r2, [r8], #4
 8011940:	f8d0 e000 	ldr.w	lr, [r0]
 8011944:	b293      	uxth	r3, r2
 8011946:	ebac 0303 	sub.w	r3, ip, r3
 801194a:	0c12      	lsrs	r2, r2, #16
 801194c:	fa13 f38e 	uxtah	r3, r3, lr
 8011950:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011954:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011958:	b29b      	uxth	r3, r3
 801195a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801195e:	45c1      	cmp	r9, r8
 8011960:	f840 3b04 	str.w	r3, [r0], #4
 8011964:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011968:	d2e8      	bcs.n	801193c <quorem+0xb0>
 801196a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801196e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011972:	b922      	cbnz	r2, 801197e <quorem+0xf2>
 8011974:	3b04      	subs	r3, #4
 8011976:	429d      	cmp	r5, r3
 8011978:	461a      	mov	r2, r3
 801197a:	d30a      	bcc.n	8011992 <quorem+0x106>
 801197c:	613c      	str	r4, [r7, #16]
 801197e:	4630      	mov	r0, r6
 8011980:	b003      	add	sp, #12
 8011982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011986:	6812      	ldr	r2, [r2, #0]
 8011988:	3b04      	subs	r3, #4
 801198a:	2a00      	cmp	r2, #0
 801198c:	d1cc      	bne.n	8011928 <quorem+0x9c>
 801198e:	3c01      	subs	r4, #1
 8011990:	e7c7      	b.n	8011922 <quorem+0x96>
 8011992:	6812      	ldr	r2, [r2, #0]
 8011994:	3b04      	subs	r3, #4
 8011996:	2a00      	cmp	r2, #0
 8011998:	d1f0      	bne.n	801197c <quorem+0xf0>
 801199a:	3c01      	subs	r4, #1
 801199c:	e7eb      	b.n	8011976 <quorem+0xea>
 801199e:	2000      	movs	r0, #0
 80119a0:	e7ee      	b.n	8011980 <quorem+0xf4>
 80119a2:	0000      	movs	r0, r0
 80119a4:	0000      	movs	r0, r0
	...

080119a8 <_dtoa_r>:
 80119a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119ac:	ed2d 8b02 	vpush	{d8}
 80119b0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80119b2:	b091      	sub	sp, #68	; 0x44
 80119b4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80119b8:	ec59 8b10 	vmov	r8, r9, d0
 80119bc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80119be:	9106      	str	r1, [sp, #24]
 80119c0:	4606      	mov	r6, r0
 80119c2:	9208      	str	r2, [sp, #32]
 80119c4:	930c      	str	r3, [sp, #48]	; 0x30
 80119c6:	b975      	cbnz	r5, 80119e6 <_dtoa_r+0x3e>
 80119c8:	2010      	movs	r0, #16
 80119ca:	f7ff fa07 	bl	8010ddc <malloc>
 80119ce:	4602      	mov	r2, r0
 80119d0:	6270      	str	r0, [r6, #36]	; 0x24
 80119d2:	b920      	cbnz	r0, 80119de <_dtoa_r+0x36>
 80119d4:	4baa      	ldr	r3, [pc, #680]	; (8011c80 <_dtoa_r+0x2d8>)
 80119d6:	21ea      	movs	r1, #234	; 0xea
 80119d8:	48aa      	ldr	r0, [pc, #680]	; (8011c84 <_dtoa_r+0x2dc>)
 80119da:	f001 f8fd 	bl	8012bd8 <__assert_func>
 80119de:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80119e2:	6005      	str	r5, [r0, #0]
 80119e4:	60c5      	str	r5, [r0, #12]
 80119e6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80119e8:	6819      	ldr	r1, [r3, #0]
 80119ea:	b151      	cbz	r1, 8011a02 <_dtoa_r+0x5a>
 80119ec:	685a      	ldr	r2, [r3, #4]
 80119ee:	604a      	str	r2, [r1, #4]
 80119f0:	2301      	movs	r3, #1
 80119f2:	4093      	lsls	r3, r2
 80119f4:	608b      	str	r3, [r1, #8]
 80119f6:	4630      	mov	r0, r6
 80119f8:	f000 fd94 	bl	8012524 <_Bfree>
 80119fc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80119fe:	2200      	movs	r2, #0
 8011a00:	601a      	str	r2, [r3, #0]
 8011a02:	f1b9 0300 	subs.w	r3, r9, #0
 8011a06:	bfbb      	ittet	lt
 8011a08:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8011a0c:	9303      	strlt	r3, [sp, #12]
 8011a0e:	2300      	movge	r3, #0
 8011a10:	2201      	movlt	r2, #1
 8011a12:	bfac      	ite	ge
 8011a14:	6023      	strge	r3, [r4, #0]
 8011a16:	6022      	strlt	r2, [r4, #0]
 8011a18:	4b9b      	ldr	r3, [pc, #620]	; (8011c88 <_dtoa_r+0x2e0>)
 8011a1a:	9c03      	ldr	r4, [sp, #12]
 8011a1c:	43a3      	bics	r3, r4
 8011a1e:	d11c      	bne.n	8011a5a <_dtoa_r+0xb2>
 8011a20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011a22:	f242 730f 	movw	r3, #9999	; 0x270f
 8011a26:	6013      	str	r3, [r2, #0]
 8011a28:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8011a2c:	ea53 0308 	orrs.w	r3, r3, r8
 8011a30:	f000 84fd 	beq.w	801242e <_dtoa_r+0xa86>
 8011a34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011a36:	b963      	cbnz	r3, 8011a52 <_dtoa_r+0xaa>
 8011a38:	4b94      	ldr	r3, [pc, #592]	; (8011c8c <_dtoa_r+0x2e4>)
 8011a3a:	e01f      	b.n	8011a7c <_dtoa_r+0xd4>
 8011a3c:	4b94      	ldr	r3, [pc, #592]	; (8011c90 <_dtoa_r+0x2e8>)
 8011a3e:	9301      	str	r3, [sp, #4]
 8011a40:	3308      	adds	r3, #8
 8011a42:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8011a44:	6013      	str	r3, [r2, #0]
 8011a46:	9801      	ldr	r0, [sp, #4]
 8011a48:	b011      	add	sp, #68	; 0x44
 8011a4a:	ecbd 8b02 	vpop	{d8}
 8011a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a52:	4b8e      	ldr	r3, [pc, #568]	; (8011c8c <_dtoa_r+0x2e4>)
 8011a54:	9301      	str	r3, [sp, #4]
 8011a56:	3303      	adds	r3, #3
 8011a58:	e7f3      	b.n	8011a42 <_dtoa_r+0x9a>
 8011a5a:	ed9d 8b02 	vldr	d8, [sp, #8]
 8011a5e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a66:	d10b      	bne.n	8011a80 <_dtoa_r+0xd8>
 8011a68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011a6a:	2301      	movs	r3, #1
 8011a6c:	6013      	str	r3, [r2, #0]
 8011a6e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	f000 84d9 	beq.w	8012428 <_dtoa_r+0xa80>
 8011a76:	4887      	ldr	r0, [pc, #540]	; (8011c94 <_dtoa_r+0x2ec>)
 8011a78:	6018      	str	r0, [r3, #0]
 8011a7a:	1e43      	subs	r3, r0, #1
 8011a7c:	9301      	str	r3, [sp, #4]
 8011a7e:	e7e2      	b.n	8011a46 <_dtoa_r+0x9e>
 8011a80:	a90f      	add	r1, sp, #60	; 0x3c
 8011a82:	aa0e      	add	r2, sp, #56	; 0x38
 8011a84:	4630      	mov	r0, r6
 8011a86:	eeb0 0b48 	vmov.f64	d0, d8
 8011a8a:	f001 f833 	bl	8012af4 <__d2b>
 8011a8e:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8011a92:	4605      	mov	r5, r0
 8011a94:	980e      	ldr	r0, [sp, #56]	; 0x38
 8011a96:	2900      	cmp	r1, #0
 8011a98:	d046      	beq.n	8011b28 <_dtoa_r+0x180>
 8011a9a:	ee18 4a90 	vmov	r4, s17
 8011a9e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8011aa2:	ec53 2b18 	vmov	r2, r3, d8
 8011aa6:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8011aaa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011aae:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8011ab2:	2400      	movs	r4, #0
 8011ab4:	ec43 2b16 	vmov	d6, r2, r3
 8011ab8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8011abc:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8011c68 <_dtoa_r+0x2c0>
 8011ac0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011ac4:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8011c70 <_dtoa_r+0x2c8>
 8011ac8:	eea7 6b05 	vfma.f64	d6, d7, d5
 8011acc:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8011c78 <_dtoa_r+0x2d0>
 8011ad0:	ee07 1a90 	vmov	s15, r1
 8011ad4:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8011ad8:	eeb0 7b46 	vmov.f64	d7, d6
 8011adc:	eea4 7b05 	vfma.f64	d7, d4, d5
 8011ae0:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8011ae4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8011ae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011aec:	ee16 ba90 	vmov	fp, s13
 8011af0:	940a      	str	r4, [sp, #40]	; 0x28
 8011af2:	d508      	bpl.n	8011b06 <_dtoa_r+0x15e>
 8011af4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8011af8:	eeb4 6b47 	vcmp.f64	d6, d7
 8011afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b00:	bf18      	it	ne
 8011b02:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8011b06:	f1bb 0f16 	cmp.w	fp, #22
 8011b0a:	d82f      	bhi.n	8011b6c <_dtoa_r+0x1c4>
 8011b0c:	4b62      	ldr	r3, [pc, #392]	; (8011c98 <_dtoa_r+0x2f0>)
 8011b0e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8011b12:	ed93 7b00 	vldr	d7, [r3]
 8011b16:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8011b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b1e:	d501      	bpl.n	8011b24 <_dtoa_r+0x17c>
 8011b20:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011b24:	2300      	movs	r3, #0
 8011b26:	e022      	b.n	8011b6e <_dtoa_r+0x1c6>
 8011b28:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011b2a:	4401      	add	r1, r0
 8011b2c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8011b30:	2b20      	cmp	r3, #32
 8011b32:	bfc1      	itttt	gt
 8011b34:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8011b38:	fa04 f303 	lslgt.w	r3, r4, r3
 8011b3c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8011b40:	fa28 f804 	lsrgt.w	r8, r8, r4
 8011b44:	bfd6      	itet	le
 8011b46:	f1c3 0320 	rsble	r3, r3, #32
 8011b4a:	ea43 0808 	orrgt.w	r8, r3, r8
 8011b4e:	fa08 f803 	lslle.w	r8, r8, r3
 8011b52:	ee07 8a90 	vmov	s15, r8
 8011b56:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8011b5a:	3901      	subs	r1, #1
 8011b5c:	ee17 4a90 	vmov	r4, s15
 8011b60:	ec53 2b17 	vmov	r2, r3, d7
 8011b64:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8011b68:	2401      	movs	r4, #1
 8011b6a:	e7a3      	b.n	8011ab4 <_dtoa_r+0x10c>
 8011b6c:	2301      	movs	r3, #1
 8011b6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8011b70:	1a43      	subs	r3, r0, r1
 8011b72:	1e5a      	subs	r2, r3, #1
 8011b74:	bf45      	ittet	mi
 8011b76:	f1c3 0301 	rsbmi	r3, r3, #1
 8011b7a:	9304      	strmi	r3, [sp, #16]
 8011b7c:	2300      	movpl	r3, #0
 8011b7e:	2300      	movmi	r3, #0
 8011b80:	9205      	str	r2, [sp, #20]
 8011b82:	bf54      	ite	pl
 8011b84:	9304      	strpl	r3, [sp, #16]
 8011b86:	9305      	strmi	r3, [sp, #20]
 8011b88:	f1bb 0f00 	cmp.w	fp, #0
 8011b8c:	db18      	blt.n	8011bc0 <_dtoa_r+0x218>
 8011b8e:	9b05      	ldr	r3, [sp, #20]
 8011b90:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8011b94:	445b      	add	r3, fp
 8011b96:	9305      	str	r3, [sp, #20]
 8011b98:	2300      	movs	r3, #0
 8011b9a:	9a06      	ldr	r2, [sp, #24]
 8011b9c:	2a09      	cmp	r2, #9
 8011b9e:	d849      	bhi.n	8011c34 <_dtoa_r+0x28c>
 8011ba0:	2a05      	cmp	r2, #5
 8011ba2:	bfc4      	itt	gt
 8011ba4:	3a04      	subgt	r2, #4
 8011ba6:	9206      	strgt	r2, [sp, #24]
 8011ba8:	9a06      	ldr	r2, [sp, #24]
 8011baa:	f1a2 0202 	sub.w	r2, r2, #2
 8011bae:	bfcc      	ite	gt
 8011bb0:	2400      	movgt	r4, #0
 8011bb2:	2401      	movle	r4, #1
 8011bb4:	2a03      	cmp	r2, #3
 8011bb6:	d848      	bhi.n	8011c4a <_dtoa_r+0x2a2>
 8011bb8:	e8df f002 	tbb	[pc, r2]
 8011bbc:	3a2c2e0b 	.word	0x3a2c2e0b
 8011bc0:	9b04      	ldr	r3, [sp, #16]
 8011bc2:	2200      	movs	r2, #0
 8011bc4:	eba3 030b 	sub.w	r3, r3, fp
 8011bc8:	9304      	str	r3, [sp, #16]
 8011bca:	9209      	str	r2, [sp, #36]	; 0x24
 8011bcc:	f1cb 0300 	rsb	r3, fp, #0
 8011bd0:	e7e3      	b.n	8011b9a <_dtoa_r+0x1f2>
 8011bd2:	2200      	movs	r2, #0
 8011bd4:	9207      	str	r2, [sp, #28]
 8011bd6:	9a08      	ldr	r2, [sp, #32]
 8011bd8:	2a00      	cmp	r2, #0
 8011bda:	dc39      	bgt.n	8011c50 <_dtoa_r+0x2a8>
 8011bdc:	f04f 0a01 	mov.w	sl, #1
 8011be0:	46d1      	mov	r9, sl
 8011be2:	4652      	mov	r2, sl
 8011be4:	f8cd a020 	str.w	sl, [sp, #32]
 8011be8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8011bea:	2100      	movs	r1, #0
 8011bec:	6079      	str	r1, [r7, #4]
 8011bee:	2004      	movs	r0, #4
 8011bf0:	f100 0c14 	add.w	ip, r0, #20
 8011bf4:	4594      	cmp	ip, r2
 8011bf6:	6879      	ldr	r1, [r7, #4]
 8011bf8:	d92f      	bls.n	8011c5a <_dtoa_r+0x2b2>
 8011bfa:	4630      	mov	r0, r6
 8011bfc:	930d      	str	r3, [sp, #52]	; 0x34
 8011bfe:	f000 fc51 	bl	80124a4 <_Balloc>
 8011c02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011c04:	9001      	str	r0, [sp, #4]
 8011c06:	4602      	mov	r2, r0
 8011c08:	2800      	cmp	r0, #0
 8011c0a:	d149      	bne.n	8011ca0 <_dtoa_r+0x2f8>
 8011c0c:	4b23      	ldr	r3, [pc, #140]	; (8011c9c <_dtoa_r+0x2f4>)
 8011c0e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8011c12:	e6e1      	b.n	80119d8 <_dtoa_r+0x30>
 8011c14:	2201      	movs	r2, #1
 8011c16:	e7dd      	b.n	8011bd4 <_dtoa_r+0x22c>
 8011c18:	2200      	movs	r2, #0
 8011c1a:	9207      	str	r2, [sp, #28]
 8011c1c:	9a08      	ldr	r2, [sp, #32]
 8011c1e:	eb0b 0a02 	add.w	sl, fp, r2
 8011c22:	f10a 0901 	add.w	r9, sl, #1
 8011c26:	464a      	mov	r2, r9
 8011c28:	2a01      	cmp	r2, #1
 8011c2a:	bfb8      	it	lt
 8011c2c:	2201      	movlt	r2, #1
 8011c2e:	e7db      	b.n	8011be8 <_dtoa_r+0x240>
 8011c30:	2201      	movs	r2, #1
 8011c32:	e7f2      	b.n	8011c1a <_dtoa_r+0x272>
 8011c34:	2401      	movs	r4, #1
 8011c36:	2200      	movs	r2, #0
 8011c38:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8011c3c:	f04f 3aff 	mov.w	sl, #4294967295
 8011c40:	2100      	movs	r1, #0
 8011c42:	46d1      	mov	r9, sl
 8011c44:	2212      	movs	r2, #18
 8011c46:	9108      	str	r1, [sp, #32]
 8011c48:	e7ce      	b.n	8011be8 <_dtoa_r+0x240>
 8011c4a:	2201      	movs	r2, #1
 8011c4c:	9207      	str	r2, [sp, #28]
 8011c4e:	e7f5      	b.n	8011c3c <_dtoa_r+0x294>
 8011c50:	f8dd a020 	ldr.w	sl, [sp, #32]
 8011c54:	46d1      	mov	r9, sl
 8011c56:	4652      	mov	r2, sl
 8011c58:	e7c6      	b.n	8011be8 <_dtoa_r+0x240>
 8011c5a:	3101      	adds	r1, #1
 8011c5c:	6079      	str	r1, [r7, #4]
 8011c5e:	0040      	lsls	r0, r0, #1
 8011c60:	e7c6      	b.n	8011bf0 <_dtoa_r+0x248>
 8011c62:	bf00      	nop
 8011c64:	f3af 8000 	nop.w
 8011c68:	636f4361 	.word	0x636f4361
 8011c6c:	3fd287a7 	.word	0x3fd287a7
 8011c70:	8b60c8b3 	.word	0x8b60c8b3
 8011c74:	3fc68a28 	.word	0x3fc68a28
 8011c78:	509f79fb 	.word	0x509f79fb
 8011c7c:	3fd34413 	.word	0x3fd34413
 8011c80:	080138bd 	.word	0x080138bd
 8011c84:	080138d4 	.word	0x080138d4
 8011c88:	7ff00000 	.word	0x7ff00000
 8011c8c:	080138b9 	.word	0x080138b9
 8011c90:	080138b0 	.word	0x080138b0
 8011c94:	0801388d 	.word	0x0801388d
 8011c98:	080139c8 	.word	0x080139c8
 8011c9c:	0801392f 	.word	0x0801392f
 8011ca0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8011ca2:	9901      	ldr	r1, [sp, #4]
 8011ca4:	6011      	str	r1, [r2, #0]
 8011ca6:	f1b9 0f0e 	cmp.w	r9, #14
 8011caa:	d86c      	bhi.n	8011d86 <_dtoa_r+0x3de>
 8011cac:	2c00      	cmp	r4, #0
 8011cae:	d06a      	beq.n	8011d86 <_dtoa_r+0x3de>
 8011cb0:	f1bb 0f00 	cmp.w	fp, #0
 8011cb4:	f340 80a0 	ble.w	8011df8 <_dtoa_r+0x450>
 8011cb8:	49c1      	ldr	r1, [pc, #772]	; (8011fc0 <_dtoa_r+0x618>)
 8011cba:	f00b 020f 	and.w	r2, fp, #15
 8011cbe:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8011cc2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8011cc6:	ed92 7b00 	vldr	d7, [r2]
 8011cca:	ea4f 112b 	mov.w	r1, fp, asr #4
 8011cce:	f000 8087 	beq.w	8011de0 <_dtoa_r+0x438>
 8011cd2:	4abc      	ldr	r2, [pc, #752]	; (8011fc4 <_dtoa_r+0x61c>)
 8011cd4:	ed92 6b08 	vldr	d6, [r2, #32]
 8011cd8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8011cdc:	ed8d 6b02 	vstr	d6, [sp, #8]
 8011ce0:	f001 010f 	and.w	r1, r1, #15
 8011ce4:	2203      	movs	r2, #3
 8011ce6:	48b7      	ldr	r0, [pc, #732]	; (8011fc4 <_dtoa_r+0x61c>)
 8011ce8:	2900      	cmp	r1, #0
 8011cea:	d17b      	bne.n	8011de4 <_dtoa_r+0x43c>
 8011cec:	ed9d 6b02 	vldr	d6, [sp, #8]
 8011cf0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8011cf4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011cf8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011cfa:	2900      	cmp	r1, #0
 8011cfc:	f000 80a2 	beq.w	8011e44 <_dtoa_r+0x49c>
 8011d00:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8011d04:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011d08:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8011d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d10:	f140 8098 	bpl.w	8011e44 <_dtoa_r+0x49c>
 8011d14:	f1b9 0f00 	cmp.w	r9, #0
 8011d18:	f000 8094 	beq.w	8011e44 <_dtoa_r+0x49c>
 8011d1c:	f1ba 0f00 	cmp.w	sl, #0
 8011d20:	dd2f      	ble.n	8011d82 <_dtoa_r+0x3da>
 8011d22:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8011d26:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011d2a:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011d2e:	f10b 37ff 	add.w	r7, fp, #4294967295
 8011d32:	3201      	adds	r2, #1
 8011d34:	4650      	mov	r0, sl
 8011d36:	ed9d 6b02 	vldr	d6, [sp, #8]
 8011d3a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8011d3e:	ee07 2a90 	vmov	s15, r2
 8011d42:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011d46:	eea7 5b06 	vfma.f64	d5, d7, d6
 8011d4a:	ee15 4a90 	vmov	r4, s11
 8011d4e:	ec52 1b15 	vmov	r1, r2, d5
 8011d52:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8011d56:	2800      	cmp	r0, #0
 8011d58:	d177      	bne.n	8011e4a <_dtoa_r+0x4a2>
 8011d5a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8011d5e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8011d62:	ec42 1b17 	vmov	d7, r1, r2
 8011d66:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d6e:	f300 8263 	bgt.w	8012238 <_dtoa_r+0x890>
 8011d72:	eeb1 7b47 	vneg.f64	d7, d7
 8011d76:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d7e:	f100 8258 	bmi.w	8012232 <_dtoa_r+0x88a>
 8011d82:	ed8d 8b02 	vstr	d8, [sp, #8]
 8011d86:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011d88:	2a00      	cmp	r2, #0
 8011d8a:	f2c0 811d 	blt.w	8011fc8 <_dtoa_r+0x620>
 8011d8e:	f1bb 0f0e 	cmp.w	fp, #14
 8011d92:	f300 8119 	bgt.w	8011fc8 <_dtoa_r+0x620>
 8011d96:	4b8a      	ldr	r3, [pc, #552]	; (8011fc0 <_dtoa_r+0x618>)
 8011d98:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8011d9c:	ed93 6b00 	vldr	d6, [r3]
 8011da0:	9b08      	ldr	r3, [sp, #32]
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	f280 80b7 	bge.w	8011f16 <_dtoa_r+0x56e>
 8011da8:	f1b9 0f00 	cmp.w	r9, #0
 8011dac:	f300 80b3 	bgt.w	8011f16 <_dtoa_r+0x56e>
 8011db0:	f040 823f 	bne.w	8012232 <_dtoa_r+0x88a>
 8011db4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8011db8:	ee26 6b07 	vmul.f64	d6, d6, d7
 8011dbc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011dc0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011dc8:	464c      	mov	r4, r9
 8011dca:	464f      	mov	r7, r9
 8011dcc:	f280 8215 	bge.w	80121fa <_dtoa_r+0x852>
 8011dd0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011dd4:	2331      	movs	r3, #49	; 0x31
 8011dd6:	f808 3b01 	strb.w	r3, [r8], #1
 8011dda:	f10b 0b01 	add.w	fp, fp, #1
 8011dde:	e211      	b.n	8012204 <_dtoa_r+0x85c>
 8011de0:	2202      	movs	r2, #2
 8011de2:	e780      	b.n	8011ce6 <_dtoa_r+0x33e>
 8011de4:	07cc      	lsls	r4, r1, #31
 8011de6:	d504      	bpl.n	8011df2 <_dtoa_r+0x44a>
 8011de8:	ed90 6b00 	vldr	d6, [r0]
 8011dec:	3201      	adds	r2, #1
 8011dee:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011df2:	1049      	asrs	r1, r1, #1
 8011df4:	3008      	adds	r0, #8
 8011df6:	e777      	b.n	8011ce8 <_dtoa_r+0x340>
 8011df8:	d022      	beq.n	8011e40 <_dtoa_r+0x498>
 8011dfa:	f1cb 0100 	rsb	r1, fp, #0
 8011dfe:	4a70      	ldr	r2, [pc, #448]	; (8011fc0 <_dtoa_r+0x618>)
 8011e00:	f001 000f 	and.w	r0, r1, #15
 8011e04:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8011e08:	ed92 7b00 	vldr	d7, [r2]
 8011e0c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8011e10:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011e14:	486b      	ldr	r0, [pc, #428]	; (8011fc4 <_dtoa_r+0x61c>)
 8011e16:	1109      	asrs	r1, r1, #4
 8011e18:	2400      	movs	r4, #0
 8011e1a:	2202      	movs	r2, #2
 8011e1c:	b929      	cbnz	r1, 8011e2a <_dtoa_r+0x482>
 8011e1e:	2c00      	cmp	r4, #0
 8011e20:	f43f af6a 	beq.w	8011cf8 <_dtoa_r+0x350>
 8011e24:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011e28:	e766      	b.n	8011cf8 <_dtoa_r+0x350>
 8011e2a:	07cf      	lsls	r7, r1, #31
 8011e2c:	d505      	bpl.n	8011e3a <_dtoa_r+0x492>
 8011e2e:	ed90 6b00 	vldr	d6, [r0]
 8011e32:	3201      	adds	r2, #1
 8011e34:	2401      	movs	r4, #1
 8011e36:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011e3a:	1049      	asrs	r1, r1, #1
 8011e3c:	3008      	adds	r0, #8
 8011e3e:	e7ed      	b.n	8011e1c <_dtoa_r+0x474>
 8011e40:	2202      	movs	r2, #2
 8011e42:	e759      	b.n	8011cf8 <_dtoa_r+0x350>
 8011e44:	465f      	mov	r7, fp
 8011e46:	4648      	mov	r0, r9
 8011e48:	e775      	b.n	8011d36 <_dtoa_r+0x38e>
 8011e4a:	ec42 1b17 	vmov	d7, r1, r2
 8011e4e:	4a5c      	ldr	r2, [pc, #368]	; (8011fc0 <_dtoa_r+0x618>)
 8011e50:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8011e54:	ed12 4b02 	vldr	d4, [r2, #-8]
 8011e58:	9a01      	ldr	r2, [sp, #4]
 8011e5a:	1814      	adds	r4, r2, r0
 8011e5c:	9a07      	ldr	r2, [sp, #28]
 8011e5e:	b352      	cbz	r2, 8011eb6 <_dtoa_r+0x50e>
 8011e60:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8011e64:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8011e68:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011e6c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8011e70:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8011e74:	ee35 7b47 	vsub.f64	d7, d5, d7
 8011e78:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8011e7c:	ee14 2a90 	vmov	r2, s9
 8011e80:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8011e84:	3230      	adds	r2, #48	; 0x30
 8011e86:	ee36 6b45 	vsub.f64	d6, d6, d5
 8011e8a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e92:	f808 2b01 	strb.w	r2, [r8], #1
 8011e96:	d439      	bmi.n	8011f0c <_dtoa_r+0x564>
 8011e98:	ee32 5b46 	vsub.f64	d5, d2, d6
 8011e9c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8011ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ea4:	d472      	bmi.n	8011f8c <_dtoa_r+0x5e4>
 8011ea6:	45a0      	cmp	r8, r4
 8011ea8:	f43f af6b 	beq.w	8011d82 <_dtoa_r+0x3da>
 8011eac:	ee27 7b03 	vmul.f64	d7, d7, d3
 8011eb0:	ee26 6b03 	vmul.f64	d6, d6, d3
 8011eb4:	e7e0      	b.n	8011e78 <_dtoa_r+0x4d0>
 8011eb6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011eba:	ee27 7b04 	vmul.f64	d7, d7, d4
 8011ebe:	4621      	mov	r1, r4
 8011ec0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8011ec4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8011ec8:	ee14 2a90 	vmov	r2, s9
 8011ecc:	3230      	adds	r2, #48	; 0x30
 8011ece:	f808 2b01 	strb.w	r2, [r8], #1
 8011ed2:	45a0      	cmp	r8, r4
 8011ed4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8011ed8:	ee36 6b45 	vsub.f64	d6, d6, d5
 8011edc:	d118      	bne.n	8011f10 <_dtoa_r+0x568>
 8011ede:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8011ee2:	ee37 4b05 	vadd.f64	d4, d7, d5
 8011ee6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8011eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011eee:	dc4d      	bgt.n	8011f8c <_dtoa_r+0x5e4>
 8011ef0:	ee35 7b47 	vsub.f64	d7, d5, d7
 8011ef4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011efc:	f57f af41 	bpl.w	8011d82 <_dtoa_r+0x3da>
 8011f00:	4688      	mov	r8, r1
 8011f02:	3901      	subs	r1, #1
 8011f04:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8011f08:	2b30      	cmp	r3, #48	; 0x30
 8011f0a:	d0f9      	beq.n	8011f00 <_dtoa_r+0x558>
 8011f0c:	46bb      	mov	fp, r7
 8011f0e:	e02a      	b.n	8011f66 <_dtoa_r+0x5be>
 8011f10:	ee26 6b03 	vmul.f64	d6, d6, d3
 8011f14:	e7d6      	b.n	8011ec4 <_dtoa_r+0x51c>
 8011f16:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011f1a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8011f1e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011f22:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8011f26:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8011f2a:	ee15 3a10 	vmov	r3, s10
 8011f2e:	3330      	adds	r3, #48	; 0x30
 8011f30:	f808 3b01 	strb.w	r3, [r8], #1
 8011f34:	9b01      	ldr	r3, [sp, #4]
 8011f36:	eba8 0303 	sub.w	r3, r8, r3
 8011f3a:	4599      	cmp	r9, r3
 8011f3c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8011f40:	eea3 7b46 	vfms.f64	d7, d3, d6
 8011f44:	d133      	bne.n	8011fae <_dtoa_r+0x606>
 8011f46:	ee37 7b07 	vadd.f64	d7, d7, d7
 8011f4a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8011f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f52:	dc1a      	bgt.n	8011f8a <_dtoa_r+0x5e2>
 8011f54:	eeb4 7b46 	vcmp.f64	d7, d6
 8011f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f5c:	d103      	bne.n	8011f66 <_dtoa_r+0x5be>
 8011f5e:	ee15 3a10 	vmov	r3, s10
 8011f62:	07d9      	lsls	r1, r3, #31
 8011f64:	d411      	bmi.n	8011f8a <_dtoa_r+0x5e2>
 8011f66:	4629      	mov	r1, r5
 8011f68:	4630      	mov	r0, r6
 8011f6a:	f000 fadb 	bl	8012524 <_Bfree>
 8011f6e:	2300      	movs	r3, #0
 8011f70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011f72:	f888 3000 	strb.w	r3, [r8]
 8011f76:	f10b 0301 	add.w	r3, fp, #1
 8011f7a:	6013      	str	r3, [r2, #0]
 8011f7c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	f43f ad61 	beq.w	8011a46 <_dtoa_r+0x9e>
 8011f84:	f8c3 8000 	str.w	r8, [r3]
 8011f88:	e55d      	b.n	8011a46 <_dtoa_r+0x9e>
 8011f8a:	465f      	mov	r7, fp
 8011f8c:	4643      	mov	r3, r8
 8011f8e:	4698      	mov	r8, r3
 8011f90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011f94:	2a39      	cmp	r2, #57	; 0x39
 8011f96:	d106      	bne.n	8011fa6 <_dtoa_r+0x5fe>
 8011f98:	9a01      	ldr	r2, [sp, #4]
 8011f9a:	429a      	cmp	r2, r3
 8011f9c:	d1f7      	bne.n	8011f8e <_dtoa_r+0x5e6>
 8011f9e:	9901      	ldr	r1, [sp, #4]
 8011fa0:	2230      	movs	r2, #48	; 0x30
 8011fa2:	3701      	adds	r7, #1
 8011fa4:	700a      	strb	r2, [r1, #0]
 8011fa6:	781a      	ldrb	r2, [r3, #0]
 8011fa8:	3201      	adds	r2, #1
 8011faa:	701a      	strb	r2, [r3, #0]
 8011fac:	e7ae      	b.n	8011f0c <_dtoa_r+0x564>
 8011fae:	ee27 7b04 	vmul.f64	d7, d7, d4
 8011fb2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fba:	d1b2      	bne.n	8011f22 <_dtoa_r+0x57a>
 8011fbc:	e7d3      	b.n	8011f66 <_dtoa_r+0x5be>
 8011fbe:	bf00      	nop
 8011fc0:	080139c8 	.word	0x080139c8
 8011fc4:	080139a0 	.word	0x080139a0
 8011fc8:	9907      	ldr	r1, [sp, #28]
 8011fca:	2900      	cmp	r1, #0
 8011fcc:	f000 80d0 	beq.w	8012170 <_dtoa_r+0x7c8>
 8011fd0:	9906      	ldr	r1, [sp, #24]
 8011fd2:	2901      	cmp	r1, #1
 8011fd4:	f300 80b4 	bgt.w	8012140 <_dtoa_r+0x798>
 8011fd8:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011fda:	2900      	cmp	r1, #0
 8011fdc:	f000 80ac 	beq.w	8012138 <_dtoa_r+0x790>
 8011fe0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8011fe4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8011fe8:	461c      	mov	r4, r3
 8011fea:	930a      	str	r3, [sp, #40]	; 0x28
 8011fec:	9b04      	ldr	r3, [sp, #16]
 8011fee:	4413      	add	r3, r2
 8011ff0:	9304      	str	r3, [sp, #16]
 8011ff2:	9b05      	ldr	r3, [sp, #20]
 8011ff4:	2101      	movs	r1, #1
 8011ff6:	4413      	add	r3, r2
 8011ff8:	4630      	mov	r0, r6
 8011ffa:	9305      	str	r3, [sp, #20]
 8011ffc:	f000 fb4a 	bl	8012694 <__i2b>
 8012000:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012002:	4607      	mov	r7, r0
 8012004:	f1b8 0f00 	cmp.w	r8, #0
 8012008:	dd0d      	ble.n	8012026 <_dtoa_r+0x67e>
 801200a:	9a05      	ldr	r2, [sp, #20]
 801200c:	2a00      	cmp	r2, #0
 801200e:	dd0a      	ble.n	8012026 <_dtoa_r+0x67e>
 8012010:	4542      	cmp	r2, r8
 8012012:	9904      	ldr	r1, [sp, #16]
 8012014:	bfa8      	it	ge
 8012016:	4642      	movge	r2, r8
 8012018:	1a89      	subs	r1, r1, r2
 801201a:	9104      	str	r1, [sp, #16]
 801201c:	9905      	ldr	r1, [sp, #20]
 801201e:	eba8 0802 	sub.w	r8, r8, r2
 8012022:	1a8a      	subs	r2, r1, r2
 8012024:	9205      	str	r2, [sp, #20]
 8012026:	b303      	cbz	r3, 801206a <_dtoa_r+0x6c2>
 8012028:	9a07      	ldr	r2, [sp, #28]
 801202a:	2a00      	cmp	r2, #0
 801202c:	f000 80a5 	beq.w	801217a <_dtoa_r+0x7d2>
 8012030:	2c00      	cmp	r4, #0
 8012032:	dd13      	ble.n	801205c <_dtoa_r+0x6b4>
 8012034:	4639      	mov	r1, r7
 8012036:	4622      	mov	r2, r4
 8012038:	4630      	mov	r0, r6
 801203a:	930d      	str	r3, [sp, #52]	; 0x34
 801203c:	f000 fbea 	bl	8012814 <__pow5mult>
 8012040:	462a      	mov	r2, r5
 8012042:	4601      	mov	r1, r0
 8012044:	4607      	mov	r7, r0
 8012046:	4630      	mov	r0, r6
 8012048:	f000 fb3a 	bl	80126c0 <__multiply>
 801204c:	4629      	mov	r1, r5
 801204e:	900a      	str	r0, [sp, #40]	; 0x28
 8012050:	4630      	mov	r0, r6
 8012052:	f000 fa67 	bl	8012524 <_Bfree>
 8012056:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012058:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801205a:	4615      	mov	r5, r2
 801205c:	1b1a      	subs	r2, r3, r4
 801205e:	d004      	beq.n	801206a <_dtoa_r+0x6c2>
 8012060:	4629      	mov	r1, r5
 8012062:	4630      	mov	r0, r6
 8012064:	f000 fbd6 	bl	8012814 <__pow5mult>
 8012068:	4605      	mov	r5, r0
 801206a:	2101      	movs	r1, #1
 801206c:	4630      	mov	r0, r6
 801206e:	f000 fb11 	bl	8012694 <__i2b>
 8012072:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012074:	2b00      	cmp	r3, #0
 8012076:	4604      	mov	r4, r0
 8012078:	f340 8081 	ble.w	801217e <_dtoa_r+0x7d6>
 801207c:	461a      	mov	r2, r3
 801207e:	4601      	mov	r1, r0
 8012080:	4630      	mov	r0, r6
 8012082:	f000 fbc7 	bl	8012814 <__pow5mult>
 8012086:	9b06      	ldr	r3, [sp, #24]
 8012088:	2b01      	cmp	r3, #1
 801208a:	4604      	mov	r4, r0
 801208c:	dd7a      	ble.n	8012184 <_dtoa_r+0x7dc>
 801208e:	2300      	movs	r3, #0
 8012090:	930a      	str	r3, [sp, #40]	; 0x28
 8012092:	6922      	ldr	r2, [r4, #16]
 8012094:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8012098:	6910      	ldr	r0, [r2, #16]
 801209a:	f000 faab 	bl	80125f4 <__hi0bits>
 801209e:	f1c0 0020 	rsb	r0, r0, #32
 80120a2:	9b05      	ldr	r3, [sp, #20]
 80120a4:	4418      	add	r0, r3
 80120a6:	f010 001f 	ands.w	r0, r0, #31
 80120aa:	f000 808c 	beq.w	80121c6 <_dtoa_r+0x81e>
 80120ae:	f1c0 0220 	rsb	r2, r0, #32
 80120b2:	2a04      	cmp	r2, #4
 80120b4:	f340 8085 	ble.w	80121c2 <_dtoa_r+0x81a>
 80120b8:	f1c0 001c 	rsb	r0, r0, #28
 80120bc:	9b04      	ldr	r3, [sp, #16]
 80120be:	4403      	add	r3, r0
 80120c0:	9304      	str	r3, [sp, #16]
 80120c2:	9b05      	ldr	r3, [sp, #20]
 80120c4:	4403      	add	r3, r0
 80120c6:	4480      	add	r8, r0
 80120c8:	9305      	str	r3, [sp, #20]
 80120ca:	9b04      	ldr	r3, [sp, #16]
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	dd05      	ble.n	80120dc <_dtoa_r+0x734>
 80120d0:	4629      	mov	r1, r5
 80120d2:	461a      	mov	r2, r3
 80120d4:	4630      	mov	r0, r6
 80120d6:	f000 fbf7 	bl	80128c8 <__lshift>
 80120da:	4605      	mov	r5, r0
 80120dc:	9b05      	ldr	r3, [sp, #20]
 80120de:	2b00      	cmp	r3, #0
 80120e0:	dd05      	ble.n	80120ee <_dtoa_r+0x746>
 80120e2:	4621      	mov	r1, r4
 80120e4:	461a      	mov	r2, r3
 80120e6:	4630      	mov	r0, r6
 80120e8:	f000 fbee 	bl	80128c8 <__lshift>
 80120ec:	4604      	mov	r4, r0
 80120ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d06a      	beq.n	80121ca <_dtoa_r+0x822>
 80120f4:	4621      	mov	r1, r4
 80120f6:	4628      	mov	r0, r5
 80120f8:	f000 fc56 	bl	80129a8 <__mcmp>
 80120fc:	2800      	cmp	r0, #0
 80120fe:	da64      	bge.n	80121ca <_dtoa_r+0x822>
 8012100:	2300      	movs	r3, #0
 8012102:	4629      	mov	r1, r5
 8012104:	220a      	movs	r2, #10
 8012106:	4630      	mov	r0, r6
 8012108:	f000 fa2e 	bl	8012568 <__multadd>
 801210c:	9b07      	ldr	r3, [sp, #28]
 801210e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012112:	4605      	mov	r5, r0
 8012114:	2b00      	cmp	r3, #0
 8012116:	f000 8191 	beq.w	801243c <_dtoa_r+0xa94>
 801211a:	4639      	mov	r1, r7
 801211c:	2300      	movs	r3, #0
 801211e:	220a      	movs	r2, #10
 8012120:	4630      	mov	r0, r6
 8012122:	f000 fa21 	bl	8012568 <__multadd>
 8012126:	f1ba 0f00 	cmp.w	sl, #0
 801212a:	4607      	mov	r7, r0
 801212c:	f300 808d 	bgt.w	801224a <_dtoa_r+0x8a2>
 8012130:	9b06      	ldr	r3, [sp, #24]
 8012132:	2b02      	cmp	r3, #2
 8012134:	dc50      	bgt.n	80121d8 <_dtoa_r+0x830>
 8012136:	e088      	b.n	801224a <_dtoa_r+0x8a2>
 8012138:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801213a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801213e:	e751      	b.n	8011fe4 <_dtoa_r+0x63c>
 8012140:	f109 34ff 	add.w	r4, r9, #4294967295
 8012144:	42a3      	cmp	r3, r4
 8012146:	bfbf      	itttt	lt
 8012148:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 801214a:	1ae3      	sublt	r3, r4, r3
 801214c:	18d2      	addlt	r2, r2, r3
 801214e:	9209      	strlt	r2, [sp, #36]	; 0x24
 8012150:	bfb6      	itet	lt
 8012152:	4623      	movlt	r3, r4
 8012154:	1b1c      	subge	r4, r3, r4
 8012156:	2400      	movlt	r4, #0
 8012158:	f1b9 0f00 	cmp.w	r9, #0
 801215c:	bfb5      	itete	lt
 801215e:	9a04      	ldrlt	r2, [sp, #16]
 8012160:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8012164:	eba2 0809 	sublt.w	r8, r2, r9
 8012168:	464a      	movge	r2, r9
 801216a:	bfb8      	it	lt
 801216c:	2200      	movlt	r2, #0
 801216e:	e73c      	b.n	8011fea <_dtoa_r+0x642>
 8012170:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8012174:	9f07      	ldr	r7, [sp, #28]
 8012176:	461c      	mov	r4, r3
 8012178:	e744      	b.n	8012004 <_dtoa_r+0x65c>
 801217a:	461a      	mov	r2, r3
 801217c:	e770      	b.n	8012060 <_dtoa_r+0x6b8>
 801217e:	9b06      	ldr	r3, [sp, #24]
 8012180:	2b01      	cmp	r3, #1
 8012182:	dc18      	bgt.n	80121b6 <_dtoa_r+0x80e>
 8012184:	9b02      	ldr	r3, [sp, #8]
 8012186:	b9b3      	cbnz	r3, 80121b6 <_dtoa_r+0x80e>
 8012188:	9b03      	ldr	r3, [sp, #12]
 801218a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801218e:	b9a2      	cbnz	r2, 80121ba <_dtoa_r+0x812>
 8012190:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8012194:	0d12      	lsrs	r2, r2, #20
 8012196:	0512      	lsls	r2, r2, #20
 8012198:	b18a      	cbz	r2, 80121be <_dtoa_r+0x816>
 801219a:	9b04      	ldr	r3, [sp, #16]
 801219c:	3301      	adds	r3, #1
 801219e:	9304      	str	r3, [sp, #16]
 80121a0:	9b05      	ldr	r3, [sp, #20]
 80121a2:	3301      	adds	r3, #1
 80121a4:	9305      	str	r3, [sp, #20]
 80121a6:	2301      	movs	r3, #1
 80121a8:	930a      	str	r3, [sp, #40]	; 0x28
 80121aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	f47f af70 	bne.w	8012092 <_dtoa_r+0x6ea>
 80121b2:	2001      	movs	r0, #1
 80121b4:	e775      	b.n	80120a2 <_dtoa_r+0x6fa>
 80121b6:	2300      	movs	r3, #0
 80121b8:	e7f6      	b.n	80121a8 <_dtoa_r+0x800>
 80121ba:	9b02      	ldr	r3, [sp, #8]
 80121bc:	e7f4      	b.n	80121a8 <_dtoa_r+0x800>
 80121be:	920a      	str	r2, [sp, #40]	; 0x28
 80121c0:	e7f3      	b.n	80121aa <_dtoa_r+0x802>
 80121c2:	d082      	beq.n	80120ca <_dtoa_r+0x722>
 80121c4:	4610      	mov	r0, r2
 80121c6:	301c      	adds	r0, #28
 80121c8:	e778      	b.n	80120bc <_dtoa_r+0x714>
 80121ca:	f1b9 0f00 	cmp.w	r9, #0
 80121ce:	dc37      	bgt.n	8012240 <_dtoa_r+0x898>
 80121d0:	9b06      	ldr	r3, [sp, #24]
 80121d2:	2b02      	cmp	r3, #2
 80121d4:	dd34      	ble.n	8012240 <_dtoa_r+0x898>
 80121d6:	46ca      	mov	sl, r9
 80121d8:	f1ba 0f00 	cmp.w	sl, #0
 80121dc:	d10d      	bne.n	80121fa <_dtoa_r+0x852>
 80121de:	4621      	mov	r1, r4
 80121e0:	4653      	mov	r3, sl
 80121e2:	2205      	movs	r2, #5
 80121e4:	4630      	mov	r0, r6
 80121e6:	f000 f9bf 	bl	8012568 <__multadd>
 80121ea:	4601      	mov	r1, r0
 80121ec:	4604      	mov	r4, r0
 80121ee:	4628      	mov	r0, r5
 80121f0:	f000 fbda 	bl	80129a8 <__mcmp>
 80121f4:	2800      	cmp	r0, #0
 80121f6:	f73f adeb 	bgt.w	8011dd0 <_dtoa_r+0x428>
 80121fa:	9b08      	ldr	r3, [sp, #32]
 80121fc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012200:	ea6f 0b03 	mvn.w	fp, r3
 8012204:	f04f 0900 	mov.w	r9, #0
 8012208:	4621      	mov	r1, r4
 801220a:	4630      	mov	r0, r6
 801220c:	f000 f98a 	bl	8012524 <_Bfree>
 8012210:	2f00      	cmp	r7, #0
 8012212:	f43f aea8 	beq.w	8011f66 <_dtoa_r+0x5be>
 8012216:	f1b9 0f00 	cmp.w	r9, #0
 801221a:	d005      	beq.n	8012228 <_dtoa_r+0x880>
 801221c:	45b9      	cmp	r9, r7
 801221e:	d003      	beq.n	8012228 <_dtoa_r+0x880>
 8012220:	4649      	mov	r1, r9
 8012222:	4630      	mov	r0, r6
 8012224:	f000 f97e 	bl	8012524 <_Bfree>
 8012228:	4639      	mov	r1, r7
 801222a:	4630      	mov	r0, r6
 801222c:	f000 f97a 	bl	8012524 <_Bfree>
 8012230:	e699      	b.n	8011f66 <_dtoa_r+0x5be>
 8012232:	2400      	movs	r4, #0
 8012234:	4627      	mov	r7, r4
 8012236:	e7e0      	b.n	80121fa <_dtoa_r+0x852>
 8012238:	46bb      	mov	fp, r7
 801223a:	4604      	mov	r4, r0
 801223c:	4607      	mov	r7, r0
 801223e:	e5c7      	b.n	8011dd0 <_dtoa_r+0x428>
 8012240:	9b07      	ldr	r3, [sp, #28]
 8012242:	46ca      	mov	sl, r9
 8012244:	2b00      	cmp	r3, #0
 8012246:	f000 8100 	beq.w	801244a <_dtoa_r+0xaa2>
 801224a:	f1b8 0f00 	cmp.w	r8, #0
 801224e:	dd05      	ble.n	801225c <_dtoa_r+0x8b4>
 8012250:	4639      	mov	r1, r7
 8012252:	4642      	mov	r2, r8
 8012254:	4630      	mov	r0, r6
 8012256:	f000 fb37 	bl	80128c8 <__lshift>
 801225a:	4607      	mov	r7, r0
 801225c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801225e:	2b00      	cmp	r3, #0
 8012260:	d05d      	beq.n	801231e <_dtoa_r+0x976>
 8012262:	6879      	ldr	r1, [r7, #4]
 8012264:	4630      	mov	r0, r6
 8012266:	f000 f91d 	bl	80124a4 <_Balloc>
 801226a:	4680      	mov	r8, r0
 801226c:	b928      	cbnz	r0, 801227a <_dtoa_r+0x8d2>
 801226e:	4b82      	ldr	r3, [pc, #520]	; (8012478 <_dtoa_r+0xad0>)
 8012270:	4602      	mov	r2, r0
 8012272:	f240 21ea 	movw	r1, #746	; 0x2ea
 8012276:	f7ff bbaf 	b.w	80119d8 <_dtoa_r+0x30>
 801227a:	693a      	ldr	r2, [r7, #16]
 801227c:	3202      	adds	r2, #2
 801227e:	0092      	lsls	r2, r2, #2
 8012280:	f107 010c 	add.w	r1, r7, #12
 8012284:	300c      	adds	r0, #12
 8012286:	f7fe fdb9 	bl	8010dfc <memcpy>
 801228a:	2201      	movs	r2, #1
 801228c:	4641      	mov	r1, r8
 801228e:	4630      	mov	r0, r6
 8012290:	f000 fb1a 	bl	80128c8 <__lshift>
 8012294:	9b01      	ldr	r3, [sp, #4]
 8012296:	3301      	adds	r3, #1
 8012298:	9304      	str	r3, [sp, #16]
 801229a:	9b01      	ldr	r3, [sp, #4]
 801229c:	4453      	add	r3, sl
 801229e:	9308      	str	r3, [sp, #32]
 80122a0:	9b02      	ldr	r3, [sp, #8]
 80122a2:	f003 0301 	and.w	r3, r3, #1
 80122a6:	46b9      	mov	r9, r7
 80122a8:	9307      	str	r3, [sp, #28]
 80122aa:	4607      	mov	r7, r0
 80122ac:	9b04      	ldr	r3, [sp, #16]
 80122ae:	4621      	mov	r1, r4
 80122b0:	3b01      	subs	r3, #1
 80122b2:	4628      	mov	r0, r5
 80122b4:	9302      	str	r3, [sp, #8]
 80122b6:	f7ff fae9 	bl	801188c <quorem>
 80122ba:	4603      	mov	r3, r0
 80122bc:	3330      	adds	r3, #48	; 0x30
 80122be:	9005      	str	r0, [sp, #20]
 80122c0:	4649      	mov	r1, r9
 80122c2:	4628      	mov	r0, r5
 80122c4:	9309      	str	r3, [sp, #36]	; 0x24
 80122c6:	f000 fb6f 	bl	80129a8 <__mcmp>
 80122ca:	463a      	mov	r2, r7
 80122cc:	4682      	mov	sl, r0
 80122ce:	4621      	mov	r1, r4
 80122d0:	4630      	mov	r0, r6
 80122d2:	f000 fb85 	bl	80129e0 <__mdiff>
 80122d6:	68c2      	ldr	r2, [r0, #12]
 80122d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80122da:	4680      	mov	r8, r0
 80122dc:	bb0a      	cbnz	r2, 8012322 <_dtoa_r+0x97a>
 80122de:	4601      	mov	r1, r0
 80122e0:	4628      	mov	r0, r5
 80122e2:	f000 fb61 	bl	80129a8 <__mcmp>
 80122e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80122e8:	4602      	mov	r2, r0
 80122ea:	4641      	mov	r1, r8
 80122ec:	4630      	mov	r0, r6
 80122ee:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 80122f2:	f000 f917 	bl	8012524 <_Bfree>
 80122f6:	9b06      	ldr	r3, [sp, #24]
 80122f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80122fa:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80122fe:	ea43 0102 	orr.w	r1, r3, r2
 8012302:	9b07      	ldr	r3, [sp, #28]
 8012304:	430b      	orrs	r3, r1
 8012306:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012308:	d10d      	bne.n	8012326 <_dtoa_r+0x97e>
 801230a:	2b39      	cmp	r3, #57	; 0x39
 801230c:	d029      	beq.n	8012362 <_dtoa_r+0x9ba>
 801230e:	f1ba 0f00 	cmp.w	sl, #0
 8012312:	dd01      	ble.n	8012318 <_dtoa_r+0x970>
 8012314:	9b05      	ldr	r3, [sp, #20]
 8012316:	3331      	adds	r3, #49	; 0x31
 8012318:	9a02      	ldr	r2, [sp, #8]
 801231a:	7013      	strb	r3, [r2, #0]
 801231c:	e774      	b.n	8012208 <_dtoa_r+0x860>
 801231e:	4638      	mov	r0, r7
 8012320:	e7b8      	b.n	8012294 <_dtoa_r+0x8ec>
 8012322:	2201      	movs	r2, #1
 8012324:	e7e1      	b.n	80122ea <_dtoa_r+0x942>
 8012326:	f1ba 0f00 	cmp.w	sl, #0
 801232a:	db06      	blt.n	801233a <_dtoa_r+0x992>
 801232c:	9906      	ldr	r1, [sp, #24]
 801232e:	ea41 0a0a 	orr.w	sl, r1, sl
 8012332:	9907      	ldr	r1, [sp, #28]
 8012334:	ea5a 0101 	orrs.w	r1, sl, r1
 8012338:	d120      	bne.n	801237c <_dtoa_r+0x9d4>
 801233a:	2a00      	cmp	r2, #0
 801233c:	ddec      	ble.n	8012318 <_dtoa_r+0x970>
 801233e:	4629      	mov	r1, r5
 8012340:	2201      	movs	r2, #1
 8012342:	4630      	mov	r0, r6
 8012344:	9304      	str	r3, [sp, #16]
 8012346:	f000 fabf 	bl	80128c8 <__lshift>
 801234a:	4621      	mov	r1, r4
 801234c:	4605      	mov	r5, r0
 801234e:	f000 fb2b 	bl	80129a8 <__mcmp>
 8012352:	2800      	cmp	r0, #0
 8012354:	9b04      	ldr	r3, [sp, #16]
 8012356:	dc02      	bgt.n	801235e <_dtoa_r+0x9b6>
 8012358:	d1de      	bne.n	8012318 <_dtoa_r+0x970>
 801235a:	07da      	lsls	r2, r3, #31
 801235c:	d5dc      	bpl.n	8012318 <_dtoa_r+0x970>
 801235e:	2b39      	cmp	r3, #57	; 0x39
 8012360:	d1d8      	bne.n	8012314 <_dtoa_r+0x96c>
 8012362:	9a02      	ldr	r2, [sp, #8]
 8012364:	2339      	movs	r3, #57	; 0x39
 8012366:	7013      	strb	r3, [r2, #0]
 8012368:	4643      	mov	r3, r8
 801236a:	4698      	mov	r8, r3
 801236c:	3b01      	subs	r3, #1
 801236e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8012372:	2a39      	cmp	r2, #57	; 0x39
 8012374:	d051      	beq.n	801241a <_dtoa_r+0xa72>
 8012376:	3201      	adds	r2, #1
 8012378:	701a      	strb	r2, [r3, #0]
 801237a:	e745      	b.n	8012208 <_dtoa_r+0x860>
 801237c:	2a00      	cmp	r2, #0
 801237e:	dd03      	ble.n	8012388 <_dtoa_r+0x9e0>
 8012380:	2b39      	cmp	r3, #57	; 0x39
 8012382:	d0ee      	beq.n	8012362 <_dtoa_r+0x9ba>
 8012384:	3301      	adds	r3, #1
 8012386:	e7c7      	b.n	8012318 <_dtoa_r+0x970>
 8012388:	9a04      	ldr	r2, [sp, #16]
 801238a:	9908      	ldr	r1, [sp, #32]
 801238c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8012390:	428a      	cmp	r2, r1
 8012392:	d02b      	beq.n	80123ec <_dtoa_r+0xa44>
 8012394:	4629      	mov	r1, r5
 8012396:	2300      	movs	r3, #0
 8012398:	220a      	movs	r2, #10
 801239a:	4630      	mov	r0, r6
 801239c:	f000 f8e4 	bl	8012568 <__multadd>
 80123a0:	45b9      	cmp	r9, r7
 80123a2:	4605      	mov	r5, r0
 80123a4:	f04f 0300 	mov.w	r3, #0
 80123a8:	f04f 020a 	mov.w	r2, #10
 80123ac:	4649      	mov	r1, r9
 80123ae:	4630      	mov	r0, r6
 80123b0:	d107      	bne.n	80123c2 <_dtoa_r+0xa1a>
 80123b2:	f000 f8d9 	bl	8012568 <__multadd>
 80123b6:	4681      	mov	r9, r0
 80123b8:	4607      	mov	r7, r0
 80123ba:	9b04      	ldr	r3, [sp, #16]
 80123bc:	3301      	adds	r3, #1
 80123be:	9304      	str	r3, [sp, #16]
 80123c0:	e774      	b.n	80122ac <_dtoa_r+0x904>
 80123c2:	f000 f8d1 	bl	8012568 <__multadd>
 80123c6:	4639      	mov	r1, r7
 80123c8:	4681      	mov	r9, r0
 80123ca:	2300      	movs	r3, #0
 80123cc:	220a      	movs	r2, #10
 80123ce:	4630      	mov	r0, r6
 80123d0:	f000 f8ca 	bl	8012568 <__multadd>
 80123d4:	4607      	mov	r7, r0
 80123d6:	e7f0      	b.n	80123ba <_dtoa_r+0xa12>
 80123d8:	f1ba 0f00 	cmp.w	sl, #0
 80123dc:	9a01      	ldr	r2, [sp, #4]
 80123de:	bfcc      	ite	gt
 80123e0:	46d0      	movgt	r8, sl
 80123e2:	f04f 0801 	movle.w	r8, #1
 80123e6:	4490      	add	r8, r2
 80123e8:	f04f 0900 	mov.w	r9, #0
 80123ec:	4629      	mov	r1, r5
 80123ee:	2201      	movs	r2, #1
 80123f0:	4630      	mov	r0, r6
 80123f2:	9302      	str	r3, [sp, #8]
 80123f4:	f000 fa68 	bl	80128c8 <__lshift>
 80123f8:	4621      	mov	r1, r4
 80123fa:	4605      	mov	r5, r0
 80123fc:	f000 fad4 	bl	80129a8 <__mcmp>
 8012400:	2800      	cmp	r0, #0
 8012402:	dcb1      	bgt.n	8012368 <_dtoa_r+0x9c0>
 8012404:	d102      	bne.n	801240c <_dtoa_r+0xa64>
 8012406:	9b02      	ldr	r3, [sp, #8]
 8012408:	07db      	lsls	r3, r3, #31
 801240a:	d4ad      	bmi.n	8012368 <_dtoa_r+0x9c0>
 801240c:	4643      	mov	r3, r8
 801240e:	4698      	mov	r8, r3
 8012410:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012414:	2a30      	cmp	r2, #48	; 0x30
 8012416:	d0fa      	beq.n	801240e <_dtoa_r+0xa66>
 8012418:	e6f6      	b.n	8012208 <_dtoa_r+0x860>
 801241a:	9a01      	ldr	r2, [sp, #4]
 801241c:	429a      	cmp	r2, r3
 801241e:	d1a4      	bne.n	801236a <_dtoa_r+0x9c2>
 8012420:	f10b 0b01 	add.w	fp, fp, #1
 8012424:	2331      	movs	r3, #49	; 0x31
 8012426:	e778      	b.n	801231a <_dtoa_r+0x972>
 8012428:	4b14      	ldr	r3, [pc, #80]	; (801247c <_dtoa_r+0xad4>)
 801242a:	f7ff bb27 	b.w	8011a7c <_dtoa_r+0xd4>
 801242e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012430:	2b00      	cmp	r3, #0
 8012432:	f47f ab03 	bne.w	8011a3c <_dtoa_r+0x94>
 8012436:	4b12      	ldr	r3, [pc, #72]	; (8012480 <_dtoa_r+0xad8>)
 8012438:	f7ff bb20 	b.w	8011a7c <_dtoa_r+0xd4>
 801243c:	f1ba 0f00 	cmp.w	sl, #0
 8012440:	dc03      	bgt.n	801244a <_dtoa_r+0xaa2>
 8012442:	9b06      	ldr	r3, [sp, #24]
 8012444:	2b02      	cmp	r3, #2
 8012446:	f73f aec7 	bgt.w	80121d8 <_dtoa_r+0x830>
 801244a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801244e:	4621      	mov	r1, r4
 8012450:	4628      	mov	r0, r5
 8012452:	f7ff fa1b 	bl	801188c <quorem>
 8012456:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801245a:	f808 3b01 	strb.w	r3, [r8], #1
 801245e:	9a01      	ldr	r2, [sp, #4]
 8012460:	eba8 0202 	sub.w	r2, r8, r2
 8012464:	4592      	cmp	sl, r2
 8012466:	ddb7      	ble.n	80123d8 <_dtoa_r+0xa30>
 8012468:	4629      	mov	r1, r5
 801246a:	2300      	movs	r3, #0
 801246c:	220a      	movs	r2, #10
 801246e:	4630      	mov	r0, r6
 8012470:	f000 f87a 	bl	8012568 <__multadd>
 8012474:	4605      	mov	r5, r0
 8012476:	e7ea      	b.n	801244e <_dtoa_r+0xaa6>
 8012478:	0801392f 	.word	0x0801392f
 801247c:	0801388c 	.word	0x0801388c
 8012480:	080138b0 	.word	0x080138b0

08012484 <_localeconv_r>:
 8012484:	4800      	ldr	r0, [pc, #0]	; (8012488 <_localeconv_r+0x4>)
 8012486:	4770      	bx	lr
 8012488:	240002d8 	.word	0x240002d8

0801248c <__malloc_lock>:
 801248c:	4801      	ldr	r0, [pc, #4]	; (8012494 <__malloc_lock+0x8>)
 801248e:	f000 bbd4 	b.w	8012c3a <__retarget_lock_acquire_recursive>
 8012492:	bf00      	nop
 8012494:	2400204c 	.word	0x2400204c

08012498 <__malloc_unlock>:
 8012498:	4801      	ldr	r0, [pc, #4]	; (80124a0 <__malloc_unlock+0x8>)
 801249a:	f000 bbcf 	b.w	8012c3c <__retarget_lock_release_recursive>
 801249e:	bf00      	nop
 80124a0:	2400204c 	.word	0x2400204c

080124a4 <_Balloc>:
 80124a4:	b570      	push	{r4, r5, r6, lr}
 80124a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80124a8:	4604      	mov	r4, r0
 80124aa:	460d      	mov	r5, r1
 80124ac:	b976      	cbnz	r6, 80124cc <_Balloc+0x28>
 80124ae:	2010      	movs	r0, #16
 80124b0:	f7fe fc94 	bl	8010ddc <malloc>
 80124b4:	4602      	mov	r2, r0
 80124b6:	6260      	str	r0, [r4, #36]	; 0x24
 80124b8:	b920      	cbnz	r0, 80124c4 <_Balloc+0x20>
 80124ba:	4b18      	ldr	r3, [pc, #96]	; (801251c <_Balloc+0x78>)
 80124bc:	4818      	ldr	r0, [pc, #96]	; (8012520 <_Balloc+0x7c>)
 80124be:	2166      	movs	r1, #102	; 0x66
 80124c0:	f000 fb8a 	bl	8012bd8 <__assert_func>
 80124c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80124c8:	6006      	str	r6, [r0, #0]
 80124ca:	60c6      	str	r6, [r0, #12]
 80124cc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80124ce:	68f3      	ldr	r3, [r6, #12]
 80124d0:	b183      	cbz	r3, 80124f4 <_Balloc+0x50>
 80124d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80124d4:	68db      	ldr	r3, [r3, #12]
 80124d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80124da:	b9b8      	cbnz	r0, 801250c <_Balloc+0x68>
 80124dc:	2101      	movs	r1, #1
 80124de:	fa01 f605 	lsl.w	r6, r1, r5
 80124e2:	1d72      	adds	r2, r6, #5
 80124e4:	0092      	lsls	r2, r2, #2
 80124e6:	4620      	mov	r0, r4
 80124e8:	f000 fb60 	bl	8012bac <_calloc_r>
 80124ec:	b160      	cbz	r0, 8012508 <_Balloc+0x64>
 80124ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80124f2:	e00e      	b.n	8012512 <_Balloc+0x6e>
 80124f4:	2221      	movs	r2, #33	; 0x21
 80124f6:	2104      	movs	r1, #4
 80124f8:	4620      	mov	r0, r4
 80124fa:	f000 fb57 	bl	8012bac <_calloc_r>
 80124fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012500:	60f0      	str	r0, [r6, #12]
 8012502:	68db      	ldr	r3, [r3, #12]
 8012504:	2b00      	cmp	r3, #0
 8012506:	d1e4      	bne.n	80124d2 <_Balloc+0x2e>
 8012508:	2000      	movs	r0, #0
 801250a:	bd70      	pop	{r4, r5, r6, pc}
 801250c:	6802      	ldr	r2, [r0, #0]
 801250e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012512:	2300      	movs	r3, #0
 8012514:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012518:	e7f7      	b.n	801250a <_Balloc+0x66>
 801251a:	bf00      	nop
 801251c:	080138bd 	.word	0x080138bd
 8012520:	08013940 	.word	0x08013940

08012524 <_Bfree>:
 8012524:	b570      	push	{r4, r5, r6, lr}
 8012526:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012528:	4605      	mov	r5, r0
 801252a:	460c      	mov	r4, r1
 801252c:	b976      	cbnz	r6, 801254c <_Bfree+0x28>
 801252e:	2010      	movs	r0, #16
 8012530:	f7fe fc54 	bl	8010ddc <malloc>
 8012534:	4602      	mov	r2, r0
 8012536:	6268      	str	r0, [r5, #36]	; 0x24
 8012538:	b920      	cbnz	r0, 8012544 <_Bfree+0x20>
 801253a:	4b09      	ldr	r3, [pc, #36]	; (8012560 <_Bfree+0x3c>)
 801253c:	4809      	ldr	r0, [pc, #36]	; (8012564 <_Bfree+0x40>)
 801253e:	218a      	movs	r1, #138	; 0x8a
 8012540:	f000 fb4a 	bl	8012bd8 <__assert_func>
 8012544:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012548:	6006      	str	r6, [r0, #0]
 801254a:	60c6      	str	r6, [r0, #12]
 801254c:	b13c      	cbz	r4, 801255e <_Bfree+0x3a>
 801254e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012550:	6862      	ldr	r2, [r4, #4]
 8012552:	68db      	ldr	r3, [r3, #12]
 8012554:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012558:	6021      	str	r1, [r4, #0]
 801255a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801255e:	bd70      	pop	{r4, r5, r6, pc}
 8012560:	080138bd 	.word	0x080138bd
 8012564:	08013940 	.word	0x08013940

08012568 <__multadd>:
 8012568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801256c:	690d      	ldr	r5, [r1, #16]
 801256e:	4607      	mov	r7, r0
 8012570:	460c      	mov	r4, r1
 8012572:	461e      	mov	r6, r3
 8012574:	f101 0c14 	add.w	ip, r1, #20
 8012578:	2000      	movs	r0, #0
 801257a:	f8dc 3000 	ldr.w	r3, [ip]
 801257e:	b299      	uxth	r1, r3
 8012580:	fb02 6101 	mla	r1, r2, r1, r6
 8012584:	0c1e      	lsrs	r6, r3, #16
 8012586:	0c0b      	lsrs	r3, r1, #16
 8012588:	fb02 3306 	mla	r3, r2, r6, r3
 801258c:	b289      	uxth	r1, r1
 801258e:	3001      	adds	r0, #1
 8012590:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012594:	4285      	cmp	r5, r0
 8012596:	f84c 1b04 	str.w	r1, [ip], #4
 801259a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801259e:	dcec      	bgt.n	801257a <__multadd+0x12>
 80125a0:	b30e      	cbz	r6, 80125e6 <__multadd+0x7e>
 80125a2:	68a3      	ldr	r3, [r4, #8]
 80125a4:	42ab      	cmp	r3, r5
 80125a6:	dc19      	bgt.n	80125dc <__multadd+0x74>
 80125a8:	6861      	ldr	r1, [r4, #4]
 80125aa:	4638      	mov	r0, r7
 80125ac:	3101      	adds	r1, #1
 80125ae:	f7ff ff79 	bl	80124a4 <_Balloc>
 80125b2:	4680      	mov	r8, r0
 80125b4:	b928      	cbnz	r0, 80125c2 <__multadd+0x5a>
 80125b6:	4602      	mov	r2, r0
 80125b8:	4b0c      	ldr	r3, [pc, #48]	; (80125ec <__multadd+0x84>)
 80125ba:	480d      	ldr	r0, [pc, #52]	; (80125f0 <__multadd+0x88>)
 80125bc:	21b5      	movs	r1, #181	; 0xb5
 80125be:	f000 fb0b 	bl	8012bd8 <__assert_func>
 80125c2:	6922      	ldr	r2, [r4, #16]
 80125c4:	3202      	adds	r2, #2
 80125c6:	f104 010c 	add.w	r1, r4, #12
 80125ca:	0092      	lsls	r2, r2, #2
 80125cc:	300c      	adds	r0, #12
 80125ce:	f7fe fc15 	bl	8010dfc <memcpy>
 80125d2:	4621      	mov	r1, r4
 80125d4:	4638      	mov	r0, r7
 80125d6:	f7ff ffa5 	bl	8012524 <_Bfree>
 80125da:	4644      	mov	r4, r8
 80125dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80125e0:	3501      	adds	r5, #1
 80125e2:	615e      	str	r6, [r3, #20]
 80125e4:	6125      	str	r5, [r4, #16]
 80125e6:	4620      	mov	r0, r4
 80125e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125ec:	0801392f 	.word	0x0801392f
 80125f0:	08013940 	.word	0x08013940

080125f4 <__hi0bits>:
 80125f4:	0c03      	lsrs	r3, r0, #16
 80125f6:	041b      	lsls	r3, r3, #16
 80125f8:	b9d3      	cbnz	r3, 8012630 <__hi0bits+0x3c>
 80125fa:	0400      	lsls	r0, r0, #16
 80125fc:	2310      	movs	r3, #16
 80125fe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012602:	bf04      	itt	eq
 8012604:	0200      	lsleq	r0, r0, #8
 8012606:	3308      	addeq	r3, #8
 8012608:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801260c:	bf04      	itt	eq
 801260e:	0100      	lsleq	r0, r0, #4
 8012610:	3304      	addeq	r3, #4
 8012612:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012616:	bf04      	itt	eq
 8012618:	0080      	lsleq	r0, r0, #2
 801261a:	3302      	addeq	r3, #2
 801261c:	2800      	cmp	r0, #0
 801261e:	db05      	blt.n	801262c <__hi0bits+0x38>
 8012620:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012624:	f103 0301 	add.w	r3, r3, #1
 8012628:	bf08      	it	eq
 801262a:	2320      	moveq	r3, #32
 801262c:	4618      	mov	r0, r3
 801262e:	4770      	bx	lr
 8012630:	2300      	movs	r3, #0
 8012632:	e7e4      	b.n	80125fe <__hi0bits+0xa>

08012634 <__lo0bits>:
 8012634:	6803      	ldr	r3, [r0, #0]
 8012636:	f013 0207 	ands.w	r2, r3, #7
 801263a:	4601      	mov	r1, r0
 801263c:	d00b      	beq.n	8012656 <__lo0bits+0x22>
 801263e:	07da      	lsls	r2, r3, #31
 8012640:	d423      	bmi.n	801268a <__lo0bits+0x56>
 8012642:	0798      	lsls	r0, r3, #30
 8012644:	bf49      	itett	mi
 8012646:	085b      	lsrmi	r3, r3, #1
 8012648:	089b      	lsrpl	r3, r3, #2
 801264a:	2001      	movmi	r0, #1
 801264c:	600b      	strmi	r3, [r1, #0]
 801264e:	bf5c      	itt	pl
 8012650:	600b      	strpl	r3, [r1, #0]
 8012652:	2002      	movpl	r0, #2
 8012654:	4770      	bx	lr
 8012656:	b298      	uxth	r0, r3
 8012658:	b9a8      	cbnz	r0, 8012686 <__lo0bits+0x52>
 801265a:	0c1b      	lsrs	r3, r3, #16
 801265c:	2010      	movs	r0, #16
 801265e:	b2da      	uxtb	r2, r3
 8012660:	b90a      	cbnz	r2, 8012666 <__lo0bits+0x32>
 8012662:	3008      	adds	r0, #8
 8012664:	0a1b      	lsrs	r3, r3, #8
 8012666:	071a      	lsls	r2, r3, #28
 8012668:	bf04      	itt	eq
 801266a:	091b      	lsreq	r3, r3, #4
 801266c:	3004      	addeq	r0, #4
 801266e:	079a      	lsls	r2, r3, #30
 8012670:	bf04      	itt	eq
 8012672:	089b      	lsreq	r3, r3, #2
 8012674:	3002      	addeq	r0, #2
 8012676:	07da      	lsls	r2, r3, #31
 8012678:	d403      	bmi.n	8012682 <__lo0bits+0x4e>
 801267a:	085b      	lsrs	r3, r3, #1
 801267c:	f100 0001 	add.w	r0, r0, #1
 8012680:	d005      	beq.n	801268e <__lo0bits+0x5a>
 8012682:	600b      	str	r3, [r1, #0]
 8012684:	4770      	bx	lr
 8012686:	4610      	mov	r0, r2
 8012688:	e7e9      	b.n	801265e <__lo0bits+0x2a>
 801268a:	2000      	movs	r0, #0
 801268c:	4770      	bx	lr
 801268e:	2020      	movs	r0, #32
 8012690:	4770      	bx	lr
	...

08012694 <__i2b>:
 8012694:	b510      	push	{r4, lr}
 8012696:	460c      	mov	r4, r1
 8012698:	2101      	movs	r1, #1
 801269a:	f7ff ff03 	bl	80124a4 <_Balloc>
 801269e:	4602      	mov	r2, r0
 80126a0:	b928      	cbnz	r0, 80126ae <__i2b+0x1a>
 80126a2:	4b05      	ldr	r3, [pc, #20]	; (80126b8 <__i2b+0x24>)
 80126a4:	4805      	ldr	r0, [pc, #20]	; (80126bc <__i2b+0x28>)
 80126a6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80126aa:	f000 fa95 	bl	8012bd8 <__assert_func>
 80126ae:	2301      	movs	r3, #1
 80126b0:	6144      	str	r4, [r0, #20]
 80126b2:	6103      	str	r3, [r0, #16]
 80126b4:	bd10      	pop	{r4, pc}
 80126b6:	bf00      	nop
 80126b8:	0801392f 	.word	0x0801392f
 80126bc:	08013940 	.word	0x08013940

080126c0 <__multiply>:
 80126c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126c4:	4691      	mov	r9, r2
 80126c6:	690a      	ldr	r2, [r1, #16]
 80126c8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80126cc:	429a      	cmp	r2, r3
 80126ce:	bfb8      	it	lt
 80126d0:	460b      	movlt	r3, r1
 80126d2:	460c      	mov	r4, r1
 80126d4:	bfbc      	itt	lt
 80126d6:	464c      	movlt	r4, r9
 80126d8:	4699      	movlt	r9, r3
 80126da:	6927      	ldr	r7, [r4, #16]
 80126dc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80126e0:	68a3      	ldr	r3, [r4, #8]
 80126e2:	6861      	ldr	r1, [r4, #4]
 80126e4:	eb07 060a 	add.w	r6, r7, sl
 80126e8:	42b3      	cmp	r3, r6
 80126ea:	b085      	sub	sp, #20
 80126ec:	bfb8      	it	lt
 80126ee:	3101      	addlt	r1, #1
 80126f0:	f7ff fed8 	bl	80124a4 <_Balloc>
 80126f4:	b930      	cbnz	r0, 8012704 <__multiply+0x44>
 80126f6:	4602      	mov	r2, r0
 80126f8:	4b44      	ldr	r3, [pc, #272]	; (801280c <__multiply+0x14c>)
 80126fa:	4845      	ldr	r0, [pc, #276]	; (8012810 <__multiply+0x150>)
 80126fc:	f240 115d 	movw	r1, #349	; 0x15d
 8012700:	f000 fa6a 	bl	8012bd8 <__assert_func>
 8012704:	f100 0514 	add.w	r5, r0, #20
 8012708:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801270c:	462b      	mov	r3, r5
 801270e:	2200      	movs	r2, #0
 8012710:	4543      	cmp	r3, r8
 8012712:	d321      	bcc.n	8012758 <__multiply+0x98>
 8012714:	f104 0314 	add.w	r3, r4, #20
 8012718:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801271c:	f109 0314 	add.w	r3, r9, #20
 8012720:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8012724:	9202      	str	r2, [sp, #8]
 8012726:	1b3a      	subs	r2, r7, r4
 8012728:	3a15      	subs	r2, #21
 801272a:	f022 0203 	bic.w	r2, r2, #3
 801272e:	3204      	adds	r2, #4
 8012730:	f104 0115 	add.w	r1, r4, #21
 8012734:	428f      	cmp	r7, r1
 8012736:	bf38      	it	cc
 8012738:	2204      	movcc	r2, #4
 801273a:	9201      	str	r2, [sp, #4]
 801273c:	9a02      	ldr	r2, [sp, #8]
 801273e:	9303      	str	r3, [sp, #12]
 8012740:	429a      	cmp	r2, r3
 8012742:	d80c      	bhi.n	801275e <__multiply+0x9e>
 8012744:	2e00      	cmp	r6, #0
 8012746:	dd03      	ble.n	8012750 <__multiply+0x90>
 8012748:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801274c:	2b00      	cmp	r3, #0
 801274e:	d05a      	beq.n	8012806 <__multiply+0x146>
 8012750:	6106      	str	r6, [r0, #16]
 8012752:	b005      	add	sp, #20
 8012754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012758:	f843 2b04 	str.w	r2, [r3], #4
 801275c:	e7d8      	b.n	8012710 <__multiply+0x50>
 801275e:	f8b3 a000 	ldrh.w	sl, [r3]
 8012762:	f1ba 0f00 	cmp.w	sl, #0
 8012766:	d024      	beq.n	80127b2 <__multiply+0xf2>
 8012768:	f104 0e14 	add.w	lr, r4, #20
 801276c:	46a9      	mov	r9, r5
 801276e:	f04f 0c00 	mov.w	ip, #0
 8012772:	f85e 2b04 	ldr.w	r2, [lr], #4
 8012776:	f8d9 1000 	ldr.w	r1, [r9]
 801277a:	fa1f fb82 	uxth.w	fp, r2
 801277e:	b289      	uxth	r1, r1
 8012780:	fb0a 110b 	mla	r1, sl, fp, r1
 8012784:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8012788:	f8d9 2000 	ldr.w	r2, [r9]
 801278c:	4461      	add	r1, ip
 801278e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012792:	fb0a c20b 	mla	r2, sl, fp, ip
 8012796:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801279a:	b289      	uxth	r1, r1
 801279c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80127a0:	4577      	cmp	r7, lr
 80127a2:	f849 1b04 	str.w	r1, [r9], #4
 80127a6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80127aa:	d8e2      	bhi.n	8012772 <__multiply+0xb2>
 80127ac:	9a01      	ldr	r2, [sp, #4]
 80127ae:	f845 c002 	str.w	ip, [r5, r2]
 80127b2:	9a03      	ldr	r2, [sp, #12]
 80127b4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80127b8:	3304      	adds	r3, #4
 80127ba:	f1b9 0f00 	cmp.w	r9, #0
 80127be:	d020      	beq.n	8012802 <__multiply+0x142>
 80127c0:	6829      	ldr	r1, [r5, #0]
 80127c2:	f104 0c14 	add.w	ip, r4, #20
 80127c6:	46ae      	mov	lr, r5
 80127c8:	f04f 0a00 	mov.w	sl, #0
 80127cc:	f8bc b000 	ldrh.w	fp, [ip]
 80127d0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80127d4:	fb09 220b 	mla	r2, r9, fp, r2
 80127d8:	4492      	add	sl, r2
 80127da:	b289      	uxth	r1, r1
 80127dc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80127e0:	f84e 1b04 	str.w	r1, [lr], #4
 80127e4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80127e8:	f8be 1000 	ldrh.w	r1, [lr]
 80127ec:	0c12      	lsrs	r2, r2, #16
 80127ee:	fb09 1102 	mla	r1, r9, r2, r1
 80127f2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80127f6:	4567      	cmp	r7, ip
 80127f8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80127fc:	d8e6      	bhi.n	80127cc <__multiply+0x10c>
 80127fe:	9a01      	ldr	r2, [sp, #4]
 8012800:	50a9      	str	r1, [r5, r2]
 8012802:	3504      	adds	r5, #4
 8012804:	e79a      	b.n	801273c <__multiply+0x7c>
 8012806:	3e01      	subs	r6, #1
 8012808:	e79c      	b.n	8012744 <__multiply+0x84>
 801280a:	bf00      	nop
 801280c:	0801392f 	.word	0x0801392f
 8012810:	08013940 	.word	0x08013940

08012814 <__pow5mult>:
 8012814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012818:	4615      	mov	r5, r2
 801281a:	f012 0203 	ands.w	r2, r2, #3
 801281e:	4606      	mov	r6, r0
 8012820:	460f      	mov	r7, r1
 8012822:	d007      	beq.n	8012834 <__pow5mult+0x20>
 8012824:	4c25      	ldr	r4, [pc, #148]	; (80128bc <__pow5mult+0xa8>)
 8012826:	3a01      	subs	r2, #1
 8012828:	2300      	movs	r3, #0
 801282a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801282e:	f7ff fe9b 	bl	8012568 <__multadd>
 8012832:	4607      	mov	r7, r0
 8012834:	10ad      	asrs	r5, r5, #2
 8012836:	d03d      	beq.n	80128b4 <__pow5mult+0xa0>
 8012838:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801283a:	b97c      	cbnz	r4, 801285c <__pow5mult+0x48>
 801283c:	2010      	movs	r0, #16
 801283e:	f7fe facd 	bl	8010ddc <malloc>
 8012842:	4602      	mov	r2, r0
 8012844:	6270      	str	r0, [r6, #36]	; 0x24
 8012846:	b928      	cbnz	r0, 8012854 <__pow5mult+0x40>
 8012848:	4b1d      	ldr	r3, [pc, #116]	; (80128c0 <__pow5mult+0xac>)
 801284a:	481e      	ldr	r0, [pc, #120]	; (80128c4 <__pow5mult+0xb0>)
 801284c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012850:	f000 f9c2 	bl	8012bd8 <__assert_func>
 8012854:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012858:	6004      	str	r4, [r0, #0]
 801285a:	60c4      	str	r4, [r0, #12]
 801285c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012860:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012864:	b94c      	cbnz	r4, 801287a <__pow5mult+0x66>
 8012866:	f240 2171 	movw	r1, #625	; 0x271
 801286a:	4630      	mov	r0, r6
 801286c:	f7ff ff12 	bl	8012694 <__i2b>
 8012870:	2300      	movs	r3, #0
 8012872:	f8c8 0008 	str.w	r0, [r8, #8]
 8012876:	4604      	mov	r4, r0
 8012878:	6003      	str	r3, [r0, #0]
 801287a:	f04f 0900 	mov.w	r9, #0
 801287e:	07eb      	lsls	r3, r5, #31
 8012880:	d50a      	bpl.n	8012898 <__pow5mult+0x84>
 8012882:	4639      	mov	r1, r7
 8012884:	4622      	mov	r2, r4
 8012886:	4630      	mov	r0, r6
 8012888:	f7ff ff1a 	bl	80126c0 <__multiply>
 801288c:	4639      	mov	r1, r7
 801288e:	4680      	mov	r8, r0
 8012890:	4630      	mov	r0, r6
 8012892:	f7ff fe47 	bl	8012524 <_Bfree>
 8012896:	4647      	mov	r7, r8
 8012898:	106d      	asrs	r5, r5, #1
 801289a:	d00b      	beq.n	80128b4 <__pow5mult+0xa0>
 801289c:	6820      	ldr	r0, [r4, #0]
 801289e:	b938      	cbnz	r0, 80128b0 <__pow5mult+0x9c>
 80128a0:	4622      	mov	r2, r4
 80128a2:	4621      	mov	r1, r4
 80128a4:	4630      	mov	r0, r6
 80128a6:	f7ff ff0b 	bl	80126c0 <__multiply>
 80128aa:	6020      	str	r0, [r4, #0]
 80128ac:	f8c0 9000 	str.w	r9, [r0]
 80128b0:	4604      	mov	r4, r0
 80128b2:	e7e4      	b.n	801287e <__pow5mult+0x6a>
 80128b4:	4638      	mov	r0, r7
 80128b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80128ba:	bf00      	nop
 80128bc:	08013a90 	.word	0x08013a90
 80128c0:	080138bd 	.word	0x080138bd
 80128c4:	08013940 	.word	0x08013940

080128c8 <__lshift>:
 80128c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80128cc:	460c      	mov	r4, r1
 80128ce:	6849      	ldr	r1, [r1, #4]
 80128d0:	6923      	ldr	r3, [r4, #16]
 80128d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80128d6:	68a3      	ldr	r3, [r4, #8]
 80128d8:	4607      	mov	r7, r0
 80128da:	4691      	mov	r9, r2
 80128dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80128e0:	f108 0601 	add.w	r6, r8, #1
 80128e4:	42b3      	cmp	r3, r6
 80128e6:	db0b      	blt.n	8012900 <__lshift+0x38>
 80128e8:	4638      	mov	r0, r7
 80128ea:	f7ff fddb 	bl	80124a4 <_Balloc>
 80128ee:	4605      	mov	r5, r0
 80128f0:	b948      	cbnz	r0, 8012906 <__lshift+0x3e>
 80128f2:	4602      	mov	r2, r0
 80128f4:	4b2a      	ldr	r3, [pc, #168]	; (80129a0 <__lshift+0xd8>)
 80128f6:	482b      	ldr	r0, [pc, #172]	; (80129a4 <__lshift+0xdc>)
 80128f8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80128fc:	f000 f96c 	bl	8012bd8 <__assert_func>
 8012900:	3101      	adds	r1, #1
 8012902:	005b      	lsls	r3, r3, #1
 8012904:	e7ee      	b.n	80128e4 <__lshift+0x1c>
 8012906:	2300      	movs	r3, #0
 8012908:	f100 0114 	add.w	r1, r0, #20
 801290c:	f100 0210 	add.w	r2, r0, #16
 8012910:	4618      	mov	r0, r3
 8012912:	4553      	cmp	r3, sl
 8012914:	db37      	blt.n	8012986 <__lshift+0xbe>
 8012916:	6920      	ldr	r0, [r4, #16]
 8012918:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801291c:	f104 0314 	add.w	r3, r4, #20
 8012920:	f019 091f 	ands.w	r9, r9, #31
 8012924:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012928:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801292c:	d02f      	beq.n	801298e <__lshift+0xc6>
 801292e:	f1c9 0e20 	rsb	lr, r9, #32
 8012932:	468a      	mov	sl, r1
 8012934:	f04f 0c00 	mov.w	ip, #0
 8012938:	681a      	ldr	r2, [r3, #0]
 801293a:	fa02 f209 	lsl.w	r2, r2, r9
 801293e:	ea42 020c 	orr.w	r2, r2, ip
 8012942:	f84a 2b04 	str.w	r2, [sl], #4
 8012946:	f853 2b04 	ldr.w	r2, [r3], #4
 801294a:	4298      	cmp	r0, r3
 801294c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8012950:	d8f2      	bhi.n	8012938 <__lshift+0x70>
 8012952:	1b03      	subs	r3, r0, r4
 8012954:	3b15      	subs	r3, #21
 8012956:	f023 0303 	bic.w	r3, r3, #3
 801295a:	3304      	adds	r3, #4
 801295c:	f104 0215 	add.w	r2, r4, #21
 8012960:	4290      	cmp	r0, r2
 8012962:	bf38      	it	cc
 8012964:	2304      	movcc	r3, #4
 8012966:	f841 c003 	str.w	ip, [r1, r3]
 801296a:	f1bc 0f00 	cmp.w	ip, #0
 801296e:	d001      	beq.n	8012974 <__lshift+0xac>
 8012970:	f108 0602 	add.w	r6, r8, #2
 8012974:	3e01      	subs	r6, #1
 8012976:	4638      	mov	r0, r7
 8012978:	612e      	str	r6, [r5, #16]
 801297a:	4621      	mov	r1, r4
 801297c:	f7ff fdd2 	bl	8012524 <_Bfree>
 8012980:	4628      	mov	r0, r5
 8012982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012986:	f842 0f04 	str.w	r0, [r2, #4]!
 801298a:	3301      	adds	r3, #1
 801298c:	e7c1      	b.n	8012912 <__lshift+0x4a>
 801298e:	3904      	subs	r1, #4
 8012990:	f853 2b04 	ldr.w	r2, [r3], #4
 8012994:	f841 2f04 	str.w	r2, [r1, #4]!
 8012998:	4298      	cmp	r0, r3
 801299a:	d8f9      	bhi.n	8012990 <__lshift+0xc8>
 801299c:	e7ea      	b.n	8012974 <__lshift+0xac>
 801299e:	bf00      	nop
 80129a0:	0801392f 	.word	0x0801392f
 80129a4:	08013940 	.word	0x08013940

080129a8 <__mcmp>:
 80129a8:	b530      	push	{r4, r5, lr}
 80129aa:	6902      	ldr	r2, [r0, #16]
 80129ac:	690c      	ldr	r4, [r1, #16]
 80129ae:	1b12      	subs	r2, r2, r4
 80129b0:	d10e      	bne.n	80129d0 <__mcmp+0x28>
 80129b2:	f100 0314 	add.w	r3, r0, #20
 80129b6:	3114      	adds	r1, #20
 80129b8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80129bc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80129c0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80129c4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80129c8:	42a5      	cmp	r5, r4
 80129ca:	d003      	beq.n	80129d4 <__mcmp+0x2c>
 80129cc:	d305      	bcc.n	80129da <__mcmp+0x32>
 80129ce:	2201      	movs	r2, #1
 80129d0:	4610      	mov	r0, r2
 80129d2:	bd30      	pop	{r4, r5, pc}
 80129d4:	4283      	cmp	r3, r0
 80129d6:	d3f3      	bcc.n	80129c0 <__mcmp+0x18>
 80129d8:	e7fa      	b.n	80129d0 <__mcmp+0x28>
 80129da:	f04f 32ff 	mov.w	r2, #4294967295
 80129de:	e7f7      	b.n	80129d0 <__mcmp+0x28>

080129e0 <__mdiff>:
 80129e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129e4:	460c      	mov	r4, r1
 80129e6:	4606      	mov	r6, r0
 80129e8:	4611      	mov	r1, r2
 80129ea:	4620      	mov	r0, r4
 80129ec:	4690      	mov	r8, r2
 80129ee:	f7ff ffdb 	bl	80129a8 <__mcmp>
 80129f2:	1e05      	subs	r5, r0, #0
 80129f4:	d110      	bne.n	8012a18 <__mdiff+0x38>
 80129f6:	4629      	mov	r1, r5
 80129f8:	4630      	mov	r0, r6
 80129fa:	f7ff fd53 	bl	80124a4 <_Balloc>
 80129fe:	b930      	cbnz	r0, 8012a0e <__mdiff+0x2e>
 8012a00:	4b3a      	ldr	r3, [pc, #232]	; (8012aec <__mdiff+0x10c>)
 8012a02:	4602      	mov	r2, r0
 8012a04:	f240 2132 	movw	r1, #562	; 0x232
 8012a08:	4839      	ldr	r0, [pc, #228]	; (8012af0 <__mdiff+0x110>)
 8012a0a:	f000 f8e5 	bl	8012bd8 <__assert_func>
 8012a0e:	2301      	movs	r3, #1
 8012a10:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012a14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a18:	bfa4      	itt	ge
 8012a1a:	4643      	movge	r3, r8
 8012a1c:	46a0      	movge	r8, r4
 8012a1e:	4630      	mov	r0, r6
 8012a20:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012a24:	bfa6      	itte	ge
 8012a26:	461c      	movge	r4, r3
 8012a28:	2500      	movge	r5, #0
 8012a2a:	2501      	movlt	r5, #1
 8012a2c:	f7ff fd3a 	bl	80124a4 <_Balloc>
 8012a30:	b920      	cbnz	r0, 8012a3c <__mdiff+0x5c>
 8012a32:	4b2e      	ldr	r3, [pc, #184]	; (8012aec <__mdiff+0x10c>)
 8012a34:	4602      	mov	r2, r0
 8012a36:	f44f 7110 	mov.w	r1, #576	; 0x240
 8012a3a:	e7e5      	b.n	8012a08 <__mdiff+0x28>
 8012a3c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8012a40:	6926      	ldr	r6, [r4, #16]
 8012a42:	60c5      	str	r5, [r0, #12]
 8012a44:	f104 0914 	add.w	r9, r4, #20
 8012a48:	f108 0514 	add.w	r5, r8, #20
 8012a4c:	f100 0e14 	add.w	lr, r0, #20
 8012a50:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8012a54:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8012a58:	f108 0210 	add.w	r2, r8, #16
 8012a5c:	46f2      	mov	sl, lr
 8012a5e:	2100      	movs	r1, #0
 8012a60:	f859 3b04 	ldr.w	r3, [r9], #4
 8012a64:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012a68:	fa1f f883 	uxth.w	r8, r3
 8012a6c:	fa11 f18b 	uxtah	r1, r1, fp
 8012a70:	0c1b      	lsrs	r3, r3, #16
 8012a72:	eba1 0808 	sub.w	r8, r1, r8
 8012a76:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012a7a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012a7e:	fa1f f888 	uxth.w	r8, r8
 8012a82:	1419      	asrs	r1, r3, #16
 8012a84:	454e      	cmp	r6, r9
 8012a86:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012a8a:	f84a 3b04 	str.w	r3, [sl], #4
 8012a8e:	d8e7      	bhi.n	8012a60 <__mdiff+0x80>
 8012a90:	1b33      	subs	r3, r6, r4
 8012a92:	3b15      	subs	r3, #21
 8012a94:	f023 0303 	bic.w	r3, r3, #3
 8012a98:	3304      	adds	r3, #4
 8012a9a:	3415      	adds	r4, #21
 8012a9c:	42a6      	cmp	r6, r4
 8012a9e:	bf38      	it	cc
 8012aa0:	2304      	movcc	r3, #4
 8012aa2:	441d      	add	r5, r3
 8012aa4:	4473      	add	r3, lr
 8012aa6:	469e      	mov	lr, r3
 8012aa8:	462e      	mov	r6, r5
 8012aaa:	4566      	cmp	r6, ip
 8012aac:	d30e      	bcc.n	8012acc <__mdiff+0xec>
 8012aae:	f10c 0203 	add.w	r2, ip, #3
 8012ab2:	1b52      	subs	r2, r2, r5
 8012ab4:	f022 0203 	bic.w	r2, r2, #3
 8012ab8:	3d03      	subs	r5, #3
 8012aba:	45ac      	cmp	ip, r5
 8012abc:	bf38      	it	cc
 8012abe:	2200      	movcc	r2, #0
 8012ac0:	441a      	add	r2, r3
 8012ac2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8012ac6:	b17b      	cbz	r3, 8012ae8 <__mdiff+0x108>
 8012ac8:	6107      	str	r7, [r0, #16]
 8012aca:	e7a3      	b.n	8012a14 <__mdiff+0x34>
 8012acc:	f856 8b04 	ldr.w	r8, [r6], #4
 8012ad0:	fa11 f288 	uxtah	r2, r1, r8
 8012ad4:	1414      	asrs	r4, r2, #16
 8012ad6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8012ada:	b292      	uxth	r2, r2
 8012adc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8012ae0:	f84e 2b04 	str.w	r2, [lr], #4
 8012ae4:	1421      	asrs	r1, r4, #16
 8012ae6:	e7e0      	b.n	8012aaa <__mdiff+0xca>
 8012ae8:	3f01      	subs	r7, #1
 8012aea:	e7ea      	b.n	8012ac2 <__mdiff+0xe2>
 8012aec:	0801392f 	.word	0x0801392f
 8012af0:	08013940 	.word	0x08013940

08012af4 <__d2b>:
 8012af4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012af8:	4689      	mov	r9, r1
 8012afa:	2101      	movs	r1, #1
 8012afc:	ec57 6b10 	vmov	r6, r7, d0
 8012b00:	4690      	mov	r8, r2
 8012b02:	f7ff fccf 	bl	80124a4 <_Balloc>
 8012b06:	4604      	mov	r4, r0
 8012b08:	b930      	cbnz	r0, 8012b18 <__d2b+0x24>
 8012b0a:	4602      	mov	r2, r0
 8012b0c:	4b25      	ldr	r3, [pc, #148]	; (8012ba4 <__d2b+0xb0>)
 8012b0e:	4826      	ldr	r0, [pc, #152]	; (8012ba8 <__d2b+0xb4>)
 8012b10:	f240 310a 	movw	r1, #778	; 0x30a
 8012b14:	f000 f860 	bl	8012bd8 <__assert_func>
 8012b18:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8012b1c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012b20:	bb35      	cbnz	r5, 8012b70 <__d2b+0x7c>
 8012b22:	2e00      	cmp	r6, #0
 8012b24:	9301      	str	r3, [sp, #4]
 8012b26:	d028      	beq.n	8012b7a <__d2b+0x86>
 8012b28:	4668      	mov	r0, sp
 8012b2a:	9600      	str	r6, [sp, #0]
 8012b2c:	f7ff fd82 	bl	8012634 <__lo0bits>
 8012b30:	9900      	ldr	r1, [sp, #0]
 8012b32:	b300      	cbz	r0, 8012b76 <__d2b+0x82>
 8012b34:	9a01      	ldr	r2, [sp, #4]
 8012b36:	f1c0 0320 	rsb	r3, r0, #32
 8012b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8012b3e:	430b      	orrs	r3, r1
 8012b40:	40c2      	lsrs	r2, r0
 8012b42:	6163      	str	r3, [r4, #20]
 8012b44:	9201      	str	r2, [sp, #4]
 8012b46:	9b01      	ldr	r3, [sp, #4]
 8012b48:	61a3      	str	r3, [r4, #24]
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	bf14      	ite	ne
 8012b4e:	2202      	movne	r2, #2
 8012b50:	2201      	moveq	r2, #1
 8012b52:	6122      	str	r2, [r4, #16]
 8012b54:	b1d5      	cbz	r5, 8012b8c <__d2b+0x98>
 8012b56:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012b5a:	4405      	add	r5, r0
 8012b5c:	f8c9 5000 	str.w	r5, [r9]
 8012b60:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012b64:	f8c8 0000 	str.w	r0, [r8]
 8012b68:	4620      	mov	r0, r4
 8012b6a:	b003      	add	sp, #12
 8012b6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012b70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012b74:	e7d5      	b.n	8012b22 <__d2b+0x2e>
 8012b76:	6161      	str	r1, [r4, #20]
 8012b78:	e7e5      	b.n	8012b46 <__d2b+0x52>
 8012b7a:	a801      	add	r0, sp, #4
 8012b7c:	f7ff fd5a 	bl	8012634 <__lo0bits>
 8012b80:	9b01      	ldr	r3, [sp, #4]
 8012b82:	6163      	str	r3, [r4, #20]
 8012b84:	2201      	movs	r2, #1
 8012b86:	6122      	str	r2, [r4, #16]
 8012b88:	3020      	adds	r0, #32
 8012b8a:	e7e3      	b.n	8012b54 <__d2b+0x60>
 8012b8c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012b90:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012b94:	f8c9 0000 	str.w	r0, [r9]
 8012b98:	6918      	ldr	r0, [r3, #16]
 8012b9a:	f7ff fd2b 	bl	80125f4 <__hi0bits>
 8012b9e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012ba2:	e7df      	b.n	8012b64 <__d2b+0x70>
 8012ba4:	0801392f 	.word	0x0801392f
 8012ba8:	08013940 	.word	0x08013940

08012bac <_calloc_r>:
 8012bac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012bae:	fba1 2402 	umull	r2, r4, r1, r2
 8012bb2:	b94c      	cbnz	r4, 8012bc8 <_calloc_r+0x1c>
 8012bb4:	4611      	mov	r1, r2
 8012bb6:	9201      	str	r2, [sp, #4]
 8012bb8:	f7fe f9a2 	bl	8010f00 <_malloc_r>
 8012bbc:	9a01      	ldr	r2, [sp, #4]
 8012bbe:	4605      	mov	r5, r0
 8012bc0:	b930      	cbnz	r0, 8012bd0 <_calloc_r+0x24>
 8012bc2:	4628      	mov	r0, r5
 8012bc4:	b003      	add	sp, #12
 8012bc6:	bd30      	pop	{r4, r5, pc}
 8012bc8:	220c      	movs	r2, #12
 8012bca:	6002      	str	r2, [r0, #0]
 8012bcc:	2500      	movs	r5, #0
 8012bce:	e7f8      	b.n	8012bc2 <_calloc_r+0x16>
 8012bd0:	4621      	mov	r1, r4
 8012bd2:	f7fe f921 	bl	8010e18 <memset>
 8012bd6:	e7f4      	b.n	8012bc2 <_calloc_r+0x16>

08012bd8 <__assert_func>:
 8012bd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012bda:	4614      	mov	r4, r2
 8012bdc:	461a      	mov	r2, r3
 8012bde:	4b09      	ldr	r3, [pc, #36]	; (8012c04 <__assert_func+0x2c>)
 8012be0:	681b      	ldr	r3, [r3, #0]
 8012be2:	4605      	mov	r5, r0
 8012be4:	68d8      	ldr	r0, [r3, #12]
 8012be6:	b14c      	cbz	r4, 8012bfc <__assert_func+0x24>
 8012be8:	4b07      	ldr	r3, [pc, #28]	; (8012c08 <__assert_func+0x30>)
 8012bea:	9100      	str	r1, [sp, #0]
 8012bec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012bf0:	4906      	ldr	r1, [pc, #24]	; (8012c0c <__assert_func+0x34>)
 8012bf2:	462b      	mov	r3, r5
 8012bf4:	f000 f80e 	bl	8012c14 <fiprintf>
 8012bf8:	f000 fa5a 	bl	80130b0 <abort>
 8012bfc:	4b04      	ldr	r3, [pc, #16]	; (8012c10 <__assert_func+0x38>)
 8012bfe:	461c      	mov	r4, r3
 8012c00:	e7f3      	b.n	8012bea <__assert_func+0x12>
 8012c02:	bf00      	nop
 8012c04:	24000184 	.word	0x24000184
 8012c08:	08013a9c 	.word	0x08013a9c
 8012c0c:	08013aa9 	.word	0x08013aa9
 8012c10:	08013ad7 	.word	0x08013ad7

08012c14 <fiprintf>:
 8012c14:	b40e      	push	{r1, r2, r3}
 8012c16:	b503      	push	{r0, r1, lr}
 8012c18:	4601      	mov	r1, r0
 8012c1a:	ab03      	add	r3, sp, #12
 8012c1c:	4805      	ldr	r0, [pc, #20]	; (8012c34 <fiprintf+0x20>)
 8012c1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012c22:	6800      	ldr	r0, [r0, #0]
 8012c24:	9301      	str	r3, [sp, #4]
 8012c26:	f000 f845 	bl	8012cb4 <_vfiprintf_r>
 8012c2a:	b002      	add	sp, #8
 8012c2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012c30:	b003      	add	sp, #12
 8012c32:	4770      	bx	lr
 8012c34:	24000184 	.word	0x24000184

08012c38 <__retarget_lock_init_recursive>:
 8012c38:	4770      	bx	lr

08012c3a <__retarget_lock_acquire_recursive>:
 8012c3a:	4770      	bx	lr

08012c3c <__retarget_lock_release_recursive>:
 8012c3c:	4770      	bx	lr

08012c3e <__ascii_mbtowc>:
 8012c3e:	b082      	sub	sp, #8
 8012c40:	b901      	cbnz	r1, 8012c44 <__ascii_mbtowc+0x6>
 8012c42:	a901      	add	r1, sp, #4
 8012c44:	b142      	cbz	r2, 8012c58 <__ascii_mbtowc+0x1a>
 8012c46:	b14b      	cbz	r3, 8012c5c <__ascii_mbtowc+0x1e>
 8012c48:	7813      	ldrb	r3, [r2, #0]
 8012c4a:	600b      	str	r3, [r1, #0]
 8012c4c:	7812      	ldrb	r2, [r2, #0]
 8012c4e:	1e10      	subs	r0, r2, #0
 8012c50:	bf18      	it	ne
 8012c52:	2001      	movne	r0, #1
 8012c54:	b002      	add	sp, #8
 8012c56:	4770      	bx	lr
 8012c58:	4610      	mov	r0, r2
 8012c5a:	e7fb      	b.n	8012c54 <__ascii_mbtowc+0x16>
 8012c5c:	f06f 0001 	mvn.w	r0, #1
 8012c60:	e7f8      	b.n	8012c54 <__ascii_mbtowc+0x16>

08012c62 <__sfputc_r>:
 8012c62:	6893      	ldr	r3, [r2, #8]
 8012c64:	3b01      	subs	r3, #1
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	b410      	push	{r4}
 8012c6a:	6093      	str	r3, [r2, #8]
 8012c6c:	da08      	bge.n	8012c80 <__sfputc_r+0x1e>
 8012c6e:	6994      	ldr	r4, [r2, #24]
 8012c70:	42a3      	cmp	r3, r4
 8012c72:	db01      	blt.n	8012c78 <__sfputc_r+0x16>
 8012c74:	290a      	cmp	r1, #10
 8012c76:	d103      	bne.n	8012c80 <__sfputc_r+0x1e>
 8012c78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012c7c:	f000 b94a 	b.w	8012f14 <__swbuf_r>
 8012c80:	6813      	ldr	r3, [r2, #0]
 8012c82:	1c58      	adds	r0, r3, #1
 8012c84:	6010      	str	r0, [r2, #0]
 8012c86:	7019      	strb	r1, [r3, #0]
 8012c88:	4608      	mov	r0, r1
 8012c8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012c8e:	4770      	bx	lr

08012c90 <__sfputs_r>:
 8012c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c92:	4606      	mov	r6, r0
 8012c94:	460f      	mov	r7, r1
 8012c96:	4614      	mov	r4, r2
 8012c98:	18d5      	adds	r5, r2, r3
 8012c9a:	42ac      	cmp	r4, r5
 8012c9c:	d101      	bne.n	8012ca2 <__sfputs_r+0x12>
 8012c9e:	2000      	movs	r0, #0
 8012ca0:	e007      	b.n	8012cb2 <__sfputs_r+0x22>
 8012ca2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012ca6:	463a      	mov	r2, r7
 8012ca8:	4630      	mov	r0, r6
 8012caa:	f7ff ffda 	bl	8012c62 <__sfputc_r>
 8012cae:	1c43      	adds	r3, r0, #1
 8012cb0:	d1f3      	bne.n	8012c9a <__sfputs_r+0xa>
 8012cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012cb4 <_vfiprintf_r>:
 8012cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cb8:	460d      	mov	r5, r1
 8012cba:	b09d      	sub	sp, #116	; 0x74
 8012cbc:	4614      	mov	r4, r2
 8012cbe:	4698      	mov	r8, r3
 8012cc0:	4606      	mov	r6, r0
 8012cc2:	b118      	cbz	r0, 8012ccc <_vfiprintf_r+0x18>
 8012cc4:	6983      	ldr	r3, [r0, #24]
 8012cc6:	b90b      	cbnz	r3, 8012ccc <_vfiprintf_r+0x18>
 8012cc8:	f000 fb14 	bl	80132f4 <__sinit>
 8012ccc:	4b89      	ldr	r3, [pc, #548]	; (8012ef4 <_vfiprintf_r+0x240>)
 8012cce:	429d      	cmp	r5, r3
 8012cd0:	d11b      	bne.n	8012d0a <_vfiprintf_r+0x56>
 8012cd2:	6875      	ldr	r5, [r6, #4]
 8012cd4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012cd6:	07d9      	lsls	r1, r3, #31
 8012cd8:	d405      	bmi.n	8012ce6 <_vfiprintf_r+0x32>
 8012cda:	89ab      	ldrh	r3, [r5, #12]
 8012cdc:	059a      	lsls	r2, r3, #22
 8012cde:	d402      	bmi.n	8012ce6 <_vfiprintf_r+0x32>
 8012ce0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012ce2:	f7ff ffaa 	bl	8012c3a <__retarget_lock_acquire_recursive>
 8012ce6:	89ab      	ldrh	r3, [r5, #12]
 8012ce8:	071b      	lsls	r3, r3, #28
 8012cea:	d501      	bpl.n	8012cf0 <_vfiprintf_r+0x3c>
 8012cec:	692b      	ldr	r3, [r5, #16]
 8012cee:	b9eb      	cbnz	r3, 8012d2c <_vfiprintf_r+0x78>
 8012cf0:	4629      	mov	r1, r5
 8012cf2:	4630      	mov	r0, r6
 8012cf4:	f000 f96e 	bl	8012fd4 <__swsetup_r>
 8012cf8:	b1c0      	cbz	r0, 8012d2c <_vfiprintf_r+0x78>
 8012cfa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012cfc:	07dc      	lsls	r4, r3, #31
 8012cfe:	d50e      	bpl.n	8012d1e <_vfiprintf_r+0x6a>
 8012d00:	f04f 30ff 	mov.w	r0, #4294967295
 8012d04:	b01d      	add	sp, #116	; 0x74
 8012d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d0a:	4b7b      	ldr	r3, [pc, #492]	; (8012ef8 <_vfiprintf_r+0x244>)
 8012d0c:	429d      	cmp	r5, r3
 8012d0e:	d101      	bne.n	8012d14 <_vfiprintf_r+0x60>
 8012d10:	68b5      	ldr	r5, [r6, #8]
 8012d12:	e7df      	b.n	8012cd4 <_vfiprintf_r+0x20>
 8012d14:	4b79      	ldr	r3, [pc, #484]	; (8012efc <_vfiprintf_r+0x248>)
 8012d16:	429d      	cmp	r5, r3
 8012d18:	bf08      	it	eq
 8012d1a:	68f5      	ldreq	r5, [r6, #12]
 8012d1c:	e7da      	b.n	8012cd4 <_vfiprintf_r+0x20>
 8012d1e:	89ab      	ldrh	r3, [r5, #12]
 8012d20:	0598      	lsls	r0, r3, #22
 8012d22:	d4ed      	bmi.n	8012d00 <_vfiprintf_r+0x4c>
 8012d24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012d26:	f7ff ff89 	bl	8012c3c <__retarget_lock_release_recursive>
 8012d2a:	e7e9      	b.n	8012d00 <_vfiprintf_r+0x4c>
 8012d2c:	2300      	movs	r3, #0
 8012d2e:	9309      	str	r3, [sp, #36]	; 0x24
 8012d30:	2320      	movs	r3, #32
 8012d32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012d36:	f8cd 800c 	str.w	r8, [sp, #12]
 8012d3a:	2330      	movs	r3, #48	; 0x30
 8012d3c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012f00 <_vfiprintf_r+0x24c>
 8012d40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012d44:	f04f 0901 	mov.w	r9, #1
 8012d48:	4623      	mov	r3, r4
 8012d4a:	469a      	mov	sl, r3
 8012d4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012d50:	b10a      	cbz	r2, 8012d56 <_vfiprintf_r+0xa2>
 8012d52:	2a25      	cmp	r2, #37	; 0x25
 8012d54:	d1f9      	bne.n	8012d4a <_vfiprintf_r+0x96>
 8012d56:	ebba 0b04 	subs.w	fp, sl, r4
 8012d5a:	d00b      	beq.n	8012d74 <_vfiprintf_r+0xc0>
 8012d5c:	465b      	mov	r3, fp
 8012d5e:	4622      	mov	r2, r4
 8012d60:	4629      	mov	r1, r5
 8012d62:	4630      	mov	r0, r6
 8012d64:	f7ff ff94 	bl	8012c90 <__sfputs_r>
 8012d68:	3001      	adds	r0, #1
 8012d6a:	f000 80aa 	beq.w	8012ec2 <_vfiprintf_r+0x20e>
 8012d6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012d70:	445a      	add	r2, fp
 8012d72:	9209      	str	r2, [sp, #36]	; 0x24
 8012d74:	f89a 3000 	ldrb.w	r3, [sl]
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	f000 80a2 	beq.w	8012ec2 <_vfiprintf_r+0x20e>
 8012d7e:	2300      	movs	r3, #0
 8012d80:	f04f 32ff 	mov.w	r2, #4294967295
 8012d84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012d88:	f10a 0a01 	add.w	sl, sl, #1
 8012d8c:	9304      	str	r3, [sp, #16]
 8012d8e:	9307      	str	r3, [sp, #28]
 8012d90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012d94:	931a      	str	r3, [sp, #104]	; 0x68
 8012d96:	4654      	mov	r4, sl
 8012d98:	2205      	movs	r2, #5
 8012d9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012d9e:	4858      	ldr	r0, [pc, #352]	; (8012f00 <_vfiprintf_r+0x24c>)
 8012da0:	f7ed faa6 	bl	80002f0 <memchr>
 8012da4:	9a04      	ldr	r2, [sp, #16]
 8012da6:	b9d8      	cbnz	r0, 8012de0 <_vfiprintf_r+0x12c>
 8012da8:	06d1      	lsls	r1, r2, #27
 8012daa:	bf44      	itt	mi
 8012dac:	2320      	movmi	r3, #32
 8012dae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012db2:	0713      	lsls	r3, r2, #28
 8012db4:	bf44      	itt	mi
 8012db6:	232b      	movmi	r3, #43	; 0x2b
 8012db8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012dbc:	f89a 3000 	ldrb.w	r3, [sl]
 8012dc0:	2b2a      	cmp	r3, #42	; 0x2a
 8012dc2:	d015      	beq.n	8012df0 <_vfiprintf_r+0x13c>
 8012dc4:	9a07      	ldr	r2, [sp, #28]
 8012dc6:	4654      	mov	r4, sl
 8012dc8:	2000      	movs	r0, #0
 8012dca:	f04f 0c0a 	mov.w	ip, #10
 8012dce:	4621      	mov	r1, r4
 8012dd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012dd4:	3b30      	subs	r3, #48	; 0x30
 8012dd6:	2b09      	cmp	r3, #9
 8012dd8:	d94e      	bls.n	8012e78 <_vfiprintf_r+0x1c4>
 8012dda:	b1b0      	cbz	r0, 8012e0a <_vfiprintf_r+0x156>
 8012ddc:	9207      	str	r2, [sp, #28]
 8012dde:	e014      	b.n	8012e0a <_vfiprintf_r+0x156>
 8012de0:	eba0 0308 	sub.w	r3, r0, r8
 8012de4:	fa09 f303 	lsl.w	r3, r9, r3
 8012de8:	4313      	orrs	r3, r2
 8012dea:	9304      	str	r3, [sp, #16]
 8012dec:	46a2      	mov	sl, r4
 8012dee:	e7d2      	b.n	8012d96 <_vfiprintf_r+0xe2>
 8012df0:	9b03      	ldr	r3, [sp, #12]
 8012df2:	1d19      	adds	r1, r3, #4
 8012df4:	681b      	ldr	r3, [r3, #0]
 8012df6:	9103      	str	r1, [sp, #12]
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	bfbb      	ittet	lt
 8012dfc:	425b      	neglt	r3, r3
 8012dfe:	f042 0202 	orrlt.w	r2, r2, #2
 8012e02:	9307      	strge	r3, [sp, #28]
 8012e04:	9307      	strlt	r3, [sp, #28]
 8012e06:	bfb8      	it	lt
 8012e08:	9204      	strlt	r2, [sp, #16]
 8012e0a:	7823      	ldrb	r3, [r4, #0]
 8012e0c:	2b2e      	cmp	r3, #46	; 0x2e
 8012e0e:	d10c      	bne.n	8012e2a <_vfiprintf_r+0x176>
 8012e10:	7863      	ldrb	r3, [r4, #1]
 8012e12:	2b2a      	cmp	r3, #42	; 0x2a
 8012e14:	d135      	bne.n	8012e82 <_vfiprintf_r+0x1ce>
 8012e16:	9b03      	ldr	r3, [sp, #12]
 8012e18:	1d1a      	adds	r2, r3, #4
 8012e1a:	681b      	ldr	r3, [r3, #0]
 8012e1c:	9203      	str	r2, [sp, #12]
 8012e1e:	2b00      	cmp	r3, #0
 8012e20:	bfb8      	it	lt
 8012e22:	f04f 33ff 	movlt.w	r3, #4294967295
 8012e26:	3402      	adds	r4, #2
 8012e28:	9305      	str	r3, [sp, #20]
 8012e2a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012f10 <_vfiprintf_r+0x25c>
 8012e2e:	7821      	ldrb	r1, [r4, #0]
 8012e30:	2203      	movs	r2, #3
 8012e32:	4650      	mov	r0, sl
 8012e34:	f7ed fa5c 	bl	80002f0 <memchr>
 8012e38:	b140      	cbz	r0, 8012e4c <_vfiprintf_r+0x198>
 8012e3a:	2340      	movs	r3, #64	; 0x40
 8012e3c:	eba0 000a 	sub.w	r0, r0, sl
 8012e40:	fa03 f000 	lsl.w	r0, r3, r0
 8012e44:	9b04      	ldr	r3, [sp, #16]
 8012e46:	4303      	orrs	r3, r0
 8012e48:	3401      	adds	r4, #1
 8012e4a:	9304      	str	r3, [sp, #16]
 8012e4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012e50:	482c      	ldr	r0, [pc, #176]	; (8012f04 <_vfiprintf_r+0x250>)
 8012e52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012e56:	2206      	movs	r2, #6
 8012e58:	f7ed fa4a 	bl	80002f0 <memchr>
 8012e5c:	2800      	cmp	r0, #0
 8012e5e:	d03f      	beq.n	8012ee0 <_vfiprintf_r+0x22c>
 8012e60:	4b29      	ldr	r3, [pc, #164]	; (8012f08 <_vfiprintf_r+0x254>)
 8012e62:	bb1b      	cbnz	r3, 8012eac <_vfiprintf_r+0x1f8>
 8012e64:	9b03      	ldr	r3, [sp, #12]
 8012e66:	3307      	adds	r3, #7
 8012e68:	f023 0307 	bic.w	r3, r3, #7
 8012e6c:	3308      	adds	r3, #8
 8012e6e:	9303      	str	r3, [sp, #12]
 8012e70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e72:	443b      	add	r3, r7
 8012e74:	9309      	str	r3, [sp, #36]	; 0x24
 8012e76:	e767      	b.n	8012d48 <_vfiprintf_r+0x94>
 8012e78:	fb0c 3202 	mla	r2, ip, r2, r3
 8012e7c:	460c      	mov	r4, r1
 8012e7e:	2001      	movs	r0, #1
 8012e80:	e7a5      	b.n	8012dce <_vfiprintf_r+0x11a>
 8012e82:	2300      	movs	r3, #0
 8012e84:	3401      	adds	r4, #1
 8012e86:	9305      	str	r3, [sp, #20]
 8012e88:	4619      	mov	r1, r3
 8012e8a:	f04f 0c0a 	mov.w	ip, #10
 8012e8e:	4620      	mov	r0, r4
 8012e90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012e94:	3a30      	subs	r2, #48	; 0x30
 8012e96:	2a09      	cmp	r2, #9
 8012e98:	d903      	bls.n	8012ea2 <_vfiprintf_r+0x1ee>
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	d0c5      	beq.n	8012e2a <_vfiprintf_r+0x176>
 8012e9e:	9105      	str	r1, [sp, #20]
 8012ea0:	e7c3      	b.n	8012e2a <_vfiprintf_r+0x176>
 8012ea2:	fb0c 2101 	mla	r1, ip, r1, r2
 8012ea6:	4604      	mov	r4, r0
 8012ea8:	2301      	movs	r3, #1
 8012eaa:	e7f0      	b.n	8012e8e <_vfiprintf_r+0x1da>
 8012eac:	ab03      	add	r3, sp, #12
 8012eae:	9300      	str	r3, [sp, #0]
 8012eb0:	462a      	mov	r2, r5
 8012eb2:	4b16      	ldr	r3, [pc, #88]	; (8012f0c <_vfiprintf_r+0x258>)
 8012eb4:	a904      	add	r1, sp, #16
 8012eb6:	4630      	mov	r0, r6
 8012eb8:	f7fe f926 	bl	8011108 <_printf_float>
 8012ebc:	4607      	mov	r7, r0
 8012ebe:	1c78      	adds	r0, r7, #1
 8012ec0:	d1d6      	bne.n	8012e70 <_vfiprintf_r+0x1bc>
 8012ec2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012ec4:	07d9      	lsls	r1, r3, #31
 8012ec6:	d405      	bmi.n	8012ed4 <_vfiprintf_r+0x220>
 8012ec8:	89ab      	ldrh	r3, [r5, #12]
 8012eca:	059a      	lsls	r2, r3, #22
 8012ecc:	d402      	bmi.n	8012ed4 <_vfiprintf_r+0x220>
 8012ece:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012ed0:	f7ff feb4 	bl	8012c3c <__retarget_lock_release_recursive>
 8012ed4:	89ab      	ldrh	r3, [r5, #12]
 8012ed6:	065b      	lsls	r3, r3, #25
 8012ed8:	f53f af12 	bmi.w	8012d00 <_vfiprintf_r+0x4c>
 8012edc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012ede:	e711      	b.n	8012d04 <_vfiprintf_r+0x50>
 8012ee0:	ab03      	add	r3, sp, #12
 8012ee2:	9300      	str	r3, [sp, #0]
 8012ee4:	462a      	mov	r2, r5
 8012ee6:	4b09      	ldr	r3, [pc, #36]	; (8012f0c <_vfiprintf_r+0x258>)
 8012ee8:	a904      	add	r1, sp, #16
 8012eea:	4630      	mov	r0, r6
 8012eec:	f7fe fb98 	bl	8011620 <_printf_i>
 8012ef0:	e7e4      	b.n	8012ebc <_vfiprintf_r+0x208>
 8012ef2:	bf00      	nop
 8012ef4:	08013c14 	.word	0x08013c14
 8012ef8:	08013c34 	.word	0x08013c34
 8012efc:	08013bf4 	.word	0x08013bf4
 8012f00:	08013ae2 	.word	0x08013ae2
 8012f04:	08013aec 	.word	0x08013aec
 8012f08:	08011109 	.word	0x08011109
 8012f0c:	08012c91 	.word	0x08012c91
 8012f10:	08013ae8 	.word	0x08013ae8

08012f14 <__swbuf_r>:
 8012f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f16:	460e      	mov	r6, r1
 8012f18:	4614      	mov	r4, r2
 8012f1a:	4605      	mov	r5, r0
 8012f1c:	b118      	cbz	r0, 8012f26 <__swbuf_r+0x12>
 8012f1e:	6983      	ldr	r3, [r0, #24]
 8012f20:	b90b      	cbnz	r3, 8012f26 <__swbuf_r+0x12>
 8012f22:	f000 f9e7 	bl	80132f4 <__sinit>
 8012f26:	4b21      	ldr	r3, [pc, #132]	; (8012fac <__swbuf_r+0x98>)
 8012f28:	429c      	cmp	r4, r3
 8012f2a:	d12b      	bne.n	8012f84 <__swbuf_r+0x70>
 8012f2c:	686c      	ldr	r4, [r5, #4]
 8012f2e:	69a3      	ldr	r3, [r4, #24]
 8012f30:	60a3      	str	r3, [r4, #8]
 8012f32:	89a3      	ldrh	r3, [r4, #12]
 8012f34:	071a      	lsls	r2, r3, #28
 8012f36:	d52f      	bpl.n	8012f98 <__swbuf_r+0x84>
 8012f38:	6923      	ldr	r3, [r4, #16]
 8012f3a:	b36b      	cbz	r3, 8012f98 <__swbuf_r+0x84>
 8012f3c:	6923      	ldr	r3, [r4, #16]
 8012f3e:	6820      	ldr	r0, [r4, #0]
 8012f40:	1ac0      	subs	r0, r0, r3
 8012f42:	6963      	ldr	r3, [r4, #20]
 8012f44:	b2f6      	uxtb	r6, r6
 8012f46:	4283      	cmp	r3, r0
 8012f48:	4637      	mov	r7, r6
 8012f4a:	dc04      	bgt.n	8012f56 <__swbuf_r+0x42>
 8012f4c:	4621      	mov	r1, r4
 8012f4e:	4628      	mov	r0, r5
 8012f50:	f000 f93c 	bl	80131cc <_fflush_r>
 8012f54:	bb30      	cbnz	r0, 8012fa4 <__swbuf_r+0x90>
 8012f56:	68a3      	ldr	r3, [r4, #8]
 8012f58:	3b01      	subs	r3, #1
 8012f5a:	60a3      	str	r3, [r4, #8]
 8012f5c:	6823      	ldr	r3, [r4, #0]
 8012f5e:	1c5a      	adds	r2, r3, #1
 8012f60:	6022      	str	r2, [r4, #0]
 8012f62:	701e      	strb	r6, [r3, #0]
 8012f64:	6963      	ldr	r3, [r4, #20]
 8012f66:	3001      	adds	r0, #1
 8012f68:	4283      	cmp	r3, r0
 8012f6a:	d004      	beq.n	8012f76 <__swbuf_r+0x62>
 8012f6c:	89a3      	ldrh	r3, [r4, #12]
 8012f6e:	07db      	lsls	r3, r3, #31
 8012f70:	d506      	bpl.n	8012f80 <__swbuf_r+0x6c>
 8012f72:	2e0a      	cmp	r6, #10
 8012f74:	d104      	bne.n	8012f80 <__swbuf_r+0x6c>
 8012f76:	4621      	mov	r1, r4
 8012f78:	4628      	mov	r0, r5
 8012f7a:	f000 f927 	bl	80131cc <_fflush_r>
 8012f7e:	b988      	cbnz	r0, 8012fa4 <__swbuf_r+0x90>
 8012f80:	4638      	mov	r0, r7
 8012f82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012f84:	4b0a      	ldr	r3, [pc, #40]	; (8012fb0 <__swbuf_r+0x9c>)
 8012f86:	429c      	cmp	r4, r3
 8012f88:	d101      	bne.n	8012f8e <__swbuf_r+0x7a>
 8012f8a:	68ac      	ldr	r4, [r5, #8]
 8012f8c:	e7cf      	b.n	8012f2e <__swbuf_r+0x1a>
 8012f8e:	4b09      	ldr	r3, [pc, #36]	; (8012fb4 <__swbuf_r+0xa0>)
 8012f90:	429c      	cmp	r4, r3
 8012f92:	bf08      	it	eq
 8012f94:	68ec      	ldreq	r4, [r5, #12]
 8012f96:	e7ca      	b.n	8012f2e <__swbuf_r+0x1a>
 8012f98:	4621      	mov	r1, r4
 8012f9a:	4628      	mov	r0, r5
 8012f9c:	f000 f81a 	bl	8012fd4 <__swsetup_r>
 8012fa0:	2800      	cmp	r0, #0
 8012fa2:	d0cb      	beq.n	8012f3c <__swbuf_r+0x28>
 8012fa4:	f04f 37ff 	mov.w	r7, #4294967295
 8012fa8:	e7ea      	b.n	8012f80 <__swbuf_r+0x6c>
 8012faa:	bf00      	nop
 8012fac:	08013c14 	.word	0x08013c14
 8012fb0:	08013c34 	.word	0x08013c34
 8012fb4:	08013bf4 	.word	0x08013bf4

08012fb8 <__ascii_wctomb>:
 8012fb8:	b149      	cbz	r1, 8012fce <__ascii_wctomb+0x16>
 8012fba:	2aff      	cmp	r2, #255	; 0xff
 8012fbc:	bf85      	ittet	hi
 8012fbe:	238a      	movhi	r3, #138	; 0x8a
 8012fc0:	6003      	strhi	r3, [r0, #0]
 8012fc2:	700a      	strbls	r2, [r1, #0]
 8012fc4:	f04f 30ff 	movhi.w	r0, #4294967295
 8012fc8:	bf98      	it	ls
 8012fca:	2001      	movls	r0, #1
 8012fcc:	4770      	bx	lr
 8012fce:	4608      	mov	r0, r1
 8012fd0:	4770      	bx	lr
	...

08012fd4 <__swsetup_r>:
 8012fd4:	4b32      	ldr	r3, [pc, #200]	; (80130a0 <__swsetup_r+0xcc>)
 8012fd6:	b570      	push	{r4, r5, r6, lr}
 8012fd8:	681d      	ldr	r5, [r3, #0]
 8012fda:	4606      	mov	r6, r0
 8012fdc:	460c      	mov	r4, r1
 8012fde:	b125      	cbz	r5, 8012fea <__swsetup_r+0x16>
 8012fe0:	69ab      	ldr	r3, [r5, #24]
 8012fe2:	b913      	cbnz	r3, 8012fea <__swsetup_r+0x16>
 8012fe4:	4628      	mov	r0, r5
 8012fe6:	f000 f985 	bl	80132f4 <__sinit>
 8012fea:	4b2e      	ldr	r3, [pc, #184]	; (80130a4 <__swsetup_r+0xd0>)
 8012fec:	429c      	cmp	r4, r3
 8012fee:	d10f      	bne.n	8013010 <__swsetup_r+0x3c>
 8012ff0:	686c      	ldr	r4, [r5, #4]
 8012ff2:	89a3      	ldrh	r3, [r4, #12]
 8012ff4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012ff8:	0719      	lsls	r1, r3, #28
 8012ffa:	d42c      	bmi.n	8013056 <__swsetup_r+0x82>
 8012ffc:	06dd      	lsls	r5, r3, #27
 8012ffe:	d411      	bmi.n	8013024 <__swsetup_r+0x50>
 8013000:	2309      	movs	r3, #9
 8013002:	6033      	str	r3, [r6, #0]
 8013004:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013008:	81a3      	strh	r3, [r4, #12]
 801300a:	f04f 30ff 	mov.w	r0, #4294967295
 801300e:	e03e      	b.n	801308e <__swsetup_r+0xba>
 8013010:	4b25      	ldr	r3, [pc, #148]	; (80130a8 <__swsetup_r+0xd4>)
 8013012:	429c      	cmp	r4, r3
 8013014:	d101      	bne.n	801301a <__swsetup_r+0x46>
 8013016:	68ac      	ldr	r4, [r5, #8]
 8013018:	e7eb      	b.n	8012ff2 <__swsetup_r+0x1e>
 801301a:	4b24      	ldr	r3, [pc, #144]	; (80130ac <__swsetup_r+0xd8>)
 801301c:	429c      	cmp	r4, r3
 801301e:	bf08      	it	eq
 8013020:	68ec      	ldreq	r4, [r5, #12]
 8013022:	e7e6      	b.n	8012ff2 <__swsetup_r+0x1e>
 8013024:	0758      	lsls	r0, r3, #29
 8013026:	d512      	bpl.n	801304e <__swsetup_r+0x7a>
 8013028:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801302a:	b141      	cbz	r1, 801303e <__swsetup_r+0x6a>
 801302c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013030:	4299      	cmp	r1, r3
 8013032:	d002      	beq.n	801303a <__swsetup_r+0x66>
 8013034:	4630      	mov	r0, r6
 8013036:	f7fd fef7 	bl	8010e28 <_free_r>
 801303a:	2300      	movs	r3, #0
 801303c:	6363      	str	r3, [r4, #52]	; 0x34
 801303e:	89a3      	ldrh	r3, [r4, #12]
 8013040:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013044:	81a3      	strh	r3, [r4, #12]
 8013046:	2300      	movs	r3, #0
 8013048:	6063      	str	r3, [r4, #4]
 801304a:	6923      	ldr	r3, [r4, #16]
 801304c:	6023      	str	r3, [r4, #0]
 801304e:	89a3      	ldrh	r3, [r4, #12]
 8013050:	f043 0308 	orr.w	r3, r3, #8
 8013054:	81a3      	strh	r3, [r4, #12]
 8013056:	6923      	ldr	r3, [r4, #16]
 8013058:	b94b      	cbnz	r3, 801306e <__swsetup_r+0x9a>
 801305a:	89a3      	ldrh	r3, [r4, #12]
 801305c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013060:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013064:	d003      	beq.n	801306e <__swsetup_r+0x9a>
 8013066:	4621      	mov	r1, r4
 8013068:	4630      	mov	r0, r6
 801306a:	f000 fa05 	bl	8013478 <__smakebuf_r>
 801306e:	89a0      	ldrh	r0, [r4, #12]
 8013070:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013074:	f010 0301 	ands.w	r3, r0, #1
 8013078:	d00a      	beq.n	8013090 <__swsetup_r+0xbc>
 801307a:	2300      	movs	r3, #0
 801307c:	60a3      	str	r3, [r4, #8]
 801307e:	6963      	ldr	r3, [r4, #20]
 8013080:	425b      	negs	r3, r3
 8013082:	61a3      	str	r3, [r4, #24]
 8013084:	6923      	ldr	r3, [r4, #16]
 8013086:	b943      	cbnz	r3, 801309a <__swsetup_r+0xc6>
 8013088:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801308c:	d1ba      	bne.n	8013004 <__swsetup_r+0x30>
 801308e:	bd70      	pop	{r4, r5, r6, pc}
 8013090:	0781      	lsls	r1, r0, #30
 8013092:	bf58      	it	pl
 8013094:	6963      	ldrpl	r3, [r4, #20]
 8013096:	60a3      	str	r3, [r4, #8]
 8013098:	e7f4      	b.n	8013084 <__swsetup_r+0xb0>
 801309a:	2000      	movs	r0, #0
 801309c:	e7f7      	b.n	801308e <__swsetup_r+0xba>
 801309e:	bf00      	nop
 80130a0:	24000184 	.word	0x24000184
 80130a4:	08013c14 	.word	0x08013c14
 80130a8:	08013c34 	.word	0x08013c34
 80130ac:	08013bf4 	.word	0x08013bf4

080130b0 <abort>:
 80130b0:	b508      	push	{r3, lr}
 80130b2:	2006      	movs	r0, #6
 80130b4:	f000 fa48 	bl	8013548 <raise>
 80130b8:	2001      	movs	r0, #1
 80130ba:	f7ee fa1f 	bl	80014fc <_exit>
	...

080130c0 <__sflush_r>:
 80130c0:	898a      	ldrh	r2, [r1, #12]
 80130c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80130c6:	4605      	mov	r5, r0
 80130c8:	0710      	lsls	r0, r2, #28
 80130ca:	460c      	mov	r4, r1
 80130cc:	d458      	bmi.n	8013180 <__sflush_r+0xc0>
 80130ce:	684b      	ldr	r3, [r1, #4]
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	dc05      	bgt.n	80130e0 <__sflush_r+0x20>
 80130d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	dc02      	bgt.n	80130e0 <__sflush_r+0x20>
 80130da:	2000      	movs	r0, #0
 80130dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80130e2:	2e00      	cmp	r6, #0
 80130e4:	d0f9      	beq.n	80130da <__sflush_r+0x1a>
 80130e6:	2300      	movs	r3, #0
 80130e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80130ec:	682f      	ldr	r7, [r5, #0]
 80130ee:	602b      	str	r3, [r5, #0]
 80130f0:	d032      	beq.n	8013158 <__sflush_r+0x98>
 80130f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80130f4:	89a3      	ldrh	r3, [r4, #12]
 80130f6:	075a      	lsls	r2, r3, #29
 80130f8:	d505      	bpl.n	8013106 <__sflush_r+0x46>
 80130fa:	6863      	ldr	r3, [r4, #4]
 80130fc:	1ac0      	subs	r0, r0, r3
 80130fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013100:	b10b      	cbz	r3, 8013106 <__sflush_r+0x46>
 8013102:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013104:	1ac0      	subs	r0, r0, r3
 8013106:	2300      	movs	r3, #0
 8013108:	4602      	mov	r2, r0
 801310a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801310c:	6a21      	ldr	r1, [r4, #32]
 801310e:	4628      	mov	r0, r5
 8013110:	47b0      	blx	r6
 8013112:	1c43      	adds	r3, r0, #1
 8013114:	89a3      	ldrh	r3, [r4, #12]
 8013116:	d106      	bne.n	8013126 <__sflush_r+0x66>
 8013118:	6829      	ldr	r1, [r5, #0]
 801311a:	291d      	cmp	r1, #29
 801311c:	d82c      	bhi.n	8013178 <__sflush_r+0xb8>
 801311e:	4a2a      	ldr	r2, [pc, #168]	; (80131c8 <__sflush_r+0x108>)
 8013120:	40ca      	lsrs	r2, r1
 8013122:	07d6      	lsls	r6, r2, #31
 8013124:	d528      	bpl.n	8013178 <__sflush_r+0xb8>
 8013126:	2200      	movs	r2, #0
 8013128:	6062      	str	r2, [r4, #4]
 801312a:	04d9      	lsls	r1, r3, #19
 801312c:	6922      	ldr	r2, [r4, #16]
 801312e:	6022      	str	r2, [r4, #0]
 8013130:	d504      	bpl.n	801313c <__sflush_r+0x7c>
 8013132:	1c42      	adds	r2, r0, #1
 8013134:	d101      	bne.n	801313a <__sflush_r+0x7a>
 8013136:	682b      	ldr	r3, [r5, #0]
 8013138:	b903      	cbnz	r3, 801313c <__sflush_r+0x7c>
 801313a:	6560      	str	r0, [r4, #84]	; 0x54
 801313c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801313e:	602f      	str	r7, [r5, #0]
 8013140:	2900      	cmp	r1, #0
 8013142:	d0ca      	beq.n	80130da <__sflush_r+0x1a>
 8013144:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013148:	4299      	cmp	r1, r3
 801314a:	d002      	beq.n	8013152 <__sflush_r+0x92>
 801314c:	4628      	mov	r0, r5
 801314e:	f7fd fe6b 	bl	8010e28 <_free_r>
 8013152:	2000      	movs	r0, #0
 8013154:	6360      	str	r0, [r4, #52]	; 0x34
 8013156:	e7c1      	b.n	80130dc <__sflush_r+0x1c>
 8013158:	6a21      	ldr	r1, [r4, #32]
 801315a:	2301      	movs	r3, #1
 801315c:	4628      	mov	r0, r5
 801315e:	47b0      	blx	r6
 8013160:	1c41      	adds	r1, r0, #1
 8013162:	d1c7      	bne.n	80130f4 <__sflush_r+0x34>
 8013164:	682b      	ldr	r3, [r5, #0]
 8013166:	2b00      	cmp	r3, #0
 8013168:	d0c4      	beq.n	80130f4 <__sflush_r+0x34>
 801316a:	2b1d      	cmp	r3, #29
 801316c:	d001      	beq.n	8013172 <__sflush_r+0xb2>
 801316e:	2b16      	cmp	r3, #22
 8013170:	d101      	bne.n	8013176 <__sflush_r+0xb6>
 8013172:	602f      	str	r7, [r5, #0]
 8013174:	e7b1      	b.n	80130da <__sflush_r+0x1a>
 8013176:	89a3      	ldrh	r3, [r4, #12]
 8013178:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801317c:	81a3      	strh	r3, [r4, #12]
 801317e:	e7ad      	b.n	80130dc <__sflush_r+0x1c>
 8013180:	690f      	ldr	r7, [r1, #16]
 8013182:	2f00      	cmp	r7, #0
 8013184:	d0a9      	beq.n	80130da <__sflush_r+0x1a>
 8013186:	0793      	lsls	r3, r2, #30
 8013188:	680e      	ldr	r6, [r1, #0]
 801318a:	bf08      	it	eq
 801318c:	694b      	ldreq	r3, [r1, #20]
 801318e:	600f      	str	r7, [r1, #0]
 8013190:	bf18      	it	ne
 8013192:	2300      	movne	r3, #0
 8013194:	eba6 0807 	sub.w	r8, r6, r7
 8013198:	608b      	str	r3, [r1, #8]
 801319a:	f1b8 0f00 	cmp.w	r8, #0
 801319e:	dd9c      	ble.n	80130da <__sflush_r+0x1a>
 80131a0:	6a21      	ldr	r1, [r4, #32]
 80131a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80131a4:	4643      	mov	r3, r8
 80131a6:	463a      	mov	r2, r7
 80131a8:	4628      	mov	r0, r5
 80131aa:	47b0      	blx	r6
 80131ac:	2800      	cmp	r0, #0
 80131ae:	dc06      	bgt.n	80131be <__sflush_r+0xfe>
 80131b0:	89a3      	ldrh	r3, [r4, #12]
 80131b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80131b6:	81a3      	strh	r3, [r4, #12]
 80131b8:	f04f 30ff 	mov.w	r0, #4294967295
 80131bc:	e78e      	b.n	80130dc <__sflush_r+0x1c>
 80131be:	4407      	add	r7, r0
 80131c0:	eba8 0800 	sub.w	r8, r8, r0
 80131c4:	e7e9      	b.n	801319a <__sflush_r+0xda>
 80131c6:	bf00      	nop
 80131c8:	20400001 	.word	0x20400001

080131cc <_fflush_r>:
 80131cc:	b538      	push	{r3, r4, r5, lr}
 80131ce:	690b      	ldr	r3, [r1, #16]
 80131d0:	4605      	mov	r5, r0
 80131d2:	460c      	mov	r4, r1
 80131d4:	b913      	cbnz	r3, 80131dc <_fflush_r+0x10>
 80131d6:	2500      	movs	r5, #0
 80131d8:	4628      	mov	r0, r5
 80131da:	bd38      	pop	{r3, r4, r5, pc}
 80131dc:	b118      	cbz	r0, 80131e6 <_fflush_r+0x1a>
 80131de:	6983      	ldr	r3, [r0, #24]
 80131e0:	b90b      	cbnz	r3, 80131e6 <_fflush_r+0x1a>
 80131e2:	f000 f887 	bl	80132f4 <__sinit>
 80131e6:	4b14      	ldr	r3, [pc, #80]	; (8013238 <_fflush_r+0x6c>)
 80131e8:	429c      	cmp	r4, r3
 80131ea:	d11b      	bne.n	8013224 <_fflush_r+0x58>
 80131ec:	686c      	ldr	r4, [r5, #4]
 80131ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d0ef      	beq.n	80131d6 <_fflush_r+0xa>
 80131f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80131f8:	07d0      	lsls	r0, r2, #31
 80131fa:	d404      	bmi.n	8013206 <_fflush_r+0x3a>
 80131fc:	0599      	lsls	r1, r3, #22
 80131fe:	d402      	bmi.n	8013206 <_fflush_r+0x3a>
 8013200:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013202:	f7ff fd1a 	bl	8012c3a <__retarget_lock_acquire_recursive>
 8013206:	4628      	mov	r0, r5
 8013208:	4621      	mov	r1, r4
 801320a:	f7ff ff59 	bl	80130c0 <__sflush_r>
 801320e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013210:	07da      	lsls	r2, r3, #31
 8013212:	4605      	mov	r5, r0
 8013214:	d4e0      	bmi.n	80131d8 <_fflush_r+0xc>
 8013216:	89a3      	ldrh	r3, [r4, #12]
 8013218:	059b      	lsls	r3, r3, #22
 801321a:	d4dd      	bmi.n	80131d8 <_fflush_r+0xc>
 801321c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801321e:	f7ff fd0d 	bl	8012c3c <__retarget_lock_release_recursive>
 8013222:	e7d9      	b.n	80131d8 <_fflush_r+0xc>
 8013224:	4b05      	ldr	r3, [pc, #20]	; (801323c <_fflush_r+0x70>)
 8013226:	429c      	cmp	r4, r3
 8013228:	d101      	bne.n	801322e <_fflush_r+0x62>
 801322a:	68ac      	ldr	r4, [r5, #8]
 801322c:	e7df      	b.n	80131ee <_fflush_r+0x22>
 801322e:	4b04      	ldr	r3, [pc, #16]	; (8013240 <_fflush_r+0x74>)
 8013230:	429c      	cmp	r4, r3
 8013232:	bf08      	it	eq
 8013234:	68ec      	ldreq	r4, [r5, #12]
 8013236:	e7da      	b.n	80131ee <_fflush_r+0x22>
 8013238:	08013c14 	.word	0x08013c14
 801323c:	08013c34 	.word	0x08013c34
 8013240:	08013bf4 	.word	0x08013bf4

08013244 <std>:
 8013244:	2300      	movs	r3, #0
 8013246:	b510      	push	{r4, lr}
 8013248:	4604      	mov	r4, r0
 801324a:	e9c0 3300 	strd	r3, r3, [r0]
 801324e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013252:	6083      	str	r3, [r0, #8]
 8013254:	8181      	strh	r1, [r0, #12]
 8013256:	6643      	str	r3, [r0, #100]	; 0x64
 8013258:	81c2      	strh	r2, [r0, #14]
 801325a:	6183      	str	r3, [r0, #24]
 801325c:	4619      	mov	r1, r3
 801325e:	2208      	movs	r2, #8
 8013260:	305c      	adds	r0, #92	; 0x5c
 8013262:	f7fd fdd9 	bl	8010e18 <memset>
 8013266:	4b05      	ldr	r3, [pc, #20]	; (801327c <std+0x38>)
 8013268:	6263      	str	r3, [r4, #36]	; 0x24
 801326a:	4b05      	ldr	r3, [pc, #20]	; (8013280 <std+0x3c>)
 801326c:	62a3      	str	r3, [r4, #40]	; 0x28
 801326e:	4b05      	ldr	r3, [pc, #20]	; (8013284 <std+0x40>)
 8013270:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013272:	4b05      	ldr	r3, [pc, #20]	; (8013288 <std+0x44>)
 8013274:	6224      	str	r4, [r4, #32]
 8013276:	6323      	str	r3, [r4, #48]	; 0x30
 8013278:	bd10      	pop	{r4, pc}
 801327a:	bf00      	nop
 801327c:	08013581 	.word	0x08013581
 8013280:	080135a3 	.word	0x080135a3
 8013284:	080135db 	.word	0x080135db
 8013288:	080135ff 	.word	0x080135ff

0801328c <_cleanup_r>:
 801328c:	4901      	ldr	r1, [pc, #4]	; (8013294 <_cleanup_r+0x8>)
 801328e:	f000 b8af 	b.w	80133f0 <_fwalk_reent>
 8013292:	bf00      	nop
 8013294:	080131cd 	.word	0x080131cd

08013298 <__sfmoreglue>:
 8013298:	b570      	push	{r4, r5, r6, lr}
 801329a:	2268      	movs	r2, #104	; 0x68
 801329c:	1e4d      	subs	r5, r1, #1
 801329e:	4355      	muls	r5, r2
 80132a0:	460e      	mov	r6, r1
 80132a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80132a6:	f7fd fe2b 	bl	8010f00 <_malloc_r>
 80132aa:	4604      	mov	r4, r0
 80132ac:	b140      	cbz	r0, 80132c0 <__sfmoreglue+0x28>
 80132ae:	2100      	movs	r1, #0
 80132b0:	e9c0 1600 	strd	r1, r6, [r0]
 80132b4:	300c      	adds	r0, #12
 80132b6:	60a0      	str	r0, [r4, #8]
 80132b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80132bc:	f7fd fdac 	bl	8010e18 <memset>
 80132c0:	4620      	mov	r0, r4
 80132c2:	bd70      	pop	{r4, r5, r6, pc}

080132c4 <__sfp_lock_acquire>:
 80132c4:	4801      	ldr	r0, [pc, #4]	; (80132cc <__sfp_lock_acquire+0x8>)
 80132c6:	f7ff bcb8 	b.w	8012c3a <__retarget_lock_acquire_recursive>
 80132ca:	bf00      	nop
 80132cc:	2400204d 	.word	0x2400204d

080132d0 <__sfp_lock_release>:
 80132d0:	4801      	ldr	r0, [pc, #4]	; (80132d8 <__sfp_lock_release+0x8>)
 80132d2:	f7ff bcb3 	b.w	8012c3c <__retarget_lock_release_recursive>
 80132d6:	bf00      	nop
 80132d8:	2400204d 	.word	0x2400204d

080132dc <__sinit_lock_acquire>:
 80132dc:	4801      	ldr	r0, [pc, #4]	; (80132e4 <__sinit_lock_acquire+0x8>)
 80132de:	f7ff bcac 	b.w	8012c3a <__retarget_lock_acquire_recursive>
 80132e2:	bf00      	nop
 80132e4:	2400204e 	.word	0x2400204e

080132e8 <__sinit_lock_release>:
 80132e8:	4801      	ldr	r0, [pc, #4]	; (80132f0 <__sinit_lock_release+0x8>)
 80132ea:	f7ff bca7 	b.w	8012c3c <__retarget_lock_release_recursive>
 80132ee:	bf00      	nop
 80132f0:	2400204e 	.word	0x2400204e

080132f4 <__sinit>:
 80132f4:	b510      	push	{r4, lr}
 80132f6:	4604      	mov	r4, r0
 80132f8:	f7ff fff0 	bl	80132dc <__sinit_lock_acquire>
 80132fc:	69a3      	ldr	r3, [r4, #24]
 80132fe:	b11b      	cbz	r3, 8013308 <__sinit+0x14>
 8013300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013304:	f7ff bff0 	b.w	80132e8 <__sinit_lock_release>
 8013308:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801330c:	6523      	str	r3, [r4, #80]	; 0x50
 801330e:	4b13      	ldr	r3, [pc, #76]	; (801335c <__sinit+0x68>)
 8013310:	4a13      	ldr	r2, [pc, #76]	; (8013360 <__sinit+0x6c>)
 8013312:	681b      	ldr	r3, [r3, #0]
 8013314:	62a2      	str	r2, [r4, #40]	; 0x28
 8013316:	42a3      	cmp	r3, r4
 8013318:	bf04      	itt	eq
 801331a:	2301      	moveq	r3, #1
 801331c:	61a3      	streq	r3, [r4, #24]
 801331e:	4620      	mov	r0, r4
 8013320:	f000 f820 	bl	8013364 <__sfp>
 8013324:	6060      	str	r0, [r4, #4]
 8013326:	4620      	mov	r0, r4
 8013328:	f000 f81c 	bl	8013364 <__sfp>
 801332c:	60a0      	str	r0, [r4, #8]
 801332e:	4620      	mov	r0, r4
 8013330:	f000 f818 	bl	8013364 <__sfp>
 8013334:	2200      	movs	r2, #0
 8013336:	60e0      	str	r0, [r4, #12]
 8013338:	2104      	movs	r1, #4
 801333a:	6860      	ldr	r0, [r4, #4]
 801333c:	f7ff ff82 	bl	8013244 <std>
 8013340:	68a0      	ldr	r0, [r4, #8]
 8013342:	2201      	movs	r2, #1
 8013344:	2109      	movs	r1, #9
 8013346:	f7ff ff7d 	bl	8013244 <std>
 801334a:	68e0      	ldr	r0, [r4, #12]
 801334c:	2202      	movs	r2, #2
 801334e:	2112      	movs	r1, #18
 8013350:	f7ff ff78 	bl	8013244 <std>
 8013354:	2301      	movs	r3, #1
 8013356:	61a3      	str	r3, [r4, #24]
 8013358:	e7d2      	b.n	8013300 <__sinit+0xc>
 801335a:	bf00      	nop
 801335c:	08013878 	.word	0x08013878
 8013360:	0801328d 	.word	0x0801328d

08013364 <__sfp>:
 8013364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013366:	4607      	mov	r7, r0
 8013368:	f7ff ffac 	bl	80132c4 <__sfp_lock_acquire>
 801336c:	4b1e      	ldr	r3, [pc, #120]	; (80133e8 <__sfp+0x84>)
 801336e:	681e      	ldr	r6, [r3, #0]
 8013370:	69b3      	ldr	r3, [r6, #24]
 8013372:	b913      	cbnz	r3, 801337a <__sfp+0x16>
 8013374:	4630      	mov	r0, r6
 8013376:	f7ff ffbd 	bl	80132f4 <__sinit>
 801337a:	3648      	adds	r6, #72	; 0x48
 801337c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013380:	3b01      	subs	r3, #1
 8013382:	d503      	bpl.n	801338c <__sfp+0x28>
 8013384:	6833      	ldr	r3, [r6, #0]
 8013386:	b30b      	cbz	r3, 80133cc <__sfp+0x68>
 8013388:	6836      	ldr	r6, [r6, #0]
 801338a:	e7f7      	b.n	801337c <__sfp+0x18>
 801338c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013390:	b9d5      	cbnz	r5, 80133c8 <__sfp+0x64>
 8013392:	4b16      	ldr	r3, [pc, #88]	; (80133ec <__sfp+0x88>)
 8013394:	60e3      	str	r3, [r4, #12]
 8013396:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801339a:	6665      	str	r5, [r4, #100]	; 0x64
 801339c:	f7ff fc4c 	bl	8012c38 <__retarget_lock_init_recursive>
 80133a0:	f7ff ff96 	bl	80132d0 <__sfp_lock_release>
 80133a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80133a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80133ac:	6025      	str	r5, [r4, #0]
 80133ae:	61a5      	str	r5, [r4, #24]
 80133b0:	2208      	movs	r2, #8
 80133b2:	4629      	mov	r1, r5
 80133b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80133b8:	f7fd fd2e 	bl	8010e18 <memset>
 80133bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80133c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80133c4:	4620      	mov	r0, r4
 80133c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80133c8:	3468      	adds	r4, #104	; 0x68
 80133ca:	e7d9      	b.n	8013380 <__sfp+0x1c>
 80133cc:	2104      	movs	r1, #4
 80133ce:	4638      	mov	r0, r7
 80133d0:	f7ff ff62 	bl	8013298 <__sfmoreglue>
 80133d4:	4604      	mov	r4, r0
 80133d6:	6030      	str	r0, [r6, #0]
 80133d8:	2800      	cmp	r0, #0
 80133da:	d1d5      	bne.n	8013388 <__sfp+0x24>
 80133dc:	f7ff ff78 	bl	80132d0 <__sfp_lock_release>
 80133e0:	230c      	movs	r3, #12
 80133e2:	603b      	str	r3, [r7, #0]
 80133e4:	e7ee      	b.n	80133c4 <__sfp+0x60>
 80133e6:	bf00      	nop
 80133e8:	08013878 	.word	0x08013878
 80133ec:	ffff0001 	.word	0xffff0001

080133f0 <_fwalk_reent>:
 80133f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80133f4:	4606      	mov	r6, r0
 80133f6:	4688      	mov	r8, r1
 80133f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80133fc:	2700      	movs	r7, #0
 80133fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013402:	f1b9 0901 	subs.w	r9, r9, #1
 8013406:	d505      	bpl.n	8013414 <_fwalk_reent+0x24>
 8013408:	6824      	ldr	r4, [r4, #0]
 801340a:	2c00      	cmp	r4, #0
 801340c:	d1f7      	bne.n	80133fe <_fwalk_reent+0xe>
 801340e:	4638      	mov	r0, r7
 8013410:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013414:	89ab      	ldrh	r3, [r5, #12]
 8013416:	2b01      	cmp	r3, #1
 8013418:	d907      	bls.n	801342a <_fwalk_reent+0x3a>
 801341a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801341e:	3301      	adds	r3, #1
 8013420:	d003      	beq.n	801342a <_fwalk_reent+0x3a>
 8013422:	4629      	mov	r1, r5
 8013424:	4630      	mov	r0, r6
 8013426:	47c0      	blx	r8
 8013428:	4307      	orrs	r7, r0
 801342a:	3568      	adds	r5, #104	; 0x68
 801342c:	e7e9      	b.n	8013402 <_fwalk_reent+0x12>

0801342e <__swhatbuf_r>:
 801342e:	b570      	push	{r4, r5, r6, lr}
 8013430:	460e      	mov	r6, r1
 8013432:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013436:	2900      	cmp	r1, #0
 8013438:	b096      	sub	sp, #88	; 0x58
 801343a:	4614      	mov	r4, r2
 801343c:	461d      	mov	r5, r3
 801343e:	da08      	bge.n	8013452 <__swhatbuf_r+0x24>
 8013440:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8013444:	2200      	movs	r2, #0
 8013446:	602a      	str	r2, [r5, #0]
 8013448:	061a      	lsls	r2, r3, #24
 801344a:	d410      	bmi.n	801346e <__swhatbuf_r+0x40>
 801344c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013450:	e00e      	b.n	8013470 <__swhatbuf_r+0x42>
 8013452:	466a      	mov	r2, sp
 8013454:	f000 f8fa 	bl	801364c <_fstat_r>
 8013458:	2800      	cmp	r0, #0
 801345a:	dbf1      	blt.n	8013440 <__swhatbuf_r+0x12>
 801345c:	9a01      	ldr	r2, [sp, #4]
 801345e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013462:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013466:	425a      	negs	r2, r3
 8013468:	415a      	adcs	r2, r3
 801346a:	602a      	str	r2, [r5, #0]
 801346c:	e7ee      	b.n	801344c <__swhatbuf_r+0x1e>
 801346e:	2340      	movs	r3, #64	; 0x40
 8013470:	2000      	movs	r0, #0
 8013472:	6023      	str	r3, [r4, #0]
 8013474:	b016      	add	sp, #88	; 0x58
 8013476:	bd70      	pop	{r4, r5, r6, pc}

08013478 <__smakebuf_r>:
 8013478:	898b      	ldrh	r3, [r1, #12]
 801347a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801347c:	079d      	lsls	r5, r3, #30
 801347e:	4606      	mov	r6, r0
 8013480:	460c      	mov	r4, r1
 8013482:	d507      	bpl.n	8013494 <__smakebuf_r+0x1c>
 8013484:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013488:	6023      	str	r3, [r4, #0]
 801348a:	6123      	str	r3, [r4, #16]
 801348c:	2301      	movs	r3, #1
 801348e:	6163      	str	r3, [r4, #20]
 8013490:	b002      	add	sp, #8
 8013492:	bd70      	pop	{r4, r5, r6, pc}
 8013494:	ab01      	add	r3, sp, #4
 8013496:	466a      	mov	r2, sp
 8013498:	f7ff ffc9 	bl	801342e <__swhatbuf_r>
 801349c:	9900      	ldr	r1, [sp, #0]
 801349e:	4605      	mov	r5, r0
 80134a0:	4630      	mov	r0, r6
 80134a2:	f7fd fd2d 	bl	8010f00 <_malloc_r>
 80134a6:	b948      	cbnz	r0, 80134bc <__smakebuf_r+0x44>
 80134a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80134ac:	059a      	lsls	r2, r3, #22
 80134ae:	d4ef      	bmi.n	8013490 <__smakebuf_r+0x18>
 80134b0:	f023 0303 	bic.w	r3, r3, #3
 80134b4:	f043 0302 	orr.w	r3, r3, #2
 80134b8:	81a3      	strh	r3, [r4, #12]
 80134ba:	e7e3      	b.n	8013484 <__smakebuf_r+0xc>
 80134bc:	4b0d      	ldr	r3, [pc, #52]	; (80134f4 <__smakebuf_r+0x7c>)
 80134be:	62b3      	str	r3, [r6, #40]	; 0x28
 80134c0:	89a3      	ldrh	r3, [r4, #12]
 80134c2:	6020      	str	r0, [r4, #0]
 80134c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80134c8:	81a3      	strh	r3, [r4, #12]
 80134ca:	9b00      	ldr	r3, [sp, #0]
 80134cc:	6163      	str	r3, [r4, #20]
 80134ce:	9b01      	ldr	r3, [sp, #4]
 80134d0:	6120      	str	r0, [r4, #16]
 80134d2:	b15b      	cbz	r3, 80134ec <__smakebuf_r+0x74>
 80134d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80134d8:	4630      	mov	r0, r6
 80134da:	f000 f8c9 	bl	8013670 <_isatty_r>
 80134de:	b128      	cbz	r0, 80134ec <__smakebuf_r+0x74>
 80134e0:	89a3      	ldrh	r3, [r4, #12]
 80134e2:	f023 0303 	bic.w	r3, r3, #3
 80134e6:	f043 0301 	orr.w	r3, r3, #1
 80134ea:	81a3      	strh	r3, [r4, #12]
 80134ec:	89a0      	ldrh	r0, [r4, #12]
 80134ee:	4305      	orrs	r5, r0
 80134f0:	81a5      	strh	r5, [r4, #12]
 80134f2:	e7cd      	b.n	8013490 <__smakebuf_r+0x18>
 80134f4:	0801328d 	.word	0x0801328d

080134f8 <_raise_r>:
 80134f8:	291f      	cmp	r1, #31
 80134fa:	b538      	push	{r3, r4, r5, lr}
 80134fc:	4604      	mov	r4, r0
 80134fe:	460d      	mov	r5, r1
 8013500:	d904      	bls.n	801350c <_raise_r+0x14>
 8013502:	2316      	movs	r3, #22
 8013504:	6003      	str	r3, [r0, #0]
 8013506:	f04f 30ff 	mov.w	r0, #4294967295
 801350a:	bd38      	pop	{r3, r4, r5, pc}
 801350c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801350e:	b112      	cbz	r2, 8013516 <_raise_r+0x1e>
 8013510:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013514:	b94b      	cbnz	r3, 801352a <_raise_r+0x32>
 8013516:	4620      	mov	r0, r4
 8013518:	f000 f830 	bl	801357c <_getpid_r>
 801351c:	462a      	mov	r2, r5
 801351e:	4601      	mov	r1, r0
 8013520:	4620      	mov	r0, r4
 8013522:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013526:	f000 b817 	b.w	8013558 <_kill_r>
 801352a:	2b01      	cmp	r3, #1
 801352c:	d00a      	beq.n	8013544 <_raise_r+0x4c>
 801352e:	1c59      	adds	r1, r3, #1
 8013530:	d103      	bne.n	801353a <_raise_r+0x42>
 8013532:	2316      	movs	r3, #22
 8013534:	6003      	str	r3, [r0, #0]
 8013536:	2001      	movs	r0, #1
 8013538:	e7e7      	b.n	801350a <_raise_r+0x12>
 801353a:	2400      	movs	r4, #0
 801353c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013540:	4628      	mov	r0, r5
 8013542:	4798      	blx	r3
 8013544:	2000      	movs	r0, #0
 8013546:	e7e0      	b.n	801350a <_raise_r+0x12>

08013548 <raise>:
 8013548:	4b02      	ldr	r3, [pc, #8]	; (8013554 <raise+0xc>)
 801354a:	4601      	mov	r1, r0
 801354c:	6818      	ldr	r0, [r3, #0]
 801354e:	f7ff bfd3 	b.w	80134f8 <_raise_r>
 8013552:	bf00      	nop
 8013554:	24000184 	.word	0x24000184

08013558 <_kill_r>:
 8013558:	b538      	push	{r3, r4, r5, lr}
 801355a:	4d07      	ldr	r5, [pc, #28]	; (8013578 <_kill_r+0x20>)
 801355c:	2300      	movs	r3, #0
 801355e:	4604      	mov	r4, r0
 8013560:	4608      	mov	r0, r1
 8013562:	4611      	mov	r1, r2
 8013564:	602b      	str	r3, [r5, #0]
 8013566:	f7ed ffb9 	bl	80014dc <_kill>
 801356a:	1c43      	adds	r3, r0, #1
 801356c:	d102      	bne.n	8013574 <_kill_r+0x1c>
 801356e:	682b      	ldr	r3, [r5, #0]
 8013570:	b103      	cbz	r3, 8013574 <_kill_r+0x1c>
 8013572:	6023      	str	r3, [r4, #0]
 8013574:	bd38      	pop	{r3, r4, r5, pc}
 8013576:	bf00      	nop
 8013578:	24002048 	.word	0x24002048

0801357c <_getpid_r>:
 801357c:	f7ed bfa6 	b.w	80014cc <_getpid>

08013580 <__sread>:
 8013580:	b510      	push	{r4, lr}
 8013582:	460c      	mov	r4, r1
 8013584:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013588:	f000 f894 	bl	80136b4 <_read_r>
 801358c:	2800      	cmp	r0, #0
 801358e:	bfab      	itete	ge
 8013590:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013592:	89a3      	ldrhlt	r3, [r4, #12]
 8013594:	181b      	addge	r3, r3, r0
 8013596:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801359a:	bfac      	ite	ge
 801359c:	6563      	strge	r3, [r4, #84]	; 0x54
 801359e:	81a3      	strhlt	r3, [r4, #12]
 80135a0:	bd10      	pop	{r4, pc}

080135a2 <__swrite>:
 80135a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80135a6:	461f      	mov	r7, r3
 80135a8:	898b      	ldrh	r3, [r1, #12]
 80135aa:	05db      	lsls	r3, r3, #23
 80135ac:	4605      	mov	r5, r0
 80135ae:	460c      	mov	r4, r1
 80135b0:	4616      	mov	r6, r2
 80135b2:	d505      	bpl.n	80135c0 <__swrite+0x1e>
 80135b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80135b8:	2302      	movs	r3, #2
 80135ba:	2200      	movs	r2, #0
 80135bc:	f000 f868 	bl	8013690 <_lseek_r>
 80135c0:	89a3      	ldrh	r3, [r4, #12]
 80135c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80135c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80135ca:	81a3      	strh	r3, [r4, #12]
 80135cc:	4632      	mov	r2, r6
 80135ce:	463b      	mov	r3, r7
 80135d0:	4628      	mov	r0, r5
 80135d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80135d6:	f000 b817 	b.w	8013608 <_write_r>

080135da <__sseek>:
 80135da:	b510      	push	{r4, lr}
 80135dc:	460c      	mov	r4, r1
 80135de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80135e2:	f000 f855 	bl	8013690 <_lseek_r>
 80135e6:	1c43      	adds	r3, r0, #1
 80135e8:	89a3      	ldrh	r3, [r4, #12]
 80135ea:	bf15      	itete	ne
 80135ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80135ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80135f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80135f6:	81a3      	strheq	r3, [r4, #12]
 80135f8:	bf18      	it	ne
 80135fa:	81a3      	strhne	r3, [r4, #12]
 80135fc:	bd10      	pop	{r4, pc}

080135fe <__sclose>:
 80135fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013602:	f000 b813 	b.w	801362c <_close_r>
	...

08013608 <_write_r>:
 8013608:	b538      	push	{r3, r4, r5, lr}
 801360a:	4d07      	ldr	r5, [pc, #28]	; (8013628 <_write_r+0x20>)
 801360c:	4604      	mov	r4, r0
 801360e:	4608      	mov	r0, r1
 8013610:	4611      	mov	r1, r2
 8013612:	2200      	movs	r2, #0
 8013614:	602a      	str	r2, [r5, #0]
 8013616:	461a      	mov	r2, r3
 8013618:	f7ed ff97 	bl	800154a <_write>
 801361c:	1c43      	adds	r3, r0, #1
 801361e:	d102      	bne.n	8013626 <_write_r+0x1e>
 8013620:	682b      	ldr	r3, [r5, #0]
 8013622:	b103      	cbz	r3, 8013626 <_write_r+0x1e>
 8013624:	6023      	str	r3, [r4, #0]
 8013626:	bd38      	pop	{r3, r4, r5, pc}
 8013628:	24002048 	.word	0x24002048

0801362c <_close_r>:
 801362c:	b538      	push	{r3, r4, r5, lr}
 801362e:	4d06      	ldr	r5, [pc, #24]	; (8013648 <_close_r+0x1c>)
 8013630:	2300      	movs	r3, #0
 8013632:	4604      	mov	r4, r0
 8013634:	4608      	mov	r0, r1
 8013636:	602b      	str	r3, [r5, #0]
 8013638:	f7ed ffa3 	bl	8001582 <_close>
 801363c:	1c43      	adds	r3, r0, #1
 801363e:	d102      	bne.n	8013646 <_close_r+0x1a>
 8013640:	682b      	ldr	r3, [r5, #0]
 8013642:	b103      	cbz	r3, 8013646 <_close_r+0x1a>
 8013644:	6023      	str	r3, [r4, #0]
 8013646:	bd38      	pop	{r3, r4, r5, pc}
 8013648:	24002048 	.word	0x24002048

0801364c <_fstat_r>:
 801364c:	b538      	push	{r3, r4, r5, lr}
 801364e:	4d07      	ldr	r5, [pc, #28]	; (801366c <_fstat_r+0x20>)
 8013650:	2300      	movs	r3, #0
 8013652:	4604      	mov	r4, r0
 8013654:	4608      	mov	r0, r1
 8013656:	4611      	mov	r1, r2
 8013658:	602b      	str	r3, [r5, #0]
 801365a:	f7ed ff9e 	bl	800159a <_fstat>
 801365e:	1c43      	adds	r3, r0, #1
 8013660:	d102      	bne.n	8013668 <_fstat_r+0x1c>
 8013662:	682b      	ldr	r3, [r5, #0]
 8013664:	b103      	cbz	r3, 8013668 <_fstat_r+0x1c>
 8013666:	6023      	str	r3, [r4, #0]
 8013668:	bd38      	pop	{r3, r4, r5, pc}
 801366a:	bf00      	nop
 801366c:	24002048 	.word	0x24002048

08013670 <_isatty_r>:
 8013670:	b538      	push	{r3, r4, r5, lr}
 8013672:	4d06      	ldr	r5, [pc, #24]	; (801368c <_isatty_r+0x1c>)
 8013674:	2300      	movs	r3, #0
 8013676:	4604      	mov	r4, r0
 8013678:	4608      	mov	r0, r1
 801367a:	602b      	str	r3, [r5, #0]
 801367c:	f7ed ff9d 	bl	80015ba <_isatty>
 8013680:	1c43      	adds	r3, r0, #1
 8013682:	d102      	bne.n	801368a <_isatty_r+0x1a>
 8013684:	682b      	ldr	r3, [r5, #0]
 8013686:	b103      	cbz	r3, 801368a <_isatty_r+0x1a>
 8013688:	6023      	str	r3, [r4, #0]
 801368a:	bd38      	pop	{r3, r4, r5, pc}
 801368c:	24002048 	.word	0x24002048

08013690 <_lseek_r>:
 8013690:	b538      	push	{r3, r4, r5, lr}
 8013692:	4d07      	ldr	r5, [pc, #28]	; (80136b0 <_lseek_r+0x20>)
 8013694:	4604      	mov	r4, r0
 8013696:	4608      	mov	r0, r1
 8013698:	4611      	mov	r1, r2
 801369a:	2200      	movs	r2, #0
 801369c:	602a      	str	r2, [r5, #0]
 801369e:	461a      	mov	r2, r3
 80136a0:	f7ed ff96 	bl	80015d0 <_lseek>
 80136a4:	1c43      	adds	r3, r0, #1
 80136a6:	d102      	bne.n	80136ae <_lseek_r+0x1e>
 80136a8:	682b      	ldr	r3, [r5, #0]
 80136aa:	b103      	cbz	r3, 80136ae <_lseek_r+0x1e>
 80136ac:	6023      	str	r3, [r4, #0]
 80136ae:	bd38      	pop	{r3, r4, r5, pc}
 80136b0:	24002048 	.word	0x24002048

080136b4 <_read_r>:
 80136b4:	b538      	push	{r3, r4, r5, lr}
 80136b6:	4d07      	ldr	r5, [pc, #28]	; (80136d4 <_read_r+0x20>)
 80136b8:	4604      	mov	r4, r0
 80136ba:	4608      	mov	r0, r1
 80136bc:	4611      	mov	r1, r2
 80136be:	2200      	movs	r2, #0
 80136c0:	602a      	str	r2, [r5, #0]
 80136c2:	461a      	mov	r2, r3
 80136c4:	f7ed ff24 	bl	8001510 <_read>
 80136c8:	1c43      	adds	r3, r0, #1
 80136ca:	d102      	bne.n	80136d2 <_read_r+0x1e>
 80136cc:	682b      	ldr	r3, [r5, #0]
 80136ce:	b103      	cbz	r3, 80136d2 <_read_r+0x1e>
 80136d0:	6023      	str	r3, [r4, #0]
 80136d2:	bd38      	pop	{r3, r4, r5, pc}
 80136d4:	24002048 	.word	0x24002048

080136d8 <_init>:
 80136d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80136da:	bf00      	nop
 80136dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80136de:	bc08      	pop	{r3}
 80136e0:	469e      	mov	lr, r3
 80136e2:	4770      	bx	lr

080136e4 <_fini>:
 80136e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80136e6:	bf00      	nop
 80136e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80136ea:	bc08      	pop	{r3}
 80136ec:	469e      	mov	lr, r3
 80136ee:	4770      	bx	lr
