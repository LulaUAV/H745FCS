
baremetal_2_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000137bc  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000047c  08013a60  08013a60  00023a60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013edc  08013edc  0003036c  2**0
                  CONTENTS
  4 .ARM          00000008  08013edc  08013edc  00023edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013ee4  08013ee4  0003036c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08013ee4  08013ee4  00023ee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08013eec  08013eec  00023eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000036c  24000000  08013ef4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001da0  2400036c  08014260  0003036c  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  2400210c  08014260  0003210c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0003036c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000358ba  00000000  00000000  0003039a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006b76  00000000  00000000  00065c54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002268  00000000  00000000  0006c7d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000022b8  00000000  00000000  0006ea38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000dd76  00000000  00000000  00070cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00033eff  00000000  00000000  0007ea66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001a15e2  00000000  00000000  000b2965  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00253f47  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009d30  00000000  00000000  00253f98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00001027  00000000  00000000  0025dcc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400036c 	.word	0x2400036c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08013a44 	.word	0x08013a44

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000370 	.word	0x24000370
 80002dc:	08013a44 	.word	0x08013a44

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000698:	4b3f      	ldr	r3, [pc, #252]	; (8000798 <SystemInit+0x104>)
 800069a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069e:	4a3e      	ldr	r2, [pc, #248]	; (8000798 <SystemInit+0x104>)
 80006a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a8:	4b3b      	ldr	r3, [pc, #236]	; (8000798 <SystemInit+0x104>)
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	4a3a      	ldr	r2, [pc, #232]	; (8000798 <SystemInit+0x104>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006b4:	4b39      	ldr	r3, [pc, #228]	; (800079c <SystemInit+0x108>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f003 030f 	and.w	r3, r3, #15
 80006bc:	2b06      	cmp	r3, #6
 80006be:	d807      	bhi.n	80006d0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006c0:	4b36      	ldr	r3, [pc, #216]	; (800079c <SystemInit+0x108>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f023 030f 	bic.w	r3, r3, #15
 80006c8:	4a34      	ldr	r2, [pc, #208]	; (800079c <SystemInit+0x108>)
 80006ca:	f043 0307 	orr.w	r3, r3, #7
 80006ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006d0:	4b33      	ldr	r3, [pc, #204]	; (80007a0 <SystemInit+0x10c>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a32      	ldr	r2, [pc, #200]	; (80007a0 <SystemInit+0x10c>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006dc:	4b30      	ldr	r3, [pc, #192]	; (80007a0 <SystemInit+0x10c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006e2:	4b2f      	ldr	r3, [pc, #188]	; (80007a0 <SystemInit+0x10c>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	492e      	ldr	r1, [pc, #184]	; (80007a0 <SystemInit+0x10c>)
 80006e8:	4b2e      	ldr	r3, [pc, #184]	; (80007a4 <SystemInit+0x110>)
 80006ea:	4013      	ands	r3, r2
 80006ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ee:	4b2b      	ldr	r3, [pc, #172]	; (800079c <SystemInit+0x108>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d007      	beq.n	800070a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006fa:	4b28      	ldr	r3, [pc, #160]	; (800079c <SystemInit+0x108>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f023 030f 	bic.w	r3, r3, #15
 8000702:	4a26      	ldr	r2, [pc, #152]	; (800079c <SystemInit+0x108>)
 8000704:	f043 0307 	orr.w	r3, r3, #7
 8000708:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800070a:	4b25      	ldr	r3, [pc, #148]	; (80007a0 <SystemInit+0x10c>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000710:	4b23      	ldr	r3, [pc, #140]	; (80007a0 <SystemInit+0x10c>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000716:	4b22      	ldr	r3, [pc, #136]	; (80007a0 <SystemInit+0x10c>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800071c:	4b20      	ldr	r3, [pc, #128]	; (80007a0 <SystemInit+0x10c>)
 800071e:	4a22      	ldr	r2, [pc, #136]	; (80007a8 <SystemInit+0x114>)
 8000720:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000722:	4b1f      	ldr	r3, [pc, #124]	; (80007a0 <SystemInit+0x10c>)
 8000724:	4a21      	ldr	r2, [pc, #132]	; (80007ac <SystemInit+0x118>)
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000728:	4b1d      	ldr	r3, [pc, #116]	; (80007a0 <SystemInit+0x10c>)
 800072a:	4a21      	ldr	r2, [pc, #132]	; (80007b0 <SystemInit+0x11c>)
 800072c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800072e:	4b1c      	ldr	r3, [pc, #112]	; (80007a0 <SystemInit+0x10c>)
 8000730:	2200      	movs	r2, #0
 8000732:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000734:	4b1a      	ldr	r3, [pc, #104]	; (80007a0 <SystemInit+0x10c>)
 8000736:	4a1e      	ldr	r2, [pc, #120]	; (80007b0 <SystemInit+0x11c>)
 8000738:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800073a:	4b19      	ldr	r3, [pc, #100]	; (80007a0 <SystemInit+0x10c>)
 800073c:	2200      	movs	r2, #0
 800073e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000740:	4b17      	ldr	r3, [pc, #92]	; (80007a0 <SystemInit+0x10c>)
 8000742:	4a1b      	ldr	r2, [pc, #108]	; (80007b0 <SystemInit+0x11c>)
 8000744:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000746:	4b16      	ldr	r3, [pc, #88]	; (80007a0 <SystemInit+0x10c>)
 8000748:	2200      	movs	r2, #0
 800074a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800074c:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <SystemInit+0x10c>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a13      	ldr	r2, [pc, #76]	; (80007a0 <SystemInit+0x10c>)
 8000752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000756:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000758:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <SystemInit+0x10c>)
 800075a:	2200      	movs	r2, #0
 800075c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800075e:	4b15      	ldr	r3, [pc, #84]	; (80007b4 <SystemInit+0x120>)
 8000760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000762:	4a14      	ldr	r2, [pc, #80]	; (80007b4 <SystemInit+0x120>)
 8000764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000768:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800076a:	4b13      	ldr	r3, [pc, #76]	; (80007b8 <SystemInit+0x124>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4b13      	ldr	r3, [pc, #76]	; (80007bc <SystemInit+0x128>)
 8000770:	4013      	ands	r3, r2
 8000772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000776:	d202      	bcs.n	800077e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000778:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <SystemInit+0x12c>)
 800077a:	2201      	movs	r2, #1
 800077c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800077e:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <SystemInit+0x130>)
 8000780:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000784:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000786:	4b04      	ldr	r3, [pc, #16]	; (8000798 <SystemInit+0x104>)
 8000788:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800078c:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800078e:	bf00      	nop
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	e000ed00 	.word	0xe000ed00
 800079c:	52002000 	.word	0x52002000
 80007a0:	58024400 	.word	0x58024400
 80007a4:	eaf6ed7f 	.word	0xeaf6ed7f
 80007a8:	02020200 	.word	0x02020200
 80007ac:	01ff0000 	.word	0x01ff0000
 80007b0:	01010280 	.word	0x01010280
 80007b4:	580000c0 	.word	0x580000c0
 80007b8:	5c001000 	.word	0x5c001000
 80007bc:	ffff0000 	.word	0xffff0000
 80007c0:	51008108 	.word	0x51008108
 80007c4:	52004000 	.word	0x52004000

080007c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007ce:	4b1d      	ldr	r3, [pc, #116]	; (8000844 <MX_DMA_Init+0x7c>)
 80007d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007d4:	4a1b      	ldr	r2, [pc, #108]	; (8000844 <MX_DMA_Init+0x7c>)
 80007d6:	f043 0301 	orr.w	r3, r3, #1
 80007da:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80007de:	4b19      	ldr	r3, [pc, #100]	; (8000844 <MX_DMA_Init+0x7c>)
 80007e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007e4:	f003 0301 	and.w	r3, r3, #1
 80007e8:	607b      	str	r3, [r7, #4]
 80007ea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007ec:	4b15      	ldr	r3, [pc, #84]	; (8000844 <MX_DMA_Init+0x7c>)
 80007ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007f2:	4a14      	ldr	r2, [pc, #80]	; (8000844 <MX_DMA_Init+0x7c>)
 80007f4:	f043 0302 	orr.w	r3, r3, #2
 80007f8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80007fc:	4b11      	ldr	r3, [pc, #68]	; (8000844 <MX_DMA_Init+0x7c>)
 80007fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000802:	f003 0302 	and.w	r3, r3, #2
 8000806:	603b      	str	r3, [r7, #0]
 8000808:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 1, 0);
 800080a:	2200      	movs	r2, #0
 800080c:	2101      	movs	r1, #1
 800080e:	2010      	movs	r0, #16
 8000810:	f001 fc29 	bl	8002066 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000814:	2010      	movs	r0, #16
 8000816:	f001 fc40 	bl	800209a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 1, 0);
 800081a:	2200      	movs	r2, #0
 800081c:	2101      	movs	r1, #1
 800081e:	2011      	movs	r0, #17
 8000820:	f001 fc21 	bl	8002066 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000824:	2011      	movs	r0, #17
 8000826:	f001 fc38 	bl	800209a <HAL_NVIC_EnableIRQ>

  /* DMA2_Stream7 Interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 1, 0);
 800082a:	2200      	movs	r2, #0
 800082c:	2101      	movs	r1, #1
 800082e:	2046      	movs	r0, #70	; 0x46
 8000830:	f001 fc19 	bl	8002066 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000834:	2046      	movs	r0, #70	; 0x46
 8000836:	f001 fc30 	bl	800209a <HAL_NVIC_EnableIRQ>

}
 800083a:	bf00      	nop
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	58024400 	.word	0x58024400

08000848 <MX_GPIO_Init>:
/** Configure pins
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b088      	sub	sp, #32
 800084c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800084e:	4b37      	ldr	r3, [pc, #220]	; (800092c <MX_GPIO_Init+0xe4>)
 8000850:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000854:	4a35      	ldr	r2, [pc, #212]	; (800092c <MX_GPIO_Init+0xe4>)
 8000856:	f043 0320 	orr.w	r3, r3, #32
 800085a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800085e:	4b33      	ldr	r3, [pc, #204]	; (800092c <MX_GPIO_Init+0xe4>)
 8000860:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000864:	f003 0320 	and.w	r3, r3, #32
 8000868:	61fb      	str	r3, [r7, #28]
 800086a:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800086c:	4b2f      	ldr	r3, [pc, #188]	; (800092c <MX_GPIO_Init+0xe4>)
 800086e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000872:	4a2e      	ldr	r2, [pc, #184]	; (800092c <MX_GPIO_Init+0xe4>)
 8000874:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000878:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800087c:	4b2b      	ldr	r3, [pc, #172]	; (800092c <MX_GPIO_Init+0xe4>)
 800087e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000886:	61bb      	str	r3, [r7, #24]
 8000888:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088a:	4b28      	ldr	r3, [pc, #160]	; (800092c <MX_GPIO_Init+0xe4>)
 800088c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000890:	4a26      	ldr	r2, [pc, #152]	; (800092c <MX_GPIO_Init+0xe4>)
 8000892:	f043 0301 	orr.w	r3, r3, #1
 8000896:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800089a:	4b24      	ldr	r3, [pc, #144]	; (800092c <MX_GPIO_Init+0xe4>)
 800089c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008a0:	f003 0301 	and.w	r3, r3, #1
 80008a4:	617b      	str	r3, [r7, #20]
 80008a6:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008a8:	4b20      	ldr	r3, [pc, #128]	; (800092c <MX_GPIO_Init+0xe4>)
 80008aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ae:	4a1f      	ldr	r2, [pc, #124]	; (800092c <MX_GPIO_Init+0xe4>)
 80008b0:	f043 0310 	orr.w	r3, r3, #16
 80008b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008b8:	4b1c      	ldr	r3, [pc, #112]	; (800092c <MX_GPIO_Init+0xe4>)
 80008ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008be:	f003 0310 	and.w	r3, r3, #16
 80008c2:	613b      	str	r3, [r7, #16]
 80008c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c6:	4b19      	ldr	r3, [pc, #100]	; (800092c <MX_GPIO_Init+0xe4>)
 80008c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008cc:	4a17      	ldr	r2, [pc, #92]	; (800092c <MX_GPIO_Init+0xe4>)
 80008ce:	f043 0302 	orr.w	r3, r3, #2
 80008d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008d6:	4b15      	ldr	r3, [pc, #84]	; (800092c <MX_GPIO_Init+0xe4>)
 80008d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008dc:	f003 0302 	and.w	r3, r3, #2
 80008e0:	60fb      	str	r3, [r7, #12]
 80008e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e4:	4b11      	ldr	r3, [pc, #68]	; (800092c <MX_GPIO_Init+0xe4>)
 80008e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ea:	4a10      	ldr	r2, [pc, #64]	; (800092c <MX_GPIO_Init+0xe4>)
 80008ec:	f043 0304 	orr.w	r3, r3, #4
 80008f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008f4:	4b0d      	ldr	r3, [pc, #52]	; (800092c <MX_GPIO_Init+0xe4>)
 80008f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008fa:	f003 0304 	and.w	r3, r3, #4
 80008fe:	60bb      	str	r3, [r7, #8]
 8000900:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000902:	4b0a      	ldr	r3, [pc, #40]	; (800092c <MX_GPIO_Init+0xe4>)
 8000904:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000908:	4a08      	ldr	r2, [pc, #32]	; (800092c <MX_GPIO_Init+0xe4>)
 800090a:	f043 0308 	orr.w	r3, r3, #8
 800090e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000912:	4b06      	ldr	r3, [pc, #24]	; (800092c <MX_GPIO_Init+0xe4>)
 8000914:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000918:	f003 0308 	and.w	r3, r3, #8
 800091c:	607b      	str	r3, [r7, #4]
 800091e:	687b      	ldr	r3, [r7, #4]

  // Set LED Ports
  GPIO_Port_Config();
 8000920:	f000 f806 	bl	8000930 <GPIO_Port_Config>

}
 8000924:	bf00      	nop
 8000926:	3720      	adds	r7, #32
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	58024400 	.word	0x58024400

08000930 <GPIO_Port_Config>:

/* USER CODE BEGIN 2 */
void GPIO_Port_Config(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b086      	sub	sp, #24
 8000934:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
 8000942:	611a      	str	r2, [r3, #16]

  // Configure GPIO Pin Output Level:
  //LEDS
  HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_RESET);
 8000944:	2200      	movs	r2, #0
 8000946:	2180      	movs	r1, #128	; 0x80
 8000948:	4827      	ldr	r0, [pc, #156]	; (80009e8 <GPIO_Port_Config+0xb8>)
 800094a:	f004 fc51 	bl	80051f0 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = LED_A_Pin;
 800094e:	2380      	movs	r3, #128	; 0x80
 8000950:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000952:	2301      	movs	r3, #1
 8000954:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095a:	2300      	movs	r3, #0
 800095c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_A_GPIO_Port, &GPIO_InitStruct);
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	4619      	mov	r1, r3
 8000962:	4821      	ldr	r0, [pc, #132]	; (80009e8 <GPIO_Port_Config+0xb8>)
 8000964:	f004 fa94 	bl	8004e90 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8000968:	2200      	movs	r2, #0
 800096a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800096e:	481e      	ldr	r0, [pc, #120]	; (80009e8 <GPIO_Port_Config+0xb8>)
 8000970:	f004 fc3e 	bl	80051f0 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = LED_B_Pin;
 8000974:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000978:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097a:	2301      	movs	r3, #1
 800097c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2300      	movs	r3, #0
 8000984:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_B_GPIO_Port, &GPIO_InitStruct);
 8000986:	1d3b      	adds	r3, r7, #4
 8000988:	4619      	mov	r1, r3
 800098a:	4817      	ldr	r0, [pc, #92]	; (80009e8 <GPIO_Port_Config+0xb8>)
 800098c:	f004 fa80 	bl	8004e90 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_RESET);
 8000990:	2200      	movs	r2, #0
 8000992:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000996:	4815      	ldr	r0, [pc, #84]	; (80009ec <GPIO_Port_Config+0xbc>)
 8000998:	f004 fc2a 	bl	80051f0 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = LED_C_Pin;
 800099c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a2:	2301      	movs	r3, #1
 80009a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_C_GPIO_Port, &GPIO_InitStruct);
 80009ae:	1d3b      	adds	r3, r7, #4
 80009b0:	4619      	mov	r1, r3
 80009b2:	480e      	ldr	r0, [pc, #56]	; (80009ec <GPIO_Port_Config+0xbc>)
 80009b4:	f004 fa6c 	bl	8004e90 <HAL_GPIO_Init>


  HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_RESET);
 80009b8:	2200      	movs	r2, #0
 80009ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009be:	480b      	ldr	r0, [pc, #44]	; (80009ec <GPIO_Port_Config+0xbc>)
 80009c0:	f004 fc16 	bl	80051f0 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = LED_D_Pin;
 80009c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009c8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ca:	2301      	movs	r3, #1
 80009cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d2:	2300      	movs	r3, #0
 80009d4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_D_GPIO_Port, &GPIO_InitStruct);
 80009d6:	1d3b      	adds	r3, r7, #4
 80009d8:	4619      	mov	r1, r3
 80009da:	4804      	ldr	r0, [pc, #16]	; (80009ec <GPIO_Port_Config+0xbc>)
 80009dc:	f004 fa58 	bl	8004e90 <HAL_GPIO_Init>

}
 80009e0:	bf00      	nop
 80009e2:	3718      	adds	r7, #24
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	58021000 	.word	0x58021000
 80009ec:	58021400 	.word	0x58021400

080009f0 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80009f4:	4b1b      	ldr	r3, [pc, #108]	; (8000a64 <MX_I2C2_Init+0x74>)
 80009f6:	4a1c      	ldr	r2, [pc, #112]	; (8000a68 <MX_I2C2_Init+0x78>)
 80009f8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 80009fa:	4b1a      	ldr	r3, [pc, #104]	; (8000a64 <MX_I2C2_Init+0x74>)
 80009fc:	4a1b      	ldr	r2, [pc, #108]	; (8000a6c <MX_I2C2_Init+0x7c>)
 80009fe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000a00:	4b18      	ldr	r3, [pc, #96]	; (8000a64 <MX_I2C2_Init+0x74>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a06:	4b17      	ldr	r3, [pc, #92]	; (8000a64 <MX_I2C2_Init+0x74>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a0c:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <MX_I2C2_Init+0x74>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a12:	4b14      	ldr	r3, [pc, #80]	; (8000a64 <MX_I2C2_Init+0x74>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a18:	4b12      	ldr	r3, [pc, #72]	; (8000a64 <MX_I2C2_Init+0x74>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a1e:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <MX_I2C2_Init+0x74>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a24:	4b0f      	ldr	r3, [pc, #60]	; (8000a64 <MX_I2C2_Init+0x74>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a2a:	480e      	ldr	r0, [pc, #56]	; (8000a64 <MX_I2C2_Init+0x74>)
 8000a2c:	f004 fc54 	bl	80052d8 <HAL_I2C_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000a36:	f000 fa6f 	bl	8000f18 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	4809      	ldr	r0, [pc, #36]	; (8000a64 <MX_I2C2_Init+0x74>)
 8000a3e:	f005 fb60 	bl	8006102 <HAL_I2CEx_ConfigAnalogFilter>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000a48:	f000 fa66 	bl	8000f18 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	4805      	ldr	r0, [pc, #20]	; (8000a64 <MX_I2C2_Init+0x74>)
 8000a50:	f005 fba2 	bl	8006198 <HAL_I2CEx_ConfigDigitalFilter>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000a5a:	f000 fa5d 	bl	8000f18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	24000388 	.word	0x24000388
 8000a68:	40005800 	.word	0x40005800
 8000a6c:	307075b1 	.word	0x307075b1

08000a70 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b0b8      	sub	sp, #224	; 0xe0
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a78:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a88:	f107 0310 	add.w	r3, r7, #16
 8000a8c:	22bc      	movs	r2, #188	; 0xbc
 8000a8e:	2100      	movs	r1, #0
 8000a90:	4618      	mov	r0, r3
 8000a92:	f010 f9a9 	bl	8010de8 <memset>
  if(i2cHandle->Instance==I2C2)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4a2d      	ldr	r2, [pc, #180]	; (8000b50 <HAL_I2C_MspInit+0xe0>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d152      	bne.n	8000b46 <HAL_I2C_MspInit+0xd6>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000aa0:	2308      	movs	r3, #8
 8000aa2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000aaa:	f107 0310 	add.w	r3, r7, #16
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f007 fde0 	bl	8008674 <HAL_RCCEx_PeriphCLKConfig>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000aba:	f000 fa2d 	bl	8000f18 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000abe:	4b25      	ldr	r3, [pc, #148]	; (8000b54 <HAL_I2C_MspInit+0xe4>)
 8000ac0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac4:	4a23      	ldr	r2, [pc, #140]	; (8000b54 <HAL_I2C_MspInit+0xe4>)
 8000ac6:	f043 0302 	orr.w	r3, r3, #2
 8000aca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ace:	4b21      	ldr	r3, [pc, #132]	; (8000b54 <HAL_I2C_MspInit+0xe4>)
 8000ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad4:	f003 0302 	and.w	r3, r3, #2
 8000ad8:	60fb      	str	r3, [r7, #12]
 8000ada:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000adc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ae0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ae4:	2312      	movs	r3, #18
 8000ae6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aea:	2301      	movs	r3, #1
 8000aec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af0:	2300      	movs	r3, #0
 8000af2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000af6:	2304      	movs	r3, #4
 8000af8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000afc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000b00:	4619      	mov	r1, r3
 8000b02:	4815      	ldr	r0, [pc, #84]	; (8000b58 <HAL_I2C_MspInit+0xe8>)
 8000b04:	f004 f9c4 	bl	8004e90 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000b08:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <HAL_I2C_MspInit+0xe4>)
 8000b0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b0e:	4a11      	ldr	r2, [pc, #68]	; (8000b54 <HAL_I2C_MspInit+0xe4>)
 8000b10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b14:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000b18:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <HAL_I2C_MspInit+0xe4>)
 8000b1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b22:	60bb      	str	r3, [r7, #8]
 8000b24:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2100      	movs	r1, #0
 8000b2a:	2021      	movs	r0, #33	; 0x21
 8000b2c:	f001 fa9b 	bl	8002066 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000b30:	2021      	movs	r0, #33	; 0x21
 8000b32:	f001 fab2 	bl	800209a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8000b36:	2200      	movs	r2, #0
 8000b38:	2100      	movs	r1, #0
 8000b3a:	2022      	movs	r0, #34	; 0x22
 8000b3c:	f001 fa93 	bl	8002066 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8000b40:	2022      	movs	r0, #34	; 0x22
 8000b42:	f001 faaa 	bl	800209a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000b46:	bf00      	nop
 8000b48:	37e0      	adds	r7, #224	; 0xe0
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40005800 	.word	0x40005800
 8000b54:	58024400 	.word	0x58024400
 8000b58:	58020400 	.word	0x58020400
 8000b5c:	00000000 	.word	0x00000000

08000b60 <_Z18SystemClock_Configv>:
///**
//  * @brief System Clock Configuration
//  * @retval None
//  */
void SystemClock_Config(void)
{
 8000b60:	b510      	push	{r4, lr}
 8000b62:	b09e      	sub	sp, #120	; 0x78
  // Defective warning for missing initialiser member
  RCC_OscInitTypeDef RCC_OscInitStruct = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
 8000b64:	224c      	movs	r2, #76	; 0x4c
 8000b66:	2100      	movs	r1, #0
 8000b68:	a80a      	add	r0, sp, #40	; 0x28
 8000b6a:	f010 f93d 	bl	8010de8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0,0,0,0,0,0,0,0};
 8000b6e:	2220      	movs	r2, #32
 8000b70:	2100      	movs	r1, #0
 8000b72:	a802      	add	r0, sp, #8
 8000b74:	f010 f938 	bl	8010de8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000b78:	2002      	movs	r0, #2
 8000b7a:	f006 fd35 	bl	80075e8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b7e:	4a32      	ldr	r2, [pc, #200]	; (8000c48 <_Z18SystemClock_Configv+0xe8>)
 8000b80:	2100      	movs	r1, #0
 8000b82:	4b32      	ldr	r3, [pc, #200]	; (8000c4c <_Z18SystemClock_Configv+0xec>)
 8000b84:	9101      	str	r1, [sp, #4]
 8000b86:	6991      	ldr	r1, [r2, #24]
 8000b88:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8000b8c:	6191      	str	r1, [r2, #24]
 8000b8e:	6991      	ldr	r1, [r2, #24]
 8000b90:	f401 4140 	and.w	r1, r1, #49152	; 0xc000
 8000b94:	9101      	str	r1, [sp, #4]
 8000b96:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000b98:	f041 0101 	orr.w	r1, r1, #1
 8000b9c:	62d9      	str	r1, [r3, #44]	; 0x2c
 8000b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ba0:	f003 0301 	and.w	r3, r3, #1
 8000ba4:	9301      	str	r3, [sp, #4]
 8000ba6:	9b01      	ldr	r3, [sp, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ba8:	6993      	ldr	r3, [r2, #24]
 8000baa:	049b      	lsls	r3, r3, #18
 8000bac:	d5fc      	bpl.n	8000ba8 <_Z18SystemClock_Configv+0x48>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000bae:	4a28      	ldr	r2, [pc, #160]	; (8000c50 <_Z18SystemClock_Configv+0xf0>)
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000bb0:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000bb2:	243c      	movs	r4, #60	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = 15;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bb4:	a80a      	add	r0, sp, #40	; 0x28
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000bb6:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8000bb8:	f023 0303 	bic.w	r3, r3, #3
 8000bbc:	f043 0302 	orr.w	r3, r3, #2
 8000bc0:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bc2:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000bc4:	2200      	movs	r2, #0
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000bc6:	9110      	str	r1, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000bc8:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000bca:	210c      	movs	r1, #12
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000bcc:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bce:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000bd0:	9416      	str	r4, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000bd2:	921c      	str	r2, [sp, #112]	; 0x70
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000bd4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8000c30 <_Z18SystemClock_Configv+0xd0>
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bd8:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = 15;
 8000bdc:	230f      	movs	r3, #15
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000bde:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000be2:	e9cd 121a 	strd	r1, r2, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLQ = 15;
 8000be6:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000be8:	f006 fd68 	bl	80076bc <HAL_RCC_OscConfig>
 8000bec:	b108      	cbz	r0, 8000bf2 <_Z18SystemClock_Configv+0x92>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bee:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <_Z18SystemClock_Configv+0x90>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bf2:	ed9f 7b11 	vldr	d7, [pc, #68]	; 8000c38 <_Z18SystemClock_Configv+0xd8>
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2308      	movs	r3, #8
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000bfa:	a802      	add	r0, sp, #8
 8000bfc:	2104      	movs	r1, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bfe:	ed8d 7b02 	vstr	d7, [sp, #8]
 8000c02:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8000c40 <_Z18SystemClock_Configv+0xe0>
 8000c06:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8000c0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c0e:	2340      	movs	r3, #64	; 0x40
 8000c10:	ed8d 7b06 	vstr	d7, [sp, #24]
 8000c14:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c18:	f007 f95e 	bl	8007ed8 <HAL_RCC_ClockConfig>
 8000c1c:	b108      	cbz	r0, 8000c22 <_Z18SystemClock_Configv+0xc2>
 8000c1e:	b672      	cpsid	i
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <_Z18SystemClock_Configv+0xc0>
  HAL_PWREx_EnableUSBVoltageDetector();
 8000c22:	f006 fd3b 	bl	800769c <HAL_PWREx_EnableUSBVoltageDetector>
}
 8000c26:	b01e      	add	sp, #120	; 0x78
 8000c28:	bd10      	pop	{r4, pc}
 8000c2a:	bf00      	nop
 8000c2c:	f3af 8000 	nop.w
 8000c30:	00000021 	.word	0x00000021
 8000c34:	00010000 	.word	0x00010000
 8000c38:	0000003f 	.word	0x0000003f
 8000c3c:	00000003 	.word	0x00000003
 8000c40:	00000040 	.word	0x00000040
 8000c44:	00000040 	.word	0x00000040
 8000c48:	58024800 	.word	0x58024800
 8000c4c:	58000400 	.word	0x58000400
 8000c50:	58024400 	.word	0x58024400

08000c54 <main>:
{
 8000c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000c58:	2400      	movs	r4, #0
{
 8000c5a:	b0d7      	sub	sp, #348	; 0x15c
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000c5c:	2501      	movs	r5, #1
	  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000c5e:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
 8000c62:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
  HAL_MPU_Disable();
 8000c66:	f001 fa33 	bl	80020d0 <HAL_MPU_Disable>
    MPU_InitStruct.BaseAddress = 0x24000000;
 8000c6a:	f04f 5210 	mov.w	r2, #603979776	; 0x24000000
    MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000c6e:	4b96      	ldr	r3, [pc, #600]	; (8000ec8 <main+0x274>)
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c70:	a816      	add	r0, sp, #88	; 0x58
    MPU_InitStruct.BaseAddress = 0x24000000;
 8000c72:	9217      	str	r2, [sp, #92]	; 0x5c
    MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000c74:	9318      	str	r3, [sp, #96]	; 0x60
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000c76:	f8ad 5058 	strh.w	r5, [sp, #88]	; 0x58
    MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000c7a:	9419      	str	r4, [sp, #100]	; 0x64
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c7c:	f001 fa60 	bl	8002140 <HAL_MPU_ConfigRegion>
    MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8000c80:	4a92      	ldr	r2, [pc, #584]	; (8000ecc <main+0x278>)
 8000c82:	f44f 7380 	mov.w	r3, #256	; 0x100
    MPU_InitStruct.BaseAddress = 0x38000000;
 8000c86:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c8a:	a816      	add	r0, sp, #88	; 0x58
    MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000c8c:	f88d 5059 	strb.w	r5, [sp, #89]	; 0x59
    MPU_InitStruct.BaseAddress = 0x38000000;
 8000c90:	9117      	str	r1, [sp, #92]	; 0x5c
    MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8000c92:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c96:	f001 fa53 	bl	8002140 <HAL_MPU_ConfigRegion>
    HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000c9a:	2004      	movs	r0, #4
 8000c9c:	f001 fa30 	bl	8002100 <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000ca0:	4a8b      	ldr	r2, [pc, #556]	; (8000ed0 <main+0x27c>)
 8000ca2:	6953      	ldr	r3, [r2, #20]
 8000ca4:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
 8000ca8:	d111      	bne.n	8000cce <main+0x7a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000caa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000cae:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000cb2:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000cb6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000cba:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000cbe:	6953      	ldr	r3, [r2, #20]
 8000cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000cc6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000cca:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000cce:	4880      	ldr	r0, [pc, #512]	; (8000ed0 <main+0x27c>)
 8000cd0:	6943      	ldr	r3, [r0, #20]
 8000cd2:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8000cd6:	d124      	bne.n	8000d22 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000cd8:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000cdc:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000ce0:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000ce4:	f643 76e0 	movw	r6, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000ce8:	f3c5 344e 	ubfx	r4, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000cec:	f3c5 05c9 	ubfx	r5, r5, #3, #10
 8000cf0:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000cf2:	ea04 0106 	and.w	r1, r4, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000cf6:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000cf8:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000cfc:	3b01      	subs	r3, #1
 8000cfe:	1c5f      	adds	r7, r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000d00:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 8000d04:	d1f8      	bne.n	8000cf8 <main+0xa4>
    } while(sets-- != 0U);
 8000d06:	3c20      	subs	r4, #32
 8000d08:	f114 0f20 	cmn.w	r4, #32
 8000d0c:	d1f1      	bne.n	8000cf2 <main+0x9e>
 8000d0e:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000d12:	6943      	ldr	r3, [r0, #20]
 8000d14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d18:	6143      	str	r3, [r0, #20]
 8000d1a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000d1e:	f3bf 8f6f 	isb	sy
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000d22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000d26:	4d6b      	ldr	r5, [pc, #428]	; (8000ed4 <main+0x280>)
 8000d28:	e002      	b.n	8000d30 <main+0xdc>
 8000d2a:	3b01      	subs	r3, #1
 8000d2c:	f000 80c7 	beq.w	8000ebe <main+0x26a>
 8000d30:	682a      	ldr	r2, [r5, #0]
 8000d32:	f412 4200 	ands.w	r2, r2, #32768	; 0x8000
 8000d36:	d1f8      	bne.n	8000d2a <main+0xd6>
  HAL_Init();
 8000d38:	4614      	mov	r4, r2
 8000d3a:	f000 fff7 	bl	8001d2c <HAL_Init>
  SystemClock_Config();
 8000d3e:	f7ff ff0f 	bl	8000b60 <_Z18SystemClock_Configv>
  __HAL_RCC_HSEM_CLK_ENABLE();
 8000d42:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
HAL_HSEM_FastTake(HSEM_BOOT);
 8000d46:	4620      	mov	r0, r4
  __HAL_RCC_HSEM_CLK_ENABLE();
 8000d48:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d4c:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8000d50:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8000d54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d58:	9305      	str	r3, [sp, #20]
 8000d5a:	9b05      	ldr	r3, [sp, #20]
HAL_HSEM_FastTake(HSEM_BOOT);
 8000d5c:	f004 fa62 	bl	8005224 <HAL_HSEM_FastTake>
HAL_HSEM_Release(HSEM_BOOT,0);
 8000d60:	4621      	mov	r1, r4
 8000d62:	4620      	mov	r0, r4
 8000d64:	f004 fa78 	bl	8005258 <HAL_HSEM_Release>
 8000d68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000d6c:	4959      	ldr	r1, [pc, #356]	; (8000ed4 <main+0x280>)
 8000d6e:	e002      	b.n	8000d76 <main+0x122>
 8000d70:	3b01      	subs	r3, #1
 8000d72:	f000 80a6 	beq.w	8000ec2 <main+0x26e>
 8000d76:	680a      	ldr	r2, [r1, #0]
 8000d78:	0410      	lsls	r0, r2, #16
 8000d7a:	d5f9      	bpl.n	8000d70 <main+0x11c>
  MX_GPIO_Init();
 8000d7c:	f7ff fd64 	bl	8000848 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d80:	f7ff fd22 	bl	80007c8 <MX_DMA_Init>
  MX_UART4_Init();
 8000d84:	f000 fdbe 	bl	8001904 <MX_UART4_Init>
  MX_I2C2_Init();
 8000d88:	f7ff fe32 	bl	80009f0 <MX_I2C2_Init>
  MX_TIM1_Init();
 8000d8c:	f000 fc12 	bl	80015b4 <MX_TIM1_Init>
  MX_UART7_Init();
 8000d90:	f000 fe00 	bl	8001994 <MX_UART7_Init>
  MX_USB_DEVICE_Init();
 8000d94:	f00f fa62 	bl	801025c <MX_USB_DEVICE_Init>
  DWT_Init();
 8000d98:	f000 f8f4 	bl	8000f84 <_Z8DWT_Initv>
  __HAL_UART_ENABLE_IT(&huart4, UART_IT_IDLE);
 8000d9c:	484e      	ldr	r0, [pc, #312]	; (8000ed8 <main+0x284>)
  HAL_UART_Receive_DMA(&huart4, sbus_buffer, SBUS_PACKET_LEN);
 8000d9e:	2219      	movs	r2, #25
 8000da0:	494e      	ldr	r1, [pc, #312]	; (8000edc <main+0x288>)
  __HAL_UART_ENABLE_IT(&huart4, UART_IT_IDLE);
 8000da2:	6804      	ldr	r4, [r0, #0]
 8000da4:	6823      	ldr	r3, [r4, #0]
 8000da6:	f043 0310 	orr.w	r3, r3, #16
 8000daa:	6023      	str	r3, [r4, #0]
  HAL_UART_Receive_DMA(&huart4, sbus_buffer, SBUS_PACKET_LEN);
 8000dac:	f00a fbcc 	bl	800b548 <HAL_UART_Receive_DMA>
  HAL_NVIC_SetPriority(HSEM1_IRQn, 0, 0);
 8000db0:	2200      	movs	r2, #0
 8000db2:	207d      	movs	r0, #125	; 0x7d
 8000db4:	4611      	mov	r1, r2
 8000db6:	f001 f956 	bl	8002066 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM1_IRQn);
 8000dba:	207d      	movs	r0, #125	; 0x7d
 8000dbc:	f001 f96d 	bl	800209a <HAL_NVIC_EnableIRQ>
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ACC));
 8000dc0:	2002      	movs	r0, #2
 8000dc2:	f004 fa5d 	bl	8005280 <HAL_HSEM_ActivateNotification>
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_MAG));
 8000dc6:	2008      	movs	r0, #8
 8000dc8:	f004 fa5a 	bl	8005280 <HAL_HSEM_ActivateNotification>
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_GPS));
 8000dcc:	2020      	movs	r0, #32
 8000dce:	f004 fa57 	bl	8005280 <HAL_HSEM_ActivateNotification>
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_BARO));
 8000dd2:	2010      	movs	r0, #16
 8000dd4:	f004 fa54 	bl	8005280 <HAL_HSEM_ActivateNotification>
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_GYRO));
 8000dd8:	2004      	movs	r0, #4
 8000dda:	f004 fa51 	bl	8005280 <HAL_HSEM_ActivateNotification>
  while (!CDC_Class_Init_Ok());
 8000dde:	f00f fa83 	bl	80102e8 <CDC_Class_Init_Ok>
 8000de2:	2800      	cmp	r0, #0
 8000de4:	d0fb      	beq.n	8000dde <main+0x18a>
  Serializer serializer;
 8000de6:	a806      	add	r0, sp, #24
 8000de8:	4c3d      	ldr	r4, [pc, #244]	; (8000ee0 <main+0x28c>)
 8000dea:	f8df 9120 	ldr.w	r9, [pc, #288]	; 8000f0c <main+0x2b8>
 8000dee:	f000 fa2f 	bl	8001250 <_ZN10SerializerC1Ev>
  HAL_Delay(1000);
 8000df2:	f8df 811c 	ldr.w	r8, [pc, #284]	; 8000f10 <main+0x2bc>
 8000df6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dfa:	4f3a      	ldr	r7, [pc, #232]	; (8000ee4 <main+0x290>)
 8000dfc:	f001 f828 	bl	8001e50 <HAL_Delay>
 8000e00:	4d39      	ldr	r5, [pc, #228]	; (8000ee8 <main+0x294>)
	  	  sensors.ReadRawData();
 8000e02:	4e3a      	ldr	r6, [pc, #232]	; (8000eec <main+0x298>)
		   sprintf(logBuf, "ax:%.7f, ay:%.7f, az:%.7f\r\n",acc.x, acc.y, acc.z);
 8000e04:	f8df b10c 	ldr.w	fp, [pc, #268]	; 8000f14 <main+0x2c0>
	  if((HAL_GetTick() - usb_timer) >= USB_UPDATE_RATE_MS)
 8000e08:	f001 f816 	bl	8001e38 <HAL_GetTick>
 8000e0c:	6823      	ldr	r3, [r4, #0]
 8000e0e:	1ac0      	subs	r0, r0, r3
 8000e10:	2809      	cmp	r0, #9
 8000e12:	d9f9      	bls.n	8000e08 <main+0x1b4>
	  	  sensors.ReadRawData();
 8000e14:	4630      	mov	r0, r6
 8000e16:	f000 f98b 	bl	8001130 <_ZN10SensorData11ReadRawDataEv>
  if ((*SCB_DHCSR & 1) && (*ITM_TER & 1)) // Enabled?
 8000e1a:	f8d9 1000 	ldr.w	r1, [r9]
  *SCB_DEMCR |= 0x01000000;
 8000e1e:	4b34      	ldr	r3, [pc, #208]	; (8000ef0 <main+0x29c>)
  *DWT_CYCCNT = 0; // reset the counter
 8000e20:	f04f 0e00 	mov.w	lr, #0
  if ((*SCB_DHCSR & 1) && (*ITM_TER & 1)) // Enabled?
 8000e24:	6809      	ldr	r1, [r1, #0]
		  acc = sensors.GetAccData();
 8000e26:	4630      	mov	r0, r6
  *SCB_DEMCR |= 0x01000000;
 8000e28:	f8d3 c000 	ldr.w	ip, [r3]
  *DWT_CONTROL |= 1 ; // enable the counter
 8000e2c:	4a31      	ldr	r2, [pc, #196]	; (8000ef4 <main+0x2a0>)
  if ((*SCB_DHCSR & 1) && (*ITM_TER & 1)) // Enabled?
 8000e2e:	07c9      	lsls	r1, r1, #31
  *DWT_LAR = 0xC5ACCE55; // enable access
 8000e30:	4b31      	ldr	r3, [pc, #196]	; (8000ef8 <main+0x2a4>)
  *DWT_CONTROL |= 1 ; // enable the counter
 8000e32:	6812      	ldr	r2, [r2, #0]
  *DWT_LAR = 0xC5ACCE55; // enable access
 8000e34:	f8d3 a000 	ldr.w	sl, [r3]
  *DWT_CYCCNT = 0; // reset the counter
 8000e38:	f8d8 3000 	ldr.w	r3, [r8]
  if ((*SCB_DHCSR & 1) && (*ITM_TER & 1)) // Enabled?
 8000e3c:	d502      	bpl.n	8000e44 <main+0x1f0>
 8000e3e:	492f      	ldr	r1, [pc, #188]	; (8000efc <main+0x2a8>)
 8000e40:	6809      	ldr	r1, [r1, #0]
 8000e42:	6809      	ldr	r1, [r1, #0]
  *SCB_DEMCR |= 0x01000000;
 8000e44:	f8dc 1000 	ldr.w	r1, [ip]
 8000e48:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8000e4c:	f8cc 1000 	str.w	r1, [ip]
  *DWT_LAR = 0xC5ACCE55; // enable access
 8000e50:	492b      	ldr	r1, [pc, #172]	; (8000f00 <main+0x2ac>)
 8000e52:	f8ca 1000 	str.w	r1, [sl]
  *DWT_CYCCNT = 0; // reset the counter
 8000e56:	f8c3 e000 	str.w	lr, [r3]
  *DWT_CONTROL |= 1 ; // enable the counter
 8000e5a:	6811      	ldr	r1, [r2, #0]
 8000e5c:	f041 0101 	orr.w	r1, r1, #1
 8000e60:	6011      	str	r1, [r2, #0]
		   x = *DWT_CYCCNT;
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	603b      	str	r3, [r7, #0]
		  acc = sensors.GetAccData();
 8000e66:	f000 f9bb 	bl	80011e0 <_ZN10SensorData10GetAccDataEv>
		   y = *DWT_CYCCNT;
 8000e6a:	f8d8 3000 	ldr.w	r3, [r8]
		   sprintf(logBuf, "ax:%.7f, ay:%.7f, az:%.7f\r\n",acc.x, acc.y, acc.z);
 8000e6e:	eeb7 7ae0 	vcvt.f64.f32	d7, s1
 8000e72:	eeb7 6ac1 	vcvt.f64.f32	d6, s2
		   y = *DWT_CYCCNT;
 8000e76:	4a23      	ldr	r2, [pc, #140]	; (8000f04 <main+0x2b0>)
 8000e78:	681b      	ldr	r3, [r3, #0]
		   sprintf(logBuf, "ax:%.7f, ay:%.7f, az:%.7f\r\n",acc.x, acc.y, acc.z);
 8000e7a:	4659      	mov	r1, fp
		  acc = sensors.GetAccData();
 8000e7c:	ed85 0a00 	vstr	s0, [r5]
		   sprintf(logBuf, "ax:%.7f, ay:%.7f, az:%.7f\r\n",acc.x, acc.y, acc.z);
 8000e80:	a816      	add	r0, sp, #88	; 0x58
		  acc = sensors.GetAccData();
 8000e82:	edc5 0a01 	vstr	s1, [r5, #4]
 8000e86:	ed85 1a02 	vstr	s2, [r5, #8]
		   sprintf(logBuf, "ax:%.7f, ay:%.7f, az:%.7f\r\n",acc.x, acc.y, acc.z);
 8000e8a:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000e8e:	ed8d 7b00 	vstr	d7, [sp]
		   y = *DWT_CYCCNT;
 8000e92:	6013      	str	r3, [r2, #0]
		   sprintf(logBuf, "ax:%.7f, ay:%.7f, az:%.7f\r\n",acc.x, acc.y, acc.z);
 8000e94:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
		   Cycles = (y - x);
 8000e98:	683a      	ldr	r2, [r7, #0]
 8000e9a:	1a9b      	subs	r3, r3, r2
 8000e9c:	4a1a      	ldr	r2, [pc, #104]	; (8000f08 <main+0x2b4>)
 8000e9e:	6013      	str	r3, [r2, #0]
		   sprintf(logBuf, "ax:%.7f, ay:%.7f, az:%.7f\r\n",acc.x, acc.y, acc.z);
 8000ea0:	ec53 2b17 	vmov	r2, r3, d7
 8000ea4:	f010 fcda 	bl	801185c <siprintf>
		CDC_Transmit_FS((uint8_t *) logBuf, strlen(logBuf));
 8000ea8:	a816      	add	r0, sp, #88	; 0x58
 8000eaa:	f7ff fa19 	bl	80002e0 <strlen>
 8000eae:	b281      	uxth	r1, r0
 8000eb0:	a816      	add	r0, sp, #88	; 0x58
 8000eb2:	f00f faed 	bl	8010490 <CDC_Transmit_FS>
		usb_timer = HAL_GetTick();
 8000eb6:	f000 ffbf 	bl	8001e38 <HAL_GetTick>
 8000eba:	6020      	str	r0, [r4, #0]
 8000ebc:	e7a4      	b.n	8000e08 <main+0x1b4>
  __ASM volatile ("cpsid i" : : : "memory");
 8000ebe:	b672      	cpsid	i
  while (1)
 8000ec0:	e7fe      	b.n	8000ec0 <main+0x26c>
 8000ec2:	b672      	cpsid	i
 8000ec4:	e7fe      	b.n	8000ec4 <main+0x270>
 8000ec6:	bf00      	nop
 8000ec8:	03000012 	.word	0x03000012
 8000ecc:	0301000f 	.word	0x0301000f
 8000ed0:	e000ed00 	.word	0xe000ed00
 8000ed4:	58024400 	.word	0x58024400
 8000ed8:	24000584 	.word	0x24000584
 8000edc:	24000518 	.word	0x24000518
 8000ee0:	2400047c 	.word	0x2400047c
 8000ee4:	24000480 	.word	0x24000480
 8000ee8:	240003d8 	.word	0x240003d8
 8000eec:	24000408 	.word	0x24000408
 8000ef0:	24000018 	.word	0x24000018
 8000ef4:	24000008 	.word	0x24000008
 8000ef8:	24000010 	.word	0x24000010
 8000efc:	24000014 	.word	0x24000014
 8000f00:	c5acce55 	.word	0xc5acce55
 8000f04:	24000484 	.word	0x24000484
 8000f08:	240003d4 	.word	0x240003d4
 8000f0c:	2400001c 	.word	0x2400001c
 8000f10:	2400000c 	.word	0x2400000c
 8000f14:	08013ab8 	.word	0x08013ab8

08000f18 <Error_Handler>:
 8000f18:	b672      	cpsid	i
 8000f1a:	e7fe      	b.n	8000f1a <Error_Handler+0x2>

08000f1c <HAL_UART_RxCpltCallback>:
  /* USER CODE END Error_Handler_Debug */
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  if (huart->Instance == UART4)
 8000f1c:	4b0b      	ldr	r3, [pc, #44]	; (8000f4c <HAL_UART_RxCpltCallback+0x30>)
 8000f1e:	6802      	ldr	r2, [r0, #0]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d000      	beq.n	8000f26 <HAL_UART_RxCpltCallback+0xa>
 8000f24:	4770      	bx	lr
  {
    if(sbus_buffer[0] != SBUS_HEADER)
 8000f26:	490a      	ldr	r1, [pc, #40]	; (8000f50 <HAL_UART_RxCpltCallback+0x34>)
 8000f28:	780b      	ldrb	r3, [r1, #0]
 8000f2a:	2b0f      	cmp	r3, #15
 8000f2c:	d00a      	beq.n	8000f44 <HAL_UART_RxCpltCallback+0x28>
{
 8000f2e:	b510      	push	{r4, lr}
    {
      HAL_UART_DMAStop(&huart4);
 8000f30:	4c08      	ldr	r4, [pc, #32]	; (8000f54 <HAL_UART_RxCpltCallback+0x38>)
 8000f32:	4620      	mov	r0, r4
 8000f34:	f00a fb4e 	bl	800b5d4 <HAL_UART_DMAStop>
      __HAL_UART_ENABLE_IT(&huart4, UART_IT_IDLE);
 8000f38:	6822      	ldr	r2, [r4, #0]
 8000f3a:	6813      	ldr	r3, [r2, #0]
 8000f3c:	f043 0310 	orr.w	r3, r3, #16
 8000f40:	6013      	str	r3, [r2, #0]
    {
    	frkskyRC.UpdateSbus(sbus_buffer);
    }
  }

}
 8000f42:	bd10      	pop	{r4, pc}
    	frkskyRC.UpdateSbus(sbus_buffer);
 8000f44:	4804      	ldr	r0, [pc, #16]	; (8000f58 <HAL_UART_RxCpltCallback+0x3c>)
 8000f46:	f000 b833 	b.w	8000fb0 <_ZN14SbusController10UpdateSbusEPh>
 8000f4a:	bf00      	nop
 8000f4c:	40004c00 	.word	0x40004c00
 8000f50:	24000518 	.word	0x24000518
 8000f54:	24000584 	.word	0x24000584
 8000f58:	240003e4 	.word	0x240003e4

08000f5c <_GLOBAL__sub_I_sensors>:
}
 8000f5c:	b508      	push	{r3, lr}
SensorData sensors;
 8000f5e:	4804      	ldr	r0, [pc, #16]	; (8000f70 <_GLOBAL__sub_I_sensors+0x14>)
 8000f60:	f000 f8ce 	bl	8001100 <_ZN10SensorDataC1Ev>
SbusController frkskyRC;
 8000f64:	4803      	ldr	r0, [pc, #12]	; (8000f74 <_GLOBAL__sub_I_sensors+0x18>)
}
 8000f66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
SbusController frkskyRC;
 8000f6a:	f000 b81d 	b.w	8000fa8 <_ZN14SbusControllerC1Ev>
 8000f6e:	bf00      	nop
 8000f70:	24000408 	.word	0x24000408
 8000f74:	240003e4 	.word	0x240003e4

08000f78 <_GLOBAL__sub_D_sensors>:
 8000f78:	4801      	ldr	r0, [pc, #4]	; (8000f80 <_GLOBAL__sub_D_sensors+0x8>)
 8000f7a:	f000 b817 	b.w	8000fac <_ZN14SbusControllerD1Ev>
 8000f7e:	bf00      	nop
 8000f80:	240003e4 	.word	0x240003e4

08000f84 <_Z8DWT_Initv>:



void DWT_Init(void)
{
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000f84:	4906      	ldr	r1, [pc, #24]	; (8000fa0 <_Z8DWT_Initv+0x1c>)
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000f86:	4a07      	ldr	r2, [pc, #28]	; (8000fa4 <_Z8DWT_Initv+0x20>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000f88:	f8d1 30fc 	ldr.w	r3, [r1, #252]	; 0xfc
 8000f8c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f90:	f8c1 30fc 	str.w	r3, [r1, #252]	; 0xfc
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000f94:	6813      	ldr	r3, [r2, #0]
 8000f96:	f043 0301 	orr.w	r3, r3, #1
 8000f9a:	6013      	str	r3, [r2, #0]
}
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	e000ed00 	.word	0xe000ed00
 8000fa4:	e0001000 	.word	0xe0001000

08000fa8 <_ZN14SbusControllerC1Ev>:
#include <sbus.h>

SbusController::SbusController()
{

}
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop

08000fac <_ZN14SbusControllerD1Ev>:

SbusController::~SbusController()
{

}
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop

08000fb0 <_ZN14SbusController10UpdateSbusEPh>:

void SbusController::UpdateSbus(uint8_t *buf)
{
	sbus_channel.channel1 = (buf[1] >> 0 | (buf[2] << 8)) & 0x07FF;
 8000fb0:	f8b1 3001 	ldrh.w	r3, [r1, #1]
	else
	{
	  channel_17 = 0;
	}
	// Failsafe
	failsafe_status = SBUS_SIGNAL_OK;
 8000fb4:	2200      	movs	r2, #0
	sbus_channel.channel1 = (buf[1] >> 0 | (buf[2] << 8)) & 0x07FF;
 8000fb6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000fba:	8083      	strh	r3, [r0, #4]
	sbus_channel.channel2 = (buf[2] >> 3 | (buf[3] << 5)) & 0x07FF;
 8000fbc:	78cb      	ldrb	r3, [r1, #3]
 8000fbe:	f891 c002 	ldrb.w	ip, [r1, #2]
 8000fc2:	015b      	lsls	r3, r3, #5
 8000fc4:	ea43 03dc 	orr.w	r3, r3, ip, lsr #3
 8000fc8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000fcc:	80c3      	strh	r3, [r0, #6]
	sbus_channel.channel3 = (buf[3] >> 6 | (buf[4] << 2) | buf[5] << 10) & 0x07FF;
 8000fce:	794b      	ldrb	r3, [r1, #5]
 8000fd0:	f891 c004 	ldrb.w	ip, [r1, #4]
 8000fd4:	029b      	lsls	r3, r3, #10
 8000fd6:	ea43 038c 	orr.w	r3, r3, ip, lsl #2
 8000fda:	f891 c003 	ldrb.w	ip, [r1, #3]
 8000fde:	ea43 139c 	orr.w	r3, r3, ip, lsr #6
 8000fe2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000fe6:	8103      	strh	r3, [r0, #8]
	sbus_channel.channel4 = (buf[5] >> 1 | (buf[6] << 7)) & 0x07FF;
 8000fe8:	798b      	ldrb	r3, [r1, #6]
 8000fea:	f891 c005 	ldrb.w	ip, [r1, #5]
 8000fee:	01db      	lsls	r3, r3, #7
 8000ff0:	ea43 035c 	orr.w	r3, r3, ip, lsr #1
 8000ff4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000ff8:	8143      	strh	r3, [r0, #10]
	sbus_channel.channel5 = (buf[6] >> 4 | (buf[7] << 4)) & 0x07FF;
 8000ffa:	79cb      	ldrb	r3, [r1, #7]
 8000ffc:	f891 c006 	ldrb.w	ip, [r1, #6]
 8001000:	011b      	lsls	r3, r3, #4
 8001002:	ea43 131c 	orr.w	r3, r3, ip, lsr #4
 8001006:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800100a:	8183      	strh	r3, [r0, #12]
	sbus_channel.channel6 = (buf[7] >> 7 | (buf[8] << 1) | buf[9] << 9) & 0x07FF;
 800100c:	7a4b      	ldrb	r3, [r1, #9]
 800100e:	f891 c008 	ldrb.w	ip, [r1, #8]
 8001012:	025b      	lsls	r3, r3, #9
 8001014:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
 8001018:	f891 c007 	ldrb.w	ip, [r1, #7]
 800101c:	ea43 13dc 	orr.w	r3, r3, ip, lsr #7
 8001020:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001024:	81c3      	strh	r3, [r0, #14]
	sbus_channel.channel7 = (buf[9] >> 2 | (buf[10] << 6)) & 0x07FF;
 8001026:	7a8b      	ldrb	r3, [r1, #10]
 8001028:	f891 c009 	ldrb.w	ip, [r1, #9]
 800102c:	019b      	lsls	r3, r3, #6
 800102e:	ea43 039c 	orr.w	r3, r3, ip, lsr #2
 8001032:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001036:	8203      	strh	r3, [r0, #16]
	sbus_channel.channel8 = (buf[10] >> 5 | (buf[11] << 3)) & 0x07FF;
 8001038:	7acb      	ldrb	r3, [r1, #11]
 800103a:	f891 c00a 	ldrb.w	ip, [r1, #10]
 800103e:	00db      	lsls	r3, r3, #3
 8001040:	ea43 135c 	orr.w	r3, r3, ip, lsr #5
 8001044:	8243      	strh	r3, [r0, #18]
	sbus_channel.channel9 = (buf[12] << 0 | (buf[13] << 8)) & 0x07FF;
 8001046:	898b      	ldrh	r3, [r1, #12]
 8001048:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800104c:	8283      	strh	r3, [r0, #20]
	sbus_channel.channel10 = (buf[13] >> 3 | (buf[14] << 5)) & 0x07FF;
 800104e:	7b8b      	ldrb	r3, [r1, #14]
 8001050:	f891 c00d 	ldrb.w	ip, [r1, #13]
 8001054:	015b      	lsls	r3, r3, #5
 8001056:	ea43 03dc 	orr.w	r3, r3, ip, lsr #3
 800105a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800105e:	82c3      	strh	r3, [r0, #22]
	sbus_channel.channel11 = (buf[14] >> 6 | (buf[15] << 2) | buf[16] << 10) & 0x07FF;
 8001060:	7c0b      	ldrb	r3, [r1, #16]
 8001062:	f891 c00f 	ldrb.w	ip, [r1, #15]
 8001066:	029b      	lsls	r3, r3, #10
 8001068:	ea43 038c 	orr.w	r3, r3, ip, lsl #2
 800106c:	f891 c00e 	ldrb.w	ip, [r1, #14]
 8001070:	ea43 139c 	orr.w	r3, r3, ip, lsr #6
 8001074:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001078:	8303      	strh	r3, [r0, #24]
	sbus_channel.channel12 = (buf[16] >> 1 | (buf[17] << 7)) & 0x07FF;
 800107a:	7c4b      	ldrb	r3, [r1, #17]
 800107c:	f891 c010 	ldrb.w	ip, [r1, #16]
 8001080:	01db      	lsls	r3, r3, #7
 8001082:	ea43 035c 	orr.w	r3, r3, ip, lsr #1
 8001086:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800108a:	8343      	strh	r3, [r0, #26]
	sbus_channel.channel13 = (buf[17] >> 4 | (buf[18] << 4)) & 0x07FF;
 800108c:	7c8b      	ldrb	r3, [r1, #18]
 800108e:	f891 c011 	ldrb.w	ip, [r1, #17]
 8001092:	011b      	lsls	r3, r3, #4
 8001094:	ea43 131c 	orr.w	r3, r3, ip, lsr #4
 8001098:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800109c:	8383      	strh	r3, [r0, #28]
	sbus_channel.channel14 = (buf[18] >> 7 | (buf[19] << 1) | buf[20] << 9) & 0x07FF;
 800109e:	7d0b      	ldrb	r3, [r1, #20]
 80010a0:	f891 c013 	ldrb.w	ip, [r1, #19]
 80010a4:	025b      	lsls	r3, r3, #9
 80010a6:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
 80010aa:	f891 c012 	ldrb.w	ip, [r1, #18]
 80010ae:	ea43 13dc 	orr.w	r3, r3, ip, lsr #7
 80010b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010b6:	83c3      	strh	r3, [r0, #30]
	sbus_channel.channel15 = (buf[20] >> 2 | (buf[21] << 6)) & 0x07FF;
 80010b8:	7d4b      	ldrb	r3, [r1, #21]
 80010ba:	f891 c014 	ldrb.w	ip, [r1, #20]
 80010be:	019b      	lsls	r3, r3, #6
 80010c0:	ea43 039c 	orr.w	r3, r3, ip, lsr #2
 80010c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010c8:	8403      	strh	r3, [r0, #32]
	sbus_channel.channel16 = (buf[21] >> 5 | (buf[22] << 3)) & 0x07FF;
 80010ca:	7d8b      	ldrb	r3, [r1, #22]
 80010cc:	f891 c015 	ldrb.w	ip, [r1, #21]
 80010d0:	00db      	lsls	r3, r3, #3
 80010d2:	ea43 135c 	orr.w	r3, r3, ip, lsr #5
 80010d6:	8443      	strh	r3, [r0, #34]	; 0x22
	if (buf[24] & (1 << 0))
 80010d8:	7e0b      	ldrb	r3, [r1, #24]
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	8003      	strh	r3, [r0, #0]
	if (buf[24] & (1 << 1))
 80010e0:	7e0b      	ldrb	r3, [r1, #24]
	failsafe_status = SBUS_SIGNAL_OK;
 80010e2:	7082      	strb	r2, [r0, #2]
	if (buf[24] & (1 << 1))
 80010e4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80010e8:	8003      	strh	r3, [r0, #0]
	if (buf[24] & (1 << 2))
 80010ea:	7e0b      	ldrb	r3, [r1, #24]
 80010ec:	075a      	lsls	r2, r3, #29
 80010ee:	d502      	bpl.n	80010f6 <_ZN14SbusController10UpdateSbusEPh+0x146>
	{
	  failsafe_status = SBUS_SIGNAL_LOST;
 80010f0:	2301      	movs	r3, #1
 80010f2:	7083      	strb	r3, [r0, #2]
	}

	if (buf[24] & (1 << 3))
 80010f4:	7e0b      	ldrb	r3, [r1, #24]
 80010f6:	071b      	lsls	r3, r3, #28
 80010f8:	d501      	bpl.n	80010fe <_ZN14SbusController10UpdateSbusEPh+0x14e>
	{
	  failsafe_status = SBUS_SIGNAL_FAILSAFE;
 80010fa:	2301      	movs	r3, #1
 80010fc:	7083      	strb	r3, [r0, #2]
	}
}
 80010fe:	4770      	bx	lr

08001100 <_ZN10SensorDataC1Ev>:





SensorData::SensorData()
 8001100:	490a      	ldr	r1, [pc, #40]	; (800112c <_ZN10SensorDataC1Ev+0x2c>)
{

	accel_timer = 0;
 8001102:	2200      	movs	r2, #0
SensorData::SensorData()
 8001104:	b410      	push	{r4}
 8001106:	f04f 5460 	mov.w	r4, #939524096	; 0x38000000
	gyro_timer = 0;
	gps_timer = 0;
	mag_timer = 0;
	baro_timer = 0;
 800110a:	6702      	str	r2, [r0, #112]	; 0x70
SensorData::SensorData()
 800110c:	e9c0 4100 	strd	r4, r1, [r0]
 8001110:	3420      	adds	r4, #32
 8001112:	3120      	adds	r1, #32
 8001114:	e9c0 4102 	strd	r4, r1, [r0, #8]
 8001118:	3110      	adds	r1, #16

}
 800111a:	f85d 4b04 	ldr.w	r4, [sp], #4
	gyro_timer = 0;
 800111e:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
	mag_timer = 0;
 8001122:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
SensorData::SensorData()
 8001126:	6101      	str	r1, [r0, #16]
}
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	38000010 	.word	0x38000010

08001130 <_ZN10SensorData11ReadRawDataEv>:

void SensorData::ReadRawData()
{
 8001130:	b538      	push	{r3, r4, r5, lr}
 8001132:	4604      	mov	r4, r0
	}
}

void SensorData::ReadAcc()
{
	if((HAL_GetTick() - accel_timer) >= ACC_UPDATE_RATE_MS)
 8001134:	f000 fe80 	bl	8001e38 <HAL_GetTick>
 8001138:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800113a:	1ac0      	subs	r0, r0, r3
 800113c:	2809      	cmp	r0, #9
 800113e:	d834      	bhi.n	80011aa <_ZN10SensorData11ReadRawDataEv+0x7a>
	}
}

void SensorData::ReadGyro()
{
	if((HAL_GetTick() - gyro_timer) >= GYRO_UPDATE_RATE_MS)
 8001140:	f000 fe7a 	bl	8001e38 <HAL_GetTick>
 8001144:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001146:	1ac0      	subs	r0, r0, r3
 8001148:	2809      	cmp	r0, #9
 800114a:	d81a      	bhi.n	8001182 <_ZN10SensorData11ReadRawDataEv+0x52>
	if((HAL_GetTick() - mag_timer) >= MAG_UPDATE_RATE_MS)
 800114c:	f000 fe74 	bl	8001e38 <HAL_GetTick>
 8001150:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8001152:	1ac0      	subs	r0, r0, r3
 8001154:	280b      	cmp	r0, #11
 8001156:	d800      	bhi.n	800115a <_ZN10SensorData11ReadRawDataEv+0x2a>
}
 8001158:	bd38      	pop	{r3, r4, r5, pc}
		mag_notify = 0;
 800115a:	4d1e      	ldr	r5, [pc, #120]	; (80011d4 <_ZN10SensorData11ReadRawDataEv+0xa4>)
 800115c:	2300      	movs	r3, #0
		HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_MAG));
 800115e:	2008      	movs	r0, #8
		mag_notify = 0;
 8001160:	602b      	str	r3, [r5, #0]
		HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_MAG));
 8001162:	f004 f88d 	bl	8005280 <HAL_HSEM_ActivateNotification>
		while(mag_notify == 0){}
 8001166:	682b      	ldr	r3, [r5, #0]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d0fc      	beq.n	8001166 <_ZN10SensorData11ReadRawDataEv+0x36>
		mag_values.x = mag_values_m7->x;
 800116c:	68a3      	ldr	r3, [r4, #8]
 800116e:	6819      	ldr	r1, [r3, #0]
		mag_values.y = mag_values_m7->y;
 8001170:	685a      	ldr	r2, [r3, #4]
		mag_values.z = mag_values_m7->z;
 8001172:	689b      	ldr	r3, [r3, #8]
		mag_values.x = mag_values_m7->x;
 8001174:	6561      	str	r1, [r4, #84]	; 0x54
		mag_values.y = mag_values_m7->y;
 8001176:	65a2      	str	r2, [r4, #88]	; 0x58
		mag_values.z = mag_values_m7->z;
 8001178:	65e3      	str	r3, [r4, #92]	; 0x5c
		mag_timer = HAL_GetTick();
 800117a:	f000 fe5d 	bl	8001e38 <HAL_GetTick>
 800117e:	66a0      	str	r0, [r4, #104]	; 0x68
}
 8001180:	bd38      	pop	{r3, r4, r5, pc}
	{
		gyro_notify = 0;
 8001182:	4d15      	ldr	r5, [pc, #84]	; (80011d8 <_ZN10SensorData11ReadRawDataEv+0xa8>)
 8001184:	2300      	movs	r3, #0
		HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_GYRO));
 8001186:	2004      	movs	r0, #4
		gyro_notify = 0;
 8001188:	602b      	str	r3, [r5, #0]
		HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_GYRO));
 800118a:	f004 f879 	bl	8005280 <HAL_HSEM_ActivateNotification>
		while(gyro_notify == 0){}
 800118e:	682b      	ldr	r3, [r5, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d0fc      	beq.n	800118e <_ZN10SensorData11ReadRawDataEv+0x5e>
		gyro_values.x = gyro_values_m7->x;
 8001194:	6863      	ldr	r3, [r4, #4]
 8001196:	6819      	ldr	r1, [r3, #0]
		gyro_values.y = gyro_values_m7->y;
 8001198:	685a      	ldr	r2, [r3, #4]
		gyro_values.z = gyro_values_m7->z;
 800119a:	689b      	ldr	r3, [r3, #8]
		gyro_values.x = gyro_values_m7->x;
 800119c:	6421      	str	r1, [r4, #64]	; 0x40
		gyro_values.y = gyro_values_m7->y;
 800119e:	6462      	str	r2, [r4, #68]	; 0x44
		gyro_values.z = gyro_values_m7->z;
 80011a0:	64a3      	str	r3, [r4, #72]	; 0x48
		gyro_timer = HAL_GetTick();
 80011a2:	f000 fe49 	bl	8001e38 <HAL_GetTick>
 80011a6:	6660      	str	r0, [r4, #100]	; 0x64
	}
}
 80011a8:	e7d0      	b.n	800114c <_ZN10SensorData11ReadRawDataEv+0x1c>
		acc_notify = 0;
 80011aa:	4d0c      	ldr	r5, [pc, #48]	; (80011dc <_ZN10SensorData11ReadRawDataEv+0xac>)
 80011ac:	2300      	movs	r3, #0
		HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ACC));
 80011ae:	2002      	movs	r0, #2
		acc_notify = 0;
 80011b0:	602b      	str	r3, [r5, #0]
		HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ACC));
 80011b2:	f004 f865 	bl	8005280 <HAL_HSEM_ActivateNotification>
		while(acc_notify == 0){}
 80011b6:	682b      	ldr	r3, [r5, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d0fc      	beq.n	80011b6 <_ZN10SensorData11ReadRawDataEv+0x86>
		acc_values.x = acc_values_m7->x;
 80011bc:	6823      	ldr	r3, [r4, #0]
 80011be:	6819      	ldr	r1, [r3, #0]
		acc_values.y = acc_values_m7->y;
 80011c0:	685a      	ldr	r2, [r3, #4]
		acc_values.z = acc_values_m7->z;
 80011c2:	689b      	ldr	r3, [r3, #8]
		acc_values.x = acc_values_m7->x;
 80011c4:	6361      	str	r1, [r4, #52]	; 0x34
		acc_values.y = acc_values_m7->y;
 80011c6:	63a2      	str	r2, [r4, #56]	; 0x38
		acc_values.z = acc_values_m7->z;
 80011c8:	63e3      	str	r3, [r4, #60]	; 0x3c
		accel_timer = HAL_GetTick();
 80011ca:	f000 fe35 	bl	8001e38 <HAL_GetTick>
 80011ce:	6620      	str	r0, [r4, #96]	; 0x60
}
 80011d0:	e7b6      	b.n	8001140 <_ZN10SensorData11ReadRawDataEv+0x10>
 80011d2:	bf00      	nop
 80011d4:	24000514 	.word	0x24000514
 80011d8:	24000510 	.word	0x24000510
 80011dc:	24000504 	.word	0x24000504

080011e0 <_ZN10SensorData10GetAccDataEv>:
}



accelData SensorData::GetAccData()
{
 80011e0:	b088      	sub	sp, #32
	return acc_values;
 80011e2:	3034      	adds	r0, #52	; 0x34
 80011e4:	ab08      	add	r3, sp, #32
 80011e6:	c807      	ldmia	r0, {r0, r1, r2}
 80011e8:	e903 0007 	stmdb	r3, {r0, r1, r2}
}
 80011ec:	eddd 0a06 	vldr	s1, [sp, #24]
 80011f0:	ed9d 1a07 	vldr	s2, [sp, #28]
 80011f4:	ed9d 0a05 	vldr	s0, [sp, #20]
 80011f8:	b008      	add	sp, #32
 80011fa:	4770      	bx	lr

080011fc <HAL_HSEM_FreeCallback>:
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
	if(SemMask == SEM_MASK_ACC)
 80011fc:	2802      	cmp	r0, #2
 80011fe:	d00b      	beq.n	8001218 <HAL_HSEM_FreeCallback+0x1c>
	{
		acc_notify = 1;
	}
	if(SemMask == SEM_MASK_GYRO)
 8001200:	2804      	cmp	r0, #4
 8001202:	d103      	bne.n	800120c <HAL_HSEM_FreeCallback+0x10>
	{
		gyro_notify = 1;
 8001204:	4b0d      	ldr	r3, [pc, #52]	; (800123c <HAL_HSEM_FreeCallback+0x40>)
 8001206:	2201      	movs	r2, #1
 8001208:	601a      	str	r2, [r3, #0]
	}
	if(SemMask == SEM_MASK_BARO)
	{
		baro_notify = 1;
	}
	if(SemMask == SEM_MASK_GPS)
 800120a:	4770      	bx	lr
	if(SemMask == SEM_MASK_MAG)
 800120c:	2808      	cmp	r0, #8
 800120e:	d107      	bne.n	8001220 <HAL_HSEM_FreeCallback+0x24>
		mag_notify = 1;
 8001210:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <HAL_HSEM_FreeCallback+0x44>)
 8001212:	2201      	movs	r2, #1
 8001214:	601a      	str	r2, [r3, #0]
	if(SemMask == SEM_MASK_GPS)
 8001216:	4770      	bx	lr
		acc_notify = 1;
 8001218:	4b0a      	ldr	r3, [pc, #40]	; (8001244 <HAL_HSEM_FreeCallback+0x48>)
 800121a:	2201      	movs	r2, #1
 800121c:	601a      	str	r2, [r3, #0]
	if(SemMask == SEM_MASK_GPS)
 800121e:	4770      	bx	lr
	if(SemMask == SEM_MASK_BARO)
 8001220:	2810      	cmp	r0, #16
 8001222:	d103      	bne.n	800122c <HAL_HSEM_FreeCallback+0x30>
		baro_notify = 1;
 8001224:	4b08      	ldr	r3, [pc, #32]	; (8001248 <HAL_HSEM_FreeCallback+0x4c>)
 8001226:	2201      	movs	r2, #1
 8001228:	601a      	str	r2, [r3, #0]
	if(SemMask == SEM_MASK_GPS)
 800122a:	4770      	bx	lr
 800122c:	2820      	cmp	r0, #32
 800122e:	d103      	bne.n	8001238 <HAL_HSEM_FreeCallback+0x3c>
	{
		gps_notify = 1;
 8001230:	4b06      	ldr	r3, [pc, #24]	; (800124c <HAL_HSEM_FreeCallback+0x50>)
 8001232:	2201      	movs	r2, #1
 8001234:	601a      	str	r2, [r3, #0]
	}
}
 8001236:	4770      	bx	lr
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	24000510 	.word	0x24000510
 8001240:	24000514 	.word	0x24000514
 8001244:	24000504 	.word	0x24000504
 8001248:	24000508 	.word	0x24000508
 800124c:	2400050c 	.word	0x2400050c

08001250 <_ZN10SerializerC1Ev>:
		usb_timer(0),
		acc_timer(0),
		gyro_timer(0),
		gps_timer(0),
		mag_timer(0),
		baro_timer(0)
 8001250:	2200      	movs	r2, #0
 8001252:	e9c0 2200 	strd	r2, r2, [r0]
 8001256:	e9c0 2202 	strd	r2, r2, [r0, #8]
 800125a:	e9c0 2204 	strd	r2, r2, [r0, #16]
{

}
 800125e:	4770      	bx	lr

08001260 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001266:	4b0a      	ldr	r3, [pc, #40]	; (8001290 <HAL_MspInit+0x30>)
 8001268:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800126c:	4a08      	ldr	r2, [pc, #32]	; (8001290 <HAL_MspInit+0x30>)
 800126e:	f043 0302 	orr.w	r3, r3, #2
 8001272:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001276:	4b06      	ldr	r3, [pc, #24]	; (8001290 <HAL_MspInit+0x30>)
 8001278:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800127c:	f003 0302 	and.w	r3, r3, #2
 8001280:	607b      	str	r3, [r7, #4]
 8001282:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001284:	bf00      	nop
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	58024400 	.word	0x58024400

08001294 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001298:	e7fe      	b.n	8001298 <NMI_Handler+0x4>

0800129a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800129a:	b480      	push	{r7}
 800129c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800129e:	e7fe      	b.n	800129e <HardFault_Handler+0x4>

080012a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012a4:	e7fe      	b.n	80012a4 <MemManage_Handler+0x4>

080012a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012a6:	b480      	push	{r7}
 80012a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012aa:	e7fe      	b.n	80012aa <BusFault_Handler+0x4>

080012ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012b0:	e7fe      	b.n	80012b0 <UsageFault_Handler+0x4>

080012b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012b2:	b480      	push	{r7}
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012c4:	bf00      	nop
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr

080012ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ce:	b480      	push	{r7}
 80012d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012e0:	f000 fd96 	bl	8001e10 <HAL_IncTick>

  HAL_SYSTICK_IRQHandler();
 80012e4:	f000 ff70 	bl	80021c8 <HAL_SYSTICK_IRQHandler>

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012e8:	bf00      	nop
 80012ea:	bd80      	pop	{r7, pc}

080012ec <DMA2_Stream7_IRQHandler>:
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32h7xx.s).                    */
/******************************************************************************/

void DMA2_Stream7_IRQHandler(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80012f0:	4802      	ldr	r0, [pc, #8]	; (80012fc <DMA2_Stream7_IRQHandler+0x10>)
 80012f2:	f002 faa1 	bl	8003838 <HAL_DMA_IRQHandler>
}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	24000794 	.word	0x24000794

08001300 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 8001304:	4802      	ldr	r0, [pc, #8]	; (8001310 <DMA1_Stream5_IRQHandler+0x10>)
 8001306:	f002 fa97 	bl	8003838 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	240006a4 	.word	0x240006a4

08001314 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_tx);
 8001318:	4802      	ldr	r0, [pc, #8]	; (8001324 <DMA1_Stream6_IRQHandler+0x10>)
 800131a:	f002 fa8d 	bl	8003838 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	2400071c 	.word	0x2400071c

08001328 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800132c:	4802      	ldr	r0, [pc, #8]	; (8001338 <TIM1_BRK_IRQHandler+0x10>)
 800132e:	f009 f83b 	bl	800a3a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	24000538 	.word	0x24000538

0800133c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001340:	4802      	ldr	r0, [pc, #8]	; (800134c <TIM1_UP_IRQHandler+0x10>)
 8001342:	f009 f831 	bl	800a3a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	24000538 	.word	0x24000538

08001350 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001354:	4802      	ldr	r0, [pc, #8]	; (8001360 <TIM1_TRG_COM_IRQHandler+0x10>)
 8001356:	f009 f827 	bl	800a3a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	24000538 	.word	0x24000538

08001364 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001368:	4802      	ldr	r0, [pc, #8]	; (8001374 <TIM1_CC_IRQHandler+0x10>)
 800136a:	f009 f81d 	bl	800a3a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	24000538 	.word	0x24000538

08001378 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800137c:	4802      	ldr	r0, [pc, #8]	; (8001388 <I2C2_EV_IRQHandler+0x10>)
 800137e:	f004 f83b 	bl	80053f8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	24000388 	.word	0x24000388

0800138c <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001390:	4802      	ldr	r0, [pc, #8]	; (800139c <I2C2_ER_IRQHandler+0x10>)
 8001392:	f004 f84b 	bl	800542c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	24000388 	.word	0x24000388

080013a0 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80013a4:	4802      	ldr	r0, [pc, #8]	; (80013b0 <SDMMC1_IRQHandler+0x10>)
 80013a6:	f008 fccd 	bl	8009d44 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	24000488 	.word	0x24000488

080013b4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
  if(__HAL_UART_GET_IT_SOURCE(&huart4, UART_IT_IDLE))
 80013b8:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <UART4_IRQHandler+0x38>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0310 	and.w	r3, r3, #16
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d00c      	beq.n	80013e0 <UART4_IRQHandler+0x2c>
  {
     HAL_UART_Receive_DMA(&huart4, sbus_buffer, SBUS_PACKET_LEN);
 80013c6:	2219      	movs	r2, #25
 80013c8:	4909      	ldr	r1, [pc, #36]	; (80013f0 <UART4_IRQHandler+0x3c>)
 80013ca:	4808      	ldr	r0, [pc, #32]	; (80013ec <UART4_IRQHandler+0x38>)
 80013cc:	f00a f8bc 	bl	800b548 <HAL_UART_Receive_DMA>
    __HAL_UART_DISABLE_IT(&huart4, UART_IT_IDLE);
 80013d0:	4b06      	ldr	r3, [pc, #24]	; (80013ec <UART4_IRQHandler+0x38>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	4b05      	ldr	r3, [pc, #20]	; (80013ec <UART4_IRQHandler+0x38>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f022 0210 	bic.w	r2, r2, #16
 80013de:	601a      	str	r2, [r3, #0]
  }
  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80013e0:	4802      	ldr	r0, [pc, #8]	; (80013ec <UART4_IRQHandler+0x38>)
 80013e2:	f00a f967 	bl	800b6b4 <HAL_UART_IRQHandler>

  /* USER CODE END UART4_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	24000584 	.word	0x24000584
 80013f0:	24000518 	.word	0x24000518

080013f4 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 80013f8:	4802      	ldr	r0, [pc, #8]	; (8001404 <UART7_IRQHandler+0x10>)
 80013fa:	f00a f95b 	bl	800b6b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	24000614 	.word	0x24000614

08001408 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800140c:	4802      	ldr	r0, [pc, #8]	; (8001418 <OTG_FS_IRQHandler+0x10>)
 800140e:	f005 f866 	bl	80064de <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	24001cf4 	.word	0x24001cf4

0800141c <HSEM1_IRQHandler>:

/* USER CODE BEGIN 1 */
void HSEM1_IRQHandler(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
//    uint32_t status_reg = HSEM_COMMON->MISR;
//    HSEM_COMMON->ICR = (status_reg);
//    NVIC_ClearPendingIRQ(HSEM1_IRQn);
//
//    lock_unlock_callback(status_reg);
	HAL_HSEM_IRQHandler();
 8001420:	f003 ff40 	bl	80052a4 <HAL_HSEM_IRQHandler>
}
 8001424:	bf00      	nop
 8001426:	bd80      	pop	{r7, pc}

08001428 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
	return 1;
 800142c:	2301      	movs	r3, #1
}
 800142e:	4618      	mov	r0, r3
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <_kill>:

int _kill(int pid, int sig)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001442:	f00f fc89 	bl	8010d58 <__errno>
 8001446:	4603      	mov	r3, r0
 8001448:	2216      	movs	r2, #22
 800144a:	601a      	str	r2, [r3, #0]
	return -1;
 800144c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001450:	4618      	mov	r0, r3
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <_exit>:

void _exit (int status)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001460:	f04f 31ff 	mov.w	r1, #4294967295
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f7ff ffe7 	bl	8001438 <_kill>
	while (1) {}		/* Make sure we hang here */
 800146a:	e7fe      	b.n	800146a <_exit+0x12>

0800146c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001478:	2300      	movs	r3, #0
 800147a:	617b      	str	r3, [r7, #20]
 800147c:	e00a      	b.n	8001494 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800147e:	f3af 8000 	nop.w
 8001482:	4601      	mov	r1, r0
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	1c5a      	adds	r2, r3, #1
 8001488:	60ba      	str	r2, [r7, #8]
 800148a:	b2ca      	uxtb	r2, r1
 800148c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	3301      	adds	r3, #1
 8001492:	617b      	str	r3, [r7, #20]
 8001494:	697a      	ldr	r2, [r7, #20]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	429a      	cmp	r2, r3
 800149a:	dbf0      	blt.n	800147e <_read+0x12>
	}

return len;
 800149c:	687b      	ldr	r3, [r7, #4]
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3718      	adds	r7, #24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b086      	sub	sp, #24
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	60f8      	str	r0, [r7, #12]
 80014ae:	60b9      	str	r1, [r7, #8]
 80014b0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014b2:	2300      	movs	r3, #0
 80014b4:	617b      	str	r3, [r7, #20]
 80014b6:	e009      	b.n	80014cc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	1c5a      	adds	r2, r3, #1
 80014bc:	60ba      	str	r2, [r7, #8]
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	3301      	adds	r3, #1
 80014ca:	617b      	str	r3, [r7, #20]
 80014cc:	697a      	ldr	r2, [r7, #20]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	dbf1      	blt.n	80014b8 <_write+0x12>
	}
	return len;
 80014d4:	687b      	ldr	r3, [r7, #4]
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3718      	adds	r7, #24
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <_close>:

int _close(int file)
{
 80014de:	b480      	push	{r7}
 80014e0:	b083      	sub	sp, #12
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
	return -1;
 80014e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014f6:	b480      	push	{r7}
 80014f8:	b083      	sub	sp, #12
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
 80014fe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001506:	605a      	str	r2, [r3, #4]
	return 0;
 8001508:	2300      	movs	r3, #0
}
 800150a:	4618      	mov	r0, r3
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr

08001516 <_isatty>:

int _isatty(int file)
{
 8001516:	b480      	push	{r7}
 8001518:	b083      	sub	sp, #12
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
	return 1;
 800151e:	2301      	movs	r3, #1
}
 8001520:	4618      	mov	r0, r3
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800152c:	b480      	push	{r7}
 800152e:	b085      	sub	sp, #20
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	60b9      	str	r1, [r7, #8]
 8001536:	607a      	str	r2, [r7, #4]
	return 0;
 8001538:	2300      	movs	r3, #0
}
 800153a:	4618      	mov	r0, r3
 800153c:	3714      	adds	r7, #20
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
	...

08001548 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b086      	sub	sp, #24
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001550:	4a14      	ldr	r2, [pc, #80]	; (80015a4 <_sbrk+0x5c>)
 8001552:	4b15      	ldr	r3, [pc, #84]	; (80015a8 <_sbrk+0x60>)
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800155c:	4b13      	ldr	r3, [pc, #76]	; (80015ac <_sbrk+0x64>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d102      	bne.n	800156a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001564:	4b11      	ldr	r3, [pc, #68]	; (80015ac <_sbrk+0x64>)
 8001566:	4a12      	ldr	r2, [pc, #72]	; (80015b0 <_sbrk+0x68>)
 8001568:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800156a:	4b10      	ldr	r3, [pc, #64]	; (80015ac <_sbrk+0x64>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4413      	add	r3, r2
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	429a      	cmp	r2, r3
 8001576:	d207      	bcs.n	8001588 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001578:	f00f fbee 	bl	8010d58 <__errno>
 800157c:	4603      	mov	r3, r0
 800157e:	220c      	movs	r2, #12
 8001580:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001582:	f04f 33ff 	mov.w	r3, #4294967295
 8001586:	e009      	b.n	800159c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001588:	4b08      	ldr	r3, [pc, #32]	; (80015ac <_sbrk+0x64>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800158e:	4b07      	ldr	r3, [pc, #28]	; (80015ac <_sbrk+0x64>)
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4413      	add	r3, r2
 8001596:	4a05      	ldr	r2, [pc, #20]	; (80015ac <_sbrk+0x64>)
 8001598:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800159a:	68fb      	ldr	r3, [r7, #12]
}
 800159c:	4618      	mov	r0, r3
 800159e:	3718      	adds	r7, #24
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	24080000 	.word	0x24080000
 80015a8:	00000400 	.word	0x00000400
 80015ac:	24000534 	.word	0x24000534
 80015b0:	24002110 	.word	0x24002110

080015b4 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b0a4      	sub	sp, #144	; 0x90
 80015b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ba:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	605a      	str	r2, [r3, #4]
 80015c4:	609a      	str	r2, [r3, #8]
 80015c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015c8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015d4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	609a      	str	r2, [r3, #8]
 80015e0:	60da      	str	r2, [r3, #12]
 80015e2:	611a      	str	r2, [r3, #16]
 80015e4:	615a      	str	r2, [r3, #20]
 80015e6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ec:	222c      	movs	r2, #44	; 0x2c
 80015ee:	2100      	movs	r1, #0
 80015f0:	4618      	mov	r0, r3
 80015f2:	f00f fbf9 	bl	8010de8 <memset>
  RCC_ClkInitTypeDef clk_init_struct = {0};
 80015f6:	1d3b      	adds	r3, r7, #4
 80015f8:	2220      	movs	r2, #32
 80015fa:	2100      	movs	r1, #0
 80015fc:	4618      	mov	r0, r3
 80015fe:	f00f fbf3 	bl	8010de8 <memset>


  /* USER CODE BEGIN TIM1_Init 1 */

  uint32_t latency = 0;
 8001602:	2300      	movs	r3, #0
 8001604:	603b      	str	r3, [r7, #0]
  uint32_t timer_clock_frequency = 0;
 8001606:	2300      	movs	r3, #0
 8001608:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t timer_prescaler = 0;
 800160c:	2300      	movs	r3, #0
 800160e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  /* USER CODE END TIM1_Init 1 */

  HAL_RCC_GetClockConfig(&clk_init_struct, &latency);
 8001612:	463a      	mov	r2, r7
 8001614:	1d3b      	adds	r3, r7, #4
 8001616:	4611      	mov	r1, r2
 8001618:	4618      	mov	r0, r3
 800161a:	f006 ffe9 	bl	80085f0 <HAL_RCC_GetClockConfig>

  if(clk_init_struct.APB1CLKDivider == RCC_HCLK_DIV1)
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d104      	bne.n	800162e <MX_TIM1_Init+0x7a>
  {
    timer_clock_frequency = HAL_RCC_GetPCLK1Freq();
 8001624:	f006 ffb8 	bl	8008598 <HAL_RCC_GetPCLK1Freq>
 8001628:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 800162c:	e005      	b.n	800163a <MX_TIM1_Init+0x86>
  }

  else
  {
    timer_clock_frequency = HAL_RCC_GetPCLK1Freq() * 2;
 800162e:	f006 ffb3 	bl	8008598 <HAL_RCC_GetPCLK1Freq>
 8001632:	4603      	mov	r3, r0
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  }

  timer_prescaler = (timer_clock_frequency / (TIMER_PRESCALER_MAX_VALUE * TIMER_FREQUENCY_RANGE_MIN)) +1;
 800163a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800163e:	4a5f      	ldr	r2, [pc, #380]	; (80017bc <MX_TIM1_Init+0x208>)
 8001640:	fba2 2303 	umull	r2, r3, r2, r3
 8001644:	0c9b      	lsrs	r3, r3, #18
 8001646:	3301      	adds	r3, #1
 8001648:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  htim1.Instance = TIM1;
 800164c:	4b5c      	ldr	r3, [pc, #368]	; (80017c0 <MX_TIM1_Init+0x20c>)
 800164e:	4a5d      	ldr	r2, [pc, #372]	; (80017c4 <MX_TIM1_Init+0x210>)
 8001650:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = (timer_prescaler - 1);
 8001652:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001656:	3b01      	subs	r3, #1
 8001658:	4a59      	ldr	r2, [pc, #356]	; (80017c0 <MX_TIM1_Init+0x20c>)
 800165a:	6053      	str	r3, [r2, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800165c:	4b58      	ldr	r3, [pc, #352]	; (80017c0 <MX_TIM1_Init+0x20c>)
 800165e:	2200      	movs	r2, #0
 8001660:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = ((timer_clock_frequency / (timer_prescaler * TIMER_FREQUENCY)) - 1);
 8001662:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001666:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800166a:	fb02 f303 	mul.w	r3, r2, r3
 800166e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001672:	fbb2 f3f3 	udiv	r3, r2, r3
 8001676:	3b01      	subs	r3, #1
 8001678:	4a51      	ldr	r2, [pc, #324]	; (80017c0 <MX_TIM1_Init+0x20c>)
 800167a:	60d3      	str	r3, [r2, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800167c:	4b50      	ldr	r3, [pc, #320]	; (80017c0 <MX_TIM1_Init+0x20c>)
 800167e:	2200      	movs	r2, #0
 8001680:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001682:	4b4f      	ldr	r3, [pc, #316]	; (80017c0 <MX_TIM1_Init+0x20c>)
 8001684:	2200      	movs	r2, #0
 8001686:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001688:	4b4d      	ldr	r3, [pc, #308]	; (80017c0 <MX_TIM1_Init+0x20c>)
 800168a:	2200      	movs	r2, #0
 800168c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800168e:	484c      	ldr	r0, [pc, #304]	; (80017c0 <MX_TIM1_Init+0x20c>)
 8001690:	f008 fdd2 	bl	800a238 <HAL_TIM_Base_Init>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_TIM1_Init+0xea>
  {
    Error_Handler();
 800169a:	f7ff fc3d 	bl	8000f18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800169e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016a2:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80016a4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80016a8:	4619      	mov	r1, r3
 80016aa:	4845      	ldr	r0, [pc, #276]	; (80017c0 <MX_TIM1_Init+0x20c>)
 80016ac:	f009 f8ac 	bl	800a808 <HAL_TIM_ConfigClockSource>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 80016b6:	f7ff fc2f 	bl	8000f18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80016ba:	4841      	ldr	r0, [pc, #260]	; (80017c0 <MX_TIM1_Init+0x20c>)
 80016bc:	f008 fe13 	bl	800a2e6 <HAL_TIM_PWM_Init>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80016c6:	f7ff fc27 	bl	8000f18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016ca:	2300      	movs	r3, #0
 80016cc:	66fb      	str	r3, [r7, #108]	; 0x6c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80016ce:	2300      	movs	r3, #0
 80016d0:	673b      	str	r3, [r7, #112]	; 0x70
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016d2:	2300      	movs	r3, #0
 80016d4:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016d6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80016da:	4619      	mov	r1, r3
 80016dc:	4838      	ldr	r0, [pc, #224]	; (80017c0 <MX_TIM1_Init+0x20c>)
 80016de:	f009 fdbf 	bl	800b260 <HAL_TIMEx_MasterConfigSynchronization>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 80016e8:	f7ff fc16 	bl	8000f18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016ec:	2360      	movs	r3, #96	; 0x60
 80016ee:	653b      	str	r3, [r7, #80]	; 0x50
  sConfigOC.Pulse = 50;
 80016f0:	2332      	movs	r3, #50	; 0x32
 80016f2:	657b      	str	r3, [r7, #84]	; 0x54
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016f4:	2300      	movs	r3, #0
 80016f6:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016f8:	2300      	movs	r3, #0
 80016fa:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016fc:	2300      	movs	r3, #0
 80016fe:	663b      	str	r3, [r7, #96]	; 0x60
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001700:	2300      	movs	r3, #0
 8001702:	667b      	str	r3, [r7, #100]	; 0x64
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001704:	2300      	movs	r3, #0
 8001706:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001708:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800170c:	2200      	movs	r2, #0
 800170e:	4619      	mov	r1, r3
 8001710:	482b      	ldr	r0, [pc, #172]	; (80017c0 <MX_TIM1_Init+0x20c>)
 8001712:	f008 ff69 	bl	800a5e8 <HAL_TIM_PWM_ConfigChannel>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_TIM1_Init+0x16c>
  {
    Error_Handler();
 800171c:	f7ff fbfc 	bl	8000f18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001720:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001724:	2204      	movs	r2, #4
 8001726:	4619      	mov	r1, r3
 8001728:	4825      	ldr	r0, [pc, #148]	; (80017c0 <MX_TIM1_Init+0x20c>)
 800172a:	f008 ff5d 	bl	800a5e8 <HAL_TIM_PWM_ConfigChannel>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <MX_TIM1_Init+0x184>
  {
    Error_Handler();
 8001734:	f7ff fbf0 	bl	8000f18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001738:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800173c:	2208      	movs	r2, #8
 800173e:	4619      	mov	r1, r3
 8001740:	481f      	ldr	r0, [pc, #124]	; (80017c0 <MX_TIM1_Init+0x20c>)
 8001742:	f008 ff51 	bl	800a5e8 <HAL_TIM_PWM_ConfigChannel>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_TIM1_Init+0x19c>
  {
    Error_Handler();
 800174c:	f7ff fbe4 	bl	8000f18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001750:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001754:	220c      	movs	r2, #12
 8001756:	4619      	mov	r1, r3
 8001758:	4819      	ldr	r0, [pc, #100]	; (80017c0 <MX_TIM1_Init+0x20c>)
 800175a:	f008 ff45 	bl	800a5e8 <HAL_TIM_PWM_ConfigChannel>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_TIM1_Init+0x1b4>
  {
    Error_Handler();
 8001764:	f7ff fbd8 	bl	8000f18 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001768:	2300      	movs	r3, #0
 800176a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800176c:	2300      	movs	r3, #0
 800176e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001770:	2300      	movs	r3, #0
 8001772:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.DeadTime = 0;
 8001774:	2300      	movs	r3, #0
 8001776:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001778:	2300      	movs	r3, #0
 800177a:	637b      	str	r3, [r7, #52]	; 0x34
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800177c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001780:	63bb      	str	r3, [r7, #56]	; 0x38
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001782:	2300      	movs	r3, #0
 8001784:	63fb      	str	r3, [r7, #60]	; 0x3c
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001786:	2300      	movs	r3, #0
 8001788:	643b      	str	r3, [r7, #64]	; 0x40
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800178a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800178e:	647b      	str	r3, [r7, #68]	; 0x44
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001790:	2300      	movs	r3, #0
 8001792:	64bb      	str	r3, [r7, #72]	; 0x48
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001794:	2300      	movs	r3, #0
 8001796:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001798:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800179c:	4619      	mov	r1, r3
 800179e:	4808      	ldr	r0, [pc, #32]	; (80017c0 <MX_TIM1_Init+0x20c>)
 80017a0:	f009 fde6 	bl	800b370 <HAL_TIMEx_ConfigBreakDeadTime>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_TIM1_Init+0x1fa>
  {
    Error_Handler();
 80017aa:	f7ff fbb5 	bl	8000f18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80017ae:	4804      	ldr	r0, [pc, #16]	; (80017c0 <MX_TIM1_Init+0x20c>)
 80017b0:	f000 f84a 	bl	8001848 <HAL_TIM_MspPostInit>

}
 80017b4:	bf00      	nop
 80017b6:	3790      	adds	r7, #144	; 0x90
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	66673335 	.word	0x66673335
 80017c0:	24000538 	.word	0x24000538
 80017c4:	40010000 	.word	0x40010000

080017c8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a1a      	ldr	r2, [pc, #104]	; (8001840 <HAL_TIM_Base_MspInit+0x78>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d12e      	bne.n	8001838 <HAL_TIM_Base_MspInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017da:	4b1a      	ldr	r3, [pc, #104]	; (8001844 <HAL_TIM_Base_MspInit+0x7c>)
 80017dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80017e0:	4a18      	ldr	r2, [pc, #96]	; (8001844 <HAL_TIM_Base_MspInit+0x7c>)
 80017e2:	f043 0301 	orr.w	r3, r3, #1
 80017e6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80017ea:	4b16      	ldr	r3, [pc, #88]	; (8001844 <HAL_TIM_Base_MspInit+0x7c>)
 80017ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80017f0:	f003 0301 	and.w	r3, r3, #1
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 80017f8:	2200      	movs	r2, #0
 80017fa:	2100      	movs	r1, #0
 80017fc:	2018      	movs	r0, #24
 80017fe:	f000 fc32 	bl	8002066 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8001802:	2018      	movs	r0, #24
 8001804:	f000 fc49 	bl	800209a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001808:	2200      	movs	r2, #0
 800180a:	2100      	movs	r1, #0
 800180c:	2019      	movs	r0, #25
 800180e:	f000 fc2a 	bl	8002066 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001812:	2019      	movs	r0, #25
 8001814:	f000 fc41 	bl	800209a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8001818:	2200      	movs	r2, #0
 800181a:	2100      	movs	r1, #0
 800181c:	201a      	movs	r0, #26
 800181e:	f000 fc22 	bl	8002066 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8001822:	201a      	movs	r0, #26
 8001824:	f000 fc39 	bl	800209a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001828:	2200      	movs	r2, #0
 800182a:	2100      	movs	r1, #0
 800182c:	201b      	movs	r0, #27
 800182e:	f000 fc1a 	bl	8002066 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001832:	201b      	movs	r0, #27
 8001834:	f000 fc31 	bl	800209a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001838:	bf00      	nop
 800183a:	3710      	adds	r7, #16
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40010000 	.word	0x40010000
 8001844:	58024400 	.word	0x58024400

08001848 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b08a      	sub	sp, #40	; 0x28
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001850:	f107 0314 	add.w	r3, r7, #20
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	609a      	str	r2, [r3, #8]
 800185c:	60da      	str	r2, [r3, #12]
 800185e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a23      	ldr	r2, [pc, #140]	; (80018f4 <HAL_TIM_MspPostInit+0xac>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d13f      	bne.n	80018ea <HAL_TIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800186a:	4b23      	ldr	r3, [pc, #140]	; (80018f8 <HAL_TIM_MspPostInit+0xb0>)
 800186c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001870:	4a21      	ldr	r2, [pc, #132]	; (80018f8 <HAL_TIM_MspPostInit+0xb0>)
 8001872:	f043 0310 	orr.w	r3, r3, #16
 8001876:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800187a:	4b1f      	ldr	r3, [pc, #124]	; (80018f8 <HAL_TIM_MspPostInit+0xb0>)
 800187c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001880:	f003 0310 	and.w	r3, r3, #16
 8001884:	613b      	str	r3, [r7, #16]
 8001886:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001888:	4b1b      	ldr	r3, [pc, #108]	; (80018f8 <HAL_TIM_MspPostInit+0xb0>)
 800188a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800188e:	4a1a      	ldr	r2, [pc, #104]	; (80018f8 <HAL_TIM_MspPostInit+0xb0>)
 8001890:	f043 0301 	orr.w	r3, r3, #1
 8001894:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001898:	4b17      	ldr	r3, [pc, #92]	; (80018f8 <HAL_TIM_MspPostInit+0xb0>)
 800189a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	68fb      	ldr	r3, [r7, #12]
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 80018a6:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80018aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ac:	2302      	movs	r3, #2
 80018ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b0:	2300      	movs	r3, #0
 80018b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b4:	2300      	movs	r3, #0
 80018b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80018b8:	2301      	movs	r3, #1
 80018ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018bc:	f107 0314 	add.w	r3, r7, #20
 80018c0:	4619      	mov	r1, r3
 80018c2:	480e      	ldr	r0, [pc, #56]	; (80018fc <HAL_TIM_MspPostInit+0xb4>)
 80018c4:	f003 fae4 	bl	8004e90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80018c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ce:	2302      	movs	r3, #2
 80018d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d2:	2300      	movs	r3, #0
 80018d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d6:	2300      	movs	r3, #0
 80018d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80018da:	2301      	movs	r3, #1
 80018dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018de:	f107 0314 	add.w	r3, r7, #20
 80018e2:	4619      	mov	r1, r3
 80018e4:	4806      	ldr	r0, [pc, #24]	; (8001900 <HAL_TIM_MspPostInit+0xb8>)
 80018e6:	f003 fad3 	bl	8004e90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80018ea:	bf00      	nop
 80018ec:	3728      	adds	r7, #40	; 0x28
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	40010000 	.word	0x40010000
 80018f8:	58024400 	.word	0x58024400
 80018fc:	58021000 	.word	0x58021000
 8001900:	58020000 	.word	0x58020000

08001904 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart7_rx;
DMA_HandleTypeDef hdma_uart7_tx;
DMA_HandleTypeDef hdma_uart4_rx;
/* UART4 init function */
void MX_UART4_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001908:	4b1f      	ldr	r3, [pc, #124]	; (8001988 <MX_UART4_Init+0x84>)
 800190a:	4a20      	ldr	r2, [pc, #128]	; (800198c <MX_UART4_Init+0x88>)
 800190c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 100000;
 800190e:	4b1e      	ldr	r3, [pc, #120]	; (8001988 <MX_UART4_Init+0x84>)
 8001910:	4a1f      	ldr	r2, [pc, #124]	; (8001990 <MX_UART4_Init+0x8c>)
 8001912:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_9B;
 8001914:	4b1c      	ldr	r3, [pc, #112]	; (8001988 <MX_UART4_Init+0x84>)
 8001916:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800191a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_2;
 800191c:	4b1a      	ldr	r3, [pc, #104]	; (8001988 <MX_UART4_Init+0x84>)
 800191e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001922:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 8001924:	4b18      	ldr	r3, [pc, #96]	; (8001988 <MX_UART4_Init+0x84>)
 8001926:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800192a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_RX;
 800192c:	4b16      	ldr	r3, [pc, #88]	; (8001988 <MX_UART4_Init+0x84>)
 800192e:	2204      	movs	r2, #4
 8001930:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001932:	4b15      	ldr	r3, [pc, #84]	; (8001988 <MX_UART4_Init+0x84>)
 8001934:	2200      	movs	r2, #0
 8001936:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001938:	4b13      	ldr	r3, [pc, #76]	; (8001988 <MX_UART4_Init+0x84>)
 800193a:	2200      	movs	r2, #0
 800193c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800193e:	4b12      	ldr	r3, [pc, #72]	; (8001988 <MX_UART4_Init+0x84>)
 8001940:	2200      	movs	r2, #0
 8001942:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV4;
 8001944:	4b10      	ldr	r3, [pc, #64]	; (8001988 <MX_UART4_Init+0x84>)
 8001946:	2202      	movs	r2, #2
 8001948:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800194a:	4b0f      	ldr	r3, [pc, #60]	; (8001988 <MX_UART4_Init+0x84>)
 800194c:	2200      	movs	r2, #0
 800194e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001950:	480d      	ldr	r0, [pc, #52]	; (8001988 <MX_UART4_Init+0x84>)
 8001952:	f009 fda9 	bl	800b4a8 <HAL_UART_Init>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <MX_UART4_Init+0x5c>
  {
    Error_Handler();
 800195c:	f7ff fadc 	bl	8000f18 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001960:	2100      	movs	r1, #0
 8001962:	4809      	ldr	r0, [pc, #36]	; (8001988 <MX_UART4_Init+0x84>)
 8001964:	f00b fa8c 	bl	800ce80 <HAL_UARTEx_SetRxFifoThreshold>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <MX_UART4_Init+0x6e>
  {
    Error_Handler();
 800196e:	f7ff fad3 	bl	8000f18 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001972:	4805      	ldr	r0, [pc, #20]	; (8001988 <MX_UART4_Init+0x84>)
 8001974:	f00b fa0d 	bl	800cd92 <HAL_UARTEx_DisableFifoMode>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_UART4_Init+0x7e>
  {
    Error_Handler();
 800197e:	f7ff facb 	bl	8000f18 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	24000584 	.word	0x24000584
 800198c:	40004c00 	.word	0x40004c00
 8001990:	000186a0 	.word	0x000186a0

08001994 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001998:	4b22      	ldr	r3, [pc, #136]	; (8001a24 <MX_UART7_Init+0x90>)
 800199a:	4a23      	ldr	r2, [pc, #140]	; (8001a28 <MX_UART7_Init+0x94>)
 800199c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 921600;
 800199e:	4b21      	ldr	r3, [pc, #132]	; (8001a24 <MX_UART7_Init+0x90>)
 80019a0:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80019a4:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80019a6:	4b1f      	ldr	r3, [pc, #124]	; (8001a24 <MX_UART7_Init+0x90>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80019ac:	4b1d      	ldr	r3, [pc, #116]	; (8001a24 <MX_UART7_Init+0x90>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80019b2:	4b1c      	ldr	r3, [pc, #112]	; (8001a24 <MX_UART7_Init+0x90>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80019b8:	4b1a      	ldr	r3, [pc, #104]	; (8001a24 <MX_UART7_Init+0x90>)
 80019ba:	220c      	movs	r2, #12
 80019bc:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019be:	4b19      	ldr	r3, [pc, #100]	; (8001a24 <MX_UART7_Init+0x90>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80019c4:	4b17      	ldr	r3, [pc, #92]	; (8001a24 <MX_UART7_Init+0x90>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019ca:	4b16      	ldr	r3, [pc, #88]	; (8001a24 <MX_UART7_Init+0x90>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019d0:	4b14      	ldr	r3, [pc, #80]	; (8001a24 <MX_UART7_Init+0x90>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019d6:	4b13      	ldr	r3, [pc, #76]	; (8001a24 <MX_UART7_Init+0x90>)
 80019d8:	2200      	movs	r2, #0
 80019da:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80019dc:	4811      	ldr	r0, [pc, #68]	; (8001a24 <MX_UART7_Init+0x90>)
 80019de:	f009 fd63 	bl	800b4a8 <HAL_UART_Init>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <MX_UART7_Init+0x58>
  {
    Error_Handler();
 80019e8:	f7ff fa96 	bl	8000f18 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019ec:	2100      	movs	r1, #0
 80019ee:	480d      	ldr	r0, [pc, #52]	; (8001a24 <MX_UART7_Init+0x90>)
 80019f0:	f00b fa08 	bl	800ce04 <HAL_UARTEx_SetTxFifoThreshold>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 80019fa:	f7ff fa8d 	bl	8000f18 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019fe:	2100      	movs	r1, #0
 8001a00:	4808      	ldr	r0, [pc, #32]	; (8001a24 <MX_UART7_Init+0x90>)
 8001a02:	f00b fa3d 	bl	800ce80 <HAL_UARTEx_SetRxFifoThreshold>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8001a0c:	f7ff fa84 	bl	8000f18 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8001a10:	4804      	ldr	r0, [pc, #16]	; (8001a24 <MX_UART7_Init+0x90>)
 8001a12:	f00b f9be 	bl	800cd92 <HAL_UARTEx_DisableFifoMode>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8001a1c:	f7ff fa7c 	bl	8000f18 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001a20:	bf00      	nop
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	24000614 	.word	0x24000614
 8001a28:	40007800 	.word	0x40007800

08001a2c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b0ba      	sub	sp, #232	; 0xe8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a34:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	605a      	str	r2, [r3, #4]
 8001a3e:	609a      	str	r2, [r3, #8]
 8001a40:	60da      	str	r2, [r3, #12]
 8001a42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a44:	f107 0318 	add.w	r3, r7, #24
 8001a48:	22bc      	movs	r2, #188	; 0xbc
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f00f f9cb 	bl	8010de8 <memset>
  if(uartHandle->Instance==UART4)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a95      	ldr	r2, [pc, #596]	; (8001cac <HAL_UART_MspInit+0x280>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d179      	bne.n	8001b50 <HAL_UART_MspInit+0x124>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001a60:	2300      	movs	r3, #0
 8001a62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a66:	f107 0318 	add.w	r3, r7, #24
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f006 fe02 	bl	8008674 <HAL_RCCEx_PeriphCLKConfig>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001a76:	f7ff fa4f 	bl	8000f18 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001a7a:	4b8d      	ldr	r3, [pc, #564]	; (8001cb0 <HAL_UART_MspInit+0x284>)
 8001a7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a80:	4a8b      	ldr	r2, [pc, #556]	; (8001cb0 <HAL_UART_MspInit+0x284>)
 8001a82:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001a86:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001a8a:	4b89      	ldr	r3, [pc, #548]	; (8001cb0 <HAL_UART_MspInit+0x284>)
 8001a8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a94:	617b      	str	r3, [r7, #20]
 8001a96:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a98:	4b85      	ldr	r3, [pc, #532]	; (8001cb0 <HAL_UART_MspInit+0x284>)
 8001a9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a9e:	4a84      	ldr	r2, [pc, #528]	; (8001cb0 <HAL_UART_MspInit+0x284>)
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001aa8:	4b81      	ldr	r3, [pc, #516]	; (8001cb0 <HAL_UART_MspInit+0x284>)
 8001aaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	613b      	str	r3, [r7, #16]
 8001ab4:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001abc:	2302      	movs	r3, #2
 8001abe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001ace:	2308      	movs	r3, #8
 8001ad0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4876      	ldr	r0, [pc, #472]	; (8001cb4 <HAL_UART_MspInit+0x288>)
 8001adc:	f003 f9d8 	bl	8004e90 <HAL_GPIO_Init>

    /*UART4 RX Init
     *
     */

    hdma_uart4_rx.Instance = DMA2_Stream7;
 8001ae0:	4b75      	ldr	r3, [pc, #468]	; (8001cb8 <HAL_UART_MspInit+0x28c>)
 8001ae2:	4a76      	ldr	r2, [pc, #472]	; (8001cbc <HAL_UART_MspInit+0x290>)
 8001ae4:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8001ae6:	4b74      	ldr	r3, [pc, #464]	; (8001cb8 <HAL_UART_MspInit+0x28c>)
 8001ae8:	223f      	movs	r2, #63	; 0x3f
 8001aea:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001aec:	4b72      	ldr	r3, [pc, #456]	; (8001cb8 <HAL_UART_MspInit+0x28c>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001af2:	4b71      	ldr	r3, [pc, #452]	; (8001cb8 <HAL_UART_MspInit+0x28c>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001af8:	4b6f      	ldr	r3, [pc, #444]	; (8001cb8 <HAL_UART_MspInit+0x28c>)
 8001afa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001afe:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b00:	4b6d      	ldr	r3, [pc, #436]	; (8001cb8 <HAL_UART_MspInit+0x28c>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b06:	4b6c      	ldr	r3, [pc, #432]	; (8001cb8 <HAL_UART_MspInit+0x28c>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8001b0c:	4b6a      	ldr	r3, [pc, #424]	; (8001cb8 <HAL_UART_MspInit+0x28c>)
 8001b0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b12:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001b14:	4b68      	ldr	r3, [pc, #416]	; (8001cb8 <HAL_UART_MspInit+0x28c>)
 8001b16:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b1a:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b1c:	4b66      	ldr	r3, [pc, #408]	; (8001cb8 <HAL_UART_MspInit+0x28c>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	625a      	str	r2, [r3, #36]	; 0x24

    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001b22:	4865      	ldr	r0, [pc, #404]	; (8001cb8 <HAL_UART_MspInit+0x28c>)
 8001b24:	f000 fb5e 	bl	80021e4 <HAL_DMA_Init>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <HAL_UART_MspInit+0x106>
    {
      Error_Handler();
 8001b2e:	f7ff f9f3 	bl	8000f18 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle, hdmarx, hdma_uart4_rx);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a60      	ldr	r2, [pc, #384]	; (8001cb8 <HAL_UART_MspInit+0x28c>)
 8001b36:	67da      	str	r2, [r3, #124]	; 0x7c
 8001b38:	4a5f      	ldr	r2, [pc, #380]	; (8001cb8 <HAL_UART_MspInit+0x28c>)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6393      	str	r3, [r2, #56]	; 0x38
    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001b3e:	2200      	movs	r2, #0
 8001b40:	2100      	movs	r1, #0
 8001b42:	2034      	movs	r0, #52	; 0x34
 8001b44:	f000 fa8f 	bl	8002066 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001b48:	2034      	movs	r0, #52	; 0x34
 8001b4a:	f000 faa6 	bl	800209a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
}
 8001b4e:	e0a9      	b.n	8001ca4 <HAL_UART_MspInit+0x278>
  else if(uartHandle->Instance==UART7)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a5a      	ldr	r2, [pc, #360]	; (8001cc0 <HAL_UART_MspInit+0x294>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	f040 80a4 	bne.w	8001ca4 <HAL_UART_MspInit+0x278>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001b60:	2300      	movs	r3, #0
 8001b62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b66:	f107 0318 	add.w	r3, r7, #24
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f006 fd82 	bl	8008674 <HAL_RCCEx_PeriphCLKConfig>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <HAL_UART_MspInit+0x14e>
      Error_Handler();
 8001b76:	f7ff f9cf 	bl	8000f18 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8001b7a:	4b4d      	ldr	r3, [pc, #308]	; (8001cb0 <HAL_UART_MspInit+0x284>)
 8001b7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b80:	4a4b      	ldr	r2, [pc, #300]	; (8001cb0 <HAL_UART_MspInit+0x284>)
 8001b82:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001b86:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b8a:	4b49      	ldr	r3, [pc, #292]	; (8001cb0 <HAL_UART_MspInit+0x284>)
 8001b8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b90:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b98:	4b45      	ldr	r3, [pc, #276]	; (8001cb0 <HAL_UART_MspInit+0x284>)
 8001b9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b9e:	4a44      	ldr	r2, [pc, #272]	; (8001cb0 <HAL_UART_MspInit+0x284>)
 8001ba0:	f043 0320 	orr.w	r3, r3, #32
 8001ba4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ba8:	4b41      	ldr	r3, [pc, #260]	; (8001cb0 <HAL_UART_MspInit+0x284>)
 8001baa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bae:	f003 0320 	and.w	r3, r3, #32
 8001bb2:	60bb      	str	r3, [r7, #8]
 8001bb4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bb6:	23c0      	movs	r3, #192	; 0xc0
 8001bb8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8001bce:	2307      	movs	r3, #7
 8001bd0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001bd4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001bd8:	4619      	mov	r1, r3
 8001bda:	483a      	ldr	r0, [pc, #232]	; (8001cc4 <HAL_UART_MspInit+0x298>)
 8001bdc:	f003 f958 	bl	8004e90 <HAL_GPIO_Init>
    hdma_uart7_rx.Instance = DMA1_Stream5;
 8001be0:	4b39      	ldr	r3, [pc, #228]	; (8001cc8 <HAL_UART_MspInit+0x29c>)
 8001be2:	4a3a      	ldr	r2, [pc, #232]	; (8001ccc <HAL_UART_MspInit+0x2a0>)
 8001be4:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Request = DMA_REQUEST_UART7_RX;
 8001be6:	4b38      	ldr	r3, [pc, #224]	; (8001cc8 <HAL_UART_MspInit+0x29c>)
 8001be8:	224f      	movs	r2, #79	; 0x4f
 8001bea:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bec:	4b36      	ldr	r3, [pc, #216]	; (8001cc8 <HAL_UART_MspInit+0x29c>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bf2:	4b35      	ldr	r3, [pc, #212]	; (8001cc8 <HAL_UART_MspInit+0x29c>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001bf8:	4b33      	ldr	r3, [pc, #204]	; (8001cc8 <HAL_UART_MspInit+0x29c>)
 8001bfa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bfe:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c00:	4b31      	ldr	r3, [pc, #196]	; (8001cc8 <HAL_UART_MspInit+0x29c>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c06:	4b30      	ldr	r3, [pc, #192]	; (8001cc8 <HAL_UART_MspInit+0x29c>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_NORMAL;
 8001c0c:	4b2e      	ldr	r3, [pc, #184]	; (8001cc8 <HAL_UART_MspInit+0x29c>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c12:	4b2d      	ldr	r3, [pc, #180]	; (8001cc8 <HAL_UART_MspInit+0x29c>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c18:	4b2b      	ldr	r3, [pc, #172]	; (8001cc8 <HAL_UART_MspInit+0x29c>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 8001c1e:	482a      	ldr	r0, [pc, #168]	; (8001cc8 <HAL_UART_MspInit+0x29c>)
 8001c20:	f000 fae0 	bl	80021e4 <HAL_DMA_Init>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <HAL_UART_MspInit+0x202>
      Error_Handler();
 8001c2a:	f7ff f975 	bl	8000f18 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart7_rx);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a25      	ldr	r2, [pc, #148]	; (8001cc8 <HAL_UART_MspInit+0x29c>)
 8001c32:	67da      	str	r2, [r3, #124]	; 0x7c
 8001c34:	4a24      	ldr	r2, [pc, #144]	; (8001cc8 <HAL_UART_MspInit+0x29c>)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart7_tx.Instance = DMA1_Stream6;
 8001c3a:	4b25      	ldr	r3, [pc, #148]	; (8001cd0 <HAL_UART_MspInit+0x2a4>)
 8001c3c:	4a25      	ldr	r2, [pc, #148]	; (8001cd4 <HAL_UART_MspInit+0x2a8>)
 8001c3e:	601a      	str	r2, [r3, #0]
    hdma_uart7_tx.Init.Request = DMA_REQUEST_UART7_TX;
 8001c40:	4b23      	ldr	r3, [pc, #140]	; (8001cd0 <HAL_UART_MspInit+0x2a4>)
 8001c42:	2250      	movs	r2, #80	; 0x50
 8001c44:	605a      	str	r2, [r3, #4]
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c46:	4b22      	ldr	r3, [pc, #136]	; (8001cd0 <HAL_UART_MspInit+0x2a4>)
 8001c48:	2240      	movs	r2, #64	; 0x40
 8001c4a:	609a      	str	r2, [r3, #8]
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c4c:	4b20      	ldr	r3, [pc, #128]	; (8001cd0 <HAL_UART_MspInit+0x2a4>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	60da      	str	r2, [r3, #12]
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c52:	4b1f      	ldr	r3, [pc, #124]	; (8001cd0 <HAL_UART_MspInit+0x2a4>)
 8001c54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c58:	611a      	str	r2, [r3, #16]
    hdma_uart7_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c5a:	4b1d      	ldr	r3, [pc, #116]	; (8001cd0 <HAL_UART_MspInit+0x2a4>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	615a      	str	r2, [r3, #20]
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c60:	4b1b      	ldr	r3, [pc, #108]	; (8001cd0 <HAL_UART_MspInit+0x2a4>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	619a      	str	r2, [r3, #24]
    hdma_uart7_tx.Init.Mode = DMA_NORMAL;
 8001c66:	4b1a      	ldr	r3, [pc, #104]	; (8001cd0 <HAL_UART_MspInit+0x2a4>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	61da      	str	r2, [r3, #28]
    hdma_uart7_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c6c:	4b18      	ldr	r3, [pc, #96]	; (8001cd0 <HAL_UART_MspInit+0x2a4>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	621a      	str	r2, [r3, #32]
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c72:	4b17      	ldr	r3, [pc, #92]	; (8001cd0 <HAL_UART_MspInit+0x2a4>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 8001c78:	4815      	ldr	r0, [pc, #84]	; (8001cd0 <HAL_UART_MspInit+0x2a4>)
 8001c7a:	f000 fab3 	bl	80021e4 <HAL_DMA_Init>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <HAL_UART_MspInit+0x25c>
      Error_Handler();
 8001c84:	f7ff f948 	bl	8000f18 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart7_tx);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	4a11      	ldr	r2, [pc, #68]	; (8001cd0 <HAL_UART_MspInit+0x2a4>)
 8001c8c:	679a      	str	r2, [r3, #120]	; 0x78
 8001c8e:	4a10      	ldr	r2, [pc, #64]	; (8001cd0 <HAL_UART_MspInit+0x2a4>)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8001c94:	2200      	movs	r2, #0
 8001c96:	2100      	movs	r1, #0
 8001c98:	2052      	movs	r0, #82	; 0x52
 8001c9a:	f000 f9e4 	bl	8002066 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8001c9e:	2052      	movs	r0, #82	; 0x52
 8001ca0:	f000 f9fb 	bl	800209a <HAL_NVIC_EnableIRQ>
}
 8001ca4:	bf00      	nop
 8001ca6:	37e8      	adds	r7, #232	; 0xe8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40004c00 	.word	0x40004c00
 8001cb0:	58024400 	.word	0x58024400
 8001cb4:	58020000 	.word	0x58020000
 8001cb8:	24000794 	.word	0x24000794
 8001cbc:	400204b8 	.word	0x400204b8
 8001cc0:	40007800 	.word	0x40007800
 8001cc4:	58021400 	.word	0x58021400
 8001cc8:	240006a4 	.word	0x240006a4
 8001ccc:	40020088 	.word	0x40020088
 8001cd0:	2400071c 	.word	0x2400071c
 8001cd4:	400200a0 	.word	0x400200a0

08001cd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001cd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d10 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001cdc:	f7fe fcda 	bl	8000694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ce0:	480c      	ldr	r0, [pc, #48]	; (8001d14 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ce2:	490d      	ldr	r1, [pc, #52]	; (8001d18 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ce4:	4a0d      	ldr	r2, [pc, #52]	; (8001d1c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ce6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ce8:	e002      	b.n	8001cf0 <LoopCopyDataInit>

08001cea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cee:	3304      	adds	r3, #4

08001cf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cf4:	d3f9      	bcc.n	8001cea <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cf6:	4a0a      	ldr	r2, [pc, #40]	; (8001d20 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001cf8:	4c0a      	ldr	r4, [pc, #40]	; (8001d24 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cfc:	e001      	b.n	8001d02 <LoopFillZerobss>

08001cfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d00:	3204      	adds	r2, #4

08001d02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d04:	d3fb      	bcc.n	8001cfe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d06:	f00f f82d 	bl	8010d64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d0a:	f7fe ffa3 	bl	8000c54 <main>
  bx  lr
 8001d0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d10:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001d14:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001d18:	2400036c 	.word	0x2400036c
  ldr r2, =_sidata
 8001d1c:	08013ef4 	.word	0x08013ef4
  ldr r2, =_sbss
 8001d20:	2400036c 	.word	0x2400036c
  ldr r4, =_ebss
 8001d24:	2400210c 	.word	0x2400210c

08001d28 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d28:	e7fe      	b.n	8001d28 <ADC3_IRQHandler>
	...

08001d2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d32:	2003      	movs	r0, #3
 8001d34:	f000 f98c 	bl	8002050 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001d38:	f006 fa84 	bl	8008244 <HAL_RCC_GetSysClockFreq>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	4b15      	ldr	r3, [pc, #84]	; (8001d94 <HAL_Init+0x68>)
 8001d40:	699b      	ldr	r3, [r3, #24]
 8001d42:	0a1b      	lsrs	r3, r3, #8
 8001d44:	f003 030f 	and.w	r3, r3, #15
 8001d48:	4913      	ldr	r1, [pc, #76]	; (8001d98 <HAL_Init+0x6c>)
 8001d4a:	5ccb      	ldrb	r3, [r1, r3]
 8001d4c:	f003 031f 	and.w	r3, r3, #31
 8001d50:	fa22 f303 	lsr.w	r3, r2, r3
 8001d54:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001d56:	4b0f      	ldr	r3, [pc, #60]	; (8001d94 <HAL_Init+0x68>)
 8001d58:	699b      	ldr	r3, [r3, #24]
 8001d5a:	f003 030f 	and.w	r3, r3, #15
 8001d5e:	4a0e      	ldr	r2, [pc, #56]	; (8001d98 <HAL_Init+0x6c>)
 8001d60:	5cd3      	ldrb	r3, [r2, r3]
 8001d62:	f003 031f 	and.w	r3, r3, #31
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	fa22 f303 	lsr.w	r3, r2, r3
 8001d6c:	4a0b      	ldr	r2, [pc, #44]	; (8001d9c <HAL_Init+0x70>)
 8001d6e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001d70:	4a0b      	ldr	r2, [pc, #44]	; (8001da0 <HAL_Init+0x74>)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d76:	2000      	movs	r0, #0
 8001d78:	f000 f814 	bl	8001da4 <HAL_InitTick>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e002      	b.n	8001d8c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001d86:	f7ff fa6b 	bl	8001260 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d8a:	2300      	movs	r3, #0
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3708      	adds	r7, #8
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	58024400 	.word	0x58024400
 8001d98:	08013aa8 	.word	0x08013aa8
 8001d9c:	24000004 	.word	0x24000004
 8001da0:	24000000 	.word	0x24000000

08001da4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001dac:	4b15      	ldr	r3, [pc, #84]	; (8001e04 <HAL_InitTick+0x60>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d101      	bne.n	8001db8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e021      	b.n	8001dfc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001db8:	4b13      	ldr	r3, [pc, #76]	; (8001e08 <HAL_InitTick+0x64>)
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	4b11      	ldr	r3, [pc, #68]	; (8001e04 <HAL_InitTick+0x60>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f000 f971 	bl	80020b6 <HAL_SYSTICK_Config>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e00e      	b.n	8001dfc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2b0f      	cmp	r3, #15
 8001de2:	d80a      	bhi.n	8001dfa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001de4:	2200      	movs	r2, #0
 8001de6:	6879      	ldr	r1, [r7, #4]
 8001de8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dec:	f000 f93b 	bl	8002066 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001df0:	4a06      	ldr	r2, [pc, #24]	; (8001e0c <HAL_InitTick+0x68>)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001df6:	2300      	movs	r3, #0
 8001df8:	e000      	b.n	8001dfc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	24000024 	.word	0x24000024
 8001e08:	24000000 	.word	0x24000000
 8001e0c:	24000020 	.word	0x24000020

08001e10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e14:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <HAL_IncTick+0x20>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	461a      	mov	r2, r3
 8001e1a:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <HAL_IncTick+0x24>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4413      	add	r3, r2
 8001e20:	4a04      	ldr	r2, [pc, #16]	; (8001e34 <HAL_IncTick+0x24>)
 8001e22:	6013      	str	r3, [r2, #0]
}
 8001e24:	bf00      	nop
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	24000024 	.word	0x24000024
 8001e34:	2400080c 	.word	0x2400080c

08001e38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e3c:	4b03      	ldr	r3, [pc, #12]	; (8001e4c <HAL_GetTick+0x14>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	2400080c 	.word	0x2400080c

08001e50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e58:	f7ff ffee 	bl	8001e38 <HAL_GetTick>
 8001e5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e68:	d005      	beq.n	8001e76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e6a:	4b0a      	ldr	r3, [pc, #40]	; (8001e94 <HAL_Delay+0x44>)
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	461a      	mov	r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	4413      	add	r3, r2
 8001e74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e76:	bf00      	nop
 8001e78:	f7ff ffde 	bl	8001e38 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	68fa      	ldr	r2, [r7, #12]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d8f7      	bhi.n	8001e78 <HAL_Delay+0x28>
  {
  }
}
 8001e88:	bf00      	nop
 8001e8a:	bf00      	nop
 8001e8c:	3710      	adds	r7, #16
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	24000024 	.word	0x24000024

08001e98 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001e9c:	4b03      	ldr	r3, [pc, #12]	; (8001eac <HAL_GetREVID+0x14>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	0c1b      	lsrs	r3, r3, #16
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr
 8001eac:	5c001000 	.word	0x5c001000

08001eb0 <__NVIC_SetPriorityGrouping>:
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f003 0307 	and.w	r3, r3, #7
 8001ebe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ec0:	4b0b      	ldr	r3, [pc, #44]	; (8001ef0 <__NVIC_SetPriorityGrouping+0x40>)
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ec6:	68ba      	ldr	r2, [r7, #8]
 8001ec8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ecc:	4013      	ands	r3, r2
 8001ece:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ed8:	4b06      	ldr	r3, [pc, #24]	; (8001ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8001eda:	4313      	orrs	r3, r2
 8001edc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ede:	4a04      	ldr	r2, [pc, #16]	; (8001ef0 <__NVIC_SetPriorityGrouping+0x40>)
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	60d3      	str	r3, [r2, #12]
}
 8001ee4:	bf00      	nop
 8001ee6:	3714      	adds	r7, #20
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr
 8001ef0:	e000ed00 	.word	0xe000ed00
 8001ef4:	05fa0000 	.word	0x05fa0000

08001ef8 <__NVIC_GetPriorityGrouping>:
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001efc:	4b04      	ldr	r3, [pc, #16]	; (8001f10 <__NVIC_GetPriorityGrouping+0x18>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	0a1b      	lsrs	r3, r3, #8
 8001f02:	f003 0307 	and.w	r3, r3, #7
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	e000ed00 	.word	0xe000ed00

08001f14 <__NVIC_EnableIRQ>:
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001f1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	db0b      	blt.n	8001f3e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f26:	88fb      	ldrh	r3, [r7, #6]
 8001f28:	f003 021f 	and.w	r2, r3, #31
 8001f2c:	4907      	ldr	r1, [pc, #28]	; (8001f4c <__NVIC_EnableIRQ+0x38>)
 8001f2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f32:	095b      	lsrs	r3, r3, #5
 8001f34:	2001      	movs	r0, #1
 8001f36:	fa00 f202 	lsl.w	r2, r0, r2
 8001f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f3e:	bf00      	nop
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	e000e100 	.word	0xe000e100

08001f50 <__NVIC_SetPriority>:
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	4603      	mov	r3, r0
 8001f58:	6039      	str	r1, [r7, #0]
 8001f5a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001f5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	db0a      	blt.n	8001f7a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	b2da      	uxtb	r2, r3
 8001f68:	490c      	ldr	r1, [pc, #48]	; (8001f9c <__NVIC_SetPriority+0x4c>)
 8001f6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f6e:	0112      	lsls	r2, r2, #4
 8001f70:	b2d2      	uxtb	r2, r2
 8001f72:	440b      	add	r3, r1
 8001f74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001f78:	e00a      	b.n	8001f90 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	b2da      	uxtb	r2, r3
 8001f7e:	4908      	ldr	r1, [pc, #32]	; (8001fa0 <__NVIC_SetPriority+0x50>)
 8001f80:	88fb      	ldrh	r3, [r7, #6]
 8001f82:	f003 030f 	and.w	r3, r3, #15
 8001f86:	3b04      	subs	r3, #4
 8001f88:	0112      	lsls	r2, r2, #4
 8001f8a:	b2d2      	uxtb	r2, r2
 8001f8c:	440b      	add	r3, r1
 8001f8e:	761a      	strb	r2, [r3, #24]
}
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	e000e100 	.word	0xe000e100
 8001fa0:	e000ed00 	.word	0xe000ed00

08001fa4 <NVIC_EncodePriority>:
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b089      	sub	sp, #36	; 0x24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f003 0307 	and.w	r3, r3, #7
 8001fb6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	f1c3 0307 	rsb	r3, r3, #7
 8001fbe:	2b04      	cmp	r3, #4
 8001fc0:	bf28      	it	cs
 8001fc2:	2304      	movcs	r3, #4
 8001fc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	3304      	adds	r3, #4
 8001fca:	2b06      	cmp	r3, #6
 8001fcc:	d902      	bls.n	8001fd4 <NVIC_EncodePriority+0x30>
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	3b03      	subs	r3, #3
 8001fd2:	e000      	b.n	8001fd6 <NVIC_EncodePriority+0x32>
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	43da      	mvns	r2, r3
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	401a      	ands	r2, r3
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fec:	f04f 31ff 	mov.w	r1, #4294967295
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff6:	43d9      	mvns	r1, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ffc:	4313      	orrs	r3, r2
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3724      	adds	r7, #36	; 0x24
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
	...

0800200c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	3b01      	subs	r3, #1
 8002018:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800201c:	d301      	bcc.n	8002022 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800201e:	2301      	movs	r3, #1
 8002020:	e00f      	b.n	8002042 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002022:	4a0a      	ldr	r2, [pc, #40]	; (800204c <SysTick_Config+0x40>)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	3b01      	subs	r3, #1
 8002028:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800202a:	210f      	movs	r1, #15
 800202c:	f04f 30ff 	mov.w	r0, #4294967295
 8002030:	f7ff ff8e 	bl	8001f50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002034:	4b05      	ldr	r3, [pc, #20]	; (800204c <SysTick_Config+0x40>)
 8002036:	2200      	movs	r2, #0
 8002038:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800203a:	4b04      	ldr	r3, [pc, #16]	; (800204c <SysTick_Config+0x40>)
 800203c:	2207      	movs	r2, #7
 800203e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	e000e010 	.word	0xe000e010

08002050 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f7ff ff29 	bl	8001eb0 <__NVIC_SetPriorityGrouping>
}
 800205e:	bf00      	nop
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b086      	sub	sp, #24
 800206a:	af00      	add	r7, sp, #0
 800206c:	4603      	mov	r3, r0
 800206e:	60b9      	str	r1, [r7, #8]
 8002070:	607a      	str	r2, [r7, #4]
 8002072:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002074:	f7ff ff40 	bl	8001ef8 <__NVIC_GetPriorityGrouping>
 8002078:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	68b9      	ldr	r1, [r7, #8]
 800207e:	6978      	ldr	r0, [r7, #20]
 8002080:	f7ff ff90 	bl	8001fa4 <NVIC_EncodePriority>
 8002084:	4602      	mov	r2, r0
 8002086:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800208a:	4611      	mov	r1, r2
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff ff5f 	bl	8001f50 <__NVIC_SetPriority>
}
 8002092:	bf00      	nop
 8002094:	3718      	adds	r7, #24
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b082      	sub	sp, #8
 800209e:	af00      	add	r7, sp, #0
 80020a0:	4603      	mov	r3, r0
 80020a2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7ff ff33 	bl	8001f14 <__NVIC_EnableIRQ>
}
 80020ae:	bf00      	nop
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b082      	sub	sp, #8
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f7ff ffa4 	bl	800200c <SysTick_Config>
 80020c4:	4603      	mov	r3, r0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
	...

080020d0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80020d4:	f3bf 8f5f 	dmb	sy
}
 80020d8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80020da:	4b07      	ldr	r3, [pc, #28]	; (80020f8 <HAL_MPU_Disable+0x28>)
 80020dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020de:	4a06      	ldr	r2, [pc, #24]	; (80020f8 <HAL_MPU_Disable+0x28>)
 80020e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020e4:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80020e6:	4b05      	ldr	r3, [pc, #20]	; (80020fc <HAL_MPU_Disable+0x2c>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	605a      	str	r2, [r3, #4]
}
 80020ec:	bf00      	nop
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	e000ed00 	.word	0xe000ed00
 80020fc:	e000ed90 	.word	0xe000ed90

08002100 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002108:	4a0b      	ldr	r2, [pc, #44]	; (8002138 <HAL_MPU_Enable+0x38>)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f043 0301 	orr.w	r3, r3, #1
 8002110:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002112:	4b0a      	ldr	r3, [pc, #40]	; (800213c <HAL_MPU_Enable+0x3c>)
 8002114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002116:	4a09      	ldr	r2, [pc, #36]	; (800213c <HAL_MPU_Enable+0x3c>)
 8002118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800211c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800211e:	f3bf 8f4f 	dsb	sy
}
 8002122:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002124:	f3bf 8f6f 	isb	sy
}
 8002128:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800212a:	bf00      	nop
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	e000ed90 	.word	0xe000ed90
 800213c:	e000ed00 	.word	0xe000ed00

08002140 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	785a      	ldrb	r2, [r3, #1]
 800214c:	4b1d      	ldr	r3, [pc, #116]	; (80021c4 <HAL_MPU_ConfigRegion+0x84>)
 800214e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d029      	beq.n	80021ac <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8002158:	4a1a      	ldr	r2, [pc, #104]	; (80021c4 <HAL_MPU_ConfigRegion+0x84>)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	7b1b      	ldrb	r3, [r3, #12]
 8002164:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	7adb      	ldrb	r3, [r3, #11]
 800216a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800216c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	7a9b      	ldrb	r3, [r3, #10]
 8002172:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002174:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	7b5b      	ldrb	r3, [r3, #13]
 800217a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800217c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	7b9b      	ldrb	r3, [r3, #14]
 8002182:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002184:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	7bdb      	ldrb	r3, [r3, #15]
 800218a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800218c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	7a5b      	ldrb	r3, [r3, #9]
 8002192:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002194:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	7a1b      	ldrb	r3, [r3, #8]
 800219a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800219c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	7812      	ldrb	r2, [r2, #0]
 80021a2:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80021a4:	4a07      	ldr	r2, [pc, #28]	; (80021c4 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80021a6:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80021a8:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80021aa:	e005      	b.n	80021b8 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80021ac:	4b05      	ldr	r3, [pc, #20]	; (80021c4 <HAL_MPU_ConfigRegion+0x84>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80021b2:	4b04      	ldr	r3, [pc, #16]	; (80021c4 <HAL_MPU_ConfigRegion+0x84>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	611a      	str	r2, [r3, #16]
}
 80021b8:	bf00      	nop
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr
 80021c4:	e000ed90 	.word	0xe000ed90

080021c8 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80021cc:	f000 f802 	bl	80021d4 <HAL_SYSTICK_Callback>
}
 80021d0:	bf00      	nop
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80021d8:	bf00      	nop
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
	...

080021e4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b086      	sub	sp, #24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80021ec:	f7ff fe24 	bl	8001e38 <HAL_GetTick>
 80021f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d101      	bne.n	80021fc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e316      	b.n	800282a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a66      	ldr	r2, [pc, #408]	; (800239c <HAL_DMA_Init+0x1b8>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d04a      	beq.n	800229c <HAL_DMA_Init+0xb8>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a65      	ldr	r2, [pc, #404]	; (80023a0 <HAL_DMA_Init+0x1bc>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d045      	beq.n	800229c <HAL_DMA_Init+0xb8>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a63      	ldr	r2, [pc, #396]	; (80023a4 <HAL_DMA_Init+0x1c0>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d040      	beq.n	800229c <HAL_DMA_Init+0xb8>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a62      	ldr	r2, [pc, #392]	; (80023a8 <HAL_DMA_Init+0x1c4>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d03b      	beq.n	800229c <HAL_DMA_Init+0xb8>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a60      	ldr	r2, [pc, #384]	; (80023ac <HAL_DMA_Init+0x1c8>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d036      	beq.n	800229c <HAL_DMA_Init+0xb8>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a5f      	ldr	r2, [pc, #380]	; (80023b0 <HAL_DMA_Init+0x1cc>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d031      	beq.n	800229c <HAL_DMA_Init+0xb8>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a5d      	ldr	r2, [pc, #372]	; (80023b4 <HAL_DMA_Init+0x1d0>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d02c      	beq.n	800229c <HAL_DMA_Init+0xb8>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a5c      	ldr	r2, [pc, #368]	; (80023b8 <HAL_DMA_Init+0x1d4>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d027      	beq.n	800229c <HAL_DMA_Init+0xb8>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a5a      	ldr	r2, [pc, #360]	; (80023bc <HAL_DMA_Init+0x1d8>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d022      	beq.n	800229c <HAL_DMA_Init+0xb8>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a59      	ldr	r2, [pc, #356]	; (80023c0 <HAL_DMA_Init+0x1dc>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d01d      	beq.n	800229c <HAL_DMA_Init+0xb8>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a57      	ldr	r2, [pc, #348]	; (80023c4 <HAL_DMA_Init+0x1e0>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d018      	beq.n	800229c <HAL_DMA_Init+0xb8>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a56      	ldr	r2, [pc, #344]	; (80023c8 <HAL_DMA_Init+0x1e4>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d013      	beq.n	800229c <HAL_DMA_Init+0xb8>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a54      	ldr	r2, [pc, #336]	; (80023cc <HAL_DMA_Init+0x1e8>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d00e      	beq.n	800229c <HAL_DMA_Init+0xb8>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a53      	ldr	r2, [pc, #332]	; (80023d0 <HAL_DMA_Init+0x1ec>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d009      	beq.n	800229c <HAL_DMA_Init+0xb8>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a51      	ldr	r2, [pc, #324]	; (80023d4 <HAL_DMA_Init+0x1f0>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d004      	beq.n	800229c <HAL_DMA_Init+0xb8>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a50      	ldr	r2, [pc, #320]	; (80023d8 <HAL_DMA_Init+0x1f4>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d101      	bne.n	80022a0 <HAL_DMA_Init+0xbc>
 800229c:	2301      	movs	r3, #1
 800229e:	e000      	b.n	80022a2 <HAL_DMA_Init+0xbe>
 80022a0:	2300      	movs	r3, #0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	f000 813b 	beq.w	800251e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2202      	movs	r2, #2
 80022b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a37      	ldr	r2, [pc, #220]	; (800239c <HAL_DMA_Init+0x1b8>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d04a      	beq.n	8002358 <HAL_DMA_Init+0x174>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a36      	ldr	r2, [pc, #216]	; (80023a0 <HAL_DMA_Init+0x1bc>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d045      	beq.n	8002358 <HAL_DMA_Init+0x174>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a34      	ldr	r2, [pc, #208]	; (80023a4 <HAL_DMA_Init+0x1c0>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d040      	beq.n	8002358 <HAL_DMA_Init+0x174>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a33      	ldr	r2, [pc, #204]	; (80023a8 <HAL_DMA_Init+0x1c4>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d03b      	beq.n	8002358 <HAL_DMA_Init+0x174>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a31      	ldr	r2, [pc, #196]	; (80023ac <HAL_DMA_Init+0x1c8>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d036      	beq.n	8002358 <HAL_DMA_Init+0x174>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a30      	ldr	r2, [pc, #192]	; (80023b0 <HAL_DMA_Init+0x1cc>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d031      	beq.n	8002358 <HAL_DMA_Init+0x174>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a2e      	ldr	r2, [pc, #184]	; (80023b4 <HAL_DMA_Init+0x1d0>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d02c      	beq.n	8002358 <HAL_DMA_Init+0x174>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a2d      	ldr	r2, [pc, #180]	; (80023b8 <HAL_DMA_Init+0x1d4>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d027      	beq.n	8002358 <HAL_DMA_Init+0x174>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a2b      	ldr	r2, [pc, #172]	; (80023bc <HAL_DMA_Init+0x1d8>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d022      	beq.n	8002358 <HAL_DMA_Init+0x174>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a2a      	ldr	r2, [pc, #168]	; (80023c0 <HAL_DMA_Init+0x1dc>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d01d      	beq.n	8002358 <HAL_DMA_Init+0x174>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a28      	ldr	r2, [pc, #160]	; (80023c4 <HAL_DMA_Init+0x1e0>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d018      	beq.n	8002358 <HAL_DMA_Init+0x174>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a27      	ldr	r2, [pc, #156]	; (80023c8 <HAL_DMA_Init+0x1e4>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d013      	beq.n	8002358 <HAL_DMA_Init+0x174>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a25      	ldr	r2, [pc, #148]	; (80023cc <HAL_DMA_Init+0x1e8>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d00e      	beq.n	8002358 <HAL_DMA_Init+0x174>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a24      	ldr	r2, [pc, #144]	; (80023d0 <HAL_DMA_Init+0x1ec>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d009      	beq.n	8002358 <HAL_DMA_Init+0x174>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a22      	ldr	r2, [pc, #136]	; (80023d4 <HAL_DMA_Init+0x1f0>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d004      	beq.n	8002358 <HAL_DMA_Init+0x174>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a21      	ldr	r2, [pc, #132]	; (80023d8 <HAL_DMA_Init+0x1f4>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d108      	bne.n	800236a <HAL_DMA_Init+0x186>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f022 0201 	bic.w	r2, r2, #1
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	e007      	b.n	800237a <HAL_DMA_Init+0x196>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f022 0201 	bic.w	r2, r2, #1
 8002378:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800237a:	e02f      	b.n	80023dc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800237c:	f7ff fd5c 	bl	8001e38 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b05      	cmp	r3, #5
 8002388:	d928      	bls.n	80023dc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2220      	movs	r2, #32
 800238e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2203      	movs	r2, #3
 8002394:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e246      	b.n	800282a <HAL_DMA_Init+0x646>
 800239c:	40020010 	.word	0x40020010
 80023a0:	40020028 	.word	0x40020028
 80023a4:	40020040 	.word	0x40020040
 80023a8:	40020058 	.word	0x40020058
 80023ac:	40020070 	.word	0x40020070
 80023b0:	40020088 	.word	0x40020088
 80023b4:	400200a0 	.word	0x400200a0
 80023b8:	400200b8 	.word	0x400200b8
 80023bc:	40020410 	.word	0x40020410
 80023c0:	40020428 	.word	0x40020428
 80023c4:	40020440 	.word	0x40020440
 80023c8:	40020458 	.word	0x40020458
 80023cc:	40020470 	.word	0x40020470
 80023d0:	40020488 	.word	0x40020488
 80023d4:	400204a0 	.word	0x400204a0
 80023d8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d1c8      	bne.n	800237c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80023f2:	697a      	ldr	r2, [r7, #20]
 80023f4:	4b83      	ldr	r3, [pc, #524]	; (8002604 <HAL_DMA_Init+0x420>)
 80023f6:	4013      	ands	r3, r2
 80023f8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002402:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	691b      	ldr	r3, [r3, #16]
 8002408:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800240e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800241a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a1b      	ldr	r3, [r3, #32]
 8002420:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002422:	697a      	ldr	r2, [r7, #20]
 8002424:	4313      	orrs	r3, r2
 8002426:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242c:	2b04      	cmp	r3, #4
 800242e:	d107      	bne.n	8002440 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002438:	4313      	orrs	r3, r2
 800243a:	697a      	ldr	r2, [r7, #20]
 800243c:	4313      	orrs	r3, r2
 800243e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002440:	4b71      	ldr	r3, [pc, #452]	; (8002608 <HAL_DMA_Init+0x424>)
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	4b71      	ldr	r3, [pc, #452]	; (800260c <HAL_DMA_Init+0x428>)
 8002446:	4013      	ands	r3, r2
 8002448:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800244c:	d328      	bcc.n	80024a0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	2b28      	cmp	r3, #40	; 0x28
 8002454:	d903      	bls.n	800245e <HAL_DMA_Init+0x27a>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	2b2e      	cmp	r3, #46	; 0x2e
 800245c:	d917      	bls.n	800248e <HAL_DMA_Init+0x2aa>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	2b3e      	cmp	r3, #62	; 0x3e
 8002464:	d903      	bls.n	800246e <HAL_DMA_Init+0x28a>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	2b42      	cmp	r3, #66	; 0x42
 800246c:	d90f      	bls.n	800248e <HAL_DMA_Init+0x2aa>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	2b46      	cmp	r3, #70	; 0x46
 8002474:	d903      	bls.n	800247e <HAL_DMA_Init+0x29a>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	2b48      	cmp	r3, #72	; 0x48
 800247c:	d907      	bls.n	800248e <HAL_DMA_Init+0x2aa>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	2b4e      	cmp	r3, #78	; 0x4e
 8002484:	d905      	bls.n	8002492 <HAL_DMA_Init+0x2ae>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	2b52      	cmp	r3, #82	; 0x52
 800248c:	d801      	bhi.n	8002492 <HAL_DMA_Init+0x2ae>
 800248e:	2301      	movs	r3, #1
 8002490:	e000      	b.n	8002494 <HAL_DMA_Init+0x2b0>
 8002492:	2300      	movs	r3, #0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d003      	beq.n	80024a0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800249e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	697a      	ldr	r2, [r7, #20]
 80024a6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	695b      	ldr	r3, [r3, #20]
 80024ae:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	f023 0307 	bic.w	r3, r3, #7
 80024b6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024bc:	697a      	ldr	r2, [r7, #20]
 80024be:	4313      	orrs	r3, r2
 80024c0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c6:	2b04      	cmp	r3, #4
 80024c8:	d117      	bne.n	80024fa <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ce:	697a      	ldr	r2, [r7, #20]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d00e      	beq.n	80024fa <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f002 fb4d 	bl	8004b7c <DMA_CheckFifoParam>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d008      	beq.n	80024fa <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2240      	movs	r2, #64	; 0x40
 80024ec:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2201      	movs	r2, #1
 80024f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e197      	b.n	800282a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	697a      	ldr	r2, [r7, #20]
 8002500:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f002 fa88 	bl	8004a18 <DMA_CalcBaseAndBitshift>
 8002508:	4603      	mov	r3, r0
 800250a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002510:	f003 031f 	and.w	r3, r3, #31
 8002514:	223f      	movs	r2, #63	; 0x3f
 8002516:	409a      	lsls	r2, r3
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	609a      	str	r2, [r3, #8]
 800251c:	e0cd      	b.n	80026ba <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a3b      	ldr	r2, [pc, #236]	; (8002610 <HAL_DMA_Init+0x42c>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d022      	beq.n	800256e <HAL_DMA_Init+0x38a>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a39      	ldr	r2, [pc, #228]	; (8002614 <HAL_DMA_Init+0x430>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d01d      	beq.n	800256e <HAL_DMA_Init+0x38a>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a38      	ldr	r2, [pc, #224]	; (8002618 <HAL_DMA_Init+0x434>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d018      	beq.n	800256e <HAL_DMA_Init+0x38a>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a36      	ldr	r2, [pc, #216]	; (800261c <HAL_DMA_Init+0x438>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d013      	beq.n	800256e <HAL_DMA_Init+0x38a>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a35      	ldr	r2, [pc, #212]	; (8002620 <HAL_DMA_Init+0x43c>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d00e      	beq.n	800256e <HAL_DMA_Init+0x38a>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a33      	ldr	r2, [pc, #204]	; (8002624 <HAL_DMA_Init+0x440>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d009      	beq.n	800256e <HAL_DMA_Init+0x38a>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a32      	ldr	r2, [pc, #200]	; (8002628 <HAL_DMA_Init+0x444>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d004      	beq.n	800256e <HAL_DMA_Init+0x38a>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a30      	ldr	r2, [pc, #192]	; (800262c <HAL_DMA_Init+0x448>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d101      	bne.n	8002572 <HAL_DMA_Init+0x38e>
 800256e:	2301      	movs	r3, #1
 8002570:	e000      	b.n	8002574 <HAL_DMA_Init+0x390>
 8002572:	2300      	movs	r3, #0
 8002574:	2b00      	cmp	r3, #0
 8002576:	f000 8097 	beq.w	80026a8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a24      	ldr	r2, [pc, #144]	; (8002610 <HAL_DMA_Init+0x42c>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d021      	beq.n	80025c8 <HAL_DMA_Init+0x3e4>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a22      	ldr	r2, [pc, #136]	; (8002614 <HAL_DMA_Init+0x430>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d01c      	beq.n	80025c8 <HAL_DMA_Init+0x3e4>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a21      	ldr	r2, [pc, #132]	; (8002618 <HAL_DMA_Init+0x434>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d017      	beq.n	80025c8 <HAL_DMA_Init+0x3e4>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a1f      	ldr	r2, [pc, #124]	; (800261c <HAL_DMA_Init+0x438>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d012      	beq.n	80025c8 <HAL_DMA_Init+0x3e4>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a1e      	ldr	r2, [pc, #120]	; (8002620 <HAL_DMA_Init+0x43c>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d00d      	beq.n	80025c8 <HAL_DMA_Init+0x3e4>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a1c      	ldr	r2, [pc, #112]	; (8002624 <HAL_DMA_Init+0x440>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d008      	beq.n	80025c8 <HAL_DMA_Init+0x3e4>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a1b      	ldr	r2, [pc, #108]	; (8002628 <HAL_DMA_Init+0x444>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d003      	beq.n	80025c8 <HAL_DMA_Init+0x3e4>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a19      	ldr	r2, [pc, #100]	; (800262c <HAL_DMA_Init+0x448>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2202      	movs	r2, #2
 80025d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80025e2:	697a      	ldr	r2, [r7, #20]
 80025e4:	4b12      	ldr	r3, [pc, #72]	; (8002630 <HAL_DMA_Init+0x44c>)
 80025e6:	4013      	ands	r3, r2
 80025e8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	2b40      	cmp	r3, #64	; 0x40
 80025f0:	d020      	beq.n	8002634 <HAL_DMA_Init+0x450>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	2b80      	cmp	r3, #128	; 0x80
 80025f8:	d102      	bne.n	8002600 <HAL_DMA_Init+0x41c>
 80025fa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80025fe:	e01a      	b.n	8002636 <HAL_DMA_Init+0x452>
 8002600:	2300      	movs	r3, #0
 8002602:	e018      	b.n	8002636 <HAL_DMA_Init+0x452>
 8002604:	fe10803f 	.word	0xfe10803f
 8002608:	5c001000 	.word	0x5c001000
 800260c:	ffff0000 	.word	0xffff0000
 8002610:	58025408 	.word	0x58025408
 8002614:	5802541c 	.word	0x5802541c
 8002618:	58025430 	.word	0x58025430
 800261c:	58025444 	.word	0x58025444
 8002620:	58025458 	.word	0x58025458
 8002624:	5802546c 	.word	0x5802546c
 8002628:	58025480 	.word	0x58025480
 800262c:	58025494 	.word	0x58025494
 8002630:	fffe000f 	.word	0xfffe000f
 8002634:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	68d2      	ldr	r2, [r2, #12]
 800263a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800263c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002644:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800264c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002654:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	69db      	ldr	r3, [r3, #28]
 800265a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800265c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6a1b      	ldr	r3, [r3, #32]
 8002662:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002664:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	4313      	orrs	r3, r2
 800266a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	697a      	ldr	r2, [r7, #20]
 8002672:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	461a      	mov	r2, r3
 800267a:	4b6e      	ldr	r3, [pc, #440]	; (8002834 <HAL_DMA_Init+0x650>)
 800267c:	4413      	add	r3, r2
 800267e:	4a6e      	ldr	r2, [pc, #440]	; (8002838 <HAL_DMA_Init+0x654>)
 8002680:	fba2 2303 	umull	r2, r3, r2, r3
 8002684:	091b      	lsrs	r3, r3, #4
 8002686:	009a      	lsls	r2, r3, #2
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f002 f9c3 	bl	8004a18 <DMA_CalcBaseAndBitshift>
 8002692:	4603      	mov	r3, r0
 8002694:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800269a:	f003 031f 	and.w	r3, r3, #31
 800269e:	2201      	movs	r2, #1
 80026a0:	409a      	lsls	r2, r3
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	605a      	str	r2, [r3, #4]
 80026a6:	e008      	b.n	80026ba <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2240      	movs	r2, #64	; 0x40
 80026ac:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2203      	movs	r2, #3
 80026b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e0b7      	b.n	800282a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a5f      	ldr	r2, [pc, #380]	; (800283c <HAL_DMA_Init+0x658>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d072      	beq.n	80027aa <HAL_DMA_Init+0x5c6>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a5d      	ldr	r2, [pc, #372]	; (8002840 <HAL_DMA_Init+0x65c>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d06d      	beq.n	80027aa <HAL_DMA_Init+0x5c6>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a5c      	ldr	r2, [pc, #368]	; (8002844 <HAL_DMA_Init+0x660>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d068      	beq.n	80027aa <HAL_DMA_Init+0x5c6>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a5a      	ldr	r2, [pc, #360]	; (8002848 <HAL_DMA_Init+0x664>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d063      	beq.n	80027aa <HAL_DMA_Init+0x5c6>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a59      	ldr	r2, [pc, #356]	; (800284c <HAL_DMA_Init+0x668>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d05e      	beq.n	80027aa <HAL_DMA_Init+0x5c6>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a57      	ldr	r2, [pc, #348]	; (8002850 <HAL_DMA_Init+0x66c>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d059      	beq.n	80027aa <HAL_DMA_Init+0x5c6>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a56      	ldr	r2, [pc, #344]	; (8002854 <HAL_DMA_Init+0x670>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d054      	beq.n	80027aa <HAL_DMA_Init+0x5c6>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a54      	ldr	r2, [pc, #336]	; (8002858 <HAL_DMA_Init+0x674>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d04f      	beq.n	80027aa <HAL_DMA_Init+0x5c6>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a53      	ldr	r2, [pc, #332]	; (800285c <HAL_DMA_Init+0x678>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d04a      	beq.n	80027aa <HAL_DMA_Init+0x5c6>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a51      	ldr	r2, [pc, #324]	; (8002860 <HAL_DMA_Init+0x67c>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d045      	beq.n	80027aa <HAL_DMA_Init+0x5c6>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a50      	ldr	r2, [pc, #320]	; (8002864 <HAL_DMA_Init+0x680>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d040      	beq.n	80027aa <HAL_DMA_Init+0x5c6>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a4e      	ldr	r2, [pc, #312]	; (8002868 <HAL_DMA_Init+0x684>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d03b      	beq.n	80027aa <HAL_DMA_Init+0x5c6>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a4d      	ldr	r2, [pc, #308]	; (800286c <HAL_DMA_Init+0x688>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d036      	beq.n	80027aa <HAL_DMA_Init+0x5c6>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a4b      	ldr	r2, [pc, #300]	; (8002870 <HAL_DMA_Init+0x68c>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d031      	beq.n	80027aa <HAL_DMA_Init+0x5c6>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a4a      	ldr	r2, [pc, #296]	; (8002874 <HAL_DMA_Init+0x690>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d02c      	beq.n	80027aa <HAL_DMA_Init+0x5c6>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a48      	ldr	r2, [pc, #288]	; (8002878 <HAL_DMA_Init+0x694>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d027      	beq.n	80027aa <HAL_DMA_Init+0x5c6>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a47      	ldr	r2, [pc, #284]	; (800287c <HAL_DMA_Init+0x698>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d022      	beq.n	80027aa <HAL_DMA_Init+0x5c6>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a45      	ldr	r2, [pc, #276]	; (8002880 <HAL_DMA_Init+0x69c>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d01d      	beq.n	80027aa <HAL_DMA_Init+0x5c6>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a44      	ldr	r2, [pc, #272]	; (8002884 <HAL_DMA_Init+0x6a0>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d018      	beq.n	80027aa <HAL_DMA_Init+0x5c6>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a42      	ldr	r2, [pc, #264]	; (8002888 <HAL_DMA_Init+0x6a4>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d013      	beq.n	80027aa <HAL_DMA_Init+0x5c6>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a41      	ldr	r2, [pc, #260]	; (800288c <HAL_DMA_Init+0x6a8>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d00e      	beq.n	80027aa <HAL_DMA_Init+0x5c6>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a3f      	ldr	r2, [pc, #252]	; (8002890 <HAL_DMA_Init+0x6ac>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d009      	beq.n	80027aa <HAL_DMA_Init+0x5c6>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a3e      	ldr	r2, [pc, #248]	; (8002894 <HAL_DMA_Init+0x6b0>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d004      	beq.n	80027aa <HAL_DMA_Init+0x5c6>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a3c      	ldr	r2, [pc, #240]	; (8002898 <HAL_DMA_Init+0x6b4>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d101      	bne.n	80027ae <HAL_DMA_Init+0x5ca>
 80027aa:	2301      	movs	r3, #1
 80027ac:	e000      	b.n	80027b0 <HAL_DMA_Init+0x5cc>
 80027ae:	2300      	movs	r3, #0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d032      	beq.n	800281a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f002 fa5d 	bl	8004c74 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	2b80      	cmp	r3, #128	; 0x80
 80027c0:	d102      	bne.n	80027c8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685a      	ldr	r2, [r3, #4]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027d0:	b2d2      	uxtb	r2, r2
 80027d2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80027dc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d010      	beq.n	8002808 <HAL_DMA_Init+0x624>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	2b08      	cmp	r3, #8
 80027ec:	d80c      	bhi.n	8002808 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f002 fada 	bl	8004da8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027f8:	2200      	movs	r2, #0
 80027fa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002804:	605a      	str	r2, [r3, #4]
 8002806:	e008      	b.n	800281a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	3718      	adds	r7, #24
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	a7fdabf8 	.word	0xa7fdabf8
 8002838:	cccccccd 	.word	0xcccccccd
 800283c:	40020010 	.word	0x40020010
 8002840:	40020028 	.word	0x40020028
 8002844:	40020040 	.word	0x40020040
 8002848:	40020058 	.word	0x40020058
 800284c:	40020070 	.word	0x40020070
 8002850:	40020088 	.word	0x40020088
 8002854:	400200a0 	.word	0x400200a0
 8002858:	400200b8 	.word	0x400200b8
 800285c:	40020410 	.word	0x40020410
 8002860:	40020428 	.word	0x40020428
 8002864:	40020440 	.word	0x40020440
 8002868:	40020458 	.word	0x40020458
 800286c:	40020470 	.word	0x40020470
 8002870:	40020488 	.word	0x40020488
 8002874:	400204a0 	.word	0x400204a0
 8002878:	400204b8 	.word	0x400204b8
 800287c:	58025408 	.word	0x58025408
 8002880:	5802541c 	.word	0x5802541c
 8002884:	58025430 	.word	0x58025430
 8002888:	58025444 	.word	0x58025444
 800288c:	58025458 	.word	0x58025458
 8002890:	5802546c 	.word	0x5802546c
 8002894:	58025480 	.word	0x58025480
 8002898:	58025494 	.word	0x58025494

0800289c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b086      	sub	sp, #24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	607a      	str	r2, [r7, #4]
 80028a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028aa:	2300      	movs	r3, #0
 80028ac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d101      	bne.n	80028b8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e226      	b.n	8002d06 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d101      	bne.n	80028c6 <HAL_DMA_Start_IT+0x2a>
 80028c2:	2302      	movs	r3, #2
 80028c4:	e21f      	b.n	8002d06 <HAL_DMA_Start_IT+0x46a>
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2201      	movs	r2, #1
 80028ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	f040 820a 	bne.w	8002cf0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2202      	movs	r2, #2
 80028e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2200      	movs	r2, #0
 80028e8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a68      	ldr	r2, [pc, #416]	; (8002a90 <HAL_DMA_Start_IT+0x1f4>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d04a      	beq.n	800298a <HAL_DMA_Start_IT+0xee>
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a66      	ldr	r2, [pc, #408]	; (8002a94 <HAL_DMA_Start_IT+0x1f8>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d045      	beq.n	800298a <HAL_DMA_Start_IT+0xee>
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a65      	ldr	r2, [pc, #404]	; (8002a98 <HAL_DMA_Start_IT+0x1fc>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d040      	beq.n	800298a <HAL_DMA_Start_IT+0xee>
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a63      	ldr	r2, [pc, #396]	; (8002a9c <HAL_DMA_Start_IT+0x200>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d03b      	beq.n	800298a <HAL_DMA_Start_IT+0xee>
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a62      	ldr	r2, [pc, #392]	; (8002aa0 <HAL_DMA_Start_IT+0x204>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d036      	beq.n	800298a <HAL_DMA_Start_IT+0xee>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a60      	ldr	r2, [pc, #384]	; (8002aa4 <HAL_DMA_Start_IT+0x208>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d031      	beq.n	800298a <HAL_DMA_Start_IT+0xee>
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a5f      	ldr	r2, [pc, #380]	; (8002aa8 <HAL_DMA_Start_IT+0x20c>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d02c      	beq.n	800298a <HAL_DMA_Start_IT+0xee>
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a5d      	ldr	r2, [pc, #372]	; (8002aac <HAL_DMA_Start_IT+0x210>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d027      	beq.n	800298a <HAL_DMA_Start_IT+0xee>
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a5c      	ldr	r2, [pc, #368]	; (8002ab0 <HAL_DMA_Start_IT+0x214>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d022      	beq.n	800298a <HAL_DMA_Start_IT+0xee>
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a5a      	ldr	r2, [pc, #360]	; (8002ab4 <HAL_DMA_Start_IT+0x218>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d01d      	beq.n	800298a <HAL_DMA_Start_IT+0xee>
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a59      	ldr	r2, [pc, #356]	; (8002ab8 <HAL_DMA_Start_IT+0x21c>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d018      	beq.n	800298a <HAL_DMA_Start_IT+0xee>
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a57      	ldr	r2, [pc, #348]	; (8002abc <HAL_DMA_Start_IT+0x220>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d013      	beq.n	800298a <HAL_DMA_Start_IT+0xee>
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a56      	ldr	r2, [pc, #344]	; (8002ac0 <HAL_DMA_Start_IT+0x224>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d00e      	beq.n	800298a <HAL_DMA_Start_IT+0xee>
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a54      	ldr	r2, [pc, #336]	; (8002ac4 <HAL_DMA_Start_IT+0x228>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d009      	beq.n	800298a <HAL_DMA_Start_IT+0xee>
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a53      	ldr	r2, [pc, #332]	; (8002ac8 <HAL_DMA_Start_IT+0x22c>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d004      	beq.n	800298a <HAL_DMA_Start_IT+0xee>
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a51      	ldr	r2, [pc, #324]	; (8002acc <HAL_DMA_Start_IT+0x230>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d108      	bne.n	800299c <HAL_DMA_Start_IT+0x100>
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f022 0201 	bic.w	r2, r2, #1
 8002998:	601a      	str	r2, [r3, #0]
 800299a:	e007      	b.n	80029ac <HAL_DMA_Start_IT+0x110>
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f022 0201 	bic.w	r2, r2, #1
 80029aa:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	68b9      	ldr	r1, [r7, #8]
 80029b2:	68f8      	ldr	r0, [r7, #12]
 80029b4:	f001 fe84 	bl	80046c0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a34      	ldr	r2, [pc, #208]	; (8002a90 <HAL_DMA_Start_IT+0x1f4>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d04a      	beq.n	8002a58 <HAL_DMA_Start_IT+0x1bc>
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a33      	ldr	r2, [pc, #204]	; (8002a94 <HAL_DMA_Start_IT+0x1f8>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d045      	beq.n	8002a58 <HAL_DMA_Start_IT+0x1bc>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a31      	ldr	r2, [pc, #196]	; (8002a98 <HAL_DMA_Start_IT+0x1fc>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d040      	beq.n	8002a58 <HAL_DMA_Start_IT+0x1bc>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a30      	ldr	r2, [pc, #192]	; (8002a9c <HAL_DMA_Start_IT+0x200>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d03b      	beq.n	8002a58 <HAL_DMA_Start_IT+0x1bc>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a2e      	ldr	r2, [pc, #184]	; (8002aa0 <HAL_DMA_Start_IT+0x204>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d036      	beq.n	8002a58 <HAL_DMA_Start_IT+0x1bc>
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a2d      	ldr	r2, [pc, #180]	; (8002aa4 <HAL_DMA_Start_IT+0x208>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d031      	beq.n	8002a58 <HAL_DMA_Start_IT+0x1bc>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a2b      	ldr	r2, [pc, #172]	; (8002aa8 <HAL_DMA_Start_IT+0x20c>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d02c      	beq.n	8002a58 <HAL_DMA_Start_IT+0x1bc>
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a2a      	ldr	r2, [pc, #168]	; (8002aac <HAL_DMA_Start_IT+0x210>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d027      	beq.n	8002a58 <HAL_DMA_Start_IT+0x1bc>
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a28      	ldr	r2, [pc, #160]	; (8002ab0 <HAL_DMA_Start_IT+0x214>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d022      	beq.n	8002a58 <HAL_DMA_Start_IT+0x1bc>
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a27      	ldr	r2, [pc, #156]	; (8002ab4 <HAL_DMA_Start_IT+0x218>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d01d      	beq.n	8002a58 <HAL_DMA_Start_IT+0x1bc>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a25      	ldr	r2, [pc, #148]	; (8002ab8 <HAL_DMA_Start_IT+0x21c>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d018      	beq.n	8002a58 <HAL_DMA_Start_IT+0x1bc>
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a24      	ldr	r2, [pc, #144]	; (8002abc <HAL_DMA_Start_IT+0x220>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d013      	beq.n	8002a58 <HAL_DMA_Start_IT+0x1bc>
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a22      	ldr	r2, [pc, #136]	; (8002ac0 <HAL_DMA_Start_IT+0x224>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d00e      	beq.n	8002a58 <HAL_DMA_Start_IT+0x1bc>
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a21      	ldr	r2, [pc, #132]	; (8002ac4 <HAL_DMA_Start_IT+0x228>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d009      	beq.n	8002a58 <HAL_DMA_Start_IT+0x1bc>
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a1f      	ldr	r2, [pc, #124]	; (8002ac8 <HAL_DMA_Start_IT+0x22c>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d004      	beq.n	8002a58 <HAL_DMA_Start_IT+0x1bc>
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a1e      	ldr	r2, [pc, #120]	; (8002acc <HAL_DMA_Start_IT+0x230>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d101      	bne.n	8002a5c <HAL_DMA_Start_IT+0x1c0>
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e000      	b.n	8002a5e <HAL_DMA_Start_IT+0x1c2>
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d036      	beq.n	8002ad0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f023 021e 	bic.w	r2, r3, #30
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f042 0216 	orr.w	r2, r2, #22
 8002a74:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d03e      	beq.n	8002afc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f042 0208 	orr.w	r2, r2, #8
 8002a8c:	601a      	str	r2, [r3, #0]
 8002a8e:	e035      	b.n	8002afc <HAL_DMA_Start_IT+0x260>
 8002a90:	40020010 	.word	0x40020010
 8002a94:	40020028 	.word	0x40020028
 8002a98:	40020040 	.word	0x40020040
 8002a9c:	40020058 	.word	0x40020058
 8002aa0:	40020070 	.word	0x40020070
 8002aa4:	40020088 	.word	0x40020088
 8002aa8:	400200a0 	.word	0x400200a0
 8002aac:	400200b8 	.word	0x400200b8
 8002ab0:	40020410 	.word	0x40020410
 8002ab4:	40020428 	.word	0x40020428
 8002ab8:	40020440 	.word	0x40020440
 8002abc:	40020458 	.word	0x40020458
 8002ac0:	40020470 	.word	0x40020470
 8002ac4:	40020488 	.word	0x40020488
 8002ac8:	400204a0 	.word	0x400204a0
 8002acc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f023 020e 	bic.w	r2, r3, #14
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f042 020a 	orr.w	r2, r2, #10
 8002ae2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d007      	beq.n	8002afc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f042 0204 	orr.w	r2, r2, #4
 8002afa:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a83      	ldr	r2, [pc, #524]	; (8002d10 <HAL_DMA_Start_IT+0x474>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d072      	beq.n	8002bec <HAL_DMA_Start_IT+0x350>
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a82      	ldr	r2, [pc, #520]	; (8002d14 <HAL_DMA_Start_IT+0x478>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d06d      	beq.n	8002bec <HAL_DMA_Start_IT+0x350>
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a80      	ldr	r2, [pc, #512]	; (8002d18 <HAL_DMA_Start_IT+0x47c>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d068      	beq.n	8002bec <HAL_DMA_Start_IT+0x350>
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a7f      	ldr	r2, [pc, #508]	; (8002d1c <HAL_DMA_Start_IT+0x480>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d063      	beq.n	8002bec <HAL_DMA_Start_IT+0x350>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a7d      	ldr	r2, [pc, #500]	; (8002d20 <HAL_DMA_Start_IT+0x484>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d05e      	beq.n	8002bec <HAL_DMA_Start_IT+0x350>
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a7c      	ldr	r2, [pc, #496]	; (8002d24 <HAL_DMA_Start_IT+0x488>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d059      	beq.n	8002bec <HAL_DMA_Start_IT+0x350>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a7a      	ldr	r2, [pc, #488]	; (8002d28 <HAL_DMA_Start_IT+0x48c>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d054      	beq.n	8002bec <HAL_DMA_Start_IT+0x350>
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a79      	ldr	r2, [pc, #484]	; (8002d2c <HAL_DMA_Start_IT+0x490>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d04f      	beq.n	8002bec <HAL_DMA_Start_IT+0x350>
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a77      	ldr	r2, [pc, #476]	; (8002d30 <HAL_DMA_Start_IT+0x494>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d04a      	beq.n	8002bec <HAL_DMA_Start_IT+0x350>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a76      	ldr	r2, [pc, #472]	; (8002d34 <HAL_DMA_Start_IT+0x498>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d045      	beq.n	8002bec <HAL_DMA_Start_IT+0x350>
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a74      	ldr	r2, [pc, #464]	; (8002d38 <HAL_DMA_Start_IT+0x49c>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d040      	beq.n	8002bec <HAL_DMA_Start_IT+0x350>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a73      	ldr	r2, [pc, #460]	; (8002d3c <HAL_DMA_Start_IT+0x4a0>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d03b      	beq.n	8002bec <HAL_DMA_Start_IT+0x350>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a71      	ldr	r2, [pc, #452]	; (8002d40 <HAL_DMA_Start_IT+0x4a4>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d036      	beq.n	8002bec <HAL_DMA_Start_IT+0x350>
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a70      	ldr	r2, [pc, #448]	; (8002d44 <HAL_DMA_Start_IT+0x4a8>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d031      	beq.n	8002bec <HAL_DMA_Start_IT+0x350>
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a6e      	ldr	r2, [pc, #440]	; (8002d48 <HAL_DMA_Start_IT+0x4ac>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d02c      	beq.n	8002bec <HAL_DMA_Start_IT+0x350>
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a6d      	ldr	r2, [pc, #436]	; (8002d4c <HAL_DMA_Start_IT+0x4b0>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d027      	beq.n	8002bec <HAL_DMA_Start_IT+0x350>
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a6b      	ldr	r2, [pc, #428]	; (8002d50 <HAL_DMA_Start_IT+0x4b4>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d022      	beq.n	8002bec <HAL_DMA_Start_IT+0x350>
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a6a      	ldr	r2, [pc, #424]	; (8002d54 <HAL_DMA_Start_IT+0x4b8>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d01d      	beq.n	8002bec <HAL_DMA_Start_IT+0x350>
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a68      	ldr	r2, [pc, #416]	; (8002d58 <HAL_DMA_Start_IT+0x4bc>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d018      	beq.n	8002bec <HAL_DMA_Start_IT+0x350>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a67      	ldr	r2, [pc, #412]	; (8002d5c <HAL_DMA_Start_IT+0x4c0>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d013      	beq.n	8002bec <HAL_DMA_Start_IT+0x350>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a65      	ldr	r2, [pc, #404]	; (8002d60 <HAL_DMA_Start_IT+0x4c4>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d00e      	beq.n	8002bec <HAL_DMA_Start_IT+0x350>
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a64      	ldr	r2, [pc, #400]	; (8002d64 <HAL_DMA_Start_IT+0x4c8>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d009      	beq.n	8002bec <HAL_DMA_Start_IT+0x350>
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a62      	ldr	r2, [pc, #392]	; (8002d68 <HAL_DMA_Start_IT+0x4cc>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d004      	beq.n	8002bec <HAL_DMA_Start_IT+0x350>
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a61      	ldr	r2, [pc, #388]	; (8002d6c <HAL_DMA_Start_IT+0x4d0>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d101      	bne.n	8002bf0 <HAL_DMA_Start_IT+0x354>
 8002bec:	2301      	movs	r3, #1
 8002bee:	e000      	b.n	8002bf2 <HAL_DMA_Start_IT+0x356>
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d01a      	beq.n	8002c2c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d007      	beq.n	8002c14 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c12:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d007      	beq.n	8002c2c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c2a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a37      	ldr	r2, [pc, #220]	; (8002d10 <HAL_DMA_Start_IT+0x474>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d04a      	beq.n	8002ccc <HAL_DMA_Start_IT+0x430>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a36      	ldr	r2, [pc, #216]	; (8002d14 <HAL_DMA_Start_IT+0x478>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d045      	beq.n	8002ccc <HAL_DMA_Start_IT+0x430>
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a34      	ldr	r2, [pc, #208]	; (8002d18 <HAL_DMA_Start_IT+0x47c>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d040      	beq.n	8002ccc <HAL_DMA_Start_IT+0x430>
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a33      	ldr	r2, [pc, #204]	; (8002d1c <HAL_DMA_Start_IT+0x480>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d03b      	beq.n	8002ccc <HAL_DMA_Start_IT+0x430>
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a31      	ldr	r2, [pc, #196]	; (8002d20 <HAL_DMA_Start_IT+0x484>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d036      	beq.n	8002ccc <HAL_DMA_Start_IT+0x430>
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a30      	ldr	r2, [pc, #192]	; (8002d24 <HAL_DMA_Start_IT+0x488>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d031      	beq.n	8002ccc <HAL_DMA_Start_IT+0x430>
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a2e      	ldr	r2, [pc, #184]	; (8002d28 <HAL_DMA_Start_IT+0x48c>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d02c      	beq.n	8002ccc <HAL_DMA_Start_IT+0x430>
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a2d      	ldr	r2, [pc, #180]	; (8002d2c <HAL_DMA_Start_IT+0x490>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d027      	beq.n	8002ccc <HAL_DMA_Start_IT+0x430>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a2b      	ldr	r2, [pc, #172]	; (8002d30 <HAL_DMA_Start_IT+0x494>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d022      	beq.n	8002ccc <HAL_DMA_Start_IT+0x430>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a2a      	ldr	r2, [pc, #168]	; (8002d34 <HAL_DMA_Start_IT+0x498>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d01d      	beq.n	8002ccc <HAL_DMA_Start_IT+0x430>
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a28      	ldr	r2, [pc, #160]	; (8002d38 <HAL_DMA_Start_IT+0x49c>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d018      	beq.n	8002ccc <HAL_DMA_Start_IT+0x430>
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a27      	ldr	r2, [pc, #156]	; (8002d3c <HAL_DMA_Start_IT+0x4a0>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d013      	beq.n	8002ccc <HAL_DMA_Start_IT+0x430>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a25      	ldr	r2, [pc, #148]	; (8002d40 <HAL_DMA_Start_IT+0x4a4>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d00e      	beq.n	8002ccc <HAL_DMA_Start_IT+0x430>
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a24      	ldr	r2, [pc, #144]	; (8002d44 <HAL_DMA_Start_IT+0x4a8>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d009      	beq.n	8002ccc <HAL_DMA_Start_IT+0x430>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a22      	ldr	r2, [pc, #136]	; (8002d48 <HAL_DMA_Start_IT+0x4ac>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d004      	beq.n	8002ccc <HAL_DMA_Start_IT+0x430>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a21      	ldr	r2, [pc, #132]	; (8002d4c <HAL_DMA_Start_IT+0x4b0>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d108      	bne.n	8002cde <HAL_DMA_Start_IT+0x442>
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f042 0201 	orr.w	r2, r2, #1
 8002cda:	601a      	str	r2, [r3, #0]
 8002cdc:	e012      	b.n	8002d04 <HAL_DMA_Start_IT+0x468>
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f042 0201 	orr.w	r2, r2, #1
 8002cec:	601a      	str	r2, [r3, #0]
 8002cee:	e009      	b.n	8002d04 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002cfe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002d04:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3718      	adds	r7, #24
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	40020010 	.word	0x40020010
 8002d14:	40020028 	.word	0x40020028
 8002d18:	40020040 	.word	0x40020040
 8002d1c:	40020058 	.word	0x40020058
 8002d20:	40020070 	.word	0x40020070
 8002d24:	40020088 	.word	0x40020088
 8002d28:	400200a0 	.word	0x400200a0
 8002d2c:	400200b8 	.word	0x400200b8
 8002d30:	40020410 	.word	0x40020410
 8002d34:	40020428 	.word	0x40020428
 8002d38:	40020440 	.word	0x40020440
 8002d3c:	40020458 	.word	0x40020458
 8002d40:	40020470 	.word	0x40020470
 8002d44:	40020488 	.word	0x40020488
 8002d48:	400204a0 	.word	0x400204a0
 8002d4c:	400204b8 	.word	0x400204b8
 8002d50:	58025408 	.word	0x58025408
 8002d54:	5802541c 	.word	0x5802541c
 8002d58:	58025430 	.word	0x58025430
 8002d5c:	58025444 	.word	0x58025444
 8002d60:	58025458 	.word	0x58025458
 8002d64:	5802546c 	.word	0x5802546c
 8002d68:	58025480 	.word	0x58025480
 8002d6c:	58025494 	.word	0x58025494

08002d70 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b086      	sub	sp, #24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002d78:	f7ff f85e 	bl	8001e38 <HAL_GetTick>
 8002d7c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d101      	bne.n	8002d88 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e2dc      	b.n	8003342 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d008      	beq.n	8002da6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2280      	movs	r2, #128	; 0x80
 8002d98:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e2cd      	b.n	8003342 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a76      	ldr	r2, [pc, #472]	; (8002f84 <HAL_DMA_Abort+0x214>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d04a      	beq.n	8002e46 <HAL_DMA_Abort+0xd6>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a74      	ldr	r2, [pc, #464]	; (8002f88 <HAL_DMA_Abort+0x218>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d045      	beq.n	8002e46 <HAL_DMA_Abort+0xd6>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a73      	ldr	r2, [pc, #460]	; (8002f8c <HAL_DMA_Abort+0x21c>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d040      	beq.n	8002e46 <HAL_DMA_Abort+0xd6>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a71      	ldr	r2, [pc, #452]	; (8002f90 <HAL_DMA_Abort+0x220>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d03b      	beq.n	8002e46 <HAL_DMA_Abort+0xd6>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a70      	ldr	r2, [pc, #448]	; (8002f94 <HAL_DMA_Abort+0x224>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d036      	beq.n	8002e46 <HAL_DMA_Abort+0xd6>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a6e      	ldr	r2, [pc, #440]	; (8002f98 <HAL_DMA_Abort+0x228>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d031      	beq.n	8002e46 <HAL_DMA_Abort+0xd6>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a6d      	ldr	r2, [pc, #436]	; (8002f9c <HAL_DMA_Abort+0x22c>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d02c      	beq.n	8002e46 <HAL_DMA_Abort+0xd6>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a6b      	ldr	r2, [pc, #428]	; (8002fa0 <HAL_DMA_Abort+0x230>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d027      	beq.n	8002e46 <HAL_DMA_Abort+0xd6>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a6a      	ldr	r2, [pc, #424]	; (8002fa4 <HAL_DMA_Abort+0x234>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d022      	beq.n	8002e46 <HAL_DMA_Abort+0xd6>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a68      	ldr	r2, [pc, #416]	; (8002fa8 <HAL_DMA_Abort+0x238>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d01d      	beq.n	8002e46 <HAL_DMA_Abort+0xd6>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a67      	ldr	r2, [pc, #412]	; (8002fac <HAL_DMA_Abort+0x23c>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d018      	beq.n	8002e46 <HAL_DMA_Abort+0xd6>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a65      	ldr	r2, [pc, #404]	; (8002fb0 <HAL_DMA_Abort+0x240>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d013      	beq.n	8002e46 <HAL_DMA_Abort+0xd6>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a64      	ldr	r2, [pc, #400]	; (8002fb4 <HAL_DMA_Abort+0x244>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d00e      	beq.n	8002e46 <HAL_DMA_Abort+0xd6>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a62      	ldr	r2, [pc, #392]	; (8002fb8 <HAL_DMA_Abort+0x248>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d009      	beq.n	8002e46 <HAL_DMA_Abort+0xd6>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a61      	ldr	r2, [pc, #388]	; (8002fbc <HAL_DMA_Abort+0x24c>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d004      	beq.n	8002e46 <HAL_DMA_Abort+0xd6>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a5f      	ldr	r2, [pc, #380]	; (8002fc0 <HAL_DMA_Abort+0x250>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d101      	bne.n	8002e4a <HAL_DMA_Abort+0xda>
 8002e46:	2301      	movs	r3, #1
 8002e48:	e000      	b.n	8002e4c <HAL_DMA_Abort+0xdc>
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d013      	beq.n	8002e78 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f022 021e 	bic.w	r2, r2, #30
 8002e5e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	695a      	ldr	r2, [r3, #20]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e6e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	617b      	str	r3, [r7, #20]
 8002e76:	e00a      	b.n	8002e8e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 020e 	bic.w	r2, r2, #14
 8002e86:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a3c      	ldr	r2, [pc, #240]	; (8002f84 <HAL_DMA_Abort+0x214>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d072      	beq.n	8002f7e <HAL_DMA_Abort+0x20e>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a3a      	ldr	r2, [pc, #232]	; (8002f88 <HAL_DMA_Abort+0x218>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d06d      	beq.n	8002f7e <HAL_DMA_Abort+0x20e>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a39      	ldr	r2, [pc, #228]	; (8002f8c <HAL_DMA_Abort+0x21c>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d068      	beq.n	8002f7e <HAL_DMA_Abort+0x20e>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a37      	ldr	r2, [pc, #220]	; (8002f90 <HAL_DMA_Abort+0x220>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d063      	beq.n	8002f7e <HAL_DMA_Abort+0x20e>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a36      	ldr	r2, [pc, #216]	; (8002f94 <HAL_DMA_Abort+0x224>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d05e      	beq.n	8002f7e <HAL_DMA_Abort+0x20e>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a34      	ldr	r2, [pc, #208]	; (8002f98 <HAL_DMA_Abort+0x228>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d059      	beq.n	8002f7e <HAL_DMA_Abort+0x20e>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a33      	ldr	r2, [pc, #204]	; (8002f9c <HAL_DMA_Abort+0x22c>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d054      	beq.n	8002f7e <HAL_DMA_Abort+0x20e>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a31      	ldr	r2, [pc, #196]	; (8002fa0 <HAL_DMA_Abort+0x230>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d04f      	beq.n	8002f7e <HAL_DMA_Abort+0x20e>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a30      	ldr	r2, [pc, #192]	; (8002fa4 <HAL_DMA_Abort+0x234>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d04a      	beq.n	8002f7e <HAL_DMA_Abort+0x20e>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a2e      	ldr	r2, [pc, #184]	; (8002fa8 <HAL_DMA_Abort+0x238>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d045      	beq.n	8002f7e <HAL_DMA_Abort+0x20e>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a2d      	ldr	r2, [pc, #180]	; (8002fac <HAL_DMA_Abort+0x23c>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d040      	beq.n	8002f7e <HAL_DMA_Abort+0x20e>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a2b      	ldr	r2, [pc, #172]	; (8002fb0 <HAL_DMA_Abort+0x240>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d03b      	beq.n	8002f7e <HAL_DMA_Abort+0x20e>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a2a      	ldr	r2, [pc, #168]	; (8002fb4 <HAL_DMA_Abort+0x244>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d036      	beq.n	8002f7e <HAL_DMA_Abort+0x20e>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a28      	ldr	r2, [pc, #160]	; (8002fb8 <HAL_DMA_Abort+0x248>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d031      	beq.n	8002f7e <HAL_DMA_Abort+0x20e>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a27      	ldr	r2, [pc, #156]	; (8002fbc <HAL_DMA_Abort+0x24c>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d02c      	beq.n	8002f7e <HAL_DMA_Abort+0x20e>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a25      	ldr	r2, [pc, #148]	; (8002fc0 <HAL_DMA_Abort+0x250>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d027      	beq.n	8002f7e <HAL_DMA_Abort+0x20e>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a24      	ldr	r2, [pc, #144]	; (8002fc4 <HAL_DMA_Abort+0x254>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d022      	beq.n	8002f7e <HAL_DMA_Abort+0x20e>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a22      	ldr	r2, [pc, #136]	; (8002fc8 <HAL_DMA_Abort+0x258>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d01d      	beq.n	8002f7e <HAL_DMA_Abort+0x20e>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a21      	ldr	r2, [pc, #132]	; (8002fcc <HAL_DMA_Abort+0x25c>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d018      	beq.n	8002f7e <HAL_DMA_Abort+0x20e>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a1f      	ldr	r2, [pc, #124]	; (8002fd0 <HAL_DMA_Abort+0x260>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d013      	beq.n	8002f7e <HAL_DMA_Abort+0x20e>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a1e      	ldr	r2, [pc, #120]	; (8002fd4 <HAL_DMA_Abort+0x264>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d00e      	beq.n	8002f7e <HAL_DMA_Abort+0x20e>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a1c      	ldr	r2, [pc, #112]	; (8002fd8 <HAL_DMA_Abort+0x268>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d009      	beq.n	8002f7e <HAL_DMA_Abort+0x20e>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a1b      	ldr	r2, [pc, #108]	; (8002fdc <HAL_DMA_Abort+0x26c>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d004      	beq.n	8002f7e <HAL_DMA_Abort+0x20e>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a19      	ldr	r2, [pc, #100]	; (8002fe0 <HAL_DMA_Abort+0x270>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d132      	bne.n	8002fe4 <HAL_DMA_Abort+0x274>
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e031      	b.n	8002fe6 <HAL_DMA_Abort+0x276>
 8002f82:	bf00      	nop
 8002f84:	40020010 	.word	0x40020010
 8002f88:	40020028 	.word	0x40020028
 8002f8c:	40020040 	.word	0x40020040
 8002f90:	40020058 	.word	0x40020058
 8002f94:	40020070 	.word	0x40020070
 8002f98:	40020088 	.word	0x40020088
 8002f9c:	400200a0 	.word	0x400200a0
 8002fa0:	400200b8 	.word	0x400200b8
 8002fa4:	40020410 	.word	0x40020410
 8002fa8:	40020428 	.word	0x40020428
 8002fac:	40020440 	.word	0x40020440
 8002fb0:	40020458 	.word	0x40020458
 8002fb4:	40020470 	.word	0x40020470
 8002fb8:	40020488 	.word	0x40020488
 8002fbc:	400204a0 	.word	0x400204a0
 8002fc0:	400204b8 	.word	0x400204b8
 8002fc4:	58025408 	.word	0x58025408
 8002fc8:	5802541c 	.word	0x5802541c
 8002fcc:	58025430 	.word	0x58025430
 8002fd0:	58025444 	.word	0x58025444
 8002fd4:	58025458 	.word	0x58025458
 8002fd8:	5802546c 	.word	0x5802546c
 8002fdc:	58025480 	.word	0x58025480
 8002fe0:	58025494 	.word	0x58025494
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d007      	beq.n	8002ffa <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ff4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ff8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a6d      	ldr	r2, [pc, #436]	; (80031b4 <HAL_DMA_Abort+0x444>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d04a      	beq.n	800309a <HAL_DMA_Abort+0x32a>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a6b      	ldr	r2, [pc, #428]	; (80031b8 <HAL_DMA_Abort+0x448>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d045      	beq.n	800309a <HAL_DMA_Abort+0x32a>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a6a      	ldr	r2, [pc, #424]	; (80031bc <HAL_DMA_Abort+0x44c>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d040      	beq.n	800309a <HAL_DMA_Abort+0x32a>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a68      	ldr	r2, [pc, #416]	; (80031c0 <HAL_DMA_Abort+0x450>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d03b      	beq.n	800309a <HAL_DMA_Abort+0x32a>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a67      	ldr	r2, [pc, #412]	; (80031c4 <HAL_DMA_Abort+0x454>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d036      	beq.n	800309a <HAL_DMA_Abort+0x32a>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a65      	ldr	r2, [pc, #404]	; (80031c8 <HAL_DMA_Abort+0x458>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d031      	beq.n	800309a <HAL_DMA_Abort+0x32a>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a64      	ldr	r2, [pc, #400]	; (80031cc <HAL_DMA_Abort+0x45c>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d02c      	beq.n	800309a <HAL_DMA_Abort+0x32a>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a62      	ldr	r2, [pc, #392]	; (80031d0 <HAL_DMA_Abort+0x460>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d027      	beq.n	800309a <HAL_DMA_Abort+0x32a>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a61      	ldr	r2, [pc, #388]	; (80031d4 <HAL_DMA_Abort+0x464>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d022      	beq.n	800309a <HAL_DMA_Abort+0x32a>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a5f      	ldr	r2, [pc, #380]	; (80031d8 <HAL_DMA_Abort+0x468>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d01d      	beq.n	800309a <HAL_DMA_Abort+0x32a>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a5e      	ldr	r2, [pc, #376]	; (80031dc <HAL_DMA_Abort+0x46c>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d018      	beq.n	800309a <HAL_DMA_Abort+0x32a>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a5c      	ldr	r2, [pc, #368]	; (80031e0 <HAL_DMA_Abort+0x470>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d013      	beq.n	800309a <HAL_DMA_Abort+0x32a>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a5b      	ldr	r2, [pc, #364]	; (80031e4 <HAL_DMA_Abort+0x474>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d00e      	beq.n	800309a <HAL_DMA_Abort+0x32a>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a59      	ldr	r2, [pc, #356]	; (80031e8 <HAL_DMA_Abort+0x478>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d009      	beq.n	800309a <HAL_DMA_Abort+0x32a>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a58      	ldr	r2, [pc, #352]	; (80031ec <HAL_DMA_Abort+0x47c>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d004      	beq.n	800309a <HAL_DMA_Abort+0x32a>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a56      	ldr	r2, [pc, #344]	; (80031f0 <HAL_DMA_Abort+0x480>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d108      	bne.n	80030ac <HAL_DMA_Abort+0x33c>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f022 0201 	bic.w	r2, r2, #1
 80030a8:	601a      	str	r2, [r3, #0]
 80030aa:	e007      	b.n	80030bc <HAL_DMA_Abort+0x34c>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f022 0201 	bic.w	r2, r2, #1
 80030ba:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80030bc:	e013      	b.n	80030e6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030be:	f7fe febb 	bl	8001e38 <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	2b05      	cmp	r3, #5
 80030ca:	d90c      	bls.n	80030e6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2220      	movs	r2, #32
 80030d0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2203      	movs	r2, #3
 80030de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e12d      	b.n	8003342 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1e5      	bne.n	80030be <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a2f      	ldr	r2, [pc, #188]	; (80031b4 <HAL_DMA_Abort+0x444>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d04a      	beq.n	8003192 <HAL_DMA_Abort+0x422>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a2d      	ldr	r2, [pc, #180]	; (80031b8 <HAL_DMA_Abort+0x448>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d045      	beq.n	8003192 <HAL_DMA_Abort+0x422>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a2c      	ldr	r2, [pc, #176]	; (80031bc <HAL_DMA_Abort+0x44c>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d040      	beq.n	8003192 <HAL_DMA_Abort+0x422>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a2a      	ldr	r2, [pc, #168]	; (80031c0 <HAL_DMA_Abort+0x450>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d03b      	beq.n	8003192 <HAL_DMA_Abort+0x422>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a29      	ldr	r2, [pc, #164]	; (80031c4 <HAL_DMA_Abort+0x454>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d036      	beq.n	8003192 <HAL_DMA_Abort+0x422>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a27      	ldr	r2, [pc, #156]	; (80031c8 <HAL_DMA_Abort+0x458>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d031      	beq.n	8003192 <HAL_DMA_Abort+0x422>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a26      	ldr	r2, [pc, #152]	; (80031cc <HAL_DMA_Abort+0x45c>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d02c      	beq.n	8003192 <HAL_DMA_Abort+0x422>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a24      	ldr	r2, [pc, #144]	; (80031d0 <HAL_DMA_Abort+0x460>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d027      	beq.n	8003192 <HAL_DMA_Abort+0x422>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a23      	ldr	r2, [pc, #140]	; (80031d4 <HAL_DMA_Abort+0x464>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d022      	beq.n	8003192 <HAL_DMA_Abort+0x422>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a21      	ldr	r2, [pc, #132]	; (80031d8 <HAL_DMA_Abort+0x468>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d01d      	beq.n	8003192 <HAL_DMA_Abort+0x422>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a20      	ldr	r2, [pc, #128]	; (80031dc <HAL_DMA_Abort+0x46c>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d018      	beq.n	8003192 <HAL_DMA_Abort+0x422>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a1e      	ldr	r2, [pc, #120]	; (80031e0 <HAL_DMA_Abort+0x470>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d013      	beq.n	8003192 <HAL_DMA_Abort+0x422>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a1d      	ldr	r2, [pc, #116]	; (80031e4 <HAL_DMA_Abort+0x474>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d00e      	beq.n	8003192 <HAL_DMA_Abort+0x422>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a1b      	ldr	r2, [pc, #108]	; (80031e8 <HAL_DMA_Abort+0x478>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d009      	beq.n	8003192 <HAL_DMA_Abort+0x422>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a1a      	ldr	r2, [pc, #104]	; (80031ec <HAL_DMA_Abort+0x47c>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d004      	beq.n	8003192 <HAL_DMA_Abort+0x422>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a18      	ldr	r2, [pc, #96]	; (80031f0 <HAL_DMA_Abort+0x480>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d101      	bne.n	8003196 <HAL_DMA_Abort+0x426>
 8003192:	2301      	movs	r3, #1
 8003194:	e000      	b.n	8003198 <HAL_DMA_Abort+0x428>
 8003196:	2300      	movs	r3, #0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d02b      	beq.n	80031f4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031a6:	f003 031f 	and.w	r3, r3, #31
 80031aa:	223f      	movs	r2, #63	; 0x3f
 80031ac:	409a      	lsls	r2, r3
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	609a      	str	r2, [r3, #8]
 80031b2:	e02a      	b.n	800320a <HAL_DMA_Abort+0x49a>
 80031b4:	40020010 	.word	0x40020010
 80031b8:	40020028 	.word	0x40020028
 80031bc:	40020040 	.word	0x40020040
 80031c0:	40020058 	.word	0x40020058
 80031c4:	40020070 	.word	0x40020070
 80031c8:	40020088 	.word	0x40020088
 80031cc:	400200a0 	.word	0x400200a0
 80031d0:	400200b8 	.word	0x400200b8
 80031d4:	40020410 	.word	0x40020410
 80031d8:	40020428 	.word	0x40020428
 80031dc:	40020440 	.word	0x40020440
 80031e0:	40020458 	.word	0x40020458
 80031e4:	40020470 	.word	0x40020470
 80031e8:	40020488 	.word	0x40020488
 80031ec:	400204a0 	.word	0x400204a0
 80031f0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031fe:	f003 031f 	and.w	r3, r3, #31
 8003202:	2201      	movs	r2, #1
 8003204:	409a      	lsls	r2, r3
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a4f      	ldr	r2, [pc, #316]	; (800334c <HAL_DMA_Abort+0x5dc>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d072      	beq.n	80032fa <HAL_DMA_Abort+0x58a>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a4d      	ldr	r2, [pc, #308]	; (8003350 <HAL_DMA_Abort+0x5e0>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d06d      	beq.n	80032fa <HAL_DMA_Abort+0x58a>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a4c      	ldr	r2, [pc, #304]	; (8003354 <HAL_DMA_Abort+0x5e4>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d068      	beq.n	80032fa <HAL_DMA_Abort+0x58a>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a4a      	ldr	r2, [pc, #296]	; (8003358 <HAL_DMA_Abort+0x5e8>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d063      	beq.n	80032fa <HAL_DMA_Abort+0x58a>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a49      	ldr	r2, [pc, #292]	; (800335c <HAL_DMA_Abort+0x5ec>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d05e      	beq.n	80032fa <HAL_DMA_Abort+0x58a>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a47      	ldr	r2, [pc, #284]	; (8003360 <HAL_DMA_Abort+0x5f0>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d059      	beq.n	80032fa <HAL_DMA_Abort+0x58a>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a46      	ldr	r2, [pc, #280]	; (8003364 <HAL_DMA_Abort+0x5f4>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d054      	beq.n	80032fa <HAL_DMA_Abort+0x58a>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a44      	ldr	r2, [pc, #272]	; (8003368 <HAL_DMA_Abort+0x5f8>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d04f      	beq.n	80032fa <HAL_DMA_Abort+0x58a>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a43      	ldr	r2, [pc, #268]	; (800336c <HAL_DMA_Abort+0x5fc>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d04a      	beq.n	80032fa <HAL_DMA_Abort+0x58a>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a41      	ldr	r2, [pc, #260]	; (8003370 <HAL_DMA_Abort+0x600>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d045      	beq.n	80032fa <HAL_DMA_Abort+0x58a>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a40      	ldr	r2, [pc, #256]	; (8003374 <HAL_DMA_Abort+0x604>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d040      	beq.n	80032fa <HAL_DMA_Abort+0x58a>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a3e      	ldr	r2, [pc, #248]	; (8003378 <HAL_DMA_Abort+0x608>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d03b      	beq.n	80032fa <HAL_DMA_Abort+0x58a>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a3d      	ldr	r2, [pc, #244]	; (800337c <HAL_DMA_Abort+0x60c>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d036      	beq.n	80032fa <HAL_DMA_Abort+0x58a>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a3b      	ldr	r2, [pc, #236]	; (8003380 <HAL_DMA_Abort+0x610>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d031      	beq.n	80032fa <HAL_DMA_Abort+0x58a>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a3a      	ldr	r2, [pc, #232]	; (8003384 <HAL_DMA_Abort+0x614>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d02c      	beq.n	80032fa <HAL_DMA_Abort+0x58a>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a38      	ldr	r2, [pc, #224]	; (8003388 <HAL_DMA_Abort+0x618>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d027      	beq.n	80032fa <HAL_DMA_Abort+0x58a>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a37      	ldr	r2, [pc, #220]	; (800338c <HAL_DMA_Abort+0x61c>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d022      	beq.n	80032fa <HAL_DMA_Abort+0x58a>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a35      	ldr	r2, [pc, #212]	; (8003390 <HAL_DMA_Abort+0x620>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d01d      	beq.n	80032fa <HAL_DMA_Abort+0x58a>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a34      	ldr	r2, [pc, #208]	; (8003394 <HAL_DMA_Abort+0x624>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d018      	beq.n	80032fa <HAL_DMA_Abort+0x58a>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a32      	ldr	r2, [pc, #200]	; (8003398 <HAL_DMA_Abort+0x628>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d013      	beq.n	80032fa <HAL_DMA_Abort+0x58a>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a31      	ldr	r2, [pc, #196]	; (800339c <HAL_DMA_Abort+0x62c>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d00e      	beq.n	80032fa <HAL_DMA_Abort+0x58a>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a2f      	ldr	r2, [pc, #188]	; (80033a0 <HAL_DMA_Abort+0x630>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d009      	beq.n	80032fa <HAL_DMA_Abort+0x58a>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a2e      	ldr	r2, [pc, #184]	; (80033a4 <HAL_DMA_Abort+0x634>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d004      	beq.n	80032fa <HAL_DMA_Abort+0x58a>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a2c      	ldr	r2, [pc, #176]	; (80033a8 <HAL_DMA_Abort+0x638>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d101      	bne.n	80032fe <HAL_DMA_Abort+0x58e>
 80032fa:	2301      	movs	r3, #1
 80032fc:	e000      	b.n	8003300 <HAL_DMA_Abort+0x590>
 80032fe:	2300      	movs	r3, #0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d015      	beq.n	8003330 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800330c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00c      	beq.n	8003330 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003320:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003324:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800332e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3718      	adds	r7, #24
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	40020010 	.word	0x40020010
 8003350:	40020028 	.word	0x40020028
 8003354:	40020040 	.word	0x40020040
 8003358:	40020058 	.word	0x40020058
 800335c:	40020070 	.word	0x40020070
 8003360:	40020088 	.word	0x40020088
 8003364:	400200a0 	.word	0x400200a0
 8003368:	400200b8 	.word	0x400200b8
 800336c:	40020410 	.word	0x40020410
 8003370:	40020428 	.word	0x40020428
 8003374:	40020440 	.word	0x40020440
 8003378:	40020458 	.word	0x40020458
 800337c:	40020470 	.word	0x40020470
 8003380:	40020488 	.word	0x40020488
 8003384:	400204a0 	.word	0x400204a0
 8003388:	400204b8 	.word	0x400204b8
 800338c:	58025408 	.word	0x58025408
 8003390:	5802541c 	.word	0x5802541c
 8003394:	58025430 	.word	0x58025430
 8003398:	58025444 	.word	0x58025444
 800339c:	58025458 	.word	0x58025458
 80033a0:	5802546c 	.word	0x5802546c
 80033a4:	58025480 	.word	0x58025480
 80033a8:	58025494 	.word	0x58025494

080033ac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d101      	bne.n	80033be <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e237      	b.n	800382e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d004      	beq.n	80033d4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2280      	movs	r2, #128	; 0x80
 80033ce:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e22c      	b.n	800382e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a5c      	ldr	r2, [pc, #368]	; (800354c <HAL_DMA_Abort_IT+0x1a0>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d04a      	beq.n	8003474 <HAL_DMA_Abort_IT+0xc8>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a5b      	ldr	r2, [pc, #364]	; (8003550 <HAL_DMA_Abort_IT+0x1a4>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d045      	beq.n	8003474 <HAL_DMA_Abort_IT+0xc8>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a59      	ldr	r2, [pc, #356]	; (8003554 <HAL_DMA_Abort_IT+0x1a8>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d040      	beq.n	8003474 <HAL_DMA_Abort_IT+0xc8>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a58      	ldr	r2, [pc, #352]	; (8003558 <HAL_DMA_Abort_IT+0x1ac>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d03b      	beq.n	8003474 <HAL_DMA_Abort_IT+0xc8>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a56      	ldr	r2, [pc, #344]	; (800355c <HAL_DMA_Abort_IT+0x1b0>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d036      	beq.n	8003474 <HAL_DMA_Abort_IT+0xc8>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a55      	ldr	r2, [pc, #340]	; (8003560 <HAL_DMA_Abort_IT+0x1b4>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d031      	beq.n	8003474 <HAL_DMA_Abort_IT+0xc8>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a53      	ldr	r2, [pc, #332]	; (8003564 <HAL_DMA_Abort_IT+0x1b8>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d02c      	beq.n	8003474 <HAL_DMA_Abort_IT+0xc8>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a52      	ldr	r2, [pc, #328]	; (8003568 <HAL_DMA_Abort_IT+0x1bc>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d027      	beq.n	8003474 <HAL_DMA_Abort_IT+0xc8>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a50      	ldr	r2, [pc, #320]	; (800356c <HAL_DMA_Abort_IT+0x1c0>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d022      	beq.n	8003474 <HAL_DMA_Abort_IT+0xc8>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a4f      	ldr	r2, [pc, #316]	; (8003570 <HAL_DMA_Abort_IT+0x1c4>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d01d      	beq.n	8003474 <HAL_DMA_Abort_IT+0xc8>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a4d      	ldr	r2, [pc, #308]	; (8003574 <HAL_DMA_Abort_IT+0x1c8>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d018      	beq.n	8003474 <HAL_DMA_Abort_IT+0xc8>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a4c      	ldr	r2, [pc, #304]	; (8003578 <HAL_DMA_Abort_IT+0x1cc>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d013      	beq.n	8003474 <HAL_DMA_Abort_IT+0xc8>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a4a      	ldr	r2, [pc, #296]	; (800357c <HAL_DMA_Abort_IT+0x1d0>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d00e      	beq.n	8003474 <HAL_DMA_Abort_IT+0xc8>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a49      	ldr	r2, [pc, #292]	; (8003580 <HAL_DMA_Abort_IT+0x1d4>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d009      	beq.n	8003474 <HAL_DMA_Abort_IT+0xc8>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a47      	ldr	r2, [pc, #284]	; (8003584 <HAL_DMA_Abort_IT+0x1d8>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d004      	beq.n	8003474 <HAL_DMA_Abort_IT+0xc8>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a46      	ldr	r2, [pc, #280]	; (8003588 <HAL_DMA_Abort_IT+0x1dc>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d101      	bne.n	8003478 <HAL_DMA_Abort_IT+0xcc>
 8003474:	2301      	movs	r3, #1
 8003476:	e000      	b.n	800347a <HAL_DMA_Abort_IT+0xce>
 8003478:	2300      	movs	r3, #0
 800347a:	2b00      	cmp	r3, #0
 800347c:	f000 8086 	beq.w	800358c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2204      	movs	r2, #4
 8003484:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a2f      	ldr	r2, [pc, #188]	; (800354c <HAL_DMA_Abort_IT+0x1a0>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d04a      	beq.n	8003528 <HAL_DMA_Abort_IT+0x17c>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a2e      	ldr	r2, [pc, #184]	; (8003550 <HAL_DMA_Abort_IT+0x1a4>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d045      	beq.n	8003528 <HAL_DMA_Abort_IT+0x17c>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a2c      	ldr	r2, [pc, #176]	; (8003554 <HAL_DMA_Abort_IT+0x1a8>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d040      	beq.n	8003528 <HAL_DMA_Abort_IT+0x17c>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a2b      	ldr	r2, [pc, #172]	; (8003558 <HAL_DMA_Abort_IT+0x1ac>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d03b      	beq.n	8003528 <HAL_DMA_Abort_IT+0x17c>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a29      	ldr	r2, [pc, #164]	; (800355c <HAL_DMA_Abort_IT+0x1b0>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d036      	beq.n	8003528 <HAL_DMA_Abort_IT+0x17c>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a28      	ldr	r2, [pc, #160]	; (8003560 <HAL_DMA_Abort_IT+0x1b4>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d031      	beq.n	8003528 <HAL_DMA_Abort_IT+0x17c>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a26      	ldr	r2, [pc, #152]	; (8003564 <HAL_DMA_Abort_IT+0x1b8>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d02c      	beq.n	8003528 <HAL_DMA_Abort_IT+0x17c>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a25      	ldr	r2, [pc, #148]	; (8003568 <HAL_DMA_Abort_IT+0x1bc>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d027      	beq.n	8003528 <HAL_DMA_Abort_IT+0x17c>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a23      	ldr	r2, [pc, #140]	; (800356c <HAL_DMA_Abort_IT+0x1c0>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d022      	beq.n	8003528 <HAL_DMA_Abort_IT+0x17c>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a22      	ldr	r2, [pc, #136]	; (8003570 <HAL_DMA_Abort_IT+0x1c4>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d01d      	beq.n	8003528 <HAL_DMA_Abort_IT+0x17c>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a20      	ldr	r2, [pc, #128]	; (8003574 <HAL_DMA_Abort_IT+0x1c8>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d018      	beq.n	8003528 <HAL_DMA_Abort_IT+0x17c>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a1f      	ldr	r2, [pc, #124]	; (8003578 <HAL_DMA_Abort_IT+0x1cc>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d013      	beq.n	8003528 <HAL_DMA_Abort_IT+0x17c>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a1d      	ldr	r2, [pc, #116]	; (800357c <HAL_DMA_Abort_IT+0x1d0>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d00e      	beq.n	8003528 <HAL_DMA_Abort_IT+0x17c>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a1c      	ldr	r2, [pc, #112]	; (8003580 <HAL_DMA_Abort_IT+0x1d4>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d009      	beq.n	8003528 <HAL_DMA_Abort_IT+0x17c>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a1a      	ldr	r2, [pc, #104]	; (8003584 <HAL_DMA_Abort_IT+0x1d8>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d004      	beq.n	8003528 <HAL_DMA_Abort_IT+0x17c>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a19      	ldr	r2, [pc, #100]	; (8003588 <HAL_DMA_Abort_IT+0x1dc>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d108      	bne.n	800353a <HAL_DMA_Abort_IT+0x18e>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f022 0201 	bic.w	r2, r2, #1
 8003536:	601a      	str	r2, [r3, #0]
 8003538:	e178      	b.n	800382c <HAL_DMA_Abort_IT+0x480>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f022 0201 	bic.w	r2, r2, #1
 8003548:	601a      	str	r2, [r3, #0]
 800354a:	e16f      	b.n	800382c <HAL_DMA_Abort_IT+0x480>
 800354c:	40020010 	.word	0x40020010
 8003550:	40020028 	.word	0x40020028
 8003554:	40020040 	.word	0x40020040
 8003558:	40020058 	.word	0x40020058
 800355c:	40020070 	.word	0x40020070
 8003560:	40020088 	.word	0x40020088
 8003564:	400200a0 	.word	0x400200a0
 8003568:	400200b8 	.word	0x400200b8
 800356c:	40020410 	.word	0x40020410
 8003570:	40020428 	.word	0x40020428
 8003574:	40020440 	.word	0x40020440
 8003578:	40020458 	.word	0x40020458
 800357c:	40020470 	.word	0x40020470
 8003580:	40020488 	.word	0x40020488
 8003584:	400204a0 	.word	0x400204a0
 8003588:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f022 020e 	bic.w	r2, r2, #14
 800359a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a6c      	ldr	r2, [pc, #432]	; (8003754 <HAL_DMA_Abort_IT+0x3a8>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d04a      	beq.n	800363c <HAL_DMA_Abort_IT+0x290>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a6b      	ldr	r2, [pc, #428]	; (8003758 <HAL_DMA_Abort_IT+0x3ac>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d045      	beq.n	800363c <HAL_DMA_Abort_IT+0x290>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a69      	ldr	r2, [pc, #420]	; (800375c <HAL_DMA_Abort_IT+0x3b0>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d040      	beq.n	800363c <HAL_DMA_Abort_IT+0x290>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a68      	ldr	r2, [pc, #416]	; (8003760 <HAL_DMA_Abort_IT+0x3b4>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d03b      	beq.n	800363c <HAL_DMA_Abort_IT+0x290>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a66      	ldr	r2, [pc, #408]	; (8003764 <HAL_DMA_Abort_IT+0x3b8>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d036      	beq.n	800363c <HAL_DMA_Abort_IT+0x290>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a65      	ldr	r2, [pc, #404]	; (8003768 <HAL_DMA_Abort_IT+0x3bc>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d031      	beq.n	800363c <HAL_DMA_Abort_IT+0x290>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a63      	ldr	r2, [pc, #396]	; (800376c <HAL_DMA_Abort_IT+0x3c0>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d02c      	beq.n	800363c <HAL_DMA_Abort_IT+0x290>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a62      	ldr	r2, [pc, #392]	; (8003770 <HAL_DMA_Abort_IT+0x3c4>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d027      	beq.n	800363c <HAL_DMA_Abort_IT+0x290>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a60      	ldr	r2, [pc, #384]	; (8003774 <HAL_DMA_Abort_IT+0x3c8>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d022      	beq.n	800363c <HAL_DMA_Abort_IT+0x290>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a5f      	ldr	r2, [pc, #380]	; (8003778 <HAL_DMA_Abort_IT+0x3cc>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d01d      	beq.n	800363c <HAL_DMA_Abort_IT+0x290>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a5d      	ldr	r2, [pc, #372]	; (800377c <HAL_DMA_Abort_IT+0x3d0>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d018      	beq.n	800363c <HAL_DMA_Abort_IT+0x290>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a5c      	ldr	r2, [pc, #368]	; (8003780 <HAL_DMA_Abort_IT+0x3d4>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d013      	beq.n	800363c <HAL_DMA_Abort_IT+0x290>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a5a      	ldr	r2, [pc, #360]	; (8003784 <HAL_DMA_Abort_IT+0x3d8>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d00e      	beq.n	800363c <HAL_DMA_Abort_IT+0x290>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a59      	ldr	r2, [pc, #356]	; (8003788 <HAL_DMA_Abort_IT+0x3dc>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d009      	beq.n	800363c <HAL_DMA_Abort_IT+0x290>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a57      	ldr	r2, [pc, #348]	; (800378c <HAL_DMA_Abort_IT+0x3e0>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d004      	beq.n	800363c <HAL_DMA_Abort_IT+0x290>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a56      	ldr	r2, [pc, #344]	; (8003790 <HAL_DMA_Abort_IT+0x3e4>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d108      	bne.n	800364e <HAL_DMA_Abort_IT+0x2a2>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f022 0201 	bic.w	r2, r2, #1
 800364a:	601a      	str	r2, [r3, #0]
 800364c:	e007      	b.n	800365e <HAL_DMA_Abort_IT+0x2b2>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f022 0201 	bic.w	r2, r2, #1
 800365c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a3c      	ldr	r2, [pc, #240]	; (8003754 <HAL_DMA_Abort_IT+0x3a8>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d072      	beq.n	800374e <HAL_DMA_Abort_IT+0x3a2>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a3a      	ldr	r2, [pc, #232]	; (8003758 <HAL_DMA_Abort_IT+0x3ac>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d06d      	beq.n	800374e <HAL_DMA_Abort_IT+0x3a2>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a39      	ldr	r2, [pc, #228]	; (800375c <HAL_DMA_Abort_IT+0x3b0>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d068      	beq.n	800374e <HAL_DMA_Abort_IT+0x3a2>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a37      	ldr	r2, [pc, #220]	; (8003760 <HAL_DMA_Abort_IT+0x3b4>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d063      	beq.n	800374e <HAL_DMA_Abort_IT+0x3a2>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a36      	ldr	r2, [pc, #216]	; (8003764 <HAL_DMA_Abort_IT+0x3b8>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d05e      	beq.n	800374e <HAL_DMA_Abort_IT+0x3a2>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a34      	ldr	r2, [pc, #208]	; (8003768 <HAL_DMA_Abort_IT+0x3bc>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d059      	beq.n	800374e <HAL_DMA_Abort_IT+0x3a2>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a33      	ldr	r2, [pc, #204]	; (800376c <HAL_DMA_Abort_IT+0x3c0>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d054      	beq.n	800374e <HAL_DMA_Abort_IT+0x3a2>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a31      	ldr	r2, [pc, #196]	; (8003770 <HAL_DMA_Abort_IT+0x3c4>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d04f      	beq.n	800374e <HAL_DMA_Abort_IT+0x3a2>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a30      	ldr	r2, [pc, #192]	; (8003774 <HAL_DMA_Abort_IT+0x3c8>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d04a      	beq.n	800374e <HAL_DMA_Abort_IT+0x3a2>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a2e      	ldr	r2, [pc, #184]	; (8003778 <HAL_DMA_Abort_IT+0x3cc>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d045      	beq.n	800374e <HAL_DMA_Abort_IT+0x3a2>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a2d      	ldr	r2, [pc, #180]	; (800377c <HAL_DMA_Abort_IT+0x3d0>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d040      	beq.n	800374e <HAL_DMA_Abort_IT+0x3a2>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a2b      	ldr	r2, [pc, #172]	; (8003780 <HAL_DMA_Abort_IT+0x3d4>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d03b      	beq.n	800374e <HAL_DMA_Abort_IT+0x3a2>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a2a      	ldr	r2, [pc, #168]	; (8003784 <HAL_DMA_Abort_IT+0x3d8>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d036      	beq.n	800374e <HAL_DMA_Abort_IT+0x3a2>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a28      	ldr	r2, [pc, #160]	; (8003788 <HAL_DMA_Abort_IT+0x3dc>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d031      	beq.n	800374e <HAL_DMA_Abort_IT+0x3a2>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a27      	ldr	r2, [pc, #156]	; (800378c <HAL_DMA_Abort_IT+0x3e0>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d02c      	beq.n	800374e <HAL_DMA_Abort_IT+0x3a2>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a25      	ldr	r2, [pc, #148]	; (8003790 <HAL_DMA_Abort_IT+0x3e4>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d027      	beq.n	800374e <HAL_DMA_Abort_IT+0x3a2>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a24      	ldr	r2, [pc, #144]	; (8003794 <HAL_DMA_Abort_IT+0x3e8>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d022      	beq.n	800374e <HAL_DMA_Abort_IT+0x3a2>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a22      	ldr	r2, [pc, #136]	; (8003798 <HAL_DMA_Abort_IT+0x3ec>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d01d      	beq.n	800374e <HAL_DMA_Abort_IT+0x3a2>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a21      	ldr	r2, [pc, #132]	; (800379c <HAL_DMA_Abort_IT+0x3f0>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d018      	beq.n	800374e <HAL_DMA_Abort_IT+0x3a2>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a1f      	ldr	r2, [pc, #124]	; (80037a0 <HAL_DMA_Abort_IT+0x3f4>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d013      	beq.n	800374e <HAL_DMA_Abort_IT+0x3a2>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a1e      	ldr	r2, [pc, #120]	; (80037a4 <HAL_DMA_Abort_IT+0x3f8>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d00e      	beq.n	800374e <HAL_DMA_Abort_IT+0x3a2>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a1c      	ldr	r2, [pc, #112]	; (80037a8 <HAL_DMA_Abort_IT+0x3fc>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d009      	beq.n	800374e <HAL_DMA_Abort_IT+0x3a2>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a1b      	ldr	r2, [pc, #108]	; (80037ac <HAL_DMA_Abort_IT+0x400>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d004      	beq.n	800374e <HAL_DMA_Abort_IT+0x3a2>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a19      	ldr	r2, [pc, #100]	; (80037b0 <HAL_DMA_Abort_IT+0x404>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d132      	bne.n	80037b4 <HAL_DMA_Abort_IT+0x408>
 800374e:	2301      	movs	r3, #1
 8003750:	e031      	b.n	80037b6 <HAL_DMA_Abort_IT+0x40a>
 8003752:	bf00      	nop
 8003754:	40020010 	.word	0x40020010
 8003758:	40020028 	.word	0x40020028
 800375c:	40020040 	.word	0x40020040
 8003760:	40020058 	.word	0x40020058
 8003764:	40020070 	.word	0x40020070
 8003768:	40020088 	.word	0x40020088
 800376c:	400200a0 	.word	0x400200a0
 8003770:	400200b8 	.word	0x400200b8
 8003774:	40020410 	.word	0x40020410
 8003778:	40020428 	.word	0x40020428
 800377c:	40020440 	.word	0x40020440
 8003780:	40020458 	.word	0x40020458
 8003784:	40020470 	.word	0x40020470
 8003788:	40020488 	.word	0x40020488
 800378c:	400204a0 	.word	0x400204a0
 8003790:	400204b8 	.word	0x400204b8
 8003794:	58025408 	.word	0x58025408
 8003798:	5802541c 	.word	0x5802541c
 800379c:	58025430 	.word	0x58025430
 80037a0:	58025444 	.word	0x58025444
 80037a4:	58025458 	.word	0x58025458
 80037a8:	5802546c 	.word	0x5802546c
 80037ac:	58025480 	.word	0x58025480
 80037b0:	58025494 	.word	0x58025494
 80037b4:	2300      	movs	r3, #0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d028      	beq.n	800380c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037c8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ce:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037d4:	f003 031f 	and.w	r3, r3, #31
 80037d8:	2201      	movs	r2, #1
 80037da:	409a      	lsls	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80037e8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00c      	beq.n	800380c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003800:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800380a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003820:	2b00      	cmp	r3, #0
 8003822:	d003      	beq.n	800382c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800382c:	2300      	movs	r3, #0
}
 800382e:	4618      	mov	r0, r3
 8003830:	3710      	adds	r7, #16
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop

08003838 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b08a      	sub	sp, #40	; 0x28
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003840:	2300      	movs	r3, #0
 8003842:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003844:	4b67      	ldr	r3, [pc, #412]	; (80039e4 <HAL_DMA_IRQHandler+0x1ac>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a67      	ldr	r2, [pc, #412]	; (80039e8 <HAL_DMA_IRQHandler+0x1b0>)
 800384a:	fba2 2303 	umull	r2, r3, r2, r3
 800384e:	0a9b      	lsrs	r3, r3, #10
 8003850:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003856:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800385c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800385e:	6a3b      	ldr	r3, [r7, #32]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a5f      	ldr	r2, [pc, #380]	; (80039ec <HAL_DMA_IRQHandler+0x1b4>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d04a      	beq.n	800390a <HAL_DMA_IRQHandler+0xd2>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a5d      	ldr	r2, [pc, #372]	; (80039f0 <HAL_DMA_IRQHandler+0x1b8>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d045      	beq.n	800390a <HAL_DMA_IRQHandler+0xd2>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a5c      	ldr	r2, [pc, #368]	; (80039f4 <HAL_DMA_IRQHandler+0x1bc>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d040      	beq.n	800390a <HAL_DMA_IRQHandler+0xd2>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a5a      	ldr	r2, [pc, #360]	; (80039f8 <HAL_DMA_IRQHandler+0x1c0>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d03b      	beq.n	800390a <HAL_DMA_IRQHandler+0xd2>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a59      	ldr	r2, [pc, #356]	; (80039fc <HAL_DMA_IRQHandler+0x1c4>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d036      	beq.n	800390a <HAL_DMA_IRQHandler+0xd2>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a57      	ldr	r2, [pc, #348]	; (8003a00 <HAL_DMA_IRQHandler+0x1c8>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d031      	beq.n	800390a <HAL_DMA_IRQHandler+0xd2>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a56      	ldr	r2, [pc, #344]	; (8003a04 <HAL_DMA_IRQHandler+0x1cc>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d02c      	beq.n	800390a <HAL_DMA_IRQHandler+0xd2>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a54      	ldr	r2, [pc, #336]	; (8003a08 <HAL_DMA_IRQHandler+0x1d0>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d027      	beq.n	800390a <HAL_DMA_IRQHandler+0xd2>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a53      	ldr	r2, [pc, #332]	; (8003a0c <HAL_DMA_IRQHandler+0x1d4>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d022      	beq.n	800390a <HAL_DMA_IRQHandler+0xd2>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a51      	ldr	r2, [pc, #324]	; (8003a10 <HAL_DMA_IRQHandler+0x1d8>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d01d      	beq.n	800390a <HAL_DMA_IRQHandler+0xd2>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a50      	ldr	r2, [pc, #320]	; (8003a14 <HAL_DMA_IRQHandler+0x1dc>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d018      	beq.n	800390a <HAL_DMA_IRQHandler+0xd2>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a4e      	ldr	r2, [pc, #312]	; (8003a18 <HAL_DMA_IRQHandler+0x1e0>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d013      	beq.n	800390a <HAL_DMA_IRQHandler+0xd2>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a4d      	ldr	r2, [pc, #308]	; (8003a1c <HAL_DMA_IRQHandler+0x1e4>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d00e      	beq.n	800390a <HAL_DMA_IRQHandler+0xd2>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a4b      	ldr	r2, [pc, #300]	; (8003a20 <HAL_DMA_IRQHandler+0x1e8>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d009      	beq.n	800390a <HAL_DMA_IRQHandler+0xd2>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a4a      	ldr	r2, [pc, #296]	; (8003a24 <HAL_DMA_IRQHandler+0x1ec>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d004      	beq.n	800390a <HAL_DMA_IRQHandler+0xd2>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a48      	ldr	r2, [pc, #288]	; (8003a28 <HAL_DMA_IRQHandler+0x1f0>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d101      	bne.n	800390e <HAL_DMA_IRQHandler+0xd6>
 800390a:	2301      	movs	r3, #1
 800390c:	e000      	b.n	8003910 <HAL_DMA_IRQHandler+0xd8>
 800390e:	2300      	movs	r3, #0
 8003910:	2b00      	cmp	r3, #0
 8003912:	f000 842b 	beq.w	800416c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800391a:	f003 031f 	and.w	r3, r3, #31
 800391e:	2208      	movs	r2, #8
 8003920:	409a      	lsls	r2, r3
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	4013      	ands	r3, r2
 8003926:	2b00      	cmp	r3, #0
 8003928:	f000 80a2 	beq.w	8003a70 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a2e      	ldr	r2, [pc, #184]	; (80039ec <HAL_DMA_IRQHandler+0x1b4>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d04a      	beq.n	80039cc <HAL_DMA_IRQHandler+0x194>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a2d      	ldr	r2, [pc, #180]	; (80039f0 <HAL_DMA_IRQHandler+0x1b8>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d045      	beq.n	80039cc <HAL_DMA_IRQHandler+0x194>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a2b      	ldr	r2, [pc, #172]	; (80039f4 <HAL_DMA_IRQHandler+0x1bc>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d040      	beq.n	80039cc <HAL_DMA_IRQHandler+0x194>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a2a      	ldr	r2, [pc, #168]	; (80039f8 <HAL_DMA_IRQHandler+0x1c0>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d03b      	beq.n	80039cc <HAL_DMA_IRQHandler+0x194>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a28      	ldr	r2, [pc, #160]	; (80039fc <HAL_DMA_IRQHandler+0x1c4>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d036      	beq.n	80039cc <HAL_DMA_IRQHandler+0x194>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a27      	ldr	r2, [pc, #156]	; (8003a00 <HAL_DMA_IRQHandler+0x1c8>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d031      	beq.n	80039cc <HAL_DMA_IRQHandler+0x194>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a25      	ldr	r2, [pc, #148]	; (8003a04 <HAL_DMA_IRQHandler+0x1cc>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d02c      	beq.n	80039cc <HAL_DMA_IRQHandler+0x194>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a24      	ldr	r2, [pc, #144]	; (8003a08 <HAL_DMA_IRQHandler+0x1d0>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d027      	beq.n	80039cc <HAL_DMA_IRQHandler+0x194>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a22      	ldr	r2, [pc, #136]	; (8003a0c <HAL_DMA_IRQHandler+0x1d4>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d022      	beq.n	80039cc <HAL_DMA_IRQHandler+0x194>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a21      	ldr	r2, [pc, #132]	; (8003a10 <HAL_DMA_IRQHandler+0x1d8>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d01d      	beq.n	80039cc <HAL_DMA_IRQHandler+0x194>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a1f      	ldr	r2, [pc, #124]	; (8003a14 <HAL_DMA_IRQHandler+0x1dc>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d018      	beq.n	80039cc <HAL_DMA_IRQHandler+0x194>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a1e      	ldr	r2, [pc, #120]	; (8003a18 <HAL_DMA_IRQHandler+0x1e0>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d013      	beq.n	80039cc <HAL_DMA_IRQHandler+0x194>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a1c      	ldr	r2, [pc, #112]	; (8003a1c <HAL_DMA_IRQHandler+0x1e4>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d00e      	beq.n	80039cc <HAL_DMA_IRQHandler+0x194>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a1b      	ldr	r2, [pc, #108]	; (8003a20 <HAL_DMA_IRQHandler+0x1e8>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d009      	beq.n	80039cc <HAL_DMA_IRQHandler+0x194>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a19      	ldr	r2, [pc, #100]	; (8003a24 <HAL_DMA_IRQHandler+0x1ec>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d004      	beq.n	80039cc <HAL_DMA_IRQHandler+0x194>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a18      	ldr	r2, [pc, #96]	; (8003a28 <HAL_DMA_IRQHandler+0x1f0>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d12f      	bne.n	8003a2c <HAL_DMA_IRQHandler+0x1f4>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0304 	and.w	r3, r3, #4
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	bf14      	ite	ne
 80039da:	2301      	movne	r3, #1
 80039dc:	2300      	moveq	r3, #0
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	e02e      	b.n	8003a40 <HAL_DMA_IRQHandler+0x208>
 80039e2:	bf00      	nop
 80039e4:	24000000 	.word	0x24000000
 80039e8:	1b4e81b5 	.word	0x1b4e81b5
 80039ec:	40020010 	.word	0x40020010
 80039f0:	40020028 	.word	0x40020028
 80039f4:	40020040 	.word	0x40020040
 80039f8:	40020058 	.word	0x40020058
 80039fc:	40020070 	.word	0x40020070
 8003a00:	40020088 	.word	0x40020088
 8003a04:	400200a0 	.word	0x400200a0
 8003a08:	400200b8 	.word	0x400200b8
 8003a0c:	40020410 	.word	0x40020410
 8003a10:	40020428 	.word	0x40020428
 8003a14:	40020440 	.word	0x40020440
 8003a18:	40020458 	.word	0x40020458
 8003a1c:	40020470 	.word	0x40020470
 8003a20:	40020488 	.word	0x40020488
 8003a24:	400204a0 	.word	0x400204a0
 8003a28:	400204b8 	.word	0x400204b8
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0308 	and.w	r3, r3, #8
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	bf14      	ite	ne
 8003a3a:	2301      	movne	r3, #1
 8003a3c:	2300      	moveq	r3, #0
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d015      	beq.n	8003a70 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f022 0204 	bic.w	r2, r2, #4
 8003a52:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a58:	f003 031f 	and.w	r3, r3, #31
 8003a5c:	2208      	movs	r2, #8
 8003a5e:	409a      	lsls	r2, r3
 8003a60:	6a3b      	ldr	r3, [r7, #32]
 8003a62:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a68:	f043 0201 	orr.w	r2, r3, #1
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a74:	f003 031f 	and.w	r3, r3, #31
 8003a78:	69ba      	ldr	r2, [r7, #24]
 8003a7a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a7e:	f003 0301 	and.w	r3, r3, #1
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d06e      	beq.n	8003b64 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a69      	ldr	r2, [pc, #420]	; (8003c30 <HAL_DMA_IRQHandler+0x3f8>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d04a      	beq.n	8003b26 <HAL_DMA_IRQHandler+0x2ee>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a67      	ldr	r2, [pc, #412]	; (8003c34 <HAL_DMA_IRQHandler+0x3fc>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d045      	beq.n	8003b26 <HAL_DMA_IRQHandler+0x2ee>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a66      	ldr	r2, [pc, #408]	; (8003c38 <HAL_DMA_IRQHandler+0x400>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d040      	beq.n	8003b26 <HAL_DMA_IRQHandler+0x2ee>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a64      	ldr	r2, [pc, #400]	; (8003c3c <HAL_DMA_IRQHandler+0x404>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d03b      	beq.n	8003b26 <HAL_DMA_IRQHandler+0x2ee>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a63      	ldr	r2, [pc, #396]	; (8003c40 <HAL_DMA_IRQHandler+0x408>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d036      	beq.n	8003b26 <HAL_DMA_IRQHandler+0x2ee>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a61      	ldr	r2, [pc, #388]	; (8003c44 <HAL_DMA_IRQHandler+0x40c>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d031      	beq.n	8003b26 <HAL_DMA_IRQHandler+0x2ee>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a60      	ldr	r2, [pc, #384]	; (8003c48 <HAL_DMA_IRQHandler+0x410>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d02c      	beq.n	8003b26 <HAL_DMA_IRQHandler+0x2ee>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a5e      	ldr	r2, [pc, #376]	; (8003c4c <HAL_DMA_IRQHandler+0x414>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d027      	beq.n	8003b26 <HAL_DMA_IRQHandler+0x2ee>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a5d      	ldr	r2, [pc, #372]	; (8003c50 <HAL_DMA_IRQHandler+0x418>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d022      	beq.n	8003b26 <HAL_DMA_IRQHandler+0x2ee>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a5b      	ldr	r2, [pc, #364]	; (8003c54 <HAL_DMA_IRQHandler+0x41c>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d01d      	beq.n	8003b26 <HAL_DMA_IRQHandler+0x2ee>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a5a      	ldr	r2, [pc, #360]	; (8003c58 <HAL_DMA_IRQHandler+0x420>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d018      	beq.n	8003b26 <HAL_DMA_IRQHandler+0x2ee>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a58      	ldr	r2, [pc, #352]	; (8003c5c <HAL_DMA_IRQHandler+0x424>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d013      	beq.n	8003b26 <HAL_DMA_IRQHandler+0x2ee>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a57      	ldr	r2, [pc, #348]	; (8003c60 <HAL_DMA_IRQHandler+0x428>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d00e      	beq.n	8003b26 <HAL_DMA_IRQHandler+0x2ee>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a55      	ldr	r2, [pc, #340]	; (8003c64 <HAL_DMA_IRQHandler+0x42c>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d009      	beq.n	8003b26 <HAL_DMA_IRQHandler+0x2ee>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a54      	ldr	r2, [pc, #336]	; (8003c68 <HAL_DMA_IRQHandler+0x430>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d004      	beq.n	8003b26 <HAL_DMA_IRQHandler+0x2ee>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a52      	ldr	r2, [pc, #328]	; (8003c6c <HAL_DMA_IRQHandler+0x434>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d10a      	bne.n	8003b3c <HAL_DMA_IRQHandler+0x304>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	695b      	ldr	r3, [r3, #20]
 8003b2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	bf14      	ite	ne
 8003b34:	2301      	movne	r3, #1
 8003b36:	2300      	moveq	r3, #0
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	e003      	b.n	8003b44 <HAL_DMA_IRQHandler+0x30c>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2300      	movs	r3, #0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d00d      	beq.n	8003b64 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b4c:	f003 031f 	and.w	r3, r3, #31
 8003b50:	2201      	movs	r2, #1
 8003b52:	409a      	lsls	r2, r3
 8003b54:	6a3b      	ldr	r3, [r7, #32]
 8003b56:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b5c:	f043 0202 	orr.w	r2, r3, #2
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b68:	f003 031f 	and.w	r3, r3, #31
 8003b6c:	2204      	movs	r2, #4
 8003b6e:	409a      	lsls	r2, r3
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	4013      	ands	r3, r2
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	f000 808f 	beq.w	8003c98 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a2c      	ldr	r2, [pc, #176]	; (8003c30 <HAL_DMA_IRQHandler+0x3f8>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d04a      	beq.n	8003c1a <HAL_DMA_IRQHandler+0x3e2>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a2a      	ldr	r2, [pc, #168]	; (8003c34 <HAL_DMA_IRQHandler+0x3fc>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d045      	beq.n	8003c1a <HAL_DMA_IRQHandler+0x3e2>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a29      	ldr	r2, [pc, #164]	; (8003c38 <HAL_DMA_IRQHandler+0x400>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d040      	beq.n	8003c1a <HAL_DMA_IRQHandler+0x3e2>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a27      	ldr	r2, [pc, #156]	; (8003c3c <HAL_DMA_IRQHandler+0x404>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d03b      	beq.n	8003c1a <HAL_DMA_IRQHandler+0x3e2>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a26      	ldr	r2, [pc, #152]	; (8003c40 <HAL_DMA_IRQHandler+0x408>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d036      	beq.n	8003c1a <HAL_DMA_IRQHandler+0x3e2>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a24      	ldr	r2, [pc, #144]	; (8003c44 <HAL_DMA_IRQHandler+0x40c>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d031      	beq.n	8003c1a <HAL_DMA_IRQHandler+0x3e2>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a23      	ldr	r2, [pc, #140]	; (8003c48 <HAL_DMA_IRQHandler+0x410>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d02c      	beq.n	8003c1a <HAL_DMA_IRQHandler+0x3e2>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a21      	ldr	r2, [pc, #132]	; (8003c4c <HAL_DMA_IRQHandler+0x414>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d027      	beq.n	8003c1a <HAL_DMA_IRQHandler+0x3e2>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a20      	ldr	r2, [pc, #128]	; (8003c50 <HAL_DMA_IRQHandler+0x418>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d022      	beq.n	8003c1a <HAL_DMA_IRQHandler+0x3e2>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a1e      	ldr	r2, [pc, #120]	; (8003c54 <HAL_DMA_IRQHandler+0x41c>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d01d      	beq.n	8003c1a <HAL_DMA_IRQHandler+0x3e2>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a1d      	ldr	r2, [pc, #116]	; (8003c58 <HAL_DMA_IRQHandler+0x420>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d018      	beq.n	8003c1a <HAL_DMA_IRQHandler+0x3e2>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a1b      	ldr	r2, [pc, #108]	; (8003c5c <HAL_DMA_IRQHandler+0x424>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d013      	beq.n	8003c1a <HAL_DMA_IRQHandler+0x3e2>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a1a      	ldr	r2, [pc, #104]	; (8003c60 <HAL_DMA_IRQHandler+0x428>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d00e      	beq.n	8003c1a <HAL_DMA_IRQHandler+0x3e2>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a18      	ldr	r2, [pc, #96]	; (8003c64 <HAL_DMA_IRQHandler+0x42c>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d009      	beq.n	8003c1a <HAL_DMA_IRQHandler+0x3e2>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a17      	ldr	r2, [pc, #92]	; (8003c68 <HAL_DMA_IRQHandler+0x430>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d004      	beq.n	8003c1a <HAL_DMA_IRQHandler+0x3e2>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a15      	ldr	r2, [pc, #84]	; (8003c6c <HAL_DMA_IRQHandler+0x434>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d12a      	bne.n	8003c70 <HAL_DMA_IRQHandler+0x438>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0302 	and.w	r3, r3, #2
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	bf14      	ite	ne
 8003c28:	2301      	movne	r3, #1
 8003c2a:	2300      	moveq	r3, #0
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	e023      	b.n	8003c78 <HAL_DMA_IRQHandler+0x440>
 8003c30:	40020010 	.word	0x40020010
 8003c34:	40020028 	.word	0x40020028
 8003c38:	40020040 	.word	0x40020040
 8003c3c:	40020058 	.word	0x40020058
 8003c40:	40020070 	.word	0x40020070
 8003c44:	40020088 	.word	0x40020088
 8003c48:	400200a0 	.word	0x400200a0
 8003c4c:	400200b8 	.word	0x400200b8
 8003c50:	40020410 	.word	0x40020410
 8003c54:	40020428 	.word	0x40020428
 8003c58:	40020440 	.word	0x40020440
 8003c5c:	40020458 	.word	0x40020458
 8003c60:	40020470 	.word	0x40020470
 8003c64:	40020488 	.word	0x40020488
 8003c68:	400204a0 	.word	0x400204a0
 8003c6c:	400204b8 	.word	0x400204b8
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2300      	movs	r3, #0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d00d      	beq.n	8003c98 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c80:	f003 031f 	and.w	r3, r3, #31
 8003c84:	2204      	movs	r2, #4
 8003c86:	409a      	lsls	r2, r3
 8003c88:	6a3b      	ldr	r3, [r7, #32]
 8003c8a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c90:	f043 0204 	orr.w	r2, r3, #4
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c9c:	f003 031f 	and.w	r3, r3, #31
 8003ca0:	2210      	movs	r2, #16
 8003ca2:	409a      	lsls	r2, r3
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	f000 80a6 	beq.w	8003dfa <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a85      	ldr	r2, [pc, #532]	; (8003ec8 <HAL_DMA_IRQHandler+0x690>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d04a      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x516>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a83      	ldr	r2, [pc, #524]	; (8003ecc <HAL_DMA_IRQHandler+0x694>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d045      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x516>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a82      	ldr	r2, [pc, #520]	; (8003ed0 <HAL_DMA_IRQHandler+0x698>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d040      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x516>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a80      	ldr	r2, [pc, #512]	; (8003ed4 <HAL_DMA_IRQHandler+0x69c>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d03b      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x516>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a7f      	ldr	r2, [pc, #508]	; (8003ed8 <HAL_DMA_IRQHandler+0x6a0>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d036      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x516>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a7d      	ldr	r2, [pc, #500]	; (8003edc <HAL_DMA_IRQHandler+0x6a4>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d031      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x516>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a7c      	ldr	r2, [pc, #496]	; (8003ee0 <HAL_DMA_IRQHandler+0x6a8>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d02c      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x516>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a7a      	ldr	r2, [pc, #488]	; (8003ee4 <HAL_DMA_IRQHandler+0x6ac>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d027      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x516>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a79      	ldr	r2, [pc, #484]	; (8003ee8 <HAL_DMA_IRQHandler+0x6b0>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d022      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x516>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a77      	ldr	r2, [pc, #476]	; (8003eec <HAL_DMA_IRQHandler+0x6b4>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d01d      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x516>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a76      	ldr	r2, [pc, #472]	; (8003ef0 <HAL_DMA_IRQHandler+0x6b8>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d018      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x516>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a74      	ldr	r2, [pc, #464]	; (8003ef4 <HAL_DMA_IRQHandler+0x6bc>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d013      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x516>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a73      	ldr	r2, [pc, #460]	; (8003ef8 <HAL_DMA_IRQHandler+0x6c0>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d00e      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x516>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a71      	ldr	r2, [pc, #452]	; (8003efc <HAL_DMA_IRQHandler+0x6c4>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d009      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x516>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a70      	ldr	r2, [pc, #448]	; (8003f00 <HAL_DMA_IRQHandler+0x6c8>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d004      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x516>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a6e      	ldr	r2, [pc, #440]	; (8003f04 <HAL_DMA_IRQHandler+0x6cc>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d10a      	bne.n	8003d64 <HAL_DMA_IRQHandler+0x52c>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0308 	and.w	r3, r3, #8
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	bf14      	ite	ne
 8003d5c:	2301      	movne	r3, #1
 8003d5e:	2300      	moveq	r3, #0
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	e009      	b.n	8003d78 <HAL_DMA_IRQHandler+0x540>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0304 	and.w	r3, r3, #4
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	bf14      	ite	ne
 8003d72:	2301      	movne	r3, #1
 8003d74:	2300      	moveq	r3, #0
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d03e      	beq.n	8003dfa <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d80:	f003 031f 	and.w	r3, r3, #31
 8003d84:	2210      	movs	r2, #16
 8003d86:	409a      	lsls	r2, r3
 8003d88:	6a3b      	ldr	r3, [r7, #32]
 8003d8a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d018      	beq.n	8003dcc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d108      	bne.n	8003dba <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d024      	beq.n	8003dfa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	4798      	blx	r3
 8003db8:	e01f      	b.n	8003dfa <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d01b      	beq.n	8003dfa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	4798      	blx	r3
 8003dca:	e016      	b.n	8003dfa <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d107      	bne.n	8003dea <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f022 0208 	bic.w	r2, r2, #8
 8003de8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d003      	beq.n	8003dfa <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dfe:	f003 031f 	and.w	r3, r3, #31
 8003e02:	2220      	movs	r2, #32
 8003e04:	409a      	lsls	r2, r3
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	4013      	ands	r3, r2
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	f000 8110 	beq.w	8004030 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a2c      	ldr	r2, [pc, #176]	; (8003ec8 <HAL_DMA_IRQHandler+0x690>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d04a      	beq.n	8003eb0 <HAL_DMA_IRQHandler+0x678>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a2b      	ldr	r2, [pc, #172]	; (8003ecc <HAL_DMA_IRQHandler+0x694>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d045      	beq.n	8003eb0 <HAL_DMA_IRQHandler+0x678>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a29      	ldr	r2, [pc, #164]	; (8003ed0 <HAL_DMA_IRQHandler+0x698>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d040      	beq.n	8003eb0 <HAL_DMA_IRQHandler+0x678>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a28      	ldr	r2, [pc, #160]	; (8003ed4 <HAL_DMA_IRQHandler+0x69c>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d03b      	beq.n	8003eb0 <HAL_DMA_IRQHandler+0x678>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a26      	ldr	r2, [pc, #152]	; (8003ed8 <HAL_DMA_IRQHandler+0x6a0>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d036      	beq.n	8003eb0 <HAL_DMA_IRQHandler+0x678>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a25      	ldr	r2, [pc, #148]	; (8003edc <HAL_DMA_IRQHandler+0x6a4>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d031      	beq.n	8003eb0 <HAL_DMA_IRQHandler+0x678>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a23      	ldr	r2, [pc, #140]	; (8003ee0 <HAL_DMA_IRQHandler+0x6a8>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d02c      	beq.n	8003eb0 <HAL_DMA_IRQHandler+0x678>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a22      	ldr	r2, [pc, #136]	; (8003ee4 <HAL_DMA_IRQHandler+0x6ac>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d027      	beq.n	8003eb0 <HAL_DMA_IRQHandler+0x678>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a20      	ldr	r2, [pc, #128]	; (8003ee8 <HAL_DMA_IRQHandler+0x6b0>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d022      	beq.n	8003eb0 <HAL_DMA_IRQHandler+0x678>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a1f      	ldr	r2, [pc, #124]	; (8003eec <HAL_DMA_IRQHandler+0x6b4>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d01d      	beq.n	8003eb0 <HAL_DMA_IRQHandler+0x678>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a1d      	ldr	r2, [pc, #116]	; (8003ef0 <HAL_DMA_IRQHandler+0x6b8>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d018      	beq.n	8003eb0 <HAL_DMA_IRQHandler+0x678>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a1c      	ldr	r2, [pc, #112]	; (8003ef4 <HAL_DMA_IRQHandler+0x6bc>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d013      	beq.n	8003eb0 <HAL_DMA_IRQHandler+0x678>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a1a      	ldr	r2, [pc, #104]	; (8003ef8 <HAL_DMA_IRQHandler+0x6c0>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d00e      	beq.n	8003eb0 <HAL_DMA_IRQHandler+0x678>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a19      	ldr	r2, [pc, #100]	; (8003efc <HAL_DMA_IRQHandler+0x6c4>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d009      	beq.n	8003eb0 <HAL_DMA_IRQHandler+0x678>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a17      	ldr	r2, [pc, #92]	; (8003f00 <HAL_DMA_IRQHandler+0x6c8>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d004      	beq.n	8003eb0 <HAL_DMA_IRQHandler+0x678>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a16      	ldr	r2, [pc, #88]	; (8003f04 <HAL_DMA_IRQHandler+0x6cc>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d12b      	bne.n	8003f08 <HAL_DMA_IRQHandler+0x6d0>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0310 	and.w	r3, r3, #16
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	bf14      	ite	ne
 8003ebe:	2301      	movne	r3, #1
 8003ec0:	2300      	moveq	r3, #0
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	e02a      	b.n	8003f1c <HAL_DMA_IRQHandler+0x6e4>
 8003ec6:	bf00      	nop
 8003ec8:	40020010 	.word	0x40020010
 8003ecc:	40020028 	.word	0x40020028
 8003ed0:	40020040 	.word	0x40020040
 8003ed4:	40020058 	.word	0x40020058
 8003ed8:	40020070 	.word	0x40020070
 8003edc:	40020088 	.word	0x40020088
 8003ee0:	400200a0 	.word	0x400200a0
 8003ee4:	400200b8 	.word	0x400200b8
 8003ee8:	40020410 	.word	0x40020410
 8003eec:	40020428 	.word	0x40020428
 8003ef0:	40020440 	.word	0x40020440
 8003ef4:	40020458 	.word	0x40020458
 8003ef8:	40020470 	.word	0x40020470
 8003efc:	40020488 	.word	0x40020488
 8003f00:	400204a0 	.word	0x400204a0
 8003f04:	400204b8 	.word	0x400204b8
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	bf14      	ite	ne
 8003f16:	2301      	movne	r3, #1
 8003f18:	2300      	moveq	r3, #0
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	f000 8087 	beq.w	8004030 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f26:	f003 031f 	and.w	r3, r3, #31
 8003f2a:	2220      	movs	r2, #32
 8003f2c:	409a      	lsls	r2, r3
 8003f2e:	6a3b      	ldr	r3, [r7, #32]
 8003f30:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	2b04      	cmp	r3, #4
 8003f3c:	d139      	bne.n	8003fb2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f022 0216 	bic.w	r2, r2, #22
 8003f4c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	695a      	ldr	r2, [r3, #20]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f5c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d103      	bne.n	8003f6e <HAL_DMA_IRQHandler+0x736>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d007      	beq.n	8003f7e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f022 0208 	bic.w	r2, r2, #8
 8003f7c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f82:	f003 031f 	and.w	r3, r3, #31
 8003f86:	223f      	movs	r2, #63	; 0x3f
 8003f88:	409a      	lsls	r2, r3
 8003f8a:	6a3b      	ldr	r3, [r7, #32]
 8003f8c:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	f000 834a 	beq.w	800463c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	4798      	blx	r3
          }
          return;
 8003fb0:	e344      	b.n	800463c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d018      	beq.n	8003ff2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d108      	bne.n	8003fe0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d02c      	beq.n	8004030 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	4798      	blx	r3
 8003fde:	e027      	b.n	8004030 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d023      	beq.n	8004030 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	4798      	blx	r3
 8003ff0:	e01e      	b.n	8004030 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d10f      	bne.n	8004020 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f022 0210 	bic.w	r2, r2, #16
 800400e:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004024:	2b00      	cmp	r3, #0
 8004026:	d003      	beq.n	8004030 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004034:	2b00      	cmp	r3, #0
 8004036:	f000 8306 	beq.w	8004646 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800403e:	f003 0301 	and.w	r3, r3, #1
 8004042:	2b00      	cmp	r3, #0
 8004044:	f000 8088 	beq.w	8004158 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2204      	movs	r2, #4
 800404c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a7a      	ldr	r2, [pc, #488]	; (8004240 <HAL_DMA_IRQHandler+0xa08>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d04a      	beq.n	80040f0 <HAL_DMA_IRQHandler+0x8b8>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a79      	ldr	r2, [pc, #484]	; (8004244 <HAL_DMA_IRQHandler+0xa0c>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d045      	beq.n	80040f0 <HAL_DMA_IRQHandler+0x8b8>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a77      	ldr	r2, [pc, #476]	; (8004248 <HAL_DMA_IRQHandler+0xa10>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d040      	beq.n	80040f0 <HAL_DMA_IRQHandler+0x8b8>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a76      	ldr	r2, [pc, #472]	; (800424c <HAL_DMA_IRQHandler+0xa14>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d03b      	beq.n	80040f0 <HAL_DMA_IRQHandler+0x8b8>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a74      	ldr	r2, [pc, #464]	; (8004250 <HAL_DMA_IRQHandler+0xa18>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d036      	beq.n	80040f0 <HAL_DMA_IRQHandler+0x8b8>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a73      	ldr	r2, [pc, #460]	; (8004254 <HAL_DMA_IRQHandler+0xa1c>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d031      	beq.n	80040f0 <HAL_DMA_IRQHandler+0x8b8>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a71      	ldr	r2, [pc, #452]	; (8004258 <HAL_DMA_IRQHandler+0xa20>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d02c      	beq.n	80040f0 <HAL_DMA_IRQHandler+0x8b8>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a70      	ldr	r2, [pc, #448]	; (800425c <HAL_DMA_IRQHandler+0xa24>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d027      	beq.n	80040f0 <HAL_DMA_IRQHandler+0x8b8>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a6e      	ldr	r2, [pc, #440]	; (8004260 <HAL_DMA_IRQHandler+0xa28>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d022      	beq.n	80040f0 <HAL_DMA_IRQHandler+0x8b8>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a6d      	ldr	r2, [pc, #436]	; (8004264 <HAL_DMA_IRQHandler+0xa2c>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d01d      	beq.n	80040f0 <HAL_DMA_IRQHandler+0x8b8>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a6b      	ldr	r2, [pc, #428]	; (8004268 <HAL_DMA_IRQHandler+0xa30>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d018      	beq.n	80040f0 <HAL_DMA_IRQHandler+0x8b8>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a6a      	ldr	r2, [pc, #424]	; (800426c <HAL_DMA_IRQHandler+0xa34>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d013      	beq.n	80040f0 <HAL_DMA_IRQHandler+0x8b8>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a68      	ldr	r2, [pc, #416]	; (8004270 <HAL_DMA_IRQHandler+0xa38>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d00e      	beq.n	80040f0 <HAL_DMA_IRQHandler+0x8b8>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a67      	ldr	r2, [pc, #412]	; (8004274 <HAL_DMA_IRQHandler+0xa3c>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d009      	beq.n	80040f0 <HAL_DMA_IRQHandler+0x8b8>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a65      	ldr	r2, [pc, #404]	; (8004278 <HAL_DMA_IRQHandler+0xa40>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d004      	beq.n	80040f0 <HAL_DMA_IRQHandler+0x8b8>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a64      	ldr	r2, [pc, #400]	; (800427c <HAL_DMA_IRQHandler+0xa44>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d108      	bne.n	8004102 <HAL_DMA_IRQHandler+0x8ca>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f022 0201 	bic.w	r2, r2, #1
 80040fe:	601a      	str	r2, [r3, #0]
 8004100:	e007      	b.n	8004112 <HAL_DMA_IRQHandler+0x8da>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f022 0201 	bic.w	r2, r2, #1
 8004110:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	3301      	adds	r3, #1
 8004116:	60fb      	str	r3, [r7, #12]
 8004118:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800411a:	429a      	cmp	r2, r3
 800411c:	d307      	bcc.n	800412e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0301 	and.w	r3, r3, #1
 8004128:	2b00      	cmp	r3, #0
 800412a:	d1f2      	bne.n	8004112 <HAL_DMA_IRQHandler+0x8da>
 800412c:	e000      	b.n	8004130 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800412e:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0301 	and.w	r3, r3, #1
 8004142:	2b00      	cmp	r3, #0
 8004144:	d004      	beq.n	8004150 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2203      	movs	r2, #3
 800414a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800414e:	e003      	b.n	8004158 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800415c:	2b00      	cmp	r3, #0
 800415e:	f000 8272 	beq.w	8004646 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	4798      	blx	r3
 800416a:	e26c      	b.n	8004646 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a43      	ldr	r2, [pc, #268]	; (8004280 <HAL_DMA_IRQHandler+0xa48>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d022      	beq.n	80041bc <HAL_DMA_IRQHandler+0x984>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a42      	ldr	r2, [pc, #264]	; (8004284 <HAL_DMA_IRQHandler+0xa4c>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d01d      	beq.n	80041bc <HAL_DMA_IRQHandler+0x984>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a40      	ldr	r2, [pc, #256]	; (8004288 <HAL_DMA_IRQHandler+0xa50>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d018      	beq.n	80041bc <HAL_DMA_IRQHandler+0x984>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a3f      	ldr	r2, [pc, #252]	; (800428c <HAL_DMA_IRQHandler+0xa54>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d013      	beq.n	80041bc <HAL_DMA_IRQHandler+0x984>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a3d      	ldr	r2, [pc, #244]	; (8004290 <HAL_DMA_IRQHandler+0xa58>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d00e      	beq.n	80041bc <HAL_DMA_IRQHandler+0x984>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a3c      	ldr	r2, [pc, #240]	; (8004294 <HAL_DMA_IRQHandler+0xa5c>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d009      	beq.n	80041bc <HAL_DMA_IRQHandler+0x984>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a3a      	ldr	r2, [pc, #232]	; (8004298 <HAL_DMA_IRQHandler+0xa60>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d004      	beq.n	80041bc <HAL_DMA_IRQHandler+0x984>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a39      	ldr	r2, [pc, #228]	; (800429c <HAL_DMA_IRQHandler+0xa64>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d101      	bne.n	80041c0 <HAL_DMA_IRQHandler+0x988>
 80041bc:	2301      	movs	r3, #1
 80041be:	e000      	b.n	80041c2 <HAL_DMA_IRQHandler+0x98a>
 80041c0:	2300      	movs	r3, #0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	f000 823f 	beq.w	8004646 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041d4:	f003 031f 	and.w	r3, r3, #31
 80041d8:	2204      	movs	r2, #4
 80041da:	409a      	lsls	r2, r3
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	4013      	ands	r3, r2
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	f000 80cd 	beq.w	8004380 <HAL_DMA_IRQHandler+0xb48>
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	f003 0304 	and.w	r3, r3, #4
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	f000 80c7 	beq.w	8004380 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041f6:	f003 031f 	and.w	r3, r3, #31
 80041fa:	2204      	movs	r2, #4
 80041fc:	409a      	lsls	r2, r3
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d049      	beq.n	80042a0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d109      	bne.n	800422a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800421a:	2b00      	cmp	r3, #0
 800421c:	f000 8210 	beq.w	8004640 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004228:	e20a      	b.n	8004640 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422e:	2b00      	cmp	r3, #0
 8004230:	f000 8206 	beq.w	8004640 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800423c:	e200      	b.n	8004640 <HAL_DMA_IRQHandler+0xe08>
 800423e:	bf00      	nop
 8004240:	40020010 	.word	0x40020010
 8004244:	40020028 	.word	0x40020028
 8004248:	40020040 	.word	0x40020040
 800424c:	40020058 	.word	0x40020058
 8004250:	40020070 	.word	0x40020070
 8004254:	40020088 	.word	0x40020088
 8004258:	400200a0 	.word	0x400200a0
 800425c:	400200b8 	.word	0x400200b8
 8004260:	40020410 	.word	0x40020410
 8004264:	40020428 	.word	0x40020428
 8004268:	40020440 	.word	0x40020440
 800426c:	40020458 	.word	0x40020458
 8004270:	40020470 	.word	0x40020470
 8004274:	40020488 	.word	0x40020488
 8004278:	400204a0 	.word	0x400204a0
 800427c:	400204b8 	.word	0x400204b8
 8004280:	58025408 	.word	0x58025408
 8004284:	5802541c 	.word	0x5802541c
 8004288:	58025430 	.word	0x58025430
 800428c:	58025444 	.word	0x58025444
 8004290:	58025458 	.word	0x58025458
 8004294:	5802546c 	.word	0x5802546c
 8004298:	58025480 	.word	0x58025480
 800429c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	f003 0320 	and.w	r3, r3, #32
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d160      	bne.n	800436c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a7f      	ldr	r2, [pc, #508]	; (80044ac <HAL_DMA_IRQHandler+0xc74>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d04a      	beq.n	800434a <HAL_DMA_IRQHandler+0xb12>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a7d      	ldr	r2, [pc, #500]	; (80044b0 <HAL_DMA_IRQHandler+0xc78>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d045      	beq.n	800434a <HAL_DMA_IRQHandler+0xb12>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a7c      	ldr	r2, [pc, #496]	; (80044b4 <HAL_DMA_IRQHandler+0xc7c>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d040      	beq.n	800434a <HAL_DMA_IRQHandler+0xb12>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a7a      	ldr	r2, [pc, #488]	; (80044b8 <HAL_DMA_IRQHandler+0xc80>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d03b      	beq.n	800434a <HAL_DMA_IRQHandler+0xb12>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a79      	ldr	r2, [pc, #484]	; (80044bc <HAL_DMA_IRQHandler+0xc84>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d036      	beq.n	800434a <HAL_DMA_IRQHandler+0xb12>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a77      	ldr	r2, [pc, #476]	; (80044c0 <HAL_DMA_IRQHandler+0xc88>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d031      	beq.n	800434a <HAL_DMA_IRQHandler+0xb12>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a76      	ldr	r2, [pc, #472]	; (80044c4 <HAL_DMA_IRQHandler+0xc8c>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d02c      	beq.n	800434a <HAL_DMA_IRQHandler+0xb12>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a74      	ldr	r2, [pc, #464]	; (80044c8 <HAL_DMA_IRQHandler+0xc90>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d027      	beq.n	800434a <HAL_DMA_IRQHandler+0xb12>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a73      	ldr	r2, [pc, #460]	; (80044cc <HAL_DMA_IRQHandler+0xc94>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d022      	beq.n	800434a <HAL_DMA_IRQHandler+0xb12>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a71      	ldr	r2, [pc, #452]	; (80044d0 <HAL_DMA_IRQHandler+0xc98>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d01d      	beq.n	800434a <HAL_DMA_IRQHandler+0xb12>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a70      	ldr	r2, [pc, #448]	; (80044d4 <HAL_DMA_IRQHandler+0xc9c>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d018      	beq.n	800434a <HAL_DMA_IRQHandler+0xb12>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a6e      	ldr	r2, [pc, #440]	; (80044d8 <HAL_DMA_IRQHandler+0xca0>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d013      	beq.n	800434a <HAL_DMA_IRQHandler+0xb12>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a6d      	ldr	r2, [pc, #436]	; (80044dc <HAL_DMA_IRQHandler+0xca4>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d00e      	beq.n	800434a <HAL_DMA_IRQHandler+0xb12>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a6b      	ldr	r2, [pc, #428]	; (80044e0 <HAL_DMA_IRQHandler+0xca8>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d009      	beq.n	800434a <HAL_DMA_IRQHandler+0xb12>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a6a      	ldr	r2, [pc, #424]	; (80044e4 <HAL_DMA_IRQHandler+0xcac>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d004      	beq.n	800434a <HAL_DMA_IRQHandler+0xb12>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a68      	ldr	r2, [pc, #416]	; (80044e8 <HAL_DMA_IRQHandler+0xcb0>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d108      	bne.n	800435c <HAL_DMA_IRQHandler+0xb24>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f022 0208 	bic.w	r2, r2, #8
 8004358:	601a      	str	r2, [r3, #0]
 800435a:	e007      	b.n	800436c <HAL_DMA_IRQHandler+0xb34>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f022 0204 	bic.w	r2, r2, #4
 800436a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004370:	2b00      	cmp	r3, #0
 8004372:	f000 8165 	beq.w	8004640 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800437e:	e15f      	b.n	8004640 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004384:	f003 031f 	and.w	r3, r3, #31
 8004388:	2202      	movs	r2, #2
 800438a:	409a      	lsls	r2, r3
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	4013      	ands	r3, r2
 8004390:	2b00      	cmp	r3, #0
 8004392:	f000 80c5 	beq.w	8004520 <HAL_DMA_IRQHandler+0xce8>
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	f003 0302 	and.w	r3, r3, #2
 800439c:	2b00      	cmp	r3, #0
 800439e:	f000 80bf 	beq.w	8004520 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043a6:	f003 031f 	and.w	r3, r3, #31
 80043aa:	2202      	movs	r2, #2
 80043ac:	409a      	lsls	r2, r3
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d018      	beq.n	80043ee <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d109      	bne.n	80043da <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	f000 813a 	beq.w	8004644 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043d8:	e134      	b.n	8004644 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043de:	2b00      	cmp	r3, #0
 80043e0:	f000 8130 	beq.w	8004644 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043ec:	e12a      	b.n	8004644 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	f003 0320 	and.w	r3, r3, #32
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	f040 8089 	bne.w	800450c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a2b      	ldr	r2, [pc, #172]	; (80044ac <HAL_DMA_IRQHandler+0xc74>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d04a      	beq.n	800449a <HAL_DMA_IRQHandler+0xc62>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a29      	ldr	r2, [pc, #164]	; (80044b0 <HAL_DMA_IRQHandler+0xc78>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d045      	beq.n	800449a <HAL_DMA_IRQHandler+0xc62>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a28      	ldr	r2, [pc, #160]	; (80044b4 <HAL_DMA_IRQHandler+0xc7c>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d040      	beq.n	800449a <HAL_DMA_IRQHandler+0xc62>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a26      	ldr	r2, [pc, #152]	; (80044b8 <HAL_DMA_IRQHandler+0xc80>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d03b      	beq.n	800449a <HAL_DMA_IRQHandler+0xc62>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a25      	ldr	r2, [pc, #148]	; (80044bc <HAL_DMA_IRQHandler+0xc84>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d036      	beq.n	800449a <HAL_DMA_IRQHandler+0xc62>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a23      	ldr	r2, [pc, #140]	; (80044c0 <HAL_DMA_IRQHandler+0xc88>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d031      	beq.n	800449a <HAL_DMA_IRQHandler+0xc62>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a22      	ldr	r2, [pc, #136]	; (80044c4 <HAL_DMA_IRQHandler+0xc8c>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d02c      	beq.n	800449a <HAL_DMA_IRQHandler+0xc62>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a20      	ldr	r2, [pc, #128]	; (80044c8 <HAL_DMA_IRQHandler+0xc90>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d027      	beq.n	800449a <HAL_DMA_IRQHandler+0xc62>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a1f      	ldr	r2, [pc, #124]	; (80044cc <HAL_DMA_IRQHandler+0xc94>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d022      	beq.n	800449a <HAL_DMA_IRQHandler+0xc62>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a1d      	ldr	r2, [pc, #116]	; (80044d0 <HAL_DMA_IRQHandler+0xc98>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d01d      	beq.n	800449a <HAL_DMA_IRQHandler+0xc62>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a1c      	ldr	r2, [pc, #112]	; (80044d4 <HAL_DMA_IRQHandler+0xc9c>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d018      	beq.n	800449a <HAL_DMA_IRQHandler+0xc62>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a1a      	ldr	r2, [pc, #104]	; (80044d8 <HAL_DMA_IRQHandler+0xca0>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d013      	beq.n	800449a <HAL_DMA_IRQHandler+0xc62>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a19      	ldr	r2, [pc, #100]	; (80044dc <HAL_DMA_IRQHandler+0xca4>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d00e      	beq.n	800449a <HAL_DMA_IRQHandler+0xc62>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a17      	ldr	r2, [pc, #92]	; (80044e0 <HAL_DMA_IRQHandler+0xca8>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d009      	beq.n	800449a <HAL_DMA_IRQHandler+0xc62>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a16      	ldr	r2, [pc, #88]	; (80044e4 <HAL_DMA_IRQHandler+0xcac>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d004      	beq.n	800449a <HAL_DMA_IRQHandler+0xc62>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a14      	ldr	r2, [pc, #80]	; (80044e8 <HAL_DMA_IRQHandler+0xcb0>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d128      	bne.n	80044ec <HAL_DMA_IRQHandler+0xcb4>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f022 0214 	bic.w	r2, r2, #20
 80044a8:	601a      	str	r2, [r3, #0]
 80044aa:	e027      	b.n	80044fc <HAL_DMA_IRQHandler+0xcc4>
 80044ac:	40020010 	.word	0x40020010
 80044b0:	40020028 	.word	0x40020028
 80044b4:	40020040 	.word	0x40020040
 80044b8:	40020058 	.word	0x40020058
 80044bc:	40020070 	.word	0x40020070
 80044c0:	40020088 	.word	0x40020088
 80044c4:	400200a0 	.word	0x400200a0
 80044c8:	400200b8 	.word	0x400200b8
 80044cc:	40020410 	.word	0x40020410
 80044d0:	40020428 	.word	0x40020428
 80044d4:	40020440 	.word	0x40020440
 80044d8:	40020458 	.word	0x40020458
 80044dc:	40020470 	.word	0x40020470
 80044e0:	40020488 	.word	0x40020488
 80044e4:	400204a0 	.word	0x400204a0
 80044e8:	400204b8 	.word	0x400204b8
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f022 020a 	bic.w	r2, r2, #10
 80044fa:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004510:	2b00      	cmp	r3, #0
 8004512:	f000 8097 	beq.w	8004644 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800451e:	e091      	b.n	8004644 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004524:	f003 031f 	and.w	r3, r3, #31
 8004528:	2208      	movs	r2, #8
 800452a:	409a      	lsls	r2, r3
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	4013      	ands	r3, r2
 8004530:	2b00      	cmp	r3, #0
 8004532:	f000 8088 	beq.w	8004646 <HAL_DMA_IRQHandler+0xe0e>
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	f003 0308 	and.w	r3, r3, #8
 800453c:	2b00      	cmp	r3, #0
 800453e:	f000 8082 	beq.w	8004646 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a41      	ldr	r2, [pc, #260]	; (800464c <HAL_DMA_IRQHandler+0xe14>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d04a      	beq.n	80045e2 <HAL_DMA_IRQHandler+0xdaa>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a3f      	ldr	r2, [pc, #252]	; (8004650 <HAL_DMA_IRQHandler+0xe18>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d045      	beq.n	80045e2 <HAL_DMA_IRQHandler+0xdaa>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a3e      	ldr	r2, [pc, #248]	; (8004654 <HAL_DMA_IRQHandler+0xe1c>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d040      	beq.n	80045e2 <HAL_DMA_IRQHandler+0xdaa>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a3c      	ldr	r2, [pc, #240]	; (8004658 <HAL_DMA_IRQHandler+0xe20>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d03b      	beq.n	80045e2 <HAL_DMA_IRQHandler+0xdaa>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a3b      	ldr	r2, [pc, #236]	; (800465c <HAL_DMA_IRQHandler+0xe24>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d036      	beq.n	80045e2 <HAL_DMA_IRQHandler+0xdaa>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a39      	ldr	r2, [pc, #228]	; (8004660 <HAL_DMA_IRQHandler+0xe28>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d031      	beq.n	80045e2 <HAL_DMA_IRQHandler+0xdaa>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a38      	ldr	r2, [pc, #224]	; (8004664 <HAL_DMA_IRQHandler+0xe2c>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d02c      	beq.n	80045e2 <HAL_DMA_IRQHandler+0xdaa>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a36      	ldr	r2, [pc, #216]	; (8004668 <HAL_DMA_IRQHandler+0xe30>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d027      	beq.n	80045e2 <HAL_DMA_IRQHandler+0xdaa>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a35      	ldr	r2, [pc, #212]	; (800466c <HAL_DMA_IRQHandler+0xe34>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d022      	beq.n	80045e2 <HAL_DMA_IRQHandler+0xdaa>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a33      	ldr	r2, [pc, #204]	; (8004670 <HAL_DMA_IRQHandler+0xe38>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d01d      	beq.n	80045e2 <HAL_DMA_IRQHandler+0xdaa>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a32      	ldr	r2, [pc, #200]	; (8004674 <HAL_DMA_IRQHandler+0xe3c>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d018      	beq.n	80045e2 <HAL_DMA_IRQHandler+0xdaa>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a30      	ldr	r2, [pc, #192]	; (8004678 <HAL_DMA_IRQHandler+0xe40>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d013      	beq.n	80045e2 <HAL_DMA_IRQHandler+0xdaa>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a2f      	ldr	r2, [pc, #188]	; (800467c <HAL_DMA_IRQHandler+0xe44>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d00e      	beq.n	80045e2 <HAL_DMA_IRQHandler+0xdaa>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a2d      	ldr	r2, [pc, #180]	; (8004680 <HAL_DMA_IRQHandler+0xe48>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d009      	beq.n	80045e2 <HAL_DMA_IRQHandler+0xdaa>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a2c      	ldr	r2, [pc, #176]	; (8004684 <HAL_DMA_IRQHandler+0xe4c>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d004      	beq.n	80045e2 <HAL_DMA_IRQHandler+0xdaa>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a2a      	ldr	r2, [pc, #168]	; (8004688 <HAL_DMA_IRQHandler+0xe50>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d108      	bne.n	80045f4 <HAL_DMA_IRQHandler+0xdbc>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f022 021c 	bic.w	r2, r2, #28
 80045f0:	601a      	str	r2, [r3, #0]
 80045f2:	e007      	b.n	8004604 <HAL_DMA_IRQHandler+0xdcc>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f022 020e 	bic.w	r2, r2, #14
 8004602:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004608:	f003 031f 	and.w	r3, r3, #31
 800460c:	2201      	movs	r2, #1
 800460e:	409a      	lsls	r2, r3
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2201      	movs	r2, #1
 8004626:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800462e:	2b00      	cmp	r3, #0
 8004630:	d009      	beq.n	8004646 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	4798      	blx	r3
 800463a:	e004      	b.n	8004646 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800463c:	bf00      	nop
 800463e:	e002      	b.n	8004646 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004640:	bf00      	nop
 8004642:	e000      	b.n	8004646 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004644:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004646:	3728      	adds	r7, #40	; 0x28
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	40020010 	.word	0x40020010
 8004650:	40020028 	.word	0x40020028
 8004654:	40020040 	.word	0x40020040
 8004658:	40020058 	.word	0x40020058
 800465c:	40020070 	.word	0x40020070
 8004660:	40020088 	.word	0x40020088
 8004664:	400200a0 	.word	0x400200a0
 8004668:	400200b8 	.word	0x400200b8
 800466c:	40020410 	.word	0x40020410
 8004670:	40020428 	.word	0x40020428
 8004674:	40020440 	.word	0x40020440
 8004678:	40020458 	.word	0x40020458
 800467c:	40020470 	.word	0x40020470
 8004680:	40020488 	.word	0x40020488
 8004684:	400204a0 	.word	0x400204a0
 8004688:	400204b8 	.word	0x400204b8

0800468c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800469a:	b2db      	uxtb	r3, r3
}
 800469c:	4618      	mov	r0, r3
 800469e:	370c      	adds	r7, #12
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b087      	sub	sp, #28
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	607a      	str	r2, [r7, #4]
 80046cc:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046d2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046d8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a7f      	ldr	r2, [pc, #508]	; (80048dc <DMA_SetConfig+0x21c>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d072      	beq.n	80047ca <DMA_SetConfig+0x10a>
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a7d      	ldr	r2, [pc, #500]	; (80048e0 <DMA_SetConfig+0x220>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d06d      	beq.n	80047ca <DMA_SetConfig+0x10a>
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a7c      	ldr	r2, [pc, #496]	; (80048e4 <DMA_SetConfig+0x224>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d068      	beq.n	80047ca <DMA_SetConfig+0x10a>
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a7a      	ldr	r2, [pc, #488]	; (80048e8 <DMA_SetConfig+0x228>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d063      	beq.n	80047ca <DMA_SetConfig+0x10a>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a79      	ldr	r2, [pc, #484]	; (80048ec <DMA_SetConfig+0x22c>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d05e      	beq.n	80047ca <DMA_SetConfig+0x10a>
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a77      	ldr	r2, [pc, #476]	; (80048f0 <DMA_SetConfig+0x230>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d059      	beq.n	80047ca <DMA_SetConfig+0x10a>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a76      	ldr	r2, [pc, #472]	; (80048f4 <DMA_SetConfig+0x234>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d054      	beq.n	80047ca <DMA_SetConfig+0x10a>
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a74      	ldr	r2, [pc, #464]	; (80048f8 <DMA_SetConfig+0x238>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d04f      	beq.n	80047ca <DMA_SetConfig+0x10a>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a73      	ldr	r2, [pc, #460]	; (80048fc <DMA_SetConfig+0x23c>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d04a      	beq.n	80047ca <DMA_SetConfig+0x10a>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a71      	ldr	r2, [pc, #452]	; (8004900 <DMA_SetConfig+0x240>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d045      	beq.n	80047ca <DMA_SetConfig+0x10a>
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a70      	ldr	r2, [pc, #448]	; (8004904 <DMA_SetConfig+0x244>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d040      	beq.n	80047ca <DMA_SetConfig+0x10a>
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a6e      	ldr	r2, [pc, #440]	; (8004908 <DMA_SetConfig+0x248>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d03b      	beq.n	80047ca <DMA_SetConfig+0x10a>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a6d      	ldr	r2, [pc, #436]	; (800490c <DMA_SetConfig+0x24c>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d036      	beq.n	80047ca <DMA_SetConfig+0x10a>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a6b      	ldr	r2, [pc, #428]	; (8004910 <DMA_SetConfig+0x250>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d031      	beq.n	80047ca <DMA_SetConfig+0x10a>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a6a      	ldr	r2, [pc, #424]	; (8004914 <DMA_SetConfig+0x254>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d02c      	beq.n	80047ca <DMA_SetConfig+0x10a>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a68      	ldr	r2, [pc, #416]	; (8004918 <DMA_SetConfig+0x258>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d027      	beq.n	80047ca <DMA_SetConfig+0x10a>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a67      	ldr	r2, [pc, #412]	; (800491c <DMA_SetConfig+0x25c>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d022      	beq.n	80047ca <DMA_SetConfig+0x10a>
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a65      	ldr	r2, [pc, #404]	; (8004920 <DMA_SetConfig+0x260>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d01d      	beq.n	80047ca <DMA_SetConfig+0x10a>
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a64      	ldr	r2, [pc, #400]	; (8004924 <DMA_SetConfig+0x264>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d018      	beq.n	80047ca <DMA_SetConfig+0x10a>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a62      	ldr	r2, [pc, #392]	; (8004928 <DMA_SetConfig+0x268>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d013      	beq.n	80047ca <DMA_SetConfig+0x10a>
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a61      	ldr	r2, [pc, #388]	; (800492c <DMA_SetConfig+0x26c>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d00e      	beq.n	80047ca <DMA_SetConfig+0x10a>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a5f      	ldr	r2, [pc, #380]	; (8004930 <DMA_SetConfig+0x270>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d009      	beq.n	80047ca <DMA_SetConfig+0x10a>
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a5e      	ldr	r2, [pc, #376]	; (8004934 <DMA_SetConfig+0x274>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d004      	beq.n	80047ca <DMA_SetConfig+0x10a>
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a5c      	ldr	r2, [pc, #368]	; (8004938 <DMA_SetConfig+0x278>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d101      	bne.n	80047ce <DMA_SetConfig+0x10e>
 80047ca:	2301      	movs	r3, #1
 80047cc:	e000      	b.n	80047d0 <DMA_SetConfig+0x110>
 80047ce:	2300      	movs	r3, #0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d00d      	beq.n	80047f0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047d8:	68fa      	ldr	r2, [r7, #12]
 80047da:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80047dc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d004      	beq.n	80047f0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80047ee:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a39      	ldr	r2, [pc, #228]	; (80048dc <DMA_SetConfig+0x21c>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d04a      	beq.n	8004890 <DMA_SetConfig+0x1d0>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a38      	ldr	r2, [pc, #224]	; (80048e0 <DMA_SetConfig+0x220>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d045      	beq.n	8004890 <DMA_SetConfig+0x1d0>
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a36      	ldr	r2, [pc, #216]	; (80048e4 <DMA_SetConfig+0x224>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d040      	beq.n	8004890 <DMA_SetConfig+0x1d0>
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a35      	ldr	r2, [pc, #212]	; (80048e8 <DMA_SetConfig+0x228>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d03b      	beq.n	8004890 <DMA_SetConfig+0x1d0>
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a33      	ldr	r2, [pc, #204]	; (80048ec <DMA_SetConfig+0x22c>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d036      	beq.n	8004890 <DMA_SetConfig+0x1d0>
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a32      	ldr	r2, [pc, #200]	; (80048f0 <DMA_SetConfig+0x230>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d031      	beq.n	8004890 <DMA_SetConfig+0x1d0>
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a30      	ldr	r2, [pc, #192]	; (80048f4 <DMA_SetConfig+0x234>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d02c      	beq.n	8004890 <DMA_SetConfig+0x1d0>
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a2f      	ldr	r2, [pc, #188]	; (80048f8 <DMA_SetConfig+0x238>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d027      	beq.n	8004890 <DMA_SetConfig+0x1d0>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a2d      	ldr	r2, [pc, #180]	; (80048fc <DMA_SetConfig+0x23c>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d022      	beq.n	8004890 <DMA_SetConfig+0x1d0>
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a2c      	ldr	r2, [pc, #176]	; (8004900 <DMA_SetConfig+0x240>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d01d      	beq.n	8004890 <DMA_SetConfig+0x1d0>
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a2a      	ldr	r2, [pc, #168]	; (8004904 <DMA_SetConfig+0x244>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d018      	beq.n	8004890 <DMA_SetConfig+0x1d0>
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a29      	ldr	r2, [pc, #164]	; (8004908 <DMA_SetConfig+0x248>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d013      	beq.n	8004890 <DMA_SetConfig+0x1d0>
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a27      	ldr	r2, [pc, #156]	; (800490c <DMA_SetConfig+0x24c>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d00e      	beq.n	8004890 <DMA_SetConfig+0x1d0>
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a26      	ldr	r2, [pc, #152]	; (8004910 <DMA_SetConfig+0x250>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d009      	beq.n	8004890 <DMA_SetConfig+0x1d0>
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a24      	ldr	r2, [pc, #144]	; (8004914 <DMA_SetConfig+0x254>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d004      	beq.n	8004890 <DMA_SetConfig+0x1d0>
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a23      	ldr	r2, [pc, #140]	; (8004918 <DMA_SetConfig+0x258>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d101      	bne.n	8004894 <DMA_SetConfig+0x1d4>
 8004890:	2301      	movs	r3, #1
 8004892:	e000      	b.n	8004896 <DMA_SetConfig+0x1d6>
 8004894:	2300      	movs	r3, #0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d059      	beq.n	800494e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800489e:	f003 031f 	and.w	r3, r3, #31
 80048a2:	223f      	movs	r2, #63	; 0x3f
 80048a4:	409a      	lsls	r2, r3
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80048b8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	683a      	ldr	r2, [r7, #0]
 80048c0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	2b40      	cmp	r3, #64	; 0x40
 80048c8:	d138      	bne.n	800493c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	68ba      	ldr	r2, [r7, #8]
 80048d8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80048da:	e086      	b.n	80049ea <DMA_SetConfig+0x32a>
 80048dc:	40020010 	.word	0x40020010
 80048e0:	40020028 	.word	0x40020028
 80048e4:	40020040 	.word	0x40020040
 80048e8:	40020058 	.word	0x40020058
 80048ec:	40020070 	.word	0x40020070
 80048f0:	40020088 	.word	0x40020088
 80048f4:	400200a0 	.word	0x400200a0
 80048f8:	400200b8 	.word	0x400200b8
 80048fc:	40020410 	.word	0x40020410
 8004900:	40020428 	.word	0x40020428
 8004904:	40020440 	.word	0x40020440
 8004908:	40020458 	.word	0x40020458
 800490c:	40020470 	.word	0x40020470
 8004910:	40020488 	.word	0x40020488
 8004914:	400204a0 	.word	0x400204a0
 8004918:	400204b8 	.word	0x400204b8
 800491c:	58025408 	.word	0x58025408
 8004920:	5802541c 	.word	0x5802541c
 8004924:	58025430 	.word	0x58025430
 8004928:	58025444 	.word	0x58025444
 800492c:	58025458 	.word	0x58025458
 8004930:	5802546c 	.word	0x5802546c
 8004934:	58025480 	.word	0x58025480
 8004938:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	68ba      	ldr	r2, [r7, #8]
 8004942:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	60da      	str	r2, [r3, #12]
}
 800494c:	e04d      	b.n	80049ea <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a29      	ldr	r2, [pc, #164]	; (80049f8 <DMA_SetConfig+0x338>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d022      	beq.n	800499e <DMA_SetConfig+0x2de>
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a27      	ldr	r2, [pc, #156]	; (80049fc <DMA_SetConfig+0x33c>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d01d      	beq.n	800499e <DMA_SetConfig+0x2de>
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a26      	ldr	r2, [pc, #152]	; (8004a00 <DMA_SetConfig+0x340>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d018      	beq.n	800499e <DMA_SetConfig+0x2de>
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a24      	ldr	r2, [pc, #144]	; (8004a04 <DMA_SetConfig+0x344>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d013      	beq.n	800499e <DMA_SetConfig+0x2de>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a23      	ldr	r2, [pc, #140]	; (8004a08 <DMA_SetConfig+0x348>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d00e      	beq.n	800499e <DMA_SetConfig+0x2de>
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a21      	ldr	r2, [pc, #132]	; (8004a0c <DMA_SetConfig+0x34c>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d009      	beq.n	800499e <DMA_SetConfig+0x2de>
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a20      	ldr	r2, [pc, #128]	; (8004a10 <DMA_SetConfig+0x350>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d004      	beq.n	800499e <DMA_SetConfig+0x2de>
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a1e      	ldr	r2, [pc, #120]	; (8004a14 <DMA_SetConfig+0x354>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d101      	bne.n	80049a2 <DMA_SetConfig+0x2e2>
 800499e:	2301      	movs	r3, #1
 80049a0:	e000      	b.n	80049a4 <DMA_SetConfig+0x2e4>
 80049a2:	2300      	movs	r3, #0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d020      	beq.n	80049ea <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049ac:	f003 031f 	and.w	r3, r3, #31
 80049b0:	2201      	movs	r2, #1
 80049b2:	409a      	lsls	r2, r3
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	683a      	ldr	r2, [r7, #0]
 80049be:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	2b40      	cmp	r3, #64	; 0x40
 80049c6:	d108      	bne.n	80049da <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	68ba      	ldr	r2, [r7, #8]
 80049d6:	60da      	str	r2, [r3, #12]
}
 80049d8:	e007      	b.n	80049ea <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68ba      	ldr	r2, [r7, #8]
 80049e0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	60da      	str	r2, [r3, #12]
}
 80049ea:	bf00      	nop
 80049ec:	371c      	adds	r7, #28
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	58025408 	.word	0x58025408
 80049fc:	5802541c 	.word	0x5802541c
 8004a00:	58025430 	.word	0x58025430
 8004a04:	58025444 	.word	0x58025444
 8004a08:	58025458 	.word	0x58025458
 8004a0c:	5802546c 	.word	0x5802546c
 8004a10:	58025480 	.word	0x58025480
 8004a14:	58025494 	.word	0x58025494

08004a18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b085      	sub	sp, #20
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a42      	ldr	r2, [pc, #264]	; (8004b30 <DMA_CalcBaseAndBitshift+0x118>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d04a      	beq.n	8004ac0 <DMA_CalcBaseAndBitshift+0xa8>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a41      	ldr	r2, [pc, #260]	; (8004b34 <DMA_CalcBaseAndBitshift+0x11c>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d045      	beq.n	8004ac0 <DMA_CalcBaseAndBitshift+0xa8>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a3f      	ldr	r2, [pc, #252]	; (8004b38 <DMA_CalcBaseAndBitshift+0x120>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d040      	beq.n	8004ac0 <DMA_CalcBaseAndBitshift+0xa8>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a3e      	ldr	r2, [pc, #248]	; (8004b3c <DMA_CalcBaseAndBitshift+0x124>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d03b      	beq.n	8004ac0 <DMA_CalcBaseAndBitshift+0xa8>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a3c      	ldr	r2, [pc, #240]	; (8004b40 <DMA_CalcBaseAndBitshift+0x128>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d036      	beq.n	8004ac0 <DMA_CalcBaseAndBitshift+0xa8>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a3b      	ldr	r2, [pc, #236]	; (8004b44 <DMA_CalcBaseAndBitshift+0x12c>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d031      	beq.n	8004ac0 <DMA_CalcBaseAndBitshift+0xa8>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a39      	ldr	r2, [pc, #228]	; (8004b48 <DMA_CalcBaseAndBitshift+0x130>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d02c      	beq.n	8004ac0 <DMA_CalcBaseAndBitshift+0xa8>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a38      	ldr	r2, [pc, #224]	; (8004b4c <DMA_CalcBaseAndBitshift+0x134>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d027      	beq.n	8004ac0 <DMA_CalcBaseAndBitshift+0xa8>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a36      	ldr	r2, [pc, #216]	; (8004b50 <DMA_CalcBaseAndBitshift+0x138>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d022      	beq.n	8004ac0 <DMA_CalcBaseAndBitshift+0xa8>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a35      	ldr	r2, [pc, #212]	; (8004b54 <DMA_CalcBaseAndBitshift+0x13c>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d01d      	beq.n	8004ac0 <DMA_CalcBaseAndBitshift+0xa8>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a33      	ldr	r2, [pc, #204]	; (8004b58 <DMA_CalcBaseAndBitshift+0x140>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d018      	beq.n	8004ac0 <DMA_CalcBaseAndBitshift+0xa8>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a32      	ldr	r2, [pc, #200]	; (8004b5c <DMA_CalcBaseAndBitshift+0x144>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d013      	beq.n	8004ac0 <DMA_CalcBaseAndBitshift+0xa8>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a30      	ldr	r2, [pc, #192]	; (8004b60 <DMA_CalcBaseAndBitshift+0x148>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d00e      	beq.n	8004ac0 <DMA_CalcBaseAndBitshift+0xa8>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a2f      	ldr	r2, [pc, #188]	; (8004b64 <DMA_CalcBaseAndBitshift+0x14c>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d009      	beq.n	8004ac0 <DMA_CalcBaseAndBitshift+0xa8>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a2d      	ldr	r2, [pc, #180]	; (8004b68 <DMA_CalcBaseAndBitshift+0x150>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d004      	beq.n	8004ac0 <DMA_CalcBaseAndBitshift+0xa8>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a2c      	ldr	r2, [pc, #176]	; (8004b6c <DMA_CalcBaseAndBitshift+0x154>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d101      	bne.n	8004ac4 <DMA_CalcBaseAndBitshift+0xac>
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e000      	b.n	8004ac6 <DMA_CalcBaseAndBitshift+0xae>
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d024      	beq.n	8004b14 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	3b10      	subs	r3, #16
 8004ad2:	4a27      	ldr	r2, [pc, #156]	; (8004b70 <DMA_CalcBaseAndBitshift+0x158>)
 8004ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ad8:	091b      	lsrs	r3, r3, #4
 8004ada:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f003 0307 	and.w	r3, r3, #7
 8004ae2:	4a24      	ldr	r2, [pc, #144]	; (8004b74 <DMA_CalcBaseAndBitshift+0x15c>)
 8004ae4:	5cd3      	ldrb	r3, [r2, r3]
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2b03      	cmp	r3, #3
 8004af0:	d908      	bls.n	8004b04 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	461a      	mov	r2, r3
 8004af8:	4b1f      	ldr	r3, [pc, #124]	; (8004b78 <DMA_CalcBaseAndBitshift+0x160>)
 8004afa:	4013      	ands	r3, r2
 8004afc:	1d1a      	adds	r2, r3, #4
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	659a      	str	r2, [r3, #88]	; 0x58
 8004b02:	e00d      	b.n	8004b20 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	461a      	mov	r2, r3
 8004b0a:	4b1b      	ldr	r3, [pc, #108]	; (8004b78 <DMA_CalcBaseAndBitshift+0x160>)
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	6593      	str	r3, [r2, #88]	; 0x58
 8004b12:	e005      	b.n	8004b20 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3714      	adds	r7, #20
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr
 8004b30:	40020010 	.word	0x40020010
 8004b34:	40020028 	.word	0x40020028
 8004b38:	40020040 	.word	0x40020040
 8004b3c:	40020058 	.word	0x40020058
 8004b40:	40020070 	.word	0x40020070
 8004b44:	40020088 	.word	0x40020088
 8004b48:	400200a0 	.word	0x400200a0
 8004b4c:	400200b8 	.word	0x400200b8
 8004b50:	40020410 	.word	0x40020410
 8004b54:	40020428 	.word	0x40020428
 8004b58:	40020440 	.word	0x40020440
 8004b5c:	40020458 	.word	0x40020458
 8004b60:	40020470 	.word	0x40020470
 8004b64:	40020488 	.word	0x40020488
 8004b68:	400204a0 	.word	0x400204a0
 8004b6c:	400204b8 	.word	0x400204b8
 8004b70:	aaaaaaab 	.word	0xaaaaaaab
 8004b74:	08013ad4 	.word	0x08013ad4
 8004b78:	fffffc00 	.word	0xfffffc00

08004b7c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b085      	sub	sp, #20
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b84:	2300      	movs	r3, #0
 8004b86:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	699b      	ldr	r3, [r3, #24]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d120      	bne.n	8004bd2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b94:	2b03      	cmp	r3, #3
 8004b96:	d858      	bhi.n	8004c4a <DMA_CheckFifoParam+0xce>
 8004b98:	a201      	add	r2, pc, #4	; (adr r2, 8004ba0 <DMA_CheckFifoParam+0x24>)
 8004b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b9e:	bf00      	nop
 8004ba0:	08004bb1 	.word	0x08004bb1
 8004ba4:	08004bc3 	.word	0x08004bc3
 8004ba8:	08004bb1 	.word	0x08004bb1
 8004bac:	08004c4b 	.word	0x08004c4b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d048      	beq.n	8004c4e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004bc0:	e045      	b.n	8004c4e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004bca:	d142      	bne.n	8004c52 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004bd0:	e03f      	b.n	8004c52 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	699b      	ldr	r3, [r3, #24]
 8004bd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bda:	d123      	bne.n	8004c24 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be0:	2b03      	cmp	r3, #3
 8004be2:	d838      	bhi.n	8004c56 <DMA_CheckFifoParam+0xda>
 8004be4:	a201      	add	r2, pc, #4	; (adr r2, 8004bec <DMA_CheckFifoParam+0x70>)
 8004be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bea:	bf00      	nop
 8004bec:	08004bfd 	.word	0x08004bfd
 8004bf0:	08004c03 	.word	0x08004c03
 8004bf4:	08004bfd 	.word	0x08004bfd
 8004bf8:	08004c15 	.word	0x08004c15
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	73fb      	strb	r3, [r7, #15]
        break;
 8004c00:	e030      	b.n	8004c64 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d025      	beq.n	8004c5a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004c12:	e022      	b.n	8004c5a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c18:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c1c:	d11f      	bne.n	8004c5e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004c22:	e01c      	b.n	8004c5e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	d902      	bls.n	8004c32 <DMA_CheckFifoParam+0xb6>
 8004c2c:	2b03      	cmp	r3, #3
 8004c2e:	d003      	beq.n	8004c38 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004c30:	e018      	b.n	8004c64 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	73fb      	strb	r3, [r7, #15]
        break;
 8004c36:	e015      	b.n	8004c64 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d00e      	beq.n	8004c62 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	73fb      	strb	r3, [r7, #15]
    break;
 8004c48:	e00b      	b.n	8004c62 <DMA_CheckFifoParam+0xe6>
        break;
 8004c4a:	bf00      	nop
 8004c4c:	e00a      	b.n	8004c64 <DMA_CheckFifoParam+0xe8>
        break;
 8004c4e:	bf00      	nop
 8004c50:	e008      	b.n	8004c64 <DMA_CheckFifoParam+0xe8>
        break;
 8004c52:	bf00      	nop
 8004c54:	e006      	b.n	8004c64 <DMA_CheckFifoParam+0xe8>
        break;
 8004c56:	bf00      	nop
 8004c58:	e004      	b.n	8004c64 <DMA_CheckFifoParam+0xe8>
        break;
 8004c5a:	bf00      	nop
 8004c5c:	e002      	b.n	8004c64 <DMA_CheckFifoParam+0xe8>
        break;
 8004c5e:	bf00      	nop
 8004c60:	e000      	b.n	8004c64 <DMA_CheckFifoParam+0xe8>
    break;
 8004c62:	bf00      	nop
    }
  }

  return status;
 8004c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3714      	adds	r7, #20
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr
 8004c72:	bf00      	nop

08004c74 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b085      	sub	sp, #20
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a38      	ldr	r2, [pc, #224]	; (8004d68 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d022      	beq.n	8004cd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a36      	ldr	r2, [pc, #216]	; (8004d6c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d01d      	beq.n	8004cd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a35      	ldr	r2, [pc, #212]	; (8004d70 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d018      	beq.n	8004cd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a33      	ldr	r2, [pc, #204]	; (8004d74 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d013      	beq.n	8004cd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a32      	ldr	r2, [pc, #200]	; (8004d78 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d00e      	beq.n	8004cd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a30      	ldr	r2, [pc, #192]	; (8004d7c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d009      	beq.n	8004cd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a2f      	ldr	r2, [pc, #188]	; (8004d80 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d004      	beq.n	8004cd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a2d      	ldr	r2, [pc, #180]	; (8004d84 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d101      	bne.n	8004cd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e000      	b.n	8004cd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d01a      	beq.n	8004d12 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	3b08      	subs	r3, #8
 8004ce4:	4a28      	ldr	r2, [pc, #160]	; (8004d88 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cea:	091b      	lsrs	r3, r3, #4
 8004cec:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	4b26      	ldr	r3, [pc, #152]	; (8004d8c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004cf2:	4413      	add	r3, r2
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a24      	ldr	r2, [pc, #144]	; (8004d90 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004d00:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f003 031f 	and.w	r3, r3, #31
 8004d08:	2201      	movs	r2, #1
 8004d0a:	409a      	lsls	r2, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004d10:	e024      	b.n	8004d5c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	3b10      	subs	r3, #16
 8004d1a:	4a1e      	ldr	r2, [pc, #120]	; (8004d94 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d20:	091b      	lsrs	r3, r3, #4
 8004d22:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	4a1c      	ldr	r2, [pc, #112]	; (8004d98 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d806      	bhi.n	8004d3a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	4a1b      	ldr	r2, [pc, #108]	; (8004d9c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d902      	bls.n	8004d3a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	3308      	adds	r3, #8
 8004d38:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004d3a:	68fa      	ldr	r2, [r7, #12]
 8004d3c:	4b18      	ldr	r3, [pc, #96]	; (8004da0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004d3e:	4413      	add	r3, r2
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	461a      	mov	r2, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a16      	ldr	r2, [pc, #88]	; (8004da4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004d4c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f003 031f 	and.w	r3, r3, #31
 8004d54:	2201      	movs	r2, #1
 8004d56:	409a      	lsls	r2, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004d5c:	bf00      	nop
 8004d5e:	3714      	adds	r7, #20
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr
 8004d68:	58025408 	.word	0x58025408
 8004d6c:	5802541c 	.word	0x5802541c
 8004d70:	58025430 	.word	0x58025430
 8004d74:	58025444 	.word	0x58025444
 8004d78:	58025458 	.word	0x58025458
 8004d7c:	5802546c 	.word	0x5802546c
 8004d80:	58025480 	.word	0x58025480
 8004d84:	58025494 	.word	0x58025494
 8004d88:	cccccccd 	.word	0xcccccccd
 8004d8c:	16009600 	.word	0x16009600
 8004d90:	58025880 	.word	0x58025880
 8004d94:	aaaaaaab 	.word	0xaaaaaaab
 8004d98:	400204b8 	.word	0x400204b8
 8004d9c:	4002040f 	.word	0x4002040f
 8004da0:	10008200 	.word	0x10008200
 8004da4:	40020880 	.word	0x40020880

08004da8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b085      	sub	sp, #20
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d04a      	beq.n	8004e54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2b08      	cmp	r3, #8
 8004dc2:	d847      	bhi.n	8004e54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a25      	ldr	r2, [pc, #148]	; (8004e60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d022      	beq.n	8004e14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a24      	ldr	r2, [pc, #144]	; (8004e64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d01d      	beq.n	8004e14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a22      	ldr	r2, [pc, #136]	; (8004e68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d018      	beq.n	8004e14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a21      	ldr	r2, [pc, #132]	; (8004e6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d013      	beq.n	8004e14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a1f      	ldr	r2, [pc, #124]	; (8004e70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d00e      	beq.n	8004e14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a1e      	ldr	r2, [pc, #120]	; (8004e74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d009      	beq.n	8004e14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a1c      	ldr	r2, [pc, #112]	; (8004e78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d004      	beq.n	8004e14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a1b      	ldr	r2, [pc, #108]	; (8004e7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d101      	bne.n	8004e18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004e14:	2301      	movs	r3, #1
 8004e16:	e000      	b.n	8004e1a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004e18:	2300      	movs	r3, #0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d00a      	beq.n	8004e34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004e1e:	68fa      	ldr	r2, [r7, #12]
 8004e20:	4b17      	ldr	r3, [pc, #92]	; (8004e80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004e22:	4413      	add	r3, r2
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	461a      	mov	r2, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4a15      	ldr	r2, [pc, #84]	; (8004e84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004e30:	671a      	str	r2, [r3, #112]	; 0x70
 8004e32:	e009      	b.n	8004e48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004e34:	68fa      	ldr	r2, [r7, #12]
 8004e36:	4b14      	ldr	r3, [pc, #80]	; (8004e88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004e38:	4413      	add	r3, r2
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a11      	ldr	r2, [pc, #68]	; (8004e8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004e46:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	409a      	lsls	r2, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004e54:	bf00      	nop
 8004e56:	3714      	adds	r7, #20
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr
 8004e60:	58025408 	.word	0x58025408
 8004e64:	5802541c 	.word	0x5802541c
 8004e68:	58025430 	.word	0x58025430
 8004e6c:	58025444 	.word	0x58025444
 8004e70:	58025458 	.word	0x58025458
 8004e74:	5802546c 	.word	0x5802546c
 8004e78:	58025480 	.word	0x58025480
 8004e7c:	58025494 	.word	0x58025494
 8004e80:	1600963f 	.word	0x1600963f
 8004e84:	58025940 	.word	0x58025940
 8004e88:	1000823f 	.word	0x1000823f
 8004e8c:	40020940 	.word	0x40020940

08004e90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b089      	sub	sp, #36	; 0x24
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004e9e:	4b89      	ldr	r3, [pc, #548]	; (80050c4 <HAL_GPIO_Init+0x234>)
 8004ea0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004ea2:	e194      	b.n	80051ce <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	2101      	movs	r1, #1
 8004eaa:	69fb      	ldr	r3, [r7, #28]
 8004eac:	fa01 f303 	lsl.w	r3, r1, r3
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	f000 8186 	beq.w	80051c8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d00b      	beq.n	8004edc <HAL_GPIO_Init+0x4c>
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	d007      	beq.n	8004edc <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004ed0:	2b11      	cmp	r3, #17
 8004ed2:	d003      	beq.n	8004edc <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	2b12      	cmp	r3, #18
 8004eda:	d130      	bne.n	8004f3e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	005b      	lsls	r3, r3, #1
 8004ee6:	2203      	movs	r2, #3
 8004ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8004eec:	43db      	mvns	r3, r3
 8004eee:	69ba      	ldr	r2, [r7, #24]
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	68da      	ldr	r2, [r3, #12]
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	005b      	lsls	r3, r3, #1
 8004efc:	fa02 f303 	lsl.w	r3, r2, r3
 8004f00:	69ba      	ldr	r2, [r7, #24]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	69ba      	ldr	r2, [r7, #24]
 8004f0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004f12:	2201      	movs	r2, #1
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	fa02 f303 	lsl.w	r3, r2, r3
 8004f1a:	43db      	mvns	r3, r3
 8004f1c:	69ba      	ldr	r2, [r7, #24]
 8004f1e:	4013      	ands	r3, r2
 8004f20:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	091b      	lsrs	r3, r3, #4
 8004f28:	f003 0201 	and.w	r2, r3, #1
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f32:	69ba      	ldr	r2, [r7, #24]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	69ba      	ldr	r2, [r7, #24]
 8004f3c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	005b      	lsls	r3, r3, #1
 8004f48:	2203      	movs	r2, #3
 8004f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f4e:	43db      	mvns	r3, r3
 8004f50:	69ba      	ldr	r2, [r7, #24]
 8004f52:	4013      	ands	r3, r2
 8004f54:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	689a      	ldr	r2, [r3, #8]
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	005b      	lsls	r3, r3, #1
 8004f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f62:	69ba      	ldr	r2, [r7, #24]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	69ba      	ldr	r2, [r7, #24]
 8004f6c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	d003      	beq.n	8004f7e <HAL_GPIO_Init+0xee>
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	2b12      	cmp	r3, #18
 8004f7c:	d123      	bne.n	8004fc6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	08da      	lsrs	r2, r3, #3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	3208      	adds	r2, #8
 8004f86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	f003 0307 	and.w	r3, r3, #7
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	220f      	movs	r2, #15
 8004f96:	fa02 f303 	lsl.w	r3, r2, r3
 8004f9a:	43db      	mvns	r3, r3
 8004f9c:	69ba      	ldr	r2, [r7, #24]
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	691a      	ldr	r2, [r3, #16]
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	f003 0307 	and.w	r3, r3, #7
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb2:	69ba      	ldr	r2, [r7, #24]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	08da      	lsrs	r2, r3, #3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	3208      	adds	r2, #8
 8004fc0:	69b9      	ldr	r1, [r7, #24]
 8004fc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	005b      	lsls	r3, r3, #1
 8004fd0:	2203      	movs	r2, #3
 8004fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd6:	43db      	mvns	r3, r3
 8004fd8:	69ba      	ldr	r2, [r7, #24]
 8004fda:	4013      	ands	r3, r2
 8004fdc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	f003 0203 	and.w	r2, r3, #3
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	005b      	lsls	r3, r3, #1
 8004fea:	fa02 f303 	lsl.w	r3, r2, r3
 8004fee:	69ba      	ldr	r2, [r7, #24]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	69ba      	ldr	r2, [r7, #24]
 8004ff8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005002:	2b00      	cmp	r3, #0
 8005004:	f000 80e0 	beq.w	80051c8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005008:	4b2f      	ldr	r3, [pc, #188]	; (80050c8 <HAL_GPIO_Init+0x238>)
 800500a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800500e:	4a2e      	ldr	r2, [pc, #184]	; (80050c8 <HAL_GPIO_Init+0x238>)
 8005010:	f043 0302 	orr.w	r3, r3, #2
 8005014:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005018:	4b2b      	ldr	r3, [pc, #172]	; (80050c8 <HAL_GPIO_Init+0x238>)
 800501a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800501e:	f003 0302 	and.w	r3, r3, #2
 8005022:	60fb      	str	r3, [r7, #12]
 8005024:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005026:	4a29      	ldr	r2, [pc, #164]	; (80050cc <HAL_GPIO_Init+0x23c>)
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	089b      	lsrs	r3, r3, #2
 800502c:	3302      	adds	r3, #2
 800502e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005032:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	f003 0303 	and.w	r3, r3, #3
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	220f      	movs	r2, #15
 800503e:	fa02 f303 	lsl.w	r3, r2, r3
 8005042:	43db      	mvns	r3, r3
 8005044:	69ba      	ldr	r2, [r7, #24]
 8005046:	4013      	ands	r3, r2
 8005048:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a20      	ldr	r2, [pc, #128]	; (80050d0 <HAL_GPIO_Init+0x240>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d052      	beq.n	80050f8 <HAL_GPIO_Init+0x268>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a1f      	ldr	r2, [pc, #124]	; (80050d4 <HAL_GPIO_Init+0x244>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d031      	beq.n	80050be <HAL_GPIO_Init+0x22e>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4a1e      	ldr	r2, [pc, #120]	; (80050d8 <HAL_GPIO_Init+0x248>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d02b      	beq.n	80050ba <HAL_GPIO_Init+0x22a>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4a1d      	ldr	r2, [pc, #116]	; (80050dc <HAL_GPIO_Init+0x24c>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d025      	beq.n	80050b6 <HAL_GPIO_Init+0x226>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4a1c      	ldr	r2, [pc, #112]	; (80050e0 <HAL_GPIO_Init+0x250>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d01f      	beq.n	80050b2 <HAL_GPIO_Init+0x222>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4a1b      	ldr	r2, [pc, #108]	; (80050e4 <HAL_GPIO_Init+0x254>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d019      	beq.n	80050ae <HAL_GPIO_Init+0x21e>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a1a      	ldr	r2, [pc, #104]	; (80050e8 <HAL_GPIO_Init+0x258>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d013      	beq.n	80050aa <HAL_GPIO_Init+0x21a>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4a19      	ldr	r2, [pc, #100]	; (80050ec <HAL_GPIO_Init+0x25c>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d00d      	beq.n	80050a6 <HAL_GPIO_Init+0x216>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4a18      	ldr	r2, [pc, #96]	; (80050f0 <HAL_GPIO_Init+0x260>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d007      	beq.n	80050a2 <HAL_GPIO_Init+0x212>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a17      	ldr	r2, [pc, #92]	; (80050f4 <HAL_GPIO_Init+0x264>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d101      	bne.n	800509e <HAL_GPIO_Init+0x20e>
 800509a:	2309      	movs	r3, #9
 800509c:	e02d      	b.n	80050fa <HAL_GPIO_Init+0x26a>
 800509e:	230a      	movs	r3, #10
 80050a0:	e02b      	b.n	80050fa <HAL_GPIO_Init+0x26a>
 80050a2:	2308      	movs	r3, #8
 80050a4:	e029      	b.n	80050fa <HAL_GPIO_Init+0x26a>
 80050a6:	2307      	movs	r3, #7
 80050a8:	e027      	b.n	80050fa <HAL_GPIO_Init+0x26a>
 80050aa:	2306      	movs	r3, #6
 80050ac:	e025      	b.n	80050fa <HAL_GPIO_Init+0x26a>
 80050ae:	2305      	movs	r3, #5
 80050b0:	e023      	b.n	80050fa <HAL_GPIO_Init+0x26a>
 80050b2:	2304      	movs	r3, #4
 80050b4:	e021      	b.n	80050fa <HAL_GPIO_Init+0x26a>
 80050b6:	2303      	movs	r3, #3
 80050b8:	e01f      	b.n	80050fa <HAL_GPIO_Init+0x26a>
 80050ba:	2302      	movs	r3, #2
 80050bc:	e01d      	b.n	80050fa <HAL_GPIO_Init+0x26a>
 80050be:	2301      	movs	r3, #1
 80050c0:	e01b      	b.n	80050fa <HAL_GPIO_Init+0x26a>
 80050c2:	bf00      	nop
 80050c4:	58000080 	.word	0x58000080
 80050c8:	58024400 	.word	0x58024400
 80050cc:	58000400 	.word	0x58000400
 80050d0:	58020000 	.word	0x58020000
 80050d4:	58020400 	.word	0x58020400
 80050d8:	58020800 	.word	0x58020800
 80050dc:	58020c00 	.word	0x58020c00
 80050e0:	58021000 	.word	0x58021000
 80050e4:	58021400 	.word	0x58021400
 80050e8:	58021800 	.word	0x58021800
 80050ec:	58021c00 	.word	0x58021c00
 80050f0:	58022000 	.word	0x58022000
 80050f4:	58022400 	.word	0x58022400
 80050f8:	2300      	movs	r3, #0
 80050fa:	69fa      	ldr	r2, [r7, #28]
 80050fc:	f002 0203 	and.w	r2, r2, #3
 8005100:	0092      	lsls	r2, r2, #2
 8005102:	4093      	lsls	r3, r2
 8005104:	69ba      	ldr	r2, [r7, #24]
 8005106:	4313      	orrs	r3, r2
 8005108:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800510a:	4938      	ldr	r1, [pc, #224]	; (80051ec <HAL_GPIO_Init+0x35c>)
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	089b      	lsrs	r3, r3, #2
 8005110:	3302      	adds	r3, #2
 8005112:	69ba      	ldr	r2, [r7, #24]
 8005114:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	43db      	mvns	r3, r3
 8005122:	69ba      	ldr	r2, [r7, #24]
 8005124:	4013      	ands	r3, r2
 8005126:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005130:	2b00      	cmp	r3, #0
 8005132:	d003      	beq.n	800513c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005134:	69ba      	ldr	r2, [r7, #24]
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	4313      	orrs	r3, r2
 800513a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	69ba      	ldr	r2, [r7, #24]
 8005140:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	43db      	mvns	r3, r3
 800514c:	69ba      	ldr	r2, [r7, #24]
 800514e:	4013      	ands	r3, r2
 8005150:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d003      	beq.n	8005166 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800515e:	69ba      	ldr	r2, [r7, #24]
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	4313      	orrs	r3, r2
 8005164:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	69ba      	ldr	r2, [r7, #24]
 800516a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800516c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	43db      	mvns	r3, r3
 8005178:	69ba      	ldr	r2, [r7, #24]
 800517a:	4013      	ands	r3, r2
 800517c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005186:	2b00      	cmp	r3, #0
 8005188:	d003      	beq.n	8005192 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800518a:	69ba      	ldr	r2, [r7, #24]
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	4313      	orrs	r3, r2
 8005190:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005192:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005196:	69bb      	ldr	r3, [r7, #24]
 8005198:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800519a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	43db      	mvns	r3, r3
 80051a6:	69ba      	ldr	r2, [r7, #24]
 80051a8:	4013      	ands	r3, r2
 80051aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d003      	beq.n	80051c0 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80051b8:	69ba      	ldr	r2, [r7, #24]
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	4313      	orrs	r3, r2
 80051be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80051c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	3301      	adds	r3, #1
 80051cc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	fa22 f303 	lsr.w	r3, r2, r3
 80051d8:	2b00      	cmp	r3, #0
 80051da:	f47f ae63 	bne.w	8004ea4 <HAL_GPIO_Init+0x14>
  }
}
 80051de:	bf00      	nop
 80051e0:	bf00      	nop
 80051e2:	3724      	adds	r7, #36	; 0x24
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr
 80051ec:	58000400 	.word	0x58000400

080051f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	460b      	mov	r3, r1
 80051fa:	807b      	strh	r3, [r7, #2]
 80051fc:	4613      	mov	r3, r2
 80051fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005200:	787b      	ldrb	r3, [r7, #1]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d003      	beq.n	800520e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005206:	887a      	ldrh	r2, [r7, #2]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800520c:	e003      	b.n	8005216 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800520e:	887b      	ldrh	r3, [r7, #2]
 8005210:	041a      	lsls	r2, r3, #16
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	619a      	str	r2, [r3, #24]
}
 8005216:	bf00      	nop
 8005218:	370c      	adds	r7, #12
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
	...

08005224 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8005224:	b480      	push	{r7}
 8005226:	b083      	sub	sp, #12
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800522c:	4a08      	ldr	r2, [pc, #32]	; (8005250 <HAL_HSEM_FastTake+0x2c>)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	3320      	adds	r3, #32
 8005232:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005236:	4a07      	ldr	r2, [pc, #28]	; (8005254 <HAL_HSEM_FastTake+0x30>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d101      	bne.n	8005240 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800523c:	2300      	movs	r3, #0
 800523e:	e000      	b.n	8005242 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8005240:	2301      	movs	r3, #1
}
 8005242:	4618      	mov	r0, r3
 8005244:	370c      	adds	r7, #12
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr
 800524e:	bf00      	nop
 8005250:	58026400 	.word	0x58026400
 8005254:	80000300 	.word	0x80000300

08005258 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8005262:	4906      	ldr	r1, [pc, #24]	; (800527c <HAL_HSEM_Release+0x24>)
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8005270:	bf00      	nop
 8005272:	370c      	adds	r7, #12
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr
 800527c:	58026400 	.word	0x58026400

08005280 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8005280:	b480      	push	{r7}
 8005282:	b083      	sub	sp, #12
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8005288:	4b05      	ldr	r3, [pc, #20]	; (80052a0 <HAL_HSEM_ActivateNotification+0x20>)
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	4904      	ldr	r1, [pc, #16]	; (80052a0 <HAL_HSEM_ActivateNotification+0x20>)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4313      	orrs	r3, r2
 8005292:	600b      	str	r3, [r1, #0]
#endif
}
 8005294:	bf00      	nop
 8005296:	370c      	adds	r7, #12
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr
 80052a0:	58026500 	.word	0x58026500

080052a4 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80052aa:	4b0a      	ldr	r3, [pc, #40]	; (80052d4 <HAL_HSEM_IRQHandler+0x30>)
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80052b0:	4b08      	ldr	r3, [pc, #32]	; (80052d4 <HAL_HSEM_IRQHandler+0x30>)
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	43db      	mvns	r3, r3
 80052b8:	4906      	ldr	r1, [pc, #24]	; (80052d4 <HAL_HSEM_IRQHandler+0x30>)
 80052ba:	4013      	ands	r3, r2
 80052bc:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80052be:	4a05      	ldr	r2, [pc, #20]	; (80052d4 <HAL_HSEM_IRQHandler+0x30>)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f7fb ff99 	bl	80011fc <HAL_HSEM_FreeCallback>
}
 80052ca:	bf00      	nop
 80052cc:	3708      	adds	r7, #8
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	58026500 	.word	0x58026500

080052d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b082      	sub	sp, #8
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d101      	bne.n	80052ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e07f      	b.n	80053ea <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d106      	bne.n	8005304 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f7fb fbb6 	bl	8000a70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2224      	movs	r2, #36	; 0x24
 8005308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f022 0201 	bic.w	r2, r2, #1
 800531a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	685a      	ldr	r2, [r3, #4]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005328:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	689a      	ldr	r2, [r3, #8]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005338:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	2b01      	cmp	r3, #1
 8005340:	d107      	bne.n	8005352 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	689a      	ldr	r2, [r3, #8]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800534e:	609a      	str	r2, [r3, #8]
 8005350:	e006      	b.n	8005360 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	689a      	ldr	r2, [r3, #8]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800535e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	2b02      	cmp	r3, #2
 8005366:	d104      	bne.n	8005372 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005370:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	6859      	ldr	r1, [r3, #4]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	4b1d      	ldr	r3, [pc, #116]	; (80053f4 <HAL_I2C_Init+0x11c>)
 800537e:	430b      	orrs	r3, r1
 8005380:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	68da      	ldr	r2, [r3, #12]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005390:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	691a      	ldr	r2, [r3, #16]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	695b      	ldr	r3, [r3, #20]
 800539a:	ea42 0103 	orr.w	r1, r2, r3
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	699b      	ldr	r3, [r3, #24]
 80053a2:	021a      	lsls	r2, r3, #8
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	430a      	orrs	r2, r1
 80053aa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	69d9      	ldr	r1, [r3, #28]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6a1a      	ldr	r2, [r3, #32]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	430a      	orrs	r2, r1
 80053ba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f042 0201 	orr.w	r2, r2, #1
 80053ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2220      	movs	r2, #32
 80053d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80053e8:	2300      	movs	r3, #0
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3708      	adds	r7, #8
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	bf00      	nop
 80053f4:	02008000 	.word	0x02008000

080053f8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	699b      	ldr	r3, [r3, #24]
 8005406:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005414:	2b00      	cmp	r3, #0
 8005416:	d005      	beq.n	8005424 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800541c:	68ba      	ldr	r2, [r7, #8]
 800541e:	68f9      	ldr	r1, [r7, #12]
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	4798      	blx	r3
  }
}
 8005424:	bf00      	nop
 8005426:	3710      	adds	r7, #16
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b086      	sub	sp, #24
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	699b      	ldr	r3, [r3, #24]
 800543a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	0a1b      	lsrs	r3, r3, #8
 8005448:	f003 0301 	and.w	r3, r3, #1
 800544c:	2b00      	cmp	r3, #0
 800544e:	d010      	beq.n	8005472 <HAL_I2C_ER_IRQHandler+0x46>
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	09db      	lsrs	r3, r3, #7
 8005454:	f003 0301 	and.w	r3, r3, #1
 8005458:	2b00      	cmp	r3, #0
 800545a:	d00a      	beq.n	8005472 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005460:	f043 0201 	orr.w	r2, r3, #1
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005470:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	0a9b      	lsrs	r3, r3, #10
 8005476:	f003 0301 	and.w	r3, r3, #1
 800547a:	2b00      	cmp	r3, #0
 800547c:	d010      	beq.n	80054a0 <HAL_I2C_ER_IRQHandler+0x74>
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	09db      	lsrs	r3, r3, #7
 8005482:	f003 0301 	and.w	r3, r3, #1
 8005486:	2b00      	cmp	r3, #0
 8005488:	d00a      	beq.n	80054a0 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800548e:	f043 0208 	orr.w	r2, r3, #8
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800549e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	0a5b      	lsrs	r3, r3, #9
 80054a4:	f003 0301 	and.w	r3, r3, #1
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d010      	beq.n	80054ce <HAL_I2C_ER_IRQHandler+0xa2>
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	09db      	lsrs	r3, r3, #7
 80054b0:	f003 0301 	and.w	r3, r3, #1
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d00a      	beq.n	80054ce <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054bc:	f043 0202 	orr.w	r2, r3, #2
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054cc:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054d2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f003 030b 	and.w	r3, r3, #11
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d003      	beq.n	80054e6 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80054de:	68f9      	ldr	r1, [r7, #12]
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f000 fc77 	bl	8005dd4 <I2C_ITError>
  }
}
 80054e6:	bf00      	nop
 80054e8:	3718      	adds	r7, #24
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}

080054ee <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80054ee:	b480      	push	{r7}
 80054f0:	b083      	sub	sp, #12
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80054f6:	bf00      	nop
 80054f8:	370c      	adds	r7, #12
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr

08005502 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005502:	b480      	push	{r7}
 8005504:	b083      	sub	sp, #12
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800550a:	bf00      	nop
 800550c:	370c      	adds	r7, #12
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr

08005516 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005516:	b480      	push	{r7}
 8005518:	b083      	sub	sp, #12
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
 800551e:	460b      	mov	r3, r1
 8005520:	70fb      	strb	r3, [r7, #3]
 8005522:	4613      	mov	r3, r2
 8005524:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005526:	bf00      	nop
 8005528:	370c      	adds	r7, #12
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr

08005532 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005532:	b480      	push	{r7}
 8005534:	b083      	sub	sp, #12
 8005536:	af00      	add	r7, sp, #0
 8005538:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800553a:	bf00      	nop
 800553c:	370c      	adds	r7, #12
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr

08005546 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005546:	b480      	push	{r7}
 8005548:	b083      	sub	sp, #12
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800554e:	bf00      	nop
 8005550:	370c      	adds	r7, #12
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr

0800555a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800555a:	b480      	push	{r7}
 800555c:	b083      	sub	sp, #12
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005562:	bf00      	nop
 8005564:	370c      	adds	r7, #12
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr

0800556e <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800556e:	b580      	push	{r7, lr}
 8005570:	b086      	sub	sp, #24
 8005572:	af00      	add	r7, sp, #0
 8005574:	60f8      	str	r0, [r7, #12]
 8005576:	60b9      	str	r1, [r7, #8]
 8005578:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800557e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800558a:	2b01      	cmp	r3, #1
 800558c:	d101      	bne.n	8005592 <I2C_Slave_ISR_IT+0x24>
 800558e:	2302      	movs	r3, #2
 8005590:	e0ec      	b.n	800576c <I2C_Slave_ISR_IT+0x1fe>
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2201      	movs	r2, #1
 8005596:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	095b      	lsrs	r3, r3, #5
 800559e:	f003 0301 	and.w	r3, r3, #1
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d009      	beq.n	80055ba <I2C_Slave_ISR_IT+0x4c>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	095b      	lsrs	r3, r3, #5
 80055aa:	f003 0301 	and.w	r3, r3, #1
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d003      	beq.n	80055ba <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80055b2:	6939      	ldr	r1, [r7, #16]
 80055b4:	68f8      	ldr	r0, [r7, #12]
 80055b6:	f000 f9bf 	bl	8005938 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	091b      	lsrs	r3, r3, #4
 80055be:	f003 0301 	and.w	r3, r3, #1
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d04d      	beq.n	8005662 <I2C_Slave_ISR_IT+0xf4>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	091b      	lsrs	r3, r3, #4
 80055ca:	f003 0301 	and.w	r3, r3, #1
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d047      	beq.n	8005662 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d128      	bne.n	800562e <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	2b28      	cmp	r3, #40	; 0x28
 80055e6:	d108      	bne.n	80055fa <I2C_Slave_ISR_IT+0x8c>
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80055ee:	d104      	bne.n	80055fa <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80055f0:	6939      	ldr	r1, [r7, #16]
 80055f2:	68f8      	ldr	r0, [r7, #12]
 80055f4:	f000 fb98 	bl	8005d28 <I2C_ITListenCplt>
 80055f8:	e032      	b.n	8005660 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005600:	b2db      	uxtb	r3, r3
 8005602:	2b29      	cmp	r3, #41	; 0x29
 8005604:	d10e      	bne.n	8005624 <I2C_Slave_ISR_IT+0xb6>
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800560c:	d00a      	beq.n	8005624 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	2210      	movs	r2, #16
 8005614:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005616:	68f8      	ldr	r0, [r7, #12]
 8005618:	f000 fcd3 	bl	8005fc2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800561c:	68f8      	ldr	r0, [r7, #12]
 800561e:	f000 f92d 	bl	800587c <I2C_ITSlaveSeqCplt>
 8005622:	e01d      	b.n	8005660 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	2210      	movs	r2, #16
 800562a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800562c:	e096      	b.n	800575c <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2210      	movs	r2, #16
 8005634:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800563a:	f043 0204 	orr.w	r2, r3, #4
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d004      	beq.n	8005652 <I2C_Slave_ISR_IT+0xe4>
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800564e:	f040 8085 	bne.w	800575c <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005656:	4619      	mov	r1, r3
 8005658:	68f8      	ldr	r0, [r7, #12]
 800565a:	f000 fbbb 	bl	8005dd4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800565e:	e07d      	b.n	800575c <I2C_Slave_ISR_IT+0x1ee>
 8005660:	e07c      	b.n	800575c <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	089b      	lsrs	r3, r3, #2
 8005666:	f003 0301 	and.w	r3, r3, #1
 800566a:	2b00      	cmp	r3, #0
 800566c:	d030      	beq.n	80056d0 <I2C_Slave_ISR_IT+0x162>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	089b      	lsrs	r3, r3, #2
 8005672:	f003 0301 	and.w	r3, r3, #1
 8005676:	2b00      	cmp	r3, #0
 8005678:	d02a      	beq.n	80056d0 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800567e:	b29b      	uxth	r3, r3
 8005680:	2b00      	cmp	r3, #0
 8005682:	d018      	beq.n	80056b6 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568e:	b2d2      	uxtb	r2, r2
 8005690:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005696:	1c5a      	adds	r2, r3, #1
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056a0:	3b01      	subs	r3, #1
 80056a2:	b29a      	uxth	r2, r3
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	3b01      	subs	r3, #1
 80056b0:	b29a      	uxth	r2, r3
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d14f      	bne.n	8005760 <I2C_Slave_ISR_IT+0x1f2>
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80056c6:	d04b      	beq.n	8005760 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80056c8:	68f8      	ldr	r0, [r7, #12]
 80056ca:	f000 f8d7 	bl	800587c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80056ce:	e047      	b.n	8005760 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	08db      	lsrs	r3, r3, #3
 80056d4:	f003 0301 	and.w	r3, r3, #1
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d00a      	beq.n	80056f2 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	08db      	lsrs	r3, r3, #3
 80056e0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d004      	beq.n	80056f2 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80056e8:	6939      	ldr	r1, [r7, #16]
 80056ea:	68f8      	ldr	r0, [r7, #12]
 80056ec:	f000 f842 	bl	8005774 <I2C_ITAddrCplt>
 80056f0:	e037      	b.n	8005762 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	085b      	lsrs	r3, r3, #1
 80056f6:	f003 0301 	and.w	r3, r3, #1
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d031      	beq.n	8005762 <I2C_Slave_ISR_IT+0x1f4>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	085b      	lsrs	r3, r3, #1
 8005702:	f003 0301 	and.w	r3, r3, #1
 8005706:	2b00      	cmp	r3, #0
 8005708:	d02b      	beq.n	8005762 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800570e:	b29b      	uxth	r3, r3
 8005710:	2b00      	cmp	r3, #0
 8005712:	d018      	beq.n	8005746 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005718:	781a      	ldrb	r2, [r3, #0]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005724:	1c5a      	adds	r2, r3, #1
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800572e:	b29b      	uxth	r3, r3
 8005730:	3b01      	subs	r3, #1
 8005732:	b29a      	uxth	r2, r3
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800573c:	3b01      	subs	r3, #1
 800573e:	b29a      	uxth	r2, r3
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	851a      	strh	r2, [r3, #40]	; 0x28
 8005744:	e00d      	b.n	8005762 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800574c:	d002      	beq.n	8005754 <I2C_Slave_ISR_IT+0x1e6>
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d106      	bne.n	8005762 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005754:	68f8      	ldr	r0, [r7, #12]
 8005756:	f000 f891 	bl	800587c <I2C_ITSlaveSeqCplt>
 800575a:	e002      	b.n	8005762 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800575c:	bf00      	nop
 800575e:	e000      	b.n	8005762 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8005760:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2200      	movs	r2, #0
 8005766:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800576a:	2300      	movs	r3, #0
}
 800576c:	4618      	mov	r0, r3
 800576e:	3718      	adds	r7, #24
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}

08005774 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b084      	sub	sp, #16
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005784:	b2db      	uxtb	r3, r3
 8005786:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800578a:	2b28      	cmp	r3, #40	; 0x28
 800578c:	d16a      	bne.n	8005864 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	699b      	ldr	r3, [r3, #24]
 8005794:	0c1b      	lsrs	r3, r3, #16
 8005796:	b2db      	uxtb	r3, r3
 8005798:	f003 0301 	and.w	r3, r3, #1
 800579c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	699b      	ldr	r3, [r3, #24]
 80057a4:	0c1b      	lsrs	r3, r3, #16
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80057ac:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057ba:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80057c8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	2b02      	cmp	r3, #2
 80057d0:	d138      	bne.n	8005844 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 80057d2:	897b      	ldrh	r3, [r7, #10]
 80057d4:	09db      	lsrs	r3, r3, #7
 80057d6:	b29a      	uxth	r2, r3
 80057d8:	89bb      	ldrh	r3, [r7, #12]
 80057da:	4053      	eors	r3, r2
 80057dc:	b29b      	uxth	r3, r3
 80057de:	f003 0306 	and.w	r3, r3, #6
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d11c      	bne.n	8005820 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80057e6:	897b      	ldrh	r3, [r7, #10]
 80057e8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057ee:	1c5a      	adds	r2, r3, #1
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057f8:	2b02      	cmp	r3, #2
 80057fa:	d13b      	bne.n	8005874 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	2208      	movs	r2, #8
 8005808:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005812:	89ba      	ldrh	r2, [r7, #12]
 8005814:	7bfb      	ldrb	r3, [r7, #15]
 8005816:	4619      	mov	r1, r3
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f7ff fe7c 	bl	8005516 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800581e:	e029      	b.n	8005874 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8005820:	893b      	ldrh	r3, [r7, #8]
 8005822:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005824:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f000 fc0c 	bl	8006046 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005836:	89ba      	ldrh	r2, [r7, #12]
 8005838:	7bfb      	ldrb	r3, [r7, #15]
 800583a:	4619      	mov	r1, r3
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f7ff fe6a 	bl	8005516 <HAL_I2C_AddrCallback>
}
 8005842:	e017      	b.n	8005874 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005844:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f000 fbfc 	bl	8006046 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005856:	89ba      	ldrh	r2, [r7, #12]
 8005858:	7bfb      	ldrb	r3, [r7, #15]
 800585a:	4619      	mov	r1, r3
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f7ff fe5a 	bl	8005516 <HAL_I2C_AddrCallback>
}
 8005862:	e007      	b.n	8005874 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	2208      	movs	r2, #8
 800586a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8005874:	bf00      	nop
 8005876:	3710      	adds	r7, #16
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}

0800587c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b084      	sub	sp, #16
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	0b9b      	lsrs	r3, r3, #14
 8005898:	f003 0301 	and.w	r3, r3, #1
 800589c:	2b00      	cmp	r3, #0
 800589e:	d008      	beq.n	80058b2 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80058ae:	601a      	str	r2, [r3, #0]
 80058b0:	e00d      	b.n	80058ce <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	0bdb      	lsrs	r3, r3, #15
 80058b6:	f003 0301 	and.w	r3, r3, #1
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d007      	beq.n	80058ce <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80058cc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	2b29      	cmp	r3, #41	; 0x29
 80058d8:	d112      	bne.n	8005900 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2228      	movs	r2, #40	; 0x28
 80058de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2221      	movs	r2, #33	; 0x21
 80058e6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80058e8:	2101      	movs	r1, #1
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 fbab 	bl	8006046 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f7ff fdf8 	bl	80054ee <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80058fe:	e017      	b.n	8005930 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005906:	b2db      	uxtb	r3, r3
 8005908:	2b2a      	cmp	r3, #42	; 0x2a
 800590a:	d111      	bne.n	8005930 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2228      	movs	r2, #40	; 0x28
 8005910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2222      	movs	r2, #34	; 0x22
 8005918:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800591a:	2102      	movs	r1, #2
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f000 fb92 	bl	8006046 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f7ff fde9 	bl	8005502 <HAL_I2C_SlaveRxCpltCallback>
}
 8005930:	bf00      	nop
 8005932:	3710      	adds	r7, #16
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}

08005938 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b086      	sub	sp, #24
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005954:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	2220      	movs	r2, #32
 800595c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800595e:	7bfb      	ldrb	r3, [r7, #15]
 8005960:	2b21      	cmp	r3, #33	; 0x21
 8005962:	d002      	beq.n	800596a <I2C_ITSlaveCplt+0x32>
 8005964:	7bfb      	ldrb	r3, [r7, #15]
 8005966:	2b29      	cmp	r3, #41	; 0x29
 8005968:	d108      	bne.n	800597c <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800596a:	f248 0101 	movw	r1, #32769	; 0x8001
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 fb69 	bl	8006046 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2221      	movs	r2, #33	; 0x21
 8005978:	631a      	str	r2, [r3, #48]	; 0x30
 800597a:	e00d      	b.n	8005998 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800597c:	7bfb      	ldrb	r3, [r7, #15]
 800597e:	2b22      	cmp	r3, #34	; 0x22
 8005980:	d002      	beq.n	8005988 <I2C_ITSlaveCplt+0x50>
 8005982:	7bfb      	ldrb	r3, [r7, #15]
 8005984:	2b2a      	cmp	r3, #42	; 0x2a
 8005986:	d107      	bne.n	8005998 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005988:	f248 0102 	movw	r1, #32770	; 0x8002
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f000 fb5a 	bl	8006046 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2222      	movs	r2, #34	; 0x22
 8005996:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	685a      	ldr	r2, [r3, #4]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80059a6:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	6859      	ldr	r1, [r3, #4]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	4b80      	ldr	r3, [pc, #512]	; (8005bb4 <I2C_ITSlaveCplt+0x27c>)
 80059b4:	400b      	ands	r3, r1
 80059b6:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f000 fb02 	bl	8005fc2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	0b9b      	lsrs	r3, r3, #14
 80059c2:	f003 0301 	and.w	r3, r3, #1
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d07a      	beq.n	8005ac0 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80059d8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059de:	2b00      	cmp	r3, #0
 80059e0:	f000 8111 	beq.w	8005c06 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a73      	ldr	r2, [pc, #460]	; (8005bb8 <I2C_ITSlaveCplt+0x280>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d059      	beq.n	8005aa4 <I2C_ITSlaveCplt+0x16c>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a71      	ldr	r2, [pc, #452]	; (8005bbc <I2C_ITSlaveCplt+0x284>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d053      	beq.n	8005aa4 <I2C_ITSlaveCplt+0x16c>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a6f      	ldr	r2, [pc, #444]	; (8005bc0 <I2C_ITSlaveCplt+0x288>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d04d      	beq.n	8005aa4 <I2C_ITSlaveCplt+0x16c>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a6d      	ldr	r2, [pc, #436]	; (8005bc4 <I2C_ITSlaveCplt+0x28c>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d047      	beq.n	8005aa4 <I2C_ITSlaveCplt+0x16c>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a6b      	ldr	r2, [pc, #428]	; (8005bc8 <I2C_ITSlaveCplt+0x290>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d041      	beq.n	8005aa4 <I2C_ITSlaveCplt+0x16c>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a69      	ldr	r2, [pc, #420]	; (8005bcc <I2C_ITSlaveCplt+0x294>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d03b      	beq.n	8005aa4 <I2C_ITSlaveCplt+0x16c>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a67      	ldr	r2, [pc, #412]	; (8005bd0 <I2C_ITSlaveCplt+0x298>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d035      	beq.n	8005aa4 <I2C_ITSlaveCplt+0x16c>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a65      	ldr	r2, [pc, #404]	; (8005bd4 <I2C_ITSlaveCplt+0x29c>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d02f      	beq.n	8005aa4 <I2C_ITSlaveCplt+0x16c>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a63      	ldr	r2, [pc, #396]	; (8005bd8 <I2C_ITSlaveCplt+0x2a0>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d029      	beq.n	8005aa4 <I2C_ITSlaveCplt+0x16c>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a61      	ldr	r2, [pc, #388]	; (8005bdc <I2C_ITSlaveCplt+0x2a4>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d023      	beq.n	8005aa4 <I2C_ITSlaveCplt+0x16c>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a5f      	ldr	r2, [pc, #380]	; (8005be0 <I2C_ITSlaveCplt+0x2a8>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d01d      	beq.n	8005aa4 <I2C_ITSlaveCplt+0x16c>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a5d      	ldr	r2, [pc, #372]	; (8005be4 <I2C_ITSlaveCplt+0x2ac>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d017      	beq.n	8005aa4 <I2C_ITSlaveCplt+0x16c>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a5b      	ldr	r2, [pc, #364]	; (8005be8 <I2C_ITSlaveCplt+0x2b0>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d011      	beq.n	8005aa4 <I2C_ITSlaveCplt+0x16c>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a59      	ldr	r2, [pc, #356]	; (8005bec <I2C_ITSlaveCplt+0x2b4>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d00b      	beq.n	8005aa4 <I2C_ITSlaveCplt+0x16c>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a57      	ldr	r2, [pc, #348]	; (8005bf0 <I2C_ITSlaveCplt+0x2b8>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d005      	beq.n	8005aa4 <I2C_ITSlaveCplt+0x16c>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a55      	ldr	r2, [pc, #340]	; (8005bf4 <I2C_ITSlaveCplt+0x2bc>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d105      	bne.n	8005ab0 <I2C_ITSlaveCplt+0x178>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	e004      	b.n	8005aba <I2C_ITSlaveCplt+0x182>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	8553      	strh	r3, [r2, #42]	; 0x2a
 8005abe:	e0a2      	b.n	8005c06 <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	0bdb      	lsrs	r3, r3, #15
 8005ac4:	f003 0301 	and.w	r3, r3, #1
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	f000 809c 	beq.w	8005c06 <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005adc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	f000 808f 	beq.w	8005c06 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a32      	ldr	r2, [pc, #200]	; (8005bb8 <I2C_ITSlaveCplt+0x280>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d059      	beq.n	8005ba8 <I2C_ITSlaveCplt+0x270>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a30      	ldr	r2, [pc, #192]	; (8005bbc <I2C_ITSlaveCplt+0x284>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d053      	beq.n	8005ba8 <I2C_ITSlaveCplt+0x270>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a2e      	ldr	r2, [pc, #184]	; (8005bc0 <I2C_ITSlaveCplt+0x288>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d04d      	beq.n	8005ba8 <I2C_ITSlaveCplt+0x270>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a2c      	ldr	r2, [pc, #176]	; (8005bc4 <I2C_ITSlaveCplt+0x28c>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d047      	beq.n	8005ba8 <I2C_ITSlaveCplt+0x270>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a2a      	ldr	r2, [pc, #168]	; (8005bc8 <I2C_ITSlaveCplt+0x290>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d041      	beq.n	8005ba8 <I2C_ITSlaveCplt+0x270>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a28      	ldr	r2, [pc, #160]	; (8005bcc <I2C_ITSlaveCplt+0x294>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d03b      	beq.n	8005ba8 <I2C_ITSlaveCplt+0x270>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a26      	ldr	r2, [pc, #152]	; (8005bd0 <I2C_ITSlaveCplt+0x298>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d035      	beq.n	8005ba8 <I2C_ITSlaveCplt+0x270>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a24      	ldr	r2, [pc, #144]	; (8005bd4 <I2C_ITSlaveCplt+0x29c>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d02f      	beq.n	8005ba8 <I2C_ITSlaveCplt+0x270>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a22      	ldr	r2, [pc, #136]	; (8005bd8 <I2C_ITSlaveCplt+0x2a0>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d029      	beq.n	8005ba8 <I2C_ITSlaveCplt+0x270>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a20      	ldr	r2, [pc, #128]	; (8005bdc <I2C_ITSlaveCplt+0x2a4>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d023      	beq.n	8005ba8 <I2C_ITSlaveCplt+0x270>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a1e      	ldr	r2, [pc, #120]	; (8005be0 <I2C_ITSlaveCplt+0x2a8>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d01d      	beq.n	8005ba8 <I2C_ITSlaveCplt+0x270>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a1c      	ldr	r2, [pc, #112]	; (8005be4 <I2C_ITSlaveCplt+0x2ac>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d017      	beq.n	8005ba8 <I2C_ITSlaveCplt+0x270>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a1a      	ldr	r2, [pc, #104]	; (8005be8 <I2C_ITSlaveCplt+0x2b0>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d011      	beq.n	8005ba8 <I2C_ITSlaveCplt+0x270>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a18      	ldr	r2, [pc, #96]	; (8005bec <I2C_ITSlaveCplt+0x2b4>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d00b      	beq.n	8005ba8 <I2C_ITSlaveCplt+0x270>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a16      	ldr	r2, [pc, #88]	; (8005bf0 <I2C_ITSlaveCplt+0x2b8>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d005      	beq.n	8005ba8 <I2C_ITSlaveCplt+0x270>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a14      	ldr	r2, [pc, #80]	; (8005bf4 <I2C_ITSlaveCplt+0x2bc>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d127      	bne.n	8005bf8 <I2C_ITSlaveCplt+0x2c0>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	e026      	b.n	8005c02 <I2C_ITSlaveCplt+0x2ca>
 8005bb4:	fe00e800 	.word	0xfe00e800
 8005bb8:	40020010 	.word	0x40020010
 8005bbc:	40020028 	.word	0x40020028
 8005bc0:	40020040 	.word	0x40020040
 8005bc4:	40020058 	.word	0x40020058
 8005bc8:	40020070 	.word	0x40020070
 8005bcc:	40020088 	.word	0x40020088
 8005bd0:	400200a0 	.word	0x400200a0
 8005bd4:	400200b8 	.word	0x400200b8
 8005bd8:	40020410 	.word	0x40020410
 8005bdc:	40020428 	.word	0x40020428
 8005be0:	40020440 	.word	0x40020440
 8005be4:	40020458 	.word	0x40020458
 8005be8:	40020470 	.word	0x40020470
 8005bec:	40020488 	.word	0x40020488
 8005bf0:	400204a0 	.word	0x400204a0
 8005bf4:	400204b8 	.word	0x400204b8
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	089b      	lsrs	r3, r3, #2
 8005c0a:	f003 0301 	and.w	r3, r3, #1
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d020      	beq.n	8005c54 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	f023 0304 	bic.w	r3, r3, #4
 8005c18:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c24:	b2d2      	uxtb	r2, r2
 8005c26:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2c:	1c5a      	adds	r2, r3, #1
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d00c      	beq.n	8005c54 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c3e:	3b01      	subs	r3, #1
 8005c40:	b29a      	uxth	r2, r3
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	3b01      	subs	r3, #1
 8005c4e:	b29a      	uxth	r2, r3
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d005      	beq.n	8005c6a <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c62:	f043 0204 	orr.w	r2, r3, #4
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d010      	beq.n	8005ca2 <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c84:	4619      	mov	r1, r3
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f000 f8a4 	bl	8005dd4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	2b28      	cmp	r3, #40	; 0x28
 8005c96:	d141      	bne.n	8005d1c <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8005c98:	6979      	ldr	r1, [r7, #20]
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 f844 	bl	8005d28 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005ca0:	e03c      	b.n	8005d1c <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005caa:	d014      	beq.n	8005cd6 <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f7ff fde5 	bl	800587c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a1b      	ldr	r2, [pc, #108]	; (8005d24 <I2C_ITSlaveCplt+0x3ec>)
 8005cb6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2220      	movs	r2, #32
 8005cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f7ff fc2f 	bl	8005532 <HAL_I2C_ListenCpltCallback>
}
 8005cd4:	e022      	b.n	8005d1c <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	2b22      	cmp	r3, #34	; 0x22
 8005ce0:	d10e      	bne.n	8005d00 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2220      	movs	r2, #32
 8005ce6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f7ff fc02 	bl	8005502 <HAL_I2C_SlaveRxCpltCallback>
}
 8005cfe:	e00d      	b.n	8005d1c <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2220      	movs	r2, #32
 8005d04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f7ff fbe9 	bl	80054ee <HAL_I2C_SlaveTxCpltCallback>
}
 8005d1c:	bf00      	nop
 8005d1e:	3718      	adds	r7, #24
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}
 8005d24:	ffff0000 	.word	0xffff0000

08005d28 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b082      	sub	sp, #8
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a26      	ldr	r2, [pc, #152]	; (8005dd0 <I2C_ITListenCplt+0xa8>)
 8005d36:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2220      	movs	r2, #32
 8005d42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	089b      	lsrs	r3, r3, #2
 8005d58:	f003 0301 	and.w	r3, r3, #1
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d022      	beq.n	8005da6 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6a:	b2d2      	uxtb	r2, r2
 8005d6c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d72:	1c5a      	adds	r2, r3, #1
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d012      	beq.n	8005da6 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d84:	3b01      	subs	r3, #1
 8005d86:	b29a      	uxth	r2, r3
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	3b01      	subs	r3, #1
 8005d94:	b29a      	uxth	r2, r3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d9e:	f043 0204 	orr.w	r2, r3, #4
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005da6:	f248 0103 	movw	r1, #32771	; 0x8003
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 f94b 	bl	8006046 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2210      	movs	r2, #16
 8005db6:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f7ff fbb6 	bl	8005532 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005dc6:	bf00      	nop
 8005dc8:	3708      	adds	r7, #8
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	ffff0000 	.word	0xffff0000

08005dd4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005de4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	4a5d      	ldr	r2, [pc, #372]	; (8005f68 <I2C_ITError+0x194>)
 8005df2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	431a      	orrs	r2, r3
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8005e06:	7bfb      	ldrb	r3, [r7, #15]
 8005e08:	2b28      	cmp	r3, #40	; 0x28
 8005e0a:	d005      	beq.n	8005e18 <I2C_ITError+0x44>
 8005e0c:	7bfb      	ldrb	r3, [r7, #15]
 8005e0e:	2b29      	cmp	r3, #41	; 0x29
 8005e10:	d002      	beq.n	8005e18 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8005e12:	7bfb      	ldrb	r3, [r7, #15]
 8005e14:	2b2a      	cmp	r3, #42	; 0x2a
 8005e16:	d10b      	bne.n	8005e30 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005e18:	2103      	movs	r1, #3
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f000 f913 	bl	8006046 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2228      	movs	r2, #40	; 0x28
 8005e24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	4a50      	ldr	r2, [pc, #320]	; (8005f6c <I2C_ITError+0x198>)
 8005e2c:	635a      	str	r2, [r3, #52]	; 0x34
 8005e2e:	e011      	b.n	8005e54 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005e30:	f248 0103 	movw	r1, #32771	; 0x8003
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f000 f906 	bl	8006046 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	2b60      	cmp	r3, #96	; 0x60
 8005e44:	d003      	beq.n	8005e4e <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2220      	movs	r2, #32
 8005e4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2200      	movs	r2, #0
 8005e52:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e58:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d039      	beq.n	8005ed6 <I2C_ITError+0x102>
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	2b11      	cmp	r3, #17
 8005e66:	d002      	beq.n	8005e6e <I2C_ITError+0x9a>
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	2b21      	cmp	r3, #33	; 0x21
 8005e6c:	d133      	bne.n	8005ed6 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e7c:	d107      	bne.n	8005e8e <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005e8c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e92:	4618      	mov	r0, r3
 8005e94:	f7fe fbfa 	bl	800468c <HAL_DMA_GetState>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d017      	beq.n	8005ece <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea2:	4a33      	ldr	r2, [pc, #204]	; (8005f70 <I2C_ITError+0x19c>)
 8005ea4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f7fd fa7a 	bl	80033ac <HAL_DMA_Abort_IT>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d04d      	beq.n	8005f5a <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005ec8:	4610      	mov	r0, r2
 8005eca:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005ecc:	e045      	b.n	8005f5a <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f000 f850 	bl	8005f74 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005ed4:	e041      	b.n	8005f5a <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d039      	beq.n	8005f52 <I2C_ITError+0x17e>
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	2b12      	cmp	r3, #18
 8005ee2:	d002      	beq.n	8005eea <I2C_ITError+0x116>
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	2b22      	cmp	r3, #34	; 0x22
 8005ee8:	d133      	bne.n	8005f52 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ef4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ef8:	d107      	bne.n	8005f0a <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005f08:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f7fe fbbc 	bl	800468c <HAL_DMA_GetState>
 8005f14:	4603      	mov	r3, r0
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d017      	beq.n	8005f4a <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f1e:	4a14      	ldr	r2, [pc, #80]	; (8005f70 <I2C_ITError+0x19c>)
 8005f20:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f7fd fa3c 	bl	80033ac <HAL_DMA_Abort_IT>
 8005f34:	4603      	mov	r3, r0
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d011      	beq.n	8005f5e <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005f44:	4610      	mov	r0, r2
 8005f46:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005f48:	e009      	b.n	8005f5e <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 f812 	bl	8005f74 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005f50:	e005      	b.n	8005f5e <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 f80e 	bl	8005f74 <I2C_TreatErrorCallback>
  }
}
 8005f58:	e002      	b.n	8005f60 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005f5a:	bf00      	nop
 8005f5c:	e000      	b.n	8005f60 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005f5e:	bf00      	nop
}
 8005f60:	bf00      	nop
 8005f62:	3710      	adds	r7, #16
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	ffff0000 	.word	0xffff0000
 8005f6c:	0800556f 	.word	0x0800556f
 8005f70:	0800600b 	.word	0x0800600b

08005f74 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b082      	sub	sp, #8
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	2b60      	cmp	r3, #96	; 0x60
 8005f86:	d10e      	bne.n	8005fa6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2220      	movs	r2, #32
 8005f8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2200      	movs	r2, #0
 8005f94:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f7ff fadb 	bl	800555a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005fa4:	e009      	b.n	8005fba <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f7ff fac6 	bl	8005546 <HAL_I2C_ErrorCallback>
}
 8005fba:	bf00      	nop
 8005fbc:	3708      	adds	r7, #8
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}

08005fc2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005fc2:	b480      	push	{r7}
 8005fc4:	b083      	sub	sp, #12
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	699b      	ldr	r3, [r3, #24]
 8005fd0:	f003 0302 	and.w	r3, r3, #2
 8005fd4:	2b02      	cmp	r3, #2
 8005fd6:	d103      	bne.n	8005fe0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	699b      	ldr	r3, [r3, #24]
 8005fe6:	f003 0301 	and.w	r3, r3, #1
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d007      	beq.n	8005ffe <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	699a      	ldr	r2, [r3, #24]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f042 0201 	orr.w	r2, r2, #1
 8005ffc:	619a      	str	r2, [r3, #24]
  }
}
 8005ffe:	bf00      	nop
 8006000:	370c      	adds	r7, #12
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr

0800600a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800600a:	b580      	push	{r7, lr}
 800600c:	b084      	sub	sp, #16
 800600e:	af00      	add	r7, sp, #0
 8006010:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006016:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800601c:	2b00      	cmp	r3, #0
 800601e:	d003      	beq.n	8006028 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006024:	2200      	movs	r2, #0
 8006026:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800602c:	2b00      	cmp	r3, #0
 800602e:	d003      	beq.n	8006038 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006034:	2200      	movs	r2, #0
 8006036:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8006038:	68f8      	ldr	r0, [r7, #12]
 800603a:	f7ff ff9b 	bl	8005f74 <I2C_TreatErrorCallback>
}
 800603e:	bf00      	nop
 8006040:	3710      	adds	r7, #16
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}

08006046 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006046:	b480      	push	{r7}
 8006048:	b085      	sub	sp, #20
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
 800604e:	460b      	mov	r3, r1
 8006050:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006052:	2300      	movs	r3, #0
 8006054:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006056:	887b      	ldrh	r3, [r7, #2]
 8006058:	f003 0301 	and.w	r3, r3, #1
 800605c:	2b00      	cmp	r3, #0
 800605e:	d00f      	beq.n	8006080 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8006066:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800606e:	b2db      	uxtb	r3, r3
 8006070:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006074:	2b28      	cmp	r3, #40	; 0x28
 8006076:	d003      	beq.n	8006080 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800607e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006080:	887b      	ldrh	r3, [r7, #2]
 8006082:	f003 0302 	and.w	r3, r3, #2
 8006086:	2b00      	cmp	r3, #0
 8006088:	d00f      	beq.n	80060aa <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8006090:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006098:	b2db      	uxtb	r3, r3
 800609a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800609e:	2b28      	cmp	r3, #40	; 0x28
 80060a0:	d003      	beq.n	80060aa <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80060a8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80060aa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	da03      	bge.n	80060ba <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80060b8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80060ba:	887b      	ldrh	r3, [r7, #2]
 80060bc:	2b10      	cmp	r3, #16
 80060be:	d103      	bne.n	80060c8 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80060c6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80060c8:	887b      	ldrh	r3, [r7, #2]
 80060ca:	2b20      	cmp	r3, #32
 80060cc:	d103      	bne.n	80060d6 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	f043 0320 	orr.w	r3, r3, #32
 80060d4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80060d6:	887b      	ldrh	r3, [r7, #2]
 80060d8:	2b40      	cmp	r3, #64	; 0x40
 80060da:	d103      	bne.n	80060e4 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060e2:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	6819      	ldr	r1, [r3, #0]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	43da      	mvns	r2, r3
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	400a      	ands	r2, r1
 80060f4:	601a      	str	r2, [r3, #0]
}
 80060f6:	bf00      	nop
 80060f8:	3714      	adds	r7, #20
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr

08006102 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006102:	b480      	push	{r7}
 8006104:	b083      	sub	sp, #12
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]
 800610a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006112:	b2db      	uxtb	r3, r3
 8006114:	2b20      	cmp	r3, #32
 8006116:	d138      	bne.n	800618a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800611e:	2b01      	cmp	r3, #1
 8006120:	d101      	bne.n	8006126 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006122:	2302      	movs	r3, #2
 8006124:	e032      	b.n	800618c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2201      	movs	r2, #1
 800612a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2224      	movs	r2, #36	; 0x24
 8006132:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f022 0201 	bic.w	r2, r2, #1
 8006144:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006154:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	6819      	ldr	r1, [r3, #0]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	683a      	ldr	r2, [r7, #0]
 8006162:	430a      	orrs	r2, r1
 8006164:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f042 0201 	orr.w	r2, r2, #1
 8006174:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2220      	movs	r2, #32
 800617a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2200      	movs	r2, #0
 8006182:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006186:	2300      	movs	r3, #0
 8006188:	e000      	b.n	800618c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800618a:	2302      	movs	r3, #2
  }
}
 800618c:	4618      	mov	r0, r3
 800618e:	370c      	adds	r7, #12
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006198:	b480      	push	{r7}
 800619a:	b085      	sub	sp, #20
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	2b20      	cmp	r3, #32
 80061ac:	d139      	bne.n	8006222 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d101      	bne.n	80061bc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80061b8:	2302      	movs	r3, #2
 80061ba:	e033      	b.n	8006224 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2224      	movs	r2, #36	; 0x24
 80061c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f022 0201 	bic.w	r2, r2, #1
 80061da:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80061ea:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	021b      	lsls	r3, r3, #8
 80061f0:	68fa      	ldr	r2, [r7, #12]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	68fa      	ldr	r2, [r7, #12]
 80061fc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f042 0201 	orr.w	r2, r2, #1
 800620c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2220      	movs	r2, #32
 8006212:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2200      	movs	r2, #0
 800621a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800621e:	2300      	movs	r3, #0
 8006220:	e000      	b.n	8006224 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006222:	2302      	movs	r3, #2
  }
}
 8006224:	4618      	mov	r0, r3
 8006226:	3714      	adds	r7, #20
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr

08006230 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006232:	b08f      	sub	sp, #60	; 0x3c
 8006234:	af0a      	add	r7, sp, #40	; 0x28
 8006236:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d101      	bne.n	8006242 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	e116      	b.n	8006470 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800624e:	b2db      	uxtb	r3, r3
 8006250:	2b00      	cmp	r3, #0
 8006252:	d106      	bne.n	8006262 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f00a fa5f 	bl	8010720 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2203      	movs	r2, #3
 8006266:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800626e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006272:	2b00      	cmp	r3, #0
 8006274:	d102      	bne.n	800627c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2200      	movs	r2, #0
 800627a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4618      	mov	r0, r3
 8006282:	f007 f940 	bl	800d506 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	603b      	str	r3, [r7, #0]
 800628c:	687e      	ldr	r6, [r7, #4]
 800628e:	466d      	mov	r5, sp
 8006290:	f106 0410 	add.w	r4, r6, #16
 8006294:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006296:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006298:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800629a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800629c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80062a0:	e885 0003 	stmia.w	r5, {r0, r1}
 80062a4:	1d33      	adds	r3, r6, #4
 80062a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80062a8:	6838      	ldr	r0, [r7, #0]
 80062aa:	f007 f80b 	bl	800d2c4 <USB_CoreInit>
 80062ae:	4603      	mov	r3, r0
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d005      	beq.n	80062c0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2202      	movs	r2, #2
 80062b8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	e0d7      	b.n	8006470 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	2100      	movs	r1, #0
 80062c6:	4618      	mov	r0, r3
 80062c8:	f007 f92e 	bl	800d528 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80062cc:	2300      	movs	r3, #0
 80062ce:	73fb      	strb	r3, [r7, #15]
 80062d0:	e04a      	b.n	8006368 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80062d2:	7bfa      	ldrb	r2, [r7, #15]
 80062d4:	6879      	ldr	r1, [r7, #4]
 80062d6:	4613      	mov	r3, r2
 80062d8:	00db      	lsls	r3, r3, #3
 80062da:	1a9b      	subs	r3, r3, r2
 80062dc:	009b      	lsls	r3, r3, #2
 80062de:	440b      	add	r3, r1
 80062e0:	333d      	adds	r3, #61	; 0x3d
 80062e2:	2201      	movs	r2, #1
 80062e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80062e6:	7bfa      	ldrb	r2, [r7, #15]
 80062e8:	6879      	ldr	r1, [r7, #4]
 80062ea:	4613      	mov	r3, r2
 80062ec:	00db      	lsls	r3, r3, #3
 80062ee:	1a9b      	subs	r3, r3, r2
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	440b      	add	r3, r1
 80062f4:	333c      	adds	r3, #60	; 0x3c
 80062f6:	7bfa      	ldrb	r2, [r7, #15]
 80062f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80062fa:	7bfa      	ldrb	r2, [r7, #15]
 80062fc:	7bfb      	ldrb	r3, [r7, #15]
 80062fe:	b298      	uxth	r0, r3
 8006300:	6879      	ldr	r1, [r7, #4]
 8006302:	4613      	mov	r3, r2
 8006304:	00db      	lsls	r3, r3, #3
 8006306:	1a9b      	subs	r3, r3, r2
 8006308:	009b      	lsls	r3, r3, #2
 800630a:	440b      	add	r3, r1
 800630c:	3342      	adds	r3, #66	; 0x42
 800630e:	4602      	mov	r2, r0
 8006310:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006312:	7bfa      	ldrb	r2, [r7, #15]
 8006314:	6879      	ldr	r1, [r7, #4]
 8006316:	4613      	mov	r3, r2
 8006318:	00db      	lsls	r3, r3, #3
 800631a:	1a9b      	subs	r3, r3, r2
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	440b      	add	r3, r1
 8006320:	333f      	adds	r3, #63	; 0x3f
 8006322:	2200      	movs	r2, #0
 8006324:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006326:	7bfa      	ldrb	r2, [r7, #15]
 8006328:	6879      	ldr	r1, [r7, #4]
 800632a:	4613      	mov	r3, r2
 800632c:	00db      	lsls	r3, r3, #3
 800632e:	1a9b      	subs	r3, r3, r2
 8006330:	009b      	lsls	r3, r3, #2
 8006332:	440b      	add	r3, r1
 8006334:	3344      	adds	r3, #68	; 0x44
 8006336:	2200      	movs	r2, #0
 8006338:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800633a:	7bfa      	ldrb	r2, [r7, #15]
 800633c:	6879      	ldr	r1, [r7, #4]
 800633e:	4613      	mov	r3, r2
 8006340:	00db      	lsls	r3, r3, #3
 8006342:	1a9b      	subs	r3, r3, r2
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	440b      	add	r3, r1
 8006348:	3348      	adds	r3, #72	; 0x48
 800634a:	2200      	movs	r2, #0
 800634c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800634e:	7bfa      	ldrb	r2, [r7, #15]
 8006350:	6879      	ldr	r1, [r7, #4]
 8006352:	4613      	mov	r3, r2
 8006354:	00db      	lsls	r3, r3, #3
 8006356:	1a9b      	subs	r3, r3, r2
 8006358:	009b      	lsls	r3, r3, #2
 800635a:	440b      	add	r3, r1
 800635c:	3350      	adds	r3, #80	; 0x50
 800635e:	2200      	movs	r2, #0
 8006360:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006362:	7bfb      	ldrb	r3, [r7, #15]
 8006364:	3301      	adds	r3, #1
 8006366:	73fb      	strb	r3, [r7, #15]
 8006368:	7bfa      	ldrb	r2, [r7, #15]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	429a      	cmp	r2, r3
 8006370:	d3af      	bcc.n	80062d2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006372:	2300      	movs	r3, #0
 8006374:	73fb      	strb	r3, [r7, #15]
 8006376:	e044      	b.n	8006402 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006378:	7bfa      	ldrb	r2, [r7, #15]
 800637a:	6879      	ldr	r1, [r7, #4]
 800637c:	4613      	mov	r3, r2
 800637e:	00db      	lsls	r3, r3, #3
 8006380:	1a9b      	subs	r3, r3, r2
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	440b      	add	r3, r1
 8006386:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800638a:	2200      	movs	r2, #0
 800638c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800638e:	7bfa      	ldrb	r2, [r7, #15]
 8006390:	6879      	ldr	r1, [r7, #4]
 8006392:	4613      	mov	r3, r2
 8006394:	00db      	lsls	r3, r3, #3
 8006396:	1a9b      	subs	r3, r3, r2
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	440b      	add	r3, r1
 800639c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80063a0:	7bfa      	ldrb	r2, [r7, #15]
 80063a2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80063a4:	7bfa      	ldrb	r2, [r7, #15]
 80063a6:	6879      	ldr	r1, [r7, #4]
 80063a8:	4613      	mov	r3, r2
 80063aa:	00db      	lsls	r3, r3, #3
 80063ac:	1a9b      	subs	r3, r3, r2
 80063ae:	009b      	lsls	r3, r3, #2
 80063b0:	440b      	add	r3, r1
 80063b2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80063b6:	2200      	movs	r2, #0
 80063b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80063ba:	7bfa      	ldrb	r2, [r7, #15]
 80063bc:	6879      	ldr	r1, [r7, #4]
 80063be:	4613      	mov	r3, r2
 80063c0:	00db      	lsls	r3, r3, #3
 80063c2:	1a9b      	subs	r3, r3, r2
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	440b      	add	r3, r1
 80063c8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80063cc:	2200      	movs	r2, #0
 80063ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80063d0:	7bfa      	ldrb	r2, [r7, #15]
 80063d2:	6879      	ldr	r1, [r7, #4]
 80063d4:	4613      	mov	r3, r2
 80063d6:	00db      	lsls	r3, r3, #3
 80063d8:	1a9b      	subs	r3, r3, r2
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	440b      	add	r3, r1
 80063de:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80063e2:	2200      	movs	r2, #0
 80063e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80063e6:	7bfa      	ldrb	r2, [r7, #15]
 80063e8:	6879      	ldr	r1, [r7, #4]
 80063ea:	4613      	mov	r3, r2
 80063ec:	00db      	lsls	r3, r3, #3
 80063ee:	1a9b      	subs	r3, r3, r2
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	440b      	add	r3, r1
 80063f4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80063f8:	2200      	movs	r2, #0
 80063fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80063fc:	7bfb      	ldrb	r3, [r7, #15]
 80063fe:	3301      	adds	r3, #1
 8006400:	73fb      	strb	r3, [r7, #15]
 8006402:	7bfa      	ldrb	r2, [r7, #15]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	429a      	cmp	r2, r3
 800640a:	d3b5      	bcc.n	8006378 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	603b      	str	r3, [r7, #0]
 8006412:	687e      	ldr	r6, [r7, #4]
 8006414:	466d      	mov	r5, sp
 8006416:	f106 0410 	add.w	r4, r6, #16
 800641a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800641c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800641e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006420:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006422:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006426:	e885 0003 	stmia.w	r5, {r0, r1}
 800642a:	1d33      	adds	r3, r6, #4
 800642c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800642e:	6838      	ldr	r0, [r7, #0]
 8006430:	f007 f8a4 	bl	800d57c <USB_DevInit>
 8006434:	4603      	mov	r3, r0
 8006436:	2b00      	cmp	r3, #0
 8006438:	d005      	beq.n	8006446 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2202      	movs	r2, #2
 800643e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	e014      	b.n	8006470 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2201      	movs	r2, #1
 8006452:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645a:	2b01      	cmp	r3, #1
 800645c:	d102      	bne.n	8006464 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f001 f892 	bl	8007588 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4618      	mov	r0, r3
 800646a:	f008 f924 	bl	800e6b6 <USB_DevDisconnect>

  return HAL_OK;
 800646e:	2300      	movs	r3, #0
}
 8006470:	4618      	mov	r0, r3
 8006472:	3714      	adds	r7, #20
 8006474:	46bd      	mov	sp, r7
 8006476:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006478 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800648c:	2b01      	cmp	r3, #1
 800648e:	d101      	bne.n	8006494 <HAL_PCD_Start+0x1c>
 8006490:	2302      	movs	r3, #2
 8006492:	e020      	b.n	80064d6 <HAL_PCD_Start+0x5e>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d109      	bne.n	80064b8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d005      	beq.n	80064b8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4618      	mov	r0, r3
 80064be:	f007 f811 	bl	800d4e4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4618      	mov	r0, r3
 80064c8:	f008 f8d4 	bl	800e674 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80064d4:	2300      	movs	r3, #0
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3710      	adds	r7, #16
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}

080064de <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80064de:	b590      	push	{r4, r7, lr}
 80064e0:	b08d      	sub	sp, #52	; 0x34
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ec:	6a3b      	ldr	r3, [r7, #32]
 80064ee:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4618      	mov	r0, r3
 80064f6:	f008 f992 	bl	800e81e <USB_GetMode>
 80064fa:	4603      	mov	r3, r0
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	f040 83ca 	bne.w	8006c96 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4618      	mov	r0, r3
 8006508:	f008 f8f6 	bl	800e6f8 <USB_ReadInterrupts>
 800650c:	4603      	mov	r3, r0
 800650e:	2b00      	cmp	r3, #0
 8006510:	f000 83c0 	beq.w	8006c94 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4618      	mov	r0, r3
 800651a:	f008 f8ed 	bl	800e6f8 <USB_ReadInterrupts>
 800651e:	4603      	mov	r3, r0
 8006520:	f003 0302 	and.w	r3, r3, #2
 8006524:	2b02      	cmp	r3, #2
 8006526:	d107      	bne.n	8006538 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	695a      	ldr	r2, [r3, #20]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f002 0202 	and.w	r2, r2, #2
 8006536:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4618      	mov	r0, r3
 800653e:	f008 f8db 	bl	800e6f8 <USB_ReadInterrupts>
 8006542:	4603      	mov	r3, r0
 8006544:	f003 0310 	and.w	r3, r3, #16
 8006548:	2b10      	cmp	r3, #16
 800654a:	d161      	bne.n	8006610 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	699a      	ldr	r2, [r3, #24]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f022 0210 	bic.w	r2, r2, #16
 800655a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800655c:	6a3b      	ldr	r3, [r7, #32]
 800655e:	6a1b      	ldr	r3, [r3, #32]
 8006560:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8006562:	69bb      	ldr	r3, [r7, #24]
 8006564:	f003 020f 	and.w	r2, r3, #15
 8006568:	4613      	mov	r3, r2
 800656a:	00db      	lsls	r3, r3, #3
 800656c:	1a9b      	subs	r3, r3, r2
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	4413      	add	r3, r2
 8006578:	3304      	adds	r3, #4
 800657a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	0c5b      	lsrs	r3, r3, #17
 8006580:	f003 030f 	and.w	r3, r3, #15
 8006584:	2b02      	cmp	r3, #2
 8006586:	d124      	bne.n	80065d2 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006588:	69ba      	ldr	r2, [r7, #24]
 800658a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800658e:	4013      	ands	r3, r2
 8006590:	2b00      	cmp	r3, #0
 8006592:	d035      	beq.n	8006600 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006598:	69bb      	ldr	r3, [r7, #24]
 800659a:	091b      	lsrs	r3, r3, #4
 800659c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800659e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	461a      	mov	r2, r3
 80065a6:	6a38      	ldr	r0, [r7, #32]
 80065a8:	f007 ff12 	bl	800e3d0 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	68da      	ldr	r2, [r3, #12]
 80065b0:	69bb      	ldr	r3, [r7, #24]
 80065b2:	091b      	lsrs	r3, r3, #4
 80065b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80065b8:	441a      	add	r2, r3
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	699a      	ldr	r2, [r3, #24]
 80065c2:	69bb      	ldr	r3, [r7, #24]
 80065c4:	091b      	lsrs	r3, r3, #4
 80065c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80065ca:	441a      	add	r2, r3
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	619a      	str	r2, [r3, #24]
 80065d0:	e016      	b.n	8006600 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	0c5b      	lsrs	r3, r3, #17
 80065d6:	f003 030f 	and.w	r3, r3, #15
 80065da:	2b06      	cmp	r3, #6
 80065dc:	d110      	bne.n	8006600 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80065e4:	2208      	movs	r2, #8
 80065e6:	4619      	mov	r1, r3
 80065e8:	6a38      	ldr	r0, [r7, #32]
 80065ea:	f007 fef1 	bl	800e3d0 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	699a      	ldr	r2, [r3, #24]
 80065f2:	69bb      	ldr	r3, [r7, #24]
 80065f4:	091b      	lsrs	r3, r3, #4
 80065f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80065fa:	441a      	add	r2, r3
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	699a      	ldr	r2, [r3, #24]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f042 0210 	orr.w	r2, r2, #16
 800660e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4618      	mov	r0, r3
 8006616:	f008 f86f 	bl	800e6f8 <USB_ReadInterrupts>
 800661a:	4603      	mov	r3, r0
 800661c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006620:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006624:	d16e      	bne.n	8006704 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8006626:	2300      	movs	r3, #0
 8006628:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4618      	mov	r0, r3
 8006630:	f008 f875 	bl	800e71e <USB_ReadDevAllOutEpInterrupt>
 8006634:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8006636:	e062      	b.n	80066fe <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800663a:	f003 0301 	and.w	r3, r3, #1
 800663e:	2b00      	cmp	r3, #0
 8006640:	d057      	beq.n	80066f2 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006648:	b2d2      	uxtb	r2, r2
 800664a:	4611      	mov	r1, r2
 800664c:	4618      	mov	r0, r3
 800664e:	f008 f89a 	bl	800e786 <USB_ReadDevOutEPInterrupt>
 8006652:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	f003 0301 	and.w	r3, r3, #1
 800665a:	2b00      	cmp	r3, #0
 800665c:	d00c      	beq.n	8006678 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800665e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006660:	015a      	lsls	r2, r3, #5
 8006662:	69fb      	ldr	r3, [r7, #28]
 8006664:	4413      	add	r3, r2
 8006666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800666a:	461a      	mov	r2, r3
 800666c:	2301      	movs	r3, #1
 800666e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006670:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 fdde 	bl	8007234 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	f003 0308 	and.w	r3, r3, #8
 800667e:	2b00      	cmp	r3, #0
 8006680:	d00c      	beq.n	800669c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006684:	015a      	lsls	r2, r3, #5
 8006686:	69fb      	ldr	r3, [r7, #28]
 8006688:	4413      	add	r3, r2
 800668a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800668e:	461a      	mov	r2, r3
 8006690:	2308      	movs	r3, #8
 8006692:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006694:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 fed8 	bl	800744c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	f003 0310 	and.w	r3, r3, #16
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d008      	beq.n	80066b8 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80066a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a8:	015a      	lsls	r2, r3, #5
 80066aa:	69fb      	ldr	r3, [r7, #28]
 80066ac:	4413      	add	r3, r2
 80066ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066b2:	461a      	mov	r2, r3
 80066b4:	2310      	movs	r3, #16
 80066b6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	f003 0320 	and.w	r3, r3, #32
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d008      	beq.n	80066d4 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80066c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c4:	015a      	lsls	r2, r3, #5
 80066c6:	69fb      	ldr	r3, [r7, #28]
 80066c8:	4413      	add	r3, r2
 80066ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066ce:	461a      	mov	r2, r3
 80066d0:	2320      	movs	r3, #32
 80066d2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d009      	beq.n	80066f2 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80066de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e0:	015a      	lsls	r2, r3, #5
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	4413      	add	r3, r2
 80066e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066ea:	461a      	mov	r2, r3
 80066ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80066f0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80066f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f4:	3301      	adds	r3, #1
 80066f6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80066f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066fa:	085b      	lsrs	r3, r3, #1
 80066fc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80066fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006700:	2b00      	cmp	r3, #0
 8006702:	d199      	bne.n	8006638 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4618      	mov	r0, r3
 800670a:	f007 fff5 	bl	800e6f8 <USB_ReadInterrupts>
 800670e:	4603      	mov	r3, r0
 8006710:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006714:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006718:	f040 80c0 	bne.w	800689c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4618      	mov	r0, r3
 8006722:	f008 f816 	bl	800e752 <USB_ReadDevAllInEpInterrupt>
 8006726:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8006728:	2300      	movs	r3, #0
 800672a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800672c:	e0b2      	b.n	8006894 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800672e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006730:	f003 0301 	and.w	r3, r3, #1
 8006734:	2b00      	cmp	r3, #0
 8006736:	f000 80a7 	beq.w	8006888 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006740:	b2d2      	uxtb	r2, r2
 8006742:	4611      	mov	r1, r2
 8006744:	4618      	mov	r0, r3
 8006746:	f008 f83c 	bl	800e7c2 <USB_ReadDevInEPInterrupt>
 800674a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	f003 0301 	and.w	r3, r3, #1
 8006752:	2b00      	cmp	r3, #0
 8006754:	d057      	beq.n	8006806 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006758:	f003 030f 	and.w	r3, r3, #15
 800675c:	2201      	movs	r2, #1
 800675e:	fa02 f303 	lsl.w	r3, r2, r3
 8006762:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006764:	69fb      	ldr	r3, [r7, #28]
 8006766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800676a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	43db      	mvns	r3, r3
 8006770:	69f9      	ldr	r1, [r7, #28]
 8006772:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006776:	4013      	ands	r3, r2
 8006778:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800677a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677c:	015a      	lsls	r2, r3, #5
 800677e:	69fb      	ldr	r3, [r7, #28]
 8006780:	4413      	add	r3, r2
 8006782:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006786:	461a      	mov	r2, r3
 8006788:	2301      	movs	r3, #1
 800678a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	691b      	ldr	r3, [r3, #16]
 8006790:	2b01      	cmp	r3, #1
 8006792:	d132      	bne.n	80067fa <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006794:	6879      	ldr	r1, [r7, #4]
 8006796:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006798:	4613      	mov	r3, r2
 800679a:	00db      	lsls	r3, r3, #3
 800679c:	1a9b      	subs	r3, r3, r2
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	440b      	add	r3, r1
 80067a2:	3348      	adds	r3, #72	; 0x48
 80067a4:	6819      	ldr	r1, [r3, #0]
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067aa:	4613      	mov	r3, r2
 80067ac:	00db      	lsls	r3, r3, #3
 80067ae:	1a9b      	subs	r3, r3, r2
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	4403      	add	r3, r0
 80067b4:	3344      	adds	r3, #68	; 0x44
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4419      	add	r1, r3
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067be:	4613      	mov	r3, r2
 80067c0:	00db      	lsls	r3, r3, #3
 80067c2:	1a9b      	subs	r3, r3, r2
 80067c4:	009b      	lsls	r3, r3, #2
 80067c6:	4403      	add	r3, r0
 80067c8:	3348      	adds	r3, #72	; 0x48
 80067ca:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80067cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d113      	bne.n	80067fa <HAL_PCD_IRQHandler+0x31c>
 80067d2:	6879      	ldr	r1, [r7, #4]
 80067d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067d6:	4613      	mov	r3, r2
 80067d8:	00db      	lsls	r3, r3, #3
 80067da:	1a9b      	subs	r3, r3, r2
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	440b      	add	r3, r1
 80067e0:	3350      	adds	r3, #80	; 0x50
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d108      	bne.n	80067fa <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6818      	ldr	r0, [r3, #0]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80067f2:	461a      	mov	r2, r3
 80067f4:	2101      	movs	r1, #1
 80067f6:	f008 f845 	bl	800e884 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80067fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	4619      	mov	r1, r3
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f00a f82a 	bl	801085a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	f003 0308 	and.w	r3, r3, #8
 800680c:	2b00      	cmp	r3, #0
 800680e:	d008      	beq.n	8006822 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006812:	015a      	lsls	r2, r3, #5
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	4413      	add	r3, r2
 8006818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800681c:	461a      	mov	r2, r3
 800681e:	2308      	movs	r3, #8
 8006820:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	f003 0310 	and.w	r3, r3, #16
 8006828:	2b00      	cmp	r3, #0
 800682a:	d008      	beq.n	800683e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800682c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682e:	015a      	lsls	r2, r3, #5
 8006830:	69fb      	ldr	r3, [r7, #28]
 8006832:	4413      	add	r3, r2
 8006834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006838:	461a      	mov	r2, r3
 800683a:	2310      	movs	r3, #16
 800683c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006844:	2b00      	cmp	r3, #0
 8006846:	d008      	beq.n	800685a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684a:	015a      	lsls	r2, r3, #5
 800684c:	69fb      	ldr	r3, [r7, #28]
 800684e:	4413      	add	r3, r2
 8006850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006854:	461a      	mov	r2, r3
 8006856:	2340      	movs	r3, #64	; 0x40
 8006858:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	f003 0302 	and.w	r3, r3, #2
 8006860:	2b00      	cmp	r3, #0
 8006862:	d008      	beq.n	8006876 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006866:	015a      	lsls	r2, r3, #5
 8006868:	69fb      	ldr	r3, [r7, #28]
 800686a:	4413      	add	r3, r2
 800686c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006870:	461a      	mov	r2, r3
 8006872:	2302      	movs	r3, #2
 8006874:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800687c:	2b00      	cmp	r3, #0
 800687e:	d003      	beq.n	8006888 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006880:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 fc48 	bl	8007118 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688a:	3301      	adds	r3, #1
 800688c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800688e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006890:	085b      	lsrs	r3, r3, #1
 8006892:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006896:	2b00      	cmp	r3, #0
 8006898:	f47f af49 	bne.w	800672e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4618      	mov	r0, r3
 80068a2:	f007 ff29 	bl	800e6f8 <USB_ReadInterrupts>
 80068a6:	4603      	mov	r3, r0
 80068a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068b0:	d122      	bne.n	80068f8 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80068b2:	69fb      	ldr	r3, [r7, #28]
 80068b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	69fa      	ldr	r2, [r7, #28]
 80068bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068c0:	f023 0301 	bic.w	r3, r3, #1
 80068c4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d108      	bne.n	80068e2 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80068d8:	2100      	movs	r1, #0
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 fe78 	bl	80075d0 <HAL_PCDEx_LPM_Callback>
 80068e0:	e002      	b.n	80068e8 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f00a f830 	bl	8010948 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	695a      	ldr	r2, [r3, #20]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80068f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4618      	mov	r0, r3
 80068fe:	f007 fefb 	bl	800e6f8 <USB_ReadInterrupts>
 8006902:	4603      	mov	r3, r0
 8006904:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006908:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800690c:	d112      	bne.n	8006934 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800690e:	69fb      	ldr	r3, [r7, #28]
 8006910:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	f003 0301 	and.w	r3, r3, #1
 800691a:	2b01      	cmp	r3, #1
 800691c:	d102      	bne.n	8006924 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f009 ffec 	bl	80108fc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	695a      	ldr	r2, [r3, #20]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006932:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4618      	mov	r0, r3
 800693a:	f007 fedd 	bl	800e6f8 <USB_ReadInterrupts>
 800693e:	4603      	mov	r3, r0
 8006940:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006944:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006948:	d121      	bne.n	800698e <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	695a      	ldr	r2, [r3, #20]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8006958:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8006960:	2b00      	cmp	r3, #0
 8006962:	d111      	bne.n	8006988 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2201      	movs	r2, #1
 8006968:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006972:	089b      	lsrs	r3, r3, #2
 8006974:	f003 020f 	and.w	r2, r3, #15
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800697e:	2101      	movs	r1, #1
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f000 fe25 	bl	80075d0 <HAL_PCDEx_LPM_Callback>
 8006986:	e002      	b.n	800698e <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f009 ffb7 	bl	80108fc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4618      	mov	r0, r3
 8006994:	f007 feb0 	bl	800e6f8 <USB_ReadInterrupts>
 8006998:	4603      	mov	r3, r0
 800699a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800699e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069a2:	f040 80c7 	bne.w	8006b34 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80069a6:	69fb      	ldr	r3, [r7, #28]
 80069a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	69fa      	ldr	r2, [r7, #28]
 80069b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069b4:	f023 0301 	bic.w	r3, r3, #1
 80069b8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	2110      	movs	r1, #16
 80069c0:	4618      	mov	r0, r3
 80069c2:	f006 ff39 	bl	800d838 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80069c6:	2300      	movs	r3, #0
 80069c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069ca:	e056      	b.n	8006a7a <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80069cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ce:	015a      	lsls	r2, r3, #5
 80069d0:	69fb      	ldr	r3, [r7, #28]
 80069d2:	4413      	add	r3, r2
 80069d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069d8:	461a      	mov	r2, r3
 80069da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80069de:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80069e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069e2:	015a      	lsls	r2, r3, #5
 80069e4:	69fb      	ldr	r3, [r7, #28]
 80069e6:	4413      	add	r3, r2
 80069e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069f0:	0151      	lsls	r1, r2, #5
 80069f2:	69fa      	ldr	r2, [r7, #28]
 80069f4:	440a      	add	r2, r1
 80069f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80069fe:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a02:	015a      	lsls	r2, r3, #5
 8006a04:	69fb      	ldr	r3, [r7, #28]
 8006a06:	4413      	add	r3, r2
 8006a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a10:	0151      	lsls	r1, r2, #5
 8006a12:	69fa      	ldr	r2, [r7, #28]
 8006a14:	440a      	add	r2, r1
 8006a16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a1a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006a1e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a22:	015a      	lsls	r2, r3, #5
 8006a24:	69fb      	ldr	r3, [r7, #28]
 8006a26:	4413      	add	r3, r2
 8006a28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a2c:	461a      	mov	r2, r3
 8006a2e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006a32:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a36:	015a      	lsls	r2, r3, #5
 8006a38:	69fb      	ldr	r3, [r7, #28]
 8006a3a:	4413      	add	r3, r2
 8006a3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a44:	0151      	lsls	r1, r2, #5
 8006a46:	69fa      	ldr	r2, [r7, #28]
 8006a48:	440a      	add	r2, r1
 8006a4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a4e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006a52:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a56:	015a      	lsls	r2, r3, #5
 8006a58:	69fb      	ldr	r3, [r7, #28]
 8006a5a:	4413      	add	r3, r2
 8006a5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a64:	0151      	lsls	r1, r2, #5
 8006a66:	69fa      	ldr	r2, [r7, #28]
 8006a68:	440a      	add	r2, r1
 8006a6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a6e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006a72:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a76:	3301      	adds	r3, #1
 8006a78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a80:	429a      	cmp	r2, r3
 8006a82:	d3a3      	bcc.n	80069cc <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006a84:	69fb      	ldr	r3, [r7, #28]
 8006a86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a8a:	69db      	ldr	r3, [r3, #28]
 8006a8c:	69fa      	ldr	r2, [r7, #28]
 8006a8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a92:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006a96:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d016      	beq.n	8006ace <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006aa0:	69fb      	ldr	r3, [r7, #28]
 8006aa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006aaa:	69fa      	ldr	r2, [r7, #28]
 8006aac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ab0:	f043 030b 	orr.w	r3, r3, #11
 8006ab4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006ab8:	69fb      	ldr	r3, [r7, #28]
 8006aba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ac0:	69fa      	ldr	r2, [r7, #28]
 8006ac2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ac6:	f043 030b 	orr.w	r3, r3, #11
 8006aca:	6453      	str	r3, [r2, #68]	; 0x44
 8006acc:	e015      	b.n	8006afa <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006ace:	69fb      	ldr	r3, [r7, #28]
 8006ad0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ad4:	695a      	ldr	r2, [r3, #20]
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006adc:	4619      	mov	r1, r3
 8006ade:	f242 032b 	movw	r3, #8235	; 0x202b
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006ae6:	69fb      	ldr	r3, [r7, #28]
 8006ae8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aec:	691b      	ldr	r3, [r3, #16]
 8006aee:	69fa      	ldr	r2, [r7, #28]
 8006af0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006af4:	f043 030b 	orr.w	r3, r3, #11
 8006af8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006afa:	69fb      	ldr	r3, [r7, #28]
 8006afc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	69fa      	ldr	r2, [r7, #28]
 8006b04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b08:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006b0c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6818      	ldr	r0, [r3, #0]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	691b      	ldr	r3, [r3, #16]
 8006b16:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006b1e:	461a      	mov	r2, r3
 8006b20:	f007 feb0 	bl	800e884 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	695a      	ldr	r2, [r3, #20]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006b32:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f007 fddd 	bl	800e6f8 <USB_ReadInterrupts>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b48:	d124      	bne.n	8006b94 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f007 fe74 	bl	800e83c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f006 fece 	bl	800d8fa <USB_GetDevSpeed>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	461a      	mov	r2, r3
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681c      	ldr	r4, [r3, #0]
 8006b6a:	f001 fce5 	bl	8008538 <HAL_RCC_GetHCLKFreq>
 8006b6e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	461a      	mov	r2, r3
 8006b78:	4620      	mov	r0, r4
 8006b7a:	f006 fc11 	bl	800d3a0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f009 fe93 	bl	80108aa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	695a      	ldr	r2, [r3, #20]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006b92:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f007 fdad 	bl	800e6f8 <USB_ReadInterrupts>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	f003 0308 	and.w	r3, r3, #8
 8006ba4:	2b08      	cmp	r3, #8
 8006ba6:	d10a      	bne.n	8006bbe <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f009 fe70 	bl	801088e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	695a      	ldr	r2, [r3, #20]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f002 0208 	and.w	r2, r2, #8
 8006bbc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f007 fd98 	bl	800e6f8 <USB_ReadInterrupts>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006bce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bd2:	d10f      	bne.n	8006bf4 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bda:	b2db      	uxtb	r3, r3
 8006bdc:	4619      	mov	r1, r3
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f009 fed2 	bl	8010988 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	695a      	ldr	r2, [r3, #20]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006bf2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f007 fd7d 	bl	800e6f8 <USB_ReadInterrupts>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c08:	d10f      	bne.n	8006c2a <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c10:	b2db      	uxtb	r3, r3
 8006c12:	4619      	mov	r1, r3
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f009 fea5 	bl	8010964 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	695a      	ldr	r2, [r3, #20]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006c28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f007 fd62 	bl	800e6f8 <USB_ReadInterrupts>
 8006c34:	4603      	mov	r3, r0
 8006c36:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c3e:	d10a      	bne.n	8006c56 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f009 feb3 	bl	80109ac <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	695a      	ldr	r2, [r3, #20]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006c54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f007 fd4c 	bl	800e6f8 <USB_ReadInterrupts>
 8006c60:	4603      	mov	r3, r0
 8006c62:	f003 0304 	and.w	r3, r3, #4
 8006c66:	2b04      	cmp	r3, #4
 8006c68:	d115      	bne.n	8006c96 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006c72:	69bb      	ldr	r3, [r7, #24]
 8006c74:	f003 0304 	and.w	r3, r3, #4
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d002      	beq.n	8006c82 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f009 fea3 	bl	80109c8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	6859      	ldr	r1, [r3, #4]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	69ba      	ldr	r2, [r7, #24]
 8006c8e:	430a      	orrs	r2, r1
 8006c90:	605a      	str	r2, [r3, #4]
 8006c92:	e000      	b.n	8006c96 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8006c94:	bf00      	nop
    }
  }
}
 8006c96:	3734      	adds	r7, #52	; 0x34
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd90      	pop	{r4, r7, pc}

08006c9c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b082      	sub	sp, #8
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	d101      	bne.n	8006cb6 <HAL_PCD_SetAddress+0x1a>
 8006cb2:	2302      	movs	r3, #2
 8006cb4:	e013      	b.n	8006cde <HAL_PCD_SetAddress+0x42>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2201      	movs	r2, #1
 8006cba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	78fa      	ldrb	r2, [r7, #3]
 8006cc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	78fa      	ldrb	r2, [r7, #3]
 8006ccc:	4611      	mov	r1, r2
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f007 fcaa 	bl	800e628 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006cdc:	2300      	movs	r3, #0
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3708      	adds	r7, #8
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}

08006ce6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006ce6:	b580      	push	{r7, lr}
 8006ce8:	b084      	sub	sp, #16
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	6078      	str	r0, [r7, #4]
 8006cee:	4608      	mov	r0, r1
 8006cf0:	4611      	mov	r1, r2
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	70fb      	strb	r3, [r7, #3]
 8006cf8:	460b      	mov	r3, r1
 8006cfa:	803b      	strh	r3, [r7, #0]
 8006cfc:	4613      	mov	r3, r2
 8006cfe:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006d00:	2300      	movs	r3, #0
 8006d02:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006d04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	da0f      	bge.n	8006d2c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006d0c:	78fb      	ldrb	r3, [r7, #3]
 8006d0e:	f003 020f 	and.w	r2, r3, #15
 8006d12:	4613      	mov	r3, r2
 8006d14:	00db      	lsls	r3, r3, #3
 8006d16:	1a9b      	subs	r3, r3, r2
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	3338      	adds	r3, #56	; 0x38
 8006d1c:	687a      	ldr	r2, [r7, #4]
 8006d1e:	4413      	add	r3, r2
 8006d20:	3304      	adds	r3, #4
 8006d22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2201      	movs	r2, #1
 8006d28:	705a      	strb	r2, [r3, #1]
 8006d2a:	e00f      	b.n	8006d4c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006d2c:	78fb      	ldrb	r3, [r7, #3]
 8006d2e:	f003 020f 	and.w	r2, r3, #15
 8006d32:	4613      	mov	r3, r2
 8006d34:	00db      	lsls	r3, r3, #3
 8006d36:	1a9b      	subs	r3, r3, r2
 8006d38:	009b      	lsls	r3, r3, #2
 8006d3a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	4413      	add	r3, r2
 8006d42:	3304      	adds	r3, #4
 8006d44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006d4c:	78fb      	ldrb	r3, [r7, #3]
 8006d4e:	f003 030f 	and.w	r3, r3, #15
 8006d52:	b2da      	uxtb	r2, r3
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006d58:	883a      	ldrh	r2, [r7, #0]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	78ba      	ldrb	r2, [r7, #2]
 8006d62:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	785b      	ldrb	r3, [r3, #1]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d004      	beq.n	8006d76 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	781b      	ldrb	r3, [r3, #0]
 8006d70:	b29a      	uxth	r2, r3
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006d76:	78bb      	ldrb	r3, [r7, #2]
 8006d78:	2b02      	cmp	r3, #2
 8006d7a:	d102      	bne.n	8006d82 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	d101      	bne.n	8006d90 <HAL_PCD_EP_Open+0xaa>
 8006d8c:	2302      	movs	r3, #2
 8006d8e:	e00e      	b.n	8006dae <HAL_PCD_EP_Open+0xc8>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2201      	movs	r2, #1
 8006d94:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	68f9      	ldr	r1, [r7, #12]
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f006 fdd0 	bl	800d944 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2200      	movs	r2, #0
 8006da8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8006dac:	7afb      	ldrb	r3, [r7, #11]
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3710      	adds	r7, #16
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}

08006db6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006db6:	b580      	push	{r7, lr}
 8006db8:	b084      	sub	sp, #16
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
 8006dbe:	460b      	mov	r3, r1
 8006dc0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006dc2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	da0f      	bge.n	8006dea <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006dca:	78fb      	ldrb	r3, [r7, #3]
 8006dcc:	f003 020f 	and.w	r2, r3, #15
 8006dd0:	4613      	mov	r3, r2
 8006dd2:	00db      	lsls	r3, r3, #3
 8006dd4:	1a9b      	subs	r3, r3, r2
 8006dd6:	009b      	lsls	r3, r3, #2
 8006dd8:	3338      	adds	r3, #56	; 0x38
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	4413      	add	r3, r2
 8006dde:	3304      	adds	r3, #4
 8006de0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2201      	movs	r2, #1
 8006de6:	705a      	strb	r2, [r3, #1]
 8006de8:	e00f      	b.n	8006e0a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006dea:	78fb      	ldrb	r3, [r7, #3]
 8006dec:	f003 020f 	and.w	r2, r3, #15
 8006df0:	4613      	mov	r3, r2
 8006df2:	00db      	lsls	r3, r3, #3
 8006df4:	1a9b      	subs	r3, r3, r2
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006dfc:	687a      	ldr	r2, [r7, #4]
 8006dfe:	4413      	add	r3, r2
 8006e00:	3304      	adds	r3, #4
 8006e02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2200      	movs	r2, #0
 8006e08:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006e0a:	78fb      	ldrb	r3, [r7, #3]
 8006e0c:	f003 030f 	and.w	r3, r3, #15
 8006e10:	b2da      	uxtb	r2, r3
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d101      	bne.n	8006e24 <HAL_PCD_EP_Close+0x6e>
 8006e20:	2302      	movs	r3, #2
 8006e22:	e00e      	b.n	8006e42 <HAL_PCD_EP_Close+0x8c>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2201      	movs	r2, #1
 8006e28:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	68f9      	ldr	r1, [r7, #12]
 8006e32:	4618      	mov	r0, r3
 8006e34:	f006 fe0e 	bl	800da54 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8006e40:	2300      	movs	r3, #0
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3710      	adds	r7, #16
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}

08006e4a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006e4a:	b580      	push	{r7, lr}
 8006e4c:	b086      	sub	sp, #24
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	60f8      	str	r0, [r7, #12]
 8006e52:	607a      	str	r2, [r7, #4]
 8006e54:	603b      	str	r3, [r7, #0]
 8006e56:	460b      	mov	r3, r1
 8006e58:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006e5a:	7afb      	ldrb	r3, [r7, #11]
 8006e5c:	f003 020f 	and.w	r2, r3, #15
 8006e60:	4613      	mov	r3, r2
 8006e62:	00db      	lsls	r3, r3, #3
 8006e64:	1a9b      	subs	r3, r3, r2
 8006e66:	009b      	lsls	r3, r3, #2
 8006e68:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006e6c:	68fa      	ldr	r2, [r7, #12]
 8006e6e:	4413      	add	r3, r2
 8006e70:	3304      	adds	r3, #4
 8006e72:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	687a      	ldr	r2, [r7, #4]
 8006e78:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	683a      	ldr	r2, [r7, #0]
 8006e7e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	2200      	movs	r2, #0
 8006e84:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006e8c:	7afb      	ldrb	r3, [r7, #11]
 8006e8e:	f003 030f 	and.w	r3, r3, #15
 8006e92:	b2da      	uxtb	r2, r3
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	691b      	ldr	r3, [r3, #16]
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d102      	bne.n	8006ea6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006ea0:	687a      	ldr	r2, [r7, #4]
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006ea6:	7afb      	ldrb	r3, [r7, #11]
 8006ea8:	f003 030f 	and.w	r3, r3, #15
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d109      	bne.n	8006ec4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	6818      	ldr	r0, [r3, #0]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	691b      	ldr	r3, [r3, #16]
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	461a      	mov	r2, r3
 8006ebc:	6979      	ldr	r1, [r7, #20]
 8006ebe:	f007 f8f1 	bl	800e0a4 <USB_EP0StartXfer>
 8006ec2:	e008      	b.n	8006ed6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	6818      	ldr	r0, [r3, #0]
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	691b      	ldr	r3, [r3, #16]
 8006ecc:	b2db      	uxtb	r3, r3
 8006ece:	461a      	mov	r2, r3
 8006ed0:	6979      	ldr	r1, [r7, #20]
 8006ed2:	f006 fe9b 	bl	800dc0c <USB_EPStartXfer>
  }

  return HAL_OK;
 8006ed6:	2300      	movs	r3, #0
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3718      	adds	r7, #24
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}

08006ee0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b083      	sub	sp, #12
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	460b      	mov	r3, r1
 8006eea:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006eec:	78fb      	ldrb	r3, [r7, #3]
 8006eee:	f003 020f 	and.w	r2, r3, #15
 8006ef2:	6879      	ldr	r1, [r7, #4]
 8006ef4:	4613      	mov	r3, r2
 8006ef6:	00db      	lsls	r3, r3, #3
 8006ef8:	1a9b      	subs	r3, r3, r2
 8006efa:	009b      	lsls	r3, r3, #2
 8006efc:	440b      	add	r3, r1
 8006efe:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006f02:	681b      	ldr	r3, [r3, #0]
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	370c      	adds	r7, #12
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr

08006f10 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b086      	sub	sp, #24
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	60f8      	str	r0, [r7, #12]
 8006f18:	607a      	str	r2, [r7, #4]
 8006f1a:	603b      	str	r3, [r7, #0]
 8006f1c:	460b      	mov	r3, r1
 8006f1e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006f20:	7afb      	ldrb	r3, [r7, #11]
 8006f22:	f003 020f 	and.w	r2, r3, #15
 8006f26:	4613      	mov	r3, r2
 8006f28:	00db      	lsls	r3, r3, #3
 8006f2a:	1a9b      	subs	r3, r3, r2
 8006f2c:	009b      	lsls	r3, r3, #2
 8006f2e:	3338      	adds	r3, #56	; 0x38
 8006f30:	68fa      	ldr	r2, [r7, #12]
 8006f32:	4413      	add	r3, r2
 8006f34:	3304      	adds	r3, #4
 8006f36:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	683a      	ldr	r2, [r7, #0]
 8006f42:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	2200      	movs	r2, #0
 8006f48:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006f50:	7afb      	ldrb	r3, [r7, #11]
 8006f52:	f003 030f 	and.w	r3, r3, #15
 8006f56:	b2da      	uxtb	r2, r3
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	691b      	ldr	r3, [r3, #16]
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d102      	bne.n	8006f6a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006f6a:	7afb      	ldrb	r3, [r7, #11]
 8006f6c:	f003 030f 	and.w	r3, r3, #15
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d109      	bne.n	8006f88 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	6818      	ldr	r0, [r3, #0]
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	691b      	ldr	r3, [r3, #16]
 8006f7c:	b2db      	uxtb	r3, r3
 8006f7e:	461a      	mov	r2, r3
 8006f80:	6979      	ldr	r1, [r7, #20]
 8006f82:	f007 f88f 	bl	800e0a4 <USB_EP0StartXfer>
 8006f86:	e008      	b.n	8006f9a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	6818      	ldr	r0, [r3, #0]
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	691b      	ldr	r3, [r3, #16]
 8006f90:	b2db      	uxtb	r3, r3
 8006f92:	461a      	mov	r2, r3
 8006f94:	6979      	ldr	r1, [r7, #20]
 8006f96:	f006 fe39 	bl	800dc0c <USB_EPStartXfer>
  }

  return HAL_OK;
 8006f9a:	2300      	movs	r3, #0
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3718      	adds	r7, #24
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	460b      	mov	r3, r1
 8006fae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006fb0:	78fb      	ldrb	r3, [r7, #3]
 8006fb2:	f003 020f 	and.w	r2, r3, #15
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	d901      	bls.n	8006fc2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	e050      	b.n	8007064 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006fc2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	da0f      	bge.n	8006fea <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006fca:	78fb      	ldrb	r3, [r7, #3]
 8006fcc:	f003 020f 	and.w	r2, r3, #15
 8006fd0:	4613      	mov	r3, r2
 8006fd2:	00db      	lsls	r3, r3, #3
 8006fd4:	1a9b      	subs	r3, r3, r2
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	3338      	adds	r3, #56	; 0x38
 8006fda:	687a      	ldr	r2, [r7, #4]
 8006fdc:	4413      	add	r3, r2
 8006fde:	3304      	adds	r3, #4
 8006fe0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	705a      	strb	r2, [r3, #1]
 8006fe8:	e00d      	b.n	8007006 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006fea:	78fa      	ldrb	r2, [r7, #3]
 8006fec:	4613      	mov	r3, r2
 8006fee:	00db      	lsls	r3, r3, #3
 8006ff0:	1a9b      	subs	r3, r3, r2
 8006ff2:	009b      	lsls	r3, r3, #2
 8006ff4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	4413      	add	r3, r2
 8006ffc:	3304      	adds	r3, #4
 8006ffe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2200      	movs	r2, #0
 8007004:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2201      	movs	r2, #1
 800700a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800700c:	78fb      	ldrb	r3, [r7, #3]
 800700e:	f003 030f 	and.w	r3, r3, #15
 8007012:	b2da      	uxtb	r2, r3
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800701e:	2b01      	cmp	r3, #1
 8007020:	d101      	bne.n	8007026 <HAL_PCD_EP_SetStall+0x82>
 8007022:	2302      	movs	r3, #2
 8007024:	e01e      	b.n	8007064 <HAL_PCD_EP_SetStall+0xc0>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2201      	movs	r2, #1
 800702a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	68f9      	ldr	r1, [r7, #12]
 8007034:	4618      	mov	r0, r3
 8007036:	f007 fa23 	bl	800e480 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800703a:	78fb      	ldrb	r3, [r7, #3]
 800703c:	f003 030f 	and.w	r3, r3, #15
 8007040:	2b00      	cmp	r3, #0
 8007042:	d10a      	bne.n	800705a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6818      	ldr	r0, [r3, #0]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	691b      	ldr	r3, [r3, #16]
 800704c:	b2d9      	uxtb	r1, r3
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007054:	461a      	mov	r2, r3
 8007056:	f007 fc15 	bl	800e884 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2200      	movs	r2, #0
 800705e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007062:	2300      	movs	r3, #0
}
 8007064:	4618      	mov	r0, r3
 8007066:	3710      	adds	r7, #16
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}

0800706c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b084      	sub	sp, #16
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	460b      	mov	r3, r1
 8007076:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007078:	78fb      	ldrb	r3, [r7, #3]
 800707a:	f003 020f 	and.w	r2, r3, #15
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	429a      	cmp	r2, r3
 8007084:	d901      	bls.n	800708a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007086:	2301      	movs	r3, #1
 8007088:	e042      	b.n	8007110 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800708a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800708e:	2b00      	cmp	r3, #0
 8007090:	da0f      	bge.n	80070b2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007092:	78fb      	ldrb	r3, [r7, #3]
 8007094:	f003 020f 	and.w	r2, r3, #15
 8007098:	4613      	mov	r3, r2
 800709a:	00db      	lsls	r3, r3, #3
 800709c:	1a9b      	subs	r3, r3, r2
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	3338      	adds	r3, #56	; 0x38
 80070a2:	687a      	ldr	r2, [r7, #4]
 80070a4:	4413      	add	r3, r2
 80070a6:	3304      	adds	r3, #4
 80070a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2201      	movs	r2, #1
 80070ae:	705a      	strb	r2, [r3, #1]
 80070b0:	e00f      	b.n	80070d2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80070b2:	78fb      	ldrb	r3, [r7, #3]
 80070b4:	f003 020f 	and.w	r2, r3, #15
 80070b8:	4613      	mov	r3, r2
 80070ba:	00db      	lsls	r3, r3, #3
 80070bc:	1a9b      	subs	r3, r3, r2
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80070c4:	687a      	ldr	r2, [r7, #4]
 80070c6:	4413      	add	r3, r2
 80070c8:	3304      	adds	r3, #4
 80070ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2200      	movs	r2, #0
 80070d0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2200      	movs	r2, #0
 80070d6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80070d8:	78fb      	ldrb	r3, [r7, #3]
 80070da:	f003 030f 	and.w	r3, r3, #15
 80070de:	b2da      	uxtb	r2, r3
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	d101      	bne.n	80070f2 <HAL_PCD_EP_ClrStall+0x86>
 80070ee:	2302      	movs	r3, #2
 80070f0:	e00e      	b.n	8007110 <HAL_PCD_EP_ClrStall+0xa4>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2201      	movs	r2, #1
 80070f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	68f9      	ldr	r1, [r7, #12]
 8007100:	4618      	mov	r0, r3
 8007102:	f007 fa2b 	bl	800e55c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2200      	movs	r2, #0
 800710a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800710e:	2300      	movs	r3, #0
}
 8007110:	4618      	mov	r0, r3
 8007112:	3710      	adds	r7, #16
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}

08007118 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b08a      	sub	sp, #40	; 0x28
 800711c:	af02      	add	r7, sp, #8
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800712c:	683a      	ldr	r2, [r7, #0]
 800712e:	4613      	mov	r3, r2
 8007130:	00db      	lsls	r3, r3, #3
 8007132:	1a9b      	subs	r3, r3, r2
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	3338      	adds	r3, #56	; 0x38
 8007138:	687a      	ldr	r2, [r7, #4]
 800713a:	4413      	add	r3, r2
 800713c:	3304      	adds	r3, #4
 800713e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	699a      	ldr	r2, [r3, #24]
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	695b      	ldr	r3, [r3, #20]
 8007148:	429a      	cmp	r2, r3
 800714a:	d901      	bls.n	8007150 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800714c:	2301      	movs	r3, #1
 800714e:	e06c      	b.n	800722a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	695a      	ldr	r2, [r3, #20]
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	699b      	ldr	r3, [r3, #24]
 8007158:	1ad3      	subs	r3, r2, r3
 800715a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	689b      	ldr	r3, [r3, #8]
 8007160:	69fa      	ldr	r2, [r7, #28]
 8007162:	429a      	cmp	r2, r3
 8007164:	d902      	bls.n	800716c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800716c:	69fb      	ldr	r3, [r7, #28]
 800716e:	3303      	adds	r3, #3
 8007170:	089b      	lsrs	r3, r3, #2
 8007172:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007174:	e02b      	b.n	80071ce <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	695a      	ldr	r2, [r3, #20]
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	699b      	ldr	r3, [r3, #24]
 800717e:	1ad3      	subs	r3, r2, r3
 8007180:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	689b      	ldr	r3, [r3, #8]
 8007186:	69fa      	ldr	r2, [r7, #28]
 8007188:	429a      	cmp	r2, r3
 800718a:	d902      	bls.n	8007192 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007192:	69fb      	ldr	r3, [r7, #28]
 8007194:	3303      	adds	r3, #3
 8007196:	089b      	lsrs	r3, r3, #2
 8007198:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	68d9      	ldr	r1, [r3, #12]
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	b2da      	uxtb	r2, r3
 80071a2:	69fb      	ldr	r3, [r7, #28]
 80071a4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80071aa:	b2db      	uxtb	r3, r3
 80071ac:	9300      	str	r3, [sp, #0]
 80071ae:	4603      	mov	r3, r0
 80071b0:	6978      	ldr	r0, [r7, #20]
 80071b2:	f007 f8cf 	bl	800e354 <USB_WritePacket>

    ep->xfer_buff  += len;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	68da      	ldr	r2, [r3, #12]
 80071ba:	69fb      	ldr	r3, [r7, #28]
 80071bc:	441a      	add	r2, r3
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	699a      	ldr	r2, [r3, #24]
 80071c6:	69fb      	ldr	r3, [r7, #28]
 80071c8:	441a      	add	r2, r3
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	015a      	lsls	r2, r3, #5
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	4413      	add	r3, r2
 80071d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071da:	699b      	ldr	r3, [r3, #24]
 80071dc:	b29b      	uxth	r3, r3
 80071de:	69ba      	ldr	r2, [r7, #24]
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d809      	bhi.n	80071f8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	699a      	ldr	r2, [r3, #24]
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d203      	bcs.n	80071f8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	695b      	ldr	r3, [r3, #20]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d1be      	bne.n	8007176 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	695a      	ldr	r2, [r3, #20]
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	699b      	ldr	r3, [r3, #24]
 8007200:	429a      	cmp	r2, r3
 8007202:	d811      	bhi.n	8007228 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	f003 030f 	and.w	r3, r3, #15
 800720a:	2201      	movs	r2, #1
 800720c:	fa02 f303 	lsl.w	r3, r2, r3
 8007210:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007218:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	43db      	mvns	r3, r3
 800721e:	6939      	ldr	r1, [r7, #16]
 8007220:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007224:	4013      	ands	r3, r2
 8007226:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8007228:	2300      	movs	r3, #0
}
 800722a:	4618      	mov	r0, r3
 800722c:	3720      	adds	r7, #32
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}
	...

08007234 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b086      	sub	sp, #24
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	333c      	adds	r3, #60	; 0x3c
 800724c:	3304      	adds	r3, #4
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	015a      	lsls	r2, r3, #5
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	4413      	add	r3, r2
 800725a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800725e:	689b      	ldr	r3, [r3, #8]
 8007260:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	691b      	ldr	r3, [r3, #16]
 8007266:	2b01      	cmp	r3, #1
 8007268:	f040 80a0 	bne.w	80073ac <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	f003 0308 	and.w	r3, r3, #8
 8007272:	2b00      	cmp	r3, #0
 8007274:	d015      	beq.n	80072a2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	4a72      	ldr	r2, [pc, #456]	; (8007444 <PCD_EP_OutXfrComplete_int+0x210>)
 800727a:	4293      	cmp	r3, r2
 800727c:	f240 80dd 	bls.w	800743a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007286:	2b00      	cmp	r3, #0
 8007288:	f000 80d7 	beq.w	800743a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	015a      	lsls	r2, r3, #5
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	4413      	add	r3, r2
 8007294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007298:	461a      	mov	r2, r3
 800729a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800729e:	6093      	str	r3, [r2, #8]
 80072a0:	e0cb      	b.n	800743a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	f003 0320 	and.w	r3, r3, #32
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d009      	beq.n	80072c0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	015a      	lsls	r2, r3, #5
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	4413      	add	r3, r2
 80072b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072b8:	461a      	mov	r2, r3
 80072ba:	2320      	movs	r3, #32
 80072bc:	6093      	str	r3, [r2, #8]
 80072be:	e0bc      	b.n	800743a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	f040 80b7 	bne.w	800743a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	4a5d      	ldr	r2, [pc, #372]	; (8007444 <PCD_EP_OutXfrComplete_int+0x210>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d90f      	bls.n	80072f4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d00a      	beq.n	80072f4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	015a      	lsls	r2, r3, #5
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	4413      	add	r3, r2
 80072e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072ea:	461a      	mov	r2, r3
 80072ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072f0:	6093      	str	r3, [r2, #8]
 80072f2:	e0a2      	b.n	800743a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80072f4:	6879      	ldr	r1, [r7, #4]
 80072f6:	683a      	ldr	r2, [r7, #0]
 80072f8:	4613      	mov	r3, r2
 80072fa:	00db      	lsls	r3, r3, #3
 80072fc:	1a9b      	subs	r3, r3, r2
 80072fe:	009b      	lsls	r3, r3, #2
 8007300:	440b      	add	r3, r1
 8007302:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007306:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	0159      	lsls	r1, r3, #5
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	440b      	add	r3, r1
 8007310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007314:	691b      	ldr	r3, [r3, #16]
 8007316:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800731a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	683a      	ldr	r2, [r7, #0]
 8007320:	4613      	mov	r3, r2
 8007322:	00db      	lsls	r3, r3, #3
 8007324:	1a9b      	subs	r3, r3, r2
 8007326:	009b      	lsls	r3, r3, #2
 8007328:	4403      	add	r3, r0
 800732a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800732e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8007330:	6879      	ldr	r1, [r7, #4]
 8007332:	683a      	ldr	r2, [r7, #0]
 8007334:	4613      	mov	r3, r2
 8007336:	00db      	lsls	r3, r3, #3
 8007338:	1a9b      	subs	r3, r3, r2
 800733a:	009b      	lsls	r3, r3, #2
 800733c:	440b      	add	r3, r1
 800733e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007342:	6819      	ldr	r1, [r3, #0]
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	683a      	ldr	r2, [r7, #0]
 8007348:	4613      	mov	r3, r2
 800734a:	00db      	lsls	r3, r3, #3
 800734c:	1a9b      	subs	r3, r3, r2
 800734e:	009b      	lsls	r3, r3, #2
 8007350:	4403      	add	r3, r0
 8007352:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4419      	add	r1, r3
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	683a      	ldr	r2, [r7, #0]
 800735e:	4613      	mov	r3, r2
 8007360:	00db      	lsls	r3, r3, #3
 8007362:	1a9b      	subs	r3, r3, r2
 8007364:	009b      	lsls	r3, r3, #2
 8007366:	4403      	add	r3, r0
 8007368:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800736c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d114      	bne.n	800739e <PCD_EP_OutXfrComplete_int+0x16a>
 8007374:	6879      	ldr	r1, [r7, #4]
 8007376:	683a      	ldr	r2, [r7, #0]
 8007378:	4613      	mov	r3, r2
 800737a:	00db      	lsls	r3, r3, #3
 800737c:	1a9b      	subs	r3, r3, r2
 800737e:	009b      	lsls	r3, r3, #2
 8007380:	440b      	add	r3, r1
 8007382:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d108      	bne.n	800739e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6818      	ldr	r0, [r3, #0]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007396:	461a      	mov	r2, r3
 8007398:	2101      	movs	r1, #1
 800739a:	f007 fa73 	bl	800e884 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	b2db      	uxtb	r3, r3
 80073a2:	4619      	mov	r1, r3
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f009 fa3d 	bl	8010824 <HAL_PCD_DataOutStageCallback>
 80073aa:	e046      	b.n	800743a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	4a26      	ldr	r2, [pc, #152]	; (8007448 <PCD_EP_OutXfrComplete_int+0x214>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d124      	bne.n	80073fe <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d00a      	beq.n	80073d4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	015a      	lsls	r2, r3, #5
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	4413      	add	r3, r2
 80073c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073ca:	461a      	mov	r2, r3
 80073cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073d0:	6093      	str	r3, [r2, #8]
 80073d2:	e032      	b.n	800743a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	f003 0320 	and.w	r3, r3, #32
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d008      	beq.n	80073f0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	015a      	lsls	r2, r3, #5
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	4413      	add	r3, r2
 80073e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073ea:	461a      	mov	r2, r3
 80073ec:	2320      	movs	r3, #32
 80073ee:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	b2db      	uxtb	r3, r3
 80073f4:	4619      	mov	r1, r3
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f009 fa14 	bl	8010824 <HAL_PCD_DataOutStageCallback>
 80073fc:	e01d      	b.n	800743a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d114      	bne.n	800742e <PCD_EP_OutXfrComplete_int+0x1fa>
 8007404:	6879      	ldr	r1, [r7, #4]
 8007406:	683a      	ldr	r2, [r7, #0]
 8007408:	4613      	mov	r3, r2
 800740a:	00db      	lsls	r3, r3, #3
 800740c:	1a9b      	subs	r3, r3, r2
 800740e:	009b      	lsls	r3, r3, #2
 8007410:	440b      	add	r3, r1
 8007412:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d108      	bne.n	800742e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6818      	ldr	r0, [r3, #0]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007426:	461a      	mov	r2, r3
 8007428:	2100      	movs	r1, #0
 800742a:	f007 fa2b 	bl	800e884 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	b2db      	uxtb	r3, r3
 8007432:	4619      	mov	r1, r3
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f009 f9f5 	bl	8010824 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800743a:	2300      	movs	r3, #0
}
 800743c:	4618      	mov	r0, r3
 800743e:	3718      	adds	r7, #24
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}
 8007444:	4f54300a 	.word	0x4f54300a
 8007448:	4f54310a 	.word	0x4f54310a

0800744c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b086      	sub	sp, #24
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	333c      	adds	r3, #60	; 0x3c
 8007464:	3304      	adds	r3, #4
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	015a      	lsls	r2, r3, #5
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	4413      	add	r3, r2
 8007472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	4a15      	ldr	r2, [pc, #84]	; (80074d4 <PCD_EP_OutSetupPacket_int+0x88>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d90e      	bls.n	80074a0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007488:	2b00      	cmp	r3, #0
 800748a:	d009      	beq.n	80074a0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	015a      	lsls	r2, r3, #5
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	4413      	add	r3, r2
 8007494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007498:	461a      	mov	r2, r3
 800749a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800749e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f009 f9ad 	bl	8010800 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	4a0a      	ldr	r2, [pc, #40]	; (80074d4 <PCD_EP_OutSetupPacket_int+0x88>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d90c      	bls.n	80074c8 <PCD_EP_OutSetupPacket_int+0x7c>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	691b      	ldr	r3, [r3, #16]
 80074b2:	2b01      	cmp	r3, #1
 80074b4:	d108      	bne.n	80074c8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6818      	ldr	r0, [r3, #0]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80074c0:	461a      	mov	r2, r3
 80074c2:	2101      	movs	r1, #1
 80074c4:	f007 f9de 	bl	800e884 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80074c8:	2300      	movs	r3, #0
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3718      	adds	r7, #24
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}
 80074d2:	bf00      	nop
 80074d4:	4f54300a 	.word	0x4f54300a

080074d8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80074d8:	b480      	push	{r7}
 80074da:	b085      	sub	sp, #20
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	460b      	mov	r3, r1
 80074e2:	70fb      	strb	r3, [r7, #3]
 80074e4:	4613      	mov	r3, r2
 80074e6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ee:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80074f0:	78fb      	ldrb	r3, [r7, #3]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d107      	bne.n	8007506 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80074f6:	883b      	ldrh	r3, [r7, #0]
 80074f8:	0419      	lsls	r1, r3, #16
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	68ba      	ldr	r2, [r7, #8]
 8007500:	430a      	orrs	r2, r1
 8007502:	629a      	str	r2, [r3, #40]	; 0x28
 8007504:	e028      	b.n	8007558 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800750c:	0c1b      	lsrs	r3, r3, #16
 800750e:	68ba      	ldr	r2, [r7, #8]
 8007510:	4413      	add	r3, r2
 8007512:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007514:	2300      	movs	r3, #0
 8007516:	73fb      	strb	r3, [r7, #15]
 8007518:	e00d      	b.n	8007536 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681a      	ldr	r2, [r3, #0]
 800751e:	7bfb      	ldrb	r3, [r7, #15]
 8007520:	3340      	adds	r3, #64	; 0x40
 8007522:	009b      	lsls	r3, r3, #2
 8007524:	4413      	add	r3, r2
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	0c1b      	lsrs	r3, r3, #16
 800752a:	68ba      	ldr	r2, [r7, #8]
 800752c:	4413      	add	r3, r2
 800752e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007530:	7bfb      	ldrb	r3, [r7, #15]
 8007532:	3301      	adds	r3, #1
 8007534:	73fb      	strb	r3, [r7, #15]
 8007536:	7bfa      	ldrb	r2, [r7, #15]
 8007538:	78fb      	ldrb	r3, [r7, #3]
 800753a:	3b01      	subs	r3, #1
 800753c:	429a      	cmp	r2, r3
 800753e:	d3ec      	bcc.n	800751a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007540:	883b      	ldrh	r3, [r7, #0]
 8007542:	0418      	lsls	r0, r3, #16
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6819      	ldr	r1, [r3, #0]
 8007548:	78fb      	ldrb	r3, [r7, #3]
 800754a:	3b01      	subs	r3, #1
 800754c:	68ba      	ldr	r2, [r7, #8]
 800754e:	4302      	orrs	r2, r0
 8007550:	3340      	adds	r3, #64	; 0x40
 8007552:	009b      	lsls	r3, r3, #2
 8007554:	440b      	add	r3, r1
 8007556:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007558:	2300      	movs	r3, #0
}
 800755a:	4618      	mov	r0, r3
 800755c:	3714      	adds	r7, #20
 800755e:	46bd      	mov	sp, r7
 8007560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007564:	4770      	bx	lr

08007566 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007566:	b480      	push	{r7}
 8007568:	b083      	sub	sp, #12
 800756a:	af00      	add	r7, sp, #0
 800756c:	6078      	str	r0, [r7, #4]
 800756e:	460b      	mov	r3, r1
 8007570:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	887a      	ldrh	r2, [r7, #2]
 8007578:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800757a:	2300      	movs	r3, #0
}
 800757c:	4618      	mov	r0, r3
 800757e:	370c      	adds	r7, #12
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr

08007588 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007588:	b480      	push	{r7}
 800758a:	b085      	sub	sp, #20
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2201      	movs	r2, #1
 800759a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2200      	movs	r2, #0
 80075a2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	699b      	ldr	r3, [r3, #24]
 80075aa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80075b6:	4b05      	ldr	r3, [pc, #20]	; (80075cc <HAL_PCDEx_ActivateLPM+0x44>)
 80075b8:	4313      	orrs	r3, r2
 80075ba:	68fa      	ldr	r2, [r7, #12]
 80075bc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80075be:	2300      	movs	r3, #0
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3714      	adds	r7, #20
 80075c4:	46bd      	mov	sp, r7
 80075c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ca:	4770      	bx	lr
 80075cc:	10000003 	.word	0x10000003

080075d0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b083      	sub	sp, #12
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	460b      	mov	r3, r1
 80075da:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80075dc:	bf00      	nop
 80075de:	370c      	adds	r7, #12
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr

080075e8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b084      	sub	sp, #16
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80075f0:	4b29      	ldr	r3, [pc, #164]	; (8007698 <HAL_PWREx_ConfigSupply+0xb0>)
 80075f2:	68db      	ldr	r3, [r3, #12]
 80075f4:	f003 0307 	and.w	r3, r3, #7
 80075f8:	2b06      	cmp	r3, #6
 80075fa:	d00a      	beq.n	8007612 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80075fc:	4b26      	ldr	r3, [pc, #152]	; (8007698 <HAL_PWREx_ConfigSupply+0xb0>)
 80075fe:	68db      	ldr	r3, [r3, #12]
 8007600:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007604:	687a      	ldr	r2, [r7, #4]
 8007606:	429a      	cmp	r2, r3
 8007608:	d001      	beq.n	800760e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800760a:	2301      	movs	r3, #1
 800760c:	e040      	b.n	8007690 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800760e:	2300      	movs	r3, #0
 8007610:	e03e      	b.n	8007690 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007612:	4b21      	ldr	r3, [pc, #132]	; (8007698 <HAL_PWREx_ConfigSupply+0xb0>)
 8007614:	68db      	ldr	r3, [r3, #12]
 8007616:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800761a:	491f      	ldr	r1, [pc, #124]	; (8007698 <HAL_PWREx_ConfigSupply+0xb0>)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	4313      	orrs	r3, r2
 8007620:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007622:	f7fa fc09 	bl	8001e38 <HAL_GetTick>
 8007626:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007628:	e009      	b.n	800763e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800762a:	f7fa fc05 	bl	8001e38 <HAL_GetTick>
 800762e:	4602      	mov	r2, r0
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	1ad3      	subs	r3, r2, r3
 8007634:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007638:	d901      	bls.n	800763e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800763a:	2301      	movs	r3, #1
 800763c:	e028      	b.n	8007690 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800763e:	4b16      	ldr	r3, [pc, #88]	; (8007698 <HAL_PWREx_ConfigSupply+0xb0>)
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007646:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800764a:	d1ee      	bne.n	800762a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2b1e      	cmp	r3, #30
 8007650:	d008      	beq.n	8007664 <HAL_PWREx_ConfigSupply+0x7c>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2b2e      	cmp	r3, #46	; 0x2e
 8007656:	d005      	beq.n	8007664 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2b1d      	cmp	r3, #29
 800765c:	d002      	beq.n	8007664 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2b2d      	cmp	r3, #45	; 0x2d
 8007662:	d114      	bne.n	800768e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8007664:	f7fa fbe8 	bl	8001e38 <HAL_GetTick>
 8007668:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800766a:	e009      	b.n	8007680 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800766c:	f7fa fbe4 	bl	8001e38 <HAL_GetTick>
 8007670:	4602      	mov	r2, r0
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	1ad3      	subs	r3, r2, r3
 8007676:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800767a:	d901      	bls.n	8007680 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800767c:	2301      	movs	r3, #1
 800767e:	e007      	b.n	8007690 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8007680:	4b05      	ldr	r3, [pc, #20]	; (8007698 <HAL_PWREx_ConfigSupply+0xb0>)
 8007682:	68db      	ldr	r3, [r3, #12]
 8007684:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800768c:	d1ee      	bne.n	800766c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800768e:	2300      	movs	r3, #0
}
 8007690:	4618      	mov	r0, r3
 8007692:	3710      	adds	r7, #16
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}
 8007698:	58024800 	.word	0x58024800

0800769c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800769c:	b480      	push	{r7}
 800769e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80076a0:	4b05      	ldr	r3, [pc, #20]	; (80076b8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80076a2:	68db      	ldr	r3, [r3, #12]
 80076a4:	4a04      	ldr	r2, [pc, #16]	; (80076b8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80076a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80076aa:	60d3      	str	r3, [r2, #12]
}
 80076ac:	bf00      	nop
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr
 80076b6:	bf00      	nop
 80076b8:	58024800 	.word	0x58024800

080076bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b08c      	sub	sp, #48	; 0x30
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d101      	bne.n	80076ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80076ca:	2301      	movs	r3, #1
 80076cc:	e3fd      	b.n	8007eca <HAL_RCC_OscConfig+0x80e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f003 0301 	and.w	r3, r3, #1
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	f000 8087 	beq.w	80077ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80076dc:	4b99      	ldr	r3, [pc, #612]	; (8007944 <HAL_RCC_OscConfig+0x288>)
 80076de:	691b      	ldr	r3, [r3, #16]
 80076e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80076e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80076e6:	4b97      	ldr	r3, [pc, #604]	; (8007944 <HAL_RCC_OscConfig+0x288>)
 80076e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ea:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80076ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ee:	2b10      	cmp	r3, #16
 80076f0:	d007      	beq.n	8007702 <HAL_RCC_OscConfig+0x46>
 80076f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076f4:	2b18      	cmp	r3, #24
 80076f6:	d110      	bne.n	800771a <HAL_RCC_OscConfig+0x5e>
 80076f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076fa:	f003 0303 	and.w	r3, r3, #3
 80076fe:	2b02      	cmp	r3, #2
 8007700:	d10b      	bne.n	800771a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007702:	4b90      	ldr	r3, [pc, #576]	; (8007944 <HAL_RCC_OscConfig+0x288>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800770a:	2b00      	cmp	r3, #0
 800770c:	d06c      	beq.n	80077e8 <HAL_RCC_OscConfig+0x12c>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d168      	bne.n	80077e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007716:	2301      	movs	r3, #1
 8007718:	e3d7      	b.n	8007eca <HAL_RCC_OscConfig+0x80e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007722:	d106      	bne.n	8007732 <HAL_RCC_OscConfig+0x76>
 8007724:	4b87      	ldr	r3, [pc, #540]	; (8007944 <HAL_RCC_OscConfig+0x288>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a86      	ldr	r2, [pc, #536]	; (8007944 <HAL_RCC_OscConfig+0x288>)
 800772a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800772e:	6013      	str	r3, [r2, #0]
 8007730:	e02e      	b.n	8007790 <HAL_RCC_OscConfig+0xd4>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d10c      	bne.n	8007754 <HAL_RCC_OscConfig+0x98>
 800773a:	4b82      	ldr	r3, [pc, #520]	; (8007944 <HAL_RCC_OscConfig+0x288>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a81      	ldr	r2, [pc, #516]	; (8007944 <HAL_RCC_OscConfig+0x288>)
 8007740:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007744:	6013      	str	r3, [r2, #0]
 8007746:	4b7f      	ldr	r3, [pc, #508]	; (8007944 <HAL_RCC_OscConfig+0x288>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a7e      	ldr	r2, [pc, #504]	; (8007944 <HAL_RCC_OscConfig+0x288>)
 800774c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007750:	6013      	str	r3, [r2, #0]
 8007752:	e01d      	b.n	8007790 <HAL_RCC_OscConfig+0xd4>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800775c:	d10c      	bne.n	8007778 <HAL_RCC_OscConfig+0xbc>
 800775e:	4b79      	ldr	r3, [pc, #484]	; (8007944 <HAL_RCC_OscConfig+0x288>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a78      	ldr	r2, [pc, #480]	; (8007944 <HAL_RCC_OscConfig+0x288>)
 8007764:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007768:	6013      	str	r3, [r2, #0]
 800776a:	4b76      	ldr	r3, [pc, #472]	; (8007944 <HAL_RCC_OscConfig+0x288>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a75      	ldr	r2, [pc, #468]	; (8007944 <HAL_RCC_OscConfig+0x288>)
 8007770:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007774:	6013      	str	r3, [r2, #0]
 8007776:	e00b      	b.n	8007790 <HAL_RCC_OscConfig+0xd4>
 8007778:	4b72      	ldr	r3, [pc, #456]	; (8007944 <HAL_RCC_OscConfig+0x288>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a71      	ldr	r2, [pc, #452]	; (8007944 <HAL_RCC_OscConfig+0x288>)
 800777e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007782:	6013      	str	r3, [r2, #0]
 8007784:	4b6f      	ldr	r3, [pc, #444]	; (8007944 <HAL_RCC_OscConfig+0x288>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a6e      	ldr	r2, [pc, #440]	; (8007944 <HAL_RCC_OscConfig+0x288>)
 800778a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800778e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d013      	beq.n	80077c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007798:	f7fa fb4e 	bl	8001e38 <HAL_GetTick>
 800779c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800779e:	e008      	b.n	80077b2 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80077a0:	f7fa fb4a 	bl	8001e38 <HAL_GetTick>
 80077a4:	4602      	mov	r2, r0
 80077a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a8:	1ad3      	subs	r3, r2, r3
 80077aa:	2b64      	cmp	r3, #100	; 0x64
 80077ac:	d901      	bls.n	80077b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80077ae:	2303      	movs	r3, #3
 80077b0:	e38b      	b.n	8007eca <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80077b2:	4b64      	ldr	r3, [pc, #400]	; (8007944 <HAL_RCC_OscConfig+0x288>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d0f0      	beq.n	80077a0 <HAL_RCC_OscConfig+0xe4>
 80077be:	e014      	b.n	80077ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077c0:	f7fa fb3a 	bl	8001e38 <HAL_GetTick>
 80077c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80077c6:	e008      	b.n	80077da <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80077c8:	f7fa fb36 	bl	8001e38 <HAL_GetTick>
 80077cc:	4602      	mov	r2, r0
 80077ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d0:	1ad3      	subs	r3, r2, r3
 80077d2:	2b64      	cmp	r3, #100	; 0x64
 80077d4:	d901      	bls.n	80077da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80077d6:	2303      	movs	r3, #3
 80077d8:	e377      	b.n	8007eca <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80077da:	4b5a      	ldr	r3, [pc, #360]	; (8007944 <HAL_RCC_OscConfig+0x288>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d1f0      	bne.n	80077c8 <HAL_RCC_OscConfig+0x10c>
 80077e6:	e000      	b.n	80077ea <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80077e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f003 0302 	and.w	r3, r3, #2
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	f000 80ae 	beq.w	8007954 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80077f8:	4b52      	ldr	r3, [pc, #328]	; (8007944 <HAL_RCC_OscConfig+0x288>)
 80077fa:	691b      	ldr	r3, [r3, #16]
 80077fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007800:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007802:	4b50      	ldr	r3, [pc, #320]	; (8007944 <HAL_RCC_OscConfig+0x288>)
 8007804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007806:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007808:	6a3b      	ldr	r3, [r7, #32]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d007      	beq.n	800781e <HAL_RCC_OscConfig+0x162>
 800780e:	6a3b      	ldr	r3, [r7, #32]
 8007810:	2b18      	cmp	r3, #24
 8007812:	d13a      	bne.n	800788a <HAL_RCC_OscConfig+0x1ce>
 8007814:	69fb      	ldr	r3, [r7, #28]
 8007816:	f003 0303 	and.w	r3, r3, #3
 800781a:	2b00      	cmp	r3, #0
 800781c:	d135      	bne.n	800788a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800781e:	4b49      	ldr	r3, [pc, #292]	; (8007944 <HAL_RCC_OscConfig+0x288>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f003 0304 	and.w	r3, r3, #4
 8007826:	2b00      	cmp	r3, #0
 8007828:	d005      	beq.n	8007836 <HAL_RCC_OscConfig+0x17a>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	68db      	ldr	r3, [r3, #12]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d101      	bne.n	8007836 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007832:	2301      	movs	r3, #1
 8007834:	e349      	b.n	8007eca <HAL_RCC_OscConfig+0x80e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007836:	f7fa fb2f 	bl	8001e98 <HAL_GetREVID>
 800783a:	4603      	mov	r3, r0
 800783c:	f241 0203 	movw	r2, #4099	; 0x1003
 8007840:	4293      	cmp	r3, r2
 8007842:	d817      	bhi.n	8007874 <HAL_RCC_OscConfig+0x1b8>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	691b      	ldr	r3, [r3, #16]
 8007848:	2b40      	cmp	r3, #64	; 0x40
 800784a:	d108      	bne.n	800785e <HAL_RCC_OscConfig+0x1a2>
 800784c:	4b3d      	ldr	r3, [pc, #244]	; (8007944 <HAL_RCC_OscConfig+0x288>)
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007854:	4a3b      	ldr	r2, [pc, #236]	; (8007944 <HAL_RCC_OscConfig+0x288>)
 8007856:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800785a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800785c:	e07a      	b.n	8007954 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800785e:	4b39      	ldr	r3, [pc, #228]	; (8007944 <HAL_RCC_OscConfig+0x288>)
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	691b      	ldr	r3, [r3, #16]
 800786a:	031b      	lsls	r3, r3, #12
 800786c:	4935      	ldr	r1, [pc, #212]	; (8007944 <HAL_RCC_OscConfig+0x288>)
 800786e:	4313      	orrs	r3, r2
 8007870:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007872:	e06f      	b.n	8007954 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007874:	4b33      	ldr	r3, [pc, #204]	; (8007944 <HAL_RCC_OscConfig+0x288>)
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	691b      	ldr	r3, [r3, #16]
 8007880:	061b      	lsls	r3, r3, #24
 8007882:	4930      	ldr	r1, [pc, #192]	; (8007944 <HAL_RCC_OscConfig+0x288>)
 8007884:	4313      	orrs	r3, r2
 8007886:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007888:	e064      	b.n	8007954 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d045      	beq.n	800791e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007892:	4b2c      	ldr	r3, [pc, #176]	; (8007944 <HAL_RCC_OscConfig+0x288>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f023 0219 	bic.w	r2, r3, #25
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	68db      	ldr	r3, [r3, #12]
 800789e:	4929      	ldr	r1, [pc, #164]	; (8007944 <HAL_RCC_OscConfig+0x288>)
 80078a0:	4313      	orrs	r3, r2
 80078a2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078a4:	f7fa fac8 	bl	8001e38 <HAL_GetTick>
 80078a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80078aa:	e008      	b.n	80078be <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80078ac:	f7fa fac4 	bl	8001e38 <HAL_GetTick>
 80078b0:	4602      	mov	r2, r0
 80078b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b4:	1ad3      	subs	r3, r2, r3
 80078b6:	2b02      	cmp	r3, #2
 80078b8:	d901      	bls.n	80078be <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80078ba:	2303      	movs	r3, #3
 80078bc:	e305      	b.n	8007eca <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80078be:	4b21      	ldr	r3, [pc, #132]	; (8007944 <HAL_RCC_OscConfig+0x288>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f003 0304 	and.w	r3, r3, #4
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d0f0      	beq.n	80078ac <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078ca:	f7fa fae5 	bl	8001e98 <HAL_GetREVID>
 80078ce:	4603      	mov	r3, r0
 80078d0:	f241 0203 	movw	r2, #4099	; 0x1003
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d817      	bhi.n	8007908 <HAL_RCC_OscConfig+0x24c>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	691b      	ldr	r3, [r3, #16]
 80078dc:	2b40      	cmp	r3, #64	; 0x40
 80078de:	d108      	bne.n	80078f2 <HAL_RCC_OscConfig+0x236>
 80078e0:	4b18      	ldr	r3, [pc, #96]	; (8007944 <HAL_RCC_OscConfig+0x288>)
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80078e8:	4a16      	ldr	r2, [pc, #88]	; (8007944 <HAL_RCC_OscConfig+0x288>)
 80078ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078ee:	6053      	str	r3, [r2, #4]
 80078f0:	e030      	b.n	8007954 <HAL_RCC_OscConfig+0x298>
 80078f2:	4b14      	ldr	r3, [pc, #80]	; (8007944 <HAL_RCC_OscConfig+0x288>)
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	691b      	ldr	r3, [r3, #16]
 80078fe:	031b      	lsls	r3, r3, #12
 8007900:	4910      	ldr	r1, [pc, #64]	; (8007944 <HAL_RCC_OscConfig+0x288>)
 8007902:	4313      	orrs	r3, r2
 8007904:	604b      	str	r3, [r1, #4]
 8007906:	e025      	b.n	8007954 <HAL_RCC_OscConfig+0x298>
 8007908:	4b0e      	ldr	r3, [pc, #56]	; (8007944 <HAL_RCC_OscConfig+0x288>)
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	691b      	ldr	r3, [r3, #16]
 8007914:	061b      	lsls	r3, r3, #24
 8007916:	490b      	ldr	r1, [pc, #44]	; (8007944 <HAL_RCC_OscConfig+0x288>)
 8007918:	4313      	orrs	r3, r2
 800791a:	604b      	str	r3, [r1, #4]
 800791c:	e01a      	b.n	8007954 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800791e:	4b09      	ldr	r3, [pc, #36]	; (8007944 <HAL_RCC_OscConfig+0x288>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a08      	ldr	r2, [pc, #32]	; (8007944 <HAL_RCC_OscConfig+0x288>)
 8007924:	f023 0301 	bic.w	r3, r3, #1
 8007928:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800792a:	f7fa fa85 	bl	8001e38 <HAL_GetTick>
 800792e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007930:	e00a      	b.n	8007948 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007932:	f7fa fa81 	bl	8001e38 <HAL_GetTick>
 8007936:	4602      	mov	r2, r0
 8007938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800793a:	1ad3      	subs	r3, r2, r3
 800793c:	2b02      	cmp	r3, #2
 800793e:	d903      	bls.n	8007948 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8007940:	2303      	movs	r3, #3
 8007942:	e2c2      	b.n	8007eca <HAL_RCC_OscConfig+0x80e>
 8007944:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007948:	4b94      	ldr	r3, [pc, #592]	; (8007b9c <HAL_RCC_OscConfig+0x4e0>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f003 0304 	and.w	r3, r3, #4
 8007950:	2b00      	cmp	r3, #0
 8007952:	d1ee      	bne.n	8007932 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f003 0310 	and.w	r3, r3, #16
 800795c:	2b00      	cmp	r3, #0
 800795e:	f000 80a9 	beq.w	8007ab4 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007962:	4b8e      	ldr	r3, [pc, #568]	; (8007b9c <HAL_RCC_OscConfig+0x4e0>)
 8007964:	691b      	ldr	r3, [r3, #16]
 8007966:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800796a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800796c:	4b8b      	ldr	r3, [pc, #556]	; (8007b9c <HAL_RCC_OscConfig+0x4e0>)
 800796e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007970:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007972:	69bb      	ldr	r3, [r7, #24]
 8007974:	2b08      	cmp	r3, #8
 8007976:	d007      	beq.n	8007988 <HAL_RCC_OscConfig+0x2cc>
 8007978:	69bb      	ldr	r3, [r7, #24]
 800797a:	2b18      	cmp	r3, #24
 800797c:	d13a      	bne.n	80079f4 <HAL_RCC_OscConfig+0x338>
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	f003 0303 	and.w	r3, r3, #3
 8007984:	2b01      	cmp	r3, #1
 8007986:	d135      	bne.n	80079f4 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007988:	4b84      	ldr	r3, [pc, #528]	; (8007b9c <HAL_RCC_OscConfig+0x4e0>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007990:	2b00      	cmp	r3, #0
 8007992:	d005      	beq.n	80079a0 <HAL_RCC_OscConfig+0x2e4>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	69db      	ldr	r3, [r3, #28]
 8007998:	2b80      	cmp	r3, #128	; 0x80
 800799a:	d001      	beq.n	80079a0 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 800799c:	2301      	movs	r3, #1
 800799e:	e294      	b.n	8007eca <HAL_RCC_OscConfig+0x80e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80079a0:	f7fa fa7a 	bl	8001e98 <HAL_GetREVID>
 80079a4:	4603      	mov	r3, r0
 80079a6:	f241 0203 	movw	r2, #4099	; 0x1003
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d817      	bhi.n	80079de <HAL_RCC_OscConfig+0x322>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6a1b      	ldr	r3, [r3, #32]
 80079b2:	2b20      	cmp	r3, #32
 80079b4:	d108      	bne.n	80079c8 <HAL_RCC_OscConfig+0x30c>
 80079b6:	4b79      	ldr	r3, [pc, #484]	; (8007b9c <HAL_RCC_OscConfig+0x4e0>)
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80079be:	4a77      	ldr	r2, [pc, #476]	; (8007b9c <HAL_RCC_OscConfig+0x4e0>)
 80079c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80079c4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80079c6:	e075      	b.n	8007ab4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80079c8:	4b74      	ldr	r3, [pc, #464]	; (8007b9c <HAL_RCC_OscConfig+0x4e0>)
 80079ca:	685b      	ldr	r3, [r3, #4]
 80079cc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6a1b      	ldr	r3, [r3, #32]
 80079d4:	069b      	lsls	r3, r3, #26
 80079d6:	4971      	ldr	r1, [pc, #452]	; (8007b9c <HAL_RCC_OscConfig+0x4e0>)
 80079d8:	4313      	orrs	r3, r2
 80079da:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80079dc:	e06a      	b.n	8007ab4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80079de:	4b6f      	ldr	r3, [pc, #444]	; (8007b9c <HAL_RCC_OscConfig+0x4e0>)
 80079e0:	68db      	ldr	r3, [r3, #12]
 80079e2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6a1b      	ldr	r3, [r3, #32]
 80079ea:	061b      	lsls	r3, r3, #24
 80079ec:	496b      	ldr	r1, [pc, #428]	; (8007b9c <HAL_RCC_OscConfig+0x4e0>)
 80079ee:	4313      	orrs	r3, r2
 80079f0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80079f2:	e05f      	b.n	8007ab4 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	69db      	ldr	r3, [r3, #28]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d042      	beq.n	8007a82 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80079fc:	4b67      	ldr	r3, [pc, #412]	; (8007b9c <HAL_RCC_OscConfig+0x4e0>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a66      	ldr	r2, [pc, #408]	; (8007b9c <HAL_RCC_OscConfig+0x4e0>)
 8007a02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a08:	f7fa fa16 	bl	8001e38 <HAL_GetTick>
 8007a0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007a0e:	e008      	b.n	8007a22 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007a10:	f7fa fa12 	bl	8001e38 <HAL_GetTick>
 8007a14:	4602      	mov	r2, r0
 8007a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a18:	1ad3      	subs	r3, r2, r3
 8007a1a:	2b02      	cmp	r3, #2
 8007a1c:	d901      	bls.n	8007a22 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8007a1e:	2303      	movs	r3, #3
 8007a20:	e253      	b.n	8007eca <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007a22:	4b5e      	ldr	r3, [pc, #376]	; (8007b9c <HAL_RCC_OscConfig+0x4e0>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d0f0      	beq.n	8007a10 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007a2e:	f7fa fa33 	bl	8001e98 <HAL_GetREVID>
 8007a32:	4603      	mov	r3, r0
 8007a34:	f241 0203 	movw	r2, #4099	; 0x1003
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d817      	bhi.n	8007a6c <HAL_RCC_OscConfig+0x3b0>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6a1b      	ldr	r3, [r3, #32]
 8007a40:	2b20      	cmp	r3, #32
 8007a42:	d108      	bne.n	8007a56 <HAL_RCC_OscConfig+0x39a>
 8007a44:	4b55      	ldr	r3, [pc, #340]	; (8007b9c <HAL_RCC_OscConfig+0x4e0>)
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007a4c:	4a53      	ldr	r2, [pc, #332]	; (8007b9c <HAL_RCC_OscConfig+0x4e0>)
 8007a4e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007a52:	6053      	str	r3, [r2, #4]
 8007a54:	e02e      	b.n	8007ab4 <HAL_RCC_OscConfig+0x3f8>
 8007a56:	4b51      	ldr	r3, [pc, #324]	; (8007b9c <HAL_RCC_OscConfig+0x4e0>)
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6a1b      	ldr	r3, [r3, #32]
 8007a62:	069b      	lsls	r3, r3, #26
 8007a64:	494d      	ldr	r1, [pc, #308]	; (8007b9c <HAL_RCC_OscConfig+0x4e0>)
 8007a66:	4313      	orrs	r3, r2
 8007a68:	604b      	str	r3, [r1, #4]
 8007a6a:	e023      	b.n	8007ab4 <HAL_RCC_OscConfig+0x3f8>
 8007a6c:	4b4b      	ldr	r3, [pc, #300]	; (8007b9c <HAL_RCC_OscConfig+0x4e0>)
 8007a6e:	68db      	ldr	r3, [r3, #12]
 8007a70:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6a1b      	ldr	r3, [r3, #32]
 8007a78:	061b      	lsls	r3, r3, #24
 8007a7a:	4948      	ldr	r1, [pc, #288]	; (8007b9c <HAL_RCC_OscConfig+0x4e0>)
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	60cb      	str	r3, [r1, #12]
 8007a80:	e018      	b.n	8007ab4 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007a82:	4b46      	ldr	r3, [pc, #280]	; (8007b9c <HAL_RCC_OscConfig+0x4e0>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a45      	ldr	r2, [pc, #276]	; (8007b9c <HAL_RCC_OscConfig+0x4e0>)
 8007a88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a8e:	f7fa f9d3 	bl	8001e38 <HAL_GetTick>
 8007a92:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007a94:	e008      	b.n	8007aa8 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007a96:	f7fa f9cf 	bl	8001e38 <HAL_GetTick>
 8007a9a:	4602      	mov	r2, r0
 8007a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9e:	1ad3      	subs	r3, r2, r3
 8007aa0:	2b02      	cmp	r3, #2
 8007aa2:	d901      	bls.n	8007aa8 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8007aa4:	2303      	movs	r3, #3
 8007aa6:	e210      	b.n	8007eca <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007aa8:	4b3c      	ldr	r3, [pc, #240]	; (8007b9c <HAL_RCC_OscConfig+0x4e0>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d1f0      	bne.n	8007a96 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f003 0308 	and.w	r3, r3, #8
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d036      	beq.n	8007b2e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	695b      	ldr	r3, [r3, #20]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d019      	beq.n	8007afc <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007ac8:	4b34      	ldr	r3, [pc, #208]	; (8007b9c <HAL_RCC_OscConfig+0x4e0>)
 8007aca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007acc:	4a33      	ldr	r2, [pc, #204]	; (8007b9c <HAL_RCC_OscConfig+0x4e0>)
 8007ace:	f043 0301 	orr.w	r3, r3, #1
 8007ad2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ad4:	f7fa f9b0 	bl	8001e38 <HAL_GetTick>
 8007ad8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007ada:	e008      	b.n	8007aee <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007adc:	f7fa f9ac 	bl	8001e38 <HAL_GetTick>
 8007ae0:	4602      	mov	r2, r0
 8007ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae4:	1ad3      	subs	r3, r2, r3
 8007ae6:	2b02      	cmp	r3, #2
 8007ae8:	d901      	bls.n	8007aee <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8007aea:	2303      	movs	r3, #3
 8007aec:	e1ed      	b.n	8007eca <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007aee:	4b2b      	ldr	r3, [pc, #172]	; (8007b9c <HAL_RCC_OscConfig+0x4e0>)
 8007af0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007af2:	f003 0302 	and.w	r3, r3, #2
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d0f0      	beq.n	8007adc <HAL_RCC_OscConfig+0x420>
 8007afa:	e018      	b.n	8007b2e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007afc:	4b27      	ldr	r3, [pc, #156]	; (8007b9c <HAL_RCC_OscConfig+0x4e0>)
 8007afe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b00:	4a26      	ldr	r2, [pc, #152]	; (8007b9c <HAL_RCC_OscConfig+0x4e0>)
 8007b02:	f023 0301 	bic.w	r3, r3, #1
 8007b06:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b08:	f7fa f996 	bl	8001e38 <HAL_GetTick>
 8007b0c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007b0e:	e008      	b.n	8007b22 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007b10:	f7fa f992 	bl	8001e38 <HAL_GetTick>
 8007b14:	4602      	mov	r2, r0
 8007b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b18:	1ad3      	subs	r3, r2, r3
 8007b1a:	2b02      	cmp	r3, #2
 8007b1c:	d901      	bls.n	8007b22 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8007b1e:	2303      	movs	r3, #3
 8007b20:	e1d3      	b.n	8007eca <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007b22:	4b1e      	ldr	r3, [pc, #120]	; (8007b9c <HAL_RCC_OscConfig+0x4e0>)
 8007b24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b26:	f003 0302 	and.w	r3, r3, #2
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d1f0      	bne.n	8007b10 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f003 0320 	and.w	r3, r3, #32
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d038      	beq.n	8007bac <HAL_RCC_OscConfig+0x4f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	699b      	ldr	r3, [r3, #24]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d019      	beq.n	8007b76 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007b42:	4b16      	ldr	r3, [pc, #88]	; (8007b9c <HAL_RCC_OscConfig+0x4e0>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4a15      	ldr	r2, [pc, #84]	; (8007b9c <HAL_RCC_OscConfig+0x4e0>)
 8007b48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007b4c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007b4e:	f7fa f973 	bl	8001e38 <HAL_GetTick>
 8007b52:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007b54:	e008      	b.n	8007b68 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007b56:	f7fa f96f 	bl	8001e38 <HAL_GetTick>
 8007b5a:	4602      	mov	r2, r0
 8007b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5e:	1ad3      	subs	r3, r2, r3
 8007b60:	2b02      	cmp	r3, #2
 8007b62:	d901      	bls.n	8007b68 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8007b64:	2303      	movs	r3, #3
 8007b66:	e1b0      	b.n	8007eca <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007b68:	4b0c      	ldr	r3, [pc, #48]	; (8007b9c <HAL_RCC_OscConfig+0x4e0>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d0f0      	beq.n	8007b56 <HAL_RCC_OscConfig+0x49a>
 8007b74:	e01a      	b.n	8007bac <HAL_RCC_OscConfig+0x4f0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007b76:	4b09      	ldr	r3, [pc, #36]	; (8007b9c <HAL_RCC_OscConfig+0x4e0>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a08      	ldr	r2, [pc, #32]	; (8007b9c <HAL_RCC_OscConfig+0x4e0>)
 8007b7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b80:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007b82:	f7fa f959 	bl	8001e38 <HAL_GetTick>
 8007b86:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007b88:	e00a      	b.n	8007ba0 <HAL_RCC_OscConfig+0x4e4>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007b8a:	f7fa f955 	bl	8001e38 <HAL_GetTick>
 8007b8e:	4602      	mov	r2, r0
 8007b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b92:	1ad3      	subs	r3, r2, r3
 8007b94:	2b02      	cmp	r3, #2
 8007b96:	d903      	bls.n	8007ba0 <HAL_RCC_OscConfig+0x4e4>
        {
          return HAL_TIMEOUT;
 8007b98:	2303      	movs	r3, #3
 8007b9a:	e196      	b.n	8007eca <HAL_RCC_OscConfig+0x80e>
 8007b9c:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007ba0:	4b99      	ldr	r3, [pc, #612]	; (8007e08 <HAL_RCC_OscConfig+0x74c>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d1ee      	bne.n	8007b8a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f003 0304 	and.w	r3, r3, #4
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	f000 8081 	beq.w	8007cbc <HAL_RCC_OscConfig+0x600>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007bba:	4b94      	ldr	r3, [pc, #592]	; (8007e0c <HAL_RCC_OscConfig+0x750>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4a93      	ldr	r2, [pc, #588]	; (8007e0c <HAL_RCC_OscConfig+0x750>)
 8007bc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bc4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007bc6:	f7fa f937 	bl	8001e38 <HAL_GetTick>
 8007bca:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007bcc:	e008      	b.n	8007be0 <HAL_RCC_OscConfig+0x524>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007bce:	f7fa f933 	bl	8001e38 <HAL_GetTick>
 8007bd2:	4602      	mov	r2, r0
 8007bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd6:	1ad3      	subs	r3, r2, r3
 8007bd8:	2b64      	cmp	r3, #100	; 0x64
 8007bda:	d901      	bls.n	8007be0 <HAL_RCC_OscConfig+0x524>
      {
        return HAL_TIMEOUT;
 8007bdc:	2303      	movs	r3, #3
 8007bde:	e174      	b.n	8007eca <HAL_RCC_OscConfig+0x80e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007be0:	4b8a      	ldr	r3, [pc, #552]	; (8007e0c <HAL_RCC_OscConfig+0x750>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d0f0      	beq.n	8007bce <HAL_RCC_OscConfig+0x512>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	2b01      	cmp	r3, #1
 8007bf2:	d106      	bne.n	8007c02 <HAL_RCC_OscConfig+0x546>
 8007bf4:	4b84      	ldr	r3, [pc, #528]	; (8007e08 <HAL_RCC_OscConfig+0x74c>)
 8007bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bf8:	4a83      	ldr	r2, [pc, #524]	; (8007e08 <HAL_RCC_OscConfig+0x74c>)
 8007bfa:	f043 0301 	orr.w	r3, r3, #1
 8007bfe:	6713      	str	r3, [r2, #112]	; 0x70
 8007c00:	e02d      	b.n	8007c5e <HAL_RCC_OscConfig+0x5a2>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	689b      	ldr	r3, [r3, #8]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d10c      	bne.n	8007c24 <HAL_RCC_OscConfig+0x568>
 8007c0a:	4b7f      	ldr	r3, [pc, #508]	; (8007e08 <HAL_RCC_OscConfig+0x74c>)
 8007c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c0e:	4a7e      	ldr	r2, [pc, #504]	; (8007e08 <HAL_RCC_OscConfig+0x74c>)
 8007c10:	f023 0301 	bic.w	r3, r3, #1
 8007c14:	6713      	str	r3, [r2, #112]	; 0x70
 8007c16:	4b7c      	ldr	r3, [pc, #496]	; (8007e08 <HAL_RCC_OscConfig+0x74c>)
 8007c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c1a:	4a7b      	ldr	r2, [pc, #492]	; (8007e08 <HAL_RCC_OscConfig+0x74c>)
 8007c1c:	f023 0304 	bic.w	r3, r3, #4
 8007c20:	6713      	str	r3, [r2, #112]	; 0x70
 8007c22:	e01c      	b.n	8007c5e <HAL_RCC_OscConfig+0x5a2>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	689b      	ldr	r3, [r3, #8]
 8007c28:	2b05      	cmp	r3, #5
 8007c2a:	d10c      	bne.n	8007c46 <HAL_RCC_OscConfig+0x58a>
 8007c2c:	4b76      	ldr	r3, [pc, #472]	; (8007e08 <HAL_RCC_OscConfig+0x74c>)
 8007c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c30:	4a75      	ldr	r2, [pc, #468]	; (8007e08 <HAL_RCC_OscConfig+0x74c>)
 8007c32:	f043 0304 	orr.w	r3, r3, #4
 8007c36:	6713      	str	r3, [r2, #112]	; 0x70
 8007c38:	4b73      	ldr	r3, [pc, #460]	; (8007e08 <HAL_RCC_OscConfig+0x74c>)
 8007c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c3c:	4a72      	ldr	r2, [pc, #456]	; (8007e08 <HAL_RCC_OscConfig+0x74c>)
 8007c3e:	f043 0301 	orr.w	r3, r3, #1
 8007c42:	6713      	str	r3, [r2, #112]	; 0x70
 8007c44:	e00b      	b.n	8007c5e <HAL_RCC_OscConfig+0x5a2>
 8007c46:	4b70      	ldr	r3, [pc, #448]	; (8007e08 <HAL_RCC_OscConfig+0x74c>)
 8007c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c4a:	4a6f      	ldr	r2, [pc, #444]	; (8007e08 <HAL_RCC_OscConfig+0x74c>)
 8007c4c:	f023 0301 	bic.w	r3, r3, #1
 8007c50:	6713      	str	r3, [r2, #112]	; 0x70
 8007c52:	4b6d      	ldr	r3, [pc, #436]	; (8007e08 <HAL_RCC_OscConfig+0x74c>)
 8007c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c56:	4a6c      	ldr	r2, [pc, #432]	; (8007e08 <HAL_RCC_OscConfig+0x74c>)
 8007c58:	f023 0304 	bic.w	r3, r3, #4
 8007c5c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	689b      	ldr	r3, [r3, #8]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d015      	beq.n	8007c92 <HAL_RCC_OscConfig+0x5d6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c66:	f7fa f8e7 	bl	8001e38 <HAL_GetTick>
 8007c6a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007c6c:	e00a      	b.n	8007c84 <HAL_RCC_OscConfig+0x5c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007c6e:	f7fa f8e3 	bl	8001e38 <HAL_GetTick>
 8007c72:	4602      	mov	r2, r0
 8007c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c76:	1ad3      	subs	r3, r2, r3
 8007c78:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d901      	bls.n	8007c84 <HAL_RCC_OscConfig+0x5c8>
        {
          return HAL_TIMEOUT;
 8007c80:	2303      	movs	r3, #3
 8007c82:	e122      	b.n	8007eca <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007c84:	4b60      	ldr	r3, [pc, #384]	; (8007e08 <HAL_RCC_OscConfig+0x74c>)
 8007c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c88:	f003 0302 	and.w	r3, r3, #2
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d0ee      	beq.n	8007c6e <HAL_RCC_OscConfig+0x5b2>
 8007c90:	e014      	b.n	8007cbc <HAL_RCC_OscConfig+0x600>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c92:	f7fa f8d1 	bl	8001e38 <HAL_GetTick>
 8007c96:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007c98:	e00a      	b.n	8007cb0 <HAL_RCC_OscConfig+0x5f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007c9a:	f7fa f8cd 	bl	8001e38 <HAL_GetTick>
 8007c9e:	4602      	mov	r2, r0
 8007ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca2:	1ad3      	subs	r3, r2, r3
 8007ca4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d901      	bls.n	8007cb0 <HAL_RCC_OscConfig+0x5f4>
        {
          return HAL_TIMEOUT;
 8007cac:	2303      	movs	r3, #3
 8007cae:	e10c      	b.n	8007eca <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007cb0:	4b55      	ldr	r3, [pc, #340]	; (8007e08 <HAL_RCC_OscConfig+0x74c>)
 8007cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cb4:	f003 0302 	and.w	r3, r3, #2
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d1ee      	bne.n	8007c9a <HAL_RCC_OscConfig+0x5de>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	f000 8101 	beq.w	8007ec8 <HAL_RCC_OscConfig+0x80c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007cc6:	4b50      	ldr	r3, [pc, #320]	; (8007e08 <HAL_RCC_OscConfig+0x74c>)
 8007cc8:	691b      	ldr	r3, [r3, #16]
 8007cca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007cce:	2b18      	cmp	r3, #24
 8007cd0:	f000 80bc 	beq.w	8007e4c <HAL_RCC_OscConfig+0x790>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd8:	2b02      	cmp	r3, #2
 8007cda:	f040 809d 	bne.w	8007e18 <HAL_RCC_OscConfig+0x75c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007cde:	4b4a      	ldr	r3, [pc, #296]	; (8007e08 <HAL_RCC_OscConfig+0x74c>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4a49      	ldr	r2, [pc, #292]	; (8007e08 <HAL_RCC_OscConfig+0x74c>)
 8007ce4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007ce8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cea:	f7fa f8a5 	bl	8001e38 <HAL_GetTick>
 8007cee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007cf0:	e008      	b.n	8007d04 <HAL_RCC_OscConfig+0x648>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007cf2:	f7fa f8a1 	bl	8001e38 <HAL_GetTick>
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfa:	1ad3      	subs	r3, r2, r3
 8007cfc:	2b02      	cmp	r3, #2
 8007cfe:	d901      	bls.n	8007d04 <HAL_RCC_OscConfig+0x648>
          {
            return HAL_TIMEOUT;
 8007d00:	2303      	movs	r3, #3
 8007d02:	e0e2      	b.n	8007eca <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007d04:	4b40      	ldr	r3, [pc, #256]	; (8007e08 <HAL_RCC_OscConfig+0x74c>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d1f0      	bne.n	8007cf2 <HAL_RCC_OscConfig+0x636>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007d10:	4b3d      	ldr	r3, [pc, #244]	; (8007e08 <HAL_RCC_OscConfig+0x74c>)
 8007d12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007d14:	4b3e      	ldr	r3, [pc, #248]	; (8007e10 <HAL_RCC_OscConfig+0x754>)
 8007d16:	4013      	ands	r3, r2
 8007d18:	687a      	ldr	r2, [r7, #4]
 8007d1a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007d1c:	687a      	ldr	r2, [r7, #4]
 8007d1e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007d20:	0112      	lsls	r2, r2, #4
 8007d22:	430a      	orrs	r2, r1
 8007d24:	4938      	ldr	r1, [pc, #224]	; (8007e08 <HAL_RCC_OscConfig+0x74c>)
 8007d26:	4313      	orrs	r3, r2
 8007d28:	628b      	str	r3, [r1, #40]	; 0x28
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d2e:	3b01      	subs	r3, #1
 8007d30:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d38:	3b01      	subs	r3, #1
 8007d3a:	025b      	lsls	r3, r3, #9
 8007d3c:	b29b      	uxth	r3, r3
 8007d3e:	431a      	orrs	r2, r3
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d44:	3b01      	subs	r3, #1
 8007d46:	041b      	lsls	r3, r3, #16
 8007d48:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007d4c:	431a      	orrs	r2, r3
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d52:	3b01      	subs	r3, #1
 8007d54:	061b      	lsls	r3, r3, #24
 8007d56:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007d5a:	492b      	ldr	r1, [pc, #172]	; (8007e08 <HAL_RCC_OscConfig+0x74c>)
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007d60:	4b29      	ldr	r3, [pc, #164]	; (8007e08 <HAL_RCC_OscConfig+0x74c>)
 8007d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d64:	4a28      	ldr	r2, [pc, #160]	; (8007e08 <HAL_RCC_OscConfig+0x74c>)
 8007d66:	f023 0301 	bic.w	r3, r3, #1
 8007d6a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007d6c:	4b26      	ldr	r3, [pc, #152]	; (8007e08 <HAL_RCC_OscConfig+0x74c>)
 8007d6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d70:	4b28      	ldr	r3, [pc, #160]	; (8007e14 <HAL_RCC_OscConfig+0x758>)
 8007d72:	4013      	ands	r3, r2
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007d78:	00d2      	lsls	r2, r2, #3
 8007d7a:	4923      	ldr	r1, [pc, #140]	; (8007e08 <HAL_RCC_OscConfig+0x74c>)
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007d80:	4b21      	ldr	r3, [pc, #132]	; (8007e08 <HAL_RCC_OscConfig+0x74c>)
 8007d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d84:	f023 020c 	bic.w	r2, r3, #12
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d8c:	491e      	ldr	r1, [pc, #120]	; (8007e08 <HAL_RCC_OscConfig+0x74c>)
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007d92:	4b1d      	ldr	r3, [pc, #116]	; (8007e08 <HAL_RCC_OscConfig+0x74c>)
 8007d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d96:	f023 0202 	bic.w	r2, r3, #2
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d9e:	491a      	ldr	r1, [pc, #104]	; (8007e08 <HAL_RCC_OscConfig+0x74c>)
 8007da0:	4313      	orrs	r3, r2
 8007da2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007da4:	4b18      	ldr	r3, [pc, #96]	; (8007e08 <HAL_RCC_OscConfig+0x74c>)
 8007da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007da8:	4a17      	ldr	r2, [pc, #92]	; (8007e08 <HAL_RCC_OscConfig+0x74c>)
 8007daa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007dae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007db0:	4b15      	ldr	r3, [pc, #84]	; (8007e08 <HAL_RCC_OscConfig+0x74c>)
 8007db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007db4:	4a14      	ldr	r2, [pc, #80]	; (8007e08 <HAL_RCC_OscConfig+0x74c>)
 8007db6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007dba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007dbc:	4b12      	ldr	r3, [pc, #72]	; (8007e08 <HAL_RCC_OscConfig+0x74c>)
 8007dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc0:	4a11      	ldr	r2, [pc, #68]	; (8007e08 <HAL_RCC_OscConfig+0x74c>)
 8007dc2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007dc6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8007dc8:	4b0f      	ldr	r3, [pc, #60]	; (8007e08 <HAL_RCC_OscConfig+0x74c>)
 8007dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dcc:	4a0e      	ldr	r2, [pc, #56]	; (8007e08 <HAL_RCC_OscConfig+0x74c>)
 8007dce:	f043 0301 	orr.w	r3, r3, #1
 8007dd2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007dd4:	4b0c      	ldr	r3, [pc, #48]	; (8007e08 <HAL_RCC_OscConfig+0x74c>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4a0b      	ldr	r2, [pc, #44]	; (8007e08 <HAL_RCC_OscConfig+0x74c>)
 8007dda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007dde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007de0:	f7fa f82a 	bl	8001e38 <HAL_GetTick>
 8007de4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007de6:	e008      	b.n	8007dfa <HAL_RCC_OscConfig+0x73e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007de8:	f7fa f826 	bl	8001e38 <HAL_GetTick>
 8007dec:	4602      	mov	r2, r0
 8007dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df0:	1ad3      	subs	r3, r2, r3
 8007df2:	2b02      	cmp	r3, #2
 8007df4:	d901      	bls.n	8007dfa <HAL_RCC_OscConfig+0x73e>
          {
            return HAL_TIMEOUT;
 8007df6:	2303      	movs	r3, #3
 8007df8:	e067      	b.n	8007eca <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007dfa:	4b03      	ldr	r3, [pc, #12]	; (8007e08 <HAL_RCC_OscConfig+0x74c>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d0f0      	beq.n	8007de8 <HAL_RCC_OscConfig+0x72c>
 8007e06:	e05f      	b.n	8007ec8 <HAL_RCC_OscConfig+0x80c>
 8007e08:	58024400 	.word	0x58024400
 8007e0c:	58024800 	.word	0x58024800
 8007e10:	fffffc0c 	.word	0xfffffc0c
 8007e14:	ffff0007 	.word	0xffff0007
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e18:	4b2e      	ldr	r3, [pc, #184]	; (8007ed4 <HAL_RCC_OscConfig+0x818>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4a2d      	ldr	r2, [pc, #180]	; (8007ed4 <HAL_RCC_OscConfig+0x818>)
 8007e1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e24:	f7fa f808 	bl	8001e38 <HAL_GetTick>
 8007e28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007e2a:	e008      	b.n	8007e3e <HAL_RCC_OscConfig+0x782>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e2c:	f7fa f804 	bl	8001e38 <HAL_GetTick>
 8007e30:	4602      	mov	r2, r0
 8007e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e34:	1ad3      	subs	r3, r2, r3
 8007e36:	2b02      	cmp	r3, #2
 8007e38:	d901      	bls.n	8007e3e <HAL_RCC_OscConfig+0x782>
          {
            return HAL_TIMEOUT;
 8007e3a:	2303      	movs	r3, #3
 8007e3c:	e045      	b.n	8007eca <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007e3e:	4b25      	ldr	r3, [pc, #148]	; (8007ed4 <HAL_RCC_OscConfig+0x818>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d1f0      	bne.n	8007e2c <HAL_RCC_OscConfig+0x770>
 8007e4a:	e03d      	b.n	8007ec8 <HAL_RCC_OscConfig+0x80c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007e4c:	4b21      	ldr	r3, [pc, #132]	; (8007ed4 <HAL_RCC_OscConfig+0x818>)
 8007e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e50:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007e52:	4b20      	ldr	r3, [pc, #128]	; (8007ed4 <HAL_RCC_OscConfig+0x818>)
 8007e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e56:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	d031      	beq.n	8007ec4 <HAL_RCC_OscConfig+0x808>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e60:	693b      	ldr	r3, [r7, #16]
 8007e62:	f003 0203 	and.w	r2, r3, #3
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	d12a      	bne.n	8007ec4 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	091b      	lsrs	r3, r3, #4
 8007e72:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e7a:	429a      	cmp	r2, r3
 8007e7c:	d122      	bne.n	8007ec4 <HAL_RCC_OscConfig+0x808>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e88:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007e8a:	429a      	cmp	r2, r3
 8007e8c:	d11a      	bne.n	8007ec4 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	0a5b      	lsrs	r3, r3, #9
 8007e92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e9a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	d111      	bne.n	8007ec4 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	0c1b      	lsrs	r3, r3, #16
 8007ea4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eac:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d108      	bne.n	8007ec4 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	0e1b      	lsrs	r3, r3, #24
 8007eb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ebe:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d001      	beq.n	8007ec8 <HAL_RCC_OscConfig+0x80c>
      {
        return HAL_ERROR;
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	e000      	b.n	8007eca <HAL_RCC_OscConfig+0x80e>
      }
    }
  }
  return HAL_OK;
 8007ec8:	2300      	movs	r3, #0
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3730      	adds	r7, #48	; 0x30
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}
 8007ed2:	bf00      	nop
 8007ed4:	58024400 	.word	0x58024400

08007ed8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b086      	sub	sp, #24
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d101      	bne.n	8007eec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007ee8:	2301      	movs	r3, #1
 8007eea:	e19c      	b.n	8008226 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007eec:	4b8a      	ldr	r3, [pc, #552]	; (8008118 <HAL_RCC_ClockConfig+0x240>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f003 030f 	and.w	r3, r3, #15
 8007ef4:	683a      	ldr	r2, [r7, #0]
 8007ef6:	429a      	cmp	r2, r3
 8007ef8:	d910      	bls.n	8007f1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007efa:	4b87      	ldr	r3, [pc, #540]	; (8008118 <HAL_RCC_ClockConfig+0x240>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f023 020f 	bic.w	r2, r3, #15
 8007f02:	4985      	ldr	r1, [pc, #532]	; (8008118 <HAL_RCC_ClockConfig+0x240>)
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	4313      	orrs	r3, r2
 8007f08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f0a:	4b83      	ldr	r3, [pc, #524]	; (8008118 <HAL_RCC_ClockConfig+0x240>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f003 030f 	and.w	r3, r3, #15
 8007f12:	683a      	ldr	r2, [r7, #0]
 8007f14:	429a      	cmp	r2, r3
 8007f16:	d001      	beq.n	8007f1c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007f18:	2301      	movs	r3, #1
 8007f1a:	e184      	b.n	8008226 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f003 0304 	and.w	r3, r3, #4
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d010      	beq.n	8007f4a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	691a      	ldr	r2, [r3, #16]
 8007f2c:	4b7b      	ldr	r3, [pc, #492]	; (800811c <HAL_RCC_ClockConfig+0x244>)
 8007f2e:	699b      	ldr	r3, [r3, #24]
 8007f30:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007f34:	429a      	cmp	r2, r3
 8007f36:	d908      	bls.n	8007f4a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007f38:	4b78      	ldr	r3, [pc, #480]	; (800811c <HAL_RCC_ClockConfig+0x244>)
 8007f3a:	699b      	ldr	r3, [r3, #24]
 8007f3c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	691b      	ldr	r3, [r3, #16]
 8007f44:	4975      	ldr	r1, [pc, #468]	; (800811c <HAL_RCC_ClockConfig+0x244>)
 8007f46:	4313      	orrs	r3, r2
 8007f48:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f003 0308 	and.w	r3, r3, #8
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d010      	beq.n	8007f78 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	695a      	ldr	r2, [r3, #20]
 8007f5a:	4b70      	ldr	r3, [pc, #448]	; (800811c <HAL_RCC_ClockConfig+0x244>)
 8007f5c:	69db      	ldr	r3, [r3, #28]
 8007f5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007f62:	429a      	cmp	r2, r3
 8007f64:	d908      	bls.n	8007f78 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007f66:	4b6d      	ldr	r3, [pc, #436]	; (800811c <HAL_RCC_ClockConfig+0x244>)
 8007f68:	69db      	ldr	r3, [r3, #28]
 8007f6a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	695b      	ldr	r3, [r3, #20]
 8007f72:	496a      	ldr	r1, [pc, #424]	; (800811c <HAL_RCC_ClockConfig+0x244>)
 8007f74:	4313      	orrs	r3, r2
 8007f76:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f003 0310 	and.w	r3, r3, #16
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d010      	beq.n	8007fa6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	699a      	ldr	r2, [r3, #24]
 8007f88:	4b64      	ldr	r3, [pc, #400]	; (800811c <HAL_RCC_ClockConfig+0x244>)
 8007f8a:	69db      	ldr	r3, [r3, #28]
 8007f8c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007f90:	429a      	cmp	r2, r3
 8007f92:	d908      	bls.n	8007fa6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007f94:	4b61      	ldr	r3, [pc, #388]	; (800811c <HAL_RCC_ClockConfig+0x244>)
 8007f96:	69db      	ldr	r3, [r3, #28]
 8007f98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	699b      	ldr	r3, [r3, #24]
 8007fa0:	495e      	ldr	r1, [pc, #376]	; (800811c <HAL_RCC_ClockConfig+0x244>)
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f003 0320 	and.w	r3, r3, #32
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d010      	beq.n	8007fd4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	69da      	ldr	r2, [r3, #28]
 8007fb6:	4b59      	ldr	r3, [pc, #356]	; (800811c <HAL_RCC_ClockConfig+0x244>)
 8007fb8:	6a1b      	ldr	r3, [r3, #32]
 8007fba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007fbe:	429a      	cmp	r2, r3
 8007fc0:	d908      	bls.n	8007fd4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007fc2:	4b56      	ldr	r3, [pc, #344]	; (800811c <HAL_RCC_ClockConfig+0x244>)
 8007fc4:	6a1b      	ldr	r3, [r3, #32]
 8007fc6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	69db      	ldr	r3, [r3, #28]
 8007fce:	4953      	ldr	r1, [pc, #332]	; (800811c <HAL_RCC_ClockConfig+0x244>)
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f003 0302 	and.w	r3, r3, #2
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d010      	beq.n	8008002 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	68da      	ldr	r2, [r3, #12]
 8007fe4:	4b4d      	ldr	r3, [pc, #308]	; (800811c <HAL_RCC_ClockConfig+0x244>)
 8007fe6:	699b      	ldr	r3, [r3, #24]
 8007fe8:	f003 030f 	and.w	r3, r3, #15
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d908      	bls.n	8008002 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ff0:	4b4a      	ldr	r3, [pc, #296]	; (800811c <HAL_RCC_ClockConfig+0x244>)
 8007ff2:	699b      	ldr	r3, [r3, #24]
 8007ff4:	f023 020f 	bic.w	r2, r3, #15
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	68db      	ldr	r3, [r3, #12]
 8007ffc:	4947      	ldr	r1, [pc, #284]	; (800811c <HAL_RCC_ClockConfig+0x244>)
 8007ffe:	4313      	orrs	r3, r2
 8008000:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f003 0301 	and.w	r3, r3, #1
 800800a:	2b00      	cmp	r3, #0
 800800c:	d055      	beq.n	80080ba <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800800e:	4b43      	ldr	r3, [pc, #268]	; (800811c <HAL_RCC_ClockConfig+0x244>)
 8008010:	699b      	ldr	r3, [r3, #24]
 8008012:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	689b      	ldr	r3, [r3, #8]
 800801a:	4940      	ldr	r1, [pc, #256]	; (800811c <HAL_RCC_ClockConfig+0x244>)
 800801c:	4313      	orrs	r3, r2
 800801e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	685b      	ldr	r3, [r3, #4]
 8008024:	2b02      	cmp	r3, #2
 8008026:	d107      	bne.n	8008038 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008028:	4b3c      	ldr	r3, [pc, #240]	; (800811c <HAL_RCC_ClockConfig+0x244>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008030:	2b00      	cmp	r3, #0
 8008032:	d121      	bne.n	8008078 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008034:	2301      	movs	r3, #1
 8008036:	e0f6      	b.n	8008226 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	685b      	ldr	r3, [r3, #4]
 800803c:	2b03      	cmp	r3, #3
 800803e:	d107      	bne.n	8008050 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008040:	4b36      	ldr	r3, [pc, #216]	; (800811c <HAL_RCC_ClockConfig+0x244>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008048:	2b00      	cmp	r3, #0
 800804a:	d115      	bne.n	8008078 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800804c:	2301      	movs	r3, #1
 800804e:	e0ea      	b.n	8008226 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	2b01      	cmp	r3, #1
 8008056:	d107      	bne.n	8008068 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008058:	4b30      	ldr	r3, [pc, #192]	; (800811c <HAL_RCC_ClockConfig+0x244>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008060:	2b00      	cmp	r3, #0
 8008062:	d109      	bne.n	8008078 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008064:	2301      	movs	r3, #1
 8008066:	e0de      	b.n	8008226 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008068:	4b2c      	ldr	r3, [pc, #176]	; (800811c <HAL_RCC_ClockConfig+0x244>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f003 0304 	and.w	r3, r3, #4
 8008070:	2b00      	cmp	r3, #0
 8008072:	d101      	bne.n	8008078 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008074:	2301      	movs	r3, #1
 8008076:	e0d6      	b.n	8008226 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008078:	4b28      	ldr	r3, [pc, #160]	; (800811c <HAL_RCC_ClockConfig+0x244>)
 800807a:	691b      	ldr	r3, [r3, #16]
 800807c:	f023 0207 	bic.w	r2, r3, #7
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	685b      	ldr	r3, [r3, #4]
 8008084:	4925      	ldr	r1, [pc, #148]	; (800811c <HAL_RCC_ClockConfig+0x244>)
 8008086:	4313      	orrs	r3, r2
 8008088:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800808a:	f7f9 fed5 	bl	8001e38 <HAL_GetTick>
 800808e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008090:	e00a      	b.n	80080a8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008092:	f7f9 fed1 	bl	8001e38 <HAL_GetTick>
 8008096:	4602      	mov	r2, r0
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	1ad3      	subs	r3, r2, r3
 800809c:	f241 3288 	movw	r2, #5000	; 0x1388
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d901      	bls.n	80080a8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80080a4:	2303      	movs	r3, #3
 80080a6:	e0be      	b.n	8008226 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080a8:	4b1c      	ldr	r3, [pc, #112]	; (800811c <HAL_RCC_ClockConfig+0x244>)
 80080aa:	691b      	ldr	r3, [r3, #16]
 80080ac:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	00db      	lsls	r3, r3, #3
 80080b6:	429a      	cmp	r2, r3
 80080b8:	d1eb      	bne.n	8008092 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f003 0302 	and.w	r3, r3, #2
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d010      	beq.n	80080e8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	68da      	ldr	r2, [r3, #12]
 80080ca:	4b14      	ldr	r3, [pc, #80]	; (800811c <HAL_RCC_ClockConfig+0x244>)
 80080cc:	699b      	ldr	r3, [r3, #24]
 80080ce:	f003 030f 	and.w	r3, r3, #15
 80080d2:	429a      	cmp	r2, r3
 80080d4:	d208      	bcs.n	80080e8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80080d6:	4b11      	ldr	r3, [pc, #68]	; (800811c <HAL_RCC_ClockConfig+0x244>)
 80080d8:	699b      	ldr	r3, [r3, #24]
 80080da:	f023 020f 	bic.w	r2, r3, #15
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	68db      	ldr	r3, [r3, #12]
 80080e2:	490e      	ldr	r1, [pc, #56]	; (800811c <HAL_RCC_ClockConfig+0x244>)
 80080e4:	4313      	orrs	r3, r2
 80080e6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80080e8:	4b0b      	ldr	r3, [pc, #44]	; (8008118 <HAL_RCC_ClockConfig+0x240>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f003 030f 	and.w	r3, r3, #15
 80080f0:	683a      	ldr	r2, [r7, #0]
 80080f2:	429a      	cmp	r2, r3
 80080f4:	d214      	bcs.n	8008120 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80080f6:	4b08      	ldr	r3, [pc, #32]	; (8008118 <HAL_RCC_ClockConfig+0x240>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f023 020f 	bic.w	r2, r3, #15
 80080fe:	4906      	ldr	r1, [pc, #24]	; (8008118 <HAL_RCC_ClockConfig+0x240>)
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	4313      	orrs	r3, r2
 8008104:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008106:	4b04      	ldr	r3, [pc, #16]	; (8008118 <HAL_RCC_ClockConfig+0x240>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f003 030f 	and.w	r3, r3, #15
 800810e:	683a      	ldr	r2, [r7, #0]
 8008110:	429a      	cmp	r2, r3
 8008112:	d005      	beq.n	8008120 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008114:	2301      	movs	r3, #1
 8008116:	e086      	b.n	8008226 <HAL_RCC_ClockConfig+0x34e>
 8008118:	52002000 	.word	0x52002000
 800811c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f003 0304 	and.w	r3, r3, #4
 8008128:	2b00      	cmp	r3, #0
 800812a:	d010      	beq.n	800814e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	691a      	ldr	r2, [r3, #16]
 8008130:	4b3f      	ldr	r3, [pc, #252]	; (8008230 <HAL_RCC_ClockConfig+0x358>)
 8008132:	699b      	ldr	r3, [r3, #24]
 8008134:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008138:	429a      	cmp	r2, r3
 800813a:	d208      	bcs.n	800814e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800813c:	4b3c      	ldr	r3, [pc, #240]	; (8008230 <HAL_RCC_ClockConfig+0x358>)
 800813e:	699b      	ldr	r3, [r3, #24]
 8008140:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	691b      	ldr	r3, [r3, #16]
 8008148:	4939      	ldr	r1, [pc, #228]	; (8008230 <HAL_RCC_ClockConfig+0x358>)
 800814a:	4313      	orrs	r3, r2
 800814c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f003 0308 	and.w	r3, r3, #8
 8008156:	2b00      	cmp	r3, #0
 8008158:	d010      	beq.n	800817c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	695a      	ldr	r2, [r3, #20]
 800815e:	4b34      	ldr	r3, [pc, #208]	; (8008230 <HAL_RCC_ClockConfig+0x358>)
 8008160:	69db      	ldr	r3, [r3, #28]
 8008162:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008166:	429a      	cmp	r2, r3
 8008168:	d208      	bcs.n	800817c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800816a:	4b31      	ldr	r3, [pc, #196]	; (8008230 <HAL_RCC_ClockConfig+0x358>)
 800816c:	69db      	ldr	r3, [r3, #28]
 800816e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	695b      	ldr	r3, [r3, #20]
 8008176:	492e      	ldr	r1, [pc, #184]	; (8008230 <HAL_RCC_ClockConfig+0x358>)
 8008178:	4313      	orrs	r3, r2
 800817a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f003 0310 	and.w	r3, r3, #16
 8008184:	2b00      	cmp	r3, #0
 8008186:	d010      	beq.n	80081aa <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	699a      	ldr	r2, [r3, #24]
 800818c:	4b28      	ldr	r3, [pc, #160]	; (8008230 <HAL_RCC_ClockConfig+0x358>)
 800818e:	69db      	ldr	r3, [r3, #28]
 8008190:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008194:	429a      	cmp	r2, r3
 8008196:	d208      	bcs.n	80081aa <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008198:	4b25      	ldr	r3, [pc, #148]	; (8008230 <HAL_RCC_ClockConfig+0x358>)
 800819a:	69db      	ldr	r3, [r3, #28]
 800819c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	699b      	ldr	r3, [r3, #24]
 80081a4:	4922      	ldr	r1, [pc, #136]	; (8008230 <HAL_RCC_ClockConfig+0x358>)
 80081a6:	4313      	orrs	r3, r2
 80081a8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f003 0320 	and.w	r3, r3, #32
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d010      	beq.n	80081d8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	69da      	ldr	r2, [r3, #28]
 80081ba:	4b1d      	ldr	r3, [pc, #116]	; (8008230 <HAL_RCC_ClockConfig+0x358>)
 80081bc:	6a1b      	ldr	r3, [r3, #32]
 80081be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80081c2:	429a      	cmp	r2, r3
 80081c4:	d208      	bcs.n	80081d8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80081c6:	4b1a      	ldr	r3, [pc, #104]	; (8008230 <HAL_RCC_ClockConfig+0x358>)
 80081c8:	6a1b      	ldr	r3, [r3, #32]
 80081ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	69db      	ldr	r3, [r3, #28]
 80081d2:	4917      	ldr	r1, [pc, #92]	; (8008230 <HAL_RCC_ClockConfig+0x358>)
 80081d4:	4313      	orrs	r3, r2
 80081d6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80081d8:	f000 f834 	bl	8008244 <HAL_RCC_GetSysClockFreq>
 80081dc:	4602      	mov	r2, r0
 80081de:	4b14      	ldr	r3, [pc, #80]	; (8008230 <HAL_RCC_ClockConfig+0x358>)
 80081e0:	699b      	ldr	r3, [r3, #24]
 80081e2:	0a1b      	lsrs	r3, r3, #8
 80081e4:	f003 030f 	and.w	r3, r3, #15
 80081e8:	4912      	ldr	r1, [pc, #72]	; (8008234 <HAL_RCC_ClockConfig+0x35c>)
 80081ea:	5ccb      	ldrb	r3, [r1, r3]
 80081ec:	f003 031f 	and.w	r3, r3, #31
 80081f0:	fa22 f303 	lsr.w	r3, r2, r3
 80081f4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80081f6:	4b0e      	ldr	r3, [pc, #56]	; (8008230 <HAL_RCC_ClockConfig+0x358>)
 80081f8:	699b      	ldr	r3, [r3, #24]
 80081fa:	f003 030f 	and.w	r3, r3, #15
 80081fe:	4a0d      	ldr	r2, [pc, #52]	; (8008234 <HAL_RCC_ClockConfig+0x35c>)
 8008200:	5cd3      	ldrb	r3, [r2, r3]
 8008202:	f003 031f 	and.w	r3, r3, #31
 8008206:	693a      	ldr	r2, [r7, #16]
 8008208:	fa22 f303 	lsr.w	r3, r2, r3
 800820c:	4a0a      	ldr	r2, [pc, #40]	; (8008238 <HAL_RCC_ClockConfig+0x360>)
 800820e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008210:	4a0a      	ldr	r2, [pc, #40]	; (800823c <HAL_RCC_ClockConfig+0x364>)
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8008216:	4b0a      	ldr	r3, [pc, #40]	; (8008240 <HAL_RCC_ClockConfig+0x368>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4618      	mov	r0, r3
 800821c:	f7f9 fdc2 	bl	8001da4 <HAL_InitTick>
 8008220:	4603      	mov	r3, r0
 8008222:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008224:	7bfb      	ldrb	r3, [r7, #15]
}
 8008226:	4618      	mov	r0, r3
 8008228:	3718      	adds	r7, #24
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}
 800822e:	bf00      	nop
 8008230:	58024400 	.word	0x58024400
 8008234:	08013aa8 	.word	0x08013aa8
 8008238:	24000004 	.word	0x24000004
 800823c:	24000000 	.word	0x24000000
 8008240:	24000020 	.word	0x24000020

08008244 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008244:	b480      	push	{r7}
 8008246:	b089      	sub	sp, #36	; 0x24
 8008248:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800824a:	4bb3      	ldr	r3, [pc, #716]	; (8008518 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800824c:	691b      	ldr	r3, [r3, #16]
 800824e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008252:	2b18      	cmp	r3, #24
 8008254:	f200 8155 	bhi.w	8008502 <HAL_RCC_GetSysClockFreq+0x2be>
 8008258:	a201      	add	r2, pc, #4	; (adr r2, 8008260 <HAL_RCC_GetSysClockFreq+0x1c>)
 800825a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800825e:	bf00      	nop
 8008260:	080082c5 	.word	0x080082c5
 8008264:	08008503 	.word	0x08008503
 8008268:	08008503 	.word	0x08008503
 800826c:	08008503 	.word	0x08008503
 8008270:	08008503 	.word	0x08008503
 8008274:	08008503 	.word	0x08008503
 8008278:	08008503 	.word	0x08008503
 800827c:	08008503 	.word	0x08008503
 8008280:	080082eb 	.word	0x080082eb
 8008284:	08008503 	.word	0x08008503
 8008288:	08008503 	.word	0x08008503
 800828c:	08008503 	.word	0x08008503
 8008290:	08008503 	.word	0x08008503
 8008294:	08008503 	.word	0x08008503
 8008298:	08008503 	.word	0x08008503
 800829c:	08008503 	.word	0x08008503
 80082a0:	080082f1 	.word	0x080082f1
 80082a4:	08008503 	.word	0x08008503
 80082a8:	08008503 	.word	0x08008503
 80082ac:	08008503 	.word	0x08008503
 80082b0:	08008503 	.word	0x08008503
 80082b4:	08008503 	.word	0x08008503
 80082b8:	08008503 	.word	0x08008503
 80082bc:	08008503 	.word	0x08008503
 80082c0:	080082f7 	.word	0x080082f7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80082c4:	4b94      	ldr	r3, [pc, #592]	; (8008518 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f003 0320 	and.w	r3, r3, #32
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d009      	beq.n	80082e4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80082d0:	4b91      	ldr	r3, [pc, #580]	; (8008518 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	08db      	lsrs	r3, r3, #3
 80082d6:	f003 0303 	and.w	r3, r3, #3
 80082da:	4a90      	ldr	r2, [pc, #576]	; (800851c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80082dc:	fa22 f303 	lsr.w	r3, r2, r3
 80082e0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80082e2:	e111      	b.n	8008508 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80082e4:	4b8d      	ldr	r3, [pc, #564]	; (800851c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80082e6:	61bb      	str	r3, [r7, #24]
    break;
 80082e8:	e10e      	b.n	8008508 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80082ea:	4b8d      	ldr	r3, [pc, #564]	; (8008520 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80082ec:	61bb      	str	r3, [r7, #24]
    break;
 80082ee:	e10b      	b.n	8008508 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80082f0:	4b8c      	ldr	r3, [pc, #560]	; (8008524 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80082f2:	61bb      	str	r3, [r7, #24]
    break;
 80082f4:	e108      	b.n	8008508 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80082f6:	4b88      	ldr	r3, [pc, #544]	; (8008518 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80082f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082fa:	f003 0303 	and.w	r3, r3, #3
 80082fe:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008300:	4b85      	ldr	r3, [pc, #532]	; (8008518 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008304:	091b      	lsrs	r3, r3, #4
 8008306:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800830a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800830c:	4b82      	ldr	r3, [pc, #520]	; (8008518 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800830e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008310:	f003 0301 	and.w	r3, r3, #1
 8008314:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008316:	4b80      	ldr	r3, [pc, #512]	; (8008518 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800831a:	08db      	lsrs	r3, r3, #3
 800831c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008320:	68fa      	ldr	r2, [r7, #12]
 8008322:	fb02 f303 	mul.w	r3, r2, r3
 8008326:	ee07 3a90 	vmov	s15, r3
 800832a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800832e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8008332:	693b      	ldr	r3, [r7, #16]
 8008334:	2b00      	cmp	r3, #0
 8008336:	f000 80e1 	beq.w	80084fc <HAL_RCC_GetSysClockFreq+0x2b8>
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	2b02      	cmp	r3, #2
 800833e:	f000 8083 	beq.w	8008448 <HAL_RCC_GetSysClockFreq+0x204>
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	2b02      	cmp	r3, #2
 8008346:	f200 80a1 	bhi.w	800848c <HAL_RCC_GetSysClockFreq+0x248>
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d003      	beq.n	8008358 <HAL_RCC_GetSysClockFreq+0x114>
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	2b01      	cmp	r3, #1
 8008354:	d056      	beq.n	8008404 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008356:	e099      	b.n	800848c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008358:	4b6f      	ldr	r3, [pc, #444]	; (8008518 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f003 0320 	and.w	r3, r3, #32
 8008360:	2b00      	cmp	r3, #0
 8008362:	d02d      	beq.n	80083c0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008364:	4b6c      	ldr	r3, [pc, #432]	; (8008518 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	08db      	lsrs	r3, r3, #3
 800836a:	f003 0303 	and.w	r3, r3, #3
 800836e:	4a6b      	ldr	r2, [pc, #428]	; (800851c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008370:	fa22 f303 	lsr.w	r3, r2, r3
 8008374:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	ee07 3a90 	vmov	s15, r3
 800837c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	ee07 3a90 	vmov	s15, r3
 8008386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800838a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800838e:	4b62      	ldr	r3, [pc, #392]	; (8008518 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008392:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008396:	ee07 3a90 	vmov	s15, r3
 800839a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800839e:	ed97 6a02 	vldr	s12, [r7, #8]
 80083a2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008528 <HAL_RCC_GetSysClockFreq+0x2e4>
 80083a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083ba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80083be:	e087      	b.n	80084d0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	ee07 3a90 	vmov	s15, r3
 80083c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083ca:	eddf 6a58 	vldr	s13, [pc, #352]	; 800852c <HAL_RCC_GetSysClockFreq+0x2e8>
 80083ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083d2:	4b51      	ldr	r3, [pc, #324]	; (8008518 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083da:	ee07 3a90 	vmov	s15, r3
 80083de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80083e6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008528 <HAL_RCC_GetSysClockFreq+0x2e4>
 80083ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008402:	e065      	b.n	80084d0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008404:	693b      	ldr	r3, [r7, #16]
 8008406:	ee07 3a90 	vmov	s15, r3
 800840a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800840e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008530 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008412:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008416:	4b40      	ldr	r3, [pc, #256]	; (8008518 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800841a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800841e:	ee07 3a90 	vmov	s15, r3
 8008422:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008426:	ed97 6a02 	vldr	s12, [r7, #8]
 800842a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008528 <HAL_RCC_GetSysClockFreq+0x2e4>
 800842e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008432:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008436:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800843a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800843e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008442:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008446:	e043      	b.n	80084d0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	ee07 3a90 	vmov	s15, r3
 800844e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008452:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008534 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008456:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800845a:	4b2f      	ldr	r3, [pc, #188]	; (8008518 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800845c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800845e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008462:	ee07 3a90 	vmov	s15, r3
 8008466:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800846a:	ed97 6a02 	vldr	s12, [r7, #8]
 800846e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008528 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008472:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008476:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800847a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800847e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008482:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008486:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800848a:	e021      	b.n	80084d0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	ee07 3a90 	vmov	s15, r3
 8008492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008496:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008530 <HAL_RCC_GetSysClockFreq+0x2ec>
 800849a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800849e:	4b1e      	ldr	r3, [pc, #120]	; (8008518 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80084a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084a6:	ee07 3a90 	vmov	s15, r3
 80084aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80084b2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008528 <HAL_RCC_GetSysClockFreq+0x2e4>
 80084b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80084ce:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80084d0:	4b11      	ldr	r3, [pc, #68]	; (8008518 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80084d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084d4:	0a5b      	lsrs	r3, r3, #9
 80084d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084da:	3301      	adds	r3, #1
 80084dc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	ee07 3a90 	vmov	s15, r3
 80084e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80084e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80084ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084f4:	ee17 3a90 	vmov	r3, s15
 80084f8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80084fa:	e005      	b.n	8008508 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80084fc:	2300      	movs	r3, #0
 80084fe:	61bb      	str	r3, [r7, #24]
    break;
 8008500:	e002      	b.n	8008508 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8008502:	4b07      	ldr	r3, [pc, #28]	; (8008520 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008504:	61bb      	str	r3, [r7, #24]
    break;
 8008506:	bf00      	nop
  }

  return sysclockfreq;
 8008508:	69bb      	ldr	r3, [r7, #24]
}
 800850a:	4618      	mov	r0, r3
 800850c:	3724      	adds	r7, #36	; 0x24
 800850e:	46bd      	mov	sp, r7
 8008510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008514:	4770      	bx	lr
 8008516:	bf00      	nop
 8008518:	58024400 	.word	0x58024400
 800851c:	03d09000 	.word	0x03d09000
 8008520:	003d0900 	.word	0x003d0900
 8008524:	00f42400 	.word	0x00f42400
 8008528:	46000000 	.word	0x46000000
 800852c:	4c742400 	.word	0x4c742400
 8008530:	4a742400 	.word	0x4a742400
 8008534:	4b742400 	.word	0x4b742400

08008538 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b082      	sub	sp, #8
 800853c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800853e:	f7ff fe81 	bl	8008244 <HAL_RCC_GetSysClockFreq>
 8008542:	4602      	mov	r2, r0
 8008544:	4b10      	ldr	r3, [pc, #64]	; (8008588 <HAL_RCC_GetHCLKFreq+0x50>)
 8008546:	699b      	ldr	r3, [r3, #24]
 8008548:	0a1b      	lsrs	r3, r3, #8
 800854a:	f003 030f 	and.w	r3, r3, #15
 800854e:	490f      	ldr	r1, [pc, #60]	; (800858c <HAL_RCC_GetHCLKFreq+0x54>)
 8008550:	5ccb      	ldrb	r3, [r1, r3]
 8008552:	f003 031f 	and.w	r3, r3, #31
 8008556:	fa22 f303 	lsr.w	r3, r2, r3
 800855a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800855c:	4b0a      	ldr	r3, [pc, #40]	; (8008588 <HAL_RCC_GetHCLKFreq+0x50>)
 800855e:	699b      	ldr	r3, [r3, #24]
 8008560:	f003 030f 	and.w	r3, r3, #15
 8008564:	4a09      	ldr	r2, [pc, #36]	; (800858c <HAL_RCC_GetHCLKFreq+0x54>)
 8008566:	5cd3      	ldrb	r3, [r2, r3]
 8008568:	f003 031f 	and.w	r3, r3, #31
 800856c:	687a      	ldr	r2, [r7, #4]
 800856e:	fa22 f303 	lsr.w	r3, r2, r3
 8008572:	4a07      	ldr	r2, [pc, #28]	; (8008590 <HAL_RCC_GetHCLKFreq+0x58>)
 8008574:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008576:	4a07      	ldr	r2, [pc, #28]	; (8008594 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800857c:	4b04      	ldr	r3, [pc, #16]	; (8008590 <HAL_RCC_GetHCLKFreq+0x58>)
 800857e:	681b      	ldr	r3, [r3, #0]
}
 8008580:	4618      	mov	r0, r3
 8008582:	3708      	adds	r7, #8
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}
 8008588:	58024400 	.word	0x58024400
 800858c:	08013aa8 	.word	0x08013aa8
 8008590:	24000004 	.word	0x24000004
 8008594:	24000000 	.word	0x24000000

08008598 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800859c:	f7ff ffcc 	bl	8008538 <HAL_RCC_GetHCLKFreq>
 80085a0:	4602      	mov	r2, r0
 80085a2:	4b06      	ldr	r3, [pc, #24]	; (80085bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80085a4:	69db      	ldr	r3, [r3, #28]
 80085a6:	091b      	lsrs	r3, r3, #4
 80085a8:	f003 0307 	and.w	r3, r3, #7
 80085ac:	4904      	ldr	r1, [pc, #16]	; (80085c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80085ae:	5ccb      	ldrb	r3, [r1, r3]
 80085b0:	f003 031f 	and.w	r3, r3, #31
 80085b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	bd80      	pop	{r7, pc}
 80085bc:	58024400 	.word	0x58024400
 80085c0:	08013aa8 	.word	0x08013aa8

080085c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80085c8:	f7ff ffb6 	bl	8008538 <HAL_RCC_GetHCLKFreq>
 80085cc:	4602      	mov	r2, r0
 80085ce:	4b06      	ldr	r3, [pc, #24]	; (80085e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80085d0:	69db      	ldr	r3, [r3, #28]
 80085d2:	0a1b      	lsrs	r3, r3, #8
 80085d4:	f003 0307 	and.w	r3, r3, #7
 80085d8:	4904      	ldr	r1, [pc, #16]	; (80085ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80085da:	5ccb      	ldrb	r3, [r1, r3]
 80085dc:	f003 031f 	and.w	r3, r3, #31
 80085e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	bd80      	pop	{r7, pc}
 80085e8:	58024400 	.word	0x58024400
 80085ec:	08013aa8 	.word	0x08013aa8

080085f0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b083      	sub	sp, #12
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
 80085f8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	223f      	movs	r2, #63	; 0x3f
 80085fe:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008600:	4b1a      	ldr	r3, [pc, #104]	; (800866c <HAL_RCC_GetClockConfig+0x7c>)
 8008602:	691b      	ldr	r3, [r3, #16]
 8008604:	f003 0207 	and.w	r2, r3, #7
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800860c:	4b17      	ldr	r3, [pc, #92]	; (800866c <HAL_RCC_GetClockConfig+0x7c>)
 800860e:	699b      	ldr	r3, [r3, #24]
 8008610:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8008618:	4b14      	ldr	r3, [pc, #80]	; (800866c <HAL_RCC_GetClockConfig+0x7c>)
 800861a:	699b      	ldr	r3, [r3, #24]
 800861c:	f003 020f 	and.w	r2, r3, #15
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8008624:	4b11      	ldr	r3, [pc, #68]	; (800866c <HAL_RCC_GetClockConfig+0x7c>)
 8008626:	699b      	ldr	r3, [r3, #24]
 8008628:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8008630:	4b0e      	ldr	r3, [pc, #56]	; (800866c <HAL_RCC_GetClockConfig+0x7c>)
 8008632:	69db      	ldr	r3, [r3, #28]
 8008634:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800863c:	4b0b      	ldr	r3, [pc, #44]	; (800866c <HAL_RCC_GetClockConfig+0x7c>)
 800863e:	69db      	ldr	r3, [r3, #28]
 8008640:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8008648:	4b08      	ldr	r3, [pc, #32]	; (800866c <HAL_RCC_GetClockConfig+0x7c>)
 800864a:	6a1b      	ldr	r3, [r3, #32]
 800864c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008654:	4b06      	ldr	r3, [pc, #24]	; (8008670 <HAL_RCC_GetClockConfig+0x80>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f003 020f 	and.w	r2, r3, #15
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	601a      	str	r2, [r3, #0]
}
 8008660:	bf00      	nop
 8008662:	370c      	adds	r7, #12
 8008664:	46bd      	mov	sp, r7
 8008666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866a:	4770      	bx	lr
 800866c:	58024400 	.word	0x58024400
 8008670:	52002000 	.word	0x52002000

08008674 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b086      	sub	sp, #24
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800867c:	2300      	movs	r3, #0
 800867e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008680:	2300      	movs	r3, #0
 8008682:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800868c:	2b00      	cmp	r3, #0
 800868e:	d03f      	beq.n	8008710 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008694:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008698:	d02a      	beq.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800869a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800869e:	d824      	bhi.n	80086ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80086a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80086a4:	d018      	beq.n	80086d8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80086a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80086aa:	d81e      	bhi.n	80086ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d003      	beq.n	80086b8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80086b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80086b4:	d007      	beq.n	80086c6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80086b6:	e018      	b.n	80086ea <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086b8:	4ba3      	ldr	r3, [pc, #652]	; (8008948 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80086ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086bc:	4aa2      	ldr	r2, [pc, #648]	; (8008948 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80086be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80086c4:	e015      	b.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	3304      	adds	r3, #4
 80086ca:	2102      	movs	r1, #2
 80086cc:	4618      	mov	r0, r3
 80086ce:	f001 f9d5 	bl	8009a7c <RCCEx_PLL2_Config>
 80086d2:	4603      	mov	r3, r0
 80086d4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80086d6:	e00c      	b.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	3324      	adds	r3, #36	; 0x24
 80086dc:	2102      	movs	r1, #2
 80086de:	4618      	mov	r0, r3
 80086e0:	f001 fa7e 	bl	8009be0 <RCCEx_PLL3_Config>
 80086e4:	4603      	mov	r3, r0
 80086e6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80086e8:	e003      	b.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80086ea:	2301      	movs	r3, #1
 80086ec:	75fb      	strb	r3, [r7, #23]
      break;
 80086ee:	e000      	b.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80086f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80086f2:	7dfb      	ldrb	r3, [r7, #23]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d109      	bne.n	800870c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80086f8:	4b93      	ldr	r3, [pc, #588]	; (8008948 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80086fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008704:	4990      	ldr	r1, [pc, #576]	; (8008948 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008706:	4313      	orrs	r3, r2
 8008708:	650b      	str	r3, [r1, #80]	; 0x50
 800870a:	e001      	b.n	8008710 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800870c:	7dfb      	ldrb	r3, [r7, #23]
 800870e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008718:	2b00      	cmp	r3, #0
 800871a:	d03d      	beq.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008720:	2b04      	cmp	r3, #4
 8008722:	d826      	bhi.n	8008772 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008724:	a201      	add	r2, pc, #4	; (adr r2, 800872c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8008726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800872a:	bf00      	nop
 800872c:	08008741 	.word	0x08008741
 8008730:	0800874f 	.word	0x0800874f
 8008734:	08008761 	.word	0x08008761
 8008738:	08008779 	.word	0x08008779
 800873c:	08008779 	.word	0x08008779
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008740:	4b81      	ldr	r3, [pc, #516]	; (8008948 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008744:	4a80      	ldr	r2, [pc, #512]	; (8008948 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008746:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800874a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800874c:	e015      	b.n	800877a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	3304      	adds	r3, #4
 8008752:	2100      	movs	r1, #0
 8008754:	4618      	mov	r0, r3
 8008756:	f001 f991 	bl	8009a7c <RCCEx_PLL2_Config>
 800875a:	4603      	mov	r3, r0
 800875c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800875e:	e00c      	b.n	800877a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	3324      	adds	r3, #36	; 0x24
 8008764:	2100      	movs	r1, #0
 8008766:	4618      	mov	r0, r3
 8008768:	f001 fa3a 	bl	8009be0 <RCCEx_PLL3_Config>
 800876c:	4603      	mov	r3, r0
 800876e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008770:	e003      	b.n	800877a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008772:	2301      	movs	r3, #1
 8008774:	75fb      	strb	r3, [r7, #23]
      break;
 8008776:	e000      	b.n	800877a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8008778:	bf00      	nop
    }

    if(ret == HAL_OK)
 800877a:	7dfb      	ldrb	r3, [r7, #23]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d109      	bne.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008780:	4b71      	ldr	r3, [pc, #452]	; (8008948 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008782:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008784:	f023 0207 	bic.w	r2, r3, #7
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800878c:	496e      	ldr	r1, [pc, #440]	; (8008948 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800878e:	4313      	orrs	r3, r2
 8008790:	650b      	str	r3, [r1, #80]	; 0x50
 8008792:	e001      	b.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008794:	7dfb      	ldrb	r3, [r7, #23]
 8008796:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d042      	beq.n	800882a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087ac:	d02b      	beq.n	8008806 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80087ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087b2:	d825      	bhi.n	8008800 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80087b4:	2bc0      	cmp	r3, #192	; 0xc0
 80087b6:	d028      	beq.n	800880a <HAL_RCCEx_PeriphCLKConfig+0x196>
 80087b8:	2bc0      	cmp	r3, #192	; 0xc0
 80087ba:	d821      	bhi.n	8008800 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80087bc:	2b80      	cmp	r3, #128	; 0x80
 80087be:	d016      	beq.n	80087ee <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80087c0:	2b80      	cmp	r3, #128	; 0x80
 80087c2:	d81d      	bhi.n	8008800 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d002      	beq.n	80087ce <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80087c8:	2b40      	cmp	r3, #64	; 0x40
 80087ca:	d007      	beq.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0x168>
 80087cc:	e018      	b.n	8008800 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087ce:	4b5e      	ldr	r3, [pc, #376]	; (8008948 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80087d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087d2:	4a5d      	ldr	r2, [pc, #372]	; (8008948 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80087d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087d8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80087da:	e017      	b.n	800880c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	3304      	adds	r3, #4
 80087e0:	2100      	movs	r1, #0
 80087e2:	4618      	mov	r0, r3
 80087e4:	f001 f94a 	bl	8009a7c <RCCEx_PLL2_Config>
 80087e8:	4603      	mov	r3, r0
 80087ea:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80087ec:	e00e      	b.n	800880c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	3324      	adds	r3, #36	; 0x24
 80087f2:	2100      	movs	r1, #0
 80087f4:	4618      	mov	r0, r3
 80087f6:	f001 f9f3 	bl	8009be0 <RCCEx_PLL3_Config>
 80087fa:	4603      	mov	r3, r0
 80087fc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80087fe:	e005      	b.n	800880c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008800:	2301      	movs	r3, #1
 8008802:	75fb      	strb	r3, [r7, #23]
      break;
 8008804:	e002      	b.n	800880c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8008806:	bf00      	nop
 8008808:	e000      	b.n	800880c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800880a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800880c:	7dfb      	ldrb	r3, [r7, #23]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d109      	bne.n	8008826 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008812:	4b4d      	ldr	r3, [pc, #308]	; (8008948 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008814:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008816:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800881e:	494a      	ldr	r1, [pc, #296]	; (8008948 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008820:	4313      	orrs	r3, r2
 8008822:	650b      	str	r3, [r1, #80]	; 0x50
 8008824:	e001      	b.n	800882a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008826:	7dfb      	ldrb	r3, [r7, #23]
 8008828:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008832:	2b00      	cmp	r3, #0
 8008834:	d049      	beq.n	80088ca <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800883c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008840:	d030      	beq.n	80088a4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8008842:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008846:	d82a      	bhi.n	800889e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008848:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800884c:	d02c      	beq.n	80088a8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800884e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008852:	d824      	bhi.n	800889e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008854:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008858:	d018      	beq.n	800888c <HAL_RCCEx_PeriphCLKConfig+0x218>
 800885a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800885e:	d81e      	bhi.n	800889e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008860:	2b00      	cmp	r3, #0
 8008862:	d003      	beq.n	800886c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8008864:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008868:	d007      	beq.n	800887a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800886a:	e018      	b.n	800889e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800886c:	4b36      	ldr	r3, [pc, #216]	; (8008948 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800886e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008870:	4a35      	ldr	r2, [pc, #212]	; (8008948 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008872:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008876:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008878:	e017      	b.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	3304      	adds	r3, #4
 800887e:	2100      	movs	r1, #0
 8008880:	4618      	mov	r0, r3
 8008882:	f001 f8fb 	bl	8009a7c <RCCEx_PLL2_Config>
 8008886:	4603      	mov	r3, r0
 8008888:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800888a:	e00e      	b.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	3324      	adds	r3, #36	; 0x24
 8008890:	2100      	movs	r1, #0
 8008892:	4618      	mov	r0, r3
 8008894:	f001 f9a4 	bl	8009be0 <RCCEx_PLL3_Config>
 8008898:	4603      	mov	r3, r0
 800889a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800889c:	e005      	b.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800889e:	2301      	movs	r3, #1
 80088a0:	75fb      	strb	r3, [r7, #23]
      break;
 80088a2:	e002      	b.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80088a4:	bf00      	nop
 80088a6:	e000      	b.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80088a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80088aa:	7dfb      	ldrb	r3, [r7, #23]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d10a      	bne.n	80088c6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80088b0:	4b25      	ldr	r3, [pc, #148]	; (8008948 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80088b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088b4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80088be:	4922      	ldr	r1, [pc, #136]	; (8008948 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80088c0:	4313      	orrs	r3, r2
 80088c2:	658b      	str	r3, [r1, #88]	; 0x58
 80088c4:	e001      	b.n	80088ca <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088c6:	7dfb      	ldrb	r3, [r7, #23]
 80088c8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d04b      	beq.n	800896e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80088dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80088e0:	d030      	beq.n	8008944 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80088e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80088e6:	d82a      	bhi.n	800893e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80088e8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80088ec:	d02e      	beq.n	800894c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80088ee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80088f2:	d824      	bhi.n	800893e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80088f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80088f8:	d018      	beq.n	800892c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80088fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80088fe:	d81e      	bhi.n	800893e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008900:	2b00      	cmp	r3, #0
 8008902:	d003      	beq.n	800890c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008904:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008908:	d007      	beq.n	800891a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800890a:	e018      	b.n	800893e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800890c:	4b0e      	ldr	r3, [pc, #56]	; (8008948 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800890e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008910:	4a0d      	ldr	r2, [pc, #52]	; (8008948 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008912:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008916:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008918:	e019      	b.n	800894e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	3304      	adds	r3, #4
 800891e:	2100      	movs	r1, #0
 8008920:	4618      	mov	r0, r3
 8008922:	f001 f8ab 	bl	8009a7c <RCCEx_PLL2_Config>
 8008926:	4603      	mov	r3, r0
 8008928:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800892a:	e010      	b.n	800894e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	3324      	adds	r3, #36	; 0x24
 8008930:	2100      	movs	r1, #0
 8008932:	4618      	mov	r0, r3
 8008934:	f001 f954 	bl	8009be0 <RCCEx_PLL3_Config>
 8008938:	4603      	mov	r3, r0
 800893a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800893c:	e007      	b.n	800894e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800893e:	2301      	movs	r3, #1
 8008940:	75fb      	strb	r3, [r7, #23]
      break;
 8008942:	e004      	b.n	800894e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8008944:	bf00      	nop
 8008946:	e002      	b.n	800894e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8008948:	58024400 	.word	0x58024400
      break;
 800894c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800894e:	7dfb      	ldrb	r3, [r7, #23]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d10a      	bne.n	800896a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008954:	4b99      	ldr	r3, [pc, #612]	; (8008bbc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008958:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008962:	4996      	ldr	r1, [pc, #600]	; (8008bbc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008964:	4313      	orrs	r3, r2
 8008966:	658b      	str	r3, [r1, #88]	; 0x58
 8008968:	e001      	b.n	800896e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800896a:	7dfb      	ldrb	r3, [r7, #23]
 800896c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008976:	2b00      	cmp	r3, #0
 8008978:	d032      	beq.n	80089e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800897e:	2b30      	cmp	r3, #48	; 0x30
 8008980:	d01c      	beq.n	80089bc <HAL_RCCEx_PeriphCLKConfig+0x348>
 8008982:	2b30      	cmp	r3, #48	; 0x30
 8008984:	d817      	bhi.n	80089b6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8008986:	2b20      	cmp	r3, #32
 8008988:	d00c      	beq.n	80089a4 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800898a:	2b20      	cmp	r3, #32
 800898c:	d813      	bhi.n	80089b6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800898e:	2b00      	cmp	r3, #0
 8008990:	d016      	beq.n	80089c0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8008992:	2b10      	cmp	r3, #16
 8008994:	d10f      	bne.n	80089b6 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008996:	4b89      	ldr	r3, [pc, #548]	; (8008bbc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800899a:	4a88      	ldr	r2, [pc, #544]	; (8008bbc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800899c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80089a2:	e00e      	b.n	80089c2 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	3304      	adds	r3, #4
 80089a8:	2102      	movs	r1, #2
 80089aa:	4618      	mov	r0, r3
 80089ac:	f001 f866 	bl	8009a7c <RCCEx_PLL2_Config>
 80089b0:	4603      	mov	r3, r0
 80089b2:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80089b4:	e005      	b.n	80089c2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80089b6:	2301      	movs	r3, #1
 80089b8:	75fb      	strb	r3, [r7, #23]
      break;
 80089ba:	e002      	b.n	80089c2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80089bc:	bf00      	nop
 80089be:	e000      	b.n	80089c2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80089c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80089c2:	7dfb      	ldrb	r3, [r7, #23]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d109      	bne.n	80089dc <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80089c8:	4b7c      	ldr	r3, [pc, #496]	; (8008bbc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80089ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089cc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089d4:	4979      	ldr	r1, [pc, #484]	; (8008bbc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80089d6:	4313      	orrs	r3, r2
 80089d8:	64cb      	str	r3, [r1, #76]	; 0x4c
 80089da:	e001      	b.n	80089e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089dc:	7dfb      	ldrb	r3, [r7, #23]
 80089de:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d047      	beq.n	8008a7c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80089f4:	d030      	beq.n	8008a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80089f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80089fa:	d82a      	bhi.n	8008a52 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80089fc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008a00:	d02c      	beq.n	8008a5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8008a02:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008a06:	d824      	bhi.n	8008a52 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008a08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a0c:	d018      	beq.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8008a0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a12:	d81e      	bhi.n	8008a52 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d003      	beq.n	8008a20 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8008a18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a1c:	d007      	beq.n	8008a2e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8008a1e:	e018      	b.n	8008a52 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a20:	4b66      	ldr	r3, [pc, #408]	; (8008bbc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a24:	4a65      	ldr	r2, [pc, #404]	; (8008bbc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008a26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a2a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008a2c:	e017      	b.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	3304      	adds	r3, #4
 8008a32:	2100      	movs	r1, #0
 8008a34:	4618      	mov	r0, r3
 8008a36:	f001 f821 	bl	8009a7c <RCCEx_PLL2_Config>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008a3e:	e00e      	b.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	3324      	adds	r3, #36	; 0x24
 8008a44:	2100      	movs	r1, #0
 8008a46:	4618      	mov	r0, r3
 8008a48:	f001 f8ca 	bl	8009be0 <RCCEx_PLL3_Config>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008a50:	e005      	b.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008a52:	2301      	movs	r3, #1
 8008a54:	75fb      	strb	r3, [r7, #23]
      break;
 8008a56:	e002      	b.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8008a58:	bf00      	nop
 8008a5a:	e000      	b.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8008a5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a5e:	7dfb      	ldrb	r3, [r7, #23]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d109      	bne.n	8008a78 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008a64:	4b55      	ldr	r3, [pc, #340]	; (8008bbc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008a66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a68:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a70:	4952      	ldr	r1, [pc, #328]	; (8008bbc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008a72:	4313      	orrs	r3, r2
 8008a74:	650b      	str	r3, [r1, #80]	; 0x50
 8008a76:	e001      	b.n	8008a7c <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a78:	7dfb      	ldrb	r3, [r7, #23]
 8008a7a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d049      	beq.n	8008b1c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008a90:	d02e      	beq.n	8008af0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8008a92:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008a96:	d828      	bhi.n	8008aea <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008a98:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008a9c:	d02a      	beq.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8008a9e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008aa2:	d822      	bhi.n	8008aea <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008aa4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008aa8:	d026      	beq.n	8008af8 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8008aaa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008aae:	d81c      	bhi.n	8008aea <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008ab0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ab4:	d010      	beq.n	8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8008ab6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008aba:	d816      	bhi.n	8008aea <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d01d      	beq.n	8008afc <HAL_RCCEx_PeriphCLKConfig+0x488>
 8008ac0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ac4:	d111      	bne.n	8008aea <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	3304      	adds	r3, #4
 8008aca:	2101      	movs	r1, #1
 8008acc:	4618      	mov	r0, r3
 8008ace:	f000 ffd5 	bl	8009a7c <RCCEx_PLL2_Config>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008ad6:	e012      	b.n	8008afe <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	3324      	adds	r3, #36	; 0x24
 8008adc:	2101      	movs	r1, #1
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f001 f87e 	bl	8009be0 <RCCEx_PLL3_Config>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008ae8:	e009      	b.n	8008afe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008aea:	2301      	movs	r3, #1
 8008aec:	75fb      	strb	r3, [r7, #23]
      break;
 8008aee:	e006      	b.n	8008afe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008af0:	bf00      	nop
 8008af2:	e004      	b.n	8008afe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008af4:	bf00      	nop
 8008af6:	e002      	b.n	8008afe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008af8:	bf00      	nop
 8008afa:	e000      	b.n	8008afe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008afc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008afe:	7dfb      	ldrb	r3, [r7, #23]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d109      	bne.n	8008b18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008b04:	4b2d      	ldr	r3, [pc, #180]	; (8008bbc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008b06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b08:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b10:	492a      	ldr	r1, [pc, #168]	; (8008bbc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008b12:	4313      	orrs	r3, r2
 8008b14:	650b      	str	r3, [r1, #80]	; 0x50
 8008b16:	e001      	b.n	8008b1c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b18:	7dfb      	ldrb	r3, [r7, #23]
 8008b1a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d04d      	beq.n	8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008b2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008b32:	d02e      	beq.n	8008b92 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8008b34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008b38:	d828      	bhi.n	8008b8c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b3e:	d02a      	beq.n	8008b96 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8008b40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b44:	d822      	bhi.n	8008b8c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008b46:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008b4a:	d026      	beq.n	8008b9a <HAL_RCCEx_PeriphCLKConfig+0x526>
 8008b4c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008b50:	d81c      	bhi.n	8008b8c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008b52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b56:	d010      	beq.n	8008b7a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8008b58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b5c:	d816      	bhi.n	8008b8c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d01d      	beq.n	8008b9e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8008b62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008b66:	d111      	bne.n	8008b8c <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	3304      	adds	r3, #4
 8008b6c:	2101      	movs	r1, #1
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f000 ff84 	bl	8009a7c <RCCEx_PLL2_Config>
 8008b74:	4603      	mov	r3, r0
 8008b76:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008b78:	e012      	b.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	3324      	adds	r3, #36	; 0x24
 8008b7e:	2101      	movs	r1, #1
 8008b80:	4618      	mov	r0, r3
 8008b82:	f001 f82d 	bl	8009be0 <RCCEx_PLL3_Config>
 8008b86:	4603      	mov	r3, r0
 8008b88:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008b8a:	e009      	b.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	75fb      	strb	r3, [r7, #23]
      break;
 8008b90:	e006      	b.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008b92:	bf00      	nop
 8008b94:	e004      	b.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008b96:	bf00      	nop
 8008b98:	e002      	b.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008b9a:	bf00      	nop
 8008b9c:	e000      	b.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008b9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ba0:	7dfb      	ldrb	r3, [r7, #23]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d10c      	bne.n	8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008ba6:	4b05      	ldr	r3, [pc, #20]	; (8008bbc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008baa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008bb4:	4901      	ldr	r1, [pc, #4]	; (8008bbc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008bb6:	4313      	orrs	r3, r2
 8008bb8:	658b      	str	r3, [r1, #88]	; 0x58
 8008bba:	e003      	b.n	8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8008bbc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bc0:	7dfb      	ldrb	r3, [r7, #23]
 8008bc2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d02f      	beq.n	8008c30 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008bd8:	d00e      	beq.n	8008bf8 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8008bda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008bde:	d814      	bhi.n	8008c0a <HAL_RCCEx_PeriphCLKConfig+0x596>
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d015      	beq.n	8008c10 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8008be4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008be8:	d10f      	bne.n	8008c0a <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008bea:	4baf      	ldr	r3, [pc, #700]	; (8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bee:	4aae      	ldr	r2, [pc, #696]	; (8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008bf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008bf4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008bf6:	e00c      	b.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	3304      	adds	r3, #4
 8008bfc:	2101      	movs	r1, #1
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f000 ff3c 	bl	8009a7c <RCCEx_PLL2_Config>
 8008c04:	4603      	mov	r3, r0
 8008c06:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008c08:	e003      	b.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	75fb      	strb	r3, [r7, #23]
      break;
 8008c0e:	e000      	b.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8008c10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c12:	7dfb      	ldrb	r3, [r7, #23]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d109      	bne.n	8008c2c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008c18:	4ba3      	ldr	r3, [pc, #652]	; (8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008c1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c1c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c24:	49a0      	ldr	r1, [pc, #640]	; (8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008c26:	4313      	orrs	r3, r2
 8008c28:	650b      	str	r3, [r1, #80]	; 0x50
 8008c2a:	e001      	b.n	8008c30 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c2c:	7dfb      	ldrb	r3, [r7, #23]
 8008c2e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d032      	beq.n	8008ca2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c40:	2b03      	cmp	r3, #3
 8008c42:	d81b      	bhi.n	8008c7c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8008c44:	a201      	add	r2, pc, #4	; (adr r2, 8008c4c <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8008c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c4a:	bf00      	nop
 8008c4c:	08008c83 	.word	0x08008c83
 8008c50:	08008c5d 	.word	0x08008c5d
 8008c54:	08008c6b 	.word	0x08008c6b
 8008c58:	08008c83 	.word	0x08008c83
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c5c:	4b92      	ldr	r3, [pc, #584]	; (8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c60:	4a91      	ldr	r2, [pc, #580]	; (8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008c62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c66:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008c68:	e00c      	b.n	8008c84 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	3304      	adds	r3, #4
 8008c6e:	2102      	movs	r1, #2
 8008c70:	4618      	mov	r0, r3
 8008c72:	f000 ff03 	bl	8009a7c <RCCEx_PLL2_Config>
 8008c76:	4603      	mov	r3, r0
 8008c78:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008c7a:	e003      	b.n	8008c84 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	75fb      	strb	r3, [r7, #23]
      break;
 8008c80:	e000      	b.n	8008c84 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8008c82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c84:	7dfb      	ldrb	r3, [r7, #23]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d109      	bne.n	8008c9e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008c8a:	4b87      	ldr	r3, [pc, #540]	; (8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c8e:	f023 0203 	bic.w	r2, r3, #3
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c96:	4984      	ldr	r1, [pc, #528]	; (8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008c98:	4313      	orrs	r3, r2
 8008c9a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008c9c:	e001      	b.n	8008ca2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c9e:	7dfb      	ldrb	r3, [r7, #23]
 8008ca0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	f000 8086 	beq.w	8008dbc <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008cb0:	4b7e      	ldr	r3, [pc, #504]	; (8008eac <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	4a7d      	ldr	r2, [pc, #500]	; (8008eac <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8008cb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008cba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008cbc:	f7f9 f8bc 	bl	8001e38 <HAL_GetTick>
 8008cc0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008cc2:	e009      	b.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008cc4:	f7f9 f8b8 	bl	8001e38 <HAL_GetTick>
 8008cc8:	4602      	mov	r2, r0
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	1ad3      	subs	r3, r2, r3
 8008cce:	2b64      	cmp	r3, #100	; 0x64
 8008cd0:	d902      	bls.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8008cd2:	2303      	movs	r3, #3
 8008cd4:	75fb      	strb	r3, [r7, #23]
        break;
 8008cd6:	e005      	b.n	8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008cd8:	4b74      	ldr	r3, [pc, #464]	; (8008eac <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d0ef      	beq.n	8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8008ce4:	7dfb      	ldrb	r3, [r7, #23]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d166      	bne.n	8008db8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008cea:	4b6f      	ldr	r3, [pc, #444]	; (8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008cec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008cf4:	4053      	eors	r3, r2
 8008cf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d013      	beq.n	8008d26 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008cfe:	4b6a      	ldr	r3, [pc, #424]	; (8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d06:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008d08:	4b67      	ldr	r3, [pc, #412]	; (8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d0c:	4a66      	ldr	r2, [pc, #408]	; (8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008d0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d12:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008d14:	4b64      	ldr	r3, [pc, #400]	; (8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d18:	4a63      	ldr	r2, [pc, #396]	; (8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008d1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d1e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008d20:	4a61      	ldr	r2, [pc, #388]	; (8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008d2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d30:	d115      	bne.n	8008d5e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d32:	f7f9 f881 	bl	8001e38 <HAL_GetTick>
 8008d36:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008d38:	e00b      	b.n	8008d52 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d3a:	f7f9 f87d 	bl	8001e38 <HAL_GetTick>
 8008d3e:	4602      	mov	r2, r0
 8008d40:	693b      	ldr	r3, [r7, #16]
 8008d42:	1ad3      	subs	r3, r2, r3
 8008d44:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d902      	bls.n	8008d52 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8008d4c:	2303      	movs	r3, #3
 8008d4e:	75fb      	strb	r3, [r7, #23]
            break;
 8008d50:	e005      	b.n	8008d5e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008d52:	4b55      	ldr	r3, [pc, #340]	; (8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d56:	f003 0302 	and.w	r3, r3, #2
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d0ed      	beq.n	8008d3a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8008d5e:	7dfb      	ldrb	r3, [r7, #23]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d126      	bne.n	8008db2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008d6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008d72:	d10d      	bne.n	8008d90 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8008d74:	4b4c      	ldr	r3, [pc, #304]	; (8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008d76:	691b      	ldr	r3, [r3, #16]
 8008d78:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008d82:	0919      	lsrs	r1, r3, #4
 8008d84:	4b4a      	ldr	r3, [pc, #296]	; (8008eb0 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8008d86:	400b      	ands	r3, r1
 8008d88:	4947      	ldr	r1, [pc, #284]	; (8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008d8a:	4313      	orrs	r3, r2
 8008d8c:	610b      	str	r3, [r1, #16]
 8008d8e:	e005      	b.n	8008d9c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8008d90:	4b45      	ldr	r3, [pc, #276]	; (8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008d92:	691b      	ldr	r3, [r3, #16]
 8008d94:	4a44      	ldr	r2, [pc, #272]	; (8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008d96:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008d9a:	6113      	str	r3, [r2, #16]
 8008d9c:	4b42      	ldr	r3, [pc, #264]	; (8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008d9e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008da6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008daa:	493f      	ldr	r1, [pc, #252]	; (8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008dac:	4313      	orrs	r3, r2
 8008dae:	670b      	str	r3, [r1, #112]	; 0x70
 8008db0:	e004      	b.n	8008dbc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008db2:	7dfb      	ldrb	r3, [r7, #23]
 8008db4:	75bb      	strb	r3, [r7, #22]
 8008db6:	e001      	b.n	8008dbc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008db8:	7dfb      	ldrb	r3, [r7, #23]
 8008dba:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f003 0301 	and.w	r3, r3, #1
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	f000 8085 	beq.w	8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008dce:	2b28      	cmp	r3, #40	; 0x28
 8008dd0:	d866      	bhi.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8008dd2:	a201      	add	r2, pc, #4	; (adr r2, 8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8008dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dd8:	08008eb5 	.word	0x08008eb5
 8008ddc:	08008ea1 	.word	0x08008ea1
 8008de0:	08008ea1 	.word	0x08008ea1
 8008de4:	08008ea1 	.word	0x08008ea1
 8008de8:	08008ea1 	.word	0x08008ea1
 8008dec:	08008ea1 	.word	0x08008ea1
 8008df0:	08008ea1 	.word	0x08008ea1
 8008df4:	08008ea1 	.word	0x08008ea1
 8008df8:	08008e7d 	.word	0x08008e7d
 8008dfc:	08008ea1 	.word	0x08008ea1
 8008e00:	08008ea1 	.word	0x08008ea1
 8008e04:	08008ea1 	.word	0x08008ea1
 8008e08:	08008ea1 	.word	0x08008ea1
 8008e0c:	08008ea1 	.word	0x08008ea1
 8008e10:	08008ea1 	.word	0x08008ea1
 8008e14:	08008ea1 	.word	0x08008ea1
 8008e18:	08008e8f 	.word	0x08008e8f
 8008e1c:	08008ea1 	.word	0x08008ea1
 8008e20:	08008ea1 	.word	0x08008ea1
 8008e24:	08008ea1 	.word	0x08008ea1
 8008e28:	08008ea1 	.word	0x08008ea1
 8008e2c:	08008ea1 	.word	0x08008ea1
 8008e30:	08008ea1 	.word	0x08008ea1
 8008e34:	08008ea1 	.word	0x08008ea1
 8008e38:	08008eb5 	.word	0x08008eb5
 8008e3c:	08008ea1 	.word	0x08008ea1
 8008e40:	08008ea1 	.word	0x08008ea1
 8008e44:	08008ea1 	.word	0x08008ea1
 8008e48:	08008ea1 	.word	0x08008ea1
 8008e4c:	08008ea1 	.word	0x08008ea1
 8008e50:	08008ea1 	.word	0x08008ea1
 8008e54:	08008ea1 	.word	0x08008ea1
 8008e58:	08008eb5 	.word	0x08008eb5
 8008e5c:	08008ea1 	.word	0x08008ea1
 8008e60:	08008ea1 	.word	0x08008ea1
 8008e64:	08008ea1 	.word	0x08008ea1
 8008e68:	08008ea1 	.word	0x08008ea1
 8008e6c:	08008ea1 	.word	0x08008ea1
 8008e70:	08008ea1 	.word	0x08008ea1
 8008e74:	08008ea1 	.word	0x08008ea1
 8008e78:	08008eb5 	.word	0x08008eb5
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	3304      	adds	r3, #4
 8008e80:	2101      	movs	r1, #1
 8008e82:	4618      	mov	r0, r3
 8008e84:	f000 fdfa 	bl	8009a7c <RCCEx_PLL2_Config>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008e8c:	e013      	b.n	8008eb6 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	3324      	adds	r3, #36	; 0x24
 8008e92:	2101      	movs	r1, #1
 8008e94:	4618      	mov	r0, r3
 8008e96:	f000 fea3 	bl	8009be0 <RCCEx_PLL3_Config>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008e9e:	e00a      	b.n	8008eb6 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	75fb      	strb	r3, [r7, #23]
      break;
 8008ea4:	e007      	b.n	8008eb6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8008ea6:	bf00      	nop
 8008ea8:	58024400 	.word	0x58024400
 8008eac:	58024800 	.word	0x58024800
 8008eb0:	00ffffcf 	.word	0x00ffffcf
      break;
 8008eb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008eb6:	7dfb      	ldrb	r3, [r7, #23]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d109      	bne.n	8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008ebc:	4b96      	ldr	r3, [pc, #600]	; (8009118 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ec0:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ec8:	4993      	ldr	r1, [pc, #588]	; (8009118 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008eca:	4313      	orrs	r3, r2
 8008ecc:	654b      	str	r3, [r1, #84]	; 0x54
 8008ece:	e001      	b.n	8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ed0:	7dfb      	ldrb	r3, [r7, #23]
 8008ed2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f003 0302 	and.w	r3, r3, #2
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d038      	beq.n	8008f52 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ee4:	2b05      	cmp	r3, #5
 8008ee6:	d821      	bhi.n	8008f2c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8008ee8:	a201      	add	r2, pc, #4	; (adr r2, 8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8008eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eee:	bf00      	nop
 8008ef0:	08008f33 	.word	0x08008f33
 8008ef4:	08008f09 	.word	0x08008f09
 8008ef8:	08008f1b 	.word	0x08008f1b
 8008efc:	08008f33 	.word	0x08008f33
 8008f00:	08008f33 	.word	0x08008f33
 8008f04:	08008f33 	.word	0x08008f33
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	3304      	adds	r3, #4
 8008f0c:	2101      	movs	r1, #1
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f000 fdb4 	bl	8009a7c <RCCEx_PLL2_Config>
 8008f14:	4603      	mov	r3, r0
 8008f16:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008f18:	e00c      	b.n	8008f34 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	3324      	adds	r3, #36	; 0x24
 8008f1e:	2101      	movs	r1, #1
 8008f20:	4618      	mov	r0, r3
 8008f22:	f000 fe5d 	bl	8009be0 <RCCEx_PLL3_Config>
 8008f26:	4603      	mov	r3, r0
 8008f28:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008f2a:	e003      	b.n	8008f34 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	75fb      	strb	r3, [r7, #23]
      break;
 8008f30:	e000      	b.n	8008f34 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8008f32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f34:	7dfb      	ldrb	r3, [r7, #23]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d109      	bne.n	8008f4e <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008f3a:	4b77      	ldr	r3, [pc, #476]	; (8009118 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f3e:	f023 0207 	bic.w	r2, r3, #7
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f46:	4974      	ldr	r1, [pc, #464]	; (8009118 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008f48:	4313      	orrs	r3, r2
 8008f4a:	654b      	str	r3, [r1, #84]	; 0x54
 8008f4c:	e001      	b.n	8008f52 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f4e:	7dfb      	ldrb	r3, [r7, #23]
 8008f50:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f003 0304 	and.w	r3, r3, #4
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d03a      	beq.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f64:	2b05      	cmp	r3, #5
 8008f66:	d821      	bhi.n	8008fac <HAL_RCCEx_PeriphCLKConfig+0x938>
 8008f68:	a201      	add	r2, pc, #4	; (adr r2, 8008f70 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8008f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f6e:	bf00      	nop
 8008f70:	08008fb3 	.word	0x08008fb3
 8008f74:	08008f89 	.word	0x08008f89
 8008f78:	08008f9b 	.word	0x08008f9b
 8008f7c:	08008fb3 	.word	0x08008fb3
 8008f80:	08008fb3 	.word	0x08008fb3
 8008f84:	08008fb3 	.word	0x08008fb3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	3304      	adds	r3, #4
 8008f8c:	2101      	movs	r1, #1
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f000 fd74 	bl	8009a7c <RCCEx_PLL2_Config>
 8008f94:	4603      	mov	r3, r0
 8008f96:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008f98:	e00c      	b.n	8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	3324      	adds	r3, #36	; 0x24
 8008f9e:	2101      	movs	r1, #1
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f000 fe1d 	bl	8009be0 <RCCEx_PLL3_Config>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008faa:	e003      	b.n	8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008fac:	2301      	movs	r3, #1
 8008fae:	75fb      	strb	r3, [r7, #23]
      break;
 8008fb0:	e000      	b.n	8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8008fb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008fb4:	7dfb      	ldrb	r3, [r7, #23]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d10a      	bne.n	8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008fba:	4b57      	ldr	r3, [pc, #348]	; (8009118 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fbe:	f023 0207 	bic.w	r2, r3, #7
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fc8:	4953      	ldr	r1, [pc, #332]	; (8009118 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	658b      	str	r3, [r1, #88]	; 0x58
 8008fce:	e001      	b.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fd0:	7dfb      	ldrb	r3, [r7, #23]
 8008fd2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f003 0320 	and.w	r3, r3, #32
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d04b      	beq.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008fe6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008fea:	d02e      	beq.n	800904a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8008fec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008ff0:	d828      	bhi.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8008ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ff6:	d02a      	beq.n	800904e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8008ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ffc:	d822      	bhi.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8008ffe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009002:	d026      	beq.n	8009052 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8009004:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009008:	d81c      	bhi.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800900a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800900e:	d010      	beq.n	8009032 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8009010:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009014:	d816      	bhi.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009016:	2b00      	cmp	r3, #0
 8009018:	d01d      	beq.n	8009056 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800901a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800901e:	d111      	bne.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	3304      	adds	r3, #4
 8009024:	2100      	movs	r1, #0
 8009026:	4618      	mov	r0, r3
 8009028:	f000 fd28 	bl	8009a7c <RCCEx_PLL2_Config>
 800902c:	4603      	mov	r3, r0
 800902e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009030:	e012      	b.n	8009058 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	3324      	adds	r3, #36	; 0x24
 8009036:	2102      	movs	r1, #2
 8009038:	4618      	mov	r0, r3
 800903a:	f000 fdd1 	bl	8009be0 <RCCEx_PLL3_Config>
 800903e:	4603      	mov	r3, r0
 8009040:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009042:	e009      	b.n	8009058 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009044:	2301      	movs	r3, #1
 8009046:	75fb      	strb	r3, [r7, #23]
      break;
 8009048:	e006      	b.n	8009058 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800904a:	bf00      	nop
 800904c:	e004      	b.n	8009058 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800904e:	bf00      	nop
 8009050:	e002      	b.n	8009058 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009052:	bf00      	nop
 8009054:	e000      	b.n	8009058 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009056:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009058:	7dfb      	ldrb	r3, [r7, #23]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d10a      	bne.n	8009074 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800905e:	4b2e      	ldr	r3, [pc, #184]	; (8009118 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009062:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800906c:	492a      	ldr	r1, [pc, #168]	; (8009118 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800906e:	4313      	orrs	r3, r2
 8009070:	654b      	str	r3, [r1, #84]	; 0x54
 8009072:	e001      	b.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009074:	7dfb      	ldrb	r3, [r7, #23]
 8009076:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009080:	2b00      	cmp	r3, #0
 8009082:	d04d      	beq.n	8009120 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800908a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800908e:	d02e      	beq.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8009090:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009094:	d828      	bhi.n	80090e8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009096:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800909a:	d02a      	beq.n	80090f2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800909c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090a0:	d822      	bhi.n	80090e8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80090a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80090a6:	d026      	beq.n	80090f6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80090a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80090ac:	d81c      	bhi.n	80090e8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80090ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80090b2:	d010      	beq.n	80090d6 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80090b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80090b8:	d816      	bhi.n	80090e8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d01d      	beq.n	80090fa <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80090be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090c2:	d111      	bne.n	80090e8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	3304      	adds	r3, #4
 80090c8:	2100      	movs	r1, #0
 80090ca:	4618      	mov	r0, r3
 80090cc:	f000 fcd6 	bl	8009a7c <RCCEx_PLL2_Config>
 80090d0:	4603      	mov	r3, r0
 80090d2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80090d4:	e012      	b.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	3324      	adds	r3, #36	; 0x24
 80090da:	2102      	movs	r1, #2
 80090dc:	4618      	mov	r0, r3
 80090de:	f000 fd7f 	bl	8009be0 <RCCEx_PLL3_Config>
 80090e2:	4603      	mov	r3, r0
 80090e4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80090e6:	e009      	b.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80090e8:	2301      	movs	r3, #1
 80090ea:	75fb      	strb	r3, [r7, #23]
      break;
 80090ec:	e006      	b.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80090ee:	bf00      	nop
 80090f0:	e004      	b.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80090f2:	bf00      	nop
 80090f4:	e002      	b.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80090f6:	bf00      	nop
 80090f8:	e000      	b.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80090fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80090fc:	7dfb      	ldrb	r3, [r7, #23]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d10c      	bne.n	800911c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009102:	4b05      	ldr	r3, [pc, #20]	; (8009118 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009106:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009110:	4901      	ldr	r1, [pc, #4]	; (8009118 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009112:	4313      	orrs	r3, r2
 8009114:	658b      	str	r3, [r1, #88]	; 0x58
 8009116:	e003      	b.n	8009120 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8009118:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800911c:	7dfb      	ldrb	r3, [r7, #23]
 800911e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009128:	2b00      	cmp	r3, #0
 800912a:	d04b      	beq.n	80091c4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009132:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009136:	d02e      	beq.n	8009196 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8009138:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800913c:	d828      	bhi.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800913e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009142:	d02a      	beq.n	800919a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8009144:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009148:	d822      	bhi.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800914a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800914e:	d026      	beq.n	800919e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8009150:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009154:	d81c      	bhi.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009156:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800915a:	d010      	beq.n	800917e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800915c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009160:	d816      	bhi.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009162:	2b00      	cmp	r3, #0
 8009164:	d01d      	beq.n	80091a2 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8009166:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800916a:	d111      	bne.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	3304      	adds	r3, #4
 8009170:	2100      	movs	r1, #0
 8009172:	4618      	mov	r0, r3
 8009174:	f000 fc82 	bl	8009a7c <RCCEx_PLL2_Config>
 8009178:	4603      	mov	r3, r0
 800917a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800917c:	e012      	b.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	3324      	adds	r3, #36	; 0x24
 8009182:	2102      	movs	r1, #2
 8009184:	4618      	mov	r0, r3
 8009186:	f000 fd2b 	bl	8009be0 <RCCEx_PLL3_Config>
 800918a:	4603      	mov	r3, r0
 800918c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800918e:	e009      	b.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009190:	2301      	movs	r3, #1
 8009192:	75fb      	strb	r3, [r7, #23]
      break;
 8009194:	e006      	b.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009196:	bf00      	nop
 8009198:	e004      	b.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800919a:	bf00      	nop
 800919c:	e002      	b.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800919e:	bf00      	nop
 80091a0:	e000      	b.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80091a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80091a4:	7dfb      	ldrb	r3, [r7, #23]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d10a      	bne.n	80091c0 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80091aa:	4b9d      	ldr	r3, [pc, #628]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80091ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80091b8:	4999      	ldr	r1, [pc, #612]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80091ba:	4313      	orrs	r3, r2
 80091bc:	658b      	str	r3, [r1, #88]	; 0x58
 80091be:	e001      	b.n	80091c4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091c0:	7dfb      	ldrb	r3, [r7, #23]
 80091c2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f003 0308 	and.w	r3, r3, #8
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d01a      	beq.n	8009206 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80091d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091da:	d10a      	bne.n	80091f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	3324      	adds	r3, #36	; 0x24
 80091e0:	2102      	movs	r1, #2
 80091e2:	4618      	mov	r0, r3
 80091e4:	f000 fcfc 	bl	8009be0 <RCCEx_PLL3_Config>
 80091e8:	4603      	mov	r3, r0
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d001      	beq.n	80091f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80091ee:	2301      	movs	r3, #1
 80091f0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80091f2:	4b8b      	ldr	r3, [pc, #556]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80091f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091f6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009200:	4987      	ldr	r1, [pc, #540]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009202:	4313      	orrs	r3, r2
 8009204:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f003 0310 	and.w	r3, r3, #16
 800920e:	2b00      	cmp	r3, #0
 8009210:	d01a      	beq.n	8009248 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009218:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800921c:	d10a      	bne.n	8009234 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	3324      	adds	r3, #36	; 0x24
 8009222:	2102      	movs	r1, #2
 8009224:	4618      	mov	r0, r3
 8009226:	f000 fcdb 	bl	8009be0 <RCCEx_PLL3_Config>
 800922a:	4603      	mov	r3, r0
 800922c:	2b00      	cmp	r3, #0
 800922e:	d001      	beq.n	8009234 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8009230:	2301      	movs	r3, #1
 8009232:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009234:	4b7a      	ldr	r3, [pc, #488]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009238:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009242:	4977      	ldr	r1, [pc, #476]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009244:	4313      	orrs	r3, r2
 8009246:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009250:	2b00      	cmp	r3, #0
 8009252:	d034      	beq.n	80092be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800925a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800925e:	d01d      	beq.n	800929c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8009260:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009264:	d817      	bhi.n	8009296 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8009266:	2b00      	cmp	r3, #0
 8009268:	d003      	beq.n	8009272 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800926a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800926e:	d009      	beq.n	8009284 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8009270:	e011      	b.n	8009296 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	3304      	adds	r3, #4
 8009276:	2100      	movs	r1, #0
 8009278:	4618      	mov	r0, r3
 800927a:	f000 fbff 	bl	8009a7c <RCCEx_PLL2_Config>
 800927e:	4603      	mov	r3, r0
 8009280:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009282:	e00c      	b.n	800929e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	3324      	adds	r3, #36	; 0x24
 8009288:	2102      	movs	r1, #2
 800928a:	4618      	mov	r0, r3
 800928c:	f000 fca8 	bl	8009be0 <RCCEx_PLL3_Config>
 8009290:	4603      	mov	r3, r0
 8009292:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009294:	e003      	b.n	800929e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009296:	2301      	movs	r3, #1
 8009298:	75fb      	strb	r3, [r7, #23]
      break;
 800929a:	e000      	b.n	800929e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800929c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800929e:	7dfb      	ldrb	r3, [r7, #23]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d10a      	bne.n	80092ba <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80092a4:	4b5e      	ldr	r3, [pc, #376]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80092a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80092b2:	495b      	ldr	r1, [pc, #364]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80092b4:	4313      	orrs	r3, r2
 80092b6:	658b      	str	r3, [r1, #88]	; 0x58
 80092b8:	e001      	b.n	80092be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092ba:	7dfb      	ldrb	r3, [r7, #23]
 80092bc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d033      	beq.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092d0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80092d4:	d01c      	beq.n	8009310 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80092d6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80092da:	d816      	bhi.n	800930a <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80092dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80092e0:	d003      	beq.n	80092ea <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80092e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80092e6:	d007      	beq.n	80092f8 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80092e8:	e00f      	b.n	800930a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092ea:	4b4d      	ldr	r3, [pc, #308]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80092ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ee:	4a4c      	ldr	r2, [pc, #304]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80092f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80092f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80092f6:	e00c      	b.n	8009312 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	3324      	adds	r3, #36	; 0x24
 80092fc:	2101      	movs	r1, #1
 80092fe:	4618      	mov	r0, r3
 8009300:	f000 fc6e 	bl	8009be0 <RCCEx_PLL3_Config>
 8009304:	4603      	mov	r3, r0
 8009306:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009308:	e003      	b.n	8009312 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800930a:	2301      	movs	r3, #1
 800930c:	75fb      	strb	r3, [r7, #23]
      break;
 800930e:	e000      	b.n	8009312 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8009310:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009312:	7dfb      	ldrb	r3, [r7, #23]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d10a      	bne.n	800932e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009318:	4b41      	ldr	r3, [pc, #260]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800931a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800931c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009326:	493e      	ldr	r1, [pc, #248]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009328:	4313      	orrs	r3, r2
 800932a:	654b      	str	r3, [r1, #84]	; 0x54
 800932c:	e001      	b.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800932e:	7dfb      	ldrb	r3, [r7, #23]
 8009330:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800933a:	2b00      	cmp	r3, #0
 800933c:	d029      	beq.n	8009392 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009342:	2b00      	cmp	r3, #0
 8009344:	d003      	beq.n	800934e <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8009346:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800934a:	d007      	beq.n	800935c <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800934c:	e00f      	b.n	800936e <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800934e:	4b34      	ldr	r3, [pc, #208]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009352:	4a33      	ldr	r2, [pc, #204]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009354:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009358:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800935a:	e00b      	b.n	8009374 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	3304      	adds	r3, #4
 8009360:	2102      	movs	r1, #2
 8009362:	4618      	mov	r0, r3
 8009364:	f000 fb8a 	bl	8009a7c <RCCEx_PLL2_Config>
 8009368:	4603      	mov	r3, r0
 800936a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800936c:	e002      	b.n	8009374 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800936e:	2301      	movs	r3, #1
 8009370:	75fb      	strb	r3, [r7, #23]
      break;
 8009372:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009374:	7dfb      	ldrb	r3, [r7, #23]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d109      	bne.n	800938e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800937a:	4b29      	ldr	r3, [pc, #164]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800937c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800937e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009386:	4926      	ldr	r1, [pc, #152]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009388:	4313      	orrs	r3, r2
 800938a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800938c:	e001      	b.n	8009392 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800938e:	7dfb      	ldrb	r3, [r7, #23]
 8009390:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800939a:	2b00      	cmp	r3, #0
 800939c:	d00a      	beq.n	80093b4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	3324      	adds	r3, #36	; 0x24
 80093a2:	2102      	movs	r1, #2
 80093a4:	4618      	mov	r0, r3
 80093a6:	f000 fc1b 	bl	8009be0 <RCCEx_PLL3_Config>
 80093aa:	4603      	mov	r3, r0
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d001      	beq.n	80093b4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80093b0:	2301      	movs	r3, #1
 80093b2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d033      	beq.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80093c8:	d017      	beq.n	80093fa <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80093ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80093ce:	d811      	bhi.n	80093f4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80093d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093d4:	d013      	beq.n	80093fe <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80093d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093da:	d80b      	bhi.n	80093f4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d010      	beq.n	8009402 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80093e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093e4:	d106      	bne.n	80093f4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093e6:	4b0e      	ldr	r3, [pc, #56]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80093e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ea:	4a0d      	ldr	r2, [pc, #52]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80093ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80093f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80093f2:	e007      	b.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80093f4:	2301      	movs	r3, #1
 80093f6:	75fb      	strb	r3, [r7, #23]
      break;
 80093f8:	e004      	b.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80093fa:	bf00      	nop
 80093fc:	e002      	b.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80093fe:	bf00      	nop
 8009400:	e000      	b.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8009402:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009404:	7dfb      	ldrb	r3, [r7, #23]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d10c      	bne.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800940a:	4b05      	ldr	r3, [pc, #20]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800940c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800940e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009416:	4902      	ldr	r1, [pc, #8]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009418:	4313      	orrs	r3, r2
 800941a:	654b      	str	r3, [r1, #84]	; 0x54
 800941c:	e004      	b.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800941e:	bf00      	nop
 8009420:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009424:	7dfb      	ldrb	r3, [r7, #23]
 8009426:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009430:	2b00      	cmp	r3, #0
 8009432:	d008      	beq.n	8009446 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009434:	4b31      	ldr	r3, [pc, #196]	; (80094fc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009436:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009438:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009440:	492e      	ldr	r1, [pc, #184]	; (80094fc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009442:	4313      	orrs	r3, r2
 8009444:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800944e:	2b00      	cmp	r3, #0
 8009450:	d009      	beq.n	8009466 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009452:	4b2a      	ldr	r3, [pc, #168]	; (80094fc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009454:	691b      	ldr	r3, [r3, #16]
 8009456:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009460:	4926      	ldr	r1, [pc, #152]	; (80094fc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009462:	4313      	orrs	r3, r2
 8009464:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800946e:	2b00      	cmp	r3, #0
 8009470:	d008      	beq.n	8009484 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009472:	4b22      	ldr	r3, [pc, #136]	; (80094fc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009474:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009476:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800947e:	491f      	ldr	r1, [pc, #124]	; (80094fc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009480:	4313      	orrs	r3, r2
 8009482:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800948c:	2b00      	cmp	r3, #0
 800948e:	d00d      	beq.n	80094ac <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009490:	4b1a      	ldr	r3, [pc, #104]	; (80094fc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009492:	691b      	ldr	r3, [r3, #16]
 8009494:	4a19      	ldr	r2, [pc, #100]	; (80094fc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009496:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800949a:	6113      	str	r3, [r2, #16]
 800949c:	4b17      	ldr	r3, [pc, #92]	; (80094fc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800949e:	691a      	ldr	r2, [r3, #16]
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80094a6:	4915      	ldr	r1, [pc, #84]	; (80094fc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80094a8:	4313      	orrs	r3, r2
 80094aa:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	da08      	bge.n	80094c6 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80094b4:	4b11      	ldr	r3, [pc, #68]	; (80094fc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80094b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094b8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094c0:	490e      	ldr	r1, [pc, #56]	; (80094fc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80094c2:	4313      	orrs	r3, r2
 80094c4:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d009      	beq.n	80094e6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80094d2:	4b0a      	ldr	r3, [pc, #40]	; (80094fc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80094d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094d6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094e0:	4906      	ldr	r1, [pc, #24]	; (80094fc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80094e2:	4313      	orrs	r3, r2
 80094e4:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80094e6:	7dbb      	ldrb	r3, [r7, #22]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d101      	bne.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80094ec:	2300      	movs	r3, #0
 80094ee:	e000      	b.n	80094f2 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80094f0:	2301      	movs	r3, #1
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	3718      	adds	r7, #24
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}
 80094fa:	bf00      	nop
 80094fc:	58024400 	.word	0x58024400

08009500 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009504:	f7ff f818 	bl	8008538 <HAL_RCC_GetHCLKFreq>
 8009508:	4602      	mov	r2, r0
 800950a:	4b06      	ldr	r3, [pc, #24]	; (8009524 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800950c:	6a1b      	ldr	r3, [r3, #32]
 800950e:	091b      	lsrs	r3, r3, #4
 8009510:	f003 0307 	and.w	r3, r3, #7
 8009514:	4904      	ldr	r1, [pc, #16]	; (8009528 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009516:	5ccb      	ldrb	r3, [r1, r3]
 8009518:	f003 031f 	and.w	r3, r3, #31
 800951c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009520:	4618      	mov	r0, r3
 8009522:	bd80      	pop	{r7, pc}
 8009524:	58024400 	.word	0x58024400
 8009528:	08013aa8 	.word	0x08013aa8

0800952c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800952c:	b480      	push	{r7}
 800952e:	b089      	sub	sp, #36	; 0x24
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009534:	4ba1      	ldr	r3, [pc, #644]	; (80097bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009538:	f003 0303 	and.w	r3, r3, #3
 800953c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800953e:	4b9f      	ldr	r3, [pc, #636]	; (80097bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009542:	0b1b      	lsrs	r3, r3, #12
 8009544:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009548:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800954a:	4b9c      	ldr	r3, [pc, #624]	; (80097bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800954c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800954e:	091b      	lsrs	r3, r3, #4
 8009550:	f003 0301 	and.w	r3, r3, #1
 8009554:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009556:	4b99      	ldr	r3, [pc, #612]	; (80097bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800955a:	08db      	lsrs	r3, r3, #3
 800955c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009560:	693a      	ldr	r2, [r7, #16]
 8009562:	fb02 f303 	mul.w	r3, r2, r3
 8009566:	ee07 3a90 	vmov	s15, r3
 800956a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800956e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009572:	697b      	ldr	r3, [r7, #20]
 8009574:	2b00      	cmp	r3, #0
 8009576:	f000 8111 	beq.w	800979c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800957a:	69bb      	ldr	r3, [r7, #24]
 800957c:	2b02      	cmp	r3, #2
 800957e:	f000 8083 	beq.w	8009688 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009582:	69bb      	ldr	r3, [r7, #24]
 8009584:	2b02      	cmp	r3, #2
 8009586:	f200 80a1 	bhi.w	80096cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800958a:	69bb      	ldr	r3, [r7, #24]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d003      	beq.n	8009598 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009590:	69bb      	ldr	r3, [r7, #24]
 8009592:	2b01      	cmp	r3, #1
 8009594:	d056      	beq.n	8009644 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009596:	e099      	b.n	80096cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009598:	4b88      	ldr	r3, [pc, #544]	; (80097bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f003 0320 	and.w	r3, r3, #32
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d02d      	beq.n	8009600 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80095a4:	4b85      	ldr	r3, [pc, #532]	; (80097bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	08db      	lsrs	r3, r3, #3
 80095aa:	f003 0303 	and.w	r3, r3, #3
 80095ae:	4a84      	ldr	r2, [pc, #528]	; (80097c0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80095b0:	fa22 f303 	lsr.w	r3, r2, r3
 80095b4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80095b6:	68bb      	ldr	r3, [r7, #8]
 80095b8:	ee07 3a90 	vmov	s15, r3
 80095bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	ee07 3a90 	vmov	s15, r3
 80095c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095ce:	4b7b      	ldr	r3, [pc, #492]	; (80097bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095d6:	ee07 3a90 	vmov	s15, r3
 80095da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095de:	ed97 6a03 	vldr	s12, [r7, #12]
 80095e2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80097c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80095e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095fa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80095fe:	e087      	b.n	8009710 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	ee07 3a90 	vmov	s15, r3
 8009606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800960a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80097c8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800960e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009612:	4b6a      	ldr	r3, [pc, #424]	; (80097bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009616:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800961a:	ee07 3a90 	vmov	s15, r3
 800961e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009622:	ed97 6a03 	vldr	s12, [r7, #12]
 8009626:	eddf 5a67 	vldr	s11, [pc, #412]	; 80097c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800962a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800962e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009632:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009636:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800963a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800963e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009642:	e065      	b.n	8009710 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009644:	697b      	ldr	r3, [r7, #20]
 8009646:	ee07 3a90 	vmov	s15, r3
 800964a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800964e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80097cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009652:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009656:	4b59      	ldr	r3, [pc, #356]	; (80097bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800965a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800965e:	ee07 3a90 	vmov	s15, r3
 8009662:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009666:	ed97 6a03 	vldr	s12, [r7, #12]
 800966a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80097c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800966e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009672:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009676:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800967a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800967e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009682:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009686:	e043      	b.n	8009710 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009688:	697b      	ldr	r3, [r7, #20]
 800968a:	ee07 3a90 	vmov	s15, r3
 800968e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009692:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80097d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009696:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800969a:	4b48      	ldr	r3, [pc, #288]	; (80097bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800969c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800969e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096a2:	ee07 3a90 	vmov	s15, r3
 80096a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80096ae:	eddf 5a45 	vldr	s11, [pc, #276]	; 80097c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80096b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80096ca:	e021      	b.n	8009710 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80096cc:	697b      	ldr	r3, [r7, #20]
 80096ce:	ee07 3a90 	vmov	s15, r3
 80096d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096d6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80097cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80096da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096de:	4b37      	ldr	r3, [pc, #220]	; (80097bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80096e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096e6:	ee07 3a90 	vmov	s15, r3
 80096ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80096f2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80097c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80096f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009702:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800970a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800970e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009710:	4b2a      	ldr	r3, [pc, #168]	; (80097bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009714:	0a5b      	lsrs	r3, r3, #9
 8009716:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800971a:	ee07 3a90 	vmov	s15, r3
 800971e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009722:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009726:	ee37 7a87 	vadd.f32	s14, s15, s14
 800972a:	edd7 6a07 	vldr	s13, [r7, #28]
 800972e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009732:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009736:	ee17 2a90 	vmov	r2, s15
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800973e:	4b1f      	ldr	r3, [pc, #124]	; (80097bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009742:	0c1b      	lsrs	r3, r3, #16
 8009744:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009748:	ee07 3a90 	vmov	s15, r3
 800974c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009750:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009754:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009758:	edd7 6a07 	vldr	s13, [r7, #28]
 800975c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009760:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009764:	ee17 2a90 	vmov	r2, s15
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800976c:	4b13      	ldr	r3, [pc, #76]	; (80097bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800976e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009770:	0e1b      	lsrs	r3, r3, #24
 8009772:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009776:	ee07 3a90 	vmov	s15, r3
 800977a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800977e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009782:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009786:	edd7 6a07 	vldr	s13, [r7, #28]
 800978a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800978e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009792:	ee17 2a90 	vmov	r2, s15
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800979a:	e008      	b.n	80097ae <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2200      	movs	r2, #0
 80097a0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2200      	movs	r2, #0
 80097a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2200      	movs	r2, #0
 80097ac:	609a      	str	r2, [r3, #8]
}
 80097ae:	bf00      	nop
 80097b0:	3724      	adds	r7, #36	; 0x24
 80097b2:	46bd      	mov	sp, r7
 80097b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b8:	4770      	bx	lr
 80097ba:	bf00      	nop
 80097bc:	58024400 	.word	0x58024400
 80097c0:	03d09000 	.word	0x03d09000
 80097c4:	46000000 	.word	0x46000000
 80097c8:	4c742400 	.word	0x4c742400
 80097cc:	4a742400 	.word	0x4a742400
 80097d0:	4b742400 	.word	0x4b742400

080097d4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80097d4:	b480      	push	{r7}
 80097d6:	b089      	sub	sp, #36	; 0x24
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80097dc:	4ba1      	ldr	r3, [pc, #644]	; (8009a64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80097de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097e0:	f003 0303 	and.w	r3, r3, #3
 80097e4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80097e6:	4b9f      	ldr	r3, [pc, #636]	; (8009a64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80097e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097ea:	0d1b      	lsrs	r3, r3, #20
 80097ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80097f0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80097f2:	4b9c      	ldr	r3, [pc, #624]	; (8009a64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80097f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097f6:	0a1b      	lsrs	r3, r3, #8
 80097f8:	f003 0301 	and.w	r3, r3, #1
 80097fc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80097fe:	4b99      	ldr	r3, [pc, #612]	; (8009a64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009802:	08db      	lsrs	r3, r3, #3
 8009804:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009808:	693a      	ldr	r2, [r7, #16]
 800980a:	fb02 f303 	mul.w	r3, r2, r3
 800980e:	ee07 3a90 	vmov	s15, r3
 8009812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009816:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800981a:	697b      	ldr	r3, [r7, #20]
 800981c:	2b00      	cmp	r3, #0
 800981e:	f000 8111 	beq.w	8009a44 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009822:	69bb      	ldr	r3, [r7, #24]
 8009824:	2b02      	cmp	r3, #2
 8009826:	f000 8083 	beq.w	8009930 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800982a:	69bb      	ldr	r3, [r7, #24]
 800982c:	2b02      	cmp	r3, #2
 800982e:	f200 80a1 	bhi.w	8009974 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009832:	69bb      	ldr	r3, [r7, #24]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d003      	beq.n	8009840 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009838:	69bb      	ldr	r3, [r7, #24]
 800983a:	2b01      	cmp	r3, #1
 800983c:	d056      	beq.n	80098ec <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800983e:	e099      	b.n	8009974 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009840:	4b88      	ldr	r3, [pc, #544]	; (8009a64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	f003 0320 	and.w	r3, r3, #32
 8009848:	2b00      	cmp	r3, #0
 800984a:	d02d      	beq.n	80098a8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800984c:	4b85      	ldr	r3, [pc, #532]	; (8009a64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	08db      	lsrs	r3, r3, #3
 8009852:	f003 0303 	and.w	r3, r3, #3
 8009856:	4a84      	ldr	r2, [pc, #528]	; (8009a68 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009858:	fa22 f303 	lsr.w	r3, r2, r3
 800985c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800985e:	68bb      	ldr	r3, [r7, #8]
 8009860:	ee07 3a90 	vmov	s15, r3
 8009864:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009868:	697b      	ldr	r3, [r7, #20]
 800986a:	ee07 3a90 	vmov	s15, r3
 800986e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009872:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009876:	4b7b      	ldr	r3, [pc, #492]	; (8009a64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800987a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800987e:	ee07 3a90 	vmov	s15, r3
 8009882:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009886:	ed97 6a03 	vldr	s12, [r7, #12]
 800988a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009a6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800988e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009892:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009896:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800989a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800989e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098a2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80098a6:	e087      	b.n	80099b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80098a8:	697b      	ldr	r3, [r7, #20]
 80098aa:	ee07 3a90 	vmov	s15, r3
 80098ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098b2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009a70 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80098b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098ba:	4b6a      	ldr	r3, [pc, #424]	; (8009a64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098c2:	ee07 3a90 	vmov	s15, r3
 80098c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80098ce:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009a6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80098d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80098ea:	e065      	b.n	80099b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80098ec:	697b      	ldr	r3, [r7, #20]
 80098ee:	ee07 3a90 	vmov	s15, r3
 80098f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098f6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009a74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80098fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098fe:	4b59      	ldr	r3, [pc, #356]	; (8009a64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009906:	ee07 3a90 	vmov	s15, r3
 800990a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800990e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009912:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009a6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009916:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800991a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800991e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009922:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009926:	ee67 7a27 	vmul.f32	s15, s14, s15
 800992a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800992e:	e043      	b.n	80099b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009930:	697b      	ldr	r3, [r7, #20]
 8009932:	ee07 3a90 	vmov	s15, r3
 8009936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800993a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009a78 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800993e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009942:	4b48      	ldr	r3, [pc, #288]	; (8009a64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800994a:	ee07 3a90 	vmov	s15, r3
 800994e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009952:	ed97 6a03 	vldr	s12, [r7, #12]
 8009956:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009a6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800995a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800995e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009962:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009966:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800996a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800996e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009972:	e021      	b.n	80099b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009974:	697b      	ldr	r3, [r7, #20]
 8009976:	ee07 3a90 	vmov	s15, r3
 800997a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800997e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009a74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009982:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009986:	4b37      	ldr	r3, [pc, #220]	; (8009a64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800998a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800998e:	ee07 3a90 	vmov	s15, r3
 8009992:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009996:	ed97 6a03 	vldr	s12, [r7, #12]
 800999a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009a6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800999e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80099b6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80099b8:	4b2a      	ldr	r3, [pc, #168]	; (8009a64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80099ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099bc:	0a5b      	lsrs	r3, r3, #9
 80099be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099c2:	ee07 3a90 	vmov	s15, r3
 80099c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80099ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80099d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099de:	ee17 2a90 	vmov	r2, s15
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80099e6:	4b1f      	ldr	r3, [pc, #124]	; (8009a64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80099e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ea:	0c1b      	lsrs	r3, r3, #16
 80099ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099f0:	ee07 3a90 	vmov	s15, r3
 80099f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80099fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a00:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a0c:	ee17 2a90 	vmov	r2, s15
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009a14:	4b13      	ldr	r3, [pc, #76]	; (8009a64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a18:	0e1b      	lsrs	r3, r3, #24
 8009a1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a1e:	ee07 3a90 	vmov	s15, r3
 8009a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a3a:	ee17 2a90 	vmov	r2, s15
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009a42:	e008      	b.n	8009a56 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2200      	movs	r2, #0
 8009a48:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2200      	movs	r2, #0
 8009a54:	609a      	str	r2, [r3, #8]
}
 8009a56:	bf00      	nop
 8009a58:	3724      	adds	r7, #36	; 0x24
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a60:	4770      	bx	lr
 8009a62:	bf00      	nop
 8009a64:	58024400 	.word	0x58024400
 8009a68:	03d09000 	.word	0x03d09000
 8009a6c:	46000000 	.word	0x46000000
 8009a70:	4c742400 	.word	0x4c742400
 8009a74:	4a742400 	.word	0x4a742400
 8009a78:	4b742400 	.word	0x4b742400

08009a7c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b084      	sub	sp, #16
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
 8009a84:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009a86:	2300      	movs	r3, #0
 8009a88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009a8a:	4b53      	ldr	r3, [pc, #332]	; (8009bd8 <RCCEx_PLL2_Config+0x15c>)
 8009a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a8e:	f003 0303 	and.w	r3, r3, #3
 8009a92:	2b03      	cmp	r3, #3
 8009a94:	d101      	bne.n	8009a9a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009a96:	2301      	movs	r3, #1
 8009a98:	e099      	b.n	8009bce <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009a9a:	4b4f      	ldr	r3, [pc, #316]	; (8009bd8 <RCCEx_PLL2_Config+0x15c>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	4a4e      	ldr	r2, [pc, #312]	; (8009bd8 <RCCEx_PLL2_Config+0x15c>)
 8009aa0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009aa4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009aa6:	f7f8 f9c7 	bl	8001e38 <HAL_GetTick>
 8009aaa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009aac:	e008      	b.n	8009ac0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009aae:	f7f8 f9c3 	bl	8001e38 <HAL_GetTick>
 8009ab2:	4602      	mov	r2, r0
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	1ad3      	subs	r3, r2, r3
 8009ab8:	2b02      	cmp	r3, #2
 8009aba:	d901      	bls.n	8009ac0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009abc:	2303      	movs	r3, #3
 8009abe:	e086      	b.n	8009bce <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009ac0:	4b45      	ldr	r3, [pc, #276]	; (8009bd8 <RCCEx_PLL2_Config+0x15c>)
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d1f0      	bne.n	8009aae <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009acc:	4b42      	ldr	r3, [pc, #264]	; (8009bd8 <RCCEx_PLL2_Config+0x15c>)
 8009ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ad0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	031b      	lsls	r3, r3, #12
 8009ada:	493f      	ldr	r1, [pc, #252]	; (8009bd8 <RCCEx_PLL2_Config+0x15c>)
 8009adc:	4313      	orrs	r3, r2
 8009ade:	628b      	str	r3, [r1, #40]	; 0x28
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	685b      	ldr	r3, [r3, #4]
 8009ae4:	3b01      	subs	r3, #1
 8009ae6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	689b      	ldr	r3, [r3, #8]
 8009aee:	3b01      	subs	r3, #1
 8009af0:	025b      	lsls	r3, r3, #9
 8009af2:	b29b      	uxth	r3, r3
 8009af4:	431a      	orrs	r2, r3
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	68db      	ldr	r3, [r3, #12]
 8009afa:	3b01      	subs	r3, #1
 8009afc:	041b      	lsls	r3, r3, #16
 8009afe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009b02:	431a      	orrs	r2, r3
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	691b      	ldr	r3, [r3, #16]
 8009b08:	3b01      	subs	r3, #1
 8009b0a:	061b      	lsls	r3, r3, #24
 8009b0c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009b10:	4931      	ldr	r1, [pc, #196]	; (8009bd8 <RCCEx_PLL2_Config+0x15c>)
 8009b12:	4313      	orrs	r3, r2
 8009b14:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009b16:	4b30      	ldr	r3, [pc, #192]	; (8009bd8 <RCCEx_PLL2_Config+0x15c>)
 8009b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b1a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	695b      	ldr	r3, [r3, #20]
 8009b22:	492d      	ldr	r1, [pc, #180]	; (8009bd8 <RCCEx_PLL2_Config+0x15c>)
 8009b24:	4313      	orrs	r3, r2
 8009b26:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009b28:	4b2b      	ldr	r3, [pc, #172]	; (8009bd8 <RCCEx_PLL2_Config+0x15c>)
 8009b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b2c:	f023 0220 	bic.w	r2, r3, #32
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	699b      	ldr	r3, [r3, #24]
 8009b34:	4928      	ldr	r1, [pc, #160]	; (8009bd8 <RCCEx_PLL2_Config+0x15c>)
 8009b36:	4313      	orrs	r3, r2
 8009b38:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009b3a:	4b27      	ldr	r3, [pc, #156]	; (8009bd8 <RCCEx_PLL2_Config+0x15c>)
 8009b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b3e:	4a26      	ldr	r2, [pc, #152]	; (8009bd8 <RCCEx_PLL2_Config+0x15c>)
 8009b40:	f023 0310 	bic.w	r3, r3, #16
 8009b44:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009b46:	4b24      	ldr	r3, [pc, #144]	; (8009bd8 <RCCEx_PLL2_Config+0x15c>)
 8009b48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009b4a:	4b24      	ldr	r3, [pc, #144]	; (8009bdc <RCCEx_PLL2_Config+0x160>)
 8009b4c:	4013      	ands	r3, r2
 8009b4e:	687a      	ldr	r2, [r7, #4]
 8009b50:	69d2      	ldr	r2, [r2, #28]
 8009b52:	00d2      	lsls	r2, r2, #3
 8009b54:	4920      	ldr	r1, [pc, #128]	; (8009bd8 <RCCEx_PLL2_Config+0x15c>)
 8009b56:	4313      	orrs	r3, r2
 8009b58:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009b5a:	4b1f      	ldr	r3, [pc, #124]	; (8009bd8 <RCCEx_PLL2_Config+0x15c>)
 8009b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b5e:	4a1e      	ldr	r2, [pc, #120]	; (8009bd8 <RCCEx_PLL2_Config+0x15c>)
 8009b60:	f043 0310 	orr.w	r3, r3, #16
 8009b64:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d106      	bne.n	8009b7a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009b6c:	4b1a      	ldr	r3, [pc, #104]	; (8009bd8 <RCCEx_PLL2_Config+0x15c>)
 8009b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b70:	4a19      	ldr	r2, [pc, #100]	; (8009bd8 <RCCEx_PLL2_Config+0x15c>)
 8009b72:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009b76:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009b78:	e00f      	b.n	8009b9a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	2b01      	cmp	r3, #1
 8009b7e:	d106      	bne.n	8009b8e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009b80:	4b15      	ldr	r3, [pc, #84]	; (8009bd8 <RCCEx_PLL2_Config+0x15c>)
 8009b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b84:	4a14      	ldr	r2, [pc, #80]	; (8009bd8 <RCCEx_PLL2_Config+0x15c>)
 8009b86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009b8a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009b8c:	e005      	b.n	8009b9a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009b8e:	4b12      	ldr	r3, [pc, #72]	; (8009bd8 <RCCEx_PLL2_Config+0x15c>)
 8009b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b92:	4a11      	ldr	r2, [pc, #68]	; (8009bd8 <RCCEx_PLL2_Config+0x15c>)
 8009b94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009b98:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009b9a:	4b0f      	ldr	r3, [pc, #60]	; (8009bd8 <RCCEx_PLL2_Config+0x15c>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	4a0e      	ldr	r2, [pc, #56]	; (8009bd8 <RCCEx_PLL2_Config+0x15c>)
 8009ba0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009ba4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ba6:	f7f8 f947 	bl	8001e38 <HAL_GetTick>
 8009baa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009bac:	e008      	b.n	8009bc0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009bae:	f7f8 f943 	bl	8001e38 <HAL_GetTick>
 8009bb2:	4602      	mov	r2, r0
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	1ad3      	subs	r3, r2, r3
 8009bb8:	2b02      	cmp	r3, #2
 8009bba:	d901      	bls.n	8009bc0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009bbc:	2303      	movs	r3, #3
 8009bbe:	e006      	b.n	8009bce <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009bc0:	4b05      	ldr	r3, [pc, #20]	; (8009bd8 <RCCEx_PLL2_Config+0x15c>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d0f0      	beq.n	8009bae <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	3710      	adds	r7, #16
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}
 8009bd6:	bf00      	nop
 8009bd8:	58024400 	.word	0x58024400
 8009bdc:	ffff0007 	.word	0xffff0007

08009be0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b084      	sub	sp, #16
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
 8009be8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009bea:	2300      	movs	r3, #0
 8009bec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009bee:	4b53      	ldr	r3, [pc, #332]	; (8009d3c <RCCEx_PLL3_Config+0x15c>)
 8009bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bf2:	f003 0303 	and.w	r3, r3, #3
 8009bf6:	2b03      	cmp	r3, #3
 8009bf8:	d101      	bne.n	8009bfe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	e099      	b.n	8009d32 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009bfe:	4b4f      	ldr	r3, [pc, #316]	; (8009d3c <RCCEx_PLL3_Config+0x15c>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	4a4e      	ldr	r2, [pc, #312]	; (8009d3c <RCCEx_PLL3_Config+0x15c>)
 8009c04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009c08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009c0a:	f7f8 f915 	bl	8001e38 <HAL_GetTick>
 8009c0e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009c10:	e008      	b.n	8009c24 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009c12:	f7f8 f911 	bl	8001e38 <HAL_GetTick>
 8009c16:	4602      	mov	r2, r0
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	1ad3      	subs	r3, r2, r3
 8009c1c:	2b02      	cmp	r3, #2
 8009c1e:	d901      	bls.n	8009c24 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009c20:	2303      	movs	r3, #3
 8009c22:	e086      	b.n	8009d32 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009c24:	4b45      	ldr	r3, [pc, #276]	; (8009d3c <RCCEx_PLL3_Config+0x15c>)
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d1f0      	bne.n	8009c12 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009c30:	4b42      	ldr	r3, [pc, #264]	; (8009d3c <RCCEx_PLL3_Config+0x15c>)
 8009c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c34:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	051b      	lsls	r3, r3, #20
 8009c3e:	493f      	ldr	r1, [pc, #252]	; (8009d3c <RCCEx_PLL3_Config+0x15c>)
 8009c40:	4313      	orrs	r3, r2
 8009c42:	628b      	str	r3, [r1, #40]	; 0x28
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	685b      	ldr	r3, [r3, #4]
 8009c48:	3b01      	subs	r3, #1
 8009c4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	689b      	ldr	r3, [r3, #8]
 8009c52:	3b01      	subs	r3, #1
 8009c54:	025b      	lsls	r3, r3, #9
 8009c56:	b29b      	uxth	r3, r3
 8009c58:	431a      	orrs	r2, r3
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	68db      	ldr	r3, [r3, #12]
 8009c5e:	3b01      	subs	r3, #1
 8009c60:	041b      	lsls	r3, r3, #16
 8009c62:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009c66:	431a      	orrs	r2, r3
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	691b      	ldr	r3, [r3, #16]
 8009c6c:	3b01      	subs	r3, #1
 8009c6e:	061b      	lsls	r3, r3, #24
 8009c70:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009c74:	4931      	ldr	r1, [pc, #196]	; (8009d3c <RCCEx_PLL3_Config+0x15c>)
 8009c76:	4313      	orrs	r3, r2
 8009c78:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009c7a:	4b30      	ldr	r3, [pc, #192]	; (8009d3c <RCCEx_PLL3_Config+0x15c>)
 8009c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c7e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	695b      	ldr	r3, [r3, #20]
 8009c86:	492d      	ldr	r1, [pc, #180]	; (8009d3c <RCCEx_PLL3_Config+0x15c>)
 8009c88:	4313      	orrs	r3, r2
 8009c8a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009c8c:	4b2b      	ldr	r3, [pc, #172]	; (8009d3c <RCCEx_PLL3_Config+0x15c>)
 8009c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c90:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	699b      	ldr	r3, [r3, #24]
 8009c98:	4928      	ldr	r1, [pc, #160]	; (8009d3c <RCCEx_PLL3_Config+0x15c>)
 8009c9a:	4313      	orrs	r3, r2
 8009c9c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009c9e:	4b27      	ldr	r3, [pc, #156]	; (8009d3c <RCCEx_PLL3_Config+0x15c>)
 8009ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ca2:	4a26      	ldr	r2, [pc, #152]	; (8009d3c <RCCEx_PLL3_Config+0x15c>)
 8009ca4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009ca8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009caa:	4b24      	ldr	r3, [pc, #144]	; (8009d3c <RCCEx_PLL3_Config+0x15c>)
 8009cac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009cae:	4b24      	ldr	r3, [pc, #144]	; (8009d40 <RCCEx_PLL3_Config+0x160>)
 8009cb0:	4013      	ands	r3, r2
 8009cb2:	687a      	ldr	r2, [r7, #4]
 8009cb4:	69d2      	ldr	r2, [r2, #28]
 8009cb6:	00d2      	lsls	r2, r2, #3
 8009cb8:	4920      	ldr	r1, [pc, #128]	; (8009d3c <RCCEx_PLL3_Config+0x15c>)
 8009cba:	4313      	orrs	r3, r2
 8009cbc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009cbe:	4b1f      	ldr	r3, [pc, #124]	; (8009d3c <RCCEx_PLL3_Config+0x15c>)
 8009cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cc2:	4a1e      	ldr	r2, [pc, #120]	; (8009d3c <RCCEx_PLL3_Config+0x15c>)
 8009cc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009cc8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d106      	bne.n	8009cde <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009cd0:	4b1a      	ldr	r3, [pc, #104]	; (8009d3c <RCCEx_PLL3_Config+0x15c>)
 8009cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cd4:	4a19      	ldr	r2, [pc, #100]	; (8009d3c <RCCEx_PLL3_Config+0x15c>)
 8009cd6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009cda:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009cdc:	e00f      	b.n	8009cfe <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	2b01      	cmp	r3, #1
 8009ce2:	d106      	bne.n	8009cf2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009ce4:	4b15      	ldr	r3, [pc, #84]	; (8009d3c <RCCEx_PLL3_Config+0x15c>)
 8009ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ce8:	4a14      	ldr	r2, [pc, #80]	; (8009d3c <RCCEx_PLL3_Config+0x15c>)
 8009cea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009cee:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009cf0:	e005      	b.n	8009cfe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009cf2:	4b12      	ldr	r3, [pc, #72]	; (8009d3c <RCCEx_PLL3_Config+0x15c>)
 8009cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cf6:	4a11      	ldr	r2, [pc, #68]	; (8009d3c <RCCEx_PLL3_Config+0x15c>)
 8009cf8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009cfc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009cfe:	4b0f      	ldr	r3, [pc, #60]	; (8009d3c <RCCEx_PLL3_Config+0x15c>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	4a0e      	ldr	r2, [pc, #56]	; (8009d3c <RCCEx_PLL3_Config+0x15c>)
 8009d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009d0a:	f7f8 f895 	bl	8001e38 <HAL_GetTick>
 8009d0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009d10:	e008      	b.n	8009d24 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009d12:	f7f8 f891 	bl	8001e38 <HAL_GetTick>
 8009d16:	4602      	mov	r2, r0
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	1ad3      	subs	r3, r2, r3
 8009d1c:	2b02      	cmp	r3, #2
 8009d1e:	d901      	bls.n	8009d24 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009d20:	2303      	movs	r3, #3
 8009d22:	e006      	b.n	8009d32 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009d24:	4b05      	ldr	r3, [pc, #20]	; (8009d3c <RCCEx_PLL3_Config+0x15c>)
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d0f0      	beq.n	8009d12 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	3710      	adds	r7, #16
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}
 8009d3a:	bf00      	nop
 8009d3c:	58024400 	.word	0x58024400
 8009d40:	ffff0007 	.word	0xffff0007

08009d44 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b084      	sub	sp, #16
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d50:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d008      	beq.n	8009d72 <HAL_SD_IRQHandler+0x2e>
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	f003 0308 	and.w	r3, r3, #8
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d003      	beq.n	8009d72 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f000 f9ac 	bl	800a0c8 <SD_Read_IT>
 8009d70:	e19a      	b.n	800a0a8 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	f000 80ac 	beq.w	8009eda <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009d8a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681a      	ldr	r2, [r3, #0]
 8009d96:	4b59      	ldr	r3, [pc, #356]	; (8009efc <HAL_SD_IRQHandler+0x1b8>)
 8009d98:	400b      	ands	r3, r1
 8009d9a:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8009daa:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	68da      	ldr	r2, [r3, #12]
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009dba:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	f003 0308 	and.w	r3, r3, #8
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d038      	beq.n	8009e38 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	f003 0302 	and.w	r3, r3, #2
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d104      	bne.n	8009dda <HAL_SD_IRQHandler+0x96>
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	f003 0320 	and.w	r3, r3, #32
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d011      	beq.n	8009dfe <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	4618      	mov	r0, r3
 8009de0:	f003 f942 	bl	800d068 <SDMMC_CmdStopTransfer>
 8009de4:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8009de6:	68bb      	ldr	r3, [r7, #8]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d008      	beq.n	8009dfe <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	431a      	orrs	r2, r3
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f000 f95b 	bl	800a0b4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	4a3f      	ldr	r2, [pc, #252]	; (8009f00 <HAL_SD_IRQHandler+0x1bc>)
 8009e04:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2201      	movs	r2, #1
 8009e0a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2200      	movs	r2, #0
 8009e12:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	f003 0301 	and.w	r3, r3, #1
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d104      	bne.n	8009e28 <HAL_SD_IRQHandler+0xe4>
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	f003 0302 	and.w	r3, r3, #2
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d003      	beq.n	8009e30 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8009e28:	6878      	ldr	r0, [r7, #4]
 8009e2a:	f004 fdc7 	bl	800e9bc <HAL_SD_RxCpltCallback>
 8009e2e:	e13b      	b.n	800a0a8 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f004 fdb9 	bl	800e9a8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009e36:	e137      	b.n	800a0a8 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	f000 8132 	beq.w	800a0a8 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	2200      	movs	r2, #0
 8009e4a:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	2200      	movs	r2, #0
 8009e52:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	2200      	movs	r2, #0
 8009e5a:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	f003 0302 	and.w	r3, r3, #2
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d104      	bne.n	8009e70 <HAL_SD_IRQHandler+0x12c>
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	f003 0320 	and.w	r3, r3, #32
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d011      	beq.n	8009e94 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	4618      	mov	r0, r3
 8009e76:	f003 f8f7 	bl	800d068 <SDMMC_CmdStopTransfer>
 8009e7a:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d008      	beq.n	8009e94 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	431a      	orrs	r2, r3
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f000 f910 	bl	800a0b4 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2201      	movs	r2, #1
 8009e98:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	f003 0310 	and.w	r3, r3, #16
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d104      	bne.n	8009eb6 <HAL_SD_IRQHandler+0x172>
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	f003 0320 	and.w	r3, r3, #32
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d002      	beq.n	8009ebc <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	f004 fd76 	bl	800e9a8 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	f003 0301 	and.w	r3, r3, #1
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d105      	bne.n	8009ed2 <HAL_SD_IRQHandler+0x18e>
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	f003 0302 	and.w	r3, r3, #2
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	f000 80eb 	beq.w	800a0a8 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f004 fd72 	bl	800e9bc <HAL_SD_RxCpltCallback>
}
 8009ed8:	e0e6      	b.n	800a0a8 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ee0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d00d      	beq.n	8009f04 <HAL_SD_IRQHandler+0x1c0>
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	f003 0308 	and.w	r3, r3, #8
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d008      	beq.n	8009f04 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f000 f92e 	bl	800a154 <SD_Write_IT>
 8009ef8:	e0d6      	b.n	800a0a8 <HAL_SD_IRQHandler+0x364>
 8009efa:	bf00      	nop
 8009efc:	ffff3ec5 	.word	0xffff3ec5
 8009f00:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f0a:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	f000 809d 	beq.w	800a04e <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f1a:	f003 0302 	and.w	r3, r3, #2
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d005      	beq.n	8009f2e <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f26:	f043 0202 	orr.w	r2, r3, #2
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f34:	f003 0308 	and.w	r3, r3, #8
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d005      	beq.n	8009f48 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f40:	f043 0208 	orr.w	r2, r3, #8
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f4e:	f003 0320 	and.w	r3, r3, #32
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d005      	beq.n	8009f62 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f5a:	f043 0220 	orr.w	r2, r3, #32
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f68:	f003 0310 	and.w	r3, r3, #16
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d005      	beq.n	8009f7c <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f74:	f043 0210 	orr.w	r2, r3, #16
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	4a4b      	ldr	r2, [pc, #300]	; (800a0b0 <HAL_SD_IRQHandler+0x36c>)
 8009f82:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8009f92:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	68da      	ldr	r2, [r3, #12]
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009fa2:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009fb2:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	68da      	ldr	r2, [r3, #12]
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009fc2:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f003 f84d 	bl	800d068 <SDMMC_CmdStopTransfer>
 8009fce:	4602      	mov	r2, r0
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fd4:	431a      	orrs	r2, r3
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	68da      	ldr	r2, [r3, #12]
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009fe8:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009ff2:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	f003 0308 	and.w	r3, r3, #8
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d00a      	beq.n	800a014 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2201      	movs	r2, #1
 800a002:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2200      	movs	r2, #0
 800a00a:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f000 f851 	bl	800a0b4 <HAL_SD_ErrorCallback>
}
 800a012:	e049      	b.n	800a0a8 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d044      	beq.n	800a0a8 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a022:	2b00      	cmp	r3, #0
 800a024:	d040      	beq.n	800a0a8 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800a034:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	2200      	movs	r2, #0
 800a03c:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2201      	movs	r2, #1
 800a042:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	f000 f834 	bl	800a0b4 <HAL_SD_ErrorCallback>
}
 800a04c:	e02c      	b.n	800a0a8 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a054:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d025      	beq.n	800a0a8 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a064:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a06c:	f003 0304 	and.w	r3, r3, #4
 800a070:	2b00      	cmp	r3, #0
 800a072:	d10c      	bne.n	800a08e <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	f003 0320 	and.w	r3, r3, #32
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d003      	beq.n	800a086 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f000 f8d0 	bl	800a224 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800a084:	e010      	b.n	800a0a8 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800a086:	6878      	ldr	r0, [r7, #4]
 800a088:	f000 f8b8 	bl	800a1fc <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800a08c:	e00c      	b.n	800a0a8 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	f003 0320 	and.w	r3, r3, #32
 800a094:	2b00      	cmp	r3, #0
 800a096:	d003      	beq.n	800a0a0 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800a098:	6878      	ldr	r0, [r7, #4]
 800a09a:	f000 f8b9 	bl	800a210 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800a09e:	e003      	b.n	800a0a8 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800a0a0:	6878      	ldr	r0, [r7, #4]
 800a0a2:	f000 f8a1 	bl	800a1e8 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800a0a6:	e7ff      	b.n	800a0a8 <HAL_SD_IRQHandler+0x364>
 800a0a8:	bf00      	nop
 800a0aa:	3710      	adds	r7, #16
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bd80      	pop	{r7, pc}
 800a0b0:	18000f3a 	.word	0x18000f3a

0800a0b4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	b083      	sub	sp, #12
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800a0bc:	bf00      	nop
 800a0be:	370c      	adds	r7, #12
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c6:	4770      	bx	lr

0800a0c8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b086      	sub	sp, #24
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0d4:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0da:	2b1f      	cmp	r3, #31
 800a0dc:	d936      	bls.n	800a14c <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800a0de:	2300      	movs	r3, #0
 800a0e0:	617b      	str	r3, [r7, #20]
 800a0e2:	e027      	b.n	800a134 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	f002 ff55 	bl	800cf98 <SDMMC_ReadFIFO>
 800a0ee:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	b2da      	uxtb	r2, r3
 800a0f4:	693b      	ldr	r3, [r7, #16]
 800a0f6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a0f8:	693b      	ldr	r3, [r7, #16]
 800a0fa:	3301      	adds	r3, #1
 800a0fc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	0a1b      	lsrs	r3, r3, #8
 800a102:	b2da      	uxtb	r2, r3
 800a104:	693b      	ldr	r3, [r7, #16]
 800a106:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a108:	693b      	ldr	r3, [r7, #16]
 800a10a:	3301      	adds	r3, #1
 800a10c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	0c1b      	lsrs	r3, r3, #16
 800a112:	b2da      	uxtb	r2, r3
 800a114:	693b      	ldr	r3, [r7, #16]
 800a116:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a118:	693b      	ldr	r3, [r7, #16]
 800a11a:	3301      	adds	r3, #1
 800a11c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	0e1b      	lsrs	r3, r3, #24
 800a122:	b2da      	uxtb	r2, r3
 800a124:	693b      	ldr	r3, [r7, #16]
 800a126:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a128:	693b      	ldr	r3, [r7, #16]
 800a12a:	3301      	adds	r3, #1
 800a12c:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800a12e:	697b      	ldr	r3, [r7, #20]
 800a130:	3301      	adds	r3, #1
 800a132:	617b      	str	r3, [r7, #20]
 800a134:	697b      	ldr	r3, [r7, #20]
 800a136:	2b07      	cmp	r3, #7
 800a138:	d9d4      	bls.n	800a0e4 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	693a      	ldr	r2, [r7, #16]
 800a13e:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a144:	f1a3 0220 	sub.w	r2, r3, #32
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800a14c:	bf00      	nop
 800a14e:	3718      	adds	r7, #24
 800a150:	46bd      	mov	sp, r7
 800a152:	bd80      	pop	{r7, pc}

0800a154 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b086      	sub	sp, #24
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	69db      	ldr	r3, [r3, #28]
 800a160:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6a1b      	ldr	r3, [r3, #32]
 800a166:	2b1f      	cmp	r3, #31
 800a168:	d93a      	bls.n	800a1e0 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800a16a:	2300      	movs	r3, #0
 800a16c:	617b      	str	r3, [r7, #20]
 800a16e:	e02b      	b.n	800a1c8 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800a170:	693b      	ldr	r3, [r7, #16]
 800a172:	781b      	ldrb	r3, [r3, #0]
 800a174:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a176:	693b      	ldr	r3, [r7, #16]
 800a178:	3301      	adds	r3, #1
 800a17a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800a17c:	693b      	ldr	r3, [r7, #16]
 800a17e:	781b      	ldrb	r3, [r3, #0]
 800a180:	021a      	lsls	r2, r3, #8
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	4313      	orrs	r3, r2
 800a186:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a188:	693b      	ldr	r3, [r7, #16]
 800a18a:	3301      	adds	r3, #1
 800a18c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800a18e:	693b      	ldr	r3, [r7, #16]
 800a190:	781b      	ldrb	r3, [r3, #0]
 800a192:	041a      	lsls	r2, r3, #16
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	4313      	orrs	r3, r2
 800a198:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a19a:	693b      	ldr	r3, [r7, #16]
 800a19c:	3301      	adds	r3, #1
 800a19e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800a1a0:	693b      	ldr	r3, [r7, #16]
 800a1a2:	781b      	ldrb	r3, [r3, #0]
 800a1a4:	061a      	lsls	r2, r3, #24
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	4313      	orrs	r3, r2
 800a1aa:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a1ac:	693b      	ldr	r3, [r7, #16]
 800a1ae:	3301      	adds	r3, #1
 800a1b0:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	f107 020c 	add.w	r2, r7, #12
 800a1ba:	4611      	mov	r1, r2
 800a1bc:	4618      	mov	r0, r3
 800a1be:	f002 fef8 	bl	800cfb2 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800a1c2:	697b      	ldr	r3, [r7, #20]
 800a1c4:	3301      	adds	r3, #1
 800a1c6:	617b      	str	r3, [r7, #20]
 800a1c8:	697b      	ldr	r3, [r7, #20]
 800a1ca:	2b07      	cmp	r3, #7
 800a1cc:	d9d0      	bls.n	800a170 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	693a      	ldr	r2, [r7, #16]
 800a1d2:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	6a1b      	ldr	r3, [r3, #32]
 800a1d8:	f1a3 0220 	sub.w	r2, r3, #32
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	621a      	str	r2, [r3, #32]
  }
}
 800a1e0:	bf00      	nop
 800a1e2:	3718      	adds	r7, #24
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}

0800a1e8 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	b083      	sub	sp, #12
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800a1f0:	bf00      	nop
 800a1f2:	370c      	adds	r7, #12
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fa:	4770      	bx	lr

0800a1fc <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	b083      	sub	sp, #12
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800a204:	bf00      	nop
 800a206:	370c      	adds	r7, #12
 800a208:	46bd      	mov	sp, r7
 800a20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20e:	4770      	bx	lr

0800a210 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800a210:	b480      	push	{r7}
 800a212:	b083      	sub	sp, #12
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800a218:	bf00      	nop
 800a21a:	370c      	adds	r7, #12
 800a21c:	46bd      	mov	sp, r7
 800a21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a222:	4770      	bx	lr

0800a224 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800a224:	b480      	push	{r7}
 800a226:	b083      	sub	sp, #12
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800a22c:	bf00      	nop
 800a22e:	370c      	adds	r7, #12
 800a230:	46bd      	mov	sp, r7
 800a232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a236:	4770      	bx	lr

0800a238 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b082      	sub	sp, #8
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d101      	bne.n	800a24a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a246:	2301      	movs	r3, #1
 800a248:	e049      	b.n	800a2de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a250:	b2db      	uxtb	r3, r3
 800a252:	2b00      	cmp	r3, #0
 800a254:	d106      	bne.n	800a264 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2200      	movs	r2, #0
 800a25a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a25e:	6878      	ldr	r0, [r7, #4]
 800a260:	f7f7 fab2 	bl	80017c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2202      	movs	r2, #2
 800a268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681a      	ldr	r2, [r3, #0]
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	3304      	adds	r3, #4
 800a274:	4619      	mov	r1, r3
 800a276:	4610      	mov	r0, r2
 800a278:	f000 fbec 	bl	800aa54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2201      	movs	r2, #1
 800a280:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2201      	movs	r2, #1
 800a288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2201      	movs	r2, #1
 800a290:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2201      	movs	r2, #1
 800a298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2201      	movs	r2, #1
 800a2a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2201      	movs	r2, #1
 800a2a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2201      	movs	r2, #1
 800a2b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2201      	movs	r2, #1
 800a2b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2201      	movs	r2, #1
 800a2c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2201      	movs	r2, #1
 800a2c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2201      	movs	r2, #1
 800a2d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2201      	movs	r2, #1
 800a2d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a2dc:	2300      	movs	r3, #0
}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	3708      	adds	r7, #8
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}

0800a2e6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a2e6:	b580      	push	{r7, lr}
 800a2e8:	b082      	sub	sp, #8
 800a2ea:	af00      	add	r7, sp, #0
 800a2ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d101      	bne.n	800a2f8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	e049      	b.n	800a38c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a2fe:	b2db      	uxtb	r3, r3
 800a300:	2b00      	cmp	r3, #0
 800a302:	d106      	bne.n	800a312 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2200      	movs	r2, #0
 800a308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a30c:	6878      	ldr	r0, [r7, #4]
 800a30e:	f000 f841 	bl	800a394 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2202      	movs	r2, #2
 800a316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681a      	ldr	r2, [r3, #0]
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	3304      	adds	r3, #4
 800a322:	4619      	mov	r1, r3
 800a324:	4610      	mov	r0, r2
 800a326:	f000 fb95 	bl	800aa54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2201      	movs	r2, #1
 800a32e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2201      	movs	r2, #1
 800a336:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2201      	movs	r2, #1
 800a33e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2201      	movs	r2, #1
 800a346:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2201      	movs	r2, #1
 800a34e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2201      	movs	r2, #1
 800a356:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2201      	movs	r2, #1
 800a35e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2201      	movs	r2, #1
 800a366:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2201      	movs	r2, #1
 800a36e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	2201      	movs	r2, #1
 800a376:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2201      	movs	r2, #1
 800a37e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2201      	movs	r2, #1
 800a386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a38a:	2300      	movs	r3, #0
}
 800a38c:	4618      	mov	r0, r3
 800a38e:	3708      	adds	r7, #8
 800a390:	46bd      	mov	sp, r7
 800a392:	bd80      	pop	{r7, pc}

0800a394 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a394:	b480      	push	{r7}
 800a396:	b083      	sub	sp, #12
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a39c:	bf00      	nop
 800a39e:	370c      	adds	r7, #12
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a6:	4770      	bx	lr

0800a3a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b082      	sub	sp, #8
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	691b      	ldr	r3, [r3, #16]
 800a3b6:	f003 0302 	and.w	r3, r3, #2
 800a3ba:	2b02      	cmp	r3, #2
 800a3bc:	d122      	bne.n	800a404 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	68db      	ldr	r3, [r3, #12]
 800a3c4:	f003 0302 	and.w	r3, r3, #2
 800a3c8:	2b02      	cmp	r3, #2
 800a3ca:	d11b      	bne.n	800a404 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	f06f 0202 	mvn.w	r2, #2
 800a3d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2201      	movs	r2, #1
 800a3da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	699b      	ldr	r3, [r3, #24]
 800a3e2:	f003 0303 	and.w	r3, r3, #3
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d003      	beq.n	800a3f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f000 fb14 	bl	800aa18 <HAL_TIM_IC_CaptureCallback>
 800a3f0:	e005      	b.n	800a3fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	f000 fb06 	bl	800aa04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a3f8:	6878      	ldr	r0, [r7, #4]
 800a3fa:	f000 fb17 	bl	800aa2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2200      	movs	r2, #0
 800a402:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	691b      	ldr	r3, [r3, #16]
 800a40a:	f003 0304 	and.w	r3, r3, #4
 800a40e:	2b04      	cmp	r3, #4
 800a410:	d122      	bne.n	800a458 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	68db      	ldr	r3, [r3, #12]
 800a418:	f003 0304 	and.w	r3, r3, #4
 800a41c:	2b04      	cmp	r3, #4
 800a41e:	d11b      	bne.n	800a458 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f06f 0204 	mvn.w	r2, #4
 800a428:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2202      	movs	r2, #2
 800a42e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	699b      	ldr	r3, [r3, #24]
 800a436:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d003      	beq.n	800a446 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	f000 faea 	bl	800aa18 <HAL_TIM_IC_CaptureCallback>
 800a444:	e005      	b.n	800a452 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a446:	6878      	ldr	r0, [r7, #4]
 800a448:	f000 fadc 	bl	800aa04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a44c:	6878      	ldr	r0, [r7, #4]
 800a44e:	f000 faed 	bl	800aa2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	2200      	movs	r2, #0
 800a456:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	691b      	ldr	r3, [r3, #16]
 800a45e:	f003 0308 	and.w	r3, r3, #8
 800a462:	2b08      	cmp	r3, #8
 800a464:	d122      	bne.n	800a4ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	68db      	ldr	r3, [r3, #12]
 800a46c:	f003 0308 	and.w	r3, r3, #8
 800a470:	2b08      	cmp	r3, #8
 800a472:	d11b      	bne.n	800a4ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f06f 0208 	mvn.w	r2, #8
 800a47c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2204      	movs	r2, #4
 800a482:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	69db      	ldr	r3, [r3, #28]
 800a48a:	f003 0303 	and.w	r3, r3, #3
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d003      	beq.n	800a49a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a492:	6878      	ldr	r0, [r7, #4]
 800a494:	f000 fac0 	bl	800aa18 <HAL_TIM_IC_CaptureCallback>
 800a498:	e005      	b.n	800a4a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	f000 fab2 	bl	800aa04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a4a0:	6878      	ldr	r0, [r7, #4]
 800a4a2:	f000 fac3 	bl	800aa2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	691b      	ldr	r3, [r3, #16]
 800a4b2:	f003 0310 	and.w	r3, r3, #16
 800a4b6:	2b10      	cmp	r3, #16
 800a4b8:	d122      	bne.n	800a500 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	68db      	ldr	r3, [r3, #12]
 800a4c0:	f003 0310 	and.w	r3, r3, #16
 800a4c4:	2b10      	cmp	r3, #16
 800a4c6:	d11b      	bne.n	800a500 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	f06f 0210 	mvn.w	r2, #16
 800a4d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2208      	movs	r2, #8
 800a4d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	69db      	ldr	r3, [r3, #28]
 800a4de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d003      	beq.n	800a4ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	f000 fa96 	bl	800aa18 <HAL_TIM_IC_CaptureCallback>
 800a4ec:	e005      	b.n	800a4fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f000 fa88 	bl	800aa04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	f000 fa99 	bl	800aa2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	691b      	ldr	r3, [r3, #16]
 800a506:	f003 0301 	and.w	r3, r3, #1
 800a50a:	2b01      	cmp	r3, #1
 800a50c:	d10e      	bne.n	800a52c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	68db      	ldr	r3, [r3, #12]
 800a514:	f003 0301 	and.w	r3, r3, #1
 800a518:	2b01      	cmp	r3, #1
 800a51a:	d107      	bne.n	800a52c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	f06f 0201 	mvn.w	r2, #1
 800a524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f000 fa62 	bl	800a9f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	691b      	ldr	r3, [r3, #16]
 800a532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a536:	2b80      	cmp	r3, #128	; 0x80
 800a538:	d10e      	bne.n	800a558 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	68db      	ldr	r3, [r3, #12]
 800a540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a544:	2b80      	cmp	r3, #128	; 0x80
 800a546:	d107      	bne.n	800a558 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a550:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	f000 ff94 	bl	800b480 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	691b      	ldr	r3, [r3, #16]
 800a55e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a562:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a566:	d10e      	bne.n	800a586 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	68db      	ldr	r3, [r3, #12]
 800a56e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a572:	2b80      	cmp	r3, #128	; 0x80
 800a574:	d107      	bne.n	800a586 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a57e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a580:	6878      	ldr	r0, [r7, #4]
 800a582:	f000 ff87 	bl	800b494 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	691b      	ldr	r3, [r3, #16]
 800a58c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a590:	2b40      	cmp	r3, #64	; 0x40
 800a592:	d10e      	bne.n	800a5b2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	68db      	ldr	r3, [r3, #12]
 800a59a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a59e:	2b40      	cmp	r3, #64	; 0x40
 800a5a0:	d107      	bne.n	800a5b2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a5aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a5ac:	6878      	ldr	r0, [r7, #4]
 800a5ae:	f000 fa47 	bl	800aa40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	691b      	ldr	r3, [r3, #16]
 800a5b8:	f003 0320 	and.w	r3, r3, #32
 800a5bc:	2b20      	cmp	r3, #32
 800a5be:	d10e      	bne.n	800a5de <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	68db      	ldr	r3, [r3, #12]
 800a5c6:	f003 0320 	and.w	r3, r3, #32
 800a5ca:	2b20      	cmp	r3, #32
 800a5cc:	d107      	bne.n	800a5de <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	f06f 0220 	mvn.w	r2, #32
 800a5d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	f000 ff47 	bl	800b46c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a5de:	bf00      	nop
 800a5e0:	3708      	adds	r7, #8
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bd80      	pop	{r7, pc}
	...

0800a5e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b084      	sub	sp, #16
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	60f8      	str	r0, [r7, #12]
 800a5f0:	60b9      	str	r1, [r7, #8]
 800a5f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a5fa:	2b01      	cmp	r3, #1
 800a5fc:	d101      	bne.n	800a602 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a5fe:	2302      	movs	r3, #2
 800a600:	e0fd      	b.n	800a7fe <HAL_TIM_PWM_ConfigChannel+0x216>
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	2201      	movs	r2, #1
 800a606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2b14      	cmp	r3, #20
 800a60e:	f200 80f0 	bhi.w	800a7f2 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800a612:	a201      	add	r2, pc, #4	; (adr r2, 800a618 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800a614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a618:	0800a66d 	.word	0x0800a66d
 800a61c:	0800a7f3 	.word	0x0800a7f3
 800a620:	0800a7f3 	.word	0x0800a7f3
 800a624:	0800a7f3 	.word	0x0800a7f3
 800a628:	0800a6ad 	.word	0x0800a6ad
 800a62c:	0800a7f3 	.word	0x0800a7f3
 800a630:	0800a7f3 	.word	0x0800a7f3
 800a634:	0800a7f3 	.word	0x0800a7f3
 800a638:	0800a6ef 	.word	0x0800a6ef
 800a63c:	0800a7f3 	.word	0x0800a7f3
 800a640:	0800a7f3 	.word	0x0800a7f3
 800a644:	0800a7f3 	.word	0x0800a7f3
 800a648:	0800a72f 	.word	0x0800a72f
 800a64c:	0800a7f3 	.word	0x0800a7f3
 800a650:	0800a7f3 	.word	0x0800a7f3
 800a654:	0800a7f3 	.word	0x0800a7f3
 800a658:	0800a771 	.word	0x0800a771
 800a65c:	0800a7f3 	.word	0x0800a7f3
 800a660:	0800a7f3 	.word	0x0800a7f3
 800a664:	0800a7f3 	.word	0x0800a7f3
 800a668:	0800a7b1 	.word	0x0800a7b1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	68b9      	ldr	r1, [r7, #8]
 800a672:	4618      	mov	r0, r3
 800a674:	f000 fa88 	bl	800ab88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	699a      	ldr	r2, [r3, #24]
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	f042 0208 	orr.w	r2, r2, #8
 800a686:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	699a      	ldr	r2, [r3, #24]
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	f022 0204 	bic.w	r2, r2, #4
 800a696:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	6999      	ldr	r1, [r3, #24]
 800a69e:	68bb      	ldr	r3, [r7, #8]
 800a6a0:	691a      	ldr	r2, [r3, #16]
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	430a      	orrs	r2, r1
 800a6a8:	619a      	str	r2, [r3, #24]
      break;
 800a6aa:	e0a3      	b.n	800a7f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	68b9      	ldr	r1, [r7, #8]
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	f000 faf8 	bl	800aca8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	699a      	ldr	r2, [r3, #24]
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a6c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	699a      	ldr	r2, [r3, #24]
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a6d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	6999      	ldr	r1, [r3, #24]
 800a6de:	68bb      	ldr	r3, [r7, #8]
 800a6e0:	691b      	ldr	r3, [r3, #16]
 800a6e2:	021a      	lsls	r2, r3, #8
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	430a      	orrs	r2, r1
 800a6ea:	619a      	str	r2, [r3, #24]
      break;
 800a6ec:	e082      	b.n	800a7f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	68b9      	ldr	r1, [r7, #8]
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	f000 fb61 	bl	800adbc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	69da      	ldr	r2, [r3, #28]
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	f042 0208 	orr.w	r2, r2, #8
 800a708:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	69da      	ldr	r2, [r3, #28]
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	f022 0204 	bic.w	r2, r2, #4
 800a718:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	69d9      	ldr	r1, [r3, #28]
 800a720:	68bb      	ldr	r3, [r7, #8]
 800a722:	691a      	ldr	r2, [r3, #16]
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	430a      	orrs	r2, r1
 800a72a:	61da      	str	r2, [r3, #28]
      break;
 800a72c:	e062      	b.n	800a7f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	68b9      	ldr	r1, [r7, #8]
 800a734:	4618      	mov	r0, r3
 800a736:	f000 fbc7 	bl	800aec8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	69da      	ldr	r2, [r3, #28]
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a748:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	69da      	ldr	r2, [r3, #28]
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a758:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	69d9      	ldr	r1, [r3, #28]
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	691b      	ldr	r3, [r3, #16]
 800a764:	021a      	lsls	r2, r3, #8
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	430a      	orrs	r2, r1
 800a76c:	61da      	str	r2, [r3, #28]
      break;
 800a76e:	e041      	b.n	800a7f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	68b9      	ldr	r1, [r7, #8]
 800a776:	4618      	mov	r0, r3
 800a778:	f000 fc0e 	bl	800af98 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	f042 0208 	orr.w	r2, r2, #8
 800a78a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	f022 0204 	bic.w	r2, r2, #4
 800a79a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a7a2:	68bb      	ldr	r3, [r7, #8]
 800a7a4:	691a      	ldr	r2, [r3, #16]
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	430a      	orrs	r2, r1
 800a7ac:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a7ae:	e021      	b.n	800a7f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	68b9      	ldr	r1, [r7, #8]
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	f000 fc50 	bl	800b05c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a7ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a7da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a7e2:	68bb      	ldr	r3, [r7, #8]
 800a7e4:	691b      	ldr	r3, [r3, #16]
 800a7e6:	021a      	lsls	r2, r3, #8
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	430a      	orrs	r2, r1
 800a7ee:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a7f0:	e000      	b.n	800a7f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800a7f2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a7fc:	2300      	movs	r3, #0
}
 800a7fe:	4618      	mov	r0, r3
 800a800:	3710      	adds	r7, #16
 800a802:	46bd      	mov	sp, r7
 800a804:	bd80      	pop	{r7, pc}
 800a806:	bf00      	nop

0800a808 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b084      	sub	sp, #16
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
 800a810:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a818:	2b01      	cmp	r3, #1
 800a81a:	d101      	bne.n	800a820 <HAL_TIM_ConfigClockSource+0x18>
 800a81c:	2302      	movs	r3, #2
 800a81e:	e0db      	b.n	800a9d8 <HAL_TIM_ConfigClockSource+0x1d0>
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2201      	movs	r2, #1
 800a824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2202      	movs	r2, #2
 800a82c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	689b      	ldr	r3, [r3, #8]
 800a836:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a838:	68fa      	ldr	r2, [r7, #12]
 800a83a:	4b69      	ldr	r3, [pc, #420]	; (800a9e0 <HAL_TIM_ConfigClockSource+0x1d8>)
 800a83c:	4013      	ands	r3, r2
 800a83e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a846:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	68fa      	ldr	r2, [r7, #12]
 800a84e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	4a63      	ldr	r2, [pc, #396]	; (800a9e4 <HAL_TIM_ConfigClockSource+0x1dc>)
 800a856:	4293      	cmp	r3, r2
 800a858:	f000 80a9 	beq.w	800a9ae <HAL_TIM_ConfigClockSource+0x1a6>
 800a85c:	4a61      	ldr	r2, [pc, #388]	; (800a9e4 <HAL_TIM_ConfigClockSource+0x1dc>)
 800a85e:	4293      	cmp	r3, r2
 800a860:	f200 80ae 	bhi.w	800a9c0 <HAL_TIM_ConfigClockSource+0x1b8>
 800a864:	4a60      	ldr	r2, [pc, #384]	; (800a9e8 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a866:	4293      	cmp	r3, r2
 800a868:	f000 80a1 	beq.w	800a9ae <HAL_TIM_ConfigClockSource+0x1a6>
 800a86c:	4a5e      	ldr	r2, [pc, #376]	; (800a9e8 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a86e:	4293      	cmp	r3, r2
 800a870:	f200 80a6 	bhi.w	800a9c0 <HAL_TIM_ConfigClockSource+0x1b8>
 800a874:	4a5d      	ldr	r2, [pc, #372]	; (800a9ec <HAL_TIM_ConfigClockSource+0x1e4>)
 800a876:	4293      	cmp	r3, r2
 800a878:	f000 8099 	beq.w	800a9ae <HAL_TIM_ConfigClockSource+0x1a6>
 800a87c:	4a5b      	ldr	r2, [pc, #364]	; (800a9ec <HAL_TIM_ConfigClockSource+0x1e4>)
 800a87e:	4293      	cmp	r3, r2
 800a880:	f200 809e 	bhi.w	800a9c0 <HAL_TIM_ConfigClockSource+0x1b8>
 800a884:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a888:	f000 8091 	beq.w	800a9ae <HAL_TIM_ConfigClockSource+0x1a6>
 800a88c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a890:	f200 8096 	bhi.w	800a9c0 <HAL_TIM_ConfigClockSource+0x1b8>
 800a894:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a898:	f000 8089 	beq.w	800a9ae <HAL_TIM_ConfigClockSource+0x1a6>
 800a89c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a8a0:	f200 808e 	bhi.w	800a9c0 <HAL_TIM_ConfigClockSource+0x1b8>
 800a8a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a8a8:	d03e      	beq.n	800a928 <HAL_TIM_ConfigClockSource+0x120>
 800a8aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a8ae:	f200 8087 	bhi.w	800a9c0 <HAL_TIM_ConfigClockSource+0x1b8>
 800a8b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a8b6:	f000 8085 	beq.w	800a9c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800a8ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a8be:	d87f      	bhi.n	800a9c0 <HAL_TIM_ConfigClockSource+0x1b8>
 800a8c0:	2b70      	cmp	r3, #112	; 0x70
 800a8c2:	d01a      	beq.n	800a8fa <HAL_TIM_ConfigClockSource+0xf2>
 800a8c4:	2b70      	cmp	r3, #112	; 0x70
 800a8c6:	d87b      	bhi.n	800a9c0 <HAL_TIM_ConfigClockSource+0x1b8>
 800a8c8:	2b60      	cmp	r3, #96	; 0x60
 800a8ca:	d050      	beq.n	800a96e <HAL_TIM_ConfigClockSource+0x166>
 800a8cc:	2b60      	cmp	r3, #96	; 0x60
 800a8ce:	d877      	bhi.n	800a9c0 <HAL_TIM_ConfigClockSource+0x1b8>
 800a8d0:	2b50      	cmp	r3, #80	; 0x50
 800a8d2:	d03c      	beq.n	800a94e <HAL_TIM_ConfigClockSource+0x146>
 800a8d4:	2b50      	cmp	r3, #80	; 0x50
 800a8d6:	d873      	bhi.n	800a9c0 <HAL_TIM_ConfigClockSource+0x1b8>
 800a8d8:	2b40      	cmp	r3, #64	; 0x40
 800a8da:	d058      	beq.n	800a98e <HAL_TIM_ConfigClockSource+0x186>
 800a8dc:	2b40      	cmp	r3, #64	; 0x40
 800a8de:	d86f      	bhi.n	800a9c0 <HAL_TIM_ConfigClockSource+0x1b8>
 800a8e0:	2b30      	cmp	r3, #48	; 0x30
 800a8e2:	d064      	beq.n	800a9ae <HAL_TIM_ConfigClockSource+0x1a6>
 800a8e4:	2b30      	cmp	r3, #48	; 0x30
 800a8e6:	d86b      	bhi.n	800a9c0 <HAL_TIM_ConfigClockSource+0x1b8>
 800a8e8:	2b20      	cmp	r3, #32
 800a8ea:	d060      	beq.n	800a9ae <HAL_TIM_ConfigClockSource+0x1a6>
 800a8ec:	2b20      	cmp	r3, #32
 800a8ee:	d867      	bhi.n	800a9c0 <HAL_TIM_ConfigClockSource+0x1b8>
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d05c      	beq.n	800a9ae <HAL_TIM_ConfigClockSource+0x1a6>
 800a8f4:	2b10      	cmp	r3, #16
 800a8f6:	d05a      	beq.n	800a9ae <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800a8f8:	e062      	b.n	800a9c0 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	6818      	ldr	r0, [r3, #0]
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	6899      	ldr	r1, [r3, #8]
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	685a      	ldr	r2, [r3, #4]
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	68db      	ldr	r3, [r3, #12]
 800a90a:	f000 fc89 	bl	800b220 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	689b      	ldr	r3, [r3, #8]
 800a914:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a91c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	68fa      	ldr	r2, [r7, #12]
 800a924:	609a      	str	r2, [r3, #8]
      break;
 800a926:	e04e      	b.n	800a9c6 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	6818      	ldr	r0, [r3, #0]
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	6899      	ldr	r1, [r3, #8]
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	685a      	ldr	r2, [r3, #4]
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	68db      	ldr	r3, [r3, #12]
 800a938:	f000 fc72 	bl	800b220 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	689a      	ldr	r2, [r3, #8]
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a94a:	609a      	str	r2, [r3, #8]
      break;
 800a94c:	e03b      	b.n	800a9c6 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	6818      	ldr	r0, [r3, #0]
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	6859      	ldr	r1, [r3, #4]
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	68db      	ldr	r3, [r3, #12]
 800a95a:	461a      	mov	r2, r3
 800a95c:	f000 fbe2 	bl	800b124 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	2150      	movs	r1, #80	; 0x50
 800a966:	4618      	mov	r0, r3
 800a968:	f000 fc3c 	bl	800b1e4 <TIM_ITRx_SetConfig>
      break;
 800a96c:	e02b      	b.n	800a9c6 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	6818      	ldr	r0, [r3, #0]
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	6859      	ldr	r1, [r3, #4]
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	68db      	ldr	r3, [r3, #12]
 800a97a:	461a      	mov	r2, r3
 800a97c:	f000 fc01 	bl	800b182 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	2160      	movs	r1, #96	; 0x60
 800a986:	4618      	mov	r0, r3
 800a988:	f000 fc2c 	bl	800b1e4 <TIM_ITRx_SetConfig>
      break;
 800a98c:	e01b      	b.n	800a9c6 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	6818      	ldr	r0, [r3, #0]
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	6859      	ldr	r1, [r3, #4]
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	68db      	ldr	r3, [r3, #12]
 800a99a:	461a      	mov	r2, r3
 800a99c:	f000 fbc2 	bl	800b124 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	2140      	movs	r1, #64	; 0x40
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f000 fc1c 	bl	800b1e4 <TIM_ITRx_SetConfig>
      break;
 800a9ac:	e00b      	b.n	800a9c6 <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681a      	ldr	r2, [r3, #0]
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	4619      	mov	r1, r3
 800a9b8:	4610      	mov	r0, r2
 800a9ba:	f000 fc13 	bl	800b1e4 <TIM_ITRx_SetConfig>
        break;
 800a9be:	e002      	b.n	800a9c6 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800a9c0:	bf00      	nop
 800a9c2:	e000      	b.n	800a9c6 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800a9c4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2201      	movs	r2, #1
 800a9ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a9d6:	2300      	movs	r3, #0
}
 800a9d8:	4618      	mov	r0, r3
 800a9da:	3710      	adds	r7, #16
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	bd80      	pop	{r7, pc}
 800a9e0:	ffceff88 	.word	0xffceff88
 800a9e4:	00100040 	.word	0x00100040
 800a9e8:	00100030 	.word	0x00100030
 800a9ec:	00100020 	.word	0x00100020

0800a9f0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a9f0:	b480      	push	{r7}
 800a9f2:	b083      	sub	sp, #12
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a9f8:	bf00      	nop
 800a9fa:	370c      	adds	r7, #12
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa02:	4770      	bx	lr

0800aa04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aa04:	b480      	push	{r7}
 800aa06:	b083      	sub	sp, #12
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aa0c:	bf00      	nop
 800aa0e:	370c      	adds	r7, #12
 800aa10:	46bd      	mov	sp, r7
 800aa12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa16:	4770      	bx	lr

0800aa18 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aa18:	b480      	push	{r7}
 800aa1a:	b083      	sub	sp, #12
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aa20:	bf00      	nop
 800aa22:	370c      	adds	r7, #12
 800aa24:	46bd      	mov	sp, r7
 800aa26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2a:	4770      	bx	lr

0800aa2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	b083      	sub	sp, #12
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aa34:	bf00      	nop
 800aa36:	370c      	adds	r7, #12
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3e:	4770      	bx	lr

0800aa40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aa40:	b480      	push	{r7}
 800aa42:	b083      	sub	sp, #12
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aa48:	bf00      	nop
 800aa4a:	370c      	adds	r7, #12
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa52:	4770      	bx	lr

0800aa54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800aa54:	b480      	push	{r7}
 800aa56:	b085      	sub	sp, #20
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
 800aa5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	4a40      	ldr	r2, [pc, #256]	; (800ab68 <TIM_Base_SetConfig+0x114>)
 800aa68:	4293      	cmp	r3, r2
 800aa6a:	d013      	beq.n	800aa94 <TIM_Base_SetConfig+0x40>
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa72:	d00f      	beq.n	800aa94 <TIM_Base_SetConfig+0x40>
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	4a3d      	ldr	r2, [pc, #244]	; (800ab6c <TIM_Base_SetConfig+0x118>)
 800aa78:	4293      	cmp	r3, r2
 800aa7a:	d00b      	beq.n	800aa94 <TIM_Base_SetConfig+0x40>
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	4a3c      	ldr	r2, [pc, #240]	; (800ab70 <TIM_Base_SetConfig+0x11c>)
 800aa80:	4293      	cmp	r3, r2
 800aa82:	d007      	beq.n	800aa94 <TIM_Base_SetConfig+0x40>
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	4a3b      	ldr	r2, [pc, #236]	; (800ab74 <TIM_Base_SetConfig+0x120>)
 800aa88:	4293      	cmp	r3, r2
 800aa8a:	d003      	beq.n	800aa94 <TIM_Base_SetConfig+0x40>
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	4a3a      	ldr	r2, [pc, #232]	; (800ab78 <TIM_Base_SetConfig+0x124>)
 800aa90:	4293      	cmp	r3, r2
 800aa92:	d108      	bne.n	800aaa6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	685b      	ldr	r3, [r3, #4]
 800aaa0:	68fa      	ldr	r2, [r7, #12]
 800aaa2:	4313      	orrs	r3, r2
 800aaa4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	4a2f      	ldr	r2, [pc, #188]	; (800ab68 <TIM_Base_SetConfig+0x114>)
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d01f      	beq.n	800aaee <TIM_Base_SetConfig+0x9a>
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aab4:	d01b      	beq.n	800aaee <TIM_Base_SetConfig+0x9a>
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	4a2c      	ldr	r2, [pc, #176]	; (800ab6c <TIM_Base_SetConfig+0x118>)
 800aaba:	4293      	cmp	r3, r2
 800aabc:	d017      	beq.n	800aaee <TIM_Base_SetConfig+0x9a>
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	4a2b      	ldr	r2, [pc, #172]	; (800ab70 <TIM_Base_SetConfig+0x11c>)
 800aac2:	4293      	cmp	r3, r2
 800aac4:	d013      	beq.n	800aaee <TIM_Base_SetConfig+0x9a>
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	4a2a      	ldr	r2, [pc, #168]	; (800ab74 <TIM_Base_SetConfig+0x120>)
 800aaca:	4293      	cmp	r3, r2
 800aacc:	d00f      	beq.n	800aaee <TIM_Base_SetConfig+0x9a>
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	4a29      	ldr	r2, [pc, #164]	; (800ab78 <TIM_Base_SetConfig+0x124>)
 800aad2:	4293      	cmp	r3, r2
 800aad4:	d00b      	beq.n	800aaee <TIM_Base_SetConfig+0x9a>
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	4a28      	ldr	r2, [pc, #160]	; (800ab7c <TIM_Base_SetConfig+0x128>)
 800aada:	4293      	cmp	r3, r2
 800aadc:	d007      	beq.n	800aaee <TIM_Base_SetConfig+0x9a>
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	4a27      	ldr	r2, [pc, #156]	; (800ab80 <TIM_Base_SetConfig+0x12c>)
 800aae2:	4293      	cmp	r3, r2
 800aae4:	d003      	beq.n	800aaee <TIM_Base_SetConfig+0x9a>
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	4a26      	ldr	r2, [pc, #152]	; (800ab84 <TIM_Base_SetConfig+0x130>)
 800aaea:	4293      	cmp	r3, r2
 800aaec:	d108      	bne.n	800ab00 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aaf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aaf6:	683b      	ldr	r3, [r7, #0]
 800aaf8:	68db      	ldr	r3, [r3, #12]
 800aafa:	68fa      	ldr	r2, [r7, #12]
 800aafc:	4313      	orrs	r3, r2
 800aafe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	695b      	ldr	r3, [r3, #20]
 800ab0a:	4313      	orrs	r3, r2
 800ab0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	68fa      	ldr	r2, [r7, #12]
 800ab12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	689a      	ldr	r2, [r3, #8]
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	681a      	ldr	r2, [r3, #0]
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	4a10      	ldr	r2, [pc, #64]	; (800ab68 <TIM_Base_SetConfig+0x114>)
 800ab28:	4293      	cmp	r3, r2
 800ab2a:	d00f      	beq.n	800ab4c <TIM_Base_SetConfig+0xf8>
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	4a12      	ldr	r2, [pc, #72]	; (800ab78 <TIM_Base_SetConfig+0x124>)
 800ab30:	4293      	cmp	r3, r2
 800ab32:	d00b      	beq.n	800ab4c <TIM_Base_SetConfig+0xf8>
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	4a11      	ldr	r2, [pc, #68]	; (800ab7c <TIM_Base_SetConfig+0x128>)
 800ab38:	4293      	cmp	r3, r2
 800ab3a:	d007      	beq.n	800ab4c <TIM_Base_SetConfig+0xf8>
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	4a10      	ldr	r2, [pc, #64]	; (800ab80 <TIM_Base_SetConfig+0x12c>)
 800ab40:	4293      	cmp	r3, r2
 800ab42:	d003      	beq.n	800ab4c <TIM_Base_SetConfig+0xf8>
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	4a0f      	ldr	r2, [pc, #60]	; (800ab84 <TIM_Base_SetConfig+0x130>)
 800ab48:	4293      	cmp	r3, r2
 800ab4a:	d103      	bne.n	800ab54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	691a      	ldr	r2, [r3, #16]
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2201      	movs	r2, #1
 800ab58:	615a      	str	r2, [r3, #20]
}
 800ab5a:	bf00      	nop
 800ab5c:	3714      	adds	r7, #20
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab64:	4770      	bx	lr
 800ab66:	bf00      	nop
 800ab68:	40010000 	.word	0x40010000
 800ab6c:	40000400 	.word	0x40000400
 800ab70:	40000800 	.word	0x40000800
 800ab74:	40000c00 	.word	0x40000c00
 800ab78:	40010400 	.word	0x40010400
 800ab7c:	40014000 	.word	0x40014000
 800ab80:	40014400 	.word	0x40014400
 800ab84:	40014800 	.word	0x40014800

0800ab88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ab88:	b480      	push	{r7}
 800ab8a:	b087      	sub	sp, #28
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
 800ab90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6a1b      	ldr	r3, [r3, #32]
 800ab96:	f023 0201 	bic.w	r2, r3, #1
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	6a1b      	ldr	r3, [r3, #32]
 800aba2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	685b      	ldr	r3, [r3, #4]
 800aba8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	699b      	ldr	r3, [r3, #24]
 800abae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800abb0:	68fa      	ldr	r2, [r7, #12]
 800abb2:	4b37      	ldr	r3, [pc, #220]	; (800ac90 <TIM_OC1_SetConfig+0x108>)
 800abb4:	4013      	ands	r3, r2
 800abb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	f023 0303 	bic.w	r3, r3, #3
 800abbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	68fa      	ldr	r2, [r7, #12]
 800abc6:	4313      	orrs	r3, r2
 800abc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800abca:	697b      	ldr	r3, [r7, #20]
 800abcc:	f023 0302 	bic.w	r3, r3, #2
 800abd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	689b      	ldr	r3, [r3, #8]
 800abd6:	697a      	ldr	r2, [r7, #20]
 800abd8:	4313      	orrs	r3, r2
 800abda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	4a2d      	ldr	r2, [pc, #180]	; (800ac94 <TIM_OC1_SetConfig+0x10c>)
 800abe0:	4293      	cmp	r3, r2
 800abe2:	d00f      	beq.n	800ac04 <TIM_OC1_SetConfig+0x7c>
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	4a2c      	ldr	r2, [pc, #176]	; (800ac98 <TIM_OC1_SetConfig+0x110>)
 800abe8:	4293      	cmp	r3, r2
 800abea:	d00b      	beq.n	800ac04 <TIM_OC1_SetConfig+0x7c>
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	4a2b      	ldr	r2, [pc, #172]	; (800ac9c <TIM_OC1_SetConfig+0x114>)
 800abf0:	4293      	cmp	r3, r2
 800abf2:	d007      	beq.n	800ac04 <TIM_OC1_SetConfig+0x7c>
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	4a2a      	ldr	r2, [pc, #168]	; (800aca0 <TIM_OC1_SetConfig+0x118>)
 800abf8:	4293      	cmp	r3, r2
 800abfa:	d003      	beq.n	800ac04 <TIM_OC1_SetConfig+0x7c>
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	4a29      	ldr	r2, [pc, #164]	; (800aca4 <TIM_OC1_SetConfig+0x11c>)
 800ac00:	4293      	cmp	r3, r2
 800ac02:	d10c      	bne.n	800ac1e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ac04:	697b      	ldr	r3, [r7, #20]
 800ac06:	f023 0308 	bic.w	r3, r3, #8
 800ac0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	68db      	ldr	r3, [r3, #12]
 800ac10:	697a      	ldr	r2, [r7, #20]
 800ac12:	4313      	orrs	r3, r2
 800ac14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ac16:	697b      	ldr	r3, [r7, #20]
 800ac18:	f023 0304 	bic.w	r3, r3, #4
 800ac1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	4a1c      	ldr	r2, [pc, #112]	; (800ac94 <TIM_OC1_SetConfig+0x10c>)
 800ac22:	4293      	cmp	r3, r2
 800ac24:	d00f      	beq.n	800ac46 <TIM_OC1_SetConfig+0xbe>
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	4a1b      	ldr	r2, [pc, #108]	; (800ac98 <TIM_OC1_SetConfig+0x110>)
 800ac2a:	4293      	cmp	r3, r2
 800ac2c:	d00b      	beq.n	800ac46 <TIM_OC1_SetConfig+0xbe>
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	4a1a      	ldr	r2, [pc, #104]	; (800ac9c <TIM_OC1_SetConfig+0x114>)
 800ac32:	4293      	cmp	r3, r2
 800ac34:	d007      	beq.n	800ac46 <TIM_OC1_SetConfig+0xbe>
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	4a19      	ldr	r2, [pc, #100]	; (800aca0 <TIM_OC1_SetConfig+0x118>)
 800ac3a:	4293      	cmp	r3, r2
 800ac3c:	d003      	beq.n	800ac46 <TIM_OC1_SetConfig+0xbe>
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	4a18      	ldr	r2, [pc, #96]	; (800aca4 <TIM_OC1_SetConfig+0x11c>)
 800ac42:	4293      	cmp	r3, r2
 800ac44:	d111      	bne.n	800ac6a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ac46:	693b      	ldr	r3, [r7, #16]
 800ac48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ac4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ac4e:	693b      	ldr	r3, [r7, #16]
 800ac50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ac54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	695b      	ldr	r3, [r3, #20]
 800ac5a:	693a      	ldr	r2, [r7, #16]
 800ac5c:	4313      	orrs	r3, r2
 800ac5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	699b      	ldr	r3, [r3, #24]
 800ac64:	693a      	ldr	r2, [r7, #16]
 800ac66:	4313      	orrs	r3, r2
 800ac68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	693a      	ldr	r2, [r7, #16]
 800ac6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	68fa      	ldr	r2, [r7, #12]
 800ac74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	685a      	ldr	r2, [r3, #4]
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	697a      	ldr	r2, [r7, #20]
 800ac82:	621a      	str	r2, [r3, #32]
}
 800ac84:	bf00      	nop
 800ac86:	371c      	adds	r7, #28
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8e:	4770      	bx	lr
 800ac90:	fffeff8f 	.word	0xfffeff8f
 800ac94:	40010000 	.word	0x40010000
 800ac98:	40010400 	.word	0x40010400
 800ac9c:	40014000 	.word	0x40014000
 800aca0:	40014400 	.word	0x40014400
 800aca4:	40014800 	.word	0x40014800

0800aca8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aca8:	b480      	push	{r7}
 800acaa:	b087      	sub	sp, #28
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
 800acb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6a1b      	ldr	r3, [r3, #32]
 800acb6:	f023 0210 	bic.w	r2, r3, #16
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6a1b      	ldr	r3, [r3, #32]
 800acc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	685b      	ldr	r3, [r3, #4]
 800acc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	699b      	ldr	r3, [r3, #24]
 800acce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800acd0:	68fa      	ldr	r2, [r7, #12]
 800acd2:	4b34      	ldr	r3, [pc, #208]	; (800ada4 <TIM_OC2_SetConfig+0xfc>)
 800acd4:	4013      	ands	r3, r2
 800acd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800acde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	021b      	lsls	r3, r3, #8
 800ace6:	68fa      	ldr	r2, [r7, #12]
 800ace8:	4313      	orrs	r3, r2
 800acea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800acec:	697b      	ldr	r3, [r7, #20]
 800acee:	f023 0320 	bic.w	r3, r3, #32
 800acf2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	689b      	ldr	r3, [r3, #8]
 800acf8:	011b      	lsls	r3, r3, #4
 800acfa:	697a      	ldr	r2, [r7, #20]
 800acfc:	4313      	orrs	r3, r2
 800acfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	4a29      	ldr	r2, [pc, #164]	; (800ada8 <TIM_OC2_SetConfig+0x100>)
 800ad04:	4293      	cmp	r3, r2
 800ad06:	d003      	beq.n	800ad10 <TIM_OC2_SetConfig+0x68>
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	4a28      	ldr	r2, [pc, #160]	; (800adac <TIM_OC2_SetConfig+0x104>)
 800ad0c:	4293      	cmp	r3, r2
 800ad0e:	d10d      	bne.n	800ad2c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ad10:	697b      	ldr	r3, [r7, #20]
 800ad12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ad16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ad18:	683b      	ldr	r3, [r7, #0]
 800ad1a:	68db      	ldr	r3, [r3, #12]
 800ad1c:	011b      	lsls	r3, r3, #4
 800ad1e:	697a      	ldr	r2, [r7, #20]
 800ad20:	4313      	orrs	r3, r2
 800ad22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ad24:	697b      	ldr	r3, [r7, #20]
 800ad26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad2a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	4a1e      	ldr	r2, [pc, #120]	; (800ada8 <TIM_OC2_SetConfig+0x100>)
 800ad30:	4293      	cmp	r3, r2
 800ad32:	d00f      	beq.n	800ad54 <TIM_OC2_SetConfig+0xac>
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	4a1d      	ldr	r2, [pc, #116]	; (800adac <TIM_OC2_SetConfig+0x104>)
 800ad38:	4293      	cmp	r3, r2
 800ad3a:	d00b      	beq.n	800ad54 <TIM_OC2_SetConfig+0xac>
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	4a1c      	ldr	r2, [pc, #112]	; (800adb0 <TIM_OC2_SetConfig+0x108>)
 800ad40:	4293      	cmp	r3, r2
 800ad42:	d007      	beq.n	800ad54 <TIM_OC2_SetConfig+0xac>
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	4a1b      	ldr	r2, [pc, #108]	; (800adb4 <TIM_OC2_SetConfig+0x10c>)
 800ad48:	4293      	cmp	r3, r2
 800ad4a:	d003      	beq.n	800ad54 <TIM_OC2_SetConfig+0xac>
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	4a1a      	ldr	r2, [pc, #104]	; (800adb8 <TIM_OC2_SetConfig+0x110>)
 800ad50:	4293      	cmp	r3, r2
 800ad52:	d113      	bne.n	800ad7c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ad54:	693b      	ldr	r3, [r7, #16]
 800ad56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ad5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ad5c:	693b      	ldr	r3, [r7, #16]
 800ad5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ad62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ad64:	683b      	ldr	r3, [r7, #0]
 800ad66:	695b      	ldr	r3, [r3, #20]
 800ad68:	009b      	lsls	r3, r3, #2
 800ad6a:	693a      	ldr	r2, [r7, #16]
 800ad6c:	4313      	orrs	r3, r2
 800ad6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ad70:	683b      	ldr	r3, [r7, #0]
 800ad72:	699b      	ldr	r3, [r3, #24]
 800ad74:	009b      	lsls	r3, r3, #2
 800ad76:	693a      	ldr	r2, [r7, #16]
 800ad78:	4313      	orrs	r3, r2
 800ad7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	693a      	ldr	r2, [r7, #16]
 800ad80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	68fa      	ldr	r2, [r7, #12]
 800ad86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	685a      	ldr	r2, [r3, #4]
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	697a      	ldr	r2, [r7, #20]
 800ad94:	621a      	str	r2, [r3, #32]
}
 800ad96:	bf00      	nop
 800ad98:	371c      	adds	r7, #28
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada0:	4770      	bx	lr
 800ada2:	bf00      	nop
 800ada4:	feff8fff 	.word	0xfeff8fff
 800ada8:	40010000 	.word	0x40010000
 800adac:	40010400 	.word	0x40010400
 800adb0:	40014000 	.word	0x40014000
 800adb4:	40014400 	.word	0x40014400
 800adb8:	40014800 	.word	0x40014800

0800adbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800adbc:	b480      	push	{r7}
 800adbe:	b087      	sub	sp, #28
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
 800adc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6a1b      	ldr	r3, [r3, #32]
 800adca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6a1b      	ldr	r3, [r3, #32]
 800add6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	685b      	ldr	r3, [r3, #4]
 800addc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	69db      	ldr	r3, [r3, #28]
 800ade2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800adea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	f023 0303 	bic.w	r3, r3, #3
 800adf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800adf4:	683b      	ldr	r3, [r7, #0]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	68fa      	ldr	r2, [r7, #12]
 800adfa:	4313      	orrs	r3, r2
 800adfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800adfe:	697b      	ldr	r3, [r7, #20]
 800ae00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ae04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	689b      	ldr	r3, [r3, #8]
 800ae0a:	021b      	lsls	r3, r3, #8
 800ae0c:	697a      	ldr	r2, [r7, #20]
 800ae0e:	4313      	orrs	r3, r2
 800ae10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	4a27      	ldr	r2, [pc, #156]	; (800aeb4 <TIM_OC3_SetConfig+0xf8>)
 800ae16:	4293      	cmp	r3, r2
 800ae18:	d003      	beq.n	800ae22 <TIM_OC3_SetConfig+0x66>
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	4a26      	ldr	r2, [pc, #152]	; (800aeb8 <TIM_OC3_SetConfig+0xfc>)
 800ae1e:	4293      	cmp	r3, r2
 800ae20:	d10d      	bne.n	800ae3e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ae22:	697b      	ldr	r3, [r7, #20]
 800ae24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ae28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	68db      	ldr	r3, [r3, #12]
 800ae2e:	021b      	lsls	r3, r3, #8
 800ae30:	697a      	ldr	r2, [r7, #20]
 800ae32:	4313      	orrs	r3, r2
 800ae34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ae36:	697b      	ldr	r3, [r7, #20]
 800ae38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ae3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	4a1c      	ldr	r2, [pc, #112]	; (800aeb4 <TIM_OC3_SetConfig+0xf8>)
 800ae42:	4293      	cmp	r3, r2
 800ae44:	d00f      	beq.n	800ae66 <TIM_OC3_SetConfig+0xaa>
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	4a1b      	ldr	r2, [pc, #108]	; (800aeb8 <TIM_OC3_SetConfig+0xfc>)
 800ae4a:	4293      	cmp	r3, r2
 800ae4c:	d00b      	beq.n	800ae66 <TIM_OC3_SetConfig+0xaa>
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	4a1a      	ldr	r2, [pc, #104]	; (800aebc <TIM_OC3_SetConfig+0x100>)
 800ae52:	4293      	cmp	r3, r2
 800ae54:	d007      	beq.n	800ae66 <TIM_OC3_SetConfig+0xaa>
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	4a19      	ldr	r2, [pc, #100]	; (800aec0 <TIM_OC3_SetConfig+0x104>)
 800ae5a:	4293      	cmp	r3, r2
 800ae5c:	d003      	beq.n	800ae66 <TIM_OC3_SetConfig+0xaa>
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	4a18      	ldr	r2, [pc, #96]	; (800aec4 <TIM_OC3_SetConfig+0x108>)
 800ae62:	4293      	cmp	r3, r2
 800ae64:	d113      	bne.n	800ae8e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ae66:	693b      	ldr	r3, [r7, #16]
 800ae68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ae6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ae6e:	693b      	ldr	r3, [r7, #16]
 800ae70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ae74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	695b      	ldr	r3, [r3, #20]
 800ae7a:	011b      	lsls	r3, r3, #4
 800ae7c:	693a      	ldr	r2, [r7, #16]
 800ae7e:	4313      	orrs	r3, r2
 800ae80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ae82:	683b      	ldr	r3, [r7, #0]
 800ae84:	699b      	ldr	r3, [r3, #24]
 800ae86:	011b      	lsls	r3, r3, #4
 800ae88:	693a      	ldr	r2, [r7, #16]
 800ae8a:	4313      	orrs	r3, r2
 800ae8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	693a      	ldr	r2, [r7, #16]
 800ae92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	68fa      	ldr	r2, [r7, #12]
 800ae98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	685a      	ldr	r2, [r3, #4]
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	697a      	ldr	r2, [r7, #20]
 800aea6:	621a      	str	r2, [r3, #32]
}
 800aea8:	bf00      	nop
 800aeaa:	371c      	adds	r7, #28
 800aeac:	46bd      	mov	sp, r7
 800aeae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb2:	4770      	bx	lr
 800aeb4:	40010000 	.word	0x40010000
 800aeb8:	40010400 	.word	0x40010400
 800aebc:	40014000 	.word	0x40014000
 800aec0:	40014400 	.word	0x40014400
 800aec4:	40014800 	.word	0x40014800

0800aec8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aec8:	b480      	push	{r7}
 800aeca:	b087      	sub	sp, #28
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
 800aed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	6a1b      	ldr	r3, [r3, #32]
 800aed6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	6a1b      	ldr	r3, [r3, #32]
 800aee2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	685b      	ldr	r3, [r3, #4]
 800aee8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	69db      	ldr	r3, [r3, #28]
 800aeee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aef6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aefe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	021b      	lsls	r3, r3, #8
 800af06:	68fa      	ldr	r2, [r7, #12]
 800af08:	4313      	orrs	r3, r2
 800af0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800af0c:	693b      	ldr	r3, [r7, #16]
 800af0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800af12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	689b      	ldr	r3, [r3, #8]
 800af18:	031b      	lsls	r3, r3, #12
 800af1a:	693a      	ldr	r2, [r7, #16]
 800af1c:	4313      	orrs	r3, r2
 800af1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	4a18      	ldr	r2, [pc, #96]	; (800af84 <TIM_OC4_SetConfig+0xbc>)
 800af24:	4293      	cmp	r3, r2
 800af26:	d00f      	beq.n	800af48 <TIM_OC4_SetConfig+0x80>
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	4a17      	ldr	r2, [pc, #92]	; (800af88 <TIM_OC4_SetConfig+0xc0>)
 800af2c:	4293      	cmp	r3, r2
 800af2e:	d00b      	beq.n	800af48 <TIM_OC4_SetConfig+0x80>
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	4a16      	ldr	r2, [pc, #88]	; (800af8c <TIM_OC4_SetConfig+0xc4>)
 800af34:	4293      	cmp	r3, r2
 800af36:	d007      	beq.n	800af48 <TIM_OC4_SetConfig+0x80>
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	4a15      	ldr	r2, [pc, #84]	; (800af90 <TIM_OC4_SetConfig+0xc8>)
 800af3c:	4293      	cmp	r3, r2
 800af3e:	d003      	beq.n	800af48 <TIM_OC4_SetConfig+0x80>
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	4a14      	ldr	r2, [pc, #80]	; (800af94 <TIM_OC4_SetConfig+0xcc>)
 800af44:	4293      	cmp	r3, r2
 800af46:	d109      	bne.n	800af5c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800af48:	697b      	ldr	r3, [r7, #20]
 800af4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800af4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	695b      	ldr	r3, [r3, #20]
 800af54:	019b      	lsls	r3, r3, #6
 800af56:	697a      	ldr	r2, [r7, #20]
 800af58:	4313      	orrs	r3, r2
 800af5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	697a      	ldr	r2, [r7, #20]
 800af60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	68fa      	ldr	r2, [r7, #12]
 800af66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	685a      	ldr	r2, [r3, #4]
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	693a      	ldr	r2, [r7, #16]
 800af74:	621a      	str	r2, [r3, #32]
}
 800af76:	bf00      	nop
 800af78:	371c      	adds	r7, #28
 800af7a:	46bd      	mov	sp, r7
 800af7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af80:	4770      	bx	lr
 800af82:	bf00      	nop
 800af84:	40010000 	.word	0x40010000
 800af88:	40010400 	.word	0x40010400
 800af8c:	40014000 	.word	0x40014000
 800af90:	40014400 	.word	0x40014400
 800af94:	40014800 	.word	0x40014800

0800af98 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800af98:	b480      	push	{r7}
 800af9a:	b087      	sub	sp, #28
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
 800afa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	6a1b      	ldr	r3, [r3, #32]
 800afa6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	6a1b      	ldr	r3, [r3, #32]
 800afb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	685b      	ldr	r3, [r3, #4]
 800afb8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800afc8:	683b      	ldr	r3, [r7, #0]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	68fa      	ldr	r2, [r7, #12]
 800afce:	4313      	orrs	r3, r2
 800afd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800afd2:	693b      	ldr	r3, [r7, #16]
 800afd4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800afd8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	689b      	ldr	r3, [r3, #8]
 800afde:	041b      	lsls	r3, r3, #16
 800afe0:	693a      	ldr	r2, [r7, #16]
 800afe2:	4313      	orrs	r3, r2
 800afe4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	4a17      	ldr	r2, [pc, #92]	; (800b048 <TIM_OC5_SetConfig+0xb0>)
 800afea:	4293      	cmp	r3, r2
 800afec:	d00f      	beq.n	800b00e <TIM_OC5_SetConfig+0x76>
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	4a16      	ldr	r2, [pc, #88]	; (800b04c <TIM_OC5_SetConfig+0xb4>)
 800aff2:	4293      	cmp	r3, r2
 800aff4:	d00b      	beq.n	800b00e <TIM_OC5_SetConfig+0x76>
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	4a15      	ldr	r2, [pc, #84]	; (800b050 <TIM_OC5_SetConfig+0xb8>)
 800affa:	4293      	cmp	r3, r2
 800affc:	d007      	beq.n	800b00e <TIM_OC5_SetConfig+0x76>
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	4a14      	ldr	r2, [pc, #80]	; (800b054 <TIM_OC5_SetConfig+0xbc>)
 800b002:	4293      	cmp	r3, r2
 800b004:	d003      	beq.n	800b00e <TIM_OC5_SetConfig+0x76>
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	4a13      	ldr	r2, [pc, #76]	; (800b058 <TIM_OC5_SetConfig+0xc0>)
 800b00a:	4293      	cmp	r3, r2
 800b00c:	d109      	bne.n	800b022 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b00e:	697b      	ldr	r3, [r7, #20]
 800b010:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b014:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b016:	683b      	ldr	r3, [r7, #0]
 800b018:	695b      	ldr	r3, [r3, #20]
 800b01a:	021b      	lsls	r3, r3, #8
 800b01c:	697a      	ldr	r2, [r7, #20]
 800b01e:	4313      	orrs	r3, r2
 800b020:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	697a      	ldr	r2, [r7, #20]
 800b026:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	68fa      	ldr	r2, [r7, #12]
 800b02c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b02e:	683b      	ldr	r3, [r7, #0]
 800b030:	685a      	ldr	r2, [r3, #4]
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	693a      	ldr	r2, [r7, #16]
 800b03a:	621a      	str	r2, [r3, #32]
}
 800b03c:	bf00      	nop
 800b03e:	371c      	adds	r7, #28
 800b040:	46bd      	mov	sp, r7
 800b042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b046:	4770      	bx	lr
 800b048:	40010000 	.word	0x40010000
 800b04c:	40010400 	.word	0x40010400
 800b050:	40014000 	.word	0x40014000
 800b054:	40014400 	.word	0x40014400
 800b058:	40014800 	.word	0x40014800

0800b05c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b05c:	b480      	push	{r7}
 800b05e:	b087      	sub	sp, #28
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
 800b064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6a1b      	ldr	r3, [r3, #32]
 800b06a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	6a1b      	ldr	r3, [r3, #32]
 800b076:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	685b      	ldr	r3, [r3, #4]
 800b07c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b08a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	021b      	lsls	r3, r3, #8
 800b092:	68fa      	ldr	r2, [r7, #12]
 800b094:	4313      	orrs	r3, r2
 800b096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b098:	693b      	ldr	r3, [r7, #16]
 800b09a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b09e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b0a0:	683b      	ldr	r3, [r7, #0]
 800b0a2:	689b      	ldr	r3, [r3, #8]
 800b0a4:	051b      	lsls	r3, r3, #20
 800b0a6:	693a      	ldr	r2, [r7, #16]
 800b0a8:	4313      	orrs	r3, r2
 800b0aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	4a18      	ldr	r2, [pc, #96]	; (800b110 <TIM_OC6_SetConfig+0xb4>)
 800b0b0:	4293      	cmp	r3, r2
 800b0b2:	d00f      	beq.n	800b0d4 <TIM_OC6_SetConfig+0x78>
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	4a17      	ldr	r2, [pc, #92]	; (800b114 <TIM_OC6_SetConfig+0xb8>)
 800b0b8:	4293      	cmp	r3, r2
 800b0ba:	d00b      	beq.n	800b0d4 <TIM_OC6_SetConfig+0x78>
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	4a16      	ldr	r2, [pc, #88]	; (800b118 <TIM_OC6_SetConfig+0xbc>)
 800b0c0:	4293      	cmp	r3, r2
 800b0c2:	d007      	beq.n	800b0d4 <TIM_OC6_SetConfig+0x78>
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	4a15      	ldr	r2, [pc, #84]	; (800b11c <TIM_OC6_SetConfig+0xc0>)
 800b0c8:	4293      	cmp	r3, r2
 800b0ca:	d003      	beq.n	800b0d4 <TIM_OC6_SetConfig+0x78>
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	4a14      	ldr	r2, [pc, #80]	; (800b120 <TIM_OC6_SetConfig+0xc4>)
 800b0d0:	4293      	cmp	r3, r2
 800b0d2:	d109      	bne.n	800b0e8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b0d4:	697b      	ldr	r3, [r7, #20]
 800b0d6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b0da:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	695b      	ldr	r3, [r3, #20]
 800b0e0:	029b      	lsls	r3, r3, #10
 800b0e2:	697a      	ldr	r2, [r7, #20]
 800b0e4:	4313      	orrs	r3, r2
 800b0e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	697a      	ldr	r2, [r7, #20]
 800b0ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	68fa      	ldr	r2, [r7, #12]
 800b0f2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b0f4:	683b      	ldr	r3, [r7, #0]
 800b0f6:	685a      	ldr	r2, [r3, #4]
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	693a      	ldr	r2, [r7, #16]
 800b100:	621a      	str	r2, [r3, #32]
}
 800b102:	bf00      	nop
 800b104:	371c      	adds	r7, #28
 800b106:	46bd      	mov	sp, r7
 800b108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10c:	4770      	bx	lr
 800b10e:	bf00      	nop
 800b110:	40010000 	.word	0x40010000
 800b114:	40010400 	.word	0x40010400
 800b118:	40014000 	.word	0x40014000
 800b11c:	40014400 	.word	0x40014400
 800b120:	40014800 	.word	0x40014800

0800b124 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b124:	b480      	push	{r7}
 800b126:	b087      	sub	sp, #28
 800b128:	af00      	add	r7, sp, #0
 800b12a:	60f8      	str	r0, [r7, #12]
 800b12c:	60b9      	str	r1, [r7, #8]
 800b12e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	6a1b      	ldr	r3, [r3, #32]
 800b134:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	6a1b      	ldr	r3, [r3, #32]
 800b13a:	f023 0201 	bic.w	r2, r3, #1
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	699b      	ldr	r3, [r3, #24]
 800b146:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b148:	693b      	ldr	r3, [r7, #16]
 800b14a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b14e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	011b      	lsls	r3, r3, #4
 800b154:	693a      	ldr	r2, [r7, #16]
 800b156:	4313      	orrs	r3, r2
 800b158:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b15a:	697b      	ldr	r3, [r7, #20]
 800b15c:	f023 030a 	bic.w	r3, r3, #10
 800b160:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b162:	697a      	ldr	r2, [r7, #20]
 800b164:	68bb      	ldr	r3, [r7, #8]
 800b166:	4313      	orrs	r3, r2
 800b168:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	693a      	ldr	r2, [r7, #16]
 800b16e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	697a      	ldr	r2, [r7, #20]
 800b174:	621a      	str	r2, [r3, #32]
}
 800b176:	bf00      	nop
 800b178:	371c      	adds	r7, #28
 800b17a:	46bd      	mov	sp, r7
 800b17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b180:	4770      	bx	lr

0800b182 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b182:	b480      	push	{r7}
 800b184:	b087      	sub	sp, #28
 800b186:	af00      	add	r7, sp, #0
 800b188:	60f8      	str	r0, [r7, #12]
 800b18a:	60b9      	str	r1, [r7, #8]
 800b18c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	6a1b      	ldr	r3, [r3, #32]
 800b192:	f023 0210 	bic.w	r2, r3, #16
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	699b      	ldr	r3, [r3, #24]
 800b19e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	6a1b      	ldr	r3, [r3, #32]
 800b1a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b1a6:	697b      	ldr	r3, [r7, #20]
 800b1a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b1ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	031b      	lsls	r3, r3, #12
 800b1b2:	697a      	ldr	r2, [r7, #20]
 800b1b4:	4313      	orrs	r3, r2
 800b1b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b1b8:	693b      	ldr	r3, [r7, #16]
 800b1ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b1be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b1c0:	68bb      	ldr	r3, [r7, #8]
 800b1c2:	011b      	lsls	r3, r3, #4
 800b1c4:	693a      	ldr	r2, [r7, #16]
 800b1c6:	4313      	orrs	r3, r2
 800b1c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	697a      	ldr	r2, [r7, #20]
 800b1ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	693a      	ldr	r2, [r7, #16]
 800b1d4:	621a      	str	r2, [r3, #32]
}
 800b1d6:	bf00      	nop
 800b1d8:	371c      	adds	r7, #28
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e0:	4770      	bx	lr
	...

0800b1e4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b1e4:	b480      	push	{r7}
 800b1e6:	b085      	sub	sp, #20
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
 800b1ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	689b      	ldr	r3, [r3, #8]
 800b1f2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b1f4:	68fa      	ldr	r2, [r7, #12]
 800b1f6:	4b09      	ldr	r3, [pc, #36]	; (800b21c <TIM_ITRx_SetConfig+0x38>)
 800b1f8:	4013      	ands	r3, r2
 800b1fa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b1fc:	683a      	ldr	r2, [r7, #0]
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	4313      	orrs	r3, r2
 800b202:	f043 0307 	orr.w	r3, r3, #7
 800b206:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	68fa      	ldr	r2, [r7, #12]
 800b20c:	609a      	str	r2, [r3, #8]
}
 800b20e:	bf00      	nop
 800b210:	3714      	adds	r7, #20
 800b212:	46bd      	mov	sp, r7
 800b214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b218:	4770      	bx	lr
 800b21a:	bf00      	nop
 800b21c:	ffcfff8f 	.word	0xffcfff8f

0800b220 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b220:	b480      	push	{r7}
 800b222:	b087      	sub	sp, #28
 800b224:	af00      	add	r7, sp, #0
 800b226:	60f8      	str	r0, [r7, #12]
 800b228:	60b9      	str	r1, [r7, #8]
 800b22a:	607a      	str	r2, [r7, #4]
 800b22c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	689b      	ldr	r3, [r3, #8]
 800b232:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b234:	697b      	ldr	r3, [r7, #20]
 800b236:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b23a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	021a      	lsls	r2, r3, #8
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	431a      	orrs	r2, r3
 800b244:	68bb      	ldr	r3, [r7, #8]
 800b246:	4313      	orrs	r3, r2
 800b248:	697a      	ldr	r2, [r7, #20]
 800b24a:	4313      	orrs	r3, r2
 800b24c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	697a      	ldr	r2, [r7, #20]
 800b252:	609a      	str	r2, [r3, #8]
}
 800b254:	bf00      	nop
 800b256:	371c      	adds	r7, #28
 800b258:	46bd      	mov	sp, r7
 800b25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25e:	4770      	bx	lr

0800b260 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b260:	b480      	push	{r7}
 800b262:	b085      	sub	sp, #20
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
 800b268:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b270:	2b01      	cmp	r3, #1
 800b272:	d101      	bne.n	800b278 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b274:	2302      	movs	r3, #2
 800b276:	e068      	b.n	800b34a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2201      	movs	r2, #1
 800b27c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	2202      	movs	r2, #2
 800b284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	685b      	ldr	r3, [r3, #4]
 800b28e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	689b      	ldr	r3, [r3, #8]
 800b296:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	4a2e      	ldr	r2, [pc, #184]	; (800b358 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b29e:	4293      	cmp	r3, r2
 800b2a0:	d004      	beq.n	800b2ac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	4a2d      	ldr	r2, [pc, #180]	; (800b35c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b2a8:	4293      	cmp	r3, r2
 800b2aa:	d108      	bne.n	800b2be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b2b2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	685b      	ldr	r3, [r3, #4]
 800b2b8:	68fa      	ldr	r2, [r7, #12]
 800b2ba:	4313      	orrs	r3, r2
 800b2bc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b2c4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	68fa      	ldr	r2, [r7, #12]
 800b2cc:	4313      	orrs	r3, r2
 800b2ce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	68fa      	ldr	r2, [r7, #12]
 800b2d6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	4a1e      	ldr	r2, [pc, #120]	; (800b358 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b2de:	4293      	cmp	r3, r2
 800b2e0:	d01d      	beq.n	800b31e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2ea:	d018      	beq.n	800b31e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	4a1b      	ldr	r2, [pc, #108]	; (800b360 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b2f2:	4293      	cmp	r3, r2
 800b2f4:	d013      	beq.n	800b31e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	4a1a      	ldr	r2, [pc, #104]	; (800b364 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b2fc:	4293      	cmp	r3, r2
 800b2fe:	d00e      	beq.n	800b31e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	4a18      	ldr	r2, [pc, #96]	; (800b368 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b306:	4293      	cmp	r3, r2
 800b308:	d009      	beq.n	800b31e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	4a13      	ldr	r2, [pc, #76]	; (800b35c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b310:	4293      	cmp	r3, r2
 800b312:	d004      	beq.n	800b31e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	4a14      	ldr	r2, [pc, #80]	; (800b36c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b31a:	4293      	cmp	r3, r2
 800b31c:	d10c      	bne.n	800b338 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b31e:	68bb      	ldr	r3, [r7, #8]
 800b320:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b324:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	689b      	ldr	r3, [r3, #8]
 800b32a:	68ba      	ldr	r2, [r7, #8]
 800b32c:	4313      	orrs	r3, r2
 800b32e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	68ba      	ldr	r2, [r7, #8]
 800b336:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2201      	movs	r2, #1
 800b33c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2200      	movs	r2, #0
 800b344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b348:	2300      	movs	r3, #0
}
 800b34a:	4618      	mov	r0, r3
 800b34c:	3714      	adds	r7, #20
 800b34e:	46bd      	mov	sp, r7
 800b350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b354:	4770      	bx	lr
 800b356:	bf00      	nop
 800b358:	40010000 	.word	0x40010000
 800b35c:	40010400 	.word	0x40010400
 800b360:	40000400 	.word	0x40000400
 800b364:	40000800 	.word	0x40000800
 800b368:	40000c00 	.word	0x40000c00
 800b36c:	40001800 	.word	0x40001800

0800b370 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b370:	b480      	push	{r7}
 800b372:	b085      	sub	sp, #20
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
 800b378:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b37a:	2300      	movs	r3, #0
 800b37c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b384:	2b01      	cmp	r3, #1
 800b386:	d101      	bne.n	800b38c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b388:	2302      	movs	r3, #2
 800b38a:	e065      	b.n	800b458 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	2201      	movs	r2, #1
 800b390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	68db      	ldr	r3, [r3, #12]
 800b39e:	4313      	orrs	r3, r2
 800b3a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	689b      	ldr	r3, [r3, #8]
 800b3ac:	4313      	orrs	r3, r2
 800b3ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	685b      	ldr	r3, [r3, #4]
 800b3ba:	4313      	orrs	r3, r2
 800b3bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	4313      	orrs	r3, r2
 800b3ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b3d2:	683b      	ldr	r3, [r7, #0]
 800b3d4:	691b      	ldr	r3, [r3, #16]
 800b3d6:	4313      	orrs	r3, r2
 800b3d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b3e0:	683b      	ldr	r3, [r7, #0]
 800b3e2:	695b      	ldr	r3, [r3, #20]
 800b3e4:	4313      	orrs	r3, r2
 800b3e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b3ee:	683b      	ldr	r3, [r7, #0]
 800b3f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3f2:	4313      	orrs	r3, r2
 800b3f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	699b      	ldr	r3, [r3, #24]
 800b400:	041b      	lsls	r3, r3, #16
 800b402:	4313      	orrs	r3, r2
 800b404:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	4a16      	ldr	r2, [pc, #88]	; (800b464 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b40c:	4293      	cmp	r3, r2
 800b40e:	d004      	beq.n	800b41a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	4a14      	ldr	r2, [pc, #80]	; (800b468 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b416:	4293      	cmp	r3, r2
 800b418:	d115      	bne.n	800b446 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b424:	051b      	lsls	r3, r3, #20
 800b426:	4313      	orrs	r3, r2
 800b428:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b430:	683b      	ldr	r3, [r7, #0]
 800b432:	69db      	ldr	r3, [r3, #28]
 800b434:	4313      	orrs	r3, r2
 800b436:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	6a1b      	ldr	r3, [r3, #32]
 800b442:	4313      	orrs	r3, r2
 800b444:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	68fa      	ldr	r2, [r7, #12]
 800b44c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2200      	movs	r2, #0
 800b452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b456:	2300      	movs	r3, #0
}
 800b458:	4618      	mov	r0, r3
 800b45a:	3714      	adds	r7, #20
 800b45c:	46bd      	mov	sp, r7
 800b45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b462:	4770      	bx	lr
 800b464:	40010000 	.word	0x40010000
 800b468:	40010400 	.word	0x40010400

0800b46c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b46c:	b480      	push	{r7}
 800b46e:	b083      	sub	sp, #12
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b474:	bf00      	nop
 800b476:	370c      	adds	r7, #12
 800b478:	46bd      	mov	sp, r7
 800b47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47e:	4770      	bx	lr

0800b480 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b480:	b480      	push	{r7}
 800b482:	b083      	sub	sp, #12
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b488:	bf00      	nop
 800b48a:	370c      	adds	r7, #12
 800b48c:	46bd      	mov	sp, r7
 800b48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b492:	4770      	bx	lr

0800b494 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b494:	b480      	push	{r7}
 800b496:	b083      	sub	sp, #12
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b49c:	bf00      	nop
 800b49e:	370c      	adds	r7, #12
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a6:	4770      	bx	lr

0800b4a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b082      	sub	sp, #8
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d101      	bne.n	800b4ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b4b6:	2301      	movs	r3, #1
 800b4b8:	e042      	b.n	800b540 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d106      	bne.n	800b4d2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b4cc:	6878      	ldr	r0, [r7, #4]
 800b4ce:	f7f6 faad 	bl	8001a2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	2224      	movs	r2, #36	; 0x24
 800b4d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	681a      	ldr	r2, [r3, #0]
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	f022 0201 	bic.w	r2, r2, #1
 800b4e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b4ea:	6878      	ldr	r0, [r7, #4]
 800b4ec:	f000 fbc6 	bl	800bc7c <UART_SetConfig>
 800b4f0:	4603      	mov	r3, r0
 800b4f2:	2b01      	cmp	r3, #1
 800b4f4:	d101      	bne.n	800b4fa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	e022      	b.n	800b540 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d002      	beq.n	800b508 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b502:	6878      	ldr	r0, [r7, #4]
 800b504:	f001 f924 	bl	800c750 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	685a      	ldr	r2, [r3, #4]
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b516:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	689a      	ldr	r2, [r3, #8]
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b526:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	681a      	ldr	r2, [r3, #0]
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	f042 0201 	orr.w	r2, r2, #1
 800b536:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b538:	6878      	ldr	r0, [r7, #4]
 800b53a:	f001 f9ab 	bl	800c894 <UART_CheckIdleState>
 800b53e:	4603      	mov	r3, r0
}
 800b540:	4618      	mov	r0, r3
 800b542:	3708      	adds	r7, #8
 800b544:	46bd      	mov	sp, r7
 800b546:	bd80      	pop	{r7, pc}

0800b548 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b084      	sub	sp, #16
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	60f8      	str	r0, [r7, #12]
 800b550:	60b9      	str	r1, [r7, #8]
 800b552:	4613      	mov	r3, r2
 800b554:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b55c:	2b20      	cmp	r3, #32
 800b55e:	d131      	bne.n	800b5c4 <HAL_UART_Receive_DMA+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800b560:	68bb      	ldr	r3, [r7, #8]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d002      	beq.n	800b56c <HAL_UART_Receive_DMA+0x24>
 800b566:	88fb      	ldrh	r3, [r7, #6]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d101      	bne.n	800b570 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800b56c:	2301      	movs	r3, #1
 800b56e:	e02a      	b.n	800b5c6 <HAL_UART_Receive_DMA+0x7e>
    }

    __HAL_LOCK(huart);
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b576:	2b01      	cmp	r3, #1
 800b578:	d101      	bne.n	800b57e <HAL_UART_Receive_DMA+0x36>
 800b57a:	2302      	movs	r3, #2
 800b57c:	e023      	b.n	800b5c6 <HAL_UART_Receive_DMA+0x7e>
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	2201      	movs	r2, #1
 800b582:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	2200      	movs	r2, #0
 800b58a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	4a0f      	ldr	r2, [pc, #60]	; (800b5d0 <HAL_UART_Receive_DMA+0x88>)
 800b592:	4293      	cmp	r3, r2
 800b594:	d00e      	beq.n	800b5b4 <HAL_UART_Receive_DMA+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	685b      	ldr	r3, [r3, #4]
 800b59c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d007      	beq.n	800b5b4 <HAL_UART_Receive_DMA+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	681a      	ldr	r2, [r3, #0]
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800b5b2:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b5b4:	88fb      	ldrh	r3, [r7, #6]
 800b5b6:	461a      	mov	r2, r3
 800b5b8:	68b9      	ldr	r1, [r7, #8]
 800b5ba:	68f8      	ldr	r0, [r7, #12]
 800b5bc:	f001 fa36 	bl	800ca2c <UART_Start_Receive_DMA>
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	e000      	b.n	800b5c6 <HAL_UART_Receive_DMA+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800b5c4:	2302      	movs	r3, #2
  }
}
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	3710      	adds	r7, #16
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	bd80      	pop	{r7, pc}
 800b5ce:	bf00      	nop
 800b5d0:	58000c00 	.word	0x58000c00

0800b5d4 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b084      	sub	sp, #16
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b5e2:	60fb      	str	r3, [r7, #12]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5ea:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	689b      	ldr	r3, [r3, #8]
 800b5f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5f6:	2b80      	cmp	r3, #128	; 0x80
 800b5f8:	d127      	bne.n	800b64a <HAL_UART_DMAStop+0x76>
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	2b21      	cmp	r3, #33	; 0x21
 800b5fe:	d124      	bne.n	800b64a <HAL_UART_DMAStop+0x76>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	689a      	ldr	r2, [r3, #8]
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b60e:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b614:	2b00      	cmp	r3, #0
 800b616:	d015      	beq.n	800b644 <HAL_UART_DMAStop+0x70>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b61c:	4618      	mov	r0, r3
 800b61e:	f7f7 fba7 	bl	8002d70 <HAL_DMA_Abort>
 800b622:	4603      	mov	r3, r0
 800b624:	2b00      	cmp	r3, #0
 800b626:	d00d      	beq.n	800b644 <HAL_UART_DMAStop+0x70>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b62c:	4618      	mov	r0, r3
 800b62e:	f7f9 f83b 	bl	80046a8 <HAL_DMA_GetError>
 800b632:	4603      	mov	r3, r0
 800b634:	2b20      	cmp	r3, #32
 800b636:	d105      	bne.n	800b644 <HAL_UART_DMAStop+0x70>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	2210      	movs	r2, #16
 800b63c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 800b640:	2303      	movs	r3, #3
 800b642:	e032      	b.n	800b6aa <HAL_UART_DMAStop+0xd6>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	f001 fa5f 	bl	800cb08 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	689b      	ldr	r3, [r3, #8]
 800b650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b654:	2b40      	cmp	r3, #64	; 0x40
 800b656:	d127      	bne.n	800b6a8 <HAL_UART_DMAStop+0xd4>
 800b658:	68bb      	ldr	r3, [r7, #8]
 800b65a:	2b22      	cmp	r3, #34	; 0x22
 800b65c:	d124      	bne.n	800b6a8 <HAL_UART_DMAStop+0xd4>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	689a      	ldr	r2, [r3, #8]
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b66c:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b672:	2b00      	cmp	r3, #0
 800b674:	d015      	beq.n	800b6a2 <HAL_UART_DMAStop+0xce>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b67a:	4618      	mov	r0, r3
 800b67c:	f7f7 fb78 	bl	8002d70 <HAL_DMA_Abort>
 800b680:	4603      	mov	r3, r0
 800b682:	2b00      	cmp	r3, #0
 800b684:	d00d      	beq.n	800b6a2 <HAL_UART_DMAStop+0xce>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b68a:	4618      	mov	r0, r3
 800b68c:	f7f9 f80c 	bl	80046a8 <HAL_DMA_GetError>
 800b690:	4603      	mov	r3, r0
 800b692:	2b20      	cmp	r3, #32
 800b694:	d105      	bne.n	800b6a2 <HAL_UART_DMAStop+0xce>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	2210      	movs	r2, #16
 800b69a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 800b69e:	2303      	movs	r3, #3
 800b6a0:	e003      	b.n	800b6aa <HAL_UART_DMAStop+0xd6>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800b6a2:	6878      	ldr	r0, [r7, #4]
 800b6a4:	f001 fa4e 	bl	800cb44 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800b6a8:	2300      	movs	r3, #0
}
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	3710      	adds	r7, #16
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd80      	pop	{r7, pc}
	...

0800b6b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b088      	sub	sp, #32
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	69db      	ldr	r3, [r3, #28]
 800b6c2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	689b      	ldr	r3, [r3, #8]
 800b6d2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b6d4:	69fa      	ldr	r2, [r7, #28]
 800b6d6:	f640 030f 	movw	r3, #2063	; 0x80f
 800b6da:	4013      	ands	r3, r2
 800b6dc:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800b6de:	693b      	ldr	r3, [r7, #16]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d118      	bne.n	800b716 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b6e4:	69fb      	ldr	r3, [r7, #28]
 800b6e6:	f003 0320 	and.w	r3, r3, #32
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d013      	beq.n	800b716 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b6ee:	69bb      	ldr	r3, [r7, #24]
 800b6f0:	f003 0320 	and.w	r3, r3, #32
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d104      	bne.n	800b702 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b6f8:	697b      	ldr	r3, [r7, #20]
 800b6fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d009      	beq.n	800b716 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b706:	2b00      	cmp	r3, #0
 800b708:	f000 8282 	beq.w	800bc10 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b710:	6878      	ldr	r0, [r7, #4]
 800b712:	4798      	blx	r3
      }
      return;
 800b714:	e27c      	b.n	800bc10 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b716:	693b      	ldr	r3, [r7, #16]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	f000 80ef 	beq.w	800b8fc <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b71e:	697a      	ldr	r2, [r7, #20]
 800b720:	4b73      	ldr	r3, [pc, #460]	; (800b8f0 <HAL_UART_IRQHandler+0x23c>)
 800b722:	4013      	ands	r3, r2
 800b724:	2b00      	cmp	r3, #0
 800b726:	d105      	bne.n	800b734 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b728:	69ba      	ldr	r2, [r7, #24]
 800b72a:	4b72      	ldr	r3, [pc, #456]	; (800b8f4 <HAL_UART_IRQHandler+0x240>)
 800b72c:	4013      	ands	r3, r2
 800b72e:	2b00      	cmp	r3, #0
 800b730:	f000 80e4 	beq.w	800b8fc <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b734:	69fb      	ldr	r3, [r7, #28]
 800b736:	f003 0301 	and.w	r3, r3, #1
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d010      	beq.n	800b760 <HAL_UART_IRQHandler+0xac>
 800b73e:	69bb      	ldr	r3, [r7, #24]
 800b740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b744:	2b00      	cmp	r3, #0
 800b746:	d00b      	beq.n	800b760 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	2201      	movs	r2, #1
 800b74e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b756:	f043 0201 	orr.w	r2, r3, #1
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b760:	69fb      	ldr	r3, [r7, #28]
 800b762:	f003 0302 	and.w	r3, r3, #2
 800b766:	2b00      	cmp	r3, #0
 800b768:	d010      	beq.n	800b78c <HAL_UART_IRQHandler+0xd8>
 800b76a:	697b      	ldr	r3, [r7, #20]
 800b76c:	f003 0301 	and.w	r3, r3, #1
 800b770:	2b00      	cmp	r3, #0
 800b772:	d00b      	beq.n	800b78c <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	2202      	movs	r2, #2
 800b77a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b782:	f043 0204 	orr.w	r2, r3, #4
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b78c:	69fb      	ldr	r3, [r7, #28]
 800b78e:	f003 0304 	and.w	r3, r3, #4
 800b792:	2b00      	cmp	r3, #0
 800b794:	d010      	beq.n	800b7b8 <HAL_UART_IRQHandler+0x104>
 800b796:	697b      	ldr	r3, [r7, #20]
 800b798:	f003 0301 	and.w	r3, r3, #1
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d00b      	beq.n	800b7b8 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	2204      	movs	r2, #4
 800b7a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b7ae:	f043 0202 	orr.w	r2, r3, #2
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b7b8:	69fb      	ldr	r3, [r7, #28]
 800b7ba:	f003 0308 	and.w	r3, r3, #8
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d015      	beq.n	800b7ee <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b7c2:	69bb      	ldr	r3, [r7, #24]
 800b7c4:	f003 0320 	and.w	r3, r3, #32
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d104      	bne.n	800b7d6 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b7cc:	697a      	ldr	r2, [r7, #20]
 800b7ce:	4b48      	ldr	r3, [pc, #288]	; (800b8f0 <HAL_UART_IRQHandler+0x23c>)
 800b7d0:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d00b      	beq.n	800b7ee <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	2208      	movs	r2, #8
 800b7dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b7e4:	f043 0208 	orr.w	r2, r3, #8
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b7ee:	69fb      	ldr	r3, [r7, #28]
 800b7f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d011      	beq.n	800b81c <HAL_UART_IRQHandler+0x168>
 800b7f8:	69bb      	ldr	r3, [r7, #24]
 800b7fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d00c      	beq.n	800b81c <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b80a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b812:	f043 0220 	orr.w	r2, r3, #32
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b822:	2b00      	cmp	r3, #0
 800b824:	f000 81f6 	beq.w	800bc14 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b828:	69fb      	ldr	r3, [r7, #28]
 800b82a:	f003 0320 	and.w	r3, r3, #32
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d011      	beq.n	800b856 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b832:	69bb      	ldr	r3, [r7, #24]
 800b834:	f003 0320 	and.w	r3, r3, #32
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d104      	bne.n	800b846 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b83c:	697b      	ldr	r3, [r7, #20]
 800b83e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b842:	2b00      	cmp	r3, #0
 800b844:	d007      	beq.n	800b856 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d003      	beq.n	800b856 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b852:	6878      	ldr	r0, [r7, #4]
 800b854:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b85c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	689b      	ldr	r3, [r3, #8]
 800b864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b868:	2b40      	cmp	r3, #64	; 0x40
 800b86a:	d004      	beq.n	800b876 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b872:	2b00      	cmp	r3, #0
 800b874:	d031      	beq.n	800b8da <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b876:	6878      	ldr	r0, [r7, #4]
 800b878:	f001 f964 	bl	800cb44 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	689b      	ldr	r3, [r3, #8]
 800b882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b886:	2b40      	cmp	r3, #64	; 0x40
 800b888:	d123      	bne.n	800b8d2 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	689a      	ldr	r2, [r3, #8]
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b898:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d013      	beq.n	800b8ca <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b8a6:	4a14      	ldr	r2, [pc, #80]	; (800b8f8 <HAL_UART_IRQHandler+0x244>)
 800b8a8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	f7f7 fd7c 	bl	80033ac <HAL_DMA_Abort_IT>
 800b8b4:	4603      	mov	r3, r0
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d017      	beq.n	800b8ea <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b8be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8c0:	687a      	ldr	r2, [r7, #4]
 800b8c2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800b8c4:	4610      	mov	r0, r2
 800b8c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b8c8:	e00f      	b.n	800b8ea <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	f000 f9c0 	bl	800bc50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b8d0:	e00b      	b.n	800b8ea <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b8d2:	6878      	ldr	r0, [r7, #4]
 800b8d4:	f000 f9bc 	bl	800bc50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b8d8:	e007      	b.n	800b8ea <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b8da:	6878      	ldr	r0, [r7, #4]
 800b8dc:	f000 f9b8 	bl	800bc50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800b8e8:	e194      	b.n	800bc14 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b8ea:	bf00      	nop
    return;
 800b8ec:	e192      	b.n	800bc14 <HAL_UART_IRQHandler+0x560>
 800b8ee:	bf00      	nop
 800b8f0:	10000001 	.word	0x10000001
 800b8f4:	04000120 	.word	0x04000120
 800b8f8:	0800ccf7 	.word	0x0800ccf7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b900:	2b01      	cmp	r3, #1
 800b902:	f040 810f 	bne.w	800bb24 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b906:	69fb      	ldr	r3, [r7, #28]
 800b908:	f003 0310 	and.w	r3, r3, #16
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	f000 8109 	beq.w	800bb24 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b912:	69bb      	ldr	r3, [r7, #24]
 800b914:	f003 0310 	and.w	r3, r3, #16
 800b918:	2b00      	cmp	r3, #0
 800b91a:	f000 8103 	beq.w	800bb24 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	2210      	movs	r2, #16
 800b924:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	689b      	ldr	r3, [r3, #8]
 800b92c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b930:	2b40      	cmp	r3, #64	; 0x40
 800b932:	f040 80bb 	bne.w	800baac <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	4a8f      	ldr	r2, [pc, #572]	; (800bb7c <HAL_UART_IRQHandler+0x4c8>)
 800b93e:	4293      	cmp	r3, r2
 800b940:	d059      	beq.n	800b9f6 <HAL_UART_IRQHandler+0x342>
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	4a8d      	ldr	r2, [pc, #564]	; (800bb80 <HAL_UART_IRQHandler+0x4cc>)
 800b94a:	4293      	cmp	r3, r2
 800b94c:	d053      	beq.n	800b9f6 <HAL_UART_IRQHandler+0x342>
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	4a8b      	ldr	r2, [pc, #556]	; (800bb84 <HAL_UART_IRQHandler+0x4d0>)
 800b956:	4293      	cmp	r3, r2
 800b958:	d04d      	beq.n	800b9f6 <HAL_UART_IRQHandler+0x342>
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	4a89      	ldr	r2, [pc, #548]	; (800bb88 <HAL_UART_IRQHandler+0x4d4>)
 800b962:	4293      	cmp	r3, r2
 800b964:	d047      	beq.n	800b9f6 <HAL_UART_IRQHandler+0x342>
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	4a87      	ldr	r2, [pc, #540]	; (800bb8c <HAL_UART_IRQHandler+0x4d8>)
 800b96e:	4293      	cmp	r3, r2
 800b970:	d041      	beq.n	800b9f6 <HAL_UART_IRQHandler+0x342>
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	4a85      	ldr	r2, [pc, #532]	; (800bb90 <HAL_UART_IRQHandler+0x4dc>)
 800b97a:	4293      	cmp	r3, r2
 800b97c:	d03b      	beq.n	800b9f6 <HAL_UART_IRQHandler+0x342>
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	4a83      	ldr	r2, [pc, #524]	; (800bb94 <HAL_UART_IRQHandler+0x4e0>)
 800b986:	4293      	cmp	r3, r2
 800b988:	d035      	beq.n	800b9f6 <HAL_UART_IRQHandler+0x342>
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	4a81      	ldr	r2, [pc, #516]	; (800bb98 <HAL_UART_IRQHandler+0x4e4>)
 800b992:	4293      	cmp	r3, r2
 800b994:	d02f      	beq.n	800b9f6 <HAL_UART_IRQHandler+0x342>
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	4a7f      	ldr	r2, [pc, #508]	; (800bb9c <HAL_UART_IRQHandler+0x4e8>)
 800b99e:	4293      	cmp	r3, r2
 800b9a0:	d029      	beq.n	800b9f6 <HAL_UART_IRQHandler+0x342>
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	4a7d      	ldr	r2, [pc, #500]	; (800bba0 <HAL_UART_IRQHandler+0x4ec>)
 800b9aa:	4293      	cmp	r3, r2
 800b9ac:	d023      	beq.n	800b9f6 <HAL_UART_IRQHandler+0x342>
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	4a7b      	ldr	r2, [pc, #492]	; (800bba4 <HAL_UART_IRQHandler+0x4f0>)
 800b9b6:	4293      	cmp	r3, r2
 800b9b8:	d01d      	beq.n	800b9f6 <HAL_UART_IRQHandler+0x342>
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	4a79      	ldr	r2, [pc, #484]	; (800bba8 <HAL_UART_IRQHandler+0x4f4>)
 800b9c2:	4293      	cmp	r3, r2
 800b9c4:	d017      	beq.n	800b9f6 <HAL_UART_IRQHandler+0x342>
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	4a77      	ldr	r2, [pc, #476]	; (800bbac <HAL_UART_IRQHandler+0x4f8>)
 800b9ce:	4293      	cmp	r3, r2
 800b9d0:	d011      	beq.n	800b9f6 <HAL_UART_IRQHandler+0x342>
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	4a75      	ldr	r2, [pc, #468]	; (800bbb0 <HAL_UART_IRQHandler+0x4fc>)
 800b9da:	4293      	cmp	r3, r2
 800b9dc:	d00b      	beq.n	800b9f6 <HAL_UART_IRQHandler+0x342>
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	4a73      	ldr	r2, [pc, #460]	; (800bbb4 <HAL_UART_IRQHandler+0x500>)
 800b9e6:	4293      	cmp	r3, r2
 800b9e8:	d005      	beq.n	800b9f6 <HAL_UART_IRQHandler+0x342>
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	4a71      	ldr	r2, [pc, #452]	; (800bbb8 <HAL_UART_IRQHandler+0x504>)
 800b9f2:	4293      	cmp	r3, r2
 800b9f4:	d105      	bne.n	800ba02 <HAL_UART_IRQHandler+0x34e>
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	685b      	ldr	r3, [r3, #4]
 800b9fe:	b29b      	uxth	r3, r3
 800ba00:	e004      	b.n	800ba0c <HAL_UART_IRQHandler+0x358>
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	685b      	ldr	r3, [r3, #4]
 800ba0a:	b29b      	uxth	r3, r3
 800ba0c:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800ba0e:	893b      	ldrh	r3, [r7, #8]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	f000 8101 	beq.w	800bc18 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ba1c:	893a      	ldrh	r2, [r7, #8]
 800ba1e:	429a      	cmp	r2, r3
 800ba20:	f080 80fa 	bcs.w	800bc18 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	893a      	ldrh	r2, [r7, #8]
 800ba28:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ba30:	69db      	ldr	r3, [r3, #28]
 800ba32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba36:	d02b      	beq.n	800ba90 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	681a      	ldr	r2, [r3, #0]
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ba46:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	689a      	ldr	r2, [r3, #8]
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	f022 0201 	bic.w	r2, r2, #1
 800ba56:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	689a      	ldr	r2, [r3, #8]
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ba66:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	2220      	movs	r2, #32
 800ba6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	2200      	movs	r2, #0
 800ba74:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	681a      	ldr	r2, [r3, #0]
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	f022 0210 	bic.w	r2, r2, #16
 800ba84:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	f7f7 f970 	bl	8002d70 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ba9c:	b29b      	uxth	r3, r3
 800ba9e:	1ad3      	subs	r3, r2, r3
 800baa0:	b29b      	uxth	r3, r3
 800baa2:	4619      	mov	r1, r3
 800baa4:	6878      	ldr	r0, [r7, #4]
 800baa6:	f000 f8dd 	bl	800bc64 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800baaa:	e0b5      	b.n	800bc18 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bab8:	b29b      	uxth	r3, r3
 800baba:	1ad3      	subs	r3, r2, r3
 800babc:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bac4:	b29b      	uxth	r3, r3
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	f000 80a8 	beq.w	800bc1c <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 800bacc:	897b      	ldrh	r3, [r7, #10]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	f000 80a4 	beq.w	800bc1c <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	681a      	ldr	r2, [r3, #0]
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800bae2:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	6899      	ldr	r1, [r3, #8]
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681a      	ldr	r2, [r3, #0]
 800baee:	4b33      	ldr	r3, [pc, #204]	; (800bbbc <HAL_UART_IRQHandler+0x508>)
 800baf0:	400b      	ands	r3, r1
 800baf2:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2220      	movs	r2, #32
 800baf8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	2200      	movs	r2, #0
 800bb00:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	2200      	movs	r2, #0
 800bb06:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	681a      	ldr	r2, [r3, #0]
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	f022 0210 	bic.w	r2, r2, #16
 800bb16:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bb18:	897b      	ldrh	r3, [r7, #10]
 800bb1a:	4619      	mov	r1, r3
 800bb1c:	6878      	ldr	r0, [r7, #4]
 800bb1e:	f000 f8a1 	bl	800bc64 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bb22:	e07b      	b.n	800bc1c <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800bb24:	69fb      	ldr	r3, [r7, #28]
 800bb26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d00d      	beq.n	800bb4a <HAL_UART_IRQHandler+0x496>
 800bb2e:	697b      	ldr	r3, [r7, #20]
 800bb30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d008      	beq.n	800bb4a <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800bb40:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800bb42:	6878      	ldr	r0, [r7, #4]
 800bb44:	f001 f907 	bl	800cd56 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bb48:	e06b      	b.n	800bc22 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800bb4a:	69fb      	ldr	r3, [r7, #28]
 800bb4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d035      	beq.n	800bbc0 <HAL_UART_IRQHandler+0x50c>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800bb54:	69bb      	ldr	r3, [r7, #24]
 800bb56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d104      	bne.n	800bb68 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800bb5e:	697b      	ldr	r3, [r7, #20]
 800bb60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d02b      	beq.n	800bbc0 <HAL_UART_IRQHandler+0x50c>
  {
    if (huart->TxISR != NULL)
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d057      	beq.n	800bc20 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb74:	6878      	ldr	r0, [r7, #4]
 800bb76:	4798      	blx	r3
    }
    return;
 800bb78:	e052      	b.n	800bc20 <HAL_UART_IRQHandler+0x56c>
 800bb7a:	bf00      	nop
 800bb7c:	40020010 	.word	0x40020010
 800bb80:	40020028 	.word	0x40020028
 800bb84:	40020040 	.word	0x40020040
 800bb88:	40020058 	.word	0x40020058
 800bb8c:	40020070 	.word	0x40020070
 800bb90:	40020088 	.word	0x40020088
 800bb94:	400200a0 	.word	0x400200a0
 800bb98:	400200b8 	.word	0x400200b8
 800bb9c:	40020410 	.word	0x40020410
 800bba0:	40020428 	.word	0x40020428
 800bba4:	40020440 	.word	0x40020440
 800bba8:	40020458 	.word	0x40020458
 800bbac:	40020470 	.word	0x40020470
 800bbb0:	40020488 	.word	0x40020488
 800bbb4:	400204a0 	.word	0x400204a0
 800bbb8:	400204b8 	.word	0x400204b8
 800bbbc:	effffffe 	.word	0xeffffffe
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bbc0:	69fb      	ldr	r3, [r7, #28]
 800bbc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d008      	beq.n	800bbdc <HAL_UART_IRQHandler+0x528>
 800bbca:	69bb      	ldr	r3, [r7, #24]
 800bbcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d003      	beq.n	800bbdc <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800bbd4:	6878      	ldr	r0, [r7, #4]
 800bbd6:	f001 f8a4 	bl	800cd22 <UART_EndTransmit_IT>
    return;
 800bbda:	e022      	b.n	800bc22 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800bbdc:	69fb      	ldr	r3, [r7, #28]
 800bbde:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d008      	beq.n	800bbf8 <HAL_UART_IRQHandler+0x544>
 800bbe6:	69bb      	ldr	r3, [r7, #24]
 800bbe8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d003      	beq.n	800bbf8 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800bbf0:	6878      	ldr	r0, [r7, #4]
 800bbf2:	f001 f8c4 	bl	800cd7e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bbf6:	e014      	b.n	800bc22 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800bbf8:	69fb      	ldr	r3, [r7, #28]
 800bbfa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d00f      	beq.n	800bc22 <HAL_UART_IRQHandler+0x56e>
 800bc02:	69bb      	ldr	r3, [r7, #24]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	da0c      	bge.n	800bc22 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800bc08:	6878      	ldr	r0, [r7, #4]
 800bc0a:	f001 f8ae 	bl	800cd6a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bc0e:	e008      	b.n	800bc22 <HAL_UART_IRQHandler+0x56e>
      return;
 800bc10:	bf00      	nop
 800bc12:	e006      	b.n	800bc22 <HAL_UART_IRQHandler+0x56e>
    return;
 800bc14:	bf00      	nop
 800bc16:	e004      	b.n	800bc22 <HAL_UART_IRQHandler+0x56e>
      return;
 800bc18:	bf00      	nop
 800bc1a:	e002      	b.n	800bc22 <HAL_UART_IRQHandler+0x56e>
      return;
 800bc1c:	bf00      	nop
 800bc1e:	e000      	b.n	800bc22 <HAL_UART_IRQHandler+0x56e>
    return;
 800bc20:	bf00      	nop
  }
}
 800bc22:	3720      	adds	r7, #32
 800bc24:	46bd      	mov	sp, r7
 800bc26:	bd80      	pop	{r7, pc}

0800bc28 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bc28:	b480      	push	{r7}
 800bc2a:	b083      	sub	sp, #12
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800bc30:	bf00      	nop
 800bc32:	370c      	adds	r7, #12
 800bc34:	46bd      	mov	sp, r7
 800bc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3a:	4770      	bx	lr

0800bc3c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bc3c:	b480      	push	{r7}
 800bc3e:	b083      	sub	sp, #12
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800bc44:	bf00      	nop
 800bc46:	370c      	adds	r7, #12
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4e:	4770      	bx	lr

0800bc50 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bc50:	b480      	push	{r7}
 800bc52:	b083      	sub	sp, #12
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bc58:	bf00      	nop
 800bc5a:	370c      	adds	r7, #12
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc62:	4770      	bx	lr

0800bc64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bc64:	b480      	push	{r7}
 800bc66:	b083      	sub	sp, #12
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
 800bc6c:	460b      	mov	r3, r1
 800bc6e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bc70:	bf00      	nop
 800bc72:	370c      	adds	r7, #12
 800bc74:	46bd      	mov	sp, r7
 800bc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7a:	4770      	bx	lr

0800bc7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bc7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bc80:	b092      	sub	sp, #72	; 0x48
 800bc82:	af00      	add	r7, sp, #0
 800bc84:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bc86:	2300      	movs	r3, #0
 800bc88:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bc8c:	697b      	ldr	r3, [r7, #20]
 800bc8e:	689a      	ldr	r2, [r3, #8]
 800bc90:	697b      	ldr	r3, [r7, #20]
 800bc92:	691b      	ldr	r3, [r3, #16]
 800bc94:	431a      	orrs	r2, r3
 800bc96:	697b      	ldr	r3, [r7, #20]
 800bc98:	695b      	ldr	r3, [r3, #20]
 800bc9a:	431a      	orrs	r2, r3
 800bc9c:	697b      	ldr	r3, [r7, #20]
 800bc9e:	69db      	ldr	r3, [r3, #28]
 800bca0:	4313      	orrs	r3, r2
 800bca2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bca4:	697b      	ldr	r3, [r7, #20]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	681a      	ldr	r2, [r3, #0]
 800bcaa:	4bbe      	ldr	r3, [pc, #760]	; (800bfa4 <UART_SetConfig+0x328>)
 800bcac:	4013      	ands	r3, r2
 800bcae:	697a      	ldr	r2, [r7, #20]
 800bcb0:	6812      	ldr	r2, [r2, #0]
 800bcb2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bcb4:	430b      	orrs	r3, r1
 800bcb6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bcb8:	697b      	ldr	r3, [r7, #20]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	685b      	ldr	r3, [r3, #4]
 800bcbe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bcc2:	697b      	ldr	r3, [r7, #20]
 800bcc4:	68da      	ldr	r2, [r3, #12]
 800bcc6:	697b      	ldr	r3, [r7, #20]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	430a      	orrs	r2, r1
 800bccc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bcce:	697b      	ldr	r3, [r7, #20]
 800bcd0:	699b      	ldr	r3, [r3, #24]
 800bcd2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bcd4:	697b      	ldr	r3, [r7, #20]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	4ab3      	ldr	r2, [pc, #716]	; (800bfa8 <UART_SetConfig+0x32c>)
 800bcda:	4293      	cmp	r3, r2
 800bcdc:	d004      	beq.n	800bce8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bcde:	697b      	ldr	r3, [r7, #20]
 800bce0:	6a1b      	ldr	r3, [r3, #32]
 800bce2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bce4:	4313      	orrs	r3, r2
 800bce6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bce8:	697b      	ldr	r3, [r7, #20]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	689a      	ldr	r2, [r3, #8]
 800bcee:	4baf      	ldr	r3, [pc, #700]	; (800bfac <UART_SetConfig+0x330>)
 800bcf0:	4013      	ands	r3, r2
 800bcf2:	697a      	ldr	r2, [r7, #20]
 800bcf4:	6812      	ldr	r2, [r2, #0]
 800bcf6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bcf8:	430b      	orrs	r3, r1
 800bcfa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bcfc:	697b      	ldr	r3, [r7, #20]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd02:	f023 010f 	bic.w	r1, r3, #15
 800bd06:	697b      	ldr	r3, [r7, #20]
 800bd08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bd0a:	697b      	ldr	r3, [r7, #20]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	430a      	orrs	r2, r1
 800bd10:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bd12:	697b      	ldr	r3, [r7, #20]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	4aa6      	ldr	r2, [pc, #664]	; (800bfb0 <UART_SetConfig+0x334>)
 800bd18:	4293      	cmp	r3, r2
 800bd1a:	d177      	bne.n	800be0c <UART_SetConfig+0x190>
 800bd1c:	4ba5      	ldr	r3, [pc, #660]	; (800bfb4 <UART_SetConfig+0x338>)
 800bd1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd20:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bd24:	2b28      	cmp	r3, #40	; 0x28
 800bd26:	d86d      	bhi.n	800be04 <UART_SetConfig+0x188>
 800bd28:	a201      	add	r2, pc, #4	; (adr r2, 800bd30 <UART_SetConfig+0xb4>)
 800bd2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd2e:	bf00      	nop
 800bd30:	0800bdd5 	.word	0x0800bdd5
 800bd34:	0800be05 	.word	0x0800be05
 800bd38:	0800be05 	.word	0x0800be05
 800bd3c:	0800be05 	.word	0x0800be05
 800bd40:	0800be05 	.word	0x0800be05
 800bd44:	0800be05 	.word	0x0800be05
 800bd48:	0800be05 	.word	0x0800be05
 800bd4c:	0800be05 	.word	0x0800be05
 800bd50:	0800bddd 	.word	0x0800bddd
 800bd54:	0800be05 	.word	0x0800be05
 800bd58:	0800be05 	.word	0x0800be05
 800bd5c:	0800be05 	.word	0x0800be05
 800bd60:	0800be05 	.word	0x0800be05
 800bd64:	0800be05 	.word	0x0800be05
 800bd68:	0800be05 	.word	0x0800be05
 800bd6c:	0800be05 	.word	0x0800be05
 800bd70:	0800bde5 	.word	0x0800bde5
 800bd74:	0800be05 	.word	0x0800be05
 800bd78:	0800be05 	.word	0x0800be05
 800bd7c:	0800be05 	.word	0x0800be05
 800bd80:	0800be05 	.word	0x0800be05
 800bd84:	0800be05 	.word	0x0800be05
 800bd88:	0800be05 	.word	0x0800be05
 800bd8c:	0800be05 	.word	0x0800be05
 800bd90:	0800bded 	.word	0x0800bded
 800bd94:	0800be05 	.word	0x0800be05
 800bd98:	0800be05 	.word	0x0800be05
 800bd9c:	0800be05 	.word	0x0800be05
 800bda0:	0800be05 	.word	0x0800be05
 800bda4:	0800be05 	.word	0x0800be05
 800bda8:	0800be05 	.word	0x0800be05
 800bdac:	0800be05 	.word	0x0800be05
 800bdb0:	0800bdf5 	.word	0x0800bdf5
 800bdb4:	0800be05 	.word	0x0800be05
 800bdb8:	0800be05 	.word	0x0800be05
 800bdbc:	0800be05 	.word	0x0800be05
 800bdc0:	0800be05 	.word	0x0800be05
 800bdc4:	0800be05 	.word	0x0800be05
 800bdc8:	0800be05 	.word	0x0800be05
 800bdcc:	0800be05 	.word	0x0800be05
 800bdd0:	0800bdfd 	.word	0x0800bdfd
 800bdd4:	2301      	movs	r3, #1
 800bdd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bdda:	e222      	b.n	800c222 <UART_SetConfig+0x5a6>
 800bddc:	2304      	movs	r3, #4
 800bdde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bde2:	e21e      	b.n	800c222 <UART_SetConfig+0x5a6>
 800bde4:	2308      	movs	r3, #8
 800bde6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bdea:	e21a      	b.n	800c222 <UART_SetConfig+0x5a6>
 800bdec:	2310      	movs	r3, #16
 800bdee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bdf2:	e216      	b.n	800c222 <UART_SetConfig+0x5a6>
 800bdf4:	2320      	movs	r3, #32
 800bdf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bdfa:	e212      	b.n	800c222 <UART_SetConfig+0x5a6>
 800bdfc:	2340      	movs	r3, #64	; 0x40
 800bdfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be02:	e20e      	b.n	800c222 <UART_SetConfig+0x5a6>
 800be04:	2380      	movs	r3, #128	; 0x80
 800be06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be0a:	e20a      	b.n	800c222 <UART_SetConfig+0x5a6>
 800be0c:	697b      	ldr	r3, [r7, #20]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	4a69      	ldr	r2, [pc, #420]	; (800bfb8 <UART_SetConfig+0x33c>)
 800be12:	4293      	cmp	r3, r2
 800be14:	d130      	bne.n	800be78 <UART_SetConfig+0x1fc>
 800be16:	4b67      	ldr	r3, [pc, #412]	; (800bfb4 <UART_SetConfig+0x338>)
 800be18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be1a:	f003 0307 	and.w	r3, r3, #7
 800be1e:	2b05      	cmp	r3, #5
 800be20:	d826      	bhi.n	800be70 <UART_SetConfig+0x1f4>
 800be22:	a201      	add	r2, pc, #4	; (adr r2, 800be28 <UART_SetConfig+0x1ac>)
 800be24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be28:	0800be41 	.word	0x0800be41
 800be2c:	0800be49 	.word	0x0800be49
 800be30:	0800be51 	.word	0x0800be51
 800be34:	0800be59 	.word	0x0800be59
 800be38:	0800be61 	.word	0x0800be61
 800be3c:	0800be69 	.word	0x0800be69
 800be40:	2300      	movs	r3, #0
 800be42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be46:	e1ec      	b.n	800c222 <UART_SetConfig+0x5a6>
 800be48:	2304      	movs	r3, #4
 800be4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be4e:	e1e8      	b.n	800c222 <UART_SetConfig+0x5a6>
 800be50:	2308      	movs	r3, #8
 800be52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be56:	e1e4      	b.n	800c222 <UART_SetConfig+0x5a6>
 800be58:	2310      	movs	r3, #16
 800be5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be5e:	e1e0      	b.n	800c222 <UART_SetConfig+0x5a6>
 800be60:	2320      	movs	r3, #32
 800be62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be66:	e1dc      	b.n	800c222 <UART_SetConfig+0x5a6>
 800be68:	2340      	movs	r3, #64	; 0x40
 800be6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be6e:	e1d8      	b.n	800c222 <UART_SetConfig+0x5a6>
 800be70:	2380      	movs	r3, #128	; 0x80
 800be72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be76:	e1d4      	b.n	800c222 <UART_SetConfig+0x5a6>
 800be78:	697b      	ldr	r3, [r7, #20]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	4a4f      	ldr	r2, [pc, #316]	; (800bfbc <UART_SetConfig+0x340>)
 800be7e:	4293      	cmp	r3, r2
 800be80:	d130      	bne.n	800bee4 <UART_SetConfig+0x268>
 800be82:	4b4c      	ldr	r3, [pc, #304]	; (800bfb4 <UART_SetConfig+0x338>)
 800be84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be86:	f003 0307 	and.w	r3, r3, #7
 800be8a:	2b05      	cmp	r3, #5
 800be8c:	d826      	bhi.n	800bedc <UART_SetConfig+0x260>
 800be8e:	a201      	add	r2, pc, #4	; (adr r2, 800be94 <UART_SetConfig+0x218>)
 800be90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be94:	0800bead 	.word	0x0800bead
 800be98:	0800beb5 	.word	0x0800beb5
 800be9c:	0800bebd 	.word	0x0800bebd
 800bea0:	0800bec5 	.word	0x0800bec5
 800bea4:	0800becd 	.word	0x0800becd
 800bea8:	0800bed5 	.word	0x0800bed5
 800beac:	2300      	movs	r3, #0
 800beae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800beb2:	e1b6      	b.n	800c222 <UART_SetConfig+0x5a6>
 800beb4:	2304      	movs	r3, #4
 800beb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800beba:	e1b2      	b.n	800c222 <UART_SetConfig+0x5a6>
 800bebc:	2308      	movs	r3, #8
 800bebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bec2:	e1ae      	b.n	800c222 <UART_SetConfig+0x5a6>
 800bec4:	2310      	movs	r3, #16
 800bec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800beca:	e1aa      	b.n	800c222 <UART_SetConfig+0x5a6>
 800becc:	2320      	movs	r3, #32
 800bece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bed2:	e1a6      	b.n	800c222 <UART_SetConfig+0x5a6>
 800bed4:	2340      	movs	r3, #64	; 0x40
 800bed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800beda:	e1a2      	b.n	800c222 <UART_SetConfig+0x5a6>
 800bedc:	2380      	movs	r3, #128	; 0x80
 800bede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bee2:	e19e      	b.n	800c222 <UART_SetConfig+0x5a6>
 800bee4:	697b      	ldr	r3, [r7, #20]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	4a35      	ldr	r2, [pc, #212]	; (800bfc0 <UART_SetConfig+0x344>)
 800beea:	4293      	cmp	r3, r2
 800beec:	d130      	bne.n	800bf50 <UART_SetConfig+0x2d4>
 800beee:	4b31      	ldr	r3, [pc, #196]	; (800bfb4 <UART_SetConfig+0x338>)
 800bef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bef2:	f003 0307 	and.w	r3, r3, #7
 800bef6:	2b05      	cmp	r3, #5
 800bef8:	d826      	bhi.n	800bf48 <UART_SetConfig+0x2cc>
 800befa:	a201      	add	r2, pc, #4	; (adr r2, 800bf00 <UART_SetConfig+0x284>)
 800befc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf00:	0800bf19 	.word	0x0800bf19
 800bf04:	0800bf21 	.word	0x0800bf21
 800bf08:	0800bf29 	.word	0x0800bf29
 800bf0c:	0800bf31 	.word	0x0800bf31
 800bf10:	0800bf39 	.word	0x0800bf39
 800bf14:	0800bf41 	.word	0x0800bf41
 800bf18:	2300      	movs	r3, #0
 800bf1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf1e:	e180      	b.n	800c222 <UART_SetConfig+0x5a6>
 800bf20:	2304      	movs	r3, #4
 800bf22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf26:	e17c      	b.n	800c222 <UART_SetConfig+0x5a6>
 800bf28:	2308      	movs	r3, #8
 800bf2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf2e:	e178      	b.n	800c222 <UART_SetConfig+0x5a6>
 800bf30:	2310      	movs	r3, #16
 800bf32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf36:	e174      	b.n	800c222 <UART_SetConfig+0x5a6>
 800bf38:	2320      	movs	r3, #32
 800bf3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf3e:	e170      	b.n	800c222 <UART_SetConfig+0x5a6>
 800bf40:	2340      	movs	r3, #64	; 0x40
 800bf42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf46:	e16c      	b.n	800c222 <UART_SetConfig+0x5a6>
 800bf48:	2380      	movs	r3, #128	; 0x80
 800bf4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf4e:	e168      	b.n	800c222 <UART_SetConfig+0x5a6>
 800bf50:	697b      	ldr	r3, [r7, #20]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	4a1b      	ldr	r2, [pc, #108]	; (800bfc4 <UART_SetConfig+0x348>)
 800bf56:	4293      	cmp	r3, r2
 800bf58:	d142      	bne.n	800bfe0 <UART_SetConfig+0x364>
 800bf5a:	4b16      	ldr	r3, [pc, #88]	; (800bfb4 <UART_SetConfig+0x338>)
 800bf5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf5e:	f003 0307 	and.w	r3, r3, #7
 800bf62:	2b05      	cmp	r3, #5
 800bf64:	d838      	bhi.n	800bfd8 <UART_SetConfig+0x35c>
 800bf66:	a201      	add	r2, pc, #4	; (adr r2, 800bf6c <UART_SetConfig+0x2f0>)
 800bf68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf6c:	0800bf85 	.word	0x0800bf85
 800bf70:	0800bf8d 	.word	0x0800bf8d
 800bf74:	0800bf95 	.word	0x0800bf95
 800bf78:	0800bf9d 	.word	0x0800bf9d
 800bf7c:	0800bfc9 	.word	0x0800bfc9
 800bf80:	0800bfd1 	.word	0x0800bfd1
 800bf84:	2300      	movs	r3, #0
 800bf86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf8a:	e14a      	b.n	800c222 <UART_SetConfig+0x5a6>
 800bf8c:	2304      	movs	r3, #4
 800bf8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf92:	e146      	b.n	800c222 <UART_SetConfig+0x5a6>
 800bf94:	2308      	movs	r3, #8
 800bf96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf9a:	e142      	b.n	800c222 <UART_SetConfig+0x5a6>
 800bf9c:	2310      	movs	r3, #16
 800bf9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfa2:	e13e      	b.n	800c222 <UART_SetConfig+0x5a6>
 800bfa4:	cfff69f3 	.word	0xcfff69f3
 800bfa8:	58000c00 	.word	0x58000c00
 800bfac:	11fff4ff 	.word	0x11fff4ff
 800bfb0:	40011000 	.word	0x40011000
 800bfb4:	58024400 	.word	0x58024400
 800bfb8:	40004400 	.word	0x40004400
 800bfbc:	40004800 	.word	0x40004800
 800bfc0:	40004c00 	.word	0x40004c00
 800bfc4:	40005000 	.word	0x40005000
 800bfc8:	2320      	movs	r3, #32
 800bfca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfce:	e128      	b.n	800c222 <UART_SetConfig+0x5a6>
 800bfd0:	2340      	movs	r3, #64	; 0x40
 800bfd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfd6:	e124      	b.n	800c222 <UART_SetConfig+0x5a6>
 800bfd8:	2380      	movs	r3, #128	; 0x80
 800bfda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfde:	e120      	b.n	800c222 <UART_SetConfig+0x5a6>
 800bfe0:	697b      	ldr	r3, [r7, #20]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	4acb      	ldr	r2, [pc, #812]	; (800c314 <UART_SetConfig+0x698>)
 800bfe6:	4293      	cmp	r3, r2
 800bfe8:	d176      	bne.n	800c0d8 <UART_SetConfig+0x45c>
 800bfea:	4bcb      	ldr	r3, [pc, #812]	; (800c318 <UART_SetConfig+0x69c>)
 800bfec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bff2:	2b28      	cmp	r3, #40	; 0x28
 800bff4:	d86c      	bhi.n	800c0d0 <UART_SetConfig+0x454>
 800bff6:	a201      	add	r2, pc, #4	; (adr r2, 800bffc <UART_SetConfig+0x380>)
 800bff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bffc:	0800c0a1 	.word	0x0800c0a1
 800c000:	0800c0d1 	.word	0x0800c0d1
 800c004:	0800c0d1 	.word	0x0800c0d1
 800c008:	0800c0d1 	.word	0x0800c0d1
 800c00c:	0800c0d1 	.word	0x0800c0d1
 800c010:	0800c0d1 	.word	0x0800c0d1
 800c014:	0800c0d1 	.word	0x0800c0d1
 800c018:	0800c0d1 	.word	0x0800c0d1
 800c01c:	0800c0a9 	.word	0x0800c0a9
 800c020:	0800c0d1 	.word	0x0800c0d1
 800c024:	0800c0d1 	.word	0x0800c0d1
 800c028:	0800c0d1 	.word	0x0800c0d1
 800c02c:	0800c0d1 	.word	0x0800c0d1
 800c030:	0800c0d1 	.word	0x0800c0d1
 800c034:	0800c0d1 	.word	0x0800c0d1
 800c038:	0800c0d1 	.word	0x0800c0d1
 800c03c:	0800c0b1 	.word	0x0800c0b1
 800c040:	0800c0d1 	.word	0x0800c0d1
 800c044:	0800c0d1 	.word	0x0800c0d1
 800c048:	0800c0d1 	.word	0x0800c0d1
 800c04c:	0800c0d1 	.word	0x0800c0d1
 800c050:	0800c0d1 	.word	0x0800c0d1
 800c054:	0800c0d1 	.word	0x0800c0d1
 800c058:	0800c0d1 	.word	0x0800c0d1
 800c05c:	0800c0b9 	.word	0x0800c0b9
 800c060:	0800c0d1 	.word	0x0800c0d1
 800c064:	0800c0d1 	.word	0x0800c0d1
 800c068:	0800c0d1 	.word	0x0800c0d1
 800c06c:	0800c0d1 	.word	0x0800c0d1
 800c070:	0800c0d1 	.word	0x0800c0d1
 800c074:	0800c0d1 	.word	0x0800c0d1
 800c078:	0800c0d1 	.word	0x0800c0d1
 800c07c:	0800c0c1 	.word	0x0800c0c1
 800c080:	0800c0d1 	.word	0x0800c0d1
 800c084:	0800c0d1 	.word	0x0800c0d1
 800c088:	0800c0d1 	.word	0x0800c0d1
 800c08c:	0800c0d1 	.word	0x0800c0d1
 800c090:	0800c0d1 	.word	0x0800c0d1
 800c094:	0800c0d1 	.word	0x0800c0d1
 800c098:	0800c0d1 	.word	0x0800c0d1
 800c09c:	0800c0c9 	.word	0x0800c0c9
 800c0a0:	2301      	movs	r3, #1
 800c0a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0a6:	e0bc      	b.n	800c222 <UART_SetConfig+0x5a6>
 800c0a8:	2304      	movs	r3, #4
 800c0aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0ae:	e0b8      	b.n	800c222 <UART_SetConfig+0x5a6>
 800c0b0:	2308      	movs	r3, #8
 800c0b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0b6:	e0b4      	b.n	800c222 <UART_SetConfig+0x5a6>
 800c0b8:	2310      	movs	r3, #16
 800c0ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0be:	e0b0      	b.n	800c222 <UART_SetConfig+0x5a6>
 800c0c0:	2320      	movs	r3, #32
 800c0c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0c6:	e0ac      	b.n	800c222 <UART_SetConfig+0x5a6>
 800c0c8:	2340      	movs	r3, #64	; 0x40
 800c0ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0ce:	e0a8      	b.n	800c222 <UART_SetConfig+0x5a6>
 800c0d0:	2380      	movs	r3, #128	; 0x80
 800c0d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0d6:	e0a4      	b.n	800c222 <UART_SetConfig+0x5a6>
 800c0d8:	697b      	ldr	r3, [r7, #20]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	4a8f      	ldr	r2, [pc, #572]	; (800c31c <UART_SetConfig+0x6a0>)
 800c0de:	4293      	cmp	r3, r2
 800c0e0:	d130      	bne.n	800c144 <UART_SetConfig+0x4c8>
 800c0e2:	4b8d      	ldr	r3, [pc, #564]	; (800c318 <UART_SetConfig+0x69c>)
 800c0e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0e6:	f003 0307 	and.w	r3, r3, #7
 800c0ea:	2b05      	cmp	r3, #5
 800c0ec:	d826      	bhi.n	800c13c <UART_SetConfig+0x4c0>
 800c0ee:	a201      	add	r2, pc, #4	; (adr r2, 800c0f4 <UART_SetConfig+0x478>)
 800c0f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0f4:	0800c10d 	.word	0x0800c10d
 800c0f8:	0800c115 	.word	0x0800c115
 800c0fc:	0800c11d 	.word	0x0800c11d
 800c100:	0800c125 	.word	0x0800c125
 800c104:	0800c12d 	.word	0x0800c12d
 800c108:	0800c135 	.word	0x0800c135
 800c10c:	2300      	movs	r3, #0
 800c10e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c112:	e086      	b.n	800c222 <UART_SetConfig+0x5a6>
 800c114:	2304      	movs	r3, #4
 800c116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c11a:	e082      	b.n	800c222 <UART_SetConfig+0x5a6>
 800c11c:	2308      	movs	r3, #8
 800c11e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c122:	e07e      	b.n	800c222 <UART_SetConfig+0x5a6>
 800c124:	2310      	movs	r3, #16
 800c126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c12a:	e07a      	b.n	800c222 <UART_SetConfig+0x5a6>
 800c12c:	2320      	movs	r3, #32
 800c12e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c132:	e076      	b.n	800c222 <UART_SetConfig+0x5a6>
 800c134:	2340      	movs	r3, #64	; 0x40
 800c136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c13a:	e072      	b.n	800c222 <UART_SetConfig+0x5a6>
 800c13c:	2380      	movs	r3, #128	; 0x80
 800c13e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c142:	e06e      	b.n	800c222 <UART_SetConfig+0x5a6>
 800c144:	697b      	ldr	r3, [r7, #20]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	4a75      	ldr	r2, [pc, #468]	; (800c320 <UART_SetConfig+0x6a4>)
 800c14a:	4293      	cmp	r3, r2
 800c14c:	d130      	bne.n	800c1b0 <UART_SetConfig+0x534>
 800c14e:	4b72      	ldr	r3, [pc, #456]	; (800c318 <UART_SetConfig+0x69c>)
 800c150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c152:	f003 0307 	and.w	r3, r3, #7
 800c156:	2b05      	cmp	r3, #5
 800c158:	d826      	bhi.n	800c1a8 <UART_SetConfig+0x52c>
 800c15a:	a201      	add	r2, pc, #4	; (adr r2, 800c160 <UART_SetConfig+0x4e4>)
 800c15c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c160:	0800c179 	.word	0x0800c179
 800c164:	0800c181 	.word	0x0800c181
 800c168:	0800c189 	.word	0x0800c189
 800c16c:	0800c191 	.word	0x0800c191
 800c170:	0800c199 	.word	0x0800c199
 800c174:	0800c1a1 	.word	0x0800c1a1
 800c178:	2300      	movs	r3, #0
 800c17a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c17e:	e050      	b.n	800c222 <UART_SetConfig+0x5a6>
 800c180:	2304      	movs	r3, #4
 800c182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c186:	e04c      	b.n	800c222 <UART_SetConfig+0x5a6>
 800c188:	2308      	movs	r3, #8
 800c18a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c18e:	e048      	b.n	800c222 <UART_SetConfig+0x5a6>
 800c190:	2310      	movs	r3, #16
 800c192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c196:	e044      	b.n	800c222 <UART_SetConfig+0x5a6>
 800c198:	2320      	movs	r3, #32
 800c19a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c19e:	e040      	b.n	800c222 <UART_SetConfig+0x5a6>
 800c1a0:	2340      	movs	r3, #64	; 0x40
 800c1a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1a6:	e03c      	b.n	800c222 <UART_SetConfig+0x5a6>
 800c1a8:	2380      	movs	r3, #128	; 0x80
 800c1aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1ae:	e038      	b.n	800c222 <UART_SetConfig+0x5a6>
 800c1b0:	697b      	ldr	r3, [r7, #20]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	4a5b      	ldr	r2, [pc, #364]	; (800c324 <UART_SetConfig+0x6a8>)
 800c1b6:	4293      	cmp	r3, r2
 800c1b8:	d130      	bne.n	800c21c <UART_SetConfig+0x5a0>
 800c1ba:	4b57      	ldr	r3, [pc, #348]	; (800c318 <UART_SetConfig+0x69c>)
 800c1bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1be:	f003 0307 	and.w	r3, r3, #7
 800c1c2:	2b05      	cmp	r3, #5
 800c1c4:	d826      	bhi.n	800c214 <UART_SetConfig+0x598>
 800c1c6:	a201      	add	r2, pc, #4	; (adr r2, 800c1cc <UART_SetConfig+0x550>)
 800c1c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1cc:	0800c1e5 	.word	0x0800c1e5
 800c1d0:	0800c1ed 	.word	0x0800c1ed
 800c1d4:	0800c1f5 	.word	0x0800c1f5
 800c1d8:	0800c1fd 	.word	0x0800c1fd
 800c1dc:	0800c205 	.word	0x0800c205
 800c1e0:	0800c20d 	.word	0x0800c20d
 800c1e4:	2302      	movs	r3, #2
 800c1e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1ea:	e01a      	b.n	800c222 <UART_SetConfig+0x5a6>
 800c1ec:	2304      	movs	r3, #4
 800c1ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1f2:	e016      	b.n	800c222 <UART_SetConfig+0x5a6>
 800c1f4:	2308      	movs	r3, #8
 800c1f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1fa:	e012      	b.n	800c222 <UART_SetConfig+0x5a6>
 800c1fc:	2310      	movs	r3, #16
 800c1fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c202:	e00e      	b.n	800c222 <UART_SetConfig+0x5a6>
 800c204:	2320      	movs	r3, #32
 800c206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c20a:	e00a      	b.n	800c222 <UART_SetConfig+0x5a6>
 800c20c:	2340      	movs	r3, #64	; 0x40
 800c20e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c212:	e006      	b.n	800c222 <UART_SetConfig+0x5a6>
 800c214:	2380      	movs	r3, #128	; 0x80
 800c216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c21a:	e002      	b.n	800c222 <UART_SetConfig+0x5a6>
 800c21c:	2380      	movs	r3, #128	; 0x80
 800c21e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c222:	697b      	ldr	r3, [r7, #20]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	4a3f      	ldr	r2, [pc, #252]	; (800c324 <UART_SetConfig+0x6a8>)
 800c228:	4293      	cmp	r3, r2
 800c22a:	f040 80f8 	bne.w	800c41e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c22e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c232:	2b20      	cmp	r3, #32
 800c234:	dc46      	bgt.n	800c2c4 <UART_SetConfig+0x648>
 800c236:	2b02      	cmp	r3, #2
 800c238:	f2c0 8082 	blt.w	800c340 <UART_SetConfig+0x6c4>
 800c23c:	3b02      	subs	r3, #2
 800c23e:	2b1e      	cmp	r3, #30
 800c240:	d87e      	bhi.n	800c340 <UART_SetConfig+0x6c4>
 800c242:	a201      	add	r2, pc, #4	; (adr r2, 800c248 <UART_SetConfig+0x5cc>)
 800c244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c248:	0800c2cb 	.word	0x0800c2cb
 800c24c:	0800c341 	.word	0x0800c341
 800c250:	0800c2d3 	.word	0x0800c2d3
 800c254:	0800c341 	.word	0x0800c341
 800c258:	0800c341 	.word	0x0800c341
 800c25c:	0800c341 	.word	0x0800c341
 800c260:	0800c2e3 	.word	0x0800c2e3
 800c264:	0800c341 	.word	0x0800c341
 800c268:	0800c341 	.word	0x0800c341
 800c26c:	0800c341 	.word	0x0800c341
 800c270:	0800c341 	.word	0x0800c341
 800c274:	0800c341 	.word	0x0800c341
 800c278:	0800c341 	.word	0x0800c341
 800c27c:	0800c341 	.word	0x0800c341
 800c280:	0800c2f3 	.word	0x0800c2f3
 800c284:	0800c341 	.word	0x0800c341
 800c288:	0800c341 	.word	0x0800c341
 800c28c:	0800c341 	.word	0x0800c341
 800c290:	0800c341 	.word	0x0800c341
 800c294:	0800c341 	.word	0x0800c341
 800c298:	0800c341 	.word	0x0800c341
 800c29c:	0800c341 	.word	0x0800c341
 800c2a0:	0800c341 	.word	0x0800c341
 800c2a4:	0800c341 	.word	0x0800c341
 800c2a8:	0800c341 	.word	0x0800c341
 800c2ac:	0800c341 	.word	0x0800c341
 800c2b0:	0800c341 	.word	0x0800c341
 800c2b4:	0800c341 	.word	0x0800c341
 800c2b8:	0800c341 	.word	0x0800c341
 800c2bc:	0800c341 	.word	0x0800c341
 800c2c0:	0800c333 	.word	0x0800c333
 800c2c4:	2b40      	cmp	r3, #64	; 0x40
 800c2c6:	d037      	beq.n	800c338 <UART_SetConfig+0x6bc>
 800c2c8:	e03a      	b.n	800c340 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c2ca:	f7fd f919 	bl	8009500 <HAL_RCCEx_GetD3PCLK1Freq>
 800c2ce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c2d0:	e03c      	b.n	800c34c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c2d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	f7fd f928 	bl	800952c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c2dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2e0:	e034      	b.n	800c34c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c2e2:	f107 0318 	add.w	r3, r7, #24
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	f7fd fa74 	bl	80097d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c2ec:	69fb      	ldr	r3, [r7, #28]
 800c2ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2f0:	e02c      	b.n	800c34c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c2f2:	4b09      	ldr	r3, [pc, #36]	; (800c318 <UART_SetConfig+0x69c>)
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	f003 0320 	and.w	r3, r3, #32
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d016      	beq.n	800c32c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c2fe:	4b06      	ldr	r3, [pc, #24]	; (800c318 <UART_SetConfig+0x69c>)
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	08db      	lsrs	r3, r3, #3
 800c304:	f003 0303 	and.w	r3, r3, #3
 800c308:	4a07      	ldr	r2, [pc, #28]	; (800c328 <UART_SetConfig+0x6ac>)
 800c30a:	fa22 f303 	lsr.w	r3, r2, r3
 800c30e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c310:	e01c      	b.n	800c34c <UART_SetConfig+0x6d0>
 800c312:	bf00      	nop
 800c314:	40011400 	.word	0x40011400
 800c318:	58024400 	.word	0x58024400
 800c31c:	40007800 	.word	0x40007800
 800c320:	40007c00 	.word	0x40007c00
 800c324:	58000c00 	.word	0x58000c00
 800c328:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800c32c:	4b9e      	ldr	r3, [pc, #632]	; (800c5a8 <UART_SetConfig+0x92c>)
 800c32e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c330:	e00c      	b.n	800c34c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c332:	4b9e      	ldr	r3, [pc, #632]	; (800c5ac <UART_SetConfig+0x930>)
 800c334:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c336:	e009      	b.n	800c34c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c338:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c33c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c33e:	e005      	b.n	800c34c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800c340:	2300      	movs	r3, #0
 800c342:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c344:	2301      	movs	r3, #1
 800c346:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c34a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c34c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c34e:	2b00      	cmp	r3, #0
 800c350:	f000 81e0 	beq.w	800c714 <UART_SetConfig+0xa98>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c354:	697b      	ldr	r3, [r7, #20]
 800c356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c358:	4a95      	ldr	r2, [pc, #596]	; (800c5b0 <UART_SetConfig+0x934>)
 800c35a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c35e:	461a      	mov	r2, r3
 800c360:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c362:	fbb3 f3f2 	udiv	r3, r3, r2
 800c366:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c368:	697b      	ldr	r3, [r7, #20]
 800c36a:	685a      	ldr	r2, [r3, #4]
 800c36c:	4613      	mov	r3, r2
 800c36e:	005b      	lsls	r3, r3, #1
 800c370:	4413      	add	r3, r2
 800c372:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c374:	429a      	cmp	r2, r3
 800c376:	d305      	bcc.n	800c384 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c378:	697b      	ldr	r3, [r7, #20]
 800c37a:	685b      	ldr	r3, [r3, #4]
 800c37c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c37e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c380:	429a      	cmp	r2, r3
 800c382:	d903      	bls.n	800c38c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800c384:	2301      	movs	r3, #1
 800c386:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c38a:	e1c3      	b.n	800c714 <UART_SetConfig+0xa98>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c38c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c38e:	2200      	movs	r2, #0
 800c390:	60bb      	str	r3, [r7, #8]
 800c392:	60fa      	str	r2, [r7, #12]
 800c394:	697b      	ldr	r3, [r7, #20]
 800c396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c398:	4a85      	ldr	r2, [pc, #532]	; (800c5b0 <UART_SetConfig+0x934>)
 800c39a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c39e:	b29b      	uxth	r3, r3
 800c3a0:	2200      	movs	r2, #0
 800c3a2:	603b      	str	r3, [r7, #0]
 800c3a4:	607a      	str	r2, [r7, #4]
 800c3a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c3aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c3ae:	f7f3 ffef 	bl	8000390 <__aeabi_uldivmod>
 800c3b2:	4602      	mov	r2, r0
 800c3b4:	460b      	mov	r3, r1
 800c3b6:	4610      	mov	r0, r2
 800c3b8:	4619      	mov	r1, r3
 800c3ba:	f04f 0200 	mov.w	r2, #0
 800c3be:	f04f 0300 	mov.w	r3, #0
 800c3c2:	020b      	lsls	r3, r1, #8
 800c3c4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c3c8:	0202      	lsls	r2, r0, #8
 800c3ca:	6979      	ldr	r1, [r7, #20]
 800c3cc:	6849      	ldr	r1, [r1, #4]
 800c3ce:	0849      	lsrs	r1, r1, #1
 800c3d0:	2000      	movs	r0, #0
 800c3d2:	460c      	mov	r4, r1
 800c3d4:	4605      	mov	r5, r0
 800c3d6:	eb12 0804 	adds.w	r8, r2, r4
 800c3da:	eb43 0905 	adc.w	r9, r3, r5
 800c3de:	697b      	ldr	r3, [r7, #20]
 800c3e0:	685b      	ldr	r3, [r3, #4]
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	469a      	mov	sl, r3
 800c3e6:	4693      	mov	fp, r2
 800c3e8:	4652      	mov	r2, sl
 800c3ea:	465b      	mov	r3, fp
 800c3ec:	4640      	mov	r0, r8
 800c3ee:	4649      	mov	r1, r9
 800c3f0:	f7f3 ffce 	bl	8000390 <__aeabi_uldivmod>
 800c3f4:	4602      	mov	r2, r0
 800c3f6:	460b      	mov	r3, r1
 800c3f8:	4613      	mov	r3, r2
 800c3fa:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c3fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c402:	d308      	bcc.n	800c416 <UART_SetConfig+0x79a>
 800c404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c406:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c40a:	d204      	bcs.n	800c416 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800c40c:	697b      	ldr	r3, [r7, #20]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c412:	60da      	str	r2, [r3, #12]
 800c414:	e17e      	b.n	800c714 <UART_SetConfig+0xa98>
        }
        else
        {
          ret = HAL_ERROR;
 800c416:	2301      	movs	r3, #1
 800c418:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c41c:	e17a      	b.n	800c714 <UART_SetConfig+0xa98>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c41e:	697b      	ldr	r3, [r7, #20]
 800c420:	69db      	ldr	r3, [r3, #28]
 800c422:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c426:	f040 80c7 	bne.w	800c5b8 <UART_SetConfig+0x93c>
  {
    switch (clocksource)
 800c42a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c42e:	2b20      	cmp	r3, #32
 800c430:	dc48      	bgt.n	800c4c4 <UART_SetConfig+0x848>
 800c432:	2b00      	cmp	r3, #0
 800c434:	db7b      	blt.n	800c52e <UART_SetConfig+0x8b2>
 800c436:	2b20      	cmp	r3, #32
 800c438:	d879      	bhi.n	800c52e <UART_SetConfig+0x8b2>
 800c43a:	a201      	add	r2, pc, #4	; (adr r2, 800c440 <UART_SetConfig+0x7c4>)
 800c43c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c440:	0800c4cb 	.word	0x0800c4cb
 800c444:	0800c4d3 	.word	0x0800c4d3
 800c448:	0800c52f 	.word	0x0800c52f
 800c44c:	0800c52f 	.word	0x0800c52f
 800c450:	0800c4db 	.word	0x0800c4db
 800c454:	0800c52f 	.word	0x0800c52f
 800c458:	0800c52f 	.word	0x0800c52f
 800c45c:	0800c52f 	.word	0x0800c52f
 800c460:	0800c4eb 	.word	0x0800c4eb
 800c464:	0800c52f 	.word	0x0800c52f
 800c468:	0800c52f 	.word	0x0800c52f
 800c46c:	0800c52f 	.word	0x0800c52f
 800c470:	0800c52f 	.word	0x0800c52f
 800c474:	0800c52f 	.word	0x0800c52f
 800c478:	0800c52f 	.word	0x0800c52f
 800c47c:	0800c52f 	.word	0x0800c52f
 800c480:	0800c4fb 	.word	0x0800c4fb
 800c484:	0800c52f 	.word	0x0800c52f
 800c488:	0800c52f 	.word	0x0800c52f
 800c48c:	0800c52f 	.word	0x0800c52f
 800c490:	0800c52f 	.word	0x0800c52f
 800c494:	0800c52f 	.word	0x0800c52f
 800c498:	0800c52f 	.word	0x0800c52f
 800c49c:	0800c52f 	.word	0x0800c52f
 800c4a0:	0800c52f 	.word	0x0800c52f
 800c4a4:	0800c52f 	.word	0x0800c52f
 800c4a8:	0800c52f 	.word	0x0800c52f
 800c4ac:	0800c52f 	.word	0x0800c52f
 800c4b0:	0800c52f 	.word	0x0800c52f
 800c4b4:	0800c52f 	.word	0x0800c52f
 800c4b8:	0800c52f 	.word	0x0800c52f
 800c4bc:	0800c52f 	.word	0x0800c52f
 800c4c0:	0800c521 	.word	0x0800c521
 800c4c4:	2b40      	cmp	r3, #64	; 0x40
 800c4c6:	d02e      	beq.n	800c526 <UART_SetConfig+0x8aa>
 800c4c8:	e031      	b.n	800c52e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c4ca:	f7fc f865 	bl	8008598 <HAL_RCC_GetPCLK1Freq>
 800c4ce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c4d0:	e033      	b.n	800c53a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c4d2:	f7fc f877 	bl	80085c4 <HAL_RCC_GetPCLK2Freq>
 800c4d6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c4d8:	e02f      	b.n	800c53a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c4da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c4de:	4618      	mov	r0, r3
 800c4e0:	f7fd f824 	bl	800952c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c4e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4e8:	e027      	b.n	800c53a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c4ea:	f107 0318 	add.w	r3, r7, #24
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	f7fd f970 	bl	80097d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c4f4:	69fb      	ldr	r3, [r7, #28]
 800c4f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4f8:	e01f      	b.n	800c53a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c4fa:	4b2e      	ldr	r3, [pc, #184]	; (800c5b4 <UART_SetConfig+0x938>)
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	f003 0320 	and.w	r3, r3, #32
 800c502:	2b00      	cmp	r3, #0
 800c504:	d009      	beq.n	800c51a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c506:	4b2b      	ldr	r3, [pc, #172]	; (800c5b4 <UART_SetConfig+0x938>)
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	08db      	lsrs	r3, r3, #3
 800c50c:	f003 0303 	and.w	r3, r3, #3
 800c510:	4a25      	ldr	r2, [pc, #148]	; (800c5a8 <UART_SetConfig+0x92c>)
 800c512:	fa22 f303 	lsr.w	r3, r2, r3
 800c516:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c518:	e00f      	b.n	800c53a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c51a:	4b23      	ldr	r3, [pc, #140]	; (800c5a8 <UART_SetConfig+0x92c>)
 800c51c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c51e:	e00c      	b.n	800c53a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c520:	4b22      	ldr	r3, [pc, #136]	; (800c5ac <UART_SetConfig+0x930>)
 800c522:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c524:	e009      	b.n	800c53a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c526:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c52a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c52c:	e005      	b.n	800c53a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c52e:	2300      	movs	r3, #0
 800c530:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c532:	2301      	movs	r3, #1
 800c534:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c538:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c53a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	f000 80e9 	beq.w	800c714 <UART_SetConfig+0xa98>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c542:	697b      	ldr	r3, [r7, #20]
 800c544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c546:	4a1a      	ldr	r2, [pc, #104]	; (800c5b0 <UART_SetConfig+0x934>)
 800c548:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c54c:	461a      	mov	r2, r3
 800c54e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c550:	fbb3 f3f2 	udiv	r3, r3, r2
 800c554:	005a      	lsls	r2, r3, #1
 800c556:	697b      	ldr	r3, [r7, #20]
 800c558:	685b      	ldr	r3, [r3, #4]
 800c55a:	085b      	lsrs	r3, r3, #1
 800c55c:	441a      	add	r2, r3
 800c55e:	697b      	ldr	r3, [r7, #20]
 800c560:	685b      	ldr	r3, [r3, #4]
 800c562:	fbb2 f3f3 	udiv	r3, r2, r3
 800c566:	b29b      	uxth	r3, r3
 800c568:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c56a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c56c:	2b0f      	cmp	r3, #15
 800c56e:	d916      	bls.n	800c59e <UART_SetConfig+0x922>
 800c570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c572:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c576:	d212      	bcs.n	800c59e <UART_SetConfig+0x922>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c57a:	b29b      	uxth	r3, r3
 800c57c:	f023 030f 	bic.w	r3, r3, #15
 800c580:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c584:	085b      	lsrs	r3, r3, #1
 800c586:	b29b      	uxth	r3, r3
 800c588:	f003 0307 	and.w	r3, r3, #7
 800c58c:	b29a      	uxth	r2, r3
 800c58e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c590:	4313      	orrs	r3, r2
 800c592:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800c594:	697b      	ldr	r3, [r7, #20]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c59a:	60da      	str	r2, [r3, #12]
 800c59c:	e0ba      	b.n	800c714 <UART_SetConfig+0xa98>
      }
      else
      {
        ret = HAL_ERROR;
 800c59e:	2301      	movs	r3, #1
 800c5a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c5a4:	e0b6      	b.n	800c714 <UART_SetConfig+0xa98>
 800c5a6:	bf00      	nop
 800c5a8:	03d09000 	.word	0x03d09000
 800c5ac:	003d0900 	.word	0x003d0900
 800c5b0:	08013adc 	.word	0x08013adc
 800c5b4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800c5b8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c5bc:	2b20      	cmp	r3, #32
 800c5be:	dc49      	bgt.n	800c654 <UART_SetConfig+0x9d8>
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	db7c      	blt.n	800c6be <UART_SetConfig+0xa42>
 800c5c4:	2b20      	cmp	r3, #32
 800c5c6:	d87a      	bhi.n	800c6be <UART_SetConfig+0xa42>
 800c5c8:	a201      	add	r2, pc, #4	; (adr r2, 800c5d0 <UART_SetConfig+0x954>)
 800c5ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5ce:	bf00      	nop
 800c5d0:	0800c65b 	.word	0x0800c65b
 800c5d4:	0800c663 	.word	0x0800c663
 800c5d8:	0800c6bf 	.word	0x0800c6bf
 800c5dc:	0800c6bf 	.word	0x0800c6bf
 800c5e0:	0800c66b 	.word	0x0800c66b
 800c5e4:	0800c6bf 	.word	0x0800c6bf
 800c5e8:	0800c6bf 	.word	0x0800c6bf
 800c5ec:	0800c6bf 	.word	0x0800c6bf
 800c5f0:	0800c67b 	.word	0x0800c67b
 800c5f4:	0800c6bf 	.word	0x0800c6bf
 800c5f8:	0800c6bf 	.word	0x0800c6bf
 800c5fc:	0800c6bf 	.word	0x0800c6bf
 800c600:	0800c6bf 	.word	0x0800c6bf
 800c604:	0800c6bf 	.word	0x0800c6bf
 800c608:	0800c6bf 	.word	0x0800c6bf
 800c60c:	0800c6bf 	.word	0x0800c6bf
 800c610:	0800c68b 	.word	0x0800c68b
 800c614:	0800c6bf 	.word	0x0800c6bf
 800c618:	0800c6bf 	.word	0x0800c6bf
 800c61c:	0800c6bf 	.word	0x0800c6bf
 800c620:	0800c6bf 	.word	0x0800c6bf
 800c624:	0800c6bf 	.word	0x0800c6bf
 800c628:	0800c6bf 	.word	0x0800c6bf
 800c62c:	0800c6bf 	.word	0x0800c6bf
 800c630:	0800c6bf 	.word	0x0800c6bf
 800c634:	0800c6bf 	.word	0x0800c6bf
 800c638:	0800c6bf 	.word	0x0800c6bf
 800c63c:	0800c6bf 	.word	0x0800c6bf
 800c640:	0800c6bf 	.word	0x0800c6bf
 800c644:	0800c6bf 	.word	0x0800c6bf
 800c648:	0800c6bf 	.word	0x0800c6bf
 800c64c:	0800c6bf 	.word	0x0800c6bf
 800c650:	0800c6b1 	.word	0x0800c6b1
 800c654:	2b40      	cmp	r3, #64	; 0x40
 800c656:	d02e      	beq.n	800c6b6 <UART_SetConfig+0xa3a>
 800c658:	e031      	b.n	800c6be <UART_SetConfig+0xa42>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c65a:	f7fb ff9d 	bl	8008598 <HAL_RCC_GetPCLK1Freq>
 800c65e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c660:	e033      	b.n	800c6ca <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c662:	f7fb ffaf 	bl	80085c4 <HAL_RCC_GetPCLK2Freq>
 800c666:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c668:	e02f      	b.n	800c6ca <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c66a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c66e:	4618      	mov	r0, r3
 800c670:	f7fc ff5c 	bl	800952c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c676:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c678:	e027      	b.n	800c6ca <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c67a:	f107 0318 	add.w	r3, r7, #24
 800c67e:	4618      	mov	r0, r3
 800c680:	f7fd f8a8 	bl	80097d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c684:	69fb      	ldr	r3, [r7, #28]
 800c686:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c688:	e01f      	b.n	800c6ca <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c68a:	4b2d      	ldr	r3, [pc, #180]	; (800c740 <UART_SetConfig+0xac4>)
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	f003 0320 	and.w	r3, r3, #32
 800c692:	2b00      	cmp	r3, #0
 800c694:	d009      	beq.n	800c6aa <UART_SetConfig+0xa2e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c696:	4b2a      	ldr	r3, [pc, #168]	; (800c740 <UART_SetConfig+0xac4>)
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	08db      	lsrs	r3, r3, #3
 800c69c:	f003 0303 	and.w	r3, r3, #3
 800c6a0:	4a28      	ldr	r2, [pc, #160]	; (800c744 <UART_SetConfig+0xac8>)
 800c6a2:	fa22 f303 	lsr.w	r3, r2, r3
 800c6a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c6a8:	e00f      	b.n	800c6ca <UART_SetConfig+0xa4e>
          pclk = (uint32_t) HSI_VALUE;
 800c6aa:	4b26      	ldr	r3, [pc, #152]	; (800c744 <UART_SetConfig+0xac8>)
 800c6ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6ae:	e00c      	b.n	800c6ca <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c6b0:	4b25      	ldr	r3, [pc, #148]	; (800c748 <UART_SetConfig+0xacc>)
 800c6b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6b4:	e009      	b.n	800c6ca <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c6b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c6ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6bc:	e005      	b.n	800c6ca <UART_SetConfig+0xa4e>
      default:
        pclk = 0U;
 800c6be:	2300      	movs	r3, #0
 800c6c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c6c2:	2301      	movs	r3, #1
 800c6c4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c6c8:	bf00      	nop
    }

    if (pclk != 0U)
 800c6ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d021      	beq.n	800c714 <UART_SetConfig+0xa98>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c6d0:	697b      	ldr	r3, [r7, #20]
 800c6d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6d4:	4a1d      	ldr	r2, [pc, #116]	; (800c74c <UART_SetConfig+0xad0>)
 800c6d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c6da:	461a      	mov	r2, r3
 800c6dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6de:	fbb3 f2f2 	udiv	r2, r3, r2
 800c6e2:	697b      	ldr	r3, [r7, #20]
 800c6e4:	685b      	ldr	r3, [r3, #4]
 800c6e6:	085b      	lsrs	r3, r3, #1
 800c6e8:	441a      	add	r2, r3
 800c6ea:	697b      	ldr	r3, [r7, #20]
 800c6ec:	685b      	ldr	r3, [r3, #4]
 800c6ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800c6f2:	b29b      	uxth	r3, r3
 800c6f4:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c6f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6f8:	2b0f      	cmp	r3, #15
 800c6fa:	d908      	bls.n	800c70e <UART_SetConfig+0xa92>
 800c6fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c702:	d204      	bcs.n	800c70e <UART_SetConfig+0xa92>
      {
        huart->Instance->BRR = usartdiv;
 800c704:	697b      	ldr	r3, [r7, #20]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c70a:	60da      	str	r2, [r3, #12]
 800c70c:	e002      	b.n	800c714 <UART_SetConfig+0xa98>
      }
      else
      {
        ret = HAL_ERROR;
 800c70e:	2301      	movs	r3, #1
 800c710:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c714:	697b      	ldr	r3, [r7, #20]
 800c716:	2201      	movs	r2, #1
 800c718:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c71c:	697b      	ldr	r3, [r7, #20]
 800c71e:	2201      	movs	r2, #1
 800c720:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c724:	697b      	ldr	r3, [r7, #20]
 800c726:	2200      	movs	r2, #0
 800c728:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800c72a:	697b      	ldr	r3, [r7, #20]
 800c72c:	2200      	movs	r2, #0
 800c72e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800c730:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800c734:	4618      	mov	r0, r3
 800c736:	3748      	adds	r7, #72	; 0x48
 800c738:	46bd      	mov	sp, r7
 800c73a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c73e:	bf00      	nop
 800c740:	58024400 	.word	0x58024400
 800c744:	03d09000 	.word	0x03d09000
 800c748:	003d0900 	.word	0x003d0900
 800c74c:	08013adc 	.word	0x08013adc

0800c750 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c750:	b480      	push	{r7}
 800c752:	b083      	sub	sp, #12
 800c754:	af00      	add	r7, sp, #0
 800c756:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c75c:	f003 0301 	and.w	r3, r3, #1
 800c760:	2b00      	cmp	r3, #0
 800c762:	d00a      	beq.n	800c77a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	685b      	ldr	r3, [r3, #4]
 800c76a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	430a      	orrs	r2, r1
 800c778:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c77e:	f003 0302 	and.w	r3, r3, #2
 800c782:	2b00      	cmp	r3, #0
 800c784:	d00a      	beq.n	800c79c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	685b      	ldr	r3, [r3, #4]
 800c78c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	430a      	orrs	r2, r1
 800c79a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7a0:	f003 0304 	and.w	r3, r3, #4
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d00a      	beq.n	800c7be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	685b      	ldr	r3, [r3, #4]
 800c7ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	430a      	orrs	r2, r1
 800c7bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7c2:	f003 0308 	and.w	r3, r3, #8
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d00a      	beq.n	800c7e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	685b      	ldr	r3, [r3, #4]
 800c7d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	430a      	orrs	r2, r1
 800c7de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7e4:	f003 0310 	and.w	r3, r3, #16
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d00a      	beq.n	800c802 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	689b      	ldr	r3, [r3, #8]
 800c7f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	430a      	orrs	r2, r1
 800c800:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c806:	f003 0320 	and.w	r3, r3, #32
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d00a      	beq.n	800c824 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	689b      	ldr	r3, [r3, #8]
 800c814:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	430a      	orrs	r2, r1
 800c822:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d01a      	beq.n	800c866 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	685b      	ldr	r3, [r3, #4]
 800c836:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	430a      	orrs	r2, r1
 800c844:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c84a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c84e:	d10a      	bne.n	800c866 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	685b      	ldr	r3, [r3, #4]
 800c856:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	430a      	orrs	r2, r1
 800c864:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c86a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d00a      	beq.n	800c888 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	685b      	ldr	r3, [r3, #4]
 800c878:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	430a      	orrs	r2, r1
 800c886:	605a      	str	r2, [r3, #4]
  }
}
 800c888:	bf00      	nop
 800c88a:	370c      	adds	r7, #12
 800c88c:	46bd      	mov	sp, r7
 800c88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c892:	4770      	bx	lr

0800c894 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c894:	b580      	push	{r7, lr}
 800c896:	b086      	sub	sp, #24
 800c898:	af02      	add	r7, sp, #8
 800c89a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	2200      	movs	r2, #0
 800c8a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c8a4:	f7f5 fac8 	bl	8001e38 <HAL_GetTick>
 800c8a8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	f003 0308 	and.w	r3, r3, #8
 800c8b4:	2b08      	cmp	r3, #8
 800c8b6:	d10e      	bne.n	800c8d6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c8b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c8bc:	9300      	str	r3, [sp, #0]
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	2200      	movs	r2, #0
 800c8c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c8c6:	6878      	ldr	r0, [r7, #4]
 800c8c8:	f000 f82f 	bl	800c92a <UART_WaitOnFlagUntilTimeout>
 800c8cc:	4603      	mov	r3, r0
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d001      	beq.n	800c8d6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c8d2:	2303      	movs	r3, #3
 800c8d4:	e025      	b.n	800c922 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	f003 0304 	and.w	r3, r3, #4
 800c8e0:	2b04      	cmp	r3, #4
 800c8e2:	d10e      	bne.n	800c902 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c8e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c8e8:	9300      	str	r3, [sp, #0]
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	2200      	movs	r2, #0
 800c8ee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c8f2:	6878      	ldr	r0, [r7, #4]
 800c8f4:	f000 f819 	bl	800c92a <UART_WaitOnFlagUntilTimeout>
 800c8f8:	4603      	mov	r3, r0
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d001      	beq.n	800c902 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c8fe:	2303      	movs	r3, #3
 800c900:	e00f      	b.n	800c922 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	2220      	movs	r2, #32
 800c906:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	2220      	movs	r2, #32
 800c90e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	2200      	movs	r2, #0
 800c916:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	2200      	movs	r2, #0
 800c91c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c920:	2300      	movs	r3, #0
}
 800c922:	4618      	mov	r0, r3
 800c924:	3710      	adds	r7, #16
 800c926:	46bd      	mov	sp, r7
 800c928:	bd80      	pop	{r7, pc}

0800c92a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c92a:	b580      	push	{r7, lr}
 800c92c:	b084      	sub	sp, #16
 800c92e:	af00      	add	r7, sp, #0
 800c930:	60f8      	str	r0, [r7, #12]
 800c932:	60b9      	str	r1, [r7, #8]
 800c934:	603b      	str	r3, [r7, #0]
 800c936:	4613      	mov	r3, r2
 800c938:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c93a:	e062      	b.n	800ca02 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c93c:	69bb      	ldr	r3, [r7, #24]
 800c93e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c942:	d05e      	beq.n	800ca02 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c944:	f7f5 fa78 	bl	8001e38 <HAL_GetTick>
 800c948:	4602      	mov	r2, r0
 800c94a:	683b      	ldr	r3, [r7, #0]
 800c94c:	1ad3      	subs	r3, r2, r3
 800c94e:	69ba      	ldr	r2, [r7, #24]
 800c950:	429a      	cmp	r2, r3
 800c952:	d302      	bcc.n	800c95a <UART_WaitOnFlagUntilTimeout+0x30>
 800c954:	69bb      	ldr	r3, [r7, #24]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d11d      	bne.n	800c996 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	681a      	ldr	r2, [r3, #0]
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c968:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	689a      	ldr	r2, [r3, #8]
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	f022 0201 	bic.w	r2, r2, #1
 800c978:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	2220      	movs	r2, #32
 800c97e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	2220      	movs	r2, #32
 800c986:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	2200      	movs	r2, #0
 800c98e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800c992:	2303      	movs	r3, #3
 800c994:	e045      	b.n	800ca22 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	f003 0304 	and.w	r3, r3, #4
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d02e      	beq.n	800ca02 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	69db      	ldr	r3, [r3, #28]
 800c9aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c9ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c9b2:	d126      	bne.n	800ca02 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c9bc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	681a      	ldr	r2, [r3, #0]
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c9cc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	689a      	ldr	r2, [r3, #8]
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	f022 0201 	bic.w	r2, r2, #1
 800c9dc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	2220      	movs	r2, #32
 800c9e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	2220      	movs	r2, #32
 800c9ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	2220      	movs	r2, #32
 800c9f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	2200      	movs	r2, #0
 800c9fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c9fe:	2303      	movs	r3, #3
 800ca00:	e00f      	b.n	800ca22 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	69da      	ldr	r2, [r3, #28]
 800ca08:	68bb      	ldr	r3, [r7, #8]
 800ca0a:	4013      	ands	r3, r2
 800ca0c:	68ba      	ldr	r2, [r7, #8]
 800ca0e:	429a      	cmp	r2, r3
 800ca10:	bf0c      	ite	eq
 800ca12:	2301      	moveq	r3, #1
 800ca14:	2300      	movne	r3, #0
 800ca16:	b2db      	uxtb	r3, r3
 800ca18:	461a      	mov	r2, r3
 800ca1a:	79fb      	ldrb	r3, [r7, #7]
 800ca1c:	429a      	cmp	r2, r3
 800ca1e:	d08d      	beq.n	800c93c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ca20:	2300      	movs	r3, #0
}
 800ca22:	4618      	mov	r0, r3
 800ca24:	3710      	adds	r7, #16
 800ca26:	46bd      	mov	sp, r7
 800ca28:	bd80      	pop	{r7, pc}
	...

0800ca2c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	b084      	sub	sp, #16
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	60f8      	str	r0, [r7, #12]
 800ca34:	60b9      	str	r1, [r7, #8]
 800ca36:	4613      	mov	r3, r2
 800ca38:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	68ba      	ldr	r2, [r7, #8]
 800ca3e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	88fa      	ldrh	r2, [r7, #6]
 800ca44:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	2200      	movs	r2, #0
 800ca4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	2222      	movs	r2, #34	; 0x22
 800ca54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d02c      	beq.n	800caba <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ca64:	4a25      	ldr	r2, [pc, #148]	; (800cafc <UART_Start_Receive_DMA+0xd0>)
 800ca66:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ca6c:	4a24      	ldr	r2, [pc, #144]	; (800cb00 <UART_Start_Receive_DMA+0xd4>)
 800ca6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ca74:	4a23      	ldr	r2, [pc, #140]	; (800cb04 <UART_Start_Receive_DMA+0xd8>)
 800ca76:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	3324      	adds	r3, #36	; 0x24
 800ca8a:	4619      	mov	r1, r3
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca90:	461a      	mov	r2, r3
 800ca92:	88fb      	ldrh	r3, [r7, #6]
 800ca94:	f7f5 ff02 	bl	800289c <HAL_DMA_Start_IT>
 800ca98:	4603      	mov	r3, r0
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d00d      	beq.n	800caba <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	2210      	movs	r2, #16
 800caa2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	2200      	movs	r2, #0
 800caaa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	2220      	movs	r2, #32
 800cab2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      return HAL_ERROR;
 800cab6:	2301      	movs	r3, #1
 800cab8:	e01c      	b.n	800caf4 <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	2200      	movs	r2, #0
 800cabe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	681a      	ldr	r2, [r3, #0]
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cad0:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	689a      	ldr	r2, [r3, #8]
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	f042 0201 	orr.w	r2, r2, #1
 800cae0:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	689a      	ldr	r2, [r3, #8]
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800caf0:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800caf2:	2300      	movs	r3, #0
}
 800caf4:	4618      	mov	r0, r3
 800caf6:	3710      	adds	r7, #16
 800caf8:	46bd      	mov	sp, r7
 800cafa:	bd80      	pop	{r7, pc}
 800cafc:	0800cba9 	.word	0x0800cba9
 800cb00:	0800cc3f 	.word	0x0800cc3f
 800cb04:	0800cc77 	.word	0x0800cc77

0800cb08 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800cb08:	b480      	push	{r7}
 800cb0a:	b083      	sub	sp, #12
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	681a      	ldr	r2, [r3, #0]
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800cb1e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	689a      	ldr	r2, [r3, #8]
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800cb2e:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	2220      	movs	r2, #32
 800cb34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800cb38:	bf00      	nop
 800cb3a:	370c      	adds	r7, #12
 800cb3c:	46bd      	mov	sp, r7
 800cb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb42:	4770      	bx	lr

0800cb44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cb44:	b480      	push	{r7}
 800cb46:	b083      	sub	sp, #12
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	681a      	ldr	r2, [r3, #0]
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800cb5a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	6899      	ldr	r1, [r3, #8]
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	681a      	ldr	r2, [r3, #0]
 800cb66:	4b0f      	ldr	r3, [pc, #60]	; (800cba4 <UART_EndRxTransfer+0x60>)
 800cb68:	400b      	ands	r3, r1
 800cb6a:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb70:	2b01      	cmp	r3, #1
 800cb72:	d107      	bne.n	800cb84 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	681a      	ldr	r2, [r3, #0]
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	f022 0210 	bic.w	r2, r2, #16
 800cb82:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	2220      	movs	r2, #32
 800cb88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	2200      	movs	r2, #0
 800cb90:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	2200      	movs	r2, #0
 800cb96:	671a      	str	r2, [r3, #112]	; 0x70
}
 800cb98:	bf00      	nop
 800cb9a:	370c      	adds	r7, #12
 800cb9c:	46bd      	mov	sp, r7
 800cb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba2:	4770      	bx	lr
 800cba4:	effffffe 	.word	0xeffffffe

0800cba8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b084      	sub	sp, #16
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbb4:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	69db      	ldr	r3, [r3, #28]
 800cbba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cbbe:	d02b      	beq.n	800cc18 <UART_DMAReceiveCplt+0x70>
  {
    huart->RxXferCount = 0U;
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	2200      	movs	r2, #0
 800cbc4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	681a      	ldr	r2, [r3, #0]
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cbd6:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	689a      	ldr	r2, [r3, #8]
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	f022 0201 	bic.w	r2, r2, #1
 800cbe6:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	689a      	ldr	r2, [r3, #8]
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cbf6:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	2220      	movs	r2, #32
 800cbfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc04:	2b01      	cmp	r3, #1
 800cc06:	d107      	bne.n	800cc18 <UART_DMAReceiveCplt+0x70>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	681a      	ldr	r2, [r3, #0]
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	f022 0210 	bic.w	r2, r2, #16
 800cc16:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc1c:	2b01      	cmp	r3, #1
 800cc1e:	d107      	bne.n	800cc30 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cc26:	4619      	mov	r1, r3
 800cc28:	68f8      	ldr	r0, [r7, #12]
 800cc2a:	f7ff f81b 	bl	800bc64 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cc2e:	e002      	b.n	800cc36 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800cc30:	68f8      	ldr	r0, [r7, #12]
 800cc32:	f7f4 f973 	bl	8000f1c <HAL_UART_RxCpltCallback>
}
 800cc36:	bf00      	nop
 800cc38:	3710      	adds	r7, #16
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	bd80      	pop	{r7, pc}

0800cc3e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cc3e:	b580      	push	{r7, lr}
 800cc40:	b084      	sub	sp, #16
 800cc42:	af00      	add	r7, sp, #0
 800cc44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc4a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc50:	2b01      	cmp	r3, #1
 800cc52:	d109      	bne.n	800cc68 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cc5a:	085b      	lsrs	r3, r3, #1
 800cc5c:	b29b      	uxth	r3, r3
 800cc5e:	4619      	mov	r1, r3
 800cc60:	68f8      	ldr	r0, [r7, #12]
 800cc62:	f7fe ffff 	bl	800bc64 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cc66:	e002      	b.n	800cc6e <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800cc68:	68f8      	ldr	r0, [r7, #12]
 800cc6a:	f7fe ffe7 	bl	800bc3c <HAL_UART_RxHalfCpltCallback>
}
 800cc6e:	bf00      	nop
 800cc70:	3710      	adds	r7, #16
 800cc72:	46bd      	mov	sp, r7
 800cc74:	bd80      	pop	{r7, pc}

0800cc76 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800cc76:	b580      	push	{r7, lr}
 800cc78:	b086      	sub	sp, #24
 800cc7a:	af00      	add	r7, sp, #0
 800cc7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc82:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800cc84:	697b      	ldr	r3, [r7, #20]
 800cc86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cc8a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800cc8c:	697b      	ldr	r3, [r7, #20]
 800cc8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cc92:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800cc94:	697b      	ldr	r3, [r7, #20]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	689b      	ldr	r3, [r3, #8]
 800cc9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc9e:	2b80      	cmp	r3, #128	; 0x80
 800cca0:	d109      	bne.n	800ccb6 <UART_DMAError+0x40>
 800cca2:	693b      	ldr	r3, [r7, #16]
 800cca4:	2b21      	cmp	r3, #33	; 0x21
 800cca6:	d106      	bne.n	800ccb6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800cca8:	697b      	ldr	r3, [r7, #20]
 800ccaa:	2200      	movs	r2, #0
 800ccac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800ccb0:	6978      	ldr	r0, [r7, #20]
 800ccb2:	f7ff ff29 	bl	800cb08 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ccb6:	697b      	ldr	r3, [r7, #20]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	689b      	ldr	r3, [r3, #8]
 800ccbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ccc0:	2b40      	cmp	r3, #64	; 0x40
 800ccc2:	d109      	bne.n	800ccd8 <UART_DMAError+0x62>
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	2b22      	cmp	r3, #34	; 0x22
 800ccc8:	d106      	bne.n	800ccd8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ccca:	697b      	ldr	r3, [r7, #20]
 800cccc:	2200      	movs	r2, #0
 800ccce:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800ccd2:	6978      	ldr	r0, [r7, #20]
 800ccd4:	f7ff ff36 	bl	800cb44 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ccd8:	697b      	ldr	r3, [r7, #20]
 800ccda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ccde:	f043 0210 	orr.w	r2, r3, #16
 800cce2:	697b      	ldr	r3, [r7, #20]
 800cce4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cce8:	6978      	ldr	r0, [r7, #20]
 800ccea:	f7fe ffb1 	bl	800bc50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ccee:	bf00      	nop
 800ccf0:	3718      	adds	r7, #24
 800ccf2:	46bd      	mov	sp, r7
 800ccf4:	bd80      	pop	{r7, pc}

0800ccf6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ccf6:	b580      	push	{r7, lr}
 800ccf8:	b084      	sub	sp, #16
 800ccfa:	af00      	add	r7, sp, #0
 800ccfc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd02:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	2200      	movs	r2, #0
 800cd08:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	2200      	movs	r2, #0
 800cd10:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cd14:	68f8      	ldr	r0, [r7, #12]
 800cd16:	f7fe ff9b 	bl	800bc50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cd1a:	bf00      	nop
 800cd1c:	3710      	adds	r7, #16
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	bd80      	pop	{r7, pc}

0800cd22 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cd22:	b580      	push	{r7, lr}
 800cd24:	b082      	sub	sp, #8
 800cd26:	af00      	add	r7, sp, #0
 800cd28:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	681a      	ldr	r2, [r3, #0]
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cd38:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	2220      	movs	r2, #32
 800cd3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	2200      	movs	r2, #0
 800cd46:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cd48:	6878      	ldr	r0, [r7, #4]
 800cd4a:	f7fe ff6d 	bl	800bc28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cd4e:	bf00      	nop
 800cd50:	3708      	adds	r7, #8
 800cd52:	46bd      	mov	sp, r7
 800cd54:	bd80      	pop	{r7, pc}

0800cd56 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800cd56:	b480      	push	{r7}
 800cd58:	b083      	sub	sp, #12
 800cd5a:	af00      	add	r7, sp, #0
 800cd5c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800cd5e:	bf00      	nop
 800cd60:	370c      	adds	r7, #12
 800cd62:	46bd      	mov	sp, r7
 800cd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd68:	4770      	bx	lr

0800cd6a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800cd6a:	b480      	push	{r7}
 800cd6c:	b083      	sub	sp, #12
 800cd6e:	af00      	add	r7, sp, #0
 800cd70:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800cd72:	bf00      	nop
 800cd74:	370c      	adds	r7, #12
 800cd76:	46bd      	mov	sp, r7
 800cd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd7c:	4770      	bx	lr

0800cd7e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800cd7e:	b480      	push	{r7}
 800cd80:	b083      	sub	sp, #12
 800cd82:	af00      	add	r7, sp, #0
 800cd84:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800cd86:	bf00      	nop
 800cd88:	370c      	adds	r7, #12
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd90:	4770      	bx	lr

0800cd92 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cd92:	b480      	push	{r7}
 800cd94:	b085      	sub	sp, #20
 800cd96:	af00      	add	r7, sp, #0
 800cd98:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cda0:	2b01      	cmp	r3, #1
 800cda2:	d101      	bne.n	800cda8 <HAL_UARTEx_DisableFifoMode+0x16>
 800cda4:	2302      	movs	r3, #2
 800cda6:	e027      	b.n	800cdf8 <HAL_UARTEx_DisableFifoMode+0x66>
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	2201      	movs	r2, #1
 800cdac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	2224      	movs	r2, #36	; 0x24
 800cdb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	681a      	ldr	r2, [r3, #0]
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	f022 0201 	bic.w	r2, r2, #1
 800cdce:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800cdd6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	2200      	movs	r2, #0
 800cddc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	68fa      	ldr	r2, [r7, #12]
 800cde4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	2220      	movs	r2, #32
 800cdea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	2200      	movs	r2, #0
 800cdf2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cdf6:	2300      	movs	r3, #0
}
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	3714      	adds	r7, #20
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce02:	4770      	bx	lr

0800ce04 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ce04:	b580      	push	{r7, lr}
 800ce06:	b084      	sub	sp, #16
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	6078      	str	r0, [r7, #4]
 800ce0c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ce14:	2b01      	cmp	r3, #1
 800ce16:	d101      	bne.n	800ce1c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ce18:	2302      	movs	r3, #2
 800ce1a:	e02d      	b.n	800ce78 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	2201      	movs	r2, #1
 800ce20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	2224      	movs	r2, #36	; 0x24
 800ce28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	681a      	ldr	r2, [r3, #0]
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	f022 0201 	bic.w	r2, r2, #1
 800ce42:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	689b      	ldr	r3, [r3, #8]
 800ce4a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	683a      	ldr	r2, [r7, #0]
 800ce54:	430a      	orrs	r2, r1
 800ce56:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ce58:	6878      	ldr	r0, [r7, #4]
 800ce5a:	f000 f84f 	bl	800cefc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	68fa      	ldr	r2, [r7, #12]
 800ce64:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	2220      	movs	r2, #32
 800ce6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	2200      	movs	r2, #0
 800ce72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ce76:	2300      	movs	r3, #0
}
 800ce78:	4618      	mov	r0, r3
 800ce7a:	3710      	adds	r7, #16
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	bd80      	pop	{r7, pc}

0800ce80 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b084      	sub	sp, #16
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	6078      	str	r0, [r7, #4]
 800ce88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ce90:	2b01      	cmp	r3, #1
 800ce92:	d101      	bne.n	800ce98 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ce94:	2302      	movs	r3, #2
 800ce96:	e02d      	b.n	800cef4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	2201      	movs	r2, #1
 800ce9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	2224      	movs	r2, #36	; 0x24
 800cea4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	681a      	ldr	r2, [r3, #0]
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	f022 0201 	bic.w	r2, r2, #1
 800cebe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	689b      	ldr	r3, [r3, #8]
 800cec6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	683a      	ldr	r2, [r7, #0]
 800ced0:	430a      	orrs	r2, r1
 800ced2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ced4:	6878      	ldr	r0, [r7, #4]
 800ced6:	f000 f811 	bl	800cefc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	68fa      	ldr	r2, [r7, #12]
 800cee0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	2220      	movs	r2, #32
 800cee6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	2200      	movs	r2, #0
 800ceee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cef2:	2300      	movs	r3, #0
}
 800cef4:	4618      	mov	r0, r3
 800cef6:	3710      	adds	r7, #16
 800cef8:	46bd      	mov	sp, r7
 800cefa:	bd80      	pop	{r7, pc}

0800cefc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cefc:	b480      	push	{r7}
 800cefe:	b085      	sub	sp, #20
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d108      	bne.n	800cf1e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	2201      	movs	r2, #1
 800cf10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	2201      	movs	r2, #1
 800cf18:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cf1c:	e031      	b.n	800cf82 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cf1e:	2310      	movs	r3, #16
 800cf20:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cf22:	2310      	movs	r3, #16
 800cf24:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	689b      	ldr	r3, [r3, #8]
 800cf2c:	0e5b      	lsrs	r3, r3, #25
 800cf2e:	b2db      	uxtb	r3, r3
 800cf30:	f003 0307 	and.w	r3, r3, #7
 800cf34:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	689b      	ldr	r3, [r3, #8]
 800cf3c:	0f5b      	lsrs	r3, r3, #29
 800cf3e:	b2db      	uxtb	r3, r3
 800cf40:	f003 0307 	and.w	r3, r3, #7
 800cf44:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cf46:	7bbb      	ldrb	r3, [r7, #14]
 800cf48:	7b3a      	ldrb	r2, [r7, #12]
 800cf4a:	4911      	ldr	r1, [pc, #68]	; (800cf90 <UARTEx_SetNbDataToProcess+0x94>)
 800cf4c:	5c8a      	ldrb	r2, [r1, r2]
 800cf4e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cf52:	7b3a      	ldrb	r2, [r7, #12]
 800cf54:	490f      	ldr	r1, [pc, #60]	; (800cf94 <UARTEx_SetNbDataToProcess+0x98>)
 800cf56:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cf58:	fb93 f3f2 	sdiv	r3, r3, r2
 800cf5c:	b29a      	uxth	r2, r3
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cf64:	7bfb      	ldrb	r3, [r7, #15]
 800cf66:	7b7a      	ldrb	r2, [r7, #13]
 800cf68:	4909      	ldr	r1, [pc, #36]	; (800cf90 <UARTEx_SetNbDataToProcess+0x94>)
 800cf6a:	5c8a      	ldrb	r2, [r1, r2]
 800cf6c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cf70:	7b7a      	ldrb	r2, [r7, #13]
 800cf72:	4908      	ldr	r1, [pc, #32]	; (800cf94 <UARTEx_SetNbDataToProcess+0x98>)
 800cf74:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cf76:	fb93 f3f2 	sdiv	r3, r3, r2
 800cf7a:	b29a      	uxth	r2, r3
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800cf82:	bf00      	nop
 800cf84:	3714      	adds	r7, #20
 800cf86:	46bd      	mov	sp, r7
 800cf88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8c:	4770      	bx	lr
 800cf8e:	bf00      	nop
 800cf90:	08013af4 	.word	0x08013af4
 800cf94:	08013afc 	.word	0x08013afc

0800cf98 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800cf98:	b480      	push	{r7}
 800cf9a:	b083      	sub	sp, #12
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	370c      	adds	r7, #12
 800cfaa:	46bd      	mov	sp, r7
 800cfac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb0:	4770      	bx	lr

0800cfb2 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800cfb2:	b480      	push	{r7}
 800cfb4:	b083      	sub	sp, #12
 800cfb6:	af00      	add	r7, sp, #0
 800cfb8:	6078      	str	r0, [r7, #4]
 800cfba:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800cfbc:	683b      	ldr	r3, [r7, #0]
 800cfbe:	681a      	ldr	r2, [r3, #0]
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cfc6:	2300      	movs	r3, #0
}
 800cfc8:	4618      	mov	r0, r3
 800cfca:	370c      	adds	r7, #12
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd2:	4770      	bx	lr

0800cfd4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800cfd4:	b480      	push	{r7}
 800cfd6:	b085      	sub	sp, #20
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
 800cfdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800cfde:	2300      	movs	r3, #0
 800cfe0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800cfe2:	683b      	ldr	r3, [r7, #0]
 800cfe4:	681a      	ldr	r2, [r3, #0]
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800cfea:	683b      	ldr	r3, [r7, #0]
 800cfec:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800cfee:	683b      	ldr	r3, [r7, #0]
 800cff0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800cff2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800cff4:	683b      	ldr	r3, [r7, #0]
 800cff6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800cff8:	431a      	orrs	r2, r3
                       Command->CPSM);
 800cffa:	683b      	ldr	r3, [r7, #0]
 800cffc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800cffe:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800d000:	68fa      	ldr	r2, [r7, #12]
 800d002:	4313      	orrs	r3, r2
 800d004:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	68da      	ldr	r2, [r3, #12]
 800d00a:	4b06      	ldr	r3, [pc, #24]	; (800d024 <SDMMC_SendCommand+0x50>)
 800d00c:	4013      	ands	r3, r2
 800d00e:	68fa      	ldr	r2, [r7, #12]
 800d010:	431a      	orrs	r2, r3
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d016:	2300      	movs	r3, #0
}
 800d018:	4618      	mov	r0, r3
 800d01a:	3714      	adds	r7, #20
 800d01c:	46bd      	mov	sp, r7
 800d01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d022:	4770      	bx	lr
 800d024:	fffee0c0 	.word	0xfffee0c0

0800d028 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800d028:	b480      	push	{r7}
 800d02a:	b083      	sub	sp, #12
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	691b      	ldr	r3, [r3, #16]
 800d034:	b2db      	uxtb	r3, r3
}
 800d036:	4618      	mov	r0, r3
 800d038:	370c      	adds	r7, #12
 800d03a:	46bd      	mov	sp, r7
 800d03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d040:	4770      	bx	lr

0800d042 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800d042:	b480      	push	{r7}
 800d044:	b085      	sub	sp, #20
 800d046:	af00      	add	r7, sp, #0
 800d048:	6078      	str	r0, [r7, #4]
 800d04a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	3314      	adds	r3, #20
 800d050:	461a      	mov	r2, r3
 800d052:	683b      	ldr	r3, [r7, #0]
 800d054:	4413      	add	r3, r2
 800d056:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	681b      	ldr	r3, [r3, #0]
}
 800d05c:	4618      	mov	r0, r3
 800d05e:	3714      	adds	r7, #20
 800d060:	46bd      	mov	sp, r7
 800d062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d066:	4770      	bx	lr

0800d068 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800d068:	b580      	push	{r7, lr}
 800d06a:	b088      	sub	sp, #32
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800d070:	2300      	movs	r3, #0
 800d072:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800d074:	230c      	movs	r3, #12
 800d076:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d078:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d07c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d07e:	2300      	movs	r3, #0
 800d080:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d082:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d086:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	68db      	ldr	r3, [r3, #12]
 800d08c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	68db      	ldr	r3, [r3, #12]
 800d098:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d0a0:	f107 0308 	add.w	r3, r7, #8
 800d0a4:	4619      	mov	r1, r3
 800d0a6:	6878      	ldr	r0, [r7, #4]
 800d0a8:	f7ff ff94 	bl	800cfd4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800d0ac:	4a0b      	ldr	r2, [pc, #44]	; (800d0dc <SDMMC_CmdStopTransfer+0x74>)
 800d0ae:	210c      	movs	r1, #12
 800d0b0:	6878      	ldr	r0, [r7, #4]
 800d0b2:	f000 f815 	bl	800d0e0 <SDMMC_GetCmdResp1>
 800d0b6:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	68db      	ldr	r3, [r3, #12]
 800d0bc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800d0c4:	69fb      	ldr	r3, [r7, #28]
 800d0c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d0ca:	d101      	bne.n	800d0d0 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800d0d0:	69fb      	ldr	r3, [r7, #28]
}
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	3720      	adds	r7, #32
 800d0d6:	46bd      	mov	sp, r7
 800d0d8:	bd80      	pop	{r7, pc}
 800d0da:	bf00      	nop
 800d0dc:	05f5e100 	.word	0x05f5e100

0800d0e0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	b088      	sub	sp, #32
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	60f8      	str	r0, [r7, #12]
 800d0e8:	460b      	mov	r3, r1
 800d0ea:	607a      	str	r2, [r7, #4]
 800d0ec:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800d0ee:	4b70      	ldr	r3, [pc, #448]	; (800d2b0 <SDMMC_GetCmdResp1+0x1d0>)
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	4a70      	ldr	r2, [pc, #448]	; (800d2b4 <SDMMC_GetCmdResp1+0x1d4>)
 800d0f4:	fba2 2303 	umull	r2, r3, r2, r3
 800d0f8:	0a5a      	lsrs	r2, r3, #9
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	fb02 f303 	mul.w	r3, r2, r3
 800d100:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800d102:	69fb      	ldr	r3, [r7, #28]
 800d104:	1e5a      	subs	r2, r3, #1
 800d106:	61fa      	str	r2, [r7, #28]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d102      	bne.n	800d112 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d10c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d110:	e0c9      	b.n	800d2a6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d116:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800d118:	69ba      	ldr	r2, [r7, #24]
 800d11a:	4b67      	ldr	r3, [pc, #412]	; (800d2b8 <SDMMC_GetCmdResp1+0x1d8>)
 800d11c:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d0ef      	beq.n	800d102 <SDMMC_GetCmdResp1+0x22>
 800d122:	69bb      	ldr	r3, [r7, #24]
 800d124:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d1ea      	bne.n	800d102 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d130:	f003 0304 	and.w	r3, r3, #4
 800d134:	2b00      	cmp	r3, #0
 800d136:	d004      	beq.n	800d142 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	2204      	movs	r2, #4
 800d13c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d13e:	2304      	movs	r3, #4
 800d140:	e0b1      	b.n	800d2a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d146:	f003 0301 	and.w	r3, r3, #1
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d004      	beq.n	800d158 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	2201      	movs	r2, #1
 800d152:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d154:	2301      	movs	r3, #1
 800d156:	e0a6      	b.n	800d2a6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	4a58      	ldr	r2, [pc, #352]	; (800d2bc <SDMMC_GetCmdResp1+0x1dc>)
 800d15c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d15e:	68f8      	ldr	r0, [r7, #12]
 800d160:	f7ff ff62 	bl	800d028 <SDMMC_GetCommandResponse>
 800d164:	4603      	mov	r3, r0
 800d166:	461a      	mov	r2, r3
 800d168:	7afb      	ldrb	r3, [r7, #11]
 800d16a:	4293      	cmp	r3, r2
 800d16c:	d001      	beq.n	800d172 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d16e:	2301      	movs	r3, #1
 800d170:	e099      	b.n	800d2a6 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d172:	2100      	movs	r1, #0
 800d174:	68f8      	ldr	r0, [r7, #12]
 800d176:	f7ff ff64 	bl	800d042 <SDMMC_GetResponse>
 800d17a:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d17c:	697a      	ldr	r2, [r7, #20]
 800d17e:	4b50      	ldr	r3, [pc, #320]	; (800d2c0 <SDMMC_GetCmdResp1+0x1e0>)
 800d180:	4013      	ands	r3, r2
 800d182:	2b00      	cmp	r3, #0
 800d184:	d101      	bne.n	800d18a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800d186:	2300      	movs	r3, #0
 800d188:	e08d      	b.n	800d2a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d18a:	697b      	ldr	r3, [r7, #20]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	da02      	bge.n	800d196 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d190:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d194:	e087      	b.n	800d2a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d196:	697b      	ldr	r3, [r7, #20]
 800d198:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d001      	beq.n	800d1a4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d1a0:	2340      	movs	r3, #64	; 0x40
 800d1a2:	e080      	b.n	800d2a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d1a4:	697b      	ldr	r3, [r7, #20]
 800d1a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d001      	beq.n	800d1b2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d1ae:	2380      	movs	r3, #128	; 0x80
 800d1b0:	e079      	b.n	800d2a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d1b2:	697b      	ldr	r3, [r7, #20]
 800d1b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d002      	beq.n	800d1c2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d1bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d1c0:	e071      	b.n	800d2a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d1c2:	697b      	ldr	r3, [r7, #20]
 800d1c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d002      	beq.n	800d1d2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d1cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d1d0:	e069      	b.n	800d2a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d1d2:	697b      	ldr	r3, [r7, #20]
 800d1d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d002      	beq.n	800d1e2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d1dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d1e0:	e061      	b.n	800d2a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d1e2:	697b      	ldr	r3, [r7, #20]
 800d1e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d002      	beq.n	800d1f2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d1ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d1f0:	e059      	b.n	800d2a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d1f2:	697b      	ldr	r3, [r7, #20]
 800d1f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d002      	beq.n	800d202 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d1fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d200:	e051      	b.n	800d2a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d202:	697b      	ldr	r3, [r7, #20]
 800d204:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d002      	beq.n	800d212 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d20c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d210:	e049      	b.n	800d2a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d212:	697b      	ldr	r3, [r7, #20]
 800d214:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d002      	beq.n	800d222 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d21c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d220:	e041      	b.n	800d2a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d222:	697b      	ldr	r3, [r7, #20]
 800d224:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d002      	beq.n	800d232 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800d22c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d230:	e039      	b.n	800d2a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d232:	697b      	ldr	r3, [r7, #20]
 800d234:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d002      	beq.n	800d242 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d23c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d240:	e031      	b.n	800d2a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d242:	697b      	ldr	r3, [r7, #20]
 800d244:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d002      	beq.n	800d252 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d24c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d250:	e029      	b.n	800d2a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d252:	697b      	ldr	r3, [r7, #20]
 800d254:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d002      	beq.n	800d262 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d25c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d260:	e021      	b.n	800d2a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d262:	697b      	ldr	r3, [r7, #20]
 800d264:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d002      	beq.n	800d272 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d26c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800d270:	e019      	b.n	800d2a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d272:	697b      	ldr	r3, [r7, #20]
 800d274:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d002      	beq.n	800d282 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d27c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d280:	e011      	b.n	800d2a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d282:	697b      	ldr	r3, [r7, #20]
 800d284:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d002      	beq.n	800d292 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d28c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d290:	e009      	b.n	800d2a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d292:	697b      	ldr	r3, [r7, #20]
 800d294:	f003 0308 	and.w	r3, r3, #8
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d002      	beq.n	800d2a2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d29c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d2a0:	e001      	b.n	800d2a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d2a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	3720      	adds	r7, #32
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	bd80      	pop	{r7, pc}
 800d2ae:	bf00      	nop
 800d2b0:	24000000 	.word	0x24000000
 800d2b4:	10624dd3 	.word	0x10624dd3
 800d2b8:	00200045 	.word	0x00200045
 800d2bc:	002000c5 	.word	0x002000c5
 800d2c0:	fdffe008 	.word	0xfdffe008

0800d2c4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d2c4:	b084      	sub	sp, #16
 800d2c6:	b580      	push	{r7, lr}
 800d2c8:	b084      	sub	sp, #16
 800d2ca:	af00      	add	r7, sp, #0
 800d2cc:	6078      	str	r0, [r7, #4]
 800d2ce:	f107 001c 	add.w	r0, r7, #28
 800d2d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d2d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2d8:	2b01      	cmp	r3, #1
 800d2da:	d120      	bne.n	800d31e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	68da      	ldr	r2, [r3, #12]
 800d2ec:	4b2a      	ldr	r3, [pc, #168]	; (800d398 <USB_CoreInit+0xd4>)
 800d2ee:	4013      	ands	r3, r2
 800d2f0:	687a      	ldr	r2, [r7, #4]
 800d2f2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	68db      	ldr	r3, [r3, #12]
 800d2f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d300:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d302:	2b01      	cmp	r3, #1
 800d304:	d105      	bne.n	800d312 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	68db      	ldr	r3, [r3, #12]
 800d30a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d312:	6878      	ldr	r0, [r7, #4]
 800d314:	f001 fb14 	bl	800e940 <USB_CoreReset>
 800d318:	4603      	mov	r3, r0
 800d31a:	73fb      	strb	r3, [r7, #15]
 800d31c:	e01a      	b.n	800d354 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	68db      	ldr	r3, [r3, #12]
 800d322:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d32a:	6878      	ldr	r0, [r7, #4]
 800d32c:	f001 fb08 	bl	800e940 <USB_CoreReset>
 800d330:	4603      	mov	r3, r0
 800d332:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800d334:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d336:	2b00      	cmp	r3, #0
 800d338:	d106      	bne.n	800d348 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d33e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	639a      	str	r2, [r3, #56]	; 0x38
 800d346:	e005      	b.n	800d354 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d34c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800d354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d356:	2b01      	cmp	r3, #1
 800d358:	d116      	bne.n	800d388 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d35e:	b29a      	uxth	r2, r3
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d368:	4b0c      	ldr	r3, [pc, #48]	; (800d39c <USB_CoreInit+0xd8>)
 800d36a:	4313      	orrs	r3, r2
 800d36c:	687a      	ldr	r2, [r7, #4]
 800d36e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	689b      	ldr	r3, [r3, #8]
 800d374:	f043 0206 	orr.w	r2, r3, #6
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	689b      	ldr	r3, [r3, #8]
 800d380:	f043 0220 	orr.w	r2, r3, #32
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d388:	7bfb      	ldrb	r3, [r7, #15]
}
 800d38a:	4618      	mov	r0, r3
 800d38c:	3710      	adds	r7, #16
 800d38e:	46bd      	mov	sp, r7
 800d390:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d394:	b004      	add	sp, #16
 800d396:	4770      	bx	lr
 800d398:	ffbdffbf 	.word	0xffbdffbf
 800d39c:	03ee0000 	.word	0x03ee0000

0800d3a0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800d3a0:	b480      	push	{r7}
 800d3a2:	b087      	sub	sp, #28
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	60f8      	str	r0, [r7, #12]
 800d3a8:	60b9      	str	r1, [r7, #8]
 800d3aa:	4613      	mov	r3, r2
 800d3ac:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800d3ae:	79fb      	ldrb	r3, [r7, #7]
 800d3b0:	2b02      	cmp	r3, #2
 800d3b2:	d165      	bne.n	800d480 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800d3b4:	68bb      	ldr	r3, [r7, #8]
 800d3b6:	4a41      	ldr	r2, [pc, #260]	; (800d4bc <USB_SetTurnaroundTime+0x11c>)
 800d3b8:	4293      	cmp	r3, r2
 800d3ba:	d906      	bls.n	800d3ca <USB_SetTurnaroundTime+0x2a>
 800d3bc:	68bb      	ldr	r3, [r7, #8]
 800d3be:	4a40      	ldr	r2, [pc, #256]	; (800d4c0 <USB_SetTurnaroundTime+0x120>)
 800d3c0:	4293      	cmp	r3, r2
 800d3c2:	d202      	bcs.n	800d3ca <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800d3c4:	230f      	movs	r3, #15
 800d3c6:	617b      	str	r3, [r7, #20]
 800d3c8:	e062      	b.n	800d490 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800d3ca:	68bb      	ldr	r3, [r7, #8]
 800d3cc:	4a3c      	ldr	r2, [pc, #240]	; (800d4c0 <USB_SetTurnaroundTime+0x120>)
 800d3ce:	4293      	cmp	r3, r2
 800d3d0:	d306      	bcc.n	800d3e0 <USB_SetTurnaroundTime+0x40>
 800d3d2:	68bb      	ldr	r3, [r7, #8]
 800d3d4:	4a3b      	ldr	r2, [pc, #236]	; (800d4c4 <USB_SetTurnaroundTime+0x124>)
 800d3d6:	4293      	cmp	r3, r2
 800d3d8:	d202      	bcs.n	800d3e0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800d3da:	230e      	movs	r3, #14
 800d3dc:	617b      	str	r3, [r7, #20]
 800d3de:	e057      	b.n	800d490 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800d3e0:	68bb      	ldr	r3, [r7, #8]
 800d3e2:	4a38      	ldr	r2, [pc, #224]	; (800d4c4 <USB_SetTurnaroundTime+0x124>)
 800d3e4:	4293      	cmp	r3, r2
 800d3e6:	d306      	bcc.n	800d3f6 <USB_SetTurnaroundTime+0x56>
 800d3e8:	68bb      	ldr	r3, [r7, #8]
 800d3ea:	4a37      	ldr	r2, [pc, #220]	; (800d4c8 <USB_SetTurnaroundTime+0x128>)
 800d3ec:	4293      	cmp	r3, r2
 800d3ee:	d202      	bcs.n	800d3f6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800d3f0:	230d      	movs	r3, #13
 800d3f2:	617b      	str	r3, [r7, #20]
 800d3f4:	e04c      	b.n	800d490 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800d3f6:	68bb      	ldr	r3, [r7, #8]
 800d3f8:	4a33      	ldr	r2, [pc, #204]	; (800d4c8 <USB_SetTurnaroundTime+0x128>)
 800d3fa:	4293      	cmp	r3, r2
 800d3fc:	d306      	bcc.n	800d40c <USB_SetTurnaroundTime+0x6c>
 800d3fe:	68bb      	ldr	r3, [r7, #8]
 800d400:	4a32      	ldr	r2, [pc, #200]	; (800d4cc <USB_SetTurnaroundTime+0x12c>)
 800d402:	4293      	cmp	r3, r2
 800d404:	d802      	bhi.n	800d40c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800d406:	230c      	movs	r3, #12
 800d408:	617b      	str	r3, [r7, #20]
 800d40a:	e041      	b.n	800d490 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800d40c:	68bb      	ldr	r3, [r7, #8]
 800d40e:	4a2f      	ldr	r2, [pc, #188]	; (800d4cc <USB_SetTurnaroundTime+0x12c>)
 800d410:	4293      	cmp	r3, r2
 800d412:	d906      	bls.n	800d422 <USB_SetTurnaroundTime+0x82>
 800d414:	68bb      	ldr	r3, [r7, #8]
 800d416:	4a2e      	ldr	r2, [pc, #184]	; (800d4d0 <USB_SetTurnaroundTime+0x130>)
 800d418:	4293      	cmp	r3, r2
 800d41a:	d802      	bhi.n	800d422 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800d41c:	230b      	movs	r3, #11
 800d41e:	617b      	str	r3, [r7, #20]
 800d420:	e036      	b.n	800d490 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800d422:	68bb      	ldr	r3, [r7, #8]
 800d424:	4a2a      	ldr	r2, [pc, #168]	; (800d4d0 <USB_SetTurnaroundTime+0x130>)
 800d426:	4293      	cmp	r3, r2
 800d428:	d906      	bls.n	800d438 <USB_SetTurnaroundTime+0x98>
 800d42a:	68bb      	ldr	r3, [r7, #8]
 800d42c:	4a29      	ldr	r2, [pc, #164]	; (800d4d4 <USB_SetTurnaroundTime+0x134>)
 800d42e:	4293      	cmp	r3, r2
 800d430:	d802      	bhi.n	800d438 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800d432:	230a      	movs	r3, #10
 800d434:	617b      	str	r3, [r7, #20]
 800d436:	e02b      	b.n	800d490 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800d438:	68bb      	ldr	r3, [r7, #8]
 800d43a:	4a26      	ldr	r2, [pc, #152]	; (800d4d4 <USB_SetTurnaroundTime+0x134>)
 800d43c:	4293      	cmp	r3, r2
 800d43e:	d906      	bls.n	800d44e <USB_SetTurnaroundTime+0xae>
 800d440:	68bb      	ldr	r3, [r7, #8]
 800d442:	4a25      	ldr	r2, [pc, #148]	; (800d4d8 <USB_SetTurnaroundTime+0x138>)
 800d444:	4293      	cmp	r3, r2
 800d446:	d202      	bcs.n	800d44e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800d448:	2309      	movs	r3, #9
 800d44a:	617b      	str	r3, [r7, #20]
 800d44c:	e020      	b.n	800d490 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800d44e:	68bb      	ldr	r3, [r7, #8]
 800d450:	4a21      	ldr	r2, [pc, #132]	; (800d4d8 <USB_SetTurnaroundTime+0x138>)
 800d452:	4293      	cmp	r3, r2
 800d454:	d306      	bcc.n	800d464 <USB_SetTurnaroundTime+0xc4>
 800d456:	68bb      	ldr	r3, [r7, #8]
 800d458:	4a20      	ldr	r2, [pc, #128]	; (800d4dc <USB_SetTurnaroundTime+0x13c>)
 800d45a:	4293      	cmp	r3, r2
 800d45c:	d802      	bhi.n	800d464 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800d45e:	2308      	movs	r3, #8
 800d460:	617b      	str	r3, [r7, #20]
 800d462:	e015      	b.n	800d490 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800d464:	68bb      	ldr	r3, [r7, #8]
 800d466:	4a1d      	ldr	r2, [pc, #116]	; (800d4dc <USB_SetTurnaroundTime+0x13c>)
 800d468:	4293      	cmp	r3, r2
 800d46a:	d906      	bls.n	800d47a <USB_SetTurnaroundTime+0xda>
 800d46c:	68bb      	ldr	r3, [r7, #8]
 800d46e:	4a1c      	ldr	r2, [pc, #112]	; (800d4e0 <USB_SetTurnaroundTime+0x140>)
 800d470:	4293      	cmp	r3, r2
 800d472:	d202      	bcs.n	800d47a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800d474:	2307      	movs	r3, #7
 800d476:	617b      	str	r3, [r7, #20]
 800d478:	e00a      	b.n	800d490 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800d47a:	2306      	movs	r3, #6
 800d47c:	617b      	str	r3, [r7, #20]
 800d47e:	e007      	b.n	800d490 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800d480:	79fb      	ldrb	r3, [r7, #7]
 800d482:	2b00      	cmp	r3, #0
 800d484:	d102      	bne.n	800d48c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800d486:	2309      	movs	r3, #9
 800d488:	617b      	str	r3, [r7, #20]
 800d48a:	e001      	b.n	800d490 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800d48c:	2309      	movs	r3, #9
 800d48e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	68db      	ldr	r3, [r3, #12]
 800d494:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	68da      	ldr	r2, [r3, #12]
 800d4a0:	697b      	ldr	r3, [r7, #20]
 800d4a2:	029b      	lsls	r3, r3, #10
 800d4a4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800d4a8:	431a      	orrs	r2, r3
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d4ae:	2300      	movs	r3, #0
}
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	371c      	adds	r7, #28
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ba:	4770      	bx	lr
 800d4bc:	00d8acbf 	.word	0x00d8acbf
 800d4c0:	00e4e1c0 	.word	0x00e4e1c0
 800d4c4:	00f42400 	.word	0x00f42400
 800d4c8:	01067380 	.word	0x01067380
 800d4cc:	011a499f 	.word	0x011a499f
 800d4d0:	01312cff 	.word	0x01312cff
 800d4d4:	014ca43f 	.word	0x014ca43f
 800d4d8:	016e3600 	.word	0x016e3600
 800d4dc:	01a6ab1f 	.word	0x01a6ab1f
 800d4e0:	01e84800 	.word	0x01e84800

0800d4e4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d4e4:	b480      	push	{r7}
 800d4e6:	b083      	sub	sp, #12
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	689b      	ldr	r3, [r3, #8]
 800d4f0:	f043 0201 	orr.w	r2, r3, #1
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d4f8:	2300      	movs	r3, #0
}
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	370c      	adds	r7, #12
 800d4fe:	46bd      	mov	sp, r7
 800d500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d504:	4770      	bx	lr

0800d506 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d506:	b480      	push	{r7}
 800d508:	b083      	sub	sp, #12
 800d50a:	af00      	add	r7, sp, #0
 800d50c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	689b      	ldr	r3, [r3, #8]
 800d512:	f023 0201 	bic.w	r2, r3, #1
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d51a:	2300      	movs	r3, #0
}
 800d51c:	4618      	mov	r0, r3
 800d51e:	370c      	adds	r7, #12
 800d520:	46bd      	mov	sp, r7
 800d522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d526:	4770      	bx	lr

0800d528 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d528:	b580      	push	{r7, lr}
 800d52a:	b082      	sub	sp, #8
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
 800d530:	460b      	mov	r3, r1
 800d532:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	68db      	ldr	r3, [r3, #12]
 800d538:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d540:	78fb      	ldrb	r3, [r7, #3]
 800d542:	2b01      	cmp	r3, #1
 800d544:	d106      	bne.n	800d554 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	68db      	ldr	r3, [r3, #12]
 800d54a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	60da      	str	r2, [r3, #12]
 800d552:	e00b      	b.n	800d56c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800d554:	78fb      	ldrb	r3, [r7, #3]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d106      	bne.n	800d568 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	68db      	ldr	r3, [r3, #12]
 800d55e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	60da      	str	r2, [r3, #12]
 800d566:	e001      	b.n	800d56c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800d568:	2301      	movs	r3, #1
 800d56a:	e003      	b.n	800d574 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800d56c:	2032      	movs	r0, #50	; 0x32
 800d56e:	f7f4 fc6f 	bl	8001e50 <HAL_Delay>

  return HAL_OK;
 800d572:	2300      	movs	r3, #0
}
 800d574:	4618      	mov	r0, r3
 800d576:	3708      	adds	r7, #8
 800d578:	46bd      	mov	sp, r7
 800d57a:	bd80      	pop	{r7, pc}

0800d57c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d57c:	b084      	sub	sp, #16
 800d57e:	b580      	push	{r7, lr}
 800d580:	b086      	sub	sp, #24
 800d582:	af00      	add	r7, sp, #0
 800d584:	6078      	str	r0, [r7, #4]
 800d586:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800d58a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d58e:	2300      	movs	r3, #0
 800d590:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d596:	2300      	movs	r3, #0
 800d598:	613b      	str	r3, [r7, #16]
 800d59a:	e009      	b.n	800d5b0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d59c:	687a      	ldr	r2, [r7, #4]
 800d59e:	693b      	ldr	r3, [r7, #16]
 800d5a0:	3340      	adds	r3, #64	; 0x40
 800d5a2:	009b      	lsls	r3, r3, #2
 800d5a4:	4413      	add	r3, r2
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d5aa:	693b      	ldr	r3, [r7, #16]
 800d5ac:	3301      	adds	r3, #1
 800d5ae:	613b      	str	r3, [r7, #16]
 800d5b0:	693b      	ldr	r3, [r7, #16]
 800d5b2:	2b0e      	cmp	r3, #14
 800d5b4:	d9f2      	bls.n	800d59c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d5b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d11c      	bne.n	800d5f6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d5c2:	685b      	ldr	r3, [r3, #4]
 800d5c4:	68fa      	ldr	r2, [r7, #12]
 800d5c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d5ca:	f043 0302 	orr.w	r3, r3, #2
 800d5ce:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5d4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	601a      	str	r2, [r3, #0]
 800d5f4:	e005      	b.n	800d602 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5fa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d608:	461a      	mov	r2, r3
 800d60a:	2300      	movs	r3, #0
 800d60c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d614:	4619      	mov	r1, r3
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d61c:	461a      	mov	r2, r3
 800d61e:	680b      	ldr	r3, [r1, #0]
 800d620:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d624:	2b01      	cmp	r3, #1
 800d626:	d10c      	bne.n	800d642 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d104      	bne.n	800d638 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d62e:	2100      	movs	r1, #0
 800d630:	6878      	ldr	r0, [r7, #4]
 800d632:	f000 f949 	bl	800d8c8 <USB_SetDevSpeed>
 800d636:	e008      	b.n	800d64a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d638:	2101      	movs	r1, #1
 800d63a:	6878      	ldr	r0, [r7, #4]
 800d63c:	f000 f944 	bl	800d8c8 <USB_SetDevSpeed>
 800d640:	e003      	b.n	800d64a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d642:	2103      	movs	r1, #3
 800d644:	6878      	ldr	r0, [r7, #4]
 800d646:	f000 f93f 	bl	800d8c8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d64a:	2110      	movs	r1, #16
 800d64c:	6878      	ldr	r0, [r7, #4]
 800d64e:	f000 f8f3 	bl	800d838 <USB_FlushTxFifo>
 800d652:	4603      	mov	r3, r0
 800d654:	2b00      	cmp	r3, #0
 800d656:	d001      	beq.n	800d65c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800d658:	2301      	movs	r3, #1
 800d65a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d65c:	6878      	ldr	r0, [r7, #4]
 800d65e:	f000 f911 	bl	800d884 <USB_FlushRxFifo>
 800d662:	4603      	mov	r3, r0
 800d664:	2b00      	cmp	r3, #0
 800d666:	d001      	beq.n	800d66c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800d668:	2301      	movs	r3, #1
 800d66a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d672:	461a      	mov	r2, r3
 800d674:	2300      	movs	r3, #0
 800d676:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d67e:	461a      	mov	r2, r3
 800d680:	2300      	movs	r3, #0
 800d682:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d68a:	461a      	mov	r2, r3
 800d68c:	2300      	movs	r3, #0
 800d68e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d690:	2300      	movs	r3, #0
 800d692:	613b      	str	r3, [r7, #16]
 800d694:	e043      	b.n	800d71e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d696:	693b      	ldr	r3, [r7, #16]
 800d698:	015a      	lsls	r2, r3, #5
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	4413      	add	r3, r2
 800d69e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d6a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d6ac:	d118      	bne.n	800d6e0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800d6ae:	693b      	ldr	r3, [r7, #16]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d10a      	bne.n	800d6ca <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d6b4:	693b      	ldr	r3, [r7, #16]
 800d6b6:	015a      	lsls	r2, r3, #5
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	4413      	add	r3, r2
 800d6bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6c0:	461a      	mov	r2, r3
 800d6c2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d6c6:	6013      	str	r3, [r2, #0]
 800d6c8:	e013      	b.n	800d6f2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d6ca:	693b      	ldr	r3, [r7, #16]
 800d6cc:	015a      	lsls	r2, r3, #5
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	4413      	add	r3, r2
 800d6d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6d6:	461a      	mov	r2, r3
 800d6d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d6dc:	6013      	str	r3, [r2, #0]
 800d6de:	e008      	b.n	800d6f2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d6e0:	693b      	ldr	r3, [r7, #16]
 800d6e2:	015a      	lsls	r2, r3, #5
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	4413      	add	r3, r2
 800d6e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6ec:	461a      	mov	r2, r3
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d6f2:	693b      	ldr	r3, [r7, #16]
 800d6f4:	015a      	lsls	r2, r3, #5
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	4413      	add	r3, r2
 800d6fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6fe:	461a      	mov	r2, r3
 800d700:	2300      	movs	r3, #0
 800d702:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d704:	693b      	ldr	r3, [r7, #16]
 800d706:	015a      	lsls	r2, r3, #5
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	4413      	add	r3, r2
 800d70c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d710:	461a      	mov	r2, r3
 800d712:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d716:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d718:	693b      	ldr	r3, [r7, #16]
 800d71a:	3301      	adds	r3, #1
 800d71c:	613b      	str	r3, [r7, #16]
 800d71e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d720:	693a      	ldr	r2, [r7, #16]
 800d722:	429a      	cmp	r2, r3
 800d724:	d3b7      	bcc.n	800d696 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d726:	2300      	movs	r3, #0
 800d728:	613b      	str	r3, [r7, #16]
 800d72a:	e043      	b.n	800d7b4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d72c:	693b      	ldr	r3, [r7, #16]
 800d72e:	015a      	lsls	r2, r3, #5
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	4413      	add	r3, r2
 800d734:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d73e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d742:	d118      	bne.n	800d776 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800d744:	693b      	ldr	r3, [r7, #16]
 800d746:	2b00      	cmp	r3, #0
 800d748:	d10a      	bne.n	800d760 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d74a:	693b      	ldr	r3, [r7, #16]
 800d74c:	015a      	lsls	r2, r3, #5
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	4413      	add	r3, r2
 800d752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d756:	461a      	mov	r2, r3
 800d758:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d75c:	6013      	str	r3, [r2, #0]
 800d75e:	e013      	b.n	800d788 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d760:	693b      	ldr	r3, [r7, #16]
 800d762:	015a      	lsls	r2, r3, #5
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	4413      	add	r3, r2
 800d768:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d76c:	461a      	mov	r2, r3
 800d76e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d772:	6013      	str	r3, [r2, #0]
 800d774:	e008      	b.n	800d788 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d776:	693b      	ldr	r3, [r7, #16]
 800d778:	015a      	lsls	r2, r3, #5
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	4413      	add	r3, r2
 800d77e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d782:	461a      	mov	r2, r3
 800d784:	2300      	movs	r3, #0
 800d786:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d788:	693b      	ldr	r3, [r7, #16]
 800d78a:	015a      	lsls	r2, r3, #5
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	4413      	add	r3, r2
 800d790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d794:	461a      	mov	r2, r3
 800d796:	2300      	movs	r3, #0
 800d798:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d79a:	693b      	ldr	r3, [r7, #16]
 800d79c:	015a      	lsls	r2, r3, #5
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	4413      	add	r3, r2
 800d7a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7a6:	461a      	mov	r2, r3
 800d7a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d7ac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d7ae:	693b      	ldr	r3, [r7, #16]
 800d7b0:	3301      	adds	r3, #1
 800d7b2:	613b      	str	r3, [r7, #16]
 800d7b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7b6:	693a      	ldr	r2, [r7, #16]
 800d7b8:	429a      	cmp	r2, r3
 800d7ba:	d3b7      	bcc.n	800d72c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d7c2:	691b      	ldr	r3, [r3, #16]
 800d7c4:	68fa      	ldr	r2, [r7, #12]
 800d7c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d7ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d7ce:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	2200      	movs	r2, #0
 800d7d4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800d7dc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d7de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d105      	bne.n	800d7f0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	699b      	ldr	r3, [r3, #24]
 800d7e8:	f043 0210 	orr.w	r2, r3, #16
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	699a      	ldr	r2, [r3, #24]
 800d7f4:	4b0e      	ldr	r3, [pc, #56]	; (800d830 <USB_DevInit+0x2b4>)
 800d7f6:	4313      	orrs	r3, r2
 800d7f8:	687a      	ldr	r2, [r7, #4]
 800d7fa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d7fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d005      	beq.n	800d80e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	699b      	ldr	r3, [r3, #24]
 800d806:	f043 0208 	orr.w	r2, r3, #8
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d80e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d810:	2b01      	cmp	r3, #1
 800d812:	d105      	bne.n	800d820 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	699a      	ldr	r2, [r3, #24]
 800d818:	4b06      	ldr	r3, [pc, #24]	; (800d834 <USB_DevInit+0x2b8>)
 800d81a:	4313      	orrs	r3, r2
 800d81c:	687a      	ldr	r2, [r7, #4]
 800d81e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d820:	7dfb      	ldrb	r3, [r7, #23]
}
 800d822:	4618      	mov	r0, r3
 800d824:	3718      	adds	r7, #24
 800d826:	46bd      	mov	sp, r7
 800d828:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d82c:	b004      	add	sp, #16
 800d82e:	4770      	bx	lr
 800d830:	803c3800 	.word	0x803c3800
 800d834:	40000004 	.word	0x40000004

0800d838 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d838:	b480      	push	{r7}
 800d83a:	b085      	sub	sp, #20
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	6078      	str	r0, [r7, #4]
 800d840:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800d842:	2300      	movs	r3, #0
 800d844:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d846:	683b      	ldr	r3, [r7, #0]
 800d848:	019b      	lsls	r3, r3, #6
 800d84a:	f043 0220 	orr.w	r2, r3, #32
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	3301      	adds	r3, #1
 800d856:	60fb      	str	r3, [r7, #12]
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	4a09      	ldr	r2, [pc, #36]	; (800d880 <USB_FlushTxFifo+0x48>)
 800d85c:	4293      	cmp	r3, r2
 800d85e:	d901      	bls.n	800d864 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800d860:	2303      	movs	r3, #3
 800d862:	e006      	b.n	800d872 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	691b      	ldr	r3, [r3, #16]
 800d868:	f003 0320 	and.w	r3, r3, #32
 800d86c:	2b20      	cmp	r3, #32
 800d86e:	d0f0      	beq.n	800d852 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800d870:	2300      	movs	r3, #0
}
 800d872:	4618      	mov	r0, r3
 800d874:	3714      	adds	r7, #20
 800d876:	46bd      	mov	sp, r7
 800d878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d87c:	4770      	bx	lr
 800d87e:	bf00      	nop
 800d880:	00030d40 	.word	0x00030d40

0800d884 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d884:	b480      	push	{r7}
 800d886:	b085      	sub	sp, #20
 800d888:	af00      	add	r7, sp, #0
 800d88a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800d88c:	2300      	movs	r3, #0
 800d88e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	2210      	movs	r2, #16
 800d894:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	3301      	adds	r3, #1
 800d89a:	60fb      	str	r3, [r7, #12]
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	4a09      	ldr	r2, [pc, #36]	; (800d8c4 <USB_FlushRxFifo+0x40>)
 800d8a0:	4293      	cmp	r3, r2
 800d8a2:	d901      	bls.n	800d8a8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800d8a4:	2303      	movs	r3, #3
 800d8a6:	e006      	b.n	800d8b6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	691b      	ldr	r3, [r3, #16]
 800d8ac:	f003 0310 	and.w	r3, r3, #16
 800d8b0:	2b10      	cmp	r3, #16
 800d8b2:	d0f0      	beq.n	800d896 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800d8b4:	2300      	movs	r3, #0
}
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	3714      	adds	r7, #20
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c0:	4770      	bx	lr
 800d8c2:	bf00      	nop
 800d8c4:	00030d40 	.word	0x00030d40

0800d8c8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d8c8:	b480      	push	{r7}
 800d8ca:	b085      	sub	sp, #20
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	6078      	str	r0, [r7, #4]
 800d8d0:	460b      	mov	r3, r1
 800d8d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d8de:	681a      	ldr	r2, [r3, #0]
 800d8e0:	78fb      	ldrb	r3, [r7, #3]
 800d8e2:	68f9      	ldr	r1, [r7, #12]
 800d8e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d8e8:	4313      	orrs	r3, r2
 800d8ea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d8ec:	2300      	movs	r3, #0
}
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	3714      	adds	r7, #20
 800d8f2:	46bd      	mov	sp, r7
 800d8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f8:	4770      	bx	lr

0800d8fa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800d8fa:	b480      	push	{r7}
 800d8fc:	b087      	sub	sp, #28
 800d8fe:	af00      	add	r7, sp, #0
 800d900:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800d906:	693b      	ldr	r3, [r7, #16]
 800d908:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d90c:	689b      	ldr	r3, [r3, #8]
 800d90e:	f003 0306 	and.w	r3, r3, #6
 800d912:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	2b00      	cmp	r3, #0
 800d918:	d102      	bne.n	800d920 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800d91a:	2300      	movs	r3, #0
 800d91c:	75fb      	strb	r3, [r7, #23]
 800d91e:	e00a      	b.n	800d936 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	2b02      	cmp	r3, #2
 800d924:	d002      	beq.n	800d92c <USB_GetDevSpeed+0x32>
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	2b06      	cmp	r3, #6
 800d92a:	d102      	bne.n	800d932 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800d92c:	2302      	movs	r3, #2
 800d92e:	75fb      	strb	r3, [r7, #23]
 800d930:	e001      	b.n	800d936 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800d932:	230f      	movs	r3, #15
 800d934:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800d936:	7dfb      	ldrb	r3, [r7, #23]
}
 800d938:	4618      	mov	r0, r3
 800d93a:	371c      	adds	r7, #28
 800d93c:	46bd      	mov	sp, r7
 800d93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d942:	4770      	bx	lr

0800d944 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d944:	b480      	push	{r7}
 800d946:	b085      	sub	sp, #20
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
 800d94c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d952:	683b      	ldr	r3, [r7, #0]
 800d954:	781b      	ldrb	r3, [r3, #0]
 800d956:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d958:	683b      	ldr	r3, [r7, #0]
 800d95a:	785b      	ldrb	r3, [r3, #1]
 800d95c:	2b01      	cmp	r3, #1
 800d95e:	d139      	bne.n	800d9d4 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d966:	69da      	ldr	r2, [r3, #28]
 800d968:	683b      	ldr	r3, [r7, #0]
 800d96a:	781b      	ldrb	r3, [r3, #0]
 800d96c:	f003 030f 	and.w	r3, r3, #15
 800d970:	2101      	movs	r1, #1
 800d972:	fa01 f303 	lsl.w	r3, r1, r3
 800d976:	b29b      	uxth	r3, r3
 800d978:	68f9      	ldr	r1, [r7, #12]
 800d97a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d97e:	4313      	orrs	r3, r2
 800d980:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800d982:	68bb      	ldr	r3, [r7, #8]
 800d984:	015a      	lsls	r2, r3, #5
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	4413      	add	r3, r2
 800d98a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d994:	2b00      	cmp	r3, #0
 800d996:	d153      	bne.n	800da40 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d998:	68bb      	ldr	r3, [r7, #8]
 800d99a:	015a      	lsls	r2, r3, #5
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	4413      	add	r3, r2
 800d9a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d9a4:	681a      	ldr	r2, [r3, #0]
 800d9a6:	683b      	ldr	r3, [r7, #0]
 800d9a8:	689b      	ldr	r3, [r3, #8]
 800d9aa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d9ae:	683b      	ldr	r3, [r7, #0]
 800d9b0:	78db      	ldrb	r3, [r3, #3]
 800d9b2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d9b4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d9b6:	68bb      	ldr	r3, [r7, #8]
 800d9b8:	059b      	lsls	r3, r3, #22
 800d9ba:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d9bc:	431a      	orrs	r2, r3
 800d9be:	68bb      	ldr	r3, [r7, #8]
 800d9c0:	0159      	lsls	r1, r3, #5
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	440b      	add	r3, r1
 800d9c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d9ca:	4619      	mov	r1, r3
 800d9cc:	4b20      	ldr	r3, [pc, #128]	; (800da50 <USB_ActivateEndpoint+0x10c>)
 800d9ce:	4313      	orrs	r3, r2
 800d9d0:	600b      	str	r3, [r1, #0]
 800d9d2:	e035      	b.n	800da40 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d9da:	69da      	ldr	r2, [r3, #28]
 800d9dc:	683b      	ldr	r3, [r7, #0]
 800d9de:	781b      	ldrb	r3, [r3, #0]
 800d9e0:	f003 030f 	and.w	r3, r3, #15
 800d9e4:	2101      	movs	r1, #1
 800d9e6:	fa01 f303 	lsl.w	r3, r1, r3
 800d9ea:	041b      	lsls	r3, r3, #16
 800d9ec:	68f9      	ldr	r1, [r7, #12]
 800d9ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d9f2:	4313      	orrs	r3, r2
 800d9f4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800d9f6:	68bb      	ldr	r3, [r7, #8]
 800d9f8:	015a      	lsls	r2, r3, #5
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	4413      	add	r3, r2
 800d9fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d119      	bne.n	800da40 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800da0c:	68bb      	ldr	r3, [r7, #8]
 800da0e:	015a      	lsls	r2, r3, #5
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	4413      	add	r3, r2
 800da14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da18:	681a      	ldr	r2, [r3, #0]
 800da1a:	683b      	ldr	r3, [r7, #0]
 800da1c:	689b      	ldr	r3, [r3, #8]
 800da1e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800da22:	683b      	ldr	r3, [r7, #0]
 800da24:	78db      	ldrb	r3, [r3, #3]
 800da26:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800da28:	430b      	orrs	r3, r1
 800da2a:	431a      	orrs	r2, r3
 800da2c:	68bb      	ldr	r3, [r7, #8]
 800da2e:	0159      	lsls	r1, r3, #5
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	440b      	add	r3, r1
 800da34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da38:	4619      	mov	r1, r3
 800da3a:	4b05      	ldr	r3, [pc, #20]	; (800da50 <USB_ActivateEndpoint+0x10c>)
 800da3c:	4313      	orrs	r3, r2
 800da3e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800da40:	2300      	movs	r3, #0
}
 800da42:	4618      	mov	r0, r3
 800da44:	3714      	adds	r7, #20
 800da46:	46bd      	mov	sp, r7
 800da48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da4c:	4770      	bx	lr
 800da4e:	bf00      	nop
 800da50:	10008000 	.word	0x10008000

0800da54 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800da54:	b480      	push	{r7}
 800da56:	b085      	sub	sp, #20
 800da58:	af00      	add	r7, sp, #0
 800da5a:	6078      	str	r0, [r7, #4]
 800da5c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800da62:	683b      	ldr	r3, [r7, #0]
 800da64:	781b      	ldrb	r3, [r3, #0]
 800da66:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800da68:	683b      	ldr	r3, [r7, #0]
 800da6a:	785b      	ldrb	r3, [r3, #1]
 800da6c:	2b01      	cmp	r3, #1
 800da6e:	d161      	bne.n	800db34 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800da70:	68bb      	ldr	r3, [r7, #8]
 800da72:	015a      	lsls	r2, r3, #5
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	4413      	add	r3, r2
 800da78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800da82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800da86:	d11f      	bne.n	800dac8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800da88:	68bb      	ldr	r3, [r7, #8]
 800da8a:	015a      	lsls	r2, r3, #5
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	4413      	add	r3, r2
 800da90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	68ba      	ldr	r2, [r7, #8]
 800da98:	0151      	lsls	r1, r2, #5
 800da9a:	68fa      	ldr	r2, [r7, #12]
 800da9c:	440a      	add	r2, r1
 800da9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800daa2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800daa6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800daa8:	68bb      	ldr	r3, [r7, #8]
 800daaa:	015a      	lsls	r2, r3, #5
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	4413      	add	r3, r2
 800dab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	68ba      	ldr	r2, [r7, #8]
 800dab8:	0151      	lsls	r1, r2, #5
 800daba:	68fa      	ldr	r2, [r7, #12]
 800dabc:	440a      	add	r2, r1
 800dabe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dac2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dac6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dace:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dad0:	683b      	ldr	r3, [r7, #0]
 800dad2:	781b      	ldrb	r3, [r3, #0]
 800dad4:	f003 030f 	and.w	r3, r3, #15
 800dad8:	2101      	movs	r1, #1
 800dada:	fa01 f303 	lsl.w	r3, r1, r3
 800dade:	b29b      	uxth	r3, r3
 800dae0:	43db      	mvns	r3, r3
 800dae2:	68f9      	ldr	r1, [r7, #12]
 800dae4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dae8:	4013      	ands	r3, r2
 800daea:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800daf2:	69da      	ldr	r2, [r3, #28]
 800daf4:	683b      	ldr	r3, [r7, #0]
 800daf6:	781b      	ldrb	r3, [r3, #0]
 800daf8:	f003 030f 	and.w	r3, r3, #15
 800dafc:	2101      	movs	r1, #1
 800dafe:	fa01 f303 	lsl.w	r3, r1, r3
 800db02:	b29b      	uxth	r3, r3
 800db04:	43db      	mvns	r3, r3
 800db06:	68f9      	ldr	r1, [r7, #12]
 800db08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800db0c:	4013      	ands	r3, r2
 800db0e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800db10:	68bb      	ldr	r3, [r7, #8]
 800db12:	015a      	lsls	r2, r3, #5
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	4413      	add	r3, r2
 800db18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db1c:	681a      	ldr	r2, [r3, #0]
 800db1e:	68bb      	ldr	r3, [r7, #8]
 800db20:	0159      	lsls	r1, r3, #5
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	440b      	add	r3, r1
 800db26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db2a:	4619      	mov	r1, r3
 800db2c:	4b35      	ldr	r3, [pc, #212]	; (800dc04 <USB_DeactivateEndpoint+0x1b0>)
 800db2e:	4013      	ands	r3, r2
 800db30:	600b      	str	r3, [r1, #0]
 800db32:	e060      	b.n	800dbf6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800db34:	68bb      	ldr	r3, [r7, #8]
 800db36:	015a      	lsls	r2, r3, #5
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	4413      	add	r3, r2
 800db3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800db46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800db4a:	d11f      	bne.n	800db8c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800db4c:	68bb      	ldr	r3, [r7, #8]
 800db4e:	015a      	lsls	r2, r3, #5
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	4413      	add	r3, r2
 800db54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	68ba      	ldr	r2, [r7, #8]
 800db5c:	0151      	lsls	r1, r2, #5
 800db5e:	68fa      	ldr	r2, [r7, #12]
 800db60:	440a      	add	r2, r1
 800db62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800db66:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800db6a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800db6c:	68bb      	ldr	r3, [r7, #8]
 800db6e:	015a      	lsls	r2, r3, #5
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	4413      	add	r3, r2
 800db74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	68ba      	ldr	r2, [r7, #8]
 800db7c:	0151      	lsls	r1, r2, #5
 800db7e:	68fa      	ldr	r2, [r7, #12]
 800db80:	440a      	add	r2, r1
 800db82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800db86:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800db8a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800db92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800db94:	683b      	ldr	r3, [r7, #0]
 800db96:	781b      	ldrb	r3, [r3, #0]
 800db98:	f003 030f 	and.w	r3, r3, #15
 800db9c:	2101      	movs	r1, #1
 800db9e:	fa01 f303 	lsl.w	r3, r1, r3
 800dba2:	041b      	lsls	r3, r3, #16
 800dba4:	43db      	mvns	r3, r3
 800dba6:	68f9      	ldr	r1, [r7, #12]
 800dba8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dbac:	4013      	ands	r3, r2
 800dbae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dbb6:	69da      	ldr	r2, [r3, #28]
 800dbb8:	683b      	ldr	r3, [r7, #0]
 800dbba:	781b      	ldrb	r3, [r3, #0]
 800dbbc:	f003 030f 	and.w	r3, r3, #15
 800dbc0:	2101      	movs	r1, #1
 800dbc2:	fa01 f303 	lsl.w	r3, r1, r3
 800dbc6:	041b      	lsls	r3, r3, #16
 800dbc8:	43db      	mvns	r3, r3
 800dbca:	68f9      	ldr	r1, [r7, #12]
 800dbcc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dbd0:	4013      	ands	r3, r2
 800dbd2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800dbd4:	68bb      	ldr	r3, [r7, #8]
 800dbd6:	015a      	lsls	r2, r3, #5
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	4413      	add	r3, r2
 800dbdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dbe0:	681a      	ldr	r2, [r3, #0]
 800dbe2:	68bb      	ldr	r3, [r7, #8]
 800dbe4:	0159      	lsls	r1, r3, #5
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	440b      	add	r3, r1
 800dbea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dbee:	4619      	mov	r1, r3
 800dbf0:	4b05      	ldr	r3, [pc, #20]	; (800dc08 <USB_DeactivateEndpoint+0x1b4>)
 800dbf2:	4013      	ands	r3, r2
 800dbf4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800dbf6:	2300      	movs	r3, #0
}
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	3714      	adds	r7, #20
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc02:	4770      	bx	lr
 800dc04:	ec337800 	.word	0xec337800
 800dc08:	eff37800 	.word	0xeff37800

0800dc0c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800dc0c:	b580      	push	{r7, lr}
 800dc0e:	b08a      	sub	sp, #40	; 0x28
 800dc10:	af02      	add	r7, sp, #8
 800dc12:	60f8      	str	r0, [r7, #12]
 800dc14:	60b9      	str	r1, [r7, #8]
 800dc16:	4613      	mov	r3, r2
 800dc18:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800dc1e:	68bb      	ldr	r3, [r7, #8]
 800dc20:	781b      	ldrb	r3, [r3, #0]
 800dc22:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800dc24:	68bb      	ldr	r3, [r7, #8]
 800dc26:	785b      	ldrb	r3, [r3, #1]
 800dc28:	2b01      	cmp	r3, #1
 800dc2a:	f040 8163 	bne.w	800def4 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800dc2e:	68bb      	ldr	r3, [r7, #8]
 800dc30:	695b      	ldr	r3, [r3, #20]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d132      	bne.n	800dc9c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800dc36:	69bb      	ldr	r3, [r7, #24]
 800dc38:	015a      	lsls	r2, r3, #5
 800dc3a:	69fb      	ldr	r3, [r7, #28]
 800dc3c:	4413      	add	r3, r2
 800dc3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc42:	691a      	ldr	r2, [r3, #16]
 800dc44:	69bb      	ldr	r3, [r7, #24]
 800dc46:	0159      	lsls	r1, r3, #5
 800dc48:	69fb      	ldr	r3, [r7, #28]
 800dc4a:	440b      	add	r3, r1
 800dc4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc50:	4619      	mov	r1, r3
 800dc52:	4ba5      	ldr	r3, [pc, #660]	; (800dee8 <USB_EPStartXfer+0x2dc>)
 800dc54:	4013      	ands	r3, r2
 800dc56:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800dc58:	69bb      	ldr	r3, [r7, #24]
 800dc5a:	015a      	lsls	r2, r3, #5
 800dc5c:	69fb      	ldr	r3, [r7, #28]
 800dc5e:	4413      	add	r3, r2
 800dc60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc64:	691b      	ldr	r3, [r3, #16]
 800dc66:	69ba      	ldr	r2, [r7, #24]
 800dc68:	0151      	lsls	r1, r2, #5
 800dc6a:	69fa      	ldr	r2, [r7, #28]
 800dc6c:	440a      	add	r2, r1
 800dc6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dc72:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dc76:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800dc78:	69bb      	ldr	r3, [r7, #24]
 800dc7a:	015a      	lsls	r2, r3, #5
 800dc7c:	69fb      	ldr	r3, [r7, #28]
 800dc7e:	4413      	add	r3, r2
 800dc80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc84:	691a      	ldr	r2, [r3, #16]
 800dc86:	69bb      	ldr	r3, [r7, #24]
 800dc88:	0159      	lsls	r1, r3, #5
 800dc8a:	69fb      	ldr	r3, [r7, #28]
 800dc8c:	440b      	add	r3, r1
 800dc8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc92:	4619      	mov	r1, r3
 800dc94:	4b95      	ldr	r3, [pc, #596]	; (800deec <USB_EPStartXfer+0x2e0>)
 800dc96:	4013      	ands	r3, r2
 800dc98:	610b      	str	r3, [r1, #16]
 800dc9a:	e074      	b.n	800dd86 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800dc9c:	69bb      	ldr	r3, [r7, #24]
 800dc9e:	015a      	lsls	r2, r3, #5
 800dca0:	69fb      	ldr	r3, [r7, #28]
 800dca2:	4413      	add	r3, r2
 800dca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dca8:	691a      	ldr	r2, [r3, #16]
 800dcaa:	69bb      	ldr	r3, [r7, #24]
 800dcac:	0159      	lsls	r1, r3, #5
 800dcae:	69fb      	ldr	r3, [r7, #28]
 800dcb0:	440b      	add	r3, r1
 800dcb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dcb6:	4619      	mov	r1, r3
 800dcb8:	4b8c      	ldr	r3, [pc, #560]	; (800deec <USB_EPStartXfer+0x2e0>)
 800dcba:	4013      	ands	r3, r2
 800dcbc:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800dcbe:	69bb      	ldr	r3, [r7, #24]
 800dcc0:	015a      	lsls	r2, r3, #5
 800dcc2:	69fb      	ldr	r3, [r7, #28]
 800dcc4:	4413      	add	r3, r2
 800dcc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dcca:	691a      	ldr	r2, [r3, #16]
 800dccc:	69bb      	ldr	r3, [r7, #24]
 800dcce:	0159      	lsls	r1, r3, #5
 800dcd0:	69fb      	ldr	r3, [r7, #28]
 800dcd2:	440b      	add	r3, r1
 800dcd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dcd8:	4619      	mov	r1, r3
 800dcda:	4b83      	ldr	r3, [pc, #524]	; (800dee8 <USB_EPStartXfer+0x2dc>)
 800dcdc:	4013      	ands	r3, r2
 800dcde:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800dce0:	69bb      	ldr	r3, [r7, #24]
 800dce2:	015a      	lsls	r2, r3, #5
 800dce4:	69fb      	ldr	r3, [r7, #28]
 800dce6:	4413      	add	r3, r2
 800dce8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dcec:	691a      	ldr	r2, [r3, #16]
 800dcee:	68bb      	ldr	r3, [r7, #8]
 800dcf0:	6959      	ldr	r1, [r3, #20]
 800dcf2:	68bb      	ldr	r3, [r7, #8]
 800dcf4:	689b      	ldr	r3, [r3, #8]
 800dcf6:	440b      	add	r3, r1
 800dcf8:	1e59      	subs	r1, r3, #1
 800dcfa:	68bb      	ldr	r3, [r7, #8]
 800dcfc:	689b      	ldr	r3, [r3, #8]
 800dcfe:	fbb1 f3f3 	udiv	r3, r1, r3
 800dd02:	04d9      	lsls	r1, r3, #19
 800dd04:	4b7a      	ldr	r3, [pc, #488]	; (800def0 <USB_EPStartXfer+0x2e4>)
 800dd06:	400b      	ands	r3, r1
 800dd08:	69b9      	ldr	r1, [r7, #24]
 800dd0a:	0148      	lsls	r0, r1, #5
 800dd0c:	69f9      	ldr	r1, [r7, #28]
 800dd0e:	4401      	add	r1, r0
 800dd10:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800dd14:	4313      	orrs	r3, r2
 800dd16:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800dd18:	69bb      	ldr	r3, [r7, #24]
 800dd1a:	015a      	lsls	r2, r3, #5
 800dd1c:	69fb      	ldr	r3, [r7, #28]
 800dd1e:	4413      	add	r3, r2
 800dd20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd24:	691a      	ldr	r2, [r3, #16]
 800dd26:	68bb      	ldr	r3, [r7, #8]
 800dd28:	695b      	ldr	r3, [r3, #20]
 800dd2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800dd2e:	69b9      	ldr	r1, [r7, #24]
 800dd30:	0148      	lsls	r0, r1, #5
 800dd32:	69f9      	ldr	r1, [r7, #28]
 800dd34:	4401      	add	r1, r0
 800dd36:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800dd3a:	4313      	orrs	r3, r2
 800dd3c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800dd3e:	68bb      	ldr	r3, [r7, #8]
 800dd40:	78db      	ldrb	r3, [r3, #3]
 800dd42:	2b01      	cmp	r3, #1
 800dd44:	d11f      	bne.n	800dd86 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800dd46:	69bb      	ldr	r3, [r7, #24]
 800dd48:	015a      	lsls	r2, r3, #5
 800dd4a:	69fb      	ldr	r3, [r7, #28]
 800dd4c:	4413      	add	r3, r2
 800dd4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd52:	691b      	ldr	r3, [r3, #16]
 800dd54:	69ba      	ldr	r2, [r7, #24]
 800dd56:	0151      	lsls	r1, r2, #5
 800dd58:	69fa      	ldr	r2, [r7, #28]
 800dd5a:	440a      	add	r2, r1
 800dd5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dd60:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800dd64:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800dd66:	69bb      	ldr	r3, [r7, #24]
 800dd68:	015a      	lsls	r2, r3, #5
 800dd6a:	69fb      	ldr	r3, [r7, #28]
 800dd6c:	4413      	add	r3, r2
 800dd6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd72:	691b      	ldr	r3, [r3, #16]
 800dd74:	69ba      	ldr	r2, [r7, #24]
 800dd76:	0151      	lsls	r1, r2, #5
 800dd78:	69fa      	ldr	r2, [r7, #28]
 800dd7a:	440a      	add	r2, r1
 800dd7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dd80:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800dd84:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800dd86:	79fb      	ldrb	r3, [r7, #7]
 800dd88:	2b01      	cmp	r3, #1
 800dd8a:	d14b      	bne.n	800de24 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800dd8c:	68bb      	ldr	r3, [r7, #8]
 800dd8e:	691b      	ldr	r3, [r3, #16]
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d009      	beq.n	800dda8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800dd94:	69bb      	ldr	r3, [r7, #24]
 800dd96:	015a      	lsls	r2, r3, #5
 800dd98:	69fb      	ldr	r3, [r7, #28]
 800dd9a:	4413      	add	r3, r2
 800dd9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dda0:	461a      	mov	r2, r3
 800dda2:	68bb      	ldr	r3, [r7, #8]
 800dda4:	691b      	ldr	r3, [r3, #16]
 800dda6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800dda8:	68bb      	ldr	r3, [r7, #8]
 800ddaa:	78db      	ldrb	r3, [r3, #3]
 800ddac:	2b01      	cmp	r3, #1
 800ddae:	d128      	bne.n	800de02 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ddb0:	69fb      	ldr	r3, [r7, #28]
 800ddb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ddb6:	689b      	ldr	r3, [r3, #8]
 800ddb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d110      	bne.n	800dde2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ddc0:	69bb      	ldr	r3, [r7, #24]
 800ddc2:	015a      	lsls	r2, r3, #5
 800ddc4:	69fb      	ldr	r3, [r7, #28]
 800ddc6:	4413      	add	r3, r2
 800ddc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	69ba      	ldr	r2, [r7, #24]
 800ddd0:	0151      	lsls	r1, r2, #5
 800ddd2:	69fa      	ldr	r2, [r7, #28]
 800ddd4:	440a      	add	r2, r1
 800ddd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ddda:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ddde:	6013      	str	r3, [r2, #0]
 800dde0:	e00f      	b.n	800de02 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800dde2:	69bb      	ldr	r3, [r7, #24]
 800dde4:	015a      	lsls	r2, r3, #5
 800dde6:	69fb      	ldr	r3, [r7, #28]
 800dde8:	4413      	add	r3, r2
 800ddea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	69ba      	ldr	r2, [r7, #24]
 800ddf2:	0151      	lsls	r1, r2, #5
 800ddf4:	69fa      	ldr	r2, [r7, #28]
 800ddf6:	440a      	add	r2, r1
 800ddf8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ddfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800de00:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800de02:	69bb      	ldr	r3, [r7, #24]
 800de04:	015a      	lsls	r2, r3, #5
 800de06:	69fb      	ldr	r3, [r7, #28]
 800de08:	4413      	add	r3, r2
 800de0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	69ba      	ldr	r2, [r7, #24]
 800de12:	0151      	lsls	r1, r2, #5
 800de14:	69fa      	ldr	r2, [r7, #28]
 800de16:	440a      	add	r2, r1
 800de18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800de1c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800de20:	6013      	str	r3, [r2, #0]
 800de22:	e133      	b.n	800e08c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800de24:	69bb      	ldr	r3, [r7, #24]
 800de26:	015a      	lsls	r2, r3, #5
 800de28:	69fb      	ldr	r3, [r7, #28]
 800de2a:	4413      	add	r3, r2
 800de2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	69ba      	ldr	r2, [r7, #24]
 800de34:	0151      	lsls	r1, r2, #5
 800de36:	69fa      	ldr	r2, [r7, #28]
 800de38:	440a      	add	r2, r1
 800de3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800de3e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800de42:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800de44:	68bb      	ldr	r3, [r7, #8]
 800de46:	78db      	ldrb	r3, [r3, #3]
 800de48:	2b01      	cmp	r3, #1
 800de4a:	d015      	beq.n	800de78 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800de4c:	68bb      	ldr	r3, [r7, #8]
 800de4e:	695b      	ldr	r3, [r3, #20]
 800de50:	2b00      	cmp	r3, #0
 800de52:	f000 811b 	beq.w	800e08c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800de56:	69fb      	ldr	r3, [r7, #28]
 800de58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800de5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800de5e:	68bb      	ldr	r3, [r7, #8]
 800de60:	781b      	ldrb	r3, [r3, #0]
 800de62:	f003 030f 	and.w	r3, r3, #15
 800de66:	2101      	movs	r1, #1
 800de68:	fa01 f303 	lsl.w	r3, r1, r3
 800de6c:	69f9      	ldr	r1, [r7, #28]
 800de6e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800de72:	4313      	orrs	r3, r2
 800de74:	634b      	str	r3, [r1, #52]	; 0x34
 800de76:	e109      	b.n	800e08c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800de78:	69fb      	ldr	r3, [r7, #28]
 800de7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800de7e:	689b      	ldr	r3, [r3, #8]
 800de80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800de84:	2b00      	cmp	r3, #0
 800de86:	d110      	bne.n	800deaa <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800de88:	69bb      	ldr	r3, [r7, #24]
 800de8a:	015a      	lsls	r2, r3, #5
 800de8c:	69fb      	ldr	r3, [r7, #28]
 800de8e:	4413      	add	r3, r2
 800de90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	69ba      	ldr	r2, [r7, #24]
 800de98:	0151      	lsls	r1, r2, #5
 800de9a:	69fa      	ldr	r2, [r7, #28]
 800de9c:	440a      	add	r2, r1
 800de9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dea2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800dea6:	6013      	str	r3, [r2, #0]
 800dea8:	e00f      	b.n	800deca <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800deaa:	69bb      	ldr	r3, [r7, #24]
 800deac:	015a      	lsls	r2, r3, #5
 800deae:	69fb      	ldr	r3, [r7, #28]
 800deb0:	4413      	add	r3, r2
 800deb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	69ba      	ldr	r2, [r7, #24]
 800deba:	0151      	lsls	r1, r2, #5
 800debc:	69fa      	ldr	r2, [r7, #28]
 800debe:	440a      	add	r2, r1
 800dec0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dec8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800deca:	68bb      	ldr	r3, [r7, #8]
 800decc:	68d9      	ldr	r1, [r3, #12]
 800dece:	68bb      	ldr	r3, [r7, #8]
 800ded0:	781a      	ldrb	r2, [r3, #0]
 800ded2:	68bb      	ldr	r3, [r7, #8]
 800ded4:	695b      	ldr	r3, [r3, #20]
 800ded6:	b298      	uxth	r0, r3
 800ded8:	79fb      	ldrb	r3, [r7, #7]
 800deda:	9300      	str	r3, [sp, #0]
 800dedc:	4603      	mov	r3, r0
 800dede:	68f8      	ldr	r0, [r7, #12]
 800dee0:	f000 fa38 	bl	800e354 <USB_WritePacket>
 800dee4:	e0d2      	b.n	800e08c <USB_EPStartXfer+0x480>
 800dee6:	bf00      	nop
 800dee8:	e007ffff 	.word	0xe007ffff
 800deec:	fff80000 	.word	0xfff80000
 800def0:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800def4:	69bb      	ldr	r3, [r7, #24]
 800def6:	015a      	lsls	r2, r3, #5
 800def8:	69fb      	ldr	r3, [r7, #28]
 800defa:	4413      	add	r3, r2
 800defc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df00:	691a      	ldr	r2, [r3, #16]
 800df02:	69bb      	ldr	r3, [r7, #24]
 800df04:	0159      	lsls	r1, r3, #5
 800df06:	69fb      	ldr	r3, [r7, #28]
 800df08:	440b      	add	r3, r1
 800df0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df0e:	4619      	mov	r1, r3
 800df10:	4b61      	ldr	r3, [pc, #388]	; (800e098 <USB_EPStartXfer+0x48c>)
 800df12:	4013      	ands	r3, r2
 800df14:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800df16:	69bb      	ldr	r3, [r7, #24]
 800df18:	015a      	lsls	r2, r3, #5
 800df1a:	69fb      	ldr	r3, [r7, #28]
 800df1c:	4413      	add	r3, r2
 800df1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df22:	691a      	ldr	r2, [r3, #16]
 800df24:	69bb      	ldr	r3, [r7, #24]
 800df26:	0159      	lsls	r1, r3, #5
 800df28:	69fb      	ldr	r3, [r7, #28]
 800df2a:	440b      	add	r3, r1
 800df2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df30:	4619      	mov	r1, r3
 800df32:	4b5a      	ldr	r3, [pc, #360]	; (800e09c <USB_EPStartXfer+0x490>)
 800df34:	4013      	ands	r3, r2
 800df36:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800df38:	68bb      	ldr	r3, [r7, #8]
 800df3a:	695b      	ldr	r3, [r3, #20]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d123      	bne.n	800df88 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800df40:	69bb      	ldr	r3, [r7, #24]
 800df42:	015a      	lsls	r2, r3, #5
 800df44:	69fb      	ldr	r3, [r7, #28]
 800df46:	4413      	add	r3, r2
 800df48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df4c:	691a      	ldr	r2, [r3, #16]
 800df4e:	68bb      	ldr	r3, [r7, #8]
 800df50:	689b      	ldr	r3, [r3, #8]
 800df52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800df56:	69b9      	ldr	r1, [r7, #24]
 800df58:	0148      	lsls	r0, r1, #5
 800df5a:	69f9      	ldr	r1, [r7, #28]
 800df5c:	4401      	add	r1, r0
 800df5e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800df62:	4313      	orrs	r3, r2
 800df64:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800df66:	69bb      	ldr	r3, [r7, #24]
 800df68:	015a      	lsls	r2, r3, #5
 800df6a:	69fb      	ldr	r3, [r7, #28]
 800df6c:	4413      	add	r3, r2
 800df6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df72:	691b      	ldr	r3, [r3, #16]
 800df74:	69ba      	ldr	r2, [r7, #24]
 800df76:	0151      	lsls	r1, r2, #5
 800df78:	69fa      	ldr	r2, [r7, #28]
 800df7a:	440a      	add	r2, r1
 800df7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800df80:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800df84:	6113      	str	r3, [r2, #16]
 800df86:	e033      	b.n	800dff0 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800df88:	68bb      	ldr	r3, [r7, #8]
 800df8a:	695a      	ldr	r2, [r3, #20]
 800df8c:	68bb      	ldr	r3, [r7, #8]
 800df8e:	689b      	ldr	r3, [r3, #8]
 800df90:	4413      	add	r3, r2
 800df92:	1e5a      	subs	r2, r3, #1
 800df94:	68bb      	ldr	r3, [r7, #8]
 800df96:	689b      	ldr	r3, [r3, #8]
 800df98:	fbb2 f3f3 	udiv	r3, r2, r3
 800df9c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800df9e:	69bb      	ldr	r3, [r7, #24]
 800dfa0:	015a      	lsls	r2, r3, #5
 800dfa2:	69fb      	ldr	r3, [r7, #28]
 800dfa4:	4413      	add	r3, r2
 800dfa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dfaa:	691a      	ldr	r2, [r3, #16]
 800dfac:	8afb      	ldrh	r3, [r7, #22]
 800dfae:	04d9      	lsls	r1, r3, #19
 800dfb0:	4b3b      	ldr	r3, [pc, #236]	; (800e0a0 <USB_EPStartXfer+0x494>)
 800dfb2:	400b      	ands	r3, r1
 800dfb4:	69b9      	ldr	r1, [r7, #24]
 800dfb6:	0148      	lsls	r0, r1, #5
 800dfb8:	69f9      	ldr	r1, [r7, #28]
 800dfba:	4401      	add	r1, r0
 800dfbc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800dfc0:	4313      	orrs	r3, r2
 800dfc2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800dfc4:	69bb      	ldr	r3, [r7, #24]
 800dfc6:	015a      	lsls	r2, r3, #5
 800dfc8:	69fb      	ldr	r3, [r7, #28]
 800dfca:	4413      	add	r3, r2
 800dfcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dfd0:	691a      	ldr	r2, [r3, #16]
 800dfd2:	68bb      	ldr	r3, [r7, #8]
 800dfd4:	689b      	ldr	r3, [r3, #8]
 800dfd6:	8af9      	ldrh	r1, [r7, #22]
 800dfd8:	fb01 f303 	mul.w	r3, r1, r3
 800dfdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800dfe0:	69b9      	ldr	r1, [r7, #24]
 800dfe2:	0148      	lsls	r0, r1, #5
 800dfe4:	69f9      	ldr	r1, [r7, #28]
 800dfe6:	4401      	add	r1, r0
 800dfe8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800dfec:	4313      	orrs	r3, r2
 800dfee:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800dff0:	79fb      	ldrb	r3, [r7, #7]
 800dff2:	2b01      	cmp	r3, #1
 800dff4:	d10d      	bne.n	800e012 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800dff6:	68bb      	ldr	r3, [r7, #8]
 800dff8:	68db      	ldr	r3, [r3, #12]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d009      	beq.n	800e012 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800dffe:	68bb      	ldr	r3, [r7, #8]
 800e000:	68d9      	ldr	r1, [r3, #12]
 800e002:	69bb      	ldr	r3, [r7, #24]
 800e004:	015a      	lsls	r2, r3, #5
 800e006:	69fb      	ldr	r3, [r7, #28]
 800e008:	4413      	add	r3, r2
 800e00a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e00e:	460a      	mov	r2, r1
 800e010:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800e012:	68bb      	ldr	r3, [r7, #8]
 800e014:	78db      	ldrb	r3, [r3, #3]
 800e016:	2b01      	cmp	r3, #1
 800e018:	d128      	bne.n	800e06c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e01a:	69fb      	ldr	r3, [r7, #28]
 800e01c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e020:	689b      	ldr	r3, [r3, #8]
 800e022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e026:	2b00      	cmp	r3, #0
 800e028:	d110      	bne.n	800e04c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800e02a:	69bb      	ldr	r3, [r7, #24]
 800e02c:	015a      	lsls	r2, r3, #5
 800e02e:	69fb      	ldr	r3, [r7, #28]
 800e030:	4413      	add	r3, r2
 800e032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	69ba      	ldr	r2, [r7, #24]
 800e03a:	0151      	lsls	r1, r2, #5
 800e03c:	69fa      	ldr	r2, [r7, #28]
 800e03e:	440a      	add	r2, r1
 800e040:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e044:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e048:	6013      	str	r3, [r2, #0]
 800e04a:	e00f      	b.n	800e06c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800e04c:	69bb      	ldr	r3, [r7, #24]
 800e04e:	015a      	lsls	r2, r3, #5
 800e050:	69fb      	ldr	r3, [r7, #28]
 800e052:	4413      	add	r3, r2
 800e054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	69ba      	ldr	r2, [r7, #24]
 800e05c:	0151      	lsls	r1, r2, #5
 800e05e:	69fa      	ldr	r2, [r7, #28]
 800e060:	440a      	add	r2, r1
 800e062:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e066:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e06a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e06c:	69bb      	ldr	r3, [r7, #24]
 800e06e:	015a      	lsls	r2, r3, #5
 800e070:	69fb      	ldr	r3, [r7, #28]
 800e072:	4413      	add	r3, r2
 800e074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	69ba      	ldr	r2, [r7, #24]
 800e07c:	0151      	lsls	r1, r2, #5
 800e07e:	69fa      	ldr	r2, [r7, #28]
 800e080:	440a      	add	r2, r1
 800e082:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e086:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e08a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e08c:	2300      	movs	r3, #0
}
 800e08e:	4618      	mov	r0, r3
 800e090:	3720      	adds	r7, #32
 800e092:	46bd      	mov	sp, r7
 800e094:	bd80      	pop	{r7, pc}
 800e096:	bf00      	nop
 800e098:	fff80000 	.word	0xfff80000
 800e09c:	e007ffff 	.word	0xe007ffff
 800e0a0:	1ff80000 	.word	0x1ff80000

0800e0a4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800e0a4:	b480      	push	{r7}
 800e0a6:	b087      	sub	sp, #28
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	60f8      	str	r0, [r7, #12]
 800e0ac:	60b9      	str	r1, [r7, #8]
 800e0ae:	4613      	mov	r3, r2
 800e0b0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800e0b6:	68bb      	ldr	r3, [r7, #8]
 800e0b8:	781b      	ldrb	r3, [r3, #0]
 800e0ba:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e0bc:	68bb      	ldr	r3, [r7, #8]
 800e0be:	785b      	ldrb	r3, [r3, #1]
 800e0c0:	2b01      	cmp	r3, #1
 800e0c2:	f040 80cd 	bne.w	800e260 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e0c6:	68bb      	ldr	r3, [r7, #8]
 800e0c8:	695b      	ldr	r3, [r3, #20]
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d132      	bne.n	800e134 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e0ce:	693b      	ldr	r3, [r7, #16]
 800e0d0:	015a      	lsls	r2, r3, #5
 800e0d2:	697b      	ldr	r3, [r7, #20]
 800e0d4:	4413      	add	r3, r2
 800e0d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e0da:	691a      	ldr	r2, [r3, #16]
 800e0dc:	693b      	ldr	r3, [r7, #16]
 800e0de:	0159      	lsls	r1, r3, #5
 800e0e0:	697b      	ldr	r3, [r7, #20]
 800e0e2:	440b      	add	r3, r1
 800e0e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e0e8:	4619      	mov	r1, r3
 800e0ea:	4b98      	ldr	r3, [pc, #608]	; (800e34c <USB_EP0StartXfer+0x2a8>)
 800e0ec:	4013      	ands	r3, r2
 800e0ee:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e0f0:	693b      	ldr	r3, [r7, #16]
 800e0f2:	015a      	lsls	r2, r3, #5
 800e0f4:	697b      	ldr	r3, [r7, #20]
 800e0f6:	4413      	add	r3, r2
 800e0f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e0fc:	691b      	ldr	r3, [r3, #16]
 800e0fe:	693a      	ldr	r2, [r7, #16]
 800e100:	0151      	lsls	r1, r2, #5
 800e102:	697a      	ldr	r2, [r7, #20]
 800e104:	440a      	add	r2, r1
 800e106:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e10a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e10e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e110:	693b      	ldr	r3, [r7, #16]
 800e112:	015a      	lsls	r2, r3, #5
 800e114:	697b      	ldr	r3, [r7, #20]
 800e116:	4413      	add	r3, r2
 800e118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e11c:	691a      	ldr	r2, [r3, #16]
 800e11e:	693b      	ldr	r3, [r7, #16]
 800e120:	0159      	lsls	r1, r3, #5
 800e122:	697b      	ldr	r3, [r7, #20]
 800e124:	440b      	add	r3, r1
 800e126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e12a:	4619      	mov	r1, r3
 800e12c:	4b88      	ldr	r3, [pc, #544]	; (800e350 <USB_EP0StartXfer+0x2ac>)
 800e12e:	4013      	ands	r3, r2
 800e130:	610b      	str	r3, [r1, #16]
 800e132:	e04e      	b.n	800e1d2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e134:	693b      	ldr	r3, [r7, #16]
 800e136:	015a      	lsls	r2, r3, #5
 800e138:	697b      	ldr	r3, [r7, #20]
 800e13a:	4413      	add	r3, r2
 800e13c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e140:	691a      	ldr	r2, [r3, #16]
 800e142:	693b      	ldr	r3, [r7, #16]
 800e144:	0159      	lsls	r1, r3, #5
 800e146:	697b      	ldr	r3, [r7, #20]
 800e148:	440b      	add	r3, r1
 800e14a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e14e:	4619      	mov	r1, r3
 800e150:	4b7f      	ldr	r3, [pc, #508]	; (800e350 <USB_EP0StartXfer+0x2ac>)
 800e152:	4013      	ands	r3, r2
 800e154:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e156:	693b      	ldr	r3, [r7, #16]
 800e158:	015a      	lsls	r2, r3, #5
 800e15a:	697b      	ldr	r3, [r7, #20]
 800e15c:	4413      	add	r3, r2
 800e15e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e162:	691a      	ldr	r2, [r3, #16]
 800e164:	693b      	ldr	r3, [r7, #16]
 800e166:	0159      	lsls	r1, r3, #5
 800e168:	697b      	ldr	r3, [r7, #20]
 800e16a:	440b      	add	r3, r1
 800e16c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e170:	4619      	mov	r1, r3
 800e172:	4b76      	ldr	r3, [pc, #472]	; (800e34c <USB_EP0StartXfer+0x2a8>)
 800e174:	4013      	ands	r3, r2
 800e176:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800e178:	68bb      	ldr	r3, [r7, #8]
 800e17a:	695a      	ldr	r2, [r3, #20]
 800e17c:	68bb      	ldr	r3, [r7, #8]
 800e17e:	689b      	ldr	r3, [r3, #8]
 800e180:	429a      	cmp	r2, r3
 800e182:	d903      	bls.n	800e18c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800e184:	68bb      	ldr	r3, [r7, #8]
 800e186:	689a      	ldr	r2, [r3, #8]
 800e188:	68bb      	ldr	r3, [r7, #8]
 800e18a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e18c:	693b      	ldr	r3, [r7, #16]
 800e18e:	015a      	lsls	r2, r3, #5
 800e190:	697b      	ldr	r3, [r7, #20]
 800e192:	4413      	add	r3, r2
 800e194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e198:	691b      	ldr	r3, [r3, #16]
 800e19a:	693a      	ldr	r2, [r7, #16]
 800e19c:	0151      	lsls	r1, r2, #5
 800e19e:	697a      	ldr	r2, [r7, #20]
 800e1a0:	440a      	add	r2, r1
 800e1a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e1a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e1aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e1ac:	693b      	ldr	r3, [r7, #16]
 800e1ae:	015a      	lsls	r2, r3, #5
 800e1b0:	697b      	ldr	r3, [r7, #20]
 800e1b2:	4413      	add	r3, r2
 800e1b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e1b8:	691a      	ldr	r2, [r3, #16]
 800e1ba:	68bb      	ldr	r3, [r7, #8]
 800e1bc:	695b      	ldr	r3, [r3, #20]
 800e1be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e1c2:	6939      	ldr	r1, [r7, #16]
 800e1c4:	0148      	lsls	r0, r1, #5
 800e1c6:	6979      	ldr	r1, [r7, #20]
 800e1c8:	4401      	add	r1, r0
 800e1ca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e1ce:	4313      	orrs	r3, r2
 800e1d0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800e1d2:	79fb      	ldrb	r3, [r7, #7]
 800e1d4:	2b01      	cmp	r3, #1
 800e1d6:	d11e      	bne.n	800e216 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e1d8:	68bb      	ldr	r3, [r7, #8]
 800e1da:	691b      	ldr	r3, [r3, #16]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d009      	beq.n	800e1f4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e1e0:	693b      	ldr	r3, [r7, #16]
 800e1e2:	015a      	lsls	r2, r3, #5
 800e1e4:	697b      	ldr	r3, [r7, #20]
 800e1e6:	4413      	add	r3, r2
 800e1e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e1ec:	461a      	mov	r2, r3
 800e1ee:	68bb      	ldr	r3, [r7, #8]
 800e1f0:	691b      	ldr	r3, [r3, #16]
 800e1f2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e1f4:	693b      	ldr	r3, [r7, #16]
 800e1f6:	015a      	lsls	r2, r3, #5
 800e1f8:	697b      	ldr	r3, [r7, #20]
 800e1fa:	4413      	add	r3, r2
 800e1fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	693a      	ldr	r2, [r7, #16]
 800e204:	0151      	lsls	r1, r2, #5
 800e206:	697a      	ldr	r2, [r7, #20]
 800e208:	440a      	add	r2, r1
 800e20a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e20e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e212:	6013      	str	r3, [r2, #0]
 800e214:	e092      	b.n	800e33c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e216:	693b      	ldr	r3, [r7, #16]
 800e218:	015a      	lsls	r2, r3, #5
 800e21a:	697b      	ldr	r3, [r7, #20]
 800e21c:	4413      	add	r3, r2
 800e21e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	693a      	ldr	r2, [r7, #16]
 800e226:	0151      	lsls	r1, r2, #5
 800e228:	697a      	ldr	r2, [r7, #20]
 800e22a:	440a      	add	r2, r1
 800e22c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e230:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e234:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800e236:	68bb      	ldr	r3, [r7, #8]
 800e238:	695b      	ldr	r3, [r3, #20]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d07e      	beq.n	800e33c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e23e:	697b      	ldr	r3, [r7, #20]
 800e240:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e244:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e246:	68bb      	ldr	r3, [r7, #8]
 800e248:	781b      	ldrb	r3, [r3, #0]
 800e24a:	f003 030f 	and.w	r3, r3, #15
 800e24e:	2101      	movs	r1, #1
 800e250:	fa01 f303 	lsl.w	r3, r1, r3
 800e254:	6979      	ldr	r1, [r7, #20]
 800e256:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e25a:	4313      	orrs	r3, r2
 800e25c:	634b      	str	r3, [r1, #52]	; 0x34
 800e25e:	e06d      	b.n	800e33c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e260:	693b      	ldr	r3, [r7, #16]
 800e262:	015a      	lsls	r2, r3, #5
 800e264:	697b      	ldr	r3, [r7, #20]
 800e266:	4413      	add	r3, r2
 800e268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e26c:	691a      	ldr	r2, [r3, #16]
 800e26e:	693b      	ldr	r3, [r7, #16]
 800e270:	0159      	lsls	r1, r3, #5
 800e272:	697b      	ldr	r3, [r7, #20]
 800e274:	440b      	add	r3, r1
 800e276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e27a:	4619      	mov	r1, r3
 800e27c:	4b34      	ldr	r3, [pc, #208]	; (800e350 <USB_EP0StartXfer+0x2ac>)
 800e27e:	4013      	ands	r3, r2
 800e280:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e282:	693b      	ldr	r3, [r7, #16]
 800e284:	015a      	lsls	r2, r3, #5
 800e286:	697b      	ldr	r3, [r7, #20]
 800e288:	4413      	add	r3, r2
 800e28a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e28e:	691a      	ldr	r2, [r3, #16]
 800e290:	693b      	ldr	r3, [r7, #16]
 800e292:	0159      	lsls	r1, r3, #5
 800e294:	697b      	ldr	r3, [r7, #20]
 800e296:	440b      	add	r3, r1
 800e298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e29c:	4619      	mov	r1, r3
 800e29e:	4b2b      	ldr	r3, [pc, #172]	; (800e34c <USB_EP0StartXfer+0x2a8>)
 800e2a0:	4013      	ands	r3, r2
 800e2a2:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800e2a4:	68bb      	ldr	r3, [r7, #8]
 800e2a6:	695b      	ldr	r3, [r3, #20]
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d003      	beq.n	800e2b4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800e2ac:	68bb      	ldr	r3, [r7, #8]
 800e2ae:	689a      	ldr	r2, [r3, #8]
 800e2b0:	68bb      	ldr	r3, [r7, #8]
 800e2b2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e2b4:	693b      	ldr	r3, [r7, #16]
 800e2b6:	015a      	lsls	r2, r3, #5
 800e2b8:	697b      	ldr	r3, [r7, #20]
 800e2ba:	4413      	add	r3, r2
 800e2bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2c0:	691b      	ldr	r3, [r3, #16]
 800e2c2:	693a      	ldr	r2, [r7, #16]
 800e2c4:	0151      	lsls	r1, r2, #5
 800e2c6:	697a      	ldr	r2, [r7, #20]
 800e2c8:	440a      	add	r2, r1
 800e2ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e2ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e2d2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800e2d4:	693b      	ldr	r3, [r7, #16]
 800e2d6:	015a      	lsls	r2, r3, #5
 800e2d8:	697b      	ldr	r3, [r7, #20]
 800e2da:	4413      	add	r3, r2
 800e2dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2e0:	691a      	ldr	r2, [r3, #16]
 800e2e2:	68bb      	ldr	r3, [r7, #8]
 800e2e4:	689b      	ldr	r3, [r3, #8]
 800e2e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e2ea:	6939      	ldr	r1, [r7, #16]
 800e2ec:	0148      	lsls	r0, r1, #5
 800e2ee:	6979      	ldr	r1, [r7, #20]
 800e2f0:	4401      	add	r1, r0
 800e2f2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e2f6:	4313      	orrs	r3, r2
 800e2f8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800e2fa:	79fb      	ldrb	r3, [r7, #7]
 800e2fc:	2b01      	cmp	r3, #1
 800e2fe:	d10d      	bne.n	800e31c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800e300:	68bb      	ldr	r3, [r7, #8]
 800e302:	68db      	ldr	r3, [r3, #12]
 800e304:	2b00      	cmp	r3, #0
 800e306:	d009      	beq.n	800e31c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e308:	68bb      	ldr	r3, [r7, #8]
 800e30a:	68d9      	ldr	r1, [r3, #12]
 800e30c:	693b      	ldr	r3, [r7, #16]
 800e30e:	015a      	lsls	r2, r3, #5
 800e310:	697b      	ldr	r3, [r7, #20]
 800e312:	4413      	add	r3, r2
 800e314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e318:	460a      	mov	r2, r1
 800e31a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e31c:	693b      	ldr	r3, [r7, #16]
 800e31e:	015a      	lsls	r2, r3, #5
 800e320:	697b      	ldr	r3, [r7, #20]
 800e322:	4413      	add	r3, r2
 800e324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	693a      	ldr	r2, [r7, #16]
 800e32c:	0151      	lsls	r1, r2, #5
 800e32e:	697a      	ldr	r2, [r7, #20]
 800e330:	440a      	add	r2, r1
 800e332:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e336:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e33a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e33c:	2300      	movs	r3, #0
}
 800e33e:	4618      	mov	r0, r3
 800e340:	371c      	adds	r7, #28
 800e342:	46bd      	mov	sp, r7
 800e344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e348:	4770      	bx	lr
 800e34a:	bf00      	nop
 800e34c:	e007ffff 	.word	0xe007ffff
 800e350:	fff80000 	.word	0xfff80000

0800e354 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800e354:	b480      	push	{r7}
 800e356:	b089      	sub	sp, #36	; 0x24
 800e358:	af00      	add	r7, sp, #0
 800e35a:	60f8      	str	r0, [r7, #12]
 800e35c:	60b9      	str	r1, [r7, #8]
 800e35e:	4611      	mov	r1, r2
 800e360:	461a      	mov	r2, r3
 800e362:	460b      	mov	r3, r1
 800e364:	71fb      	strb	r3, [r7, #7]
 800e366:	4613      	mov	r3, r2
 800e368:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800e36e:	68bb      	ldr	r3, [r7, #8]
 800e370:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800e372:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e376:	2b00      	cmp	r3, #0
 800e378:	d123      	bne.n	800e3c2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800e37a:	88bb      	ldrh	r3, [r7, #4]
 800e37c:	3303      	adds	r3, #3
 800e37e:	089b      	lsrs	r3, r3, #2
 800e380:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800e382:	2300      	movs	r3, #0
 800e384:	61bb      	str	r3, [r7, #24]
 800e386:	e018      	b.n	800e3ba <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800e388:	79fb      	ldrb	r3, [r7, #7]
 800e38a:	031a      	lsls	r2, r3, #12
 800e38c:	697b      	ldr	r3, [r7, #20]
 800e38e:	4413      	add	r3, r2
 800e390:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e394:	461a      	mov	r2, r3
 800e396:	69fb      	ldr	r3, [r7, #28]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800e39c:	69fb      	ldr	r3, [r7, #28]
 800e39e:	3301      	adds	r3, #1
 800e3a0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e3a2:	69fb      	ldr	r3, [r7, #28]
 800e3a4:	3301      	adds	r3, #1
 800e3a6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e3a8:	69fb      	ldr	r3, [r7, #28]
 800e3aa:	3301      	adds	r3, #1
 800e3ac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e3ae:	69fb      	ldr	r3, [r7, #28]
 800e3b0:	3301      	adds	r3, #1
 800e3b2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800e3b4:	69bb      	ldr	r3, [r7, #24]
 800e3b6:	3301      	adds	r3, #1
 800e3b8:	61bb      	str	r3, [r7, #24]
 800e3ba:	69ba      	ldr	r2, [r7, #24]
 800e3bc:	693b      	ldr	r3, [r7, #16]
 800e3be:	429a      	cmp	r2, r3
 800e3c0:	d3e2      	bcc.n	800e388 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800e3c2:	2300      	movs	r3, #0
}
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	3724      	adds	r7, #36	; 0x24
 800e3c8:	46bd      	mov	sp, r7
 800e3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ce:	4770      	bx	lr

0800e3d0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800e3d0:	b480      	push	{r7}
 800e3d2:	b08b      	sub	sp, #44	; 0x2c
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	60f8      	str	r0, [r7, #12]
 800e3d8:	60b9      	str	r1, [r7, #8]
 800e3da:	4613      	mov	r3, r2
 800e3dc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800e3e2:	68bb      	ldr	r3, [r7, #8]
 800e3e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800e3e6:	88fb      	ldrh	r3, [r7, #6]
 800e3e8:	089b      	lsrs	r3, r3, #2
 800e3ea:	b29b      	uxth	r3, r3
 800e3ec:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800e3ee:	88fb      	ldrh	r3, [r7, #6]
 800e3f0:	f003 0303 	and.w	r3, r3, #3
 800e3f4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800e3f6:	2300      	movs	r3, #0
 800e3f8:	623b      	str	r3, [r7, #32]
 800e3fa:	e014      	b.n	800e426 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800e3fc:	69bb      	ldr	r3, [r7, #24]
 800e3fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e402:	681a      	ldr	r2, [r3, #0]
 800e404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e406:	601a      	str	r2, [r3, #0]
    pDest++;
 800e408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e40a:	3301      	adds	r3, #1
 800e40c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e40e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e410:	3301      	adds	r3, #1
 800e412:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e416:	3301      	adds	r3, #1
 800e418:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e41c:	3301      	adds	r3, #1
 800e41e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800e420:	6a3b      	ldr	r3, [r7, #32]
 800e422:	3301      	adds	r3, #1
 800e424:	623b      	str	r3, [r7, #32]
 800e426:	6a3a      	ldr	r2, [r7, #32]
 800e428:	697b      	ldr	r3, [r7, #20]
 800e42a:	429a      	cmp	r2, r3
 800e42c:	d3e6      	bcc.n	800e3fc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800e42e:	8bfb      	ldrh	r3, [r7, #30]
 800e430:	2b00      	cmp	r3, #0
 800e432:	d01e      	beq.n	800e472 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800e434:	2300      	movs	r3, #0
 800e436:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800e438:	69bb      	ldr	r3, [r7, #24]
 800e43a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e43e:	461a      	mov	r2, r3
 800e440:	f107 0310 	add.w	r3, r7, #16
 800e444:	6812      	ldr	r2, [r2, #0]
 800e446:	601a      	str	r2, [r3, #0]
	
    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800e448:	693a      	ldr	r2, [r7, #16]
 800e44a:	6a3b      	ldr	r3, [r7, #32]
 800e44c:	b2db      	uxtb	r3, r3
 800e44e:	00db      	lsls	r3, r3, #3
 800e450:	fa22 f303 	lsr.w	r3, r2, r3
 800e454:	b2da      	uxtb	r2, r3
 800e456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e458:	701a      	strb	r2, [r3, #0]
      i++;
 800e45a:	6a3b      	ldr	r3, [r7, #32]
 800e45c:	3301      	adds	r3, #1
 800e45e:	623b      	str	r3, [r7, #32]
      pDest++;
 800e460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e462:	3301      	adds	r3, #1
 800e464:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800e466:	8bfb      	ldrh	r3, [r7, #30]
 800e468:	3b01      	subs	r3, #1
 800e46a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800e46c:	8bfb      	ldrh	r3, [r7, #30]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d1ea      	bne.n	800e448 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800e472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e474:	4618      	mov	r0, r3
 800e476:	372c      	adds	r7, #44	; 0x2c
 800e478:	46bd      	mov	sp, r7
 800e47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e47e:	4770      	bx	lr

0800e480 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e480:	b480      	push	{r7}
 800e482:	b085      	sub	sp, #20
 800e484:	af00      	add	r7, sp, #0
 800e486:	6078      	str	r0, [r7, #4]
 800e488:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e48e:	683b      	ldr	r3, [r7, #0]
 800e490:	781b      	ldrb	r3, [r3, #0]
 800e492:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e494:	683b      	ldr	r3, [r7, #0]
 800e496:	785b      	ldrb	r3, [r3, #1]
 800e498:	2b01      	cmp	r3, #1
 800e49a:	d12c      	bne.n	800e4f6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e49c:	68bb      	ldr	r3, [r7, #8]
 800e49e:	015a      	lsls	r2, r3, #5
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	4413      	add	r3, r2
 800e4a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	db12      	blt.n	800e4d4 <USB_EPSetStall+0x54>
 800e4ae:	68bb      	ldr	r3, [r7, #8]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d00f      	beq.n	800e4d4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800e4b4:	68bb      	ldr	r3, [r7, #8]
 800e4b6:	015a      	lsls	r2, r3, #5
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	4413      	add	r3, r2
 800e4bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	68ba      	ldr	r2, [r7, #8]
 800e4c4:	0151      	lsls	r1, r2, #5
 800e4c6:	68fa      	ldr	r2, [r7, #12]
 800e4c8:	440a      	add	r2, r1
 800e4ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e4ce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e4d2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800e4d4:	68bb      	ldr	r3, [r7, #8]
 800e4d6:	015a      	lsls	r2, r3, #5
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	4413      	add	r3, r2
 800e4dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	68ba      	ldr	r2, [r7, #8]
 800e4e4:	0151      	lsls	r1, r2, #5
 800e4e6:	68fa      	ldr	r2, [r7, #12]
 800e4e8:	440a      	add	r2, r1
 800e4ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e4ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e4f2:	6013      	str	r3, [r2, #0]
 800e4f4:	e02b      	b.n	800e54e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e4f6:	68bb      	ldr	r3, [r7, #8]
 800e4f8:	015a      	lsls	r2, r3, #5
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	4413      	add	r3, r2
 800e4fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	2b00      	cmp	r3, #0
 800e506:	db12      	blt.n	800e52e <USB_EPSetStall+0xae>
 800e508:	68bb      	ldr	r3, [r7, #8]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d00f      	beq.n	800e52e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800e50e:	68bb      	ldr	r3, [r7, #8]
 800e510:	015a      	lsls	r2, r3, #5
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	4413      	add	r3, r2
 800e516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	68ba      	ldr	r2, [r7, #8]
 800e51e:	0151      	lsls	r1, r2, #5
 800e520:	68fa      	ldr	r2, [r7, #12]
 800e522:	440a      	add	r2, r1
 800e524:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e528:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e52c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800e52e:	68bb      	ldr	r3, [r7, #8]
 800e530:	015a      	lsls	r2, r3, #5
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	4413      	add	r3, r2
 800e536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	68ba      	ldr	r2, [r7, #8]
 800e53e:	0151      	lsls	r1, r2, #5
 800e540:	68fa      	ldr	r2, [r7, #12]
 800e542:	440a      	add	r2, r1
 800e544:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e548:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e54c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e54e:	2300      	movs	r3, #0
}
 800e550:	4618      	mov	r0, r3
 800e552:	3714      	adds	r7, #20
 800e554:	46bd      	mov	sp, r7
 800e556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e55a:	4770      	bx	lr

0800e55c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e55c:	b480      	push	{r7}
 800e55e:	b085      	sub	sp, #20
 800e560:	af00      	add	r7, sp, #0
 800e562:	6078      	str	r0, [r7, #4]
 800e564:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e56a:	683b      	ldr	r3, [r7, #0]
 800e56c:	781b      	ldrb	r3, [r3, #0]
 800e56e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e570:	683b      	ldr	r3, [r7, #0]
 800e572:	785b      	ldrb	r3, [r3, #1]
 800e574:	2b01      	cmp	r3, #1
 800e576:	d128      	bne.n	800e5ca <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e578:	68bb      	ldr	r3, [r7, #8]
 800e57a:	015a      	lsls	r2, r3, #5
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	4413      	add	r3, r2
 800e580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	68ba      	ldr	r2, [r7, #8]
 800e588:	0151      	lsls	r1, r2, #5
 800e58a:	68fa      	ldr	r2, [r7, #12]
 800e58c:	440a      	add	r2, r1
 800e58e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e592:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e596:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e598:	683b      	ldr	r3, [r7, #0]
 800e59a:	78db      	ldrb	r3, [r3, #3]
 800e59c:	2b03      	cmp	r3, #3
 800e59e:	d003      	beq.n	800e5a8 <USB_EPClearStall+0x4c>
 800e5a0:	683b      	ldr	r3, [r7, #0]
 800e5a2:	78db      	ldrb	r3, [r3, #3]
 800e5a4:	2b02      	cmp	r3, #2
 800e5a6:	d138      	bne.n	800e61a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e5a8:	68bb      	ldr	r3, [r7, #8]
 800e5aa:	015a      	lsls	r2, r3, #5
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	4413      	add	r3, r2
 800e5b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	68ba      	ldr	r2, [r7, #8]
 800e5b8:	0151      	lsls	r1, r2, #5
 800e5ba:	68fa      	ldr	r2, [r7, #12]
 800e5bc:	440a      	add	r2, r1
 800e5be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e5c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e5c6:	6013      	str	r3, [r2, #0]
 800e5c8:	e027      	b.n	800e61a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800e5ca:	68bb      	ldr	r3, [r7, #8]
 800e5cc:	015a      	lsls	r2, r3, #5
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	4413      	add	r3, r2
 800e5d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	68ba      	ldr	r2, [r7, #8]
 800e5da:	0151      	lsls	r1, r2, #5
 800e5dc:	68fa      	ldr	r2, [r7, #12]
 800e5de:	440a      	add	r2, r1
 800e5e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e5e4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e5e8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e5ea:	683b      	ldr	r3, [r7, #0]
 800e5ec:	78db      	ldrb	r3, [r3, #3]
 800e5ee:	2b03      	cmp	r3, #3
 800e5f0:	d003      	beq.n	800e5fa <USB_EPClearStall+0x9e>
 800e5f2:	683b      	ldr	r3, [r7, #0]
 800e5f4:	78db      	ldrb	r3, [r3, #3]
 800e5f6:	2b02      	cmp	r3, #2
 800e5f8:	d10f      	bne.n	800e61a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e5fa:	68bb      	ldr	r3, [r7, #8]
 800e5fc:	015a      	lsls	r2, r3, #5
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	4413      	add	r3, r2
 800e602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	68ba      	ldr	r2, [r7, #8]
 800e60a:	0151      	lsls	r1, r2, #5
 800e60c:	68fa      	ldr	r2, [r7, #12]
 800e60e:	440a      	add	r2, r1
 800e610:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e618:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800e61a:	2300      	movs	r3, #0
}
 800e61c:	4618      	mov	r0, r3
 800e61e:	3714      	adds	r7, #20
 800e620:	46bd      	mov	sp, r7
 800e622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e626:	4770      	bx	lr

0800e628 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800e628:	b480      	push	{r7}
 800e62a:	b085      	sub	sp, #20
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	6078      	str	r0, [r7, #4]
 800e630:	460b      	mov	r3, r1
 800e632:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	68fa      	ldr	r2, [r7, #12]
 800e642:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e646:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800e64a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e652:	681a      	ldr	r2, [r3, #0]
 800e654:	78fb      	ldrb	r3, [r7, #3]
 800e656:	011b      	lsls	r3, r3, #4
 800e658:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800e65c:	68f9      	ldr	r1, [r7, #12]
 800e65e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e662:	4313      	orrs	r3, r2
 800e664:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800e666:	2300      	movs	r3, #0
}
 800e668:	4618      	mov	r0, r3
 800e66a:	3714      	adds	r7, #20
 800e66c:	46bd      	mov	sp, r7
 800e66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e672:	4770      	bx	lr

0800e674 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e674:	b480      	push	{r7}
 800e676:	b085      	sub	sp, #20
 800e678:	af00      	add	r7, sp, #0
 800e67a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	68fa      	ldr	r2, [r7, #12]
 800e68a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e68e:	f023 0303 	bic.w	r3, r3, #3
 800e692:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e69a:	685b      	ldr	r3, [r3, #4]
 800e69c:	68fa      	ldr	r2, [r7, #12]
 800e69e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e6a2:	f023 0302 	bic.w	r3, r3, #2
 800e6a6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e6a8:	2300      	movs	r3, #0
}
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	3714      	adds	r7, #20
 800e6ae:	46bd      	mov	sp, r7
 800e6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b4:	4770      	bx	lr

0800e6b6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e6b6:	b480      	push	{r7}
 800e6b8:	b085      	sub	sp, #20
 800e6ba:	af00      	add	r7, sp, #0
 800e6bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	68fa      	ldr	r2, [r7, #12]
 800e6cc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e6d0:	f023 0303 	bic.w	r3, r3, #3
 800e6d4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e6dc:	685b      	ldr	r3, [r3, #4]
 800e6de:	68fa      	ldr	r2, [r7, #12]
 800e6e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e6e4:	f043 0302 	orr.w	r3, r3, #2
 800e6e8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e6ea:	2300      	movs	r3, #0
}
 800e6ec:	4618      	mov	r0, r3
 800e6ee:	3714      	adds	r7, #20
 800e6f0:	46bd      	mov	sp, r7
 800e6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f6:	4770      	bx	lr

0800e6f8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800e6f8:	b480      	push	{r7}
 800e6fa:	b085      	sub	sp, #20
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	695b      	ldr	r3, [r3, #20]
 800e704:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	699b      	ldr	r3, [r3, #24]
 800e70a:	68fa      	ldr	r2, [r7, #12]
 800e70c:	4013      	ands	r3, r2
 800e70e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800e710:	68fb      	ldr	r3, [r7, #12]
}
 800e712:	4618      	mov	r0, r3
 800e714:	3714      	adds	r7, #20
 800e716:	46bd      	mov	sp, r7
 800e718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e71c:	4770      	bx	lr

0800e71e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e71e:	b480      	push	{r7}
 800e720:	b085      	sub	sp, #20
 800e722:	af00      	add	r7, sp, #0
 800e724:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e730:	699b      	ldr	r3, [r3, #24]
 800e732:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e73a:	69db      	ldr	r3, [r3, #28]
 800e73c:	68ba      	ldr	r2, [r7, #8]
 800e73e:	4013      	ands	r3, r2
 800e740:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800e742:	68bb      	ldr	r3, [r7, #8]
 800e744:	0c1b      	lsrs	r3, r3, #16
}
 800e746:	4618      	mov	r0, r3
 800e748:	3714      	adds	r7, #20
 800e74a:	46bd      	mov	sp, r7
 800e74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e750:	4770      	bx	lr

0800e752 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e752:	b480      	push	{r7}
 800e754:	b085      	sub	sp, #20
 800e756:	af00      	add	r7, sp, #0
 800e758:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e764:	699b      	ldr	r3, [r3, #24]
 800e766:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e76e:	69db      	ldr	r3, [r3, #28]
 800e770:	68ba      	ldr	r2, [r7, #8]
 800e772:	4013      	ands	r3, r2
 800e774:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800e776:	68bb      	ldr	r3, [r7, #8]
 800e778:	b29b      	uxth	r3, r3
}
 800e77a:	4618      	mov	r0, r3
 800e77c:	3714      	adds	r7, #20
 800e77e:	46bd      	mov	sp, r7
 800e780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e784:	4770      	bx	lr

0800e786 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e786:	b480      	push	{r7}
 800e788:	b085      	sub	sp, #20
 800e78a:	af00      	add	r7, sp, #0
 800e78c:	6078      	str	r0, [r7, #4]
 800e78e:	460b      	mov	r3, r1
 800e790:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800e796:	78fb      	ldrb	r3, [r7, #3]
 800e798:	015a      	lsls	r2, r3, #5
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	4413      	add	r3, r2
 800e79e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e7a2:	689b      	ldr	r3, [r3, #8]
 800e7a4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e7ac:	695b      	ldr	r3, [r3, #20]
 800e7ae:	68ba      	ldr	r2, [r7, #8]
 800e7b0:	4013      	ands	r3, r2
 800e7b2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e7b4:	68bb      	ldr	r3, [r7, #8]
}
 800e7b6:	4618      	mov	r0, r3
 800e7b8:	3714      	adds	r7, #20
 800e7ba:	46bd      	mov	sp, r7
 800e7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c0:	4770      	bx	lr

0800e7c2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e7c2:	b480      	push	{r7}
 800e7c4:	b087      	sub	sp, #28
 800e7c6:	af00      	add	r7, sp, #0
 800e7c8:	6078      	str	r0, [r7, #4]
 800e7ca:	460b      	mov	r3, r1
 800e7cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800e7d2:	697b      	ldr	r3, [r7, #20]
 800e7d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e7d8:	691b      	ldr	r3, [r3, #16]
 800e7da:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800e7dc:	697b      	ldr	r3, [r7, #20]
 800e7de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e7e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7e4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800e7e6:	78fb      	ldrb	r3, [r7, #3]
 800e7e8:	f003 030f 	and.w	r3, r3, #15
 800e7ec:	68fa      	ldr	r2, [r7, #12]
 800e7ee:	fa22 f303 	lsr.w	r3, r2, r3
 800e7f2:	01db      	lsls	r3, r3, #7
 800e7f4:	b2db      	uxtb	r3, r3
 800e7f6:	693a      	ldr	r2, [r7, #16]
 800e7f8:	4313      	orrs	r3, r2
 800e7fa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800e7fc:	78fb      	ldrb	r3, [r7, #3]
 800e7fe:	015a      	lsls	r2, r3, #5
 800e800:	697b      	ldr	r3, [r7, #20]
 800e802:	4413      	add	r3, r2
 800e804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e808:	689b      	ldr	r3, [r3, #8]
 800e80a:	693a      	ldr	r2, [r7, #16]
 800e80c:	4013      	ands	r3, r2
 800e80e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e810:	68bb      	ldr	r3, [r7, #8]
}
 800e812:	4618      	mov	r0, r3
 800e814:	371c      	adds	r7, #28
 800e816:	46bd      	mov	sp, r7
 800e818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e81c:	4770      	bx	lr

0800e81e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800e81e:	b480      	push	{r7}
 800e820:	b083      	sub	sp, #12
 800e822:	af00      	add	r7, sp, #0
 800e824:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	695b      	ldr	r3, [r3, #20]
 800e82a:	f003 0301 	and.w	r3, r3, #1
}
 800e82e:	4618      	mov	r0, r3
 800e830:	370c      	adds	r7, #12
 800e832:	46bd      	mov	sp, r7
 800e834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e838:	4770      	bx	lr
	...

0800e83c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800e83c:	b480      	push	{r7}
 800e83e:	b085      	sub	sp, #20
 800e840:	af00      	add	r7, sp, #0
 800e842:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e84e:	681a      	ldr	r2, [r3, #0]
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e856:	4619      	mov	r1, r3
 800e858:	4b09      	ldr	r3, [pc, #36]	; (800e880 <USB_ActivateSetup+0x44>)
 800e85a:	4013      	ands	r3, r2
 800e85c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e864:	685b      	ldr	r3, [r3, #4]
 800e866:	68fa      	ldr	r2, [r7, #12]
 800e868:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e86c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e870:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e872:	2300      	movs	r3, #0
}
 800e874:	4618      	mov	r0, r3
 800e876:	3714      	adds	r7, #20
 800e878:	46bd      	mov	sp, r7
 800e87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e87e:	4770      	bx	lr
 800e880:	fffff800 	.word	0xfffff800

0800e884 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800e884:	b480      	push	{r7}
 800e886:	b087      	sub	sp, #28
 800e888:	af00      	add	r7, sp, #0
 800e88a:	60f8      	str	r0, [r7, #12]
 800e88c:	460b      	mov	r3, r1
 800e88e:	607a      	str	r2, [r7, #4]
 800e890:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	333c      	adds	r3, #60	; 0x3c
 800e89a:	3304      	adds	r3, #4
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800e8a0:	693b      	ldr	r3, [r7, #16]
 800e8a2:	4a26      	ldr	r2, [pc, #152]	; (800e93c <USB_EP0_OutStart+0xb8>)
 800e8a4:	4293      	cmp	r3, r2
 800e8a6:	d90a      	bls.n	800e8be <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e8a8:	697b      	ldr	r3, [r7, #20]
 800e8aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e8b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e8b8:	d101      	bne.n	800e8be <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800e8ba:	2300      	movs	r3, #0
 800e8bc:	e037      	b.n	800e92e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800e8be:	697b      	ldr	r3, [r7, #20]
 800e8c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e8c4:	461a      	mov	r2, r3
 800e8c6:	2300      	movs	r3, #0
 800e8c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e8ca:	697b      	ldr	r3, [r7, #20]
 800e8cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e8d0:	691b      	ldr	r3, [r3, #16]
 800e8d2:	697a      	ldr	r2, [r7, #20]
 800e8d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e8d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e8dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800e8de:	697b      	ldr	r3, [r7, #20]
 800e8e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e8e4:	691b      	ldr	r3, [r3, #16]
 800e8e6:	697a      	ldr	r2, [r7, #20]
 800e8e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e8ec:	f043 0318 	orr.w	r3, r3, #24
 800e8f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800e8f2:	697b      	ldr	r3, [r7, #20]
 800e8f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e8f8:	691b      	ldr	r3, [r3, #16]
 800e8fa:	697a      	ldr	r2, [r7, #20]
 800e8fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e900:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800e904:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800e906:	7afb      	ldrb	r3, [r7, #11]
 800e908:	2b01      	cmp	r3, #1
 800e90a:	d10f      	bne.n	800e92c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800e90c:	697b      	ldr	r3, [r7, #20]
 800e90e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e912:	461a      	mov	r2, r3
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800e918:	697b      	ldr	r3, [r7, #20]
 800e91a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	697a      	ldr	r2, [r7, #20]
 800e922:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e926:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800e92a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e92c:	2300      	movs	r3, #0
}
 800e92e:	4618      	mov	r0, r3
 800e930:	371c      	adds	r7, #28
 800e932:	46bd      	mov	sp, r7
 800e934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e938:	4770      	bx	lr
 800e93a:	bf00      	nop
 800e93c:	4f54300a 	.word	0x4f54300a

0800e940 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e940:	b480      	push	{r7}
 800e942:	b085      	sub	sp, #20
 800e944:	af00      	add	r7, sp, #0
 800e946:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800e948:	2300      	movs	r3, #0
 800e94a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	3301      	adds	r3, #1
 800e950:	60fb      	str	r3, [r7, #12]
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	4a13      	ldr	r2, [pc, #76]	; (800e9a4 <USB_CoreReset+0x64>)
 800e956:	4293      	cmp	r3, r2
 800e958:	d901      	bls.n	800e95e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800e95a:	2303      	movs	r3, #3
 800e95c:	e01b      	b.n	800e996 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	691b      	ldr	r3, [r3, #16]
 800e962:	2b00      	cmp	r3, #0
 800e964:	daf2      	bge.n	800e94c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800e966:	2300      	movs	r3, #0
 800e968:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	691b      	ldr	r3, [r3, #16]
 800e96e:	f043 0201 	orr.w	r2, r3, #1
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	3301      	adds	r3, #1
 800e97a:	60fb      	str	r3, [r7, #12]
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	4a09      	ldr	r2, [pc, #36]	; (800e9a4 <USB_CoreReset+0x64>)
 800e980:	4293      	cmp	r3, r2
 800e982:	d901      	bls.n	800e988 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800e984:	2303      	movs	r3, #3
 800e986:	e006      	b.n	800e996 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	691b      	ldr	r3, [r3, #16]
 800e98c:	f003 0301 	and.w	r3, r3, #1
 800e990:	2b01      	cmp	r3, #1
 800e992:	d0f0      	beq.n	800e976 <USB_CoreReset+0x36>

  return HAL_OK;
 800e994:	2300      	movs	r3, #0
}
 800e996:	4618      	mov	r0, r3
 800e998:	3714      	adds	r7, #20
 800e99a:	46bd      	mov	sp, r7
 800e99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a0:	4770      	bx	lr
 800e9a2:	bf00      	nop
 800e9a4:	00030d40 	.word	0x00030d40

0800e9a8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800e9a8:	b580      	push	{r7, lr}
 800e9aa:	b082      	sub	sp, #8
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800e9b0:	f000 f80e 	bl	800e9d0 <BSP_SD_WriteCpltCallback>
}
 800e9b4:	bf00      	nop
 800e9b6:	3708      	adds	r7, #8
 800e9b8:	46bd      	mov	sp, r7
 800e9ba:	bd80      	pop	{r7, pc}

0800e9bc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800e9bc:	b580      	push	{r7, lr}
 800e9be:	b082      	sub	sp, #8
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800e9c4:	f000 f810 	bl	800e9e8 <BSP_SD_ReadCpltCallback>
}
 800e9c8:	bf00      	nop
 800e9ca:	3708      	adds	r7, #8
 800e9cc:	46bd      	mov	sp, r7
 800e9ce:	bd80      	pop	{r7, pc}

0800e9d0 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800e9d0:	b480      	push	{r7}
 800e9d2:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800e9d4:	4b03      	ldr	r3, [pc, #12]	; (800e9e4 <BSP_SD_WriteCpltCallback+0x14>)
 800e9d6:	2201      	movs	r2, #1
 800e9d8:	601a      	str	r2, [r3, #0]
}
 800e9da:	bf00      	nop
 800e9dc:	46bd      	mov	sp, r7
 800e9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e2:	4770      	bx	lr
 800e9e4:	24000810 	.word	0x24000810

0800e9e8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800e9e8:	b480      	push	{r7}
 800e9ea:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800e9ec:	4b03      	ldr	r3, [pc, #12]	; (800e9fc <BSP_SD_ReadCpltCallback+0x14>)
 800e9ee:	2201      	movs	r2, #1
 800e9f0:	601a      	str	r2, [r3, #0]
}
 800e9f2:	bf00      	nop
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9fa:	4770      	bx	lr
 800e9fc:	24000814 	.word	0x24000814

0800ea00 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ea00:	b580      	push	{r7, lr}
 800ea02:	b084      	sub	sp, #16
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	6078      	str	r0, [r7, #4]
 800ea08:	460b      	mov	r3, r1
 800ea0a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ea0c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800ea10:	f002 f9cc 	bl	8010dac <malloc>
 800ea14:	4603      	mov	r3, r0
 800ea16:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d105      	bne.n	800ea2a <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	2200      	movs	r2, #0
 800ea22:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800ea26:	2302      	movs	r3, #2
 800ea28:	e066      	b.n	800eaf8 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	68fa      	ldr	r2, [r7, #12]
 800ea2e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	7c1b      	ldrb	r3, [r3, #16]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d119      	bne.n	800ea6e <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ea3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ea3e:	2202      	movs	r2, #2
 800ea40:	2181      	movs	r1, #129	; 0x81
 800ea42:	6878      	ldr	r0, [r7, #4]
 800ea44:	f002 f839 	bl	8010aba <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	2201      	movs	r2, #1
 800ea4c:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ea4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ea52:	2202      	movs	r2, #2
 800ea54:	2101      	movs	r1, #1
 800ea56:	6878      	ldr	r0, [r7, #4]
 800ea58:	f002 f82f 	bl	8010aba <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	2201      	movs	r2, #1
 800ea60:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	2210      	movs	r2, #16
 800ea68:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800ea6c:	e016      	b.n	800ea9c <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ea6e:	2340      	movs	r3, #64	; 0x40
 800ea70:	2202      	movs	r2, #2
 800ea72:	2181      	movs	r1, #129	; 0x81
 800ea74:	6878      	ldr	r0, [r7, #4]
 800ea76:	f002 f820 	bl	8010aba <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	2201      	movs	r2, #1
 800ea7e:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ea80:	2340      	movs	r3, #64	; 0x40
 800ea82:	2202      	movs	r2, #2
 800ea84:	2101      	movs	r1, #1
 800ea86:	6878      	ldr	r0, [r7, #4]
 800ea88:	f002 f817 	bl	8010aba <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	2201      	movs	r2, #1
 800ea90:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	2210      	movs	r2, #16
 800ea98:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ea9c:	2308      	movs	r3, #8
 800ea9e:	2203      	movs	r2, #3
 800eaa0:	2182      	movs	r1, #130	; 0x82
 800eaa2:	6878      	ldr	r0, [r7, #4]
 800eaa4:	f002 f809 	bl	8010aba <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	2201      	movs	r2, #1
 800eaac:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	2200      	movs	r2, #0
 800eabe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	2200      	movs	r2, #0
 800eac6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	7c1b      	ldrb	r3, [r3, #16]
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d109      	bne.n	800eae6 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ead8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800eadc:	2101      	movs	r1, #1
 800eade:	6878      	ldr	r0, [r7, #4]
 800eae0:	f002 f8da 	bl	8010c98 <USBD_LL_PrepareReceive>
 800eae4:	e007      	b.n	800eaf6 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800eaec:	2340      	movs	r3, #64	; 0x40
 800eaee:	2101      	movs	r1, #1
 800eaf0:	6878      	ldr	r0, [r7, #4]
 800eaf2:	f002 f8d1 	bl	8010c98 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800eaf6:	2300      	movs	r3, #0
}
 800eaf8:	4618      	mov	r0, r3
 800eafa:	3710      	adds	r7, #16
 800eafc:	46bd      	mov	sp, r7
 800eafe:	bd80      	pop	{r7, pc}

0800eb00 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800eb00:	b580      	push	{r7, lr}
 800eb02:	b084      	sub	sp, #16
 800eb04:	af00      	add	r7, sp, #0
 800eb06:	6078      	str	r0, [r7, #4]
 800eb08:	460b      	mov	r3, r1
 800eb0a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800eb0c:	2300      	movs	r3, #0
 800eb0e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800eb10:	2181      	movs	r1, #129	; 0x81
 800eb12:	6878      	ldr	r0, [r7, #4]
 800eb14:	f001 fff7 	bl	8010b06 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	2200      	movs	r2, #0
 800eb1c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800eb1e:	2101      	movs	r1, #1
 800eb20:	6878      	ldr	r0, [r7, #4]
 800eb22:	f001 fff0 	bl	8010b06 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	2200      	movs	r2, #0
 800eb2a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800eb2e:	2182      	movs	r1, #130	; 0x82
 800eb30:	6878      	ldr	r0, [r7, #4]
 800eb32:	f001 ffe8 	bl	8010b06 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	2200      	movs	r2, #0
 800eb3a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	2200      	movs	r2, #0
 800eb42:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d00e      	beq.n	800eb6e <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800eb56:	685b      	ldr	r3, [r3, #4]
 800eb58:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eb60:	4618      	mov	r0, r3
 800eb62:	f002 f92b 	bl	8010dbc <free>
    pdev->pClassData = NULL;
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	2200      	movs	r2, #0
 800eb6a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800eb6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb70:	4618      	mov	r0, r3
 800eb72:	3710      	adds	r7, #16
 800eb74:	46bd      	mov	sp, r7
 800eb76:	bd80      	pop	{r7, pc}

0800eb78 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	b086      	sub	sp, #24
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	6078      	str	r0, [r7, #4]
 800eb80:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eb88:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800eb8a:	2300      	movs	r3, #0
 800eb8c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800eb8e:	2300      	movs	r3, #0
 800eb90:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800eb92:	2300      	movs	r3, #0
 800eb94:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800eb96:	683b      	ldr	r3, [r7, #0]
 800eb98:	781b      	ldrb	r3, [r3, #0]
 800eb9a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d03a      	beq.n	800ec18 <USBD_CDC_Setup+0xa0>
 800eba2:	2b20      	cmp	r3, #32
 800eba4:	f040 809a 	bne.w	800ecdc <USBD_CDC_Setup+0x164>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800eba8:	683b      	ldr	r3, [r7, #0]
 800ebaa:	88db      	ldrh	r3, [r3, #6]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d029      	beq.n	800ec04 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800ebb0:	683b      	ldr	r3, [r7, #0]
 800ebb2:	781b      	ldrb	r3, [r3, #0]
 800ebb4:	b25b      	sxtb	r3, r3
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	da11      	bge.n	800ebde <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ebc0:	689b      	ldr	r3, [r3, #8]
 800ebc2:	683a      	ldr	r2, [r7, #0]
 800ebc4:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800ebc6:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ebc8:	683a      	ldr	r2, [r7, #0]
 800ebca:	88d2      	ldrh	r2, [r2, #6]
 800ebcc:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800ebce:	6939      	ldr	r1, [r7, #16]
 800ebd0:	683b      	ldr	r3, [r7, #0]
 800ebd2:	88db      	ldrh	r3, [r3, #6]
 800ebd4:	461a      	mov	r2, r3
 800ebd6:	6878      	ldr	r0, [r7, #4]
 800ebd8:	f001 fabf 	bl	801015a <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800ebdc:	e085      	b.n	800ecea <USBD_CDC_Setup+0x172>
        hcdc->CmdOpCode = req->bRequest;
 800ebde:	683b      	ldr	r3, [r7, #0]
 800ebe0:	785a      	ldrb	r2, [r3, #1]
 800ebe2:	693b      	ldr	r3, [r7, #16]
 800ebe4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800ebe8:	683b      	ldr	r3, [r7, #0]
 800ebea:	88db      	ldrh	r3, [r3, #6]
 800ebec:	b2da      	uxtb	r2, r3
 800ebee:	693b      	ldr	r3, [r7, #16]
 800ebf0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800ebf4:	6939      	ldr	r1, [r7, #16]
 800ebf6:	683b      	ldr	r3, [r7, #0]
 800ebf8:	88db      	ldrh	r3, [r3, #6]
 800ebfa:	461a      	mov	r2, r3
 800ebfc:	6878      	ldr	r0, [r7, #4]
 800ebfe:	f001 fad8 	bl	80101b2 <USBD_CtlPrepareRx>
    break;
 800ec02:	e072      	b.n	800ecea <USBD_CDC_Setup+0x172>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ec0a:	689b      	ldr	r3, [r3, #8]
 800ec0c:	683a      	ldr	r2, [r7, #0]
 800ec0e:	7850      	ldrb	r0, [r2, #1]
 800ec10:	2200      	movs	r2, #0
 800ec12:	6839      	ldr	r1, [r7, #0]
 800ec14:	4798      	blx	r3
    break;
 800ec16:	e068      	b.n	800ecea <USBD_CDC_Setup+0x172>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800ec18:	683b      	ldr	r3, [r7, #0]
 800ec1a:	785b      	ldrb	r3, [r3, #1]
 800ec1c:	2b0b      	cmp	r3, #11
 800ec1e:	d852      	bhi.n	800ecc6 <USBD_CDC_Setup+0x14e>
 800ec20:	a201      	add	r2, pc, #4	; (adr r2, 800ec28 <USBD_CDC_Setup+0xb0>)
 800ec22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec26:	bf00      	nop
 800ec28:	0800ec59 	.word	0x0800ec59
 800ec2c:	0800ecd5 	.word	0x0800ecd5
 800ec30:	0800ecc7 	.word	0x0800ecc7
 800ec34:	0800ecc7 	.word	0x0800ecc7
 800ec38:	0800ecc7 	.word	0x0800ecc7
 800ec3c:	0800ecc7 	.word	0x0800ecc7
 800ec40:	0800ecc7 	.word	0x0800ecc7
 800ec44:	0800ecc7 	.word	0x0800ecc7
 800ec48:	0800ecc7 	.word	0x0800ecc7
 800ec4c:	0800ecc7 	.word	0x0800ecc7
 800ec50:	0800ec83 	.word	0x0800ec83
 800ec54:	0800ecad 	.word	0x0800ecad
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec5e:	b2db      	uxtb	r3, r3
 800ec60:	2b03      	cmp	r3, #3
 800ec62:	d107      	bne.n	800ec74 <USBD_CDC_Setup+0xfc>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ec64:	f107 030c 	add.w	r3, r7, #12
 800ec68:	2202      	movs	r2, #2
 800ec6a:	4619      	mov	r1, r3
 800ec6c:	6878      	ldr	r0, [r7, #4]
 800ec6e:	f001 fa74 	bl	801015a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800ec72:	e032      	b.n	800ecda <USBD_CDC_Setup+0x162>
        USBD_CtlError(pdev, req);
 800ec74:	6839      	ldr	r1, [r7, #0]
 800ec76:	6878      	ldr	r0, [r7, #4]
 800ec78:	f001 f9fe 	bl	8010078 <USBD_CtlError>
        ret = USBD_FAIL;
 800ec7c:	2303      	movs	r3, #3
 800ec7e:	75fb      	strb	r3, [r7, #23]
      break;
 800ec80:	e02b      	b.n	800ecda <USBD_CDC_Setup+0x162>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec88:	b2db      	uxtb	r3, r3
 800ec8a:	2b03      	cmp	r3, #3
 800ec8c:	d107      	bne.n	800ec9e <USBD_CDC_Setup+0x126>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ec8e:	f107 030f 	add.w	r3, r7, #15
 800ec92:	2201      	movs	r2, #1
 800ec94:	4619      	mov	r1, r3
 800ec96:	6878      	ldr	r0, [r7, #4]
 800ec98:	f001 fa5f 	bl	801015a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800ec9c:	e01d      	b.n	800ecda <USBD_CDC_Setup+0x162>
        USBD_CtlError(pdev, req);
 800ec9e:	6839      	ldr	r1, [r7, #0]
 800eca0:	6878      	ldr	r0, [r7, #4]
 800eca2:	f001 f9e9 	bl	8010078 <USBD_CtlError>
        ret = USBD_FAIL;
 800eca6:	2303      	movs	r3, #3
 800eca8:	75fb      	strb	r3, [r7, #23]
      break;
 800ecaa:	e016      	b.n	800ecda <USBD_CDC_Setup+0x162>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ecb2:	b2db      	uxtb	r3, r3
 800ecb4:	2b03      	cmp	r3, #3
 800ecb6:	d00f      	beq.n	800ecd8 <USBD_CDC_Setup+0x160>
      {
        USBD_CtlError(pdev, req);
 800ecb8:	6839      	ldr	r1, [r7, #0]
 800ecba:	6878      	ldr	r0, [r7, #4]
 800ecbc:	f001 f9dc 	bl	8010078 <USBD_CtlError>
        ret = USBD_FAIL;
 800ecc0:	2303      	movs	r3, #3
 800ecc2:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800ecc4:	e008      	b.n	800ecd8 <USBD_CDC_Setup+0x160>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800ecc6:	6839      	ldr	r1, [r7, #0]
 800ecc8:	6878      	ldr	r0, [r7, #4]
 800ecca:	f001 f9d5 	bl	8010078 <USBD_CtlError>
      ret = USBD_FAIL;
 800ecce:	2303      	movs	r3, #3
 800ecd0:	75fb      	strb	r3, [r7, #23]
      break;
 800ecd2:	e002      	b.n	800ecda <USBD_CDC_Setup+0x162>
      break;
 800ecd4:	bf00      	nop
 800ecd6:	e008      	b.n	800ecea <USBD_CDC_Setup+0x172>
      break;
 800ecd8:	bf00      	nop
    }
    break;
 800ecda:	e006      	b.n	800ecea <USBD_CDC_Setup+0x172>

  default:
    USBD_CtlError(pdev, req);
 800ecdc:	6839      	ldr	r1, [r7, #0]
 800ecde:	6878      	ldr	r0, [r7, #4]
 800ece0:	f001 f9ca 	bl	8010078 <USBD_CtlError>
    ret = USBD_FAIL;
 800ece4:	2303      	movs	r3, #3
 800ece6:	75fb      	strb	r3, [r7, #23]
    break;
 800ece8:	bf00      	nop
  }

  return (uint8_t)ret;
 800ecea:	7dfb      	ldrb	r3, [r7, #23]
}
 800ecec:	4618      	mov	r0, r3
 800ecee:	3718      	adds	r7, #24
 800ecf0:	46bd      	mov	sp, r7
 800ecf2:	bd80      	pop	{r7, pc}

0800ecf4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ecf4:	b580      	push	{r7, lr}
 800ecf6:	b084      	sub	sp, #16
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	6078      	str	r0, [r7, #4]
 800ecfc:	460b      	mov	r3, r1
 800ecfe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ed06:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d101      	bne.n	800ed16 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ed12:	2303      	movs	r3, #3
 800ed14:	e049      	b.n	800edaa <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ed1c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800ed1e:	78fa      	ldrb	r2, [r7, #3]
 800ed20:	6879      	ldr	r1, [r7, #4]
 800ed22:	4613      	mov	r3, r2
 800ed24:	009b      	lsls	r3, r3, #2
 800ed26:	4413      	add	r3, r2
 800ed28:	009b      	lsls	r3, r3, #2
 800ed2a:	440b      	add	r3, r1
 800ed2c:	3318      	adds	r3, #24
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d029      	beq.n	800ed88 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800ed34:	78fa      	ldrb	r2, [r7, #3]
 800ed36:	6879      	ldr	r1, [r7, #4]
 800ed38:	4613      	mov	r3, r2
 800ed3a:	009b      	lsls	r3, r3, #2
 800ed3c:	4413      	add	r3, r2
 800ed3e:	009b      	lsls	r3, r3, #2
 800ed40:	440b      	add	r3, r1
 800ed42:	3318      	adds	r3, #24
 800ed44:	681a      	ldr	r2, [r3, #0]
 800ed46:	78f9      	ldrb	r1, [r7, #3]
 800ed48:	68f8      	ldr	r0, [r7, #12]
 800ed4a:	460b      	mov	r3, r1
 800ed4c:	00db      	lsls	r3, r3, #3
 800ed4e:	1a5b      	subs	r3, r3, r1
 800ed50:	009b      	lsls	r3, r3, #2
 800ed52:	4403      	add	r3, r0
 800ed54:	3344      	adds	r3, #68	; 0x44
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	fbb2 f1f3 	udiv	r1, r2, r3
 800ed5c:	fb01 f303 	mul.w	r3, r1, r3
 800ed60:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d110      	bne.n	800ed88 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800ed66:	78fa      	ldrb	r2, [r7, #3]
 800ed68:	6879      	ldr	r1, [r7, #4]
 800ed6a:	4613      	mov	r3, r2
 800ed6c:	009b      	lsls	r3, r3, #2
 800ed6e:	4413      	add	r3, r2
 800ed70:	009b      	lsls	r3, r3, #2
 800ed72:	440b      	add	r3, r1
 800ed74:	3318      	adds	r3, #24
 800ed76:	2200      	movs	r2, #0
 800ed78:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ed7a:	78f9      	ldrb	r1, [r7, #3]
 800ed7c:	2300      	movs	r3, #0
 800ed7e:	2200      	movs	r2, #0
 800ed80:	6878      	ldr	r0, [r7, #4]
 800ed82:	f001 ff68 	bl	8010c56 <USBD_LL_Transmit>
 800ed86:	e00f      	b.n	800eda8 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 800ed88:	68bb      	ldr	r3, [r7, #8]
 800ed8a:	2200      	movs	r2, #0
 800ed8c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ed96:	691b      	ldr	r3, [r3, #16]
 800ed98:	68ba      	ldr	r2, [r7, #8]
 800ed9a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800ed9e:	68ba      	ldr	r2, [r7, #8]
 800eda0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800eda4:	78fa      	ldrb	r2, [r7, #3]
 800eda6:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800eda8:	2300      	movs	r3, #0
}
 800edaa:	4618      	mov	r0, r3
 800edac:	3710      	adds	r7, #16
 800edae:	46bd      	mov	sp, r7
 800edb0:	bd80      	pop	{r7, pc}

0800edb2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800edb2:	b580      	push	{r7, lr}
 800edb4:	b084      	sub	sp, #16
 800edb6:	af00      	add	r7, sp, #0
 800edb8:	6078      	str	r0, [r7, #4]
 800edba:	460b      	mov	r3, r1
 800edbc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800edc4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d101      	bne.n	800edd4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800edd0:	2303      	movs	r3, #3
 800edd2:	e015      	b.n	800ee00 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800edd4:	78fb      	ldrb	r3, [r7, #3]
 800edd6:	4619      	mov	r1, r3
 800edd8:	6878      	ldr	r0, [r7, #4]
 800edda:	f001 ff7e 	bl	8010cda <USBD_LL_GetRxDataSize>
 800edde:	4602      	mov	r2, r0
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800edec:	68db      	ldr	r3, [r3, #12]
 800edee:	68fa      	ldr	r2, [r7, #12]
 800edf0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800edf4:	68fa      	ldr	r2, [r7, #12]
 800edf6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800edfa:	4611      	mov	r1, r2
 800edfc:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800edfe:	2300      	movs	r3, #0
}
 800ee00:	4618      	mov	r0, r3
 800ee02:	3710      	adds	r7, #16
 800ee04:	46bd      	mov	sp, r7
 800ee06:	bd80      	pop	{r7, pc}

0800ee08 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ee08:	b580      	push	{r7, lr}
 800ee0a:	b084      	sub	sp, #16
 800ee0c:	af00      	add	r7, sp, #0
 800ee0e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ee16:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d015      	beq.n	800ee4e <USBD_CDC_EP0_RxReady+0x46>
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ee28:	2bff      	cmp	r3, #255	; 0xff
 800ee2a:	d010      	beq.n	800ee4e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ee32:	689b      	ldr	r3, [r3, #8]
 800ee34:	68fa      	ldr	r2, [r7, #12]
 800ee36:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800ee3a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800ee3c:	68fa      	ldr	r2, [r7, #12]
 800ee3e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ee42:	b292      	uxth	r2, r2
 800ee44:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	22ff      	movs	r2, #255	; 0xff
 800ee4a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800ee4e:	2300      	movs	r3, #0
}
 800ee50:	4618      	mov	r0, r3
 800ee52:	3710      	adds	r7, #16
 800ee54:	46bd      	mov	sp, r7
 800ee56:	bd80      	pop	{r7, pc}

0800ee58 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ee58:	b480      	push	{r7}
 800ee5a:	b083      	sub	sp, #12
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	2243      	movs	r2, #67	; 0x43
 800ee64:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800ee66:	4b03      	ldr	r3, [pc, #12]	; (800ee74 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800ee68:	4618      	mov	r0, r3
 800ee6a:	370c      	adds	r7, #12
 800ee6c:	46bd      	mov	sp, r7
 800ee6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee72:	4770      	bx	lr
 800ee74:	240000b0 	.word	0x240000b0

0800ee78 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ee78:	b480      	push	{r7}
 800ee7a:	b083      	sub	sp, #12
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	2243      	movs	r2, #67	; 0x43
 800ee84:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800ee86:	4b03      	ldr	r3, [pc, #12]	; (800ee94 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800ee88:	4618      	mov	r0, r3
 800ee8a:	370c      	adds	r7, #12
 800ee8c:	46bd      	mov	sp, r7
 800ee8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee92:	4770      	bx	lr
 800ee94:	2400006c 	.word	0x2400006c

0800ee98 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ee98:	b480      	push	{r7}
 800ee9a:	b083      	sub	sp, #12
 800ee9c:	af00      	add	r7, sp, #0
 800ee9e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	2243      	movs	r2, #67	; 0x43
 800eea4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800eea6:	4b03      	ldr	r3, [pc, #12]	; (800eeb4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800eea8:	4618      	mov	r0, r3
 800eeaa:	370c      	adds	r7, #12
 800eeac:	46bd      	mov	sp, r7
 800eeae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeb2:	4770      	bx	lr
 800eeb4:	240000f4 	.word	0x240000f4

0800eeb8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800eeb8:	b480      	push	{r7}
 800eeba:	b083      	sub	sp, #12
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	220a      	movs	r2, #10
 800eec4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800eec6:	4b03      	ldr	r3, [pc, #12]	; (800eed4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800eec8:	4618      	mov	r0, r3
 800eeca:	370c      	adds	r7, #12
 800eecc:	46bd      	mov	sp, r7
 800eece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed2:	4770      	bx	lr
 800eed4:	24000028 	.word	0x24000028

0800eed8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800eed8:	b480      	push	{r7}
 800eeda:	b083      	sub	sp, #12
 800eedc:	af00      	add	r7, sp, #0
 800eede:	6078      	str	r0, [r7, #4]
 800eee0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800eee2:	683b      	ldr	r3, [r7, #0]
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d101      	bne.n	800eeec <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800eee8:	2303      	movs	r3, #3
 800eeea:	e004      	b.n	800eef6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	683a      	ldr	r2, [r7, #0]
 800eef0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800eef4:	2300      	movs	r3, #0
}
 800eef6:	4618      	mov	r0, r3
 800eef8:	370c      	adds	r7, #12
 800eefa:	46bd      	mov	sp, r7
 800eefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef00:	4770      	bx	lr

0800ef02 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ef02:	b480      	push	{r7}
 800ef04:	b087      	sub	sp, #28
 800ef06:	af00      	add	r7, sp, #0
 800ef08:	60f8      	str	r0, [r7, #12]
 800ef0a:	60b9      	str	r1, [r7, #8]
 800ef0c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ef14:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800ef16:	697b      	ldr	r3, [r7, #20]
 800ef18:	68ba      	ldr	r2, [r7, #8]
 800ef1a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800ef1e:	697b      	ldr	r3, [r7, #20]
 800ef20:	687a      	ldr	r2, [r7, #4]
 800ef22:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800ef26:	2300      	movs	r3, #0
}
 800ef28:	4618      	mov	r0, r3
 800ef2a:	371c      	adds	r7, #28
 800ef2c:	46bd      	mov	sp, r7
 800ef2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef32:	4770      	bx	lr

0800ef34 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ef34:	b480      	push	{r7}
 800ef36:	b085      	sub	sp, #20
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	6078      	str	r0, [r7, #4]
 800ef3c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ef44:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	683a      	ldr	r2, [r7, #0]
 800ef4a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800ef4e:	2300      	movs	r3, #0
}
 800ef50:	4618      	mov	r0, r3
 800ef52:	3714      	adds	r7, #20
 800ef54:	46bd      	mov	sp, r7
 800ef56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef5a:	4770      	bx	lr

0800ef5c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800ef5c:	b580      	push	{r7, lr}
 800ef5e:	b084      	sub	sp, #16
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ef6a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800ef6c:	2301      	movs	r3, #1
 800ef6e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d101      	bne.n	800ef7e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ef7a:	2303      	movs	r3, #3
 800ef7c:	e01a      	b.n	800efb4 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800ef7e:	68bb      	ldr	r3, [r7, #8]
 800ef80:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d114      	bne.n	800efb2 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800ef88:	68bb      	ldr	r3, [r7, #8]
 800ef8a:	2201      	movs	r2, #1
 800ef8c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800ef90:	68bb      	ldr	r3, [r7, #8]
 800ef92:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800ef9a:	68bb      	ldr	r3, [r7, #8]
 800ef9c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800efa0:	68bb      	ldr	r3, [r7, #8]
 800efa2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800efa6:	2181      	movs	r1, #129	; 0x81
 800efa8:	6878      	ldr	r0, [r7, #4]
 800efaa:	f001 fe54 	bl	8010c56 <USBD_LL_Transmit>

    ret = USBD_OK;
 800efae:	2300      	movs	r3, #0
 800efb0:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800efb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800efb4:	4618      	mov	r0, r3
 800efb6:	3710      	adds	r7, #16
 800efb8:	46bd      	mov	sp, r7
 800efba:	bd80      	pop	{r7, pc}

0800efbc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800efbc:	b580      	push	{r7, lr}
 800efbe:	b084      	sub	sp, #16
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800efca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d101      	bne.n	800efda <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800efd6:	2303      	movs	r3, #3
 800efd8:	e016      	b.n	800f008 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	7c1b      	ldrb	r3, [r3, #16]
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d109      	bne.n	800eff6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800efe8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800efec:	2101      	movs	r1, #1
 800efee:	6878      	ldr	r0, [r7, #4]
 800eff0:	f001 fe52 	bl	8010c98 <USBD_LL_PrepareReceive>
 800eff4:	e007      	b.n	800f006 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800effc:	2340      	movs	r3, #64	; 0x40
 800effe:	2101      	movs	r1, #1
 800f000:	6878      	ldr	r0, [r7, #4]
 800f002:	f001 fe49 	bl	8010c98 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f006:	2300      	movs	r3, #0
}
 800f008:	4618      	mov	r0, r3
 800f00a:	3710      	adds	r7, #16
 800f00c:	46bd      	mov	sp, r7
 800f00e:	bd80      	pop	{r7, pc}

0800f010 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800f010:	b580      	push	{r7, lr}
 800f012:	b086      	sub	sp, #24
 800f014:	af00      	add	r7, sp, #0
 800f016:	60f8      	str	r0, [r7, #12]
 800f018:	60b9      	str	r1, [r7, #8]
 800f01a:	4613      	mov	r3, r2
 800f01c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	2b00      	cmp	r3, #0
 800f022:	d101      	bne.n	800f028 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800f024:	2303      	movs	r3, #3
 800f026:	e025      	b.n	800f074 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d003      	beq.n	800f03a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	2200      	movs	r2, #0
 800f036:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800f040:	2b00      	cmp	r3, #0
 800f042:	d003      	beq.n	800f04c <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	2200      	movs	r2, #0
 800f048:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800f04c:	68bb      	ldr	r3, [r7, #8]
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d003      	beq.n	800f05a <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	68ba      	ldr	r2, [r7, #8]
 800f056:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	2201      	movs	r2, #1
 800f05e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	79fa      	ldrb	r2, [r7, #7]
 800f066:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800f068:	68f8      	ldr	r0, [r7, #12]
 800f06a:	f001 fcbb 	bl	80109e4 <USBD_LL_Init>
 800f06e:	4603      	mov	r3, r0
 800f070:	75fb      	strb	r3, [r7, #23]

  return ret;
 800f072:	7dfb      	ldrb	r3, [r7, #23]
}
 800f074:	4618      	mov	r0, r3
 800f076:	3718      	adds	r7, #24
 800f078:	46bd      	mov	sp, r7
 800f07a:	bd80      	pop	{r7, pc}

0800f07c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800f07c:	b580      	push	{r7, lr}
 800f07e:	b084      	sub	sp, #16
 800f080:	af00      	add	r7, sp, #0
 800f082:	6078      	str	r0, [r7, #4]
 800f084:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f086:	2300      	movs	r3, #0
 800f088:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800f08a:	683b      	ldr	r3, [r7, #0]
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d101      	bne.n	800f094 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800f090:	2303      	movs	r3, #3
 800f092:	e010      	b.n	800f0b6 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	683a      	ldr	r2, [r7, #0]
 800f098:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f0a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f0a4:	f107 020e 	add.w	r2, r7, #14
 800f0a8:	4610      	mov	r0, r2
 800f0aa:	4798      	blx	r3
 800f0ac:	4602      	mov	r2, r0
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800f0b4:	2300      	movs	r3, #0
}
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	3710      	adds	r7, #16
 800f0ba:	46bd      	mov	sp, r7
 800f0bc:	bd80      	pop	{r7, pc}

0800f0be <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800f0be:	b580      	push	{r7, lr}
 800f0c0:	b082      	sub	sp, #8
 800f0c2:	af00      	add	r7, sp, #0
 800f0c4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800f0c6:	6878      	ldr	r0, [r7, #4]
 800f0c8:	f001 fcdc 	bl	8010a84 <USBD_LL_Start>
 800f0cc:	4603      	mov	r3, r0
}
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	3708      	adds	r7, #8
 800f0d2:	46bd      	mov	sp, r7
 800f0d4:	bd80      	pop	{r7, pc}

0800f0d6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800f0d6:	b480      	push	{r7}
 800f0d8:	b083      	sub	sp, #12
 800f0da:	af00      	add	r7, sp, #0
 800f0dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f0de:	2300      	movs	r3, #0
}
 800f0e0:	4618      	mov	r0, r3
 800f0e2:	370c      	adds	r7, #12
 800f0e4:	46bd      	mov	sp, r7
 800f0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ea:	4770      	bx	lr

0800f0ec <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f0ec:	b580      	push	{r7, lr}
 800f0ee:	b084      	sub	sp, #16
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	6078      	str	r0, [r7, #4]
 800f0f4:	460b      	mov	r3, r1
 800f0f6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800f0f8:	2303      	movs	r3, #3
 800f0fa:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f102:	2b00      	cmp	r3, #0
 800f104:	d009      	beq.n	800f11a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	78fa      	ldrb	r2, [r7, #3]
 800f110:	4611      	mov	r1, r2
 800f112:	6878      	ldr	r0, [r7, #4]
 800f114:	4798      	blx	r3
 800f116:	4603      	mov	r3, r0
 800f118:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800f11a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f11c:	4618      	mov	r0, r3
 800f11e:	3710      	adds	r7, #16
 800f120:	46bd      	mov	sp, r7
 800f122:	bd80      	pop	{r7, pc}

0800f124 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f124:	b580      	push	{r7, lr}
 800f126:	b082      	sub	sp, #8
 800f128:	af00      	add	r7, sp, #0
 800f12a:	6078      	str	r0, [r7, #4]
 800f12c:	460b      	mov	r3, r1
 800f12e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f136:	2b00      	cmp	r3, #0
 800f138:	d007      	beq.n	800f14a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f140:	685b      	ldr	r3, [r3, #4]
 800f142:	78fa      	ldrb	r2, [r7, #3]
 800f144:	4611      	mov	r1, r2
 800f146:	6878      	ldr	r0, [r7, #4]
 800f148:	4798      	blx	r3
  }

  return USBD_OK;
 800f14a:	2300      	movs	r3, #0
}
 800f14c:	4618      	mov	r0, r3
 800f14e:	3708      	adds	r7, #8
 800f150:	46bd      	mov	sp, r7
 800f152:	bd80      	pop	{r7, pc}

0800f154 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f154:	b580      	push	{r7, lr}
 800f156:	b084      	sub	sp, #16
 800f158:	af00      	add	r7, sp, #0
 800f15a:	6078      	str	r0, [r7, #4]
 800f15c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f164:	6839      	ldr	r1, [r7, #0]
 800f166:	4618      	mov	r0, r3
 800f168:	f000 ff4c 	bl	8010004 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	2201      	movs	r2, #1
 800f170:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800f17a:	461a      	mov	r2, r3
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f188:	f003 031f 	and.w	r3, r3, #31
 800f18c:	2b02      	cmp	r3, #2
 800f18e:	d01a      	beq.n	800f1c6 <USBD_LL_SetupStage+0x72>
 800f190:	2b02      	cmp	r3, #2
 800f192:	d822      	bhi.n	800f1da <USBD_LL_SetupStage+0x86>
 800f194:	2b00      	cmp	r3, #0
 800f196:	d002      	beq.n	800f19e <USBD_LL_SetupStage+0x4a>
 800f198:	2b01      	cmp	r3, #1
 800f19a:	d00a      	beq.n	800f1b2 <USBD_LL_SetupStage+0x5e>
 800f19c:	e01d      	b.n	800f1da <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f1a4:	4619      	mov	r1, r3
 800f1a6:	6878      	ldr	r0, [r7, #4]
 800f1a8:	f000 fa20 	bl	800f5ec <USBD_StdDevReq>
 800f1ac:	4603      	mov	r3, r0
 800f1ae:	73fb      	strb	r3, [r7, #15]
      break;
 800f1b0:	e020      	b.n	800f1f4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f1b8:	4619      	mov	r1, r3
 800f1ba:	6878      	ldr	r0, [r7, #4]
 800f1bc:	f000 fa84 	bl	800f6c8 <USBD_StdItfReq>
 800f1c0:	4603      	mov	r3, r0
 800f1c2:	73fb      	strb	r3, [r7, #15]
      break;
 800f1c4:	e016      	b.n	800f1f4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f1cc:	4619      	mov	r1, r3
 800f1ce:	6878      	ldr	r0, [r7, #4]
 800f1d0:	f000 fac3 	bl	800f75a <USBD_StdEPReq>
 800f1d4:	4603      	mov	r3, r0
 800f1d6:	73fb      	strb	r3, [r7, #15]
      break;
 800f1d8:	e00c      	b.n	800f1f4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f1e0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f1e4:	b2db      	uxtb	r3, r3
 800f1e6:	4619      	mov	r1, r3
 800f1e8:	6878      	ldr	r0, [r7, #4]
 800f1ea:	f001 fcab 	bl	8010b44 <USBD_LL_StallEP>
 800f1ee:	4603      	mov	r3, r0
 800f1f0:	73fb      	strb	r3, [r7, #15]
      break;
 800f1f2:	bf00      	nop
  }

  return ret;
 800f1f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1f6:	4618      	mov	r0, r3
 800f1f8:	3710      	adds	r7, #16
 800f1fa:	46bd      	mov	sp, r7
 800f1fc:	bd80      	pop	{r7, pc}

0800f1fe <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f1fe:	b580      	push	{r7, lr}
 800f200:	b086      	sub	sp, #24
 800f202:	af00      	add	r7, sp, #0
 800f204:	60f8      	str	r0, [r7, #12]
 800f206:	460b      	mov	r3, r1
 800f208:	607a      	str	r2, [r7, #4]
 800f20a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f20c:	7afb      	ldrb	r3, [r7, #11]
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d138      	bne.n	800f284 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800f218:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f220:	2b03      	cmp	r3, #3
 800f222:	d14c      	bne.n	800f2be <USBD_LL_DataOutStage+0xc0>
    {
      if (pep->rem_length > pep->maxpacket)
 800f224:	693b      	ldr	r3, [r7, #16]
 800f226:	689a      	ldr	r2, [r3, #8]
 800f228:	693b      	ldr	r3, [r7, #16]
 800f22a:	68db      	ldr	r3, [r3, #12]
 800f22c:	429a      	cmp	r2, r3
 800f22e:	d913      	bls.n	800f258 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f230:	693b      	ldr	r3, [r7, #16]
 800f232:	689a      	ldr	r2, [r3, #8]
 800f234:	693b      	ldr	r3, [r7, #16]
 800f236:	68db      	ldr	r3, [r3, #12]
 800f238:	1ad2      	subs	r2, r2, r3
 800f23a:	693b      	ldr	r3, [r7, #16]
 800f23c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800f23e:	693b      	ldr	r3, [r7, #16]
 800f240:	68da      	ldr	r2, [r3, #12]
 800f242:	693b      	ldr	r3, [r7, #16]
 800f244:	689b      	ldr	r3, [r3, #8]
 800f246:	4293      	cmp	r3, r2
 800f248:	bf28      	it	cs
 800f24a:	4613      	movcs	r3, r2
 800f24c:	461a      	mov	r2, r3
 800f24e:	6879      	ldr	r1, [r7, #4]
 800f250:	68f8      	ldr	r0, [r7, #12]
 800f252:	f000 ffcb 	bl	80101ec <USBD_CtlContinueRx>
 800f256:	e032      	b.n	800f2be <USBD_LL_DataOutStage+0xc0>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f25e:	691b      	ldr	r3, [r3, #16]
 800f260:	2b00      	cmp	r3, #0
 800f262:	d00b      	beq.n	800f27c <USBD_LL_DataOutStage+0x7e>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f26a:	b2db      	uxtb	r3, r3
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800f26c:	2b03      	cmp	r3, #3
 800f26e:	d105      	bne.n	800f27c <USBD_LL_DataOutStage+0x7e>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f276:	691b      	ldr	r3, [r3, #16]
 800f278:	68f8      	ldr	r0, [r7, #12]
 800f27a:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800f27c:	68f8      	ldr	r0, [r7, #12]
 800f27e:	f000 ffc6 	bl	801020e <USBD_CtlSendStatus>
 800f282:	e01c      	b.n	800f2be <USBD_LL_DataOutStage+0xc0>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f28a:	699b      	ldr	r3, [r3, #24]
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d014      	beq.n	800f2ba <USBD_LL_DataOutStage+0xbc>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f296:	b2db      	uxtb	r3, r3
  else if ((pdev->pClass->DataOut != NULL) &&
 800f298:	2b03      	cmp	r3, #3
 800f29a:	d10e      	bne.n	800f2ba <USBD_LL_DataOutStage+0xbc>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f2a2:	699b      	ldr	r3, [r3, #24]
 800f2a4:	7afa      	ldrb	r2, [r7, #11]
 800f2a6:	4611      	mov	r1, r2
 800f2a8:	68f8      	ldr	r0, [r7, #12]
 800f2aa:	4798      	blx	r3
 800f2ac:	4603      	mov	r3, r0
 800f2ae:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800f2b0:	7dfb      	ldrb	r3, [r7, #23]
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d003      	beq.n	800f2be <USBD_LL_DataOutStage+0xc0>
    {
      return ret;
 800f2b6:	7dfb      	ldrb	r3, [r7, #23]
 800f2b8:	e002      	b.n	800f2c0 <USBD_LL_DataOutStage+0xc2>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800f2ba:	2303      	movs	r3, #3
 800f2bc:	e000      	b.n	800f2c0 <USBD_LL_DataOutStage+0xc2>
  }

  return USBD_OK;
 800f2be:	2300      	movs	r3, #0
}
 800f2c0:	4618      	mov	r0, r3
 800f2c2:	3718      	adds	r7, #24
 800f2c4:	46bd      	mov	sp, r7
 800f2c6:	bd80      	pop	{r7, pc}

0800f2c8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f2c8:	b580      	push	{r7, lr}
 800f2ca:	b086      	sub	sp, #24
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	60f8      	str	r0, [r7, #12]
 800f2d0:	460b      	mov	r3, r1
 800f2d2:	607a      	str	r2, [r7, #4]
 800f2d4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f2d6:	7afb      	ldrb	r3, [r7, #11]
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d16b      	bne.n	800f3b4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	3314      	adds	r3, #20
 800f2e0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f2e8:	2b02      	cmp	r3, #2
 800f2ea:	d156      	bne.n	800f39a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800f2ec:	693b      	ldr	r3, [r7, #16]
 800f2ee:	689a      	ldr	r2, [r3, #8]
 800f2f0:	693b      	ldr	r3, [r7, #16]
 800f2f2:	68db      	ldr	r3, [r3, #12]
 800f2f4:	429a      	cmp	r2, r3
 800f2f6:	d914      	bls.n	800f322 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f2f8:	693b      	ldr	r3, [r7, #16]
 800f2fa:	689a      	ldr	r2, [r3, #8]
 800f2fc:	693b      	ldr	r3, [r7, #16]
 800f2fe:	68db      	ldr	r3, [r3, #12]
 800f300:	1ad2      	subs	r2, r2, r3
 800f302:	693b      	ldr	r3, [r7, #16]
 800f304:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800f306:	693b      	ldr	r3, [r7, #16]
 800f308:	689b      	ldr	r3, [r3, #8]
 800f30a:	461a      	mov	r2, r3
 800f30c:	6879      	ldr	r1, [r7, #4]
 800f30e:	68f8      	ldr	r0, [r7, #12]
 800f310:	f000 ff3e 	bl	8010190 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f314:	2300      	movs	r3, #0
 800f316:	2200      	movs	r2, #0
 800f318:	2100      	movs	r1, #0
 800f31a:	68f8      	ldr	r0, [r7, #12]
 800f31c:	f001 fcbc 	bl	8010c98 <USBD_LL_PrepareReceive>
 800f320:	e03b      	b.n	800f39a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800f322:	693b      	ldr	r3, [r7, #16]
 800f324:	68da      	ldr	r2, [r3, #12]
 800f326:	693b      	ldr	r3, [r7, #16]
 800f328:	689b      	ldr	r3, [r3, #8]
 800f32a:	429a      	cmp	r2, r3
 800f32c:	d11c      	bne.n	800f368 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800f32e:	693b      	ldr	r3, [r7, #16]
 800f330:	685a      	ldr	r2, [r3, #4]
 800f332:	693b      	ldr	r3, [r7, #16]
 800f334:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800f336:	429a      	cmp	r2, r3
 800f338:	d316      	bcc.n	800f368 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800f33a:	693b      	ldr	r3, [r7, #16]
 800f33c:	685a      	ldr	r2, [r3, #4]
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f344:	429a      	cmp	r2, r3
 800f346:	d20f      	bcs.n	800f368 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f348:	2200      	movs	r2, #0
 800f34a:	2100      	movs	r1, #0
 800f34c:	68f8      	ldr	r0, [r7, #12]
 800f34e:	f000 ff1f 	bl	8010190 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	2200      	movs	r2, #0
 800f356:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f35a:	2300      	movs	r3, #0
 800f35c:	2200      	movs	r2, #0
 800f35e:	2100      	movs	r1, #0
 800f360:	68f8      	ldr	r0, [r7, #12]
 800f362:	f001 fc99 	bl	8010c98 <USBD_LL_PrepareReceive>
 800f366:	e018      	b.n	800f39a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f36e:	68db      	ldr	r3, [r3, #12]
 800f370:	2b00      	cmp	r3, #0
 800f372:	d00b      	beq.n	800f38c <USBD_LL_DataInStage+0xc4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f37a:	b2db      	uxtb	r3, r3
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800f37c:	2b03      	cmp	r3, #3
 800f37e:	d105      	bne.n	800f38c <USBD_LL_DataInStage+0xc4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f386:	68db      	ldr	r3, [r3, #12]
 800f388:	68f8      	ldr	r0, [r7, #12]
 800f38a:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f38c:	2180      	movs	r1, #128	; 0x80
 800f38e:	68f8      	ldr	r0, [r7, #12]
 800f390:	f001 fbd8 	bl	8010b44 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800f394:	68f8      	ldr	r0, [r7, #12]
 800f396:	f000 ff4d 	bl	8010234 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800f3a0:	2b01      	cmp	r3, #1
 800f3a2:	d124      	bne.n	800f3ee <USBD_LL_DataInStage+0x126>
    {
      (void)USBD_RunTestMode(pdev);
 800f3a4:	68f8      	ldr	r0, [r7, #12]
 800f3a6:	f7ff fe96 	bl	800f0d6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	2200      	movs	r2, #0
 800f3ae:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800f3b2:	e01c      	b.n	800f3ee <USBD_LL_DataInStage+0x126>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f3ba:	695b      	ldr	r3, [r3, #20]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d014      	beq.n	800f3ea <USBD_LL_DataInStage+0x122>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f3c6:	b2db      	uxtb	r3, r3
  else if ((pdev->pClass->DataIn != NULL) &&
 800f3c8:	2b03      	cmp	r3, #3
 800f3ca:	d10e      	bne.n	800f3ea <USBD_LL_DataInStage+0x122>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f3d2:	695b      	ldr	r3, [r3, #20]
 800f3d4:	7afa      	ldrb	r2, [r7, #11]
 800f3d6:	4611      	mov	r1, r2
 800f3d8:	68f8      	ldr	r0, [r7, #12]
 800f3da:	4798      	blx	r3
 800f3dc:	4603      	mov	r3, r0
 800f3de:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800f3e0:	7dfb      	ldrb	r3, [r7, #23]
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d003      	beq.n	800f3ee <USBD_LL_DataInStage+0x126>
    {
      return ret;
 800f3e6:	7dfb      	ldrb	r3, [r7, #23]
 800f3e8:	e002      	b.n	800f3f0 <USBD_LL_DataInStage+0x128>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800f3ea:	2303      	movs	r3, #3
 800f3ec:	e000      	b.n	800f3f0 <USBD_LL_DataInStage+0x128>
  }

  return USBD_OK;
 800f3ee:	2300      	movs	r3, #0
}
 800f3f0:	4618      	mov	r0, r3
 800f3f2:	3718      	adds	r7, #24
 800f3f4:	46bd      	mov	sp, r7
 800f3f6:	bd80      	pop	{r7, pc}

0800f3f8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f3f8:	b580      	push	{r7, lr}
 800f3fa:	b082      	sub	sp, #8
 800f3fc:	af00      	add	r7, sp, #0
 800f3fe:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	2201      	movs	r2, #1
 800f404:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	2200      	movs	r2, #0
 800f40c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	2200      	movs	r2, #0
 800f414:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	2200      	movs	r2, #0
 800f41a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f424:	2b00      	cmp	r3, #0
 800f426:	d009      	beq.n	800f43c <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f42e:	685b      	ldr	r3, [r3, #4]
 800f430:	687a      	ldr	r2, [r7, #4]
 800f432:	6852      	ldr	r2, [r2, #4]
 800f434:	b2d2      	uxtb	r2, r2
 800f436:	4611      	mov	r1, r2
 800f438:	6878      	ldr	r0, [r7, #4]
 800f43a:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f43c:	2340      	movs	r3, #64	; 0x40
 800f43e:	2200      	movs	r2, #0
 800f440:	2100      	movs	r1, #0
 800f442:	6878      	ldr	r0, [r7, #4]
 800f444:	f001 fb39 	bl	8010aba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	2201      	movs	r2, #1
 800f44c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	2240      	movs	r2, #64	; 0x40
 800f454:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f458:	2340      	movs	r3, #64	; 0x40
 800f45a:	2200      	movs	r2, #0
 800f45c:	2180      	movs	r1, #128	; 0x80
 800f45e:	6878      	ldr	r0, [r7, #4]
 800f460:	f001 fb2b 	bl	8010aba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	2201      	movs	r2, #1
 800f468:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	2240      	movs	r2, #64	; 0x40
 800f46e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800f470:	2300      	movs	r3, #0
}
 800f472:	4618      	mov	r0, r3
 800f474:	3708      	adds	r7, #8
 800f476:	46bd      	mov	sp, r7
 800f478:	bd80      	pop	{r7, pc}

0800f47a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f47a:	b480      	push	{r7}
 800f47c:	b083      	sub	sp, #12
 800f47e:	af00      	add	r7, sp, #0
 800f480:	6078      	str	r0, [r7, #4]
 800f482:	460b      	mov	r3, r1
 800f484:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	78fa      	ldrb	r2, [r7, #3]
 800f48a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f48c:	2300      	movs	r3, #0
}
 800f48e:	4618      	mov	r0, r3
 800f490:	370c      	adds	r7, #12
 800f492:	46bd      	mov	sp, r7
 800f494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f498:	4770      	bx	lr

0800f49a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800f49a:	b480      	push	{r7}
 800f49c:	b083      	sub	sp, #12
 800f49e:	af00      	add	r7, sp, #0
 800f4a0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f4a8:	b2da      	uxtb	r2, r3
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	2204      	movs	r2, #4
 800f4b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800f4b8:	2300      	movs	r3, #0
}
 800f4ba:	4618      	mov	r0, r3
 800f4bc:	370c      	adds	r7, #12
 800f4be:	46bd      	mov	sp, r7
 800f4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c4:	4770      	bx	lr

0800f4c6 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800f4c6:	b480      	push	{r7}
 800f4c8:	b083      	sub	sp, #12
 800f4ca:	af00      	add	r7, sp, #0
 800f4cc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f4d4:	b2db      	uxtb	r3, r3
 800f4d6:	2b04      	cmp	r3, #4
 800f4d8:	d106      	bne.n	800f4e8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800f4e0:	b2da      	uxtb	r2, r3
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800f4e8:	2300      	movs	r3, #0
}
 800f4ea:	4618      	mov	r0, r3
 800f4ec:	370c      	adds	r7, #12
 800f4ee:	46bd      	mov	sp, r7
 800f4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f4:	4770      	bx	lr

0800f4f6 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f4f6:	b580      	push	{r7, lr}
 800f4f8:	b082      	sub	sp, #8
 800f4fa:	af00      	add	r7, sp, #0
 800f4fc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f504:	b2db      	uxtb	r3, r3
 800f506:	2b03      	cmp	r3, #3
 800f508:	d10b      	bne.n	800f522 <USBD_LL_SOF+0x2c>
  {
    if (pdev->pClass->SOF != NULL)
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f510:	69db      	ldr	r3, [r3, #28]
 800f512:	2b00      	cmp	r3, #0
 800f514:	d005      	beq.n	800f522 <USBD_LL_SOF+0x2c>
    {
      pdev->pClass->SOF(pdev);
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f51c:	69db      	ldr	r3, [r3, #28]
 800f51e:	6878      	ldr	r0, [r7, #4]
 800f520:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f522:	2300      	movs	r3, #0
}
 800f524:	4618      	mov	r0, r3
 800f526:	3708      	adds	r7, #8
 800f528:	46bd      	mov	sp, r7
 800f52a:	bd80      	pop	{r7, pc}

0800f52c <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800f52c:	b480      	push	{r7}
 800f52e:	b083      	sub	sp, #12
 800f530:	af00      	add	r7, sp, #0
 800f532:	6078      	str	r0, [r7, #4]
 800f534:	460b      	mov	r3, r1
 800f536:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800f538:	2300      	movs	r3, #0
}
 800f53a:	4618      	mov	r0, r3
 800f53c:	370c      	adds	r7, #12
 800f53e:	46bd      	mov	sp, r7
 800f540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f544:	4770      	bx	lr

0800f546 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800f546:	b480      	push	{r7}
 800f548:	b083      	sub	sp, #12
 800f54a:	af00      	add	r7, sp, #0
 800f54c:	6078      	str	r0, [r7, #4]
 800f54e:	460b      	mov	r3, r1
 800f550:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800f552:	2300      	movs	r3, #0
}
 800f554:	4618      	mov	r0, r3
 800f556:	370c      	adds	r7, #12
 800f558:	46bd      	mov	sp, r7
 800f55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f55e:	4770      	bx	lr

0800f560 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800f560:	b480      	push	{r7}
 800f562:	b083      	sub	sp, #12
 800f564:	af00      	add	r7, sp, #0
 800f566:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f568:	2300      	movs	r3, #0
}
 800f56a:	4618      	mov	r0, r3
 800f56c:	370c      	adds	r7, #12
 800f56e:	46bd      	mov	sp, r7
 800f570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f574:	4770      	bx	lr

0800f576 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800f576:	b580      	push	{r7, lr}
 800f578:	b082      	sub	sp, #8
 800f57a:	af00      	add	r7, sp, #0
 800f57c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	2201      	movs	r2, #1
 800f582:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d009      	beq.n	800f5a4 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f596:	685b      	ldr	r3, [r3, #4]
 800f598:	687a      	ldr	r2, [r7, #4]
 800f59a:	6852      	ldr	r2, [r2, #4]
 800f59c:	b2d2      	uxtb	r2, r2
 800f59e:	4611      	mov	r1, r2
 800f5a0:	6878      	ldr	r0, [r7, #4]
 800f5a2:	4798      	blx	r3
  }

  return USBD_OK;
 800f5a4:	2300      	movs	r3, #0
}
 800f5a6:	4618      	mov	r0, r3
 800f5a8:	3708      	adds	r7, #8
 800f5aa:	46bd      	mov	sp, r7
 800f5ac:	bd80      	pop	{r7, pc}

0800f5ae <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f5ae:	b480      	push	{r7}
 800f5b0:	b087      	sub	sp, #28
 800f5b2:	af00      	add	r7, sp, #0
 800f5b4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f5ba:	697b      	ldr	r3, [r7, #20]
 800f5bc:	781b      	ldrb	r3, [r3, #0]
 800f5be:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f5c0:	697b      	ldr	r3, [r7, #20]
 800f5c2:	3301      	adds	r3, #1
 800f5c4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f5c6:	697b      	ldr	r3, [r7, #20]
 800f5c8:	781b      	ldrb	r3, [r3, #0]
 800f5ca:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f5cc:	8a3b      	ldrh	r3, [r7, #16]
 800f5ce:	021b      	lsls	r3, r3, #8
 800f5d0:	b21a      	sxth	r2, r3
 800f5d2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f5d6:	4313      	orrs	r3, r2
 800f5d8:	b21b      	sxth	r3, r3
 800f5da:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f5dc:	89fb      	ldrh	r3, [r7, #14]
}
 800f5de:	4618      	mov	r0, r3
 800f5e0:	371c      	adds	r7, #28
 800f5e2:	46bd      	mov	sp, r7
 800f5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5e8:	4770      	bx	lr
	...

0800f5ec <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f5ec:	b580      	push	{r7, lr}
 800f5ee:	b084      	sub	sp, #16
 800f5f0:	af00      	add	r7, sp, #0
 800f5f2:	6078      	str	r0, [r7, #4]
 800f5f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f5f6:	2300      	movs	r3, #0
 800f5f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f5fa:	683b      	ldr	r3, [r7, #0]
 800f5fc:	781b      	ldrb	r3, [r3, #0]
 800f5fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f602:	2b40      	cmp	r3, #64	; 0x40
 800f604:	d005      	beq.n	800f612 <USBD_StdDevReq+0x26>
 800f606:	2b40      	cmp	r3, #64	; 0x40
 800f608:	d853      	bhi.n	800f6b2 <USBD_StdDevReq+0xc6>
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d00b      	beq.n	800f626 <USBD_StdDevReq+0x3a>
 800f60e:	2b20      	cmp	r3, #32
 800f610:	d14f      	bne.n	800f6b2 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f618:	689b      	ldr	r3, [r3, #8]
 800f61a:	6839      	ldr	r1, [r7, #0]
 800f61c:	6878      	ldr	r0, [r7, #4]
 800f61e:	4798      	blx	r3
 800f620:	4603      	mov	r3, r0
 800f622:	73fb      	strb	r3, [r7, #15]
    break;
 800f624:	e04a      	b.n	800f6bc <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800f626:	683b      	ldr	r3, [r7, #0]
 800f628:	785b      	ldrb	r3, [r3, #1]
 800f62a:	2b09      	cmp	r3, #9
 800f62c:	d83b      	bhi.n	800f6a6 <USBD_StdDevReq+0xba>
 800f62e:	a201      	add	r2, pc, #4	; (adr r2, 800f634 <USBD_StdDevReq+0x48>)
 800f630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f634:	0800f689 	.word	0x0800f689
 800f638:	0800f69d 	.word	0x0800f69d
 800f63c:	0800f6a7 	.word	0x0800f6a7
 800f640:	0800f693 	.word	0x0800f693
 800f644:	0800f6a7 	.word	0x0800f6a7
 800f648:	0800f667 	.word	0x0800f667
 800f64c:	0800f65d 	.word	0x0800f65d
 800f650:	0800f6a7 	.word	0x0800f6a7
 800f654:	0800f67f 	.word	0x0800f67f
 800f658:	0800f671 	.word	0x0800f671
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800f65c:	6839      	ldr	r1, [r7, #0]
 800f65e:	6878      	ldr	r0, [r7, #4]
 800f660:	f000 f9dc 	bl	800fa1c <USBD_GetDescriptor>
      break;
 800f664:	e024      	b.n	800f6b0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800f666:	6839      	ldr	r1, [r7, #0]
 800f668:	6878      	ldr	r0, [r7, #4]
 800f66a:	f000 fb41 	bl	800fcf0 <USBD_SetAddress>
      break;
 800f66e:	e01f      	b.n	800f6b0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800f670:	6839      	ldr	r1, [r7, #0]
 800f672:	6878      	ldr	r0, [r7, #4]
 800f674:	f000 fb80 	bl	800fd78 <USBD_SetConfig>
 800f678:	4603      	mov	r3, r0
 800f67a:	73fb      	strb	r3, [r7, #15]
      break;
 800f67c:	e018      	b.n	800f6b0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800f67e:	6839      	ldr	r1, [r7, #0]
 800f680:	6878      	ldr	r0, [r7, #4]
 800f682:	f000 fc1f 	bl	800fec4 <USBD_GetConfig>
      break;
 800f686:	e013      	b.n	800f6b0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800f688:	6839      	ldr	r1, [r7, #0]
 800f68a:	6878      	ldr	r0, [r7, #4]
 800f68c:	f000 fc50 	bl	800ff30 <USBD_GetStatus>
      break;
 800f690:	e00e      	b.n	800f6b0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800f692:	6839      	ldr	r1, [r7, #0]
 800f694:	6878      	ldr	r0, [r7, #4]
 800f696:	f000 fc7f 	bl	800ff98 <USBD_SetFeature>
      break;
 800f69a:	e009      	b.n	800f6b0 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800f69c:	6839      	ldr	r1, [r7, #0]
 800f69e:	6878      	ldr	r0, [r7, #4]
 800f6a0:	f000 fc8e 	bl	800ffc0 <USBD_ClrFeature>
      break;
 800f6a4:	e004      	b.n	800f6b0 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800f6a6:	6839      	ldr	r1, [r7, #0]
 800f6a8:	6878      	ldr	r0, [r7, #4]
 800f6aa:	f000 fce5 	bl	8010078 <USBD_CtlError>
      break;
 800f6ae:	bf00      	nop
    }
    break;
 800f6b0:	e004      	b.n	800f6bc <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800f6b2:	6839      	ldr	r1, [r7, #0]
 800f6b4:	6878      	ldr	r0, [r7, #4]
 800f6b6:	f000 fcdf 	bl	8010078 <USBD_CtlError>
    break;
 800f6ba:	bf00      	nop
  }

  return ret;
 800f6bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6be:	4618      	mov	r0, r3
 800f6c0:	3710      	adds	r7, #16
 800f6c2:	46bd      	mov	sp, r7
 800f6c4:	bd80      	pop	{r7, pc}
 800f6c6:	bf00      	nop

0800f6c8 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f6c8:	b580      	push	{r7, lr}
 800f6ca:	b084      	sub	sp, #16
 800f6cc:	af00      	add	r7, sp, #0
 800f6ce:	6078      	str	r0, [r7, #4]
 800f6d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f6d2:	2300      	movs	r3, #0
 800f6d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f6d6:	683b      	ldr	r3, [r7, #0]
 800f6d8:	781b      	ldrb	r3, [r3, #0]
 800f6da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f6de:	2b40      	cmp	r3, #64	; 0x40
 800f6e0:	d005      	beq.n	800f6ee <USBD_StdItfReq+0x26>
 800f6e2:	2b40      	cmp	r3, #64	; 0x40
 800f6e4:	d82f      	bhi.n	800f746 <USBD_StdItfReq+0x7e>
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d001      	beq.n	800f6ee <USBD_StdItfReq+0x26>
 800f6ea:	2b20      	cmp	r3, #32
 800f6ec:	d12b      	bne.n	800f746 <USBD_StdItfReq+0x7e>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f6f4:	b2db      	uxtb	r3, r3
 800f6f6:	3b01      	subs	r3, #1
 800f6f8:	2b02      	cmp	r3, #2
 800f6fa:	d81d      	bhi.n	800f738 <USBD_StdItfReq+0x70>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f6fc:	683b      	ldr	r3, [r7, #0]
 800f6fe:	889b      	ldrh	r3, [r3, #4]
 800f700:	b2db      	uxtb	r3, r3
 800f702:	2b01      	cmp	r3, #1
 800f704:	d813      	bhi.n	800f72e <USBD_StdItfReq+0x66>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f70c:	689b      	ldr	r3, [r3, #8]
 800f70e:	6839      	ldr	r1, [r7, #0]
 800f710:	6878      	ldr	r0, [r7, #4]
 800f712:	4798      	blx	r3
 800f714:	4603      	mov	r3, r0
 800f716:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800f718:	683b      	ldr	r3, [r7, #0]
 800f71a:	88db      	ldrh	r3, [r3, #6]
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d110      	bne.n	800f742 <USBD_StdItfReq+0x7a>
 800f720:	7bfb      	ldrb	r3, [r7, #15]
 800f722:	2b00      	cmp	r3, #0
 800f724:	d10d      	bne.n	800f742 <USBD_StdItfReq+0x7a>
        {
          (void)USBD_CtlSendStatus(pdev);
 800f726:	6878      	ldr	r0, [r7, #4]
 800f728:	f000 fd71 	bl	801020e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800f72c:	e009      	b.n	800f742 <USBD_StdItfReq+0x7a>
        USBD_CtlError(pdev, req);
 800f72e:	6839      	ldr	r1, [r7, #0]
 800f730:	6878      	ldr	r0, [r7, #4]
 800f732:	f000 fca1 	bl	8010078 <USBD_CtlError>
      break;
 800f736:	e004      	b.n	800f742 <USBD_StdItfReq+0x7a>

    default:
      USBD_CtlError(pdev, req);
 800f738:	6839      	ldr	r1, [r7, #0]
 800f73a:	6878      	ldr	r0, [r7, #4]
 800f73c:	f000 fc9c 	bl	8010078 <USBD_CtlError>
      break;
 800f740:	e000      	b.n	800f744 <USBD_StdItfReq+0x7c>
      break;
 800f742:	bf00      	nop
    }
    break;
 800f744:	e004      	b.n	800f750 <USBD_StdItfReq+0x88>

  default:
    USBD_CtlError(pdev, req);
 800f746:	6839      	ldr	r1, [r7, #0]
 800f748:	6878      	ldr	r0, [r7, #4]
 800f74a:	f000 fc95 	bl	8010078 <USBD_CtlError>
    break;
 800f74e:	bf00      	nop
  }

  return ret;
 800f750:	7bfb      	ldrb	r3, [r7, #15]
}
 800f752:	4618      	mov	r0, r3
 800f754:	3710      	adds	r7, #16
 800f756:	46bd      	mov	sp, r7
 800f758:	bd80      	pop	{r7, pc}

0800f75a <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f75a:	b580      	push	{r7, lr}
 800f75c:	b084      	sub	sp, #16
 800f75e:	af00      	add	r7, sp, #0
 800f760:	6078      	str	r0, [r7, #4]
 800f762:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800f764:	2300      	movs	r3, #0
 800f766:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800f768:	683b      	ldr	r3, [r7, #0]
 800f76a:	889b      	ldrh	r3, [r3, #4]
 800f76c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f76e:	683b      	ldr	r3, [r7, #0]
 800f770:	781b      	ldrb	r3, [r3, #0]
 800f772:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f776:	2b40      	cmp	r3, #64	; 0x40
 800f778:	d007      	beq.n	800f78a <USBD_StdEPReq+0x30>
 800f77a:	2b40      	cmp	r3, #64	; 0x40
 800f77c:	f200 8143 	bhi.w	800fa06 <USBD_StdEPReq+0x2ac>
 800f780:	2b00      	cmp	r3, #0
 800f782:	d00c      	beq.n	800f79e <USBD_StdEPReq+0x44>
 800f784:	2b20      	cmp	r3, #32
 800f786:	f040 813e 	bne.w	800fa06 <USBD_StdEPReq+0x2ac>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f790:	689b      	ldr	r3, [r3, #8]
 800f792:	6839      	ldr	r1, [r7, #0]
 800f794:	6878      	ldr	r0, [r7, #4]
 800f796:	4798      	blx	r3
 800f798:	4603      	mov	r3, r0
 800f79a:	73fb      	strb	r3, [r7, #15]
    break;
 800f79c:	e138      	b.n	800fa10 <USBD_StdEPReq+0x2b6>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800f79e:	683b      	ldr	r3, [r7, #0]
 800f7a0:	785b      	ldrb	r3, [r3, #1]
 800f7a2:	2b03      	cmp	r3, #3
 800f7a4:	d007      	beq.n	800f7b6 <USBD_StdEPReq+0x5c>
 800f7a6:	2b03      	cmp	r3, #3
 800f7a8:	f300 8127 	bgt.w	800f9fa <USBD_StdEPReq+0x2a0>
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d07d      	beq.n	800f8ac <USBD_StdEPReq+0x152>
 800f7b0:	2b01      	cmp	r3, #1
 800f7b2:	d03c      	beq.n	800f82e <USBD_StdEPReq+0xd4>
 800f7b4:	e121      	b.n	800f9fa <USBD_StdEPReq+0x2a0>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f7bc:	b2db      	uxtb	r3, r3
 800f7be:	2b02      	cmp	r3, #2
 800f7c0:	d002      	beq.n	800f7c8 <USBD_StdEPReq+0x6e>
 800f7c2:	2b03      	cmp	r3, #3
 800f7c4:	d016      	beq.n	800f7f4 <USBD_StdEPReq+0x9a>
 800f7c6:	e02c      	b.n	800f822 <USBD_StdEPReq+0xc8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f7c8:	7bbb      	ldrb	r3, [r7, #14]
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d00d      	beq.n	800f7ea <USBD_StdEPReq+0x90>
 800f7ce:	7bbb      	ldrb	r3, [r7, #14]
 800f7d0:	2b80      	cmp	r3, #128	; 0x80
 800f7d2:	d00a      	beq.n	800f7ea <USBD_StdEPReq+0x90>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800f7d4:	7bbb      	ldrb	r3, [r7, #14]
 800f7d6:	4619      	mov	r1, r3
 800f7d8:	6878      	ldr	r0, [r7, #4]
 800f7da:	f001 f9b3 	bl	8010b44 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f7de:	2180      	movs	r1, #128	; 0x80
 800f7e0:	6878      	ldr	r0, [r7, #4]
 800f7e2:	f001 f9af 	bl	8010b44 <USBD_LL_StallEP>
 800f7e6:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800f7e8:	e020      	b.n	800f82c <USBD_StdEPReq+0xd2>
          USBD_CtlError(pdev, req);
 800f7ea:	6839      	ldr	r1, [r7, #0]
 800f7ec:	6878      	ldr	r0, [r7, #4]
 800f7ee:	f000 fc43 	bl	8010078 <USBD_CtlError>
        break;
 800f7f2:	e01b      	b.n	800f82c <USBD_StdEPReq+0xd2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800f7f4:	683b      	ldr	r3, [r7, #0]
 800f7f6:	885b      	ldrh	r3, [r3, #2]
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d10e      	bne.n	800f81a <USBD_StdEPReq+0xc0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f7fc:	7bbb      	ldrb	r3, [r7, #14]
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d00b      	beq.n	800f81a <USBD_StdEPReq+0xc0>
 800f802:	7bbb      	ldrb	r3, [r7, #14]
 800f804:	2b80      	cmp	r3, #128	; 0x80
 800f806:	d008      	beq.n	800f81a <USBD_StdEPReq+0xc0>
 800f808:	683b      	ldr	r3, [r7, #0]
 800f80a:	88db      	ldrh	r3, [r3, #6]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d104      	bne.n	800f81a <USBD_StdEPReq+0xc0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800f810:	7bbb      	ldrb	r3, [r7, #14]
 800f812:	4619      	mov	r1, r3
 800f814:	6878      	ldr	r0, [r7, #4]
 800f816:	f001 f995 	bl	8010b44 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800f81a:	6878      	ldr	r0, [r7, #4]
 800f81c:	f000 fcf7 	bl	801020e <USBD_CtlSendStatus>

        break;
 800f820:	e004      	b.n	800f82c <USBD_StdEPReq+0xd2>

      default:
        USBD_CtlError(pdev, req);
 800f822:	6839      	ldr	r1, [r7, #0]
 800f824:	6878      	ldr	r0, [r7, #4]
 800f826:	f000 fc27 	bl	8010078 <USBD_CtlError>
        break;
 800f82a:	bf00      	nop
      }
      break;
 800f82c:	e0ea      	b.n	800fa04 <USBD_StdEPReq+0x2aa>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f834:	b2db      	uxtb	r3, r3
 800f836:	2b02      	cmp	r3, #2
 800f838:	d002      	beq.n	800f840 <USBD_StdEPReq+0xe6>
 800f83a:	2b03      	cmp	r3, #3
 800f83c:	d016      	beq.n	800f86c <USBD_StdEPReq+0x112>
 800f83e:	e02e      	b.n	800f89e <USBD_StdEPReq+0x144>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f840:	7bbb      	ldrb	r3, [r7, #14]
 800f842:	2b00      	cmp	r3, #0
 800f844:	d00d      	beq.n	800f862 <USBD_StdEPReq+0x108>
 800f846:	7bbb      	ldrb	r3, [r7, #14]
 800f848:	2b80      	cmp	r3, #128	; 0x80
 800f84a:	d00a      	beq.n	800f862 <USBD_StdEPReq+0x108>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800f84c:	7bbb      	ldrb	r3, [r7, #14]
 800f84e:	4619      	mov	r1, r3
 800f850:	6878      	ldr	r0, [r7, #4]
 800f852:	f001 f977 	bl	8010b44 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f856:	2180      	movs	r1, #128	; 0x80
 800f858:	6878      	ldr	r0, [r7, #4]
 800f85a:	f001 f973 	bl	8010b44 <USBD_LL_StallEP>
 800f85e:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800f860:	e023      	b.n	800f8aa <USBD_StdEPReq+0x150>
          USBD_CtlError(pdev, req);
 800f862:	6839      	ldr	r1, [r7, #0]
 800f864:	6878      	ldr	r0, [r7, #4]
 800f866:	f000 fc07 	bl	8010078 <USBD_CtlError>
        break;
 800f86a:	e01e      	b.n	800f8aa <USBD_StdEPReq+0x150>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800f86c:	683b      	ldr	r3, [r7, #0]
 800f86e:	885b      	ldrh	r3, [r3, #2]
 800f870:	2b00      	cmp	r3, #0
 800f872:	d119      	bne.n	800f8a8 <USBD_StdEPReq+0x14e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800f874:	7bbb      	ldrb	r3, [r7, #14]
 800f876:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d004      	beq.n	800f888 <USBD_StdEPReq+0x12e>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f87e:	7bbb      	ldrb	r3, [r7, #14]
 800f880:	4619      	mov	r1, r3
 800f882:	6878      	ldr	r0, [r7, #4]
 800f884:	f001 f97d 	bl	8010b82 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800f888:	6878      	ldr	r0, [r7, #4]
 800f88a:	f000 fcc0 	bl	801020e <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f894:	689b      	ldr	r3, [r3, #8]
 800f896:	6839      	ldr	r1, [r7, #0]
 800f898:	6878      	ldr	r0, [r7, #4]
 800f89a:	4798      	blx	r3
        }
        break;
 800f89c:	e004      	b.n	800f8a8 <USBD_StdEPReq+0x14e>

      default:
        USBD_CtlError(pdev, req);
 800f89e:	6839      	ldr	r1, [r7, #0]
 800f8a0:	6878      	ldr	r0, [r7, #4]
 800f8a2:	f000 fbe9 	bl	8010078 <USBD_CtlError>
        break;
 800f8a6:	e000      	b.n	800f8aa <USBD_StdEPReq+0x150>
        break;
 800f8a8:	bf00      	nop
      }
      break;
 800f8aa:	e0ab      	b.n	800fa04 <USBD_StdEPReq+0x2aa>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f8b2:	b2db      	uxtb	r3, r3
 800f8b4:	2b02      	cmp	r3, #2
 800f8b6:	d002      	beq.n	800f8be <USBD_StdEPReq+0x164>
 800f8b8:	2b03      	cmp	r3, #3
 800f8ba:	d032      	beq.n	800f922 <USBD_StdEPReq+0x1c8>
 800f8bc:	e097      	b.n	800f9ee <USBD_StdEPReq+0x294>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f8be:	7bbb      	ldrb	r3, [r7, #14]
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d007      	beq.n	800f8d4 <USBD_StdEPReq+0x17a>
 800f8c4:	7bbb      	ldrb	r3, [r7, #14]
 800f8c6:	2b80      	cmp	r3, #128	; 0x80
 800f8c8:	d004      	beq.n	800f8d4 <USBD_StdEPReq+0x17a>
        {
          USBD_CtlError(pdev, req);
 800f8ca:	6839      	ldr	r1, [r7, #0]
 800f8cc:	6878      	ldr	r0, [r7, #4]
 800f8ce:	f000 fbd3 	bl	8010078 <USBD_CtlError>
          break;
 800f8d2:	e091      	b.n	800f9f8 <USBD_StdEPReq+0x29e>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f8d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	da0b      	bge.n	800f8f4 <USBD_StdEPReq+0x19a>
 800f8dc:	7bbb      	ldrb	r3, [r7, #14]
 800f8de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f8e2:	4613      	mov	r3, r2
 800f8e4:	009b      	lsls	r3, r3, #2
 800f8e6:	4413      	add	r3, r2
 800f8e8:	009b      	lsls	r3, r3, #2
 800f8ea:	3310      	adds	r3, #16
 800f8ec:	687a      	ldr	r2, [r7, #4]
 800f8ee:	4413      	add	r3, r2
 800f8f0:	3304      	adds	r3, #4
 800f8f2:	e00b      	b.n	800f90c <USBD_StdEPReq+0x1b2>
              &pdev->ep_out[ep_addr & 0x7FU];
 800f8f4:	7bbb      	ldrb	r3, [r7, #14]
 800f8f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f8fa:	4613      	mov	r3, r2
 800f8fc:	009b      	lsls	r3, r3, #2
 800f8fe:	4413      	add	r3, r2
 800f900:	009b      	lsls	r3, r3, #2
 800f902:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f906:	687a      	ldr	r2, [r7, #4]
 800f908:	4413      	add	r3, r2
 800f90a:	3304      	adds	r3, #4
 800f90c:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800f90e:	68bb      	ldr	r3, [r7, #8]
 800f910:	2200      	movs	r2, #0
 800f912:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f914:	68bb      	ldr	r3, [r7, #8]
 800f916:	2202      	movs	r2, #2
 800f918:	4619      	mov	r1, r3
 800f91a:	6878      	ldr	r0, [r7, #4]
 800f91c:	f000 fc1d 	bl	801015a <USBD_CtlSendData>
        break;
 800f920:	e06a      	b.n	800f9f8 <USBD_StdEPReq+0x29e>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800f922:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f926:	2b00      	cmp	r3, #0
 800f928:	da11      	bge.n	800f94e <USBD_StdEPReq+0x1f4>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f92a:	7bbb      	ldrb	r3, [r7, #14]
 800f92c:	f003 020f 	and.w	r2, r3, #15
 800f930:	6879      	ldr	r1, [r7, #4]
 800f932:	4613      	mov	r3, r2
 800f934:	009b      	lsls	r3, r3, #2
 800f936:	4413      	add	r3, r2
 800f938:	009b      	lsls	r3, r3, #2
 800f93a:	440b      	add	r3, r1
 800f93c:	3324      	adds	r3, #36	; 0x24
 800f93e:	881b      	ldrh	r3, [r3, #0]
 800f940:	2b00      	cmp	r3, #0
 800f942:	d117      	bne.n	800f974 <USBD_StdEPReq+0x21a>
          {
            USBD_CtlError(pdev, req);
 800f944:	6839      	ldr	r1, [r7, #0]
 800f946:	6878      	ldr	r0, [r7, #4]
 800f948:	f000 fb96 	bl	8010078 <USBD_CtlError>
            break;
 800f94c:	e054      	b.n	800f9f8 <USBD_StdEPReq+0x29e>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f94e:	7bbb      	ldrb	r3, [r7, #14]
 800f950:	f003 020f 	and.w	r2, r3, #15
 800f954:	6879      	ldr	r1, [r7, #4]
 800f956:	4613      	mov	r3, r2
 800f958:	009b      	lsls	r3, r3, #2
 800f95a:	4413      	add	r3, r2
 800f95c:	009b      	lsls	r3, r3, #2
 800f95e:	440b      	add	r3, r1
 800f960:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800f964:	881b      	ldrh	r3, [r3, #0]
 800f966:	2b00      	cmp	r3, #0
 800f968:	d104      	bne.n	800f974 <USBD_StdEPReq+0x21a>
          {
            USBD_CtlError(pdev, req);
 800f96a:	6839      	ldr	r1, [r7, #0]
 800f96c:	6878      	ldr	r0, [r7, #4]
 800f96e:	f000 fb83 	bl	8010078 <USBD_CtlError>
            break;
 800f972:	e041      	b.n	800f9f8 <USBD_StdEPReq+0x29e>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f974:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f978:	2b00      	cmp	r3, #0
 800f97a:	da0b      	bge.n	800f994 <USBD_StdEPReq+0x23a>
 800f97c:	7bbb      	ldrb	r3, [r7, #14]
 800f97e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f982:	4613      	mov	r3, r2
 800f984:	009b      	lsls	r3, r3, #2
 800f986:	4413      	add	r3, r2
 800f988:	009b      	lsls	r3, r3, #2
 800f98a:	3310      	adds	r3, #16
 800f98c:	687a      	ldr	r2, [r7, #4]
 800f98e:	4413      	add	r3, r2
 800f990:	3304      	adds	r3, #4
 800f992:	e00b      	b.n	800f9ac <USBD_StdEPReq+0x252>
              &pdev->ep_out[ep_addr & 0x7FU];
 800f994:	7bbb      	ldrb	r3, [r7, #14]
 800f996:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f99a:	4613      	mov	r3, r2
 800f99c:	009b      	lsls	r3, r3, #2
 800f99e:	4413      	add	r3, r2
 800f9a0:	009b      	lsls	r3, r3, #2
 800f9a2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f9a6:	687a      	ldr	r2, [r7, #4]
 800f9a8:	4413      	add	r3, r2
 800f9aa:	3304      	adds	r3, #4
 800f9ac:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f9ae:	7bbb      	ldrb	r3, [r7, #14]
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d002      	beq.n	800f9ba <USBD_StdEPReq+0x260>
 800f9b4:	7bbb      	ldrb	r3, [r7, #14]
 800f9b6:	2b80      	cmp	r3, #128	; 0x80
 800f9b8:	d103      	bne.n	800f9c2 <USBD_StdEPReq+0x268>
          {
            pep->status = 0x0000U;
 800f9ba:	68bb      	ldr	r3, [r7, #8]
 800f9bc:	2200      	movs	r2, #0
 800f9be:	601a      	str	r2, [r3, #0]
 800f9c0:	e00e      	b.n	800f9e0 <USBD_StdEPReq+0x286>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f9c2:	7bbb      	ldrb	r3, [r7, #14]
 800f9c4:	4619      	mov	r1, r3
 800f9c6:	6878      	ldr	r0, [r7, #4]
 800f9c8:	f001 f8fa 	bl	8010bc0 <USBD_LL_IsStallEP>
 800f9cc:	4603      	mov	r3, r0
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d003      	beq.n	800f9da <USBD_StdEPReq+0x280>
          {
            pep->status = 0x0001U;
 800f9d2:	68bb      	ldr	r3, [r7, #8]
 800f9d4:	2201      	movs	r2, #1
 800f9d6:	601a      	str	r2, [r3, #0]
 800f9d8:	e002      	b.n	800f9e0 <USBD_StdEPReq+0x286>
          }
          else
          {
            pep->status = 0x0000U;
 800f9da:	68bb      	ldr	r3, [r7, #8]
 800f9dc:	2200      	movs	r2, #0
 800f9de:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f9e0:	68bb      	ldr	r3, [r7, #8]
 800f9e2:	2202      	movs	r2, #2
 800f9e4:	4619      	mov	r1, r3
 800f9e6:	6878      	ldr	r0, [r7, #4]
 800f9e8:	f000 fbb7 	bl	801015a <USBD_CtlSendData>
          break;
 800f9ec:	e004      	b.n	800f9f8 <USBD_StdEPReq+0x29e>

      default:
        USBD_CtlError(pdev, req);
 800f9ee:	6839      	ldr	r1, [r7, #0]
 800f9f0:	6878      	ldr	r0, [r7, #4]
 800f9f2:	f000 fb41 	bl	8010078 <USBD_CtlError>
        break;
 800f9f6:	bf00      	nop
      }
      break;
 800f9f8:	e004      	b.n	800fa04 <USBD_StdEPReq+0x2aa>

    default:
      USBD_CtlError(pdev, req);
 800f9fa:	6839      	ldr	r1, [r7, #0]
 800f9fc:	6878      	ldr	r0, [r7, #4]
 800f9fe:	f000 fb3b 	bl	8010078 <USBD_CtlError>
      break;
 800fa02:	bf00      	nop
    }
    break;
 800fa04:	e004      	b.n	800fa10 <USBD_StdEPReq+0x2b6>

  default:
    USBD_CtlError(pdev, req);
 800fa06:	6839      	ldr	r1, [r7, #0]
 800fa08:	6878      	ldr	r0, [r7, #4]
 800fa0a:	f000 fb35 	bl	8010078 <USBD_CtlError>
    break;
 800fa0e:	bf00      	nop
  }

  return ret;
 800fa10:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa12:	4618      	mov	r0, r3
 800fa14:	3710      	adds	r7, #16
 800fa16:	46bd      	mov	sp, r7
 800fa18:	bd80      	pop	{r7, pc}
	...

0800fa1c <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fa1c:	b580      	push	{r7, lr}
 800fa1e:	b084      	sub	sp, #16
 800fa20:	af00      	add	r7, sp, #0
 800fa22:	6078      	str	r0, [r7, #4]
 800fa24:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800fa26:	2300      	movs	r3, #0
 800fa28:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800fa2a:	2300      	movs	r3, #0
 800fa2c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800fa2e:	2300      	movs	r3, #0
 800fa30:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800fa32:	683b      	ldr	r3, [r7, #0]
 800fa34:	885b      	ldrh	r3, [r3, #2]
 800fa36:	0a1b      	lsrs	r3, r3, #8
 800fa38:	b29b      	uxth	r3, r3
 800fa3a:	3b01      	subs	r3, #1
 800fa3c:	2b06      	cmp	r3, #6
 800fa3e:	f200 8128 	bhi.w	800fc92 <USBD_GetDescriptor+0x276>
 800fa42:	a201      	add	r2, pc, #4	; (adr r2, 800fa48 <USBD_GetDescriptor+0x2c>)
 800fa44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa48:	0800fa65 	.word	0x0800fa65
 800fa4c:	0800fa7d 	.word	0x0800fa7d
 800fa50:	0800fabd 	.word	0x0800fabd
 800fa54:	0800fc93 	.word	0x0800fc93
 800fa58:	0800fc93 	.word	0x0800fc93
 800fa5c:	0800fc33 	.word	0x0800fc33
 800fa60:	0800fc5f 	.word	0x0800fc5f
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	687a      	ldr	r2, [r7, #4]
 800fa6e:	7c12      	ldrb	r2, [r2, #16]
 800fa70:	f107 0108 	add.w	r1, r7, #8
 800fa74:	4610      	mov	r0, r2
 800fa76:	4798      	blx	r3
 800fa78:	60f8      	str	r0, [r7, #12]
    break;
 800fa7a:	e112      	b.n	800fca2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	7c1b      	ldrb	r3, [r3, #16]
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d10d      	bne.n	800faa0 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa8c:	f107 0208 	add.w	r2, r7, #8
 800fa90:	4610      	mov	r0, r2
 800fa92:	4798      	blx	r3
 800fa94:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	3301      	adds	r3, #1
 800fa9a:	2202      	movs	r2, #2
 800fa9c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800fa9e:	e100      	b.n	800fca2 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800faa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800faa8:	f107 0208 	add.w	r2, r7, #8
 800faac:	4610      	mov	r0, r2
 800faae:	4798      	blx	r3
 800fab0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	3301      	adds	r3, #1
 800fab6:	2202      	movs	r2, #2
 800fab8:	701a      	strb	r2, [r3, #0]
    break;
 800faba:	e0f2      	b.n	800fca2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800fabc:	683b      	ldr	r3, [r7, #0]
 800fabe:	885b      	ldrh	r3, [r3, #2]
 800fac0:	b2db      	uxtb	r3, r3
 800fac2:	2b05      	cmp	r3, #5
 800fac4:	f200 80ac 	bhi.w	800fc20 <USBD_GetDescriptor+0x204>
 800fac8:	a201      	add	r2, pc, #4	; (adr r2, 800fad0 <USBD_GetDescriptor+0xb4>)
 800faca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800face:	bf00      	nop
 800fad0:	0800fae9 	.word	0x0800fae9
 800fad4:	0800fb1d 	.word	0x0800fb1d
 800fad8:	0800fb51 	.word	0x0800fb51
 800fadc:	0800fb85 	.word	0x0800fb85
 800fae0:	0800fbb9 	.word	0x0800fbb9
 800fae4:	0800fbed 	.word	0x0800fbed
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800faee:	685b      	ldr	r3, [r3, #4]
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d00b      	beq.n	800fb0c <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fafa:	685b      	ldr	r3, [r3, #4]
 800fafc:	687a      	ldr	r2, [r7, #4]
 800fafe:	7c12      	ldrb	r2, [r2, #16]
 800fb00:	f107 0108 	add.w	r1, r7, #8
 800fb04:	4610      	mov	r0, r2
 800fb06:	4798      	blx	r3
 800fb08:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fb0a:	e091      	b.n	800fc30 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800fb0c:	6839      	ldr	r1, [r7, #0]
 800fb0e:	6878      	ldr	r0, [r7, #4]
 800fb10:	f000 fab2 	bl	8010078 <USBD_CtlError>
        err++;
 800fb14:	7afb      	ldrb	r3, [r7, #11]
 800fb16:	3301      	adds	r3, #1
 800fb18:	72fb      	strb	r3, [r7, #11]
      break;
 800fb1a:	e089      	b.n	800fc30 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fb22:	689b      	ldr	r3, [r3, #8]
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d00b      	beq.n	800fb40 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fb2e:	689b      	ldr	r3, [r3, #8]
 800fb30:	687a      	ldr	r2, [r7, #4]
 800fb32:	7c12      	ldrb	r2, [r2, #16]
 800fb34:	f107 0108 	add.w	r1, r7, #8
 800fb38:	4610      	mov	r0, r2
 800fb3a:	4798      	blx	r3
 800fb3c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fb3e:	e077      	b.n	800fc30 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800fb40:	6839      	ldr	r1, [r7, #0]
 800fb42:	6878      	ldr	r0, [r7, #4]
 800fb44:	f000 fa98 	bl	8010078 <USBD_CtlError>
        err++;
 800fb48:	7afb      	ldrb	r3, [r7, #11]
 800fb4a:	3301      	adds	r3, #1
 800fb4c:	72fb      	strb	r3, [r7, #11]
      break;
 800fb4e:	e06f      	b.n	800fc30 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fb56:	68db      	ldr	r3, [r3, #12]
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d00b      	beq.n	800fb74 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fb62:	68db      	ldr	r3, [r3, #12]
 800fb64:	687a      	ldr	r2, [r7, #4]
 800fb66:	7c12      	ldrb	r2, [r2, #16]
 800fb68:	f107 0108 	add.w	r1, r7, #8
 800fb6c:	4610      	mov	r0, r2
 800fb6e:	4798      	blx	r3
 800fb70:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fb72:	e05d      	b.n	800fc30 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800fb74:	6839      	ldr	r1, [r7, #0]
 800fb76:	6878      	ldr	r0, [r7, #4]
 800fb78:	f000 fa7e 	bl	8010078 <USBD_CtlError>
        err++;
 800fb7c:	7afb      	ldrb	r3, [r7, #11]
 800fb7e:	3301      	adds	r3, #1
 800fb80:	72fb      	strb	r3, [r7, #11]
      break;
 800fb82:	e055      	b.n	800fc30 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fb8a:	691b      	ldr	r3, [r3, #16]
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d00b      	beq.n	800fba8 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fb96:	691b      	ldr	r3, [r3, #16]
 800fb98:	687a      	ldr	r2, [r7, #4]
 800fb9a:	7c12      	ldrb	r2, [r2, #16]
 800fb9c:	f107 0108 	add.w	r1, r7, #8
 800fba0:	4610      	mov	r0, r2
 800fba2:	4798      	blx	r3
 800fba4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fba6:	e043      	b.n	800fc30 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800fba8:	6839      	ldr	r1, [r7, #0]
 800fbaa:	6878      	ldr	r0, [r7, #4]
 800fbac:	f000 fa64 	bl	8010078 <USBD_CtlError>
        err++;
 800fbb0:	7afb      	ldrb	r3, [r7, #11]
 800fbb2:	3301      	adds	r3, #1
 800fbb4:	72fb      	strb	r3, [r7, #11]
      break;
 800fbb6:	e03b      	b.n	800fc30 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fbbe:	695b      	ldr	r3, [r3, #20]
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d00b      	beq.n	800fbdc <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fbca:	695b      	ldr	r3, [r3, #20]
 800fbcc:	687a      	ldr	r2, [r7, #4]
 800fbce:	7c12      	ldrb	r2, [r2, #16]
 800fbd0:	f107 0108 	add.w	r1, r7, #8
 800fbd4:	4610      	mov	r0, r2
 800fbd6:	4798      	blx	r3
 800fbd8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fbda:	e029      	b.n	800fc30 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800fbdc:	6839      	ldr	r1, [r7, #0]
 800fbde:	6878      	ldr	r0, [r7, #4]
 800fbe0:	f000 fa4a 	bl	8010078 <USBD_CtlError>
        err++;
 800fbe4:	7afb      	ldrb	r3, [r7, #11]
 800fbe6:	3301      	adds	r3, #1
 800fbe8:	72fb      	strb	r3, [r7, #11]
      break;
 800fbea:	e021      	b.n	800fc30 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fbf2:	699b      	ldr	r3, [r3, #24]
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	d00b      	beq.n	800fc10 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fbfe:	699b      	ldr	r3, [r3, #24]
 800fc00:	687a      	ldr	r2, [r7, #4]
 800fc02:	7c12      	ldrb	r2, [r2, #16]
 800fc04:	f107 0108 	add.w	r1, r7, #8
 800fc08:	4610      	mov	r0, r2
 800fc0a:	4798      	blx	r3
 800fc0c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fc0e:	e00f      	b.n	800fc30 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800fc10:	6839      	ldr	r1, [r7, #0]
 800fc12:	6878      	ldr	r0, [r7, #4]
 800fc14:	f000 fa30 	bl	8010078 <USBD_CtlError>
        err++;
 800fc18:	7afb      	ldrb	r3, [r7, #11]
 800fc1a:	3301      	adds	r3, #1
 800fc1c:	72fb      	strb	r3, [r7, #11]
      break;
 800fc1e:	e007      	b.n	800fc30 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800fc20:	6839      	ldr	r1, [r7, #0]
 800fc22:	6878      	ldr	r0, [r7, #4]
 800fc24:	f000 fa28 	bl	8010078 <USBD_CtlError>
      err++;
 800fc28:	7afb      	ldrb	r3, [r7, #11]
 800fc2a:	3301      	adds	r3, #1
 800fc2c:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800fc2e:	bf00      	nop
    }
    break;
 800fc30:	e037      	b.n	800fca2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	7c1b      	ldrb	r3, [r3, #16]
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d109      	bne.n	800fc4e <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc42:	f107 0208 	add.w	r2, r7, #8
 800fc46:	4610      	mov	r0, r2
 800fc48:	4798      	blx	r3
 800fc4a:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800fc4c:	e029      	b.n	800fca2 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800fc4e:	6839      	ldr	r1, [r7, #0]
 800fc50:	6878      	ldr	r0, [r7, #4]
 800fc52:	f000 fa11 	bl	8010078 <USBD_CtlError>
      err++;
 800fc56:	7afb      	ldrb	r3, [r7, #11]
 800fc58:	3301      	adds	r3, #1
 800fc5a:	72fb      	strb	r3, [r7, #11]
    break;
 800fc5c:	e021      	b.n	800fca2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	7c1b      	ldrb	r3, [r3, #16]
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d10d      	bne.n	800fc82 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc6e:	f107 0208 	add.w	r2, r7, #8
 800fc72:	4610      	mov	r0, r2
 800fc74:	4798      	blx	r3
 800fc76:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	3301      	adds	r3, #1
 800fc7c:	2207      	movs	r2, #7
 800fc7e:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800fc80:	e00f      	b.n	800fca2 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800fc82:	6839      	ldr	r1, [r7, #0]
 800fc84:	6878      	ldr	r0, [r7, #4]
 800fc86:	f000 f9f7 	bl	8010078 <USBD_CtlError>
      err++;
 800fc8a:	7afb      	ldrb	r3, [r7, #11]
 800fc8c:	3301      	adds	r3, #1
 800fc8e:	72fb      	strb	r3, [r7, #11]
    break;
 800fc90:	e007      	b.n	800fca2 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800fc92:	6839      	ldr	r1, [r7, #0]
 800fc94:	6878      	ldr	r0, [r7, #4]
 800fc96:	f000 f9ef 	bl	8010078 <USBD_CtlError>
    err++;
 800fc9a:	7afb      	ldrb	r3, [r7, #11]
 800fc9c:	3301      	adds	r3, #1
 800fc9e:	72fb      	strb	r3, [r7, #11]
    break;
 800fca0:	bf00      	nop
  }

  if (err != 0U)
 800fca2:	7afb      	ldrb	r3, [r7, #11]
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d11e      	bne.n	800fce6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800fca8:	683b      	ldr	r3, [r7, #0]
 800fcaa:	88db      	ldrh	r3, [r3, #6]
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d016      	beq.n	800fcde <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800fcb0:	893b      	ldrh	r3, [r7, #8]
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d00e      	beq.n	800fcd4 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800fcb6:	683b      	ldr	r3, [r7, #0]
 800fcb8:	88da      	ldrh	r2, [r3, #6]
 800fcba:	893b      	ldrh	r3, [r7, #8]
 800fcbc:	4293      	cmp	r3, r2
 800fcbe:	bf28      	it	cs
 800fcc0:	4613      	movcs	r3, r2
 800fcc2:	b29b      	uxth	r3, r3
 800fcc4:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800fcc6:	893b      	ldrh	r3, [r7, #8]
 800fcc8:	461a      	mov	r2, r3
 800fcca:	68f9      	ldr	r1, [r7, #12]
 800fccc:	6878      	ldr	r0, [r7, #4]
 800fcce:	f000 fa44 	bl	801015a <USBD_CtlSendData>
 800fcd2:	e009      	b.n	800fce8 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800fcd4:	6839      	ldr	r1, [r7, #0]
 800fcd6:	6878      	ldr	r0, [r7, #4]
 800fcd8:	f000 f9ce 	bl	8010078 <USBD_CtlError>
 800fcdc:	e004      	b.n	800fce8 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800fcde:	6878      	ldr	r0, [r7, #4]
 800fce0:	f000 fa95 	bl	801020e <USBD_CtlSendStatus>
 800fce4:	e000      	b.n	800fce8 <USBD_GetDescriptor+0x2cc>
    return;
 800fce6:	bf00      	nop
    }
  }
}
 800fce8:	3710      	adds	r7, #16
 800fcea:	46bd      	mov	sp, r7
 800fcec:	bd80      	pop	{r7, pc}
 800fcee:	bf00      	nop

0800fcf0 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fcf0:	b580      	push	{r7, lr}
 800fcf2:	b084      	sub	sp, #16
 800fcf4:	af00      	add	r7, sp, #0
 800fcf6:	6078      	str	r0, [r7, #4]
 800fcf8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800fcfa:	683b      	ldr	r3, [r7, #0]
 800fcfc:	889b      	ldrh	r3, [r3, #4]
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d131      	bne.n	800fd66 <USBD_SetAddress+0x76>
 800fd02:	683b      	ldr	r3, [r7, #0]
 800fd04:	88db      	ldrh	r3, [r3, #6]
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d12d      	bne.n	800fd66 <USBD_SetAddress+0x76>
 800fd0a:	683b      	ldr	r3, [r7, #0]
 800fd0c:	885b      	ldrh	r3, [r3, #2]
 800fd0e:	2b7f      	cmp	r3, #127	; 0x7f
 800fd10:	d829      	bhi.n	800fd66 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800fd12:	683b      	ldr	r3, [r7, #0]
 800fd14:	885b      	ldrh	r3, [r3, #2]
 800fd16:	b2db      	uxtb	r3, r3
 800fd18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fd1c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fd24:	b2db      	uxtb	r3, r3
 800fd26:	2b03      	cmp	r3, #3
 800fd28:	d104      	bne.n	800fd34 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800fd2a:	6839      	ldr	r1, [r7, #0]
 800fd2c:	6878      	ldr	r0, [r7, #4]
 800fd2e:	f000 f9a3 	bl	8010078 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fd32:	e01d      	b.n	800fd70 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	7bfa      	ldrb	r2, [r7, #15]
 800fd38:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800fd3c:	7bfb      	ldrb	r3, [r7, #15]
 800fd3e:	4619      	mov	r1, r3
 800fd40:	6878      	ldr	r0, [r7, #4]
 800fd42:	f000 ff69 	bl	8010c18 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800fd46:	6878      	ldr	r0, [r7, #4]
 800fd48:	f000 fa61 	bl	801020e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800fd4c:	7bfb      	ldrb	r3, [r7, #15]
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d004      	beq.n	800fd5c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	2202      	movs	r2, #2
 800fd56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fd5a:	e009      	b.n	800fd70 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	2201      	movs	r2, #1
 800fd60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fd64:	e004      	b.n	800fd70 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800fd66:	6839      	ldr	r1, [r7, #0]
 800fd68:	6878      	ldr	r0, [r7, #4]
 800fd6a:	f000 f985 	bl	8010078 <USBD_CtlError>
  }
}
 800fd6e:	bf00      	nop
 800fd70:	bf00      	nop
 800fd72:	3710      	adds	r7, #16
 800fd74:	46bd      	mov	sp, r7
 800fd76:	bd80      	pop	{r7, pc}

0800fd78 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fd78:	b580      	push	{r7, lr}
 800fd7a:	b084      	sub	sp, #16
 800fd7c:	af00      	add	r7, sp, #0
 800fd7e:	6078      	str	r0, [r7, #4]
 800fd80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fd82:	2300      	movs	r3, #0
 800fd84:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800fd86:	683b      	ldr	r3, [r7, #0]
 800fd88:	885b      	ldrh	r3, [r3, #2]
 800fd8a:	b2da      	uxtb	r2, r3
 800fd8c:	4b4c      	ldr	r3, [pc, #304]	; (800fec0 <USBD_SetConfig+0x148>)
 800fd8e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800fd90:	4b4b      	ldr	r3, [pc, #300]	; (800fec0 <USBD_SetConfig+0x148>)
 800fd92:	781b      	ldrb	r3, [r3, #0]
 800fd94:	2b01      	cmp	r3, #1
 800fd96:	d905      	bls.n	800fda4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800fd98:	6839      	ldr	r1, [r7, #0]
 800fd9a:	6878      	ldr	r0, [r7, #4]
 800fd9c:	f000 f96c 	bl	8010078 <USBD_CtlError>
    return USBD_FAIL;
 800fda0:	2303      	movs	r3, #3
 800fda2:	e088      	b.n	800feb6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fdaa:	b2db      	uxtb	r3, r3
 800fdac:	2b02      	cmp	r3, #2
 800fdae:	d002      	beq.n	800fdb6 <USBD_SetConfig+0x3e>
 800fdb0:	2b03      	cmp	r3, #3
 800fdb2:	d025      	beq.n	800fe00 <USBD_SetConfig+0x88>
 800fdb4:	e071      	b.n	800fe9a <USBD_SetConfig+0x122>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800fdb6:	4b42      	ldr	r3, [pc, #264]	; (800fec0 <USBD_SetConfig+0x148>)
 800fdb8:	781b      	ldrb	r3, [r3, #0]
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d01c      	beq.n	800fdf8 <USBD_SetConfig+0x80>
    {
      pdev->dev_config = cfgidx;
 800fdbe:	4b40      	ldr	r3, [pc, #256]	; (800fec0 <USBD_SetConfig+0x148>)
 800fdc0:	781b      	ldrb	r3, [r3, #0]
 800fdc2:	461a      	mov	r2, r3
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800fdc8:	4b3d      	ldr	r3, [pc, #244]	; (800fec0 <USBD_SetConfig+0x148>)
 800fdca:	781b      	ldrb	r3, [r3, #0]
 800fdcc:	4619      	mov	r1, r3
 800fdce:	6878      	ldr	r0, [r7, #4]
 800fdd0:	f7ff f98c 	bl	800f0ec <USBD_SetClassConfig>
 800fdd4:	4603      	mov	r3, r0
 800fdd6:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800fdd8:	7bfb      	ldrb	r3, [r7, #15]
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d004      	beq.n	800fde8 <USBD_SetConfig+0x70>
      {
        USBD_CtlError(pdev, req);
 800fdde:	6839      	ldr	r1, [r7, #0]
 800fde0:	6878      	ldr	r0, [r7, #4]
 800fde2:	f000 f949 	bl	8010078 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800fde6:	e065      	b.n	800feb4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800fde8:	6878      	ldr	r0, [r7, #4]
 800fdea:	f000 fa10 	bl	801020e <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	2203      	movs	r2, #3
 800fdf2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800fdf6:	e05d      	b.n	800feb4 <USBD_SetConfig+0x13c>
      (void)USBD_CtlSendStatus(pdev);
 800fdf8:	6878      	ldr	r0, [r7, #4]
 800fdfa:	f000 fa08 	bl	801020e <USBD_CtlSendStatus>
    break;
 800fdfe:	e059      	b.n	800feb4 <USBD_SetConfig+0x13c>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800fe00:	4b2f      	ldr	r3, [pc, #188]	; (800fec0 <USBD_SetConfig+0x148>)
 800fe02:	781b      	ldrb	r3, [r3, #0]
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d112      	bne.n	800fe2e <USBD_SetConfig+0xb6>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	2202      	movs	r2, #2
 800fe0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800fe10:	4b2b      	ldr	r3, [pc, #172]	; (800fec0 <USBD_SetConfig+0x148>)
 800fe12:	781b      	ldrb	r3, [r3, #0]
 800fe14:	461a      	mov	r2, r3
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fe1a:	4b29      	ldr	r3, [pc, #164]	; (800fec0 <USBD_SetConfig+0x148>)
 800fe1c:	781b      	ldrb	r3, [r3, #0]
 800fe1e:	4619      	mov	r1, r3
 800fe20:	6878      	ldr	r0, [r7, #4]
 800fe22:	f7ff f97f 	bl	800f124 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800fe26:	6878      	ldr	r0, [r7, #4]
 800fe28:	f000 f9f1 	bl	801020e <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800fe2c:	e042      	b.n	800feb4 <USBD_SetConfig+0x13c>
    else if (cfgidx != pdev->dev_config)
 800fe2e:	4b24      	ldr	r3, [pc, #144]	; (800fec0 <USBD_SetConfig+0x148>)
 800fe30:	781b      	ldrb	r3, [r3, #0]
 800fe32:	461a      	mov	r2, r3
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	685b      	ldr	r3, [r3, #4]
 800fe38:	429a      	cmp	r2, r3
 800fe3a:	d02a      	beq.n	800fe92 <USBD_SetConfig+0x11a>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	685b      	ldr	r3, [r3, #4]
 800fe40:	b2db      	uxtb	r3, r3
 800fe42:	4619      	mov	r1, r3
 800fe44:	6878      	ldr	r0, [r7, #4]
 800fe46:	f7ff f96d 	bl	800f124 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800fe4a:	4b1d      	ldr	r3, [pc, #116]	; (800fec0 <USBD_SetConfig+0x148>)
 800fe4c:	781b      	ldrb	r3, [r3, #0]
 800fe4e:	461a      	mov	r2, r3
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800fe54:	4b1a      	ldr	r3, [pc, #104]	; (800fec0 <USBD_SetConfig+0x148>)
 800fe56:	781b      	ldrb	r3, [r3, #0]
 800fe58:	4619      	mov	r1, r3
 800fe5a:	6878      	ldr	r0, [r7, #4]
 800fe5c:	f7ff f946 	bl	800f0ec <USBD_SetClassConfig>
 800fe60:	4603      	mov	r3, r0
 800fe62:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800fe64:	7bfb      	ldrb	r3, [r7, #15]
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d00f      	beq.n	800fe8a <USBD_SetConfig+0x112>
        USBD_CtlError(pdev, req);
 800fe6a:	6839      	ldr	r1, [r7, #0]
 800fe6c:	6878      	ldr	r0, [r7, #4]
 800fe6e:	f000 f903 	bl	8010078 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	685b      	ldr	r3, [r3, #4]
 800fe76:	b2db      	uxtb	r3, r3
 800fe78:	4619      	mov	r1, r3
 800fe7a:	6878      	ldr	r0, [r7, #4]
 800fe7c:	f7ff f952 	bl	800f124 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	2202      	movs	r2, #2
 800fe84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800fe88:	e014      	b.n	800feb4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800fe8a:	6878      	ldr	r0, [r7, #4]
 800fe8c:	f000 f9bf 	bl	801020e <USBD_CtlSendStatus>
    break;
 800fe90:	e010      	b.n	800feb4 <USBD_SetConfig+0x13c>
      (void)USBD_CtlSendStatus(pdev);
 800fe92:	6878      	ldr	r0, [r7, #4]
 800fe94:	f000 f9bb 	bl	801020e <USBD_CtlSendStatus>
    break;
 800fe98:	e00c      	b.n	800feb4 <USBD_SetConfig+0x13c>

  default:
    USBD_CtlError(pdev, req);
 800fe9a:	6839      	ldr	r1, [r7, #0]
 800fe9c:	6878      	ldr	r0, [r7, #4]
 800fe9e:	f000 f8eb 	bl	8010078 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fea2:	4b07      	ldr	r3, [pc, #28]	; (800fec0 <USBD_SetConfig+0x148>)
 800fea4:	781b      	ldrb	r3, [r3, #0]
 800fea6:	4619      	mov	r1, r3
 800fea8:	6878      	ldr	r0, [r7, #4]
 800feaa:	f7ff f93b 	bl	800f124 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800feae:	2303      	movs	r3, #3
 800feb0:	73fb      	strb	r3, [r7, #15]
    break;
 800feb2:	bf00      	nop
  }

  return ret;
 800feb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800feb6:	4618      	mov	r0, r3
 800feb8:	3710      	adds	r7, #16
 800feba:	46bd      	mov	sp, r7
 800febc:	bd80      	pop	{r7, pc}
 800febe:	bf00      	nop
 800fec0:	24000818 	.word	0x24000818

0800fec4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fec4:	b580      	push	{r7, lr}
 800fec6:	b082      	sub	sp, #8
 800fec8:	af00      	add	r7, sp, #0
 800feca:	6078      	str	r0, [r7, #4]
 800fecc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800fece:	683b      	ldr	r3, [r7, #0]
 800fed0:	88db      	ldrh	r3, [r3, #6]
 800fed2:	2b01      	cmp	r3, #1
 800fed4:	d004      	beq.n	800fee0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800fed6:	6839      	ldr	r1, [r7, #0]
 800fed8:	6878      	ldr	r0, [r7, #4]
 800feda:	f000 f8cd 	bl	8010078 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800fede:	e023      	b.n	800ff28 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fee6:	b2db      	uxtb	r3, r3
 800fee8:	2b02      	cmp	r3, #2
 800feea:	dc02      	bgt.n	800fef2 <USBD_GetConfig+0x2e>
 800feec:	2b00      	cmp	r3, #0
 800feee:	dc03      	bgt.n	800fef8 <USBD_GetConfig+0x34>
 800fef0:	e015      	b.n	800ff1e <USBD_GetConfig+0x5a>
 800fef2:	2b03      	cmp	r3, #3
 800fef4:	d00b      	beq.n	800ff0e <USBD_GetConfig+0x4a>
 800fef6:	e012      	b.n	800ff1e <USBD_GetConfig+0x5a>
      pdev->dev_default_config = 0U;
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	2200      	movs	r2, #0
 800fefc:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	3308      	adds	r3, #8
 800ff02:	2201      	movs	r2, #1
 800ff04:	4619      	mov	r1, r3
 800ff06:	6878      	ldr	r0, [r7, #4]
 800ff08:	f000 f927 	bl	801015a <USBD_CtlSendData>
      break;
 800ff0c:	e00c      	b.n	800ff28 <USBD_GetConfig+0x64>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	3304      	adds	r3, #4
 800ff12:	2201      	movs	r2, #1
 800ff14:	4619      	mov	r1, r3
 800ff16:	6878      	ldr	r0, [r7, #4]
 800ff18:	f000 f91f 	bl	801015a <USBD_CtlSendData>
      break;
 800ff1c:	e004      	b.n	800ff28 <USBD_GetConfig+0x64>
      USBD_CtlError(pdev, req);
 800ff1e:	6839      	ldr	r1, [r7, #0]
 800ff20:	6878      	ldr	r0, [r7, #4]
 800ff22:	f000 f8a9 	bl	8010078 <USBD_CtlError>
      break;
 800ff26:	bf00      	nop
}
 800ff28:	bf00      	nop
 800ff2a:	3708      	adds	r7, #8
 800ff2c:	46bd      	mov	sp, r7
 800ff2e:	bd80      	pop	{r7, pc}

0800ff30 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ff30:	b580      	push	{r7, lr}
 800ff32:	b082      	sub	sp, #8
 800ff34:	af00      	add	r7, sp, #0
 800ff36:	6078      	str	r0, [r7, #4]
 800ff38:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ff40:	b2db      	uxtb	r3, r3
 800ff42:	3b01      	subs	r3, #1
 800ff44:	2b02      	cmp	r3, #2
 800ff46:	d81e      	bhi.n	800ff86 <USBD_GetStatus+0x56>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800ff48:	683b      	ldr	r3, [r7, #0]
 800ff4a:	88db      	ldrh	r3, [r3, #6]
 800ff4c:	2b02      	cmp	r3, #2
 800ff4e:	d004      	beq.n	800ff5a <USBD_GetStatus+0x2a>
    {
      USBD_CtlError(pdev, req);
 800ff50:	6839      	ldr	r1, [r7, #0]
 800ff52:	6878      	ldr	r0, [r7, #4]
 800ff54:	f000 f890 	bl	8010078 <USBD_CtlError>
      break;
 800ff58:	e01a      	b.n	800ff90 <USBD_GetStatus+0x60>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	2201      	movs	r2, #1
 800ff5e:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d005      	beq.n	800ff76 <USBD_GetStatus+0x46>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	68db      	ldr	r3, [r3, #12]
 800ff6e:	f043 0202 	orr.w	r2, r3, #2
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	330c      	adds	r3, #12
 800ff7a:	2202      	movs	r2, #2
 800ff7c:	4619      	mov	r1, r3
 800ff7e:	6878      	ldr	r0, [r7, #4]
 800ff80:	f000 f8eb 	bl	801015a <USBD_CtlSendData>
    break;
 800ff84:	e004      	b.n	800ff90 <USBD_GetStatus+0x60>

  default:
    USBD_CtlError(pdev, req);
 800ff86:	6839      	ldr	r1, [r7, #0]
 800ff88:	6878      	ldr	r0, [r7, #4]
 800ff8a:	f000 f875 	bl	8010078 <USBD_CtlError>
    break;
 800ff8e:	bf00      	nop
  }
}
 800ff90:	bf00      	nop
 800ff92:	3708      	adds	r7, #8
 800ff94:	46bd      	mov	sp, r7
 800ff96:	bd80      	pop	{r7, pc}

0800ff98 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ff98:	b580      	push	{r7, lr}
 800ff9a:	b082      	sub	sp, #8
 800ff9c:	af00      	add	r7, sp, #0
 800ff9e:	6078      	str	r0, [r7, #4]
 800ffa0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ffa2:	683b      	ldr	r3, [r7, #0]
 800ffa4:	885b      	ldrh	r3, [r3, #2]
 800ffa6:	2b01      	cmp	r3, #1
 800ffa8:	d106      	bne.n	800ffb8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	2201      	movs	r2, #1
 800ffae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ffb2:	6878      	ldr	r0, [r7, #4]
 800ffb4:	f000 f92b 	bl	801020e <USBD_CtlSendStatus>
  }
}
 800ffb8:	bf00      	nop
 800ffba:	3708      	adds	r7, #8
 800ffbc:	46bd      	mov	sp, r7
 800ffbe:	bd80      	pop	{r7, pc}

0800ffc0 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ffc0:	b580      	push	{r7, lr}
 800ffc2:	b082      	sub	sp, #8
 800ffc4:	af00      	add	r7, sp, #0
 800ffc6:	6078      	str	r0, [r7, #4]
 800ffc8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ffd0:	b2db      	uxtb	r3, r3
 800ffd2:	3b01      	subs	r3, #1
 800ffd4:	2b02      	cmp	r3, #2
 800ffd6:	d80b      	bhi.n	800fff0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ffd8:	683b      	ldr	r3, [r7, #0]
 800ffda:	885b      	ldrh	r3, [r3, #2]
 800ffdc:	2b01      	cmp	r3, #1
 800ffde:	d10c      	bne.n	800fffa <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	2200      	movs	r2, #0
 800ffe4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ffe8:	6878      	ldr	r0, [r7, #4]
 800ffea:	f000 f910 	bl	801020e <USBD_CtlSendStatus>
      }
      break;
 800ffee:	e004      	b.n	800fffa <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800fff0:	6839      	ldr	r1, [r7, #0]
 800fff2:	6878      	ldr	r0, [r7, #4]
 800fff4:	f000 f840 	bl	8010078 <USBD_CtlError>
      break;
 800fff8:	e000      	b.n	800fffc <USBD_ClrFeature+0x3c>
      break;
 800fffa:	bf00      	nop
  }
}
 800fffc:	bf00      	nop
 800fffe:	3708      	adds	r7, #8
 8010000:	46bd      	mov	sp, r7
 8010002:	bd80      	pop	{r7, pc}

08010004 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8010004:	b580      	push	{r7, lr}
 8010006:	b084      	sub	sp, #16
 8010008:	af00      	add	r7, sp, #0
 801000a:	6078      	str	r0, [r7, #4]
 801000c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801000e:	683b      	ldr	r3, [r7, #0]
 8010010:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	781a      	ldrb	r2, [r3, #0]
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801001a:	68fb      	ldr	r3, [r7, #12]
 801001c:	3301      	adds	r3, #1
 801001e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	781a      	ldrb	r2, [r3, #0]
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	3301      	adds	r3, #1
 801002c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801002e:	68f8      	ldr	r0, [r7, #12]
 8010030:	f7ff fabd 	bl	800f5ae <SWAPBYTE>
 8010034:	4603      	mov	r3, r0
 8010036:	461a      	mov	r2, r3
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	3301      	adds	r3, #1
 8010040:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	3301      	adds	r3, #1
 8010046:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8010048:	68f8      	ldr	r0, [r7, #12]
 801004a:	f7ff fab0 	bl	800f5ae <SWAPBYTE>
 801004e:	4603      	mov	r3, r0
 8010050:	461a      	mov	r2, r3
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	3301      	adds	r3, #1
 801005a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	3301      	adds	r3, #1
 8010060:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8010062:	68f8      	ldr	r0, [r7, #12]
 8010064:	f7ff faa3 	bl	800f5ae <SWAPBYTE>
 8010068:	4603      	mov	r3, r0
 801006a:	461a      	mov	r2, r3
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	80da      	strh	r2, [r3, #6]
}
 8010070:	bf00      	nop
 8010072:	3710      	adds	r7, #16
 8010074:	46bd      	mov	sp, r7
 8010076:	bd80      	pop	{r7, pc}

08010078 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010078:	b580      	push	{r7, lr}
 801007a:	b082      	sub	sp, #8
 801007c:	af00      	add	r7, sp, #0
 801007e:	6078      	str	r0, [r7, #4]
 8010080:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010082:	2180      	movs	r1, #128	; 0x80
 8010084:	6878      	ldr	r0, [r7, #4]
 8010086:	f000 fd5d 	bl	8010b44 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801008a:	2100      	movs	r1, #0
 801008c:	6878      	ldr	r0, [r7, #4]
 801008e:	f000 fd59 	bl	8010b44 <USBD_LL_StallEP>
}
 8010092:	bf00      	nop
 8010094:	3708      	adds	r7, #8
 8010096:	46bd      	mov	sp, r7
 8010098:	bd80      	pop	{r7, pc}

0801009a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801009a:	b580      	push	{r7, lr}
 801009c:	b086      	sub	sp, #24
 801009e:	af00      	add	r7, sp, #0
 80100a0:	60f8      	str	r0, [r7, #12]
 80100a2:	60b9      	str	r1, [r7, #8]
 80100a4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80100a6:	2300      	movs	r3, #0
 80100a8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d036      	beq.n	801011e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80100b4:	6938      	ldr	r0, [r7, #16]
 80100b6:	f000 f836 	bl	8010126 <USBD_GetLen>
 80100ba:	4603      	mov	r3, r0
 80100bc:	3301      	adds	r3, #1
 80100be:	b29b      	uxth	r3, r3
 80100c0:	005b      	lsls	r3, r3, #1
 80100c2:	b29a      	uxth	r2, r3
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80100c8:	7dfb      	ldrb	r3, [r7, #23]
 80100ca:	68ba      	ldr	r2, [r7, #8]
 80100cc:	4413      	add	r3, r2
 80100ce:	687a      	ldr	r2, [r7, #4]
 80100d0:	7812      	ldrb	r2, [r2, #0]
 80100d2:	701a      	strb	r2, [r3, #0]
  idx++;
 80100d4:	7dfb      	ldrb	r3, [r7, #23]
 80100d6:	3301      	adds	r3, #1
 80100d8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80100da:	7dfb      	ldrb	r3, [r7, #23]
 80100dc:	68ba      	ldr	r2, [r7, #8]
 80100de:	4413      	add	r3, r2
 80100e0:	2203      	movs	r2, #3
 80100e2:	701a      	strb	r2, [r3, #0]
  idx++;
 80100e4:	7dfb      	ldrb	r3, [r7, #23]
 80100e6:	3301      	adds	r3, #1
 80100e8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80100ea:	e013      	b.n	8010114 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80100ec:	7dfb      	ldrb	r3, [r7, #23]
 80100ee:	68ba      	ldr	r2, [r7, #8]
 80100f0:	4413      	add	r3, r2
 80100f2:	693a      	ldr	r2, [r7, #16]
 80100f4:	7812      	ldrb	r2, [r2, #0]
 80100f6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80100f8:	693b      	ldr	r3, [r7, #16]
 80100fa:	3301      	adds	r3, #1
 80100fc:	613b      	str	r3, [r7, #16]
    idx++;
 80100fe:	7dfb      	ldrb	r3, [r7, #23]
 8010100:	3301      	adds	r3, #1
 8010102:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8010104:	7dfb      	ldrb	r3, [r7, #23]
 8010106:	68ba      	ldr	r2, [r7, #8]
 8010108:	4413      	add	r3, r2
 801010a:	2200      	movs	r2, #0
 801010c:	701a      	strb	r2, [r3, #0]
    idx++;
 801010e:	7dfb      	ldrb	r3, [r7, #23]
 8010110:	3301      	adds	r3, #1
 8010112:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8010114:	693b      	ldr	r3, [r7, #16]
 8010116:	781b      	ldrb	r3, [r3, #0]
 8010118:	2b00      	cmp	r3, #0
 801011a:	d1e7      	bne.n	80100ec <USBD_GetString+0x52>
 801011c:	e000      	b.n	8010120 <USBD_GetString+0x86>
    return;
 801011e:	bf00      	nop
  }
}
 8010120:	3718      	adds	r7, #24
 8010122:	46bd      	mov	sp, r7
 8010124:	bd80      	pop	{r7, pc}

08010126 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8010126:	b480      	push	{r7}
 8010128:	b085      	sub	sp, #20
 801012a:	af00      	add	r7, sp, #0
 801012c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801012e:	2300      	movs	r3, #0
 8010130:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8010136:	e005      	b.n	8010144 <USBD_GetLen+0x1e>
  {
    len++;
 8010138:	7bfb      	ldrb	r3, [r7, #15]
 801013a:	3301      	adds	r3, #1
 801013c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801013e:	68bb      	ldr	r3, [r7, #8]
 8010140:	3301      	adds	r3, #1
 8010142:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8010144:	68bb      	ldr	r3, [r7, #8]
 8010146:	781b      	ldrb	r3, [r3, #0]
 8010148:	2b00      	cmp	r3, #0
 801014a:	d1f5      	bne.n	8010138 <USBD_GetLen+0x12>
  }

  return len;
 801014c:	7bfb      	ldrb	r3, [r7, #15]
}
 801014e:	4618      	mov	r0, r3
 8010150:	3714      	adds	r7, #20
 8010152:	46bd      	mov	sp, r7
 8010154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010158:	4770      	bx	lr

0801015a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801015a:	b580      	push	{r7, lr}
 801015c:	b084      	sub	sp, #16
 801015e:	af00      	add	r7, sp, #0
 8010160:	60f8      	str	r0, [r7, #12]
 8010162:	60b9      	str	r1, [r7, #8]
 8010164:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	2202      	movs	r2, #2
 801016a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	687a      	ldr	r2, [r7, #4]
 8010172:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	687a      	ldr	r2, [r7, #4]
 8010178:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	68ba      	ldr	r2, [r7, #8]
 801017e:	2100      	movs	r1, #0
 8010180:	68f8      	ldr	r0, [r7, #12]
 8010182:	f000 fd68 	bl	8010c56 <USBD_LL_Transmit>

  return USBD_OK;
 8010186:	2300      	movs	r3, #0
}
 8010188:	4618      	mov	r0, r3
 801018a:	3710      	adds	r7, #16
 801018c:	46bd      	mov	sp, r7
 801018e:	bd80      	pop	{r7, pc}

08010190 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8010190:	b580      	push	{r7, lr}
 8010192:	b084      	sub	sp, #16
 8010194:	af00      	add	r7, sp, #0
 8010196:	60f8      	str	r0, [r7, #12]
 8010198:	60b9      	str	r1, [r7, #8]
 801019a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	68ba      	ldr	r2, [r7, #8]
 80101a0:	2100      	movs	r1, #0
 80101a2:	68f8      	ldr	r0, [r7, #12]
 80101a4:	f000 fd57 	bl	8010c56 <USBD_LL_Transmit>

  return USBD_OK;
 80101a8:	2300      	movs	r3, #0
}
 80101aa:	4618      	mov	r0, r3
 80101ac:	3710      	adds	r7, #16
 80101ae:	46bd      	mov	sp, r7
 80101b0:	bd80      	pop	{r7, pc}

080101b2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80101b2:	b580      	push	{r7, lr}
 80101b4:	b084      	sub	sp, #16
 80101b6:	af00      	add	r7, sp, #0
 80101b8:	60f8      	str	r0, [r7, #12]
 80101ba:	60b9      	str	r1, [r7, #8]
 80101bc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80101be:	68fb      	ldr	r3, [r7, #12]
 80101c0:	2203      	movs	r2, #3
 80101c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	687a      	ldr	r2, [r7, #4]
 80101ca:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	687a      	ldr	r2, [r7, #4]
 80101d2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	68ba      	ldr	r2, [r7, #8]
 80101da:	2100      	movs	r1, #0
 80101dc:	68f8      	ldr	r0, [r7, #12]
 80101de:	f000 fd5b 	bl	8010c98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80101e2:	2300      	movs	r3, #0
}
 80101e4:	4618      	mov	r0, r3
 80101e6:	3710      	adds	r7, #16
 80101e8:	46bd      	mov	sp, r7
 80101ea:	bd80      	pop	{r7, pc}

080101ec <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80101ec:	b580      	push	{r7, lr}
 80101ee:	b084      	sub	sp, #16
 80101f0:	af00      	add	r7, sp, #0
 80101f2:	60f8      	str	r0, [r7, #12]
 80101f4:	60b9      	str	r1, [r7, #8]
 80101f6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	68ba      	ldr	r2, [r7, #8]
 80101fc:	2100      	movs	r1, #0
 80101fe:	68f8      	ldr	r0, [r7, #12]
 8010200:	f000 fd4a 	bl	8010c98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010204:	2300      	movs	r3, #0
}
 8010206:	4618      	mov	r0, r3
 8010208:	3710      	adds	r7, #16
 801020a:	46bd      	mov	sp, r7
 801020c:	bd80      	pop	{r7, pc}

0801020e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801020e:	b580      	push	{r7, lr}
 8010210:	b082      	sub	sp, #8
 8010212:	af00      	add	r7, sp, #0
 8010214:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	2204      	movs	r2, #4
 801021a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801021e:	2300      	movs	r3, #0
 8010220:	2200      	movs	r2, #0
 8010222:	2100      	movs	r1, #0
 8010224:	6878      	ldr	r0, [r7, #4]
 8010226:	f000 fd16 	bl	8010c56 <USBD_LL_Transmit>

  return USBD_OK;
 801022a:	2300      	movs	r3, #0
}
 801022c:	4618      	mov	r0, r3
 801022e:	3708      	adds	r7, #8
 8010230:	46bd      	mov	sp, r7
 8010232:	bd80      	pop	{r7, pc}

08010234 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8010234:	b580      	push	{r7, lr}
 8010236:	b082      	sub	sp, #8
 8010238:	af00      	add	r7, sp, #0
 801023a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	2205      	movs	r2, #5
 8010240:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010244:	2300      	movs	r3, #0
 8010246:	2200      	movs	r2, #0
 8010248:	2100      	movs	r1, #0
 801024a:	6878      	ldr	r0, [r7, #4]
 801024c:	f000 fd24 	bl	8010c98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010250:	2300      	movs	r3, #0
}
 8010252:	4618      	mov	r0, r3
 8010254:	3708      	adds	r7, #8
 8010256:	46bd      	mov	sp, r7
 8010258:	bd80      	pop	{r7, pc}
	...

0801025c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801025c:	b580      	push	{r7, lr}
 801025e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8010260:	2200      	movs	r2, #0
 8010262:	4913      	ldr	r1, [pc, #76]	; (80102b0 <MX_USB_DEVICE_Init+0x54>)
 8010264:	4813      	ldr	r0, [pc, #76]	; (80102b4 <MX_USB_DEVICE_Init+0x58>)
 8010266:	f7fe fed3 	bl	800f010 <USBD_Init>
 801026a:	4603      	mov	r3, r0
 801026c:	2b00      	cmp	r3, #0
 801026e:	d001      	beq.n	8010274 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8010270:	f7f0 fe52 	bl	8000f18 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8010274:	4910      	ldr	r1, [pc, #64]	; (80102b8 <MX_USB_DEVICE_Init+0x5c>)
 8010276:	480f      	ldr	r0, [pc, #60]	; (80102b4 <MX_USB_DEVICE_Init+0x58>)
 8010278:	f7fe ff00 	bl	800f07c <USBD_RegisterClass>
 801027c:	4603      	mov	r3, r0
 801027e:	2b00      	cmp	r3, #0
 8010280:	d001      	beq.n	8010286 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8010282:	f7f0 fe49 	bl	8000f18 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8010286:	490d      	ldr	r1, [pc, #52]	; (80102bc <MX_USB_DEVICE_Init+0x60>)
 8010288:	480a      	ldr	r0, [pc, #40]	; (80102b4 <MX_USB_DEVICE_Init+0x58>)
 801028a:	f7fe fe25 	bl	800eed8 <USBD_CDC_RegisterInterface>
 801028e:	4603      	mov	r3, r0
 8010290:	2b00      	cmp	r3, #0
 8010292:	d001      	beq.n	8010298 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8010294:	f7f0 fe40 	bl	8000f18 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8010298:	4806      	ldr	r0, [pc, #24]	; (80102b4 <MX_USB_DEVICE_Init+0x58>)
 801029a:	f7fe ff10 	bl	800f0be <USBD_Start>
 801029e:	4603      	mov	r3, r0
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d001      	beq.n	80102a8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80102a4:	f7f0 fe38 	bl	8000f18 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80102a8:	f7f7 f9f8 	bl	800769c <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80102ac:	bf00      	nop
 80102ae:	bd80      	pop	{r7, pc}
 80102b0:	2400014c 	.word	0x2400014c
 80102b4:	2400081c 	.word	0x2400081c
 80102b8:	24000034 	.word	0x24000034
 80102bc:	24000138 	.word	0x24000138

080102c0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80102c0:	b580      	push	{r7, lr}
 80102c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80102c4:	2200      	movs	r2, #0
 80102c6:	4905      	ldr	r1, [pc, #20]	; (80102dc <CDC_Init_FS+0x1c>)
 80102c8:	4805      	ldr	r0, [pc, #20]	; (80102e0 <CDC_Init_FS+0x20>)
 80102ca:	f7fe fe1a 	bl	800ef02 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80102ce:	4905      	ldr	r1, [pc, #20]	; (80102e4 <CDC_Init_FS+0x24>)
 80102d0:	4803      	ldr	r0, [pc, #12]	; (80102e0 <CDC_Init_FS+0x20>)
 80102d2:	f7fe fe2f 	bl	800ef34 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80102d6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80102d8:	4618      	mov	r0, r3
 80102da:	bd80      	pop	{r7, pc}
 80102dc:	240012ec 	.word	0x240012ec
 80102e0:	2400081c 	.word	0x2400081c
 80102e4:	24000aec 	.word	0x24000aec

080102e8 <CDC_Class_Init_Ok>:


uint8_t CDC_Class_Init_Ok(void)
{
 80102e8:	b480      	push	{r7}
 80102ea:	af00      	add	r7, sp, #0
	return hUsbDeviceFS.pClassData;
 80102ec:	4b04      	ldr	r3, [pc, #16]	; (8010300 <CDC_Class_Init_Ok+0x18>)
 80102ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80102f2:	b2db      	uxtb	r3, r3
}
 80102f4:	4618      	mov	r0, r3
 80102f6:	46bd      	mov	sp, r7
 80102f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102fc:	4770      	bx	lr
 80102fe:	bf00      	nop
 8010300:	2400081c 	.word	0x2400081c

08010304 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010304:	b480      	push	{r7}
 8010306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010308:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801030a:	4618      	mov	r0, r3
 801030c:	46bd      	mov	sp, r7
 801030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010312:	4770      	bx	lr

08010314 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010314:	b480      	push	{r7}
 8010316:	b083      	sub	sp, #12
 8010318:	af00      	add	r7, sp, #0
 801031a:	4603      	mov	r3, r0
 801031c:	6039      	str	r1, [r7, #0]
 801031e:	71fb      	strb	r3, [r7, #7]
 8010320:	4613      	mov	r3, r2
 8010322:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8010324:	79fb      	ldrb	r3, [r7, #7]
 8010326:	2b23      	cmp	r3, #35	; 0x23
 8010328:	f200 808c 	bhi.w	8010444 <CDC_Control_FS+0x130>
 801032c:	a201      	add	r2, pc, #4	; (adr r2, 8010334 <CDC_Control_FS+0x20>)
 801032e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010332:	bf00      	nop
 8010334:	08010445 	.word	0x08010445
 8010338:	08010445 	.word	0x08010445
 801033c:	08010445 	.word	0x08010445
 8010340:	08010445 	.word	0x08010445
 8010344:	08010445 	.word	0x08010445
 8010348:	08010445 	.word	0x08010445
 801034c:	08010445 	.word	0x08010445
 8010350:	08010445 	.word	0x08010445
 8010354:	08010445 	.word	0x08010445
 8010358:	08010445 	.word	0x08010445
 801035c:	08010445 	.word	0x08010445
 8010360:	08010445 	.word	0x08010445
 8010364:	08010445 	.word	0x08010445
 8010368:	08010445 	.word	0x08010445
 801036c:	08010445 	.word	0x08010445
 8010370:	08010445 	.word	0x08010445
 8010374:	08010445 	.word	0x08010445
 8010378:	08010445 	.word	0x08010445
 801037c:	08010445 	.word	0x08010445
 8010380:	08010445 	.word	0x08010445
 8010384:	08010445 	.word	0x08010445
 8010388:	08010445 	.word	0x08010445
 801038c:	08010445 	.word	0x08010445
 8010390:	08010445 	.word	0x08010445
 8010394:	08010445 	.word	0x08010445
 8010398:	08010445 	.word	0x08010445
 801039c:	08010445 	.word	0x08010445
 80103a0:	08010445 	.word	0x08010445
 80103a4:	08010445 	.word	0x08010445
 80103a8:	08010445 	.word	0x08010445
 80103ac:	08010445 	.word	0x08010445
 80103b0:	08010445 	.word	0x08010445
 80103b4:	080103c5 	.word	0x080103c5
 80103b8:	080103ff 	.word	0x080103ff
 80103bc:	08010445 	.word	0x08010445
 80103c0:	08010445 	.word	0x08010445
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      tempbuf[0]=pbuf[0];
 80103c4:	683b      	ldr	r3, [r7, #0]
 80103c6:	781a      	ldrb	r2, [r3, #0]
 80103c8:	4b22      	ldr	r3, [pc, #136]	; (8010454 <CDC_Control_FS+0x140>)
 80103ca:	701a      	strb	r2, [r3, #0]
      tempbuf[1]=pbuf[1];
 80103cc:	683b      	ldr	r3, [r7, #0]
 80103ce:	785a      	ldrb	r2, [r3, #1]
 80103d0:	4b20      	ldr	r3, [pc, #128]	; (8010454 <CDC_Control_FS+0x140>)
 80103d2:	705a      	strb	r2, [r3, #1]
      tempbuf[2]=pbuf[2];
 80103d4:	683b      	ldr	r3, [r7, #0]
 80103d6:	789a      	ldrb	r2, [r3, #2]
 80103d8:	4b1e      	ldr	r3, [pc, #120]	; (8010454 <CDC_Control_FS+0x140>)
 80103da:	709a      	strb	r2, [r3, #2]
      tempbuf[3]=pbuf[3];
 80103dc:	683b      	ldr	r3, [r7, #0]
 80103de:	78da      	ldrb	r2, [r3, #3]
 80103e0:	4b1c      	ldr	r3, [pc, #112]	; (8010454 <CDC_Control_FS+0x140>)
 80103e2:	70da      	strb	r2, [r3, #3]
      tempbuf[4]=pbuf[4];
 80103e4:	683b      	ldr	r3, [r7, #0]
 80103e6:	791a      	ldrb	r2, [r3, #4]
 80103e8:	4b1a      	ldr	r3, [pc, #104]	; (8010454 <CDC_Control_FS+0x140>)
 80103ea:	711a      	strb	r2, [r3, #4]
      tempbuf[5]=pbuf[5];
 80103ec:	683b      	ldr	r3, [r7, #0]
 80103ee:	795a      	ldrb	r2, [r3, #5]
 80103f0:	4b18      	ldr	r3, [pc, #96]	; (8010454 <CDC_Control_FS+0x140>)
 80103f2:	715a      	strb	r2, [r3, #5]
      tempbuf[6]=pbuf[6];
 80103f4:	683b      	ldr	r3, [r7, #0]
 80103f6:	799a      	ldrb	r2, [r3, #6]
 80103f8:	4b16      	ldr	r3, [pc, #88]	; (8010454 <CDC_Control_FS+0x140>)
 80103fa:	719a      	strb	r2, [r3, #6]

    break;
 80103fc:	e023      	b.n	8010446 <CDC_Control_FS+0x132>

    case CDC_GET_LINE_CODING:
      pbuf[0]=tempbuf[0];
 80103fe:	4b15      	ldr	r3, [pc, #84]	; (8010454 <CDC_Control_FS+0x140>)
 8010400:	781a      	ldrb	r2, [r3, #0]
 8010402:	683b      	ldr	r3, [r7, #0]
 8010404:	701a      	strb	r2, [r3, #0]
      pbuf[1]=tempbuf[1];
 8010406:	683b      	ldr	r3, [r7, #0]
 8010408:	3301      	adds	r3, #1
 801040a:	4a12      	ldr	r2, [pc, #72]	; (8010454 <CDC_Control_FS+0x140>)
 801040c:	7852      	ldrb	r2, [r2, #1]
 801040e:	701a      	strb	r2, [r3, #0]
      pbuf[2]=tempbuf[2];
 8010410:	683b      	ldr	r3, [r7, #0]
 8010412:	3302      	adds	r3, #2
 8010414:	4a0f      	ldr	r2, [pc, #60]	; (8010454 <CDC_Control_FS+0x140>)
 8010416:	7892      	ldrb	r2, [r2, #2]
 8010418:	701a      	strb	r2, [r3, #0]
      pbuf[3]=tempbuf[3];
 801041a:	683b      	ldr	r3, [r7, #0]
 801041c:	3303      	adds	r3, #3
 801041e:	4a0d      	ldr	r2, [pc, #52]	; (8010454 <CDC_Control_FS+0x140>)
 8010420:	78d2      	ldrb	r2, [r2, #3]
 8010422:	701a      	strb	r2, [r3, #0]
      pbuf[4]=tempbuf[4];
 8010424:	683b      	ldr	r3, [r7, #0]
 8010426:	3304      	adds	r3, #4
 8010428:	4a0a      	ldr	r2, [pc, #40]	; (8010454 <CDC_Control_FS+0x140>)
 801042a:	7912      	ldrb	r2, [r2, #4]
 801042c:	701a      	strb	r2, [r3, #0]
      pbuf[5]=tempbuf[5];
 801042e:	683b      	ldr	r3, [r7, #0]
 8010430:	3305      	adds	r3, #5
 8010432:	4a08      	ldr	r2, [pc, #32]	; (8010454 <CDC_Control_FS+0x140>)
 8010434:	7952      	ldrb	r2, [r2, #5]
 8010436:	701a      	strb	r2, [r3, #0]
      pbuf[6]=tempbuf[6];
 8010438:	683b      	ldr	r3, [r7, #0]
 801043a:	3306      	adds	r3, #6
 801043c:	4a05      	ldr	r2, [pc, #20]	; (8010454 <CDC_Control_FS+0x140>)
 801043e:	7992      	ldrb	r2, [r2, #6]
 8010440:	701a      	strb	r2, [r3, #0]

    break;
 8010442:	e000      	b.n	8010446 <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010444:	bf00      	nop
  }

  return (USBD_OK);
 8010446:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010448:	4618      	mov	r0, r3
 801044a:	370c      	adds	r7, #12
 801044c:	46bd      	mov	sp, r7
 801044e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010452:	4770      	bx	lr
 8010454:	24001aec 	.word	0x24001aec

08010458 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010458:	b580      	push	{r7, lr}
 801045a:	b084      	sub	sp, #16
 801045c:	af00      	add	r7, sp, #0
 801045e:	6078      	str	r0, [r7, #4]
 8010460:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8010462:	6879      	ldr	r1, [r7, #4]
 8010464:	4809      	ldr	r0, [pc, #36]	; (801048c <CDC_Receive_FS+0x34>)
 8010466:	f7fe fd65 	bl	800ef34 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801046a:	4808      	ldr	r0, [pc, #32]	; (801048c <CDC_Receive_FS+0x34>)
 801046c:	f7fe fda6 	bl	800efbc <USBD_CDC_ReceivePacket>
  uint16_t len = *Len;
 8010470:	683b      	ldr	r3, [r7, #0]
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	81fb      	strh	r3, [r7, #14]
  CDC_Transmit_FS(Buf, len);
 8010476:	89fb      	ldrh	r3, [r7, #14]
 8010478:	4619      	mov	r1, r3
 801047a:	6878      	ldr	r0, [r7, #4]
 801047c:	f000 f808 	bl	8010490 <CDC_Transmit_FS>
  return (USBD_OK);
 8010480:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8010482:	4618      	mov	r0, r3
 8010484:	3710      	adds	r7, #16
 8010486:	46bd      	mov	sp, r7
 8010488:	bd80      	pop	{r7, pc}
 801048a:	bf00      	nop
 801048c:	2400081c 	.word	0x2400081c

08010490 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8010490:	b580      	push	{r7, lr}
 8010492:	b084      	sub	sp, #16
 8010494:	af00      	add	r7, sp, #0
 8010496:	6078      	str	r0, [r7, #4]
 8010498:	460b      	mov	r3, r1
 801049a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801049c:	2300      	movs	r3, #0
 801049e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80104a0:	4b0d      	ldr	r3, [pc, #52]	; (80104d8 <CDC_Transmit_FS+0x48>)
 80104a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80104a6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80104a8:	68bb      	ldr	r3, [r7, #8]
 80104aa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d001      	beq.n	80104b6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80104b2:	2301      	movs	r3, #1
 80104b4:	e00b      	b.n	80104ce <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80104b6:	887b      	ldrh	r3, [r7, #2]
 80104b8:	461a      	mov	r2, r3
 80104ba:	6879      	ldr	r1, [r7, #4]
 80104bc:	4806      	ldr	r0, [pc, #24]	; (80104d8 <CDC_Transmit_FS+0x48>)
 80104be:	f7fe fd20 	bl	800ef02 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80104c2:	4805      	ldr	r0, [pc, #20]	; (80104d8 <CDC_Transmit_FS+0x48>)
 80104c4:	f7fe fd4a 	bl	800ef5c <USBD_CDC_TransmitPacket>
 80104c8:	4603      	mov	r3, r0
 80104ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80104cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80104ce:	4618      	mov	r0, r3
 80104d0:	3710      	adds	r7, #16
 80104d2:	46bd      	mov	sp, r7
 80104d4:	bd80      	pop	{r7, pc}
 80104d6:	bf00      	nop
 80104d8:	2400081c 	.word	0x2400081c

080104dc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80104dc:	b480      	push	{r7}
 80104de:	b087      	sub	sp, #28
 80104e0:	af00      	add	r7, sp, #0
 80104e2:	60f8      	str	r0, [r7, #12]
 80104e4:	60b9      	str	r1, [r7, #8]
 80104e6:	4613      	mov	r3, r2
 80104e8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80104ea:	2300      	movs	r3, #0
 80104ec:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80104ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80104f2:	4618      	mov	r0, r3
 80104f4:	371c      	adds	r7, #28
 80104f6:	46bd      	mov	sp, r7
 80104f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104fc:	4770      	bx	lr
	...

08010500 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010500:	b480      	push	{r7}
 8010502:	b083      	sub	sp, #12
 8010504:	af00      	add	r7, sp, #0
 8010506:	4603      	mov	r3, r0
 8010508:	6039      	str	r1, [r7, #0]
 801050a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801050c:	683b      	ldr	r3, [r7, #0]
 801050e:	2212      	movs	r2, #18
 8010510:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8010512:	4b03      	ldr	r3, [pc, #12]	; (8010520 <USBD_FS_DeviceDescriptor+0x20>)
}
 8010514:	4618      	mov	r0, r3
 8010516:	370c      	adds	r7, #12
 8010518:	46bd      	mov	sp, r7
 801051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801051e:	4770      	bx	lr
 8010520:	24000168 	.word	0x24000168

08010524 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010524:	b480      	push	{r7}
 8010526:	b083      	sub	sp, #12
 8010528:	af00      	add	r7, sp, #0
 801052a:	4603      	mov	r3, r0
 801052c:	6039      	str	r1, [r7, #0]
 801052e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010530:	683b      	ldr	r3, [r7, #0]
 8010532:	2204      	movs	r2, #4
 8010534:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010536:	4b03      	ldr	r3, [pc, #12]	; (8010544 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010538:	4618      	mov	r0, r3
 801053a:	370c      	adds	r7, #12
 801053c:	46bd      	mov	sp, r7
 801053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010542:	4770      	bx	lr
 8010544:	2400017c 	.word	0x2400017c

08010548 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010548:	b580      	push	{r7, lr}
 801054a:	b082      	sub	sp, #8
 801054c:	af00      	add	r7, sp, #0
 801054e:	4603      	mov	r3, r0
 8010550:	6039      	str	r1, [r7, #0]
 8010552:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010554:	79fb      	ldrb	r3, [r7, #7]
 8010556:	2b00      	cmp	r3, #0
 8010558:	d105      	bne.n	8010566 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801055a:	683a      	ldr	r2, [r7, #0]
 801055c:	4907      	ldr	r1, [pc, #28]	; (801057c <USBD_FS_ProductStrDescriptor+0x34>)
 801055e:	4808      	ldr	r0, [pc, #32]	; (8010580 <USBD_FS_ProductStrDescriptor+0x38>)
 8010560:	f7ff fd9b 	bl	801009a <USBD_GetString>
 8010564:	e004      	b.n	8010570 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010566:	683a      	ldr	r2, [r7, #0]
 8010568:	4904      	ldr	r1, [pc, #16]	; (801057c <USBD_FS_ProductStrDescriptor+0x34>)
 801056a:	4805      	ldr	r0, [pc, #20]	; (8010580 <USBD_FS_ProductStrDescriptor+0x38>)
 801056c:	f7ff fd95 	bl	801009a <USBD_GetString>
  }
  return USBD_StrDesc;
 8010570:	4b02      	ldr	r3, [pc, #8]	; (801057c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8010572:	4618      	mov	r0, r3
 8010574:	3708      	adds	r7, #8
 8010576:	46bd      	mov	sp, r7
 8010578:	bd80      	pop	{r7, pc}
 801057a:	bf00      	nop
 801057c:	24001af4 	.word	0x24001af4
 8010580:	08013a60 	.word	0x08013a60

08010584 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010584:	b580      	push	{r7, lr}
 8010586:	b082      	sub	sp, #8
 8010588:	af00      	add	r7, sp, #0
 801058a:	4603      	mov	r3, r0
 801058c:	6039      	str	r1, [r7, #0]
 801058e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010590:	683a      	ldr	r2, [r7, #0]
 8010592:	4904      	ldr	r1, [pc, #16]	; (80105a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010594:	4804      	ldr	r0, [pc, #16]	; (80105a8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010596:	f7ff fd80 	bl	801009a <USBD_GetString>
  return USBD_StrDesc;
 801059a:	4b02      	ldr	r3, [pc, #8]	; (80105a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801059c:	4618      	mov	r0, r3
 801059e:	3708      	adds	r7, #8
 80105a0:	46bd      	mov	sp, r7
 80105a2:	bd80      	pop	{r7, pc}
 80105a4:	24001af4 	.word	0x24001af4
 80105a8:	08013a78 	.word	0x08013a78

080105ac <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80105ac:	b580      	push	{r7, lr}
 80105ae:	b082      	sub	sp, #8
 80105b0:	af00      	add	r7, sp, #0
 80105b2:	4603      	mov	r3, r0
 80105b4:	6039      	str	r1, [r7, #0]
 80105b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80105b8:	683b      	ldr	r3, [r7, #0]
 80105ba:	221a      	movs	r2, #26
 80105bc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80105be:	f000 f843 	bl	8010648 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80105c2:	4b02      	ldr	r3, [pc, #8]	; (80105cc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80105c4:	4618      	mov	r0, r3
 80105c6:	3708      	adds	r7, #8
 80105c8:	46bd      	mov	sp, r7
 80105ca:	bd80      	pop	{r7, pc}
 80105cc:	24000180 	.word	0x24000180

080105d0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80105d0:	b580      	push	{r7, lr}
 80105d2:	b082      	sub	sp, #8
 80105d4:	af00      	add	r7, sp, #0
 80105d6:	4603      	mov	r3, r0
 80105d8:	6039      	str	r1, [r7, #0]
 80105da:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80105dc:	79fb      	ldrb	r3, [r7, #7]
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d105      	bne.n	80105ee <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80105e2:	683a      	ldr	r2, [r7, #0]
 80105e4:	4907      	ldr	r1, [pc, #28]	; (8010604 <USBD_FS_ConfigStrDescriptor+0x34>)
 80105e6:	4808      	ldr	r0, [pc, #32]	; (8010608 <USBD_FS_ConfigStrDescriptor+0x38>)
 80105e8:	f7ff fd57 	bl	801009a <USBD_GetString>
 80105ec:	e004      	b.n	80105f8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80105ee:	683a      	ldr	r2, [r7, #0]
 80105f0:	4904      	ldr	r1, [pc, #16]	; (8010604 <USBD_FS_ConfigStrDescriptor+0x34>)
 80105f2:	4805      	ldr	r0, [pc, #20]	; (8010608 <USBD_FS_ConfigStrDescriptor+0x38>)
 80105f4:	f7ff fd51 	bl	801009a <USBD_GetString>
  }
  return USBD_StrDesc;
 80105f8:	4b02      	ldr	r3, [pc, #8]	; (8010604 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80105fa:	4618      	mov	r0, r3
 80105fc:	3708      	adds	r7, #8
 80105fe:	46bd      	mov	sp, r7
 8010600:	bd80      	pop	{r7, pc}
 8010602:	bf00      	nop
 8010604:	24001af4 	.word	0x24001af4
 8010608:	08013a8c 	.word	0x08013a8c

0801060c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801060c:	b580      	push	{r7, lr}
 801060e:	b082      	sub	sp, #8
 8010610:	af00      	add	r7, sp, #0
 8010612:	4603      	mov	r3, r0
 8010614:	6039      	str	r1, [r7, #0]
 8010616:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010618:	79fb      	ldrb	r3, [r7, #7]
 801061a:	2b00      	cmp	r3, #0
 801061c:	d105      	bne.n	801062a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801061e:	683a      	ldr	r2, [r7, #0]
 8010620:	4907      	ldr	r1, [pc, #28]	; (8010640 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010622:	4808      	ldr	r0, [pc, #32]	; (8010644 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010624:	f7ff fd39 	bl	801009a <USBD_GetString>
 8010628:	e004      	b.n	8010634 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801062a:	683a      	ldr	r2, [r7, #0]
 801062c:	4904      	ldr	r1, [pc, #16]	; (8010640 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801062e:	4805      	ldr	r0, [pc, #20]	; (8010644 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010630:	f7ff fd33 	bl	801009a <USBD_GetString>
  }
  return USBD_StrDesc;
 8010634:	4b02      	ldr	r3, [pc, #8]	; (8010640 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010636:	4618      	mov	r0, r3
 8010638:	3708      	adds	r7, #8
 801063a:	46bd      	mov	sp, r7
 801063c:	bd80      	pop	{r7, pc}
 801063e:	bf00      	nop
 8010640:	24001af4 	.word	0x24001af4
 8010644:	08013a98 	.word	0x08013a98

08010648 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010648:	b580      	push	{r7, lr}
 801064a:	b084      	sub	sp, #16
 801064c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801064e:	4b0f      	ldr	r3, [pc, #60]	; (801068c <Get_SerialNum+0x44>)
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010654:	4b0e      	ldr	r3, [pc, #56]	; (8010690 <Get_SerialNum+0x48>)
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801065a:	4b0e      	ldr	r3, [pc, #56]	; (8010694 <Get_SerialNum+0x4c>)
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010660:	68fa      	ldr	r2, [r7, #12]
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	4413      	add	r3, r2
 8010666:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	2b00      	cmp	r3, #0
 801066c:	d009      	beq.n	8010682 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801066e:	2208      	movs	r2, #8
 8010670:	4909      	ldr	r1, [pc, #36]	; (8010698 <Get_SerialNum+0x50>)
 8010672:	68f8      	ldr	r0, [r7, #12]
 8010674:	f000 f814 	bl	80106a0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010678:	2204      	movs	r2, #4
 801067a:	4908      	ldr	r1, [pc, #32]	; (801069c <Get_SerialNum+0x54>)
 801067c:	68b8      	ldr	r0, [r7, #8]
 801067e:	f000 f80f 	bl	80106a0 <IntToUnicode>
  }
}
 8010682:	bf00      	nop
 8010684:	3710      	adds	r7, #16
 8010686:	46bd      	mov	sp, r7
 8010688:	bd80      	pop	{r7, pc}
 801068a:	bf00      	nop
 801068c:	1ff1e800 	.word	0x1ff1e800
 8010690:	1ff1e804 	.word	0x1ff1e804
 8010694:	1ff1e808 	.word	0x1ff1e808
 8010698:	24000182 	.word	0x24000182
 801069c:	24000192 	.word	0x24000192

080106a0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80106a0:	b480      	push	{r7}
 80106a2:	b087      	sub	sp, #28
 80106a4:	af00      	add	r7, sp, #0
 80106a6:	60f8      	str	r0, [r7, #12]
 80106a8:	60b9      	str	r1, [r7, #8]
 80106aa:	4613      	mov	r3, r2
 80106ac:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80106ae:	2300      	movs	r3, #0
 80106b0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80106b2:	2300      	movs	r3, #0
 80106b4:	75fb      	strb	r3, [r7, #23]
 80106b6:	e027      	b.n	8010708 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80106b8:	68fb      	ldr	r3, [r7, #12]
 80106ba:	0f1b      	lsrs	r3, r3, #28
 80106bc:	2b09      	cmp	r3, #9
 80106be:	d80b      	bhi.n	80106d8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80106c0:	68fb      	ldr	r3, [r7, #12]
 80106c2:	0f1b      	lsrs	r3, r3, #28
 80106c4:	b2da      	uxtb	r2, r3
 80106c6:	7dfb      	ldrb	r3, [r7, #23]
 80106c8:	005b      	lsls	r3, r3, #1
 80106ca:	4619      	mov	r1, r3
 80106cc:	68bb      	ldr	r3, [r7, #8]
 80106ce:	440b      	add	r3, r1
 80106d0:	3230      	adds	r2, #48	; 0x30
 80106d2:	b2d2      	uxtb	r2, r2
 80106d4:	701a      	strb	r2, [r3, #0]
 80106d6:	e00a      	b.n	80106ee <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	0f1b      	lsrs	r3, r3, #28
 80106dc:	b2da      	uxtb	r2, r3
 80106de:	7dfb      	ldrb	r3, [r7, #23]
 80106e0:	005b      	lsls	r3, r3, #1
 80106e2:	4619      	mov	r1, r3
 80106e4:	68bb      	ldr	r3, [r7, #8]
 80106e6:	440b      	add	r3, r1
 80106e8:	3237      	adds	r2, #55	; 0x37
 80106ea:	b2d2      	uxtb	r2, r2
 80106ec:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	011b      	lsls	r3, r3, #4
 80106f2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80106f4:	7dfb      	ldrb	r3, [r7, #23]
 80106f6:	005b      	lsls	r3, r3, #1
 80106f8:	3301      	adds	r3, #1
 80106fa:	68ba      	ldr	r2, [r7, #8]
 80106fc:	4413      	add	r3, r2
 80106fe:	2200      	movs	r2, #0
 8010700:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010702:	7dfb      	ldrb	r3, [r7, #23]
 8010704:	3301      	adds	r3, #1
 8010706:	75fb      	strb	r3, [r7, #23]
 8010708:	7dfa      	ldrb	r2, [r7, #23]
 801070a:	79fb      	ldrb	r3, [r7, #7]
 801070c:	429a      	cmp	r2, r3
 801070e:	d3d3      	bcc.n	80106b8 <IntToUnicode+0x18>
  }
}
 8010710:	bf00      	nop
 8010712:	bf00      	nop
 8010714:	371c      	adds	r7, #28
 8010716:	46bd      	mov	sp, r7
 8010718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801071c:	4770      	bx	lr
	...

08010720 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010720:	b580      	push	{r7, lr}
 8010722:	b0b8      	sub	sp, #224	; 0xe0
 8010724:	af00      	add	r7, sp, #0
 8010726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010728:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801072c:	2200      	movs	r2, #0
 801072e:	601a      	str	r2, [r3, #0]
 8010730:	605a      	str	r2, [r3, #4]
 8010732:	609a      	str	r2, [r3, #8]
 8010734:	60da      	str	r2, [r3, #12]
 8010736:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8010738:	f107 0310 	add.w	r3, r7, #16
 801073c:	22bc      	movs	r2, #188	; 0xbc
 801073e:	2100      	movs	r1, #0
 8010740:	4618      	mov	r0, r3
 8010742:	f000 fb51 	bl	8010de8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	4a2a      	ldr	r2, [pc, #168]	; (80107f4 <HAL_PCD_MspInit+0xd4>)
 801074c:	4293      	cmp	r3, r2
 801074e:	d14c      	bne.n	80107ea <HAL_PCD_MspInit+0xca>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

     /* USER CODE END SPI1_MspInit 0 */
     /** Initializes the peripherals clock
     */
       PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8010750:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010754:	613b      	str	r3, [r7, #16]
      PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8010756:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 801075a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
          if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801075e:	f107 0310 	add.w	r3, r7, #16
 8010762:	4618      	mov	r0, r3
 8010764:	f7f7 ff86 	bl	8008674 <HAL_RCCEx_PeriphCLKConfig>
 8010768:	4603      	mov	r3, r0
 801076a:	2b00      	cmp	r3, #0
 801076c:	d001      	beq.n	8010772 <HAL_PCD_MspInit+0x52>
          {
            Error_Handler();
 801076e:	f7f0 fbd3 	bl	8000f18 <Error_Handler>
          }
  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010772:	4b21      	ldr	r3, [pc, #132]	; (80107f8 <HAL_PCD_MspInit+0xd8>)
 8010774:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010778:	4a1f      	ldr	r2, [pc, #124]	; (80107f8 <HAL_PCD_MspInit+0xd8>)
 801077a:	f043 0301 	orr.w	r3, r3, #1
 801077e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8010782:	4b1d      	ldr	r3, [pc, #116]	; (80107f8 <HAL_PCD_MspInit+0xd8>)
 8010784:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010788:	f003 0301 	and.w	r3, r3, #1
 801078c:	60fb      	str	r3, [r7, #12]
 801078e:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8010790:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8010794:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010798:	2302      	movs	r3, #2
 801079a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801079e:	2300      	movs	r3, #0
 80107a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80107a4:	2300      	movs	r3, #0
 80107a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80107aa:	230a      	movs	r3, #10
 80107ac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80107b0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80107b4:	4619      	mov	r1, r3
 80107b6:	4811      	ldr	r0, [pc, #68]	; (80107fc <HAL_PCD_MspInit+0xdc>)
 80107b8:	f7f4 fb6a 	bl	8004e90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80107bc:	4b0e      	ldr	r3, [pc, #56]	; (80107f8 <HAL_PCD_MspInit+0xd8>)
 80107be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80107c2:	4a0d      	ldr	r2, [pc, #52]	; (80107f8 <HAL_PCD_MspInit+0xd8>)
 80107c4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80107c8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80107cc:	4b0a      	ldr	r3, [pc, #40]	; (80107f8 <HAL_PCD_MspInit+0xd8>)
 80107ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80107d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80107d6:	60bb      	str	r3, [r7, #8]
 80107d8:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80107da:	2200      	movs	r2, #0
 80107dc:	2100      	movs	r1, #0
 80107de:	2065      	movs	r0, #101	; 0x65
 80107e0:	f7f1 fc41 	bl	8002066 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80107e4:	2065      	movs	r0, #101	; 0x65
 80107e6:	f7f1 fc58 	bl	800209a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80107ea:	bf00      	nop
 80107ec:	37e0      	adds	r7, #224	; 0xe0
 80107ee:	46bd      	mov	sp, r7
 80107f0:	bd80      	pop	{r7, pc}
 80107f2:	bf00      	nop
 80107f4:	40080000 	.word	0x40080000
 80107f8:	58024400 	.word	0x58024400
 80107fc:	58020000 	.word	0x58020000

08010800 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010800:	b580      	push	{r7, lr}
 8010802:	b082      	sub	sp, #8
 8010804:	af00      	add	r7, sp, #0
 8010806:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8010814:	4619      	mov	r1, r3
 8010816:	4610      	mov	r0, r2
 8010818:	f7fe fc9c 	bl	800f154 <USBD_LL_SetupStage>
}
 801081c:	bf00      	nop
 801081e:	3708      	adds	r7, #8
 8010820:	46bd      	mov	sp, r7
 8010822:	bd80      	pop	{r7, pc}

08010824 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010824:	b580      	push	{r7, lr}
 8010826:	b082      	sub	sp, #8
 8010828:	af00      	add	r7, sp, #0
 801082a:	6078      	str	r0, [r7, #4]
 801082c:	460b      	mov	r3, r1
 801082e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8010836:	78fa      	ldrb	r2, [r7, #3]
 8010838:	6879      	ldr	r1, [r7, #4]
 801083a:	4613      	mov	r3, r2
 801083c:	00db      	lsls	r3, r3, #3
 801083e:	1a9b      	subs	r3, r3, r2
 8010840:	009b      	lsls	r3, r3, #2
 8010842:	440b      	add	r3, r1
 8010844:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8010848:	681a      	ldr	r2, [r3, #0]
 801084a:	78fb      	ldrb	r3, [r7, #3]
 801084c:	4619      	mov	r1, r3
 801084e:	f7fe fcd6 	bl	800f1fe <USBD_LL_DataOutStage>
}
 8010852:	bf00      	nop
 8010854:	3708      	adds	r7, #8
 8010856:	46bd      	mov	sp, r7
 8010858:	bd80      	pop	{r7, pc}

0801085a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801085a:	b580      	push	{r7, lr}
 801085c:	b082      	sub	sp, #8
 801085e:	af00      	add	r7, sp, #0
 8010860:	6078      	str	r0, [r7, #4]
 8010862:	460b      	mov	r3, r1
 8010864:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801086c:	78fa      	ldrb	r2, [r7, #3]
 801086e:	6879      	ldr	r1, [r7, #4]
 8010870:	4613      	mov	r3, r2
 8010872:	00db      	lsls	r3, r3, #3
 8010874:	1a9b      	subs	r3, r3, r2
 8010876:	009b      	lsls	r3, r3, #2
 8010878:	440b      	add	r3, r1
 801087a:	3348      	adds	r3, #72	; 0x48
 801087c:	681a      	ldr	r2, [r3, #0]
 801087e:	78fb      	ldrb	r3, [r7, #3]
 8010880:	4619      	mov	r1, r3
 8010882:	f7fe fd21 	bl	800f2c8 <USBD_LL_DataInStage>
}
 8010886:	bf00      	nop
 8010888:	3708      	adds	r7, #8
 801088a:	46bd      	mov	sp, r7
 801088c:	bd80      	pop	{r7, pc}

0801088e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801088e:	b580      	push	{r7, lr}
 8010890:	b082      	sub	sp, #8
 8010892:	af00      	add	r7, sp, #0
 8010894:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801089c:	4618      	mov	r0, r3
 801089e:	f7fe fe2a 	bl	800f4f6 <USBD_LL_SOF>
}
 80108a2:	bf00      	nop
 80108a4:	3708      	adds	r7, #8
 80108a6:	46bd      	mov	sp, r7
 80108a8:	bd80      	pop	{r7, pc}

080108aa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80108aa:	b580      	push	{r7, lr}
 80108ac:	b084      	sub	sp, #16
 80108ae:	af00      	add	r7, sp, #0
 80108b0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80108b2:	2301      	movs	r3, #1
 80108b4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	68db      	ldr	r3, [r3, #12]
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d102      	bne.n	80108c4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80108be:	2300      	movs	r3, #0
 80108c0:	73fb      	strb	r3, [r7, #15]
 80108c2:	e008      	b.n	80108d6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	68db      	ldr	r3, [r3, #12]
 80108c8:	2b02      	cmp	r3, #2
 80108ca:	d102      	bne.n	80108d2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80108cc:	2301      	movs	r3, #1
 80108ce:	73fb      	strb	r3, [r7, #15]
 80108d0:	e001      	b.n	80108d6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80108d2:	f7f0 fb21 	bl	8000f18 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80108dc:	7bfa      	ldrb	r2, [r7, #15]
 80108de:	4611      	mov	r1, r2
 80108e0:	4618      	mov	r0, r3
 80108e2:	f7fe fdca 	bl	800f47a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80108ec:	4618      	mov	r0, r3
 80108ee:	f7fe fd83 	bl	800f3f8 <USBD_LL_Reset>
}
 80108f2:	bf00      	nop
 80108f4:	3710      	adds	r7, #16
 80108f6:	46bd      	mov	sp, r7
 80108f8:	bd80      	pop	{r7, pc}
	...

080108fc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80108fc:	b580      	push	{r7, lr}
 80108fe:	b082      	sub	sp, #8
 8010900:	af00      	add	r7, sp, #0
 8010902:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801090a:	4618      	mov	r0, r3
 801090c:	f7fe fdc5 	bl	800f49a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	687a      	ldr	r2, [r7, #4]
 801091c:	6812      	ldr	r2, [r2, #0]
 801091e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010922:	f043 0301 	orr.w	r3, r3, #1
 8010926:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	6a1b      	ldr	r3, [r3, #32]
 801092c:	2b00      	cmp	r3, #0
 801092e:	d005      	beq.n	801093c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010930:	4b04      	ldr	r3, [pc, #16]	; (8010944 <HAL_PCD_SuspendCallback+0x48>)
 8010932:	691b      	ldr	r3, [r3, #16]
 8010934:	4a03      	ldr	r2, [pc, #12]	; (8010944 <HAL_PCD_SuspendCallback+0x48>)
 8010936:	f043 0306 	orr.w	r3, r3, #6
 801093a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801093c:	bf00      	nop
 801093e:	3708      	adds	r7, #8
 8010940:	46bd      	mov	sp, r7
 8010942:	bd80      	pop	{r7, pc}
 8010944:	e000ed00 	.word	0xe000ed00

08010948 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010948:	b580      	push	{r7, lr}
 801094a:	b082      	sub	sp, #8
 801094c:	af00      	add	r7, sp, #0
 801094e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010956:	4618      	mov	r0, r3
 8010958:	f7fe fdb5 	bl	800f4c6 <USBD_LL_Resume>
}
 801095c:	bf00      	nop
 801095e:	3708      	adds	r7, #8
 8010960:	46bd      	mov	sp, r7
 8010962:	bd80      	pop	{r7, pc}

08010964 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010964:	b580      	push	{r7, lr}
 8010966:	b082      	sub	sp, #8
 8010968:	af00      	add	r7, sp, #0
 801096a:	6078      	str	r0, [r7, #4]
 801096c:	460b      	mov	r3, r1
 801096e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010976:	78fa      	ldrb	r2, [r7, #3]
 8010978:	4611      	mov	r1, r2
 801097a:	4618      	mov	r0, r3
 801097c:	f7fe fde3 	bl	800f546 <USBD_LL_IsoOUTIncomplete>
}
 8010980:	bf00      	nop
 8010982:	3708      	adds	r7, #8
 8010984:	46bd      	mov	sp, r7
 8010986:	bd80      	pop	{r7, pc}

08010988 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010988:	b580      	push	{r7, lr}
 801098a:	b082      	sub	sp, #8
 801098c:	af00      	add	r7, sp, #0
 801098e:	6078      	str	r0, [r7, #4]
 8010990:	460b      	mov	r3, r1
 8010992:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801099a:	78fa      	ldrb	r2, [r7, #3]
 801099c:	4611      	mov	r1, r2
 801099e:	4618      	mov	r0, r3
 80109a0:	f7fe fdc4 	bl	800f52c <USBD_LL_IsoINIncomplete>
}
 80109a4:	bf00      	nop
 80109a6:	3708      	adds	r7, #8
 80109a8:	46bd      	mov	sp, r7
 80109aa:	bd80      	pop	{r7, pc}

080109ac <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80109ac:	b580      	push	{r7, lr}
 80109ae:	b082      	sub	sp, #8
 80109b0:	af00      	add	r7, sp, #0
 80109b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80109ba:	4618      	mov	r0, r3
 80109bc:	f7fe fdd0 	bl	800f560 <USBD_LL_DevConnected>
}
 80109c0:	bf00      	nop
 80109c2:	3708      	adds	r7, #8
 80109c4:	46bd      	mov	sp, r7
 80109c6:	bd80      	pop	{r7, pc}

080109c8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80109c8:	b580      	push	{r7, lr}
 80109ca:	b082      	sub	sp, #8
 80109cc:	af00      	add	r7, sp, #0
 80109ce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80109d6:	4618      	mov	r0, r3
 80109d8:	f7fe fdcd 	bl	800f576 <USBD_LL_DevDisconnected>
}
 80109dc:	bf00      	nop
 80109de:	3708      	adds	r7, #8
 80109e0:	46bd      	mov	sp, r7
 80109e2:	bd80      	pop	{r7, pc}

080109e4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80109e4:	b580      	push	{r7, lr}
 80109e6:	b082      	sub	sp, #8
 80109e8:	af00      	add	r7, sp, #0
 80109ea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	781b      	ldrb	r3, [r3, #0]
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d13e      	bne.n	8010a72 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80109f4:	4a21      	ldr	r2, [pc, #132]	; (8010a7c <USBD_LL_Init+0x98>)
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	4a1f      	ldr	r2, [pc, #124]	; (8010a7c <USBD_LL_Init+0x98>)
 8010a00:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010a04:	4b1d      	ldr	r3, [pc, #116]	; (8010a7c <USBD_LL_Init+0x98>)
 8010a06:	4a1e      	ldr	r2, [pc, #120]	; (8010a80 <USBD_LL_Init+0x9c>)
 8010a08:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8010a0a:	4b1c      	ldr	r3, [pc, #112]	; (8010a7c <USBD_LL_Init+0x98>)
 8010a0c:	2209      	movs	r2, #9
 8010a0e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8010a10:	4b1a      	ldr	r3, [pc, #104]	; (8010a7c <USBD_LL_Init+0x98>)
 8010a12:	2202      	movs	r2, #2
 8010a14:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010a16:	4b19      	ldr	r3, [pc, #100]	; (8010a7c <USBD_LL_Init+0x98>)
 8010a18:	2200      	movs	r2, #0
 8010a1a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010a1c:	4b17      	ldr	r3, [pc, #92]	; (8010a7c <USBD_LL_Init+0x98>)
 8010a1e:	2202      	movs	r2, #2
 8010a20:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010a22:	4b16      	ldr	r3, [pc, #88]	; (8010a7c <USBD_LL_Init+0x98>)
 8010a24:	2200      	movs	r2, #0
 8010a26:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8010a28:	4b14      	ldr	r3, [pc, #80]	; (8010a7c <USBD_LL_Init+0x98>)
 8010a2a:	2200      	movs	r2, #0
 8010a2c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8010a2e:	4b13      	ldr	r3, [pc, #76]	; (8010a7c <USBD_LL_Init+0x98>)
 8010a30:	2200      	movs	r2, #0
 8010a32:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8010a34:	4b11      	ldr	r3, [pc, #68]	; (8010a7c <USBD_LL_Init+0x98>)
 8010a36:	2200      	movs	r2, #0
 8010a38:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8010a3a:	4b10      	ldr	r3, [pc, #64]	; (8010a7c <USBD_LL_Init+0x98>)
 8010a3c:	2200      	movs	r2, #0
 8010a3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8010a40:	4b0e      	ldr	r3, [pc, #56]	; (8010a7c <USBD_LL_Init+0x98>)
 8010a42:	2200      	movs	r2, #0
 8010a44:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8010a46:	480d      	ldr	r0, [pc, #52]	; (8010a7c <USBD_LL_Init+0x98>)
 8010a48:	f7f5 fbf2 	bl	8006230 <HAL_PCD_Init>
 8010a4c:	4603      	mov	r3, r0
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d001      	beq.n	8010a56 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8010a52:	f7f0 fa61 	bl	8000f18 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8010a56:	2180      	movs	r1, #128	; 0x80
 8010a58:	4808      	ldr	r0, [pc, #32]	; (8010a7c <USBD_LL_Init+0x98>)
 8010a5a:	f7f6 fd84 	bl	8007566 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8010a5e:	2240      	movs	r2, #64	; 0x40
 8010a60:	2100      	movs	r1, #0
 8010a62:	4806      	ldr	r0, [pc, #24]	; (8010a7c <USBD_LL_Init+0x98>)
 8010a64:	f7f6 fd38 	bl	80074d8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8010a68:	2280      	movs	r2, #128	; 0x80
 8010a6a:	2101      	movs	r1, #1
 8010a6c:	4803      	ldr	r0, [pc, #12]	; (8010a7c <USBD_LL_Init+0x98>)
 8010a6e:	f7f6 fd33 	bl	80074d8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8010a72:	2300      	movs	r3, #0
}
 8010a74:	4618      	mov	r0, r3
 8010a76:	3708      	adds	r7, #8
 8010a78:	46bd      	mov	sp, r7
 8010a7a:	bd80      	pop	{r7, pc}
 8010a7c:	24001cf4 	.word	0x24001cf4
 8010a80:	40080000 	.word	0x40080000

08010a84 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010a84:	b580      	push	{r7, lr}
 8010a86:	b084      	sub	sp, #16
 8010a88:	af00      	add	r7, sp, #0
 8010a8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010a8c:	2300      	movs	r3, #0
 8010a8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010a90:	2300      	movs	r3, #0
 8010a92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010a9a:	4618      	mov	r0, r3
 8010a9c:	f7f5 fcec 	bl	8006478 <HAL_PCD_Start>
 8010aa0:	4603      	mov	r3, r0
 8010aa2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010aa4:	7bfb      	ldrb	r3, [r7, #15]
 8010aa6:	4618      	mov	r0, r3
 8010aa8:	f000 f92a 	bl	8010d00 <USBD_Get_USB_Status>
 8010aac:	4603      	mov	r3, r0
 8010aae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010ab0:	7bbb      	ldrb	r3, [r7, #14]
}
 8010ab2:	4618      	mov	r0, r3
 8010ab4:	3710      	adds	r7, #16
 8010ab6:	46bd      	mov	sp, r7
 8010ab8:	bd80      	pop	{r7, pc}

08010aba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010aba:	b580      	push	{r7, lr}
 8010abc:	b084      	sub	sp, #16
 8010abe:	af00      	add	r7, sp, #0
 8010ac0:	6078      	str	r0, [r7, #4]
 8010ac2:	4608      	mov	r0, r1
 8010ac4:	4611      	mov	r1, r2
 8010ac6:	461a      	mov	r2, r3
 8010ac8:	4603      	mov	r3, r0
 8010aca:	70fb      	strb	r3, [r7, #3]
 8010acc:	460b      	mov	r3, r1
 8010ace:	70bb      	strb	r3, [r7, #2]
 8010ad0:	4613      	mov	r3, r2
 8010ad2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010ad4:	2300      	movs	r3, #0
 8010ad6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010ad8:	2300      	movs	r3, #0
 8010ada:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010ae2:	78bb      	ldrb	r3, [r7, #2]
 8010ae4:	883a      	ldrh	r2, [r7, #0]
 8010ae6:	78f9      	ldrb	r1, [r7, #3]
 8010ae8:	f7f6 f8fd 	bl	8006ce6 <HAL_PCD_EP_Open>
 8010aec:	4603      	mov	r3, r0
 8010aee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010af0:	7bfb      	ldrb	r3, [r7, #15]
 8010af2:	4618      	mov	r0, r3
 8010af4:	f000 f904 	bl	8010d00 <USBD_Get_USB_Status>
 8010af8:	4603      	mov	r3, r0
 8010afa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010afc:	7bbb      	ldrb	r3, [r7, #14]
}
 8010afe:	4618      	mov	r0, r3
 8010b00:	3710      	adds	r7, #16
 8010b02:	46bd      	mov	sp, r7
 8010b04:	bd80      	pop	{r7, pc}

08010b06 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010b06:	b580      	push	{r7, lr}
 8010b08:	b084      	sub	sp, #16
 8010b0a:	af00      	add	r7, sp, #0
 8010b0c:	6078      	str	r0, [r7, #4]
 8010b0e:	460b      	mov	r3, r1
 8010b10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010b12:	2300      	movs	r3, #0
 8010b14:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010b16:	2300      	movs	r3, #0
 8010b18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010b20:	78fa      	ldrb	r2, [r7, #3]
 8010b22:	4611      	mov	r1, r2
 8010b24:	4618      	mov	r0, r3
 8010b26:	f7f6 f946 	bl	8006db6 <HAL_PCD_EP_Close>
 8010b2a:	4603      	mov	r3, r0
 8010b2c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010b2e:	7bfb      	ldrb	r3, [r7, #15]
 8010b30:	4618      	mov	r0, r3
 8010b32:	f000 f8e5 	bl	8010d00 <USBD_Get_USB_Status>
 8010b36:	4603      	mov	r3, r0
 8010b38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010b3a:	7bbb      	ldrb	r3, [r7, #14]
}
 8010b3c:	4618      	mov	r0, r3
 8010b3e:	3710      	adds	r7, #16
 8010b40:	46bd      	mov	sp, r7
 8010b42:	bd80      	pop	{r7, pc}

08010b44 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010b44:	b580      	push	{r7, lr}
 8010b46:	b084      	sub	sp, #16
 8010b48:	af00      	add	r7, sp, #0
 8010b4a:	6078      	str	r0, [r7, #4]
 8010b4c:	460b      	mov	r3, r1
 8010b4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010b50:	2300      	movs	r3, #0
 8010b52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010b54:	2300      	movs	r3, #0
 8010b56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010b5e:	78fa      	ldrb	r2, [r7, #3]
 8010b60:	4611      	mov	r1, r2
 8010b62:	4618      	mov	r0, r3
 8010b64:	f7f6 fa1e 	bl	8006fa4 <HAL_PCD_EP_SetStall>
 8010b68:	4603      	mov	r3, r0
 8010b6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010b6c:	7bfb      	ldrb	r3, [r7, #15]
 8010b6e:	4618      	mov	r0, r3
 8010b70:	f000 f8c6 	bl	8010d00 <USBD_Get_USB_Status>
 8010b74:	4603      	mov	r3, r0
 8010b76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010b78:	7bbb      	ldrb	r3, [r7, #14]
}
 8010b7a:	4618      	mov	r0, r3
 8010b7c:	3710      	adds	r7, #16
 8010b7e:	46bd      	mov	sp, r7
 8010b80:	bd80      	pop	{r7, pc}

08010b82 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010b82:	b580      	push	{r7, lr}
 8010b84:	b084      	sub	sp, #16
 8010b86:	af00      	add	r7, sp, #0
 8010b88:	6078      	str	r0, [r7, #4]
 8010b8a:	460b      	mov	r3, r1
 8010b8c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010b8e:	2300      	movs	r3, #0
 8010b90:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010b92:	2300      	movs	r3, #0
 8010b94:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010b9c:	78fa      	ldrb	r2, [r7, #3]
 8010b9e:	4611      	mov	r1, r2
 8010ba0:	4618      	mov	r0, r3
 8010ba2:	f7f6 fa63 	bl	800706c <HAL_PCD_EP_ClrStall>
 8010ba6:	4603      	mov	r3, r0
 8010ba8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010baa:	7bfb      	ldrb	r3, [r7, #15]
 8010bac:	4618      	mov	r0, r3
 8010bae:	f000 f8a7 	bl	8010d00 <USBD_Get_USB_Status>
 8010bb2:	4603      	mov	r3, r0
 8010bb4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010bb6:	7bbb      	ldrb	r3, [r7, #14]
}
 8010bb8:	4618      	mov	r0, r3
 8010bba:	3710      	adds	r7, #16
 8010bbc:	46bd      	mov	sp, r7
 8010bbe:	bd80      	pop	{r7, pc}

08010bc0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010bc0:	b480      	push	{r7}
 8010bc2:	b085      	sub	sp, #20
 8010bc4:	af00      	add	r7, sp, #0
 8010bc6:	6078      	str	r0, [r7, #4]
 8010bc8:	460b      	mov	r3, r1
 8010bca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010bd2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010bd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	da0b      	bge.n	8010bf4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010bdc:	78fb      	ldrb	r3, [r7, #3]
 8010bde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010be2:	68f9      	ldr	r1, [r7, #12]
 8010be4:	4613      	mov	r3, r2
 8010be6:	00db      	lsls	r3, r3, #3
 8010be8:	1a9b      	subs	r3, r3, r2
 8010bea:	009b      	lsls	r3, r3, #2
 8010bec:	440b      	add	r3, r1
 8010bee:	333e      	adds	r3, #62	; 0x3e
 8010bf0:	781b      	ldrb	r3, [r3, #0]
 8010bf2:	e00b      	b.n	8010c0c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010bf4:	78fb      	ldrb	r3, [r7, #3]
 8010bf6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010bfa:	68f9      	ldr	r1, [r7, #12]
 8010bfc:	4613      	mov	r3, r2
 8010bfe:	00db      	lsls	r3, r3, #3
 8010c00:	1a9b      	subs	r3, r3, r2
 8010c02:	009b      	lsls	r3, r3, #2
 8010c04:	440b      	add	r3, r1
 8010c06:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010c0a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010c0c:	4618      	mov	r0, r3
 8010c0e:	3714      	adds	r7, #20
 8010c10:	46bd      	mov	sp, r7
 8010c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c16:	4770      	bx	lr

08010c18 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010c18:	b580      	push	{r7, lr}
 8010c1a:	b084      	sub	sp, #16
 8010c1c:	af00      	add	r7, sp, #0
 8010c1e:	6078      	str	r0, [r7, #4]
 8010c20:	460b      	mov	r3, r1
 8010c22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010c24:	2300      	movs	r3, #0
 8010c26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010c28:	2300      	movs	r3, #0
 8010c2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010c32:	78fa      	ldrb	r2, [r7, #3]
 8010c34:	4611      	mov	r1, r2
 8010c36:	4618      	mov	r0, r3
 8010c38:	f7f6 f830 	bl	8006c9c <HAL_PCD_SetAddress>
 8010c3c:	4603      	mov	r3, r0
 8010c3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010c40:	7bfb      	ldrb	r3, [r7, #15]
 8010c42:	4618      	mov	r0, r3
 8010c44:	f000 f85c 	bl	8010d00 <USBD_Get_USB_Status>
 8010c48:	4603      	mov	r3, r0
 8010c4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010c4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8010c4e:	4618      	mov	r0, r3
 8010c50:	3710      	adds	r7, #16
 8010c52:	46bd      	mov	sp, r7
 8010c54:	bd80      	pop	{r7, pc}

08010c56 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010c56:	b580      	push	{r7, lr}
 8010c58:	b086      	sub	sp, #24
 8010c5a:	af00      	add	r7, sp, #0
 8010c5c:	60f8      	str	r0, [r7, #12]
 8010c5e:	607a      	str	r2, [r7, #4]
 8010c60:	603b      	str	r3, [r7, #0]
 8010c62:	460b      	mov	r3, r1
 8010c64:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010c66:	2300      	movs	r3, #0
 8010c68:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010c6a:	2300      	movs	r3, #0
 8010c6c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010c74:	7af9      	ldrb	r1, [r7, #11]
 8010c76:	683b      	ldr	r3, [r7, #0]
 8010c78:	687a      	ldr	r2, [r7, #4]
 8010c7a:	f7f6 f949 	bl	8006f10 <HAL_PCD_EP_Transmit>
 8010c7e:	4603      	mov	r3, r0
 8010c80:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010c82:	7dfb      	ldrb	r3, [r7, #23]
 8010c84:	4618      	mov	r0, r3
 8010c86:	f000 f83b 	bl	8010d00 <USBD_Get_USB_Status>
 8010c8a:	4603      	mov	r3, r0
 8010c8c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010c8e:	7dbb      	ldrb	r3, [r7, #22]
}
 8010c90:	4618      	mov	r0, r3
 8010c92:	3718      	adds	r7, #24
 8010c94:	46bd      	mov	sp, r7
 8010c96:	bd80      	pop	{r7, pc}

08010c98 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010c98:	b580      	push	{r7, lr}
 8010c9a:	b086      	sub	sp, #24
 8010c9c:	af00      	add	r7, sp, #0
 8010c9e:	60f8      	str	r0, [r7, #12]
 8010ca0:	607a      	str	r2, [r7, #4]
 8010ca2:	603b      	str	r3, [r7, #0]
 8010ca4:	460b      	mov	r3, r1
 8010ca6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010ca8:	2300      	movs	r3, #0
 8010caa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010cac:	2300      	movs	r3, #0
 8010cae:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010cb0:	68fb      	ldr	r3, [r7, #12]
 8010cb2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010cb6:	7af9      	ldrb	r1, [r7, #11]
 8010cb8:	683b      	ldr	r3, [r7, #0]
 8010cba:	687a      	ldr	r2, [r7, #4]
 8010cbc:	f7f6 f8c5 	bl	8006e4a <HAL_PCD_EP_Receive>
 8010cc0:	4603      	mov	r3, r0
 8010cc2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010cc4:	7dfb      	ldrb	r3, [r7, #23]
 8010cc6:	4618      	mov	r0, r3
 8010cc8:	f000 f81a 	bl	8010d00 <USBD_Get_USB_Status>
 8010ccc:	4603      	mov	r3, r0
 8010cce:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010cd0:	7dbb      	ldrb	r3, [r7, #22]
}
 8010cd2:	4618      	mov	r0, r3
 8010cd4:	3718      	adds	r7, #24
 8010cd6:	46bd      	mov	sp, r7
 8010cd8:	bd80      	pop	{r7, pc}

08010cda <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010cda:	b580      	push	{r7, lr}
 8010cdc:	b082      	sub	sp, #8
 8010cde:	af00      	add	r7, sp, #0
 8010ce0:	6078      	str	r0, [r7, #4]
 8010ce2:	460b      	mov	r3, r1
 8010ce4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010cec:	78fa      	ldrb	r2, [r7, #3]
 8010cee:	4611      	mov	r1, r2
 8010cf0:	4618      	mov	r0, r3
 8010cf2:	f7f6 f8f5 	bl	8006ee0 <HAL_PCD_EP_GetRxCount>
 8010cf6:	4603      	mov	r3, r0
}
 8010cf8:	4618      	mov	r0, r3
 8010cfa:	3708      	adds	r7, #8
 8010cfc:	46bd      	mov	sp, r7
 8010cfe:	bd80      	pop	{r7, pc}

08010d00 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010d00:	b480      	push	{r7}
 8010d02:	b085      	sub	sp, #20
 8010d04:	af00      	add	r7, sp, #0
 8010d06:	4603      	mov	r3, r0
 8010d08:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010d0a:	2300      	movs	r3, #0
 8010d0c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010d0e:	79fb      	ldrb	r3, [r7, #7]
 8010d10:	2b03      	cmp	r3, #3
 8010d12:	d817      	bhi.n	8010d44 <USBD_Get_USB_Status+0x44>
 8010d14:	a201      	add	r2, pc, #4	; (adr r2, 8010d1c <USBD_Get_USB_Status+0x1c>)
 8010d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d1a:	bf00      	nop
 8010d1c:	08010d2d 	.word	0x08010d2d
 8010d20:	08010d33 	.word	0x08010d33
 8010d24:	08010d39 	.word	0x08010d39
 8010d28:	08010d3f 	.word	0x08010d3f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010d2c:	2300      	movs	r3, #0
 8010d2e:	73fb      	strb	r3, [r7, #15]
    break;
 8010d30:	e00b      	b.n	8010d4a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010d32:	2303      	movs	r3, #3
 8010d34:	73fb      	strb	r3, [r7, #15]
    break;
 8010d36:	e008      	b.n	8010d4a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010d38:	2301      	movs	r3, #1
 8010d3a:	73fb      	strb	r3, [r7, #15]
    break;
 8010d3c:	e005      	b.n	8010d4a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010d3e:	2303      	movs	r3, #3
 8010d40:	73fb      	strb	r3, [r7, #15]
    break;
 8010d42:	e002      	b.n	8010d4a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010d44:	2303      	movs	r3, #3
 8010d46:	73fb      	strb	r3, [r7, #15]
    break;
 8010d48:	bf00      	nop
  }
  return usb_status;
 8010d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d4c:	4618      	mov	r0, r3
 8010d4e:	3714      	adds	r7, #20
 8010d50:	46bd      	mov	sp, r7
 8010d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d56:	4770      	bx	lr

08010d58 <__errno>:
 8010d58:	4b01      	ldr	r3, [pc, #4]	; (8010d60 <__errno+0x8>)
 8010d5a:	6818      	ldr	r0, [r3, #0]
 8010d5c:	4770      	bx	lr
 8010d5e:	bf00      	nop
 8010d60:	2400019c 	.word	0x2400019c

08010d64 <__libc_init_array>:
 8010d64:	b570      	push	{r4, r5, r6, lr}
 8010d66:	4d0d      	ldr	r5, [pc, #52]	; (8010d9c <__libc_init_array+0x38>)
 8010d68:	4c0d      	ldr	r4, [pc, #52]	; (8010da0 <__libc_init_array+0x3c>)
 8010d6a:	1b64      	subs	r4, r4, r5
 8010d6c:	10a4      	asrs	r4, r4, #2
 8010d6e:	2600      	movs	r6, #0
 8010d70:	42a6      	cmp	r6, r4
 8010d72:	d109      	bne.n	8010d88 <__libc_init_array+0x24>
 8010d74:	4d0b      	ldr	r5, [pc, #44]	; (8010da4 <__libc_init_array+0x40>)
 8010d76:	4c0c      	ldr	r4, [pc, #48]	; (8010da8 <__libc_init_array+0x44>)
 8010d78:	f002 fe64 	bl	8013a44 <_init>
 8010d7c:	1b64      	subs	r4, r4, r5
 8010d7e:	10a4      	asrs	r4, r4, #2
 8010d80:	2600      	movs	r6, #0
 8010d82:	42a6      	cmp	r6, r4
 8010d84:	d105      	bne.n	8010d92 <__libc_init_array+0x2e>
 8010d86:	bd70      	pop	{r4, r5, r6, pc}
 8010d88:	f855 3b04 	ldr.w	r3, [r5], #4
 8010d8c:	4798      	blx	r3
 8010d8e:	3601      	adds	r6, #1
 8010d90:	e7ee      	b.n	8010d70 <__libc_init_array+0xc>
 8010d92:	f855 3b04 	ldr.w	r3, [r5], #4
 8010d96:	4798      	blx	r3
 8010d98:	3601      	adds	r6, #1
 8010d9a:	e7f2      	b.n	8010d82 <__libc_init_array+0x1e>
 8010d9c:	08013ee4 	.word	0x08013ee4
 8010da0:	08013ee4 	.word	0x08013ee4
 8010da4:	08013ee4 	.word	0x08013ee4
 8010da8:	08013eec 	.word	0x08013eec

08010dac <malloc>:
 8010dac:	4b02      	ldr	r3, [pc, #8]	; (8010db8 <malloc+0xc>)
 8010dae:	4601      	mov	r1, r0
 8010db0:	6818      	ldr	r0, [r3, #0]
 8010db2:	f000 b88d 	b.w	8010ed0 <_malloc_r>
 8010db6:	bf00      	nop
 8010db8:	2400019c 	.word	0x2400019c

08010dbc <free>:
 8010dbc:	4b02      	ldr	r3, [pc, #8]	; (8010dc8 <free+0xc>)
 8010dbe:	4601      	mov	r1, r0
 8010dc0:	6818      	ldr	r0, [r3, #0]
 8010dc2:	f000 b819 	b.w	8010df8 <_free_r>
 8010dc6:	bf00      	nop
 8010dc8:	2400019c 	.word	0x2400019c

08010dcc <memcpy>:
 8010dcc:	440a      	add	r2, r1
 8010dce:	4291      	cmp	r1, r2
 8010dd0:	f100 33ff 	add.w	r3, r0, #4294967295
 8010dd4:	d100      	bne.n	8010dd8 <memcpy+0xc>
 8010dd6:	4770      	bx	lr
 8010dd8:	b510      	push	{r4, lr}
 8010dda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010dde:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010de2:	4291      	cmp	r1, r2
 8010de4:	d1f9      	bne.n	8010dda <memcpy+0xe>
 8010de6:	bd10      	pop	{r4, pc}

08010de8 <memset>:
 8010de8:	4402      	add	r2, r0
 8010dea:	4603      	mov	r3, r0
 8010dec:	4293      	cmp	r3, r2
 8010dee:	d100      	bne.n	8010df2 <memset+0xa>
 8010df0:	4770      	bx	lr
 8010df2:	f803 1b01 	strb.w	r1, [r3], #1
 8010df6:	e7f9      	b.n	8010dec <memset+0x4>

08010df8 <_free_r>:
 8010df8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010dfa:	2900      	cmp	r1, #0
 8010dfc:	d044      	beq.n	8010e88 <_free_r+0x90>
 8010dfe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010e02:	9001      	str	r0, [sp, #4]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	f1a1 0404 	sub.w	r4, r1, #4
 8010e0a:	bfb8      	it	lt
 8010e0c:	18e4      	addlt	r4, r4, r3
 8010e0e:	f001 fb45 	bl	801249c <__malloc_lock>
 8010e12:	4a1e      	ldr	r2, [pc, #120]	; (8010e8c <_free_r+0x94>)
 8010e14:	9801      	ldr	r0, [sp, #4]
 8010e16:	6813      	ldr	r3, [r2, #0]
 8010e18:	b933      	cbnz	r3, 8010e28 <_free_r+0x30>
 8010e1a:	6063      	str	r3, [r4, #4]
 8010e1c:	6014      	str	r4, [r2, #0]
 8010e1e:	b003      	add	sp, #12
 8010e20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010e24:	f001 bb40 	b.w	80124a8 <__malloc_unlock>
 8010e28:	42a3      	cmp	r3, r4
 8010e2a:	d908      	bls.n	8010e3e <_free_r+0x46>
 8010e2c:	6825      	ldr	r5, [r4, #0]
 8010e2e:	1961      	adds	r1, r4, r5
 8010e30:	428b      	cmp	r3, r1
 8010e32:	bf01      	itttt	eq
 8010e34:	6819      	ldreq	r1, [r3, #0]
 8010e36:	685b      	ldreq	r3, [r3, #4]
 8010e38:	1949      	addeq	r1, r1, r5
 8010e3a:	6021      	streq	r1, [r4, #0]
 8010e3c:	e7ed      	b.n	8010e1a <_free_r+0x22>
 8010e3e:	461a      	mov	r2, r3
 8010e40:	685b      	ldr	r3, [r3, #4]
 8010e42:	b10b      	cbz	r3, 8010e48 <_free_r+0x50>
 8010e44:	42a3      	cmp	r3, r4
 8010e46:	d9fa      	bls.n	8010e3e <_free_r+0x46>
 8010e48:	6811      	ldr	r1, [r2, #0]
 8010e4a:	1855      	adds	r5, r2, r1
 8010e4c:	42a5      	cmp	r5, r4
 8010e4e:	d10b      	bne.n	8010e68 <_free_r+0x70>
 8010e50:	6824      	ldr	r4, [r4, #0]
 8010e52:	4421      	add	r1, r4
 8010e54:	1854      	adds	r4, r2, r1
 8010e56:	42a3      	cmp	r3, r4
 8010e58:	6011      	str	r1, [r2, #0]
 8010e5a:	d1e0      	bne.n	8010e1e <_free_r+0x26>
 8010e5c:	681c      	ldr	r4, [r3, #0]
 8010e5e:	685b      	ldr	r3, [r3, #4]
 8010e60:	6053      	str	r3, [r2, #4]
 8010e62:	4421      	add	r1, r4
 8010e64:	6011      	str	r1, [r2, #0]
 8010e66:	e7da      	b.n	8010e1e <_free_r+0x26>
 8010e68:	d902      	bls.n	8010e70 <_free_r+0x78>
 8010e6a:	230c      	movs	r3, #12
 8010e6c:	6003      	str	r3, [r0, #0]
 8010e6e:	e7d6      	b.n	8010e1e <_free_r+0x26>
 8010e70:	6825      	ldr	r5, [r4, #0]
 8010e72:	1961      	adds	r1, r4, r5
 8010e74:	428b      	cmp	r3, r1
 8010e76:	bf04      	itt	eq
 8010e78:	6819      	ldreq	r1, [r3, #0]
 8010e7a:	685b      	ldreq	r3, [r3, #4]
 8010e7c:	6063      	str	r3, [r4, #4]
 8010e7e:	bf04      	itt	eq
 8010e80:	1949      	addeq	r1, r1, r5
 8010e82:	6021      	streq	r1, [r4, #0]
 8010e84:	6054      	str	r4, [r2, #4]
 8010e86:	e7ca      	b.n	8010e1e <_free_r+0x26>
 8010e88:	b003      	add	sp, #12
 8010e8a:	bd30      	pop	{r4, r5, pc}
 8010e8c:	240020fc 	.word	0x240020fc

08010e90 <sbrk_aligned>:
 8010e90:	b570      	push	{r4, r5, r6, lr}
 8010e92:	4e0e      	ldr	r6, [pc, #56]	; (8010ecc <sbrk_aligned+0x3c>)
 8010e94:	460c      	mov	r4, r1
 8010e96:	6831      	ldr	r1, [r6, #0]
 8010e98:	4605      	mov	r5, r0
 8010e9a:	b911      	cbnz	r1, 8010ea2 <sbrk_aligned+0x12>
 8010e9c:	f000 fcce 	bl	801183c <_sbrk_r>
 8010ea0:	6030      	str	r0, [r6, #0]
 8010ea2:	4621      	mov	r1, r4
 8010ea4:	4628      	mov	r0, r5
 8010ea6:	f000 fcc9 	bl	801183c <_sbrk_r>
 8010eaa:	1c43      	adds	r3, r0, #1
 8010eac:	d00a      	beq.n	8010ec4 <sbrk_aligned+0x34>
 8010eae:	1cc4      	adds	r4, r0, #3
 8010eb0:	f024 0403 	bic.w	r4, r4, #3
 8010eb4:	42a0      	cmp	r0, r4
 8010eb6:	d007      	beq.n	8010ec8 <sbrk_aligned+0x38>
 8010eb8:	1a21      	subs	r1, r4, r0
 8010eba:	4628      	mov	r0, r5
 8010ebc:	f000 fcbe 	bl	801183c <_sbrk_r>
 8010ec0:	3001      	adds	r0, #1
 8010ec2:	d101      	bne.n	8010ec8 <sbrk_aligned+0x38>
 8010ec4:	f04f 34ff 	mov.w	r4, #4294967295
 8010ec8:	4620      	mov	r0, r4
 8010eca:	bd70      	pop	{r4, r5, r6, pc}
 8010ecc:	24002100 	.word	0x24002100

08010ed0 <_malloc_r>:
 8010ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ed4:	1ccd      	adds	r5, r1, #3
 8010ed6:	f025 0503 	bic.w	r5, r5, #3
 8010eda:	3508      	adds	r5, #8
 8010edc:	2d0c      	cmp	r5, #12
 8010ede:	bf38      	it	cc
 8010ee0:	250c      	movcc	r5, #12
 8010ee2:	2d00      	cmp	r5, #0
 8010ee4:	4607      	mov	r7, r0
 8010ee6:	db01      	blt.n	8010eec <_malloc_r+0x1c>
 8010ee8:	42a9      	cmp	r1, r5
 8010eea:	d905      	bls.n	8010ef8 <_malloc_r+0x28>
 8010eec:	230c      	movs	r3, #12
 8010eee:	603b      	str	r3, [r7, #0]
 8010ef0:	2600      	movs	r6, #0
 8010ef2:	4630      	mov	r0, r6
 8010ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ef8:	4e2e      	ldr	r6, [pc, #184]	; (8010fb4 <_malloc_r+0xe4>)
 8010efa:	f001 facf 	bl	801249c <__malloc_lock>
 8010efe:	6833      	ldr	r3, [r6, #0]
 8010f00:	461c      	mov	r4, r3
 8010f02:	bb34      	cbnz	r4, 8010f52 <_malloc_r+0x82>
 8010f04:	4629      	mov	r1, r5
 8010f06:	4638      	mov	r0, r7
 8010f08:	f7ff ffc2 	bl	8010e90 <sbrk_aligned>
 8010f0c:	1c43      	adds	r3, r0, #1
 8010f0e:	4604      	mov	r4, r0
 8010f10:	d14d      	bne.n	8010fae <_malloc_r+0xde>
 8010f12:	6834      	ldr	r4, [r6, #0]
 8010f14:	4626      	mov	r6, r4
 8010f16:	2e00      	cmp	r6, #0
 8010f18:	d140      	bne.n	8010f9c <_malloc_r+0xcc>
 8010f1a:	6823      	ldr	r3, [r4, #0]
 8010f1c:	4631      	mov	r1, r6
 8010f1e:	4638      	mov	r0, r7
 8010f20:	eb04 0803 	add.w	r8, r4, r3
 8010f24:	f000 fc8a 	bl	801183c <_sbrk_r>
 8010f28:	4580      	cmp	r8, r0
 8010f2a:	d13a      	bne.n	8010fa2 <_malloc_r+0xd2>
 8010f2c:	6821      	ldr	r1, [r4, #0]
 8010f2e:	3503      	adds	r5, #3
 8010f30:	1a6d      	subs	r5, r5, r1
 8010f32:	f025 0503 	bic.w	r5, r5, #3
 8010f36:	3508      	adds	r5, #8
 8010f38:	2d0c      	cmp	r5, #12
 8010f3a:	bf38      	it	cc
 8010f3c:	250c      	movcc	r5, #12
 8010f3e:	4629      	mov	r1, r5
 8010f40:	4638      	mov	r0, r7
 8010f42:	f7ff ffa5 	bl	8010e90 <sbrk_aligned>
 8010f46:	3001      	adds	r0, #1
 8010f48:	d02b      	beq.n	8010fa2 <_malloc_r+0xd2>
 8010f4a:	6823      	ldr	r3, [r4, #0]
 8010f4c:	442b      	add	r3, r5
 8010f4e:	6023      	str	r3, [r4, #0]
 8010f50:	e00e      	b.n	8010f70 <_malloc_r+0xa0>
 8010f52:	6822      	ldr	r2, [r4, #0]
 8010f54:	1b52      	subs	r2, r2, r5
 8010f56:	d41e      	bmi.n	8010f96 <_malloc_r+0xc6>
 8010f58:	2a0b      	cmp	r2, #11
 8010f5a:	d916      	bls.n	8010f8a <_malloc_r+0xba>
 8010f5c:	1961      	adds	r1, r4, r5
 8010f5e:	42a3      	cmp	r3, r4
 8010f60:	6025      	str	r5, [r4, #0]
 8010f62:	bf18      	it	ne
 8010f64:	6059      	strne	r1, [r3, #4]
 8010f66:	6863      	ldr	r3, [r4, #4]
 8010f68:	bf08      	it	eq
 8010f6a:	6031      	streq	r1, [r6, #0]
 8010f6c:	5162      	str	r2, [r4, r5]
 8010f6e:	604b      	str	r3, [r1, #4]
 8010f70:	4638      	mov	r0, r7
 8010f72:	f104 060b 	add.w	r6, r4, #11
 8010f76:	f001 fa97 	bl	80124a8 <__malloc_unlock>
 8010f7a:	f026 0607 	bic.w	r6, r6, #7
 8010f7e:	1d23      	adds	r3, r4, #4
 8010f80:	1af2      	subs	r2, r6, r3
 8010f82:	d0b6      	beq.n	8010ef2 <_malloc_r+0x22>
 8010f84:	1b9b      	subs	r3, r3, r6
 8010f86:	50a3      	str	r3, [r4, r2]
 8010f88:	e7b3      	b.n	8010ef2 <_malloc_r+0x22>
 8010f8a:	6862      	ldr	r2, [r4, #4]
 8010f8c:	42a3      	cmp	r3, r4
 8010f8e:	bf0c      	ite	eq
 8010f90:	6032      	streq	r2, [r6, #0]
 8010f92:	605a      	strne	r2, [r3, #4]
 8010f94:	e7ec      	b.n	8010f70 <_malloc_r+0xa0>
 8010f96:	4623      	mov	r3, r4
 8010f98:	6864      	ldr	r4, [r4, #4]
 8010f9a:	e7b2      	b.n	8010f02 <_malloc_r+0x32>
 8010f9c:	4634      	mov	r4, r6
 8010f9e:	6876      	ldr	r6, [r6, #4]
 8010fa0:	e7b9      	b.n	8010f16 <_malloc_r+0x46>
 8010fa2:	230c      	movs	r3, #12
 8010fa4:	603b      	str	r3, [r7, #0]
 8010fa6:	4638      	mov	r0, r7
 8010fa8:	f001 fa7e 	bl	80124a8 <__malloc_unlock>
 8010fac:	e7a1      	b.n	8010ef2 <_malloc_r+0x22>
 8010fae:	6025      	str	r5, [r4, #0]
 8010fb0:	e7de      	b.n	8010f70 <_malloc_r+0xa0>
 8010fb2:	bf00      	nop
 8010fb4:	240020fc 	.word	0x240020fc

08010fb8 <__cvt>:
 8010fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010fba:	ed2d 8b02 	vpush	{d8}
 8010fbe:	eeb0 8b40 	vmov.f64	d8, d0
 8010fc2:	b085      	sub	sp, #20
 8010fc4:	4617      	mov	r7, r2
 8010fc6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8010fc8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8010fca:	ee18 2a90 	vmov	r2, s17
 8010fce:	f025 0520 	bic.w	r5, r5, #32
 8010fd2:	2a00      	cmp	r2, #0
 8010fd4:	bfb6      	itet	lt
 8010fd6:	222d      	movlt	r2, #45	; 0x2d
 8010fd8:	2200      	movge	r2, #0
 8010fda:	eeb1 8b40 	vneglt.f64	d8, d0
 8010fde:	2d46      	cmp	r5, #70	; 0x46
 8010fe0:	460c      	mov	r4, r1
 8010fe2:	701a      	strb	r2, [r3, #0]
 8010fe4:	d004      	beq.n	8010ff0 <__cvt+0x38>
 8010fe6:	2d45      	cmp	r5, #69	; 0x45
 8010fe8:	d100      	bne.n	8010fec <__cvt+0x34>
 8010fea:	3401      	adds	r4, #1
 8010fec:	2102      	movs	r1, #2
 8010fee:	e000      	b.n	8010ff2 <__cvt+0x3a>
 8010ff0:	2103      	movs	r1, #3
 8010ff2:	ab03      	add	r3, sp, #12
 8010ff4:	9301      	str	r3, [sp, #4]
 8010ff6:	ab02      	add	r3, sp, #8
 8010ff8:	9300      	str	r3, [sp, #0]
 8010ffa:	4622      	mov	r2, r4
 8010ffc:	4633      	mov	r3, r6
 8010ffe:	eeb0 0b48 	vmov.f64	d0, d8
 8011002:	f000 fcd9 	bl	80119b8 <_dtoa_r>
 8011006:	2d47      	cmp	r5, #71	; 0x47
 8011008:	d101      	bne.n	801100e <__cvt+0x56>
 801100a:	07fb      	lsls	r3, r7, #31
 801100c:	d51a      	bpl.n	8011044 <__cvt+0x8c>
 801100e:	2d46      	cmp	r5, #70	; 0x46
 8011010:	eb00 0204 	add.w	r2, r0, r4
 8011014:	d10c      	bne.n	8011030 <__cvt+0x78>
 8011016:	7803      	ldrb	r3, [r0, #0]
 8011018:	2b30      	cmp	r3, #48	; 0x30
 801101a:	d107      	bne.n	801102c <__cvt+0x74>
 801101c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011024:	bf1c      	itt	ne
 8011026:	f1c4 0401 	rsbne	r4, r4, #1
 801102a:	6034      	strne	r4, [r6, #0]
 801102c:	6833      	ldr	r3, [r6, #0]
 801102e:	441a      	add	r2, r3
 8011030:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011038:	bf08      	it	eq
 801103a:	9203      	streq	r2, [sp, #12]
 801103c:	2130      	movs	r1, #48	; 0x30
 801103e:	9b03      	ldr	r3, [sp, #12]
 8011040:	4293      	cmp	r3, r2
 8011042:	d307      	bcc.n	8011054 <__cvt+0x9c>
 8011044:	9b03      	ldr	r3, [sp, #12]
 8011046:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011048:	1a1b      	subs	r3, r3, r0
 801104a:	6013      	str	r3, [r2, #0]
 801104c:	b005      	add	sp, #20
 801104e:	ecbd 8b02 	vpop	{d8}
 8011052:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011054:	1c5c      	adds	r4, r3, #1
 8011056:	9403      	str	r4, [sp, #12]
 8011058:	7019      	strb	r1, [r3, #0]
 801105a:	e7f0      	b.n	801103e <__cvt+0x86>

0801105c <__exponent>:
 801105c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801105e:	4603      	mov	r3, r0
 8011060:	2900      	cmp	r1, #0
 8011062:	bfb8      	it	lt
 8011064:	4249      	neglt	r1, r1
 8011066:	f803 2b02 	strb.w	r2, [r3], #2
 801106a:	bfb4      	ite	lt
 801106c:	222d      	movlt	r2, #45	; 0x2d
 801106e:	222b      	movge	r2, #43	; 0x2b
 8011070:	2909      	cmp	r1, #9
 8011072:	7042      	strb	r2, [r0, #1]
 8011074:	dd2a      	ble.n	80110cc <__exponent+0x70>
 8011076:	f10d 0407 	add.w	r4, sp, #7
 801107a:	46a4      	mov	ip, r4
 801107c:	270a      	movs	r7, #10
 801107e:	46a6      	mov	lr, r4
 8011080:	460a      	mov	r2, r1
 8011082:	fb91 f6f7 	sdiv	r6, r1, r7
 8011086:	fb07 1516 	mls	r5, r7, r6, r1
 801108a:	3530      	adds	r5, #48	; 0x30
 801108c:	2a63      	cmp	r2, #99	; 0x63
 801108e:	f104 34ff 	add.w	r4, r4, #4294967295
 8011092:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8011096:	4631      	mov	r1, r6
 8011098:	dcf1      	bgt.n	801107e <__exponent+0x22>
 801109a:	3130      	adds	r1, #48	; 0x30
 801109c:	f1ae 0502 	sub.w	r5, lr, #2
 80110a0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80110a4:	1c44      	adds	r4, r0, #1
 80110a6:	4629      	mov	r1, r5
 80110a8:	4561      	cmp	r1, ip
 80110aa:	d30a      	bcc.n	80110c2 <__exponent+0x66>
 80110ac:	f10d 0209 	add.w	r2, sp, #9
 80110b0:	eba2 020e 	sub.w	r2, r2, lr
 80110b4:	4565      	cmp	r5, ip
 80110b6:	bf88      	it	hi
 80110b8:	2200      	movhi	r2, #0
 80110ba:	4413      	add	r3, r2
 80110bc:	1a18      	subs	r0, r3, r0
 80110be:	b003      	add	sp, #12
 80110c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80110c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80110c6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80110ca:	e7ed      	b.n	80110a8 <__exponent+0x4c>
 80110cc:	2330      	movs	r3, #48	; 0x30
 80110ce:	3130      	adds	r1, #48	; 0x30
 80110d0:	7083      	strb	r3, [r0, #2]
 80110d2:	70c1      	strb	r1, [r0, #3]
 80110d4:	1d03      	adds	r3, r0, #4
 80110d6:	e7f1      	b.n	80110bc <__exponent+0x60>

080110d8 <_printf_float>:
 80110d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110dc:	b08b      	sub	sp, #44	; 0x2c
 80110de:	460c      	mov	r4, r1
 80110e0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80110e4:	4616      	mov	r6, r2
 80110e6:	461f      	mov	r7, r3
 80110e8:	4605      	mov	r5, r0
 80110ea:	f001 f9d3 	bl	8012494 <_localeconv_r>
 80110ee:	f8d0 b000 	ldr.w	fp, [r0]
 80110f2:	4658      	mov	r0, fp
 80110f4:	f7ef f8f4 	bl	80002e0 <strlen>
 80110f8:	2300      	movs	r3, #0
 80110fa:	9308      	str	r3, [sp, #32]
 80110fc:	f8d8 3000 	ldr.w	r3, [r8]
 8011100:	f894 9018 	ldrb.w	r9, [r4, #24]
 8011104:	6822      	ldr	r2, [r4, #0]
 8011106:	3307      	adds	r3, #7
 8011108:	f023 0307 	bic.w	r3, r3, #7
 801110c:	f103 0108 	add.w	r1, r3, #8
 8011110:	f8c8 1000 	str.w	r1, [r8]
 8011114:	4682      	mov	sl, r0
 8011116:	e9d3 0100 	ldrd	r0, r1, [r3]
 801111a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 801111e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8011380 <_printf_float+0x2a8>
 8011122:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8011126:	eeb0 6bc0 	vabs.f64	d6, d0
 801112a:	eeb4 6b47 	vcmp.f64	d6, d7
 801112e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011132:	dd24      	ble.n	801117e <_printf_float+0xa6>
 8011134:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801113c:	d502      	bpl.n	8011144 <_printf_float+0x6c>
 801113e:	232d      	movs	r3, #45	; 0x2d
 8011140:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011144:	4b90      	ldr	r3, [pc, #576]	; (8011388 <_printf_float+0x2b0>)
 8011146:	4891      	ldr	r0, [pc, #580]	; (801138c <_printf_float+0x2b4>)
 8011148:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801114c:	bf94      	ite	ls
 801114e:	4698      	movls	r8, r3
 8011150:	4680      	movhi	r8, r0
 8011152:	2303      	movs	r3, #3
 8011154:	6123      	str	r3, [r4, #16]
 8011156:	f022 0204 	bic.w	r2, r2, #4
 801115a:	2300      	movs	r3, #0
 801115c:	6022      	str	r2, [r4, #0]
 801115e:	9304      	str	r3, [sp, #16]
 8011160:	9700      	str	r7, [sp, #0]
 8011162:	4633      	mov	r3, r6
 8011164:	aa09      	add	r2, sp, #36	; 0x24
 8011166:	4621      	mov	r1, r4
 8011168:	4628      	mov	r0, r5
 801116a:	f000 f9d3 	bl	8011514 <_printf_common>
 801116e:	3001      	adds	r0, #1
 8011170:	f040 808a 	bne.w	8011288 <_printf_float+0x1b0>
 8011174:	f04f 30ff 	mov.w	r0, #4294967295
 8011178:	b00b      	add	sp, #44	; 0x2c
 801117a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801117e:	eeb4 0b40 	vcmp.f64	d0, d0
 8011182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011186:	d709      	bvc.n	801119c <_printf_float+0xc4>
 8011188:	ee10 3a90 	vmov	r3, s1
 801118c:	2b00      	cmp	r3, #0
 801118e:	bfbc      	itt	lt
 8011190:	232d      	movlt	r3, #45	; 0x2d
 8011192:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8011196:	487e      	ldr	r0, [pc, #504]	; (8011390 <_printf_float+0x2b8>)
 8011198:	4b7e      	ldr	r3, [pc, #504]	; (8011394 <_printf_float+0x2bc>)
 801119a:	e7d5      	b.n	8011148 <_printf_float+0x70>
 801119c:	6863      	ldr	r3, [r4, #4]
 801119e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80111a2:	9104      	str	r1, [sp, #16]
 80111a4:	1c59      	adds	r1, r3, #1
 80111a6:	d13c      	bne.n	8011222 <_printf_float+0x14a>
 80111a8:	2306      	movs	r3, #6
 80111aa:	6063      	str	r3, [r4, #4]
 80111ac:	2300      	movs	r3, #0
 80111ae:	9303      	str	r3, [sp, #12]
 80111b0:	ab08      	add	r3, sp, #32
 80111b2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80111b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80111ba:	ab07      	add	r3, sp, #28
 80111bc:	6861      	ldr	r1, [r4, #4]
 80111be:	9300      	str	r3, [sp, #0]
 80111c0:	6022      	str	r2, [r4, #0]
 80111c2:	f10d 031b 	add.w	r3, sp, #27
 80111c6:	4628      	mov	r0, r5
 80111c8:	f7ff fef6 	bl	8010fb8 <__cvt>
 80111cc:	9b04      	ldr	r3, [sp, #16]
 80111ce:	9907      	ldr	r1, [sp, #28]
 80111d0:	2b47      	cmp	r3, #71	; 0x47
 80111d2:	4680      	mov	r8, r0
 80111d4:	d108      	bne.n	80111e8 <_printf_float+0x110>
 80111d6:	1cc8      	adds	r0, r1, #3
 80111d8:	db02      	blt.n	80111e0 <_printf_float+0x108>
 80111da:	6863      	ldr	r3, [r4, #4]
 80111dc:	4299      	cmp	r1, r3
 80111de:	dd41      	ble.n	8011264 <_printf_float+0x18c>
 80111e0:	f1a9 0902 	sub.w	r9, r9, #2
 80111e4:	fa5f f989 	uxtb.w	r9, r9
 80111e8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80111ec:	d820      	bhi.n	8011230 <_printf_float+0x158>
 80111ee:	3901      	subs	r1, #1
 80111f0:	464a      	mov	r2, r9
 80111f2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80111f6:	9107      	str	r1, [sp, #28]
 80111f8:	f7ff ff30 	bl	801105c <__exponent>
 80111fc:	9a08      	ldr	r2, [sp, #32]
 80111fe:	9004      	str	r0, [sp, #16]
 8011200:	1813      	adds	r3, r2, r0
 8011202:	2a01      	cmp	r2, #1
 8011204:	6123      	str	r3, [r4, #16]
 8011206:	dc02      	bgt.n	801120e <_printf_float+0x136>
 8011208:	6822      	ldr	r2, [r4, #0]
 801120a:	07d2      	lsls	r2, r2, #31
 801120c:	d501      	bpl.n	8011212 <_printf_float+0x13a>
 801120e:	3301      	adds	r3, #1
 8011210:	6123      	str	r3, [r4, #16]
 8011212:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8011216:	2b00      	cmp	r3, #0
 8011218:	d0a2      	beq.n	8011160 <_printf_float+0x88>
 801121a:	232d      	movs	r3, #45	; 0x2d
 801121c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011220:	e79e      	b.n	8011160 <_printf_float+0x88>
 8011222:	9904      	ldr	r1, [sp, #16]
 8011224:	2947      	cmp	r1, #71	; 0x47
 8011226:	d1c1      	bne.n	80111ac <_printf_float+0xd4>
 8011228:	2b00      	cmp	r3, #0
 801122a:	d1bf      	bne.n	80111ac <_printf_float+0xd4>
 801122c:	2301      	movs	r3, #1
 801122e:	e7bc      	b.n	80111aa <_printf_float+0xd2>
 8011230:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8011234:	d118      	bne.n	8011268 <_printf_float+0x190>
 8011236:	2900      	cmp	r1, #0
 8011238:	6863      	ldr	r3, [r4, #4]
 801123a:	dd0b      	ble.n	8011254 <_printf_float+0x17c>
 801123c:	6121      	str	r1, [r4, #16]
 801123e:	b913      	cbnz	r3, 8011246 <_printf_float+0x16e>
 8011240:	6822      	ldr	r2, [r4, #0]
 8011242:	07d0      	lsls	r0, r2, #31
 8011244:	d502      	bpl.n	801124c <_printf_float+0x174>
 8011246:	3301      	adds	r3, #1
 8011248:	440b      	add	r3, r1
 801124a:	6123      	str	r3, [r4, #16]
 801124c:	2300      	movs	r3, #0
 801124e:	65a1      	str	r1, [r4, #88]	; 0x58
 8011250:	9304      	str	r3, [sp, #16]
 8011252:	e7de      	b.n	8011212 <_printf_float+0x13a>
 8011254:	b913      	cbnz	r3, 801125c <_printf_float+0x184>
 8011256:	6822      	ldr	r2, [r4, #0]
 8011258:	07d2      	lsls	r2, r2, #31
 801125a:	d501      	bpl.n	8011260 <_printf_float+0x188>
 801125c:	3302      	adds	r3, #2
 801125e:	e7f4      	b.n	801124a <_printf_float+0x172>
 8011260:	2301      	movs	r3, #1
 8011262:	e7f2      	b.n	801124a <_printf_float+0x172>
 8011264:	f04f 0967 	mov.w	r9, #103	; 0x67
 8011268:	9b08      	ldr	r3, [sp, #32]
 801126a:	4299      	cmp	r1, r3
 801126c:	db05      	blt.n	801127a <_printf_float+0x1a2>
 801126e:	6823      	ldr	r3, [r4, #0]
 8011270:	6121      	str	r1, [r4, #16]
 8011272:	07d8      	lsls	r0, r3, #31
 8011274:	d5ea      	bpl.n	801124c <_printf_float+0x174>
 8011276:	1c4b      	adds	r3, r1, #1
 8011278:	e7e7      	b.n	801124a <_printf_float+0x172>
 801127a:	2900      	cmp	r1, #0
 801127c:	bfd4      	ite	le
 801127e:	f1c1 0202 	rsble	r2, r1, #2
 8011282:	2201      	movgt	r2, #1
 8011284:	4413      	add	r3, r2
 8011286:	e7e0      	b.n	801124a <_printf_float+0x172>
 8011288:	6823      	ldr	r3, [r4, #0]
 801128a:	055a      	lsls	r2, r3, #21
 801128c:	d407      	bmi.n	801129e <_printf_float+0x1c6>
 801128e:	6923      	ldr	r3, [r4, #16]
 8011290:	4642      	mov	r2, r8
 8011292:	4631      	mov	r1, r6
 8011294:	4628      	mov	r0, r5
 8011296:	47b8      	blx	r7
 8011298:	3001      	adds	r0, #1
 801129a:	d12a      	bne.n	80112f2 <_printf_float+0x21a>
 801129c:	e76a      	b.n	8011174 <_printf_float+0x9c>
 801129e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80112a2:	f240 80e2 	bls.w	801146a <_printf_float+0x392>
 80112a6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80112aa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80112ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112b2:	d133      	bne.n	801131c <_printf_float+0x244>
 80112b4:	4a38      	ldr	r2, [pc, #224]	; (8011398 <_printf_float+0x2c0>)
 80112b6:	2301      	movs	r3, #1
 80112b8:	4631      	mov	r1, r6
 80112ba:	4628      	mov	r0, r5
 80112bc:	47b8      	blx	r7
 80112be:	3001      	adds	r0, #1
 80112c0:	f43f af58 	beq.w	8011174 <_printf_float+0x9c>
 80112c4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80112c8:	429a      	cmp	r2, r3
 80112ca:	db02      	blt.n	80112d2 <_printf_float+0x1fa>
 80112cc:	6823      	ldr	r3, [r4, #0]
 80112ce:	07d8      	lsls	r0, r3, #31
 80112d0:	d50f      	bpl.n	80112f2 <_printf_float+0x21a>
 80112d2:	4653      	mov	r3, sl
 80112d4:	465a      	mov	r2, fp
 80112d6:	4631      	mov	r1, r6
 80112d8:	4628      	mov	r0, r5
 80112da:	47b8      	blx	r7
 80112dc:	3001      	adds	r0, #1
 80112de:	f43f af49 	beq.w	8011174 <_printf_float+0x9c>
 80112e2:	f04f 0800 	mov.w	r8, #0
 80112e6:	f104 091a 	add.w	r9, r4, #26
 80112ea:	9b08      	ldr	r3, [sp, #32]
 80112ec:	3b01      	subs	r3, #1
 80112ee:	4543      	cmp	r3, r8
 80112f0:	dc09      	bgt.n	8011306 <_printf_float+0x22e>
 80112f2:	6823      	ldr	r3, [r4, #0]
 80112f4:	079b      	lsls	r3, r3, #30
 80112f6:	f100 8108 	bmi.w	801150a <_printf_float+0x432>
 80112fa:	68e0      	ldr	r0, [r4, #12]
 80112fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80112fe:	4298      	cmp	r0, r3
 8011300:	bfb8      	it	lt
 8011302:	4618      	movlt	r0, r3
 8011304:	e738      	b.n	8011178 <_printf_float+0xa0>
 8011306:	2301      	movs	r3, #1
 8011308:	464a      	mov	r2, r9
 801130a:	4631      	mov	r1, r6
 801130c:	4628      	mov	r0, r5
 801130e:	47b8      	blx	r7
 8011310:	3001      	adds	r0, #1
 8011312:	f43f af2f 	beq.w	8011174 <_printf_float+0x9c>
 8011316:	f108 0801 	add.w	r8, r8, #1
 801131a:	e7e6      	b.n	80112ea <_printf_float+0x212>
 801131c:	9b07      	ldr	r3, [sp, #28]
 801131e:	2b00      	cmp	r3, #0
 8011320:	dc3c      	bgt.n	801139c <_printf_float+0x2c4>
 8011322:	4a1d      	ldr	r2, [pc, #116]	; (8011398 <_printf_float+0x2c0>)
 8011324:	2301      	movs	r3, #1
 8011326:	4631      	mov	r1, r6
 8011328:	4628      	mov	r0, r5
 801132a:	47b8      	blx	r7
 801132c:	3001      	adds	r0, #1
 801132e:	f43f af21 	beq.w	8011174 <_printf_float+0x9c>
 8011332:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8011336:	4313      	orrs	r3, r2
 8011338:	d102      	bne.n	8011340 <_printf_float+0x268>
 801133a:	6823      	ldr	r3, [r4, #0]
 801133c:	07d9      	lsls	r1, r3, #31
 801133e:	d5d8      	bpl.n	80112f2 <_printf_float+0x21a>
 8011340:	4653      	mov	r3, sl
 8011342:	465a      	mov	r2, fp
 8011344:	4631      	mov	r1, r6
 8011346:	4628      	mov	r0, r5
 8011348:	47b8      	blx	r7
 801134a:	3001      	adds	r0, #1
 801134c:	f43f af12 	beq.w	8011174 <_printf_float+0x9c>
 8011350:	f04f 0900 	mov.w	r9, #0
 8011354:	f104 0a1a 	add.w	sl, r4, #26
 8011358:	9b07      	ldr	r3, [sp, #28]
 801135a:	425b      	negs	r3, r3
 801135c:	454b      	cmp	r3, r9
 801135e:	dc01      	bgt.n	8011364 <_printf_float+0x28c>
 8011360:	9b08      	ldr	r3, [sp, #32]
 8011362:	e795      	b.n	8011290 <_printf_float+0x1b8>
 8011364:	2301      	movs	r3, #1
 8011366:	4652      	mov	r2, sl
 8011368:	4631      	mov	r1, r6
 801136a:	4628      	mov	r0, r5
 801136c:	47b8      	blx	r7
 801136e:	3001      	adds	r0, #1
 8011370:	f43f af00 	beq.w	8011174 <_printf_float+0x9c>
 8011374:	f109 0901 	add.w	r9, r9, #1
 8011378:	e7ee      	b.n	8011358 <_printf_float+0x280>
 801137a:	bf00      	nop
 801137c:	f3af 8000 	nop.w
 8011380:	ffffffff 	.word	0xffffffff
 8011384:	7fefffff 	.word	0x7fefffff
 8011388:	08013b08 	.word	0x08013b08
 801138c:	08013b0c 	.word	0x08013b0c
 8011390:	08013b14 	.word	0x08013b14
 8011394:	08013b10 	.word	0x08013b10
 8011398:	08013b18 	.word	0x08013b18
 801139c:	9a08      	ldr	r2, [sp, #32]
 801139e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80113a0:	429a      	cmp	r2, r3
 80113a2:	bfa8      	it	ge
 80113a4:	461a      	movge	r2, r3
 80113a6:	2a00      	cmp	r2, #0
 80113a8:	4691      	mov	r9, r2
 80113aa:	dc38      	bgt.n	801141e <_printf_float+0x346>
 80113ac:	2300      	movs	r3, #0
 80113ae:	9305      	str	r3, [sp, #20]
 80113b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80113b4:	f104 021a 	add.w	r2, r4, #26
 80113b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80113ba:	9905      	ldr	r1, [sp, #20]
 80113bc:	9304      	str	r3, [sp, #16]
 80113be:	eba3 0309 	sub.w	r3, r3, r9
 80113c2:	428b      	cmp	r3, r1
 80113c4:	dc33      	bgt.n	801142e <_printf_float+0x356>
 80113c6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80113ca:	429a      	cmp	r2, r3
 80113cc:	db3c      	blt.n	8011448 <_printf_float+0x370>
 80113ce:	6823      	ldr	r3, [r4, #0]
 80113d0:	07da      	lsls	r2, r3, #31
 80113d2:	d439      	bmi.n	8011448 <_printf_float+0x370>
 80113d4:	9b08      	ldr	r3, [sp, #32]
 80113d6:	9a04      	ldr	r2, [sp, #16]
 80113d8:	9907      	ldr	r1, [sp, #28]
 80113da:	1a9a      	subs	r2, r3, r2
 80113dc:	eba3 0901 	sub.w	r9, r3, r1
 80113e0:	4591      	cmp	r9, r2
 80113e2:	bfa8      	it	ge
 80113e4:	4691      	movge	r9, r2
 80113e6:	f1b9 0f00 	cmp.w	r9, #0
 80113ea:	dc35      	bgt.n	8011458 <_printf_float+0x380>
 80113ec:	f04f 0800 	mov.w	r8, #0
 80113f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80113f4:	f104 0a1a 	add.w	sl, r4, #26
 80113f8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80113fc:	1a9b      	subs	r3, r3, r2
 80113fe:	eba3 0309 	sub.w	r3, r3, r9
 8011402:	4543      	cmp	r3, r8
 8011404:	f77f af75 	ble.w	80112f2 <_printf_float+0x21a>
 8011408:	2301      	movs	r3, #1
 801140a:	4652      	mov	r2, sl
 801140c:	4631      	mov	r1, r6
 801140e:	4628      	mov	r0, r5
 8011410:	47b8      	blx	r7
 8011412:	3001      	adds	r0, #1
 8011414:	f43f aeae 	beq.w	8011174 <_printf_float+0x9c>
 8011418:	f108 0801 	add.w	r8, r8, #1
 801141c:	e7ec      	b.n	80113f8 <_printf_float+0x320>
 801141e:	4613      	mov	r3, r2
 8011420:	4631      	mov	r1, r6
 8011422:	4642      	mov	r2, r8
 8011424:	4628      	mov	r0, r5
 8011426:	47b8      	blx	r7
 8011428:	3001      	adds	r0, #1
 801142a:	d1bf      	bne.n	80113ac <_printf_float+0x2d4>
 801142c:	e6a2      	b.n	8011174 <_printf_float+0x9c>
 801142e:	2301      	movs	r3, #1
 8011430:	4631      	mov	r1, r6
 8011432:	4628      	mov	r0, r5
 8011434:	9204      	str	r2, [sp, #16]
 8011436:	47b8      	blx	r7
 8011438:	3001      	adds	r0, #1
 801143a:	f43f ae9b 	beq.w	8011174 <_printf_float+0x9c>
 801143e:	9b05      	ldr	r3, [sp, #20]
 8011440:	9a04      	ldr	r2, [sp, #16]
 8011442:	3301      	adds	r3, #1
 8011444:	9305      	str	r3, [sp, #20]
 8011446:	e7b7      	b.n	80113b8 <_printf_float+0x2e0>
 8011448:	4653      	mov	r3, sl
 801144a:	465a      	mov	r2, fp
 801144c:	4631      	mov	r1, r6
 801144e:	4628      	mov	r0, r5
 8011450:	47b8      	blx	r7
 8011452:	3001      	adds	r0, #1
 8011454:	d1be      	bne.n	80113d4 <_printf_float+0x2fc>
 8011456:	e68d      	b.n	8011174 <_printf_float+0x9c>
 8011458:	9a04      	ldr	r2, [sp, #16]
 801145a:	464b      	mov	r3, r9
 801145c:	4442      	add	r2, r8
 801145e:	4631      	mov	r1, r6
 8011460:	4628      	mov	r0, r5
 8011462:	47b8      	blx	r7
 8011464:	3001      	adds	r0, #1
 8011466:	d1c1      	bne.n	80113ec <_printf_float+0x314>
 8011468:	e684      	b.n	8011174 <_printf_float+0x9c>
 801146a:	9a08      	ldr	r2, [sp, #32]
 801146c:	2a01      	cmp	r2, #1
 801146e:	dc01      	bgt.n	8011474 <_printf_float+0x39c>
 8011470:	07db      	lsls	r3, r3, #31
 8011472:	d537      	bpl.n	80114e4 <_printf_float+0x40c>
 8011474:	2301      	movs	r3, #1
 8011476:	4642      	mov	r2, r8
 8011478:	4631      	mov	r1, r6
 801147a:	4628      	mov	r0, r5
 801147c:	47b8      	blx	r7
 801147e:	3001      	adds	r0, #1
 8011480:	f43f ae78 	beq.w	8011174 <_printf_float+0x9c>
 8011484:	4653      	mov	r3, sl
 8011486:	465a      	mov	r2, fp
 8011488:	4631      	mov	r1, r6
 801148a:	4628      	mov	r0, r5
 801148c:	47b8      	blx	r7
 801148e:	3001      	adds	r0, #1
 8011490:	f43f ae70 	beq.w	8011174 <_printf_float+0x9c>
 8011494:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8011498:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801149c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114a0:	d01b      	beq.n	80114da <_printf_float+0x402>
 80114a2:	9b08      	ldr	r3, [sp, #32]
 80114a4:	f108 0201 	add.w	r2, r8, #1
 80114a8:	3b01      	subs	r3, #1
 80114aa:	4631      	mov	r1, r6
 80114ac:	4628      	mov	r0, r5
 80114ae:	47b8      	blx	r7
 80114b0:	3001      	adds	r0, #1
 80114b2:	d10e      	bne.n	80114d2 <_printf_float+0x3fa>
 80114b4:	e65e      	b.n	8011174 <_printf_float+0x9c>
 80114b6:	2301      	movs	r3, #1
 80114b8:	464a      	mov	r2, r9
 80114ba:	4631      	mov	r1, r6
 80114bc:	4628      	mov	r0, r5
 80114be:	47b8      	blx	r7
 80114c0:	3001      	adds	r0, #1
 80114c2:	f43f ae57 	beq.w	8011174 <_printf_float+0x9c>
 80114c6:	f108 0801 	add.w	r8, r8, #1
 80114ca:	9b08      	ldr	r3, [sp, #32]
 80114cc:	3b01      	subs	r3, #1
 80114ce:	4543      	cmp	r3, r8
 80114d0:	dcf1      	bgt.n	80114b6 <_printf_float+0x3de>
 80114d2:	9b04      	ldr	r3, [sp, #16]
 80114d4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80114d8:	e6db      	b.n	8011292 <_printf_float+0x1ba>
 80114da:	f04f 0800 	mov.w	r8, #0
 80114de:	f104 091a 	add.w	r9, r4, #26
 80114e2:	e7f2      	b.n	80114ca <_printf_float+0x3f2>
 80114e4:	2301      	movs	r3, #1
 80114e6:	4642      	mov	r2, r8
 80114e8:	e7df      	b.n	80114aa <_printf_float+0x3d2>
 80114ea:	2301      	movs	r3, #1
 80114ec:	464a      	mov	r2, r9
 80114ee:	4631      	mov	r1, r6
 80114f0:	4628      	mov	r0, r5
 80114f2:	47b8      	blx	r7
 80114f4:	3001      	adds	r0, #1
 80114f6:	f43f ae3d 	beq.w	8011174 <_printf_float+0x9c>
 80114fa:	f108 0801 	add.w	r8, r8, #1
 80114fe:	68e3      	ldr	r3, [r4, #12]
 8011500:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011502:	1a5b      	subs	r3, r3, r1
 8011504:	4543      	cmp	r3, r8
 8011506:	dcf0      	bgt.n	80114ea <_printf_float+0x412>
 8011508:	e6f7      	b.n	80112fa <_printf_float+0x222>
 801150a:	f04f 0800 	mov.w	r8, #0
 801150e:	f104 0919 	add.w	r9, r4, #25
 8011512:	e7f4      	b.n	80114fe <_printf_float+0x426>

08011514 <_printf_common>:
 8011514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011518:	4616      	mov	r6, r2
 801151a:	4699      	mov	r9, r3
 801151c:	688a      	ldr	r2, [r1, #8]
 801151e:	690b      	ldr	r3, [r1, #16]
 8011520:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011524:	4293      	cmp	r3, r2
 8011526:	bfb8      	it	lt
 8011528:	4613      	movlt	r3, r2
 801152a:	6033      	str	r3, [r6, #0]
 801152c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011530:	4607      	mov	r7, r0
 8011532:	460c      	mov	r4, r1
 8011534:	b10a      	cbz	r2, 801153a <_printf_common+0x26>
 8011536:	3301      	adds	r3, #1
 8011538:	6033      	str	r3, [r6, #0]
 801153a:	6823      	ldr	r3, [r4, #0]
 801153c:	0699      	lsls	r1, r3, #26
 801153e:	bf42      	ittt	mi
 8011540:	6833      	ldrmi	r3, [r6, #0]
 8011542:	3302      	addmi	r3, #2
 8011544:	6033      	strmi	r3, [r6, #0]
 8011546:	6825      	ldr	r5, [r4, #0]
 8011548:	f015 0506 	ands.w	r5, r5, #6
 801154c:	d106      	bne.n	801155c <_printf_common+0x48>
 801154e:	f104 0a19 	add.w	sl, r4, #25
 8011552:	68e3      	ldr	r3, [r4, #12]
 8011554:	6832      	ldr	r2, [r6, #0]
 8011556:	1a9b      	subs	r3, r3, r2
 8011558:	42ab      	cmp	r3, r5
 801155a:	dc26      	bgt.n	80115aa <_printf_common+0x96>
 801155c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011560:	1e13      	subs	r3, r2, #0
 8011562:	6822      	ldr	r2, [r4, #0]
 8011564:	bf18      	it	ne
 8011566:	2301      	movne	r3, #1
 8011568:	0692      	lsls	r2, r2, #26
 801156a:	d42b      	bmi.n	80115c4 <_printf_common+0xb0>
 801156c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011570:	4649      	mov	r1, r9
 8011572:	4638      	mov	r0, r7
 8011574:	47c0      	blx	r8
 8011576:	3001      	adds	r0, #1
 8011578:	d01e      	beq.n	80115b8 <_printf_common+0xa4>
 801157a:	6823      	ldr	r3, [r4, #0]
 801157c:	68e5      	ldr	r5, [r4, #12]
 801157e:	6832      	ldr	r2, [r6, #0]
 8011580:	f003 0306 	and.w	r3, r3, #6
 8011584:	2b04      	cmp	r3, #4
 8011586:	bf08      	it	eq
 8011588:	1aad      	subeq	r5, r5, r2
 801158a:	68a3      	ldr	r3, [r4, #8]
 801158c:	6922      	ldr	r2, [r4, #16]
 801158e:	bf0c      	ite	eq
 8011590:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011594:	2500      	movne	r5, #0
 8011596:	4293      	cmp	r3, r2
 8011598:	bfc4      	itt	gt
 801159a:	1a9b      	subgt	r3, r3, r2
 801159c:	18ed      	addgt	r5, r5, r3
 801159e:	2600      	movs	r6, #0
 80115a0:	341a      	adds	r4, #26
 80115a2:	42b5      	cmp	r5, r6
 80115a4:	d11a      	bne.n	80115dc <_printf_common+0xc8>
 80115a6:	2000      	movs	r0, #0
 80115a8:	e008      	b.n	80115bc <_printf_common+0xa8>
 80115aa:	2301      	movs	r3, #1
 80115ac:	4652      	mov	r2, sl
 80115ae:	4649      	mov	r1, r9
 80115b0:	4638      	mov	r0, r7
 80115b2:	47c0      	blx	r8
 80115b4:	3001      	adds	r0, #1
 80115b6:	d103      	bne.n	80115c0 <_printf_common+0xac>
 80115b8:	f04f 30ff 	mov.w	r0, #4294967295
 80115bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80115c0:	3501      	adds	r5, #1
 80115c2:	e7c6      	b.n	8011552 <_printf_common+0x3e>
 80115c4:	18e1      	adds	r1, r4, r3
 80115c6:	1c5a      	adds	r2, r3, #1
 80115c8:	2030      	movs	r0, #48	; 0x30
 80115ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80115ce:	4422      	add	r2, r4
 80115d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80115d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80115d8:	3302      	adds	r3, #2
 80115da:	e7c7      	b.n	801156c <_printf_common+0x58>
 80115dc:	2301      	movs	r3, #1
 80115de:	4622      	mov	r2, r4
 80115e0:	4649      	mov	r1, r9
 80115e2:	4638      	mov	r0, r7
 80115e4:	47c0      	blx	r8
 80115e6:	3001      	adds	r0, #1
 80115e8:	d0e6      	beq.n	80115b8 <_printf_common+0xa4>
 80115ea:	3601      	adds	r6, #1
 80115ec:	e7d9      	b.n	80115a2 <_printf_common+0x8e>
	...

080115f0 <_printf_i>:
 80115f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80115f4:	7e0f      	ldrb	r7, [r1, #24]
 80115f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80115f8:	2f78      	cmp	r7, #120	; 0x78
 80115fa:	4691      	mov	r9, r2
 80115fc:	4680      	mov	r8, r0
 80115fe:	460c      	mov	r4, r1
 8011600:	469a      	mov	sl, r3
 8011602:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011606:	d807      	bhi.n	8011618 <_printf_i+0x28>
 8011608:	2f62      	cmp	r7, #98	; 0x62
 801160a:	d80a      	bhi.n	8011622 <_printf_i+0x32>
 801160c:	2f00      	cmp	r7, #0
 801160e:	f000 80d8 	beq.w	80117c2 <_printf_i+0x1d2>
 8011612:	2f58      	cmp	r7, #88	; 0x58
 8011614:	f000 80a3 	beq.w	801175e <_printf_i+0x16e>
 8011618:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801161c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011620:	e03a      	b.n	8011698 <_printf_i+0xa8>
 8011622:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011626:	2b15      	cmp	r3, #21
 8011628:	d8f6      	bhi.n	8011618 <_printf_i+0x28>
 801162a:	a101      	add	r1, pc, #4	; (adr r1, 8011630 <_printf_i+0x40>)
 801162c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011630:	08011689 	.word	0x08011689
 8011634:	0801169d 	.word	0x0801169d
 8011638:	08011619 	.word	0x08011619
 801163c:	08011619 	.word	0x08011619
 8011640:	08011619 	.word	0x08011619
 8011644:	08011619 	.word	0x08011619
 8011648:	0801169d 	.word	0x0801169d
 801164c:	08011619 	.word	0x08011619
 8011650:	08011619 	.word	0x08011619
 8011654:	08011619 	.word	0x08011619
 8011658:	08011619 	.word	0x08011619
 801165c:	080117a9 	.word	0x080117a9
 8011660:	080116cd 	.word	0x080116cd
 8011664:	0801178b 	.word	0x0801178b
 8011668:	08011619 	.word	0x08011619
 801166c:	08011619 	.word	0x08011619
 8011670:	080117cb 	.word	0x080117cb
 8011674:	08011619 	.word	0x08011619
 8011678:	080116cd 	.word	0x080116cd
 801167c:	08011619 	.word	0x08011619
 8011680:	08011619 	.word	0x08011619
 8011684:	08011793 	.word	0x08011793
 8011688:	682b      	ldr	r3, [r5, #0]
 801168a:	1d1a      	adds	r2, r3, #4
 801168c:	681b      	ldr	r3, [r3, #0]
 801168e:	602a      	str	r2, [r5, #0]
 8011690:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011694:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011698:	2301      	movs	r3, #1
 801169a:	e0a3      	b.n	80117e4 <_printf_i+0x1f4>
 801169c:	6820      	ldr	r0, [r4, #0]
 801169e:	6829      	ldr	r1, [r5, #0]
 80116a0:	0606      	lsls	r6, r0, #24
 80116a2:	f101 0304 	add.w	r3, r1, #4
 80116a6:	d50a      	bpl.n	80116be <_printf_i+0xce>
 80116a8:	680e      	ldr	r6, [r1, #0]
 80116aa:	602b      	str	r3, [r5, #0]
 80116ac:	2e00      	cmp	r6, #0
 80116ae:	da03      	bge.n	80116b8 <_printf_i+0xc8>
 80116b0:	232d      	movs	r3, #45	; 0x2d
 80116b2:	4276      	negs	r6, r6
 80116b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80116b8:	485e      	ldr	r0, [pc, #376]	; (8011834 <_printf_i+0x244>)
 80116ba:	230a      	movs	r3, #10
 80116bc:	e019      	b.n	80116f2 <_printf_i+0x102>
 80116be:	680e      	ldr	r6, [r1, #0]
 80116c0:	602b      	str	r3, [r5, #0]
 80116c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80116c6:	bf18      	it	ne
 80116c8:	b236      	sxthne	r6, r6
 80116ca:	e7ef      	b.n	80116ac <_printf_i+0xbc>
 80116cc:	682b      	ldr	r3, [r5, #0]
 80116ce:	6820      	ldr	r0, [r4, #0]
 80116d0:	1d19      	adds	r1, r3, #4
 80116d2:	6029      	str	r1, [r5, #0]
 80116d4:	0601      	lsls	r1, r0, #24
 80116d6:	d501      	bpl.n	80116dc <_printf_i+0xec>
 80116d8:	681e      	ldr	r6, [r3, #0]
 80116da:	e002      	b.n	80116e2 <_printf_i+0xf2>
 80116dc:	0646      	lsls	r6, r0, #25
 80116de:	d5fb      	bpl.n	80116d8 <_printf_i+0xe8>
 80116e0:	881e      	ldrh	r6, [r3, #0]
 80116e2:	4854      	ldr	r0, [pc, #336]	; (8011834 <_printf_i+0x244>)
 80116e4:	2f6f      	cmp	r7, #111	; 0x6f
 80116e6:	bf0c      	ite	eq
 80116e8:	2308      	moveq	r3, #8
 80116ea:	230a      	movne	r3, #10
 80116ec:	2100      	movs	r1, #0
 80116ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80116f2:	6865      	ldr	r5, [r4, #4]
 80116f4:	60a5      	str	r5, [r4, #8]
 80116f6:	2d00      	cmp	r5, #0
 80116f8:	bfa2      	ittt	ge
 80116fa:	6821      	ldrge	r1, [r4, #0]
 80116fc:	f021 0104 	bicge.w	r1, r1, #4
 8011700:	6021      	strge	r1, [r4, #0]
 8011702:	b90e      	cbnz	r6, 8011708 <_printf_i+0x118>
 8011704:	2d00      	cmp	r5, #0
 8011706:	d04d      	beq.n	80117a4 <_printf_i+0x1b4>
 8011708:	4615      	mov	r5, r2
 801170a:	fbb6 f1f3 	udiv	r1, r6, r3
 801170e:	fb03 6711 	mls	r7, r3, r1, r6
 8011712:	5dc7      	ldrb	r7, [r0, r7]
 8011714:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011718:	4637      	mov	r7, r6
 801171a:	42bb      	cmp	r3, r7
 801171c:	460e      	mov	r6, r1
 801171e:	d9f4      	bls.n	801170a <_printf_i+0x11a>
 8011720:	2b08      	cmp	r3, #8
 8011722:	d10b      	bne.n	801173c <_printf_i+0x14c>
 8011724:	6823      	ldr	r3, [r4, #0]
 8011726:	07de      	lsls	r6, r3, #31
 8011728:	d508      	bpl.n	801173c <_printf_i+0x14c>
 801172a:	6923      	ldr	r3, [r4, #16]
 801172c:	6861      	ldr	r1, [r4, #4]
 801172e:	4299      	cmp	r1, r3
 8011730:	bfde      	ittt	le
 8011732:	2330      	movle	r3, #48	; 0x30
 8011734:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011738:	f105 35ff 	addle.w	r5, r5, #4294967295
 801173c:	1b52      	subs	r2, r2, r5
 801173e:	6122      	str	r2, [r4, #16]
 8011740:	f8cd a000 	str.w	sl, [sp]
 8011744:	464b      	mov	r3, r9
 8011746:	aa03      	add	r2, sp, #12
 8011748:	4621      	mov	r1, r4
 801174a:	4640      	mov	r0, r8
 801174c:	f7ff fee2 	bl	8011514 <_printf_common>
 8011750:	3001      	adds	r0, #1
 8011752:	d14c      	bne.n	80117ee <_printf_i+0x1fe>
 8011754:	f04f 30ff 	mov.w	r0, #4294967295
 8011758:	b004      	add	sp, #16
 801175a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801175e:	4835      	ldr	r0, [pc, #212]	; (8011834 <_printf_i+0x244>)
 8011760:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011764:	6829      	ldr	r1, [r5, #0]
 8011766:	6823      	ldr	r3, [r4, #0]
 8011768:	f851 6b04 	ldr.w	r6, [r1], #4
 801176c:	6029      	str	r1, [r5, #0]
 801176e:	061d      	lsls	r5, r3, #24
 8011770:	d514      	bpl.n	801179c <_printf_i+0x1ac>
 8011772:	07df      	lsls	r7, r3, #31
 8011774:	bf44      	itt	mi
 8011776:	f043 0320 	orrmi.w	r3, r3, #32
 801177a:	6023      	strmi	r3, [r4, #0]
 801177c:	b91e      	cbnz	r6, 8011786 <_printf_i+0x196>
 801177e:	6823      	ldr	r3, [r4, #0]
 8011780:	f023 0320 	bic.w	r3, r3, #32
 8011784:	6023      	str	r3, [r4, #0]
 8011786:	2310      	movs	r3, #16
 8011788:	e7b0      	b.n	80116ec <_printf_i+0xfc>
 801178a:	6823      	ldr	r3, [r4, #0]
 801178c:	f043 0320 	orr.w	r3, r3, #32
 8011790:	6023      	str	r3, [r4, #0]
 8011792:	2378      	movs	r3, #120	; 0x78
 8011794:	4828      	ldr	r0, [pc, #160]	; (8011838 <_printf_i+0x248>)
 8011796:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801179a:	e7e3      	b.n	8011764 <_printf_i+0x174>
 801179c:	0659      	lsls	r1, r3, #25
 801179e:	bf48      	it	mi
 80117a0:	b2b6      	uxthmi	r6, r6
 80117a2:	e7e6      	b.n	8011772 <_printf_i+0x182>
 80117a4:	4615      	mov	r5, r2
 80117a6:	e7bb      	b.n	8011720 <_printf_i+0x130>
 80117a8:	682b      	ldr	r3, [r5, #0]
 80117aa:	6826      	ldr	r6, [r4, #0]
 80117ac:	6961      	ldr	r1, [r4, #20]
 80117ae:	1d18      	adds	r0, r3, #4
 80117b0:	6028      	str	r0, [r5, #0]
 80117b2:	0635      	lsls	r5, r6, #24
 80117b4:	681b      	ldr	r3, [r3, #0]
 80117b6:	d501      	bpl.n	80117bc <_printf_i+0x1cc>
 80117b8:	6019      	str	r1, [r3, #0]
 80117ba:	e002      	b.n	80117c2 <_printf_i+0x1d2>
 80117bc:	0670      	lsls	r0, r6, #25
 80117be:	d5fb      	bpl.n	80117b8 <_printf_i+0x1c8>
 80117c0:	8019      	strh	r1, [r3, #0]
 80117c2:	2300      	movs	r3, #0
 80117c4:	6123      	str	r3, [r4, #16]
 80117c6:	4615      	mov	r5, r2
 80117c8:	e7ba      	b.n	8011740 <_printf_i+0x150>
 80117ca:	682b      	ldr	r3, [r5, #0]
 80117cc:	1d1a      	adds	r2, r3, #4
 80117ce:	602a      	str	r2, [r5, #0]
 80117d0:	681d      	ldr	r5, [r3, #0]
 80117d2:	6862      	ldr	r2, [r4, #4]
 80117d4:	2100      	movs	r1, #0
 80117d6:	4628      	mov	r0, r5
 80117d8:	f7ee fd8a 	bl	80002f0 <memchr>
 80117dc:	b108      	cbz	r0, 80117e2 <_printf_i+0x1f2>
 80117de:	1b40      	subs	r0, r0, r5
 80117e0:	6060      	str	r0, [r4, #4]
 80117e2:	6863      	ldr	r3, [r4, #4]
 80117e4:	6123      	str	r3, [r4, #16]
 80117e6:	2300      	movs	r3, #0
 80117e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80117ec:	e7a8      	b.n	8011740 <_printf_i+0x150>
 80117ee:	6923      	ldr	r3, [r4, #16]
 80117f0:	462a      	mov	r2, r5
 80117f2:	4649      	mov	r1, r9
 80117f4:	4640      	mov	r0, r8
 80117f6:	47d0      	blx	sl
 80117f8:	3001      	adds	r0, #1
 80117fa:	d0ab      	beq.n	8011754 <_printf_i+0x164>
 80117fc:	6823      	ldr	r3, [r4, #0]
 80117fe:	079b      	lsls	r3, r3, #30
 8011800:	d413      	bmi.n	801182a <_printf_i+0x23a>
 8011802:	68e0      	ldr	r0, [r4, #12]
 8011804:	9b03      	ldr	r3, [sp, #12]
 8011806:	4298      	cmp	r0, r3
 8011808:	bfb8      	it	lt
 801180a:	4618      	movlt	r0, r3
 801180c:	e7a4      	b.n	8011758 <_printf_i+0x168>
 801180e:	2301      	movs	r3, #1
 8011810:	4632      	mov	r2, r6
 8011812:	4649      	mov	r1, r9
 8011814:	4640      	mov	r0, r8
 8011816:	47d0      	blx	sl
 8011818:	3001      	adds	r0, #1
 801181a:	d09b      	beq.n	8011754 <_printf_i+0x164>
 801181c:	3501      	adds	r5, #1
 801181e:	68e3      	ldr	r3, [r4, #12]
 8011820:	9903      	ldr	r1, [sp, #12]
 8011822:	1a5b      	subs	r3, r3, r1
 8011824:	42ab      	cmp	r3, r5
 8011826:	dcf2      	bgt.n	801180e <_printf_i+0x21e>
 8011828:	e7eb      	b.n	8011802 <_printf_i+0x212>
 801182a:	2500      	movs	r5, #0
 801182c:	f104 0619 	add.w	r6, r4, #25
 8011830:	e7f5      	b.n	801181e <_printf_i+0x22e>
 8011832:	bf00      	nop
 8011834:	08013b1a 	.word	0x08013b1a
 8011838:	08013b2b 	.word	0x08013b2b

0801183c <_sbrk_r>:
 801183c:	b538      	push	{r3, r4, r5, lr}
 801183e:	4d06      	ldr	r5, [pc, #24]	; (8011858 <_sbrk_r+0x1c>)
 8011840:	2300      	movs	r3, #0
 8011842:	4604      	mov	r4, r0
 8011844:	4608      	mov	r0, r1
 8011846:	602b      	str	r3, [r5, #0]
 8011848:	f7ef fe7e 	bl	8001548 <_sbrk>
 801184c:	1c43      	adds	r3, r0, #1
 801184e:	d102      	bne.n	8011856 <_sbrk_r+0x1a>
 8011850:	682b      	ldr	r3, [r5, #0]
 8011852:	b103      	cbz	r3, 8011856 <_sbrk_r+0x1a>
 8011854:	6023      	str	r3, [r4, #0]
 8011856:	bd38      	pop	{r3, r4, r5, pc}
 8011858:	24002104 	.word	0x24002104

0801185c <siprintf>:
 801185c:	b40e      	push	{r1, r2, r3}
 801185e:	b500      	push	{lr}
 8011860:	b09c      	sub	sp, #112	; 0x70
 8011862:	ab1d      	add	r3, sp, #116	; 0x74
 8011864:	9002      	str	r0, [sp, #8]
 8011866:	9006      	str	r0, [sp, #24]
 8011868:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801186c:	4809      	ldr	r0, [pc, #36]	; (8011894 <siprintf+0x38>)
 801186e:	9107      	str	r1, [sp, #28]
 8011870:	9104      	str	r1, [sp, #16]
 8011872:	4909      	ldr	r1, [pc, #36]	; (8011898 <siprintf+0x3c>)
 8011874:	f853 2b04 	ldr.w	r2, [r3], #4
 8011878:	9105      	str	r1, [sp, #20]
 801187a:	6800      	ldr	r0, [r0, #0]
 801187c:	9301      	str	r3, [sp, #4]
 801187e:	a902      	add	r1, sp, #8
 8011880:	f001 fa0e 	bl	8012ca0 <_svfiprintf_r>
 8011884:	9b02      	ldr	r3, [sp, #8]
 8011886:	2200      	movs	r2, #0
 8011888:	701a      	strb	r2, [r3, #0]
 801188a:	b01c      	add	sp, #112	; 0x70
 801188c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011890:	b003      	add	sp, #12
 8011892:	4770      	bx	lr
 8011894:	2400019c 	.word	0x2400019c
 8011898:	ffff0208 	.word	0xffff0208

0801189c <quorem>:
 801189c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118a0:	6903      	ldr	r3, [r0, #16]
 80118a2:	690c      	ldr	r4, [r1, #16]
 80118a4:	42a3      	cmp	r3, r4
 80118a6:	4607      	mov	r7, r0
 80118a8:	f2c0 8081 	blt.w	80119ae <quorem+0x112>
 80118ac:	3c01      	subs	r4, #1
 80118ae:	f101 0814 	add.w	r8, r1, #20
 80118b2:	f100 0514 	add.w	r5, r0, #20
 80118b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80118ba:	9301      	str	r3, [sp, #4]
 80118bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80118c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80118c4:	3301      	adds	r3, #1
 80118c6:	429a      	cmp	r2, r3
 80118c8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80118cc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80118d0:	fbb2 f6f3 	udiv	r6, r2, r3
 80118d4:	d331      	bcc.n	801193a <quorem+0x9e>
 80118d6:	f04f 0e00 	mov.w	lr, #0
 80118da:	4640      	mov	r0, r8
 80118dc:	46ac      	mov	ip, r5
 80118de:	46f2      	mov	sl, lr
 80118e0:	f850 2b04 	ldr.w	r2, [r0], #4
 80118e4:	b293      	uxth	r3, r2
 80118e6:	fb06 e303 	mla	r3, r6, r3, lr
 80118ea:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80118ee:	b29b      	uxth	r3, r3
 80118f0:	ebaa 0303 	sub.w	r3, sl, r3
 80118f4:	f8dc a000 	ldr.w	sl, [ip]
 80118f8:	0c12      	lsrs	r2, r2, #16
 80118fa:	fa13 f38a 	uxtah	r3, r3, sl
 80118fe:	fb06 e202 	mla	r2, r6, r2, lr
 8011902:	9300      	str	r3, [sp, #0]
 8011904:	9b00      	ldr	r3, [sp, #0]
 8011906:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801190a:	b292      	uxth	r2, r2
 801190c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8011910:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011914:	f8bd 3000 	ldrh.w	r3, [sp]
 8011918:	4581      	cmp	r9, r0
 801191a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801191e:	f84c 3b04 	str.w	r3, [ip], #4
 8011922:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011926:	d2db      	bcs.n	80118e0 <quorem+0x44>
 8011928:	f855 300b 	ldr.w	r3, [r5, fp]
 801192c:	b92b      	cbnz	r3, 801193a <quorem+0x9e>
 801192e:	9b01      	ldr	r3, [sp, #4]
 8011930:	3b04      	subs	r3, #4
 8011932:	429d      	cmp	r5, r3
 8011934:	461a      	mov	r2, r3
 8011936:	d32e      	bcc.n	8011996 <quorem+0xfa>
 8011938:	613c      	str	r4, [r7, #16]
 801193a:	4638      	mov	r0, r7
 801193c:	f001 f83c 	bl	80129b8 <__mcmp>
 8011940:	2800      	cmp	r0, #0
 8011942:	db24      	blt.n	801198e <quorem+0xf2>
 8011944:	3601      	adds	r6, #1
 8011946:	4628      	mov	r0, r5
 8011948:	f04f 0c00 	mov.w	ip, #0
 801194c:	f858 2b04 	ldr.w	r2, [r8], #4
 8011950:	f8d0 e000 	ldr.w	lr, [r0]
 8011954:	b293      	uxth	r3, r2
 8011956:	ebac 0303 	sub.w	r3, ip, r3
 801195a:	0c12      	lsrs	r2, r2, #16
 801195c:	fa13 f38e 	uxtah	r3, r3, lr
 8011960:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011964:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011968:	b29b      	uxth	r3, r3
 801196a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801196e:	45c1      	cmp	r9, r8
 8011970:	f840 3b04 	str.w	r3, [r0], #4
 8011974:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011978:	d2e8      	bcs.n	801194c <quorem+0xb0>
 801197a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801197e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011982:	b922      	cbnz	r2, 801198e <quorem+0xf2>
 8011984:	3b04      	subs	r3, #4
 8011986:	429d      	cmp	r5, r3
 8011988:	461a      	mov	r2, r3
 801198a:	d30a      	bcc.n	80119a2 <quorem+0x106>
 801198c:	613c      	str	r4, [r7, #16]
 801198e:	4630      	mov	r0, r6
 8011990:	b003      	add	sp, #12
 8011992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011996:	6812      	ldr	r2, [r2, #0]
 8011998:	3b04      	subs	r3, #4
 801199a:	2a00      	cmp	r2, #0
 801199c:	d1cc      	bne.n	8011938 <quorem+0x9c>
 801199e:	3c01      	subs	r4, #1
 80119a0:	e7c7      	b.n	8011932 <quorem+0x96>
 80119a2:	6812      	ldr	r2, [r2, #0]
 80119a4:	3b04      	subs	r3, #4
 80119a6:	2a00      	cmp	r2, #0
 80119a8:	d1f0      	bne.n	801198c <quorem+0xf0>
 80119aa:	3c01      	subs	r4, #1
 80119ac:	e7eb      	b.n	8011986 <quorem+0xea>
 80119ae:	2000      	movs	r0, #0
 80119b0:	e7ee      	b.n	8011990 <quorem+0xf4>
 80119b2:	0000      	movs	r0, r0
 80119b4:	0000      	movs	r0, r0
	...

080119b8 <_dtoa_r>:
 80119b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119bc:	ed2d 8b02 	vpush	{d8}
 80119c0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80119c2:	b091      	sub	sp, #68	; 0x44
 80119c4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80119c8:	ec59 8b10 	vmov	r8, r9, d0
 80119cc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80119ce:	9106      	str	r1, [sp, #24]
 80119d0:	4606      	mov	r6, r0
 80119d2:	9208      	str	r2, [sp, #32]
 80119d4:	930c      	str	r3, [sp, #48]	; 0x30
 80119d6:	b975      	cbnz	r5, 80119f6 <_dtoa_r+0x3e>
 80119d8:	2010      	movs	r0, #16
 80119da:	f7ff f9e7 	bl	8010dac <malloc>
 80119de:	4602      	mov	r2, r0
 80119e0:	6270      	str	r0, [r6, #36]	; 0x24
 80119e2:	b920      	cbnz	r0, 80119ee <_dtoa_r+0x36>
 80119e4:	4baa      	ldr	r3, [pc, #680]	; (8011c90 <_dtoa_r+0x2d8>)
 80119e6:	21ea      	movs	r1, #234	; 0xea
 80119e8:	48aa      	ldr	r0, [pc, #680]	; (8011c94 <_dtoa_r+0x2dc>)
 80119ea:	f001 fa59 	bl	8012ea0 <__assert_func>
 80119ee:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80119f2:	6005      	str	r5, [r0, #0]
 80119f4:	60c5      	str	r5, [r0, #12]
 80119f6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80119f8:	6819      	ldr	r1, [r3, #0]
 80119fa:	b151      	cbz	r1, 8011a12 <_dtoa_r+0x5a>
 80119fc:	685a      	ldr	r2, [r3, #4]
 80119fe:	604a      	str	r2, [r1, #4]
 8011a00:	2301      	movs	r3, #1
 8011a02:	4093      	lsls	r3, r2
 8011a04:	608b      	str	r3, [r1, #8]
 8011a06:	4630      	mov	r0, r6
 8011a08:	f000 fd94 	bl	8012534 <_Bfree>
 8011a0c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8011a0e:	2200      	movs	r2, #0
 8011a10:	601a      	str	r2, [r3, #0]
 8011a12:	f1b9 0300 	subs.w	r3, r9, #0
 8011a16:	bfbb      	ittet	lt
 8011a18:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8011a1c:	9303      	strlt	r3, [sp, #12]
 8011a1e:	2300      	movge	r3, #0
 8011a20:	2201      	movlt	r2, #1
 8011a22:	bfac      	ite	ge
 8011a24:	6023      	strge	r3, [r4, #0]
 8011a26:	6022      	strlt	r2, [r4, #0]
 8011a28:	4b9b      	ldr	r3, [pc, #620]	; (8011c98 <_dtoa_r+0x2e0>)
 8011a2a:	9c03      	ldr	r4, [sp, #12]
 8011a2c:	43a3      	bics	r3, r4
 8011a2e:	d11c      	bne.n	8011a6a <_dtoa_r+0xb2>
 8011a30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011a32:	f242 730f 	movw	r3, #9999	; 0x270f
 8011a36:	6013      	str	r3, [r2, #0]
 8011a38:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8011a3c:	ea53 0308 	orrs.w	r3, r3, r8
 8011a40:	f000 84fd 	beq.w	801243e <_dtoa_r+0xa86>
 8011a44:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011a46:	b963      	cbnz	r3, 8011a62 <_dtoa_r+0xaa>
 8011a48:	4b94      	ldr	r3, [pc, #592]	; (8011c9c <_dtoa_r+0x2e4>)
 8011a4a:	e01f      	b.n	8011a8c <_dtoa_r+0xd4>
 8011a4c:	4b94      	ldr	r3, [pc, #592]	; (8011ca0 <_dtoa_r+0x2e8>)
 8011a4e:	9301      	str	r3, [sp, #4]
 8011a50:	3308      	adds	r3, #8
 8011a52:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8011a54:	6013      	str	r3, [r2, #0]
 8011a56:	9801      	ldr	r0, [sp, #4]
 8011a58:	b011      	add	sp, #68	; 0x44
 8011a5a:	ecbd 8b02 	vpop	{d8}
 8011a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a62:	4b8e      	ldr	r3, [pc, #568]	; (8011c9c <_dtoa_r+0x2e4>)
 8011a64:	9301      	str	r3, [sp, #4]
 8011a66:	3303      	adds	r3, #3
 8011a68:	e7f3      	b.n	8011a52 <_dtoa_r+0x9a>
 8011a6a:	ed9d 8b02 	vldr	d8, [sp, #8]
 8011a6e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a76:	d10b      	bne.n	8011a90 <_dtoa_r+0xd8>
 8011a78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011a7a:	2301      	movs	r3, #1
 8011a7c:	6013      	str	r3, [r2, #0]
 8011a7e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	f000 84d9 	beq.w	8012438 <_dtoa_r+0xa80>
 8011a86:	4887      	ldr	r0, [pc, #540]	; (8011ca4 <_dtoa_r+0x2ec>)
 8011a88:	6018      	str	r0, [r3, #0]
 8011a8a:	1e43      	subs	r3, r0, #1
 8011a8c:	9301      	str	r3, [sp, #4]
 8011a8e:	e7e2      	b.n	8011a56 <_dtoa_r+0x9e>
 8011a90:	a90f      	add	r1, sp, #60	; 0x3c
 8011a92:	aa0e      	add	r2, sp, #56	; 0x38
 8011a94:	4630      	mov	r0, r6
 8011a96:	eeb0 0b48 	vmov.f64	d0, d8
 8011a9a:	f001 f833 	bl	8012b04 <__d2b>
 8011a9e:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8011aa2:	4605      	mov	r5, r0
 8011aa4:	980e      	ldr	r0, [sp, #56]	; 0x38
 8011aa6:	2900      	cmp	r1, #0
 8011aa8:	d046      	beq.n	8011b38 <_dtoa_r+0x180>
 8011aaa:	ee18 4a90 	vmov	r4, s17
 8011aae:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8011ab2:	ec53 2b18 	vmov	r2, r3, d8
 8011ab6:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8011aba:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011abe:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8011ac2:	2400      	movs	r4, #0
 8011ac4:	ec43 2b16 	vmov	d6, r2, r3
 8011ac8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8011acc:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8011c78 <_dtoa_r+0x2c0>
 8011ad0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011ad4:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8011c80 <_dtoa_r+0x2c8>
 8011ad8:	eea7 6b05 	vfma.f64	d6, d7, d5
 8011adc:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8011c88 <_dtoa_r+0x2d0>
 8011ae0:	ee07 1a90 	vmov	s15, r1
 8011ae4:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8011ae8:	eeb0 7b46 	vmov.f64	d7, d6
 8011aec:	eea4 7b05 	vfma.f64	d7, d4, d5
 8011af0:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8011af4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8011af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011afc:	ee16 ba90 	vmov	fp, s13
 8011b00:	940a      	str	r4, [sp, #40]	; 0x28
 8011b02:	d508      	bpl.n	8011b16 <_dtoa_r+0x15e>
 8011b04:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8011b08:	eeb4 6b47 	vcmp.f64	d6, d7
 8011b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b10:	bf18      	it	ne
 8011b12:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8011b16:	f1bb 0f16 	cmp.w	fp, #22
 8011b1a:	d82f      	bhi.n	8011b7c <_dtoa_r+0x1c4>
 8011b1c:	4b62      	ldr	r3, [pc, #392]	; (8011ca8 <_dtoa_r+0x2f0>)
 8011b1e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8011b22:	ed93 7b00 	vldr	d7, [r3]
 8011b26:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8011b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b2e:	d501      	bpl.n	8011b34 <_dtoa_r+0x17c>
 8011b30:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011b34:	2300      	movs	r3, #0
 8011b36:	e022      	b.n	8011b7e <_dtoa_r+0x1c6>
 8011b38:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011b3a:	4401      	add	r1, r0
 8011b3c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8011b40:	2b20      	cmp	r3, #32
 8011b42:	bfc1      	itttt	gt
 8011b44:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8011b48:	fa04 f303 	lslgt.w	r3, r4, r3
 8011b4c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8011b50:	fa28 f804 	lsrgt.w	r8, r8, r4
 8011b54:	bfd6      	itet	le
 8011b56:	f1c3 0320 	rsble	r3, r3, #32
 8011b5a:	ea43 0808 	orrgt.w	r8, r3, r8
 8011b5e:	fa08 f803 	lslle.w	r8, r8, r3
 8011b62:	ee07 8a90 	vmov	s15, r8
 8011b66:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8011b6a:	3901      	subs	r1, #1
 8011b6c:	ee17 4a90 	vmov	r4, s15
 8011b70:	ec53 2b17 	vmov	r2, r3, d7
 8011b74:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8011b78:	2401      	movs	r4, #1
 8011b7a:	e7a3      	b.n	8011ac4 <_dtoa_r+0x10c>
 8011b7c:	2301      	movs	r3, #1
 8011b7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8011b80:	1a43      	subs	r3, r0, r1
 8011b82:	1e5a      	subs	r2, r3, #1
 8011b84:	bf45      	ittet	mi
 8011b86:	f1c3 0301 	rsbmi	r3, r3, #1
 8011b8a:	9304      	strmi	r3, [sp, #16]
 8011b8c:	2300      	movpl	r3, #0
 8011b8e:	2300      	movmi	r3, #0
 8011b90:	9205      	str	r2, [sp, #20]
 8011b92:	bf54      	ite	pl
 8011b94:	9304      	strpl	r3, [sp, #16]
 8011b96:	9305      	strmi	r3, [sp, #20]
 8011b98:	f1bb 0f00 	cmp.w	fp, #0
 8011b9c:	db18      	blt.n	8011bd0 <_dtoa_r+0x218>
 8011b9e:	9b05      	ldr	r3, [sp, #20]
 8011ba0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8011ba4:	445b      	add	r3, fp
 8011ba6:	9305      	str	r3, [sp, #20]
 8011ba8:	2300      	movs	r3, #0
 8011baa:	9a06      	ldr	r2, [sp, #24]
 8011bac:	2a09      	cmp	r2, #9
 8011bae:	d849      	bhi.n	8011c44 <_dtoa_r+0x28c>
 8011bb0:	2a05      	cmp	r2, #5
 8011bb2:	bfc4      	itt	gt
 8011bb4:	3a04      	subgt	r2, #4
 8011bb6:	9206      	strgt	r2, [sp, #24]
 8011bb8:	9a06      	ldr	r2, [sp, #24]
 8011bba:	f1a2 0202 	sub.w	r2, r2, #2
 8011bbe:	bfcc      	ite	gt
 8011bc0:	2400      	movgt	r4, #0
 8011bc2:	2401      	movle	r4, #1
 8011bc4:	2a03      	cmp	r2, #3
 8011bc6:	d848      	bhi.n	8011c5a <_dtoa_r+0x2a2>
 8011bc8:	e8df f002 	tbb	[pc, r2]
 8011bcc:	3a2c2e0b 	.word	0x3a2c2e0b
 8011bd0:	9b04      	ldr	r3, [sp, #16]
 8011bd2:	2200      	movs	r2, #0
 8011bd4:	eba3 030b 	sub.w	r3, r3, fp
 8011bd8:	9304      	str	r3, [sp, #16]
 8011bda:	9209      	str	r2, [sp, #36]	; 0x24
 8011bdc:	f1cb 0300 	rsb	r3, fp, #0
 8011be0:	e7e3      	b.n	8011baa <_dtoa_r+0x1f2>
 8011be2:	2200      	movs	r2, #0
 8011be4:	9207      	str	r2, [sp, #28]
 8011be6:	9a08      	ldr	r2, [sp, #32]
 8011be8:	2a00      	cmp	r2, #0
 8011bea:	dc39      	bgt.n	8011c60 <_dtoa_r+0x2a8>
 8011bec:	f04f 0a01 	mov.w	sl, #1
 8011bf0:	46d1      	mov	r9, sl
 8011bf2:	4652      	mov	r2, sl
 8011bf4:	f8cd a020 	str.w	sl, [sp, #32]
 8011bf8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8011bfa:	2100      	movs	r1, #0
 8011bfc:	6079      	str	r1, [r7, #4]
 8011bfe:	2004      	movs	r0, #4
 8011c00:	f100 0c14 	add.w	ip, r0, #20
 8011c04:	4594      	cmp	ip, r2
 8011c06:	6879      	ldr	r1, [r7, #4]
 8011c08:	d92f      	bls.n	8011c6a <_dtoa_r+0x2b2>
 8011c0a:	4630      	mov	r0, r6
 8011c0c:	930d      	str	r3, [sp, #52]	; 0x34
 8011c0e:	f000 fc51 	bl	80124b4 <_Balloc>
 8011c12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011c14:	9001      	str	r0, [sp, #4]
 8011c16:	4602      	mov	r2, r0
 8011c18:	2800      	cmp	r0, #0
 8011c1a:	d149      	bne.n	8011cb0 <_dtoa_r+0x2f8>
 8011c1c:	4b23      	ldr	r3, [pc, #140]	; (8011cac <_dtoa_r+0x2f4>)
 8011c1e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8011c22:	e6e1      	b.n	80119e8 <_dtoa_r+0x30>
 8011c24:	2201      	movs	r2, #1
 8011c26:	e7dd      	b.n	8011be4 <_dtoa_r+0x22c>
 8011c28:	2200      	movs	r2, #0
 8011c2a:	9207      	str	r2, [sp, #28]
 8011c2c:	9a08      	ldr	r2, [sp, #32]
 8011c2e:	eb0b 0a02 	add.w	sl, fp, r2
 8011c32:	f10a 0901 	add.w	r9, sl, #1
 8011c36:	464a      	mov	r2, r9
 8011c38:	2a01      	cmp	r2, #1
 8011c3a:	bfb8      	it	lt
 8011c3c:	2201      	movlt	r2, #1
 8011c3e:	e7db      	b.n	8011bf8 <_dtoa_r+0x240>
 8011c40:	2201      	movs	r2, #1
 8011c42:	e7f2      	b.n	8011c2a <_dtoa_r+0x272>
 8011c44:	2401      	movs	r4, #1
 8011c46:	2200      	movs	r2, #0
 8011c48:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8011c4c:	f04f 3aff 	mov.w	sl, #4294967295
 8011c50:	2100      	movs	r1, #0
 8011c52:	46d1      	mov	r9, sl
 8011c54:	2212      	movs	r2, #18
 8011c56:	9108      	str	r1, [sp, #32]
 8011c58:	e7ce      	b.n	8011bf8 <_dtoa_r+0x240>
 8011c5a:	2201      	movs	r2, #1
 8011c5c:	9207      	str	r2, [sp, #28]
 8011c5e:	e7f5      	b.n	8011c4c <_dtoa_r+0x294>
 8011c60:	f8dd a020 	ldr.w	sl, [sp, #32]
 8011c64:	46d1      	mov	r9, sl
 8011c66:	4652      	mov	r2, sl
 8011c68:	e7c6      	b.n	8011bf8 <_dtoa_r+0x240>
 8011c6a:	3101      	adds	r1, #1
 8011c6c:	6079      	str	r1, [r7, #4]
 8011c6e:	0040      	lsls	r0, r0, #1
 8011c70:	e7c6      	b.n	8011c00 <_dtoa_r+0x248>
 8011c72:	bf00      	nop
 8011c74:	f3af 8000 	nop.w
 8011c78:	636f4361 	.word	0x636f4361
 8011c7c:	3fd287a7 	.word	0x3fd287a7
 8011c80:	8b60c8b3 	.word	0x8b60c8b3
 8011c84:	3fc68a28 	.word	0x3fc68a28
 8011c88:	509f79fb 	.word	0x509f79fb
 8011c8c:	3fd34413 	.word	0x3fd34413
 8011c90:	08013b49 	.word	0x08013b49
 8011c94:	08013b60 	.word	0x08013b60
 8011c98:	7ff00000 	.word	0x7ff00000
 8011c9c:	08013b45 	.word	0x08013b45
 8011ca0:	08013b3c 	.word	0x08013b3c
 8011ca4:	08013b19 	.word	0x08013b19
 8011ca8:	08013c50 	.word	0x08013c50
 8011cac:	08013bbb 	.word	0x08013bbb
 8011cb0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8011cb2:	9901      	ldr	r1, [sp, #4]
 8011cb4:	6011      	str	r1, [r2, #0]
 8011cb6:	f1b9 0f0e 	cmp.w	r9, #14
 8011cba:	d86c      	bhi.n	8011d96 <_dtoa_r+0x3de>
 8011cbc:	2c00      	cmp	r4, #0
 8011cbe:	d06a      	beq.n	8011d96 <_dtoa_r+0x3de>
 8011cc0:	f1bb 0f00 	cmp.w	fp, #0
 8011cc4:	f340 80a0 	ble.w	8011e08 <_dtoa_r+0x450>
 8011cc8:	49c1      	ldr	r1, [pc, #772]	; (8011fd0 <_dtoa_r+0x618>)
 8011cca:	f00b 020f 	and.w	r2, fp, #15
 8011cce:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8011cd2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8011cd6:	ed92 7b00 	vldr	d7, [r2]
 8011cda:	ea4f 112b 	mov.w	r1, fp, asr #4
 8011cde:	f000 8087 	beq.w	8011df0 <_dtoa_r+0x438>
 8011ce2:	4abc      	ldr	r2, [pc, #752]	; (8011fd4 <_dtoa_r+0x61c>)
 8011ce4:	ed92 6b08 	vldr	d6, [r2, #32]
 8011ce8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8011cec:	ed8d 6b02 	vstr	d6, [sp, #8]
 8011cf0:	f001 010f 	and.w	r1, r1, #15
 8011cf4:	2203      	movs	r2, #3
 8011cf6:	48b7      	ldr	r0, [pc, #732]	; (8011fd4 <_dtoa_r+0x61c>)
 8011cf8:	2900      	cmp	r1, #0
 8011cfa:	d17b      	bne.n	8011df4 <_dtoa_r+0x43c>
 8011cfc:	ed9d 6b02 	vldr	d6, [sp, #8]
 8011d00:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8011d04:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011d08:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011d0a:	2900      	cmp	r1, #0
 8011d0c:	f000 80a2 	beq.w	8011e54 <_dtoa_r+0x49c>
 8011d10:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8011d14:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011d18:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8011d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d20:	f140 8098 	bpl.w	8011e54 <_dtoa_r+0x49c>
 8011d24:	f1b9 0f00 	cmp.w	r9, #0
 8011d28:	f000 8094 	beq.w	8011e54 <_dtoa_r+0x49c>
 8011d2c:	f1ba 0f00 	cmp.w	sl, #0
 8011d30:	dd2f      	ble.n	8011d92 <_dtoa_r+0x3da>
 8011d32:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8011d36:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011d3a:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011d3e:	f10b 37ff 	add.w	r7, fp, #4294967295
 8011d42:	3201      	adds	r2, #1
 8011d44:	4650      	mov	r0, sl
 8011d46:	ed9d 6b02 	vldr	d6, [sp, #8]
 8011d4a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8011d4e:	ee07 2a90 	vmov	s15, r2
 8011d52:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011d56:	eea7 5b06 	vfma.f64	d5, d7, d6
 8011d5a:	ee15 4a90 	vmov	r4, s11
 8011d5e:	ec52 1b15 	vmov	r1, r2, d5
 8011d62:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8011d66:	2800      	cmp	r0, #0
 8011d68:	d177      	bne.n	8011e5a <_dtoa_r+0x4a2>
 8011d6a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8011d6e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8011d72:	ec42 1b17 	vmov	d7, r1, r2
 8011d76:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d7e:	f300 8263 	bgt.w	8012248 <_dtoa_r+0x890>
 8011d82:	eeb1 7b47 	vneg.f64	d7, d7
 8011d86:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d8e:	f100 8258 	bmi.w	8012242 <_dtoa_r+0x88a>
 8011d92:	ed8d 8b02 	vstr	d8, [sp, #8]
 8011d96:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011d98:	2a00      	cmp	r2, #0
 8011d9a:	f2c0 811d 	blt.w	8011fd8 <_dtoa_r+0x620>
 8011d9e:	f1bb 0f0e 	cmp.w	fp, #14
 8011da2:	f300 8119 	bgt.w	8011fd8 <_dtoa_r+0x620>
 8011da6:	4b8a      	ldr	r3, [pc, #552]	; (8011fd0 <_dtoa_r+0x618>)
 8011da8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8011dac:	ed93 6b00 	vldr	d6, [r3]
 8011db0:	9b08      	ldr	r3, [sp, #32]
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	f280 80b7 	bge.w	8011f26 <_dtoa_r+0x56e>
 8011db8:	f1b9 0f00 	cmp.w	r9, #0
 8011dbc:	f300 80b3 	bgt.w	8011f26 <_dtoa_r+0x56e>
 8011dc0:	f040 823f 	bne.w	8012242 <_dtoa_r+0x88a>
 8011dc4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8011dc8:	ee26 6b07 	vmul.f64	d6, d6, d7
 8011dcc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011dd0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011dd8:	464c      	mov	r4, r9
 8011dda:	464f      	mov	r7, r9
 8011ddc:	f280 8215 	bge.w	801220a <_dtoa_r+0x852>
 8011de0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011de4:	2331      	movs	r3, #49	; 0x31
 8011de6:	f808 3b01 	strb.w	r3, [r8], #1
 8011dea:	f10b 0b01 	add.w	fp, fp, #1
 8011dee:	e211      	b.n	8012214 <_dtoa_r+0x85c>
 8011df0:	2202      	movs	r2, #2
 8011df2:	e780      	b.n	8011cf6 <_dtoa_r+0x33e>
 8011df4:	07cc      	lsls	r4, r1, #31
 8011df6:	d504      	bpl.n	8011e02 <_dtoa_r+0x44a>
 8011df8:	ed90 6b00 	vldr	d6, [r0]
 8011dfc:	3201      	adds	r2, #1
 8011dfe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011e02:	1049      	asrs	r1, r1, #1
 8011e04:	3008      	adds	r0, #8
 8011e06:	e777      	b.n	8011cf8 <_dtoa_r+0x340>
 8011e08:	d022      	beq.n	8011e50 <_dtoa_r+0x498>
 8011e0a:	f1cb 0100 	rsb	r1, fp, #0
 8011e0e:	4a70      	ldr	r2, [pc, #448]	; (8011fd0 <_dtoa_r+0x618>)
 8011e10:	f001 000f 	and.w	r0, r1, #15
 8011e14:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8011e18:	ed92 7b00 	vldr	d7, [r2]
 8011e1c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8011e20:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011e24:	486b      	ldr	r0, [pc, #428]	; (8011fd4 <_dtoa_r+0x61c>)
 8011e26:	1109      	asrs	r1, r1, #4
 8011e28:	2400      	movs	r4, #0
 8011e2a:	2202      	movs	r2, #2
 8011e2c:	b929      	cbnz	r1, 8011e3a <_dtoa_r+0x482>
 8011e2e:	2c00      	cmp	r4, #0
 8011e30:	f43f af6a 	beq.w	8011d08 <_dtoa_r+0x350>
 8011e34:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011e38:	e766      	b.n	8011d08 <_dtoa_r+0x350>
 8011e3a:	07cf      	lsls	r7, r1, #31
 8011e3c:	d505      	bpl.n	8011e4a <_dtoa_r+0x492>
 8011e3e:	ed90 6b00 	vldr	d6, [r0]
 8011e42:	3201      	adds	r2, #1
 8011e44:	2401      	movs	r4, #1
 8011e46:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011e4a:	1049      	asrs	r1, r1, #1
 8011e4c:	3008      	adds	r0, #8
 8011e4e:	e7ed      	b.n	8011e2c <_dtoa_r+0x474>
 8011e50:	2202      	movs	r2, #2
 8011e52:	e759      	b.n	8011d08 <_dtoa_r+0x350>
 8011e54:	465f      	mov	r7, fp
 8011e56:	4648      	mov	r0, r9
 8011e58:	e775      	b.n	8011d46 <_dtoa_r+0x38e>
 8011e5a:	ec42 1b17 	vmov	d7, r1, r2
 8011e5e:	4a5c      	ldr	r2, [pc, #368]	; (8011fd0 <_dtoa_r+0x618>)
 8011e60:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8011e64:	ed12 4b02 	vldr	d4, [r2, #-8]
 8011e68:	9a01      	ldr	r2, [sp, #4]
 8011e6a:	1814      	adds	r4, r2, r0
 8011e6c:	9a07      	ldr	r2, [sp, #28]
 8011e6e:	b352      	cbz	r2, 8011ec6 <_dtoa_r+0x50e>
 8011e70:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8011e74:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8011e78:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011e7c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8011e80:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8011e84:	ee35 7b47 	vsub.f64	d7, d5, d7
 8011e88:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8011e8c:	ee14 2a90 	vmov	r2, s9
 8011e90:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8011e94:	3230      	adds	r2, #48	; 0x30
 8011e96:	ee36 6b45 	vsub.f64	d6, d6, d5
 8011e9a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ea2:	f808 2b01 	strb.w	r2, [r8], #1
 8011ea6:	d439      	bmi.n	8011f1c <_dtoa_r+0x564>
 8011ea8:	ee32 5b46 	vsub.f64	d5, d2, d6
 8011eac:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8011eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011eb4:	d472      	bmi.n	8011f9c <_dtoa_r+0x5e4>
 8011eb6:	45a0      	cmp	r8, r4
 8011eb8:	f43f af6b 	beq.w	8011d92 <_dtoa_r+0x3da>
 8011ebc:	ee27 7b03 	vmul.f64	d7, d7, d3
 8011ec0:	ee26 6b03 	vmul.f64	d6, d6, d3
 8011ec4:	e7e0      	b.n	8011e88 <_dtoa_r+0x4d0>
 8011ec6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011eca:	ee27 7b04 	vmul.f64	d7, d7, d4
 8011ece:	4621      	mov	r1, r4
 8011ed0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8011ed4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8011ed8:	ee14 2a90 	vmov	r2, s9
 8011edc:	3230      	adds	r2, #48	; 0x30
 8011ede:	f808 2b01 	strb.w	r2, [r8], #1
 8011ee2:	45a0      	cmp	r8, r4
 8011ee4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8011ee8:	ee36 6b45 	vsub.f64	d6, d6, d5
 8011eec:	d118      	bne.n	8011f20 <_dtoa_r+0x568>
 8011eee:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8011ef2:	ee37 4b05 	vadd.f64	d4, d7, d5
 8011ef6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8011efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011efe:	dc4d      	bgt.n	8011f9c <_dtoa_r+0x5e4>
 8011f00:	ee35 7b47 	vsub.f64	d7, d5, d7
 8011f04:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f0c:	f57f af41 	bpl.w	8011d92 <_dtoa_r+0x3da>
 8011f10:	4688      	mov	r8, r1
 8011f12:	3901      	subs	r1, #1
 8011f14:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8011f18:	2b30      	cmp	r3, #48	; 0x30
 8011f1a:	d0f9      	beq.n	8011f10 <_dtoa_r+0x558>
 8011f1c:	46bb      	mov	fp, r7
 8011f1e:	e02a      	b.n	8011f76 <_dtoa_r+0x5be>
 8011f20:	ee26 6b03 	vmul.f64	d6, d6, d3
 8011f24:	e7d6      	b.n	8011ed4 <_dtoa_r+0x51c>
 8011f26:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011f2a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8011f2e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011f32:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8011f36:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8011f3a:	ee15 3a10 	vmov	r3, s10
 8011f3e:	3330      	adds	r3, #48	; 0x30
 8011f40:	f808 3b01 	strb.w	r3, [r8], #1
 8011f44:	9b01      	ldr	r3, [sp, #4]
 8011f46:	eba8 0303 	sub.w	r3, r8, r3
 8011f4a:	4599      	cmp	r9, r3
 8011f4c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8011f50:	eea3 7b46 	vfms.f64	d7, d3, d6
 8011f54:	d133      	bne.n	8011fbe <_dtoa_r+0x606>
 8011f56:	ee37 7b07 	vadd.f64	d7, d7, d7
 8011f5a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8011f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f62:	dc1a      	bgt.n	8011f9a <_dtoa_r+0x5e2>
 8011f64:	eeb4 7b46 	vcmp.f64	d7, d6
 8011f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f6c:	d103      	bne.n	8011f76 <_dtoa_r+0x5be>
 8011f6e:	ee15 3a10 	vmov	r3, s10
 8011f72:	07d9      	lsls	r1, r3, #31
 8011f74:	d411      	bmi.n	8011f9a <_dtoa_r+0x5e2>
 8011f76:	4629      	mov	r1, r5
 8011f78:	4630      	mov	r0, r6
 8011f7a:	f000 fadb 	bl	8012534 <_Bfree>
 8011f7e:	2300      	movs	r3, #0
 8011f80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011f82:	f888 3000 	strb.w	r3, [r8]
 8011f86:	f10b 0301 	add.w	r3, fp, #1
 8011f8a:	6013      	str	r3, [r2, #0]
 8011f8c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	f43f ad61 	beq.w	8011a56 <_dtoa_r+0x9e>
 8011f94:	f8c3 8000 	str.w	r8, [r3]
 8011f98:	e55d      	b.n	8011a56 <_dtoa_r+0x9e>
 8011f9a:	465f      	mov	r7, fp
 8011f9c:	4643      	mov	r3, r8
 8011f9e:	4698      	mov	r8, r3
 8011fa0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011fa4:	2a39      	cmp	r2, #57	; 0x39
 8011fa6:	d106      	bne.n	8011fb6 <_dtoa_r+0x5fe>
 8011fa8:	9a01      	ldr	r2, [sp, #4]
 8011faa:	429a      	cmp	r2, r3
 8011fac:	d1f7      	bne.n	8011f9e <_dtoa_r+0x5e6>
 8011fae:	9901      	ldr	r1, [sp, #4]
 8011fb0:	2230      	movs	r2, #48	; 0x30
 8011fb2:	3701      	adds	r7, #1
 8011fb4:	700a      	strb	r2, [r1, #0]
 8011fb6:	781a      	ldrb	r2, [r3, #0]
 8011fb8:	3201      	adds	r2, #1
 8011fba:	701a      	strb	r2, [r3, #0]
 8011fbc:	e7ae      	b.n	8011f1c <_dtoa_r+0x564>
 8011fbe:	ee27 7b04 	vmul.f64	d7, d7, d4
 8011fc2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fca:	d1b2      	bne.n	8011f32 <_dtoa_r+0x57a>
 8011fcc:	e7d3      	b.n	8011f76 <_dtoa_r+0x5be>
 8011fce:	bf00      	nop
 8011fd0:	08013c50 	.word	0x08013c50
 8011fd4:	08013c28 	.word	0x08013c28
 8011fd8:	9907      	ldr	r1, [sp, #28]
 8011fda:	2900      	cmp	r1, #0
 8011fdc:	f000 80d0 	beq.w	8012180 <_dtoa_r+0x7c8>
 8011fe0:	9906      	ldr	r1, [sp, #24]
 8011fe2:	2901      	cmp	r1, #1
 8011fe4:	f300 80b4 	bgt.w	8012150 <_dtoa_r+0x798>
 8011fe8:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011fea:	2900      	cmp	r1, #0
 8011fec:	f000 80ac 	beq.w	8012148 <_dtoa_r+0x790>
 8011ff0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8011ff4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8011ff8:	461c      	mov	r4, r3
 8011ffa:	930a      	str	r3, [sp, #40]	; 0x28
 8011ffc:	9b04      	ldr	r3, [sp, #16]
 8011ffe:	4413      	add	r3, r2
 8012000:	9304      	str	r3, [sp, #16]
 8012002:	9b05      	ldr	r3, [sp, #20]
 8012004:	2101      	movs	r1, #1
 8012006:	4413      	add	r3, r2
 8012008:	4630      	mov	r0, r6
 801200a:	9305      	str	r3, [sp, #20]
 801200c:	f000 fb4a 	bl	80126a4 <__i2b>
 8012010:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012012:	4607      	mov	r7, r0
 8012014:	f1b8 0f00 	cmp.w	r8, #0
 8012018:	dd0d      	ble.n	8012036 <_dtoa_r+0x67e>
 801201a:	9a05      	ldr	r2, [sp, #20]
 801201c:	2a00      	cmp	r2, #0
 801201e:	dd0a      	ble.n	8012036 <_dtoa_r+0x67e>
 8012020:	4542      	cmp	r2, r8
 8012022:	9904      	ldr	r1, [sp, #16]
 8012024:	bfa8      	it	ge
 8012026:	4642      	movge	r2, r8
 8012028:	1a89      	subs	r1, r1, r2
 801202a:	9104      	str	r1, [sp, #16]
 801202c:	9905      	ldr	r1, [sp, #20]
 801202e:	eba8 0802 	sub.w	r8, r8, r2
 8012032:	1a8a      	subs	r2, r1, r2
 8012034:	9205      	str	r2, [sp, #20]
 8012036:	b303      	cbz	r3, 801207a <_dtoa_r+0x6c2>
 8012038:	9a07      	ldr	r2, [sp, #28]
 801203a:	2a00      	cmp	r2, #0
 801203c:	f000 80a5 	beq.w	801218a <_dtoa_r+0x7d2>
 8012040:	2c00      	cmp	r4, #0
 8012042:	dd13      	ble.n	801206c <_dtoa_r+0x6b4>
 8012044:	4639      	mov	r1, r7
 8012046:	4622      	mov	r2, r4
 8012048:	4630      	mov	r0, r6
 801204a:	930d      	str	r3, [sp, #52]	; 0x34
 801204c:	f000 fbea 	bl	8012824 <__pow5mult>
 8012050:	462a      	mov	r2, r5
 8012052:	4601      	mov	r1, r0
 8012054:	4607      	mov	r7, r0
 8012056:	4630      	mov	r0, r6
 8012058:	f000 fb3a 	bl	80126d0 <__multiply>
 801205c:	4629      	mov	r1, r5
 801205e:	900a      	str	r0, [sp, #40]	; 0x28
 8012060:	4630      	mov	r0, r6
 8012062:	f000 fa67 	bl	8012534 <_Bfree>
 8012066:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012068:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801206a:	4615      	mov	r5, r2
 801206c:	1b1a      	subs	r2, r3, r4
 801206e:	d004      	beq.n	801207a <_dtoa_r+0x6c2>
 8012070:	4629      	mov	r1, r5
 8012072:	4630      	mov	r0, r6
 8012074:	f000 fbd6 	bl	8012824 <__pow5mult>
 8012078:	4605      	mov	r5, r0
 801207a:	2101      	movs	r1, #1
 801207c:	4630      	mov	r0, r6
 801207e:	f000 fb11 	bl	80126a4 <__i2b>
 8012082:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012084:	2b00      	cmp	r3, #0
 8012086:	4604      	mov	r4, r0
 8012088:	f340 8081 	ble.w	801218e <_dtoa_r+0x7d6>
 801208c:	461a      	mov	r2, r3
 801208e:	4601      	mov	r1, r0
 8012090:	4630      	mov	r0, r6
 8012092:	f000 fbc7 	bl	8012824 <__pow5mult>
 8012096:	9b06      	ldr	r3, [sp, #24]
 8012098:	2b01      	cmp	r3, #1
 801209a:	4604      	mov	r4, r0
 801209c:	dd7a      	ble.n	8012194 <_dtoa_r+0x7dc>
 801209e:	2300      	movs	r3, #0
 80120a0:	930a      	str	r3, [sp, #40]	; 0x28
 80120a2:	6922      	ldr	r2, [r4, #16]
 80120a4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80120a8:	6910      	ldr	r0, [r2, #16]
 80120aa:	f000 faab 	bl	8012604 <__hi0bits>
 80120ae:	f1c0 0020 	rsb	r0, r0, #32
 80120b2:	9b05      	ldr	r3, [sp, #20]
 80120b4:	4418      	add	r0, r3
 80120b6:	f010 001f 	ands.w	r0, r0, #31
 80120ba:	f000 808c 	beq.w	80121d6 <_dtoa_r+0x81e>
 80120be:	f1c0 0220 	rsb	r2, r0, #32
 80120c2:	2a04      	cmp	r2, #4
 80120c4:	f340 8085 	ble.w	80121d2 <_dtoa_r+0x81a>
 80120c8:	f1c0 001c 	rsb	r0, r0, #28
 80120cc:	9b04      	ldr	r3, [sp, #16]
 80120ce:	4403      	add	r3, r0
 80120d0:	9304      	str	r3, [sp, #16]
 80120d2:	9b05      	ldr	r3, [sp, #20]
 80120d4:	4403      	add	r3, r0
 80120d6:	4480      	add	r8, r0
 80120d8:	9305      	str	r3, [sp, #20]
 80120da:	9b04      	ldr	r3, [sp, #16]
 80120dc:	2b00      	cmp	r3, #0
 80120de:	dd05      	ble.n	80120ec <_dtoa_r+0x734>
 80120e0:	4629      	mov	r1, r5
 80120e2:	461a      	mov	r2, r3
 80120e4:	4630      	mov	r0, r6
 80120e6:	f000 fbf7 	bl	80128d8 <__lshift>
 80120ea:	4605      	mov	r5, r0
 80120ec:	9b05      	ldr	r3, [sp, #20]
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	dd05      	ble.n	80120fe <_dtoa_r+0x746>
 80120f2:	4621      	mov	r1, r4
 80120f4:	461a      	mov	r2, r3
 80120f6:	4630      	mov	r0, r6
 80120f8:	f000 fbee 	bl	80128d8 <__lshift>
 80120fc:	4604      	mov	r4, r0
 80120fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012100:	2b00      	cmp	r3, #0
 8012102:	d06a      	beq.n	80121da <_dtoa_r+0x822>
 8012104:	4621      	mov	r1, r4
 8012106:	4628      	mov	r0, r5
 8012108:	f000 fc56 	bl	80129b8 <__mcmp>
 801210c:	2800      	cmp	r0, #0
 801210e:	da64      	bge.n	80121da <_dtoa_r+0x822>
 8012110:	2300      	movs	r3, #0
 8012112:	4629      	mov	r1, r5
 8012114:	220a      	movs	r2, #10
 8012116:	4630      	mov	r0, r6
 8012118:	f000 fa2e 	bl	8012578 <__multadd>
 801211c:	9b07      	ldr	r3, [sp, #28]
 801211e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012122:	4605      	mov	r5, r0
 8012124:	2b00      	cmp	r3, #0
 8012126:	f000 8191 	beq.w	801244c <_dtoa_r+0xa94>
 801212a:	4639      	mov	r1, r7
 801212c:	2300      	movs	r3, #0
 801212e:	220a      	movs	r2, #10
 8012130:	4630      	mov	r0, r6
 8012132:	f000 fa21 	bl	8012578 <__multadd>
 8012136:	f1ba 0f00 	cmp.w	sl, #0
 801213a:	4607      	mov	r7, r0
 801213c:	f300 808d 	bgt.w	801225a <_dtoa_r+0x8a2>
 8012140:	9b06      	ldr	r3, [sp, #24]
 8012142:	2b02      	cmp	r3, #2
 8012144:	dc50      	bgt.n	80121e8 <_dtoa_r+0x830>
 8012146:	e088      	b.n	801225a <_dtoa_r+0x8a2>
 8012148:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801214a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801214e:	e751      	b.n	8011ff4 <_dtoa_r+0x63c>
 8012150:	f109 34ff 	add.w	r4, r9, #4294967295
 8012154:	42a3      	cmp	r3, r4
 8012156:	bfbf      	itttt	lt
 8012158:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 801215a:	1ae3      	sublt	r3, r4, r3
 801215c:	18d2      	addlt	r2, r2, r3
 801215e:	9209      	strlt	r2, [sp, #36]	; 0x24
 8012160:	bfb6      	itet	lt
 8012162:	4623      	movlt	r3, r4
 8012164:	1b1c      	subge	r4, r3, r4
 8012166:	2400      	movlt	r4, #0
 8012168:	f1b9 0f00 	cmp.w	r9, #0
 801216c:	bfb5      	itete	lt
 801216e:	9a04      	ldrlt	r2, [sp, #16]
 8012170:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8012174:	eba2 0809 	sublt.w	r8, r2, r9
 8012178:	464a      	movge	r2, r9
 801217a:	bfb8      	it	lt
 801217c:	2200      	movlt	r2, #0
 801217e:	e73c      	b.n	8011ffa <_dtoa_r+0x642>
 8012180:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8012184:	9f07      	ldr	r7, [sp, #28]
 8012186:	461c      	mov	r4, r3
 8012188:	e744      	b.n	8012014 <_dtoa_r+0x65c>
 801218a:	461a      	mov	r2, r3
 801218c:	e770      	b.n	8012070 <_dtoa_r+0x6b8>
 801218e:	9b06      	ldr	r3, [sp, #24]
 8012190:	2b01      	cmp	r3, #1
 8012192:	dc18      	bgt.n	80121c6 <_dtoa_r+0x80e>
 8012194:	9b02      	ldr	r3, [sp, #8]
 8012196:	b9b3      	cbnz	r3, 80121c6 <_dtoa_r+0x80e>
 8012198:	9b03      	ldr	r3, [sp, #12]
 801219a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801219e:	b9a2      	cbnz	r2, 80121ca <_dtoa_r+0x812>
 80121a0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80121a4:	0d12      	lsrs	r2, r2, #20
 80121a6:	0512      	lsls	r2, r2, #20
 80121a8:	b18a      	cbz	r2, 80121ce <_dtoa_r+0x816>
 80121aa:	9b04      	ldr	r3, [sp, #16]
 80121ac:	3301      	adds	r3, #1
 80121ae:	9304      	str	r3, [sp, #16]
 80121b0:	9b05      	ldr	r3, [sp, #20]
 80121b2:	3301      	adds	r3, #1
 80121b4:	9305      	str	r3, [sp, #20]
 80121b6:	2301      	movs	r3, #1
 80121b8:	930a      	str	r3, [sp, #40]	; 0x28
 80121ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80121bc:	2b00      	cmp	r3, #0
 80121be:	f47f af70 	bne.w	80120a2 <_dtoa_r+0x6ea>
 80121c2:	2001      	movs	r0, #1
 80121c4:	e775      	b.n	80120b2 <_dtoa_r+0x6fa>
 80121c6:	2300      	movs	r3, #0
 80121c8:	e7f6      	b.n	80121b8 <_dtoa_r+0x800>
 80121ca:	9b02      	ldr	r3, [sp, #8]
 80121cc:	e7f4      	b.n	80121b8 <_dtoa_r+0x800>
 80121ce:	920a      	str	r2, [sp, #40]	; 0x28
 80121d0:	e7f3      	b.n	80121ba <_dtoa_r+0x802>
 80121d2:	d082      	beq.n	80120da <_dtoa_r+0x722>
 80121d4:	4610      	mov	r0, r2
 80121d6:	301c      	adds	r0, #28
 80121d8:	e778      	b.n	80120cc <_dtoa_r+0x714>
 80121da:	f1b9 0f00 	cmp.w	r9, #0
 80121de:	dc37      	bgt.n	8012250 <_dtoa_r+0x898>
 80121e0:	9b06      	ldr	r3, [sp, #24]
 80121e2:	2b02      	cmp	r3, #2
 80121e4:	dd34      	ble.n	8012250 <_dtoa_r+0x898>
 80121e6:	46ca      	mov	sl, r9
 80121e8:	f1ba 0f00 	cmp.w	sl, #0
 80121ec:	d10d      	bne.n	801220a <_dtoa_r+0x852>
 80121ee:	4621      	mov	r1, r4
 80121f0:	4653      	mov	r3, sl
 80121f2:	2205      	movs	r2, #5
 80121f4:	4630      	mov	r0, r6
 80121f6:	f000 f9bf 	bl	8012578 <__multadd>
 80121fa:	4601      	mov	r1, r0
 80121fc:	4604      	mov	r4, r0
 80121fe:	4628      	mov	r0, r5
 8012200:	f000 fbda 	bl	80129b8 <__mcmp>
 8012204:	2800      	cmp	r0, #0
 8012206:	f73f adeb 	bgt.w	8011de0 <_dtoa_r+0x428>
 801220a:	9b08      	ldr	r3, [sp, #32]
 801220c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012210:	ea6f 0b03 	mvn.w	fp, r3
 8012214:	f04f 0900 	mov.w	r9, #0
 8012218:	4621      	mov	r1, r4
 801221a:	4630      	mov	r0, r6
 801221c:	f000 f98a 	bl	8012534 <_Bfree>
 8012220:	2f00      	cmp	r7, #0
 8012222:	f43f aea8 	beq.w	8011f76 <_dtoa_r+0x5be>
 8012226:	f1b9 0f00 	cmp.w	r9, #0
 801222a:	d005      	beq.n	8012238 <_dtoa_r+0x880>
 801222c:	45b9      	cmp	r9, r7
 801222e:	d003      	beq.n	8012238 <_dtoa_r+0x880>
 8012230:	4649      	mov	r1, r9
 8012232:	4630      	mov	r0, r6
 8012234:	f000 f97e 	bl	8012534 <_Bfree>
 8012238:	4639      	mov	r1, r7
 801223a:	4630      	mov	r0, r6
 801223c:	f000 f97a 	bl	8012534 <_Bfree>
 8012240:	e699      	b.n	8011f76 <_dtoa_r+0x5be>
 8012242:	2400      	movs	r4, #0
 8012244:	4627      	mov	r7, r4
 8012246:	e7e0      	b.n	801220a <_dtoa_r+0x852>
 8012248:	46bb      	mov	fp, r7
 801224a:	4604      	mov	r4, r0
 801224c:	4607      	mov	r7, r0
 801224e:	e5c7      	b.n	8011de0 <_dtoa_r+0x428>
 8012250:	9b07      	ldr	r3, [sp, #28]
 8012252:	46ca      	mov	sl, r9
 8012254:	2b00      	cmp	r3, #0
 8012256:	f000 8100 	beq.w	801245a <_dtoa_r+0xaa2>
 801225a:	f1b8 0f00 	cmp.w	r8, #0
 801225e:	dd05      	ble.n	801226c <_dtoa_r+0x8b4>
 8012260:	4639      	mov	r1, r7
 8012262:	4642      	mov	r2, r8
 8012264:	4630      	mov	r0, r6
 8012266:	f000 fb37 	bl	80128d8 <__lshift>
 801226a:	4607      	mov	r7, r0
 801226c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801226e:	2b00      	cmp	r3, #0
 8012270:	d05d      	beq.n	801232e <_dtoa_r+0x976>
 8012272:	6879      	ldr	r1, [r7, #4]
 8012274:	4630      	mov	r0, r6
 8012276:	f000 f91d 	bl	80124b4 <_Balloc>
 801227a:	4680      	mov	r8, r0
 801227c:	b928      	cbnz	r0, 801228a <_dtoa_r+0x8d2>
 801227e:	4b82      	ldr	r3, [pc, #520]	; (8012488 <_dtoa_r+0xad0>)
 8012280:	4602      	mov	r2, r0
 8012282:	f240 21ea 	movw	r1, #746	; 0x2ea
 8012286:	f7ff bbaf 	b.w	80119e8 <_dtoa_r+0x30>
 801228a:	693a      	ldr	r2, [r7, #16]
 801228c:	3202      	adds	r2, #2
 801228e:	0092      	lsls	r2, r2, #2
 8012290:	f107 010c 	add.w	r1, r7, #12
 8012294:	300c      	adds	r0, #12
 8012296:	f7fe fd99 	bl	8010dcc <memcpy>
 801229a:	2201      	movs	r2, #1
 801229c:	4641      	mov	r1, r8
 801229e:	4630      	mov	r0, r6
 80122a0:	f000 fb1a 	bl	80128d8 <__lshift>
 80122a4:	9b01      	ldr	r3, [sp, #4]
 80122a6:	3301      	adds	r3, #1
 80122a8:	9304      	str	r3, [sp, #16]
 80122aa:	9b01      	ldr	r3, [sp, #4]
 80122ac:	4453      	add	r3, sl
 80122ae:	9308      	str	r3, [sp, #32]
 80122b0:	9b02      	ldr	r3, [sp, #8]
 80122b2:	f003 0301 	and.w	r3, r3, #1
 80122b6:	46b9      	mov	r9, r7
 80122b8:	9307      	str	r3, [sp, #28]
 80122ba:	4607      	mov	r7, r0
 80122bc:	9b04      	ldr	r3, [sp, #16]
 80122be:	4621      	mov	r1, r4
 80122c0:	3b01      	subs	r3, #1
 80122c2:	4628      	mov	r0, r5
 80122c4:	9302      	str	r3, [sp, #8]
 80122c6:	f7ff fae9 	bl	801189c <quorem>
 80122ca:	4603      	mov	r3, r0
 80122cc:	3330      	adds	r3, #48	; 0x30
 80122ce:	9005      	str	r0, [sp, #20]
 80122d0:	4649      	mov	r1, r9
 80122d2:	4628      	mov	r0, r5
 80122d4:	9309      	str	r3, [sp, #36]	; 0x24
 80122d6:	f000 fb6f 	bl	80129b8 <__mcmp>
 80122da:	463a      	mov	r2, r7
 80122dc:	4682      	mov	sl, r0
 80122de:	4621      	mov	r1, r4
 80122e0:	4630      	mov	r0, r6
 80122e2:	f000 fb85 	bl	80129f0 <__mdiff>
 80122e6:	68c2      	ldr	r2, [r0, #12]
 80122e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80122ea:	4680      	mov	r8, r0
 80122ec:	bb0a      	cbnz	r2, 8012332 <_dtoa_r+0x97a>
 80122ee:	4601      	mov	r1, r0
 80122f0:	4628      	mov	r0, r5
 80122f2:	f000 fb61 	bl	80129b8 <__mcmp>
 80122f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80122f8:	4602      	mov	r2, r0
 80122fa:	4641      	mov	r1, r8
 80122fc:	4630      	mov	r0, r6
 80122fe:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8012302:	f000 f917 	bl	8012534 <_Bfree>
 8012306:	9b06      	ldr	r3, [sp, #24]
 8012308:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801230a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801230e:	ea43 0102 	orr.w	r1, r3, r2
 8012312:	9b07      	ldr	r3, [sp, #28]
 8012314:	430b      	orrs	r3, r1
 8012316:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012318:	d10d      	bne.n	8012336 <_dtoa_r+0x97e>
 801231a:	2b39      	cmp	r3, #57	; 0x39
 801231c:	d029      	beq.n	8012372 <_dtoa_r+0x9ba>
 801231e:	f1ba 0f00 	cmp.w	sl, #0
 8012322:	dd01      	ble.n	8012328 <_dtoa_r+0x970>
 8012324:	9b05      	ldr	r3, [sp, #20]
 8012326:	3331      	adds	r3, #49	; 0x31
 8012328:	9a02      	ldr	r2, [sp, #8]
 801232a:	7013      	strb	r3, [r2, #0]
 801232c:	e774      	b.n	8012218 <_dtoa_r+0x860>
 801232e:	4638      	mov	r0, r7
 8012330:	e7b8      	b.n	80122a4 <_dtoa_r+0x8ec>
 8012332:	2201      	movs	r2, #1
 8012334:	e7e1      	b.n	80122fa <_dtoa_r+0x942>
 8012336:	f1ba 0f00 	cmp.w	sl, #0
 801233a:	db06      	blt.n	801234a <_dtoa_r+0x992>
 801233c:	9906      	ldr	r1, [sp, #24]
 801233e:	ea41 0a0a 	orr.w	sl, r1, sl
 8012342:	9907      	ldr	r1, [sp, #28]
 8012344:	ea5a 0101 	orrs.w	r1, sl, r1
 8012348:	d120      	bne.n	801238c <_dtoa_r+0x9d4>
 801234a:	2a00      	cmp	r2, #0
 801234c:	ddec      	ble.n	8012328 <_dtoa_r+0x970>
 801234e:	4629      	mov	r1, r5
 8012350:	2201      	movs	r2, #1
 8012352:	4630      	mov	r0, r6
 8012354:	9304      	str	r3, [sp, #16]
 8012356:	f000 fabf 	bl	80128d8 <__lshift>
 801235a:	4621      	mov	r1, r4
 801235c:	4605      	mov	r5, r0
 801235e:	f000 fb2b 	bl	80129b8 <__mcmp>
 8012362:	2800      	cmp	r0, #0
 8012364:	9b04      	ldr	r3, [sp, #16]
 8012366:	dc02      	bgt.n	801236e <_dtoa_r+0x9b6>
 8012368:	d1de      	bne.n	8012328 <_dtoa_r+0x970>
 801236a:	07da      	lsls	r2, r3, #31
 801236c:	d5dc      	bpl.n	8012328 <_dtoa_r+0x970>
 801236e:	2b39      	cmp	r3, #57	; 0x39
 8012370:	d1d8      	bne.n	8012324 <_dtoa_r+0x96c>
 8012372:	9a02      	ldr	r2, [sp, #8]
 8012374:	2339      	movs	r3, #57	; 0x39
 8012376:	7013      	strb	r3, [r2, #0]
 8012378:	4643      	mov	r3, r8
 801237a:	4698      	mov	r8, r3
 801237c:	3b01      	subs	r3, #1
 801237e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8012382:	2a39      	cmp	r2, #57	; 0x39
 8012384:	d051      	beq.n	801242a <_dtoa_r+0xa72>
 8012386:	3201      	adds	r2, #1
 8012388:	701a      	strb	r2, [r3, #0]
 801238a:	e745      	b.n	8012218 <_dtoa_r+0x860>
 801238c:	2a00      	cmp	r2, #0
 801238e:	dd03      	ble.n	8012398 <_dtoa_r+0x9e0>
 8012390:	2b39      	cmp	r3, #57	; 0x39
 8012392:	d0ee      	beq.n	8012372 <_dtoa_r+0x9ba>
 8012394:	3301      	adds	r3, #1
 8012396:	e7c7      	b.n	8012328 <_dtoa_r+0x970>
 8012398:	9a04      	ldr	r2, [sp, #16]
 801239a:	9908      	ldr	r1, [sp, #32]
 801239c:	f802 3c01 	strb.w	r3, [r2, #-1]
 80123a0:	428a      	cmp	r2, r1
 80123a2:	d02b      	beq.n	80123fc <_dtoa_r+0xa44>
 80123a4:	4629      	mov	r1, r5
 80123a6:	2300      	movs	r3, #0
 80123a8:	220a      	movs	r2, #10
 80123aa:	4630      	mov	r0, r6
 80123ac:	f000 f8e4 	bl	8012578 <__multadd>
 80123b0:	45b9      	cmp	r9, r7
 80123b2:	4605      	mov	r5, r0
 80123b4:	f04f 0300 	mov.w	r3, #0
 80123b8:	f04f 020a 	mov.w	r2, #10
 80123bc:	4649      	mov	r1, r9
 80123be:	4630      	mov	r0, r6
 80123c0:	d107      	bne.n	80123d2 <_dtoa_r+0xa1a>
 80123c2:	f000 f8d9 	bl	8012578 <__multadd>
 80123c6:	4681      	mov	r9, r0
 80123c8:	4607      	mov	r7, r0
 80123ca:	9b04      	ldr	r3, [sp, #16]
 80123cc:	3301      	adds	r3, #1
 80123ce:	9304      	str	r3, [sp, #16]
 80123d0:	e774      	b.n	80122bc <_dtoa_r+0x904>
 80123d2:	f000 f8d1 	bl	8012578 <__multadd>
 80123d6:	4639      	mov	r1, r7
 80123d8:	4681      	mov	r9, r0
 80123da:	2300      	movs	r3, #0
 80123dc:	220a      	movs	r2, #10
 80123de:	4630      	mov	r0, r6
 80123e0:	f000 f8ca 	bl	8012578 <__multadd>
 80123e4:	4607      	mov	r7, r0
 80123e6:	e7f0      	b.n	80123ca <_dtoa_r+0xa12>
 80123e8:	f1ba 0f00 	cmp.w	sl, #0
 80123ec:	9a01      	ldr	r2, [sp, #4]
 80123ee:	bfcc      	ite	gt
 80123f0:	46d0      	movgt	r8, sl
 80123f2:	f04f 0801 	movle.w	r8, #1
 80123f6:	4490      	add	r8, r2
 80123f8:	f04f 0900 	mov.w	r9, #0
 80123fc:	4629      	mov	r1, r5
 80123fe:	2201      	movs	r2, #1
 8012400:	4630      	mov	r0, r6
 8012402:	9302      	str	r3, [sp, #8]
 8012404:	f000 fa68 	bl	80128d8 <__lshift>
 8012408:	4621      	mov	r1, r4
 801240a:	4605      	mov	r5, r0
 801240c:	f000 fad4 	bl	80129b8 <__mcmp>
 8012410:	2800      	cmp	r0, #0
 8012412:	dcb1      	bgt.n	8012378 <_dtoa_r+0x9c0>
 8012414:	d102      	bne.n	801241c <_dtoa_r+0xa64>
 8012416:	9b02      	ldr	r3, [sp, #8]
 8012418:	07db      	lsls	r3, r3, #31
 801241a:	d4ad      	bmi.n	8012378 <_dtoa_r+0x9c0>
 801241c:	4643      	mov	r3, r8
 801241e:	4698      	mov	r8, r3
 8012420:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012424:	2a30      	cmp	r2, #48	; 0x30
 8012426:	d0fa      	beq.n	801241e <_dtoa_r+0xa66>
 8012428:	e6f6      	b.n	8012218 <_dtoa_r+0x860>
 801242a:	9a01      	ldr	r2, [sp, #4]
 801242c:	429a      	cmp	r2, r3
 801242e:	d1a4      	bne.n	801237a <_dtoa_r+0x9c2>
 8012430:	f10b 0b01 	add.w	fp, fp, #1
 8012434:	2331      	movs	r3, #49	; 0x31
 8012436:	e778      	b.n	801232a <_dtoa_r+0x972>
 8012438:	4b14      	ldr	r3, [pc, #80]	; (801248c <_dtoa_r+0xad4>)
 801243a:	f7ff bb27 	b.w	8011a8c <_dtoa_r+0xd4>
 801243e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012440:	2b00      	cmp	r3, #0
 8012442:	f47f ab03 	bne.w	8011a4c <_dtoa_r+0x94>
 8012446:	4b12      	ldr	r3, [pc, #72]	; (8012490 <_dtoa_r+0xad8>)
 8012448:	f7ff bb20 	b.w	8011a8c <_dtoa_r+0xd4>
 801244c:	f1ba 0f00 	cmp.w	sl, #0
 8012450:	dc03      	bgt.n	801245a <_dtoa_r+0xaa2>
 8012452:	9b06      	ldr	r3, [sp, #24]
 8012454:	2b02      	cmp	r3, #2
 8012456:	f73f aec7 	bgt.w	80121e8 <_dtoa_r+0x830>
 801245a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801245e:	4621      	mov	r1, r4
 8012460:	4628      	mov	r0, r5
 8012462:	f7ff fa1b 	bl	801189c <quorem>
 8012466:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801246a:	f808 3b01 	strb.w	r3, [r8], #1
 801246e:	9a01      	ldr	r2, [sp, #4]
 8012470:	eba8 0202 	sub.w	r2, r8, r2
 8012474:	4592      	cmp	sl, r2
 8012476:	ddb7      	ble.n	80123e8 <_dtoa_r+0xa30>
 8012478:	4629      	mov	r1, r5
 801247a:	2300      	movs	r3, #0
 801247c:	220a      	movs	r2, #10
 801247e:	4630      	mov	r0, r6
 8012480:	f000 f87a 	bl	8012578 <__multadd>
 8012484:	4605      	mov	r5, r0
 8012486:	e7ea      	b.n	801245e <_dtoa_r+0xaa6>
 8012488:	08013bbb 	.word	0x08013bbb
 801248c:	08013b18 	.word	0x08013b18
 8012490:	08013b3c 	.word	0x08013b3c

08012494 <_localeconv_r>:
 8012494:	4800      	ldr	r0, [pc, #0]	; (8012498 <_localeconv_r+0x4>)
 8012496:	4770      	bx	lr
 8012498:	240002f0 	.word	0x240002f0

0801249c <__malloc_lock>:
 801249c:	4801      	ldr	r0, [pc, #4]	; (80124a4 <__malloc_lock+0x8>)
 801249e:	f000 bd30 	b.w	8012f02 <__retarget_lock_acquire_recursive>
 80124a2:	bf00      	nop
 80124a4:	24002108 	.word	0x24002108

080124a8 <__malloc_unlock>:
 80124a8:	4801      	ldr	r0, [pc, #4]	; (80124b0 <__malloc_unlock+0x8>)
 80124aa:	f000 bd2b 	b.w	8012f04 <__retarget_lock_release_recursive>
 80124ae:	bf00      	nop
 80124b0:	24002108 	.word	0x24002108

080124b4 <_Balloc>:
 80124b4:	b570      	push	{r4, r5, r6, lr}
 80124b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80124b8:	4604      	mov	r4, r0
 80124ba:	460d      	mov	r5, r1
 80124bc:	b976      	cbnz	r6, 80124dc <_Balloc+0x28>
 80124be:	2010      	movs	r0, #16
 80124c0:	f7fe fc74 	bl	8010dac <malloc>
 80124c4:	4602      	mov	r2, r0
 80124c6:	6260      	str	r0, [r4, #36]	; 0x24
 80124c8:	b920      	cbnz	r0, 80124d4 <_Balloc+0x20>
 80124ca:	4b18      	ldr	r3, [pc, #96]	; (801252c <_Balloc+0x78>)
 80124cc:	4818      	ldr	r0, [pc, #96]	; (8012530 <_Balloc+0x7c>)
 80124ce:	2166      	movs	r1, #102	; 0x66
 80124d0:	f000 fce6 	bl	8012ea0 <__assert_func>
 80124d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80124d8:	6006      	str	r6, [r0, #0]
 80124da:	60c6      	str	r6, [r0, #12]
 80124dc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80124de:	68f3      	ldr	r3, [r6, #12]
 80124e0:	b183      	cbz	r3, 8012504 <_Balloc+0x50>
 80124e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80124e4:	68db      	ldr	r3, [r3, #12]
 80124e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80124ea:	b9b8      	cbnz	r0, 801251c <_Balloc+0x68>
 80124ec:	2101      	movs	r1, #1
 80124ee:	fa01 f605 	lsl.w	r6, r1, r5
 80124f2:	1d72      	adds	r2, r6, #5
 80124f4:	0092      	lsls	r2, r2, #2
 80124f6:	4620      	mov	r0, r4
 80124f8:	f000 fb60 	bl	8012bbc <_calloc_r>
 80124fc:	b160      	cbz	r0, 8012518 <_Balloc+0x64>
 80124fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012502:	e00e      	b.n	8012522 <_Balloc+0x6e>
 8012504:	2221      	movs	r2, #33	; 0x21
 8012506:	2104      	movs	r1, #4
 8012508:	4620      	mov	r0, r4
 801250a:	f000 fb57 	bl	8012bbc <_calloc_r>
 801250e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012510:	60f0      	str	r0, [r6, #12]
 8012512:	68db      	ldr	r3, [r3, #12]
 8012514:	2b00      	cmp	r3, #0
 8012516:	d1e4      	bne.n	80124e2 <_Balloc+0x2e>
 8012518:	2000      	movs	r0, #0
 801251a:	bd70      	pop	{r4, r5, r6, pc}
 801251c:	6802      	ldr	r2, [r0, #0]
 801251e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012522:	2300      	movs	r3, #0
 8012524:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012528:	e7f7      	b.n	801251a <_Balloc+0x66>
 801252a:	bf00      	nop
 801252c:	08013b49 	.word	0x08013b49
 8012530:	08013bcc 	.word	0x08013bcc

08012534 <_Bfree>:
 8012534:	b570      	push	{r4, r5, r6, lr}
 8012536:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012538:	4605      	mov	r5, r0
 801253a:	460c      	mov	r4, r1
 801253c:	b976      	cbnz	r6, 801255c <_Bfree+0x28>
 801253e:	2010      	movs	r0, #16
 8012540:	f7fe fc34 	bl	8010dac <malloc>
 8012544:	4602      	mov	r2, r0
 8012546:	6268      	str	r0, [r5, #36]	; 0x24
 8012548:	b920      	cbnz	r0, 8012554 <_Bfree+0x20>
 801254a:	4b09      	ldr	r3, [pc, #36]	; (8012570 <_Bfree+0x3c>)
 801254c:	4809      	ldr	r0, [pc, #36]	; (8012574 <_Bfree+0x40>)
 801254e:	218a      	movs	r1, #138	; 0x8a
 8012550:	f000 fca6 	bl	8012ea0 <__assert_func>
 8012554:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012558:	6006      	str	r6, [r0, #0]
 801255a:	60c6      	str	r6, [r0, #12]
 801255c:	b13c      	cbz	r4, 801256e <_Bfree+0x3a>
 801255e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012560:	6862      	ldr	r2, [r4, #4]
 8012562:	68db      	ldr	r3, [r3, #12]
 8012564:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012568:	6021      	str	r1, [r4, #0]
 801256a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801256e:	bd70      	pop	{r4, r5, r6, pc}
 8012570:	08013b49 	.word	0x08013b49
 8012574:	08013bcc 	.word	0x08013bcc

08012578 <__multadd>:
 8012578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801257c:	690d      	ldr	r5, [r1, #16]
 801257e:	4607      	mov	r7, r0
 8012580:	460c      	mov	r4, r1
 8012582:	461e      	mov	r6, r3
 8012584:	f101 0c14 	add.w	ip, r1, #20
 8012588:	2000      	movs	r0, #0
 801258a:	f8dc 3000 	ldr.w	r3, [ip]
 801258e:	b299      	uxth	r1, r3
 8012590:	fb02 6101 	mla	r1, r2, r1, r6
 8012594:	0c1e      	lsrs	r6, r3, #16
 8012596:	0c0b      	lsrs	r3, r1, #16
 8012598:	fb02 3306 	mla	r3, r2, r6, r3
 801259c:	b289      	uxth	r1, r1
 801259e:	3001      	adds	r0, #1
 80125a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80125a4:	4285      	cmp	r5, r0
 80125a6:	f84c 1b04 	str.w	r1, [ip], #4
 80125aa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80125ae:	dcec      	bgt.n	801258a <__multadd+0x12>
 80125b0:	b30e      	cbz	r6, 80125f6 <__multadd+0x7e>
 80125b2:	68a3      	ldr	r3, [r4, #8]
 80125b4:	42ab      	cmp	r3, r5
 80125b6:	dc19      	bgt.n	80125ec <__multadd+0x74>
 80125b8:	6861      	ldr	r1, [r4, #4]
 80125ba:	4638      	mov	r0, r7
 80125bc:	3101      	adds	r1, #1
 80125be:	f7ff ff79 	bl	80124b4 <_Balloc>
 80125c2:	4680      	mov	r8, r0
 80125c4:	b928      	cbnz	r0, 80125d2 <__multadd+0x5a>
 80125c6:	4602      	mov	r2, r0
 80125c8:	4b0c      	ldr	r3, [pc, #48]	; (80125fc <__multadd+0x84>)
 80125ca:	480d      	ldr	r0, [pc, #52]	; (8012600 <__multadd+0x88>)
 80125cc:	21b5      	movs	r1, #181	; 0xb5
 80125ce:	f000 fc67 	bl	8012ea0 <__assert_func>
 80125d2:	6922      	ldr	r2, [r4, #16]
 80125d4:	3202      	adds	r2, #2
 80125d6:	f104 010c 	add.w	r1, r4, #12
 80125da:	0092      	lsls	r2, r2, #2
 80125dc:	300c      	adds	r0, #12
 80125de:	f7fe fbf5 	bl	8010dcc <memcpy>
 80125e2:	4621      	mov	r1, r4
 80125e4:	4638      	mov	r0, r7
 80125e6:	f7ff ffa5 	bl	8012534 <_Bfree>
 80125ea:	4644      	mov	r4, r8
 80125ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80125f0:	3501      	adds	r5, #1
 80125f2:	615e      	str	r6, [r3, #20]
 80125f4:	6125      	str	r5, [r4, #16]
 80125f6:	4620      	mov	r0, r4
 80125f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125fc:	08013bbb 	.word	0x08013bbb
 8012600:	08013bcc 	.word	0x08013bcc

08012604 <__hi0bits>:
 8012604:	0c03      	lsrs	r3, r0, #16
 8012606:	041b      	lsls	r3, r3, #16
 8012608:	b9d3      	cbnz	r3, 8012640 <__hi0bits+0x3c>
 801260a:	0400      	lsls	r0, r0, #16
 801260c:	2310      	movs	r3, #16
 801260e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012612:	bf04      	itt	eq
 8012614:	0200      	lsleq	r0, r0, #8
 8012616:	3308      	addeq	r3, #8
 8012618:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801261c:	bf04      	itt	eq
 801261e:	0100      	lsleq	r0, r0, #4
 8012620:	3304      	addeq	r3, #4
 8012622:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012626:	bf04      	itt	eq
 8012628:	0080      	lsleq	r0, r0, #2
 801262a:	3302      	addeq	r3, #2
 801262c:	2800      	cmp	r0, #0
 801262e:	db05      	blt.n	801263c <__hi0bits+0x38>
 8012630:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012634:	f103 0301 	add.w	r3, r3, #1
 8012638:	bf08      	it	eq
 801263a:	2320      	moveq	r3, #32
 801263c:	4618      	mov	r0, r3
 801263e:	4770      	bx	lr
 8012640:	2300      	movs	r3, #0
 8012642:	e7e4      	b.n	801260e <__hi0bits+0xa>

08012644 <__lo0bits>:
 8012644:	6803      	ldr	r3, [r0, #0]
 8012646:	f013 0207 	ands.w	r2, r3, #7
 801264a:	4601      	mov	r1, r0
 801264c:	d00b      	beq.n	8012666 <__lo0bits+0x22>
 801264e:	07da      	lsls	r2, r3, #31
 8012650:	d423      	bmi.n	801269a <__lo0bits+0x56>
 8012652:	0798      	lsls	r0, r3, #30
 8012654:	bf49      	itett	mi
 8012656:	085b      	lsrmi	r3, r3, #1
 8012658:	089b      	lsrpl	r3, r3, #2
 801265a:	2001      	movmi	r0, #1
 801265c:	600b      	strmi	r3, [r1, #0]
 801265e:	bf5c      	itt	pl
 8012660:	600b      	strpl	r3, [r1, #0]
 8012662:	2002      	movpl	r0, #2
 8012664:	4770      	bx	lr
 8012666:	b298      	uxth	r0, r3
 8012668:	b9a8      	cbnz	r0, 8012696 <__lo0bits+0x52>
 801266a:	0c1b      	lsrs	r3, r3, #16
 801266c:	2010      	movs	r0, #16
 801266e:	b2da      	uxtb	r2, r3
 8012670:	b90a      	cbnz	r2, 8012676 <__lo0bits+0x32>
 8012672:	3008      	adds	r0, #8
 8012674:	0a1b      	lsrs	r3, r3, #8
 8012676:	071a      	lsls	r2, r3, #28
 8012678:	bf04      	itt	eq
 801267a:	091b      	lsreq	r3, r3, #4
 801267c:	3004      	addeq	r0, #4
 801267e:	079a      	lsls	r2, r3, #30
 8012680:	bf04      	itt	eq
 8012682:	089b      	lsreq	r3, r3, #2
 8012684:	3002      	addeq	r0, #2
 8012686:	07da      	lsls	r2, r3, #31
 8012688:	d403      	bmi.n	8012692 <__lo0bits+0x4e>
 801268a:	085b      	lsrs	r3, r3, #1
 801268c:	f100 0001 	add.w	r0, r0, #1
 8012690:	d005      	beq.n	801269e <__lo0bits+0x5a>
 8012692:	600b      	str	r3, [r1, #0]
 8012694:	4770      	bx	lr
 8012696:	4610      	mov	r0, r2
 8012698:	e7e9      	b.n	801266e <__lo0bits+0x2a>
 801269a:	2000      	movs	r0, #0
 801269c:	4770      	bx	lr
 801269e:	2020      	movs	r0, #32
 80126a0:	4770      	bx	lr
	...

080126a4 <__i2b>:
 80126a4:	b510      	push	{r4, lr}
 80126a6:	460c      	mov	r4, r1
 80126a8:	2101      	movs	r1, #1
 80126aa:	f7ff ff03 	bl	80124b4 <_Balloc>
 80126ae:	4602      	mov	r2, r0
 80126b0:	b928      	cbnz	r0, 80126be <__i2b+0x1a>
 80126b2:	4b05      	ldr	r3, [pc, #20]	; (80126c8 <__i2b+0x24>)
 80126b4:	4805      	ldr	r0, [pc, #20]	; (80126cc <__i2b+0x28>)
 80126b6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80126ba:	f000 fbf1 	bl	8012ea0 <__assert_func>
 80126be:	2301      	movs	r3, #1
 80126c0:	6144      	str	r4, [r0, #20]
 80126c2:	6103      	str	r3, [r0, #16]
 80126c4:	bd10      	pop	{r4, pc}
 80126c6:	bf00      	nop
 80126c8:	08013bbb 	.word	0x08013bbb
 80126cc:	08013bcc 	.word	0x08013bcc

080126d0 <__multiply>:
 80126d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126d4:	4691      	mov	r9, r2
 80126d6:	690a      	ldr	r2, [r1, #16]
 80126d8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80126dc:	429a      	cmp	r2, r3
 80126de:	bfb8      	it	lt
 80126e0:	460b      	movlt	r3, r1
 80126e2:	460c      	mov	r4, r1
 80126e4:	bfbc      	itt	lt
 80126e6:	464c      	movlt	r4, r9
 80126e8:	4699      	movlt	r9, r3
 80126ea:	6927      	ldr	r7, [r4, #16]
 80126ec:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80126f0:	68a3      	ldr	r3, [r4, #8]
 80126f2:	6861      	ldr	r1, [r4, #4]
 80126f4:	eb07 060a 	add.w	r6, r7, sl
 80126f8:	42b3      	cmp	r3, r6
 80126fa:	b085      	sub	sp, #20
 80126fc:	bfb8      	it	lt
 80126fe:	3101      	addlt	r1, #1
 8012700:	f7ff fed8 	bl	80124b4 <_Balloc>
 8012704:	b930      	cbnz	r0, 8012714 <__multiply+0x44>
 8012706:	4602      	mov	r2, r0
 8012708:	4b44      	ldr	r3, [pc, #272]	; (801281c <__multiply+0x14c>)
 801270a:	4845      	ldr	r0, [pc, #276]	; (8012820 <__multiply+0x150>)
 801270c:	f240 115d 	movw	r1, #349	; 0x15d
 8012710:	f000 fbc6 	bl	8012ea0 <__assert_func>
 8012714:	f100 0514 	add.w	r5, r0, #20
 8012718:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801271c:	462b      	mov	r3, r5
 801271e:	2200      	movs	r2, #0
 8012720:	4543      	cmp	r3, r8
 8012722:	d321      	bcc.n	8012768 <__multiply+0x98>
 8012724:	f104 0314 	add.w	r3, r4, #20
 8012728:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801272c:	f109 0314 	add.w	r3, r9, #20
 8012730:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8012734:	9202      	str	r2, [sp, #8]
 8012736:	1b3a      	subs	r2, r7, r4
 8012738:	3a15      	subs	r2, #21
 801273a:	f022 0203 	bic.w	r2, r2, #3
 801273e:	3204      	adds	r2, #4
 8012740:	f104 0115 	add.w	r1, r4, #21
 8012744:	428f      	cmp	r7, r1
 8012746:	bf38      	it	cc
 8012748:	2204      	movcc	r2, #4
 801274a:	9201      	str	r2, [sp, #4]
 801274c:	9a02      	ldr	r2, [sp, #8]
 801274e:	9303      	str	r3, [sp, #12]
 8012750:	429a      	cmp	r2, r3
 8012752:	d80c      	bhi.n	801276e <__multiply+0x9e>
 8012754:	2e00      	cmp	r6, #0
 8012756:	dd03      	ble.n	8012760 <__multiply+0x90>
 8012758:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801275c:	2b00      	cmp	r3, #0
 801275e:	d05a      	beq.n	8012816 <__multiply+0x146>
 8012760:	6106      	str	r6, [r0, #16]
 8012762:	b005      	add	sp, #20
 8012764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012768:	f843 2b04 	str.w	r2, [r3], #4
 801276c:	e7d8      	b.n	8012720 <__multiply+0x50>
 801276e:	f8b3 a000 	ldrh.w	sl, [r3]
 8012772:	f1ba 0f00 	cmp.w	sl, #0
 8012776:	d024      	beq.n	80127c2 <__multiply+0xf2>
 8012778:	f104 0e14 	add.w	lr, r4, #20
 801277c:	46a9      	mov	r9, r5
 801277e:	f04f 0c00 	mov.w	ip, #0
 8012782:	f85e 2b04 	ldr.w	r2, [lr], #4
 8012786:	f8d9 1000 	ldr.w	r1, [r9]
 801278a:	fa1f fb82 	uxth.w	fp, r2
 801278e:	b289      	uxth	r1, r1
 8012790:	fb0a 110b 	mla	r1, sl, fp, r1
 8012794:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8012798:	f8d9 2000 	ldr.w	r2, [r9]
 801279c:	4461      	add	r1, ip
 801279e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80127a2:	fb0a c20b 	mla	r2, sl, fp, ip
 80127a6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80127aa:	b289      	uxth	r1, r1
 80127ac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80127b0:	4577      	cmp	r7, lr
 80127b2:	f849 1b04 	str.w	r1, [r9], #4
 80127b6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80127ba:	d8e2      	bhi.n	8012782 <__multiply+0xb2>
 80127bc:	9a01      	ldr	r2, [sp, #4]
 80127be:	f845 c002 	str.w	ip, [r5, r2]
 80127c2:	9a03      	ldr	r2, [sp, #12]
 80127c4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80127c8:	3304      	adds	r3, #4
 80127ca:	f1b9 0f00 	cmp.w	r9, #0
 80127ce:	d020      	beq.n	8012812 <__multiply+0x142>
 80127d0:	6829      	ldr	r1, [r5, #0]
 80127d2:	f104 0c14 	add.w	ip, r4, #20
 80127d6:	46ae      	mov	lr, r5
 80127d8:	f04f 0a00 	mov.w	sl, #0
 80127dc:	f8bc b000 	ldrh.w	fp, [ip]
 80127e0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80127e4:	fb09 220b 	mla	r2, r9, fp, r2
 80127e8:	4492      	add	sl, r2
 80127ea:	b289      	uxth	r1, r1
 80127ec:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80127f0:	f84e 1b04 	str.w	r1, [lr], #4
 80127f4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80127f8:	f8be 1000 	ldrh.w	r1, [lr]
 80127fc:	0c12      	lsrs	r2, r2, #16
 80127fe:	fb09 1102 	mla	r1, r9, r2, r1
 8012802:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8012806:	4567      	cmp	r7, ip
 8012808:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801280c:	d8e6      	bhi.n	80127dc <__multiply+0x10c>
 801280e:	9a01      	ldr	r2, [sp, #4]
 8012810:	50a9      	str	r1, [r5, r2]
 8012812:	3504      	adds	r5, #4
 8012814:	e79a      	b.n	801274c <__multiply+0x7c>
 8012816:	3e01      	subs	r6, #1
 8012818:	e79c      	b.n	8012754 <__multiply+0x84>
 801281a:	bf00      	nop
 801281c:	08013bbb 	.word	0x08013bbb
 8012820:	08013bcc 	.word	0x08013bcc

08012824 <__pow5mult>:
 8012824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012828:	4615      	mov	r5, r2
 801282a:	f012 0203 	ands.w	r2, r2, #3
 801282e:	4606      	mov	r6, r0
 8012830:	460f      	mov	r7, r1
 8012832:	d007      	beq.n	8012844 <__pow5mult+0x20>
 8012834:	4c25      	ldr	r4, [pc, #148]	; (80128cc <__pow5mult+0xa8>)
 8012836:	3a01      	subs	r2, #1
 8012838:	2300      	movs	r3, #0
 801283a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801283e:	f7ff fe9b 	bl	8012578 <__multadd>
 8012842:	4607      	mov	r7, r0
 8012844:	10ad      	asrs	r5, r5, #2
 8012846:	d03d      	beq.n	80128c4 <__pow5mult+0xa0>
 8012848:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801284a:	b97c      	cbnz	r4, 801286c <__pow5mult+0x48>
 801284c:	2010      	movs	r0, #16
 801284e:	f7fe faad 	bl	8010dac <malloc>
 8012852:	4602      	mov	r2, r0
 8012854:	6270      	str	r0, [r6, #36]	; 0x24
 8012856:	b928      	cbnz	r0, 8012864 <__pow5mult+0x40>
 8012858:	4b1d      	ldr	r3, [pc, #116]	; (80128d0 <__pow5mult+0xac>)
 801285a:	481e      	ldr	r0, [pc, #120]	; (80128d4 <__pow5mult+0xb0>)
 801285c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012860:	f000 fb1e 	bl	8012ea0 <__assert_func>
 8012864:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012868:	6004      	str	r4, [r0, #0]
 801286a:	60c4      	str	r4, [r0, #12]
 801286c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012870:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012874:	b94c      	cbnz	r4, 801288a <__pow5mult+0x66>
 8012876:	f240 2171 	movw	r1, #625	; 0x271
 801287a:	4630      	mov	r0, r6
 801287c:	f7ff ff12 	bl	80126a4 <__i2b>
 8012880:	2300      	movs	r3, #0
 8012882:	f8c8 0008 	str.w	r0, [r8, #8]
 8012886:	4604      	mov	r4, r0
 8012888:	6003      	str	r3, [r0, #0]
 801288a:	f04f 0900 	mov.w	r9, #0
 801288e:	07eb      	lsls	r3, r5, #31
 8012890:	d50a      	bpl.n	80128a8 <__pow5mult+0x84>
 8012892:	4639      	mov	r1, r7
 8012894:	4622      	mov	r2, r4
 8012896:	4630      	mov	r0, r6
 8012898:	f7ff ff1a 	bl	80126d0 <__multiply>
 801289c:	4639      	mov	r1, r7
 801289e:	4680      	mov	r8, r0
 80128a0:	4630      	mov	r0, r6
 80128a2:	f7ff fe47 	bl	8012534 <_Bfree>
 80128a6:	4647      	mov	r7, r8
 80128a8:	106d      	asrs	r5, r5, #1
 80128aa:	d00b      	beq.n	80128c4 <__pow5mult+0xa0>
 80128ac:	6820      	ldr	r0, [r4, #0]
 80128ae:	b938      	cbnz	r0, 80128c0 <__pow5mult+0x9c>
 80128b0:	4622      	mov	r2, r4
 80128b2:	4621      	mov	r1, r4
 80128b4:	4630      	mov	r0, r6
 80128b6:	f7ff ff0b 	bl	80126d0 <__multiply>
 80128ba:	6020      	str	r0, [r4, #0]
 80128bc:	f8c0 9000 	str.w	r9, [r0]
 80128c0:	4604      	mov	r4, r0
 80128c2:	e7e4      	b.n	801288e <__pow5mult+0x6a>
 80128c4:	4638      	mov	r0, r7
 80128c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80128ca:	bf00      	nop
 80128cc:	08013d18 	.word	0x08013d18
 80128d0:	08013b49 	.word	0x08013b49
 80128d4:	08013bcc 	.word	0x08013bcc

080128d8 <__lshift>:
 80128d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80128dc:	460c      	mov	r4, r1
 80128de:	6849      	ldr	r1, [r1, #4]
 80128e0:	6923      	ldr	r3, [r4, #16]
 80128e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80128e6:	68a3      	ldr	r3, [r4, #8]
 80128e8:	4607      	mov	r7, r0
 80128ea:	4691      	mov	r9, r2
 80128ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80128f0:	f108 0601 	add.w	r6, r8, #1
 80128f4:	42b3      	cmp	r3, r6
 80128f6:	db0b      	blt.n	8012910 <__lshift+0x38>
 80128f8:	4638      	mov	r0, r7
 80128fa:	f7ff fddb 	bl	80124b4 <_Balloc>
 80128fe:	4605      	mov	r5, r0
 8012900:	b948      	cbnz	r0, 8012916 <__lshift+0x3e>
 8012902:	4602      	mov	r2, r0
 8012904:	4b2a      	ldr	r3, [pc, #168]	; (80129b0 <__lshift+0xd8>)
 8012906:	482b      	ldr	r0, [pc, #172]	; (80129b4 <__lshift+0xdc>)
 8012908:	f240 11d9 	movw	r1, #473	; 0x1d9
 801290c:	f000 fac8 	bl	8012ea0 <__assert_func>
 8012910:	3101      	adds	r1, #1
 8012912:	005b      	lsls	r3, r3, #1
 8012914:	e7ee      	b.n	80128f4 <__lshift+0x1c>
 8012916:	2300      	movs	r3, #0
 8012918:	f100 0114 	add.w	r1, r0, #20
 801291c:	f100 0210 	add.w	r2, r0, #16
 8012920:	4618      	mov	r0, r3
 8012922:	4553      	cmp	r3, sl
 8012924:	db37      	blt.n	8012996 <__lshift+0xbe>
 8012926:	6920      	ldr	r0, [r4, #16]
 8012928:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801292c:	f104 0314 	add.w	r3, r4, #20
 8012930:	f019 091f 	ands.w	r9, r9, #31
 8012934:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012938:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801293c:	d02f      	beq.n	801299e <__lshift+0xc6>
 801293e:	f1c9 0e20 	rsb	lr, r9, #32
 8012942:	468a      	mov	sl, r1
 8012944:	f04f 0c00 	mov.w	ip, #0
 8012948:	681a      	ldr	r2, [r3, #0]
 801294a:	fa02 f209 	lsl.w	r2, r2, r9
 801294e:	ea42 020c 	orr.w	r2, r2, ip
 8012952:	f84a 2b04 	str.w	r2, [sl], #4
 8012956:	f853 2b04 	ldr.w	r2, [r3], #4
 801295a:	4298      	cmp	r0, r3
 801295c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8012960:	d8f2      	bhi.n	8012948 <__lshift+0x70>
 8012962:	1b03      	subs	r3, r0, r4
 8012964:	3b15      	subs	r3, #21
 8012966:	f023 0303 	bic.w	r3, r3, #3
 801296a:	3304      	adds	r3, #4
 801296c:	f104 0215 	add.w	r2, r4, #21
 8012970:	4290      	cmp	r0, r2
 8012972:	bf38      	it	cc
 8012974:	2304      	movcc	r3, #4
 8012976:	f841 c003 	str.w	ip, [r1, r3]
 801297a:	f1bc 0f00 	cmp.w	ip, #0
 801297e:	d001      	beq.n	8012984 <__lshift+0xac>
 8012980:	f108 0602 	add.w	r6, r8, #2
 8012984:	3e01      	subs	r6, #1
 8012986:	4638      	mov	r0, r7
 8012988:	612e      	str	r6, [r5, #16]
 801298a:	4621      	mov	r1, r4
 801298c:	f7ff fdd2 	bl	8012534 <_Bfree>
 8012990:	4628      	mov	r0, r5
 8012992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012996:	f842 0f04 	str.w	r0, [r2, #4]!
 801299a:	3301      	adds	r3, #1
 801299c:	e7c1      	b.n	8012922 <__lshift+0x4a>
 801299e:	3904      	subs	r1, #4
 80129a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80129a4:	f841 2f04 	str.w	r2, [r1, #4]!
 80129a8:	4298      	cmp	r0, r3
 80129aa:	d8f9      	bhi.n	80129a0 <__lshift+0xc8>
 80129ac:	e7ea      	b.n	8012984 <__lshift+0xac>
 80129ae:	bf00      	nop
 80129b0:	08013bbb 	.word	0x08013bbb
 80129b4:	08013bcc 	.word	0x08013bcc

080129b8 <__mcmp>:
 80129b8:	b530      	push	{r4, r5, lr}
 80129ba:	6902      	ldr	r2, [r0, #16]
 80129bc:	690c      	ldr	r4, [r1, #16]
 80129be:	1b12      	subs	r2, r2, r4
 80129c0:	d10e      	bne.n	80129e0 <__mcmp+0x28>
 80129c2:	f100 0314 	add.w	r3, r0, #20
 80129c6:	3114      	adds	r1, #20
 80129c8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80129cc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80129d0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80129d4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80129d8:	42a5      	cmp	r5, r4
 80129da:	d003      	beq.n	80129e4 <__mcmp+0x2c>
 80129dc:	d305      	bcc.n	80129ea <__mcmp+0x32>
 80129de:	2201      	movs	r2, #1
 80129e0:	4610      	mov	r0, r2
 80129e2:	bd30      	pop	{r4, r5, pc}
 80129e4:	4283      	cmp	r3, r0
 80129e6:	d3f3      	bcc.n	80129d0 <__mcmp+0x18>
 80129e8:	e7fa      	b.n	80129e0 <__mcmp+0x28>
 80129ea:	f04f 32ff 	mov.w	r2, #4294967295
 80129ee:	e7f7      	b.n	80129e0 <__mcmp+0x28>

080129f0 <__mdiff>:
 80129f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129f4:	460c      	mov	r4, r1
 80129f6:	4606      	mov	r6, r0
 80129f8:	4611      	mov	r1, r2
 80129fa:	4620      	mov	r0, r4
 80129fc:	4690      	mov	r8, r2
 80129fe:	f7ff ffdb 	bl	80129b8 <__mcmp>
 8012a02:	1e05      	subs	r5, r0, #0
 8012a04:	d110      	bne.n	8012a28 <__mdiff+0x38>
 8012a06:	4629      	mov	r1, r5
 8012a08:	4630      	mov	r0, r6
 8012a0a:	f7ff fd53 	bl	80124b4 <_Balloc>
 8012a0e:	b930      	cbnz	r0, 8012a1e <__mdiff+0x2e>
 8012a10:	4b3a      	ldr	r3, [pc, #232]	; (8012afc <__mdiff+0x10c>)
 8012a12:	4602      	mov	r2, r0
 8012a14:	f240 2132 	movw	r1, #562	; 0x232
 8012a18:	4839      	ldr	r0, [pc, #228]	; (8012b00 <__mdiff+0x110>)
 8012a1a:	f000 fa41 	bl	8012ea0 <__assert_func>
 8012a1e:	2301      	movs	r3, #1
 8012a20:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012a24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a28:	bfa4      	itt	ge
 8012a2a:	4643      	movge	r3, r8
 8012a2c:	46a0      	movge	r8, r4
 8012a2e:	4630      	mov	r0, r6
 8012a30:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012a34:	bfa6      	itte	ge
 8012a36:	461c      	movge	r4, r3
 8012a38:	2500      	movge	r5, #0
 8012a3a:	2501      	movlt	r5, #1
 8012a3c:	f7ff fd3a 	bl	80124b4 <_Balloc>
 8012a40:	b920      	cbnz	r0, 8012a4c <__mdiff+0x5c>
 8012a42:	4b2e      	ldr	r3, [pc, #184]	; (8012afc <__mdiff+0x10c>)
 8012a44:	4602      	mov	r2, r0
 8012a46:	f44f 7110 	mov.w	r1, #576	; 0x240
 8012a4a:	e7e5      	b.n	8012a18 <__mdiff+0x28>
 8012a4c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8012a50:	6926      	ldr	r6, [r4, #16]
 8012a52:	60c5      	str	r5, [r0, #12]
 8012a54:	f104 0914 	add.w	r9, r4, #20
 8012a58:	f108 0514 	add.w	r5, r8, #20
 8012a5c:	f100 0e14 	add.w	lr, r0, #20
 8012a60:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8012a64:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8012a68:	f108 0210 	add.w	r2, r8, #16
 8012a6c:	46f2      	mov	sl, lr
 8012a6e:	2100      	movs	r1, #0
 8012a70:	f859 3b04 	ldr.w	r3, [r9], #4
 8012a74:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012a78:	fa1f f883 	uxth.w	r8, r3
 8012a7c:	fa11 f18b 	uxtah	r1, r1, fp
 8012a80:	0c1b      	lsrs	r3, r3, #16
 8012a82:	eba1 0808 	sub.w	r8, r1, r8
 8012a86:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012a8a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012a8e:	fa1f f888 	uxth.w	r8, r8
 8012a92:	1419      	asrs	r1, r3, #16
 8012a94:	454e      	cmp	r6, r9
 8012a96:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012a9a:	f84a 3b04 	str.w	r3, [sl], #4
 8012a9e:	d8e7      	bhi.n	8012a70 <__mdiff+0x80>
 8012aa0:	1b33      	subs	r3, r6, r4
 8012aa2:	3b15      	subs	r3, #21
 8012aa4:	f023 0303 	bic.w	r3, r3, #3
 8012aa8:	3304      	adds	r3, #4
 8012aaa:	3415      	adds	r4, #21
 8012aac:	42a6      	cmp	r6, r4
 8012aae:	bf38      	it	cc
 8012ab0:	2304      	movcc	r3, #4
 8012ab2:	441d      	add	r5, r3
 8012ab4:	4473      	add	r3, lr
 8012ab6:	469e      	mov	lr, r3
 8012ab8:	462e      	mov	r6, r5
 8012aba:	4566      	cmp	r6, ip
 8012abc:	d30e      	bcc.n	8012adc <__mdiff+0xec>
 8012abe:	f10c 0203 	add.w	r2, ip, #3
 8012ac2:	1b52      	subs	r2, r2, r5
 8012ac4:	f022 0203 	bic.w	r2, r2, #3
 8012ac8:	3d03      	subs	r5, #3
 8012aca:	45ac      	cmp	ip, r5
 8012acc:	bf38      	it	cc
 8012ace:	2200      	movcc	r2, #0
 8012ad0:	441a      	add	r2, r3
 8012ad2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8012ad6:	b17b      	cbz	r3, 8012af8 <__mdiff+0x108>
 8012ad8:	6107      	str	r7, [r0, #16]
 8012ada:	e7a3      	b.n	8012a24 <__mdiff+0x34>
 8012adc:	f856 8b04 	ldr.w	r8, [r6], #4
 8012ae0:	fa11 f288 	uxtah	r2, r1, r8
 8012ae4:	1414      	asrs	r4, r2, #16
 8012ae6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8012aea:	b292      	uxth	r2, r2
 8012aec:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8012af0:	f84e 2b04 	str.w	r2, [lr], #4
 8012af4:	1421      	asrs	r1, r4, #16
 8012af6:	e7e0      	b.n	8012aba <__mdiff+0xca>
 8012af8:	3f01      	subs	r7, #1
 8012afa:	e7ea      	b.n	8012ad2 <__mdiff+0xe2>
 8012afc:	08013bbb 	.word	0x08013bbb
 8012b00:	08013bcc 	.word	0x08013bcc

08012b04 <__d2b>:
 8012b04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012b08:	4689      	mov	r9, r1
 8012b0a:	2101      	movs	r1, #1
 8012b0c:	ec57 6b10 	vmov	r6, r7, d0
 8012b10:	4690      	mov	r8, r2
 8012b12:	f7ff fccf 	bl	80124b4 <_Balloc>
 8012b16:	4604      	mov	r4, r0
 8012b18:	b930      	cbnz	r0, 8012b28 <__d2b+0x24>
 8012b1a:	4602      	mov	r2, r0
 8012b1c:	4b25      	ldr	r3, [pc, #148]	; (8012bb4 <__d2b+0xb0>)
 8012b1e:	4826      	ldr	r0, [pc, #152]	; (8012bb8 <__d2b+0xb4>)
 8012b20:	f240 310a 	movw	r1, #778	; 0x30a
 8012b24:	f000 f9bc 	bl	8012ea0 <__assert_func>
 8012b28:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8012b2c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012b30:	bb35      	cbnz	r5, 8012b80 <__d2b+0x7c>
 8012b32:	2e00      	cmp	r6, #0
 8012b34:	9301      	str	r3, [sp, #4]
 8012b36:	d028      	beq.n	8012b8a <__d2b+0x86>
 8012b38:	4668      	mov	r0, sp
 8012b3a:	9600      	str	r6, [sp, #0]
 8012b3c:	f7ff fd82 	bl	8012644 <__lo0bits>
 8012b40:	9900      	ldr	r1, [sp, #0]
 8012b42:	b300      	cbz	r0, 8012b86 <__d2b+0x82>
 8012b44:	9a01      	ldr	r2, [sp, #4]
 8012b46:	f1c0 0320 	rsb	r3, r0, #32
 8012b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8012b4e:	430b      	orrs	r3, r1
 8012b50:	40c2      	lsrs	r2, r0
 8012b52:	6163      	str	r3, [r4, #20]
 8012b54:	9201      	str	r2, [sp, #4]
 8012b56:	9b01      	ldr	r3, [sp, #4]
 8012b58:	61a3      	str	r3, [r4, #24]
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	bf14      	ite	ne
 8012b5e:	2202      	movne	r2, #2
 8012b60:	2201      	moveq	r2, #1
 8012b62:	6122      	str	r2, [r4, #16]
 8012b64:	b1d5      	cbz	r5, 8012b9c <__d2b+0x98>
 8012b66:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012b6a:	4405      	add	r5, r0
 8012b6c:	f8c9 5000 	str.w	r5, [r9]
 8012b70:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012b74:	f8c8 0000 	str.w	r0, [r8]
 8012b78:	4620      	mov	r0, r4
 8012b7a:	b003      	add	sp, #12
 8012b7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012b80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012b84:	e7d5      	b.n	8012b32 <__d2b+0x2e>
 8012b86:	6161      	str	r1, [r4, #20]
 8012b88:	e7e5      	b.n	8012b56 <__d2b+0x52>
 8012b8a:	a801      	add	r0, sp, #4
 8012b8c:	f7ff fd5a 	bl	8012644 <__lo0bits>
 8012b90:	9b01      	ldr	r3, [sp, #4]
 8012b92:	6163      	str	r3, [r4, #20]
 8012b94:	2201      	movs	r2, #1
 8012b96:	6122      	str	r2, [r4, #16]
 8012b98:	3020      	adds	r0, #32
 8012b9a:	e7e3      	b.n	8012b64 <__d2b+0x60>
 8012b9c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012ba0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012ba4:	f8c9 0000 	str.w	r0, [r9]
 8012ba8:	6918      	ldr	r0, [r3, #16]
 8012baa:	f7ff fd2b 	bl	8012604 <__hi0bits>
 8012bae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012bb2:	e7df      	b.n	8012b74 <__d2b+0x70>
 8012bb4:	08013bbb 	.word	0x08013bbb
 8012bb8:	08013bcc 	.word	0x08013bcc

08012bbc <_calloc_r>:
 8012bbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012bbe:	fba1 2402 	umull	r2, r4, r1, r2
 8012bc2:	b94c      	cbnz	r4, 8012bd8 <_calloc_r+0x1c>
 8012bc4:	4611      	mov	r1, r2
 8012bc6:	9201      	str	r2, [sp, #4]
 8012bc8:	f7fe f982 	bl	8010ed0 <_malloc_r>
 8012bcc:	9a01      	ldr	r2, [sp, #4]
 8012bce:	4605      	mov	r5, r0
 8012bd0:	b930      	cbnz	r0, 8012be0 <_calloc_r+0x24>
 8012bd2:	4628      	mov	r0, r5
 8012bd4:	b003      	add	sp, #12
 8012bd6:	bd30      	pop	{r4, r5, pc}
 8012bd8:	220c      	movs	r2, #12
 8012bda:	6002      	str	r2, [r0, #0]
 8012bdc:	2500      	movs	r5, #0
 8012bde:	e7f8      	b.n	8012bd2 <_calloc_r+0x16>
 8012be0:	4621      	mov	r1, r4
 8012be2:	f7fe f901 	bl	8010de8 <memset>
 8012be6:	e7f4      	b.n	8012bd2 <_calloc_r+0x16>

08012be8 <__ssputs_r>:
 8012be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012bec:	688e      	ldr	r6, [r1, #8]
 8012bee:	429e      	cmp	r6, r3
 8012bf0:	4682      	mov	sl, r0
 8012bf2:	460c      	mov	r4, r1
 8012bf4:	4690      	mov	r8, r2
 8012bf6:	461f      	mov	r7, r3
 8012bf8:	d838      	bhi.n	8012c6c <__ssputs_r+0x84>
 8012bfa:	898a      	ldrh	r2, [r1, #12]
 8012bfc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012c00:	d032      	beq.n	8012c68 <__ssputs_r+0x80>
 8012c02:	6825      	ldr	r5, [r4, #0]
 8012c04:	6909      	ldr	r1, [r1, #16]
 8012c06:	eba5 0901 	sub.w	r9, r5, r1
 8012c0a:	6965      	ldr	r5, [r4, #20]
 8012c0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012c10:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012c14:	3301      	adds	r3, #1
 8012c16:	444b      	add	r3, r9
 8012c18:	106d      	asrs	r5, r5, #1
 8012c1a:	429d      	cmp	r5, r3
 8012c1c:	bf38      	it	cc
 8012c1e:	461d      	movcc	r5, r3
 8012c20:	0553      	lsls	r3, r2, #21
 8012c22:	d531      	bpl.n	8012c88 <__ssputs_r+0xa0>
 8012c24:	4629      	mov	r1, r5
 8012c26:	f7fe f953 	bl	8010ed0 <_malloc_r>
 8012c2a:	4606      	mov	r6, r0
 8012c2c:	b950      	cbnz	r0, 8012c44 <__ssputs_r+0x5c>
 8012c2e:	230c      	movs	r3, #12
 8012c30:	f8ca 3000 	str.w	r3, [sl]
 8012c34:	89a3      	ldrh	r3, [r4, #12]
 8012c36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012c3a:	81a3      	strh	r3, [r4, #12]
 8012c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8012c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c44:	6921      	ldr	r1, [r4, #16]
 8012c46:	464a      	mov	r2, r9
 8012c48:	f7fe f8c0 	bl	8010dcc <memcpy>
 8012c4c:	89a3      	ldrh	r3, [r4, #12]
 8012c4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012c52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012c56:	81a3      	strh	r3, [r4, #12]
 8012c58:	6126      	str	r6, [r4, #16]
 8012c5a:	6165      	str	r5, [r4, #20]
 8012c5c:	444e      	add	r6, r9
 8012c5e:	eba5 0509 	sub.w	r5, r5, r9
 8012c62:	6026      	str	r6, [r4, #0]
 8012c64:	60a5      	str	r5, [r4, #8]
 8012c66:	463e      	mov	r6, r7
 8012c68:	42be      	cmp	r6, r7
 8012c6a:	d900      	bls.n	8012c6e <__ssputs_r+0x86>
 8012c6c:	463e      	mov	r6, r7
 8012c6e:	6820      	ldr	r0, [r4, #0]
 8012c70:	4632      	mov	r2, r6
 8012c72:	4641      	mov	r1, r8
 8012c74:	f000 f959 	bl	8012f2a <memmove>
 8012c78:	68a3      	ldr	r3, [r4, #8]
 8012c7a:	1b9b      	subs	r3, r3, r6
 8012c7c:	60a3      	str	r3, [r4, #8]
 8012c7e:	6823      	ldr	r3, [r4, #0]
 8012c80:	4433      	add	r3, r6
 8012c82:	6023      	str	r3, [r4, #0]
 8012c84:	2000      	movs	r0, #0
 8012c86:	e7db      	b.n	8012c40 <__ssputs_r+0x58>
 8012c88:	462a      	mov	r2, r5
 8012c8a:	f000 f968 	bl	8012f5e <_realloc_r>
 8012c8e:	4606      	mov	r6, r0
 8012c90:	2800      	cmp	r0, #0
 8012c92:	d1e1      	bne.n	8012c58 <__ssputs_r+0x70>
 8012c94:	6921      	ldr	r1, [r4, #16]
 8012c96:	4650      	mov	r0, sl
 8012c98:	f7fe f8ae 	bl	8010df8 <_free_r>
 8012c9c:	e7c7      	b.n	8012c2e <__ssputs_r+0x46>
	...

08012ca0 <_svfiprintf_r>:
 8012ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ca4:	4698      	mov	r8, r3
 8012ca6:	898b      	ldrh	r3, [r1, #12]
 8012ca8:	061b      	lsls	r3, r3, #24
 8012caa:	b09d      	sub	sp, #116	; 0x74
 8012cac:	4607      	mov	r7, r0
 8012cae:	460d      	mov	r5, r1
 8012cb0:	4614      	mov	r4, r2
 8012cb2:	d50e      	bpl.n	8012cd2 <_svfiprintf_r+0x32>
 8012cb4:	690b      	ldr	r3, [r1, #16]
 8012cb6:	b963      	cbnz	r3, 8012cd2 <_svfiprintf_r+0x32>
 8012cb8:	2140      	movs	r1, #64	; 0x40
 8012cba:	f7fe f909 	bl	8010ed0 <_malloc_r>
 8012cbe:	6028      	str	r0, [r5, #0]
 8012cc0:	6128      	str	r0, [r5, #16]
 8012cc2:	b920      	cbnz	r0, 8012cce <_svfiprintf_r+0x2e>
 8012cc4:	230c      	movs	r3, #12
 8012cc6:	603b      	str	r3, [r7, #0]
 8012cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8012ccc:	e0d1      	b.n	8012e72 <_svfiprintf_r+0x1d2>
 8012cce:	2340      	movs	r3, #64	; 0x40
 8012cd0:	616b      	str	r3, [r5, #20]
 8012cd2:	2300      	movs	r3, #0
 8012cd4:	9309      	str	r3, [sp, #36]	; 0x24
 8012cd6:	2320      	movs	r3, #32
 8012cd8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012cdc:	f8cd 800c 	str.w	r8, [sp, #12]
 8012ce0:	2330      	movs	r3, #48	; 0x30
 8012ce2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012e8c <_svfiprintf_r+0x1ec>
 8012ce6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012cea:	f04f 0901 	mov.w	r9, #1
 8012cee:	4623      	mov	r3, r4
 8012cf0:	469a      	mov	sl, r3
 8012cf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012cf6:	b10a      	cbz	r2, 8012cfc <_svfiprintf_r+0x5c>
 8012cf8:	2a25      	cmp	r2, #37	; 0x25
 8012cfa:	d1f9      	bne.n	8012cf0 <_svfiprintf_r+0x50>
 8012cfc:	ebba 0b04 	subs.w	fp, sl, r4
 8012d00:	d00b      	beq.n	8012d1a <_svfiprintf_r+0x7a>
 8012d02:	465b      	mov	r3, fp
 8012d04:	4622      	mov	r2, r4
 8012d06:	4629      	mov	r1, r5
 8012d08:	4638      	mov	r0, r7
 8012d0a:	f7ff ff6d 	bl	8012be8 <__ssputs_r>
 8012d0e:	3001      	adds	r0, #1
 8012d10:	f000 80aa 	beq.w	8012e68 <_svfiprintf_r+0x1c8>
 8012d14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012d16:	445a      	add	r2, fp
 8012d18:	9209      	str	r2, [sp, #36]	; 0x24
 8012d1a:	f89a 3000 	ldrb.w	r3, [sl]
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	f000 80a2 	beq.w	8012e68 <_svfiprintf_r+0x1c8>
 8012d24:	2300      	movs	r3, #0
 8012d26:	f04f 32ff 	mov.w	r2, #4294967295
 8012d2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012d2e:	f10a 0a01 	add.w	sl, sl, #1
 8012d32:	9304      	str	r3, [sp, #16]
 8012d34:	9307      	str	r3, [sp, #28]
 8012d36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012d3a:	931a      	str	r3, [sp, #104]	; 0x68
 8012d3c:	4654      	mov	r4, sl
 8012d3e:	2205      	movs	r2, #5
 8012d40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012d44:	4851      	ldr	r0, [pc, #324]	; (8012e8c <_svfiprintf_r+0x1ec>)
 8012d46:	f7ed fad3 	bl	80002f0 <memchr>
 8012d4a:	9a04      	ldr	r2, [sp, #16]
 8012d4c:	b9d8      	cbnz	r0, 8012d86 <_svfiprintf_r+0xe6>
 8012d4e:	06d0      	lsls	r0, r2, #27
 8012d50:	bf44      	itt	mi
 8012d52:	2320      	movmi	r3, #32
 8012d54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012d58:	0711      	lsls	r1, r2, #28
 8012d5a:	bf44      	itt	mi
 8012d5c:	232b      	movmi	r3, #43	; 0x2b
 8012d5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012d62:	f89a 3000 	ldrb.w	r3, [sl]
 8012d66:	2b2a      	cmp	r3, #42	; 0x2a
 8012d68:	d015      	beq.n	8012d96 <_svfiprintf_r+0xf6>
 8012d6a:	9a07      	ldr	r2, [sp, #28]
 8012d6c:	4654      	mov	r4, sl
 8012d6e:	2000      	movs	r0, #0
 8012d70:	f04f 0c0a 	mov.w	ip, #10
 8012d74:	4621      	mov	r1, r4
 8012d76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012d7a:	3b30      	subs	r3, #48	; 0x30
 8012d7c:	2b09      	cmp	r3, #9
 8012d7e:	d94e      	bls.n	8012e1e <_svfiprintf_r+0x17e>
 8012d80:	b1b0      	cbz	r0, 8012db0 <_svfiprintf_r+0x110>
 8012d82:	9207      	str	r2, [sp, #28]
 8012d84:	e014      	b.n	8012db0 <_svfiprintf_r+0x110>
 8012d86:	eba0 0308 	sub.w	r3, r0, r8
 8012d8a:	fa09 f303 	lsl.w	r3, r9, r3
 8012d8e:	4313      	orrs	r3, r2
 8012d90:	9304      	str	r3, [sp, #16]
 8012d92:	46a2      	mov	sl, r4
 8012d94:	e7d2      	b.n	8012d3c <_svfiprintf_r+0x9c>
 8012d96:	9b03      	ldr	r3, [sp, #12]
 8012d98:	1d19      	adds	r1, r3, #4
 8012d9a:	681b      	ldr	r3, [r3, #0]
 8012d9c:	9103      	str	r1, [sp, #12]
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	bfbb      	ittet	lt
 8012da2:	425b      	neglt	r3, r3
 8012da4:	f042 0202 	orrlt.w	r2, r2, #2
 8012da8:	9307      	strge	r3, [sp, #28]
 8012daa:	9307      	strlt	r3, [sp, #28]
 8012dac:	bfb8      	it	lt
 8012dae:	9204      	strlt	r2, [sp, #16]
 8012db0:	7823      	ldrb	r3, [r4, #0]
 8012db2:	2b2e      	cmp	r3, #46	; 0x2e
 8012db4:	d10c      	bne.n	8012dd0 <_svfiprintf_r+0x130>
 8012db6:	7863      	ldrb	r3, [r4, #1]
 8012db8:	2b2a      	cmp	r3, #42	; 0x2a
 8012dba:	d135      	bne.n	8012e28 <_svfiprintf_r+0x188>
 8012dbc:	9b03      	ldr	r3, [sp, #12]
 8012dbe:	1d1a      	adds	r2, r3, #4
 8012dc0:	681b      	ldr	r3, [r3, #0]
 8012dc2:	9203      	str	r2, [sp, #12]
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	bfb8      	it	lt
 8012dc8:	f04f 33ff 	movlt.w	r3, #4294967295
 8012dcc:	3402      	adds	r4, #2
 8012dce:	9305      	str	r3, [sp, #20]
 8012dd0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012e9c <_svfiprintf_r+0x1fc>
 8012dd4:	7821      	ldrb	r1, [r4, #0]
 8012dd6:	2203      	movs	r2, #3
 8012dd8:	4650      	mov	r0, sl
 8012dda:	f7ed fa89 	bl	80002f0 <memchr>
 8012dde:	b140      	cbz	r0, 8012df2 <_svfiprintf_r+0x152>
 8012de0:	2340      	movs	r3, #64	; 0x40
 8012de2:	eba0 000a 	sub.w	r0, r0, sl
 8012de6:	fa03 f000 	lsl.w	r0, r3, r0
 8012dea:	9b04      	ldr	r3, [sp, #16]
 8012dec:	4303      	orrs	r3, r0
 8012dee:	3401      	adds	r4, #1
 8012df0:	9304      	str	r3, [sp, #16]
 8012df2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012df6:	4826      	ldr	r0, [pc, #152]	; (8012e90 <_svfiprintf_r+0x1f0>)
 8012df8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012dfc:	2206      	movs	r2, #6
 8012dfe:	f7ed fa77 	bl	80002f0 <memchr>
 8012e02:	2800      	cmp	r0, #0
 8012e04:	d038      	beq.n	8012e78 <_svfiprintf_r+0x1d8>
 8012e06:	4b23      	ldr	r3, [pc, #140]	; (8012e94 <_svfiprintf_r+0x1f4>)
 8012e08:	bb1b      	cbnz	r3, 8012e52 <_svfiprintf_r+0x1b2>
 8012e0a:	9b03      	ldr	r3, [sp, #12]
 8012e0c:	3307      	adds	r3, #7
 8012e0e:	f023 0307 	bic.w	r3, r3, #7
 8012e12:	3308      	adds	r3, #8
 8012e14:	9303      	str	r3, [sp, #12]
 8012e16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e18:	4433      	add	r3, r6
 8012e1a:	9309      	str	r3, [sp, #36]	; 0x24
 8012e1c:	e767      	b.n	8012cee <_svfiprintf_r+0x4e>
 8012e1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8012e22:	460c      	mov	r4, r1
 8012e24:	2001      	movs	r0, #1
 8012e26:	e7a5      	b.n	8012d74 <_svfiprintf_r+0xd4>
 8012e28:	2300      	movs	r3, #0
 8012e2a:	3401      	adds	r4, #1
 8012e2c:	9305      	str	r3, [sp, #20]
 8012e2e:	4619      	mov	r1, r3
 8012e30:	f04f 0c0a 	mov.w	ip, #10
 8012e34:	4620      	mov	r0, r4
 8012e36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012e3a:	3a30      	subs	r2, #48	; 0x30
 8012e3c:	2a09      	cmp	r2, #9
 8012e3e:	d903      	bls.n	8012e48 <_svfiprintf_r+0x1a8>
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	d0c5      	beq.n	8012dd0 <_svfiprintf_r+0x130>
 8012e44:	9105      	str	r1, [sp, #20]
 8012e46:	e7c3      	b.n	8012dd0 <_svfiprintf_r+0x130>
 8012e48:	fb0c 2101 	mla	r1, ip, r1, r2
 8012e4c:	4604      	mov	r4, r0
 8012e4e:	2301      	movs	r3, #1
 8012e50:	e7f0      	b.n	8012e34 <_svfiprintf_r+0x194>
 8012e52:	ab03      	add	r3, sp, #12
 8012e54:	9300      	str	r3, [sp, #0]
 8012e56:	462a      	mov	r2, r5
 8012e58:	4b0f      	ldr	r3, [pc, #60]	; (8012e98 <_svfiprintf_r+0x1f8>)
 8012e5a:	a904      	add	r1, sp, #16
 8012e5c:	4638      	mov	r0, r7
 8012e5e:	f7fe f93b 	bl	80110d8 <_printf_float>
 8012e62:	1c42      	adds	r2, r0, #1
 8012e64:	4606      	mov	r6, r0
 8012e66:	d1d6      	bne.n	8012e16 <_svfiprintf_r+0x176>
 8012e68:	89ab      	ldrh	r3, [r5, #12]
 8012e6a:	065b      	lsls	r3, r3, #25
 8012e6c:	f53f af2c 	bmi.w	8012cc8 <_svfiprintf_r+0x28>
 8012e70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012e72:	b01d      	add	sp, #116	; 0x74
 8012e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e78:	ab03      	add	r3, sp, #12
 8012e7a:	9300      	str	r3, [sp, #0]
 8012e7c:	462a      	mov	r2, r5
 8012e7e:	4b06      	ldr	r3, [pc, #24]	; (8012e98 <_svfiprintf_r+0x1f8>)
 8012e80:	a904      	add	r1, sp, #16
 8012e82:	4638      	mov	r0, r7
 8012e84:	f7fe fbb4 	bl	80115f0 <_printf_i>
 8012e88:	e7eb      	b.n	8012e62 <_svfiprintf_r+0x1c2>
 8012e8a:	bf00      	nop
 8012e8c:	08013d24 	.word	0x08013d24
 8012e90:	08013d2e 	.word	0x08013d2e
 8012e94:	080110d9 	.word	0x080110d9
 8012e98:	08012be9 	.word	0x08012be9
 8012e9c:	08013d2a 	.word	0x08013d2a

08012ea0 <__assert_func>:
 8012ea0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012ea2:	4614      	mov	r4, r2
 8012ea4:	461a      	mov	r2, r3
 8012ea6:	4b09      	ldr	r3, [pc, #36]	; (8012ecc <__assert_func+0x2c>)
 8012ea8:	681b      	ldr	r3, [r3, #0]
 8012eaa:	4605      	mov	r5, r0
 8012eac:	68d8      	ldr	r0, [r3, #12]
 8012eae:	b14c      	cbz	r4, 8012ec4 <__assert_func+0x24>
 8012eb0:	4b07      	ldr	r3, [pc, #28]	; (8012ed0 <__assert_func+0x30>)
 8012eb2:	9100      	str	r1, [sp, #0]
 8012eb4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012eb8:	4906      	ldr	r1, [pc, #24]	; (8012ed4 <__assert_func+0x34>)
 8012eba:	462b      	mov	r3, r5
 8012ebc:	f000 f80e 	bl	8012edc <fiprintf>
 8012ec0:	f000 faa4 	bl	801340c <abort>
 8012ec4:	4b04      	ldr	r3, [pc, #16]	; (8012ed8 <__assert_func+0x38>)
 8012ec6:	461c      	mov	r4, r3
 8012ec8:	e7f3      	b.n	8012eb2 <__assert_func+0x12>
 8012eca:	bf00      	nop
 8012ecc:	2400019c 	.word	0x2400019c
 8012ed0:	08013d35 	.word	0x08013d35
 8012ed4:	08013d42 	.word	0x08013d42
 8012ed8:	08013d70 	.word	0x08013d70

08012edc <fiprintf>:
 8012edc:	b40e      	push	{r1, r2, r3}
 8012ede:	b503      	push	{r0, r1, lr}
 8012ee0:	4601      	mov	r1, r0
 8012ee2:	ab03      	add	r3, sp, #12
 8012ee4:	4805      	ldr	r0, [pc, #20]	; (8012efc <fiprintf+0x20>)
 8012ee6:	f853 2b04 	ldr.w	r2, [r3], #4
 8012eea:	6800      	ldr	r0, [r0, #0]
 8012eec:	9301      	str	r3, [sp, #4]
 8012eee:	f000 f88f 	bl	8013010 <_vfiprintf_r>
 8012ef2:	b002      	add	sp, #8
 8012ef4:	f85d eb04 	ldr.w	lr, [sp], #4
 8012ef8:	b003      	add	sp, #12
 8012efa:	4770      	bx	lr
 8012efc:	2400019c 	.word	0x2400019c

08012f00 <__retarget_lock_init_recursive>:
 8012f00:	4770      	bx	lr

08012f02 <__retarget_lock_acquire_recursive>:
 8012f02:	4770      	bx	lr

08012f04 <__retarget_lock_release_recursive>:
 8012f04:	4770      	bx	lr

08012f06 <__ascii_mbtowc>:
 8012f06:	b082      	sub	sp, #8
 8012f08:	b901      	cbnz	r1, 8012f0c <__ascii_mbtowc+0x6>
 8012f0a:	a901      	add	r1, sp, #4
 8012f0c:	b142      	cbz	r2, 8012f20 <__ascii_mbtowc+0x1a>
 8012f0e:	b14b      	cbz	r3, 8012f24 <__ascii_mbtowc+0x1e>
 8012f10:	7813      	ldrb	r3, [r2, #0]
 8012f12:	600b      	str	r3, [r1, #0]
 8012f14:	7812      	ldrb	r2, [r2, #0]
 8012f16:	1e10      	subs	r0, r2, #0
 8012f18:	bf18      	it	ne
 8012f1a:	2001      	movne	r0, #1
 8012f1c:	b002      	add	sp, #8
 8012f1e:	4770      	bx	lr
 8012f20:	4610      	mov	r0, r2
 8012f22:	e7fb      	b.n	8012f1c <__ascii_mbtowc+0x16>
 8012f24:	f06f 0001 	mvn.w	r0, #1
 8012f28:	e7f8      	b.n	8012f1c <__ascii_mbtowc+0x16>

08012f2a <memmove>:
 8012f2a:	4288      	cmp	r0, r1
 8012f2c:	b510      	push	{r4, lr}
 8012f2e:	eb01 0402 	add.w	r4, r1, r2
 8012f32:	d902      	bls.n	8012f3a <memmove+0x10>
 8012f34:	4284      	cmp	r4, r0
 8012f36:	4623      	mov	r3, r4
 8012f38:	d807      	bhi.n	8012f4a <memmove+0x20>
 8012f3a:	1e43      	subs	r3, r0, #1
 8012f3c:	42a1      	cmp	r1, r4
 8012f3e:	d008      	beq.n	8012f52 <memmove+0x28>
 8012f40:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012f44:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012f48:	e7f8      	b.n	8012f3c <memmove+0x12>
 8012f4a:	4402      	add	r2, r0
 8012f4c:	4601      	mov	r1, r0
 8012f4e:	428a      	cmp	r2, r1
 8012f50:	d100      	bne.n	8012f54 <memmove+0x2a>
 8012f52:	bd10      	pop	{r4, pc}
 8012f54:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012f58:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012f5c:	e7f7      	b.n	8012f4e <memmove+0x24>

08012f5e <_realloc_r>:
 8012f5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f62:	4680      	mov	r8, r0
 8012f64:	4614      	mov	r4, r2
 8012f66:	460e      	mov	r6, r1
 8012f68:	b921      	cbnz	r1, 8012f74 <_realloc_r+0x16>
 8012f6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012f6e:	4611      	mov	r1, r2
 8012f70:	f7fd bfae 	b.w	8010ed0 <_malloc_r>
 8012f74:	b92a      	cbnz	r2, 8012f82 <_realloc_r+0x24>
 8012f76:	f7fd ff3f 	bl	8010df8 <_free_r>
 8012f7a:	4625      	mov	r5, r4
 8012f7c:	4628      	mov	r0, r5
 8012f7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f82:	f000 fc67 	bl	8013854 <_malloc_usable_size_r>
 8012f86:	4284      	cmp	r4, r0
 8012f88:	4607      	mov	r7, r0
 8012f8a:	d802      	bhi.n	8012f92 <_realloc_r+0x34>
 8012f8c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012f90:	d812      	bhi.n	8012fb8 <_realloc_r+0x5a>
 8012f92:	4621      	mov	r1, r4
 8012f94:	4640      	mov	r0, r8
 8012f96:	f7fd ff9b 	bl	8010ed0 <_malloc_r>
 8012f9a:	4605      	mov	r5, r0
 8012f9c:	2800      	cmp	r0, #0
 8012f9e:	d0ed      	beq.n	8012f7c <_realloc_r+0x1e>
 8012fa0:	42bc      	cmp	r4, r7
 8012fa2:	4622      	mov	r2, r4
 8012fa4:	4631      	mov	r1, r6
 8012fa6:	bf28      	it	cs
 8012fa8:	463a      	movcs	r2, r7
 8012faa:	f7fd ff0f 	bl	8010dcc <memcpy>
 8012fae:	4631      	mov	r1, r6
 8012fb0:	4640      	mov	r0, r8
 8012fb2:	f7fd ff21 	bl	8010df8 <_free_r>
 8012fb6:	e7e1      	b.n	8012f7c <_realloc_r+0x1e>
 8012fb8:	4635      	mov	r5, r6
 8012fba:	e7df      	b.n	8012f7c <_realloc_r+0x1e>

08012fbc <__sfputc_r>:
 8012fbc:	6893      	ldr	r3, [r2, #8]
 8012fbe:	3b01      	subs	r3, #1
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	b410      	push	{r4}
 8012fc4:	6093      	str	r3, [r2, #8]
 8012fc6:	da08      	bge.n	8012fda <__sfputc_r+0x1e>
 8012fc8:	6994      	ldr	r4, [r2, #24]
 8012fca:	42a3      	cmp	r3, r4
 8012fcc:	db01      	blt.n	8012fd2 <__sfputc_r+0x16>
 8012fce:	290a      	cmp	r1, #10
 8012fd0:	d103      	bne.n	8012fda <__sfputc_r+0x1e>
 8012fd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012fd6:	f000 b94b 	b.w	8013270 <__swbuf_r>
 8012fda:	6813      	ldr	r3, [r2, #0]
 8012fdc:	1c58      	adds	r0, r3, #1
 8012fde:	6010      	str	r0, [r2, #0]
 8012fe0:	7019      	strb	r1, [r3, #0]
 8012fe2:	4608      	mov	r0, r1
 8012fe4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012fe8:	4770      	bx	lr

08012fea <__sfputs_r>:
 8012fea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012fec:	4606      	mov	r6, r0
 8012fee:	460f      	mov	r7, r1
 8012ff0:	4614      	mov	r4, r2
 8012ff2:	18d5      	adds	r5, r2, r3
 8012ff4:	42ac      	cmp	r4, r5
 8012ff6:	d101      	bne.n	8012ffc <__sfputs_r+0x12>
 8012ff8:	2000      	movs	r0, #0
 8012ffa:	e007      	b.n	801300c <__sfputs_r+0x22>
 8012ffc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013000:	463a      	mov	r2, r7
 8013002:	4630      	mov	r0, r6
 8013004:	f7ff ffda 	bl	8012fbc <__sfputc_r>
 8013008:	1c43      	adds	r3, r0, #1
 801300a:	d1f3      	bne.n	8012ff4 <__sfputs_r+0xa>
 801300c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013010 <_vfiprintf_r>:
 8013010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013014:	460d      	mov	r5, r1
 8013016:	b09d      	sub	sp, #116	; 0x74
 8013018:	4614      	mov	r4, r2
 801301a:	4698      	mov	r8, r3
 801301c:	4606      	mov	r6, r0
 801301e:	b118      	cbz	r0, 8013028 <_vfiprintf_r+0x18>
 8013020:	6983      	ldr	r3, [r0, #24]
 8013022:	b90b      	cbnz	r3, 8013028 <_vfiprintf_r+0x18>
 8013024:	f000 fb14 	bl	8013650 <__sinit>
 8013028:	4b89      	ldr	r3, [pc, #548]	; (8013250 <_vfiprintf_r+0x240>)
 801302a:	429d      	cmp	r5, r3
 801302c:	d11b      	bne.n	8013066 <_vfiprintf_r+0x56>
 801302e:	6875      	ldr	r5, [r6, #4]
 8013030:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013032:	07d9      	lsls	r1, r3, #31
 8013034:	d405      	bmi.n	8013042 <_vfiprintf_r+0x32>
 8013036:	89ab      	ldrh	r3, [r5, #12]
 8013038:	059a      	lsls	r2, r3, #22
 801303a:	d402      	bmi.n	8013042 <_vfiprintf_r+0x32>
 801303c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801303e:	f7ff ff60 	bl	8012f02 <__retarget_lock_acquire_recursive>
 8013042:	89ab      	ldrh	r3, [r5, #12]
 8013044:	071b      	lsls	r3, r3, #28
 8013046:	d501      	bpl.n	801304c <_vfiprintf_r+0x3c>
 8013048:	692b      	ldr	r3, [r5, #16]
 801304a:	b9eb      	cbnz	r3, 8013088 <_vfiprintf_r+0x78>
 801304c:	4629      	mov	r1, r5
 801304e:	4630      	mov	r0, r6
 8013050:	f000 f96e 	bl	8013330 <__swsetup_r>
 8013054:	b1c0      	cbz	r0, 8013088 <_vfiprintf_r+0x78>
 8013056:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013058:	07dc      	lsls	r4, r3, #31
 801305a:	d50e      	bpl.n	801307a <_vfiprintf_r+0x6a>
 801305c:	f04f 30ff 	mov.w	r0, #4294967295
 8013060:	b01d      	add	sp, #116	; 0x74
 8013062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013066:	4b7b      	ldr	r3, [pc, #492]	; (8013254 <_vfiprintf_r+0x244>)
 8013068:	429d      	cmp	r5, r3
 801306a:	d101      	bne.n	8013070 <_vfiprintf_r+0x60>
 801306c:	68b5      	ldr	r5, [r6, #8]
 801306e:	e7df      	b.n	8013030 <_vfiprintf_r+0x20>
 8013070:	4b79      	ldr	r3, [pc, #484]	; (8013258 <_vfiprintf_r+0x248>)
 8013072:	429d      	cmp	r5, r3
 8013074:	bf08      	it	eq
 8013076:	68f5      	ldreq	r5, [r6, #12]
 8013078:	e7da      	b.n	8013030 <_vfiprintf_r+0x20>
 801307a:	89ab      	ldrh	r3, [r5, #12]
 801307c:	0598      	lsls	r0, r3, #22
 801307e:	d4ed      	bmi.n	801305c <_vfiprintf_r+0x4c>
 8013080:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013082:	f7ff ff3f 	bl	8012f04 <__retarget_lock_release_recursive>
 8013086:	e7e9      	b.n	801305c <_vfiprintf_r+0x4c>
 8013088:	2300      	movs	r3, #0
 801308a:	9309      	str	r3, [sp, #36]	; 0x24
 801308c:	2320      	movs	r3, #32
 801308e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013092:	f8cd 800c 	str.w	r8, [sp, #12]
 8013096:	2330      	movs	r3, #48	; 0x30
 8013098:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801325c <_vfiprintf_r+0x24c>
 801309c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80130a0:	f04f 0901 	mov.w	r9, #1
 80130a4:	4623      	mov	r3, r4
 80130a6:	469a      	mov	sl, r3
 80130a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80130ac:	b10a      	cbz	r2, 80130b2 <_vfiprintf_r+0xa2>
 80130ae:	2a25      	cmp	r2, #37	; 0x25
 80130b0:	d1f9      	bne.n	80130a6 <_vfiprintf_r+0x96>
 80130b2:	ebba 0b04 	subs.w	fp, sl, r4
 80130b6:	d00b      	beq.n	80130d0 <_vfiprintf_r+0xc0>
 80130b8:	465b      	mov	r3, fp
 80130ba:	4622      	mov	r2, r4
 80130bc:	4629      	mov	r1, r5
 80130be:	4630      	mov	r0, r6
 80130c0:	f7ff ff93 	bl	8012fea <__sfputs_r>
 80130c4:	3001      	adds	r0, #1
 80130c6:	f000 80aa 	beq.w	801321e <_vfiprintf_r+0x20e>
 80130ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80130cc:	445a      	add	r2, fp
 80130ce:	9209      	str	r2, [sp, #36]	; 0x24
 80130d0:	f89a 3000 	ldrb.w	r3, [sl]
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	f000 80a2 	beq.w	801321e <_vfiprintf_r+0x20e>
 80130da:	2300      	movs	r3, #0
 80130dc:	f04f 32ff 	mov.w	r2, #4294967295
 80130e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80130e4:	f10a 0a01 	add.w	sl, sl, #1
 80130e8:	9304      	str	r3, [sp, #16]
 80130ea:	9307      	str	r3, [sp, #28]
 80130ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80130f0:	931a      	str	r3, [sp, #104]	; 0x68
 80130f2:	4654      	mov	r4, sl
 80130f4:	2205      	movs	r2, #5
 80130f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80130fa:	4858      	ldr	r0, [pc, #352]	; (801325c <_vfiprintf_r+0x24c>)
 80130fc:	f7ed f8f8 	bl	80002f0 <memchr>
 8013100:	9a04      	ldr	r2, [sp, #16]
 8013102:	b9d8      	cbnz	r0, 801313c <_vfiprintf_r+0x12c>
 8013104:	06d1      	lsls	r1, r2, #27
 8013106:	bf44      	itt	mi
 8013108:	2320      	movmi	r3, #32
 801310a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801310e:	0713      	lsls	r3, r2, #28
 8013110:	bf44      	itt	mi
 8013112:	232b      	movmi	r3, #43	; 0x2b
 8013114:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013118:	f89a 3000 	ldrb.w	r3, [sl]
 801311c:	2b2a      	cmp	r3, #42	; 0x2a
 801311e:	d015      	beq.n	801314c <_vfiprintf_r+0x13c>
 8013120:	9a07      	ldr	r2, [sp, #28]
 8013122:	4654      	mov	r4, sl
 8013124:	2000      	movs	r0, #0
 8013126:	f04f 0c0a 	mov.w	ip, #10
 801312a:	4621      	mov	r1, r4
 801312c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013130:	3b30      	subs	r3, #48	; 0x30
 8013132:	2b09      	cmp	r3, #9
 8013134:	d94e      	bls.n	80131d4 <_vfiprintf_r+0x1c4>
 8013136:	b1b0      	cbz	r0, 8013166 <_vfiprintf_r+0x156>
 8013138:	9207      	str	r2, [sp, #28]
 801313a:	e014      	b.n	8013166 <_vfiprintf_r+0x156>
 801313c:	eba0 0308 	sub.w	r3, r0, r8
 8013140:	fa09 f303 	lsl.w	r3, r9, r3
 8013144:	4313      	orrs	r3, r2
 8013146:	9304      	str	r3, [sp, #16]
 8013148:	46a2      	mov	sl, r4
 801314a:	e7d2      	b.n	80130f2 <_vfiprintf_r+0xe2>
 801314c:	9b03      	ldr	r3, [sp, #12]
 801314e:	1d19      	adds	r1, r3, #4
 8013150:	681b      	ldr	r3, [r3, #0]
 8013152:	9103      	str	r1, [sp, #12]
 8013154:	2b00      	cmp	r3, #0
 8013156:	bfbb      	ittet	lt
 8013158:	425b      	neglt	r3, r3
 801315a:	f042 0202 	orrlt.w	r2, r2, #2
 801315e:	9307      	strge	r3, [sp, #28]
 8013160:	9307      	strlt	r3, [sp, #28]
 8013162:	bfb8      	it	lt
 8013164:	9204      	strlt	r2, [sp, #16]
 8013166:	7823      	ldrb	r3, [r4, #0]
 8013168:	2b2e      	cmp	r3, #46	; 0x2e
 801316a:	d10c      	bne.n	8013186 <_vfiprintf_r+0x176>
 801316c:	7863      	ldrb	r3, [r4, #1]
 801316e:	2b2a      	cmp	r3, #42	; 0x2a
 8013170:	d135      	bne.n	80131de <_vfiprintf_r+0x1ce>
 8013172:	9b03      	ldr	r3, [sp, #12]
 8013174:	1d1a      	adds	r2, r3, #4
 8013176:	681b      	ldr	r3, [r3, #0]
 8013178:	9203      	str	r2, [sp, #12]
 801317a:	2b00      	cmp	r3, #0
 801317c:	bfb8      	it	lt
 801317e:	f04f 33ff 	movlt.w	r3, #4294967295
 8013182:	3402      	adds	r4, #2
 8013184:	9305      	str	r3, [sp, #20]
 8013186:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801326c <_vfiprintf_r+0x25c>
 801318a:	7821      	ldrb	r1, [r4, #0]
 801318c:	2203      	movs	r2, #3
 801318e:	4650      	mov	r0, sl
 8013190:	f7ed f8ae 	bl	80002f0 <memchr>
 8013194:	b140      	cbz	r0, 80131a8 <_vfiprintf_r+0x198>
 8013196:	2340      	movs	r3, #64	; 0x40
 8013198:	eba0 000a 	sub.w	r0, r0, sl
 801319c:	fa03 f000 	lsl.w	r0, r3, r0
 80131a0:	9b04      	ldr	r3, [sp, #16]
 80131a2:	4303      	orrs	r3, r0
 80131a4:	3401      	adds	r4, #1
 80131a6:	9304      	str	r3, [sp, #16]
 80131a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80131ac:	482c      	ldr	r0, [pc, #176]	; (8013260 <_vfiprintf_r+0x250>)
 80131ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80131b2:	2206      	movs	r2, #6
 80131b4:	f7ed f89c 	bl	80002f0 <memchr>
 80131b8:	2800      	cmp	r0, #0
 80131ba:	d03f      	beq.n	801323c <_vfiprintf_r+0x22c>
 80131bc:	4b29      	ldr	r3, [pc, #164]	; (8013264 <_vfiprintf_r+0x254>)
 80131be:	bb1b      	cbnz	r3, 8013208 <_vfiprintf_r+0x1f8>
 80131c0:	9b03      	ldr	r3, [sp, #12]
 80131c2:	3307      	adds	r3, #7
 80131c4:	f023 0307 	bic.w	r3, r3, #7
 80131c8:	3308      	adds	r3, #8
 80131ca:	9303      	str	r3, [sp, #12]
 80131cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80131ce:	443b      	add	r3, r7
 80131d0:	9309      	str	r3, [sp, #36]	; 0x24
 80131d2:	e767      	b.n	80130a4 <_vfiprintf_r+0x94>
 80131d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80131d8:	460c      	mov	r4, r1
 80131da:	2001      	movs	r0, #1
 80131dc:	e7a5      	b.n	801312a <_vfiprintf_r+0x11a>
 80131de:	2300      	movs	r3, #0
 80131e0:	3401      	adds	r4, #1
 80131e2:	9305      	str	r3, [sp, #20]
 80131e4:	4619      	mov	r1, r3
 80131e6:	f04f 0c0a 	mov.w	ip, #10
 80131ea:	4620      	mov	r0, r4
 80131ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80131f0:	3a30      	subs	r2, #48	; 0x30
 80131f2:	2a09      	cmp	r2, #9
 80131f4:	d903      	bls.n	80131fe <_vfiprintf_r+0x1ee>
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	d0c5      	beq.n	8013186 <_vfiprintf_r+0x176>
 80131fa:	9105      	str	r1, [sp, #20]
 80131fc:	e7c3      	b.n	8013186 <_vfiprintf_r+0x176>
 80131fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8013202:	4604      	mov	r4, r0
 8013204:	2301      	movs	r3, #1
 8013206:	e7f0      	b.n	80131ea <_vfiprintf_r+0x1da>
 8013208:	ab03      	add	r3, sp, #12
 801320a:	9300      	str	r3, [sp, #0]
 801320c:	462a      	mov	r2, r5
 801320e:	4b16      	ldr	r3, [pc, #88]	; (8013268 <_vfiprintf_r+0x258>)
 8013210:	a904      	add	r1, sp, #16
 8013212:	4630      	mov	r0, r6
 8013214:	f7fd ff60 	bl	80110d8 <_printf_float>
 8013218:	4607      	mov	r7, r0
 801321a:	1c78      	adds	r0, r7, #1
 801321c:	d1d6      	bne.n	80131cc <_vfiprintf_r+0x1bc>
 801321e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013220:	07d9      	lsls	r1, r3, #31
 8013222:	d405      	bmi.n	8013230 <_vfiprintf_r+0x220>
 8013224:	89ab      	ldrh	r3, [r5, #12]
 8013226:	059a      	lsls	r2, r3, #22
 8013228:	d402      	bmi.n	8013230 <_vfiprintf_r+0x220>
 801322a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801322c:	f7ff fe6a 	bl	8012f04 <__retarget_lock_release_recursive>
 8013230:	89ab      	ldrh	r3, [r5, #12]
 8013232:	065b      	lsls	r3, r3, #25
 8013234:	f53f af12 	bmi.w	801305c <_vfiprintf_r+0x4c>
 8013238:	9809      	ldr	r0, [sp, #36]	; 0x24
 801323a:	e711      	b.n	8013060 <_vfiprintf_r+0x50>
 801323c:	ab03      	add	r3, sp, #12
 801323e:	9300      	str	r3, [sp, #0]
 8013240:	462a      	mov	r2, r5
 8013242:	4b09      	ldr	r3, [pc, #36]	; (8013268 <_vfiprintf_r+0x258>)
 8013244:	a904      	add	r1, sp, #16
 8013246:	4630      	mov	r0, r6
 8013248:	f7fe f9d2 	bl	80115f0 <_printf_i>
 801324c:	e7e4      	b.n	8013218 <_vfiprintf_r+0x208>
 801324e:	bf00      	nop
 8013250:	08013e9c 	.word	0x08013e9c
 8013254:	08013ebc 	.word	0x08013ebc
 8013258:	08013e7c 	.word	0x08013e7c
 801325c:	08013d24 	.word	0x08013d24
 8013260:	08013d2e 	.word	0x08013d2e
 8013264:	080110d9 	.word	0x080110d9
 8013268:	08012feb 	.word	0x08012feb
 801326c:	08013d2a 	.word	0x08013d2a

08013270 <__swbuf_r>:
 8013270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013272:	460e      	mov	r6, r1
 8013274:	4614      	mov	r4, r2
 8013276:	4605      	mov	r5, r0
 8013278:	b118      	cbz	r0, 8013282 <__swbuf_r+0x12>
 801327a:	6983      	ldr	r3, [r0, #24]
 801327c:	b90b      	cbnz	r3, 8013282 <__swbuf_r+0x12>
 801327e:	f000 f9e7 	bl	8013650 <__sinit>
 8013282:	4b21      	ldr	r3, [pc, #132]	; (8013308 <__swbuf_r+0x98>)
 8013284:	429c      	cmp	r4, r3
 8013286:	d12b      	bne.n	80132e0 <__swbuf_r+0x70>
 8013288:	686c      	ldr	r4, [r5, #4]
 801328a:	69a3      	ldr	r3, [r4, #24]
 801328c:	60a3      	str	r3, [r4, #8]
 801328e:	89a3      	ldrh	r3, [r4, #12]
 8013290:	071a      	lsls	r2, r3, #28
 8013292:	d52f      	bpl.n	80132f4 <__swbuf_r+0x84>
 8013294:	6923      	ldr	r3, [r4, #16]
 8013296:	b36b      	cbz	r3, 80132f4 <__swbuf_r+0x84>
 8013298:	6923      	ldr	r3, [r4, #16]
 801329a:	6820      	ldr	r0, [r4, #0]
 801329c:	1ac0      	subs	r0, r0, r3
 801329e:	6963      	ldr	r3, [r4, #20]
 80132a0:	b2f6      	uxtb	r6, r6
 80132a2:	4283      	cmp	r3, r0
 80132a4:	4637      	mov	r7, r6
 80132a6:	dc04      	bgt.n	80132b2 <__swbuf_r+0x42>
 80132a8:	4621      	mov	r1, r4
 80132aa:	4628      	mov	r0, r5
 80132ac:	f000 f93c 	bl	8013528 <_fflush_r>
 80132b0:	bb30      	cbnz	r0, 8013300 <__swbuf_r+0x90>
 80132b2:	68a3      	ldr	r3, [r4, #8]
 80132b4:	3b01      	subs	r3, #1
 80132b6:	60a3      	str	r3, [r4, #8]
 80132b8:	6823      	ldr	r3, [r4, #0]
 80132ba:	1c5a      	adds	r2, r3, #1
 80132bc:	6022      	str	r2, [r4, #0]
 80132be:	701e      	strb	r6, [r3, #0]
 80132c0:	6963      	ldr	r3, [r4, #20]
 80132c2:	3001      	adds	r0, #1
 80132c4:	4283      	cmp	r3, r0
 80132c6:	d004      	beq.n	80132d2 <__swbuf_r+0x62>
 80132c8:	89a3      	ldrh	r3, [r4, #12]
 80132ca:	07db      	lsls	r3, r3, #31
 80132cc:	d506      	bpl.n	80132dc <__swbuf_r+0x6c>
 80132ce:	2e0a      	cmp	r6, #10
 80132d0:	d104      	bne.n	80132dc <__swbuf_r+0x6c>
 80132d2:	4621      	mov	r1, r4
 80132d4:	4628      	mov	r0, r5
 80132d6:	f000 f927 	bl	8013528 <_fflush_r>
 80132da:	b988      	cbnz	r0, 8013300 <__swbuf_r+0x90>
 80132dc:	4638      	mov	r0, r7
 80132de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80132e0:	4b0a      	ldr	r3, [pc, #40]	; (801330c <__swbuf_r+0x9c>)
 80132e2:	429c      	cmp	r4, r3
 80132e4:	d101      	bne.n	80132ea <__swbuf_r+0x7a>
 80132e6:	68ac      	ldr	r4, [r5, #8]
 80132e8:	e7cf      	b.n	801328a <__swbuf_r+0x1a>
 80132ea:	4b09      	ldr	r3, [pc, #36]	; (8013310 <__swbuf_r+0xa0>)
 80132ec:	429c      	cmp	r4, r3
 80132ee:	bf08      	it	eq
 80132f0:	68ec      	ldreq	r4, [r5, #12]
 80132f2:	e7ca      	b.n	801328a <__swbuf_r+0x1a>
 80132f4:	4621      	mov	r1, r4
 80132f6:	4628      	mov	r0, r5
 80132f8:	f000 f81a 	bl	8013330 <__swsetup_r>
 80132fc:	2800      	cmp	r0, #0
 80132fe:	d0cb      	beq.n	8013298 <__swbuf_r+0x28>
 8013300:	f04f 37ff 	mov.w	r7, #4294967295
 8013304:	e7ea      	b.n	80132dc <__swbuf_r+0x6c>
 8013306:	bf00      	nop
 8013308:	08013e9c 	.word	0x08013e9c
 801330c:	08013ebc 	.word	0x08013ebc
 8013310:	08013e7c 	.word	0x08013e7c

08013314 <__ascii_wctomb>:
 8013314:	b149      	cbz	r1, 801332a <__ascii_wctomb+0x16>
 8013316:	2aff      	cmp	r2, #255	; 0xff
 8013318:	bf85      	ittet	hi
 801331a:	238a      	movhi	r3, #138	; 0x8a
 801331c:	6003      	strhi	r3, [r0, #0]
 801331e:	700a      	strbls	r2, [r1, #0]
 8013320:	f04f 30ff 	movhi.w	r0, #4294967295
 8013324:	bf98      	it	ls
 8013326:	2001      	movls	r0, #1
 8013328:	4770      	bx	lr
 801332a:	4608      	mov	r0, r1
 801332c:	4770      	bx	lr
	...

08013330 <__swsetup_r>:
 8013330:	4b32      	ldr	r3, [pc, #200]	; (80133fc <__swsetup_r+0xcc>)
 8013332:	b570      	push	{r4, r5, r6, lr}
 8013334:	681d      	ldr	r5, [r3, #0]
 8013336:	4606      	mov	r6, r0
 8013338:	460c      	mov	r4, r1
 801333a:	b125      	cbz	r5, 8013346 <__swsetup_r+0x16>
 801333c:	69ab      	ldr	r3, [r5, #24]
 801333e:	b913      	cbnz	r3, 8013346 <__swsetup_r+0x16>
 8013340:	4628      	mov	r0, r5
 8013342:	f000 f985 	bl	8013650 <__sinit>
 8013346:	4b2e      	ldr	r3, [pc, #184]	; (8013400 <__swsetup_r+0xd0>)
 8013348:	429c      	cmp	r4, r3
 801334a:	d10f      	bne.n	801336c <__swsetup_r+0x3c>
 801334c:	686c      	ldr	r4, [r5, #4]
 801334e:	89a3      	ldrh	r3, [r4, #12]
 8013350:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013354:	0719      	lsls	r1, r3, #28
 8013356:	d42c      	bmi.n	80133b2 <__swsetup_r+0x82>
 8013358:	06dd      	lsls	r5, r3, #27
 801335a:	d411      	bmi.n	8013380 <__swsetup_r+0x50>
 801335c:	2309      	movs	r3, #9
 801335e:	6033      	str	r3, [r6, #0]
 8013360:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013364:	81a3      	strh	r3, [r4, #12]
 8013366:	f04f 30ff 	mov.w	r0, #4294967295
 801336a:	e03e      	b.n	80133ea <__swsetup_r+0xba>
 801336c:	4b25      	ldr	r3, [pc, #148]	; (8013404 <__swsetup_r+0xd4>)
 801336e:	429c      	cmp	r4, r3
 8013370:	d101      	bne.n	8013376 <__swsetup_r+0x46>
 8013372:	68ac      	ldr	r4, [r5, #8]
 8013374:	e7eb      	b.n	801334e <__swsetup_r+0x1e>
 8013376:	4b24      	ldr	r3, [pc, #144]	; (8013408 <__swsetup_r+0xd8>)
 8013378:	429c      	cmp	r4, r3
 801337a:	bf08      	it	eq
 801337c:	68ec      	ldreq	r4, [r5, #12]
 801337e:	e7e6      	b.n	801334e <__swsetup_r+0x1e>
 8013380:	0758      	lsls	r0, r3, #29
 8013382:	d512      	bpl.n	80133aa <__swsetup_r+0x7a>
 8013384:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013386:	b141      	cbz	r1, 801339a <__swsetup_r+0x6a>
 8013388:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801338c:	4299      	cmp	r1, r3
 801338e:	d002      	beq.n	8013396 <__swsetup_r+0x66>
 8013390:	4630      	mov	r0, r6
 8013392:	f7fd fd31 	bl	8010df8 <_free_r>
 8013396:	2300      	movs	r3, #0
 8013398:	6363      	str	r3, [r4, #52]	; 0x34
 801339a:	89a3      	ldrh	r3, [r4, #12]
 801339c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80133a0:	81a3      	strh	r3, [r4, #12]
 80133a2:	2300      	movs	r3, #0
 80133a4:	6063      	str	r3, [r4, #4]
 80133a6:	6923      	ldr	r3, [r4, #16]
 80133a8:	6023      	str	r3, [r4, #0]
 80133aa:	89a3      	ldrh	r3, [r4, #12]
 80133ac:	f043 0308 	orr.w	r3, r3, #8
 80133b0:	81a3      	strh	r3, [r4, #12]
 80133b2:	6923      	ldr	r3, [r4, #16]
 80133b4:	b94b      	cbnz	r3, 80133ca <__swsetup_r+0x9a>
 80133b6:	89a3      	ldrh	r3, [r4, #12]
 80133b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80133bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80133c0:	d003      	beq.n	80133ca <__swsetup_r+0x9a>
 80133c2:	4621      	mov	r1, r4
 80133c4:	4630      	mov	r0, r6
 80133c6:	f000 fa05 	bl	80137d4 <__smakebuf_r>
 80133ca:	89a0      	ldrh	r0, [r4, #12]
 80133cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80133d0:	f010 0301 	ands.w	r3, r0, #1
 80133d4:	d00a      	beq.n	80133ec <__swsetup_r+0xbc>
 80133d6:	2300      	movs	r3, #0
 80133d8:	60a3      	str	r3, [r4, #8]
 80133da:	6963      	ldr	r3, [r4, #20]
 80133dc:	425b      	negs	r3, r3
 80133de:	61a3      	str	r3, [r4, #24]
 80133e0:	6923      	ldr	r3, [r4, #16]
 80133e2:	b943      	cbnz	r3, 80133f6 <__swsetup_r+0xc6>
 80133e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80133e8:	d1ba      	bne.n	8013360 <__swsetup_r+0x30>
 80133ea:	bd70      	pop	{r4, r5, r6, pc}
 80133ec:	0781      	lsls	r1, r0, #30
 80133ee:	bf58      	it	pl
 80133f0:	6963      	ldrpl	r3, [r4, #20]
 80133f2:	60a3      	str	r3, [r4, #8]
 80133f4:	e7f4      	b.n	80133e0 <__swsetup_r+0xb0>
 80133f6:	2000      	movs	r0, #0
 80133f8:	e7f7      	b.n	80133ea <__swsetup_r+0xba>
 80133fa:	bf00      	nop
 80133fc:	2400019c 	.word	0x2400019c
 8013400:	08013e9c 	.word	0x08013e9c
 8013404:	08013ebc 	.word	0x08013ebc
 8013408:	08013e7c 	.word	0x08013e7c

0801340c <abort>:
 801340c:	b508      	push	{r3, lr}
 801340e:	2006      	movs	r0, #6
 8013410:	f000 fa50 	bl	80138b4 <raise>
 8013414:	2001      	movs	r0, #1
 8013416:	f7ee f81f 	bl	8001458 <_exit>
	...

0801341c <__sflush_r>:
 801341c:	898a      	ldrh	r2, [r1, #12]
 801341e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013422:	4605      	mov	r5, r0
 8013424:	0710      	lsls	r0, r2, #28
 8013426:	460c      	mov	r4, r1
 8013428:	d458      	bmi.n	80134dc <__sflush_r+0xc0>
 801342a:	684b      	ldr	r3, [r1, #4]
 801342c:	2b00      	cmp	r3, #0
 801342e:	dc05      	bgt.n	801343c <__sflush_r+0x20>
 8013430:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013432:	2b00      	cmp	r3, #0
 8013434:	dc02      	bgt.n	801343c <__sflush_r+0x20>
 8013436:	2000      	movs	r0, #0
 8013438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801343c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801343e:	2e00      	cmp	r6, #0
 8013440:	d0f9      	beq.n	8013436 <__sflush_r+0x1a>
 8013442:	2300      	movs	r3, #0
 8013444:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013448:	682f      	ldr	r7, [r5, #0]
 801344a:	602b      	str	r3, [r5, #0]
 801344c:	d032      	beq.n	80134b4 <__sflush_r+0x98>
 801344e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013450:	89a3      	ldrh	r3, [r4, #12]
 8013452:	075a      	lsls	r2, r3, #29
 8013454:	d505      	bpl.n	8013462 <__sflush_r+0x46>
 8013456:	6863      	ldr	r3, [r4, #4]
 8013458:	1ac0      	subs	r0, r0, r3
 801345a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801345c:	b10b      	cbz	r3, 8013462 <__sflush_r+0x46>
 801345e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013460:	1ac0      	subs	r0, r0, r3
 8013462:	2300      	movs	r3, #0
 8013464:	4602      	mov	r2, r0
 8013466:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013468:	6a21      	ldr	r1, [r4, #32]
 801346a:	4628      	mov	r0, r5
 801346c:	47b0      	blx	r6
 801346e:	1c43      	adds	r3, r0, #1
 8013470:	89a3      	ldrh	r3, [r4, #12]
 8013472:	d106      	bne.n	8013482 <__sflush_r+0x66>
 8013474:	6829      	ldr	r1, [r5, #0]
 8013476:	291d      	cmp	r1, #29
 8013478:	d82c      	bhi.n	80134d4 <__sflush_r+0xb8>
 801347a:	4a2a      	ldr	r2, [pc, #168]	; (8013524 <__sflush_r+0x108>)
 801347c:	40ca      	lsrs	r2, r1
 801347e:	07d6      	lsls	r6, r2, #31
 8013480:	d528      	bpl.n	80134d4 <__sflush_r+0xb8>
 8013482:	2200      	movs	r2, #0
 8013484:	6062      	str	r2, [r4, #4]
 8013486:	04d9      	lsls	r1, r3, #19
 8013488:	6922      	ldr	r2, [r4, #16]
 801348a:	6022      	str	r2, [r4, #0]
 801348c:	d504      	bpl.n	8013498 <__sflush_r+0x7c>
 801348e:	1c42      	adds	r2, r0, #1
 8013490:	d101      	bne.n	8013496 <__sflush_r+0x7a>
 8013492:	682b      	ldr	r3, [r5, #0]
 8013494:	b903      	cbnz	r3, 8013498 <__sflush_r+0x7c>
 8013496:	6560      	str	r0, [r4, #84]	; 0x54
 8013498:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801349a:	602f      	str	r7, [r5, #0]
 801349c:	2900      	cmp	r1, #0
 801349e:	d0ca      	beq.n	8013436 <__sflush_r+0x1a>
 80134a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80134a4:	4299      	cmp	r1, r3
 80134a6:	d002      	beq.n	80134ae <__sflush_r+0x92>
 80134a8:	4628      	mov	r0, r5
 80134aa:	f7fd fca5 	bl	8010df8 <_free_r>
 80134ae:	2000      	movs	r0, #0
 80134b0:	6360      	str	r0, [r4, #52]	; 0x34
 80134b2:	e7c1      	b.n	8013438 <__sflush_r+0x1c>
 80134b4:	6a21      	ldr	r1, [r4, #32]
 80134b6:	2301      	movs	r3, #1
 80134b8:	4628      	mov	r0, r5
 80134ba:	47b0      	blx	r6
 80134bc:	1c41      	adds	r1, r0, #1
 80134be:	d1c7      	bne.n	8013450 <__sflush_r+0x34>
 80134c0:	682b      	ldr	r3, [r5, #0]
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	d0c4      	beq.n	8013450 <__sflush_r+0x34>
 80134c6:	2b1d      	cmp	r3, #29
 80134c8:	d001      	beq.n	80134ce <__sflush_r+0xb2>
 80134ca:	2b16      	cmp	r3, #22
 80134cc:	d101      	bne.n	80134d2 <__sflush_r+0xb6>
 80134ce:	602f      	str	r7, [r5, #0]
 80134d0:	e7b1      	b.n	8013436 <__sflush_r+0x1a>
 80134d2:	89a3      	ldrh	r3, [r4, #12]
 80134d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80134d8:	81a3      	strh	r3, [r4, #12]
 80134da:	e7ad      	b.n	8013438 <__sflush_r+0x1c>
 80134dc:	690f      	ldr	r7, [r1, #16]
 80134de:	2f00      	cmp	r7, #0
 80134e0:	d0a9      	beq.n	8013436 <__sflush_r+0x1a>
 80134e2:	0793      	lsls	r3, r2, #30
 80134e4:	680e      	ldr	r6, [r1, #0]
 80134e6:	bf08      	it	eq
 80134e8:	694b      	ldreq	r3, [r1, #20]
 80134ea:	600f      	str	r7, [r1, #0]
 80134ec:	bf18      	it	ne
 80134ee:	2300      	movne	r3, #0
 80134f0:	eba6 0807 	sub.w	r8, r6, r7
 80134f4:	608b      	str	r3, [r1, #8]
 80134f6:	f1b8 0f00 	cmp.w	r8, #0
 80134fa:	dd9c      	ble.n	8013436 <__sflush_r+0x1a>
 80134fc:	6a21      	ldr	r1, [r4, #32]
 80134fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013500:	4643      	mov	r3, r8
 8013502:	463a      	mov	r2, r7
 8013504:	4628      	mov	r0, r5
 8013506:	47b0      	blx	r6
 8013508:	2800      	cmp	r0, #0
 801350a:	dc06      	bgt.n	801351a <__sflush_r+0xfe>
 801350c:	89a3      	ldrh	r3, [r4, #12]
 801350e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013512:	81a3      	strh	r3, [r4, #12]
 8013514:	f04f 30ff 	mov.w	r0, #4294967295
 8013518:	e78e      	b.n	8013438 <__sflush_r+0x1c>
 801351a:	4407      	add	r7, r0
 801351c:	eba8 0800 	sub.w	r8, r8, r0
 8013520:	e7e9      	b.n	80134f6 <__sflush_r+0xda>
 8013522:	bf00      	nop
 8013524:	20400001 	.word	0x20400001

08013528 <_fflush_r>:
 8013528:	b538      	push	{r3, r4, r5, lr}
 801352a:	690b      	ldr	r3, [r1, #16]
 801352c:	4605      	mov	r5, r0
 801352e:	460c      	mov	r4, r1
 8013530:	b913      	cbnz	r3, 8013538 <_fflush_r+0x10>
 8013532:	2500      	movs	r5, #0
 8013534:	4628      	mov	r0, r5
 8013536:	bd38      	pop	{r3, r4, r5, pc}
 8013538:	b118      	cbz	r0, 8013542 <_fflush_r+0x1a>
 801353a:	6983      	ldr	r3, [r0, #24]
 801353c:	b90b      	cbnz	r3, 8013542 <_fflush_r+0x1a>
 801353e:	f000 f887 	bl	8013650 <__sinit>
 8013542:	4b14      	ldr	r3, [pc, #80]	; (8013594 <_fflush_r+0x6c>)
 8013544:	429c      	cmp	r4, r3
 8013546:	d11b      	bne.n	8013580 <_fflush_r+0x58>
 8013548:	686c      	ldr	r4, [r5, #4]
 801354a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801354e:	2b00      	cmp	r3, #0
 8013550:	d0ef      	beq.n	8013532 <_fflush_r+0xa>
 8013552:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013554:	07d0      	lsls	r0, r2, #31
 8013556:	d404      	bmi.n	8013562 <_fflush_r+0x3a>
 8013558:	0599      	lsls	r1, r3, #22
 801355a:	d402      	bmi.n	8013562 <_fflush_r+0x3a>
 801355c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801355e:	f7ff fcd0 	bl	8012f02 <__retarget_lock_acquire_recursive>
 8013562:	4628      	mov	r0, r5
 8013564:	4621      	mov	r1, r4
 8013566:	f7ff ff59 	bl	801341c <__sflush_r>
 801356a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801356c:	07da      	lsls	r2, r3, #31
 801356e:	4605      	mov	r5, r0
 8013570:	d4e0      	bmi.n	8013534 <_fflush_r+0xc>
 8013572:	89a3      	ldrh	r3, [r4, #12]
 8013574:	059b      	lsls	r3, r3, #22
 8013576:	d4dd      	bmi.n	8013534 <_fflush_r+0xc>
 8013578:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801357a:	f7ff fcc3 	bl	8012f04 <__retarget_lock_release_recursive>
 801357e:	e7d9      	b.n	8013534 <_fflush_r+0xc>
 8013580:	4b05      	ldr	r3, [pc, #20]	; (8013598 <_fflush_r+0x70>)
 8013582:	429c      	cmp	r4, r3
 8013584:	d101      	bne.n	801358a <_fflush_r+0x62>
 8013586:	68ac      	ldr	r4, [r5, #8]
 8013588:	e7df      	b.n	801354a <_fflush_r+0x22>
 801358a:	4b04      	ldr	r3, [pc, #16]	; (801359c <_fflush_r+0x74>)
 801358c:	429c      	cmp	r4, r3
 801358e:	bf08      	it	eq
 8013590:	68ec      	ldreq	r4, [r5, #12]
 8013592:	e7da      	b.n	801354a <_fflush_r+0x22>
 8013594:	08013e9c 	.word	0x08013e9c
 8013598:	08013ebc 	.word	0x08013ebc
 801359c:	08013e7c 	.word	0x08013e7c

080135a0 <std>:
 80135a0:	2300      	movs	r3, #0
 80135a2:	b510      	push	{r4, lr}
 80135a4:	4604      	mov	r4, r0
 80135a6:	e9c0 3300 	strd	r3, r3, [r0]
 80135aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80135ae:	6083      	str	r3, [r0, #8]
 80135b0:	8181      	strh	r1, [r0, #12]
 80135b2:	6643      	str	r3, [r0, #100]	; 0x64
 80135b4:	81c2      	strh	r2, [r0, #14]
 80135b6:	6183      	str	r3, [r0, #24]
 80135b8:	4619      	mov	r1, r3
 80135ba:	2208      	movs	r2, #8
 80135bc:	305c      	adds	r0, #92	; 0x5c
 80135be:	f7fd fc13 	bl	8010de8 <memset>
 80135c2:	4b05      	ldr	r3, [pc, #20]	; (80135d8 <std+0x38>)
 80135c4:	6263      	str	r3, [r4, #36]	; 0x24
 80135c6:	4b05      	ldr	r3, [pc, #20]	; (80135dc <std+0x3c>)
 80135c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80135ca:	4b05      	ldr	r3, [pc, #20]	; (80135e0 <std+0x40>)
 80135cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80135ce:	4b05      	ldr	r3, [pc, #20]	; (80135e4 <std+0x44>)
 80135d0:	6224      	str	r4, [r4, #32]
 80135d2:	6323      	str	r3, [r4, #48]	; 0x30
 80135d4:	bd10      	pop	{r4, pc}
 80135d6:	bf00      	nop
 80135d8:	080138ed 	.word	0x080138ed
 80135dc:	0801390f 	.word	0x0801390f
 80135e0:	08013947 	.word	0x08013947
 80135e4:	0801396b 	.word	0x0801396b

080135e8 <_cleanup_r>:
 80135e8:	4901      	ldr	r1, [pc, #4]	; (80135f0 <_cleanup_r+0x8>)
 80135ea:	f000 b8af 	b.w	801374c <_fwalk_reent>
 80135ee:	bf00      	nop
 80135f0:	08013529 	.word	0x08013529

080135f4 <__sfmoreglue>:
 80135f4:	b570      	push	{r4, r5, r6, lr}
 80135f6:	2268      	movs	r2, #104	; 0x68
 80135f8:	1e4d      	subs	r5, r1, #1
 80135fa:	4355      	muls	r5, r2
 80135fc:	460e      	mov	r6, r1
 80135fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013602:	f7fd fc65 	bl	8010ed0 <_malloc_r>
 8013606:	4604      	mov	r4, r0
 8013608:	b140      	cbz	r0, 801361c <__sfmoreglue+0x28>
 801360a:	2100      	movs	r1, #0
 801360c:	e9c0 1600 	strd	r1, r6, [r0]
 8013610:	300c      	adds	r0, #12
 8013612:	60a0      	str	r0, [r4, #8]
 8013614:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013618:	f7fd fbe6 	bl	8010de8 <memset>
 801361c:	4620      	mov	r0, r4
 801361e:	bd70      	pop	{r4, r5, r6, pc}

08013620 <__sfp_lock_acquire>:
 8013620:	4801      	ldr	r0, [pc, #4]	; (8013628 <__sfp_lock_acquire+0x8>)
 8013622:	f7ff bc6e 	b.w	8012f02 <__retarget_lock_acquire_recursive>
 8013626:	bf00      	nop
 8013628:	24002109 	.word	0x24002109

0801362c <__sfp_lock_release>:
 801362c:	4801      	ldr	r0, [pc, #4]	; (8013634 <__sfp_lock_release+0x8>)
 801362e:	f7ff bc69 	b.w	8012f04 <__retarget_lock_release_recursive>
 8013632:	bf00      	nop
 8013634:	24002109 	.word	0x24002109

08013638 <__sinit_lock_acquire>:
 8013638:	4801      	ldr	r0, [pc, #4]	; (8013640 <__sinit_lock_acquire+0x8>)
 801363a:	f7ff bc62 	b.w	8012f02 <__retarget_lock_acquire_recursive>
 801363e:	bf00      	nop
 8013640:	2400210a 	.word	0x2400210a

08013644 <__sinit_lock_release>:
 8013644:	4801      	ldr	r0, [pc, #4]	; (801364c <__sinit_lock_release+0x8>)
 8013646:	f7ff bc5d 	b.w	8012f04 <__retarget_lock_release_recursive>
 801364a:	bf00      	nop
 801364c:	2400210a 	.word	0x2400210a

08013650 <__sinit>:
 8013650:	b510      	push	{r4, lr}
 8013652:	4604      	mov	r4, r0
 8013654:	f7ff fff0 	bl	8013638 <__sinit_lock_acquire>
 8013658:	69a3      	ldr	r3, [r4, #24]
 801365a:	b11b      	cbz	r3, 8013664 <__sinit+0x14>
 801365c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013660:	f7ff bff0 	b.w	8013644 <__sinit_lock_release>
 8013664:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013668:	6523      	str	r3, [r4, #80]	; 0x50
 801366a:	4b13      	ldr	r3, [pc, #76]	; (80136b8 <__sinit+0x68>)
 801366c:	4a13      	ldr	r2, [pc, #76]	; (80136bc <__sinit+0x6c>)
 801366e:	681b      	ldr	r3, [r3, #0]
 8013670:	62a2      	str	r2, [r4, #40]	; 0x28
 8013672:	42a3      	cmp	r3, r4
 8013674:	bf04      	itt	eq
 8013676:	2301      	moveq	r3, #1
 8013678:	61a3      	streq	r3, [r4, #24]
 801367a:	4620      	mov	r0, r4
 801367c:	f000 f820 	bl	80136c0 <__sfp>
 8013680:	6060      	str	r0, [r4, #4]
 8013682:	4620      	mov	r0, r4
 8013684:	f000 f81c 	bl	80136c0 <__sfp>
 8013688:	60a0      	str	r0, [r4, #8]
 801368a:	4620      	mov	r0, r4
 801368c:	f000 f818 	bl	80136c0 <__sfp>
 8013690:	2200      	movs	r2, #0
 8013692:	60e0      	str	r0, [r4, #12]
 8013694:	2104      	movs	r1, #4
 8013696:	6860      	ldr	r0, [r4, #4]
 8013698:	f7ff ff82 	bl	80135a0 <std>
 801369c:	68a0      	ldr	r0, [r4, #8]
 801369e:	2201      	movs	r2, #1
 80136a0:	2109      	movs	r1, #9
 80136a2:	f7ff ff7d 	bl	80135a0 <std>
 80136a6:	68e0      	ldr	r0, [r4, #12]
 80136a8:	2202      	movs	r2, #2
 80136aa:	2112      	movs	r1, #18
 80136ac:	f7ff ff78 	bl	80135a0 <std>
 80136b0:	2301      	movs	r3, #1
 80136b2:	61a3      	str	r3, [r4, #24]
 80136b4:	e7d2      	b.n	801365c <__sinit+0xc>
 80136b6:	bf00      	nop
 80136b8:	08013b04 	.word	0x08013b04
 80136bc:	080135e9 	.word	0x080135e9

080136c0 <__sfp>:
 80136c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80136c2:	4607      	mov	r7, r0
 80136c4:	f7ff ffac 	bl	8013620 <__sfp_lock_acquire>
 80136c8:	4b1e      	ldr	r3, [pc, #120]	; (8013744 <__sfp+0x84>)
 80136ca:	681e      	ldr	r6, [r3, #0]
 80136cc:	69b3      	ldr	r3, [r6, #24]
 80136ce:	b913      	cbnz	r3, 80136d6 <__sfp+0x16>
 80136d0:	4630      	mov	r0, r6
 80136d2:	f7ff ffbd 	bl	8013650 <__sinit>
 80136d6:	3648      	adds	r6, #72	; 0x48
 80136d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80136dc:	3b01      	subs	r3, #1
 80136de:	d503      	bpl.n	80136e8 <__sfp+0x28>
 80136e0:	6833      	ldr	r3, [r6, #0]
 80136e2:	b30b      	cbz	r3, 8013728 <__sfp+0x68>
 80136e4:	6836      	ldr	r6, [r6, #0]
 80136e6:	e7f7      	b.n	80136d8 <__sfp+0x18>
 80136e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80136ec:	b9d5      	cbnz	r5, 8013724 <__sfp+0x64>
 80136ee:	4b16      	ldr	r3, [pc, #88]	; (8013748 <__sfp+0x88>)
 80136f0:	60e3      	str	r3, [r4, #12]
 80136f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80136f6:	6665      	str	r5, [r4, #100]	; 0x64
 80136f8:	f7ff fc02 	bl	8012f00 <__retarget_lock_init_recursive>
 80136fc:	f7ff ff96 	bl	801362c <__sfp_lock_release>
 8013700:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013704:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013708:	6025      	str	r5, [r4, #0]
 801370a:	61a5      	str	r5, [r4, #24]
 801370c:	2208      	movs	r2, #8
 801370e:	4629      	mov	r1, r5
 8013710:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013714:	f7fd fb68 	bl	8010de8 <memset>
 8013718:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801371c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013720:	4620      	mov	r0, r4
 8013722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013724:	3468      	adds	r4, #104	; 0x68
 8013726:	e7d9      	b.n	80136dc <__sfp+0x1c>
 8013728:	2104      	movs	r1, #4
 801372a:	4638      	mov	r0, r7
 801372c:	f7ff ff62 	bl	80135f4 <__sfmoreglue>
 8013730:	4604      	mov	r4, r0
 8013732:	6030      	str	r0, [r6, #0]
 8013734:	2800      	cmp	r0, #0
 8013736:	d1d5      	bne.n	80136e4 <__sfp+0x24>
 8013738:	f7ff ff78 	bl	801362c <__sfp_lock_release>
 801373c:	230c      	movs	r3, #12
 801373e:	603b      	str	r3, [r7, #0]
 8013740:	e7ee      	b.n	8013720 <__sfp+0x60>
 8013742:	bf00      	nop
 8013744:	08013b04 	.word	0x08013b04
 8013748:	ffff0001 	.word	0xffff0001

0801374c <_fwalk_reent>:
 801374c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013750:	4606      	mov	r6, r0
 8013752:	4688      	mov	r8, r1
 8013754:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013758:	2700      	movs	r7, #0
 801375a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801375e:	f1b9 0901 	subs.w	r9, r9, #1
 8013762:	d505      	bpl.n	8013770 <_fwalk_reent+0x24>
 8013764:	6824      	ldr	r4, [r4, #0]
 8013766:	2c00      	cmp	r4, #0
 8013768:	d1f7      	bne.n	801375a <_fwalk_reent+0xe>
 801376a:	4638      	mov	r0, r7
 801376c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013770:	89ab      	ldrh	r3, [r5, #12]
 8013772:	2b01      	cmp	r3, #1
 8013774:	d907      	bls.n	8013786 <_fwalk_reent+0x3a>
 8013776:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801377a:	3301      	adds	r3, #1
 801377c:	d003      	beq.n	8013786 <_fwalk_reent+0x3a>
 801377e:	4629      	mov	r1, r5
 8013780:	4630      	mov	r0, r6
 8013782:	47c0      	blx	r8
 8013784:	4307      	orrs	r7, r0
 8013786:	3568      	adds	r5, #104	; 0x68
 8013788:	e7e9      	b.n	801375e <_fwalk_reent+0x12>

0801378a <__swhatbuf_r>:
 801378a:	b570      	push	{r4, r5, r6, lr}
 801378c:	460e      	mov	r6, r1
 801378e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013792:	2900      	cmp	r1, #0
 8013794:	b096      	sub	sp, #88	; 0x58
 8013796:	4614      	mov	r4, r2
 8013798:	461d      	mov	r5, r3
 801379a:	da08      	bge.n	80137ae <__swhatbuf_r+0x24>
 801379c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80137a0:	2200      	movs	r2, #0
 80137a2:	602a      	str	r2, [r5, #0]
 80137a4:	061a      	lsls	r2, r3, #24
 80137a6:	d410      	bmi.n	80137ca <__swhatbuf_r+0x40>
 80137a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80137ac:	e00e      	b.n	80137cc <__swhatbuf_r+0x42>
 80137ae:	466a      	mov	r2, sp
 80137b0:	f000 f902 	bl	80139b8 <_fstat_r>
 80137b4:	2800      	cmp	r0, #0
 80137b6:	dbf1      	blt.n	801379c <__swhatbuf_r+0x12>
 80137b8:	9a01      	ldr	r2, [sp, #4]
 80137ba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80137be:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80137c2:	425a      	negs	r2, r3
 80137c4:	415a      	adcs	r2, r3
 80137c6:	602a      	str	r2, [r5, #0]
 80137c8:	e7ee      	b.n	80137a8 <__swhatbuf_r+0x1e>
 80137ca:	2340      	movs	r3, #64	; 0x40
 80137cc:	2000      	movs	r0, #0
 80137ce:	6023      	str	r3, [r4, #0]
 80137d0:	b016      	add	sp, #88	; 0x58
 80137d2:	bd70      	pop	{r4, r5, r6, pc}

080137d4 <__smakebuf_r>:
 80137d4:	898b      	ldrh	r3, [r1, #12]
 80137d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80137d8:	079d      	lsls	r5, r3, #30
 80137da:	4606      	mov	r6, r0
 80137dc:	460c      	mov	r4, r1
 80137de:	d507      	bpl.n	80137f0 <__smakebuf_r+0x1c>
 80137e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80137e4:	6023      	str	r3, [r4, #0]
 80137e6:	6123      	str	r3, [r4, #16]
 80137e8:	2301      	movs	r3, #1
 80137ea:	6163      	str	r3, [r4, #20]
 80137ec:	b002      	add	sp, #8
 80137ee:	bd70      	pop	{r4, r5, r6, pc}
 80137f0:	ab01      	add	r3, sp, #4
 80137f2:	466a      	mov	r2, sp
 80137f4:	f7ff ffc9 	bl	801378a <__swhatbuf_r>
 80137f8:	9900      	ldr	r1, [sp, #0]
 80137fa:	4605      	mov	r5, r0
 80137fc:	4630      	mov	r0, r6
 80137fe:	f7fd fb67 	bl	8010ed0 <_malloc_r>
 8013802:	b948      	cbnz	r0, 8013818 <__smakebuf_r+0x44>
 8013804:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013808:	059a      	lsls	r2, r3, #22
 801380a:	d4ef      	bmi.n	80137ec <__smakebuf_r+0x18>
 801380c:	f023 0303 	bic.w	r3, r3, #3
 8013810:	f043 0302 	orr.w	r3, r3, #2
 8013814:	81a3      	strh	r3, [r4, #12]
 8013816:	e7e3      	b.n	80137e0 <__smakebuf_r+0xc>
 8013818:	4b0d      	ldr	r3, [pc, #52]	; (8013850 <__smakebuf_r+0x7c>)
 801381a:	62b3      	str	r3, [r6, #40]	; 0x28
 801381c:	89a3      	ldrh	r3, [r4, #12]
 801381e:	6020      	str	r0, [r4, #0]
 8013820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013824:	81a3      	strh	r3, [r4, #12]
 8013826:	9b00      	ldr	r3, [sp, #0]
 8013828:	6163      	str	r3, [r4, #20]
 801382a:	9b01      	ldr	r3, [sp, #4]
 801382c:	6120      	str	r0, [r4, #16]
 801382e:	b15b      	cbz	r3, 8013848 <__smakebuf_r+0x74>
 8013830:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013834:	4630      	mov	r0, r6
 8013836:	f000 f8d1 	bl	80139dc <_isatty_r>
 801383a:	b128      	cbz	r0, 8013848 <__smakebuf_r+0x74>
 801383c:	89a3      	ldrh	r3, [r4, #12]
 801383e:	f023 0303 	bic.w	r3, r3, #3
 8013842:	f043 0301 	orr.w	r3, r3, #1
 8013846:	81a3      	strh	r3, [r4, #12]
 8013848:	89a0      	ldrh	r0, [r4, #12]
 801384a:	4305      	orrs	r5, r0
 801384c:	81a5      	strh	r5, [r4, #12]
 801384e:	e7cd      	b.n	80137ec <__smakebuf_r+0x18>
 8013850:	080135e9 	.word	0x080135e9

08013854 <_malloc_usable_size_r>:
 8013854:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013858:	1f18      	subs	r0, r3, #4
 801385a:	2b00      	cmp	r3, #0
 801385c:	bfbc      	itt	lt
 801385e:	580b      	ldrlt	r3, [r1, r0]
 8013860:	18c0      	addlt	r0, r0, r3
 8013862:	4770      	bx	lr

08013864 <_raise_r>:
 8013864:	291f      	cmp	r1, #31
 8013866:	b538      	push	{r3, r4, r5, lr}
 8013868:	4604      	mov	r4, r0
 801386a:	460d      	mov	r5, r1
 801386c:	d904      	bls.n	8013878 <_raise_r+0x14>
 801386e:	2316      	movs	r3, #22
 8013870:	6003      	str	r3, [r0, #0]
 8013872:	f04f 30ff 	mov.w	r0, #4294967295
 8013876:	bd38      	pop	{r3, r4, r5, pc}
 8013878:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801387a:	b112      	cbz	r2, 8013882 <_raise_r+0x1e>
 801387c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013880:	b94b      	cbnz	r3, 8013896 <_raise_r+0x32>
 8013882:	4620      	mov	r0, r4
 8013884:	f000 f830 	bl	80138e8 <_getpid_r>
 8013888:	462a      	mov	r2, r5
 801388a:	4601      	mov	r1, r0
 801388c:	4620      	mov	r0, r4
 801388e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013892:	f000 b817 	b.w	80138c4 <_kill_r>
 8013896:	2b01      	cmp	r3, #1
 8013898:	d00a      	beq.n	80138b0 <_raise_r+0x4c>
 801389a:	1c59      	adds	r1, r3, #1
 801389c:	d103      	bne.n	80138a6 <_raise_r+0x42>
 801389e:	2316      	movs	r3, #22
 80138a0:	6003      	str	r3, [r0, #0]
 80138a2:	2001      	movs	r0, #1
 80138a4:	e7e7      	b.n	8013876 <_raise_r+0x12>
 80138a6:	2400      	movs	r4, #0
 80138a8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80138ac:	4628      	mov	r0, r5
 80138ae:	4798      	blx	r3
 80138b0:	2000      	movs	r0, #0
 80138b2:	e7e0      	b.n	8013876 <_raise_r+0x12>

080138b4 <raise>:
 80138b4:	4b02      	ldr	r3, [pc, #8]	; (80138c0 <raise+0xc>)
 80138b6:	4601      	mov	r1, r0
 80138b8:	6818      	ldr	r0, [r3, #0]
 80138ba:	f7ff bfd3 	b.w	8013864 <_raise_r>
 80138be:	bf00      	nop
 80138c0:	2400019c 	.word	0x2400019c

080138c4 <_kill_r>:
 80138c4:	b538      	push	{r3, r4, r5, lr}
 80138c6:	4d07      	ldr	r5, [pc, #28]	; (80138e4 <_kill_r+0x20>)
 80138c8:	2300      	movs	r3, #0
 80138ca:	4604      	mov	r4, r0
 80138cc:	4608      	mov	r0, r1
 80138ce:	4611      	mov	r1, r2
 80138d0:	602b      	str	r3, [r5, #0]
 80138d2:	f7ed fdb1 	bl	8001438 <_kill>
 80138d6:	1c43      	adds	r3, r0, #1
 80138d8:	d102      	bne.n	80138e0 <_kill_r+0x1c>
 80138da:	682b      	ldr	r3, [r5, #0]
 80138dc:	b103      	cbz	r3, 80138e0 <_kill_r+0x1c>
 80138de:	6023      	str	r3, [r4, #0]
 80138e0:	bd38      	pop	{r3, r4, r5, pc}
 80138e2:	bf00      	nop
 80138e4:	24002104 	.word	0x24002104

080138e8 <_getpid_r>:
 80138e8:	f7ed bd9e 	b.w	8001428 <_getpid>

080138ec <__sread>:
 80138ec:	b510      	push	{r4, lr}
 80138ee:	460c      	mov	r4, r1
 80138f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80138f4:	f000 f894 	bl	8013a20 <_read_r>
 80138f8:	2800      	cmp	r0, #0
 80138fa:	bfab      	itete	ge
 80138fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80138fe:	89a3      	ldrhlt	r3, [r4, #12]
 8013900:	181b      	addge	r3, r3, r0
 8013902:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013906:	bfac      	ite	ge
 8013908:	6563      	strge	r3, [r4, #84]	; 0x54
 801390a:	81a3      	strhlt	r3, [r4, #12]
 801390c:	bd10      	pop	{r4, pc}

0801390e <__swrite>:
 801390e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013912:	461f      	mov	r7, r3
 8013914:	898b      	ldrh	r3, [r1, #12]
 8013916:	05db      	lsls	r3, r3, #23
 8013918:	4605      	mov	r5, r0
 801391a:	460c      	mov	r4, r1
 801391c:	4616      	mov	r6, r2
 801391e:	d505      	bpl.n	801392c <__swrite+0x1e>
 8013920:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013924:	2302      	movs	r3, #2
 8013926:	2200      	movs	r2, #0
 8013928:	f000 f868 	bl	80139fc <_lseek_r>
 801392c:	89a3      	ldrh	r3, [r4, #12]
 801392e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013932:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013936:	81a3      	strh	r3, [r4, #12]
 8013938:	4632      	mov	r2, r6
 801393a:	463b      	mov	r3, r7
 801393c:	4628      	mov	r0, r5
 801393e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013942:	f000 b817 	b.w	8013974 <_write_r>

08013946 <__sseek>:
 8013946:	b510      	push	{r4, lr}
 8013948:	460c      	mov	r4, r1
 801394a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801394e:	f000 f855 	bl	80139fc <_lseek_r>
 8013952:	1c43      	adds	r3, r0, #1
 8013954:	89a3      	ldrh	r3, [r4, #12]
 8013956:	bf15      	itete	ne
 8013958:	6560      	strne	r0, [r4, #84]	; 0x54
 801395a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801395e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013962:	81a3      	strheq	r3, [r4, #12]
 8013964:	bf18      	it	ne
 8013966:	81a3      	strhne	r3, [r4, #12]
 8013968:	bd10      	pop	{r4, pc}

0801396a <__sclose>:
 801396a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801396e:	f000 b813 	b.w	8013998 <_close_r>
	...

08013974 <_write_r>:
 8013974:	b538      	push	{r3, r4, r5, lr}
 8013976:	4d07      	ldr	r5, [pc, #28]	; (8013994 <_write_r+0x20>)
 8013978:	4604      	mov	r4, r0
 801397a:	4608      	mov	r0, r1
 801397c:	4611      	mov	r1, r2
 801397e:	2200      	movs	r2, #0
 8013980:	602a      	str	r2, [r5, #0]
 8013982:	461a      	mov	r2, r3
 8013984:	f7ed fd8f 	bl	80014a6 <_write>
 8013988:	1c43      	adds	r3, r0, #1
 801398a:	d102      	bne.n	8013992 <_write_r+0x1e>
 801398c:	682b      	ldr	r3, [r5, #0]
 801398e:	b103      	cbz	r3, 8013992 <_write_r+0x1e>
 8013990:	6023      	str	r3, [r4, #0]
 8013992:	bd38      	pop	{r3, r4, r5, pc}
 8013994:	24002104 	.word	0x24002104

08013998 <_close_r>:
 8013998:	b538      	push	{r3, r4, r5, lr}
 801399a:	4d06      	ldr	r5, [pc, #24]	; (80139b4 <_close_r+0x1c>)
 801399c:	2300      	movs	r3, #0
 801399e:	4604      	mov	r4, r0
 80139a0:	4608      	mov	r0, r1
 80139a2:	602b      	str	r3, [r5, #0]
 80139a4:	f7ed fd9b 	bl	80014de <_close>
 80139a8:	1c43      	adds	r3, r0, #1
 80139aa:	d102      	bne.n	80139b2 <_close_r+0x1a>
 80139ac:	682b      	ldr	r3, [r5, #0]
 80139ae:	b103      	cbz	r3, 80139b2 <_close_r+0x1a>
 80139b0:	6023      	str	r3, [r4, #0]
 80139b2:	bd38      	pop	{r3, r4, r5, pc}
 80139b4:	24002104 	.word	0x24002104

080139b8 <_fstat_r>:
 80139b8:	b538      	push	{r3, r4, r5, lr}
 80139ba:	4d07      	ldr	r5, [pc, #28]	; (80139d8 <_fstat_r+0x20>)
 80139bc:	2300      	movs	r3, #0
 80139be:	4604      	mov	r4, r0
 80139c0:	4608      	mov	r0, r1
 80139c2:	4611      	mov	r1, r2
 80139c4:	602b      	str	r3, [r5, #0]
 80139c6:	f7ed fd96 	bl	80014f6 <_fstat>
 80139ca:	1c43      	adds	r3, r0, #1
 80139cc:	d102      	bne.n	80139d4 <_fstat_r+0x1c>
 80139ce:	682b      	ldr	r3, [r5, #0]
 80139d0:	b103      	cbz	r3, 80139d4 <_fstat_r+0x1c>
 80139d2:	6023      	str	r3, [r4, #0]
 80139d4:	bd38      	pop	{r3, r4, r5, pc}
 80139d6:	bf00      	nop
 80139d8:	24002104 	.word	0x24002104

080139dc <_isatty_r>:
 80139dc:	b538      	push	{r3, r4, r5, lr}
 80139de:	4d06      	ldr	r5, [pc, #24]	; (80139f8 <_isatty_r+0x1c>)
 80139e0:	2300      	movs	r3, #0
 80139e2:	4604      	mov	r4, r0
 80139e4:	4608      	mov	r0, r1
 80139e6:	602b      	str	r3, [r5, #0]
 80139e8:	f7ed fd95 	bl	8001516 <_isatty>
 80139ec:	1c43      	adds	r3, r0, #1
 80139ee:	d102      	bne.n	80139f6 <_isatty_r+0x1a>
 80139f0:	682b      	ldr	r3, [r5, #0]
 80139f2:	b103      	cbz	r3, 80139f6 <_isatty_r+0x1a>
 80139f4:	6023      	str	r3, [r4, #0]
 80139f6:	bd38      	pop	{r3, r4, r5, pc}
 80139f8:	24002104 	.word	0x24002104

080139fc <_lseek_r>:
 80139fc:	b538      	push	{r3, r4, r5, lr}
 80139fe:	4d07      	ldr	r5, [pc, #28]	; (8013a1c <_lseek_r+0x20>)
 8013a00:	4604      	mov	r4, r0
 8013a02:	4608      	mov	r0, r1
 8013a04:	4611      	mov	r1, r2
 8013a06:	2200      	movs	r2, #0
 8013a08:	602a      	str	r2, [r5, #0]
 8013a0a:	461a      	mov	r2, r3
 8013a0c:	f7ed fd8e 	bl	800152c <_lseek>
 8013a10:	1c43      	adds	r3, r0, #1
 8013a12:	d102      	bne.n	8013a1a <_lseek_r+0x1e>
 8013a14:	682b      	ldr	r3, [r5, #0]
 8013a16:	b103      	cbz	r3, 8013a1a <_lseek_r+0x1e>
 8013a18:	6023      	str	r3, [r4, #0]
 8013a1a:	bd38      	pop	{r3, r4, r5, pc}
 8013a1c:	24002104 	.word	0x24002104

08013a20 <_read_r>:
 8013a20:	b538      	push	{r3, r4, r5, lr}
 8013a22:	4d07      	ldr	r5, [pc, #28]	; (8013a40 <_read_r+0x20>)
 8013a24:	4604      	mov	r4, r0
 8013a26:	4608      	mov	r0, r1
 8013a28:	4611      	mov	r1, r2
 8013a2a:	2200      	movs	r2, #0
 8013a2c:	602a      	str	r2, [r5, #0]
 8013a2e:	461a      	mov	r2, r3
 8013a30:	f7ed fd1c 	bl	800146c <_read>
 8013a34:	1c43      	adds	r3, r0, #1
 8013a36:	d102      	bne.n	8013a3e <_read_r+0x1e>
 8013a38:	682b      	ldr	r3, [r5, #0]
 8013a3a:	b103      	cbz	r3, 8013a3e <_read_r+0x1e>
 8013a3c:	6023      	str	r3, [r4, #0]
 8013a3e:	bd38      	pop	{r3, r4, r5, pc}
 8013a40:	24002104 	.word	0x24002104

08013a44 <_init>:
 8013a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a46:	bf00      	nop
 8013a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013a4a:	bc08      	pop	{r3}
 8013a4c:	469e      	mov	lr, r3
 8013a4e:	4770      	bx	lr

08013a50 <_fini>:
 8013a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a52:	bf00      	nop
 8013a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013a56:	bc08      	pop	{r3}
 8013a58:	469e      	mov	lr, r3
 8013a5a:	4770      	bx	lr
